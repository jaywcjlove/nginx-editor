{"version":3,"file":"static/js/monaco-editor-vendor.c0aa0059.9a1be4ae.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/browser/config/domFontInfo.js","../node_modules/monaco-editor/esm/vs/editor/browser/config/migrateOptions.js","../node_modules/monaco-editor/esm/vs/editor/browser/config/editorConfiguration.js","../node_modules/monaco-editor/esm/vs/editor/browser/config/elementSizeObserver.js","../node_modules/monaco-editor/esm/vs/editor/browser/config/charWidthReader.js","../node_modules/monaco-editor/esm/vs/editor/browser/config/fontMeasurements.js","../node_modules/monaco-editor/esm/vs/editor/browser/config/tabFocus.js","../node_modules/monaco-editor/esm/vs/editor/browser/controller/mouseTarget.js","../node_modules/monaco-editor/esm/vs/editor/browser/controller/mouseHandler.js","../node_modules/monaco-editor/esm/vs/editor/browser/controller/pointerHandler.js","../node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaHandler.js","../node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaInput.js","../node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaState.js","../node_modules/monaco-editor/esm/vs/editor/browser/coreCommands.js","../node_modules/monaco-editor/esm/vs/editor/browser/dnd.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { FastDomNode } from '../../../base/browser/fastDomNode.js';\nexport function applyFontInfo(domNode, fontInfo) {\n    if (domNode instanceof FastDomNode) {\n        domNode.setFontFamily(fontInfo.getMassagedFontFamily());\n        domNode.setFontWeight(fontInfo.fontWeight);\n        domNode.setFontSize(fontInfo.fontSize);\n        domNode.setFontFeatureSettings(fontInfo.fontFeatureSettings);\n        domNode.setFontVariationSettings(fontInfo.fontVariationSettings);\n        domNode.setLineHeight(fontInfo.lineHeight);\n        domNode.setLetterSpacing(fontInfo.letterSpacing);\n    }\n    else {\n        domNode.style.fontFamily = fontInfo.getMassagedFontFamily();\n        domNode.style.fontWeight = fontInfo.fontWeight;\n        domNode.style.fontSize = fontInfo.fontSize + 'px';\n        domNode.style.fontFeatureSettings = fontInfo.fontFeatureSettings;\n        domNode.style.fontVariationSettings = fontInfo.fontVariationSettings;\n        domNode.style.lineHeight = fontInfo.lineHeight + 'px';\n        domNode.style.letterSpacing = fontInfo.letterSpacing + 'px';\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass EditorSettingMigration {\n    constructor(key, migrate) {\n        this.key = key;\n        this.migrate = migrate;\n    }\n    apply(options) {\n        const value = EditorSettingMigration._read(options, this.key);\n        const read = (key) => EditorSettingMigration._read(options, key);\n        const write = (key, value) => EditorSettingMigration._write(options, key, value);\n        this.migrate(value, read, write);\n    }\n    static _read(source, key) {\n        if (typeof source === 'undefined') {\n            return undefined;\n        }\n        const firstDotIndex = key.indexOf('.');\n        if (firstDotIndex >= 0) {\n            const firstSegment = key.substring(0, firstDotIndex);\n            return this._read(source[firstSegment], key.substring(firstDotIndex + 1));\n        }\n        return source[key];\n    }\n    static _write(target, key, value) {\n        const firstDotIndex = key.indexOf('.');\n        if (firstDotIndex >= 0) {\n            const firstSegment = key.substring(0, firstDotIndex);\n            target[firstSegment] = target[firstSegment] || {};\n            this._write(target[firstSegment], key.substring(firstDotIndex + 1), value);\n            return;\n        }\n        target[key] = value;\n    }\n}\nEditorSettingMigration.items = [];\nexport { EditorSettingMigration };\nfunction registerEditorSettingMigration(key, migrate) {\n    EditorSettingMigration.items.push(new EditorSettingMigration(key, migrate));\n}\nfunction registerSimpleEditorSettingMigration(key, values) {\n    registerEditorSettingMigration(key, (value, read, write) => {\n        if (typeof value !== 'undefined') {\n            for (const [oldValue, newValue] of values) {\n                if (value === oldValue) {\n                    write(key, newValue);\n                    return;\n                }\n            }\n        }\n    });\n}\n/**\n * Compatibility with old options\n */\nexport function migrateOptions(options) {\n    EditorSettingMigration.items.forEach(migration => migration.apply(options));\n}\nregisterSimpleEditorSettingMigration('wordWrap', [[true, 'on'], [false, 'off']]);\nregisterSimpleEditorSettingMigration('lineNumbers', [[true, 'on'], [false, 'off']]);\nregisterSimpleEditorSettingMigration('cursorBlinking', [['visible', 'solid']]);\nregisterSimpleEditorSettingMigration('renderWhitespace', [[true, 'boundary'], [false, 'none']]);\nregisterSimpleEditorSettingMigration('renderLineHighlight', [[true, 'line'], [false, 'none']]);\nregisterSimpleEditorSettingMigration('acceptSuggestionOnEnter', [[true, 'on'], [false, 'off']]);\nregisterSimpleEditorSettingMigration('tabCompletion', [[false, 'off'], [true, 'onlySnippets']]);\nregisterSimpleEditorSettingMigration('hover', [[true, { enabled: true }], [false, { enabled: false }]]);\nregisterSimpleEditorSettingMigration('parameterHints', [[true, { enabled: true }], [false, { enabled: false }]]);\nregisterSimpleEditorSettingMigration('autoIndent', [[false, 'advanced'], [true, 'full']]);\nregisterSimpleEditorSettingMigration('matchBrackets', [[true, 'always'], [false, 'never']]);\nregisterSimpleEditorSettingMigration('renderFinalNewline', [[true, 'on'], [false, 'off']]);\nregisterSimpleEditorSettingMigration('cursorSmoothCaretAnimation', [[true, 'on'], [false, 'off']]);\nregisterEditorSettingMigration('autoClosingBrackets', (value, read, write) => {\n    if (value === false) {\n        write('autoClosingBrackets', 'never');\n        if (typeof read('autoClosingQuotes') === 'undefined') {\n            write('autoClosingQuotes', 'never');\n        }\n        if (typeof read('autoSurround') === 'undefined') {\n            write('autoSurround', 'never');\n        }\n    }\n});\nregisterEditorSettingMigration('renderIndentGuides', (value, read, write) => {\n    if (typeof value !== 'undefined') {\n        write('renderIndentGuides', undefined);\n        if (typeof read('guides.indentation') === 'undefined') {\n            write('guides.indentation', !!value);\n        }\n    }\n});\nregisterEditorSettingMigration('highlightActiveIndentGuide', (value, read, write) => {\n    if (typeof value !== 'undefined') {\n        write('highlightActiveIndentGuide', undefined);\n        if (typeof read('guides.highlightActiveIndentation') === 'undefined') {\n            write('guides.highlightActiveIndentation', !!value);\n        }\n    }\n});\nconst suggestFilteredTypesMapping = {\n    method: 'showMethods',\n    function: 'showFunctions',\n    constructor: 'showConstructors',\n    deprecated: 'showDeprecated',\n    field: 'showFields',\n    variable: 'showVariables',\n    class: 'showClasses',\n    struct: 'showStructs',\n    interface: 'showInterfaces',\n    module: 'showModules',\n    property: 'showProperties',\n    event: 'showEvents',\n    operator: 'showOperators',\n    unit: 'showUnits',\n    value: 'showValues',\n    constant: 'showConstants',\n    enum: 'showEnums',\n    enumMember: 'showEnumMembers',\n    keyword: 'showKeywords',\n    text: 'showWords',\n    color: 'showColors',\n    file: 'showFiles',\n    reference: 'showReferences',\n    folder: 'showFolders',\n    typeParameter: 'showTypeParameters',\n    snippet: 'showSnippets',\n};\nregisterEditorSettingMigration('suggest.filteredTypes', (value, read, write) => {\n    if (value && typeof value === 'object') {\n        for (const entry of Object.entries(suggestFilteredTypesMapping)) {\n            const v = value[entry[0]];\n            if (v === false) {\n                if (typeof read(`suggest.${entry[1]}`) === 'undefined') {\n                    write(`suggest.${entry[1]}`, false);\n                }\n            }\n        }\n        write('suggest.filteredTypes', undefined);\n    }\n});\nregisterEditorSettingMigration('quickSuggestions', (input, read, write) => {\n    if (typeof input === 'boolean') {\n        const value = input ? 'on' : 'off';\n        const newValue = { comments: value, strings: value, other: value };\n        write('quickSuggestions', newValue);\n    }\n});\n// Sticky Scroll\nregisterEditorSettingMigration('experimental.stickyScroll.enabled', (value, read, write) => {\n    if (typeof value === 'boolean') {\n        write('experimental.stickyScroll.enabled', undefined);\n        if (typeof read('stickyScroll.enabled') === 'undefined') {\n            write('stickyScroll.enabled', value);\n        }\n    }\n});\nregisterEditorSettingMigration('experimental.stickyScroll.maxLineCount', (value, read, write) => {\n    if (typeof value === 'number') {\n        write('experimental.stickyScroll.maxLineCount', undefined);\n        if (typeof read('stickyScroll.maxLineCount') === 'undefined') {\n            write('stickyScroll.maxLineCount', value);\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as browser from '../../../base/browser/browser.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { ElementSizeObserver } from './elementSizeObserver.js';\nimport { FontMeasurements } from './fontMeasurements.js';\nimport { migrateOptions } from './migrateOptions.js';\nimport { TabFocus } from './tabFocus.js';\nimport { ComputeOptionsMemory, ConfigurationChangedEvent, editorOptionsRegistry } from '../../common/config/editorOptions.js';\nimport { EditorZoom } from '../../common/config/editorZoom.js';\nimport { BareFontInfo } from '../../common/config/fontInfo.js';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\nlet EditorConfiguration = class EditorConfiguration extends Disposable {\n    constructor(isSimpleWidget, options, container, _accessibilityService) {\n        super();\n        this._accessibilityService = _accessibilityService;\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._onDidChangeFast = this._register(new Emitter());\n        this.onDidChangeFast = this._onDidChangeFast.event;\n        this._isDominatedByLongLines = false;\n        this._viewLineCount = 1;\n        this._lineNumbersDigitCount = 1;\n        this._reservedHeight = 0;\n        this._computeOptionsMemory = new ComputeOptionsMemory();\n        this.isSimpleWidget = isSimpleWidget;\n        this._containerObserver = this._register(new ElementSizeObserver(container, options.dimension));\n        this._rawOptions = deepCloneAndMigrateOptions(options);\n        this._validatedOptions = EditorOptionsUtil.validateOptions(this._rawOptions);\n        this.options = this._computeOptions();\n        if (this.options.get(10 /* EditorOption.automaticLayout */)) {\n            this._containerObserver.startObserving();\n        }\n        this._register(EditorZoom.onDidChangeZoomLevel(() => this._recomputeOptions()));\n        this._register(TabFocus.onDidChangeTabFocus(() => this._recomputeOptions()));\n        this._register(this._containerObserver.onDidChange(() => this._recomputeOptions()));\n        this._register(FontMeasurements.onDidChange(() => this._recomputeOptions()));\n        this._register(browser.PixelRatio.onDidChange(() => this._recomputeOptions()));\n        this._register(this._accessibilityService.onDidChangeScreenReaderOptimized(() => this._recomputeOptions()));\n    }\n    _recomputeOptions() {\n        const newOptions = this._computeOptions();\n        const changeEvent = EditorOptionsUtil.checkEquals(this.options, newOptions);\n        if (changeEvent === null) {\n            // nothing changed!\n            return;\n        }\n        this.options = newOptions;\n        this._onDidChangeFast.fire(changeEvent);\n        this._onDidChange.fire(changeEvent);\n    }\n    _computeOptions() {\n        const partialEnv = this._readEnvConfiguration();\n        const bareFontInfo = BareFontInfo.createFromValidatedSettings(this._validatedOptions, partialEnv.pixelRatio, this.isSimpleWidget);\n        const fontInfo = this._readFontInfo(bareFontInfo);\n        const env = {\n            memory: this._computeOptionsMemory,\n            outerWidth: partialEnv.outerWidth,\n            outerHeight: partialEnv.outerHeight - this._reservedHeight,\n            fontInfo: fontInfo,\n            extraEditorClassName: partialEnv.extraEditorClassName,\n            isDominatedByLongLines: this._isDominatedByLongLines,\n            viewLineCount: this._viewLineCount,\n            lineNumbersDigitCount: this._lineNumbersDigitCount,\n            emptySelectionClipboard: partialEnv.emptySelectionClipboard,\n            pixelRatio: partialEnv.pixelRatio,\n            tabFocusMode: TabFocus.getTabFocusMode(\"editorFocus\" /* TabFocusContext.Editor */),\n            accessibilitySupport: partialEnv.accessibilitySupport\n        };\n        return EditorOptionsUtil.computeOptions(this._validatedOptions, env);\n    }\n    _readEnvConfiguration() {\n        return {\n            extraEditorClassName: getExtraEditorClassName(),\n            outerWidth: this._containerObserver.getWidth(),\n            outerHeight: this._containerObserver.getHeight(),\n            emptySelectionClipboard: browser.isWebKit || browser.isFirefox,\n            pixelRatio: browser.PixelRatio.value,\n            accessibilitySupport: (this._accessibilityService.isScreenReaderOptimized()\n                ? 2 /* AccessibilitySupport.Enabled */\n                : this._accessibilityService.getAccessibilitySupport())\n        };\n    }\n    _readFontInfo(bareFontInfo) {\n        return FontMeasurements.readFontInfo(bareFontInfo);\n    }\n    getRawOptions() {\n        return this._rawOptions;\n    }\n    updateOptions(_newOptions) {\n        const newOptions = deepCloneAndMigrateOptions(_newOptions);\n        const didChange = EditorOptionsUtil.applyUpdate(this._rawOptions, newOptions);\n        if (!didChange) {\n            return;\n        }\n        this._validatedOptions = EditorOptionsUtil.validateOptions(this._rawOptions);\n        this._recomputeOptions();\n    }\n    observeContainer(dimension) {\n        this._containerObserver.observe(dimension);\n    }\n    setIsDominatedByLongLines(isDominatedByLongLines) {\n        if (this._isDominatedByLongLines === isDominatedByLongLines) {\n            return;\n        }\n        this._isDominatedByLongLines = isDominatedByLongLines;\n        this._recomputeOptions();\n    }\n    setModelLineCount(modelLineCount) {\n        const lineNumbersDigitCount = digitCount(modelLineCount);\n        if (this._lineNumbersDigitCount === lineNumbersDigitCount) {\n            return;\n        }\n        this._lineNumbersDigitCount = lineNumbersDigitCount;\n        this._recomputeOptions();\n    }\n    setViewLineCount(viewLineCount) {\n        if (this._viewLineCount === viewLineCount) {\n            return;\n        }\n        this._viewLineCount = viewLineCount;\n        this._recomputeOptions();\n    }\n    setReservedHeight(reservedHeight) {\n        if (this._reservedHeight === reservedHeight) {\n            return;\n        }\n        this._reservedHeight = reservedHeight;\n        this._recomputeOptions();\n    }\n};\nEditorConfiguration = __decorate([\n    __param(3, IAccessibilityService)\n], EditorConfiguration);\nexport { EditorConfiguration };\nfunction digitCount(n) {\n    let r = 0;\n    while (n) {\n        n = Math.floor(n / 10);\n        r++;\n    }\n    return r ? r : 1;\n}\nfunction getExtraEditorClassName() {\n    let extra = '';\n    if (!browser.isSafari && !browser.isWebkitWebView) {\n        // Use user-select: none in all browsers except Safari and native macOS WebView\n        extra += 'no-user-select ';\n    }\n    if (browser.isSafari) {\n        // See https://github.com/microsoft/vscode/issues/108822\n        extra += 'no-minimap-shadow ';\n        extra += 'enable-user-select ';\n    }\n    if (platform.isMacintosh) {\n        extra += 'mac ';\n    }\n    return extra;\n}\nclass ValidatedEditorOptions {\n    constructor() {\n        this._values = [];\n    }\n    _read(option) {\n        return this._values[option];\n    }\n    get(id) {\n        return this._values[id];\n    }\n    _write(option, value) {\n        this._values[option] = value;\n    }\n}\nexport class ComputedEditorOptions {\n    constructor() {\n        this._values = [];\n    }\n    _read(id) {\n        if (id >= this._values.length) {\n            throw new Error('Cannot read uninitialized value');\n        }\n        return this._values[id];\n    }\n    get(id) {\n        return this._read(id);\n    }\n    _write(id, value) {\n        this._values[id] = value;\n    }\n}\nclass EditorOptionsUtil {\n    static validateOptions(options) {\n        const result = new ValidatedEditorOptions();\n        for (const editorOption of editorOptionsRegistry) {\n            const value = (editorOption.name === '_never_' ? undefined : options[editorOption.name]);\n            result._write(editorOption.id, editorOption.validate(value));\n        }\n        return result;\n    }\n    static computeOptions(options, env) {\n        const result = new ComputedEditorOptions();\n        for (const editorOption of editorOptionsRegistry) {\n            result._write(editorOption.id, editorOption.compute(env, result, options._read(editorOption.id)));\n        }\n        return result;\n    }\n    static _deepEquals(a, b) {\n        if (typeof a !== 'object' || typeof b !== 'object' || !a || !b) {\n            return a === b;\n        }\n        if (Array.isArray(a) || Array.isArray(b)) {\n            return (Array.isArray(a) && Array.isArray(b) ? arrays.equals(a, b) : false);\n        }\n        if (Object.keys(a).length !== Object.keys(b).length) {\n            return false;\n        }\n        for (const key in a) {\n            if (!EditorOptionsUtil._deepEquals(a[key], b[key])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static checkEquals(a, b) {\n        const result = [];\n        let somethingChanged = false;\n        for (const editorOption of editorOptionsRegistry) {\n            const changed = !EditorOptionsUtil._deepEquals(a._read(editorOption.id), b._read(editorOption.id));\n            result[editorOption.id] = changed;\n            if (changed) {\n                somethingChanged = true;\n            }\n        }\n        return (somethingChanged ? new ConfigurationChangedEvent(result) : null);\n    }\n    /**\n     * Returns true if something changed.\n     * Modifies `options`.\n    */\n    static applyUpdate(options, update) {\n        let changed = false;\n        for (const editorOption of editorOptionsRegistry) {\n            if (update.hasOwnProperty(editorOption.name)) {\n                const result = editorOption.applyUpdate(options[editorOption.name], update[editorOption.name]);\n                options[editorOption.name] = result.newValue;\n                changed = changed || result.didChange;\n            }\n        }\n        return changed;\n    }\n}\nfunction deepCloneAndMigrateOptions(_options) {\n    const options = objects.deepClone(_options);\n    migrateOptions(options);\n    return options;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Emitter } from '../../../base/common/event.js';\nexport class ElementSizeObserver extends Disposable {\n    constructor(referenceDomElement, dimension) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._referenceDomElement = referenceDomElement;\n        this._width = -1;\n        this._height = -1;\n        this._resizeObserver = null;\n        this.measureReferenceDomElement(false, dimension);\n    }\n    dispose() {\n        this.stopObserving();\n        super.dispose();\n    }\n    getWidth() {\n        return this._width;\n    }\n    getHeight() {\n        return this._height;\n    }\n    startObserving() {\n        if (!this._resizeObserver && this._referenceDomElement) {\n            this._resizeObserver = new ResizeObserver((entries) => {\n                if (entries && entries[0] && entries[0].contentRect) {\n                    this.observe({ width: entries[0].contentRect.width, height: entries[0].contentRect.height });\n                }\n                else {\n                    this.observe();\n                }\n            });\n            this._resizeObserver.observe(this._referenceDomElement);\n        }\n    }\n    stopObserving() {\n        if (this._resizeObserver) {\n            this._resizeObserver.disconnect();\n            this._resizeObserver = null;\n        }\n    }\n    observe(dimension) {\n        this.measureReferenceDomElement(true, dimension);\n    }\n    measureReferenceDomElement(emitEvent, dimension) {\n        let observedWidth = 0;\n        let observedHeight = 0;\n        if (dimension) {\n            observedWidth = dimension.width;\n            observedHeight = dimension.height;\n        }\n        else if (this._referenceDomElement) {\n            observedWidth = this._referenceDomElement.clientWidth;\n            observedHeight = this._referenceDomElement.clientHeight;\n        }\n        observedWidth = Math.max(5, observedWidth);\n        observedHeight = Math.max(5, observedHeight);\n        if (this._width !== observedWidth || this._height !== observedHeight) {\n            this._width = observedWidth;\n            this._height = observedHeight;\n            if (emitEvent) {\n                this._onDidChange.fire();\n            }\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { applyFontInfo } from './domFontInfo.js';\nexport class CharWidthRequest {\n    constructor(chr, type) {\n        this.chr = chr;\n        this.type = type;\n        this.width = 0;\n    }\n    fulfill(width) {\n        this.width = width;\n    }\n}\nclass DomCharWidthReader {\n    constructor(bareFontInfo, requests) {\n        this._bareFontInfo = bareFontInfo;\n        this._requests = requests;\n        this._container = null;\n        this._testElements = null;\n    }\n    read() {\n        // Create a test container with all these test elements\n        this._createDomElements();\n        // Add the container to the DOM\n        document.body.appendChild(this._container);\n        // Read character widths\n        this._readFromDomElements();\n        // Remove the container from the DOM\n        document.body.removeChild(this._container);\n        this._container = null;\n        this._testElements = null;\n    }\n    _createDomElements() {\n        const container = document.createElement('div');\n        container.style.position = 'absolute';\n        container.style.top = '-50000px';\n        container.style.width = '50000px';\n        const regularDomNode = document.createElement('div');\n        applyFontInfo(regularDomNode, this._bareFontInfo);\n        container.appendChild(regularDomNode);\n        const boldDomNode = document.createElement('div');\n        applyFontInfo(boldDomNode, this._bareFontInfo);\n        boldDomNode.style.fontWeight = 'bold';\n        container.appendChild(boldDomNode);\n        const italicDomNode = document.createElement('div');\n        applyFontInfo(italicDomNode, this._bareFontInfo);\n        italicDomNode.style.fontStyle = 'italic';\n        container.appendChild(italicDomNode);\n        const testElements = [];\n        for (const request of this._requests) {\n            let parent;\n            if (request.type === 0 /* CharWidthRequestType.Regular */) {\n                parent = regularDomNode;\n            }\n            if (request.type === 2 /* CharWidthRequestType.Bold */) {\n                parent = boldDomNode;\n            }\n            if (request.type === 1 /* CharWidthRequestType.Italic */) {\n                parent = italicDomNode;\n            }\n            parent.appendChild(document.createElement('br'));\n            const testElement = document.createElement('span');\n            DomCharWidthReader._render(testElement, request);\n            parent.appendChild(testElement);\n            testElements.push(testElement);\n        }\n        this._container = container;\n        this._testElements = testElements;\n    }\n    static _render(testElement, request) {\n        if (request.chr === ' ') {\n            let htmlString = '\\u00a0';\n            // Repeat character 256 (2^8) times\n            for (let i = 0; i < 8; i++) {\n                htmlString += htmlString;\n            }\n            testElement.innerText = htmlString;\n        }\n        else {\n            let testString = request.chr;\n            // Repeat character 256 (2^8) times\n            for (let i = 0; i < 8; i++) {\n                testString += testString;\n            }\n            testElement.textContent = testString;\n        }\n    }\n    _readFromDomElements() {\n        for (let i = 0, len = this._requests.length; i < len; i++) {\n            const request = this._requests[i];\n            const testElement = this._testElements[i];\n            request.fulfill(testElement.offsetWidth / 256);\n        }\n    }\n}\nexport function readCharWidths(bareFontInfo, requests) {\n    const reader = new DomCharWidthReader(bareFontInfo, requests);\n    reader.read();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../base/browser/browser.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { CharWidthRequest, readCharWidths } from './charWidthReader.js';\nimport { EditorFontLigatures } from '../../common/config/editorOptions.js';\nimport { FontInfo } from '../../common/config/fontInfo.js';\nexport class FontMeasurementsImpl extends Disposable {\n    constructor() {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._cache = new FontMeasurementsCache();\n        this._evictUntrustedReadingsTimeout = -1;\n    }\n    dispose() {\n        if (this._evictUntrustedReadingsTimeout !== -1) {\n            window.clearTimeout(this._evictUntrustedReadingsTimeout);\n            this._evictUntrustedReadingsTimeout = -1;\n        }\n        super.dispose();\n    }\n    /**\n     * Clear all cached font information and trigger a change event.\n     */\n    clearAllFontInfos() {\n        this._cache = new FontMeasurementsCache();\n        this._onDidChange.fire();\n    }\n    _writeToCache(item, value) {\n        this._cache.put(item, value);\n        if (!value.isTrusted && this._evictUntrustedReadingsTimeout === -1) {\n            // Try reading again after some time\n            this._evictUntrustedReadingsTimeout = window.setTimeout(() => {\n                this._evictUntrustedReadingsTimeout = -1;\n                this._evictUntrustedReadings();\n            }, 5000);\n        }\n    }\n    _evictUntrustedReadings() {\n        const values = this._cache.getValues();\n        let somethingRemoved = false;\n        for (const item of values) {\n            if (!item.isTrusted) {\n                somethingRemoved = true;\n                this._cache.remove(item);\n            }\n        }\n        if (somethingRemoved) {\n            this._onDidChange.fire();\n        }\n    }\n    /**\n     * Read font information.\n     */\n    readFontInfo(bareFontInfo) {\n        if (!this._cache.has(bareFontInfo)) {\n            let readConfig = this._actualReadFontInfo(bareFontInfo);\n            if (readConfig.typicalHalfwidthCharacterWidth <= 2 || readConfig.typicalFullwidthCharacterWidth <= 2 || readConfig.spaceWidth <= 2 || readConfig.maxDigitWidth <= 2) {\n                // Hey, it's Bug 14341 ... we couldn't read\n                readConfig = new FontInfo({\n                    pixelRatio: browser.PixelRatio.value,\n                    fontFamily: readConfig.fontFamily,\n                    fontWeight: readConfig.fontWeight,\n                    fontSize: readConfig.fontSize,\n                    fontFeatureSettings: readConfig.fontFeatureSettings,\n                    fontVariationSettings: readConfig.fontVariationSettings,\n                    lineHeight: readConfig.lineHeight,\n                    letterSpacing: readConfig.letterSpacing,\n                    isMonospace: readConfig.isMonospace,\n                    typicalHalfwidthCharacterWidth: Math.max(readConfig.typicalHalfwidthCharacterWidth, 5),\n                    typicalFullwidthCharacterWidth: Math.max(readConfig.typicalFullwidthCharacterWidth, 5),\n                    canUseHalfwidthRightwardsArrow: readConfig.canUseHalfwidthRightwardsArrow,\n                    spaceWidth: Math.max(readConfig.spaceWidth, 5),\n                    middotWidth: Math.max(readConfig.middotWidth, 5),\n                    wsmiddotWidth: Math.max(readConfig.wsmiddotWidth, 5),\n                    maxDigitWidth: Math.max(readConfig.maxDigitWidth, 5),\n                }, false);\n            }\n            this._writeToCache(bareFontInfo, readConfig);\n        }\n        return this._cache.get(bareFontInfo);\n    }\n    _createRequest(chr, type, all, monospace) {\n        const result = new CharWidthRequest(chr, type);\n        all.push(result);\n        monospace === null || monospace === void 0 ? void 0 : monospace.push(result);\n        return result;\n    }\n    _actualReadFontInfo(bareFontInfo) {\n        const all = [];\n        const monospace = [];\n        const typicalHalfwidthCharacter = this._createRequest('n', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const typicalFullwidthCharacter = this._createRequest('\\uff4d', 0 /* CharWidthRequestType.Regular */, all, null);\n        const space = this._createRequest(' ', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit0 = this._createRequest('0', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit1 = this._createRequest('1', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit2 = this._createRequest('2', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit3 = this._createRequest('3', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit4 = this._createRequest('4', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit5 = this._createRequest('5', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit6 = this._createRequest('6', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit7 = this._createRequest('7', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit8 = this._createRequest('8', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit9 = this._createRequest('9', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        // monospace test: used for whitespace rendering\n        const rightwardsArrow = this._createRequest('→', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const halfwidthRightwardsArrow = this._createRequest('￫', 0 /* CharWidthRequestType.Regular */, all, null);\n        // U+00B7 - MIDDLE DOT\n        const middot = this._createRequest('·', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        const wsmiddotWidth = this._createRequest(String.fromCharCode(0x2E31), 0 /* CharWidthRequestType.Regular */, all, null);\n        // monospace test: some characters\n        const monospaceTestChars = '|/-_ilm%';\n        for (let i = 0, len = monospaceTestChars.length; i < len; i++) {\n            this._createRequest(monospaceTestChars.charAt(i), 0 /* CharWidthRequestType.Regular */, all, monospace);\n            this._createRequest(monospaceTestChars.charAt(i), 1 /* CharWidthRequestType.Italic */, all, monospace);\n            this._createRequest(monospaceTestChars.charAt(i), 2 /* CharWidthRequestType.Bold */, all, monospace);\n        }\n        readCharWidths(bareFontInfo, all);\n        const maxDigitWidth = Math.max(digit0.width, digit1.width, digit2.width, digit3.width, digit4.width, digit5.width, digit6.width, digit7.width, digit8.width, digit9.width);\n        let isMonospace = (bareFontInfo.fontFeatureSettings === EditorFontLigatures.OFF);\n        const referenceWidth = monospace[0].width;\n        for (let i = 1, len = monospace.length; isMonospace && i < len; i++) {\n            const diff = referenceWidth - monospace[i].width;\n            if (diff < -0.001 || diff > 0.001) {\n                isMonospace = false;\n                break;\n            }\n        }\n        let canUseHalfwidthRightwardsArrow = true;\n        if (isMonospace && halfwidthRightwardsArrow.width !== referenceWidth) {\n            // using a halfwidth rightwards arrow would break monospace...\n            canUseHalfwidthRightwardsArrow = false;\n        }\n        if (halfwidthRightwardsArrow.width > rightwardsArrow.width) {\n            // using a halfwidth rightwards arrow would paint a larger arrow than a regular rightwards arrow\n            canUseHalfwidthRightwardsArrow = false;\n        }\n        return new FontInfo({\n            pixelRatio: browser.PixelRatio.value,\n            fontFamily: bareFontInfo.fontFamily,\n            fontWeight: bareFontInfo.fontWeight,\n            fontSize: bareFontInfo.fontSize,\n            fontFeatureSettings: bareFontInfo.fontFeatureSettings,\n            fontVariationSettings: bareFontInfo.fontVariationSettings,\n            lineHeight: bareFontInfo.lineHeight,\n            letterSpacing: bareFontInfo.letterSpacing,\n            isMonospace: isMonospace,\n            typicalHalfwidthCharacterWidth: typicalHalfwidthCharacter.width,\n            typicalFullwidthCharacterWidth: typicalFullwidthCharacter.width,\n            canUseHalfwidthRightwardsArrow: canUseHalfwidthRightwardsArrow,\n            spaceWidth: space.width,\n            middotWidth: middot.width,\n            wsmiddotWidth: wsmiddotWidth.width,\n            maxDigitWidth: maxDigitWidth\n        }, true);\n    }\n}\nclass FontMeasurementsCache {\n    constructor() {\n        this._keys = Object.create(null);\n        this._values = Object.create(null);\n    }\n    has(item) {\n        const itemId = item.getId();\n        return !!this._values[itemId];\n    }\n    get(item) {\n        const itemId = item.getId();\n        return this._values[itemId];\n    }\n    put(item, value) {\n        const itemId = item.getId();\n        this._keys[itemId] = item;\n        this._values[itemId] = value;\n    }\n    remove(item) {\n        const itemId = item.getId();\n        delete this._keys[itemId];\n        delete this._values[itemId];\n    }\n    getValues() {\n        return Object.keys(this._keys).map(id => this._values[id]);\n    }\n}\nexport const FontMeasurements = new FontMeasurementsImpl();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nclass TabFocusImpl {\n    constructor() {\n        this._tabFocusTerminal = false;\n        this._tabFocusEditor = false;\n        this._onDidChangeTabFocus = new Emitter();\n        this.onDidChangeTabFocus = this._onDidChangeTabFocus.event;\n    }\n    getTabFocusMode(context) {\n        return context === \"terminalFocus\" /* TabFocusContext.Terminal */ ? this._tabFocusTerminal : this._tabFocusEditor;\n    }\n    setTabFocusMode(tabFocusMode, context) {\n        if (context === \"terminalFocus\" /* TabFocusContext.Terminal */) {\n            this._tabFocusTerminal = tabFocusMode;\n        }\n        else {\n            this._tabFocusEditor = tabFocusMode;\n        }\n        this._onDidChangeTabFocus.fire();\n    }\n}\n/**\n * Control what pressing Tab does.\n * If it is false, pressing Tab or Shift-Tab will be handled by the editor.\n * If it is true, pressing Tab or Shift-Tab will move the browser focus.\n * Defaults to false.\n */\nexport const TabFocus = new TabFocusImpl();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { PageCoordinates } from '../editorDom.js';\nimport { PartFingerprints } from '../view/viewPart.js';\nimport { ViewLine } from '../viewParts/lines/viewLine.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range as EditorRange } from '../../common/core/range.js';\nimport { CursorColumns } from '../../common/core/cursorColumns.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { AtomicTabMoveOperations } from '../../common/cursor/cursorAtomicMoveOperations.js';\nclass UnknownHitTestResult {\n    constructor(hitTarget = null) {\n        this.hitTarget = hitTarget;\n        this.type = 0 /* HitTestResultType.Unknown */;\n    }\n}\nclass ContentHitTestResult {\n    constructor(position, spanNode, injectedText) {\n        this.position = position;\n        this.spanNode = spanNode;\n        this.injectedText = injectedText;\n        this.type = 1 /* HitTestResultType.Content */;\n    }\n}\nvar HitTestResult;\n(function (HitTestResult) {\n    function createFromDOMInfo(ctx, spanNode, offset) {\n        const position = ctx.getPositionFromDOMInfo(spanNode, offset);\n        if (position) {\n            return new ContentHitTestResult(position, spanNode, null);\n        }\n        return new UnknownHitTestResult(spanNode);\n    }\n    HitTestResult.createFromDOMInfo = createFromDOMInfo;\n})(HitTestResult || (HitTestResult = {}));\nexport class PointerHandlerLastRenderData {\n    constructor(lastViewCursorsRenderData, lastTextareaPosition) {\n        this.lastViewCursorsRenderData = lastViewCursorsRenderData;\n        this.lastTextareaPosition = lastTextareaPosition;\n    }\n}\nexport class MouseTarget {\n    static _deduceRage(position, range = null) {\n        if (!range && position) {\n            return new EditorRange(position.lineNumber, position.column, position.lineNumber, position.column);\n        }\n        return range !== null && range !== void 0 ? range : null;\n    }\n    static createUnknown(element, mouseColumn, position) {\n        return { type: 0 /* MouseTargetType.UNKNOWN */, element, mouseColumn, position, range: this._deduceRage(position) };\n    }\n    static createTextarea(element, mouseColumn) {\n        return { type: 1 /* MouseTargetType.TEXTAREA */, element, mouseColumn, position: null, range: null };\n    }\n    static createMargin(type, element, mouseColumn, position, range, detail) {\n        return { type, element, mouseColumn, position, range, detail };\n    }\n    static createViewZone(type, element, mouseColumn, position, detail) {\n        return { type, element, mouseColumn, position, range: this._deduceRage(position), detail };\n    }\n    static createContentText(element, mouseColumn, position, range, detail) {\n        return { type: 6 /* MouseTargetType.CONTENT_TEXT */, element, mouseColumn, position, range: this._deduceRage(position, range), detail };\n    }\n    static createContentEmpty(element, mouseColumn, position, detail) {\n        return { type: 7 /* MouseTargetType.CONTENT_EMPTY */, element, mouseColumn, position, range: this._deduceRage(position), detail };\n    }\n    static createContentWidget(element, mouseColumn, detail) {\n        return { type: 9 /* MouseTargetType.CONTENT_WIDGET */, element, mouseColumn, position: null, range: null, detail };\n    }\n    static createScrollbar(element, mouseColumn, position) {\n        return { type: 11 /* MouseTargetType.SCROLLBAR */, element, mouseColumn, position, range: this._deduceRage(position) };\n    }\n    static createOverlayWidget(element, mouseColumn, detail) {\n        return { type: 12 /* MouseTargetType.OVERLAY_WIDGET */, element, mouseColumn, position: null, range: null, detail };\n    }\n    static createOutsideEditor(mouseColumn, position, outsidePosition, outsideDistance) {\n        return { type: 13 /* MouseTargetType.OUTSIDE_EDITOR */, element: null, mouseColumn, position, range: this._deduceRage(position), outsidePosition, outsideDistance };\n    }\n    static _typeToString(type) {\n        if (type === 1 /* MouseTargetType.TEXTAREA */) {\n            return 'TEXTAREA';\n        }\n        if (type === 2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */) {\n            return 'GUTTER_GLYPH_MARGIN';\n        }\n        if (type === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */) {\n            return 'GUTTER_LINE_NUMBERS';\n        }\n        if (type === 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */) {\n            return 'GUTTER_LINE_DECORATIONS';\n        }\n        if (type === 5 /* MouseTargetType.GUTTER_VIEW_ZONE */) {\n            return 'GUTTER_VIEW_ZONE';\n        }\n        if (type === 6 /* MouseTargetType.CONTENT_TEXT */) {\n            return 'CONTENT_TEXT';\n        }\n        if (type === 7 /* MouseTargetType.CONTENT_EMPTY */) {\n            return 'CONTENT_EMPTY';\n        }\n        if (type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */) {\n            return 'CONTENT_VIEW_ZONE';\n        }\n        if (type === 9 /* MouseTargetType.CONTENT_WIDGET */) {\n            return 'CONTENT_WIDGET';\n        }\n        if (type === 10 /* MouseTargetType.OVERVIEW_RULER */) {\n            return 'OVERVIEW_RULER';\n        }\n        if (type === 11 /* MouseTargetType.SCROLLBAR */) {\n            return 'SCROLLBAR';\n        }\n        if (type === 12 /* MouseTargetType.OVERLAY_WIDGET */) {\n            return 'OVERLAY_WIDGET';\n        }\n        return 'UNKNOWN';\n    }\n    static toString(target) {\n        return this._typeToString(target.type) + ': ' + target.position + ' - ' + target.range + ' - ' + JSON.stringify(target.detail);\n    }\n}\nclass ElementPath {\n    static isTextArea(path) {\n        return (path.length === 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 6 /* PartFingerprint.TextArea */);\n    }\n    static isChildOfViewLines(path) {\n        return (path.length >= 4\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[3] === 7 /* PartFingerprint.ViewLines */);\n    }\n    static isStrictChildOfViewLines(path) {\n        return (path.length > 4\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[3] === 7 /* PartFingerprint.ViewLines */);\n    }\n    static isChildOfScrollableElement(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 5 /* PartFingerprint.ScrollableElement */);\n    }\n    static isChildOfMinimap(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 8 /* PartFingerprint.Minimap */);\n    }\n    static isChildOfContentWidgets(path) {\n        return (path.length >= 4\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[3] === 1 /* PartFingerprint.ContentWidgets */);\n    }\n    static isChildOfOverflowingContentWidgets(path) {\n        return (path.length >= 1\n            && path[0] === 2 /* PartFingerprint.OverflowingContentWidgets */);\n    }\n    static isChildOfOverlayWidgets(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 4 /* PartFingerprint.OverlayWidgets */);\n    }\n}\nexport class HitTestContext {\n    constructor(context, viewHelper, lastRenderData) {\n        this.viewModel = context.viewModel;\n        const options = context.configuration.options;\n        this.layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this.viewDomNode = viewHelper.viewDomNode;\n        this.lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this.stickyTabStops = options.get(110 /* EditorOption.stickyTabStops */);\n        this.typicalHalfwidthCharacterWidth = options.get(47 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this.lastRenderData = lastRenderData;\n        this._context = context;\n        this._viewHelper = viewHelper;\n    }\n    getZoneAtCoord(mouseVerticalOffset) {\n        return HitTestContext.getZoneAtCoord(this._context, mouseVerticalOffset);\n    }\n    static getZoneAtCoord(context, mouseVerticalOffset) {\n        // The target is either a view zone or the empty space after the last view-line\n        const viewZoneWhitespace = context.viewLayout.getWhitespaceAtVerticalOffset(mouseVerticalOffset);\n        if (viewZoneWhitespace) {\n            const viewZoneMiddle = viewZoneWhitespace.verticalOffset + viewZoneWhitespace.height / 2;\n            const lineCount = context.viewModel.getLineCount();\n            let positionBefore = null;\n            let position;\n            let positionAfter = null;\n            if (viewZoneWhitespace.afterLineNumber !== lineCount) {\n                // There are more lines after this view zone\n                positionAfter = new Position(viewZoneWhitespace.afterLineNumber + 1, 1);\n            }\n            if (viewZoneWhitespace.afterLineNumber > 0) {\n                // There are more lines above this view zone\n                positionBefore = new Position(viewZoneWhitespace.afterLineNumber, context.viewModel.getLineMaxColumn(viewZoneWhitespace.afterLineNumber));\n            }\n            if (positionAfter === null) {\n                position = positionBefore;\n            }\n            else if (positionBefore === null) {\n                position = positionAfter;\n            }\n            else if (mouseVerticalOffset < viewZoneMiddle) {\n                position = positionBefore;\n            }\n            else {\n                position = positionAfter;\n            }\n            return {\n                viewZoneId: viewZoneWhitespace.id,\n                afterLineNumber: viewZoneWhitespace.afterLineNumber,\n                positionBefore: positionBefore,\n                positionAfter: positionAfter,\n                position: position\n            };\n        }\n        return null;\n    }\n    getFullLineRangeAtCoord(mouseVerticalOffset) {\n        if (this._context.viewLayout.isAfterLines(mouseVerticalOffset)) {\n            // Below the last line\n            const lineNumber = this._context.viewModel.getLineCount();\n            const maxLineColumn = this._context.viewModel.getLineMaxColumn(lineNumber);\n            return {\n                range: new EditorRange(lineNumber, maxLineColumn, lineNumber, maxLineColumn),\n                isAfterLines: true\n            };\n        }\n        const lineNumber = this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n        const maxLineColumn = this._context.viewModel.getLineMaxColumn(lineNumber);\n        return {\n            range: new EditorRange(lineNumber, 1, lineNumber, maxLineColumn),\n            isAfterLines: false\n        };\n    }\n    getLineNumberAtVerticalOffset(mouseVerticalOffset) {\n        return this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n    }\n    isAfterLines(mouseVerticalOffset) {\n        return this._context.viewLayout.isAfterLines(mouseVerticalOffset);\n    }\n    isInTopPadding(mouseVerticalOffset) {\n        return this._context.viewLayout.isInTopPadding(mouseVerticalOffset);\n    }\n    isInBottomPadding(mouseVerticalOffset) {\n        return this._context.viewLayout.isInBottomPadding(mouseVerticalOffset);\n    }\n    getVerticalOffsetForLineNumber(lineNumber) {\n        return this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n    }\n    findAttribute(element, attr) {\n        return HitTestContext._findAttribute(element, attr, this._viewHelper.viewDomNode);\n    }\n    static _findAttribute(element, attr, stopAt) {\n        while (element && element !== document.body) {\n            if (element.hasAttribute && element.hasAttribute(attr)) {\n                return element.getAttribute(attr);\n            }\n            if (element === stopAt) {\n                return null;\n            }\n            element = element.parentNode;\n        }\n        return null;\n    }\n    getLineWidth(lineNumber) {\n        return this._viewHelper.getLineWidth(lineNumber);\n    }\n    visibleRangeForPosition(lineNumber, column) {\n        return this._viewHelper.visibleRangeForPosition(lineNumber, column);\n    }\n    getPositionFromDOMInfo(spanNode, offset) {\n        return this._viewHelper.getPositionFromDOMInfo(spanNode, offset);\n    }\n    getCurrentScrollTop() {\n        return this._context.viewLayout.getCurrentScrollTop();\n    }\n    getCurrentScrollLeft() {\n        return this._context.viewLayout.getCurrentScrollLeft();\n    }\n}\nclass BareHitTestRequest {\n    constructor(ctx, editorPos, pos, relativePos) {\n        this.editorPos = editorPos;\n        this.pos = pos;\n        this.relativePos = relativePos;\n        this.mouseVerticalOffset = Math.max(0, ctx.getCurrentScrollTop() + this.relativePos.y);\n        this.mouseContentHorizontalOffset = ctx.getCurrentScrollLeft() + this.relativePos.x - ctx.layoutInfo.contentLeft;\n        this.isInMarginArea = (this.relativePos.x < ctx.layoutInfo.contentLeft && this.relativePos.x >= ctx.layoutInfo.glyphMarginLeft);\n        this.isInContentArea = !this.isInMarginArea;\n        this.mouseColumn = Math.max(0, MouseTargetFactory._getMouseColumn(this.mouseContentHorizontalOffset, ctx.typicalHalfwidthCharacterWidth));\n    }\n}\nclass HitTestRequest extends BareHitTestRequest {\n    constructor(ctx, editorPos, pos, relativePos, target) {\n        super(ctx, editorPos, pos, relativePos);\n        this._ctx = ctx;\n        if (target) {\n            this.target = target;\n            this.targetPath = PartFingerprints.collect(target, ctx.viewDomNode);\n        }\n        else {\n            this.target = null;\n            this.targetPath = new Uint8Array(0);\n        }\n    }\n    toString() {\n        return `pos(${this.pos.x},${this.pos.y}), editorPos(${this.editorPos.x},${this.editorPos.y}), relativePos(${this.relativePos.x},${this.relativePos.y}), mouseVerticalOffset: ${this.mouseVerticalOffset}, mouseContentHorizontalOffset: ${this.mouseContentHorizontalOffset}\\n\\ttarget: ${this.target ? this.target.outerHTML : null}`;\n    }\n    _getMouseColumn(position = null) {\n        if (position && position.column < this._ctx.viewModel.getLineMaxColumn(position.lineNumber)) {\n            // Most likely, the line contains foreign decorations...\n            return CursorColumns.visibleColumnFromColumn(this._ctx.viewModel.getLineContent(position.lineNumber), position.column, this._ctx.viewModel.model.getOptions().tabSize) + 1;\n        }\n        return this.mouseColumn;\n    }\n    fulfillUnknown(position = null) {\n        return MouseTarget.createUnknown(this.target, this._getMouseColumn(position), position);\n    }\n    fulfillTextarea() {\n        return MouseTarget.createTextarea(this.target, this._getMouseColumn());\n    }\n    fulfillMargin(type, position, range, detail) {\n        return MouseTarget.createMargin(type, this.target, this._getMouseColumn(position), position, range, detail);\n    }\n    fulfillViewZone(type, position, detail) {\n        return MouseTarget.createViewZone(type, this.target, this._getMouseColumn(position), position, detail);\n    }\n    fulfillContentText(position, range, detail) {\n        return MouseTarget.createContentText(this.target, this._getMouseColumn(position), position, range, detail);\n    }\n    fulfillContentEmpty(position, detail) {\n        return MouseTarget.createContentEmpty(this.target, this._getMouseColumn(position), position, detail);\n    }\n    fulfillContentWidget(detail) {\n        return MouseTarget.createContentWidget(this.target, this._getMouseColumn(), detail);\n    }\n    fulfillScrollbar(position) {\n        return MouseTarget.createScrollbar(this.target, this._getMouseColumn(position), position);\n    }\n    fulfillOverlayWidget(detail) {\n        return MouseTarget.createOverlayWidget(this.target, this._getMouseColumn(), detail);\n    }\n    withTarget(target) {\n        return new HitTestRequest(this._ctx, this.editorPos, this.pos, this.relativePos, target);\n    }\n}\nconst EMPTY_CONTENT_AFTER_LINES = { isAfterLines: true };\nfunction createEmptyContentDataInLines(horizontalDistanceToText) {\n    return {\n        isAfterLines: false,\n        horizontalDistanceToText: horizontalDistanceToText\n    };\n}\nexport class MouseTargetFactory {\n    constructor(context, viewHelper) {\n        this._context = context;\n        this._viewHelper = viewHelper;\n    }\n    mouseTargetIsWidget(e) {\n        const t = e.target;\n        const path = PartFingerprints.collect(t, this._viewHelper.viewDomNode);\n        // Is it a content widget?\n        if (ElementPath.isChildOfContentWidgets(path) || ElementPath.isChildOfOverflowingContentWidgets(path)) {\n            return true;\n        }\n        // Is it an overlay widget?\n        if (ElementPath.isChildOfOverlayWidgets(path)) {\n            return true;\n        }\n        return false;\n    }\n    createMouseTarget(lastRenderData, editorPos, pos, relativePos, target) {\n        const ctx = new HitTestContext(this._context, this._viewHelper, lastRenderData);\n        const request = new HitTestRequest(ctx, editorPos, pos, relativePos, target);\n        try {\n            const r = MouseTargetFactory._createMouseTarget(ctx, request, false);\n            if (r.type === 6 /* MouseTargetType.CONTENT_TEXT */) {\n                // Snap to the nearest soft tab boundary if atomic soft tabs are enabled.\n                if (ctx.stickyTabStops && r.position !== null) {\n                    const position = MouseTargetFactory._snapToSoftTabBoundary(r.position, ctx.viewModel);\n                    const range = EditorRange.fromPositions(position, position).plusRange(r.range);\n                    return request.fulfillContentText(position, range, r.detail);\n                }\n            }\n            // console.log(MouseTarget.toString(r));\n            return r;\n        }\n        catch (err) {\n            // console.log(err);\n            return request.fulfillUnknown();\n        }\n    }\n    static _createMouseTarget(ctx, request, domHitTestExecuted) {\n        // console.log(`${domHitTestExecuted ? '=>' : ''}CAME IN REQUEST: ${request}`);\n        // First ensure the request has a target\n        if (request.target === null) {\n            if (domHitTestExecuted) {\n                // Still no target... and we have already executed hit test...\n                return request.fulfillUnknown();\n            }\n            const hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n            if (hitTestResult.type === 1 /* HitTestResultType.Content */) {\n                return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n            }\n            return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n        }\n        // we know for a fact that request.target is not null\n        const resolvedRequest = request;\n        let result = null;\n        result = result || MouseTargetFactory._hitTestContentWidget(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestOverlayWidget(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestMinimap(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestScrollbarSlider(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewZone(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestMargin(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewCursor(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestTextArea(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewLines(ctx, resolvedRequest, domHitTestExecuted);\n        result = result || MouseTargetFactory._hitTestScrollbar(ctx, resolvedRequest);\n        return (result || request.fulfillUnknown());\n    }\n    static _hitTestContentWidget(ctx, request) {\n        // Is it a content widget?\n        if (ElementPath.isChildOfContentWidgets(request.targetPath) || ElementPath.isChildOfOverflowingContentWidgets(request.targetPath)) {\n            const widgetId = ctx.findAttribute(request.target, 'widgetId');\n            if (widgetId) {\n                return request.fulfillContentWidget(widgetId);\n            }\n            else {\n                return request.fulfillUnknown();\n            }\n        }\n        return null;\n    }\n    static _hitTestOverlayWidget(ctx, request) {\n        // Is it an overlay widget?\n        if (ElementPath.isChildOfOverlayWidgets(request.targetPath)) {\n            const widgetId = ctx.findAttribute(request.target, 'widgetId');\n            if (widgetId) {\n                return request.fulfillOverlayWidget(widgetId);\n            }\n            else {\n                return request.fulfillUnknown();\n            }\n        }\n        return null;\n    }\n    static _hitTestViewCursor(ctx, request) {\n        if (request.target) {\n            // Check if we've hit a painted cursor\n            const lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n            for (const d of lastViewCursorsRenderData) {\n                if (request.target === d.domNode) {\n                    return request.fulfillContentText(d.position, null, { mightBeForeignElement: false, injectedText: null });\n                }\n            }\n        }\n        if (request.isInContentArea) {\n            // Edge has a bug when hit-testing the exact position of a cursor,\n            // instead of returning the correct dom node, it returns the\n            // first or last rendered view line dom node, therefore help it out\n            // and first check if we are on top of a cursor\n            const lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n            const mouseContentHorizontalOffset = request.mouseContentHorizontalOffset;\n            const mouseVerticalOffset = request.mouseVerticalOffset;\n            for (const d of lastViewCursorsRenderData) {\n                if (mouseContentHorizontalOffset < d.contentLeft) {\n                    // mouse position is to the left of the cursor\n                    continue;\n                }\n                if (mouseContentHorizontalOffset > d.contentLeft + d.width) {\n                    // mouse position is to the right of the cursor\n                    continue;\n                }\n                const cursorVerticalOffset = ctx.getVerticalOffsetForLineNumber(d.position.lineNumber);\n                if (cursorVerticalOffset <= mouseVerticalOffset\n                    && mouseVerticalOffset <= cursorVerticalOffset + d.height) {\n                    return request.fulfillContentText(d.position, null, { mightBeForeignElement: false, injectedText: null });\n                }\n            }\n        }\n        return null;\n    }\n    static _hitTestViewZone(ctx, request) {\n        const viewZoneData = ctx.getZoneAtCoord(request.mouseVerticalOffset);\n        if (viewZoneData) {\n            const mouseTargetType = (request.isInContentArea ? 8 /* MouseTargetType.CONTENT_VIEW_ZONE */ : 5 /* MouseTargetType.GUTTER_VIEW_ZONE */);\n            return request.fulfillViewZone(mouseTargetType, viewZoneData.position, viewZoneData);\n        }\n        return null;\n    }\n    static _hitTestTextArea(ctx, request) {\n        // Is it the textarea?\n        if (ElementPath.isTextArea(request.targetPath)) {\n            if (ctx.lastRenderData.lastTextareaPosition) {\n                return request.fulfillContentText(ctx.lastRenderData.lastTextareaPosition, null, { mightBeForeignElement: false, injectedText: null });\n            }\n            return request.fulfillTextarea();\n        }\n        return null;\n    }\n    static _hitTestMargin(ctx, request) {\n        if (request.isInMarginArea) {\n            const res = ctx.getFullLineRangeAtCoord(request.mouseVerticalOffset);\n            const pos = res.range.getStartPosition();\n            let offset = Math.abs(request.relativePos.x);\n            const detail = {\n                isAfterLines: res.isAfterLines,\n                glyphMarginLeft: ctx.layoutInfo.glyphMarginLeft,\n                glyphMarginWidth: ctx.layoutInfo.glyphMarginWidth,\n                lineNumbersWidth: ctx.layoutInfo.lineNumbersWidth,\n                offsetX: offset\n            };\n            offset -= ctx.layoutInfo.glyphMarginLeft;\n            if (offset <= ctx.layoutInfo.glyphMarginWidth) {\n                // On the glyph margin\n                return request.fulfillMargin(2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */, pos, res.range, detail);\n            }\n            offset -= ctx.layoutInfo.glyphMarginWidth;\n            if (offset <= ctx.layoutInfo.lineNumbersWidth) {\n                // On the line numbers\n                return request.fulfillMargin(3 /* MouseTargetType.GUTTER_LINE_NUMBERS */, pos, res.range, detail);\n            }\n            offset -= ctx.layoutInfo.lineNumbersWidth;\n            // On the line decorations\n            return request.fulfillMargin(4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */, pos, res.range, detail);\n        }\n        return null;\n    }\n    static _hitTestViewLines(ctx, request, domHitTestExecuted) {\n        if (!ElementPath.isChildOfViewLines(request.targetPath)) {\n            return null;\n        }\n        if (ctx.isInTopPadding(request.mouseVerticalOffset)) {\n            return request.fulfillContentEmpty(new Position(1, 1), EMPTY_CONTENT_AFTER_LINES);\n        }\n        // Check if it is below any lines and any view zones\n        if (ctx.isAfterLines(request.mouseVerticalOffset) || ctx.isInBottomPadding(request.mouseVerticalOffset)) {\n            // This most likely indicates it happened after the last view-line\n            const lineCount = ctx.viewModel.getLineCount();\n            const maxLineColumn = ctx.viewModel.getLineMaxColumn(lineCount);\n            return request.fulfillContentEmpty(new Position(lineCount, maxLineColumn), EMPTY_CONTENT_AFTER_LINES);\n        }\n        if (domHitTestExecuted) {\n            // Check if we are hitting a view-line (can happen in the case of inline decorations on empty lines)\n            // See https://github.com/microsoft/vscode/issues/46942\n            if (ElementPath.isStrictChildOfViewLines(request.targetPath)) {\n                const lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n                if (ctx.viewModel.getLineLength(lineNumber) === 0) {\n                    const lineWidth = ctx.getLineWidth(lineNumber);\n                    const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n                    return request.fulfillContentEmpty(new Position(lineNumber, 1), detail);\n                }\n                const lineWidth = ctx.getLineWidth(lineNumber);\n                if (request.mouseContentHorizontalOffset >= lineWidth) {\n                    const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n                    const pos = new Position(lineNumber, ctx.viewModel.getLineMaxColumn(lineNumber));\n                    return request.fulfillContentEmpty(pos, detail);\n                }\n            }\n            // We have already executed hit test...\n            return request.fulfillUnknown();\n        }\n        const hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n        if (hitTestResult.type === 1 /* HitTestResultType.Content */) {\n            return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n        }\n        return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n    }\n    static _hitTestMinimap(ctx, request) {\n        if (ElementPath.isChildOfMinimap(request.targetPath)) {\n            const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n            const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n            return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n        }\n        return null;\n    }\n    static _hitTestScrollbarSlider(ctx, request) {\n        if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n            if (request.target && request.target.nodeType === 1) {\n                const className = request.target.className;\n                if (className && /\\b(slider|scrollbar)\\b/.test(className)) {\n                    const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n                    const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n                    return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n                }\n            }\n        }\n        return null;\n    }\n    static _hitTestScrollbar(ctx, request) {\n        // Is it the overview ruler?\n        // Is it a child of the scrollable element?\n        if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n            const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n            const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n            return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n        }\n        return null;\n    }\n    getMouseColumn(relativePos) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        const mouseContentHorizontalOffset = this._context.viewLayout.getCurrentScrollLeft() + relativePos.x - layoutInfo.contentLeft;\n        return MouseTargetFactory._getMouseColumn(mouseContentHorizontalOffset, options.get(47 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth);\n    }\n    static _getMouseColumn(mouseContentHorizontalOffset, typicalHalfwidthCharacterWidth) {\n        if (mouseContentHorizontalOffset < 0) {\n            return 1;\n        }\n        const chars = Math.round(mouseContentHorizontalOffset / typicalHalfwidthCharacterWidth);\n        return (chars + 1);\n    }\n    static createMouseTargetFromHitTestPosition(ctx, request, spanNode, pos, injectedText) {\n        const lineNumber = pos.lineNumber;\n        const column = pos.column;\n        const lineWidth = ctx.getLineWidth(lineNumber);\n        if (request.mouseContentHorizontalOffset > lineWidth) {\n            const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n            return request.fulfillContentEmpty(pos, detail);\n        }\n        const visibleRange = ctx.visibleRangeForPosition(lineNumber, column);\n        if (!visibleRange) {\n            return request.fulfillUnknown(pos);\n        }\n        const columnHorizontalOffset = visibleRange.left;\n        if (Math.abs(request.mouseContentHorizontalOffset - columnHorizontalOffset) < 1) {\n            return request.fulfillContentText(pos, null, { mightBeForeignElement: !!injectedText, injectedText });\n        }\n        const points = [];\n        points.push({ offset: visibleRange.left, column: column });\n        if (column > 1) {\n            const visibleRange = ctx.visibleRangeForPosition(lineNumber, column - 1);\n            if (visibleRange) {\n                points.push({ offset: visibleRange.left, column: column - 1 });\n            }\n        }\n        const lineMaxColumn = ctx.viewModel.getLineMaxColumn(lineNumber);\n        if (column < lineMaxColumn) {\n            const visibleRange = ctx.visibleRangeForPosition(lineNumber, column + 1);\n            if (visibleRange) {\n                points.push({ offset: visibleRange.left, column: column + 1 });\n            }\n        }\n        points.sort((a, b) => a.offset - b.offset);\n        const mouseCoordinates = request.pos.toClientCoordinates();\n        const spanNodeClientRect = spanNode.getBoundingClientRect();\n        const mouseIsOverSpanNode = (spanNodeClientRect.left <= mouseCoordinates.clientX && mouseCoordinates.clientX <= spanNodeClientRect.right);\n        let rng = null;\n        for (let i = 1; i < points.length; i++) {\n            const prev = points[i - 1];\n            const curr = points[i];\n            if (prev.offset <= request.mouseContentHorizontalOffset && request.mouseContentHorizontalOffset <= curr.offset) {\n                rng = new EditorRange(lineNumber, prev.column, lineNumber, curr.column);\n                // See https://github.com/microsoft/vscode/issues/152819\n                // Due to the use of zwj, the browser's hit test result is skewed towards the left\n                // Here we try to correct that if the mouse horizontal offset is closer to the right than the left\n                const prevDelta = Math.abs(prev.offset - request.mouseContentHorizontalOffset);\n                const nextDelta = Math.abs(curr.offset - request.mouseContentHorizontalOffset);\n                pos = (prevDelta < nextDelta\n                    ? new Position(lineNumber, prev.column)\n                    : new Position(lineNumber, curr.column));\n                break;\n            }\n        }\n        return request.fulfillContentText(pos, rng, { mightBeForeignElement: !mouseIsOverSpanNode || !!injectedText, injectedText });\n    }\n    /**\n     * Most probably WebKit browsers and Edge\n     */\n    static _doHitTestWithCaretRangeFromPoint(ctx, request) {\n        // In Chrome, especially on Linux it is possible to click between lines,\n        // so try to adjust the `hity` below so that it lands in the center of a line\n        const lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n        const lineStartVerticalOffset = ctx.getVerticalOffsetForLineNumber(lineNumber);\n        const lineEndVerticalOffset = lineStartVerticalOffset + ctx.lineHeight;\n        const isBelowLastLine = (lineNumber === ctx.viewModel.getLineCount()\n            && request.mouseVerticalOffset > lineEndVerticalOffset);\n        if (!isBelowLastLine) {\n            const lineCenteredVerticalOffset = Math.floor((lineStartVerticalOffset + lineEndVerticalOffset) / 2);\n            let adjustedPageY = request.pos.y + (lineCenteredVerticalOffset - request.mouseVerticalOffset);\n            if (adjustedPageY <= request.editorPos.y) {\n                adjustedPageY = request.editorPos.y + 1;\n            }\n            if (adjustedPageY >= request.editorPos.y + request.editorPos.height) {\n                adjustedPageY = request.editorPos.y + request.editorPos.height - 1;\n            }\n            const adjustedPage = new PageCoordinates(request.pos.x, adjustedPageY);\n            const r = this._actualDoHitTestWithCaretRangeFromPoint(ctx, adjustedPage.toClientCoordinates());\n            if (r.type === 1 /* HitTestResultType.Content */) {\n                return r;\n            }\n        }\n        // Also try to hit test without the adjustment (for the edge cases that we are near the top or bottom)\n        return this._actualDoHitTestWithCaretRangeFromPoint(ctx, request.pos.toClientCoordinates());\n    }\n    static _actualDoHitTestWithCaretRangeFromPoint(ctx, coords) {\n        const shadowRoot = dom.getShadowRoot(ctx.viewDomNode);\n        let range;\n        if (shadowRoot) {\n            if (typeof shadowRoot.caretRangeFromPoint === 'undefined') {\n                range = shadowCaretRangeFromPoint(shadowRoot, coords.clientX, coords.clientY);\n            }\n            else {\n                range = shadowRoot.caretRangeFromPoint(coords.clientX, coords.clientY);\n            }\n        }\n        else {\n            range = document.caretRangeFromPoint(coords.clientX, coords.clientY);\n        }\n        if (!range || !range.startContainer) {\n            return new UnknownHitTestResult();\n        }\n        // Chrome always hits a TEXT_NODE, while Edge sometimes hits a token span\n        const startContainer = range.startContainer;\n        if (startContainer.nodeType === startContainer.TEXT_NODE) {\n            // startContainer is expected to be the token text\n            const parent1 = startContainer.parentNode; // expected to be the token span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n            const parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n            const parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n            if (parent3ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, parent1, range.startOffset);\n            }\n            else {\n                return new UnknownHitTestResult(startContainer.parentNode);\n            }\n        }\n        else if (startContainer.nodeType === startContainer.ELEMENT_NODE) {\n            // startContainer is expected to be the token span\n            const parent1 = startContainer.parentNode; // expected to be the view line container span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line div\n            const parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n            if (parent2ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, startContainer, startContainer.textContent.length);\n            }\n            else {\n                return new UnknownHitTestResult(startContainer);\n            }\n        }\n        return new UnknownHitTestResult();\n    }\n    /**\n     * Most probably Gecko\n     */\n    static _doHitTestWithCaretPositionFromPoint(ctx, coords) {\n        const hitResult = document.caretPositionFromPoint(coords.clientX, coords.clientY);\n        if (hitResult.offsetNode.nodeType === hitResult.offsetNode.TEXT_NODE) {\n            // offsetNode is expected to be the token text\n            const parent1 = hitResult.offsetNode.parentNode; // expected to be the token span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n            const parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n            const parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n            if (parent3ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, hitResult.offsetNode.parentNode, hitResult.offset);\n            }\n            else {\n                return new UnknownHitTestResult(hitResult.offsetNode.parentNode);\n            }\n        }\n        // For inline decorations, Gecko sometimes returns the `<span>` of the line and the offset is the `<span>` with the inline decoration\n        // Some other times, it returns the `<span>` with the inline decoration\n        if (hitResult.offsetNode.nodeType === hitResult.offsetNode.ELEMENT_NODE) {\n            const parent1 = hitResult.offsetNode.parentNode;\n            const parent1ClassName = parent1 && parent1.nodeType === parent1.ELEMENT_NODE ? parent1.className : null;\n            const parent2 = parent1 ? parent1.parentNode : null;\n            const parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n            if (parent1ClassName === ViewLine.CLASS_NAME) {\n                // it returned the `<span>` of the line and the offset is the `<span>` with the inline decoration\n                const tokenSpan = hitResult.offsetNode.childNodes[Math.min(hitResult.offset, hitResult.offsetNode.childNodes.length - 1)];\n                if (tokenSpan) {\n                    return HitTestResult.createFromDOMInfo(ctx, tokenSpan, 0);\n                }\n            }\n            else if (parent2ClassName === ViewLine.CLASS_NAME) {\n                // it returned the `<span>` with the inline decoration\n                return HitTestResult.createFromDOMInfo(ctx, hitResult.offsetNode, 0);\n            }\n        }\n        return new UnknownHitTestResult(hitResult.offsetNode);\n    }\n    static _snapToSoftTabBoundary(position, viewModel) {\n        const lineContent = viewModel.getLineContent(position.lineNumber);\n        const { tabSize } = viewModel.model.getOptions();\n        const newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, position.column - 1, tabSize, 2 /* Direction.Nearest */);\n        if (newPosition !== -1) {\n            return new Position(position.lineNumber, newPosition + 1);\n        }\n        return position;\n    }\n    static _doHitTest(ctx, request) {\n        let result = new UnknownHitTestResult();\n        if (typeof document.caretRangeFromPoint === 'function') {\n            result = this._doHitTestWithCaretRangeFromPoint(ctx, request);\n        }\n        else if (document.caretPositionFromPoint) {\n            result = this._doHitTestWithCaretPositionFromPoint(ctx, request.pos.toClientCoordinates());\n        }\n        if (result.type === 1 /* HitTestResultType.Content */) {\n            const injectedText = ctx.viewModel.getInjectedTextAt(result.position);\n            const normalizedPosition = ctx.viewModel.normalizePosition(result.position, 2 /* PositionAffinity.None */);\n            if (injectedText || !normalizedPosition.equals(result.position)) {\n                result = new ContentHitTestResult(normalizedPosition, result.spanNode, injectedText);\n            }\n        }\n        return result;\n    }\n}\nfunction shadowCaretRangeFromPoint(shadowRoot, x, y) {\n    const range = document.createRange();\n    // Get the element under the point\n    let el = shadowRoot.elementFromPoint(x, y);\n    if (el !== null) {\n        // Get the last child of the element until its firstChild is a text node\n        // This assumes that the pointer is on the right of the line, out of the tokens\n        // and that we want to get the offset of the last token of the line\n        while (el && el.firstChild && el.firstChild.nodeType !== el.firstChild.TEXT_NODE && el.lastChild && el.lastChild.firstChild) {\n            el = el.lastChild;\n        }\n        // Grab its rect\n        const rect = el.getBoundingClientRect();\n        // And its font\n        const font = window.getComputedStyle(el, null).getPropertyValue('font');\n        // And also its txt content\n        const text = el.innerText;\n        // Position the pixel cursor at the left of the element\n        let pixelCursor = rect.left;\n        let offset = 0;\n        let step;\n        // If the point is on the right of the box put the cursor after the last character\n        if (x > rect.left + rect.width) {\n            offset = text.length;\n        }\n        else {\n            const charWidthReader = CharWidthReader.getInstance();\n            // Goes through all the characters of the innerText, and checks if the x of the point\n            // belongs to the character.\n            for (let i = 0; i < text.length + 1; i++) {\n                // The step is half the width of the character\n                step = charWidthReader.getCharWidth(text.charAt(i), font) / 2;\n                // Move to the center of the character\n                pixelCursor += step;\n                // If the x of the point is smaller that the position of the cursor, the point is over that character\n                if (x < pixelCursor) {\n                    offset = i;\n                    break;\n                }\n                // Move between the current character and the next\n                pixelCursor += step;\n            }\n        }\n        // Creates a range with the text node of the element and set the offset found\n        range.setStart(el.firstChild, offset);\n        range.setEnd(el.firstChild, offset);\n    }\n    return range;\n}\nclass CharWidthReader {\n    static getInstance() {\n        if (!CharWidthReader._INSTANCE) {\n            CharWidthReader._INSTANCE = new CharWidthReader();\n        }\n        return CharWidthReader._INSTANCE;\n    }\n    constructor() {\n        this._cache = {};\n        this._canvas = document.createElement('canvas');\n    }\n    getCharWidth(char, font) {\n        const cacheKey = char + font;\n        if (this._cache[cacheKey]) {\n            return this._cache[cacheKey];\n        }\n        const context = this._canvas.getContext('2d');\n        context.font = font;\n        const metrics = context.measureText(char);\n        const width = metrics.width;\n        this._cache[cacheKey] = width;\n        return width;\n    }\n}\nCharWidthReader._INSTANCE = null;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { StandardWheelEvent } from '../../../base/browser/mouseEvent.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { HitTestContext, MouseTarget, MouseTargetFactory } from './mouseTarget.js';\nimport { ClientCoordinates, EditorMouseEvent, EditorMouseEventFactory, GlobalEditorPointerMoveMonitor, createEditorPagePosition, createCoordinatesRelativeToEditor, PageCoordinates } from '../editorDom.js';\nimport { EditorZoom } from '../../common/config/editorZoom.js';\nimport { Position } from '../../common/core/position.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { ViewEventHandler } from '../../common/viewEventHandler.js';\nimport { MouseWheelClassifier } from '../../../base/browser/ui/scrollbar/scrollableElement.js';\nexport class MouseHandler extends ViewEventHandler {\n    constructor(context, viewController, viewHelper) {\n        super();\n        this._mouseLeaveMonitor = null;\n        this._context = context;\n        this.viewController = viewController;\n        this.viewHelper = viewHelper;\n        this.mouseTargetFactory = new MouseTargetFactory(this._context, viewHelper);\n        this._mouseDownOperation = this._register(new MouseDownOperation(this._context, this.viewController, this.viewHelper, this.mouseTargetFactory, (e, testEventTarget) => this._createMouseTarget(e, testEventTarget), (e) => this._getMouseColumn(e)));\n        this.lastMouseLeaveTime = -1;\n        this._height = this._context.configuration.options.get(138 /* EditorOption.layoutInfo */).height;\n        const mouseEvents = new EditorMouseEventFactory(this.viewHelper.viewDomNode);\n        this._register(mouseEvents.onContextMenu(this.viewHelper.viewDomNode, (e) => this._onContextMenu(e, true)));\n        this._register(mouseEvents.onMouseMove(this.viewHelper.viewDomNode, (e) => {\n            this._onMouseMove(e);\n            // See https://github.com/microsoft/vscode/issues/138789\n            // When moving the mouse really quickly, the browser sometimes forgets to\n            // send us a `mouseleave` or `mouseout` event. We therefore install here\n            // a global `mousemove` listener to manually recover if the mouse goes outside\n            // the editor. As soon as the mouse leaves outside of the editor, we\n            // remove this listener\n            if (!this._mouseLeaveMonitor) {\n                this._mouseLeaveMonitor = dom.addDisposableListener(document, 'mousemove', (e) => {\n                    if (!this.viewHelper.viewDomNode.contains(e.target)) {\n                        // went outside the editor!\n                        this._onMouseLeave(new EditorMouseEvent(e, false, this.viewHelper.viewDomNode));\n                    }\n                });\n            }\n        }));\n        this._register(mouseEvents.onMouseUp(this.viewHelper.viewDomNode, (e) => this._onMouseUp(e)));\n        this._register(mouseEvents.onMouseLeave(this.viewHelper.viewDomNode, (e) => this._onMouseLeave(e)));\n        // `pointerdown` events can't be used to determine if there's a double click, or triple click\n        // because their `e.detail` is always 0.\n        // We will therefore save the pointer id for the mouse and then reuse it in the `mousedown` event\n        // for `element.setPointerCapture`.\n        let capturePointerId = 0;\n        this._register(mouseEvents.onPointerDown(this.viewHelper.viewDomNode, (e, pointerId) => {\n            capturePointerId = pointerId;\n        }));\n        // The `pointerup` listener registered by `GlobalEditorPointerMoveMonitor` does not get invoked 100% of the times.\n        // I speculate that this is because the `pointerup` listener is only registered during the `mousedown` event, and perhaps\n        // the `pointerup` event is already queued for dispatching, which makes it that the new listener doesn't get fired.\n        // See https://github.com/microsoft/vscode/issues/146486 for repro steps.\n        // To compensate for that, we simply register here a `pointerup` listener and just communicate it.\n        this._register(dom.addDisposableListener(this.viewHelper.viewDomNode, dom.EventType.POINTER_UP, (e) => {\n            this._mouseDownOperation.onPointerUp();\n        }));\n        this._register(mouseEvents.onMouseDown(this.viewHelper.viewDomNode, (e) => this._onMouseDown(e, capturePointerId)));\n        this._setupMouseWheelZoomListener();\n        this._context.addEventHandler(this);\n    }\n    _setupMouseWheelZoomListener() {\n        const classifier = MouseWheelClassifier.INSTANCE;\n        let prevMouseWheelTime = 0;\n        let gestureStartZoomLevel = EditorZoom.getZoomLevel();\n        let gestureHasZoomModifiers = false;\n        let gestureAccumulatedDelta = 0;\n        const onMouseWheel = (browserEvent) => {\n            this.viewController.emitMouseWheel(browserEvent);\n            if (!this._context.configuration.options.get(72 /* EditorOption.mouseWheelZoom */)) {\n                return;\n            }\n            const e = new StandardWheelEvent(browserEvent);\n            classifier.acceptStandardWheelEvent(e);\n            if (classifier.isPhysicalMouseWheel()) {\n                if (hasMouseWheelZoomModifiers(browserEvent)) {\n                    const zoomLevel = EditorZoom.getZoomLevel();\n                    const delta = e.deltaY > 0 ? 1 : -1;\n                    EditorZoom.setZoomLevel(zoomLevel + delta);\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n            }\n            else {\n                // we consider mousewheel events that occur within 50ms of each other to be part of the same gesture\n                // we don't want to consider mouse wheel events where ctrl/cmd is pressed during the inertia phase\n                // we also want to accumulate deltaY values from the same gesture and use that to set the zoom level\n                if (Date.now() - prevMouseWheelTime > 50) {\n                    // reset if more than 50ms have passed\n                    gestureStartZoomLevel = EditorZoom.getZoomLevel();\n                    gestureHasZoomModifiers = hasMouseWheelZoomModifiers(browserEvent);\n                    gestureAccumulatedDelta = 0;\n                }\n                prevMouseWheelTime = Date.now();\n                gestureAccumulatedDelta += e.deltaY;\n                if (gestureHasZoomModifiers) {\n                    EditorZoom.setZoomLevel(gestureStartZoomLevel + gestureAccumulatedDelta / 5);\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n            }\n        };\n        this._register(dom.addDisposableListener(this.viewHelper.viewDomNode, dom.EventType.MOUSE_WHEEL, onMouseWheel, { capture: true, passive: false }));\n        function hasMouseWheelZoomModifiers(browserEvent) {\n            return (platform.isMacintosh\n                // on macOS we support cmd + two fingers scroll (`metaKey` set)\n                // and also the two fingers pinch gesture (`ctrKey` set)\n                ? ((browserEvent.metaKey || browserEvent.ctrlKey) && !browserEvent.shiftKey && !browserEvent.altKey)\n                : (browserEvent.ctrlKey && !browserEvent.metaKey && !browserEvent.shiftKey && !browserEvent.altKey));\n        }\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        if (this._mouseLeaveMonitor) {\n            this._mouseLeaveMonitor.dispose();\n            this._mouseLeaveMonitor = null;\n        }\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(138 /* EditorOption.layoutInfo */)) {\n            // layout change\n            const height = this._context.configuration.options.get(138 /* EditorOption.layoutInfo */).height;\n            if (this._height !== height) {\n                this._height = height;\n                this._mouseDownOperation.onHeightChanged();\n            }\n        }\n        return false;\n    }\n    onCursorStateChanged(e) {\n        this._mouseDownOperation.onCursorStateChanged(e);\n        return false;\n    }\n    onFocusChanged(e) {\n        return false;\n    }\n    // --- end event handlers\n    getTargetAtClientPoint(clientX, clientY) {\n        const clientPos = new ClientCoordinates(clientX, clientY);\n        const pos = clientPos.toPageCoordinates();\n        const editorPos = createEditorPagePosition(this.viewHelper.viewDomNode);\n        if (pos.y < editorPos.y || pos.y > editorPos.y + editorPos.height || pos.x < editorPos.x || pos.x > editorPos.x + editorPos.width) {\n            return null;\n        }\n        const relativePos = createCoordinatesRelativeToEditor(this.viewHelper.viewDomNode, editorPos, pos);\n        return this.mouseTargetFactory.createMouseTarget(this.viewHelper.getLastRenderData(), editorPos, pos, relativePos, null);\n    }\n    _createMouseTarget(e, testEventTarget) {\n        let target = e.target;\n        if (!this.viewHelper.viewDomNode.contains(target)) {\n            const shadowRoot = dom.getShadowRoot(this.viewHelper.viewDomNode);\n            if (shadowRoot) {\n                target = shadowRoot.elementsFromPoint(e.posx, e.posy).find((el) => this.viewHelper.viewDomNode.contains(el));\n            }\n        }\n        return this.mouseTargetFactory.createMouseTarget(this.viewHelper.getLastRenderData(), e.editorPos, e.pos, e.relativePos, testEventTarget ? target : null);\n    }\n    _getMouseColumn(e) {\n        return this.mouseTargetFactory.getMouseColumn(e.relativePos);\n    }\n    _onContextMenu(e, testEventTarget) {\n        this.viewController.emitContextMenu({\n            event: e,\n            target: this._createMouseTarget(e, testEventTarget)\n        });\n    }\n    _onMouseMove(e) {\n        const targetIsWidget = this.mouseTargetFactory.mouseTargetIsWidget(e);\n        if (!targetIsWidget) {\n            e.preventDefault();\n        }\n        if (this._mouseDownOperation.isActive()) {\n            // In selection/drag operation\n            return;\n        }\n        const actualMouseMoveTime = e.timestamp;\n        if (actualMouseMoveTime < this.lastMouseLeaveTime) {\n            // Due to throttling, this event occurred before the mouse left the editor, therefore ignore it.\n            return;\n        }\n        this.viewController.emitMouseMove({\n            event: e,\n            target: this._createMouseTarget(e, true)\n        });\n    }\n    _onMouseLeave(e) {\n        if (this._mouseLeaveMonitor) {\n            this._mouseLeaveMonitor.dispose();\n            this._mouseLeaveMonitor = null;\n        }\n        this.lastMouseLeaveTime = (new Date()).getTime();\n        this.viewController.emitMouseLeave({\n            event: e,\n            target: null\n        });\n    }\n    _onMouseUp(e) {\n        this.viewController.emitMouseUp({\n            event: e,\n            target: this._createMouseTarget(e, true)\n        });\n    }\n    _onMouseDown(e, pointerId) {\n        const t = this._createMouseTarget(e, true);\n        const targetIsContent = (t.type === 6 /* MouseTargetType.CONTENT_TEXT */ || t.type === 7 /* MouseTargetType.CONTENT_EMPTY */);\n        const targetIsGutter = (t.type === 2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */ || t.type === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */ || t.type === 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */);\n        const targetIsLineNumbers = (t.type === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */);\n        const selectOnLineNumbers = this._context.configuration.options.get(103 /* EditorOption.selectOnLineNumbers */);\n        const targetIsViewZone = (t.type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */ || t.type === 5 /* MouseTargetType.GUTTER_VIEW_ZONE */);\n        const targetIsWidget = (t.type === 9 /* MouseTargetType.CONTENT_WIDGET */);\n        let shouldHandle = e.leftButton || e.middleButton;\n        if (platform.isMacintosh && e.leftButton && e.ctrlKey) {\n            shouldHandle = false;\n        }\n        const focus = () => {\n            e.preventDefault();\n            this.viewHelper.focusTextArea();\n        };\n        if (shouldHandle && (targetIsContent || (targetIsLineNumbers && selectOnLineNumbers))) {\n            focus();\n            this._mouseDownOperation.start(t.type, e, pointerId);\n        }\n        else if (targetIsGutter) {\n            // Do not steal focus\n            e.preventDefault();\n        }\n        else if (targetIsViewZone) {\n            const viewZoneData = t.detail;\n            if (shouldHandle && this.viewHelper.shouldSuppressMouseDownOnViewZone(viewZoneData.viewZoneId)) {\n                focus();\n                this._mouseDownOperation.start(t.type, e, pointerId);\n                e.preventDefault();\n            }\n        }\n        else if (targetIsWidget && this.viewHelper.shouldSuppressMouseDownOnWidget(t.detail)) {\n            focus();\n            e.preventDefault();\n        }\n        this.viewController.emitMouseDown({\n            event: e,\n            target: t\n        });\n    }\n}\nclass MouseDownOperation extends Disposable {\n    constructor(_context, _viewController, _viewHelper, _mouseTargetFactory, createMouseTarget, getMouseColumn) {\n        super();\n        this._context = _context;\n        this._viewController = _viewController;\n        this._viewHelper = _viewHelper;\n        this._mouseTargetFactory = _mouseTargetFactory;\n        this._createMouseTarget = createMouseTarget;\n        this._getMouseColumn = getMouseColumn;\n        this._mouseMoveMonitor = this._register(new GlobalEditorPointerMoveMonitor(this._viewHelper.viewDomNode));\n        this._topBottomDragScrolling = this._register(new TopBottomDragScrolling(this._context, this._viewHelper, this._mouseTargetFactory, (position, inSelectionMode, revealType) => this._dispatchMouse(position, inSelectionMode, revealType)));\n        this._mouseState = new MouseDownState();\n        this._currentSelection = new Selection(1, 1, 1, 1);\n        this._isActive = false;\n        this._lastMouseEvent = null;\n    }\n    dispose() {\n        super.dispose();\n    }\n    isActive() {\n        return this._isActive;\n    }\n    _onMouseDownThenMove(e) {\n        this._lastMouseEvent = e;\n        this._mouseState.setModifiers(e);\n        const position = this._findMousePosition(e, false);\n        if (!position) {\n            // Ignoring because position is unknown\n            return;\n        }\n        if (this._mouseState.isDragAndDrop) {\n            this._viewController.emitMouseDrag({\n                event: e,\n                target: position\n            });\n        }\n        else {\n            if (position.type === 13 /* MouseTargetType.OUTSIDE_EDITOR */ && (position.outsidePosition === 'above' || position.outsidePosition === 'below')) {\n                this._topBottomDragScrolling.start(position, e);\n            }\n            else {\n                this._topBottomDragScrolling.stop();\n                this._dispatchMouse(position, true, 1 /* NavigationCommandRevealType.Minimal */);\n            }\n        }\n    }\n    start(targetType, e, pointerId) {\n        this._lastMouseEvent = e;\n        this._mouseState.setStartedOnLineNumbers(targetType === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */);\n        this._mouseState.setStartButtons(e);\n        this._mouseState.setModifiers(e);\n        const position = this._findMousePosition(e, true);\n        if (!position || !position.position) {\n            // Ignoring because position is unknown\n            return;\n        }\n        this._mouseState.trySetCount(e.detail, position.position);\n        // Overwrite the detail of the MouseEvent, as it will be sent out in an event and contributions might rely on it.\n        e.detail = this._mouseState.count;\n        const options = this._context.configuration.options;\n        if (!options.get(86 /* EditorOption.readOnly */)\n            && options.get(32 /* EditorOption.dragAndDrop */)\n            && !options.get(19 /* EditorOption.columnSelection */)\n            && !this._mouseState.altKey // we don't support multiple mouse\n            && e.detail < 2 // only single click on a selection can work\n            && !this._isActive // the mouse is not down yet\n            && !this._currentSelection.isEmpty() // we don't drag single cursor\n            && (position.type === 6 /* MouseTargetType.CONTENT_TEXT */) // single click on text\n            && position.position && this._currentSelection.containsPosition(position.position) // single click on a selection\n        ) {\n            this._mouseState.isDragAndDrop = true;\n            this._isActive = true;\n            this._mouseMoveMonitor.startMonitoring(this._viewHelper.viewLinesDomNode, pointerId, e.buttons, (e) => this._onMouseDownThenMove(e), (browserEvent) => {\n                const position = this._findMousePosition(this._lastMouseEvent, false);\n                if (browserEvent && browserEvent instanceof KeyboardEvent) {\n                    // cancel\n                    this._viewController.emitMouseDropCanceled();\n                }\n                else {\n                    this._viewController.emitMouseDrop({\n                        event: this._lastMouseEvent,\n                        target: (position ? this._createMouseTarget(this._lastMouseEvent, true) : null) // Ignoring because position is unknown, e.g., Content View Zone\n                    });\n                }\n                this._stop();\n            });\n            return;\n        }\n        this._mouseState.isDragAndDrop = false;\n        this._dispatchMouse(position, e.shiftKey, 1 /* NavigationCommandRevealType.Minimal */);\n        if (!this._isActive) {\n            this._isActive = true;\n            this._mouseMoveMonitor.startMonitoring(this._viewHelper.viewLinesDomNode, pointerId, e.buttons, (e) => this._onMouseDownThenMove(e), () => this._stop());\n        }\n    }\n    _stop() {\n        this._isActive = false;\n        this._topBottomDragScrolling.stop();\n    }\n    onHeightChanged() {\n        this._mouseMoveMonitor.stopMonitoring();\n    }\n    onPointerUp() {\n        this._mouseMoveMonitor.stopMonitoring();\n    }\n    onCursorStateChanged(e) {\n        this._currentSelection = e.selections[0];\n    }\n    _getPositionOutsideEditor(e) {\n        const editorContent = e.editorPos;\n        const model = this._context.viewModel;\n        const viewLayout = this._context.viewLayout;\n        const mouseColumn = this._getMouseColumn(e);\n        if (e.posy < editorContent.y) {\n            const outsideDistance = editorContent.y - e.posy;\n            const verticalOffset = Math.max(viewLayout.getCurrentScrollTop() - outsideDistance, 0);\n            const viewZoneData = HitTestContext.getZoneAtCoord(this._context, verticalOffset);\n            if (viewZoneData) {\n                const newPosition = this._helpPositionJumpOverViewZone(viewZoneData);\n                if (newPosition) {\n                    return MouseTarget.createOutsideEditor(mouseColumn, newPosition, 'above', outsideDistance);\n                }\n            }\n            const aboveLineNumber = viewLayout.getLineNumberAtVerticalOffset(verticalOffset);\n            return MouseTarget.createOutsideEditor(mouseColumn, new Position(aboveLineNumber, 1), 'above', outsideDistance);\n        }\n        if (e.posy > editorContent.y + editorContent.height) {\n            const outsideDistance = e.posy - editorContent.y - editorContent.height;\n            const verticalOffset = viewLayout.getCurrentScrollTop() + e.relativePos.y;\n            const viewZoneData = HitTestContext.getZoneAtCoord(this._context, verticalOffset);\n            if (viewZoneData) {\n                const newPosition = this._helpPositionJumpOverViewZone(viewZoneData);\n                if (newPosition) {\n                    return MouseTarget.createOutsideEditor(mouseColumn, newPosition, 'below', outsideDistance);\n                }\n            }\n            const belowLineNumber = viewLayout.getLineNumberAtVerticalOffset(verticalOffset);\n            return MouseTarget.createOutsideEditor(mouseColumn, new Position(belowLineNumber, model.getLineMaxColumn(belowLineNumber)), 'below', outsideDistance);\n        }\n        const possibleLineNumber = viewLayout.getLineNumberAtVerticalOffset(viewLayout.getCurrentScrollTop() + e.relativePos.y);\n        if (e.posx < editorContent.x) {\n            const outsideDistance = editorContent.x - e.posx;\n            return MouseTarget.createOutsideEditor(mouseColumn, new Position(possibleLineNumber, 1), 'left', outsideDistance);\n        }\n        if (e.posx > editorContent.x + editorContent.width) {\n            const outsideDistance = e.posx - editorContent.x - editorContent.width;\n            return MouseTarget.createOutsideEditor(mouseColumn, new Position(possibleLineNumber, model.getLineMaxColumn(possibleLineNumber)), 'right', outsideDistance);\n        }\n        return null;\n    }\n    _findMousePosition(e, testEventTarget) {\n        const positionOutsideEditor = this._getPositionOutsideEditor(e);\n        if (positionOutsideEditor) {\n            return positionOutsideEditor;\n        }\n        const t = this._createMouseTarget(e, testEventTarget);\n        const hintedPosition = t.position;\n        if (!hintedPosition) {\n            return null;\n        }\n        if (t.type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */ || t.type === 5 /* MouseTargetType.GUTTER_VIEW_ZONE */) {\n            const newPosition = this._helpPositionJumpOverViewZone(t.detail);\n            if (newPosition) {\n                return MouseTarget.createViewZone(t.type, t.element, t.mouseColumn, newPosition, t.detail);\n            }\n        }\n        return t;\n    }\n    _helpPositionJumpOverViewZone(viewZoneData) {\n        // Force position on view zones to go above or below depending on where selection started from\n        const selectionStart = new Position(this._currentSelection.selectionStartLineNumber, this._currentSelection.selectionStartColumn);\n        const positionBefore = viewZoneData.positionBefore;\n        const positionAfter = viewZoneData.positionAfter;\n        if (positionBefore && positionAfter) {\n            if (positionBefore.isBefore(selectionStart)) {\n                return positionBefore;\n            }\n            else {\n                return positionAfter;\n            }\n        }\n        return null;\n    }\n    _dispatchMouse(position, inSelectionMode, revealType) {\n        if (!position.position) {\n            return;\n        }\n        this._viewController.dispatchMouse({\n            position: position.position,\n            mouseColumn: position.mouseColumn,\n            startedOnLineNumbers: this._mouseState.startedOnLineNumbers,\n            revealType,\n            inSelectionMode: inSelectionMode,\n            mouseDownCount: this._mouseState.count,\n            altKey: this._mouseState.altKey,\n            ctrlKey: this._mouseState.ctrlKey,\n            metaKey: this._mouseState.metaKey,\n            shiftKey: this._mouseState.shiftKey,\n            leftButton: this._mouseState.leftButton,\n            middleButton: this._mouseState.middleButton,\n            onInjectedText: position.type === 6 /* MouseTargetType.CONTENT_TEXT */ && position.detail.injectedText !== null\n        });\n    }\n}\nclass TopBottomDragScrolling extends Disposable {\n    constructor(_context, _viewHelper, _mouseTargetFactory, _dispatchMouse) {\n        super();\n        this._context = _context;\n        this._viewHelper = _viewHelper;\n        this._mouseTargetFactory = _mouseTargetFactory;\n        this._dispatchMouse = _dispatchMouse;\n        this._operation = null;\n    }\n    dispose() {\n        super.dispose();\n        this.stop();\n    }\n    start(position, mouseEvent) {\n        if (this._operation) {\n            this._operation.setPosition(position, mouseEvent);\n        }\n        else {\n            this._operation = new TopBottomDragScrollingOperation(this._context, this._viewHelper, this._mouseTargetFactory, this._dispatchMouse, position, mouseEvent);\n        }\n    }\n    stop() {\n        if (this._operation) {\n            this._operation.dispose();\n            this._operation = null;\n        }\n    }\n}\nclass TopBottomDragScrollingOperation extends Disposable {\n    constructor(_context, _viewHelper, _mouseTargetFactory, _dispatchMouse, position, mouseEvent) {\n        super();\n        this._context = _context;\n        this._viewHelper = _viewHelper;\n        this._mouseTargetFactory = _mouseTargetFactory;\n        this._dispatchMouse = _dispatchMouse;\n        this._position = position;\n        this._mouseEvent = mouseEvent;\n        this._lastTime = Date.now();\n        this._animationFrameDisposable = dom.scheduleAtNextAnimationFrame(() => this._execute());\n    }\n    dispose() {\n        this._animationFrameDisposable.dispose();\n    }\n    setPosition(position, mouseEvent) {\n        this._position = position;\n        this._mouseEvent = mouseEvent;\n    }\n    /**\n     * update internal state and return elapsed ms since last time\n     */\n    _tick() {\n        const now = Date.now();\n        const elapsed = now - this._lastTime;\n        this._lastTime = now;\n        return elapsed;\n    }\n    /**\n     * get the number of lines per second to auto-scroll\n     */\n    _getScrollSpeed() {\n        const lineHeight = this._context.configuration.options.get(63 /* EditorOption.lineHeight */);\n        const viewportInLines = this._context.configuration.options.get(138 /* EditorOption.layoutInfo */).height / lineHeight;\n        const outsideDistanceInLines = this._position.outsideDistance / lineHeight;\n        if (outsideDistanceInLines <= 1.5) {\n            return Math.max(30, viewportInLines * (1 + outsideDistanceInLines));\n        }\n        if (outsideDistanceInLines <= 3) {\n            return Math.max(60, viewportInLines * (2 + outsideDistanceInLines));\n        }\n        return Math.max(200, viewportInLines * (7 + outsideDistanceInLines));\n    }\n    _execute() {\n        const lineHeight = this._context.configuration.options.get(63 /* EditorOption.lineHeight */);\n        const scrollSpeedInLines = this._getScrollSpeed();\n        const elapsed = this._tick();\n        const scrollInPixels = scrollSpeedInLines * (elapsed / 1000) * lineHeight;\n        const scrollValue = (this._position.outsidePosition === 'above' ? -scrollInPixels : scrollInPixels);\n        this._context.viewModel.viewLayout.deltaScrollNow(0, scrollValue);\n        this._viewHelper.renderNow();\n        const viewportData = this._context.viewLayout.getLinesViewportData();\n        const edgeLineNumber = (this._position.outsidePosition === 'above' ? viewportData.startLineNumber : viewportData.endLineNumber);\n        // First, try to find a position that matches the horizontal position of the mouse\n        let mouseTarget;\n        {\n            const editorPos = createEditorPagePosition(this._viewHelper.viewDomNode);\n            const horizontalScrollbarHeight = this._context.configuration.options.get(138 /* EditorOption.layoutInfo */).horizontalScrollbarHeight;\n            const pos = new PageCoordinates(this._mouseEvent.pos.x, editorPos.y + editorPos.height - horizontalScrollbarHeight - 0.1);\n            const relativePos = createCoordinatesRelativeToEditor(this._viewHelper.viewDomNode, editorPos, pos);\n            mouseTarget = this._mouseTargetFactory.createMouseTarget(this._viewHelper.getLastRenderData(), editorPos, pos, relativePos, null);\n        }\n        if (!mouseTarget.position || mouseTarget.position.lineNumber !== edgeLineNumber) {\n            if (this._position.outsidePosition === 'above') {\n                mouseTarget = MouseTarget.createOutsideEditor(this._position.mouseColumn, new Position(edgeLineNumber, 1), 'above', this._position.outsideDistance);\n            }\n            else {\n                mouseTarget = MouseTarget.createOutsideEditor(this._position.mouseColumn, new Position(edgeLineNumber, this._context.viewModel.getLineMaxColumn(edgeLineNumber)), 'below', this._position.outsideDistance);\n            }\n        }\n        this._dispatchMouse(mouseTarget, true, 2 /* NavigationCommandRevealType.None */);\n        this._animationFrameDisposable = dom.scheduleAtNextAnimationFrame(() => this._execute());\n    }\n}\nclass MouseDownState {\n    get altKey() { return this._altKey; }\n    get ctrlKey() { return this._ctrlKey; }\n    get metaKey() { return this._metaKey; }\n    get shiftKey() { return this._shiftKey; }\n    get leftButton() { return this._leftButton; }\n    get middleButton() { return this._middleButton; }\n    get startedOnLineNumbers() { return this._startedOnLineNumbers; }\n    constructor() {\n        this._altKey = false;\n        this._ctrlKey = false;\n        this._metaKey = false;\n        this._shiftKey = false;\n        this._leftButton = false;\n        this._middleButton = false;\n        this._startedOnLineNumbers = false;\n        this._lastMouseDownPosition = null;\n        this._lastMouseDownPositionEqualCount = 0;\n        this._lastMouseDownCount = 0;\n        this._lastSetMouseDownCountTime = 0;\n        this.isDragAndDrop = false;\n    }\n    get count() {\n        return this._lastMouseDownCount;\n    }\n    setModifiers(source) {\n        this._altKey = source.altKey;\n        this._ctrlKey = source.ctrlKey;\n        this._metaKey = source.metaKey;\n        this._shiftKey = source.shiftKey;\n    }\n    setStartButtons(source) {\n        this._leftButton = source.leftButton;\n        this._middleButton = source.middleButton;\n    }\n    setStartedOnLineNumbers(startedOnLineNumbers) {\n        this._startedOnLineNumbers = startedOnLineNumbers;\n    }\n    trySetCount(setMouseDownCount, newMouseDownPosition) {\n        // a. Invalidate multiple clicking if too much time has passed (will be hit by IE because the detail field of mouse events contains garbage in IE10)\n        const currentTime = (new Date()).getTime();\n        if (currentTime - this._lastSetMouseDownCountTime > MouseDownState.CLEAR_MOUSE_DOWN_COUNT_TIME) {\n            setMouseDownCount = 1;\n        }\n        this._lastSetMouseDownCountTime = currentTime;\n        // b. Ensure that we don't jump from single click to triple click in one go (will be hit by IE because the detail field of mouse events contains garbage in IE10)\n        if (setMouseDownCount > this._lastMouseDownCount + 1) {\n            setMouseDownCount = this._lastMouseDownCount + 1;\n        }\n        // c. Invalidate multiple clicking if the logical position is different\n        if (this._lastMouseDownPosition && this._lastMouseDownPosition.equals(newMouseDownPosition)) {\n            this._lastMouseDownPositionEqualCount++;\n        }\n        else {\n            this._lastMouseDownPositionEqualCount = 1;\n        }\n        this._lastMouseDownPosition = newMouseDownPosition;\n        // Finally set the lastMouseDownCount\n        this._lastMouseDownCount = Math.min(setMouseDownCount, this._lastMouseDownPositionEqualCount);\n    }\n}\nMouseDownState.CLEAR_MOUSE_DOWN_COUNT_TIME = 400; // ms\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { EventType, Gesture } from '../../../base/browser/touch.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { MouseHandler } from './mouseHandler.js';\nimport { EditorMouseEvent, EditorPointerEventFactory } from '../editorDom.js';\nimport { BrowserFeatures } from '../../../base/browser/canIUse.js';\nimport { TextAreaSyntethicEvents } from './textAreaInput.js';\n/**\n * Currently only tested on iOS 13/ iPadOS.\n */\nexport class PointerEventHandler extends MouseHandler {\n    constructor(context, viewController, viewHelper) {\n        super(context, viewController, viewHelper);\n        this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, (e) => this.onTap(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, (e) => this.onChange(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, (e) => this._onContextMenu(new EditorMouseEvent(e, false, this.viewHelper.viewDomNode), false)));\n        this._lastPointerType = 'mouse';\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, 'pointerdown', (e) => {\n            const pointerType = e.pointerType;\n            if (pointerType === 'mouse') {\n                this._lastPointerType = 'mouse';\n                return;\n            }\n            else if (pointerType === 'touch') {\n                this._lastPointerType = 'touch';\n            }\n            else {\n                this._lastPointerType = 'pen';\n            }\n        }));\n        // PonterEvents\n        const pointerEvents = new EditorPointerEventFactory(this.viewHelper.viewDomNode);\n        this._register(pointerEvents.onPointerMove(this.viewHelper.viewDomNode, (e) => this._onMouseMove(e)));\n        this._register(pointerEvents.onPointerUp(this.viewHelper.viewDomNode, (e) => this._onMouseUp(e)));\n        this._register(pointerEvents.onPointerLeave(this.viewHelper.viewDomNode, (e) => this._onMouseLeave(e)));\n        this._register(pointerEvents.onPointerDown(this.viewHelper.viewDomNode, (e, pointerId) => this._onMouseDown(e, pointerId)));\n    }\n    onTap(event) {\n        if (!event.initialTarget || !this.viewHelper.linesContentDomNode.contains(event.initialTarget)) {\n            return;\n        }\n        event.preventDefault();\n        this.viewHelper.focusTextArea();\n        const target = this._createMouseTarget(new EditorMouseEvent(event, false, this.viewHelper.viewDomNode), false);\n        if (target.position) {\n            // this.viewController.moveTo(target.position);\n            this.viewController.dispatchMouse({\n                position: target.position,\n                mouseColumn: target.position.column,\n                startedOnLineNumbers: false,\n                revealType: 1 /* NavigationCommandRevealType.Minimal */,\n                mouseDownCount: event.tapCount,\n                inSelectionMode: false,\n                altKey: false,\n                ctrlKey: false,\n                metaKey: false,\n                shiftKey: false,\n                leftButton: false,\n                middleButton: false,\n                onInjectedText: target.type === 6 /* MouseTargetType.CONTENT_TEXT */ && target.detail.injectedText !== null\n            });\n        }\n    }\n    onChange(e) {\n        if (this._lastPointerType === 'touch') {\n            this._context.viewModel.viewLayout.deltaScrollNow(-e.translationX, -e.translationY);\n        }\n    }\n    _onMouseDown(e, pointerId) {\n        if (e.browserEvent.pointerType === 'touch') {\n            return;\n        }\n        super._onMouseDown(e, pointerId);\n    }\n}\nclass TouchHandler extends MouseHandler {\n    constructor(context, viewController, viewHelper) {\n        super(context, viewController, viewHelper);\n        this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, (e) => this.onTap(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, (e) => this.onChange(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, (e) => this._onContextMenu(new EditorMouseEvent(e, false, this.viewHelper.viewDomNode), false)));\n    }\n    onTap(event) {\n        event.preventDefault();\n        this.viewHelper.focusTextArea();\n        const target = this._createMouseTarget(new EditorMouseEvent(event, false, this.viewHelper.viewDomNode), false);\n        if (target.position) {\n            // Send the tap event also to the <textarea> (for input purposes)\n            const event = document.createEvent('CustomEvent');\n            event.initEvent(TextAreaSyntethicEvents.Tap, false, true);\n            this.viewHelper.dispatchTextAreaEvent(event);\n            this.viewController.moveTo(target.position, 1 /* NavigationCommandRevealType.Minimal */);\n        }\n    }\n    onChange(e) {\n        this._context.viewModel.viewLayout.deltaScrollNow(-e.translationX, -e.translationY);\n    }\n}\nexport class PointerHandler extends Disposable {\n    constructor(context, viewController, viewHelper) {\n        super();\n        if ((platform.isIOS && BrowserFeatures.pointerEvents)) {\n            this.handler = this._register(new PointerEventHandler(context, viewController, viewHelper));\n        }\n        else if (window.TouchEvent) {\n            this.handler = this._register(new TouchHandler(context, viewController, viewHelper));\n        }\n        else {\n            this.handler = this._register(new MouseHandler(context, viewController, viewHelper));\n        }\n    }\n    getTargetAtClientPoint(clientX, clientY) {\n        return this.handler.getTargetAtClientPoint(clientX, clientY);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './textAreaHandler.css';\nimport * as nls from '../../../nls.js';\nimport * as browser from '../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { CopyOptions, TextAreaInput, TextAreaWrapper } from './textAreaInput.js';\nimport { PagedScreenReaderStrategy, TextAreaState, _debugComposition } from './textAreaState.js';\nimport { PartFingerprints, ViewPart } from '../view/viewPart.js';\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\nimport { Margin } from '../viewParts/margin/margin.js';\nimport { EditorOptions } from '../../common/config/editorOptions.js';\nimport { getMapForWordSeparators } from '../../common/core/wordCharacterClassifier.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { TokenizationRegistry } from '../../common/languages.js';\nimport { Color } from '../../../base/common/color.js';\nimport { IME } from '../../../base/common/ime.js';\nclass VisibleTextAreaData {\n    constructor(_context, modelLineNumber, distanceToModelLineStart, widthOfHiddenLineTextBefore, distanceToModelLineEnd) {\n        this._context = _context;\n        this.modelLineNumber = modelLineNumber;\n        this.distanceToModelLineStart = distanceToModelLineStart;\n        this.widthOfHiddenLineTextBefore = widthOfHiddenLineTextBefore;\n        this.distanceToModelLineEnd = distanceToModelLineEnd;\n        this._visibleTextAreaBrand = undefined;\n        this.startPosition = null;\n        this.endPosition = null;\n        this.visibleTextareaStart = null;\n        this.visibleTextareaEnd = null;\n        /**\n         * When doing composition, the currently composed text might be split up into\n         * multiple tokens, then merged again into a single token, etc. Here we attempt\n         * to keep the presentation of the <textarea> stable by using the previous used\n         * style if multiple tokens come into play. This avoids flickering.\n         */\n        this._previousPresentation = null;\n    }\n    prepareRender(visibleRangeProvider) {\n        const startModelPosition = new Position(this.modelLineNumber, this.distanceToModelLineStart + 1);\n        const endModelPosition = new Position(this.modelLineNumber, this._context.viewModel.model.getLineMaxColumn(this.modelLineNumber) - this.distanceToModelLineEnd);\n        this.startPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(startModelPosition);\n        this.endPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(endModelPosition);\n        if (this.startPosition.lineNumber === this.endPosition.lineNumber) {\n            this.visibleTextareaStart = visibleRangeProvider.visibleRangeForPosition(this.startPosition);\n            this.visibleTextareaEnd = visibleRangeProvider.visibleRangeForPosition(this.endPosition);\n        }\n        else {\n            // TODO: what if the view positions are not on the same line?\n            this.visibleTextareaStart = null;\n            this.visibleTextareaEnd = null;\n        }\n    }\n    definePresentation(tokenPresentation) {\n        if (!this._previousPresentation) {\n            // To avoid flickering, once set, always reuse a presentation throughout the entire IME session\n            if (tokenPresentation) {\n                this._previousPresentation = tokenPresentation;\n            }\n            else {\n                this._previousPresentation = {\n                    foreground: 1 /* ColorId.DefaultForeground */,\n                    italic: false,\n                    bold: false,\n                    underline: false,\n                    strikethrough: false,\n                };\n            }\n        }\n        return this._previousPresentation;\n    }\n}\nconst canUseZeroSizeTextarea = (browser.isFirefox);\nexport class TextAreaHandler extends ViewPart {\n    constructor(context, viewController, visibleRangeProvider) {\n        super(context);\n        this._primaryCursorPosition = new Position(1, 1);\n        this._primaryCursorVisibleRange = null;\n        this._viewController = viewController;\n        this._visibleRangeProvider = visibleRangeProvider;\n        this._scrollLeft = 0;\n        this._scrollTop = 0;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._setAccessibilityOptions(options);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentHeight = layoutInfo.height;\n        this._fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._emptySelectionClipboard = options.get(34 /* EditorOption.emptySelectionClipboard */);\n        this._copyWithSyntaxHighlighting = options.get(22 /* EditorOption.copyWithSyntaxHighlighting */);\n        this._visibleTextArea = null;\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._modelSelections = [new Selection(1, 1, 1, 1)];\n        this._lastRenderPosition = null;\n        // Text Area (The focus will always be in the textarea when the cursor is blinking)\n        this.textArea = createFastDomNode(document.createElement('textarea'));\n        PartFingerprints.write(this.textArea, 6 /* PartFingerprint.TextArea */);\n        this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this.textArea.setAttribute('wrap', this._textAreaWrapping && !this._visibleTextArea ? 'on' : 'off');\n        const { tabSize } = this._context.viewModel.model.getOptions();\n        this.textArea.domNode.style.tabSize = `${tabSize * this._fontInfo.spaceWidth}px`;\n        this.textArea.setAttribute('autocorrect', 'off');\n        this.textArea.setAttribute('autocapitalize', 'off');\n        this.textArea.setAttribute('autocomplete', 'off');\n        this.textArea.setAttribute('spellcheck', 'false');\n        this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n        this.textArea.setAttribute('tabindex', String(options.get(118 /* EditorOption.tabIndex */)));\n        this.textArea.setAttribute('role', 'textbox');\n        this.textArea.setAttribute('aria-roledescription', nls.localize('editor', \"editor\"));\n        this.textArea.setAttribute('aria-multiline', 'true');\n        this.textArea.setAttribute('aria-haspopup', 'false');\n        this.textArea.setAttribute('aria-autocomplete', 'both');\n        this._ensureReadOnlyAttribute();\n        this.textAreaCover = createFastDomNode(document.createElement('div'));\n        this.textAreaCover.setPosition('absolute');\n        const simpleModel = {\n            getLineCount: () => {\n                return this._context.viewModel.getLineCount();\n            },\n            getLineMaxColumn: (lineNumber) => {\n                return this._context.viewModel.getLineMaxColumn(lineNumber);\n            },\n            getValueInRange: (range, eol) => {\n                return this._context.viewModel.getValueInRange(range, eol);\n            },\n            getValueLengthInRange: (range, eol) => {\n                return this._context.viewModel.getValueLengthInRange(range, eol);\n            },\n            modifyPosition: (position, offset) => {\n                return this._context.viewModel.modifyPosition(position, offset);\n            }\n        };\n        const textAreaInputHost = {\n            getDataToCopy: () => {\n                const rawTextToCopy = this._context.viewModel.getPlainTextToCopy(this._modelSelections, this._emptySelectionClipboard, platform.isWindows);\n                const newLineCharacter = this._context.viewModel.model.getEOL();\n                const isFromEmptySelection = (this._emptySelectionClipboard && this._modelSelections.length === 1 && this._modelSelections[0].isEmpty());\n                const multicursorText = (Array.isArray(rawTextToCopy) ? rawTextToCopy : null);\n                const text = (Array.isArray(rawTextToCopy) ? rawTextToCopy.join(newLineCharacter) : rawTextToCopy);\n                let html = undefined;\n                let mode = null;\n                if (CopyOptions.forceCopyWithSyntaxHighlighting || (this._copyWithSyntaxHighlighting && text.length < 65536)) {\n                    const richText = this._context.viewModel.getRichTextToCopy(this._modelSelections, this._emptySelectionClipboard);\n                    if (richText) {\n                        html = richText.html;\n                        mode = richText.mode;\n                    }\n                }\n                return {\n                    isFromEmptySelection,\n                    multicursorText,\n                    text,\n                    html,\n                    mode\n                };\n            },\n            getScreenReaderContent: () => {\n                if (this._accessibilitySupport === 1 /* AccessibilitySupport.Disabled */) {\n                    // We know for a fact that a screen reader is not attached\n                    // On OSX, we write the character before the cursor to allow for \"long-press\" composition\n                    // Also on OSX, we write the word before the cursor to allow for the Accessibility Keyboard to give good hints\n                    const selection = this._selections[0];\n                    if (platform.isMacintosh && selection.isEmpty()) {\n                        const position = selection.getStartPosition();\n                        let textBefore = this._getWordBeforePosition(position);\n                        if (textBefore.length === 0) {\n                            textBefore = this._getCharacterBeforePosition(position);\n                        }\n                        if (textBefore.length > 0) {\n                            return new TextAreaState(textBefore, textBefore.length, textBefore.length, Range.fromPositions(position), 0);\n                        }\n                    }\n                    // on macOS, write current selection into textarea will allow system text services pick selected text,\n                    // but we still want to limit the amount of text given Chromium handles very poorly text even of a few\n                    // thousand chars\n                    // (https://github.com/microsoft/vscode/issues/27799)\n                    const LIMIT_CHARS = 500;\n                    if (platform.isMacintosh && !selection.isEmpty() && simpleModel.getValueLengthInRange(selection, 0 /* EndOfLinePreference.TextDefined */) < LIMIT_CHARS) {\n                        const text = simpleModel.getValueInRange(selection, 0 /* EndOfLinePreference.TextDefined */);\n                        return new TextAreaState(text, 0, text.length, selection, 0);\n                    }\n                    // on Safari, document.execCommand('cut') and document.execCommand('copy') will just not work\n                    // if the textarea has no content selected. So if there is an editor selection, ensure something\n                    // is selected in the textarea.\n                    if (browser.isSafari && !selection.isEmpty()) {\n                        const placeholderText = 'vscode-placeholder';\n                        return new TextAreaState(placeholderText, 0, placeholderText.length, null, undefined);\n                    }\n                    return TextAreaState.EMPTY;\n                }\n                if (browser.isAndroid) {\n                    // when tapping in the editor on a word, Android enters composition mode.\n                    // in the `compositionstart` event we cannot clear the textarea, because\n                    // it then forgets to ever send a `compositionend`.\n                    // we therefore only write the current word in the textarea\n                    const selection = this._selections[0];\n                    if (selection.isEmpty()) {\n                        const position = selection.getStartPosition();\n                        const [wordAtPosition, positionOffsetInWord] = this._getAndroidWordAtPosition(position);\n                        if (wordAtPosition.length > 0) {\n                            return new TextAreaState(wordAtPosition, positionOffsetInWord, positionOffsetInWord, Range.fromPositions(position), 0);\n                        }\n                    }\n                    return TextAreaState.EMPTY;\n                }\n                return PagedScreenReaderStrategy.fromEditorSelection(simpleModel, this._selections[0], this._accessibilityPageSize, this._accessibilitySupport === 0 /* AccessibilitySupport.Unknown */);\n            },\n            deduceModelPosition: (viewAnchorPosition, deltaOffset, lineFeedCnt) => {\n                return this._context.viewModel.deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt);\n            }\n        };\n        const textAreaWrapper = this._register(new TextAreaWrapper(this.textArea.domNode));\n        this._textAreaInput = this._register(new TextAreaInput(textAreaInputHost, textAreaWrapper, platform.OS, browser));\n        this._register(this._textAreaInput.onKeyDown((e) => {\n            this._viewController.emitKeyDown(e);\n        }));\n        this._register(this._textAreaInput.onKeyUp((e) => {\n            this._viewController.emitKeyUp(e);\n        }));\n        this._register(this._textAreaInput.onPaste((e) => {\n            let pasteOnNewLine = false;\n            let multicursorText = null;\n            let mode = null;\n            if (e.metadata) {\n                pasteOnNewLine = (this._emptySelectionClipboard && !!e.metadata.isFromEmptySelection);\n                multicursorText = (typeof e.metadata.multicursorText !== 'undefined' ? e.metadata.multicursorText : null);\n                mode = e.metadata.mode;\n            }\n            this._viewController.paste(e.text, pasteOnNewLine, multicursorText, mode);\n        }));\n        this._register(this._textAreaInput.onCut(() => {\n            this._viewController.cut();\n        }));\n        this._register(this._textAreaInput.onType((e) => {\n            if (e.replacePrevCharCnt || e.replaceNextCharCnt || e.positionDelta) {\n                // must be handled through the new command\n                if (_debugComposition) {\n                    console.log(` => compositionType: <<${e.text}>>, ${e.replacePrevCharCnt}, ${e.replaceNextCharCnt}, ${e.positionDelta}`);\n                }\n                this._viewController.compositionType(e.text, e.replacePrevCharCnt, e.replaceNextCharCnt, e.positionDelta);\n            }\n            else {\n                if (_debugComposition) {\n                    console.log(` => type: <<${e.text}>>`);\n                }\n                this._viewController.type(e.text);\n            }\n        }));\n        this._register(this._textAreaInput.onSelectionChangeRequest((modelSelection) => {\n            this._viewController.setSelection(modelSelection);\n        }));\n        this._register(this._textAreaInput.onCompositionStart((e) => {\n            // The textarea might contain some content when composition starts.\n            //\n            // When we make the textarea visible, it always has a height of 1 line,\n            // so we don't need to worry too much about content on lines above or below\n            // the selection.\n            //\n            // However, the text on the current line needs to be made visible because\n            // some IME methods allow to move to other glyphs on the current line\n            // (by pressing arrow keys).\n            //\n            // (1) The textarea might contain only some parts of the current line,\n            // like the word before the selection. Also, the content inside the textarea\n            // can grow or shrink as composition occurs. We therefore anchor the textarea\n            // in terms of distance to a certain line start and line end.\n            //\n            // (2) Also, we should not make \\t characters visible, because their rendering\n            // inside the <textarea> will not align nicely with our rendering. We therefore\n            // will hide (if necessary) some of the leading text on the current line.\n            const ta = this.textArea.domNode;\n            const modelSelection = this._modelSelections[0];\n            const { distanceToModelLineStart, widthOfHiddenTextBefore } = (() => {\n                // Find the text that is on the current line before the selection\n                const textBeforeSelection = ta.value.substring(0, Math.min(ta.selectionStart, ta.selectionEnd));\n                const lineFeedOffset1 = textBeforeSelection.lastIndexOf('\\n');\n                const lineTextBeforeSelection = textBeforeSelection.substring(lineFeedOffset1 + 1);\n                // We now search to see if we should hide some part of it (if it contains \\t)\n                const tabOffset1 = lineTextBeforeSelection.lastIndexOf('\\t');\n                const desiredVisibleBeforeCharCount = lineTextBeforeSelection.length - tabOffset1 - 1;\n                const startModelPosition = modelSelection.getStartPosition();\n                const visibleBeforeCharCount = Math.min(startModelPosition.column - 1, desiredVisibleBeforeCharCount);\n                const distanceToModelLineStart = startModelPosition.column - 1 - visibleBeforeCharCount;\n                const hiddenLineTextBefore = lineTextBeforeSelection.substring(0, lineTextBeforeSelection.length - visibleBeforeCharCount);\n                const { tabSize } = this._context.viewModel.model.getOptions();\n                const widthOfHiddenTextBefore = measureText(hiddenLineTextBefore, this._fontInfo, tabSize);\n                return { distanceToModelLineStart, widthOfHiddenTextBefore };\n            })();\n            const { distanceToModelLineEnd } = (() => {\n                // Find the text that is on the current line after the selection\n                const textAfterSelection = ta.value.substring(Math.max(ta.selectionStart, ta.selectionEnd));\n                const lineFeedOffset2 = textAfterSelection.indexOf('\\n');\n                const lineTextAfterSelection = lineFeedOffset2 === -1 ? textAfterSelection : textAfterSelection.substring(0, lineFeedOffset2);\n                const tabOffset2 = lineTextAfterSelection.indexOf('\\t');\n                const desiredVisibleAfterCharCount = (tabOffset2 === -1 ? lineTextAfterSelection.length : lineTextAfterSelection.length - tabOffset2 - 1);\n                const endModelPosition = modelSelection.getEndPosition();\n                const visibleAfterCharCount = Math.min(this._context.viewModel.model.getLineMaxColumn(endModelPosition.lineNumber) - endModelPosition.column, desiredVisibleAfterCharCount);\n                const distanceToModelLineEnd = this._context.viewModel.model.getLineMaxColumn(endModelPosition.lineNumber) - endModelPosition.column - visibleAfterCharCount;\n                return { distanceToModelLineEnd };\n            })();\n            // Scroll to reveal the location in the editor where composition occurs\n            this._context.viewModel.revealRange('keyboard', true, Range.fromPositions(this._selections[0].getStartPosition()), 0 /* viewEvents.VerticalRevealType.Simple */, 1 /* ScrollType.Immediate */);\n            this._visibleTextArea = new VisibleTextAreaData(this._context, modelSelection.startLineNumber, distanceToModelLineStart, widthOfHiddenTextBefore, distanceToModelLineEnd);\n            // We turn off wrapping if the <textarea> becomes visible for composition\n            this.textArea.setAttribute('wrap', this._textAreaWrapping && !this._visibleTextArea ? 'on' : 'off');\n            this._visibleTextArea.prepareRender(this._visibleRangeProvider);\n            this._render();\n            // Show the textarea\n            this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ime-input`);\n            this._viewController.compositionStart();\n            this._context.viewModel.onCompositionStart();\n        }));\n        this._register(this._textAreaInput.onCompositionUpdate((e) => {\n            if (!this._visibleTextArea) {\n                return;\n            }\n            this._visibleTextArea.prepareRender(this._visibleRangeProvider);\n            this._render();\n        }));\n        this._register(this._textAreaInput.onCompositionEnd(() => {\n            this._visibleTextArea = null;\n            // We turn on wrapping as necessary if the <textarea> hides after composition\n            this.textArea.setAttribute('wrap', this._textAreaWrapping && !this._visibleTextArea ? 'on' : 'off');\n            this._render();\n            this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n            this._viewController.compositionEnd();\n            this._context.viewModel.onCompositionEnd();\n        }));\n        this._register(this._textAreaInput.onFocus(() => {\n            this._context.viewModel.setHasFocus(true);\n        }));\n        this._register(this._textAreaInput.onBlur(() => {\n            this._context.viewModel.setHasFocus(false);\n        }));\n        this._register(IME.onDidChange(() => {\n            this._ensureReadOnlyAttribute();\n        }));\n    }\n    writeScreenReaderContent(reason) {\n        this._textAreaInput.writeScreenReaderContent(reason);\n    }\n    dispose() {\n        super.dispose();\n    }\n    _getAndroidWordAtPosition(position) {\n        const ANDROID_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\",.<>/?';\n        const lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n        const wordSeparators = getMapForWordSeparators(ANDROID_WORD_SEPARATORS);\n        let goingLeft = true;\n        let startColumn = position.column;\n        let goingRight = true;\n        let endColumn = position.column;\n        let distance = 0;\n        while (distance < 50 && (goingLeft || goingRight)) {\n            if (goingLeft && startColumn <= 1) {\n                goingLeft = false;\n            }\n            if (goingLeft) {\n                const charCode = lineContent.charCodeAt(startColumn - 2);\n                const charClass = wordSeparators.get(charCode);\n                if (charClass !== 0 /* WordCharacterClass.Regular */) {\n                    goingLeft = false;\n                }\n                else {\n                    startColumn--;\n                }\n            }\n            if (goingRight && endColumn > lineContent.length) {\n                goingRight = false;\n            }\n            if (goingRight) {\n                const charCode = lineContent.charCodeAt(endColumn - 1);\n                const charClass = wordSeparators.get(charCode);\n                if (charClass !== 0 /* WordCharacterClass.Regular */) {\n                    goingRight = false;\n                }\n                else {\n                    endColumn++;\n                }\n            }\n            distance++;\n        }\n        return [lineContent.substring(startColumn - 1, endColumn - 1), position.column - startColumn];\n    }\n    _getWordBeforePosition(position) {\n        const lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n        const wordSeparators = getMapForWordSeparators(this._context.configuration.options.get(124 /* EditorOption.wordSeparators */));\n        let column = position.column;\n        let distance = 0;\n        while (column > 1) {\n            const charCode = lineContent.charCodeAt(column - 2);\n            const charClass = wordSeparators.get(charCode);\n            if (charClass !== 0 /* WordCharacterClass.Regular */ || distance > 50) {\n                return lineContent.substring(column - 1, position.column - 1);\n            }\n            distance++;\n            column--;\n        }\n        return lineContent.substring(0, position.column - 1);\n    }\n    _getCharacterBeforePosition(position) {\n        if (position.column > 1) {\n            const lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n            const charBefore = lineContent.charAt(position.column - 2);\n            if (!strings.isHighSurrogate(charBefore.charCodeAt(0))) {\n                return charBefore;\n            }\n        }\n        return '';\n    }\n    _getAriaLabel(options) {\n        const accessibilitySupport = options.get(2 /* EditorOption.accessibilitySupport */);\n        if (accessibilitySupport === 1 /* AccessibilitySupport.Disabled */) {\n            return nls.localize('accessibilityOffAriaLabel', \"The editor is not accessible at this time. Press {0} for options.\", platform.isLinux ? 'Shift+Alt+F1' : 'Alt+F1');\n        }\n        return options.get(4 /* EditorOption.ariaLabel */);\n    }\n    _setAccessibilityOptions(options) {\n        this._accessibilitySupport = options.get(2 /* EditorOption.accessibilitySupport */);\n        const accessibilityPageSize = options.get(3 /* EditorOption.accessibilityPageSize */);\n        if (this._accessibilitySupport === 2 /* AccessibilitySupport.Enabled */ && accessibilityPageSize === EditorOptions.accessibilityPageSize.defaultValue) {\n            // If a screen reader is attached and the default value is not set we should automatically increase the page size to 500 for a better experience\n            this._accessibilityPageSize = 500;\n        }\n        else {\n            this._accessibilityPageSize = accessibilityPageSize;\n        }\n        // When wrapping is enabled and a screen reader might be attached,\n        // we will size the textarea to match the width used for wrapping points computation (see `domLineBreaksComputer.ts`).\n        // This is because screen readers will read the text in the textarea and we'd like that the\n        // wrapping points in the textarea match the wrapping points in the editor.\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        const wrappingColumn = layoutInfo.wrappingColumn;\n        if (wrappingColumn !== -1 && this._accessibilitySupport !== 1 /* AccessibilitySupport.Disabled */) {\n            const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n            this._textAreaWrapping = true;\n            this._textAreaWidth = Math.round(wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        }\n        else {\n            this._textAreaWrapping = false;\n            this._textAreaWidth = (canUseZeroSizeTextarea ? 0 : 1);\n        }\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._setAccessibilityOptions(options);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentHeight = layoutInfo.height;\n        this._fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._emptySelectionClipboard = options.get(34 /* EditorOption.emptySelectionClipboard */);\n        this._copyWithSyntaxHighlighting = options.get(22 /* EditorOption.copyWithSyntaxHighlighting */);\n        this.textArea.setAttribute('wrap', this._textAreaWrapping && !this._visibleTextArea ? 'on' : 'off');\n        const { tabSize } = this._context.viewModel.model.getOptions();\n        this.textArea.domNode.style.tabSize = `${tabSize * this._fontInfo.spaceWidth}px`;\n        this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n        this.textArea.setAttribute('tabindex', String(options.get(118 /* EditorOption.tabIndex */)));\n        if (e.hasChanged(31 /* EditorOption.domReadOnly */) || e.hasChanged(86 /* EditorOption.readOnly */)) {\n            this._ensureReadOnlyAttribute();\n        }\n        if (e.hasChanged(2 /* EditorOption.accessibilitySupport */)) {\n            this._textAreaInput.writeScreenReaderContent('strategy changed');\n        }\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections.slice(0);\n        this._modelSelections = e.modelSelections.slice(0);\n        // We must update the <textarea> synchronously, otherwise long press IME on macos breaks.\n        // See https://github.com/microsoft/vscode/issues/165821\n        this._textAreaInput.writeScreenReaderContent('selection changed');\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        this._scrollLeft = e.scrollLeft;\n        this._scrollTop = e.scrollTop;\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // --- begin view API\n    isFocused() {\n        return this._textAreaInput.isFocused();\n    }\n    focusTextArea() {\n        this._textAreaInput.focusTextArea();\n    }\n    getLastRenderData() {\n        return this._lastRenderPosition;\n    }\n    setAriaOptions(options) {\n        if (options.activeDescendant) {\n            this.textArea.setAttribute('aria-haspopup', 'true');\n            this.textArea.setAttribute('aria-autocomplete', 'list');\n            this.textArea.setAttribute('aria-activedescendant', options.activeDescendant);\n        }\n        else {\n            this.textArea.setAttribute('aria-haspopup', 'false');\n            this.textArea.setAttribute('aria-autocomplete', 'both');\n            this.textArea.removeAttribute('aria-activedescendant');\n        }\n        if (options.role) {\n            this.textArea.setAttribute('role', options.role);\n        }\n    }\n    // --- end view API\n    _ensureReadOnlyAttribute() {\n        const options = this._context.configuration.options;\n        // When someone requests to disable IME, we set the \"readonly\" attribute on the <textarea>.\n        // This will prevent composition.\n        const useReadOnly = !IME.enabled || (options.get(31 /* EditorOption.domReadOnly */) && options.get(86 /* EditorOption.readOnly */));\n        if (useReadOnly) {\n            this.textArea.setAttribute('readonly', 'true');\n        }\n        else {\n            this.textArea.removeAttribute('readonly');\n        }\n    }\n    prepareRender(ctx) {\n        var _a;\n        this._primaryCursorPosition = new Position(this._selections[0].positionLineNumber, this._selections[0].positionColumn);\n        this._primaryCursorVisibleRange = ctx.visibleRangeForPosition(this._primaryCursorPosition);\n        (_a = this._visibleTextArea) === null || _a === void 0 ? void 0 : _a.prepareRender(ctx);\n    }\n    render(ctx) {\n        this._textAreaInput.writeScreenReaderContent('render');\n        this._render();\n    }\n    _render() {\n        var _a;\n        if (this._visibleTextArea) {\n            // The text area is visible for composition reasons\n            const visibleStart = this._visibleTextArea.visibleTextareaStart;\n            const visibleEnd = this._visibleTextArea.visibleTextareaEnd;\n            const startPosition = this._visibleTextArea.startPosition;\n            const endPosition = this._visibleTextArea.endPosition;\n            if (startPosition && endPosition && visibleStart && visibleEnd && visibleEnd.left >= this._scrollLeft && visibleStart.left <= this._scrollLeft + this._contentWidth) {\n                const top = (this._context.viewLayout.getVerticalOffsetForLineNumber(this._primaryCursorPosition.lineNumber) - this._scrollTop);\n                const lineCount = this._newlinecount(this.textArea.domNode.value.substr(0, this.textArea.domNode.selectionStart));\n                let scrollLeft = this._visibleTextArea.widthOfHiddenLineTextBefore;\n                let left = (this._contentLeft + visibleStart.left - this._scrollLeft);\n                // See https://github.com/microsoft/vscode/issues/141725#issuecomment-1050670841\n                // Here we are adding +1 to avoid flickering that might be caused by having a width that is too small.\n                // This could be caused by rounding errors that might only show up with certain font families.\n                // In other words, a pixel might be lost when doing something like\n                //      `Math.round(end) - Math.round(start)`\n                // vs\n                //      `Math.round(end - start)`\n                let width = visibleEnd.left - visibleStart.left + 1;\n                if (left < this._contentLeft) {\n                    // the textarea would be rendered on top of the margin,\n                    // so reduce its width. We use the same technique as\n                    // for hiding text before\n                    const delta = (this._contentLeft - left);\n                    left += delta;\n                    scrollLeft += delta;\n                    width -= delta;\n                }\n                if (width > this._contentWidth) {\n                    // the textarea would be wider than the content width,\n                    // so reduce its width.\n                    width = this._contentWidth;\n                }\n                // Try to render the textarea with the color/font style to match the text under it\n                const viewLineData = this._context.viewModel.getViewLineData(startPosition.lineNumber);\n                const startTokenIndex = viewLineData.tokens.findTokenIndexAtOffset(startPosition.column - 1);\n                const endTokenIndex = viewLineData.tokens.findTokenIndexAtOffset(endPosition.column - 1);\n                const textareaSpansSingleToken = (startTokenIndex === endTokenIndex);\n                const presentation = this._visibleTextArea.definePresentation((textareaSpansSingleToken ? viewLineData.tokens.getPresentation(startTokenIndex) : null));\n                this.textArea.domNode.scrollTop = lineCount * this._lineHeight;\n                this.textArea.domNode.scrollLeft = scrollLeft;\n                this._doRender({\n                    lastRenderPosition: null,\n                    top: top,\n                    left: left,\n                    width: width,\n                    height: this._lineHeight,\n                    useCover: false,\n                    color: (TokenizationRegistry.getColorMap() || [])[presentation.foreground],\n                    italic: presentation.italic,\n                    bold: presentation.bold,\n                    underline: presentation.underline,\n                    strikethrough: presentation.strikethrough\n                });\n            }\n            return;\n        }\n        if (!this._primaryCursorVisibleRange) {\n            // The primary cursor is outside the viewport => place textarea to the top left\n            this._renderAtTopLeft();\n            return;\n        }\n        const left = this._contentLeft + this._primaryCursorVisibleRange.left - this._scrollLeft;\n        if (left < this._contentLeft || left > this._contentLeft + this._contentWidth) {\n            // cursor is outside the viewport\n            this._renderAtTopLeft();\n            return;\n        }\n        const top = this._context.viewLayout.getVerticalOffsetForLineNumber(this._selections[0].positionLineNumber) - this._scrollTop;\n        if (top < 0 || top > this._contentHeight) {\n            // cursor is outside the viewport\n            this._renderAtTopLeft();\n            return;\n        }\n        // The primary cursor is in the viewport (at least vertically) => place textarea on the cursor\n        if (platform.isMacintosh) {\n            // For the popup emoji input, we will make the text area as high as the line height\n            // We will also make the fontSize and lineHeight the correct dimensions to help with the placement of these pickers\n            this._doRender({\n                lastRenderPosition: this._primaryCursorPosition,\n                top,\n                left: this._textAreaWrapping ? this._contentLeft : left,\n                width: this._textAreaWidth,\n                height: this._lineHeight,\n                useCover: false\n            });\n            // In case the textarea contains a word, we're going to try to align the textarea's cursor\n            // with our cursor by scrolling the textarea as much as possible\n            this.textArea.domNode.scrollLeft = this._primaryCursorVisibleRange.left;\n            const lineCount = (_a = this._textAreaInput.textAreaState.newlineCountBeforeSelection) !== null && _a !== void 0 ? _a : this._newlinecount(this.textArea.domNode.value.substr(0, this.textArea.domNode.selectionStart));\n            this.textArea.domNode.scrollTop = lineCount * this._lineHeight;\n            return;\n        }\n        this._doRender({\n            lastRenderPosition: this._primaryCursorPosition,\n            top: top,\n            left: this._textAreaWrapping ? this._contentLeft : left,\n            width: this._textAreaWidth,\n            height: (canUseZeroSizeTextarea ? 0 : 1),\n            useCover: false\n        });\n    }\n    _newlinecount(text) {\n        let result = 0;\n        let startIndex = -1;\n        do {\n            startIndex = text.indexOf('\\n', startIndex + 1);\n            if (startIndex === -1) {\n                break;\n            }\n            result++;\n        } while (true);\n        return result;\n    }\n    _renderAtTopLeft() {\n        // (in WebKit the textarea is 1px by 1px because it cannot handle input to a 0x0 textarea)\n        // specifically, when doing Korean IME, setting the textarea to 0x0 breaks IME badly.\n        this._doRender({\n            lastRenderPosition: null,\n            top: 0,\n            left: 0,\n            width: this._textAreaWidth,\n            height: (canUseZeroSizeTextarea ? 0 : 1),\n            useCover: true\n        });\n    }\n    _doRender(renderData) {\n        this._lastRenderPosition = renderData.lastRenderPosition;\n        const ta = this.textArea;\n        const tac = this.textAreaCover;\n        applyFontInfo(ta, this._fontInfo);\n        ta.setTop(renderData.top);\n        ta.setLeft(renderData.left);\n        ta.setWidth(renderData.width);\n        ta.setHeight(renderData.height);\n        ta.setColor(renderData.color ? Color.Format.CSS.formatHex(renderData.color) : '');\n        ta.setFontStyle(renderData.italic ? 'italic' : '');\n        if (renderData.bold) {\n            // fontWeight is also set by `applyFontInfo`, so only overwrite it if necessary\n            ta.setFontWeight('bold');\n        }\n        ta.setTextDecoration(`${renderData.underline ? ' underline' : ''}${renderData.strikethrough ? ' line-through' : ''}`);\n        tac.setTop(renderData.useCover ? renderData.top : 0);\n        tac.setLeft(renderData.useCover ? renderData.left : 0);\n        tac.setWidth(renderData.useCover ? renderData.width : 0);\n        tac.setHeight(renderData.useCover ? renderData.height : 0);\n        const options = this._context.configuration.options;\n        if (options.get(54 /* EditorOption.glyphMargin */)) {\n            tac.setClassName('monaco-editor-background textAreaCover ' + Margin.OUTER_CLASS_NAME);\n        }\n        else {\n            if (options.get(64 /* EditorOption.lineNumbers */).renderType !== 0 /* RenderLineNumbersType.Off */) {\n                tac.setClassName('monaco-editor-background textAreaCover ' + LineNumbersOverlay.CLASS_NAME);\n            }\n            else {\n                tac.setClassName('monaco-editor-background textAreaCover');\n            }\n        }\n    }\n}\nfunction measureText(text, fontInfo, tabSize) {\n    if (text.length === 0) {\n        return 0;\n    }\n    const container = document.createElement('div');\n    container.style.position = 'absolute';\n    container.style.top = '-50000px';\n    container.style.width = '50000px';\n    const regularDomNode = document.createElement('span');\n    applyFontInfo(regularDomNode, fontInfo);\n    regularDomNode.style.whiteSpace = 'pre'; // just like the textarea\n    regularDomNode.style.tabSize = `${tabSize * fontInfo.spaceWidth}px`; // just like the textarea\n    regularDomNode.append(text);\n    container.appendChild(regularDomNode);\n    document.body.appendChild(container);\n    const res = regularDomNode.offsetWidth;\n    document.body.removeChild(container);\n    return res;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../base/browser/browser.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { DomEmitter } from '../../../base/browser/event.js';\nimport { StandardKeyboardEvent } from '../../../base/browser/keyboardEvent.js';\nimport { inputLatency } from '../../../base/browser/performance.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { TextAreaState, _debugComposition } from './textAreaState.js';\nimport { Selection } from '../../common/core/selection.js';\nexport var TextAreaSyntethicEvents;\n(function (TextAreaSyntethicEvents) {\n    TextAreaSyntethicEvents.Tap = '-monaco-textarea-synthetic-tap';\n})(TextAreaSyntethicEvents || (TextAreaSyntethicEvents = {}));\nexport const CopyOptions = {\n    forceCopyWithSyntaxHighlighting: false\n};\n/**\n * Every time we write to the clipboard, we record a bit of extra metadata here.\n * Every time we read from the cipboard, if the text matches our last written text,\n * we can fetch the previous metadata.\n */\nclass InMemoryClipboardMetadataManager {\n    constructor() {\n        this._lastState = null;\n    }\n    set(lastCopiedValue, data) {\n        this._lastState = { lastCopiedValue, data };\n    }\n    get(pastedText) {\n        if (this._lastState && this._lastState.lastCopiedValue === pastedText) {\n            // match!\n            return this._lastState.data;\n        }\n        this._lastState = null;\n        return null;\n    }\n}\nInMemoryClipboardMetadataManager.INSTANCE = new InMemoryClipboardMetadataManager();\nexport { InMemoryClipboardMetadataManager };\nclass CompositionContext {\n    constructor() {\n        this._lastTypeTextLength = 0;\n    }\n    handleCompositionUpdate(text) {\n        text = text || '';\n        const typeInput = {\n            text: text,\n            replacePrevCharCnt: this._lastTypeTextLength,\n            replaceNextCharCnt: 0,\n            positionDelta: 0\n        };\n        this._lastTypeTextLength = text.length;\n        return typeInput;\n    }\n}\n/**\n * Writes screen reader content to the textarea and is able to analyze its input events to generate:\n *  - onCut\n *  - onPaste\n *  - onType\n *\n * Composition events are generated for presentation purposes (composition input is reflected in onType).\n */\nexport class TextAreaInput extends Disposable {\n    get textAreaState() {\n        return this._textAreaState;\n    }\n    constructor(_host, _textArea, _OS, _browser) {\n        super();\n        this._host = _host;\n        this._textArea = _textArea;\n        this._OS = _OS;\n        this._browser = _browser;\n        this._onFocus = this._register(new Emitter());\n        this.onFocus = this._onFocus.event;\n        this._onBlur = this._register(new Emitter());\n        this.onBlur = this._onBlur.event;\n        this._onKeyDown = this._register(new Emitter());\n        this.onKeyDown = this._onKeyDown.event;\n        this._onKeyUp = this._register(new Emitter());\n        this.onKeyUp = this._onKeyUp.event;\n        this._onCut = this._register(new Emitter());\n        this.onCut = this._onCut.event;\n        this._onPaste = this._register(new Emitter());\n        this.onPaste = this._onPaste.event;\n        this._onType = this._register(new Emitter());\n        this.onType = this._onType.event;\n        this._onCompositionStart = this._register(new Emitter());\n        this.onCompositionStart = this._onCompositionStart.event;\n        this._onCompositionUpdate = this._register(new Emitter());\n        this.onCompositionUpdate = this._onCompositionUpdate.event;\n        this._onCompositionEnd = this._register(new Emitter());\n        this.onCompositionEnd = this._onCompositionEnd.event;\n        this._onSelectionChangeRequest = this._register(new Emitter());\n        this.onSelectionChangeRequest = this._onSelectionChangeRequest.event;\n        this._asyncTriggerCut = this._register(new RunOnceScheduler(() => this._onCut.fire(), 0));\n        this._asyncFocusGainWriteScreenReaderContent = this._register(new RunOnceScheduler(() => this.writeScreenReaderContent('asyncFocusGain'), 0));\n        this._textAreaState = TextAreaState.EMPTY;\n        this._selectionChangeListener = null;\n        this.writeScreenReaderContent('ctor');\n        this._hasFocus = false;\n        this._currentComposition = null;\n        let lastKeyDown = null;\n        this._register(this._textArea.onKeyDown((_e) => {\n            const e = new StandardKeyboardEvent(_e);\n            if (e.keyCode === 109 /* KeyCode.KEY_IN_COMPOSITION */\n                || (this._currentComposition && e.keyCode === 1 /* KeyCode.Backspace */)) {\n                // Stop propagation for keyDown events if the IME is processing key input\n                e.stopPropagation();\n            }\n            if (e.equals(9 /* KeyCode.Escape */)) {\n                // Prevent default always for `Esc`, otherwise it will generate a keypress\n                // See https://msdn.microsoft.com/en-us/library/ie/ms536939(v=vs.85).aspx\n                e.preventDefault();\n            }\n            lastKeyDown = e;\n            this._onKeyDown.fire(e);\n        }));\n        this._register(this._textArea.onKeyUp((_e) => {\n            const e = new StandardKeyboardEvent(_e);\n            this._onKeyUp.fire(e);\n        }));\n        this._register(this._textArea.onCompositionStart((e) => {\n            if (_debugComposition) {\n                console.log(`[compositionstart]`, e);\n            }\n            const currentComposition = new CompositionContext();\n            if (this._currentComposition) {\n                // simply reset the composition context\n                this._currentComposition = currentComposition;\n                return;\n            }\n            this._currentComposition = currentComposition;\n            if (this._OS === 2 /* OperatingSystem.Macintosh */\n                && lastKeyDown\n                && lastKeyDown.equals(109 /* KeyCode.KEY_IN_COMPOSITION */)\n                && this._textAreaState.selectionStart === this._textAreaState.selectionEnd\n                && this._textAreaState.selectionStart > 0\n                && this._textAreaState.value.substr(this._textAreaState.selectionStart - 1, 1) === e.data\n                && (lastKeyDown.code === 'ArrowRight' || lastKeyDown.code === 'ArrowLeft')) {\n                // Handling long press case on Chromium/Safari macOS + arrow key => pretend the character was selected\n                if (_debugComposition) {\n                    console.log(`[compositionstart] Handling long press case on macOS + arrow key`, e);\n                }\n                // Pretend the previous character was composed (in order to get it removed by subsequent compositionupdate events)\n                currentComposition.handleCompositionUpdate('x');\n                this._onCompositionStart.fire({ data: e.data });\n                return;\n            }\n            if (this._browser.isAndroid) {\n                // when tapping on the editor, Android enters composition mode to edit the current word\n                // so we cannot clear the textarea on Android and we must pretend the current word was selected\n                this._onCompositionStart.fire({ data: e.data });\n                return;\n            }\n            this._onCompositionStart.fire({ data: e.data });\n        }));\n        this._register(this._textArea.onCompositionUpdate((e) => {\n            if (_debugComposition) {\n                console.log(`[compositionupdate]`, e);\n            }\n            const currentComposition = this._currentComposition;\n            if (!currentComposition) {\n                // should not be possible to receive a 'compositionupdate' without a 'compositionstart'\n                return;\n            }\n            if (this._browser.isAndroid) {\n                // On Android, the data sent with the composition update event is unusable.\n                // For example, if the cursor is in the middle of a word like Mic|osoft\n                // and Microsoft is chosen from the keyboard's suggestions, the e.data will contain \"Microsoft\".\n                // This is not really usable because it doesn't tell us where the edit began and where it ended.\n                const newState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n                const typeInput = TextAreaState.deduceAndroidCompositionInput(this._textAreaState, newState);\n                this._textAreaState = newState;\n                this._onType.fire(typeInput);\n                this._onCompositionUpdate.fire(e);\n                return;\n            }\n            const typeInput = currentComposition.handleCompositionUpdate(e.data);\n            this._textAreaState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n            this._onType.fire(typeInput);\n            this._onCompositionUpdate.fire(e);\n        }));\n        this._register(this._textArea.onCompositionEnd((e) => {\n            if (_debugComposition) {\n                console.log(`[compositionend]`, e);\n            }\n            const currentComposition = this._currentComposition;\n            if (!currentComposition) {\n                // https://github.com/microsoft/monaco-editor/issues/1663\n                // On iOS 13.2, Chinese system IME randomly trigger an additional compositionend event with empty data\n                return;\n            }\n            this._currentComposition = null;\n            if (this._browser.isAndroid) {\n                // On Android, the data sent with the composition update event is unusable.\n                // For example, if the cursor is in the middle of a word like Mic|osoft\n                // and Microsoft is chosen from the keyboard's suggestions, the e.data will contain \"Microsoft\".\n                // This is not really usable because it doesn't tell us where the edit began and where it ended.\n                const newState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n                const typeInput = TextAreaState.deduceAndroidCompositionInput(this._textAreaState, newState);\n                this._textAreaState = newState;\n                this._onType.fire(typeInput);\n                this._onCompositionEnd.fire();\n                return;\n            }\n            const typeInput = currentComposition.handleCompositionUpdate(e.data);\n            this._textAreaState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n            this._onType.fire(typeInput);\n            this._onCompositionEnd.fire();\n        }));\n        this._register(this._textArea.onInput((e) => {\n            if (_debugComposition) {\n                console.log(`[input]`, e);\n            }\n            // Pretend here we touched the text area, as the `input` event will most likely\n            // result in a `selectionchange` event which we want to ignore\n            this._textArea.setIgnoreSelectionChangeTime('received input event');\n            if (this._currentComposition) {\n                return;\n            }\n            const newState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n            const typeInput = TextAreaState.deduceInput(this._textAreaState, newState, /*couldBeEmojiInput*/ this._OS === 2 /* OperatingSystem.Macintosh */);\n            if (typeInput.replacePrevCharCnt === 0 && typeInput.text.length === 1) {\n                // one character was typed\n                if (strings.isHighSurrogate(typeInput.text.charCodeAt(0))\n                    || typeInput.text.charCodeAt(0) === 0x7f /* Delete */) {\n                    // Ignore invalid input but keep it around for next time\n                    return;\n                }\n            }\n            this._textAreaState = newState;\n            if (typeInput.text !== ''\n                || typeInput.replacePrevCharCnt !== 0\n                || typeInput.replaceNextCharCnt !== 0\n                || typeInput.positionDelta !== 0) {\n                this._onType.fire(typeInput);\n            }\n        }));\n        // --- Clipboard operations\n        this._register(this._textArea.onCut((e) => {\n            // Pretend here we touched the text area, as the `cut` event will most likely\n            // result in a `selectionchange` event which we want to ignore\n            this._textArea.setIgnoreSelectionChangeTime('received cut event');\n            this._ensureClipboardGetsEditorSelection(e);\n            this._asyncTriggerCut.schedule();\n        }));\n        this._register(this._textArea.onCopy((e) => {\n            this._ensureClipboardGetsEditorSelection(e);\n        }));\n        this._register(this._textArea.onPaste((e) => {\n            // Pretend here we touched the text area, as the `paste` event will most likely\n            // result in a `selectionchange` event which we want to ignore\n            this._textArea.setIgnoreSelectionChangeTime('received paste event');\n            e.preventDefault();\n            if (!e.clipboardData) {\n                return;\n            }\n            let [text, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n            if (!text) {\n                return;\n            }\n            // try the in-memory store\n            metadata = metadata || InMemoryClipboardMetadataManager.INSTANCE.get(text);\n            this._onPaste.fire({\n                text: text,\n                metadata: metadata\n            });\n        }));\n        this._register(this._textArea.onFocus(() => {\n            const hadFocus = this._hasFocus;\n            this._setHasFocus(true);\n            if (this._browser.isSafari && !hadFocus && this._hasFocus) {\n                // When \"tabbing into\" the textarea, immediately after dispatching the 'focus' event,\n                // Safari will always move the selection at offset 0 in the textarea\n                this._asyncFocusGainWriteScreenReaderContent.schedule();\n            }\n        }));\n        this._register(this._textArea.onBlur(() => {\n            if (this._currentComposition) {\n                // See https://github.com/microsoft/vscode/issues/112621\n                // where compositionend is not triggered when the editor\n                // is taken off-dom during a composition\n                // Clear the flag to be able to write to the textarea\n                this._currentComposition = null;\n                // Clear the textarea to avoid an unwanted cursor type\n                this.writeScreenReaderContent('blurWithoutCompositionEnd');\n                // Fire artificial composition end\n                this._onCompositionEnd.fire();\n            }\n            this._setHasFocus(false);\n        }));\n        this._register(this._textArea.onSyntheticTap(() => {\n            if (this._browser.isAndroid && this._currentComposition) {\n                // on Android, tapping does not cancel the current composition, so the\n                // textarea is stuck showing the old composition\n                // Clear the flag to be able to write to the textarea\n                this._currentComposition = null;\n                // Clear the textarea to avoid an unwanted cursor type\n                this.writeScreenReaderContent('tapWithoutCompositionEnd');\n                // Fire artificial composition end\n                this._onCompositionEnd.fire();\n            }\n        }));\n    }\n    _installSelectionChangeListener() {\n        // See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256\n        // When using a Braille display, it is possible for users to reposition the\n        // system caret. This is reflected in Chrome as a `selectionchange` event.\n        //\n        // The `selectionchange` event appears to be emitted under numerous other circumstances,\n        // so it is quite a challenge to distinguish a `selectionchange` coming in from a user\n        // using a Braille display from all the other cases.\n        //\n        // The problems with the `selectionchange` event are:\n        //  * the event is emitted when the textarea is focused programmatically -- textarea.focus()\n        //  * the event is emitted when the selection is changed in the textarea programmatically -- textarea.setSelectionRange(...)\n        //  * the event is emitted when the value of the textarea is changed programmatically -- textarea.value = '...'\n        //  * the event is emitted when tabbing into the textarea\n        //  * the event is emitted asynchronously (sometimes with a delay as high as a few tens of ms)\n        //  * the event sometimes comes in bursts for a single logical textarea operation\n        // `selectionchange` events often come multiple times for a single logical change\n        // so throttle multiple `selectionchange` events that burst in a short period of time.\n        let previousSelectionChangeEventTime = 0;\n        return dom.addDisposableListener(document, 'selectionchange', (e) => {\n            inputLatency.onSelectionChange();\n            if (!this._hasFocus) {\n                return;\n            }\n            if (this._currentComposition) {\n                return;\n            }\n            if (!this._browser.isChrome) {\n                // Support only for Chrome until testing happens on other browsers\n                return;\n            }\n            const now = Date.now();\n            const delta1 = now - previousSelectionChangeEventTime;\n            previousSelectionChangeEventTime = now;\n            if (delta1 < 5) {\n                // received another `selectionchange` event within 5ms of the previous `selectionchange` event\n                // => ignore it\n                return;\n            }\n            const delta2 = now - this._textArea.getIgnoreSelectionChangeTime();\n            this._textArea.resetSelectionChangeTime();\n            if (delta2 < 100) {\n                // received a `selectionchange` event within 100ms since we touched the textarea\n                // => ignore it, since we caused it\n                return;\n            }\n            if (!this._textAreaState.selection) {\n                // Cannot correlate a position in the textarea with a position in the editor...\n                return;\n            }\n            const newValue = this._textArea.getValue();\n            if (this._textAreaState.value !== newValue) {\n                // Cannot correlate a position in the textarea with a position in the editor...\n                return;\n            }\n            const newSelectionStart = this._textArea.getSelectionStart();\n            const newSelectionEnd = this._textArea.getSelectionEnd();\n            if (this._textAreaState.selectionStart === newSelectionStart && this._textAreaState.selectionEnd === newSelectionEnd) {\n                // Nothing to do...\n                return;\n            }\n            const _newSelectionStartPosition = this._textAreaState.deduceEditorPosition(newSelectionStart);\n            const newSelectionStartPosition = this._host.deduceModelPosition(_newSelectionStartPosition[0], _newSelectionStartPosition[1], _newSelectionStartPosition[2]);\n            const _newSelectionEndPosition = this._textAreaState.deduceEditorPosition(newSelectionEnd);\n            const newSelectionEndPosition = this._host.deduceModelPosition(_newSelectionEndPosition[0], _newSelectionEndPosition[1], _newSelectionEndPosition[2]);\n            const newSelection = new Selection(newSelectionStartPosition.lineNumber, newSelectionStartPosition.column, newSelectionEndPosition.lineNumber, newSelectionEndPosition.column);\n            this._onSelectionChangeRequest.fire(newSelection);\n        });\n    }\n    dispose() {\n        super.dispose();\n        if (this._selectionChangeListener) {\n            this._selectionChangeListener.dispose();\n            this._selectionChangeListener = null;\n        }\n    }\n    focusTextArea() {\n        // Setting this._hasFocus and writing the screen reader content\n        // will result in a focus() and setSelectionRange() in the textarea\n        this._setHasFocus(true);\n        // If the editor is off DOM, focus cannot be really set, so let's double check that we have managed to set the focus\n        this.refreshFocusState();\n    }\n    isFocused() {\n        return this._hasFocus;\n    }\n    refreshFocusState() {\n        this._setHasFocus(this._textArea.hasFocus());\n    }\n    _setHasFocus(newHasFocus) {\n        if (this._hasFocus === newHasFocus) {\n            // no change\n            return;\n        }\n        this._hasFocus = newHasFocus;\n        if (this._selectionChangeListener) {\n            this._selectionChangeListener.dispose();\n            this._selectionChangeListener = null;\n        }\n        if (this._hasFocus) {\n            this._selectionChangeListener = this._installSelectionChangeListener();\n        }\n        if (this._hasFocus) {\n            this.writeScreenReaderContent('focusgain');\n        }\n        if (this._hasFocus) {\n            this._onFocus.fire();\n        }\n        else {\n            this._onBlur.fire();\n        }\n    }\n    _setAndWriteTextAreaState(reason, textAreaState) {\n        if (!this._hasFocus) {\n            textAreaState = textAreaState.collapseSelection();\n        }\n        textAreaState.writeToTextArea(reason, this._textArea, this._hasFocus);\n        this._textAreaState = textAreaState;\n    }\n    writeScreenReaderContent(reason) {\n        if (this._currentComposition) {\n            // Do not write to the text area when doing composition\n            return;\n        }\n        this._setAndWriteTextAreaState(reason, this._host.getScreenReaderContent());\n    }\n    _ensureClipboardGetsEditorSelection(e) {\n        const dataToCopy = this._host.getDataToCopy();\n        const storedMetadata = {\n            version: 1,\n            isFromEmptySelection: dataToCopy.isFromEmptySelection,\n            multicursorText: dataToCopy.multicursorText,\n            mode: dataToCopy.mode\n        };\n        InMemoryClipboardMetadataManager.INSTANCE.set(\n        // When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n        // Firefox pastes \"LINE\\n\", so let's work around this quirk\n        (this._browser.isFirefox ? dataToCopy.text.replace(/\\r\\n/g, '\\n') : dataToCopy.text), storedMetadata);\n        e.preventDefault();\n        if (e.clipboardData) {\n            ClipboardEventUtils.setTextData(e.clipboardData, dataToCopy.text, dataToCopy.html, storedMetadata);\n        }\n    }\n}\nclass ClipboardEventUtils {\n    static getTextData(clipboardData) {\n        const text = clipboardData.getData(Mimes.text);\n        let metadata = null;\n        const rawmetadata = clipboardData.getData('vscode-editor-data');\n        if (typeof rawmetadata === 'string') {\n            try {\n                metadata = JSON.parse(rawmetadata);\n                if (metadata.version !== 1) {\n                    metadata = null;\n                }\n            }\n            catch (err) {\n                // no problem!\n            }\n        }\n        if (text.length === 0 && metadata === null && clipboardData.files.length > 0) {\n            // no textual data pasted, generate text from file names\n            const files = Array.prototype.slice.call(clipboardData.files, 0);\n            return [files.map(file => file.name).join('\\n'), null];\n        }\n        return [text, metadata];\n    }\n    static setTextData(clipboardData, text, html, metadata) {\n        clipboardData.setData(Mimes.text, text);\n        if (typeof html === 'string') {\n            clipboardData.setData('text/html', html);\n        }\n        clipboardData.setData('vscode-editor-data', JSON.stringify(metadata));\n    }\n}\nexport class TextAreaWrapper extends Disposable {\n    constructor(_actual) {\n        super();\n        this._actual = _actual;\n        this.onKeyDown = this._register(new DomEmitter(this._actual, 'keydown')).event;\n        this.onKeyUp = this._register(new DomEmitter(this._actual, 'keyup')).event;\n        this.onCompositionStart = this._register(new DomEmitter(this._actual, 'compositionstart')).event;\n        this.onCompositionUpdate = this._register(new DomEmitter(this._actual, 'compositionupdate')).event;\n        this.onCompositionEnd = this._register(new DomEmitter(this._actual, 'compositionend')).event;\n        this.onBeforeInput = this._register(new DomEmitter(this._actual, 'beforeinput')).event;\n        this.onInput = this._register(new DomEmitter(this._actual, 'input')).event;\n        this.onCut = this._register(new DomEmitter(this._actual, 'cut')).event;\n        this.onCopy = this._register(new DomEmitter(this._actual, 'copy')).event;\n        this.onPaste = this._register(new DomEmitter(this._actual, 'paste')).event;\n        this.onFocus = this._register(new DomEmitter(this._actual, 'focus')).event;\n        this.onBlur = this._register(new DomEmitter(this._actual, 'blur')).event;\n        this._onSyntheticTap = this._register(new Emitter());\n        this.onSyntheticTap = this._onSyntheticTap.event;\n        this._ignoreSelectionChangeTime = 0;\n        this._register(this.onKeyDown(() => inputLatency.onKeyDown()));\n        this._register(this.onBeforeInput(() => inputLatency.onBeforeInput()));\n        this._register(this.onInput(() => inputLatency.onInput()));\n        this._register(this.onKeyUp(() => inputLatency.onKeyUp()));\n        this._register(dom.addDisposableListener(this._actual, TextAreaSyntethicEvents.Tap, () => this._onSyntheticTap.fire()));\n    }\n    hasFocus() {\n        const shadowRoot = dom.getShadowRoot(this._actual);\n        if (shadowRoot) {\n            return shadowRoot.activeElement === this._actual;\n        }\n        else if (dom.isInDOM(this._actual)) {\n            return document.activeElement === this._actual;\n        }\n        else {\n            return false;\n        }\n    }\n    setIgnoreSelectionChangeTime(reason) {\n        this._ignoreSelectionChangeTime = Date.now();\n    }\n    getIgnoreSelectionChangeTime() {\n        return this._ignoreSelectionChangeTime;\n    }\n    resetSelectionChangeTime() {\n        this._ignoreSelectionChangeTime = 0;\n    }\n    getValue() {\n        // console.log('current value: ' + this._textArea.value);\n        return this._actual.value;\n    }\n    setValue(reason, value) {\n        const textArea = this._actual;\n        if (textArea.value === value) {\n            // No change\n            return;\n        }\n        // console.log('reason: ' + reason + ', current value: ' + textArea.value + ' => new value: ' + value);\n        this.setIgnoreSelectionChangeTime('setValue');\n        textArea.value = value;\n    }\n    getSelectionStart() {\n        return this._actual.selectionDirection === 'backward' ? this._actual.selectionEnd : this._actual.selectionStart;\n    }\n    getSelectionEnd() {\n        return this._actual.selectionDirection === 'backward' ? this._actual.selectionStart : this._actual.selectionEnd;\n    }\n    setSelectionRange(reason, selectionStart, selectionEnd) {\n        const textArea = this._actual;\n        let activeElement = null;\n        const shadowRoot = dom.getShadowRoot(textArea);\n        if (shadowRoot) {\n            activeElement = shadowRoot.activeElement;\n        }\n        else {\n            activeElement = document.activeElement;\n        }\n        const currentIsFocused = (activeElement === textArea);\n        const currentSelectionStart = textArea.selectionStart;\n        const currentSelectionEnd = textArea.selectionEnd;\n        if (currentIsFocused && currentSelectionStart === selectionStart && currentSelectionEnd === selectionEnd) {\n            // No change\n            // Firefox iframe bug https://github.com/microsoft/monaco-editor/issues/643#issuecomment-367871377\n            if (browser.isFirefox && window.parent !== window) {\n                textArea.focus();\n            }\n            return;\n        }\n        // console.log('reason: ' + reason + ', setSelectionRange: ' + selectionStart + ' -> ' + selectionEnd);\n        if (currentIsFocused) {\n            // No need to focus, only need to change the selection range\n            this.setIgnoreSelectionChangeTime('setSelectionRange');\n            textArea.setSelectionRange(selectionStart, selectionEnd);\n            if (browser.isFirefox && window.parent !== window) {\n                textArea.focus();\n            }\n            return;\n        }\n        // If the focus is outside the textarea, browsers will try really hard to reveal the textarea.\n        // Here, we try to undo the browser's desperate reveal.\n        try {\n            const scrollState = dom.saveParentsScrollTop(textArea);\n            this.setIgnoreSelectionChangeTime('setSelectionRange');\n            textArea.focus();\n            textArea.setSelectionRange(selectionStart, selectionEnd);\n            dom.restoreParentsScrollTop(textArea, scrollState);\n        }\n        catch (e) {\n            // Sometimes IE throws when setting selection (e.g. textarea is off-DOM)\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { Range } from '../../common/core/range.js';\nexport const _debugComposition = false;\nclass TextAreaState {\n    constructor(value, \n    /** the offset where selection starts inside `value` */\n    selectionStart, \n    /** the offset where selection ends inside `value` */\n    selectionEnd, \n    /** the editor range in the view coordinate system that matches the selection inside `value` */\n    selection, \n    /** the visible line count (wrapped, not necessarily matching \\n characters) for the text in `value` before `selectionStart` */\n    newlineCountBeforeSelection) {\n        this.value = value;\n        this.selectionStart = selectionStart;\n        this.selectionEnd = selectionEnd;\n        this.selection = selection;\n        this.newlineCountBeforeSelection = newlineCountBeforeSelection;\n    }\n    toString() {\n        return `[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`;\n    }\n    static readFromTextArea(textArea, previousState) {\n        const value = textArea.getValue();\n        const selectionStart = textArea.getSelectionStart();\n        const selectionEnd = textArea.getSelectionEnd();\n        let newlineCountBeforeSelection = undefined;\n        if (previousState) {\n            const valueBeforeSelectionStart = value.substring(0, selectionStart);\n            const previousValueBeforeSelectionStart = previousState.value.substring(0, previousState.selectionStart);\n            if (valueBeforeSelectionStart === previousValueBeforeSelectionStart) {\n                newlineCountBeforeSelection = previousState.newlineCountBeforeSelection;\n            }\n        }\n        return new TextAreaState(value, selectionStart, selectionEnd, null, newlineCountBeforeSelection);\n    }\n    collapseSelection() {\n        if (this.selectionStart === this.value.length) {\n            return this;\n        }\n        return new TextAreaState(this.value, this.value.length, this.value.length, null, undefined);\n    }\n    writeToTextArea(reason, textArea, select) {\n        if (_debugComposition) {\n            console.log(`writeToTextArea ${reason}: ${this.toString()}`);\n        }\n        textArea.setValue(reason, this.value);\n        if (select) {\n            textArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\n        }\n    }\n    deduceEditorPosition(offset) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (offset <= this.selectionStart) {\n            const str = this.value.substring(offset, this.selectionStart);\n            return this._finishDeduceEditorPosition((_b = (_a = this.selection) === null || _a === void 0 ? void 0 : _a.getStartPosition()) !== null && _b !== void 0 ? _b : null, str, -1);\n        }\n        if (offset >= this.selectionEnd) {\n            const str = this.value.substring(this.selectionEnd, offset);\n            return this._finishDeduceEditorPosition((_d = (_c = this.selection) === null || _c === void 0 ? void 0 : _c.getEndPosition()) !== null && _d !== void 0 ? _d : null, str, 1);\n        }\n        const str1 = this.value.substring(this.selectionStart, offset);\n        if (str1.indexOf(String.fromCharCode(8230)) === -1) {\n            return this._finishDeduceEditorPosition((_f = (_e = this.selection) === null || _e === void 0 ? void 0 : _e.getStartPosition()) !== null && _f !== void 0 ? _f : null, str1, 1);\n        }\n        const str2 = this.value.substring(offset, this.selectionEnd);\n        return this._finishDeduceEditorPosition((_h = (_g = this.selection) === null || _g === void 0 ? void 0 : _g.getEndPosition()) !== null && _h !== void 0 ? _h : null, str2, -1);\n    }\n    _finishDeduceEditorPosition(anchor, deltaText, signum) {\n        let lineFeedCnt = 0;\n        let lastLineFeedIndex = -1;\n        while ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\n            lineFeedCnt++;\n        }\n        return [anchor, signum * deltaText.length, lineFeedCnt];\n    }\n    static deduceInput(previousState, currentState, couldBeEmojiInput) {\n        if (!previousState) {\n            // This is the EMPTY state\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        if (_debugComposition) {\n            console.log('------------------------deduceInput');\n            console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n            console.log(`CURRENT STATE: ${currentState.toString()}`);\n        }\n        const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionStart, currentState.selectionStart);\n        const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd, currentState.value.length - currentState.selectionEnd);\n        const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n        const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n        const previousSelectionStart = previousState.selectionStart - prefixLength;\n        const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n        const currentSelectionStart = currentState.selectionStart - prefixLength;\n        const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n        if (_debugComposition) {\n            console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n            console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n        }\n        if (currentSelectionStart === currentSelectionEnd) {\n            // no current selection\n            const replacePreviousCharacters = (previousState.selectionStart - prefixLength);\n            if (_debugComposition) {\n                console.log(`REMOVE PREVIOUS: ${replacePreviousCharacters} chars`);\n            }\n            return {\n                text: currentValue,\n                replacePrevCharCnt: replacePreviousCharacters,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        // there is a current selection => composition case\n        const replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n        return {\n            text: currentValue,\n            replacePrevCharCnt: replacePreviousCharacters,\n            replaceNextCharCnt: 0,\n            positionDelta: 0\n        };\n    }\n    static deduceAndroidCompositionInput(previousState, currentState) {\n        if (!previousState) {\n            // This is the EMPTY state\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        if (_debugComposition) {\n            console.log('------------------------deduceAndroidCompositionInput');\n            console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n            console.log(`CURRENT STATE: ${currentState.toString()}`);\n        }\n        if (previousState.value === currentState.value) {\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: currentState.selectionEnd - previousState.selectionEnd\n            };\n        }\n        const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionEnd);\n        const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd);\n        const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n        const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n        const previousSelectionStart = previousState.selectionStart - prefixLength;\n        const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n        const currentSelectionStart = currentState.selectionStart - prefixLength;\n        const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n        if (_debugComposition) {\n            console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n            console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n        }\n        return {\n            text: currentValue,\n            replacePrevCharCnt: previousSelectionEnd,\n            replaceNextCharCnt: previousValue.length - previousSelectionEnd,\n            positionDelta: currentSelectionEnd - currentValue.length\n        };\n    }\n}\nTextAreaState.EMPTY = new TextAreaState('', 0, 0, null, undefined);\nexport { TextAreaState };\nexport class PagedScreenReaderStrategy {\n    static _getPageOfLine(lineNumber, linesPerPage) {\n        return Math.floor((lineNumber - 1) / linesPerPage);\n    }\n    static _getRangeForPage(page, linesPerPage) {\n        const offset = page * linesPerPage;\n        const startLineNumber = offset + 1;\n        const endLineNumber = offset + linesPerPage;\n        return new Range(startLineNumber, 1, endLineNumber + 1, 1);\n    }\n    static fromEditorSelection(model, selection, linesPerPage, trimLongText) {\n        // Chromium handles very poorly text even of a few thousand chars\n        // Cut text to avoid stalling the entire UI\n        const LIMIT_CHARS = 500;\n        const selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber, linesPerPage);\n        const selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage, linesPerPage);\n        const selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber, linesPerPage);\n        const selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage, linesPerPage);\n        let pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn));\n        if (trimLongText && model.getValueLengthInRange(pretextRange, 1 /* EndOfLinePreference.LF */) > LIMIT_CHARS) {\n            const pretextStart = model.modifyPosition(pretextRange.getEndPosition(), -LIMIT_CHARS);\n            pretextRange = Range.fromPositions(pretextStart, pretextRange.getEndPosition());\n        }\n        const pretext = model.getValueInRange(pretextRange, 1 /* EndOfLinePreference.LF */);\n        const lastLine = model.getLineCount();\n        const lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n        let posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn));\n        if (trimLongText && model.getValueLengthInRange(posttextRange, 1 /* EndOfLinePreference.LF */) > LIMIT_CHARS) {\n            const posttextEnd = model.modifyPosition(posttextRange.getStartPosition(), LIMIT_CHARS);\n            posttextRange = Range.fromPositions(posttextRange.getStartPosition(), posttextEnd);\n        }\n        const posttext = model.getValueInRange(posttextRange, 1 /* EndOfLinePreference.LF */);\n        let text;\n        if (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n            // take full selection\n            text = model.getValueInRange(selection, 1 /* EndOfLinePreference.LF */);\n        }\n        else {\n            const selectionRange1 = selectionStartPageRange.intersectRanges(selection);\n            const selectionRange2 = selectionEndPageRange.intersectRanges(selection);\n            text = (model.getValueInRange(selectionRange1, 1 /* EndOfLinePreference.LF */)\n                + String.fromCharCode(8230)\n                + model.getValueInRange(selectionRange2, 1 /* EndOfLinePreference.LF */));\n        }\n        if (trimLongText && text.length > 2 * LIMIT_CHARS) {\n            text = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n        }\n        return new TextAreaState(pretext + text + posttext, pretext.length, pretext.length + text.length, selection, pretextRange.endLineNumber - pretextRange.startLineNumber);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { isFirefox } from '../../base/browser/browser.js';\nimport * as types from '../../base/common/types.js';\nimport { status } from '../../base/browser/ui/aria/aria.js';\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from './editorExtensions.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { ColumnSelection } from '../common/cursor/cursorColumnSelection.js';\nimport { CursorState } from '../common/cursorCommon.js';\nimport { DeleteOperations } from '../common/cursor/cursorDeleteOperations.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../common/cursor/cursorMoveCommands.js';\nimport { TypeOperations } from '../common/cursor/cursorTypeOperations.js';\nimport { Position } from '../common/core/position.js';\nimport { Range } from '../common/core/range.js';\nimport { EditorContextKeys } from '../common/editorContextKeys.js';\nimport { ContextKeyExpr } from '../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nconst CORE_WEIGHT = 0 /* KeybindingWeight.EditorCore */;\nexport class CoreEditorCommand extends EditorCommand {\n    runEditorCommand(accessor, editor, args) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            // the editor has no view => has no cursors\n            return;\n        }\n        this.runCoreEditorCommand(viewModel, args || {});\n    }\n}\nexport var EditorScroll_;\n(function (EditorScroll_) {\n    const isEditorScrollArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const scrollArg = arg;\n        if (!types.isString(scrollArg.to)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n            return false;\n        }\n        return true;\n    };\n    EditorScroll_.description = {\n        description: 'Scroll editor in the given direction',\n        args: [\n            {\n                name: 'Editor scroll argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage', 'editor'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\n                constraint: isEditorScrollArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['to'],\n                    'properties': {\n                        'to': {\n                            'type': 'string',\n                            'enum': ['up', 'down']\n                        },\n                        'by': {\n                            'type': 'string',\n                            'enum': ['line', 'wrappedLine', 'page', 'halfPage', 'editor']\n                        },\n                        'value': {\n                            'type': 'number',\n                            'default': 1\n                        },\n                        'revealCursor': {\n                            'type': 'boolean',\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Directions in the view for editor scroll command.\n     */\n    EditorScroll_.RawDirection = {\n        Up: 'up',\n        Right: 'right',\n        Down: 'down',\n        Left: 'left'\n    };\n    /**\n     * Units for editor scroll 'by' argument\n     */\n    EditorScroll_.RawUnit = {\n        Line: 'line',\n        WrappedLine: 'wrappedLine',\n        Page: 'page',\n        HalfPage: 'halfPage',\n        Editor: 'editor',\n        Column: 'column'\n    };\n    function parse(args) {\n        let direction;\n        switch (args.to) {\n            case EditorScroll_.RawDirection.Up:\n                direction = 1 /* Direction.Up */;\n                break;\n            case EditorScroll_.RawDirection.Right:\n                direction = 2 /* Direction.Right */;\n                break;\n            case EditorScroll_.RawDirection.Down:\n                direction = 3 /* Direction.Down */;\n                break;\n            case EditorScroll_.RawDirection.Left:\n                direction = 4 /* Direction.Left */;\n                break;\n            default:\n                // Illegal arguments\n                return null;\n        }\n        let unit;\n        switch (args.by) {\n            case EditorScroll_.RawUnit.Line:\n                unit = 1 /* Unit.Line */;\n                break;\n            case EditorScroll_.RawUnit.WrappedLine:\n                unit = 2 /* Unit.WrappedLine */;\n                break;\n            case EditorScroll_.RawUnit.Page:\n                unit = 3 /* Unit.Page */;\n                break;\n            case EditorScroll_.RawUnit.HalfPage:\n                unit = 4 /* Unit.HalfPage */;\n                break;\n            case EditorScroll_.RawUnit.Editor:\n                unit = 5 /* Unit.Editor */;\n                break;\n            case EditorScroll_.RawUnit.Column:\n                unit = 6 /* Unit.Column */;\n                break;\n            default:\n                unit = 2 /* Unit.WrappedLine */;\n        }\n        const value = Math.floor(args.value || 1);\n        const revealCursor = !!args.revealCursor;\n        return {\n            direction: direction,\n            unit: unit,\n            value: value,\n            revealCursor: revealCursor,\n            select: (!!args.select)\n        };\n    }\n    EditorScroll_.parse = parse;\n})(EditorScroll_ || (EditorScroll_ = {}));\nexport var RevealLine_;\n(function (RevealLine_) {\n    const isRevealLineArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const reveaLineArg = arg;\n        if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\n            return false;\n        }\n        if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n            return false;\n        }\n        return true;\n    };\n    RevealLine_.description = {\n        description: 'Reveal the given line at the given logical position',\n        args: [\n            {\n                name: 'Reveal line argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\n                constraint: isRevealLineArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['lineNumber'],\n                    'properties': {\n                        'lineNumber': {\n                            'type': ['number', 'string'],\n                        },\n                        'at': {\n                            'type': 'string',\n                            'enum': ['top', 'center', 'bottom']\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Values for reveal line 'at' argument\n     */\n    RevealLine_.RawAtArgument = {\n        Top: 'top',\n        Center: 'center',\n        Bottom: 'bottom'\n    };\n})(RevealLine_ || (RevealLine_ = {}));\nclass EditorOrNativeTextInputCommand {\n    constructor(target) {\n        // 1. handle case when focus is in editor.\n        target.addImplementation(10000, 'code-editor', (accessor, args) => {\n            // Only if editor text focus (i.e. not if editor has widget focus).\n            const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n            if (focusedEditor && focusedEditor.hasTextFocus()) {\n                return this._runEditorCommand(accessor, focusedEditor, args);\n            }\n            return false;\n        });\n        // 2. handle case when focus is in some other `input` / `textarea`.\n        target.addImplementation(1000, 'generic-dom-input-textarea', (accessor, args) => {\n            // Only if focused on an element that allows for entering text\n            const activeElement = document.activeElement;\n            if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n                this.runDOMCommand();\n                return true;\n            }\n            return false;\n        });\n        // 3. (default) handle case when focus is somewhere else.\n        target.addImplementation(0, 'generic-dom', (accessor, args) => {\n            // Redirecting to active editor\n            const activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n            if (activeEditor) {\n                activeEditor.focus();\n                return this._runEditorCommand(accessor, activeEditor, args);\n            }\n            return false;\n        });\n    }\n    _runEditorCommand(accessor, editor, args) {\n        const result = this.runEditorCommand(accessor, editor, args);\n        if (result) {\n            return result;\n        }\n        return true;\n    }\n}\nexport var CoreNavigationCommands;\n(function (CoreNavigationCommands) {\n    class BaseMoveToCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            const cursorStateChanged = viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            if (cursorStateChanged && args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealPrimaryCursor(args.source, true, true);\n            }\n        }\n    }\n    CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveTo',\n        inSelectionMode: false,\n        precondition: undefined\n    }));\n    CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveToSelect',\n        inSelectionMode: true,\n        precondition: undefined\n    }));\n    class ColumnSelectCommand extends CoreEditorCommand {\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            const result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\n            if (result === null) {\n                // invalid arguments\n                return;\n            }\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, result.viewStates.map((viewState) => CursorState.fromViewState(viewState)));\n            viewModel.setCursorColumnSelectData({\n                isReal: true,\n                fromViewLineNumber: result.fromLineNumber,\n                fromViewVisualColumn: result.fromVisualColumn,\n                toViewLineNumber: result.toLineNumber,\n                toViewVisualColumn: result.toVisualColumn\n            });\n            if (result.reversed) {\n                viewModel.revealTopMostCursor(args.source);\n            }\n            else {\n                viewModel.revealBottomMostCursor(args.source);\n            }\n        }\n    }\n    CoreNavigationCommands.ColumnSelect = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'columnSelect',\n                precondition: undefined\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            if (typeof args.position === 'undefined' || typeof args.viewPosition === 'undefined' || typeof args.mouseColumn === 'undefined') {\n                return null;\n            }\n            // validate `args`\n            const validatedPosition = viewModel.model.validatePosition(args.position);\n            const validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n            const fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\n            const fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\n            return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 15 /* KeyCode.LeftArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 17 /* KeyCode.RightArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    class ColumnSelectUpCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */,\n            linux: { primary: 0 }\n        }\n    }));\n    class ColumnSelectDownCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */,\n            linux: { primary: 0 }\n        }\n    }));\n    class CursorMoveImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cursorMove',\n                precondition: undefined,\n                description: CursorMove_.description\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = CursorMove_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            this._runCursorMove(viewModel, args.source, parsed);\n        }\n        _runCursorMove(viewModel, source, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\n            viewModel.revealPrimaryCursor(source, true);\n        }\n        static _move(viewModel, cursors, args) {\n            const inSelectionMode = args.select;\n            const value = args.value;\n            switch (args.direction) {\n                case 0 /* CursorMove_.Direction.Left */:\n                case 1 /* CursorMove_.Direction.Right */:\n                case 2 /* CursorMove_.Direction.Up */:\n                case 3 /* CursorMove_.Direction.Down */:\n                case 4 /* CursorMove_.Direction.PrevBlankLine */:\n                case 5 /* CursorMove_.Direction.NextBlankLine */:\n                case 6 /* CursorMove_.Direction.WrappedLineStart */:\n                case 7 /* CursorMove_.Direction.WrappedLineFirstNonWhitespaceCharacter */:\n                case 8 /* CursorMove_.Direction.WrappedLineColumnCenter */:\n                case 9 /* CursorMove_.Direction.WrappedLineEnd */:\n                case 10 /* CursorMove_.Direction.WrappedLineLastNonWhitespaceCharacter */:\n                    return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\n                case 11 /* CursorMove_.Direction.ViewPortTop */:\n                case 13 /* CursorMove_.Direction.ViewPortBottom */:\n                case 12 /* CursorMove_.Direction.ViewPortCenter */:\n                case 14 /* CursorMove_.Direction.ViewPortIfOutside */:\n                    return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\n                default:\n                    return null;\n            }\n        }\n    }\n    CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n    CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\n    class CursorMoveBasedCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._staticArgs = opts.args;\n        }\n        runCoreEditorCommand(viewModel, dynamicArgs) {\n            let args = this._staticArgs;\n            if (this._staticArgs.value === -1 /* Constants.PAGE_SIZE_MARKER */) {\n                // -1 is a marker for page size\n                args = {\n                    direction: this._staticArgs.direction,\n                    unit: this._staticArgs.unit,\n                    select: this._staticArgs.select,\n                    value: dynamicArgs.pageSize || viewModel.cursorConfig.pageSize\n                };\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(dynamicArgs.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\n            viewModel.revealPrimaryCursor(dynamicArgs.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* CursorMove_.Direction.Left */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorLeft',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 15 /* KeyCode.LeftArrow */,\n            mac: { primary: 15 /* KeyCode.LeftArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 32 /* KeyCode.KeyB */] }\n        }\n    }));\n    CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* CursorMove_.Direction.Left */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorLeftSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* CursorMove_.Direction.Right */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorRight',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 17 /* KeyCode.RightArrow */,\n            mac: { primary: 17 /* KeyCode.RightArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 36 /* KeyCode.KeyF */] }\n        }\n    }));\n    CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* CursorMove_.Direction.Right */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorRightSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 16 /* KeyCode.UpArrow */,\n            mac: { primary: 16 /* KeyCode.UpArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 46 /* KeyCode.KeyP */] }\n        }\n    }));\n    CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n            secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */],\n            mac: { primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ },\n            linux: { primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 11 /* KeyCode.PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 18 /* KeyCode.DownArrow */,\n            mac: { primary: 18 /* KeyCode.DownArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 44 /* KeyCode.KeyN */] }\n        }\n    }));\n    CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n            secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */],\n            mac: { primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ },\n            linux: { primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 12 /* KeyCode.PageDown */\n        }\n    }));\n    CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */\n        }\n    }));\n    CoreNavigationCommands.CreateCursor = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'createCursor',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            let newState;\n            if (args.wholeLine) {\n                newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            else {\n                newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            const states = viewModel.getCursorStates();\n            // Check if we should remove a cursor (sort of like a toggle)\n            if (states.length > 1) {\n                const newModelPosition = (newState.modelState ? newState.modelState.position : null);\n                const newViewPosition = (newState.viewState ? newState.viewState.position : null);\n                for (let i = 0, len = states.length; i < len; i++) {\n                    const state = states[i];\n                    if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n                        continue;\n                    }\n                    if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n                        continue;\n                    }\n                    // => Remove the cursor\n                    states.splice(i, 1);\n                    viewModel.model.pushStackElement();\n                    viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n                    return;\n                }\n            }\n            // => Add the new cursor\n            states.push(newState);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n        }\n    });\n    CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: '_lastCursorMoveToSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    });\n    class HomeCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\n        inSelectionMode: false,\n        id: 'cursorHome',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 14 /* KeyCode.Home */,\n            mac: { primary: 14 /* KeyCode.Home */, secondary: [2048 /* KeyMod.CtrlCmd */ | 15 /* KeyCode.LeftArrow */] }\n        }\n    }));\n    CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\n        inSelectionMode: true,\n        id: 'cursorHomeSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n            mac: { primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */, secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */] }\n        }\n    }));\n    class LineStartCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel.getCursorStates()));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n        _exec(cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: false,\n        id: 'cursorLineStart',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 31 /* KeyCode.KeyA */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: true,\n        id: 'cursorLineStartSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 31 /* KeyCode.KeyA */ }\n        }\n    }));\n    class EndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\n        inSelectionMode: false,\n        id: 'cursorEnd',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 13 /* KeyCode.End */,\n            mac: { primary: 13 /* KeyCode.End */, secondary: [2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */] }\n        },\n        description: {\n            description: `Go to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\n        inSelectionMode: true,\n        id: 'cursorEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n            mac: { primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */, secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */] }\n        },\n        description: {\n            description: `Select to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    class LineEndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel, viewModel.getCursorStates()));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n        _exec(viewModel, cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                const maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: false,\n        id: 'cursorLineEnd',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 35 /* KeyCode.KeyE */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: true,\n        id: 'cursorLineEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 35 /* KeyCode.KeyE */ }\n        }\n    }));\n    class TopCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\n        inSelectionMode: false,\n        id: 'cursorTop',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 14 /* KeyCode.Home */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\n        inSelectionMode: true,\n        id: 'cursorTopSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    class BottomCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\n        inSelectionMode: false,\n        id: 'cursorBottom',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 13 /* KeyCode.End */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\n        inSelectionMode: true,\n        id: 'cursorBottomSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    class EditorScrollImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'editorScroll',\n                precondition: undefined,\n                description: EditorScroll_.description\n            });\n        }\n        determineScrollMethod(args) {\n            const horizontalUnits = [6 /* EditorScroll_.Unit.Column */];\n            const verticalUnits = [\n                1 /* EditorScroll_.Unit.Line */,\n                2 /* EditorScroll_.Unit.WrappedLine */,\n                3 /* EditorScroll_.Unit.Page */,\n                4 /* EditorScroll_.Unit.HalfPage */,\n                5 /* EditorScroll_.Unit.Editor */,\n                6 /* EditorScroll_.Unit.Column */\n            ];\n            const horizontalDirections = [4 /* EditorScroll_.Direction.Left */, 2 /* EditorScroll_.Direction.Right */];\n            const verticalDirections = [1 /* EditorScroll_.Direction.Up */, 3 /* EditorScroll_.Direction.Down */];\n            if (horizontalUnits.includes(args.unit) && horizontalDirections.includes(args.direction)) {\n                return this._runHorizontalEditorScroll.bind(this);\n            }\n            if (verticalUnits.includes(args.unit) && verticalDirections.includes(args.direction)) {\n                return this._runVerticalEditorScroll.bind(this);\n            }\n            return null;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = EditorScroll_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            const runEditorScroll = this.determineScrollMethod(parsed);\n            if (!runEditorScroll) {\n                // Incompatible unit and direction\n                return;\n            }\n            runEditorScroll(viewModel, args.source, parsed);\n        }\n        _runVerticalEditorScroll(viewModel, source, args) {\n            const desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\n            if (args.revealCursor) {\n                // must ensure cursor is in new visible range\n                const desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n                viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, [\n                    CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)\n                ]);\n            }\n            viewModel.viewLayout.setScrollPosition({ scrollTop: desiredScrollTop }, 0 /* ScrollType.Smooth */);\n        }\n        _computeDesiredScrollTop(viewModel, args) {\n            if (args.unit === 1 /* EditorScroll_.Unit.Line */) {\n                // scrolling by model lines\n                const futureViewport = viewModel.viewLayout.getFutureViewport();\n                const visibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(futureViewport.top);\n                const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n                let desiredTopModelLineNumber;\n                if (args.direction === 1 /* EditorScroll_.Direction.Up */) {\n                    // must go x model lines up\n                    desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n                }\n                else {\n                    // must go x model lines down\n                    desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n                }\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n                return viewModel.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n            }\n            if (args.unit === 5 /* EditorScroll_.Unit.Editor */) {\n                let desiredTopModelLineNumber = 0;\n                if (args.direction === 3 /* EditorScroll_.Direction.Down */) {\n                    desiredTopModelLineNumber = viewModel.model.getLineCount() - viewModel.cursorConfig.pageSize;\n                }\n                return viewModel.viewLayout.getVerticalOffsetForLineNumber(desiredTopModelLineNumber);\n            }\n            let noOfLines;\n            if (args.unit === 3 /* EditorScroll_.Unit.Page */) {\n                noOfLines = viewModel.cursorConfig.pageSize * args.value;\n            }\n            else if (args.unit === 4 /* EditorScroll_.Unit.HalfPage */) {\n                noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\n            }\n            else {\n                noOfLines = args.value;\n            }\n            const deltaLines = (args.direction === 1 /* EditorScroll_.Direction.Up */ ? -1 : 1) * noOfLines;\n            return viewModel.viewLayout.getCurrentScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\n        }\n        _runHorizontalEditorScroll(viewModel, source, args) {\n            const desiredScrollLeft = this._computeDesiredScrollLeft(viewModel, args);\n            viewModel.viewLayout.setScrollPosition({ scrollLeft: desiredScrollLeft }, 0 /* ScrollType.Smooth */);\n        }\n        _computeDesiredScrollLeft(viewModel, args) {\n            const deltaColumns = (args.direction === 4 /* EditorScroll_.Direction.Left */ ? -1 : 1) * args.value;\n            return viewModel.viewLayout.getCurrentScrollLeft() + deltaColumns * viewModel.cursorConfig.typicalHalfwidthCharacterWidth;\n        }\n    }\n    CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n    CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\n    CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 11 /* KeyCode.PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.WrappedLine,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 11 /* KeyCode.PageUp */,\n                    win: { primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */ },\n                    linux: { primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.Page,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollEditorTop = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollEditorTop',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.Editor,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 12 /* KeyCode.PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.WrappedLine,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 12 /* KeyCode.PageDown */,\n                    win: { primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */ },\n                    linux: { primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.Page,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollEditorBottom = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollEditorBottom',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.Editor,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollLeft = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Left,\n                by: EditorScroll_.RawUnit.Column,\n                value: 2,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollRight = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Right,\n                by: EditorScroll_.RawUnit.Column,\n                value: 2,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    class WordCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)\n            ]);\n            if (args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealPrimaryCursor(args.source, true, true);\n            }\n        }\n    }\n    CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\n        inSelectionMode: false,\n        id: '_wordSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\n        inSelectionMode: true,\n        id: '_wordSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'lastCursorWordSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            const lastAddedState = states[lastAddedCursorIndex];\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    });\n    class LineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            if (args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealPrimaryCursor(args.source, false, true);\n            }\n        }\n    }\n    CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\n        inSelectionMode: false,\n        id: '_lineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\n        inSelectionMode: true,\n        id: '_lineSelectDrag',\n        precondition: undefined\n    }));\n    class LastCursorLineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    }\n    CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: false,\n        id: 'lastCursorLineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: true,\n        id: 'lastCursorLineSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.CancelSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cancelSelection',\n                precondition: EditorContextKeys.hasNonEmptySelection,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* KeyCode.Escape */,\n                    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    });\n    CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'removeSecondaryCursors',\n                precondition: EditorContextKeys.hasMultipleSelections,\n                kbOpts: {\n                    weight: CORE_WEIGHT + 1,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* KeyCode.Escape */,\n                    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                viewModel.getPrimaryCursorState()\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n            status(nls.localize('removedCursor', \"Removed secondary cursors\"));\n        }\n    });\n    CoreNavigationCommands.RevealLine = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'revealLine',\n                precondition: undefined,\n                description: RevealLine_.description\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const revealLineArg = args;\n            const lineNumberArg = revealLineArg.lineNumber || 0;\n            let lineNumber = typeof lineNumberArg === 'number' ? (lineNumberArg + 1) : (parseInt(lineNumberArg) + 1);\n            if (lineNumber < 1) {\n                lineNumber = 1;\n            }\n            const lineCount = viewModel.model.getLineCount();\n            if (lineNumber > lineCount) {\n                lineNumber = lineCount;\n            }\n            const range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\n            let revealAt = 0 /* VerticalRevealType.Simple */;\n            if (revealLineArg.at) {\n                switch (revealLineArg.at) {\n                    case RevealLine_.RawAtArgument.Top:\n                        revealAt = 3 /* VerticalRevealType.Top */;\n                        break;\n                    case RevealLine_.RawAtArgument.Center:\n                        revealAt = 1 /* VerticalRevealType.Center */;\n                        break;\n                    case RevealLine_.RawAtArgument.Bottom:\n                        revealAt = 4 /* VerticalRevealType.Bottom */;\n                        break;\n                    default:\n                        break;\n                }\n            }\n            const viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\n            viewModel.revealRange(args.source, false, viewRange, revealAt, 0 /* ScrollType.Smooth */);\n        }\n    });\n    CoreNavigationCommands.SelectAll = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(SelectAllCommand);\n        }\n        runDOMCommand() {\n            if (isFirefox) {\n                document.activeElement.focus();\n                document.activeElement.select();\n            }\n            document.execCommand('selectAll');\n        }\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditorCommand(viewModel, args);\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates('keyboard', 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n        }\n    }();\n    CoreNavigationCommands.SetSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'setSelection',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.selection) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorState.fromModelSelection(args.selection)\n            ]);\n        }\n    });\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\nconst columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\nfunction registerColumnSelection(id, keybinding) {\n    KeybindingsRegistry.registerKeybindingRule({\n        id: id,\n        primary: keybinding,\n        when: columnSelectionCondition,\n        weight: CORE_WEIGHT + 1\n    });\n}\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */);\nfunction registerCommand(command) {\n    command.register();\n    return command;\n}\nexport var CoreEditingCommands;\n(function (CoreEditingCommands) {\n    class CoreEditingCommand extends EditorCommand {\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditingCommand(editor, viewModel, args || {});\n        }\n    }\n    CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n    CoreEditingCommands.LineBreakInsert = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'lineBreakInsert',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 45 /* KeyCode.KeyO */ }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n        }\n    });\n    CoreEditingCommands.Outdent = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'outdent',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 1024 /* KeyMod.Shift */ | 2 /* KeyCode.Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.Tab = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'tab',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 2 /* KeyCode.Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.DeleteLeft = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 1 /* KeyCode.Backspace */,\n                    secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */],\n                    mac: { primary: 1 /* KeyCode.Backspace */, secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */, 256 /* KeyMod.WinCtrl */ | 38 /* KeyCode.KeyH */, 256 /* KeyMod.WinCtrl */ | 1 /* KeyCode.Backspace */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection), viewModel.getCursorAutoClosedCharacters());\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(2 /* EditOperationType.DeletingLeft */);\n        }\n    });\n    CoreEditingCommands.DeleteRight = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 20 /* KeyCode.Delete */,\n                    mac: { primary: 20 /* KeyCode.Delete */, secondary: [256 /* KeyMod.WinCtrl */ | 34 /* KeyCode.KeyD */, 256 /* KeyMod.WinCtrl */ | 20 /* KeyCode.Delete */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(3 /* EditOperationType.DeletingRight */);\n        }\n    });\n    CoreEditingCommands.Undo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(UndoCommand);\n        }\n        runDOMCommand() {\n            document.execCommand('undo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(86 /* EditorOption.readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().undo();\n        }\n    }();\n    CoreEditingCommands.Redo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(RedoCommand);\n        }\n        runDOMCommand() {\n            document.execCommand('redo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(86 /* EditorOption.readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().redo();\n        }\n    }();\n})(CoreEditingCommands || (CoreEditingCommands = {}));\n/**\n * A command that will invoke a command on the focused editor.\n */\nclass EditorHandlerCommand extends Command {\n    constructor(id, handlerId, description) {\n        super({\n            id: id,\n            precondition: undefined,\n            description: description\n        });\n        this._handlerId = handlerId;\n    }\n    runCommand(accessor, args) {\n        const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n        if (!editor) {\n            return;\n        }\n        editor.trigger('keyboard', this._handlerId, args);\n    }\n}\nfunction registerOverwritableCommand(handlerId, description) {\n    registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n    registerCommand(new EditorHandlerCommand(handlerId, handlerId, description));\n}\nregisterOverwritableCommand(\"type\" /* Handler.Type */, {\n    description: `Type`,\n    args: [{\n            name: 'args',\n            schema: {\n                'type': 'object',\n                'required': ['text'],\n                'properties': {\n                    'text': {\n                        'type': 'string'\n                    }\n                },\n            }\n        }]\n});\nregisterOverwritableCommand(\"replacePreviousChar\" /* Handler.ReplacePreviousChar */);\nregisterOverwritableCommand(\"compositionType\" /* Handler.CompositionType */);\nregisterOverwritableCommand(\"compositionStart\" /* Handler.CompositionStart */);\nregisterOverwritableCommand(\"compositionEnd\" /* Handler.CompositionEnd */);\nregisterOverwritableCommand(\"paste\" /* Handler.Paste */);\nregisterOverwritableCommand(\"cut\" /* Handler.Cut */);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DataTransfers } from '../../base/browser/dnd.js';\nimport { createFileDataTransferItem, createStringDataTransferItem, UriList, VSDataTransfer } from '../../base/common/dataTransfer.js';\nimport { Mimes } from '../../base/common/mime.js';\nimport { URI } from '../../base/common/uri.js';\nimport { CodeDataTransfers, extractEditorsDropData } from '../../platform/dnd/browser/dnd.js';\nexport function toVSDataTransfer(dataTransfer) {\n    const vsDataTransfer = new VSDataTransfer();\n    for (const item of dataTransfer.items) {\n        const type = item.type;\n        if (item.kind === 'string') {\n            const asStringValue = new Promise(resolve => item.getAsString(resolve));\n            vsDataTransfer.append(type, createStringDataTransferItem(asStringValue));\n        }\n        else if (item.kind === 'file') {\n            const file = item.getAsFile();\n            if (file) {\n                vsDataTransfer.append(type, createFileDataTransferItemFromFile(file));\n            }\n        }\n    }\n    return vsDataTransfer;\n}\nfunction createFileDataTransferItemFromFile(file) {\n    const uri = file.path ? URI.parse(file.path) : undefined;\n    return createFileDataTransferItem(file.name, uri, () => __awaiter(this, void 0, void 0, function* () {\n        return new Uint8Array(yield file.arrayBuffer());\n    }));\n}\nconst INTERNAL_DND_MIME_TYPES = Object.freeze([\n    CodeDataTransfers.EDITORS,\n    CodeDataTransfers.FILES,\n    DataTransfers.RESOURCES,\n]);\nexport function addExternalEditorsDropData(dataTransfer, dragEvent, overwriteUriList = false) {\n    var _a;\n    if (dragEvent.dataTransfer && (overwriteUriList || !dataTransfer.has(Mimes.uriList))) {\n        const editorData = extractEditorsDropData(dragEvent)\n            .filter(input => input.resource)\n            .map(input => input.resource.toString());\n        // Also add in the files\n        for (const item of (_a = dragEvent.dataTransfer) === null || _a === void 0 ? void 0 : _a.items) {\n            const file = item.getAsFile();\n            if (file) {\n                editorData.push(file.path ? URI.file(file.path).toString() : file.name);\n            }\n        }\n        if (editorData.length) {\n            dataTransfer.replace(Mimes.uriList, createStringDataTransferItem(UriList.create(editorData)));\n        }\n    }\n    for (const internal of INTERNAL_DND_MIME_TYPES) {\n        dataTransfer.delete(internal);\n    }\n}\n"],"names":["applyFontInfo","domNode","fontInfo","FastDomNode","setFontFamily","getMassagedFontFamily","setFontWeight","fontWeight","setFontSize","fontSize","setFontFeatureSettings","fontFeatureSettings","setFontVariationSettings","fontVariationSettings","setLineHeight","lineHeight","setLetterSpacing","letterSpacing","style","fontFamily","EditorSettingMigration","key","migrate","_classCallCheck","this","_createClass","value","options","_read","_write","source","firstDotIndex","indexOf","firstSegment","substring","target","registerEditorSettingMigration","items","push","registerSimpleEditorSettingMigration","values","read","write","_step","_iterator","_createForOfIteratorHelper","s","n","done","_step$value","_slicedToArray","oldValue","newValue","err","e","f","enabled","undefined","suggestFilteredTypesMapping","method","function","constructor","deprecated","field","variable","class","struct","interface","module","property","event","operator","unit","constant","enum","enumMember","keyword","text","color","file","reference","folder","typeParameter","snippet","_i","_Object$entries","Object","entries","length","entry","concat","input","comments","strings","other","__decorate","decorators","desc","d","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","EditorConfiguration","_Disposable","_inherits","_super","_createSuper","isSimpleWidget","container","_accessibilityService","_this","call","_onDidChange","_register","Emitter","onDidChange","_onDidChangeFast","onDidChangeFast","_isDominatedByLongLines","_viewLineCount","_lineNumbersDigitCount","_reservedHeight","_computeOptionsMemory","ComputeOptionsMemory","_containerObserver","ElementSizeObserver","dimension","_rawOptions","deepCloneAndMigrateOptions","_validatedOptions","EditorOptionsUtil","validateOptions","_computeOptions","get","startObserving","EditorZoom","_recomputeOptions","TabFocus","FontMeasurements","browser","PixelRatio","onDidChangeScreenReaderOptimized","newOptions","changeEvent","checkEquals","fire","partialEnv","_readEnvConfiguration","bareFontInfo","BareFontInfo","pixelRatio","_readFontInfo","env","memory","outerWidth","outerHeight","extraEditorClassName","isDominatedByLongLines","viewLineCount","lineNumbersDigitCount","emptySelectionClipboard","tabFocusMode","accessibilitySupport","computeOptions","getExtraEditorClassName","getWidth","getHeight","isWebKit","isFirefox","isScreenReaderOptimized","getAccessibilitySupport","_newOptions","applyUpdate","observe","modelLineCount","Math","floor","digitCount","reservedHeight","Disposable","extra","isSafari","isWebkitWebView","platform","IAccessibilityService","ValidatedEditorOptions","_values","option","id","ComputedEditorOptions","Error","result","editorOptionsRegistry","editorOption","name","validate","_step2","_iterator2","compute","a","b","Array","isArray","arrays","keys","_deepEquals","_step3","somethingChanged","_iterator3","changed","ConfigurationChangedEvent","update","_step4","_iterator4","hasOwnProperty","didChange","_options","objects","forEach","migration","apply","migrateOptions","referenceDomElement","_referenceDomElement","_width","_height","_resizeObserver","measureReferenceDomElement","stopObserving","_get","_getPrototypeOf","prototype","_this2","ResizeObserver","contentRect","width","height","disconnect","emitEvent","observedWidth","observedHeight","clientWidth","clientHeight","max","CharWidthRequest","chr","type","DomCharWidthReader","requests","_bareFontInfo","_requests","_container","_testElements","_createDomElements","document","body","appendChild","_readFromDomElements","removeChild","createElement","position","top","regularDomNode","boldDomNode","italicDomNode","fontStyle","testElements","request","parent","testElement","_render","len","fulfill","offsetWidth","htmlString","innerText","testString","textContent","FontMeasurementsImpl","_cache","FontMeasurementsCache","_evictUntrustedReadingsTimeout","window","clearTimeout","item","put","isTrusted","setTimeout","_evictUntrustedReadings","getValues","somethingRemoved","remove","has","readConfig","_actualReadFontInfo","typicalHalfwidthCharacterWidth","typicalFullwidthCharacterWidth","spaceWidth","maxDigitWidth","FontInfo","isMonospace","canUseHalfwidthRightwardsArrow","middotWidth","wsmiddotWidth","_writeToCache","all","monospace","typicalHalfwidthCharacter","_createRequest","typicalFullwidthCharacter","space","digit0","digit1","digit2","digit3","digit4","digit5","digit6","digit7","digit8","digit9","rightwardsArrow","halfwidthRightwardsArrow","middot","String","fromCharCode","monospaceTestChars","charAt","readCharWidths","EditorFontLigatures","referenceWidth","diff","_keys","create","itemId","getId","_this3","map","TabFocusImpl","_tabFocusTerminal","_tabFocusEditor","_onDidChangeTabFocus","onDidChangeTabFocus","context","HitTestResult","UnknownHitTestResult","hitTarget","ContentHitTestResult","spanNode","injectedText","createFromDOMInfo","ctx","offset","getPositionFromDOMInfo","PointerHandlerLastRenderData","lastViewCursorsRenderData","lastTextareaPosition","MouseTarget","range","EditorRange","lineNumber","column","element","mouseColumn","_deduceRage","detail","outsidePosition","outsideDistance","_typeToString","JSON","stringify","ElementPath","path","HitTestContext","viewHelper","lastRenderData","viewModel","configuration","layoutInfo","viewDomNode","stickyTabStops","_context","_viewHelper","mouseVerticalOffset","getZoneAtCoord","viewLayout","isAfterLines","getLineCount","maxLineColumn","getLineMaxColumn","getLineNumberAtVerticalOffset","isInTopPadding","isInBottomPadding","getVerticalOffsetForLineNumber","attr","_findAttribute","getLineWidth","visibleRangeForPosition","getCurrentScrollTop","getCurrentScrollLeft","viewZoneWhitespace","getWhitespaceAtVerticalOffset","viewZoneMiddle","verticalOffset","lineCount","positionBefore","positionAfter","afterLineNumber","Position","viewZoneId","stopAt","hasAttribute","getAttribute","parentNode","HitTestRequest","_BareHitTestRequest","editorPos","pos","relativePos","_ctx","targetPath","PartFingerprints","Uint8Array","x","y","mouseContentHorizontalOffset","outerHTML","CursorColumns","getLineContent","model","getOptions","tabSize","createUnknown","_getMouseColumn","createTextarea","createMargin","createViewZone","createContentText","createContentEmpty","createContentWidget","createScrollbar","createOverlayWidget","BareHitTestRequest","contentLeft","isInMarginArea","glyphMarginLeft","isInContentArea","MouseTargetFactory","EMPTY_CONTENT_AFTER_LINES","createEmptyContentDataInLines","horizontalDistanceToText","t","isChildOfContentWidgets","isChildOfOverflowingContentWidgets","isChildOfOverlayWidgets","_createMouseTarget","_snapToSoftTabBoundary","plusRange","fulfillContentText","fulfillUnknown","domHitTestExecuted","hitTestResult","_doHitTest","createMouseTargetFromHitTestPosition","withTarget","resolvedRequest","_hitTestContentWidget","_hitTestOverlayWidget","_hitTestMinimap","_hitTestScrollbarSlider","_hitTestViewZone","_hitTestMargin","_hitTestViewCursor","_hitTestTextArea","_hitTestViewLines","_hitTestScrollbar","widgetId","findAttribute","fulfillContentWidget","fulfillOverlayWidget","mightBeForeignElement","cursorVerticalOffset","viewZoneData","mouseTargetType","fulfillViewZone","isTextArea","fulfillTextarea","res","getFullLineRangeAtCoord","getStartPosition","abs","glyphMarginWidth","lineNumbersWidth","offsetX","fulfillMargin","isChildOfViewLines","fulfillContentEmpty","isStrictChildOfViewLines","getLineLength","lineWidth","isChildOfMinimap","possibleLineNumber","maxColumn","fulfillScrollbar","isChildOfScrollableElement","nodeType","className","test","round","visibleRange","columnHorizontalOffset","left","points","sort","mouseCoordinates","toClientCoordinates","spanNodeClientRect","getBoundingClientRect","mouseIsOverSpanNode","clientX","right","rng","prev","curr","lineStartVerticalOffset","lineEndVerticalOffset","lineCenteredVerticalOffset","adjustedPageY","adjustedPage","PageCoordinates","_actualDoHitTestWithCaretRangeFromPoint","coords","shadowRoot","dom","caretRangeFromPoint","createRange","el","elementFromPoint","firstChild","TEXT_NODE","lastChild","step","rect","font","getComputedStyle","getPropertyValue","pixelCursor","charWidthReader","CharWidthReader","getInstance","getCharWidth","setStart","setEnd","shadowCaretRangeFromPoint","clientY","startContainer","parent1","parent2","parent3","ELEMENT_NODE","ViewLine","startOffset","hitResult","caretPositionFromPoint","offsetNode","parent1ClassName","parent2ClassName","tokenSpan","childNodes","min","lineContent","newPosition","AtomicTabMoveOperations","_doHitTestWithCaretRangeFromPoint","_doHitTestWithCaretPositionFromPoint","getInjectedTextAt","normalizedPosition","normalizePosition","equals","_canvas","char","cacheKey","getContext","measureText","_INSTANCE","MouseHandler","_ViewEventHandler","viewController","_mouseLeaveMonitor","mouseTargetFactory","_mouseDownOperation","MouseDownOperation","testEventTarget","lastMouseLeaveTime","mouseEvents","EditorMouseEventFactory","onContextMenu","_onContextMenu","onMouseMove","_onMouseMove","addDisposableListener","contains","_onMouseLeave","EditorMouseEvent","onMouseUp","_onMouseUp","onMouseLeave","capturePointerId","onPointerDown","pointerId","EventType","POINTER_UP","onPointerUp","onMouseDown","_onMouseDown","_setupMouseWheelZoomListener","addEventHandler","_assertThisInitialized","classifier","MouseWheelClassifier","prevMouseWheelTime","gestureStartZoomLevel","gestureHasZoomModifiers","gestureAccumulatedDelta","hasMouseWheelZoomModifiers","browserEvent","metaKey","ctrlKey","shiftKey","altKey","MOUSE_WHEEL","emitMouseWheel","StandardWheelEvent","acceptStandardWheelEvent","isPhysicalMouseWheel","zoomLevel","delta","deltaY","preventDefault","stopPropagation","Date","now","capture","passive","removeEventHandler","dispose","hasChanged","onHeightChanged","onCursorStateChanged","ClientCoordinates","toPageCoordinates","createEditorPagePosition","createCoordinatesRelativeToEditor","createMouseTarget","getLastRenderData","getShadowRoot","elementsFromPoint","posx","posy","find","getMouseColumn","emitContextMenu","mouseTargetIsWidget","isActive","timestamp","emitMouseMove","getTime","emitMouseLeave","emitMouseUp","_this4","targetIsContent","targetIsGutter","targetIsLineNumbers","selectOnLineNumbers","targetIsViewZone","targetIsWidget","shouldHandle","leftButton","middleButton","focus","focusTextArea","start","shouldSuppressMouseDownOnViewZone","shouldSuppressMouseDownOnWidget","emitMouseDown","ViewEventHandler","_super2","_viewController","_mouseTargetFactory","_this5","_mouseMoveMonitor","GlobalEditorPointerMoveMonitor","_topBottomDragScrolling","TopBottomDragScrolling","inSelectionMode","revealType","_dispatchMouse","_mouseState","MouseDownState","_currentSelection","Selection","_isActive","_lastMouseEvent","setModifiers","_findMousePosition","isDragAndDrop","emitMouseDrag","stop","targetType","_this6","setStartedOnLineNumbers","setStartButtons","trySetCount","count","isEmpty","containsPosition","startMonitoring","viewLinesDomNode","buttons","_onMouseDownThenMove","KeyboardEvent","emitMouseDropCanceled","emitMouseDrop","_stop","stopMonitoring","selections","editorContent","_helpPositionJumpOverViewZone","aboveLineNumber","belowLineNumber","positionOutsideEditor","_getPositionOutsideEditor","selectionStart","selectionStartLineNumber","selectionStartColumn","isBefore","dispatchMouse","startedOnLineNumbers","mouseDownCount","onInjectedText","_Disposable2","_super3","_this7","_operation","mouseEvent","setPosition","TopBottomDragScrollingOperation","_Disposable3","_super4","_this8","_position","_mouseEvent","_lastTime","_animationFrameDisposable","scheduleAtNextAnimationFrame","_execute","elapsed","viewportInLines","outsideDistanceInLines","_this9","scrollInPixels","_getScrollSpeed","_tick","scrollValue","deltaScrollNow","renderNow","mouseTarget","viewportData","getLinesViewportData","edgeLineNumber","startLineNumber","endLineNumber","horizontalScrollbarHeight","_altKey","_ctrlKey","_metaKey","_shiftKey","_leftButton","_middleButton","_startedOnLineNumbers","_lastMouseDownPosition","_lastMouseDownPositionEqualCount","_lastMouseDownCount","_lastSetMouseDownCountTime","setMouseDownCount","newMouseDownPosition","currentTime","CLEAR_MOUSE_DOWN_COUNT_TIME","PointerEventHandler","_MouseHandler","Gesture","linesContentDomNode","onTap","onChange","_lastPointerType","pointerType","pointerEvents","EditorPointerEventFactory","onPointerMove","onPointerLeave","initialTarget","tapCount","translationX","translationY","TouchHandler","_MouseHandler2","createEvent","initEvent","TextAreaSyntethicEvents","dispatchTextAreaEvent","moveTo","PointerHandler","BrowserFeatures","handler","TouchEvent","getTargetAtClientPoint","VisibleTextAreaData","modelLineNumber","distanceToModelLineStart","widthOfHiddenLineTextBefore","distanceToModelLineEnd","_visibleTextAreaBrand","startPosition","endPosition","visibleTextareaStart","visibleTextareaEnd","_previousPresentation","visibleRangeProvider","startModelPosition","endModelPosition","coordinatesConverter","convertModelPositionToViewPosition","tokenPresentation","foreground","italic","bold","underline","strikethrough","canUseZeroSizeTextarea","TextAreaHandler","_ViewPart","_primaryCursorPosition","_primaryCursorVisibleRange","_visibleRangeProvider","_scrollLeft","_scrollTop","_setAccessibilityOptions","_contentLeft","_contentWidth","contentWidth","_contentHeight","_fontInfo","_lineHeight","_emptySelectionClipboard","_copyWithSyntaxHighlighting","_visibleTextArea","_selections","_modelSelections","_lastRenderPosition","textArea","createFastDomNode","setClassName","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","setAttribute","_textAreaWrapping","_getAriaLabel","nls","_ensureReadOnlyAttribute","textAreaCover","simpleModel","getValueInRange","eol","getValueLengthInRange","modifyPosition","textAreaInputHost","getDataToCopy","rawTextToCopy","getPlainTextToCopy","newLineCharacter","getEOL","isFromEmptySelection","multicursorText","join","html","mode","CopyOptions","richText","getRichTextToCopy","getScreenReaderContent","_accessibilitySupport","selection","textBefore","_getWordBeforePosition","_getCharacterBeforePosition","TextAreaState","Range","placeholderText","isAndroid","_this$_getAndroidWord","_getAndroidWordAtPosition","_this$_getAndroidWord2","wordAtPosition","positionOffsetInWord","PagedScreenReaderStrategy","_accessibilityPageSize","deduceModelPosition","viewAnchorPosition","deltaOffset","lineFeedCnt","deduceModelPositionRelativeToViewPosition","textAreaWrapper","TextAreaWrapper","_textAreaInput","TextAreaInput","OS","onKeyDown","emitKeyDown","onKeyUp","emitKeyUp","onPaste","pasteOnNewLine","metadata","paste","onCut","cut","onType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","_debugComposition","console","log","compositionType","onSelectionChangeRequest","modelSelection","setSelection","onCompositionStart","ta","_ref","textBeforeSelection","selectionEnd","lineFeedOffset1","lastIndexOf","lineTextBeforeSelection","tabOffset1","desiredVisibleBeforeCharCount","visibleBeforeCharCount","hiddenLineTextBefore","widthOfHiddenTextBefore","whiteSpace","append","textAfterSelection","lineFeedOffset2","lineTextAfterSelection","tabOffset2","desiredVisibleAfterCharCount","getEndPosition","visibleAfterCharCount","revealRange","prepareRender","compositionStart","onCompositionUpdate","onCompositionEnd","compositionEnd","onFocus","setHasFocus","onBlur","IME","reason","writeScreenReaderContent","wordSeparators","getMapForWordSeparators","goingLeft","startColumn","goingRight","endColumn","distance","charCode","charCodeAt","charBefore","accessibilityPageSize","EditorOptions","wrappingColumn","_textAreaWidth","slice","modelSelections","scrollLeft","scrollTop","isFocused","activeDescendant","removeAttribute","role","_a","positionLineNumber","positionColumn","visibleStart","visibleEnd","_newlinecount","substr","viewLineData","getViewLineData","startTokenIndex","tokens","findTokenIndexAtOffset","textareaSpansSingleToken","presentation","definePresentation","getPresentation","_doRender","lastRenderPosition","useCover","TokenizationRegistry","_renderAtTopLeft","textAreaState","newlineCountBeforeSelection","startIndex","renderData","tac","setTop","setLeft","setWidth","setHeight","setColor","Color","setFontStyle","setTextDecoration","Margin","renderType","LineNumbersOverlay","ViewPart","Tap","forceCopyWithSyntaxHighlighting","InMemoryClipboardMetadataManager","_lastState","lastCopiedValue","data","pastedText","INSTANCE","CompositionContext","_lastTypeTextLength","typeInput","_host","_textArea","_OS","_browser","_onFocus","_onBlur","_onKeyDown","_onKeyUp","_onCut","_onPaste","_onType","_onCompositionStart","_onCompositionUpdate","_onCompositionEnd","_onSelectionChangeRequest","_asyncTriggerCut","RunOnceScheduler","_asyncFocusGainWriteScreenReaderContent","_textAreaState","_selectionChangeListener","_hasFocus","_currentComposition","lastKeyDown","_e","StandardKeyboardEvent","keyCode","currentComposition","code","handleCompositionUpdate","newState","onInput","setIgnoreSelectionChangeTime","_ensureClipboardGetsEditorSelection","schedule","onCopy","clipboardData","_ClipboardEventUtils$","ClipboardEventUtils","getTextData","_ClipboardEventUtils$2","hadFocus","_setHasFocus","onSyntheticTap","previousSelectionChangeEventTime","inputLatency","isChrome","delta1","delta2","getIgnoreSelectionChangeTime","resetSelectionChangeTime","getValue","newSelectionStart","getSelectionStart","newSelectionEnd","getSelectionEnd","_newSelectionStartPosition","deduceEditorPosition","newSelectionStartPosition","_newSelectionEndPosition","newSelectionEndPosition","newSelection","refreshFocusState","hasFocus","newHasFocus","_installSelectionChangeListener","collapseSelection","writeToTextArea","_setAndWriteTextAreaState","dataToCopy","storedMetadata","version","set","replace","setTextData","getData","Mimes","rawmetadata","parse","files","setData","_actual","DomEmitter","onBeforeInput","_onSyntheticTap","_ignoreSelectionChangeTime","activeElement","selectionDirection","currentIsFocused","currentSelectionStart","currentSelectionEnd","setSelectionRange","scrollState","select","toString","setValue","_b","_c","_d","_f","_g","_h","str","_finishDeduceEditorPosition","str1","str2","anchor","deltaText","signum","lastLineFeedIndex","previousState","currentState","couldBeEmojiInput","prefixLength","suffixLength","previousValue","currentValue","previousSelectionStart","previousSelectionEnd","replacePreviousCharacters","EMPTY","linesPerPage","page","trimLongText","LIMIT_CHARS","selectionStartPage","_getPageOfLine","selectionStartPageRange","_getRangeForPage","selectionEndPage","selectionEndPageRange","pretextRange","intersectRanges","pretextStart","pretext","lastLine","lastLineMaxColumn","posttextRange","posttextEnd","posttext","selectionRange1","selectionRange2","EditorScroll_","RevealLine_","CORE_WEIGHT","CoreEditorCommand","_EditorCommand","accessor","editor","args","_getViewModel","runCoreEditorCommand","EditorCommand","description","constraint","arg","types","scrollArg","to","by","revealCursor","schema","RawDirection","Up","Right","Down","Left","RawUnit","Line","WrappedLine","Page","HalfPage","Editor","Column","direction","reveaLineArg","at","RawAtArgument","Top","Center","Bottom","CoreNavigationCommands","EditorOrNativeTextInputCommand","addImplementation","focusedEditor","ICodeEditorService","getFocusedCodeEditor","hasTextFocus","_runEditorCommand","tagName","toLowerCase","runDOMCommand","activeEditor","getActiveCodeEditor","runEditorCommand","BaseMoveToCommand","_CoreEditorCommand","opts","_inSelectionMode","pushStackElement","setCursorStates","CursorMoveCommands","getPrimaryCursorState","viewPosition","revealPrimaryCursor","MoveTo","registerEditorCommand","precondition","MoveToSelect","ColumnSelectCommand","_CoreEditorCommand2","_getColumnSelectResult","getCursorColumnSelectData","viewStates","viewState","CursorState","setCursorColumnSelectData","isReal","fromViewLineNumber","fromLineNumber","fromViewVisualColumn","fromVisualColumn","toViewLineNumber","toLineNumber","toViewVisualColumn","toVisualColumn","reversed","revealTopMostCursor","revealBottomMostCursor","ColumnSelect","_ColumnSelectCommand","_class","primary","prevColumnSelectData","validatedPosition","validatePosition","validatedViewPosition","validateViewPosition","doColumnSelect","ColumnSelection","cursorConfig","CursorColumnSelectLeft","_ColumnSelectCommand2","_class2","_super5","kbOpts","weight","kbExpr","EditorContextKeys","linux","CursorColumnSelectRight","_ColumnSelectCommand3","_class3","_super6","ColumnSelectUpCommand","_ColumnSelectCommand4","_super7","_isPaged","isPaged","CursorColumnSelectUp","CursorColumnSelectPageUp","ColumnSelectDownCommand","_ColumnSelectCommand5","_super8","CursorColumnSelectDown","CursorColumnSelectPageDown","CursorMoveImpl","_CoreEditorCommand3","_super9","CursorMove_","parsed","_runCursorMove","_move","getCursorStates","cursors","CursorMove","CursorMoveBasedCommand","_CoreEditorCommand4","_super10","_staticArgs","dynamicArgs","pageSize","CursorLeft","mac","secondary","CursorLeftSelect","CursorRight","CursorRightSelect","CursorUp","CursorUpSelect","CursorPageUp","CursorPageUpSelect","CursorDown","CursorDownSelect","CursorPageDown","CursorPageDownSelect","CreateCursor","_CoreEditorCommand5","_class4","_super11","wholeLine","states","newModelPosition","modelState","newViewPosition","state","splice","LastCursorMoveToSelect","_CoreEditorCommand6","_class5","_super12","lastAddedCursorIndex","getLastAddedCursorIndex","newStates","HomeCommand","_CoreEditorCommand7","_super13","CursorHome","CursorHomeSelect","LineStartCommand","_CoreEditorCommand8","_super14","_exec","cursor","move","CursorLineStart","CursorLineStartSelect","EndCommand","_CoreEditorCommand9","_super15","sticky","CursorEnd","properties","default","CursorEndSelect","LineEndCommand","_CoreEditorCommand10","_super16","CursorLineEnd","CursorLineEndSelect","TopCommand","_CoreEditorCommand11","_super17","_this10","CursorTop","CursorTopSelect","BottomCommand","_CoreEditorCommand12","_super18","_this11","CursorBottom","CursorBottomSelect","EditorScrollImpl","_CoreEditorCommand13","_super19","includes","_runHorizontalEditorScroll","bind","_runVerticalEditorScroll","runEditorScroll","determineScrollMethod","desiredScrollTop","_computeDesiredScrollTop","desiredVisibleViewRange","getCompletelyVisibleViewRangeAtScrollTop","setScrollPosition","desiredTopModelLineNumber","futureViewport","getFutureViewport","visibleViewRange","visibleModelRange","convertViewRangeToModelRange","noOfLines","deltaLines","desiredScrollLeft","_computeDesiredScrollLeft","deltaColumns","EditorScroll","ScrollLineUp","_CoreEditorCommand14","_class6","_super20","ScrollPageUp","_CoreEditorCommand15","_class7","_super21","win","ScrollEditorTop","_CoreEditorCommand16","_class8","_super22","ScrollLineDown","_CoreEditorCommand17","_class9","_super23","ScrollPageDown","_CoreEditorCommand18","_class10","_super24","ScrollEditorBottom","_CoreEditorCommand19","_class11","_super25","ScrollLeft","_CoreEditorCommand20","_class12","_super26","ScrollRight","_CoreEditorCommand21","_class13","_super27","WordCommand","_CoreEditorCommand22","_super28","_this12","WordSelect","WordSelectDrag","LastCursorWordSelect","_CoreEditorCommand23","_class14","_super29","lastAddedState","hasSelection","LineCommand","_CoreEditorCommand24","_super30","_this13","LineSelect","LineSelectDrag","LastCursorLineCommand","_CoreEditorCommand25","_super31","_this14","LastCursorLineSelect","LastCursorLineSelectDrag","CancelSelection","_CoreEditorCommand26","_class15","_super32","RemoveSecondaryCursors","_CoreEditorCommand27","_class16","_super33","status","RevealLine","_CoreEditorCommand28","_class17","_super34","revealLineArg","lineNumberArg","parseInt","revealAt","viewRange","convertModelRangeToViewRange","SelectAll","_EditorOrNativeTextIn","_class18","_super35","SelectAllCommand","execCommand","SetSelection","_CoreEditorCommand29","_class19","_super36","CoreEditingCommands","columnSelectionCondition","ContextKeyExpr","registerColumnSelection","keybinding","KeybindingsRegistry","when","registerCommand","command","register","CoreEditingCommand","_EditorCommand2","_super37","runCoreEditingCommand","LineBreakInsert","_CoreEditingCommand","_class20","_super38","pushUndoStop","executeCommands","TypeOperations","Outdent","_CoreEditingCommand2","_class21","_super39","Tab","_CoreEditingCommand3","_class22","_super40","DeleteLeft","_CoreEditingCommand4","_class23","_super41","_DeleteOperations$del","DeleteOperations","getPrevEditOperationType","getCursorAutoClosedCharacters","_DeleteOperations$del2","shouldPushStackElementBefore","commands","setPrevEditOperationType","DeleteRight","_CoreEditingCommand5","_class24","_super42","_DeleteOperations$del3","_DeleteOperations$del4","Undo","_EditorOrNativeTextIn2","_class25","_super43","UndoCommand","hasModel","getOption","getModel","undo","Redo","_EditorOrNativeTextIn3","_class26","_super44","RedoCommand","redo","EditorHandlerCommand","_Command","_super45","handlerId","_this15","_handlerId","trigger","Command","registerOverwritableCommand","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","next","rejected","then","toVSDataTransfer","dataTransfer","vsDataTransfer","VSDataTransfer","_loop","kind","asStringValue","getAsString","createStringDataTransferItem","getAsFile","uri","URI","createFileDataTransferItem","_regeneratorRuntime","mark","_callee","wrap","t0","arrayBuffer","t1","sent","abrupt","createFileDataTransferItemFromFile","INTERNAL_DND_MIME_TYPES","freeze","CodeDataTransfers","DataTransfers","addExternalEditorsDropData","dragEvent","overwriteUriList","editorData","extractEditorsDropData","filter","resource","UriList","internal","delete"],"sourceRoot":""}