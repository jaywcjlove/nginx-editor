{"version":3,"file":"static/js/monaco-editor-vendor.96a37e40.625e5c0f.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/contentWidgets/contentWidgets.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/currentLineHighlight/currentLineHighlight.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/decorations/decorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/editorScrollbar/editorScrollbar.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/glyphMargin/glyphMargin.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/indentGuides/indentGuides.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/domReadingContext.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLines.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/linesDecorations/linesDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/marginDecorations/marginDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharSheet.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRenderer.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapPreBaked.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimap.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/overviewRuler.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/rulers/rulers.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/scrollDecoration/scrollDecoration.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/selections/selections.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursor.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursors.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewZones/viewZones.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/blockDecorations/blockDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/whitespace/whitespace.js","../node_modules/monaco-editor/esm/vs/editor/browser/view.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/domLineBreaksComputer.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/dynamicViewOverlay.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lineNumbers/lineNumbers.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/rangeUtil.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLine.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/margin/margin.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewContentWidgets extends ViewPart {\n    constructor(context, viewDomNode) {\n        super(context);\n        this._viewDomNode = viewDomNode;\n        this._widgets = {};\n        this.domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.domNode, 1 /* PartFingerprint.ContentWidgets */);\n        this.domNode.setClassName('contentWidgets');\n        this.domNode.setPosition('absolute');\n        this.domNode.setTop(0);\n        this.overflowingContentWidgetsDomNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.overflowingContentWidgetsDomNode, 2 /* PartFingerprint.OverflowingContentWidgets */);\n        this.overflowingContentWidgetsDomNode.setClassName('overflowingContentWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLineMappingChanged(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesChanged(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesDeleted(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesInserted(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    _updateAnchorsViewPositions() {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].updateAnchorViewPosition();\n        }\n    }\n    addWidget(_widget) {\n        const myWidget = new Widget(this._context, this._viewDomNode, _widget);\n        this._widgets[myWidget.id] = myWidget;\n        if (myWidget.allowEditorOverflow) {\n            this.overflowingContentWidgetsDomNode.appendChild(myWidget.domNode);\n        }\n        else {\n            this.domNode.appendChild(myWidget.domNode);\n        }\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, primaryAnchor, secondaryAnchor, preference, affinity) {\n        const myWidget = this._widgets[widget.getId()];\n        myWidget.setPosition(primaryAnchor, secondaryAnchor, preference, affinity);\n        this.setShouldRender();\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const myWidget = this._widgets[widgetId];\n            delete this._widgets[widgetId];\n            const domNode = myWidget.domNode.domNode;\n            domNode.parentNode.removeChild(domNode);\n            domNode.removeAttribute('monaco-visible-content-widget');\n            this.setShouldRender();\n        }\n    }\n    shouldSuppressMouseDownOnWidget(widgetId) {\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            return this._widgets[widgetId].suppressMouseDown;\n        }\n        return false;\n    }\n    onBeforeRender(viewportData) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onBeforeRender(viewportData);\n        }\n    }\n    prepareRender(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].render(ctx);\n        }\n    }\n}\nclass Widget {\n    constructor(context, viewDomNode, actual) {\n        this._primaryAnchor = new PositionPair(null, null);\n        this._secondaryAnchor = new PositionPair(null, null);\n        this._context = context;\n        this._viewDomNode = viewDomNode;\n        this._actual = actual;\n        this.domNode = createFastDomNode(this._actual.getDomNode());\n        this.id = this._actual.getId();\n        this.allowEditorOverflow = this._actual.allowEditorOverflow || false;\n        this.suppressMouseDown = this._actual.suppressMouseDown || false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._fixedOverflowWidgets = options.get(39 /* EditorOption.fixedOverflowWidgets */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._affinity = null;\n        this._preference = [];\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n        this._maxWidth = this._getMaxWidth();\n        this._isVisible = false;\n        this._renderData = null;\n        this.domNode.setPosition((this._fixedOverflowWidgets && this.allowEditorOverflow) ? 'fixed' : 'absolute');\n        this.domNode.setDisplay('none');\n        this.domNode.setVisibility('hidden');\n        this.domNode.setAttribute('widgetId', this.id);\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        if (e.hasChanged(138 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n            this._contentLeft = layoutInfo.contentLeft;\n            this._contentWidth = layoutInfo.contentWidth;\n            this._maxWidth = this._getMaxWidth();\n        }\n    }\n    updateAnchorViewPosition() {\n        this._setPosition(this._affinity, this._primaryAnchor.modelPosition, this._secondaryAnchor.modelPosition);\n    }\n    _setPosition(affinity, primaryAnchor, secondaryAnchor) {\n        this._affinity = affinity;\n        this._primaryAnchor = getValidPositionPair(primaryAnchor, this._context.viewModel, this._affinity);\n        this._secondaryAnchor = getValidPositionPair(secondaryAnchor, this._context.viewModel, this._affinity);\n        function getValidPositionPair(position, viewModel, affinity) {\n            if (!position) {\n                return new PositionPair(null, null);\n            }\n            // Do not trust that widgets give a valid position\n            const validModelPosition = viewModel.model.validatePosition(position);\n            if (viewModel.coordinatesConverter.modelPositionIsVisible(validModelPosition)) {\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(validModelPosition, affinity !== null && affinity !== void 0 ? affinity : undefined);\n                return new PositionPair(position, viewPosition);\n            }\n            return new PositionPair(position, null);\n        }\n    }\n    _getMaxWidth() {\n        return (this.allowEditorOverflow\n            ? window.innerWidth || document.documentElement.offsetWidth || document.body.offsetWidth\n            : this._contentWidth);\n    }\n    setPosition(primaryAnchor, secondaryAnchor, preference, affinity) {\n        this._setPosition(affinity, primaryAnchor, secondaryAnchor);\n        this._preference = preference;\n        if (this._primaryAnchor.viewPosition && this._preference && this._preference.length > 0) {\n            // this content widget would like to be visible if possible\n            // we change it from `display:none` to `display:block` even if it\n            // might be outside the viewport such that we can measure its size\n            // in `prepareRender`\n            this.domNode.setDisplay('block');\n        }\n        else {\n            this.domNode.setDisplay('none');\n        }\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n    }\n    _layoutBoxInViewport(anchor, width, height, ctx) {\n        // Our visible box is split horizontally by the current line => 2 boxes\n        // a) the box above the line\n        const aboveLineTop = anchor.top;\n        const heightAvailableAboveLine = aboveLineTop;\n        // b) the box under the line\n        const underLineTop = anchor.top + anchor.height;\n        const heightAvailableUnderLine = ctx.viewportHeight - underLineTop;\n        const aboveTop = aboveLineTop - height;\n        const fitsAbove = (heightAvailableAboveLine >= height);\n        const belowTop = underLineTop;\n        const fitsBelow = (heightAvailableUnderLine >= height);\n        // And its left\n        let left = anchor.left;\n        if (left + width > ctx.scrollLeft + ctx.viewportWidth) {\n            left = ctx.scrollLeft + ctx.viewportWidth - width;\n        }\n        if (left < ctx.scrollLeft) {\n            left = ctx.scrollLeft;\n        }\n        return { fitsAbove, aboveTop, fitsBelow, belowTop, left };\n    }\n    _layoutHorizontalSegmentInPage(windowSize, domNodePosition, left, width) {\n        // Leave some clearance to the left/right\n        const LEFT_PADDING = 15;\n        const RIGHT_PADDING = 15;\n        // Initially, the limits are defined as the dom node limits\n        const MIN_LIMIT = Math.max(LEFT_PADDING, domNodePosition.left - width);\n        const MAX_LIMIT = Math.min(domNodePosition.left + domNodePosition.width + width, windowSize.width - RIGHT_PADDING);\n        let absoluteLeft = domNodePosition.left + left - window.scrollX;\n        if (absoluteLeft + width > MAX_LIMIT) {\n            const delta = absoluteLeft - (MAX_LIMIT - width);\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        if (absoluteLeft < MIN_LIMIT) {\n            const delta = absoluteLeft - MIN_LIMIT;\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        return [left, absoluteLeft];\n    }\n    _layoutBoxInPage(anchor, width, height, ctx) {\n        const aboveTop = anchor.top - height;\n        const belowTop = anchor.top + anchor.height;\n        const domNodePosition = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n        const absoluteAboveTop = domNodePosition.top + aboveTop - window.scrollY;\n        const absoluteBelowTop = domNodePosition.top + belowTop - window.scrollY;\n        const windowSize = dom.getClientArea(document.body);\n        const [left, absoluteAboveLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, anchor.left - ctx.scrollLeft + this._contentLeft, width);\n        // Leave some clearance to the top/bottom\n        const TOP_PADDING = 22;\n        const BOTTOM_PADDING = 22;\n        const fitsAbove = (absoluteAboveTop >= TOP_PADDING);\n        const fitsBelow = (absoluteBelowTop + height <= windowSize.height - BOTTOM_PADDING);\n        if (this._fixedOverflowWidgets) {\n            return {\n                fitsAbove,\n                aboveTop: Math.max(absoluteAboveTop, TOP_PADDING),\n                fitsBelow,\n                belowTop: absoluteBelowTop,\n                left: absoluteAboveLeft\n            };\n        }\n        return { fitsAbove, aboveTop, fitsBelow, belowTop, left };\n    }\n    _prepareRenderWidgetAtExactPositionOverflowing(topLeft) {\n        return new Coordinate(topLeft.top, topLeft.left + this._contentLeft);\n    }\n    /**\n     * Compute the coordinates above and below the primary and secondary anchors.\n     * The content widget *must* touch the primary anchor.\n     * The content widget should touch if possible the secondary anchor.\n     */\n    _getAnchorsCoordinates(ctx) {\n        var _a, _b;\n        const primary = getCoordinates(this._primaryAnchor.viewPosition, this._affinity, this._lineHeight);\n        const secondaryViewPosition = (((_a = this._secondaryAnchor.viewPosition) === null || _a === void 0 ? void 0 : _a.lineNumber) === ((_b = this._primaryAnchor.viewPosition) === null || _b === void 0 ? void 0 : _b.lineNumber) ? this._secondaryAnchor.viewPosition : null);\n        const secondary = getCoordinates(secondaryViewPosition, this._affinity, this._lineHeight);\n        return { primary, secondary };\n        function getCoordinates(position, affinity, lineHeight) {\n            if (!position) {\n                return null;\n            }\n            const horizontalPosition = ctx.visibleRangeForPosition(position);\n            if (!horizontalPosition) {\n                return null;\n            }\n            // Left-align widgets that should appear :before content\n            const left = (position.column === 1 && affinity === 3 /* PositionAffinity.LeftOfInjectedText */ ? 0 : horizontalPosition.left);\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.scrollTop;\n            return new AnchorCoordinate(top, left, lineHeight);\n        }\n    }\n    _reduceAnchorCoordinates(primary, secondary, width) {\n        if (!secondary) {\n            return primary;\n        }\n        const fontInfo = this._context.configuration.options.get(47 /* EditorOption.fontInfo */);\n        let left = secondary.left;\n        if (left < primary.left) {\n            left = Math.max(left, primary.left - width + fontInfo.typicalFullwidthCharacterWidth);\n        }\n        else {\n            left = Math.min(left, primary.left + width - fontInfo.typicalFullwidthCharacterWidth);\n        }\n        return new AnchorCoordinate(primary.top, left, primary.height);\n    }\n    _prepareRenderWidget(ctx) {\n        if (!this._preference || this._preference.length === 0) {\n            return null;\n        }\n        const { primary, secondary } = this._getAnchorsCoordinates(ctx);\n        if (!primary) {\n            return null;\n        }\n        if (this._cachedDomNodeOffsetWidth === -1 || this._cachedDomNodeOffsetHeight === -1) {\n            let preferredDimensions = null;\n            if (typeof this._actual.beforeRender === 'function') {\n                preferredDimensions = safeInvoke(this._actual.beforeRender, this._actual);\n            }\n            if (preferredDimensions) {\n                this._cachedDomNodeOffsetWidth = preferredDimensions.width;\n                this._cachedDomNodeOffsetHeight = preferredDimensions.height;\n            }\n            else {\n                const domNode = this.domNode.domNode;\n                const clientRect = domNode.getBoundingClientRect();\n                this._cachedDomNodeOffsetWidth = Math.round(clientRect.width);\n                this._cachedDomNodeOffsetHeight = Math.round(clientRect.height);\n            }\n        }\n        const anchor = this._reduceAnchorCoordinates(primary, secondary, this._cachedDomNodeOffsetWidth);\n        let placement;\n        if (this.allowEditorOverflow) {\n            placement = this._layoutBoxInPage(anchor, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        else {\n            placement = this._layoutBoxInViewport(anchor, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        // Do two passes, first for perfect fit, second picks first option\n        for (let pass = 1; pass <= 2; pass++) {\n            for (const pref of this._preference) {\n                // placement\n                if (pref === 1 /* ContentWidgetPositionPreference.ABOVE */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsAbove) {\n                        return { coordinate: new Coordinate(placement.aboveTop, placement.left), position: 1 /* ContentWidgetPositionPreference.ABOVE */ };\n                    }\n                }\n                else if (pref === 2 /* ContentWidgetPositionPreference.BELOW */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsBelow) {\n                        return { coordinate: new Coordinate(placement.belowTop, placement.left), position: 2 /* ContentWidgetPositionPreference.BELOW */ };\n                    }\n                }\n                else {\n                    if (this.allowEditorOverflow) {\n                        return { coordinate: this._prepareRenderWidgetAtExactPositionOverflowing(new Coordinate(anchor.top, anchor.left)), position: 0 /* ContentWidgetPositionPreference.EXACT */ };\n                    }\n                    else {\n                        return { coordinate: new Coordinate(anchor.top, anchor.left), position: 0 /* ContentWidgetPositionPreference.EXACT */ };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * On this first pass, we ensure that the content widget (if it is in the viewport) has the max width set correctly.\n     */\n    onBeforeRender(viewportData) {\n        if (!this._primaryAnchor.viewPosition || !this._preference) {\n            return;\n        }\n        if (this._primaryAnchor.viewPosition.lineNumber < viewportData.startLineNumber || this._primaryAnchor.viewPosition.lineNumber > viewportData.endLineNumber) {\n            // Outside of viewport\n            return;\n        }\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRenderWidget(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            // This widget should be invisible\n            if (this._isVisible) {\n                this.domNode.removeAttribute('monaco-visible-content-widget');\n                this._isVisible = false;\n                this.domNode.setVisibility('hidden');\n            }\n            if (typeof this._actual.afterRender === 'function') {\n                safeInvoke(this._actual.afterRender, this._actual, null);\n            }\n            return;\n        }\n        // This widget should be visible\n        if (this.allowEditorOverflow) {\n            this.domNode.setTop(this._renderData.coordinate.top);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        else {\n            this.domNode.setTop(this._renderData.coordinate.top + ctx.scrollTop - ctx.bigNumbersDelta);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        if (!this._isVisible) {\n            this.domNode.setVisibility('inherit');\n            this.domNode.setAttribute('monaco-visible-content-widget', 'true');\n            this._isVisible = true;\n        }\n        if (typeof this._actual.afterRender === 'function') {\n            safeInvoke(this._actual.afterRender, this._actual, this._renderData.position);\n        }\n    }\n}\nclass PositionPair {\n    constructor(modelPosition, viewPosition) {\n        this.modelPosition = modelPosition;\n        this.viewPosition = viewPosition;\n    }\n}\nclass Coordinate {\n    constructor(top, left) {\n        this.top = top;\n        this.left = left;\n        this._coordinateBrand = undefined;\n    }\n}\nclass AnchorCoordinate {\n    constructor(top, left, height) {\n        this.top = top;\n        this.left = left;\n        this.height = height;\n        this._anchorCoordinateBrand = undefined;\n    }\n}\nfunction safeInvoke(fn, thisArg, ...args) {\n    try {\n        return fn.call(thisArg, ...args);\n    }\n    catch (_a) {\n        // ignore\n        return null;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nexport class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._renderLineHighlight = options.get(90 /* EditorOption.renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(91 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._selectionIsEmpty = true;\n        this._focused = false;\n        this._cursorLineNumbers = [1];\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderData = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    _readFromSelections() {\n        let hasChanged = false;\n        const cursorsLineNumbers = this._selections.map(s => s.positionLineNumber);\n        cursorsLineNumbers.sort((a, b) => a - b);\n        if (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n            this._cursorLineNumbers = cursorsLineNumbers;\n            hasChanged = true;\n        }\n        const selectionIsEmpty = this._selections.every(s => s.isEmpty());\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            hasChanged = true;\n        }\n        return hasChanged;\n    }\n    // --- begin event handlers\n    onThemeChanged(e) {\n        return this._readFromSelections();\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._renderLineHighlight = options.get(90 /* EditorOption.renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(91 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return this._readFromSelections();\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollWidthChanged || e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        if (!this._renderLineHighlightOnlyWhenFocus) {\n            return false;\n        }\n        this._focused = e.isFocused;\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (!this._shouldRenderThis()) {\n            this._renderData = null;\n            return;\n        }\n        const renderedLine = this._renderOne(ctx);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const len = this._cursorLineNumbers.length;\n        let index = 0;\n        const renderData = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            while (index < len && this._cursorLineNumbers[index] < lineNumber) {\n                index++;\n            }\n            if (index < len && this._cursorLineNumbers[index] === lineNumber) {\n                renderData[lineIndex] = renderedLine;\n            }\n            else {\n                renderData[lineIndex] = '';\n            }\n        }\n        this._renderData = renderData;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderData) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex >= this._renderData.length) {\n            return '';\n        }\n        return this._renderData[lineIndex];\n    }\n    _shouldRenderInMargin() {\n        return ((this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n    _shouldRenderInContent() {\n        return ((this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n            && this._selectionIsEmpty\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n}\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx) {\n        const className = 'current-line' + (this._shouldRenderOther() ? ' current-line-both' : '');\n        return `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return this._shouldRenderInContent();\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInMargin();\n    }\n}\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx) {\n        const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '');\n        return `<div class=\"${className}\" style=\"width:${this._contentLeft}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return true;\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInContent();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const lineHighlight = theme.getColor(editorLineHighlight);\n    if (lineHighlight) {\n        collector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n        collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n    }\n    if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n        const lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n        if (lineHighlightBorder) {\n            collector.addRule(`.monaco-editor .view-overlays .current-line { border: 2px solid ${lineHighlightBorder}; }`);\n            collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border: 2px solid ${lineHighlightBorder}; }`);\n            if (isHighContrast(theme.type)) {\n                collector.addRule(`.monaco-editor .view-overlays .current-line { border-width: 1px; }`);\n                collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border-width: 1px; }`);\n            }\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Range } from '../../../common/core/range.js';\nimport { HorizontalRange } from '../../view/renderingContext.js';\nexport class DecorationsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(47 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(47 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        const _decorations = ctx.getDecorationsInViewport();\n        // Keep only decorations with `className`\n        let decorations = [];\n        let decorationsLen = 0;\n        for (let i = 0, len = _decorations.length; i < len; i++) {\n            const d = _decorations[i];\n            if (d.options.className) {\n                decorations[decorationsLen++] = d;\n            }\n        }\n        // Sort decorations for consistent render output\n        decorations = decorations.sort((a, b) => {\n            if (a.options.zIndex < b.options.zIndex) {\n                return -1;\n            }\n            if (a.options.zIndex > b.options.zIndex) {\n                return 1;\n            }\n            const aClassName = a.options.className;\n            const bClassName = b.options.className;\n            if (aClassName < bClassName) {\n                return -1;\n            }\n            if (aClassName > bClassName) {\n                return 1;\n            }\n            return Range.compareRangesUsingStarts(a.range, b.range);\n        });\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = '';\n        }\n        // Render first whole line decorations and then regular decorations\n        this._renderWholeLineDecorations(ctx, decorations, output);\n        this._renderNormalDecorations(ctx, decorations, output);\n        this._renderResult = output;\n    }\n    _renderWholeLineDecorations(ctx, decorations, output) {\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (!d.options.isWholeLine) {\n                continue;\n            }\n            const decorationOutput = ('<div class=\"cdr '\n                + d.options.className\n                + '\" style=\"left:0;width:100%;height:'\n                + lineHeight\n                + 'px;\"></div>');\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            for (let j = startLineNumber; j <= endLineNumber; j++) {\n                const lineIndex = j - visibleStartLineNumber;\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    _renderNormalDecorations(ctx, decorations, output) {\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        let prevClassName = null;\n        let prevShowIfCollapsed = false;\n        let prevRange = null;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (d.options.isWholeLine) {\n                continue;\n            }\n            const className = d.options.className;\n            const showIfCollapsed = Boolean(d.options.showIfCollapsed);\n            let range = d.range;\n            if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n                range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.viewModel.getLineMaxColumn(range.endLineNumber - 1));\n            }\n            if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n                // merge into previous decoration\n                prevRange = Range.plusRange(prevRange, range);\n                continue;\n            }\n            // flush previous decoration\n            if (prevClassName !== null) {\n                this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n            }\n            prevClassName = className;\n            prevShowIfCollapsed = showIfCollapsed;\n            prevRange = range;\n        }\n        if (prevClassName !== null) {\n            this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n        }\n    }\n    _renderNormalDecoration(ctx, range, className, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\n        const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/ className === 'findMatch');\n        if (!linesVisibleRanges) {\n            return;\n        }\n        for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n            const lineVisibleRanges = linesVisibleRanges[j];\n            if (lineVisibleRanges.outsideRenderedLine) {\n                continue;\n            }\n            const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n            if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n                const singleVisibleRange = lineVisibleRanges.ranges[0];\n                if (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n                    // collapsed/very small range case => make the decoration visible by expanding its width\n                    // expand its size on both sides (both to the left and to the right, keeping it centered)\n                    const center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n                    const left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n                    lineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n                }\n            }\n            for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n                const visibleRange = lineVisibleRanges.ranges[k];\n                const decorationOutput = ('<div class=\"cdr '\n                    + className\n                    + '\" style=\"left:'\n                    + String(visibleRange.left)\n                    + 'px;width:'\n                    + String(visibleRange.width)\n                    + 'px;height:'\n                    + lineHeight\n                    + 'px;\"></div>');\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { SmoothScrollableElement } from '../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { getThemeTypeSelector } from '../../../../platform/theme/common/themeService.js';\nexport class EditorScrollbar extends ViewPart {\n    constructor(context, linesContent, viewDomNode, overflowGuardDomNode) {\n        super(context);\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(97 /* EditorOption.scrollbar */);\n        const mouseWheelScrollSensitivity = options.get(71 /* EditorOption.mouseWheelScrollSensitivity */);\n        const fastScrollSensitivity = options.get(37 /* EditorOption.fastScrollSensitivity */);\n        const scrollPredominantAxis = options.get(100 /* EditorOption.scrollPredominantAxis */);\n        const scrollbarOptions = {\n            listenOnDomNode: viewDomNode.domNode,\n            className: 'editor-scrollable' + ' ' + getThemeTypeSelector(context.theme.type),\n            useShadows: false,\n            lazyRender: true,\n            vertical: scrollbar.vertical,\n            horizontal: scrollbar.horizontal,\n            verticalHasArrows: scrollbar.verticalHasArrows,\n            horizontalHasArrows: scrollbar.horizontalHasArrows,\n            verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n            verticalSliderSize: scrollbar.verticalSliderSize,\n            horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n            horizontalSliderSize: scrollbar.horizontalSliderSize,\n            handleMouseWheel: scrollbar.handleMouseWheel,\n            alwaysConsumeMouseWheel: scrollbar.alwaysConsumeMouseWheel,\n            arrowSize: scrollbar.arrowSize,\n            mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n            fastScrollSensitivity: fastScrollSensitivity,\n            scrollPredominantAxis: scrollPredominantAxis,\n            scrollByPage: scrollbar.scrollByPage,\n        };\n        this.scrollbar = this._register(new SmoothScrollableElement(linesContent.domNode, scrollbarOptions, this._context.viewLayout.getScrollable()));\n        PartFingerprints.write(this.scrollbar.getDomNode(), 5 /* PartFingerprint.ScrollableElement */);\n        this.scrollbarDomNode = createFastDomNode(this.scrollbar.getDomNode());\n        this.scrollbarDomNode.setPosition('absolute');\n        this._setLayout();\n        // When having a zone widget that calls .focus() on one of its dom elements,\n        // the browser will try desperately to reveal that dom node, unexpectedly\n        // changing the .scrollTop of this.linesContent\n        const onBrowserDesperateReveal = (domNode, lookAtScrollTop, lookAtScrollLeft) => {\n            const newScrollPosition = {};\n            if (lookAtScrollTop) {\n                const deltaTop = domNode.scrollTop;\n                if (deltaTop) {\n                    newScrollPosition.scrollTop = this._context.viewLayout.getCurrentScrollTop() + deltaTop;\n                    domNode.scrollTop = 0;\n                }\n            }\n            if (lookAtScrollLeft) {\n                const deltaLeft = domNode.scrollLeft;\n                if (deltaLeft) {\n                    newScrollPosition.scrollLeft = this._context.viewLayout.getCurrentScrollLeft() + deltaLeft;\n                    domNode.scrollLeft = 0;\n                }\n            }\n            this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, 1 /* ScrollType.Immediate */);\n        };\n        // I've seen this happen both on the view dom node & on the lines content dom node.\n        this._register(dom.addDisposableListener(viewDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(viewDomNode.domNode, true, true)));\n        this._register(dom.addDisposableListener(linesContent.domNode, 'scroll', (e) => onBrowserDesperateReveal(linesContent.domNode, true, false)));\n        this._register(dom.addDisposableListener(overflowGuardDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(overflowGuardDomNode.domNode, true, false)));\n        this._register(dom.addDisposableListener(this.scrollbarDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(this.scrollbarDomNode.domNode, true, false)));\n    }\n    dispose() {\n        super.dispose();\n    }\n    _setLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this.scrollbarDomNode.setLeft(layoutInfo.contentLeft);\n        const minimap = options.get(69 /* EditorOption.minimap */);\n        const side = minimap.side;\n        if (side === 'right') {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth + layoutInfo.minimap.minimapWidth);\n        }\n        else {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth);\n        }\n        this.scrollbarDomNode.setHeight(layoutInfo.height);\n    }\n    getOverviewRulerLayoutInfo() {\n        return this.scrollbar.getOverviewRulerLayoutInfo();\n    }\n    getDomNode() {\n        return this.scrollbarDomNode;\n    }\n    delegateVerticalScrollbarPointerDown(browserEvent) {\n        this.scrollbar.delegateVerticalScrollbarPointerDown(browserEvent);\n    }\n    delegateScrollFromMouseWheelEvent(browserEvent) {\n        this.scrollbar.delegateScrollFromMouseWheelEvent(browserEvent);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(97 /* EditorOption.scrollbar */)\n            || e.hasChanged(71 /* EditorOption.mouseWheelScrollSensitivity */)\n            || e.hasChanged(37 /* EditorOption.fastScrollSensitivity */)) {\n            const options = this._context.configuration.options;\n            const scrollbar = options.get(97 /* EditorOption.scrollbar */);\n            const mouseWheelScrollSensitivity = options.get(71 /* EditorOption.mouseWheelScrollSensitivity */);\n            const fastScrollSensitivity = options.get(37 /* EditorOption.fastScrollSensitivity */);\n            const scrollPredominantAxis = options.get(100 /* EditorOption.scrollPredominantAxis */);\n            const newOpts = {\n                vertical: scrollbar.vertical,\n                horizontal: scrollbar.horizontal,\n                verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n                horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n                scrollByPage: scrollbar.scrollByPage,\n                handleMouseWheel: scrollbar.handleMouseWheel,\n                mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n                fastScrollSensitivity: fastScrollSensitivity,\n                scrollPredominantAxis: scrollPredominantAxis\n            };\n            this.scrollbar.updateOptions(newOpts);\n        }\n        if (e.hasChanged(138 /* EditorOption.layoutInfo */)) {\n            this._setLayout();\n        }\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        this.scrollbar.updateClassName('editor-scrollable' + ' ' + getThemeTypeSelector(this._context.theme.type));\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to do\n    }\n    render(ctx) {\n        this.scrollbar.renderNow();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nexport class DecorationToRender {\n    constructor(startLineNumber, endLineNumber, className) {\n        this._decorationToRenderBrand = undefined;\n        this.startLineNumber = +startLineNumber;\n        this.endLineNumber = +endLineNumber;\n        this.className = String(className);\n    }\n}\nexport class DedupOverlay extends DynamicViewOverlay {\n    _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = [];\n        }\n        if (decorations.length === 0) {\n            return output;\n        }\n        decorations.sort((a, b) => {\n            if (a.className === b.className) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return (a.className < b.className ? -1 : 1);\n        });\n        let prevClassName = null;\n        let prevEndLineIndex = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const className = d.className;\n            let startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n            const endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n            if (prevClassName === className) {\n                startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n                prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n            }\n            else {\n                prevClassName = className;\n                prevEndLineIndex = endLineIndex;\n            }\n            for (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n                output[i].push(prevClassName);\n            }\n        }\n        return output;\n    }\n}\nexport class GlyphMarginOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(54 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(54 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const glyphMarginClassName = d.options.glyphMarginClassName;\n            if (glyphMarginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, glyphMarginClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        if (!this._glyphMargin) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const lineHeight = this._lineHeight.toString();\n        const left = this._glyphMarginLeft.toString();\n        const width = this._glyphMarginWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px' + ';height:' + lineHeight + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            if (classNames.length === 0) {\n                output[lineIndex] = '';\n            }\n            else {\n                output[lineIndex] = ('<div class=\"cgmr codicon '\n                    + classNames.join(' ')\n                    + common);\n            }\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './indentGuides.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorBracketHighlightingForeground1, editorBracketHighlightingForeground2, editorBracketHighlightingForeground3, editorBracketHighlightingForeground4, editorBracketHighlightingForeground5, editorBracketHighlightingForeground6, editorBracketPairGuideActiveBackground1, editorBracketPairGuideActiveBackground2, editorBracketPairGuideActiveBackground3, editorBracketPairGuideActiveBackground4, editorBracketPairGuideActiveBackground5, editorBracketPairGuideActiveBackground6, editorBracketPairGuideBackground1, editorBracketPairGuideBackground2, editorBracketPairGuideBackground3, editorBracketPairGuideBackground4, editorBracketPairGuideBackground5, editorBracketPairGuideBackground6 } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Position } from '../../../common/core/position.js';\nimport { ArrayQueue } from '../../../../base/common/arrays.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { BracketPairGuidesClassNames } from '../../../common/model/guidesTextModelPart.js';\nimport { IndentGuide, HorizontalGuidesState } from '../../../common/textModelGuides.js';\nexport class IndentGuidesOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._primaryPosition = null;\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(139 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(13 /* EditorOption.guides */);\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(139 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(13 /* EditorOption.guides */);\n        return true;\n    }\n    onCursorStateChanged(e) {\n        var _a;\n        const selection = e.selections[0];\n        const newPosition = selection.getPosition();\n        if (!((_a = this._primaryPosition) === null || _a === void 0 ? void 0 : _a.equals(newPosition))) {\n            this._primaryPosition = newPosition;\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged; // || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLanguageConfigurationChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        var _a, _b, _c, _d;\n        if (!this._bracketPairGuideOptions.indentation && this._bracketPairGuideOptions.bracketPairs === false) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const scrollWidth = ctx.scrollWidth;\n        const lineHeight = this._lineHeight;\n        const activeCursorPosition = this._primaryPosition;\n        const indents = this.getGuidesByLine(visibleStartLineNumber, Math.min(visibleEndLineNumber + 1, this._context.viewModel.getLineCount()), activeCursorPosition);\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const indent = indents[lineIndex];\n            let result = '';\n            const leftOffset = (_b = (_a = ctx.visibleRangeForPosition(new Position(lineNumber, 1))) === null || _a === void 0 ? void 0 : _a.left) !== null && _b !== void 0 ? _b : 0;\n            for (const guide of indent) {\n                const left = guide.column === -1\n                    ? leftOffset + (guide.visibleColumn - 1) * this._spaceWidth\n                    : ctx.visibleRangeForPosition(new Position(lineNumber, guide.column)).left;\n                if (left > scrollWidth || (this._maxIndentLeft > 0 && left > this._maxIndentLeft)) {\n                    break;\n                }\n                const className = guide.horizontalLine ? (guide.horizontalLine.top ? 'horizontal-top' : 'horizontal-bottom') : 'vertical';\n                const width = guide.horizontalLine\n                    ? ((_d = (_c = ctx.visibleRangeForPosition(new Position(lineNumber, guide.horizontalLine.endColumn))) === null || _c === void 0 ? void 0 : _c.left) !== null && _d !== void 0 ? _d : (left + this._spaceWidth)) - left\n                    : this._spaceWidth;\n                result += `<div class=\"core-guide ${guide.className} ${className}\" style=\"left:${left}px;height:${lineHeight}px;width:${width}px\"></div>`;\n            }\n            output[lineIndex] = result;\n        }\n        this._renderResult = output;\n    }\n    getGuidesByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition) {\n        const bracketGuides = this._bracketPairGuideOptions.bracketPairs !== false\n            ? this._context.viewModel.getBracketGuidesInRangeByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition, {\n                highlightActive: this._bracketPairGuideOptions.highlightActiveBracketPair,\n                horizontalGuides: this._bracketPairGuideOptions.bracketPairsHorizontal === true\n                    ? HorizontalGuidesState.Enabled\n                    : this._bracketPairGuideOptions.bracketPairsHorizontal === 'active'\n                        ? HorizontalGuidesState.EnabledForActive\n                        : HorizontalGuidesState.Disabled,\n                includeInactive: this._bracketPairGuideOptions.bracketPairs === true,\n            })\n            : null;\n        const indentGuides = this._bracketPairGuideOptions.indentation\n            ? this._context.viewModel.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber)\n            : null;\n        let activeIndentStartLineNumber = 0;\n        let activeIndentEndLineNumber = 0;\n        let activeIndentLevel = 0;\n        if (this._bracketPairGuideOptions.highlightActiveIndentation !== false && activeCursorPosition) {\n            const activeIndentInfo = this._context.viewModel.getActiveIndentGuide(activeCursorPosition.lineNumber, visibleStartLineNumber, visibleEndLineNumber);\n            activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\n            activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\n            activeIndentLevel = activeIndentInfo.indent;\n        }\n        const { indentSize } = this._context.viewModel.model.getOptions();\n        const result = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineGuides = new Array();\n            result.push(lineGuides);\n            const bracketGuidesInLine = bracketGuides ? bracketGuides[lineNumber - visibleStartLineNumber] : [];\n            const bracketGuidesInLineQueue = new ArrayQueue(bracketGuidesInLine);\n            const indentGuidesInLine = indentGuides ? indentGuides[lineNumber - visibleStartLineNumber] : 0;\n            for (let indentLvl = 1; indentLvl <= indentGuidesInLine; indentLvl++) {\n                const indentGuide = (indentLvl - 1) * indentSize + 1;\n                const isActive = \n                // Disable active indent guide if there are bracket guides.\n                (this._bracketPairGuideOptions.highlightActiveIndentation === 'always' || bracketGuidesInLine.length === 0) &&\n                    activeIndentStartLineNumber <= lineNumber &&\n                    lineNumber <= activeIndentEndLineNumber &&\n                    indentLvl === activeIndentLevel;\n                lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => g.visibleColumn < indentGuide) || []);\n                const peeked = bracketGuidesInLineQueue.peek();\n                if (!peeked || peeked.visibleColumn !== indentGuide || peeked.horizontalLine) {\n                    lineGuides.push(new IndentGuide(indentGuide, -1, isActive ? 'core-guide-indent-active' : 'core-guide-indent', null, -1, -1));\n                }\n            }\n            lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => true) || []);\n        }\n        return result;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nfunction transparentToUndefined(color) {\n    if (color && color.isTransparent()) {\n        return undefined;\n    }\n    return color;\n}\nregisterThemingParticipant((theme, collector) => {\n    const colors = [\n        { bracketColor: editorBracketHighlightingForeground1, guideColor: editorBracketPairGuideBackground1, guideColorActive: editorBracketPairGuideActiveBackground1 },\n        { bracketColor: editorBracketHighlightingForeground2, guideColor: editorBracketPairGuideBackground2, guideColorActive: editorBracketPairGuideActiveBackground2 },\n        { bracketColor: editorBracketHighlightingForeground3, guideColor: editorBracketPairGuideBackground3, guideColorActive: editorBracketPairGuideActiveBackground3 },\n        { bracketColor: editorBracketHighlightingForeground4, guideColor: editorBracketPairGuideBackground4, guideColorActive: editorBracketPairGuideActiveBackground4 },\n        { bracketColor: editorBracketHighlightingForeground5, guideColor: editorBracketPairGuideBackground5, guideColorActive: editorBracketPairGuideActiveBackground5 },\n        { bracketColor: editorBracketHighlightingForeground6, guideColor: editorBracketPairGuideBackground6, guideColorActive: editorBracketPairGuideActiveBackground6 }\n    ];\n    const colorProvider = new BracketPairGuidesClassNames();\n    const colorValues = colors\n        .map(c => {\n        var _a, _b;\n        const bracketColor = theme.getColor(c.bracketColor);\n        const guideColor = theme.getColor(c.guideColor);\n        const guideColorActive = theme.getColor(c.guideColorActive);\n        const effectiveGuideColor = transparentToUndefined((_a = transparentToUndefined(guideColor)) !== null && _a !== void 0 ? _a : bracketColor === null || bracketColor === void 0 ? void 0 : bracketColor.transparent(0.3));\n        const effectiveGuideColorActive = transparentToUndefined((_b = transparentToUndefined(guideColorActive)) !== null && _b !== void 0 ? _b : bracketColor);\n        if (!effectiveGuideColor || !effectiveGuideColorActive) {\n            return undefined;\n        }\n        return {\n            guideColor: effectiveGuideColor,\n            guideColorActive: effectiveGuideColorActive,\n        };\n    })\n        .filter(isDefined);\n    if (colorValues.length > 0) {\n        for (let level = 0; level < 30; level++) {\n            const colors = colorValues[level % colorValues.length];\n            collector.addRule(`.monaco-editor .${colorProvider.getInlineClassNameOfLevel(level).replace(/ /g, '.')} { --guide-color: ${colors.guideColor}; --guide-color-active: ${colors.guideColorActive}; }`);\n        }\n        collector.addRule(`.monaco-editor .vertical { box-shadow: 1px 0 0 0 var(--guide-color) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top { border-top: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom { border-bottom: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .vertical.${colorProvider.activeClassName} { box-shadow: 1px 0 0 0 var(--guide-color-active) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top.${colorProvider.activeClassName} { border-top: 1px solid var(--guide-color-active); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom.${colorProvider.activeClassName} { border-bottom: 1px solid var(--guide-color-active); }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class DomReadingContext {\n    get didDomLayout() {\n        return this._didDomLayout;\n    }\n    readClientRect() {\n        if (!this._clientRectRead) {\n            this._clientRectRead = true;\n            const rect = this._domNode.getBoundingClientRect();\n            this.markDidDomLayout();\n            this._clientRectDeltaLeft = rect.left;\n            this._clientRectScale = rect.width / this._domNode.offsetWidth;\n        }\n    }\n    get clientRectDeltaLeft() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectDeltaLeft;\n    }\n    get clientRectScale() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectScale;\n    }\n    constructor(_domNode, endNode) {\n        this._domNode = _domNode;\n        this.endNode = endNode;\n        this._didDomLayout = false;\n        this._clientRectDeltaLeft = 0;\n        this._clientRectScale = 1;\n        this._clientRectRead = false;\n    }\n    markDidDomLayout() {\n        this._didDomLayout = true;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './viewLines.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { ViewLine, ViewLineOptions } from './viewLine.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { LineVisibleRanges, HorizontalPosition, HorizontalRange } from '../../view/renderingContext.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { DomReadingContext } from './domReadingContext.js';\nclass LastRenderedData {\n    constructor() {\n        this._currentVisibleRange = new Range(1, 1, 1, 1);\n    }\n    getCurrentVisibleRange() {\n        return this._currentVisibleRange;\n    }\n    setCurrentVisibleRange(currentVisibleRange) {\n        this._currentVisibleRange = currentVisibleRange;\n    }\n}\nclass HorizontalRevealRangeRequest {\n    constructor(minimalReveal, lineNumber, startColumn, endColumn, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.lineNumber = lineNumber;\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'range';\n        this.minLineNumber = lineNumber;\n        this.maxLineNumber = lineNumber;\n    }\n}\nclass HorizontalRevealSelectionsRequest {\n    constructor(minimalReveal, selections, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.selections = selections;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'selections';\n        let minLineNumber = selections[0].startLineNumber;\n        let maxLineNumber = selections[0].endLineNumber;\n        for (let i = 1, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n            maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n        }\n        this.minLineNumber = minLineNumber;\n        this.maxLineNumber = maxLineNumber;\n    }\n}\nclass ViewLines extends ViewPart {\n    constructor(context, linesContent) {\n        super(context);\n        this._linesContent = linesContent;\n        this._textRangeRestingSpot = document.createElement('div');\n        this._visibleLines = new VisibleLinesCollection(this);\n        this.domNode = this._visibleLines.domNode;\n        const conf = this._context.configuration;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(139 /* EditorOption.wrappingInfo */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(94 /* EditorOption.revealHorizontalRightPadding */);\n        this._cursorSurroundingLines = options.get(26 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(27 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(29 /* EditorOption.disableLayerHinting */);\n        this._viewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        PartFingerprints.write(this.domNode, 7 /* PartFingerprint.ViewLines */);\n        this.domNode.setClassName(`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        applyFontInfo(this.domNode, fontInfo);\n        // --- width & height\n        this._maxLineWidth = 0;\n        this._asyncUpdateLineWidths = new RunOnceScheduler(() => {\n            this._updateLineWidthsSlow();\n        }, 200);\n        this._asyncCheckMonospaceFontAssumptions = new RunOnceScheduler(() => {\n            this._checkMonospaceFontAssumptions();\n        }, 2000);\n        this._lastRenderedData = new LastRenderedData();\n        this._horizontalRevealRequest = null;\n        // sticky scroll widget\n        this._stickyScrollEnabled = options.get(109 /* EditorOption.stickyScroll */).enabled;\n        this._maxNumberStickyLines = options.get(109 /* EditorOption.stickyScroll */).maxLineCount;\n    }\n    dispose() {\n        this._asyncUpdateLineWidths.dispose();\n        this._asyncCheckMonospaceFontAssumptions.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    // ---- begin IVisibleLinesHost\n    createVisibleLine() {\n        return new ViewLine(this._viewLineOptions);\n    }\n    // ---- end IVisibleLinesHost\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        if (e.hasChanged(139 /* EditorOption.wrappingInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(139 /* EditorOption.wrappingInfo */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(94 /* EditorOption.revealHorizontalRightPadding */);\n        this._cursorSurroundingLines = options.get(26 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(27 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(29 /* EditorOption.disableLayerHinting */);\n        // sticky scroll\n        this._stickyScrollEnabled = options.get(109 /* EditorOption.stickyScroll */).enabled;\n        this._maxNumberStickyLines = options.get(109 /* EditorOption.stickyScroll */).maxLineCount;\n        applyFontInfo(this.domNode, fontInfo);\n        this._onOptionsMaybeChanged();\n        if (e.hasChanged(138 /* EditorOption.layoutInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        return true;\n    }\n    _onOptionsMaybeChanged() {\n        const conf = this._context.configuration;\n        const newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        if (!this._viewLineOptions.equals(newViewLineOptions)) {\n            this._viewLineOptions = newViewLineOptions;\n            const startLineNumber = this._visibleLines.getStartLineNumber();\n            const endLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n                const line = this._visibleLines.getVisibleLine(lineNumber);\n                line.onOptionsChanged(this._viewLineOptions);\n            }\n            return true;\n        }\n        return false;\n    }\n    onCursorStateChanged(e) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let r = false;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            r = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\n        }\n        return r;\n    }\n    onDecorationsChanged(e) {\n        if (true /*e.inlineDecorationsChanged*/) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\n            }\n        }\n        return true;\n    }\n    onFlushed(e) {\n        const shouldRender = this._visibleLines.onFlushed(e);\n        this._maxLineWidth = 0;\n        return shouldRender;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onRevealRangeRequest(e) {\n        // Using the future viewport here in order to handle multiple\n        // incoming reveal range requests that might all desire to be animated\n        const desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.minimalReveal, e.range, e.selections, e.verticalType);\n        if (desiredScrollTop === -1) {\n            // marker to abort the reveal range request\n            return false;\n        }\n        // validate the new desired scroll top\n        let newScrollPosition = this._context.viewLayout.validateScrollPosition({ scrollTop: desiredScrollTop });\n        if (e.revealHorizontal) {\n            if (e.range && e.range.startLineNumber !== e.range.endLineNumber) {\n                // Two or more lines? => scroll to base (That's how you see most of the two lines)\n                newScrollPosition = {\n                    scrollTop: newScrollPosition.scrollTop,\n                    scrollLeft: 0\n                };\n            }\n            else if (e.range) {\n                // We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n                this._horizontalRevealRequest = new HorizontalRevealRangeRequest(e.minimalReveal, e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n            else if (e.selections && e.selections.length > 0) {\n                this._horizontalRevealRequest = new HorizontalRevealSelectionsRequest(e.minimalReveal, e.selections, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n        }\n        else {\n            this._horizontalRevealRequest = null;\n        }\n        const scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\n        const scrollType = (scrollTopDelta <= this._lineHeight ? 1 /* ScrollType.Immediate */ : e.scrollType);\n        this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, scrollType);\n        return true;\n    }\n    onScrollChanged(e) {\n        if (this._horizontalRevealRequest && e.scrollLeftChanged) {\n            // cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n            this._horizontalRevealRequest = null;\n        }\n        if (this._horizontalRevealRequest && e.scrollTopChanged) {\n            const min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            const max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            if (e.scrollTop < min || e.scrollTop > max) {\n                // cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n                this._horizontalRevealRequest = null;\n            }\n        }\n        this.domNode.setWidth(e.scrollWidth);\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        return this._visibleLines.onZonesChanged(e);\n    }\n    onThemeChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    // ---- end view event handlers\n    // ----------- HELPERS FOR OTHERS\n    getPositionFromDOMInfo(spanNode, offset) {\n        const viewLineDomNode = this._getViewLineDomNode(spanNode);\n        if (viewLineDomNode === null) {\n            // Couldn't find view line node\n            return null;\n        }\n        const lineNumber = this._getLineNumberFor(viewLineDomNode);\n        if (lineNumber === -1) {\n            // Couldn't find view line node\n            return null;\n        }\n        if (lineNumber < 1 || lineNumber > this._context.viewModel.getLineCount()) {\n            // lineNumber is outside range\n            return null;\n        }\n        if (this._context.viewModel.getLineMaxColumn(lineNumber) === 1) {\n            // Line is empty\n            return new Position(lineNumber, 1);\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return null;\n        }\n        let column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(lineNumber, spanNode, offset);\n        const minColumn = this._context.viewModel.getLineMinColumn(lineNumber);\n        if (column < minColumn) {\n            column = minColumn;\n        }\n        return new Position(lineNumber, column);\n    }\n    _getViewLineDomNode(node) {\n        while (node && node.nodeType === 1) {\n            if (node.className === ViewLine.CLASS_NAME) {\n                return node;\n            }\n            node = node.parentElement;\n        }\n        return null;\n    }\n    /**\n     * @returns the line number of this view line dom node.\n     */\n    _getLineNumberFor(domNode) {\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const line = this._visibleLines.getVisibleLine(lineNumber);\n            if (domNode === line.getDomNode()) {\n                return lineNumber;\n            }\n        }\n        return -1;\n    }\n    getLineWidth(lineNumber) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return -1;\n        }\n        const context = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        const result = this._visibleLines.getVisibleLine(lineNumber).getWidth(context);\n        this._updateLineWidthsSlowIfDomDidLayout(context);\n        return result;\n    }\n    linesVisibleRangesForRange(_range, includeNewLines) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        const originalEndLineNumber = _range.endLineNumber;\n        const range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\n        if (!range) {\n            return null;\n        }\n        const visibleRanges = [];\n        let visibleRangesLen = 0;\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        let nextLineModelLineNumber = 0;\n        if (includeNewLines) {\n            nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n            if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n                continue;\n            }\n            const startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\n            const endColumn = lineNumber === range.endLineNumber ? range.endColumn : this._context.viewModel.getLineMaxColumn(lineNumber);\n            const visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n            if (!visibleRangesForLine) {\n                continue;\n            }\n            if (includeNewLines && lineNumber < originalEndLineNumber) {\n                const currentLineModelLineNumber = nextLineModelLineNumber;\n                nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\n                if (currentLineModelLineNumber !== nextLineModelLineNumber) {\n                    visibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\n                }\n            }\n            visibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, HorizontalRange.from(visibleRangesForLine.ranges));\n        }\n        this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n        if (visibleRangesLen === 0) {\n            return null;\n        }\n        return visibleRanges;\n    }\n    _visibleRangesForLineRange(lineNumber, startColumn, endColumn) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        if (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\n            return null;\n        }\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        const result = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n        this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n        return result;\n    }\n    visibleRangeForPosition(position) {\n        const visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\n        if (!visibleRanges) {\n            return null;\n        }\n        return new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\n    }\n    /**\n     * Updates the max line width if it is fast to compute.\n     * Returns true if all lines were taken into account.\n     * Returns false if some lines need to be reevaluated (in a slow fashion).\n     */\n    _updateLineWidthsFast() {\n        return this._updateLineWidths(true);\n    }\n    _updateLineWidthsSlow() {\n        this._updateLineWidths(false);\n    }\n    /**\n     * Update the line widths using DOM layout information after someone else\n     * has caused a synchronous layout.\n     */\n    _updateLineWidthsSlowIfDomDidLayout(domReadingContext) {\n        if (!domReadingContext.didDomLayout) {\n            // only proceed if we just did a layout\n            return;\n        }\n        if (this._asyncUpdateLineWidths.isScheduled()) {\n            // reading widths is not scheduled => widths are up-to-date\n            return;\n        }\n        this._asyncUpdateLineWidths.cancel();\n        this._updateLineWidthsSlow();\n    }\n    _updateLineWidths(fast) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let localMaxLineWidth = 1;\n        let allWidthsComputed = true;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (fast && !visibleLine.getWidthIsFast()) {\n                // Cannot compute width in a fast way for this line\n                allWidthsComputed = false;\n                continue;\n            }\n            localMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth(null));\n        }\n        if (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.viewModel.getLineCount()) {\n            // we know the max line width for all the lines\n            this._maxLineWidth = 0;\n        }\n        this._ensureMaxLineWidth(localMaxLineWidth);\n        return allWidthsComputed;\n    }\n    _checkMonospaceFontAssumptions() {\n        // Problems with monospace assumptions are more apparent for longer lines,\n        // as small rounding errors start to sum up, so we will select the longest\n        // line for a closer inspection\n        let longestLineNumber = -1;\n        let longestWidth = -1;\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (visibleLine.needsMonospaceFontCheck()) {\n                const lineWidth = visibleLine.getWidth(null);\n                if (lineWidth > longestWidth) {\n                    longestWidth = lineWidth;\n                    longestLineNumber = lineNumber;\n                }\n            }\n        }\n        if (longestLineNumber === -1) {\n            return;\n        }\n        if (!this._visibleLines.getVisibleLine(longestLineNumber).monospaceAssumptionsAreValid()) {\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                visibleLine.onMonospaceAssumptionsInvalidated();\n            }\n        }\n    }\n    prepareRender() {\n        throw new Error('Not supported');\n    }\n    render() {\n        throw new Error('Not supported');\n    }\n    renderText(viewportData) {\n        // (1) render lines - ensures lines are in the DOM\n        this._visibleLines.renderLines(viewportData);\n        this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\n        this.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n        this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000));\n        // (2) compute horizontal scroll position:\n        //  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n        //  - it might change `scrollWidth` and `scrollLeft`\n        if (this._horizontalRevealRequest) {\n            const horizontalRevealRequest = this._horizontalRevealRequest;\n            // Check that we have the line that contains the horizontal range in the viewport\n            if (viewportData.startLineNumber <= horizontalRevealRequest.minLineNumber && horizontalRevealRequest.maxLineNumber <= viewportData.endLineNumber) {\n                this._horizontalRevealRequest = null;\n                // allow `visibleRangesForRange2` to work\n                this.onDidRender();\n                // compute new scroll position\n                const newScrollLeft = this._computeScrollLeftToReveal(horizontalRevealRequest);\n                if (newScrollLeft) {\n                    if (!this._isViewportWrapping) {\n                        // ensure `scrollWidth` is large enough\n                        this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\n                    }\n                    // set `scrollLeft`\n                    this._context.viewModel.viewLayout.setScrollPosition({\n                        scrollLeft: newScrollLeft.scrollLeft\n                    }, horizontalRevealRequest.scrollType);\n                }\n            }\n        }\n        // Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n        if (!this._updateLineWidthsFast()) {\n            // Computing the width of some lines would be slow => delay it\n            this._asyncUpdateLineWidths.schedule();\n        }\n        else {\n            this._asyncUpdateLineWidths.cancel();\n        }\n        if (platform.isLinux && !this._asyncCheckMonospaceFontAssumptions.isScheduled()) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                if (visibleLine.needsMonospaceFontCheck()) {\n                    this._asyncCheckMonospaceFontAssumptions.schedule();\n                    break;\n                }\n            }\n        }\n        // (3) handle scrolling\n        this._linesContent.setLayerHinting(this._canUseLayerHinting);\n        this._linesContent.setContain('strict');\n        const adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\n        this._linesContent.setTop(-adjustedScrollTop);\n        this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\n    }\n    // --- width\n    _ensureMaxLineWidth(lineWidth) {\n        const iLineWidth = Math.ceil(lineWidth);\n        if (this._maxLineWidth < iLineWidth) {\n            this._maxLineWidth = iLineWidth;\n            this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        }\n    }\n    _computeScrollTopToRevealRange(viewport, source, minimalReveal, range, selections, verticalType) {\n        const viewportStartY = viewport.top;\n        const viewportHeight = viewport.height;\n        const viewportEndY = viewportStartY + viewportHeight;\n        let boxIsSingleRange;\n        let boxStartY;\n        let boxEndY;\n        if (selections && selections.length > 0) {\n            let minLineNumber = selections[0].startLineNumber;\n            let maxLineNumber = selections[0].endLineNumber;\n            for (let i = 1, len = selections.length; i < len; i++) {\n                const selection = selections[i];\n                minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n                maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n            }\n            boxIsSingleRange = false;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(minLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(maxLineNumber) + this._lineHeight;\n        }\n        else if (range) {\n            boxIsSingleRange = true;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\n        }\n        else {\n            return -1;\n        }\n        const shouldIgnoreScrollOff = (source === 'mouse' || minimalReveal) && this._cursorSurroundingLinesStyle === 'default';\n        let paddingTop = 0;\n        let paddingBottom = 0;\n        if (!shouldIgnoreScrollOff) {\n            const context = Math.min((viewportHeight / this._lineHeight) / 2, this._cursorSurroundingLines);\n            if (this._stickyScrollEnabled) {\n                paddingTop = Math.max(context, this._maxNumberStickyLines) * this._lineHeight;\n            }\n            else {\n                paddingTop = context * this._lineHeight;\n            }\n            paddingBottom = Math.max(0, (context - 1)) * this._lineHeight;\n        }\n        else {\n            if (!minimalReveal) {\n                // Reveal one more line above (this case is hit when dragging)\n                paddingTop = this._lineHeight;\n            }\n        }\n        if (!minimalReveal) {\n            if (verticalType === 0 /* viewEvents.VerticalRevealType.Simple */ || verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */) {\n                // Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n                paddingBottom += this._lineHeight;\n            }\n        }\n        boxStartY -= paddingTop;\n        boxEndY += paddingBottom;\n        let newScrollTop;\n        if (boxEndY - boxStartY > viewportHeight) {\n            // the box is larger than the viewport ... scroll to its top\n            if (!boxIsSingleRange) {\n                // do not reveal multiple cursors if there are more than fit the viewport\n                return -1;\n            }\n            newScrollTop = boxStartY;\n        }\n        else if (verticalType === 5 /* viewEvents.VerticalRevealType.NearTop */ || verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */) {\n            if (verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // We want a gap that is 20% of the viewport, but with a minimum of 5 lines\n                const desiredGapAbove = Math.max(5 * this._lineHeight, viewportHeight * 0.2);\n                // Try to scroll just above the box with the desired gap\n                const desiredScrollTop = boxStartY - desiredGapAbove;\n                // But ensure that the box is not pushed out of viewport\n                const minScrollTop = boxEndY - viewportHeight;\n                newScrollTop = Math.max(minScrollTop, desiredScrollTop);\n            }\n        }\n        else if (verticalType === 1 /* viewEvents.VerticalRevealType.Center */ || verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */) {\n            if (verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // Box is outside the viewport... center it\n                const boxMiddleY = (boxStartY + boxEndY) / 2;\n                newScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n            }\n        }\n        else {\n            newScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === 3 /* viewEvents.VerticalRevealType.Top */, verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */);\n        }\n        return newScrollTop;\n    }\n    _computeScrollLeftToReveal(horizontalRevealRequest) {\n        const viewport = this._context.viewLayout.getCurrentViewport();\n        const layoutInfo = this._context.configuration.options.get(138 /* EditorOption.layoutInfo */);\n        const viewportStartX = viewport.left;\n        const viewportEndX = viewportStartX + viewport.width - layoutInfo.verticalScrollbarWidth;\n        let boxStartX = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n        let boxEndX = 0;\n        if (horizontalRevealRequest.type === 'range') {\n            const visibleRanges = this._visibleRangesForLineRange(horizontalRevealRequest.lineNumber, horizontalRevealRequest.startColumn, horizontalRevealRequest.endColumn);\n            if (!visibleRanges) {\n                return null;\n            }\n            for (const visibleRange of visibleRanges.ranges) {\n                boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n            }\n        }\n        else {\n            for (const selection of horizontalRevealRequest.selections) {\n                if (selection.startLineNumber !== selection.endLineNumber) {\n                    return null;\n                }\n                const visibleRanges = this._visibleRangesForLineRange(selection.startLineNumber, selection.startColumn, selection.endColumn);\n                if (!visibleRanges) {\n                    return null;\n                }\n                for (const visibleRange of visibleRanges.ranges) {\n                    boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                    boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n                }\n            }\n        }\n        if (!horizontalRevealRequest.minimalReveal) {\n            boxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n            boxEndX += this._revealHorizontalRightPadding;\n        }\n        if (horizontalRevealRequest.type === 'selections' && boxEndX - boxStartX > viewport.width) {\n            return null;\n        }\n        const newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\n        return {\n            scrollLeft: newScrollLeft,\n            maxHorizontalOffset: boxEndX\n        };\n    }\n    _computeMinimumScrolling(viewportStart, viewportEnd, boxStart, boxEnd, revealAtStart, revealAtEnd) {\n        viewportStart = viewportStart | 0;\n        viewportEnd = viewportEnd | 0;\n        boxStart = boxStart | 0;\n        boxEnd = boxEnd | 0;\n        revealAtStart = !!revealAtStart;\n        revealAtEnd = !!revealAtEnd;\n        const viewportLength = viewportEnd - viewportStart;\n        const boxLength = boxEnd - boxStart;\n        if (boxLength < viewportLength) {\n            // The box would fit in the viewport\n            if (revealAtStart) {\n                return boxStart;\n            }\n            if (revealAtEnd) {\n                return Math.max(0, boxEnd - viewportLength);\n            }\n            if (boxStart < viewportStart) {\n                // The box is above the viewport\n                return boxStart;\n            }\n            else if (boxEnd > viewportEnd) {\n                // The box is below the viewport\n                return Math.max(0, boxEnd - viewportLength);\n            }\n        }\n        else {\n            // The box would not fit in the viewport\n            // Reveal the beginning of the box\n            return boxStart;\n        }\n        return viewportStart;\n    }\n}\n/**\n * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\n */\nViewLines.HORIZONTAL_EXTRA_PX = 30;\nexport { ViewLines };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './linesDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class LinesDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const linesDecorationsClassName = d.options.linesDecorationsClassName;\n            if (linesDecorationsClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName);\n            }\n            const firstLineDecorationClassName = d.options.firstLineDecorationClassName;\n            if (firstLineDecorationClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.startLineNumber, firstLineDecorationClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const left = this._decorationsLeft.toString();\n        const width = this._decorationsWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            let lineOutput = '';\n            for (let i = 0, len = classNames.length; i < len; i++) {\n                lineOutput += '<div class=\"cldr ' + classNames[i] + common;\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './marginDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class MarginViewLineDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const marginClassName = d.options.marginClassName;\n            if (marginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, marginClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            let lineOutput = '';\n            for (let i = 0, len = classNames.length; i < len; i++) {\n                lineOutput += '<div class=\"cmdr ' + classNames[i] + '\" style=\"\"></div>';\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const allCharCodes = (() => {\n    const v = [];\n    for (let i = 32 /* Constants.START_CH_CODE */; i <= 126 /* Constants.END_CH_CODE */; i++) {\n        v.push(i);\n    }\n    v.push(65533 /* Constants.UNKNOWN_CODE */);\n    return v;\n})();\nexport const getCharIndex = (chCode, fontScale) => {\n    chCode -= 32 /* Constants.START_CH_CODE */;\n    if (chCode < 0 || chCode > 96 /* Constants.CHAR_COUNT */) {\n        if (fontScale <= 2) {\n            // for smaller scales, we can get away with using any ASCII character...\n            return (chCode + 96 /* Constants.CHAR_COUNT */) % 96 /* Constants.CHAR_COUNT */;\n        }\n        return 96 /* Constants.CHAR_COUNT */ - 1; // unknown symbol\n    }\n    return chCode;\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getCharIndex } from './minimapCharSheet.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\nexport class MinimapCharRenderer {\n    constructor(charData, scale) {\n        this.scale = scale;\n        this._minimapCharRendererBrand = undefined;\n        this.charDataNormal = MinimapCharRenderer.soften(charData, 12 / 15);\n        this.charDataLight = MinimapCharRenderer.soften(charData, 50 / 60);\n    }\n    static soften(input, ratio) {\n        const result = new Uint8ClampedArray(input.length);\n        for (let i = 0, len = input.length; i < len; i++) {\n            result[i] = toUint8(input[i] * ratio);\n        }\n        return result;\n    }\n    renderChar(target, dx, dy, chCode, color, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight) {\n        const charWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* Constants.BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const charData = useLighterFont ? this.charDataLight : this.charDataNormal;\n        const charIndex = getCharIndex(chCode, fontScale);\n        const destWidth = target.width * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let sourceOffset = charIndex * charWidth * charHeight;\n        let row = dy * destWidth + dx * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                const c = (charData[sourceOffset++] / 255) * (foregroundAlpha / 255);\n                dest[column++] = backgroundR + deltaR * c;\n                dest[column++] = backgroundG + deltaG * c;\n                dest[column++] = backgroundB + deltaB * c;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n    blockRenderChar(target, dx, dy, color, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight) {\n        const charWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* Constants.BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const destWidth = target.width * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        const c = 0.5 * (foregroundAlpha / 255);\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const colorR = backgroundR + deltaR * c;\n        const colorG = backgroundG + deltaG * c;\n        const colorB = backgroundB + deltaB * c;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let row = dy * destWidth + dx * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                dest[column++] = colorR;\n                dest[column++] = colorG;\n                dest[column++] = colorB;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { once } from '../../../../base/common/functional.js';\nconst charTable = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15\n};\nconst decodeData = (str) => {\n    const output = new Uint8ClampedArray(str.length / 2);\n    for (let i = 0; i < str.length; i += 2) {\n        output[i >> 1] = (charTable[str[i]] << 4) | (charTable[str[i + 1]] & 0xF);\n    }\n    return output;\n};\n/*\nconst encodeData = (data: Uint8ClampedArray, length: string) => {\n    const chars = '0123456789ABCDEF';\n    let output = '';\n    for (let i = 0; i < data.length; i++) {\n        output += chars[data[i] >> 4] + chars[data[i] & 0xf];\n    }\n    return output;\n};\n*/\n/**\n * Map of minimap scales to prebaked sample data at those scales. We don't\n * sample much larger data, because then font family becomes visible, which\n * is use-configurable.\n */\nexport const prebakedMiniMaps = {\n    1: once(() => decodeData('0000511D6300CF609C709645A78432005642574171487021003C451900274D35D762755E8B629C5BA856AF57BA649530C167D1512A272A3F6038604460398526BCA2A968DB6F8957C768BE5FBE2FB467CF5D8D5B795DC7625B5DFF50DE64C466DB2FC47CD860A65E9A2EB96CB54CE06DA763AB2EA26860524D3763536601005116008177A8705E53AB738E6A982F88BAA35B5F5B626D9C636B449B737E5B7B678598869A662F6B5B8542706C704C80736A607578685B70594A49715A4522E792')),\n    2: once(() => decodeData('000000000000000055394F383D2800008B8B1F210002000081B1CBCBCC820000847AAF6B9AAF2119BE08B8881AD60000A44FD07DCCF107015338130C00000000385972265F390B406E2437634B4B48031B12B8A0847000001E15B29A402F0000000000004B33460B00007A752C2A0000000000004D3900000084394B82013400ABA5CFC7AD9C0302A45A3E5A98AB000089A43382D97900008BA54AA087A70A0248A6A7AE6DBE0000BF6F94987EA40A01A06DCFA7A7A9030496C32F77891D0000A99FB1A0AFA80603B29AB9CA75930D010C0948354D3900000C0948354F37460D0028BE673D8400000000AF9D7B6E00002B007AA8933400007AA642675C2700007984CFB9C3985B768772A8A6B7B20000CAAECAAFC4B700009F94A6009F840009D09F9BA4CA9C0000CC8FC76DC87F0000C991C472A2000000A894A48CA7B501079BA2C9C69BA20000B19A5D3FA89000005CA6009DA2960901B0A7F0669FB200009D009E00B7890000DAD0F5D092820000D294D4C48BD10000B5A7A4A3B1A50402CAB6CBA6A2000000B5A7A4A3B1A8044FCDADD19D9CB00000B7778F7B8AAE0803C9AB5D3F5D3F00009EA09EA0BAB006039EA0989A8C7900009B9EF4D6B7C00000A9A7816CACA80000ABAC84705D3F000096DA635CDC8C00006F486F266F263D4784006124097B00374F6D2D6D2D6D4A3A95872322000000030000000000008D8939130000000000002E22A5C9CBC70600AB25C0B5C9B400061A2DB04CA67001082AA6BEBEBFC606002321DACBC19E03087AA08B6768380000282FBAC0B8CA7A88AD25BBA5A29900004C396C5894A6000040485A6E356E9442A32CD17EADA70000B4237923628600003E2DE9C1D7B500002F25BBA5A2990000231DB6AFB4A804023025C0B5CAB588062B2CBDBEC0C706882435A75CA20000002326BD6A82A908048B4B9A5A668000002423A09CB4BB060025259C9D8A7900001C1FCAB2C7C700002A2A9387ABA200002626A4A47D6E9D14333163A0C87500004B6F9C2D643A257049364936493647358A34438355497F1A0000A24C1D590000D38DFFBDD4CD3126'))\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MinimapCharRenderer } from './minimapCharRenderer.js';\nimport { allCharCodes } from './minimapCharSheet.js';\nimport { prebakedMiniMaps } from './minimapPreBaked.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\n/**\n * Creates character renderers. It takes a 'scale' that determines how large\n * characters should be drawn. Using this, it draws data into a canvas and\n * then downsamples the characters as necessary for the current display.\n * This makes rendering more efficient, rather than drawing a full (tiny)\n * font, or downsampling in real-time.\n */\nexport class MinimapCharRendererFactory {\n    /**\n     * Creates a new character renderer factory with the given scale.\n     */\n    static create(scale, fontFamily) {\n        // renderers are immutable. By default we'll 'create' a new minimap\n        // character renderer whenever we switch editors, no need to do extra work.\n        if (this.lastCreated && scale === this.lastCreated.scale && fontFamily === this.lastFontFamily) {\n            return this.lastCreated;\n        }\n        let factory;\n        if (prebakedMiniMaps[scale]) {\n            factory = new MinimapCharRenderer(prebakedMiniMaps[scale](), scale);\n        }\n        else {\n            factory = MinimapCharRendererFactory.createFromSampleData(MinimapCharRendererFactory.createSampleData(fontFamily).data, scale);\n        }\n        this.lastFontFamily = fontFamily;\n        this.lastCreated = factory;\n        return factory;\n    }\n    /**\n     * Creates the font sample data, writing to a canvas.\n     */\n    static createSampleData(fontFamily) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.style.height = `${16 /* Constants.SAMPLED_CHAR_HEIGHT */}px`;\n        canvas.height = 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n        canvas.width = 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n        canvas.style.width = 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */ + 'px';\n        ctx.fillStyle = '#ffffff';\n        ctx.font = `bold ${16 /* Constants.SAMPLED_CHAR_HEIGHT */}px ${fontFamily}`;\n        ctx.textBaseline = 'middle';\n        let x = 0;\n        for (const code of allCharCodes) {\n            ctx.fillText(String.fromCharCode(code), x, 16 /* Constants.SAMPLED_CHAR_HEIGHT */ / 2);\n            x += 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n        }\n        return ctx.getImageData(0, 0, 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */, 16 /* Constants.SAMPLED_CHAR_HEIGHT */);\n    }\n    /**\n     * Creates a character renderer from the canvas sample data.\n     */\n    static createFromSampleData(source, scale) {\n        const expectedLength = 16 /* Constants.SAMPLED_CHAR_HEIGHT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */ * 4 /* Constants.RGBA_CHANNELS_CNT */ * 96 /* Constants.CHAR_COUNT */;\n        if (source.length !== expectedLength) {\n            throw new Error('Unexpected source in MinimapCharRenderer');\n        }\n        const charData = MinimapCharRendererFactory._downsample(source, scale);\n        return new MinimapCharRenderer(charData, scale);\n    }\n    static _downsampleChar(source, sourceOffset, dest, destOffset, scale) {\n        const width = 1 /* Constants.BASE_CHAR_WIDTH */ * scale;\n        const height = 2 /* Constants.BASE_CHAR_HEIGHT */ * scale;\n        let targetIndex = destOffset;\n        let brightest = 0;\n        // This is essentially an ad-hoc rescaling algorithm. Standard approaches\n        // like bicubic interpolation are awesome for scaling between image sizes,\n        // but don't work so well when scaling to very small pixel values, we end\n        // up with blurry, indistinct forms.\n        //\n        // The approach taken here is simply mapping each source pixel to the target\n        // pixels, and taking the weighted values for all pixels in each, and then\n        // averaging them out. Finally we apply an intensity boost in _downsample,\n        // since when scaling to the smallest pixel sizes there's more black space\n        // which causes characters to be much less distinct.\n        for (let y = 0; y < height; y++) {\n            // 1. For this destination pixel, get the source pixels we're sampling\n            // from (x1, y1) to the next pixel (x2, y2)\n            const sourceY1 = (y / height) * 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n            const sourceY2 = ((y + 1) / height) * 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n            for (let x = 0; x < width; x++) {\n                const sourceX1 = (x / width) * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n                const sourceX2 = ((x + 1) / width) * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n                // 2. Sample all of them, summing them up and weighting them. Similar\n                // to bilinear interpolation.\n                let value = 0;\n                let samples = 0;\n                for (let sy = sourceY1; sy < sourceY2; sy++) {\n                    const sourceRow = sourceOffset + Math.floor(sy) * 3840 /* Constants.RGBA_SAMPLED_ROW_WIDTH */;\n                    const yBalance = 1 - (sy - Math.floor(sy));\n                    for (let sx = sourceX1; sx < sourceX2; sx++) {\n                        const xBalance = 1 - (sx - Math.floor(sx));\n                        const sourceIndex = sourceRow + Math.floor(sx) * 4 /* Constants.RGBA_CHANNELS_CNT */;\n                        const weight = xBalance * yBalance;\n                        samples += weight;\n                        value += ((source[sourceIndex] * source[sourceIndex + 3]) / 255) * weight;\n                    }\n                }\n                const final = value / samples;\n                brightest = Math.max(brightest, final);\n                dest[targetIndex++] = toUint8(final);\n            }\n        }\n        return brightest;\n    }\n    static _downsample(data, scale) {\n        const pixelsPerCharacter = 2 /* Constants.BASE_CHAR_HEIGHT */ * scale * 1 /* Constants.BASE_CHAR_WIDTH */ * scale;\n        const resultLen = pixelsPerCharacter * 96 /* Constants.CHAR_COUNT */;\n        const result = new Uint8ClampedArray(resultLen);\n        let resultOffset = 0;\n        let sourceOffset = 0;\n        let brightest = 0;\n        for (let charIndex = 0; charIndex < 96 /* Constants.CHAR_COUNT */; charIndex++) {\n            brightest = Math.max(brightest, this._downsampleChar(data, sourceOffset, result, resultOffset, scale));\n            resultOffset += pixelsPerCharacter;\n            sourceOffset += 10 /* Constants.SAMPLED_CHAR_WIDTH */ * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        }\n        if (brightest > 0) {\n            const adjust = 255 / brightest;\n            for (let i = 0; i < resultLen; i++) {\n                result[i] *= adjust;\n            }\n        }\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './minimap.css';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { GlobalPointerMoveMonitor } from '../../../../base/browser/globalPointerMoveMonitor.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { RenderedLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { MINIMAP_GUTTER_WIDTH, EditorLayoutInfoComputer } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { RGBA8 } from '../../../common/core/rgba.js';\nimport { MinimapTokensColorTracker } from '../../../common/viewModel/minimapTokensColorTracker.js';\nimport { ViewModelDecoration } from '../../../common/viewModel.js';\nimport { minimapSelection, minimapBackground, minimapForegroundOpacity } from '../../../../platform/theme/common/colorRegistry.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EventType, Gesture } from '../../../../base/browser/touch.js';\nimport { MinimapCharRendererFactory } from './minimapCharRendererFactory.js';\nimport { MinimapPosition } from '../../../common/model.js';\nimport { once } from '../../../../base/common/functional.js';\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nconst POINTER_DRAG_RESET_DISTANCE = 140;\nconst GUTTER_DECORATION_WIDTH = 2;\nclass MinimapOptions {\n    constructor(configuration, theme, tokensColorTracker) {\n        const options = configuration.options;\n        const pixelRatio = options.get(136 /* EditorOption.pixelRatio */);\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        const minimapLayout = layoutInfo.minimap;\n        const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        const minimapOpts = options.get(69 /* EditorOption.minimap */);\n        this.renderMinimap = minimapLayout.renderMinimap;\n        this.size = minimapOpts.size;\n        this.minimapHeightIsEditorHeight = minimapLayout.minimapHeightIsEditorHeight;\n        this.scrollBeyondLastLine = options.get(99 /* EditorOption.scrollBeyondLastLine */);\n        this.paddingTop = options.get(80 /* EditorOption.padding */).top;\n        this.paddingBottom = options.get(80 /* EditorOption.padding */).bottom;\n        this.showSlider = minimapOpts.showSlider;\n        this.autohide = minimapOpts.autohide;\n        this.pixelRatio = pixelRatio;\n        this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this.lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this.minimapLeft = minimapLayout.minimapLeft;\n        this.minimapWidth = minimapLayout.minimapWidth;\n        this.minimapHeight = layoutInfo.height;\n        this.canvasInnerWidth = minimapLayout.minimapCanvasInnerWidth;\n        this.canvasInnerHeight = minimapLayout.minimapCanvasInnerHeight;\n        this.canvasOuterWidth = minimapLayout.minimapCanvasOuterWidth;\n        this.canvasOuterHeight = minimapLayout.minimapCanvasOuterHeight;\n        this.isSampling = minimapLayout.minimapIsSampling;\n        this.editorHeight = layoutInfo.height;\n        this.fontScale = minimapLayout.minimapScale;\n        this.minimapLineHeight = minimapLayout.minimapLineHeight;\n        this.minimapCharWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.fontScale;\n        this.charRenderer = once(() => MinimapCharRendererFactory.create(this.fontScale, fontInfo.fontFamily));\n        this.defaultBackgroundColor = tokensColorTracker.getColor(2 /* ColorId.DefaultBackground */);\n        this.backgroundColor = MinimapOptions._getMinimapBackground(theme, this.defaultBackgroundColor);\n        this.foregroundAlpha = MinimapOptions._getMinimapForegroundOpacity(theme);\n    }\n    static _getMinimapBackground(theme, defaultBackgroundColor) {\n        const themeColor = theme.getColor(minimapBackground);\n        if (themeColor) {\n            return new RGBA8(themeColor.rgba.r, themeColor.rgba.g, themeColor.rgba.b, Math.round(255 * themeColor.rgba.a));\n        }\n        return defaultBackgroundColor;\n    }\n    static _getMinimapForegroundOpacity(theme) {\n        const themeColor = theme.getColor(minimapForegroundOpacity);\n        if (themeColor) {\n            return RGBA8._clamp(Math.round(255 * themeColor.rgba.a));\n        }\n        return 255;\n    }\n    equals(other) {\n        return (this.renderMinimap === other.renderMinimap\n            && this.size === other.size\n            && this.minimapHeightIsEditorHeight === other.minimapHeightIsEditorHeight\n            && this.scrollBeyondLastLine === other.scrollBeyondLastLine\n            && this.paddingTop === other.paddingTop\n            && this.paddingBottom === other.paddingBottom\n            && this.showSlider === other.showSlider\n            && this.autohide === other.autohide\n            && this.pixelRatio === other.pixelRatio\n            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n            && this.lineHeight === other.lineHeight\n            && this.minimapLeft === other.minimapLeft\n            && this.minimapWidth === other.minimapWidth\n            && this.minimapHeight === other.minimapHeight\n            && this.canvasInnerWidth === other.canvasInnerWidth\n            && this.canvasInnerHeight === other.canvasInnerHeight\n            && this.canvasOuterWidth === other.canvasOuterWidth\n            && this.canvasOuterHeight === other.canvasOuterHeight\n            && this.isSampling === other.isSampling\n            && this.editorHeight === other.editorHeight\n            && this.fontScale === other.fontScale\n            && this.minimapLineHeight === other.minimapLineHeight\n            && this.minimapCharWidth === other.minimapCharWidth\n            && this.defaultBackgroundColor && this.defaultBackgroundColor.equals(other.defaultBackgroundColor)\n            && this.backgroundColor && this.backgroundColor.equals(other.backgroundColor)\n            && this.foregroundAlpha === other.foregroundAlpha);\n    }\n}\nclass MinimapLayout {\n    constructor(\n    /**\n     * The given editor scrollTop (input).\n     */\n    scrollTop, \n    /**\n     * The given editor scrollHeight (input).\n     */\n    scrollHeight, sliderNeeded, _computedSliderRatio, \n    /**\n     * slider dom node top (in CSS px)\n     */\n    sliderTop, \n    /**\n     * slider dom node height (in CSS px)\n     */\n    sliderHeight, \n    /**\n     * empty lines to reserve at the top of the minimap.\n     */\n    topPaddingLineCount, \n    /**\n     * minimap render start line number.\n     */\n    startLineNumber, \n    /**\n     * minimap render end line number.\n     */\n    endLineNumber) {\n        this.scrollTop = scrollTop;\n        this.scrollHeight = scrollHeight;\n        this.sliderNeeded = sliderNeeded;\n        this._computedSliderRatio = _computedSliderRatio;\n        this.sliderTop = sliderTop;\n        this.sliderHeight = sliderHeight;\n        this.topPaddingLineCount = topPaddingLineCount;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n    }\n    /**\n     * Compute a desired `scrollPosition` such that the slider moves by `delta`.\n     */\n    getDesiredScrollTopFromDelta(delta) {\n        return Math.round(this.scrollTop + delta / this._computedSliderRatio);\n    }\n    getDesiredScrollTopFromTouchLocation(pageY) {\n        return Math.round((pageY - this.sliderHeight / 2) / this._computedSliderRatio);\n    }\n    /**\n     * Intersect a line range with `this.startLineNumber` and `this.endLineNumber`.\n     */\n    intersectWithViewport(range) {\n        const startLineNumber = Math.max(this.startLineNumber, range.startLineNumber);\n        const endLineNumber = Math.min(this.endLineNumber, range.endLineNumber);\n        if (startLineNumber > endLineNumber) {\n            // entirely outside minimap's viewport\n            return null;\n        }\n        return [startLineNumber, endLineNumber];\n    }\n    /**\n     * Get the inner minimap y coordinate for a line number.\n     */\n    getYForLineNumber(lineNumber, minimapLineHeight) {\n        return +(lineNumber - this.startLineNumber + this.topPaddingLineCount) * minimapLineHeight;\n    }\n    static create(options, viewportStartLineNumber, viewportEndLineNumber, viewportStartLineNumberVerticalOffset, viewportHeight, viewportContainsWhitespaceGaps, lineCount, realLineCount, scrollTop, scrollHeight, previousLayout) {\n        const pixelRatio = options.pixelRatio;\n        const minimapLineHeight = options.minimapLineHeight;\n        const minimapLinesFitting = Math.floor(options.canvasInnerHeight / minimapLineHeight);\n        const lineHeight = options.lineHeight;\n        if (options.minimapHeightIsEditorHeight) {\n            let logicalScrollHeight = (realLineCount * options.lineHeight\n                + options.paddingTop\n                + options.paddingBottom);\n            if (options.scrollBeyondLastLine) {\n                logicalScrollHeight += Math.max(0, viewportHeight - options.lineHeight - options.paddingBottom);\n            }\n            const sliderHeight = Math.max(1, Math.floor(viewportHeight * viewportHeight / logicalScrollHeight));\n            const maxMinimapSliderTop = Math.max(0, options.minimapHeight - sliderHeight);\n            // The slider can move from 0 to `maxMinimapSliderTop`\n            // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n            const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n            const sliderTop = (scrollTop * computedSliderRatio);\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            const maxLinesFitting = Math.floor(options.canvasInnerHeight / options.minimapLineHeight);\n            const topPaddingLineCount = Math.floor(options.paddingTop / options.lineHeight);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, topPaddingLineCount, 1, Math.min(lineCount, maxLinesFitting));\n        }\n        // The visible line count in a viewport can change due to a number of reasons:\n        //  a) with the same viewport width, different scroll positions can result in partial lines being visible:\n        //    e.g. for a line height of 20, and a viewport height of 600\n        //          * scrollTop = 0  => visible lines are [1, 30]\n        //          * scrollTop = 10 => visible lines are [1, 31] (with lines 1 and 31 partially visible)\n        //          * scrollTop = 20 => visible lines are [2, 31]\n        //  b) whitespace gaps might make their way in the viewport (which results in a decrease in the visible line count)\n        //  c) we could be in the scroll beyond last line case (which also results in a decrease in the visible line count, down to possibly only one line being visible)\n        // We must first establish a desirable slider height.\n        let sliderHeight;\n        if (viewportContainsWhitespaceGaps && viewportEndLineNumber !== lineCount) {\n            // case b) from above: there are whitespace gaps in the viewport.\n            // In this case, the height of the slider directly reflects the visible line count.\n            const viewportLineCount = viewportEndLineNumber - viewportStartLineNumber + 1;\n            sliderHeight = Math.floor(viewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        else {\n            // The slider has a stable height\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            sliderHeight = Math.floor(expectedViewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        const extraLinesAtTheTop = Math.floor(options.paddingTop / lineHeight);\n        let extraLinesAtTheBottom = Math.floor(options.paddingBottom / lineHeight);\n        if (options.scrollBeyondLastLine) {\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            extraLinesAtTheBottom = Math.max(extraLinesAtTheBottom, expectedViewportLineCount - 1);\n        }\n        let maxMinimapSliderTop;\n        if (extraLinesAtTheBottom > 0) {\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            // The minimap slider, when dragged all the way down, will contain the last line at its top\n            maxMinimapSliderTop = (extraLinesAtTheTop + lineCount + extraLinesAtTheBottom - expectedViewportLineCount - 1) * minimapLineHeight / pixelRatio;\n        }\n        else {\n            // The minimap slider, when dragged all the way down, will contain the last line at its bottom\n            maxMinimapSliderTop = Math.max(0, (extraLinesAtTheTop + lineCount) * minimapLineHeight / pixelRatio - sliderHeight);\n        }\n        maxMinimapSliderTop = Math.min(options.minimapHeight - sliderHeight, maxMinimapSliderTop);\n        // The slider can move from 0 to `maxMinimapSliderTop`\n        // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n        const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n        const sliderTop = (scrollTop * computedSliderRatio);\n        if (minimapLinesFitting >= extraLinesAtTheTop + lineCount + extraLinesAtTheBottom) {\n            // All lines fit in the minimap\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, extraLinesAtTheTop, 1, lineCount);\n        }\n        else {\n            let consideringStartLineNumber;\n            if (viewportStartLineNumber > 1) {\n                consideringStartLineNumber = viewportStartLineNumber + extraLinesAtTheTop;\n            }\n            else {\n                consideringStartLineNumber = Math.max(1, scrollTop / lineHeight);\n            }\n            let topPaddingLineCount;\n            let startLineNumber = Math.max(1, Math.floor(consideringStartLineNumber - sliderTop * pixelRatio / minimapLineHeight));\n            if (startLineNumber < extraLinesAtTheTop) {\n                topPaddingLineCount = extraLinesAtTheTop - startLineNumber + 1;\n                startLineNumber = 1;\n            }\n            else {\n                topPaddingLineCount = 0;\n                startLineNumber = Math.max(1, startLineNumber - extraLinesAtTheTop);\n            }\n            // Avoid flickering caused by a partial viewport start line\n            // by being consistent w.r.t. the previous layout decision\n            if (previousLayout && previousLayout.scrollHeight === scrollHeight) {\n                if (previousLayout.scrollTop > scrollTop) {\n                    // Scrolling up => never increase `startLineNumber`\n                    startLineNumber = Math.min(startLineNumber, previousLayout.startLineNumber);\n                    topPaddingLineCount = Math.max(topPaddingLineCount, previousLayout.topPaddingLineCount);\n                }\n                if (previousLayout.scrollTop < scrollTop) {\n                    // Scrolling down => never decrease `startLineNumber`\n                    startLineNumber = Math.max(startLineNumber, previousLayout.startLineNumber);\n                    topPaddingLineCount = Math.min(topPaddingLineCount, previousLayout.topPaddingLineCount);\n                }\n            }\n            const endLineNumber = Math.min(lineCount, startLineNumber - topPaddingLineCount + minimapLinesFitting - 1);\n            const partialLine = (scrollTop - viewportStartLineNumberVerticalOffset) / lineHeight;\n            let sliderTopAligned;\n            if (scrollTop > options.paddingTop) {\n                sliderTopAligned = (viewportStartLineNumber - startLineNumber + topPaddingLineCount + partialLine) * minimapLineHeight / pixelRatio;\n            }\n            else {\n                sliderTopAligned = (scrollTop / options.paddingTop) * (topPaddingLineCount + partialLine) * minimapLineHeight / pixelRatio;\n            }\n            return new MinimapLayout(scrollTop, scrollHeight, true, computedSliderRatio, sliderTopAligned, sliderHeight, topPaddingLineCount, startLineNumber, endLineNumber);\n        }\n    }\n}\nclass MinimapLine {\n    constructor(dy) {\n        this.dy = dy;\n    }\n    onContentChanged() {\n        this.dy = -1;\n    }\n    onTokensChanged() {\n        this.dy = -1;\n    }\n}\nMinimapLine.INVALID = new MinimapLine(-1);\nclass RenderData {\n    constructor(renderedLayout, imageData, lines) {\n        this.renderedLayout = renderedLayout;\n        this._imageData = imageData;\n        this._renderedLines = new RenderedLinesCollection(() => MinimapLine.INVALID);\n        this._renderedLines._set(renderedLayout.startLineNumber, lines);\n    }\n    /**\n     * Check if the current RenderData matches accurately the new desired layout and no painting is needed.\n     */\n    linesEquals(layout) {\n        if (!this.scrollEquals(layout)) {\n            return false;\n        }\n        const tmp = this._renderedLines._get();\n        const lines = tmp.lines;\n        for (let i = 0, len = lines.length; i < len; i++) {\n            if (lines[i].dy === -1) {\n                // This line is invalid\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Check if the current RenderData matches the new layout's scroll position\n     */\n    scrollEquals(layout) {\n        return this.renderedLayout.startLineNumber === layout.startLineNumber\n            && this.renderedLayout.endLineNumber === layout.endLineNumber;\n    }\n    _get() {\n        const tmp = this._renderedLines._get();\n        return {\n            imageData: this._imageData,\n            rendLineNumberStart: tmp.rendLineNumberStart,\n            lines: tmp.lines\n        };\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        return this._renderedLines.onLinesChanged(changeFromLineNumber, changeCount);\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        this._renderedLines.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        this._renderedLines.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n    }\n    onTokensChanged(ranges) {\n        return this._renderedLines.onTokensChanged(ranges);\n    }\n}\n/**\n * Some sort of double buffering.\n *\n * Keeps two buffers around that will be rotated for painting.\n * Always gives a buffer that is filled with the background color.\n */\nclass MinimapBuffers {\n    constructor(ctx, WIDTH, HEIGHT, background) {\n        this._backgroundFillData = MinimapBuffers._createBackgroundFillData(WIDTH, HEIGHT, background);\n        this._buffers = [\n            ctx.createImageData(WIDTH, HEIGHT),\n            ctx.createImageData(WIDTH, HEIGHT)\n        ];\n        this._lastUsedBuffer = 0;\n    }\n    getBuffer() {\n        // rotate buffers\n        this._lastUsedBuffer = 1 - this._lastUsedBuffer;\n        const result = this._buffers[this._lastUsedBuffer];\n        // fill with background color\n        result.data.set(this._backgroundFillData);\n        return result;\n    }\n    static _createBackgroundFillData(WIDTH, HEIGHT, background) {\n        const backgroundR = background.r;\n        const backgroundG = background.g;\n        const backgroundB = background.b;\n        const backgroundA = background.a;\n        const result = new Uint8ClampedArray(WIDTH * HEIGHT * 4);\n        let offset = 0;\n        for (let i = 0; i < HEIGHT; i++) {\n            for (let j = 0; j < WIDTH; j++) {\n                result[offset] = backgroundR;\n                result[offset + 1] = backgroundG;\n                result[offset + 2] = backgroundB;\n                result[offset + 3] = backgroundA;\n                offset += 4;\n            }\n        }\n        return result;\n    }\n}\nclass MinimapSamplingState {\n    static compute(options, viewLineCount, oldSamplingState) {\n        if (options.renderMinimap === 0 /* RenderMinimap.None */ || !options.isSampling) {\n            return [null, []];\n        }\n        // ratio is intentionally not part of the layout to avoid the layout changing all the time\n        // so we need to recompute it again...\n        const { minimapLineCount } = EditorLayoutInfoComputer.computeContainedMinimapLineCount({\n            viewLineCount: viewLineCount,\n            scrollBeyondLastLine: options.scrollBeyondLastLine,\n            paddingTop: options.paddingTop,\n            paddingBottom: options.paddingBottom,\n            height: options.editorHeight,\n            lineHeight: options.lineHeight,\n            pixelRatio: options.pixelRatio\n        });\n        const ratio = viewLineCount / minimapLineCount;\n        const halfRatio = ratio / 2;\n        if (!oldSamplingState || oldSamplingState.minimapLines.length === 0) {\n            const result = [];\n            result[0] = 1;\n            if (minimapLineCount > 1) {\n                for (let i = 0, lastIndex = minimapLineCount - 1; i < lastIndex; i++) {\n                    result[i] = Math.round(i * ratio + halfRatio);\n                }\n                result[minimapLineCount - 1] = viewLineCount;\n            }\n            return [new MinimapSamplingState(ratio, result), []];\n        }\n        const oldMinimapLines = oldSamplingState.minimapLines;\n        const oldLength = oldMinimapLines.length;\n        const result = [];\n        let oldIndex = 0;\n        let oldDeltaLineCount = 0;\n        let minViewLineNumber = 1;\n        const MAX_EVENT_COUNT = 10; // generate at most 10 events, if there are more than 10 changes, just flush all previous data\n        let events = [];\n        let lastEvent = null;\n        for (let i = 0; i < minimapLineCount; i++) {\n            const fromViewLineNumber = Math.max(minViewLineNumber, Math.round(i * ratio));\n            const toViewLineNumber = Math.max(fromViewLineNumber, Math.round((i + 1) * ratio));\n            while (oldIndex < oldLength && oldMinimapLines[oldIndex] < fromViewLineNumber) {\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                        lastEvent.deleteToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount--;\n                }\n                oldIndex++;\n            }\n            let selectedViewLineNumber;\n            if (oldIndex < oldLength && oldMinimapLines[oldIndex] <= toViewLineNumber) {\n                // reuse the old sampled line\n                selectedViewLineNumber = oldMinimapLines[oldIndex];\n                oldIndex++;\n            }\n            else {\n                if (i === 0) {\n                    selectedViewLineNumber = 1;\n                }\n                else if (i + 1 === minimapLineCount) {\n                    selectedViewLineNumber = viewLineCount;\n                }\n                else {\n                    selectedViewLineNumber = Math.round(i * ratio + halfRatio);\n                }\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'inserted' && lastEvent._i === i - 1) {\n                        lastEvent.insertToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'inserted', _i: i, insertFromLineNumber: oldMinimapLineNumber, insertToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount++;\n                }\n            }\n            result[i] = selectedViewLineNumber;\n            minViewLineNumber = selectedViewLineNumber;\n        }\n        if (events.length < MAX_EVENT_COUNT) {\n            while (oldIndex < oldLength) {\n                const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                    lastEvent.deleteToLineNumber++;\n                }\n                else {\n                    lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                    events.push(lastEvent);\n                }\n                oldDeltaLineCount--;\n                oldIndex++;\n            }\n        }\n        else {\n            // too many events, just give up\n            events = [{ type: 'flush' }];\n        }\n        return [new MinimapSamplingState(ratio, result), events];\n    }\n    constructor(samplingRatio, minimapLines) {\n        this.samplingRatio = samplingRatio;\n        this.minimapLines = minimapLines;\n    }\n    modelLineToMinimapLine(lineNumber) {\n        return Math.min(this.minimapLines.length, Math.max(1, Math.round(lineNumber / this.samplingRatio)));\n    }\n    /**\n     * Will return null if the model line ranges are not intersecting with a sampled model line.\n     */\n    modelLineRangeToMinimapLineRange(fromLineNumber, toLineNumber) {\n        let fromLineIndex = this.modelLineToMinimapLine(fromLineNumber) - 1;\n        while (fromLineIndex > 0 && this.minimapLines[fromLineIndex - 1] >= fromLineNumber) {\n            fromLineIndex--;\n        }\n        let toLineIndex = this.modelLineToMinimapLine(toLineNumber) - 1;\n        while (toLineIndex + 1 < this.minimapLines.length && this.minimapLines[toLineIndex + 1] <= toLineNumber) {\n            toLineIndex++;\n        }\n        if (fromLineIndex === toLineIndex) {\n            const sampledLineNumber = this.minimapLines[fromLineIndex];\n            if (sampledLineNumber < fromLineNumber || sampledLineNumber > toLineNumber) {\n                // This line is not part of the sampled lines ==> nothing to do\n                return null;\n            }\n        }\n        return [fromLineIndex + 1, toLineIndex + 1];\n    }\n    /**\n     * Will always return a range, even if it is not intersecting with a sampled model line.\n     */\n    decorationLineRangeToMinimapLineRange(startLineNumber, endLineNumber) {\n        let minimapLineStart = this.modelLineToMinimapLine(startLineNumber);\n        let minimapLineEnd = this.modelLineToMinimapLine(endLineNumber);\n        if (startLineNumber !== endLineNumber && minimapLineEnd === minimapLineStart) {\n            if (minimapLineEnd === this.minimapLines.length) {\n                if (minimapLineStart > 1) {\n                    minimapLineStart--;\n                }\n            }\n            else {\n                minimapLineEnd++;\n            }\n        }\n        return [minimapLineStart, minimapLineEnd];\n    }\n    onLinesDeleted(e) {\n        // have the mapping be sticky\n        const deletedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        let changeStartIndex = this.minimapLines.length;\n        let changeEndIndex = 0;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            if (this.minimapLines[i] <= e.toLineNumber) {\n                // this line got deleted => move to previous available\n                this.minimapLines[i] = Math.max(1, e.fromLineNumber - 1);\n                changeStartIndex = Math.min(changeStartIndex, i);\n                changeEndIndex = Math.max(changeEndIndex, i);\n            }\n            else {\n                this.minimapLines[i] -= deletedLineCount;\n            }\n        }\n        return [changeStartIndex, changeEndIndex];\n    }\n    onLinesInserted(e) {\n        // have the mapping be sticky\n        const insertedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            this.minimapLines[i] += insertedLineCount;\n        }\n    }\n}\nexport class Minimap extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.tokensColorTracker = MinimapTokensColorTracker.getInstance();\n        this._selections = [];\n        this._minimapSelections = null;\n        this.options = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        const [samplingState,] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), null);\n        this._samplingState = samplingState;\n        this._shouldCheckSampling = false;\n        this._actual = new InnerMinimap(context.theme, this);\n    }\n    dispose() {\n        this._actual.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this._actual.getDomNode();\n    }\n    _onOptionsMaybeChanged() {\n        const opts = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        if (this.options.equals(opts)) {\n            return false;\n        }\n        this.options = opts;\n        this._recreateLineSampling();\n        this._actual.onDidChangeOptions();\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        this._minimapSelections = null;\n        return this._actual.onSelectionChanged();\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsMinimap) {\n            return this._actual.onDecorationsChanged();\n        }\n        return false;\n    }\n    onFlushed(e) {\n        if (this._samplingState) {\n            this._shouldCheckSampling = true;\n        }\n        return this._actual.onFlushed();\n    }\n    onLinesChanged(e) {\n        if (this._samplingState) {\n            const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(e.fromLineNumber, e.fromLineNumber + e.count - 1);\n            if (minimapLineRange) {\n                return this._actual.onLinesChanged(minimapLineRange[0], minimapLineRange[1] - minimapLineRange[0] + 1);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onLinesChanged(e.fromLineNumber, e.count);\n        }\n    }\n    onLinesDeleted(e) {\n        if (this._samplingState) {\n            const [changeStartIndex, changeEndIndex] = this._samplingState.onLinesDeleted(e);\n            if (changeStartIndex <= changeEndIndex) {\n                this._actual.onLinesChanged(changeStartIndex + 1, changeEndIndex - changeStartIndex + 1);\n            }\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onLinesInserted(e) {\n        if (this._samplingState) {\n            this._samplingState.onLinesInserted(e);\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onScrollChanged(e) {\n        return this._actual.onScrollChanged();\n    }\n    onThemeChanged(e) {\n        this._actual.onThemeChanged();\n        this._onOptionsMaybeChanged();\n        return true;\n    }\n    onTokensChanged(e) {\n        if (this._samplingState) {\n            const ranges = [];\n            for (const range of e.ranges) {\n                const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(range.fromLineNumber, range.toLineNumber);\n                if (minimapLineRange) {\n                    ranges.push({ fromLineNumber: minimapLineRange[0], toLineNumber: minimapLineRange[1] });\n                }\n            }\n            if (ranges.length) {\n                return this._actual.onTokensChanged(ranges);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onTokensChanged(e.ranges);\n        }\n    }\n    onTokensColorsChanged(e) {\n        this._onOptionsMaybeChanged();\n        return this._actual.onTokensColorsChanged();\n    }\n    onZonesChanged(e) {\n        return this._actual.onZonesChanged();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._shouldCheckSampling) {\n            this._shouldCheckSampling = false;\n            this._recreateLineSampling();\n        }\n    }\n    render(ctx) {\n        let viewportStartLineNumber = ctx.visibleRange.startLineNumber;\n        let viewportEndLineNumber = ctx.visibleRange.endLineNumber;\n        if (this._samplingState) {\n            viewportStartLineNumber = this._samplingState.modelLineToMinimapLine(viewportStartLineNumber);\n            viewportEndLineNumber = this._samplingState.modelLineToMinimapLine(viewportEndLineNumber);\n        }\n        const minimapCtx = {\n            viewportContainsWhitespaceGaps: (ctx.viewportData.whitespaceViewportData.length > 0),\n            scrollWidth: ctx.scrollWidth,\n            scrollHeight: ctx.scrollHeight,\n            viewportStartLineNumber: viewportStartLineNumber,\n            viewportEndLineNumber: viewportEndLineNumber,\n            viewportStartLineNumberVerticalOffset: ctx.getVerticalOffsetForLineNumber(viewportStartLineNumber),\n            scrollTop: ctx.scrollTop,\n            scrollLeft: ctx.scrollLeft,\n            viewportWidth: ctx.viewportWidth,\n            viewportHeight: ctx.viewportHeight,\n        };\n        this._actual.render(minimapCtx);\n    }\n    //#region IMinimapModel\n    _recreateLineSampling() {\n        this._minimapSelections = null;\n        const wasSampling = Boolean(this._samplingState);\n        const [samplingState, events] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), this._samplingState);\n        this._samplingState = samplingState;\n        if (wasSampling && this._samplingState) {\n            // was sampling, is sampling\n            for (const event of events) {\n                switch (event.type) {\n                    case 'deleted':\n                        this._actual.onLinesDeleted(event.deleteFromLineNumber, event.deleteToLineNumber);\n                        break;\n                    case 'inserted':\n                        this._actual.onLinesInserted(event.insertFromLineNumber, event.insertToLineNumber);\n                        break;\n                    case 'flush':\n                        this._actual.onFlushed();\n                        break;\n                }\n            }\n        }\n    }\n    getLineCount() {\n        if (this._samplingState) {\n            return this._samplingState.minimapLines.length;\n        }\n        return this._context.viewModel.getLineCount();\n    }\n    getRealLineCount() {\n        return this._context.viewModel.getLineCount();\n    }\n    getLineContent(lineNumber) {\n        if (this._samplingState) {\n            return this._context.viewModel.getLineContent(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.viewModel.getLineContent(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        if (this._samplingState) {\n            return this._context.viewModel.getLineMaxColumn(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.viewModel.getLineMaxColumn(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        if (this._samplingState) {\n            const result = [];\n            for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n                if (needed[lineIndex]) {\n                    result[lineIndex] = this._context.viewModel.getViewLineData(this._samplingState.minimapLines[startLineNumber + lineIndex - 1]);\n                }\n                else {\n                    result[lineIndex] = null;\n                }\n            }\n            return result;\n        }\n        return this._context.viewModel.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed).data;\n    }\n    getSelections() {\n        if (this._minimapSelections === null) {\n            if (this._samplingState) {\n                this._minimapSelections = [];\n                for (const selection of this._selections) {\n                    const [minimapLineStart, minimapLineEnd] = this._samplingState.decorationLineRangeToMinimapLineRange(selection.startLineNumber, selection.endLineNumber);\n                    this._minimapSelections.push(new Selection(minimapLineStart, selection.startColumn, minimapLineEnd, selection.endColumn));\n                }\n            }\n            else {\n                this._minimapSelections = this._selections;\n            }\n        }\n        return this._minimapSelections;\n    }\n    getMinimapDecorationsInViewport(startLineNumber, endLineNumber) {\n        let visibleRange;\n        if (this._samplingState) {\n            const modelStartLineNumber = this._samplingState.minimapLines[startLineNumber - 1];\n            const modelEndLineNumber = this._samplingState.minimapLines[endLineNumber - 1];\n            visibleRange = new Range(modelStartLineNumber, 1, modelEndLineNumber, this._context.viewModel.getLineMaxColumn(modelEndLineNumber));\n        }\n        else {\n            visibleRange = new Range(startLineNumber, 1, endLineNumber, this._context.viewModel.getLineMaxColumn(endLineNumber));\n        }\n        const decorations = this._context.viewModel.getDecorationsInViewport(visibleRange, true);\n        if (this._samplingState) {\n            const result = [];\n            for (const decoration of decorations) {\n                if (!decoration.options.minimap) {\n                    continue;\n                }\n                const range = decoration.range;\n                const minimapStartLineNumber = this._samplingState.modelLineToMinimapLine(range.startLineNumber);\n                const minimapEndLineNumber = this._samplingState.modelLineToMinimapLine(range.endLineNumber);\n                result.push(new ViewModelDecoration(new Range(minimapStartLineNumber, range.startColumn, minimapEndLineNumber, range.endColumn), decoration.options));\n            }\n            return result;\n        }\n        return decorations;\n    }\n    getOptions() {\n        return this._context.viewModel.model.getOptions();\n    }\n    revealLineNumber(lineNumber) {\n        if (this._samplingState) {\n            lineNumber = this._samplingState.minimapLines[lineNumber - 1];\n        }\n        this._context.viewModel.revealRange('mouse', false, new Range(lineNumber, 1, lineNumber, 1), 1 /* viewEvents.VerticalRevealType.Center */, 0 /* ScrollType.Smooth */);\n    }\n    setScrollTop(scrollTop) {\n        this._context.viewModel.viewLayout.setScrollPosition({\n            scrollTop: scrollTop\n        }, 1 /* ScrollType.Immediate */);\n    }\n}\nclass InnerMinimap extends Disposable {\n    constructor(theme, model) {\n        super();\n        this._renderDecorations = false;\n        this._gestureInProgress = false;\n        this._theme = theme;\n        this._model = model;\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 8 /* PartFingerprint.Minimap */);\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._shadow = createFastDomNode(document.createElement('div'));\n        this._shadow.setClassName('minimap-shadow-hidden');\n        this._domNode.appendChild(this._shadow);\n        this._canvas = createFastDomNode(document.createElement('canvas'));\n        this._canvas.setPosition('absolute');\n        this._canvas.setLeft(0);\n        this._domNode.appendChild(this._canvas);\n        this._decorationsCanvas = createFastDomNode(document.createElement('canvas'));\n        this._decorationsCanvas.setPosition('absolute');\n        this._decorationsCanvas.setClassName('minimap-decorations-layer');\n        this._decorationsCanvas.setLeft(0);\n        this._domNode.appendChild(this._decorationsCanvas);\n        this._slider = createFastDomNode(document.createElement('div'));\n        this._slider.setPosition('absolute');\n        this._slider.setClassName('minimap-slider');\n        this._slider.setLayerHinting(true);\n        this._slider.setContain('strict');\n        this._domNode.appendChild(this._slider);\n        this._sliderHorizontal = createFastDomNode(document.createElement('div'));\n        this._sliderHorizontal.setPosition('absolute');\n        this._sliderHorizontal.setClassName('minimap-slider-horizontal');\n        this._slider.appendChild(this._sliderHorizontal);\n        this._applyLayout();\n        this._pointerDownListener = dom.addStandardDisposableListener(this._domNode.domNode, dom.EventType.POINTER_DOWN, (e) => {\n            e.preventDefault();\n            const renderMinimap = this._model.options.renderMinimap;\n            if (renderMinimap === 0 /* RenderMinimap.None */) {\n                return;\n            }\n            if (!this._lastRenderData) {\n                return;\n            }\n            if (this._model.options.size !== 'proportional') {\n                if (e.button === 0 && this._lastRenderData) {\n                    // pretend the click occurred in the center of the slider\n                    const position = dom.getDomNodePagePosition(this._slider.domNode);\n                    const initialPosY = position.top + position.height / 2;\n                    this._startSliderDragging(e, initialPosY, this._lastRenderData.renderedLayout);\n                }\n                return;\n            }\n            const minimapLineHeight = this._model.options.minimapLineHeight;\n            const internalOffsetY = (this._model.options.canvasInnerHeight / this._model.options.canvasOuterHeight) * e.offsetY;\n            const lineIndex = Math.floor(internalOffsetY / minimapLineHeight);\n            let lineNumber = lineIndex + this._lastRenderData.renderedLayout.startLineNumber - this._lastRenderData.renderedLayout.topPaddingLineCount;\n            lineNumber = Math.min(lineNumber, this._model.getLineCount());\n            this._model.revealLineNumber(lineNumber);\n        });\n        this._sliderPointerMoveMonitor = new GlobalPointerMoveMonitor();\n        this._sliderPointerDownListener = dom.addStandardDisposableListener(this._slider.domNode, dom.EventType.POINTER_DOWN, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (e.button === 0 && this._lastRenderData) {\n                this._startSliderDragging(e, e.pageY, this._lastRenderData.renderedLayout);\n            }\n        });\n        this._gestureDisposable = Gesture.addTarget(this._domNode.domNode);\n        this._sliderTouchStartListener = dom.addDisposableListener(this._domNode.domNode, EventType.Start, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData) {\n                this._slider.toggleClassName('active', true);\n                this._gestureInProgress = true;\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchMoveListener = dom.addDisposableListener(this._domNode.domNode, EventType.Change, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData && this._gestureInProgress) {\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchEndListener = dom.addStandardDisposableListener(this._domNode.domNode, EventType.End, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            this._gestureInProgress = false;\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    _startSliderDragging(e, initialPosY, initialSliderState) {\n        if (!e.target || !(e.target instanceof Element)) {\n            return;\n        }\n        const initialPosX = e.pageX;\n        this._slider.toggleClassName('active', true);\n        const handlePointerMove = (posy, posx) => {\n            const minimapPosition = dom.getDomNodePagePosition(this._domNode.domNode);\n            const pointerOrthogonalDelta = Math.min(Math.abs(posx - initialPosX), Math.abs(posx - minimapPosition.left), Math.abs(posx - minimapPosition.left - minimapPosition.width));\n            if (platform.isWindows && pointerOrthogonalDelta > POINTER_DRAG_RESET_DISTANCE) {\n                // The pointer has wondered away from the scrollbar => reset dragging\n                this._model.setScrollTop(initialSliderState.scrollTop);\n                return;\n            }\n            const pointerDelta = posy - initialPosY;\n            this._model.setScrollTop(initialSliderState.getDesiredScrollTopFromDelta(pointerDelta));\n        };\n        if (e.pageY !== initialPosY) {\n            handlePointerMove(e.pageY, initialPosX);\n        }\n        this._sliderPointerMoveMonitor.startMonitoring(e.target, e.pointerId, e.buttons, pointerMoveData => handlePointerMove(pointerMoveData.pageY, pointerMoveData.pageX), () => {\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    scrollDueToTouchEvent(touch) {\n        const startY = this._domNode.domNode.getBoundingClientRect().top;\n        const scrollTop = this._lastRenderData.renderedLayout.getDesiredScrollTopFromTouchLocation(touch.pageY - startY);\n        this._model.setScrollTop(scrollTop);\n    }\n    dispose() {\n        this._pointerDownListener.dispose();\n        this._sliderPointerMoveMonitor.dispose();\n        this._sliderPointerDownListener.dispose();\n        this._gestureDisposable.dispose();\n        this._sliderTouchStartListener.dispose();\n        this._sliderTouchMoveListener.dispose();\n        this._sliderTouchEndListener.dispose();\n        super.dispose();\n    }\n    _getMinimapDomNodeClassName() {\n        const class_ = ['minimap'];\n        if (this._model.options.showSlider === 'always') {\n            class_.push('slider-always');\n        }\n        else {\n            class_.push('slider-mouseover');\n        }\n        if (this._model.options.autohide) {\n            class_.push('autohide');\n        }\n        return class_.join(' ');\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _applyLayout() {\n        this._domNode.setLeft(this._model.options.minimapLeft);\n        this._domNode.setWidth(this._model.options.minimapWidth);\n        this._domNode.setHeight(this._model.options.minimapHeight);\n        this._shadow.setHeight(this._model.options.minimapHeight);\n        this._canvas.setWidth(this._model.options.canvasOuterWidth);\n        this._canvas.setHeight(this._model.options.canvasOuterHeight);\n        this._canvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._canvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._decorationsCanvas.setWidth(this._model.options.canvasOuterWidth);\n        this._decorationsCanvas.setHeight(this._model.options.canvasOuterHeight);\n        this._decorationsCanvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._decorationsCanvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._slider.setWidth(this._model.options.minimapWidth);\n    }\n    _getBuffer() {\n        if (!this._buffers) {\n            if (this._model.options.canvasInnerWidth > 0 && this._model.options.canvasInnerHeight > 0) {\n                this._buffers = new MinimapBuffers(this._canvas.domNode.getContext('2d'), this._model.options.canvasInnerWidth, this._model.options.canvasInnerHeight, this._model.options.backgroundColor);\n            }\n        }\n        return this._buffers ? this._buffers.getBuffer() : null;\n    }\n    // ---- begin view event handlers\n    onDidChangeOptions() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._applyLayout();\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n    }\n    onSelectionChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onDecorationsChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onFlushed() {\n        this._lastRenderData = null;\n        return true;\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onLinesChanged(changeFromLineNumber, changeCount);\n        }\n        return false;\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        var _a;\n        (_a = this._lastRenderData) === null || _a === void 0 ? void 0 : _a.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n        return true;\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        var _a;\n        (_a = this._lastRenderData) === null || _a === void 0 ? void 0 : _a.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n        return true;\n    }\n    onScrollChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onThemeChanged() {\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._renderDecorations = true;\n        return true;\n    }\n    onTokensChanged(ranges) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onTokensChanged(ranges);\n        }\n        return false;\n    }\n    onTokensColorsChanged() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        return true;\n    }\n    onZonesChanged() {\n        this._lastRenderData = null;\n        return true;\n    }\n    // --- end event handlers\n    render(renderingCtx) {\n        const renderMinimap = this._model.options.renderMinimap;\n        if (renderMinimap === 0 /* RenderMinimap.None */) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n            this._sliderHorizontal.setWidth(0);\n            this._sliderHorizontal.setHeight(0);\n            return;\n        }\n        if (renderingCtx.scrollLeft + renderingCtx.viewportWidth >= renderingCtx.scrollWidth) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n        }\n        else {\n            this._shadow.setClassName('minimap-shadow-visible');\n        }\n        const layout = MinimapLayout.create(this._model.options, renderingCtx.viewportStartLineNumber, renderingCtx.viewportEndLineNumber, renderingCtx.viewportStartLineNumberVerticalOffset, renderingCtx.viewportHeight, renderingCtx.viewportContainsWhitespaceGaps, this._model.getLineCount(), this._model.getRealLineCount(), renderingCtx.scrollTop, renderingCtx.scrollHeight, this._lastRenderData ? this._lastRenderData.renderedLayout : null);\n        this._slider.setDisplay(layout.sliderNeeded ? 'block' : 'none');\n        this._slider.setTop(layout.sliderTop);\n        this._slider.setHeight(layout.sliderHeight);\n        // Compute horizontal slider coordinates\n        this._sliderHorizontal.setLeft(0);\n        this._sliderHorizontal.setWidth(this._model.options.minimapWidth);\n        this._sliderHorizontal.setTop(0);\n        this._sliderHorizontal.setHeight(layout.sliderHeight);\n        this.renderDecorations(layout);\n        this._lastRenderData = this.renderLines(layout);\n    }\n    renderDecorations(layout) {\n        if (this._renderDecorations) {\n            this._renderDecorations = false;\n            const selections = this._model.getSelections();\n            selections.sort(Range.compareRangesUsingStarts);\n            const decorations = this._model.getMinimapDecorationsInViewport(layout.startLineNumber, layout.endLineNumber);\n            decorations.sort((a, b) => (a.options.zIndex || 0) - (b.options.zIndex || 0));\n            const { canvasInnerWidth, canvasInnerHeight } = this._model.options;\n            const minimapLineHeight = this._model.options.minimapLineHeight;\n            const minimapCharWidth = this._model.options.minimapCharWidth;\n            const tabSize = this._model.getOptions().tabSize;\n            const canvasContext = this._decorationsCanvas.domNode.getContext('2d');\n            canvasContext.clearRect(0, 0, canvasInnerWidth, canvasInnerHeight);\n            // We first need to render line highlights and then render decorations on top of those.\n            // But we need to pick a single color for each line, and use that as a line highlight.\n            // This needs to be the color of the decoration with the highest `zIndex`, but priority\n            // is given to the selection.\n            const highlightedLines = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, false);\n            this._renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, minimapLineHeight);\n            this._renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, minimapLineHeight);\n            const lineOffsetMap = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, null);\n            this._renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, minimapLineHeight, tabSize, minimapCharWidth, canvasInnerWidth);\n            this._renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, minimapLineHeight, tabSize, minimapCharWidth, canvasInnerWidth);\n        }\n    }\n    _renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, minimapLineHeight) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        canvasContext.fillStyle = this._selectionColor.transparent(0.5).toString();\n        let y1 = 0;\n        let y2 = 0;\n        for (const selection of selections) {\n            const intersection = layout.intersectWithViewport(selection);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                highlightedLines.set(line, true);\n            }\n            const yy1 = layout.getYForLineNumber(startLineNumber, minimapLineHeight);\n            const yy2 = layout.getYForLineNumber(endLineNumber, minimapLineHeight);\n            if (y2 >= yy1) {\n                // merge into previous\n                y2 = yy2;\n            }\n            else {\n                if (y2 > y1) {\n                    // flush\n                    canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n                }\n                y1 = yy1;\n                y2 = yy2;\n            }\n        }\n        if (y2 > y1) {\n            // flush\n            canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n        }\n    }\n    _renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, minimapLineHeight) {\n        const highlightColors = new Map();\n        // Loop backwards to hit first decorations with higher `zIndex`\n        for (let i = decorations.length - 1; i >= 0; i--) {\n            const decoration = decorations[i];\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions || minimapOptions.position !== MinimapPosition.Inline) {\n                continue;\n            }\n            const intersection = layout.intersectWithViewport(decoration.range);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            let highlightColor = highlightColors.get(decorationColor.toString());\n            if (!highlightColor) {\n                highlightColor = decorationColor.transparent(0.5).toString();\n                highlightColors.set(decorationColor.toString(), highlightColor);\n            }\n            canvasContext.fillStyle = highlightColor;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                if (highlightedLines.has(line)) {\n                    continue;\n                }\n                highlightedLines.set(line, true);\n                const y = layout.getYForLineNumber(startLineNumber, minimapLineHeight);\n                canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y, canvasContext.canvas.width, minimapLineHeight);\n            }\n        }\n    }\n    _renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        for (const selection of selections) {\n            const intersection = layout.intersectWithViewport(selection);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                this.renderDecorationOnLine(canvasContext, lineOffsetMap, selection, this._selectionColor, layout, line, lineHeight, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n            }\n        }\n    }\n    _renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, minimapLineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        // Loop forwards to hit first decorations with lower `zIndex`\n        for (const decoration of decorations) {\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions) {\n                continue;\n            }\n            const intersection = layout.intersectWithViewport(decoration.range);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                switch (minimapOptions.position) {\n                    case MinimapPosition.Inline:\n                        this.renderDecorationOnLine(canvasContext, lineOffsetMap, decoration.range, decorationColor, layout, line, minimapLineHeight, minimapLineHeight, tabSize, characterWidth, canvasInnerWidth);\n                        continue;\n                    case MinimapPosition.Gutter: {\n                        const y = layout.getYForLineNumber(line, minimapLineHeight);\n                        const x = 2;\n                        this.renderDecoration(canvasContext, decorationColor, x, y, GUTTER_DECORATION_WIDTH, minimapLineHeight);\n                        continue;\n                    }\n                }\n            }\n        }\n    }\n    renderDecorationOnLine(canvasContext, lineOffsetMap, decorationRange, decorationColor, layout, lineNumber, height, minimapLineHeight, tabSize, charWidth, canvasInnerWidth) {\n        const y = layout.getYForLineNumber(lineNumber, minimapLineHeight);\n        // Skip rendering the line if it's vertically outside our viewport\n        if (y + height < 0 || y > this._model.options.canvasInnerHeight) {\n            return;\n        }\n        const { startLineNumber, endLineNumber } = decorationRange;\n        const startColumn = (startLineNumber === lineNumber ? decorationRange.startColumn : 1);\n        const endColumn = (endLineNumber === lineNumber ? decorationRange.endColumn : this._model.getLineMaxColumn(lineNumber));\n        const x1 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, startColumn, tabSize, charWidth, canvasInnerWidth);\n        const x2 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, endColumn, tabSize, charWidth, canvasInnerWidth);\n        this.renderDecoration(canvasContext, decorationColor, x1, y, x2 - x1, height);\n    }\n    getXOffsetForPosition(lineOffsetMap, lineNumber, column, tabSize, charWidth, canvasInnerWidth) {\n        if (column === 1) {\n            return MINIMAP_GUTTER_WIDTH;\n        }\n        const minimumXOffset = (column - 1) * charWidth;\n        if (minimumXOffset >= canvasInnerWidth) {\n            // there is no need to look at actual characters,\n            // as this column is certainly after the minimap width\n            return canvasInnerWidth;\n        }\n        // Cache line offset data so that it is only read once per line\n        let lineIndexToXOffset = lineOffsetMap.get(lineNumber);\n        if (!lineIndexToXOffset) {\n            const lineData = this._model.getLineContent(lineNumber);\n            lineIndexToXOffset = [MINIMAP_GUTTER_WIDTH];\n            let prevx = MINIMAP_GUTTER_WIDTH;\n            for (let i = 1; i < lineData.length + 1; i++) {\n                const charCode = lineData.charCodeAt(i - 1);\n                const dx = charCode === 9 /* CharCode.Tab */\n                    ? tabSize * charWidth\n                    : strings.isFullWidthCharacter(charCode)\n                        ? 2 * charWidth\n                        : charWidth;\n                const x = prevx + dx;\n                if (x >= canvasInnerWidth) {\n                    // no need to keep on going, as we've hit the canvas width\n                    lineIndexToXOffset[i] = canvasInnerWidth;\n                    break;\n                }\n                lineIndexToXOffset[i] = x;\n                prevx = x;\n            }\n            lineOffsetMap.set(lineNumber, lineIndexToXOffset);\n        }\n        if (column - 1 < lineIndexToXOffset.length) {\n            return lineIndexToXOffset[column - 1];\n        }\n        // goes over the canvas width\n        return canvasInnerWidth;\n    }\n    renderDecoration(canvasContext, decorationColor, x, y, width, height) {\n        canvasContext.fillStyle = decorationColor && decorationColor.toString() || '';\n        canvasContext.fillRect(x, y, width, height);\n    }\n    renderLines(layout) {\n        const startLineNumber = layout.startLineNumber;\n        const endLineNumber = layout.endLineNumber;\n        const minimapLineHeight = this._model.options.minimapLineHeight;\n        // Check if nothing changed w.r.t. lines from last frame\n        if (this._lastRenderData && this._lastRenderData.linesEquals(layout)) {\n            const _lastData = this._lastRenderData._get();\n            // Nice!! Nothing changed from last frame\n            return new RenderData(layout, _lastData.imageData, _lastData.lines);\n        }\n        // Oh well!! We need to repaint some lines...\n        const imageData = this._getBuffer();\n        if (!imageData) {\n            // 0 width or 0 height canvas, nothing to do\n            return null;\n        }\n        // Render untouched lines by using last rendered data.\n        const [_dirtyY1, _dirtyY2, needed] = InnerMinimap._renderUntouchedLines(imageData, layout.topPaddingLineCount, startLineNumber, endLineNumber, minimapLineHeight, this._lastRenderData);\n        // Fetch rendering info from view model for rest of lines that need rendering.\n        const lineInfo = this._model.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed);\n        const tabSize = this._model.getOptions().tabSize;\n        const defaultBackground = this._model.options.defaultBackgroundColor;\n        const background = this._model.options.backgroundColor;\n        const foregroundAlpha = this._model.options.foregroundAlpha;\n        const tokensColorTracker = this._model.tokensColorTracker;\n        const useLighterFont = tokensColorTracker.backgroundIsLight();\n        const renderMinimap = this._model.options.renderMinimap;\n        const charRenderer = this._model.options.charRenderer();\n        const fontScale = this._model.options.fontScale;\n        const minimapCharWidth = this._model.options.minimapCharWidth;\n        const baseCharHeight = (renderMinimap === 1 /* RenderMinimap.Text */ ? 2 /* Constants.BASE_CHAR_HEIGHT */ : 2 /* Constants.BASE_CHAR_HEIGHT */ + 1);\n        const renderMinimapLineHeight = baseCharHeight * fontScale;\n        const innerLinePadding = (minimapLineHeight > renderMinimapLineHeight ? Math.floor((minimapLineHeight - renderMinimapLineHeight) / 2) : 0);\n        // Render the rest of lines\n        const backgroundA = background.a / 255;\n        const renderBackground = new RGBA8(Math.round((background.r - defaultBackground.r) * backgroundA + defaultBackground.r), Math.round((background.g - defaultBackground.g) * backgroundA + defaultBackground.g), Math.round((background.b - defaultBackground.b) * backgroundA + defaultBackground.b), 255);\n        let dy = layout.topPaddingLineCount * minimapLineHeight;\n        const renderedLines = [];\n        for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n            if (needed[lineIndex]) {\n                InnerMinimap._renderLine(imageData, renderBackground, background.a, useLighterFont, renderMinimap, minimapCharWidth, tokensColorTracker, foregroundAlpha, charRenderer, dy, innerLinePadding, tabSize, lineInfo[lineIndex], fontScale, minimapLineHeight);\n            }\n            renderedLines[lineIndex] = new MinimapLine(dy);\n            dy += minimapLineHeight;\n        }\n        const dirtyY1 = (_dirtyY1 === -1 ? 0 : _dirtyY1);\n        const dirtyY2 = (_dirtyY2 === -1 ? imageData.height : _dirtyY2);\n        const dirtyHeight = dirtyY2 - dirtyY1;\n        // Finally, paint to the canvas\n        const ctx = this._canvas.domNode.getContext('2d');\n        ctx.putImageData(imageData, 0, 0, 0, dirtyY1, imageData.width, dirtyHeight);\n        // Save rendered data for reuse on next frame if possible\n        return new RenderData(layout, imageData, renderedLines);\n    }\n    static _renderUntouchedLines(target, topPaddingLineCount, startLineNumber, endLineNumber, minimapLineHeight, lastRenderData) {\n        const needed = [];\n        if (!lastRenderData) {\n            for (let i = 0, len = endLineNumber - startLineNumber + 1; i < len; i++) {\n                needed[i] = true;\n            }\n            return [-1, -1, needed];\n        }\n        const _lastData = lastRenderData._get();\n        const lastTargetData = _lastData.imageData.data;\n        const lastStartLineNumber = _lastData.rendLineNumberStart;\n        const lastLines = _lastData.lines;\n        const lastLinesLength = lastLines.length;\n        const WIDTH = target.width;\n        const targetData = target.data;\n        const maxDestPixel = (endLineNumber - startLineNumber + 1) * minimapLineHeight * WIDTH * 4;\n        let dirtyPixel1 = -1; // the pixel offset up to which all the data is equal to the prev frame\n        let dirtyPixel2 = -1; // the pixel offset after which all the data is equal to the prev frame\n        let copySourceStart = -1;\n        let copySourceEnd = -1;\n        let copyDestStart = -1;\n        let copyDestEnd = -1;\n        let dest_dy = topPaddingLineCount * minimapLineHeight;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - startLineNumber;\n            const lastLineIndex = lineNumber - lastStartLineNumber;\n            const source_dy = (lastLineIndex >= 0 && lastLineIndex < lastLinesLength ? lastLines[lastLineIndex].dy : -1);\n            if (source_dy === -1) {\n                needed[lineIndex] = true;\n                dest_dy += minimapLineHeight;\n                continue;\n            }\n            const sourceStart = source_dy * WIDTH * 4;\n            const sourceEnd = (source_dy + minimapLineHeight) * WIDTH * 4;\n            const destStart = dest_dy * WIDTH * 4;\n            const destEnd = (dest_dy + minimapLineHeight) * WIDTH * 4;\n            if (copySourceEnd === sourceStart && copyDestEnd === destStart) {\n                // contiguous zone => extend copy request\n                copySourceEnd = sourceEnd;\n                copyDestEnd = destEnd;\n            }\n            else {\n                if (copySourceStart !== -1) {\n                    // flush existing copy request\n                    targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n                    if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                        dirtyPixel1 = copySourceEnd;\n                    }\n                    if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                        dirtyPixel2 = copySourceStart;\n                    }\n                }\n                copySourceStart = sourceStart;\n                copySourceEnd = sourceEnd;\n                copyDestStart = destStart;\n                copyDestEnd = destEnd;\n            }\n            needed[lineIndex] = false;\n            dest_dy += minimapLineHeight;\n        }\n        if (copySourceStart !== -1) {\n            // flush existing copy request\n            targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n            if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                dirtyPixel1 = copySourceEnd;\n            }\n            if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                dirtyPixel2 = copySourceStart;\n            }\n        }\n        const dirtyY1 = (dirtyPixel1 === -1 ? -1 : dirtyPixel1 / (WIDTH * 4));\n        const dirtyY2 = (dirtyPixel2 === -1 ? -1 : dirtyPixel2 / (WIDTH * 4));\n        return [dirtyY1, dirtyY2, needed];\n    }\n    static _renderLine(target, backgroundColor, backgroundAlpha, useLighterFont, renderMinimap, charWidth, colorTracker, foregroundAlpha, minimapCharRenderer, dy, innerLinePadding, tabSize, lineData, fontScale, minimapLineHeight) {\n        const content = lineData.content;\n        const tokens = lineData.tokens;\n        const maxDx = target.width - charWidth;\n        const force1pxHeight = (minimapLineHeight === 1);\n        let dx = MINIMAP_GUTTER_WIDTH;\n        let charIndex = 0;\n        let tabsCharDelta = 0;\n        for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n            const tokenEndIndex = tokens.getEndOffset(tokenIndex);\n            const tokenColorId = tokens.getForeground(tokenIndex);\n            const tokenColor = colorTracker.getColor(tokenColorId);\n            for (; charIndex < tokenEndIndex; charIndex++) {\n                if (dx > maxDx) {\n                    // hit edge of minimap\n                    return;\n                }\n                const charCode = content.charCodeAt(charIndex);\n                if (charCode === 9 /* CharCode.Tab */) {\n                    const insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n                    tabsCharDelta += insertSpacesCount - 1;\n                    // No need to render anything since tab is invisible\n                    dx += insertSpacesCount * charWidth;\n                }\n                else if (charCode === 32 /* CharCode.Space */) {\n                    // No need to render anything since space is invisible\n                    dx += charWidth;\n                }\n                else {\n                    // Render twice for a full width character\n                    const count = strings.isFullWidthCharacter(charCode) ? 2 : 1;\n                    for (let i = 0; i < count; i++) {\n                        if (renderMinimap === 2 /* RenderMinimap.Blocks */) {\n                            minimapCharRenderer.blockRenderChar(target, dx, dy + innerLinePadding, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight);\n                        }\n                        else { // RenderMinimap.Text\n                            minimapCharRenderer.renderChar(target, dx, dy + innerLinePadding, charCode, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight);\n                        }\n                        dx += charWidth;\n                        if (dx > maxDx) {\n                            // hit edge of minimap\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nclass ContiguousLineMap {\n    constructor(startLineNumber, endLineNumber, defaultValue) {\n        this._startLineNumber = startLineNumber;\n        this._endLineNumber = endLineNumber;\n        this._defaultValue = defaultValue;\n        this._values = [];\n        for (let i = 0, count = this._endLineNumber - this._startLineNumber + 1; i < count; i++) {\n            this._values[i] = defaultValue;\n        }\n    }\n    has(lineNumber) {\n        return (this.get(lineNumber) !== this._defaultValue);\n    }\n    set(lineNumber, value) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return;\n        }\n        this._values[lineNumber - this._startLineNumber] = value;\n    }\n    get(lineNumber) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return this._defaultValue;\n        }\n        return this._values[lineNumber - this._startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './overlayWidgets.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewOverlayWidgets extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._widgets = {};\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 4 /* PartFingerprint.OverlayWidgets */);\n        this._domNode.setClassName('overlayWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        return true;\n    }\n    // ---- end view event handlers\n    addWidget(widget) {\n        const domNode = createFastDomNode(widget.getDomNode());\n        this._widgets[widget.getId()] = {\n            widget: widget,\n            preference: null,\n            domNode: domNode\n        };\n        // This is sync because a widget wants to be in the dom\n        domNode.setPosition('absolute');\n        domNode.setAttribute('widgetId', widget.getId());\n        this._domNode.appendChild(domNode);\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, preference) {\n        const widgetData = this._widgets[widget.getId()];\n        if (widgetData.preference === preference) {\n            return false;\n        }\n        widgetData.preference = preference;\n        this.setShouldRender();\n        return true;\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._widgets[widgetId];\n            const domNode = widgetData.domNode.domNode;\n            delete this._widgets[widgetId];\n            domNode.parentNode.removeChild(domNode);\n            this.setShouldRender();\n        }\n    }\n    _renderWidget(widgetData) {\n        const domNode = widgetData.domNode;\n        if (widgetData.preference === null) {\n            domNode.setTop('');\n            return;\n        }\n        if (widgetData.preference === 0 /* OverlayWidgetPositionPreference.TOP_RIGHT_CORNER */) {\n            domNode.setTop(0);\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 1 /* OverlayWidgetPositionPreference.BOTTOM_RIGHT_CORNER */) {\n            const widgetHeight = domNode.domNode.clientHeight;\n            domNode.setTop((this._editorHeight - widgetHeight - 2 * this._horizontalScrollbarHeight));\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 2 /* OverlayWidgetPositionPreference.TOP_CENTER */) {\n            domNode.setTop(0);\n            domNode.domNode.style.right = '50%';\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._editorWidth);\n        const keys = Object.keys(this._widgets);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const widgetId = keys[i];\n            this._renderWidget(this._widgets[widgetId]);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';\nclass Settings {\n    constructor(config, theme) {\n        const options = config.options;\n        this.lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this.pixelRatio = options.get(136 /* EditorOption.pixelRatio */);\n        this.overviewRulerLanes = options.get(79 /* EditorOption.overviewRulerLanes */);\n        this.renderBorder = options.get(78 /* EditorOption.overviewRulerBorder */);\n        const borderColor = theme.getColor(editorOverviewRulerBorder);\n        this.borderColor = borderColor ? borderColor.toString() : null;\n        this.hideCursor = options.get(56 /* EditorOption.hideCursorInOverviewRuler */);\n        const cursorColor = theme.getColor(editorCursorForeground);\n        this.cursorColor = cursorColor ? cursorColor.transparent(0.7).toString() : null;\n        this.themeType = theme.type;\n        const minimapOpts = options.get(69 /* EditorOption.minimap */);\n        const minimapEnabled = minimapOpts.enabled;\n        const minimapSide = minimapOpts.side;\n        const themeColor = theme.getColor(editorOverviewRulerBackground);\n        const defaultBackground = TokenizationRegistry.getDefaultBackground();\n        if (themeColor) {\n            this.backgroundColor = themeColor;\n        }\n        else if (minimapEnabled && minimapSide === 'right') {\n            this.backgroundColor = defaultBackground;\n        }\n        else {\n            this.backgroundColor = null;\n        }\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        const position = layoutInfo.overviewRuler;\n        this.top = position.top;\n        this.right = position.right;\n        this.domWidth = position.width;\n        this.domHeight = position.height;\n        if (this.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this.canvasWidth = 0;\n            this.canvasHeight = 0;\n        }\n        else {\n            this.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n            this.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n        }\n        const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n        this.x = x;\n        this.w = w;\n    }\n    _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n        const remainingWidth = canvasWidth - canvasLeftOffset;\n        if (laneCount >= 3) {\n            const leftWidth = Math.floor(remainingWidth / 3);\n            const rightWidth = Math.floor(remainingWidth / 3);\n            const centerWidth = remainingWidth - leftWidth - rightWidth;\n            const leftOffset = canvasLeftOffset;\n            const centerOffset = leftOffset + leftWidth;\n            const rightOffset = leftOffset + leftWidth + centerWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth,\n                    centerWidth,\n                    leftWidth + centerWidth,\n                    rightWidth,\n                    leftWidth + centerWidth + rightWidth,\n                    centerWidth + rightWidth,\n                    leftWidth + centerWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else if (laneCount === 2) {\n            const leftWidth = Math.floor(remainingWidth / 2);\n            const rightWidth = remainingWidth - leftWidth;\n            const leftOffset = canvasLeftOffset;\n            const rightOffset = leftOffset + leftWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth,\n                    leftWidth,\n                    leftWidth,\n                    rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else {\n            const offset = canvasLeftOffset;\n            const width = remainingWidth;\n            return [\n                [\n                    0,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset, // Left | Center | Right\n                ], [\n                    0,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width, // Left | Center | Right\n                ]\n            ];\n        }\n    }\n    equals(other) {\n        return (this.lineHeight === other.lineHeight\n            && this.pixelRatio === other.pixelRatio\n            && this.overviewRulerLanes === other.overviewRulerLanes\n            && this.renderBorder === other.renderBorder\n            && this.borderColor === other.borderColor\n            && this.hideCursor === other.hideCursor\n            && this.cursorColor === other.cursorColor\n            && this.themeType === other.themeType\n            && Color.equals(this.backgroundColor, other.backgroundColor)\n            && this.top === other.top\n            && this.right === other.right\n            && this.domWidth === other.domWidth\n            && this.domHeight === other.domHeight\n            && this.canvasWidth === other.canvasWidth\n            && this.canvasHeight === other.canvasHeight);\n    }\n}\nexport class DecorationsOverviewRuler extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName('decorationsOverviewRuler');\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateSettings(false);\n        this._tokensColorTrackerListener = TokenizationRegistry.onDidChange((e) => {\n            if (e.changedColorMap) {\n                this._updateSettings(true);\n            }\n        });\n        this._cursorPositions = [];\n    }\n    dispose() {\n        super.dispose();\n        this._tokensColorTrackerListener.dispose();\n    }\n    _updateSettings(renderNow) {\n        const newSettings = new Settings(this._context.configuration, this._context.theme);\n        if (this._settings && this._settings.equals(newSettings)) {\n            // nothing to do\n            return false;\n        }\n        this._settings = newSettings;\n        this._domNode.setTop(this._settings.top);\n        this._domNode.setRight(this._settings.right);\n        this._domNode.setWidth(this._settings.domWidth);\n        this._domNode.setHeight(this._settings.domHeight);\n        this._domNode.domNode.width = this._settings.canvasWidth;\n        this._domNode.domNode.height = this._settings.canvasHeight;\n        if (renderNow) {\n            this._render();\n        }\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._updateSettings(false);\n    }\n    onCursorStateChanged(e) {\n        this._cursorPositions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            this._cursorPositions[i] = e.selections[i].getPosition();\n        }\n        this._cursorPositions.sort(Position.compare);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsOverviewRuler) {\n            return true;\n        }\n        return false;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        return this._updateSettings(false);\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(editorCtx) {\n        this._render();\n    }\n    _render() {\n        const backgroundColor = this._settings.backgroundColor;\n        if (this._settings.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this._domNode.setBackgroundColor(backgroundColor ? Color.Format.CSS.formatHexA(backgroundColor) : '');\n            this._domNode.setDisplay('none');\n            return;\n        }\n        this._domNode.setDisplay('block');\n        const canvasWidth = this._settings.canvasWidth;\n        const canvasHeight = this._settings.canvasHeight;\n        const lineHeight = this._settings.lineHeight;\n        const viewLayout = this._context.viewLayout;\n        const outerHeight = this._context.viewLayout.getScrollHeight();\n        const heightRatio = canvasHeight / outerHeight;\n        const decorations = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);\n        const minDecorationHeight = (6 /* Constants.MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio) | 0;\n        const halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n        const canvasCtx = this._domNode.domNode.getContext('2d');\n        if (backgroundColor) {\n            if (backgroundColor.isOpaque()) {\n                // We have a background color which is opaque, we can just paint the entire surface with it\n                canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n            }\n            else {\n                // We have a background color which is transparent, we need to first clear the surface and\n                // then fill it\n                canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n                canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n            }\n        }\n        else {\n            // We don't have a background color\n            canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        }\n        const x = this._settings.x;\n        const w = this._settings.w;\n        decorations.sort(OverviewRulerDecorationsGroup.cmp);\n        for (const decorationGroup of decorations) {\n            const color = decorationGroup.color;\n            const decorationGroupData = decorationGroup.data;\n            canvasCtx.fillStyle = color;\n            let prevLane = 0;\n            let prevY1 = 0;\n            let prevY2 = 0;\n            for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n                const lane = decorationGroupData[3 * i];\n                const startLineNumber = decorationGroupData[3 * i + 1];\n                const endLineNumber = decorationGroupData[3 * i + 2];\n                let y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n                let y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n                const height = y2 - y1;\n                if (height < minDecorationHeight) {\n                    let yCenter = ((y1 + y2) / 2) | 0;\n                    if (yCenter < halfMinDecorationHeight) {\n                        yCenter = halfMinDecorationHeight;\n                    }\n                    else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n                        yCenter = canvasHeight - halfMinDecorationHeight;\n                    }\n                    y1 = yCenter - halfMinDecorationHeight;\n                    y2 = yCenter + halfMinDecorationHeight;\n                }\n                if (y1 > prevY2 + 1 || lane !== prevLane) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n                    }\n                    prevLane = lane;\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n        }\n        // Draw cursors\n        if (!this._settings.hideCursor && this._settings.cursorColor) {\n            const cursorHeight = (2 * this._settings.pixelRatio) | 0;\n            const halfCursorHeight = (cursorHeight / 2) | 0;\n            const cursorX = this._settings.x[7 /* OverviewRulerLane.Full */];\n            const cursorW = this._settings.w[7 /* OverviewRulerLane.Full */];\n            canvasCtx.fillStyle = this._settings.cursorColor;\n            let prevY1 = -100;\n            let prevY2 = -100;\n            for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n                const cursor = this._cursorPositions[i];\n                let yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n                if (yCenter < halfCursorHeight) {\n                    yCenter = halfCursorHeight;\n                }\n                else if (yCenter + halfCursorHeight > canvasHeight) {\n                    yCenter = canvasHeight - halfCursorHeight;\n                }\n                const y1 = yCenter - halfCursorHeight;\n                const y2 = y1 + cursorHeight;\n                if (y1 > prevY2 + 1) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n                    }\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n        }\n        if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n            canvasCtx.beginPath();\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = this._settings.borderColor;\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(0, canvasHeight);\n            canvasCtx.stroke();\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(canvasWidth, 0);\n            canvasCtx.stroke();\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { OverviewZoneManager } from '../../../common/viewModel/overviewZoneManager.js';\nimport { ViewEventHandler } from '../../../common/viewEventHandler.js';\nexport class OverviewRuler extends ViewEventHandler {\n    constructor(context, cssClassName) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName(cssClassName);\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._zoneManager = new OverviewZoneManager((lineNumber) => this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber));\n        this._zoneManager.setDOMWidth(0);\n        this._zoneManager.setDOMHeight(0);\n        this._zoneManager.setOuterHeight(this._context.viewLayout.getScrollHeight());\n        this._zoneManager.setLineHeight(options.get(63 /* EditorOption.lineHeight */));\n        this._zoneManager.setPixelRatio(options.get(136 /* EditorOption.pixelRatio */));\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        if (e.hasChanged(63 /* EditorOption.lineHeight */)) {\n            this._zoneManager.setLineHeight(options.get(63 /* EditorOption.lineHeight */));\n            this._render();\n        }\n        if (e.hasChanged(136 /* EditorOption.pixelRatio */)) {\n            this._zoneManager.setPixelRatio(options.get(136 /* EditorOption.pixelRatio */));\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n        return true;\n    }\n    onFlushed(e) {\n        this._render();\n        return true;\n    }\n    onScrollChanged(e) {\n        if (e.scrollHeightChanged) {\n            this._zoneManager.setOuterHeight(e.scrollHeight);\n            this._render();\n        }\n        return true;\n    }\n    onZonesChanged(e) {\n        this._render();\n        return true;\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    setLayout(position) {\n        this._domNode.setTop(position.top);\n        this._domNode.setRight(position.right);\n        let hasChanged = false;\n        hasChanged = this._zoneManager.setDOMWidth(position.width) || hasChanged;\n        hasChanged = this._zoneManager.setDOMHeight(position.height) || hasChanged;\n        if (hasChanged) {\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n    }\n    setZones(zones) {\n        this._zoneManager.setZones(zones);\n        this._render();\n    }\n    _render() {\n        if (this._zoneManager.getOuterHeight() === 0) {\n            return false;\n        }\n        const width = this._zoneManager.getCanvasWidth();\n        const height = this._zoneManager.getCanvasHeight();\n        const colorZones = this._zoneManager.resolveColorZones();\n        const id2Color = this._zoneManager.getId2Color();\n        const ctx = this._domNode.domNode.getContext('2d');\n        ctx.clearRect(0, 0, width, height);\n        if (colorZones.length > 0) {\n            this._renderOneLane(ctx, colorZones, id2Color, width);\n        }\n        return true;\n    }\n    _renderOneLane(ctx, colorZones, id2Color, width) {\n        let currentColorId = 0;\n        let currentFrom = 0;\n        let currentTo = 0;\n        for (const zone of colorZones) {\n            const zoneColorId = zone.colorId;\n            const zoneFrom = zone.from;\n            const zoneTo = zone.to;\n            if (zoneColorId !== currentColorId) {\n                ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                currentColorId = zoneColorId;\n                ctx.fillStyle = id2Color[currentColorId];\n                currentFrom = zoneFrom;\n                currentTo = zoneTo;\n            }\n            else {\n                if (currentTo >= zoneFrom) {\n                    currentTo = Math.max(currentTo, zoneTo);\n                }\n                else {\n                    ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                    currentFrom = zoneFrom;\n                    currentTo = zoneTo;\n                }\n            }\n        }\n        ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './rulers.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class Rulers extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.domNode.setClassName('view-rulers');\n        this._renderedRulers = [];\n        const options = this._context.configuration.options;\n        this._rulers = options.get(96 /* EditorOption.rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(47 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n    }\n    dispose() {\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._rulers = options.get(96 /* EditorOption.rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(47 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    _ensureRulersCount() {\n        const currentCount = this._renderedRulers.length;\n        const desiredCount = this._rulers.length;\n        if (currentCount === desiredCount) {\n            // Nothing to do\n            return;\n        }\n        if (currentCount < desiredCount) {\n            const { tabSize } = this._context.viewModel.model.getOptions();\n            const rulerWidth = tabSize;\n            let addCount = desiredCount - currentCount;\n            while (addCount > 0) {\n                const node = createFastDomNode(document.createElement('div'));\n                node.setClassName('view-ruler');\n                node.setWidth(rulerWidth);\n                this.domNode.appendChild(node);\n                this._renderedRulers.push(node);\n                addCount--;\n            }\n            return;\n        }\n        let removeCount = currentCount - desiredCount;\n        while (removeCount > 0) {\n            const node = this._renderedRulers.pop();\n            this.domNode.removeChild(node);\n            removeCount--;\n        }\n    }\n    render(ctx) {\n        this._ensureRulersCount();\n        for (let i = 0, len = this._rulers.length; i < len; i++) {\n            const node = this._renderedRulers[i];\n            const ruler = this._rulers[i];\n            node.setBoxShadow(ruler.color ? `1px 0 0 0 ${ruler.color} inset` : ``);\n            node.setHeight(Math.min(ctx.scrollHeight, 1000000));\n            node.setLeft(ruler.column * this._typicalHalfwidthCharacterWidth);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './scrollDecoration.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class ScrollDecorationViewPart extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._scrollTop = 0;\n        this._width = 0;\n        this._updateWidth();\n        this._shouldShow = false;\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(97 /* EditorOption.scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n    }\n    dispose() {\n        super.dispose();\n    }\n    _updateShouldShow() {\n        const newShouldShow = (this._useShadows && this._scrollTop > 0);\n        if (this._shouldShow !== newShouldShow) {\n            this._shouldShow = newShouldShow;\n            return true;\n        }\n        return false;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _updateWidth() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        if (layoutInfo.minimap.renderMinimap === 0 || (layoutInfo.minimap.minimapWidth > 0 && layoutInfo.minimap.minimapLeft === 0)) {\n            this._width = layoutInfo.width;\n        }\n        else {\n            this._width = layoutInfo.width - layoutInfo.verticalScrollbarWidth;\n        }\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(97 /* EditorOption.scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._updateWidth();\n        this._updateShouldShow();\n        return true;\n    }\n    onScrollChanged(e) {\n        this._scrollTop = e.scrollTop;\n        return this._updateShouldShow();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._width);\n        this._domNode.setClassName(this._shouldShow ? 'scroll-decoration' : '');\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './selections.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorSelectionForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nclass HorizontalRangeWithStyle {\n    constructor(other) {\n        this.left = other.left;\n        this.width = other.width;\n        this.startStyle = null;\n        this.endStyle = null;\n    }\n}\nclass LineVisibleRangesWithStyle {\n    constructor(lineNumber, ranges) {\n        this.lineNumber = lineNumber;\n        this.ranges = ranges;\n    }\n}\nfunction toStyledRange(item) {\n    return new HorizontalRangeWithStyle(item);\n}\nfunction toStyled(item) {\n    return new LineVisibleRangesWithStyle(item.lineNumber, item.ranges.map(toStyledRange));\n}\nclass SelectionsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._previousFrameVisibleRangesWithStyle = [];\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._roundedSelection = options.get(95 /* EditorOption.roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(47 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._selections = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._roundedSelection = options.get(95 /* EditorOption.roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(47 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections.slice(0);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true; //e.inlineDecorationsChanged;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _visibleRangesHaveGaps(linesVisibleRanges) {\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = linesVisibleRanges[i];\n            if (lineVisibleRanges.ranges.length > 1) {\n                // There are two ranges on the same line\n                return true;\n            }\n        }\n        return false;\n    }\n    _enrichVisibleRangesWithStyle(viewport, linesVisibleRanges, previousFrame) {\n        const epsilon = this._typicalHalfwidthCharacterWidth / 4;\n        let previousFrameTop = null;\n        let previousFrameBottom = null;\n        if (previousFrame && previousFrame.length > 0 && linesVisibleRanges.length > 0) {\n            const topLineNumber = linesVisibleRanges[0].lineNumber;\n            if (topLineNumber === viewport.startLineNumber) {\n                for (let i = 0; !previousFrameTop && i < previousFrame.length; i++) {\n                    if (previousFrame[i].lineNumber === topLineNumber) {\n                        previousFrameTop = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            const bottomLineNumber = linesVisibleRanges[linesVisibleRanges.length - 1].lineNumber;\n            if (bottomLineNumber === viewport.endLineNumber) {\n                for (let i = previousFrame.length - 1; !previousFrameBottom && i >= 0; i--) {\n                    if (previousFrame[i].lineNumber === bottomLineNumber) {\n                        previousFrameBottom = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            if (previousFrameTop && !previousFrameTop.startStyle) {\n                previousFrameTop = null;\n            }\n            if (previousFrameBottom && !previousFrameBottom.startStyle) {\n                previousFrameBottom = null;\n            }\n        }\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            // We know for a fact that there is precisely one range on each line\n            const curLineRange = linesVisibleRanges[i].ranges[0];\n            const curLeft = curLineRange.left;\n            const curRight = curLineRange.left + curLineRange.width;\n            const startStyle = {\n                top: 0 /* CornerStyle.EXTERN */,\n                bottom: 0 /* CornerStyle.EXTERN */\n            };\n            const endStyle = {\n                top: 0 /* CornerStyle.EXTERN */,\n                bottom: 0 /* CornerStyle.EXTERN */\n            };\n            if (i > 0) {\n                // Look above\n                const prevLeft = linesVisibleRanges[i - 1].ranges[0].left;\n                const prevRight = linesVisibleRanges[i - 1].ranges[0].left + linesVisibleRanges[i - 1].ranges[0].width;\n                if (abs(curLeft - prevLeft) < epsilon) {\n                    startStyle.top = 2 /* CornerStyle.FLAT */;\n                }\n                else if (curLeft > prevLeft) {\n                    startStyle.top = 1 /* CornerStyle.INTERN */;\n                }\n                if (abs(curRight - prevRight) < epsilon) {\n                    endStyle.top = 2 /* CornerStyle.FLAT */;\n                }\n                else if (prevLeft < curRight && curRight < prevRight) {\n                    endStyle.top = 1 /* CornerStyle.INTERN */;\n                }\n            }\n            else if (previousFrameTop) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.top = previousFrameTop.startStyle.top;\n                endStyle.top = previousFrameTop.endStyle.top;\n            }\n            if (i + 1 < len) {\n                // Look below\n                const nextLeft = linesVisibleRanges[i + 1].ranges[0].left;\n                const nextRight = linesVisibleRanges[i + 1].ranges[0].left + linesVisibleRanges[i + 1].ranges[0].width;\n                if (abs(curLeft - nextLeft) < epsilon) {\n                    startStyle.bottom = 2 /* CornerStyle.FLAT */;\n                }\n                else if (nextLeft < curLeft && curLeft < nextRight) {\n                    startStyle.bottom = 1 /* CornerStyle.INTERN */;\n                }\n                if (abs(curRight - nextRight) < epsilon) {\n                    endStyle.bottom = 2 /* CornerStyle.FLAT */;\n                }\n                else if (curRight < nextRight) {\n                    endStyle.bottom = 1 /* CornerStyle.INTERN */;\n                }\n            }\n            else if (previousFrameBottom) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.bottom = previousFrameBottom.startStyle.bottom;\n                endStyle.bottom = previousFrameBottom.endStyle.bottom;\n            }\n            curLineRange.startStyle = startStyle;\n            curLineRange.endStyle = endStyle;\n        }\n    }\n    _getVisibleRangesWithStyle(selection, ctx, previousFrame) {\n        const _linesVisibleRanges = ctx.linesVisibleRangesForRange(selection, true) || [];\n        const linesVisibleRanges = _linesVisibleRanges.map(toStyled);\n        const visibleRangesHaveGaps = this._visibleRangesHaveGaps(linesVisibleRanges);\n        if (!visibleRangesHaveGaps && this._roundedSelection) {\n            this._enrichVisibleRangesWithStyle(ctx.visibleRange, linesVisibleRanges, previousFrame);\n        }\n        // The visible ranges are sorted TOP-BOTTOM and LEFT-RIGHT\n        return linesVisibleRanges;\n    }\n    _createSelectionPiece(top, height, className, left, width) {\n        return ('<div class=\"cslr '\n            + className\n            + '\" style=\"top:'\n            + top.toString()\n            + 'px;left:'\n            + left.toString()\n            + 'px;width:'\n            + width.toString()\n            + 'px;height:'\n            + height\n            + 'px;\"></div>');\n    }\n    _actualRenderOneSelection(output2, visibleStartLineNumber, hasMultipleSelections, visibleRanges) {\n        if (visibleRanges.length === 0) {\n            return;\n        }\n        const visibleRangesHaveStyle = !!visibleRanges[0].ranges[0].startStyle;\n        const fullLineHeight = (this._lineHeight).toString();\n        const reducedLineHeight = (this._lineHeight - 1).toString();\n        const firstLineNumber = visibleRanges[0].lineNumber;\n        const lastLineNumber = visibleRanges[visibleRanges.length - 1].lineNumber;\n        for (let i = 0, len = visibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = visibleRanges[i];\n            const lineNumber = lineVisibleRanges.lineNumber;\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const lineHeight = hasMultipleSelections ? (lineNumber === lastLineNumber || lineNumber === firstLineNumber ? reducedLineHeight : fullLineHeight) : fullLineHeight;\n            const top = hasMultipleSelections ? (lineNumber === firstLineNumber ? 1 : 0) : 0;\n            let innerCornerOutput = '';\n            let restOfSelectionOutput = '';\n            for (let j = 0, lenJ = lineVisibleRanges.ranges.length; j < lenJ; j++) {\n                const visibleRange = lineVisibleRanges.ranges[j];\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 1 /* CornerStyle.INTERN */ || startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                        // Reverse rounded corner to the left\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (startStyle.top === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                        }\n                        if (startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                    if (endStyle.top === 1 /* CornerStyle.INTERN */ || endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                        // Reverse rounded corner to the right\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (endStyle.top === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                        }\n                        if (endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                }\n                let className = SelectionsOverlay.SELECTION_CLASS_NAME;\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                    }\n                    if (startStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                    }\n                    if (endStyle.top === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                    }\n                    if (endStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                    }\n                }\n                restOfSelectionOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left, visibleRange.width);\n            }\n            output2[lineIndex][0] += innerCornerOutput;\n            output2[lineIndex][1] += restOfSelectionOutput;\n        }\n    }\n    prepareRender(ctx) {\n        // Build HTML for inner corners separate from HTML for the rest of selections,\n        // as the inner corner HTML can interfere with that of other selections.\n        // In final render, make sure to place the inner corner HTML before the rest of selection HTML. See issue #77777.\n        const output = [];\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = ['', ''];\n        }\n        const thisFrameVisibleRangesWithStyle = [];\n        for (let i = 0, len = this._selections.length; i < len; i++) {\n            const selection = this._selections[i];\n            if (selection.isEmpty()) {\n                thisFrameVisibleRangesWithStyle[i] = null;\n                continue;\n            }\n            const visibleRangesWithStyle = this._getVisibleRangesWithStyle(selection, ctx, this._previousFrameVisibleRangesWithStyle[i]);\n            thisFrameVisibleRangesWithStyle[i] = visibleRangesWithStyle;\n            this._actualRenderOneSelection(output, visibleStartLineNumber, this._selections.length > 1, visibleRangesWithStyle);\n        }\n        this._previousFrameVisibleRangesWithStyle = thisFrameVisibleRangesWithStyle;\n        this._renderResult = output.map(([internalCorners, restOfSelection]) => internalCorners + restOfSelection);\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nSelectionsOverlay.SELECTION_CLASS_NAME = 'selected-text';\nSelectionsOverlay.SELECTION_TOP_LEFT = 'top-left-radius';\nSelectionsOverlay.SELECTION_BOTTOM_LEFT = 'bottom-left-radius';\nSelectionsOverlay.SELECTION_TOP_RIGHT = 'top-right-radius';\nSelectionsOverlay.SELECTION_BOTTOM_RIGHT = 'bottom-right-radius';\nSelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME = 'monaco-editor-background';\nSelectionsOverlay.ROUNDED_PIECE_WIDTH = 10;\nexport { SelectionsOverlay };\nregisterThemingParticipant((theme, collector) => {\n    const editorSelectionForegroundColor = theme.getColor(editorSelectionForeground);\n    if (editorSelectionForegroundColor && !editorSelectionForegroundColor.isTransparent()) {\n        collector.addRule(`.monaco-editor .view-line span.inline-selected-text { color: ${editorSelectionForegroundColor}; }`);\n    }\n});\nfunction abs(n) {\n    return n < 0 ? -n : n;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass ViewCursorRenderData {\n    constructor(top, left, paddingLeft, width, height, textContent, textContentClassName) {\n        this.top = top;\n        this.left = left;\n        this.paddingLeft = paddingLeft;\n        this.width = width;\n        this.height = height;\n        this.textContent = textContent;\n        this.textContentClassName = textContentClassName;\n    }\n}\nexport class ViewCursor {\n    constructor(context) {\n        this._context = context;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        this._cursorStyle = options.get(25 /* EditorOption.cursorStyle */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(28 /* EditorOption.cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        this._isVisible = true;\n        // Create the dom node\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this._domNode.setHeight(this._lineHeight);\n        this._domNode.setTop(0);\n        this._domNode.setLeft(0);\n        applyFontInfo(this._domNode, fontInfo);\n        this._domNode.setDisplay('none');\n        this._position = new Position(1, 1);\n        this._lastRenderedContent = '';\n        this._renderData = null;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return this._position;\n    }\n    show() {\n        if (!this._isVisible) {\n            this._domNode.setVisibility('inherit');\n            this._isVisible = true;\n        }\n    }\n    hide() {\n        if (this._isVisible) {\n            this._domNode.setVisibility('hidden');\n            this._isVisible = false;\n        }\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        this._cursorStyle = options.get(25 /* EditorOption.cursorStyle */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(28 /* EditorOption.cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        applyFontInfo(this._domNode, fontInfo);\n        return true;\n    }\n    onCursorPositionChanged(position, pauseAnimation) {\n        if (pauseAnimation) {\n            this._domNode.domNode.style.transitionProperty = 'none';\n        }\n        else {\n            this._domNode.domNode.style.transitionProperty = '';\n        }\n        this._position = position;\n        return true;\n    }\n    /**\n     * If `this._position` is inside a grapheme, returns the position where the grapheme starts.\n     * Also returns the next grapheme.\n     */\n    _getGraphemeAwarePosition() {\n        const { lineNumber, column } = this._position;\n        const lineContent = this._context.viewModel.getLineContent(lineNumber);\n        const [startOffset, endOffset] = strings.getCharContainingOffset(lineContent, column - 1);\n        return [new Position(lineNumber, startOffset + 1), lineContent.substring(startOffset, endOffset)];\n    }\n    _prepareRender(ctx) {\n        let textContent = '';\n        let textContentClassName = '';\n        const [position, nextGrapheme] = this._getGraphemeAwarePosition();\n        if (this._cursorStyle === TextEditorCursorStyle.Line || this._cursorStyle === TextEditorCursorStyle.LineThin) {\n            const visibleRange = ctx.visibleRangeForPosition(position);\n            if (!visibleRange || visibleRange.outsideRenderedLine) {\n                // Outside viewport\n                return null;\n            }\n            let width;\n            if (this._cursorStyle === TextEditorCursorStyle.Line) {\n                width = dom.computeScreenAwareSize(this._lineCursorWidth > 0 ? this._lineCursorWidth : 2);\n                if (width > 2) {\n                    textContent = nextGrapheme;\n                    textContentClassName = this._getTokenClassName(position);\n                }\n            }\n            else {\n                width = dom.computeScreenAwareSize(1);\n            }\n            let left = visibleRange.left;\n            let paddingLeft = 0;\n            if (width >= 2 && left >= 1) {\n                // shift the cursor a bit between the characters\n                paddingLeft = 1;\n                left -= paddingLeft;\n            }\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n            return new ViewCursorRenderData(top, left, paddingLeft, width, this._lineHeight, textContent, textContentClassName);\n        }\n        const visibleRangeForCharacter = ctx.linesVisibleRangesForRange(new Range(position.lineNumber, position.column, position.lineNumber, position.column + nextGrapheme.length), false);\n        if (!visibleRangeForCharacter || visibleRangeForCharacter.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const firstVisibleRangeForCharacter = visibleRangeForCharacter[0];\n        if (firstVisibleRangeForCharacter.outsideRenderedLine || firstVisibleRangeForCharacter.ranges.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const range = firstVisibleRangeForCharacter.ranges[0];\n        const width = (nextGrapheme === '\\t'\n            ? this._typicalHalfwidthCharacterWidth\n            : (range.width < 1\n                ? this._typicalHalfwidthCharacterWidth\n                : range.width));\n        if (this._cursorStyle === TextEditorCursorStyle.Block) {\n            textContent = nextGrapheme;\n            textContentClassName = this._getTokenClassName(position);\n        }\n        let top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n        let height = this._lineHeight;\n        // Underline might interfere with clicking\n        if (this._cursorStyle === TextEditorCursorStyle.Underline || this._cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n            top += this._lineHeight - 2;\n            height = 2;\n        }\n        return new ViewCursorRenderData(top, range.left, 0, width, height, textContent, textContentClassName);\n    }\n    _getTokenClassName(position) {\n        const lineData = this._context.viewModel.getViewLineData(position.lineNumber);\n        const tokenIndex = lineData.tokens.findTokenIndexAtOffset(position.column - 1);\n        return lineData.tokens.getClassName(tokenIndex);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRender(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            this._domNode.setDisplay('none');\n            return null;\n        }\n        if (this._lastRenderedContent !== this._renderData.textContent) {\n            this._lastRenderedContent = this._renderData.textContent;\n            this._domNode.domNode.textContent = this._lastRenderedContent;\n        }\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ${this._renderData.textContentClassName}`);\n        this._domNode.setDisplay('block');\n        this._domNode.setTop(this._renderData.top);\n        this._domNode.setLeft(this._renderData.left);\n        this._domNode.setPaddingLeft(this._renderData.paddingLeft);\n        this._domNode.setWidth(this._renderData.width);\n        this._domNode.setLineHeight(this._renderData.height);\n        this._domNode.setHeight(this._renderData.height);\n        return {\n            domNode: this._domNode.domNode,\n            position: this._position,\n            contentLeft: this._renderData.left,\n            height: this._renderData.height,\n            width: 2\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './viewCursors.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { IntervalTimer, TimeoutTimer } from '../../../../base/common/async.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { ViewCursor } from './viewCursor.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { editorCursorBackground, editorCursorForeground } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nclass ViewCursors extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(86 /* EditorOption.readOnly */);\n        this._cursorBlinking = options.get(23 /* EditorOption.cursorBlinking */);\n        this._cursorStyle = options.get(25 /* EditorOption.cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(24 /* EditorOption.cursorSmoothCaretAnimation */);\n        this._selectionIsEmpty = true;\n        this._isComposingInput = false;\n        this._isVisible = false;\n        this._primaryCursor = new ViewCursor(this._context);\n        this._secondaryCursors = [];\n        this._renderData = [];\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateDomClassName();\n        this._domNode.appendChild(this._primaryCursor.getDomNode());\n        this._startCursorBlinkAnimation = new TimeoutTimer();\n        this._cursorFlatBlinkInterval = new IntervalTimer();\n        this._blinkingEnabled = false;\n        this._editorHasFocus = false;\n        this._updateBlinking();\n    }\n    dispose() {\n        super.dispose();\n        this._startCursorBlinkAnimation.dispose();\n        this._cursorFlatBlinkInterval.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onCompositionStart(e) {\n        this._isComposingInput = true;\n        this._updateBlinking();\n        return true;\n    }\n    onCompositionEnd(e) {\n        this._isComposingInput = false;\n        this._updateBlinking();\n        return true;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(86 /* EditorOption.readOnly */);\n        this._cursorBlinking = options.get(23 /* EditorOption.cursorBlinking */);\n        this._cursorStyle = options.get(25 /* EditorOption.cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(24 /* EditorOption.cursorSmoothCaretAnimation */);\n        this._updateBlinking();\n        this._updateDomClassName();\n        this._primaryCursor.onConfigurationChanged(e);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    _onCursorPositionChanged(position, secondaryPositions, reason) {\n        const pauseAnimation = (this._secondaryCursors.length !== secondaryPositions.length\n            || (this._cursorSmoothCaretAnimation === 'explicit' && reason !== 3 /* CursorChangeReason.Explicit */));\n        this._primaryCursor.onCursorPositionChanged(position, pauseAnimation);\n        this._updateBlinking();\n        if (this._secondaryCursors.length < secondaryPositions.length) {\n            // Create new cursors\n            const addCnt = secondaryPositions.length - this._secondaryCursors.length;\n            for (let i = 0; i < addCnt; i++) {\n                const newCursor = new ViewCursor(this._context);\n                this._domNode.domNode.insertBefore(newCursor.getDomNode().domNode, this._primaryCursor.getDomNode().domNode.nextSibling);\n                this._secondaryCursors.push(newCursor);\n            }\n        }\n        else if (this._secondaryCursors.length > secondaryPositions.length) {\n            // Remove some cursors\n            const removeCnt = this._secondaryCursors.length - secondaryPositions.length;\n            for (let i = 0; i < removeCnt; i++) {\n                this._domNode.removeChild(this._secondaryCursors[0].getDomNode());\n                this._secondaryCursors.splice(0, 1);\n            }\n        }\n        for (let i = 0; i < secondaryPositions.length; i++) {\n            this._secondaryCursors[i].onCursorPositionChanged(secondaryPositions[i], pauseAnimation);\n        }\n    }\n    onCursorStateChanged(e) {\n        const positions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            positions[i] = e.selections[i].getPosition();\n        }\n        this._onCursorPositionChanged(positions[0], positions.slice(1), e.reason);\n        const selectionIsEmpty = e.selections[0].isEmpty();\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            this._updateDomClassName();\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        this._editorHasFocus = e.isFocused;\n        this._updateBlinking();\n        return false;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onTokensChanged(e) {\n        const shouldRender = (position) => {\n            for (let i = 0, len = e.ranges.length; i < len; i++) {\n                if (e.ranges[i].fromLineNumber <= position.lineNumber && position.lineNumber <= e.ranges[i].toLineNumber) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        if (shouldRender(this._primaryCursor.getPosition())) {\n            return true;\n        }\n        for (const secondaryCursor of this._secondaryCursors) {\n            if (shouldRender(secondaryCursor.getPosition())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // ---- blinking logic\n    _getCursorBlinking() {\n        if (this._isComposingInput) {\n            // avoid double cursors\n            return 0 /* TextEditorCursorBlinkingStyle.Hidden */;\n        }\n        if (!this._editorHasFocus) {\n            return 0 /* TextEditorCursorBlinkingStyle.Hidden */;\n        }\n        if (this._readOnly) {\n            return 5 /* TextEditorCursorBlinkingStyle.Solid */;\n        }\n        return this._cursorBlinking;\n    }\n    _updateBlinking() {\n        this._startCursorBlinkAnimation.cancel();\n        this._cursorFlatBlinkInterval.cancel();\n        const blinkingStyle = this._getCursorBlinking();\n        // hidden and solid are special as they involve no animations\n        const isHidden = (blinkingStyle === 0 /* TextEditorCursorBlinkingStyle.Hidden */);\n        const isSolid = (blinkingStyle === 5 /* TextEditorCursorBlinkingStyle.Solid */);\n        if (isHidden) {\n            this._hide();\n        }\n        else {\n            this._show();\n        }\n        this._blinkingEnabled = false;\n        this._updateDomClassName();\n        if (!isHidden && !isSolid) {\n            if (blinkingStyle === 1 /* TextEditorCursorBlinkingStyle.Blink */) {\n                // flat blinking is handled by JavaScript to save battery life due to Chromium step timing issue https://bugs.chromium.org/p/chromium/issues/detail?id=361587\n                this._cursorFlatBlinkInterval.cancelAndSet(() => {\n                    if (this._isVisible) {\n                        this._hide();\n                    }\n                    else {\n                        this._show();\n                    }\n                }, ViewCursors.BLINK_INTERVAL);\n            }\n            else {\n                this._startCursorBlinkAnimation.setIfNotSet(() => {\n                    this._blinkingEnabled = true;\n                    this._updateDomClassName();\n                }, ViewCursors.BLINK_INTERVAL);\n            }\n        }\n    }\n    // --- end blinking logic\n    _updateDomClassName() {\n        this._domNode.setClassName(this._getClassName());\n    }\n    _getClassName() {\n        let result = 'cursors-layer';\n        if (!this._selectionIsEmpty) {\n            result += ' has-selection';\n        }\n        switch (this._cursorStyle) {\n            case TextEditorCursorStyle.Line:\n                result += ' cursor-line-style';\n                break;\n            case TextEditorCursorStyle.Block:\n                result += ' cursor-block-style';\n                break;\n            case TextEditorCursorStyle.Underline:\n                result += ' cursor-underline-style';\n                break;\n            case TextEditorCursorStyle.LineThin:\n                result += ' cursor-line-thin-style';\n                break;\n            case TextEditorCursorStyle.BlockOutline:\n                result += ' cursor-block-outline-style';\n                break;\n            case TextEditorCursorStyle.UnderlineThin:\n                result += ' cursor-underline-thin-style';\n                break;\n            default:\n                result += ' cursor-line-style';\n        }\n        if (this._blinkingEnabled) {\n            switch (this._getCursorBlinking()) {\n                case 1 /* TextEditorCursorBlinkingStyle.Blink */:\n                    result += ' cursor-blink';\n                    break;\n                case 2 /* TextEditorCursorBlinkingStyle.Smooth */:\n                    result += ' cursor-smooth';\n                    break;\n                case 3 /* TextEditorCursorBlinkingStyle.Phase */:\n                    result += ' cursor-phase';\n                    break;\n                case 4 /* TextEditorCursorBlinkingStyle.Expand */:\n                    result += ' cursor-expand';\n                    break;\n                case 5 /* TextEditorCursorBlinkingStyle.Solid */:\n                    result += ' cursor-solid';\n                    break;\n                default:\n                    result += ' cursor-solid';\n            }\n        }\n        else {\n            result += ' cursor-solid';\n        }\n        if (this._cursorSmoothCaretAnimation === 'on' || this._cursorSmoothCaretAnimation === 'explicit') {\n            result += ' cursor-smooth-caret-animation';\n        }\n        return result;\n    }\n    _show() {\n        this._primaryCursor.show();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].show();\n        }\n        this._isVisible = true;\n    }\n    _hide() {\n        this._primaryCursor.hide();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].hide();\n        }\n        this._isVisible = false;\n    }\n    // ---- IViewPart implementation\n    prepareRender(ctx) {\n        this._primaryCursor.prepareRender(ctx);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const renderData = [];\n        let renderDataLen = 0;\n        const primaryRenderData = this._primaryCursor.render(ctx);\n        if (primaryRenderData) {\n            renderData[renderDataLen++] = primaryRenderData;\n        }\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            const secondaryRenderData = this._secondaryCursors[i].render(ctx);\n            if (secondaryRenderData) {\n                renderData[renderDataLen++] = secondaryRenderData;\n            }\n        }\n        this._renderData = renderData;\n    }\n    getLastRenderData() {\n        return this._renderData;\n    }\n}\nViewCursors.BLINK_INTERVAL = 500;\nexport { ViewCursors };\nregisterThemingParticipant((theme, collector) => {\n    const caret = theme.getColor(editorCursorForeground);\n    if (caret) {\n        let caretBackground = theme.getColor(editorCursorBackground);\n        if (!caretBackground) {\n            caretBackground = caret.opposite();\n        }\n        collector.addRule(`.monaco-editor .cursors-layer .cursor { background-color: ${caret}; border-color: ${caret}; color: ${caretBackground}; }`);\n        if (isHighContrast(theme.type)) {\n            collector.addRule(`.monaco-editor .cursors-layer.has-selection .cursor { border-left: 1px solid ${caretBackground}; border-right: 1px solid ${caretBackground}; }`);\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\nexport class ViewZones extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName('view-zones');\n        this.domNode.setPosition('absolute');\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.marginDomNode = createFastDomNode(document.createElement('div'));\n        this.marginDomNode.setClassName('margin-view-zones');\n        this.marginDomNode.setPosition('absolute');\n        this.marginDomNode.setAttribute('role', 'presentation');\n        this.marginDomNode.setAttribute('aria-hidden', 'true');\n        this._zones = {};\n    }\n    dispose() {\n        super.dispose();\n        this._zones = {};\n    }\n    // ---- begin view event handlers\n    _recomputeWhitespacesProps() {\n        const whitespaces = this._context.viewLayout.getWhitespaces();\n        const oldWhitespaces = new Map();\n        for (const whitespace of whitespaces) {\n            oldWhitespaces.set(whitespace.id, whitespace);\n        }\n        let hadAChange = false;\n        this._context.viewModel.changeWhitespace((whitespaceAccessor) => {\n            const keys = Object.keys(this._zones);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const id = keys[i];\n                const zone = this._zones[id];\n                const props = this._computeWhitespaceProps(zone.delegate);\n                zone.isInHiddenArea = props.isInHiddenArea;\n                const oldWhitespace = oldWhitespaces.get(id);\n                if (oldWhitespace && (oldWhitespace.afterLineNumber !== props.afterViewLineNumber || oldWhitespace.height !== props.heightInPx)) {\n                    whitespaceAccessor.changeOneWhitespace(id, props.afterViewLineNumber, props.heightInPx);\n                    this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n                    hadAChange = true;\n                }\n            }\n        });\n        return hadAChange;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        if (e.hasChanged(63 /* EditorOption.lineHeight */)) {\n            this._recomputeWhitespacesProps();\n        }\n        return true;\n    }\n    onLineMappingChanged(e) {\n        return this._recomputeWhitespacesProps();\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    _getZoneOrdinal(zone) {\n        if (typeof zone.afterColumn !== 'undefined') {\n            return zone.afterColumn;\n        }\n        return 10000;\n    }\n    _computeWhitespaceProps(zone) {\n        if (zone.afterLineNumber === 0) {\n            return {\n                isInHiddenArea: false,\n                afterViewLineNumber: 0,\n                heightInPx: this._heightInPixels(zone),\n                minWidthInPx: this._minWidthInPixels(zone)\n            };\n        }\n        let zoneAfterModelPosition;\n        if (typeof zone.afterColumn !== 'undefined') {\n            zoneAfterModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zone.afterLineNumber,\n                column: zone.afterColumn\n            });\n        }\n        else {\n            const validAfterLineNumber = this._context.viewModel.model.validatePosition({\n                lineNumber: zone.afterLineNumber,\n                column: 1\n            }).lineNumber;\n            zoneAfterModelPosition = new Position(validAfterLineNumber, this._context.viewModel.model.getLineMaxColumn(validAfterLineNumber));\n        }\n        let zoneBeforeModelPosition;\n        if (zoneAfterModelPosition.column === this._context.viewModel.model.getLineMaxColumn(zoneAfterModelPosition.lineNumber)) {\n            zoneBeforeModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zoneAfterModelPosition.lineNumber + 1,\n                column: 1\n            });\n        }\n        else {\n            zoneBeforeModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zoneAfterModelPosition.lineNumber,\n                column: zoneAfterModelPosition.column + 1\n            });\n        }\n        const viewPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(zoneAfterModelPosition, zone.afterColumnAffinity);\n        const isVisible = this._context.viewModel.coordinatesConverter.modelPositionIsVisible(zoneBeforeModelPosition);\n        return {\n            isInHiddenArea: !isVisible,\n            afterViewLineNumber: viewPosition.lineNumber,\n            heightInPx: (isVisible ? this._heightInPixels(zone) : 0),\n            minWidthInPx: this._minWidthInPixels(zone)\n        };\n    }\n    changeViewZones(callback) {\n        let zonesHaveChanged = false;\n        this._context.viewModel.changeWhitespace((whitespaceAccessor) => {\n            const changeAccessor = {\n                addZone: (zone) => {\n                    zonesHaveChanged = true;\n                    return this._addZone(whitespaceAccessor, zone);\n                },\n                removeZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._removeZone(whitespaceAccessor, id) || zonesHaveChanged;\n                },\n                layoutZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._layoutZone(whitespaceAccessor, id) || zonesHaveChanged;\n                }\n            };\n            safeInvoke1Arg(callback, changeAccessor);\n            // Invalidate changeAccessor\n            changeAccessor.addZone = invalidFunc;\n            changeAccessor.removeZone = invalidFunc;\n            changeAccessor.layoutZone = invalidFunc;\n        });\n        return zonesHaveChanged;\n    }\n    _addZone(whitespaceAccessor, zone) {\n        const props = this._computeWhitespaceProps(zone);\n        const whitespaceId = whitespaceAccessor.insertWhitespace(props.afterViewLineNumber, this._getZoneOrdinal(zone), props.heightInPx, props.minWidthInPx);\n        const myZone = {\n            whitespaceId: whitespaceId,\n            delegate: zone,\n            isInHiddenArea: props.isInHiddenArea,\n            isVisible: false,\n            domNode: createFastDomNode(zone.domNode),\n            marginDomNode: zone.marginDomNode ? createFastDomNode(zone.marginDomNode) : null\n        };\n        this._safeCallOnComputedHeight(myZone.delegate, props.heightInPx);\n        myZone.domNode.setPosition('absolute');\n        myZone.domNode.domNode.style.width = '100%';\n        myZone.domNode.setDisplay('none');\n        myZone.domNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n        this.domNode.appendChild(myZone.domNode);\n        if (myZone.marginDomNode) {\n            myZone.marginDomNode.setPosition('absolute');\n            myZone.marginDomNode.domNode.style.width = '100%';\n            myZone.marginDomNode.setDisplay('none');\n            myZone.marginDomNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n            this.marginDomNode.appendChild(myZone.marginDomNode);\n        }\n        this._zones[myZone.whitespaceId] = myZone;\n        this.setShouldRender();\n        return myZone.whitespaceId;\n    }\n    _removeZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            delete this._zones[id];\n            whitespaceAccessor.removeWhitespace(zone.whitespaceId);\n            zone.domNode.removeAttribute('monaco-visible-view-zone');\n            zone.domNode.removeAttribute('monaco-view-zone');\n            zone.domNode.domNode.parentNode.removeChild(zone.domNode.domNode);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.removeAttribute('monaco-visible-view-zone');\n                zone.marginDomNode.removeAttribute('monaco-view-zone');\n                zone.marginDomNode.domNode.parentNode.removeChild(zone.marginDomNode.domNode);\n            }\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    _layoutZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            const props = this._computeWhitespaceProps(zone.delegate);\n            zone.isInHiddenArea = props.isInHiddenArea;\n            // const newOrdinal = this._getZoneOrdinal(zone.delegate);\n            whitespaceAccessor.changeOneWhitespace(zone.whitespaceId, props.afterViewLineNumber, props.heightInPx);\n            // TODO@Alex: change `newOrdinal` too\n            this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    shouldSuppressMouseDownOnViewZone(id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            return Boolean(zone.delegate.suppressMouseDown);\n        }\n        return false;\n    }\n    _heightInPixels(zone) {\n        if (typeof zone.heightInPx === 'number') {\n            return zone.heightInPx;\n        }\n        if (typeof zone.heightInLines === 'number') {\n            return this._lineHeight * zone.heightInLines;\n        }\n        return this._lineHeight;\n    }\n    _minWidthInPixels(zone) {\n        if (typeof zone.minWidthInPx === 'number') {\n            return zone.minWidthInPx;\n        }\n        return 0;\n    }\n    _safeCallOnComputedHeight(zone, height) {\n        if (typeof zone.onComputedHeight === 'function') {\n            try {\n                zone.onComputedHeight(height);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    _safeCallOnDomNodeTop(zone, top) {\n        if (typeof zone.onDomNodeTop === 'function') {\n            try {\n                zone.onDomNodeTop(top);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        const visibleWhitespaces = ctx.viewportData.whitespaceViewportData;\n        const visibleZones = {};\n        let hasVisibleZone = false;\n        for (const visibleWhitespace of visibleWhitespaces) {\n            if (this._zones[visibleWhitespace.id].isInHiddenArea) {\n                continue;\n            }\n            visibleZones[visibleWhitespace.id] = visibleWhitespace;\n            hasVisibleZone = true;\n        }\n        const keys = Object.keys(this._zones);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const id = keys[i];\n            const zone = this._zones[id];\n            let newTop = 0;\n            let newHeight = 0;\n            let newDisplay = 'none';\n            if (visibleZones.hasOwnProperty(id)) {\n                newTop = visibleZones[id].verticalOffset - ctx.bigNumbersDelta;\n                newHeight = visibleZones[id].height;\n                newDisplay = 'block';\n                // zone is visible\n                if (!zone.isVisible) {\n                    zone.domNode.setAttribute('monaco-visible-view-zone', 'true');\n                    zone.isVisible = true;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(visibleZones[id].verticalOffset));\n            }\n            else {\n                if (zone.isVisible) {\n                    zone.domNode.removeAttribute('monaco-visible-view-zone');\n                    zone.isVisible = false;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(-1000000));\n            }\n            zone.domNode.setTop(newTop);\n            zone.domNode.setHeight(newHeight);\n            zone.domNode.setDisplay(newDisplay);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.setTop(newTop);\n                zone.marginDomNode.setHeight(newHeight);\n                zone.marginDomNode.setDisplay(newDisplay);\n            }\n        }\n        if (hasVisibleZone) {\n            this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n            this.marginDomNode.setWidth(this._contentLeft);\n        }\n    }\n}\nfunction safeInvoke1Arg(func, arg1) {\n    try {\n        return func(arg1);\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport './blockDecorations.css';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class BlockDecorations extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.blocks = [];\n        this.contentWidth = -1;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.domNode.setClassName('blockDecorations-container');\n        this.update();\n    }\n    update() {\n        let didChange = false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        const newContentWidth = layoutInfo.contentWidth - layoutInfo.verticalScrollbarWidth;\n        if (this.contentWidth !== newContentWidth) {\n            this.contentWidth = newContentWidth;\n            didChange = true;\n        }\n        return didChange;\n    }\n    dispose() {\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return this.update();\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollLeftChanged;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        let count = 0;\n        const decorations = ctx.getDecorationsInViewport();\n        for (const decoration of decorations) {\n            if (!decoration.options.blockClassName) {\n                continue;\n            }\n            let block = this.blocks[count];\n            if (!block) {\n                block = this.blocks[count] = createFastDomNode(document.createElement('div'));\n                this.domNode.appendChild(block);\n            }\n            let top;\n            let bottom;\n            if (decoration.options.blockIsAfterEnd) {\n                // range must be empty\n                top = ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, false);\n                bottom = ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, true);\n            }\n            else {\n                top = ctx.getVerticalOffsetForLineNumber(decoration.range.startLineNumber, true);\n                bottom = decoration.range.isEmpty()\n                    ? ctx.getVerticalOffsetForLineNumber(decoration.range.startLineNumber, false)\n                    : ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, true);\n            }\n            block.setClassName('blockDecorations-block ' + decoration.options.blockClassName);\n            block.setLeft(ctx.scrollLeft);\n            block.setWidth(this.contentWidth);\n            block.setTop(top);\n            block.setHeight(bottom - top);\n            count++;\n        }\n        for (let i = count; i < this.blocks.length; i++) {\n            this.blocks[i].domNode.remove();\n        }\n        this.blocks.length = count;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './whitespace.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { LineRange } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorWhitespaces } from '../../../common/core/editorColorRegistry.js';\nexport class WhitespaceOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._options = new WhitespaceOptions(this._context.configuration);\n        this._selection = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const newOptions = new WhitespaceOptions(this._context.configuration);\n        if (this._options.equals(newOptions)) {\n            return e.hasChanged(138 /* EditorOption.layoutInfo */);\n        }\n        this._options = newOptions;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selection = e.selections;\n        if (this._options.renderWhitespace === 'selection') {\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._options.renderWhitespace === 'none') {\n            this._renderResult = null;\n            return;\n        }\n        const startLineNumber = ctx.visibleRange.startLineNumber;\n        const endLineNumber = ctx.visibleRange.endLineNumber;\n        const lineCount = endLineNumber - startLineNumber + 1;\n        const needed = new Array(lineCount);\n        for (let i = 0; i < lineCount; i++) {\n            needed[i] = true;\n        }\n        const viewportData = this._context.viewModel.getMinimapLinesRenderingData(ctx.viewportData.startLineNumber, ctx.viewportData.endLineNumber, needed);\n        this._renderResult = [];\n        for (let lineNumber = ctx.viewportData.startLineNumber; lineNumber <= ctx.viewportData.endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - ctx.viewportData.startLineNumber;\n            const lineData = viewportData.data[lineIndex];\n            let selectionsOnLine = null;\n            if (this._options.renderWhitespace === 'selection') {\n                const selections = this._selection;\n                for (const selection of selections) {\n                    if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                        // Selection does not intersect line\n                        continue;\n                    }\n                    const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                    const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                    if (startColumn < endColumn) {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n            this._renderResult[lineIndex] = this._applyRenderWhitespace(ctx, lineNumber, selectionsOnLine, lineData);\n        }\n    }\n    _applyRenderWhitespace(ctx, lineNumber, selections, lineData) {\n        if (this._options.renderWhitespace === 'selection' && !selections) {\n            return '';\n        }\n        if (this._options.renderWhitespace === 'trailing' && lineData.continuesWithWrappedLine) {\n            return '';\n        }\n        const color = this._context.theme.getColor(editorWhitespaces);\n        const USE_SVG = this._options.renderWithSVG;\n        const lineContent = lineData.content;\n        const len = (this._options.stopRenderingLineAfter === -1 ? lineContent.length : Math.min(this._options.stopRenderingLineAfter, lineContent.length));\n        const continuesWithWrappedLine = lineData.continuesWithWrappedLine;\n        const fauxIndentLength = lineData.minColumn - 1;\n        const onlyBoundary = (this._options.renderWhitespace === 'boundary');\n        const onlyTrailing = (this._options.renderWhitespace === 'trailing');\n        const lineHeight = this._options.lineHeight;\n        const middotWidth = this._options.middotWidth;\n        const wsmiddotWidth = this._options.wsmiddotWidth;\n        const spaceWidth = this._options.spaceWidth;\n        const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n        const middotDiff = Math.abs(middotWidth - spaceWidth);\n        // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        // U+00B7 - MIDDLE DOT\n        const renderSpaceCharCode = (wsmiddotDiff < middotDiff ? 0x2E31 : 0xB7);\n        const canUseHalfwidthRightwardsArrow = this._options.canUseHalfwidthRightwardsArrow;\n        let result = '';\n        let lineIsEmptyOrWhitespace = false;\n        let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n        let lastNonWhitespaceIndex;\n        if (firstNonWhitespaceIndex === -1) {\n            lineIsEmptyOrWhitespace = true;\n            firstNonWhitespaceIndex = len;\n            lastNonWhitespaceIndex = len;\n        }\n        else {\n            lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n        }\n        let currentSelectionIndex = 0;\n        let currentSelection = selections && selections[currentSelectionIndex];\n        let maxLeft = 0;\n        for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n            const chCode = lineContent.charCodeAt(charIndex);\n            if (currentSelection && charIndex >= currentSelection.endOffset) {\n                currentSelectionIndex++;\n                currentSelection = selections && selections[currentSelectionIndex];\n            }\n            if (chCode !== 9 /* CharCode.Tab */ && chCode !== 32 /* CharCode.Space */) {\n                continue;\n            }\n            if (onlyTrailing && !lineIsEmptyOrWhitespace && charIndex <= lastNonWhitespaceIndex) {\n                // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n                continue;\n            }\n            if (onlyBoundary && charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex && chCode === 32 /* CharCode.Space */) {\n                // rendering only boundary whitespace\n                const prevChCode = (charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */);\n                const nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n                if (prevChCode !== 32 /* CharCode.Space */ && nextChCode !== 32 /* CharCode.Space */) {\n                    continue;\n                }\n            }\n            if (onlyBoundary && continuesWithWrappedLine && charIndex === len - 1) {\n                const prevCharCode = (charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */);\n                const isSingleTrailingSpace = (chCode === 32 /* CharCode.Space */ && (prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */));\n                if (isSingleTrailingSpace) {\n                    continue;\n                }\n            }\n            if (selections && (!currentSelection || currentSelection.startOffset > charIndex || currentSelection.endOffset <= charIndex)) {\n                // If rendering whitespace on selection, check that the charIndex falls within a selection\n                continue;\n            }\n            const visibleRange = ctx.visibleRangeForPosition(new Position(lineNumber, charIndex + 1));\n            if (!visibleRange) {\n                continue;\n            }\n            if (USE_SVG) {\n                maxLeft = Math.max(maxLeft, visibleRange.left);\n                if (chCode === 9 /* CharCode.Tab */) {\n                    result += this._renderArrow(lineHeight, spaceWidth, visibleRange.left);\n                }\n                else {\n                    result += `<circle cx=\"${(visibleRange.left + spaceWidth / 2).toFixed(2)}\" cy=\"${(lineHeight / 2).toFixed(2)}\" r=\"${(spaceWidth / 7).toFixed(2)}\" />`;\n                }\n            }\n            else {\n                if (chCode === 9 /* CharCode.Tab */) {\n                    result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${canUseHalfwidthRightwardsArrow ? String.fromCharCode(0xFFEB) : String.fromCharCode(0x2192)}</div>`;\n                }\n                else {\n                    result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${String.fromCharCode(renderSpaceCharCode)}</div>`;\n                }\n            }\n        }\n        if (USE_SVG) {\n            maxLeft = Math.round(maxLeft + spaceWidth);\n            return (`<svg style=\"position:absolute;width:${maxLeft}px;height:${lineHeight}px\" viewBox=\"0 0 ${maxLeft} ${lineHeight}\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"${color}\">`\n                + result\n                + `</svg>`);\n        }\n        return result;\n    }\n    _renderArrow(lineHeight, spaceWidth, left) {\n        const strokeWidth = spaceWidth / 7;\n        const width = spaceWidth;\n        const dy = lineHeight / 2;\n        const dx = left;\n        const p1 = { x: 0, y: strokeWidth / 2 };\n        const p2 = { x: 100 / 125 * width, y: p1.y };\n        const p3 = { x: p2.x - 0.2 * p2.x, y: p2.y + 0.2 * p2.x };\n        const p4 = { x: p3.x + 0.1 * p2.x, y: p3.y + 0.1 * p2.x };\n        const p5 = { x: p4.x + 0.35 * p2.x, y: p4.y - 0.35 * p2.x };\n        const p6 = { x: p5.x, y: -p5.y };\n        const p7 = { x: p4.x, y: -p4.y };\n        const p8 = { x: p3.x, y: -p3.y };\n        const p9 = { x: p2.x, y: -p2.y };\n        const p10 = { x: p1.x, y: -p1.y };\n        const p = [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10];\n        const parts = p.map((p) => `${(dx + p.x).toFixed(2)} ${(dy + p.y).toFixed(2)}`).join(' L ');\n        return `<path d=\"M ${parts}\" />`;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nclass WhitespaceOptions {\n    constructor(config) {\n        const options = config.options;\n        const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        const experimentalWhitespaceRendering = options.get(35 /* EditorOption.experimentalWhitespaceRendering */);\n        if (experimentalWhitespaceRendering === 'off') {\n            // whitespace is rendered in the view line\n            this.renderWhitespace = 'none';\n            this.renderWithSVG = false;\n        }\n        else if (experimentalWhitespaceRendering === 'svg') {\n            this.renderWhitespace = options.get(93 /* EditorOption.renderWhitespace */);\n            this.renderWithSVG = true;\n        }\n        else {\n            this.renderWhitespace = options.get(93 /* EditorOption.renderWhitespace */);\n            this.renderWithSVG = false;\n        }\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this.stopRenderingLineAfter = options.get(111 /* EditorOption.stopRenderingLineAfter */);\n    }\n    equals(other) {\n        return (this.renderWhitespace === other.renderWhitespace\n            && this.renderWithSVG === other.renderWithSVG\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../base/browser/dom.js';\nimport { Selection } from '../common/core/selection.js';\nimport { createFastDomNode } from '../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../base/common/errors.js';\nimport { PointerHandler } from './controller/pointerHandler.js';\nimport { TextAreaHandler } from './controller/textAreaHandler.js';\nimport { ViewController } from './view/viewController.js';\nimport { ViewUserInputEvents } from './view/viewUserInputEvents.js';\nimport { ContentViewOverlays, MarginViewOverlays } from './view/viewOverlays.js';\nimport { PartFingerprints } from './view/viewPart.js';\nimport { ViewContentWidgets } from './viewParts/contentWidgets/contentWidgets.js';\nimport { CurrentLineHighlightOverlay, CurrentLineMarginHighlightOverlay } from './viewParts/currentLineHighlight/currentLineHighlight.js';\nimport { DecorationsOverlay } from './viewParts/decorations/decorations.js';\nimport { EditorScrollbar } from './viewParts/editorScrollbar/editorScrollbar.js';\nimport { GlyphMarginOverlay } from './viewParts/glyphMargin/glyphMargin.js';\nimport { IndentGuidesOverlay } from './viewParts/indentGuides/indentGuides.js';\nimport { LineNumbersOverlay } from './viewParts/lineNumbers/lineNumbers.js';\nimport { ViewLines } from './viewParts/lines/viewLines.js';\nimport { LinesDecorationsOverlay } from './viewParts/linesDecorations/linesDecorations.js';\nimport { Margin } from './viewParts/margin/margin.js';\nimport { MarginViewLineDecorationsOverlay } from './viewParts/marginDecorations/marginDecorations.js';\nimport { Minimap } from './viewParts/minimap/minimap.js';\nimport { ViewOverlayWidgets } from './viewParts/overlayWidgets/overlayWidgets.js';\nimport { DecorationsOverviewRuler } from './viewParts/overviewRuler/decorationsOverviewRuler.js';\nimport { OverviewRuler } from './viewParts/overviewRuler/overviewRuler.js';\nimport { Rulers } from './viewParts/rulers/rulers.js';\nimport { ScrollDecorationViewPart } from './viewParts/scrollDecoration/scrollDecoration.js';\nimport { SelectionsOverlay } from './viewParts/selections/selections.js';\nimport { ViewCursors } from './viewParts/viewCursors/viewCursors.js';\nimport { ViewZones } from './viewParts/viewZones/viewZones.js';\nimport { Position } from '../common/core/position.js';\nimport { RenderingContext } from './view/renderingContext.js';\nimport { ViewContext } from '../common/viewModel/viewContext.js';\nimport { ViewportData } from '../common/viewLayout/viewLinesViewportData.js';\nimport { ViewEventHandler } from '../common/viewEventHandler.js';\nimport { getThemeTypeSelector } from '../../platform/theme/common/themeService.js';\nimport { PointerHandlerLastRenderData } from './controller/mouseTarget.js';\nimport { BlockDecorations } from './viewParts/blockDecorations/blockDecorations.js';\nimport { inputLatency } from '../../base/browser/performance.js';\nimport { WhitespaceOverlay } from './viewParts/whitespace/whitespace.js';\nexport class View extends ViewEventHandler {\n    constructor(commandDelegate, configuration, colorTheme, model, userInputEvents, overflowWidgetsDomNode) {\n        super();\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderAnimationFrame = null;\n        const viewController = new ViewController(configuration, model, userInputEvents, commandDelegate);\n        // The view context is passed on to most classes (basically to reduce param. counts in ctors)\n        this._context = new ViewContext(configuration, colorTheme, model);\n        // Ensure the view is the first event handler in order to update the layout\n        this._context.addEventHandler(this);\n        this._viewParts = [];\n        // Keyboard handler\n        this._textAreaHandler = new TextAreaHandler(this._context, viewController, this._createTextAreaHandlerHelper());\n        this._viewParts.push(this._textAreaHandler);\n        // These two dom nodes must be constructed up front, since references are needed in the layout provider (scrolling & co.)\n        this._linesContent = createFastDomNode(document.createElement('div'));\n        this._linesContent.setClassName('lines-content' + ' monaco-editor-background');\n        this._linesContent.setPosition('absolute');\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName(this._getEditorClassName());\n        // Set role 'code' for better screen reader support https://github.com/microsoft/vscode/issues/93438\n        this.domNode.setAttribute('role', 'code');\n        this._overflowGuardContainer = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._overflowGuardContainer, 3 /* PartFingerprint.OverflowGuard */);\n        this._overflowGuardContainer.setClassName('overflow-guard');\n        this._scrollbar = new EditorScrollbar(this._context, this._linesContent, this.domNode, this._overflowGuardContainer);\n        this._viewParts.push(this._scrollbar);\n        // View Lines\n        this._viewLines = new ViewLines(this._context, this._linesContent);\n        // View Zones\n        this._viewZones = new ViewZones(this._context);\n        this._viewParts.push(this._viewZones);\n        // Decorations overview ruler\n        const decorationsOverviewRuler = new DecorationsOverviewRuler(this._context);\n        this._viewParts.push(decorationsOverviewRuler);\n        const scrollDecoration = new ScrollDecorationViewPart(this._context);\n        this._viewParts.push(scrollDecoration);\n        const contentViewOverlays = new ContentViewOverlays(this._context);\n        this._viewParts.push(contentViewOverlays);\n        contentViewOverlays.addDynamicOverlay(new CurrentLineHighlightOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new SelectionsOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new IndentGuidesOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new DecorationsOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new WhitespaceOverlay(this._context));\n        const marginViewOverlays = new MarginViewOverlays(this._context);\n        this._viewParts.push(marginViewOverlays);\n        marginViewOverlays.addDynamicOverlay(new CurrentLineMarginHighlightOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new GlyphMarginOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new MarginViewLineDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LinesDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LineNumbersOverlay(this._context));\n        const margin = new Margin(this._context);\n        margin.getDomNode().appendChild(this._viewZones.marginDomNode);\n        margin.getDomNode().appendChild(marginViewOverlays.getDomNode());\n        this._viewParts.push(margin);\n        // Content widgets\n        this._contentWidgets = new ViewContentWidgets(this._context, this.domNode);\n        this._viewParts.push(this._contentWidgets);\n        this._viewCursors = new ViewCursors(this._context);\n        this._viewParts.push(this._viewCursors);\n        // Overlay widgets\n        this._overlayWidgets = new ViewOverlayWidgets(this._context);\n        this._viewParts.push(this._overlayWidgets);\n        const rulers = new Rulers(this._context);\n        this._viewParts.push(rulers);\n        const blockOutline = new BlockDecorations(this._context);\n        this._viewParts.push(blockOutline);\n        const minimap = new Minimap(this._context);\n        this._viewParts.push(minimap);\n        // -------------- Wire dom nodes up\n        if (decorationsOverviewRuler) {\n            const overviewRulerData = this._scrollbar.getOverviewRulerLayoutInfo();\n            overviewRulerData.parent.insertBefore(decorationsOverviewRuler.getDomNode(), overviewRulerData.insertBefore);\n        }\n        this._linesContent.appendChild(contentViewOverlays.getDomNode());\n        this._linesContent.appendChild(rulers.domNode);\n        this._linesContent.appendChild(blockOutline.domNode);\n        this._linesContent.appendChild(this._viewZones.domNode);\n        this._linesContent.appendChild(this._viewLines.getDomNode());\n        this._linesContent.appendChild(this._contentWidgets.domNode);\n        this._linesContent.appendChild(this._viewCursors.getDomNode());\n        this._overflowGuardContainer.appendChild(margin.getDomNode());\n        this._overflowGuardContainer.appendChild(this._scrollbar.getDomNode());\n        this._overflowGuardContainer.appendChild(scrollDecoration.getDomNode());\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textArea);\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textAreaCover);\n        this._overflowGuardContainer.appendChild(this._overlayWidgets.getDomNode());\n        this._overflowGuardContainer.appendChild(minimap.getDomNode());\n        this.domNode.appendChild(this._overflowGuardContainer);\n        if (overflowWidgetsDomNode) {\n            overflowWidgetsDomNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode.domNode);\n        }\n        else {\n            this.domNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode);\n        }\n        this._applyLayout();\n        // Pointer handler\n        this._pointerHandler = this._register(new PointerHandler(this._context, viewController, this._createPointerHandlerHelper()));\n    }\n    _flushAccumulatedAndRenderNow() {\n        inputLatency.onRenderStart();\n        this._renderNow();\n    }\n    _createPointerHandlerHelper() {\n        return {\n            viewDomNode: this.domNode.domNode,\n            linesContentDomNode: this._linesContent.domNode,\n            viewLinesDomNode: this._viewLines.getDomNode().domNode,\n            focusTextArea: () => {\n                this.focus();\n            },\n            dispatchTextAreaEvent: (event) => {\n                this._textAreaHandler.textArea.domNode.dispatchEvent(event);\n            },\n            getLastRenderData: () => {\n                const lastViewCursorsRenderData = this._viewCursors.getLastRenderData() || [];\n                const lastTextareaPosition = this._textAreaHandler.getLastRenderData();\n                return new PointerHandlerLastRenderData(lastViewCursorsRenderData, lastTextareaPosition);\n            },\n            renderNow: () => {\n                this.render(true, false);\n            },\n            shouldSuppressMouseDownOnViewZone: (viewZoneId) => {\n                return this._viewZones.shouldSuppressMouseDownOnViewZone(viewZoneId);\n            },\n            shouldSuppressMouseDownOnWidget: (widgetId) => {\n                return this._contentWidgets.shouldSuppressMouseDownOnWidget(widgetId);\n            },\n            getPositionFromDOMInfo: (spanNode, offset) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getPositionFromDOMInfo(spanNode, offset);\n            },\n            visibleRangeForPosition: (lineNumber, column) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(new Position(lineNumber, column));\n            },\n            getLineWidth: (lineNumber) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getLineWidth(lineNumber);\n            }\n        };\n    }\n    _createTextAreaHandlerHelper() {\n        return {\n            visibleRangeForPosition: (position) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(position);\n            }\n        };\n    }\n    _applyLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this.domNode.setWidth(layoutInfo.width);\n        this.domNode.setHeight(layoutInfo.height);\n        this._overflowGuardContainer.setWidth(layoutInfo.width);\n        this._overflowGuardContainer.setHeight(layoutInfo.height);\n        this._linesContent.setWidth(1000000);\n        this._linesContent.setHeight(1000000);\n    }\n    _getEditorClassName() {\n        const focused = this._textAreaHandler.isFocused() ? ' focused' : '';\n        return this._context.configuration.options.get(135 /* EditorOption.editorClassName */) + ' ' + getThemeTypeSelector(this._context.theme.type) + focused;\n    }\n    // --- begin event handlers\n    handleEvents(events) {\n        super.handleEvents(events);\n        this._scheduleRender();\n    }\n    onConfigurationChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        this._applyLayout();\n        return false;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return false;\n    }\n    onFocusChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    onThemeChanged(e) {\n        this._context.theme.update(e.theme);\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    // --- end event handlers\n    dispose() {\n        if (this._renderAnimationFrame !== null) {\n            this._renderAnimationFrame.dispose();\n            this._renderAnimationFrame = null;\n        }\n        this._contentWidgets.overflowingContentWidgetsDomNode.domNode.remove();\n        this._context.removeEventHandler(this);\n        this._viewLines.dispose();\n        // Destroy view parts\n        for (const viewPart of this._viewParts) {\n            viewPart.dispose();\n        }\n        super.dispose();\n    }\n    _scheduleRender() {\n        if (this._renderAnimationFrame === null) {\n            this._renderAnimationFrame = dom.runAtThisOrScheduleAtNextAnimationFrame(this._onRenderScheduled.bind(this), 100);\n        }\n    }\n    _onRenderScheduled() {\n        this._renderAnimationFrame = null;\n        this._flushAccumulatedAndRenderNow();\n    }\n    _renderNow() {\n        safeInvokeNoArg(() => this._actualRender());\n    }\n    _getViewPartsToRender() {\n        const result = [];\n        let resultLen = 0;\n        for (const viewPart of this._viewParts) {\n            if (viewPart.shouldRender()) {\n                result[resultLen++] = viewPart;\n            }\n        }\n        return result;\n    }\n    _actualRender() {\n        if (!dom.isInDOM(this.domNode.domNode)) {\n            return;\n        }\n        let viewPartsToRender = this._getViewPartsToRender();\n        if (!this._viewLines.shouldRender() && viewPartsToRender.length === 0) {\n            // Nothing to render\n            return;\n        }\n        const partialViewportData = this._context.viewLayout.getLinesViewportData();\n        this._context.viewModel.setViewport(partialViewportData.startLineNumber, partialViewportData.endLineNumber, partialViewportData.centeredLineNumber);\n        const viewportData = new ViewportData(this._selections, partialViewportData, this._context.viewLayout.getWhitespaceViewportData(), this._context.viewModel);\n        if (this._contentWidgets.shouldRender()) {\n            // Give the content widgets a chance to set their max width before a possible synchronous layout\n            this._contentWidgets.onBeforeRender(viewportData);\n        }\n        if (this._viewLines.shouldRender()) {\n            this._viewLines.renderText(viewportData);\n            this._viewLines.onDidRender();\n            // Rendering of viewLines might cause scroll events to occur, so collect view parts to render again\n            viewPartsToRender = this._getViewPartsToRender();\n        }\n        const renderingContext = new RenderingContext(this._context.viewLayout, viewportData, this._viewLines);\n        // Render the rest of the parts\n        for (const viewPart of viewPartsToRender) {\n            viewPart.prepareRender(renderingContext);\n        }\n        for (const viewPart of viewPartsToRender) {\n            viewPart.render(renderingContext);\n            viewPart.onDidRender();\n        }\n    }\n    // --- BEGIN CodeEditor helpers\n    delegateVerticalScrollbarPointerDown(browserEvent) {\n        this._scrollbar.delegateVerticalScrollbarPointerDown(browserEvent);\n    }\n    delegateScrollFromMouseWheelEvent(browserEvent) {\n        this._scrollbar.delegateScrollFromMouseWheelEvent(browserEvent);\n    }\n    restoreState(scrollPosition) {\n        this._context.viewModel.viewLayout.setScrollPosition({\n            scrollTop: scrollPosition.scrollTop,\n            scrollLeft: scrollPosition.scrollLeft\n        }, 1 /* ScrollType.Immediate */);\n        this._context.viewModel.tokenizeViewport();\n    }\n    getOffsetForColumn(modelLineNumber, modelColumn) {\n        const modelPosition = this._context.viewModel.model.validatePosition({\n            lineNumber: modelLineNumber,\n            column: modelColumn\n        });\n        const viewPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        this._flushAccumulatedAndRenderNow();\n        const visibleRange = this._viewLines.visibleRangeForPosition(new Position(viewPosition.lineNumber, viewPosition.column));\n        if (!visibleRange) {\n            return -1;\n        }\n        return visibleRange.left;\n    }\n    getTargetAtClientPoint(clientX, clientY) {\n        const mouseTarget = this._pointerHandler.getTargetAtClientPoint(clientX, clientY);\n        if (!mouseTarget) {\n            return null;\n        }\n        return ViewUserInputEvents.convertViewToModelMouseTarget(mouseTarget, this._context.viewModel.coordinatesConverter);\n    }\n    createOverviewRuler(cssClassName) {\n        return new OverviewRuler(this._context, cssClassName);\n    }\n    change(callback) {\n        this._viewZones.changeViewZones(callback);\n        this._scheduleRender();\n    }\n    render(now, everything) {\n        if (everything) {\n            // Force everything to render...\n            this._viewLines.forceShouldRender();\n            for (const viewPart of this._viewParts) {\n                viewPart.forceShouldRender();\n            }\n        }\n        if (now) {\n            this._flushAccumulatedAndRenderNow();\n        }\n        else {\n            this._scheduleRender();\n        }\n    }\n    writeScreenReaderContent(reason) {\n        this._textAreaHandler.writeScreenReaderContent(reason);\n    }\n    focus() {\n        this._textAreaHandler.focusTextArea();\n    }\n    isFocused() {\n        return this._textAreaHandler.isFocused();\n    }\n    setAriaOptions(options) {\n        this._textAreaHandler.setAriaOptions(options);\n    }\n    addContentWidget(widgetData) {\n        this._contentWidgets.addWidget(widgetData.widget);\n        this.layoutContentWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutContentWidget(widgetData) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        this._contentWidgets.setWidgetPosition(widgetData.widget, (_b = (_a = widgetData.position) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : null, (_d = (_c = widgetData.position) === null || _c === void 0 ? void 0 : _c.secondaryPosition) !== null && _d !== void 0 ? _d : null, (_f = (_e = widgetData.position) === null || _e === void 0 ? void 0 : _e.preference) !== null && _f !== void 0 ? _f : null, (_h = (_g = widgetData.position) === null || _g === void 0 ? void 0 : _g.positionAffinity) !== null && _h !== void 0 ? _h : null);\n        this._scheduleRender();\n    }\n    removeContentWidget(widgetData) {\n        this._contentWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n    addOverlayWidget(widgetData) {\n        this._overlayWidgets.addWidget(widgetData.widget);\n        this.layoutOverlayWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutOverlayWidget(widgetData) {\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\n        const shouldRender = this._overlayWidgets.setWidgetPosition(widgetData.widget, newPreference);\n        if (shouldRender) {\n            this._scheduleRender();\n        }\n    }\n    removeOverlayWidget(widgetData) {\n        this._overlayWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n}\nfunction safeInvokeNoArg(func) {\n    try {\n        return func();\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { StringBuilder } from '../../common/core/stringBuilder.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { LineInjectedText } from '../../common/textModelEvents.js';\nimport { ModelLineProjectionData } from '../../common/modelLineProjectionData.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('domLineBreaksComputer', { createHTML: value => value });\nexport class DOMLineBreaksComputerFactory {\n    static create() {\n        return new DOMLineBreaksComputerFactory();\n    }\n    constructor() {\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak) {\n        const requests = [];\n        const injectedTexts = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n            },\n            finalize: () => {\n                return createLineBreaks(requests, fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak, injectedTexts);\n            }\n        };\n    }\n}\nfunction createLineBreaks(requests, fontInfo, tabSize, firstLineBreakColumn, wrappingIndent, wordBreak, injectedTextsPerLine) {\n    var _a;\n    function createEmptyLineBreakWithPossiblyInjectedText(requestIdx) {\n        const injectedTexts = injectedTextsPerLine[requestIdx];\n        if (injectedTexts) {\n            const lineText = LineInjectedText.applyInjectedText(requests[requestIdx], injectedTexts);\n            const injectionOptions = injectedTexts.map(t => t.options);\n            const injectionOffsets = injectedTexts.map(text => text.column - 1);\n            // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n            // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n            return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n        }\n        else {\n            return null;\n        }\n    }\n    if (firstLineBreakColumn === -1) {\n        const result = [];\n        for (let i = 0, len = requests.length; i < len; i++) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n        }\n        return result;\n    }\n    const overallWidth = Math.round(firstLineBreakColumn * fontInfo.typicalHalfwidthCharacterWidth);\n    const additionalIndent = (wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0);\n    const additionalIndentSize = Math.round(tabSize * additionalIndent);\n    const additionalIndentLength = Math.ceil(fontInfo.spaceWidth * additionalIndentSize);\n    const containerDomNode = document.createElement('div');\n    applyFontInfo(containerDomNode, fontInfo);\n    const sb = new StringBuilder(10000);\n    const firstNonWhitespaceIndices = [];\n    const wrappedTextIndentLengths = [];\n    const renderLineContents = [];\n    const allCharOffsets = [];\n    const allVisibleColumns = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineContent = LineInjectedText.applyInjectedText(requests[i], injectedTextsPerLine[i]);\n        let firstNonWhitespaceIndex = 0;\n        let wrappedTextIndentLength = 0;\n        let width = overallWidth;\n        if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n            firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n            if (firstNonWhitespaceIndex === -1) {\n                // all whitespace line\n                firstNonWhitespaceIndex = 0;\n            }\n            else {\n                // Track existing indent\n                for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                    const charWidth = (lineContent.charCodeAt(i) === 9 /* CharCode.Tab */\n                        ? (tabSize - (wrappedTextIndentLength % tabSize))\n                        : 1);\n                    wrappedTextIndentLength += charWidth;\n                }\n                const indentWidth = Math.ceil(fontInfo.spaceWidth * wrappedTextIndentLength);\n                // Force sticking to beginning of line if no character would fit except for the indentation\n                if (indentWidth + fontInfo.typicalFullwidthCharacterWidth > overallWidth) {\n                    firstNonWhitespaceIndex = 0;\n                    wrappedTextIndentLength = 0;\n                }\n                else {\n                    width = overallWidth - indentWidth;\n                }\n            }\n        }\n        const renderLineContent = lineContent.substr(firstNonWhitespaceIndex);\n        const tmp = renderLine(renderLineContent, wrappedTextIndentLength, tabSize, width, sb, additionalIndentLength);\n        firstNonWhitespaceIndices[i] = firstNonWhitespaceIndex;\n        wrappedTextIndentLengths[i] = wrappedTextIndentLength;\n        renderLineContents[i] = renderLineContent;\n        allCharOffsets[i] = tmp[0];\n        allVisibleColumns[i] = tmp[1];\n    }\n    const html = sb.build();\n    const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(html)) !== null && _a !== void 0 ? _a : html;\n    containerDomNode.innerHTML = trustedhtml;\n    containerDomNode.style.position = 'absolute';\n    containerDomNode.style.top = '10000';\n    if (wordBreak === 'keepAll') {\n        // word-break: keep-all; overflow-wrap: anywhere\n        containerDomNode.style.wordBreak = 'keep-all';\n        containerDomNode.style.overflowWrap = 'anywhere';\n    }\n    else {\n        // overflow-wrap: break-word\n        containerDomNode.style.wordBreak = 'inherit';\n        containerDomNode.style.overflowWrap = 'break-word';\n    }\n    document.body.appendChild(containerDomNode);\n    const range = document.createRange();\n    const lineDomNodes = Array.prototype.slice.call(containerDomNode.children, 0);\n    const result = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineDomNode = lineDomNodes[i];\n        const breakOffsets = readLineBreaks(range, lineDomNode, renderLineContents[i], allCharOffsets[i]);\n        if (breakOffsets === null) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n            continue;\n        }\n        const firstNonWhitespaceIndex = firstNonWhitespaceIndices[i];\n        const wrappedTextIndentLength = wrappedTextIndentLengths[i] + additionalIndentSize;\n        const visibleColumns = allVisibleColumns[i];\n        const breakOffsetsVisibleColumn = [];\n        for (let j = 0, len = breakOffsets.length; j < len; j++) {\n            breakOffsetsVisibleColumn[j] = visibleColumns[breakOffsets[j]];\n        }\n        if (firstNonWhitespaceIndex !== 0) {\n            // All break offsets are relative to the renderLineContent, make them absolute again\n            for (let j = 0, len = breakOffsets.length; j < len; j++) {\n                breakOffsets[j] += firstNonWhitespaceIndex;\n            }\n        }\n        let injectionOptions;\n        let injectionOffsets;\n        const curInjectedTexts = injectedTextsPerLine[i];\n        if (curInjectedTexts) {\n            injectionOptions = curInjectedTexts.map(t => t.options);\n            injectionOffsets = curInjectedTexts.map(text => text.column - 1);\n        }\n        else {\n            injectionOptions = null;\n            injectionOffsets = null;\n        }\n        result[i] = new ModelLineProjectionData(injectionOffsets, injectionOptions, breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength);\n    }\n    document.body.removeChild(containerDomNode);\n    return result;\n}\nfunction renderLine(lineContent, initialVisibleColumn, tabSize, width, sb, wrappingIndentLength) {\n    if (wrappingIndentLength !== 0) {\n        const hangingOffset = String(wrappingIndentLength);\n        sb.appendString('<div style=\"text-indent: -');\n        sb.appendString(hangingOffset);\n        sb.appendString('px; padding-left: ');\n        sb.appendString(hangingOffset);\n        sb.appendString('px; box-sizing: border-box; width:');\n    }\n    else {\n        sb.appendString('<div style=\"width:');\n    }\n    sb.appendString(String(width));\n    sb.appendString('px;\">');\n    // if (containsRTL) {\n    // \tsb.appendASCIIString('\" dir=\"ltr');\n    // }\n    const len = lineContent.length;\n    let visibleColumn = initialVisibleColumn;\n    let charOffset = 0;\n    const charOffsets = [];\n    const visibleColumns = [];\n    let nextCharCode = (0 < len ? lineContent.charCodeAt(0) : 0 /* CharCode.Null */);\n    sb.appendString('<span>');\n    for (let charIndex = 0; charIndex < len; charIndex++) {\n        if (charIndex !== 0 && charIndex % 16384 /* Constants.SPAN_MODULO_LIMIT */ === 0) {\n            sb.appendString('</span><span>');\n        }\n        charOffsets[charIndex] = charOffset;\n        visibleColumns[charIndex] = visibleColumn;\n        const charCode = nextCharCode;\n        nextCharCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n        let producedCharacters = 1;\n        let charWidth = 1;\n        switch (charCode) {\n            case 9 /* CharCode.Tab */:\n                producedCharacters = (tabSize - (visibleColumn % tabSize));\n                charWidth = producedCharacters;\n                for (let space = 1; space <= producedCharacters; space++) {\n                    if (space < producedCharacters) {\n                        sb.appendCharCode(0xA0); // &nbsp;\n                    }\n                    else {\n                        sb.appendASCIICharCode(32 /* CharCode.Space */);\n                    }\n                }\n                break;\n            case 32 /* CharCode.Space */:\n                if (nextCharCode === 32 /* CharCode.Space */) {\n                    sb.appendCharCode(0xA0); // &nbsp;\n                }\n                else {\n                    sb.appendASCIICharCode(32 /* CharCode.Space */);\n                }\n                break;\n            case 60 /* CharCode.LessThan */:\n                sb.appendString('&lt;');\n                break;\n            case 62 /* CharCode.GreaterThan */:\n                sb.appendString('&gt;');\n                break;\n            case 38 /* CharCode.Ampersand */:\n                sb.appendString('&amp;');\n                break;\n            case 0 /* CharCode.Null */:\n                sb.appendString('&#00;');\n                break;\n            case 65279 /* CharCode.UTF8_BOM */:\n            case 8232 /* CharCode.LINE_SEPARATOR */:\n            case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n            case 133 /* CharCode.NEXT_LINE */:\n                sb.appendCharCode(0xFFFD);\n                break;\n            default:\n                if (strings.isFullWidthCharacter(charCode)) {\n                    charWidth++;\n                }\n                if (charCode < 32) {\n                    sb.appendCharCode(9216 + charCode);\n                }\n                else {\n                    sb.appendCharCode(charCode);\n                }\n        }\n        charOffset += producedCharacters;\n        visibleColumn += charWidth;\n    }\n    sb.appendString('</span>');\n    charOffsets[lineContent.length] = charOffset;\n    visibleColumns[lineContent.length] = visibleColumn;\n    sb.appendString('</div>');\n    return [charOffsets, visibleColumns];\n}\nfunction readLineBreaks(range, lineDomNode, lineContent, charOffsets) {\n    if (lineContent.length <= 1) {\n        return null;\n    }\n    const spans = Array.prototype.slice.call(lineDomNode.children, 0);\n    const breakOffsets = [];\n    try {\n        discoverBreaks(range, spans, charOffsets, 0, null, lineContent.length - 1, null, breakOffsets);\n    }\n    catch (err) {\n        console.log(err);\n        return null;\n    }\n    if (breakOffsets.length === 0) {\n        return null;\n    }\n    breakOffsets.push(lineContent.length);\n    return breakOffsets;\n}\nfunction discoverBreaks(range, spans, charOffsets, low, lowRects, high, highRects, result) {\n    if (low === high) {\n        return;\n    }\n    lowRects = lowRects || readClientRect(range, spans, charOffsets[low], charOffsets[low + 1]);\n    highRects = highRects || readClientRect(range, spans, charOffsets[high], charOffsets[high + 1]);\n    if (Math.abs(lowRects[0].top - highRects[0].top) <= 0.1) {\n        // same line\n        return;\n    }\n    // there is at least one line break between these two offsets\n    if (low + 1 === high) {\n        // the two characters are adjacent, so the line break must be exactly between them\n        result.push(high);\n        return;\n    }\n    const mid = low + ((high - low) / 2) | 0;\n    const midRects = readClientRect(range, spans, charOffsets[mid], charOffsets[mid + 1]);\n    discoverBreaks(range, spans, charOffsets, low, lowRects, mid, midRects, result);\n    discoverBreaks(range, spans, charOffsets, mid, midRects, high, highRects, result);\n}\nfunction readClientRect(range, spans, startOffset, endOffset) {\n    range.setStart(spans[(startOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */) | 0].firstChild, startOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n    range.setEnd(spans[(endOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */) | 0].firstChild, endOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n    return range.getClientRects();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ViewEventHandler } from '../../common/viewEventHandler.js';\nexport class DynamicViewOverlay extends ViewEventHandler {\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { editorDimmedLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nclass LineNumbersOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._readConfig();\n        this._lastCursorModelPosition = new Position(1, 1);\n        this._renderResult = null;\n        this._activeLineNumber = 1;\n        this._context.addEventHandler(this);\n    }\n    _readConfig() {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        const lineNumbers = options.get(64 /* EditorOption.lineNumbers */);\n        this._renderLineNumbers = lineNumbers.renderType;\n        this._renderCustomLineNumbers = lineNumbers.renderFn;\n        this._renderFinalNewline = options.get(89 /* EditorOption.renderFinalNewline */);\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n        this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        this._readConfig();\n        return true;\n    }\n    onCursorStateChanged(e) {\n        const primaryViewPosition = e.selections[0].getPosition();\n        this._lastCursorModelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n        let shouldRender = false;\n        if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n            this._activeLineNumber = primaryViewPosition.lineNumber;\n            shouldRender = true;\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */ || this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            shouldRender = true;\n        }\n        return shouldRender;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getLineRenderLineNumber(viewLineNumber) {\n        const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n        if (modelPosition.column !== 1) {\n            return '';\n        }\n        const modelLineNumber = modelPosition.lineNumber;\n        if (this._renderCustomLineNumbers) {\n            return this._renderCustomLineNumbers(modelLineNumber);\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */) {\n            const diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n            if (diff === 0) {\n                return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n            }\n            return String(diff);\n        }\n        if (this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n                return String(modelLineNumber);\n            }\n            if (modelLineNumber % 10 === 0) {\n                return String(modelLineNumber);\n            }\n            return '';\n        }\n        return String(modelLineNumber);\n    }\n    prepareRender(ctx) {\n        if (this._renderLineNumbers === 0 /* RenderLineNumbersType.Off */) {\n            this._renderResult = null;\n            return;\n        }\n        const lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const lineCount = this._context.viewModel.getLineCount();\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n            if (!renderLineNumber) {\n                output[lineIndex] = '';\n                continue;\n            }\n            let extraClassName = '';\n            if (lineNumber === lineCount && this._context.viewModel.getLineLength(lineNumber) === 0) {\n                // this is the last line\n                if (this._renderFinalNewline === 'off') {\n                    output[lineIndex] = '';\n                    continue;\n                }\n                if (this._renderFinalNewline === 'dimmed') {\n                    extraClassName = ' dimmed-line-number';\n                }\n            }\n            if (lineNumber === this._activeLineNumber) {\n                extraClassName = ' active-line-number';\n            }\n            output[lineIndex] = (`<div class=\"${LineNumbersOverlay.CLASS_NAME}${lineHeightClassName}${extraClassName}\" style=\"left:${this._lineNumbersLeft}px;width:${this._lineNumbersWidth}px;\">${renderLineNumber}</div>`);\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nLineNumbersOverlay.CLASS_NAME = 'line-numbers';\nexport { LineNumbersOverlay };\nregisterThemingParticipant((theme, collector) => {\n    const editorLineNumbersColor = theme.getColor(editorLineNumbers);\n    const editorDimmedLineNumberColor = theme.getColor(editorDimmedLineNumber);\n    if (editorDimmedLineNumberColor) {\n        collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorDimmedLineNumberColor}; }`);\n    }\n    else if (editorLineNumbersColor) {\n        collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorLineNumbersColor.transparent(0.4)}; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { FloatHorizontalRange } from '../../view/renderingContext.js';\nexport class RangeUtil {\n    static _createRange() {\n        if (!this._handyReadyRange) {\n            this._handyReadyRange = document.createRange();\n        }\n        return this._handyReadyRange;\n    }\n    static _detachRange(range, endNode) {\n        // Move range out of the span node, IE doesn't like having many ranges in\n        // the same spot and will act badly for lines containing dashes ('-')\n        range.selectNodeContents(endNode);\n    }\n    static _readClientRects(startElement, startOffset, endElement, endOffset, endNode) {\n        const range = this._createRange();\n        try {\n            range.setStart(startElement, startOffset);\n            range.setEnd(endElement, endOffset);\n            return range.getClientRects();\n        }\n        catch (e) {\n            // This is life ...\n            return null;\n        }\n        finally {\n            this._detachRange(range, endNode);\n        }\n    }\n    static _mergeAdjacentRanges(ranges) {\n        if (ranges.length === 1) {\n            // There is nothing to merge\n            return ranges;\n        }\n        ranges.sort(FloatHorizontalRange.compare);\n        const result = [];\n        let resultLen = 0;\n        let prev = ranges[0];\n        for (let i = 1, len = ranges.length; i < len; i++) {\n            const range = ranges[i];\n            if (prev.left + prev.width + 0.9 /* account for browser's rounding errors*/ >= range.left) {\n                prev.width = Math.max(prev.width, range.left + range.width - prev.left);\n            }\n            else {\n                result[resultLen++] = prev;\n                prev = range;\n            }\n        }\n        result[resultLen++] = prev;\n        return result;\n    }\n    static _createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale) {\n        if (!clientRects || clientRects.length === 0) {\n            return null;\n        }\n        // We go through FloatHorizontalRange because it has been observed in bi-di text\n        // that the clientRects are not coming in sorted from the browser\n        const result = [];\n        for (let i = 0, len = clientRects.length; i < len; i++) {\n            const clientRect = clientRects[i];\n            result[i] = new FloatHorizontalRange(Math.max(0, (clientRect.left - clientRectDeltaLeft) / clientRectScale), clientRect.width / clientRectScale);\n        }\n        return this._mergeAdjacentRanges(result);\n    }\n    static readHorizontalRanges(domNode, startChildIndex, startOffset, endChildIndex, endOffset, context) {\n        // Panic check\n        const min = 0;\n        const max = domNode.children.length - 1;\n        if (min > max) {\n            return null;\n        }\n        startChildIndex = Math.min(max, Math.max(min, startChildIndex));\n        endChildIndex = Math.min(max, Math.max(min, endChildIndex));\n        if (startChildIndex === endChildIndex && startOffset === endOffset && startOffset === 0 && !domNode.children[startChildIndex].firstChild) {\n            // We must find the position at the beginning of a <span>\n            // To cover cases of empty <span>s, avoid using a range and use the <span>'s bounding box\n            const clientRects = domNode.children[startChildIndex].getClientRects();\n            context.markDidDomLayout();\n            return this._createHorizontalRangesFromClientRects(clientRects, context.clientRectDeltaLeft, context.clientRectScale);\n        }\n        // If crossing over to a span only to select offset 0, then use the previous span's maximum offset\n        // Chrome is buggy and doesn't handle 0 offsets well sometimes.\n        if (startChildIndex !== endChildIndex) {\n            if (endChildIndex > 0 && endOffset === 0) {\n                endChildIndex--;\n                endOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        let startElement = domNode.children[startChildIndex].firstChild;\n        let endElement = domNode.children[endChildIndex].firstChild;\n        if (!startElement || !endElement) {\n            // When having an empty <span> (without any text content), try to move to the previous <span>\n            if (!startElement && startOffset === 0 && startChildIndex > 0) {\n                startElement = domNode.children[startChildIndex - 1].firstChild;\n                startOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n            if (!endElement && endOffset === 0 && endChildIndex > 0) {\n                endElement = domNode.children[endChildIndex - 1].firstChild;\n                endOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        if (!startElement || !endElement) {\n            return null;\n        }\n        startOffset = Math.min(startElement.textContent.length, Math.max(0, startOffset));\n        endOffset = Math.min(endElement.textContent.length, Math.max(0, endOffset));\n        const clientRects = this._readClientRects(startElement, startOffset, endElement, endOffset, context.endNode);\n        context.markDidDomLayout();\n        return this._createHorizontalRangesFromClientRects(clientRects, context.clientRectDeltaLeft, context.clientRectScale);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RangeUtil } from './rangeUtil.js';\nimport { FloatHorizontalRange, VisibleRanges } from '../../view/renderingContext.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine, LineRange, DomPosition } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nconst canUseFastRenderedViewLine = (function () {\n    if (platform.isNative) {\n        // In VSCode we know very well when the zoom level changes\n        return true;\n    }\n    if (platform.isLinux || browser.isFirefox || browser.isSafari) {\n        // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n        // --\n        // Even though we read character widths correctly, having read them at a specific zoom level\n        // does not mean they are the same at the current zoom level.\n        // --\n        // This could be improved if we ever figure out how to get an event when browsers zoom,\n        // but until then we have to stick with reading client rects.\n        // --\n        // The same has been observed with Firefox on Windows7\n        // --\n        // The same has been oversved with Safari\n        return false;\n    }\n    return true;\n})();\nlet monospaceAssumptionsAreValid = true;\nexport class ViewLineOptions {\n    constructor(config, themeType) {\n        this.themeType = themeType;\n        const options = config.options;\n        const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        const experimentalWhitespaceRendering = options.get(35 /* EditorOption.experimentalWhitespaceRendering */);\n        if (experimentalWhitespaceRendering === 'off') {\n            this.renderWhitespace = options.get(93 /* EditorOption.renderWhitespace */);\n        }\n        else {\n            // whitespace is rendered in a different layer\n            this.renderWhitespace = 'none';\n        }\n        this.renderControlCharacters = options.get(88 /* EditorOption.renderControlCharacters */);\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.useMonospaceOptimizations = (fontInfo.isMonospace\n            && !options.get(30 /* EditorOption.disableMonospaceOptimizations */));\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this.stopRenderingLineAfter = options.get(111 /* EditorOption.stopRenderingLineAfter */);\n        this.fontLigatures = options.get(48 /* EditorOption.fontLigatures */);\n    }\n    equals(other) {\n        return (this.themeType === other.themeType\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.fontLigatures === other.fontLigatures);\n    }\n}\nclass ViewLine {\n    constructor(options) {\n        this._options = options;\n        this._isMaybeInvalid = true;\n        this._renderedViewLine = null;\n    }\n    // --- begin IVisibleLineData\n    getDomNode() {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            return this._renderedViewLine.domNode.domNode;\n        }\n        return null;\n    }\n    setDomNode(domNode) {\n        if (this._renderedViewLine) {\n            this._renderedViewLine.domNode = createFastDomNode(domNode);\n        }\n        else {\n            throw new Error('I have no rendered view line to set the dom node to...');\n        }\n    }\n    onContentChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onTokensChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onDecorationsChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onOptionsChanged(newOptions) {\n        this._isMaybeInvalid = true;\n        this._options = newOptions;\n    }\n    onSelectionChanged() {\n        if (isHighContrast(this._options.themeType) || this._options.renderWhitespace === 'selection') {\n            this._isMaybeInvalid = true;\n            return true;\n        }\n        return false;\n    }\n    renderLine(lineNumber, deltaTop, viewportData, sb) {\n        if (this._isMaybeInvalid === false) {\n            // it appears that nothing relevant has changed\n            return false;\n        }\n        this._isMaybeInvalid = false;\n        const lineData = viewportData.getViewLineRenderingData(lineNumber);\n        const options = this._options;\n        const actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\n        // Only send selection information when needed for rendering whitespace\n        let selectionsOnLine = null;\n        if (isHighContrast(options.themeType) || this._options.renderWhitespace === 'selection') {\n            const selections = viewportData.selections;\n            for (const selection of selections) {\n                if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                    // Selection does not intersect line\n                    continue;\n                }\n                const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                if (startColumn < endColumn) {\n                    if (isHighContrast(options.themeType)) {\n                        actualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', 0 /* InlineDecorationType.Regular */));\n                    }\n                    if (this._options.renderWhitespace === 'selection') {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n        }\n        const renderLineInput = new RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, lineData.startVisibleColumn, options.spaceWidth, options.middotWidth, options.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, selectionsOnLine);\n        if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n            // no need to do anything, we have the same render input\n            return false;\n        }\n        sb.appendString('<div style=\"top:');\n        sb.appendString(String(deltaTop));\n        sb.appendString('px;height:');\n        sb.appendString(String(this._options.lineHeight));\n        sb.appendString('px;\" class=\"');\n        sb.appendString(ViewLine.CLASS_NAME);\n        sb.appendString('\">');\n        const output = renderViewLine(renderLineInput, sb);\n        sb.appendString('</div>');\n        let renderedViewLine = null;\n        if (monospaceAssumptionsAreValid && canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === 0 /* ForeignElementType.None */) {\n            renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\n        }\n        if (!renderedViewLine) {\n            renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\n        }\n        this._renderedViewLine = renderedViewLine;\n        return true;\n    }\n    layoutLine(lineNumber, deltaTop) {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            this._renderedViewLine.domNode.setTop(deltaTop);\n            this._renderedViewLine.domNode.setHeight(this._options.lineHeight);\n        }\n    }\n    // --- end IVisibleLineData\n    getWidth(context) {\n        if (!this._renderedViewLine) {\n            return 0;\n        }\n        return this._renderedViewLine.getWidth(context);\n    }\n    getWidthIsFast() {\n        if (!this._renderedViewLine) {\n            return true;\n        }\n        return this._renderedViewLine.getWidthIsFast();\n    }\n    needsMonospaceFontCheck() {\n        if (!this._renderedViewLine) {\n            return false;\n        }\n        return (this._renderedViewLine instanceof FastRenderedViewLine);\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this._renderedViewLine) {\n            return monospaceAssumptionsAreValid;\n        }\n        if (this._renderedViewLine instanceof FastRenderedViewLine) {\n            return this._renderedViewLine.monospaceAssumptionsAreValid();\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    onMonospaceAssumptionsInvalidated() {\n        if (this._renderedViewLine && this._renderedViewLine instanceof FastRenderedViewLine) {\n            this._renderedViewLine = this._renderedViewLine.toSlowRenderedLine();\n        }\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this._renderedViewLine) {\n            return null;\n        }\n        startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n        endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n        const stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter;\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\n            // This range is obviously not visible\n            return new VisibleRanges(true, [new FloatHorizontalRange(this.getWidth(context), 0)]);\n        }\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\n            startColumn = stopRenderingLineAfter + 1;\n        }\n        if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\n            endColumn = stopRenderingLineAfter + 1;\n        }\n        const horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(lineNumber, startColumn, endColumn, context);\n        if (horizontalRanges && horizontalRanges.length > 0) {\n            return new VisibleRanges(false, horizontalRanges);\n        }\n        return null;\n    }\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        if (!this._renderedViewLine) {\n            return 1;\n        }\n        return this._renderedViewLine.getColumnOfNodeOffset(lineNumber, spanNode, offset);\n    }\n}\nViewLine.CLASS_NAME = 'view-line';\nexport { ViewLine };\n/**\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\n */\nclass FastRenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping) {\n        this._cachedWidth = -1;\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        const keyColumnCount = Math.floor(renderLineInput.lineContent.length / 300 /* Constants.MaxMonospaceDistance */);\n        if (keyColumnCount > 0) {\n            this._keyColumnPixelOffsetCache = new Float32Array(keyColumnCount);\n            for (let i = 0; i < keyColumnCount; i++) {\n                this._keyColumnPixelOffsetCache[i] = -1;\n            }\n        }\n        else {\n            this._keyColumnPixelOffsetCache = null;\n        }\n        this._characterMapping = characterMapping;\n        this._charWidth = renderLineInput.spaceWidth;\n    }\n    getWidth(context) {\n        if (!this.domNode || this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(this._characterMapping.length);\n            return Math.round(this._charWidth * horizontalOffset);\n        }\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n            context === null || context === void 0 ? void 0 : context.markDidDomLayout();\n        }\n        return this._cachedWidth;\n    }\n    getWidthIsFast() {\n        return (this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) || this._cachedWidth !== -1;\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this.domNode) {\n            return monospaceAssumptionsAreValid;\n        }\n        if (this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) {\n            const expectedWidth = this.getWidth(null);\n            const actualWidth = this.domNode.domNode.firstChild.offsetWidth;\n            if (Math.abs(expectedWidth - actualWidth) >= 2) {\n                // more than 2px off\n                console.warn(`monospace assumptions have been violated, therefore disabling monospace optimizations!`);\n                monospaceAssumptionsAreValid = false;\n            }\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    toSlowRenderedLine() {\n        return createRenderedLine(this.domNode, this.input, this._characterMapping, false, 0 /* ForeignElementType.None */);\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        const startPosition = this._getColumnPixelOffset(lineNumber, startColumn, context);\n        const endPosition = this._getColumnPixelOffset(lineNumber, endColumn, context);\n        return [new FloatHorizontalRange(startPosition, endPosition - startPosition)];\n    }\n    _getColumnPixelOffset(lineNumber, column, context) {\n        if (column <= 300 /* Constants.MaxMonospaceDistance */) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            return this._charWidth * horizontalOffset;\n        }\n        const keyColumnOrdinal = Math.floor((column - 1) / 300 /* Constants.MaxMonospaceDistance */) - 1;\n        const keyColumn = (keyColumnOrdinal + 1) * 300 /* Constants.MaxMonospaceDistance */ + 1;\n        let keyColumnPixelOffset = -1;\n        if (this._keyColumnPixelOffsetCache) {\n            keyColumnPixelOffset = this._keyColumnPixelOffsetCache[keyColumnOrdinal];\n            if (keyColumnPixelOffset === -1) {\n                keyColumnPixelOffset = this._actualReadPixelOffset(lineNumber, keyColumn, context);\n                this._keyColumnPixelOffsetCache[keyColumnOrdinal] = keyColumnPixelOffset;\n            }\n        }\n        if (keyColumnPixelOffset === -1) {\n            // Could not read actual key column pixel offset\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            return this._charWidth * horizontalOffset;\n        }\n        const keyColumnHorizontalOffset = this._characterMapping.getHorizontalOffset(keyColumn);\n        const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n        return keyColumnPixelOffset + this._charWidth * (horizontalOffset - keyColumnHorizontalOffset);\n    }\n    _getReadingTarget(myDomNode) {\n        return myDomNode.domNode.firstChild;\n    }\n    _actualReadPixelOffset(lineNumber, column, context) {\n        if (!this.domNode) {\n            return -1;\n        }\n        const domPosition = this._characterMapping.getDomPosition(column);\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(this.domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        return r[0].left;\n    }\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        const spanNodeTextContentLength = spanNode.textContent.length;\n        let spanIndex = -1;\n        while (spanNode) {\n            spanNode = spanNode.previousSibling;\n            spanIndex++;\n        }\n        return this._characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n    }\n}\n/**\n * Every time we render a line, we save what we have rendered in an instance of this class.\n */\nclass RenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n        this._containsForeignElements = containsForeignElements;\n        this._cachedWidth = -1;\n        this._pixelOffsetCache = null;\n        if (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\n            this._pixelOffsetCache = new Float32Array(Math.max(2, this._characterMapping.length + 1));\n            for (let column = 0, len = this._characterMapping.length; column <= len; column++) {\n                this._pixelOffsetCache[column] = -1;\n            }\n        }\n    }\n    // --- Reading from the DOM methods\n    _getReadingTarget(myDomNode) {\n        return myDomNode.domNode.firstChild;\n    }\n    /**\n     * Width of the line in pixels\n     */\n    getWidth(context) {\n        if (!this.domNode) {\n            return 0;\n        }\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n            context === null || context === void 0 ? void 0 : context.markDidDomLayout();\n        }\n        return this._cachedWidth;\n    }\n    getWidthIsFast() {\n        if (this._cachedWidth === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Visible ranges for a model range\n     */\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this.domNode) {\n            return null;\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const startOffset = this._readPixelOffset(this.domNode, lineNumber, startColumn, context);\n            if (startOffset === -1) {\n                return null;\n            }\n            const endOffset = this._readPixelOffset(this.domNode, lineNumber, endColumn, context);\n            if (endOffset === -1) {\n                return null;\n            }\n            return [new FloatHorizontalRange(startOffset, endOffset - startOffset)];\n        }\n        return this._readVisibleRangesForRange(this.domNode, lineNumber, startColumn, endColumn, context);\n    }\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        if (startColumn === endColumn) {\n            const pixelOffset = this._readPixelOffset(domNode, lineNumber, startColumn, context);\n            if (pixelOffset === -1) {\n                return null;\n            }\n            else {\n                return [new FloatHorizontalRange(pixelOffset, 0)];\n            }\n        }\n        else {\n            return this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\n        }\n    }\n    _readPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            if (this._containsForeignElements === 0 /* ForeignElementType.None */) {\n                // We can assume the line is really empty\n                return 0;\n            }\n            if (this._containsForeignElements === 2 /* ForeignElementType.After */) {\n                // We have foreign elements after the (empty) line\n                return 0;\n            }\n            if (this._containsForeignElements === 1 /* ForeignElementType.Before */) {\n                // We have foreign elements before the (empty) line\n                return this.getWidth(context);\n            }\n            // We have foreign elements before & after the (empty) line\n            const readingTarget = this._getReadingTarget(domNode);\n            if (readingTarget.firstChild) {\n                context.markDidDomLayout();\n                return readingTarget.firstChild.offsetWidth;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const cachedPixelOffset = this._pixelOffsetCache[column];\n            if (cachedPixelOffset !== -1) {\n                return cachedPixelOffset;\n            }\n            const result = this._actualReadPixelOffset(domNode, lineNumber, column, context);\n            this._pixelOffsetCache[column] = result;\n            return result;\n        }\n        return this._actualReadPixelOffset(domNode, lineNumber, column, context);\n    }\n    _actualReadPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context);\n            if (!r || r.length === 0) {\n                return -1;\n            }\n            return r[0].left;\n        }\n        if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0 /* ForeignElementType.None */) {\n            // This branch helps in the case of whitespace only lines which have a width set\n            return this.getWidth(context);\n        }\n        const domPosition = this._characterMapping.getDomPosition(column);\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        const result = r[0].left;\n        if (this.input.isBasicASCII) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            const expectedResult = Math.round(this.input.spaceWidth * horizontalOffset);\n            if (Math.abs(expectedResult - result) <= 1) {\n                return expectedResult;\n            }\n        }\n        return result;\n    }\n    _readRawVisibleRangesForRange(domNode, startColumn, endColumn, context) {\n        if (startColumn === 1 && endColumn === this._characterMapping.length) {\n            // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n            return [new FloatHorizontalRange(0, this.getWidth(context))];\n        }\n        const startDomPosition = this._characterMapping.getDomPosition(startColumn);\n        const endDomPosition = this._characterMapping.getDomPosition(endColumn);\n        return RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startDomPosition.partIndex, startDomPosition.charIndex, endDomPosition.partIndex, endDomPosition.charIndex, context);\n    }\n    /**\n     * Returns the column for the text found at a specific offset inside a rendered dom node\n     */\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        const spanNodeTextContentLength = spanNode.textContent.length;\n        let spanIndex = -1;\n        while (spanNode) {\n            spanNode = spanNode.previousSibling;\n            spanIndex++;\n        }\n        return this._characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n    }\n}\nclass WebKitRenderedViewLine extends RenderedViewLine {\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        const output = super._readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context);\n        if (!output || output.length === 0 || startColumn === endColumn || (startColumn === 1 && endColumn === this._characterMapping.length)) {\n            return output;\n        }\n        // WebKit is buggy and returns an expanded range (to contain words in some cases)\n        // The last client rect is enlarged (I think)\n        if (!this.input.containsRTL) {\n            // This is an attempt to patch things up\n            // Find position of last column\n            const endPixelOffset = this._readPixelOffset(domNode, lineNumber, endColumn, context);\n            if (endPixelOffset !== -1) {\n                const lastRange = output[output.length - 1];\n                if (lastRange.left < endPixelOffset) {\n                    // Trim down the width of the last visible range to not go after the last column's position\n                    lastRange.width = endPixelOffset - lastRange.left;\n                }\n            }\n        }\n        return output;\n    }\n}\nconst createRenderedLine = (function () {\n    if (browser.isWebKit) {\n        return createWebKitRenderedLine;\n    }\n    return createNormalRenderedLine;\n})();\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './margin.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nclass Margin extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._canUseLayerHinting = !options.get(29 /* EditorOption.disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(Margin.OUTER_CLASS_NAME);\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._glyphMarginBackgroundDomNode = createFastDomNode(document.createElement('div'));\n        this._glyphMarginBackgroundDomNode.setClassName(Margin.CLASS_NAME);\n        this._domNode.appendChild(this._glyphMarginBackgroundDomNode);\n    }\n    dispose() {\n        super.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._canUseLayerHinting = !options.get(29 /* EditorOption.disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollTopChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setLayerHinting(this._canUseLayerHinting);\n        this._domNode.setContain('strict');\n        const adjustedScrollTop = ctx.scrollTop - ctx.bigNumbersDelta;\n        this._domNode.setTop(-adjustedScrollTop);\n        const height = Math.min(ctx.scrollHeight, 1000000);\n        this._domNode.setHeight(height);\n        this._domNode.setWidth(this._contentLeft);\n        this._glyphMarginBackgroundDomNode.setLeft(this._glyphMarginLeft);\n        this._glyphMarginBackgroundDomNode.setWidth(this._glyphMarginWidth);\n        this._glyphMarginBackgroundDomNode.setHeight(height);\n    }\n}\nMargin.CLASS_NAME = 'glyph-margin';\nMargin.OUTER_CLASS_NAME = 'margin';\nexport { Margin };\n"],"names":["ViewContentWidgets","_ViewPart","_inherits","_super","_createSuper","context","viewDomNode","_this","_classCallCheck","call","_viewDomNode","_widgets","domNode","createFastDomNode","document","createElement","PartFingerprints","setClassName","setPosition","setTop","overflowingContentWidgetsDomNode","_createClass","key","value","_get","_getPrototypeOf","prototype","this","e","_i","_keys","Object","keys","length","widgetId","onConfigurationChanged","_updateAnchorsViewPositions","_i2","_keys2","updateAnchorViewPosition","_widget","myWidget","Widget","_context","id","allowEditorOverflow","appendChild","setShouldRender","widget","primaryAnchor","secondaryAnchor","preference","affinity","getId","hasOwnProperty","parentNode","removeChild","removeAttribute","suppressMouseDown","viewportData","_i3","_keys3","onBeforeRender","ctx","_i4","_keys4","prepareRender","_i5","_keys5","render","ViewPart","actual","_primaryAnchor","PositionPair","_secondaryAnchor","_actual","getDomNode","options","configuration","layoutInfo","get","_fixedOverflowWidgets","_contentWidth","contentWidth","_contentLeft","contentLeft","_lineHeight","_affinity","_preference","_cachedDomNodeOffsetWidth","_cachedDomNodeOffsetHeight","_maxWidth","_getMaxWidth","_isVisible","_renderData","setDisplay","setVisibility","setAttribute","setMaxWidth","hasChanged","_setPosition","modelPosition","getValidPositionPair","position","viewModel","validModelPosition","model","validatePosition","coordinatesConverter","modelPositionIsVisible","viewPosition","convertModelPositionToViewPosition","undefined","window","innerWidth","documentElement","offsetWidth","body","anchor","width","height","aboveLineTop","top","heightAvailableAboveLine","underLineTop","aboveTop","fitsAbove","belowTop","fitsBelow","viewportHeight","left","scrollLeft","viewportWidth","windowSize","domNodePosition","MIN_LIMIT","Math","max","MAX_LIMIT","min","absoluteLeft","scrollX","delta","dom","getDomNodePagePosition","absoluteAboveTop","scrollY","absoluteBelowTop","getClientArea","_this$_layoutHorizont","_layoutHorizontalSegmentInPage","_this$_layoutHorizont2","_slicedToArray","absoluteAboveLeft","topLeft","Coordinate","_a","_b","primary","getCoordinates","secondary","lineNumber","lineHeight","horizontalPosition","visibleRangeForPosition","column","getVerticalOffsetForLineNumber","scrollTop","AnchorCoordinate","fontInfo","typicalFullwidthCharacterWidth","_this$_getAnchorsCoor","_getAnchorsCoordinates","preferredDimensions","beforeRender","safeInvoke","clientRect","getBoundingClientRect","round","placement","_reduceAnchorCoordinates","_layoutBoxInPage","_layoutBoxInViewport","pass","_step","_iterator","_createForOfIteratorHelper","s","n","done","pref","coordinate","_prepareRenderWidgetAtExactPositionOverflowing","err","f","startLineNumber","endLineNumber","_prepareRenderWidget","afterRender","setLeft","bigNumbersDelta","_coordinateBrand","_anchorCoordinateBrand","fn","thisArg","_len","arguments","args","Array","_key","apply","concat","AbstractLineHighlightOverlay","_DynamicViewOverlay","_renderLineHighlight","_renderLineHighlightOnlyWhenFocus","_selectionIsEmpty","_focused","_cursorLineNumbers","_selections","Selection","addEventHandler","_assertThisInitialized","removeEventHandler","cursorsLineNumbers","map","positionLineNumber","sort","a","b","arrays","selectionIsEmpty","every","isEmpty","_readFromSelections","selections","scrollWidthChanged","scrollTopChanged","isFocused","_shouldRenderThis","renderedLine","_renderOne","visibleStartLineNumber","visibleRange","visibleEndLineNumber","len","index","renderData","lineIndex","DynamicViewOverlay","CurrentLineHighlightOverlay","_AbstractLineHighligh","_super2","className","_shouldRenderOther","scrollWidth","_shouldRenderInContent","_shouldRenderInMargin","CurrentLineMarginHighlightOverlay","_AbstractLineHighligh2","_super3","registerThemingParticipant","theme","collector","lineHighlight","getColor","editorLineHighlight","addRule","isTransparent","defines","editorLineHighlightBorder","lineHighlightBorder","isHighContrast","type","DecorationsOverlay","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_renderResult","_decorations","getDecorationsInViewport","decorations","decorationsLen","i","d","zIndex","aClassName","bClassName","Range","range","output","_renderWholeLineDecorations","_renderNormalDecorations","String","lenI","isWholeLine","decorationOutput","j","prevClassName","prevShowIfCollapsed","prevRange","showIfCollapsed","Boolean","endColumn","startColumn","getLineMaxColumn","_renderNormalDecoration","linesVisibleRanges","linesVisibleRangesForRange","lenJ","lineVisibleRanges","outsideRenderedLine","ranges","singleVisibleRange","center","HorizontalRange","k","lenK","EditorScrollbar","linesContent","overflowGuardDomNode","scrollbar","mouseWheelScrollSensitivity","fastScrollSensitivity","scrollPredominantAxis","scrollbarOptions","listenOnDomNode","getThemeTypeSelector","useShadows","lazyRender","vertical","horizontal","verticalHasArrows","horizontalHasArrows","verticalScrollbarSize","verticalSliderSize","horizontalScrollbarSize","horizontalSliderSize","handleMouseWheel","alwaysConsumeMouseWheel","arrowSize","scrollByPage","_register","SmoothScrollableElement","viewLayout","getScrollable","scrollbarDomNode","_setLayout","onBrowserDesperateReveal","lookAtScrollTop","lookAtScrollLeft","newScrollPosition","deltaTop","getCurrentScrollTop","deltaLeft","getCurrentScrollLeft","setScrollPosition","addDisposableListener","side","setWidth","minimap","minimapWidth","setHeight","getOverviewRulerLayoutInfo","browserEvent","delegateVerticalScrollbarPointerDown","delegateScrollFromMouseWheelEvent","newOpts","updateOptions","updateClassName","renderNow","DecorationToRender","_decorationToRenderBrand","DedupOverlay","prevEndLineIndex","startLineIndex","endLineIndex","push","GlyphMarginOverlay","_DedupOverlay","_glyphMargin","_glyphMarginLeft","glyphMarginLeft","_glyphMarginWidth","glyphMarginWidth","r","rLen","glyphMarginClassName","toRender","_render","_getDecorations","toString","common","classNames","join","IndentGuidesOverlay","_primaryPosition","wrappingInfo","_spaceWidth","spaceWidth","_maxIndentLeft","wrappingColumn","_bracketPairGuideOptions","newPosition","getPosition","equals","_c","_d","indentation","bracketPairs","activeCursorPosition","indents","getGuidesByLine","getLineCount","indent","result","leftOffset","Position","guide","visibleColumn","horizontalLine","_this2","bracketGuides","getBracketGuidesInRangeByLine","highlightActive","highlightActiveBracketPair","horizontalGuides","bracketPairsHorizontal","HorizontalGuidesState","includeInactive","indentGuides","getLinesIndentGuides","activeIndentStartLineNumber","activeIndentEndLineNumber","activeIndentLevel","highlightActiveIndentation","activeIndentInfo","getActiveIndentGuide","indentSize","getOptions","lineGuides","bracketGuidesInLine","bracketGuidesInLineQueue","ArrayQueue","indentGuidesInLine","_loop","indentGuide","indentLvl","isActive","_toConsumableArray","takeWhile","g","peeked","peek","IndentGuide","transparentToUndefined","color","colors","bracketColor","editorBracketHighlightingForeground1","guideColor","editorBracketPairGuideBackground1","guideColorActive","editorBracketPairGuideActiveBackground1","editorBracketHighlightingForeground2","editorBracketPairGuideBackground2","editorBracketPairGuideActiveBackground2","editorBracketHighlightingForeground3","editorBracketPairGuideBackground3","editorBracketPairGuideActiveBackground3","editorBracketHighlightingForeground4","editorBracketPairGuideBackground4","editorBracketPairGuideActiveBackground4","editorBracketHighlightingForeground5","editorBracketPairGuideBackground5","editorBracketPairGuideActiveBackground5","editorBracketHighlightingForeground6","editorBracketPairGuideBackground6","editorBracketPairGuideActiveBackground6","colorProvider","BracketPairGuidesClassNames","colorValues","c","effectiveGuideColor","transparent","effectiveGuideColorActive","filter","isDefined","level","getInlineClassNameOfLevel","replace","activeClassName","DomReadingContext","_domNode","endNode","_didDomLayout","_clientRectDeltaLeft","_clientRectScale","_clientRectRead","rect","markDidDomLayout","readClientRect","LastRenderedData","_currentVisibleRange","currentVisibleRange","HorizontalRevealRangeRequest","minimalReveal","startScrollTop","stopScrollTop","scrollType","minLineNumber","maxLineNumber","HorizontalRevealSelectionsRequest","selection","ViewLines","_linesContent","_textRangeRestingSpot","_visibleLines","VisibleLinesCollection","conf","_isViewportWrapping","isViewportWrapping","_revealHorizontalRightPadding","_cursorSurroundingLines","_cursorSurroundingLinesStyle","_canUseLayerHinting","_viewLineOptions","ViewLineOptions","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","applyFontInfo","_maxLineWidth","_asyncUpdateLineWidths","RunOnceScheduler","_updateLineWidthsSlow","_asyncCheckMonospaceFontAssumptions","_checkMonospaceFontAssumptions","_lastRenderedData","_horizontalRevealRequest","_stickyScrollEnabled","enabled","_maxNumberStickyLines","maxLineCount","dispose","ViewLine","_onOptionsMaybeChanged","newViewLineOptions","getStartLineNumber","getEndLineNumber","getVisibleLine","onOptionsChanged","rendStartLineNumber","rendEndLineNumber","onSelectionChanged","onDecorationsChanged","shouldRender","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","desiredScrollTop","_computeScrollTopToRevealRange","getFutureViewport","source","verticalType","validateScrollPosition","revealHorizontal","abs","scrollLeftChanged","onScrollChanged","onTokensChanged","setMaxLineWidth","onZonesChanged","spanNode","offset","viewLineDomNode","_getViewLineDomNode","_getLineNumberFor","getColumnOfNodeOffset","minColumn","getLineMinColumn","node","nodeType","parentElement","getWidth","_updateLineWidthsSlowIfDomDidLayout","_range","includeNewLines","originalEndLineNumber","getCurrentVisibleRange","visibleRanges","visibleRangesLen","domReadingContext","nextLineModelLineNumber","convertViewPositionToModelPosition","visibleRangesForLine","getVisibleRangesForRange","LineVisibleRanges","_visibleRangesForLineRange","HorizontalPosition","_updateLineWidths","didDomLayout","isScheduled","cancel","fast","localMaxLineWidth","allWidthsComputed","visibleLine","getWidthIsFast","_ensureMaxLineWidth","longestLineNumber","longestWidth","needsMonospaceFontCheck","lineWidth","monospaceAssumptionsAreValid","onMonospaceAssumptionsInvalidated","Error","renderLines","setCurrentVisibleRange","getScrollWidth","getScrollHeight","horizontalRevealRequest","onDidRender","newScrollLeft","_computeScrollLeftToReveal","maxHorizontalOffset","_updateLineWidthsFast","schedule","platform","setLayerHinting","setContain","adjustedScrollTop","iLineWidth","ceil","viewport","boxIsSingleRange","boxStartY","boxEndY","viewportStartY","viewportEndY","newScrollTop","paddingTop","paddingBottom","minScrollTop","boxMiddleY","_computeMinimumScrolling","getCurrentViewport","viewportStartX","viewportEndX","verticalScrollbarWidth","boxStartX","boxEndX","_step2","_iterator2","_step3","_iterator3","HORIZONTAL_EXTRA_PX","viewportStart","viewportEnd","boxStart","boxEnd","revealAtStart","revealAtEnd","viewportLength","LinesDecorationsOverlay","_decorationsLeft","decorationsLeft","_decorationsWidth","decorationsWidth","linesDecorationsClassName","firstLineDecorationClassName","lineOutput","MarginViewLineDecorationsOverlay","marginClassName","allCharCodes","v","MinimapCharRenderer","charData","scale","_minimapCharRendererBrand","charDataNormal","soften","charDataLight","target","dx","dy","chCode","foregroundAlpha","backgroundColor","backgroundAlpha","fontScale","useLighterFont","force1pxHeight","charWidth","charHeight","renderHeight","console","warn","charIndex","getCharIndex","destWidth","backgroundR","backgroundG","backgroundB","deltaR","deltaG","deltaB","destAlpha","dest","data","sourceOffset","row","y","x","colorR","colorG","colorB","input","ratio","Uint8ClampedArray","toUint8","charTable","A","B","C","D","E","F","decodeData","str","prebakedMiniMaps","once","MinimapCharRendererFactory","fontFamily","lastCreated","lastFontFamily","factory","createFromSampleData","createSampleData","canvas","getContext","style","fillStyle","font","textBaseline","code","fillText","fromCharCode","getImageData","_downsample","destOffset","targetIndex","brightest","sourceY1","sourceY2","sourceX1","sourceX2","samples","sy","sourceRow","floor","yBalance","sx","xBalance","sourceIndex","weight","final","pixelsPerCharacter","resultLen","resultOffset","_downsampleChar","adjust","MinimapOptions","tokensColorTracker","pixelRatio","minimapLayout","minimapOpts","renderMinimap","size","minimapHeightIsEditorHeight","scrollBeyondLastLine","bottom","showSlider","autohide","minimapLeft","minimapHeight","canvasInnerWidth","minimapCanvasInnerWidth","canvasInnerHeight","minimapCanvasInnerHeight","canvasOuterWidth","minimapCanvasOuterWidth","canvasOuterHeight","minimapCanvasOuterHeight","isSampling","minimapIsSampling","editorHeight","minimapScale","minimapLineHeight","minimapCharWidth","charRenderer","create","defaultBackgroundColor","_getMinimapBackground","_getMinimapForegroundOpacity","other","themeColor","minimapBackground","RGBA8","rgba","minimapForegroundOpacity","MinimapLayout","scrollHeight","sliderNeeded","_computedSliderRatio","sliderTop","sliderHeight","topPaddingLineCount","pageY","viewportStartLineNumber","viewportEndLineNumber","viewportStartLineNumberVerticalOffset","viewportContainsWhitespaceGaps","lineCount","realLineCount","previousLayout","minimapLinesFitting","logicalScrollHeight","maxMinimapSliderTop","computedSliderRatio","maxLinesFitting","viewportLineCount","expectedViewportLineCount","extraLinesAtTheTop","extraLinesAtTheBottom","consideringStartLineNumber","partialLine","MinimapLine","INVALID","RenderData","renderedLayout","imageData","lines","_imageData","_renderedLines","RenderedLinesCollection","_set","layout","scrollEquals","tmp","rendLineNumberStart","changeFromLineNumber","changeCount","deleteFromLineNumber","deleteToLineNumber","insertFromLineNumber","insertToLineNumber","MinimapBuffers","WIDTH","HEIGHT","background","_backgroundFillData","_createBackgroundFillData","_buffers","createImageData","_lastUsedBuffer","set","backgroundA","MinimapSamplingState","samplingRatio","minimapLines","fromLineNumber","toLineNumber","fromLineIndex","modelLineToMinimapLine","toLineIndex","sampledLineNumber","minimapLineStart","minimapLineEnd","deletedLineCount","changeStartIndex","changeEndIndex","insertedLineCount","viewLineCount","oldSamplingState","minimapLineCount","EditorLayoutInfoComputer","halfRatio","lastIndex","oldMinimapLines","oldLength","oldIndex","oldDeltaLineCount","minViewLineNumber","events","lastEvent","fromViewLineNumber","toViewLineNumber","oldMinimapLineNumber","_oldIndex","selectedViewLineNumber","Minimap","MinimapTokensColorTracker","_minimapSelections","_MinimapSamplingState","compute","samplingState","_samplingState","_shouldCheckSampling","InnerMinimap","_get2","opts","_recreateLineSampling","onDidChangeOptions","affectsMinimap","minimapLineRange","modelLineRangeToMinimapLineRange","count","_this$_samplingState$","_this$_samplingState$2","onThemeChanged","onTokensColorsChanged","minimapCtx","whitespaceViewportData","wasSampling","_MinimapSamplingState3","_MinimapSamplingState4","event","getLineContent","needed","getViewLineData","getMinimapLinesRenderingData","_this$_samplingState$3","decorationLineRangeToMinimapLineRange","_this$_samplingState$4","modelStartLineNumber","modelEndLineNumber","_step4","_iterator4","decoration","minimapStartLineNumber","minimapEndLineNumber","ViewModelDecoration","revealRange","_Disposable","_this3","_renderDecorations","_gestureInProgress","_theme","_model","_lastRenderData","_selectionColor","minimapSelection","_getMinimapDomNodeClassName","_shadow","_canvas","_decorationsCanvas","_slider","_sliderHorizontal","_applyLayout","_pointerDownListener","addStandardDisposableListener","EventType","POINTER_DOWN","preventDefault","internalOffsetY","offsetY","revealLineNumber","button","initialPosY","_startSliderDragging","_sliderPointerMoveMonitor","GlobalPointerMoveMonitor","_sliderPointerDownListener","stopPropagation","_gestureDisposable","Gesture","_sliderTouchStartListener","toggleClassName","scrollDueToTouchEvent","passive","_sliderTouchMoveListener","_sliderTouchEndListener","initialSliderState","_this4","Element","initialPosX","pageX","handlePointerMove","posy","posx","minimapPosition","pointerOrthogonalDelta","setScrollTop","pointerDelta","getDesiredScrollTopFromDelta","startMonitoring","pointerId","buttons","pointerMoveData","touch","startY","getDesiredScrollTopFromTouchLocation","class_","getBuffer","renderingCtx","getRealLineCount","renderDecorations","getSelections","getMinimapDecorationsInViewport","_this$_model$options","tabSize","canvasContext","clearRect","highlightedLines","ContiguousLineMap","_renderSelectionLineHighlights","_renderDecorationsLineHighlights","lineOffsetMap","_renderSelectionsHighlights","_renderDecorationsHighlights","_step5","y1","y2","_iterator5","intersection","intersectWithViewport","_intersection","line","yy1","getYForLineNumber","yy2","fillRect","MINIMAP_GUTTER_WIDTH","highlightColors","Map","minimapOptions","MinimapPosition","_intersection2","decorationColor","highlightColor","has","characterWidth","_step6","_iterator6","_intersection3","renderDecorationOnLine","_step7","_iterator7","_intersection4","renderDecoration","decorationRange","x1","getXOffsetForPosition","x2","lineIndexToXOffset","lineData","prevx","charCode","charCodeAt","strings","linesEquals","_lastData","_getBuffer","_InnerMinimap$_render","_renderUntouchedLines","_InnerMinimap$_render2","_dirtyY1","_dirtyY2","lineInfo","defaultBackground","backgroundIsLight","renderMinimapLineHeight","innerLinePadding","renderBackground","renderedLines","_renderLine","dirtyY1","dirtyHeight","putImageData","lastRenderData","lastTargetData","lastStartLineNumber","lastLines","lastLinesLength","targetData","maxDestPixel","dirtyPixel1","dirtyPixel2","copySourceStart","copySourceEnd","copyDestStart","copyDestEnd","dest_dy","lastLineIndex","source_dy","sourceStart","sourceEnd","destStart","destEnd","subarray","colorTracker","minimapCharRenderer","content","tokens","maxDx","tabsCharDelta","tokenIndex","tokensLen","getCount","tokenEndIndex","getEndOffset","tokenColorId","getForeground","tokenColor","insertSpacesCount","blockRenderChar","renderChar","Disposable","defaultValue","_startLineNumber","_endLineNumber","_defaultValue","_values","ViewOverlayWidgets","_verticalScrollbarWidth","_minimapWidth","_horizontalScrollbarHeight","horizontalScrollbarHeight","_editorHeight","_editorWidth","widgetData","setRight","widgetHeight","clientHeight","right","_renderWidget","Settings","config","overviewRulerLanes","renderBorder","borderColor","editorOverviewRulerBorder","hideCursor","cursorColor","editorCursorForeground","themeType","minimapEnabled","minimapSide","editorOverviewRulerBackground","TokenizationRegistry","overviewRuler","domWidth","domHeight","canvasWidth","canvasHeight","_this$_initLanes","_initLanes","_this$_initLanes2","w","canvasLeftOffset","laneCount","remainingWidth","leftWidth","rightWidth","centerWidth","centerOffset","Color","DecorationsOverviewRuler","_updateSettings","_tokensColorTrackerListener","changedColorMap","_cursorPositions","newSettings","_settings","affectsOverviewRuler","scrollHeightChanged","editorCtx","setBackgroundColor","heightRatio","getAllOverviewRulerDecorations","minDecorationHeight","halfMinDecorationHeight","canvasCtx","isOpaque","OverviewRulerDecorationsGroup","decorationGroup","decorationGroupData","prevLane","prevY1","prevY2","lane","yCenter","cursorHeight","halfCursorHeight","cursorX","cursorW","cursor","beginPath","strokeStyle","moveTo","lineTo","stroke","OverviewRuler","_ViewEventHandler","cssClassName","_zoneManager","OverviewZoneManager","setDOMWidth","setDOMHeight","setOuterHeight","setLineHeight","setPixelRatio","getDOMWidth","getDOMHeight","getCanvasWidth","getCanvasHeight","zones","setZones","getOuterHeight","colorZones","resolveColorZones","id2Color","getId2Color","_renderOneLane","currentColorId","currentFrom","currentTo","zone","zoneColorId","colorId","zoneFrom","from","zoneTo","to","ViewEventHandler","Rulers","_renderedRulers","_rulers","currentCount","desiredCount","rulerWidth","addCount","removeCount","pop","_ensureRulersCount","ruler","setBoxShadow","ScrollDecorationViewPart","_scrollTop","_width","_updateWidth","_shouldShow","_useShadows","newShouldShow","_updateShouldShow","HorizontalRangeWithStyle","startStyle","endStyle","LineVisibleRangesWithStyle","toStyledRange","item","toStyled","SelectionsOverlay","_previousFrameVisibleRangesWithStyle","_roundedSelection","slice","previousFrame","epsilon","previousFrameTop","previousFrameBottom","topLineNumber","bottomLineNumber","curLineRange","curLeft","curRight","prevLeft","prevRight","nextLeft","nextRight","_visibleRangesHaveGaps","_enrichVisibleRangesWithStyle","output2","hasMultipleSelections","visibleRangesHaveStyle","fullLineHeight","reducedLineHeight","firstLineNumber","lastLineNumber","innerCornerOutput","restOfSelectionOutput","_createSelectionPiece","SELECTION_CLASS_NAME","ROUNDED_PIECE_WIDTH","EDITOR_BACKGROUND_CLASS_NAME","SELECTION_TOP_RIGHT","SELECTION_BOTTOM_RIGHT","SELECTION_TOP_LEFT","SELECTION_BOTTOM_LEFT","thisFrameVisibleRangesWithStyle","visibleRangesWithStyle","_getVisibleRangesWithStyle","_actualRenderOneSelection","_ref","_ref2","editorSelectionForegroundColor","editorSelectionForeground","ViewCursorRenderData","paddingLeft","textContent","textContentClassName","ViewCursor","_cursorStyle","_lineCursorWidth","_position","_lastRenderedContent","pauseAnimation","transitionProperty","_this$_position","lineContent","_strings$getCharConta","_strings$getCharConta2","startOffset","endOffset","substring","_this$_getGraphemeAwa","_getGraphemeAwarePosition","_this$_getGraphemeAwa2","nextGrapheme","TextEditorCursorStyle","computeScreenAwareSize","_getTokenClassName","visibleRangeForCharacter","firstVisibleRangeForCharacter","findTokenIndexAtOffset","getClassName","_prepareRender","setPaddingLeft","ViewCursors","_readOnly","_cursorBlinking","_cursorSmoothCaretAnimation","_isComposingInput","_primaryCursor","_secondaryCursors","_updateDomClassName","_startCursorBlinkAnimation","TimeoutTimer","_cursorFlatBlinkInterval","IntervalTimer","_blinkingEnabled","_editorHasFocus","_updateBlinking","secondaryPositions","reason","onCursorPositionChanged","addCnt","newCursor","insertBefore","nextSibling","removeCnt","splice","positions","_onCursorPositionChanged","blinkingStyle","_getCursorBlinking","isHidden","isSolid","_hide","_show","cancelAndSet","BLINK_INTERVAL","setIfNotSet","_getClassName","show","hide","renderDataLen","primaryRenderData","secondaryRenderData","caret","caretBackground","editorCursorBackground","opposite","invalidFunc","ViewZones","marginDomNode","_zones","whitespaces","getWhitespaces","oldWhitespaces","whitespace","hadAChange","changeWhitespace","whitespaceAccessor","props","_computeWhitespaceProps","delegate","isInHiddenArea","oldWhitespace","afterLineNumber","afterViewLineNumber","heightInPx","changeOneWhitespace","_safeCallOnComputedHeight","_recomputeWhitespacesProps","afterColumn","_heightInPixels","minWidthInPx","_minWidthInPixels","zoneAfterModelPosition","zoneBeforeModelPosition","validAfterLineNumber","afterColumnAffinity","isVisible","callback","zonesHaveChanged","changeAccessor","addZone","_addZone","removeZone","_removeZone","layoutZone","_layoutZone","func","arg1","onUnexpectedError","safeInvoke1Arg","myZone","whitespaceId","insertWhitespace","_getZoneOrdinal","removeWhitespace","heightInLines","onComputedHeight","onDomNodeTop","visibleWhitespaces","visibleZones","hasVisibleZone","visibleWhitespace","newTop","newHeight","newDisplay","verticalOffset","_safeCallOnDomNodeTop","getScrolledTopFromAbsoluteTop","BlockDecorations","blocks","update","didChange","newContentWidth","blockClassName","block","blockIsAfterEnd","getVerticalOffsetAfterLineNumber","remove","WhitespaceOverlay","_options","WhitespaceOptions","_selection","newOptions","renderWhitespace","selectionsOnLine","maxColumn","LineRange","_applyRenderWhitespace","continuesWithWrappedLine","lastNonWhitespaceIndex","editorWhitespaces","USE_SVG","renderWithSVG","stopRenderingLineAfter","fauxIndentLength","onlyBoundary","onlyTrailing","middotWidth","wsmiddotWidth","renderSpaceCharCode","canUseHalfwidthRightwardsArrow","lineIsEmptyOrWhitespace","firstNonWhitespaceIndex","currentSelectionIndex","currentSelection","maxLeft","prevChCode","nextChCode","prevCharCode","_renderArrow","toFixed","p1","p2","p3","p4","p5","parts","p","experimentalWhitespaceRendering","View","commandDelegate","colorTheme","userInputEvents","overflowWidgetsDomNode","_renderAnimationFrame","viewController","ViewController","ViewContext","_viewParts","_textAreaHandler","TextAreaHandler","_createTextAreaHandlerHelper","_getEditorClassName","_overflowGuardContainer","_scrollbar","_viewLines","_viewZones","decorationsOverviewRuler","scrollDecoration","contentViewOverlays","ContentViewOverlays","addDynamicOverlay","marginViewOverlays","MarginViewOverlays","LineNumbersOverlay","margin","Margin","_contentWidgets","_viewCursors","_overlayWidgets","rulers","blockOutline","overviewRulerData","parent","textArea","textAreaCover","_pointerHandler","PointerHandler","_createPointerHandlerHelper","inputLatency","_renderNow","linesContentDomNode","viewLinesDomNode","focusTextArea","focus","dispatchTextAreaEvent","dispatchEvent","getLastRenderData","lastViewCursorsRenderData","lastTextareaPosition","PointerHandlerLastRenderData","shouldSuppressMouseDownOnViewZone","viewZoneId","shouldSuppressMouseDownOnWidget","getPositionFromDOMInfo","_flushAccumulatedAndRenderNow","getLineWidth","focused","_scheduleRender","runAtThisOrScheduleAtNextAnimationFrame","_onRenderScheduled","bind","safeInvokeNoArg","_actualRender","viewPart","isInDOM","viewPartsToRender","_getViewPartsToRender","partialViewportData","getLinesViewportData","setViewport","centeredLineNumber","ViewportData","getWhitespaceViewportData","renderText","renderingContext","RenderingContext","scrollPosition","tokenizeViewport","modelLineNumber","modelColumn","clientX","clientY","mouseTarget","getTargetAtClientPoint","ViewUserInputEvents","changeViewZones","now","everything","forceShouldRender","writeScreenReaderContent","setAriaOptions","addWidget","layoutContentWidget","_e","_f","_g","_h","setWidgetPosition","secondaryPosition","positionAffinity","removeWidget","layoutOverlayWidget","newPreference","ttPolicy","trustedTypes","createPolicy","createHTML","DOMLineBreaksComputerFactory","wrappingIndent","wordBreak","requests","injectedTexts","addRequest","lineText","injectedText","previousLineBreakData","finalize","firstLineBreakColumn","injectedTextsPerLine","createEmptyLineBreakWithPossiblyInjectedText","requestIdx","LineInjectedText","injectionOptions","t","injectionOffsets","text","ModelLineProjectionData","overallWidth","additionalIndent","additionalIndentSize","additionalIndentLength","containerDomNode","sb","StringBuilder","firstNonWhitespaceIndices","wrappedTextIndentLengths","renderLineContents","allCharOffsets","allVisibleColumns","wrappedTextIndentLength","indentWidth","renderLineContent","substr","renderLine","html","build","trustedhtml","innerHTML","overflowWrap","createRange","lineDomNodes","children","breakOffsets","readLineBreaks","visibleColumns","breakOffsetsVisibleColumn","curInjectedTexts","createLineBreaks","initialVisibleColumn","wrappingIndentLength","hangingOffset","appendString","charOffset","charOffsets","nextCharCode","producedCharacters","space","appendCharCode","appendASCIICharCode","lineDomNode","spans","discoverBreaks","log","low","lowRects","high","highRects","mid","midRects","setStart","firstChild","setEnd","getClientRects","_readConfig","_lastCursorModelPosition","_activeLineNumber","lineNumbers","_renderLineNumbers","renderType","_renderCustomLineNumbers","renderFn","_renderFinalNewline","_lineNumbersLeft","lineNumbersLeft","_lineNumbersWidth","lineNumbersWidth","primaryViewPosition","viewLineNumber","diff","lineHeightClassName","renderLineNumber","_getLineRenderLineNumber","extraClassName","getLineLength","CLASS_NAME","editorLineNumbersColor","editorLineNumbers","editorDimmedLineNumberColor","editorDimmedLineNumber","RangeUtil","_handyReadyRange","selectNodeContents","startElement","endElement","_createRange","_detachRange","FloatHorizontalRange","prev","clientRects","clientRectDeltaLeft","clientRectScale","_mergeAdjacentRanges","startChildIndex","endChildIndex","_createHorizontalRangesFromClientRects","_readClientRects","canUseFastRenderedViewLine","browser","isFirefox","isSafari","renderControlCharacters","useMonospaceOptimizations","isMonospace","fontLigatures","_isMaybeInvalid","_renderedViewLine","getViewLineRenderingData","actualInlineDecorations","LineDecoration","inlineDecorations","renderLineInput","RenderLineInput","isBasicASCII","containsRTL","startVisibleColumn","EditorFontLigatures","renderViewLine","renderedViewLine","containsForeignElements","FastRenderedViewLine","characterMapping","createRenderedLine","toSlowRenderedLine","VisibleRanges","horizontalRanges","_cachedWidth","keyColumnCount","_keyColumnPixelOffsetCache","Float32Array","_characterMapping","_charWidth","horizontalOffset","getHorizontalOffset","_getReadingTarget","expectedWidth","actualWidth","startPosition","_getColumnPixelOffset","endPosition","keyColumnOrdinal","keyColumn","keyColumnPixelOffset","_actualReadPixelOffset","keyColumnHorizontalOffset","myDomNode","domPosition","getDomPosition","readHorizontalRanges","partIndex","spanNodeTextContentLength","spanIndex","previousSibling","getColumn","DomPosition","RenderedViewLine","_isWhitespaceOnly","test","_containsForeignElements","_pixelOffsetCache","_readPixelOffset","_readVisibleRangesForRange","pixelOffset","_readRawVisibleRangesForRange","readingTarget","cachedPixelOffset","expectedResult","startDomPosition","endDomPosition","WebKitRenderedViewLine","_RenderedViewLine","endPixelOffset","lastRange","isWebKit","createWebKitRenderedLine","createNormalRenderedLine","OUTER_CLASS_NAME","_glyphMarginBackgroundDomNode"],"sourceRoot":""}