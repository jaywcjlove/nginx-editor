{"version":3,"file":"static/js/monaco-editor-vendor.96a37e40.0d13d85c.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/contentWidgets/contentWidgets.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/currentLineHighlight/currentLineHighlight.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/decorations/decorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/editorScrollbar/editorScrollbar.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/glyphMargin/glyphMargin.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/indentGuides/indentGuides.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/domReadingContext.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLines.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/linesDecorations/linesDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/marginDecorations/marginDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharSheet.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRenderer.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapPreBaked.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimap.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/overviewRuler.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/rulers/rulers.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/scrollDecoration/scrollDecoration.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/selections/selections.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursor.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursors.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewZones/viewZones.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/blockDecorations/blockDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/whitespace/whitespace.js","../node_modules/monaco-editor/esm/vs/editor/browser/view.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/domLineBreaksComputer.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/dynamicViewOverlay.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lineNumbers/lineNumbers.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/rangeUtil.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLine.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/margin/margin.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewContentWidgets extends ViewPart {\n    constructor(context, viewDomNode) {\n        super(context);\n        this._viewDomNode = viewDomNode;\n        this._widgets = {};\n        this.domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.domNode, 1 /* PartFingerprint.ContentWidgets */);\n        this.domNode.setClassName('contentWidgets');\n        this.domNode.setPosition('absolute');\n        this.domNode.setTop(0);\n        this.overflowingContentWidgetsDomNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.overflowingContentWidgetsDomNode, 2 /* PartFingerprint.OverflowingContentWidgets */);\n        this.overflowingContentWidgetsDomNode.setClassName('overflowingContentWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLineMappingChanged(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesChanged(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesDeleted(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesInserted(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    _updateAnchorsViewPositions() {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].updateAnchorViewPosition();\n        }\n    }\n    addWidget(_widget) {\n        const myWidget = new Widget(this._context, this._viewDomNode, _widget);\n        this._widgets[myWidget.id] = myWidget;\n        if (myWidget.allowEditorOverflow) {\n            this.overflowingContentWidgetsDomNode.appendChild(myWidget.domNode);\n        }\n        else {\n            this.domNode.appendChild(myWidget.domNode);\n        }\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, primaryAnchor, secondaryAnchor, preference, affinity) {\n        const myWidget = this._widgets[widget.getId()];\n        myWidget.setPosition(primaryAnchor, secondaryAnchor, preference, affinity);\n        this.setShouldRender();\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const myWidget = this._widgets[widgetId];\n            delete this._widgets[widgetId];\n            const domNode = myWidget.domNode.domNode;\n            domNode.parentNode.removeChild(domNode);\n            domNode.removeAttribute('monaco-visible-content-widget');\n            this.setShouldRender();\n        }\n    }\n    shouldSuppressMouseDownOnWidget(widgetId) {\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            return this._widgets[widgetId].suppressMouseDown;\n        }\n        return false;\n    }\n    onBeforeRender(viewportData) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onBeforeRender(viewportData);\n        }\n    }\n    prepareRender(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].render(ctx);\n        }\n    }\n}\nclass Widget {\n    constructor(context, viewDomNode, actual) {\n        this._primaryAnchor = new PositionPair(null, null);\n        this._secondaryAnchor = new PositionPair(null, null);\n        this._context = context;\n        this._viewDomNode = viewDomNode;\n        this._actual = actual;\n        this.domNode = createFastDomNode(this._actual.getDomNode());\n        this.id = this._actual.getId();\n        this.allowEditorOverflow = this._actual.allowEditorOverflow || false;\n        this.suppressMouseDown = this._actual.suppressMouseDown || false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this._fixedOverflowWidgets = options.get(40 /* EditorOption.fixedOverflowWidgets */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._affinity = null;\n        this._preference = [];\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n        this._maxWidth = this._getMaxWidth();\n        this._isVisible = false;\n        this._renderData = null;\n        this.domNode.setPosition((this._fixedOverflowWidgets && this.allowEditorOverflow) ? 'fixed' : 'absolute');\n        this.domNode.setDisplay('none');\n        this.domNode.setVisibility('hidden');\n        this.domNode.setAttribute('widgetId', this.id);\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        if (e.hasChanged(140 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n            this._contentLeft = layoutInfo.contentLeft;\n            this._contentWidth = layoutInfo.contentWidth;\n            this._maxWidth = this._getMaxWidth();\n        }\n    }\n    updateAnchorViewPosition() {\n        this._setPosition(this._affinity, this._primaryAnchor.modelPosition, this._secondaryAnchor.modelPosition);\n    }\n    _setPosition(affinity, primaryAnchor, secondaryAnchor) {\n        this._affinity = affinity;\n        this._primaryAnchor = getValidPositionPair(primaryAnchor, this._context.viewModel, this._affinity);\n        this._secondaryAnchor = getValidPositionPair(secondaryAnchor, this._context.viewModel, this._affinity);\n        function getValidPositionPair(position, viewModel, affinity) {\n            if (!position) {\n                return new PositionPair(null, null);\n            }\n            // Do not trust that widgets give a valid position\n            const validModelPosition = viewModel.model.validatePosition(position);\n            if (viewModel.coordinatesConverter.modelPositionIsVisible(validModelPosition)) {\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(validModelPosition, affinity !== null && affinity !== void 0 ? affinity : undefined);\n                return new PositionPair(position, viewPosition);\n            }\n            return new PositionPair(position, null);\n        }\n    }\n    _getMaxWidth() {\n        return (this.allowEditorOverflow\n            ? window.innerWidth || document.documentElement.offsetWidth || document.body.offsetWidth\n            : this._contentWidth);\n    }\n    setPosition(primaryAnchor, secondaryAnchor, preference, affinity) {\n        this._setPosition(affinity, primaryAnchor, secondaryAnchor);\n        this._preference = preference;\n        if (this._primaryAnchor.viewPosition && this._preference && this._preference.length > 0) {\n            // this content widget would like to be visible if possible\n            // we change it from `display:none` to `display:block` even if it\n            // might be outside the viewport such that we can measure its size\n            // in `prepareRender`\n            this.domNode.setDisplay('block');\n        }\n        else {\n            this.domNode.setDisplay('none');\n        }\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n    }\n    _layoutBoxInViewport(anchor, width, height, ctx) {\n        // Our visible box is split horizontally by the current line => 2 boxes\n        // a) the box above the line\n        const aboveLineTop = anchor.top;\n        const heightAvailableAboveLine = aboveLineTop;\n        // b) the box under the line\n        const underLineTop = anchor.top + anchor.height;\n        const heightAvailableUnderLine = ctx.viewportHeight - underLineTop;\n        const aboveTop = aboveLineTop - height;\n        const fitsAbove = (heightAvailableAboveLine >= height);\n        const belowTop = underLineTop;\n        const fitsBelow = (heightAvailableUnderLine >= height);\n        // And its left\n        let left = anchor.left;\n        if (left + width > ctx.scrollLeft + ctx.viewportWidth) {\n            left = ctx.scrollLeft + ctx.viewportWidth - width;\n        }\n        if (left < ctx.scrollLeft) {\n            left = ctx.scrollLeft;\n        }\n        return { fitsAbove, aboveTop, fitsBelow, belowTop, left };\n    }\n    _layoutHorizontalSegmentInPage(windowSize, domNodePosition, left, width) {\n        // Leave some clearance to the left/right\n        const LEFT_PADDING = 15;\n        const RIGHT_PADDING = 15;\n        // Initially, the limits are defined as the dom node limits\n        const MIN_LIMIT = Math.max(LEFT_PADDING, domNodePosition.left - width);\n        const MAX_LIMIT = Math.min(domNodePosition.left + domNodePosition.width + width, windowSize.width - RIGHT_PADDING);\n        let absoluteLeft = domNodePosition.left + left - window.scrollX;\n        if (absoluteLeft + width > MAX_LIMIT) {\n            const delta = absoluteLeft - (MAX_LIMIT - width);\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        if (absoluteLeft < MIN_LIMIT) {\n            const delta = absoluteLeft - MIN_LIMIT;\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        return [left, absoluteLeft];\n    }\n    _layoutBoxInPage(anchor, width, height, ctx) {\n        const aboveTop = anchor.top - height;\n        const belowTop = anchor.top + anchor.height;\n        const domNodePosition = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n        const absoluteAboveTop = domNodePosition.top + aboveTop - window.scrollY;\n        const absoluteBelowTop = domNodePosition.top + belowTop - window.scrollY;\n        const windowSize = dom.getClientArea(document.body);\n        const [left, absoluteAboveLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, anchor.left - ctx.scrollLeft + this._contentLeft, width);\n        // Leave some clearance to the top/bottom\n        const TOP_PADDING = 22;\n        const BOTTOM_PADDING = 22;\n        const fitsAbove = (absoluteAboveTop >= TOP_PADDING);\n        const fitsBelow = (absoluteBelowTop + height <= windowSize.height - BOTTOM_PADDING);\n        if (this._fixedOverflowWidgets) {\n            return {\n                fitsAbove,\n                aboveTop: Math.max(absoluteAboveTop, TOP_PADDING),\n                fitsBelow,\n                belowTop: absoluteBelowTop,\n                left: absoluteAboveLeft\n            };\n        }\n        return { fitsAbove, aboveTop, fitsBelow, belowTop, left };\n    }\n    _prepareRenderWidgetAtExactPositionOverflowing(topLeft) {\n        return new Coordinate(topLeft.top, topLeft.left + this._contentLeft);\n    }\n    /**\n     * Compute the coordinates above and below the primary and secondary anchors.\n     * The content widget *must* touch the primary anchor.\n     * The content widget should touch if possible the secondary anchor.\n     */\n    _getAnchorsCoordinates(ctx) {\n        var _a, _b;\n        const primary = getCoordinates(this._primaryAnchor.viewPosition, this._affinity, this._lineHeight);\n        const secondaryViewPosition = (((_a = this._secondaryAnchor.viewPosition) === null || _a === void 0 ? void 0 : _a.lineNumber) === ((_b = this._primaryAnchor.viewPosition) === null || _b === void 0 ? void 0 : _b.lineNumber) ? this._secondaryAnchor.viewPosition : null);\n        const secondary = getCoordinates(secondaryViewPosition, this._affinity, this._lineHeight);\n        return { primary, secondary };\n        function getCoordinates(position, affinity, lineHeight) {\n            if (!position) {\n                return null;\n            }\n            const horizontalPosition = ctx.visibleRangeForPosition(position);\n            if (!horizontalPosition) {\n                return null;\n            }\n            // Left-align widgets that should appear :before content\n            const left = (position.column === 1 && affinity === 3 /* PositionAffinity.LeftOfInjectedText */ ? 0 : horizontalPosition.left);\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.scrollTop;\n            return new AnchorCoordinate(top, left, lineHeight);\n        }\n    }\n    _reduceAnchorCoordinates(primary, secondary, width) {\n        if (!secondary) {\n            return primary;\n        }\n        const fontInfo = this._context.configuration.options.get(48 /* EditorOption.fontInfo */);\n        let left = secondary.left;\n        if (left < primary.left) {\n            left = Math.max(left, primary.left - width + fontInfo.typicalFullwidthCharacterWidth);\n        }\n        else {\n            left = Math.min(left, primary.left + width - fontInfo.typicalFullwidthCharacterWidth);\n        }\n        return new AnchorCoordinate(primary.top, left, primary.height);\n    }\n    _prepareRenderWidget(ctx) {\n        if (!this._preference || this._preference.length === 0) {\n            return null;\n        }\n        const { primary, secondary } = this._getAnchorsCoordinates(ctx);\n        if (!primary) {\n            return null;\n        }\n        if (this._cachedDomNodeOffsetWidth === -1 || this._cachedDomNodeOffsetHeight === -1) {\n            let preferredDimensions = null;\n            if (typeof this._actual.beforeRender === 'function') {\n                preferredDimensions = safeInvoke(this._actual.beforeRender, this._actual);\n            }\n            if (preferredDimensions) {\n                this._cachedDomNodeOffsetWidth = preferredDimensions.width;\n                this._cachedDomNodeOffsetHeight = preferredDimensions.height;\n            }\n            else {\n                const domNode = this.domNode.domNode;\n                const clientRect = domNode.getBoundingClientRect();\n                this._cachedDomNodeOffsetWidth = Math.round(clientRect.width);\n                this._cachedDomNodeOffsetHeight = Math.round(clientRect.height);\n            }\n        }\n        const anchor = this._reduceAnchorCoordinates(primary, secondary, this._cachedDomNodeOffsetWidth);\n        let placement;\n        if (this.allowEditorOverflow) {\n            placement = this._layoutBoxInPage(anchor, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        else {\n            placement = this._layoutBoxInViewport(anchor, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        // Do two passes, first for perfect fit, second picks first option\n        for (let pass = 1; pass <= 2; pass++) {\n            for (const pref of this._preference) {\n                // placement\n                if (pref === 1 /* ContentWidgetPositionPreference.ABOVE */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsAbove) {\n                        return { coordinate: new Coordinate(placement.aboveTop, placement.left), position: 1 /* ContentWidgetPositionPreference.ABOVE */ };\n                    }\n                }\n                else if (pref === 2 /* ContentWidgetPositionPreference.BELOW */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsBelow) {\n                        return { coordinate: new Coordinate(placement.belowTop, placement.left), position: 2 /* ContentWidgetPositionPreference.BELOW */ };\n                    }\n                }\n                else {\n                    if (this.allowEditorOverflow) {\n                        return { coordinate: this._prepareRenderWidgetAtExactPositionOverflowing(new Coordinate(anchor.top, anchor.left)), position: 0 /* ContentWidgetPositionPreference.EXACT */ };\n                    }\n                    else {\n                        return { coordinate: new Coordinate(anchor.top, anchor.left), position: 0 /* ContentWidgetPositionPreference.EXACT */ };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * On this first pass, we ensure that the content widget (if it is in the viewport) has the max width set correctly.\n     */\n    onBeforeRender(viewportData) {\n        if (!this._primaryAnchor.viewPosition || !this._preference) {\n            return;\n        }\n        if (this._primaryAnchor.viewPosition.lineNumber < viewportData.startLineNumber || this._primaryAnchor.viewPosition.lineNumber > viewportData.endLineNumber) {\n            // Outside of viewport\n            return;\n        }\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRenderWidget(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            // This widget should be invisible\n            if (this._isVisible) {\n                this.domNode.removeAttribute('monaco-visible-content-widget');\n                this._isVisible = false;\n                this.domNode.setVisibility('hidden');\n            }\n            if (typeof this._actual.afterRender === 'function') {\n                safeInvoke(this._actual.afterRender, this._actual, null);\n            }\n            return;\n        }\n        // This widget should be visible\n        if (this.allowEditorOverflow) {\n            this.domNode.setTop(this._renderData.coordinate.top);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        else {\n            this.domNode.setTop(this._renderData.coordinate.top + ctx.scrollTop - ctx.bigNumbersDelta);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        if (!this._isVisible) {\n            this.domNode.setVisibility('inherit');\n            this.domNode.setAttribute('monaco-visible-content-widget', 'true');\n            this._isVisible = true;\n        }\n        if (typeof this._actual.afterRender === 'function') {\n            safeInvoke(this._actual.afterRender, this._actual, this._renderData.position);\n        }\n    }\n}\nclass PositionPair {\n    constructor(modelPosition, viewPosition) {\n        this.modelPosition = modelPosition;\n        this.viewPosition = viewPosition;\n    }\n}\nclass Coordinate {\n    constructor(top, left) {\n        this.top = top;\n        this.left = left;\n        this._coordinateBrand = undefined;\n    }\n}\nclass AnchorCoordinate {\n    constructor(top, left, height) {\n        this.top = top;\n        this.left = left;\n        this.height = height;\n        this._anchorCoordinateBrand = undefined;\n    }\n}\nfunction safeInvoke(fn, thisArg, ...args) {\n    try {\n        return fn.call(thisArg, ...args);\n    }\n    catch (_a) {\n        // ignore\n        return null;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nexport class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._renderLineHighlight = options.get(92 /* EditorOption.renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(93 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._selectionIsEmpty = true;\n        this._focused = false;\n        this._cursorLineNumbers = [1];\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderData = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    _readFromSelections() {\n        let hasChanged = false;\n        const cursorsLineNumbers = this._selections.map(s => s.positionLineNumber);\n        cursorsLineNumbers.sort((a, b) => a - b);\n        if (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n            this._cursorLineNumbers = cursorsLineNumbers;\n            hasChanged = true;\n        }\n        const selectionIsEmpty = this._selections.every(s => s.isEmpty());\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            hasChanged = true;\n        }\n        return hasChanged;\n    }\n    // --- begin event handlers\n    onThemeChanged(e) {\n        return this._readFromSelections();\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._renderLineHighlight = options.get(92 /* EditorOption.renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(93 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return this._readFromSelections();\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollWidthChanged || e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        if (!this._renderLineHighlightOnlyWhenFocus) {\n            return false;\n        }\n        this._focused = e.isFocused;\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (!this._shouldRenderThis()) {\n            this._renderData = null;\n            return;\n        }\n        const renderedLine = this._renderOne(ctx);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const len = this._cursorLineNumbers.length;\n        let index = 0;\n        const renderData = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            while (index < len && this._cursorLineNumbers[index] < lineNumber) {\n                index++;\n            }\n            if (index < len && this._cursorLineNumbers[index] === lineNumber) {\n                renderData[lineIndex] = renderedLine;\n            }\n            else {\n                renderData[lineIndex] = '';\n            }\n        }\n        this._renderData = renderData;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderData) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex >= this._renderData.length) {\n            return '';\n        }\n        return this._renderData[lineIndex];\n    }\n    _shouldRenderInMargin() {\n        return ((this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n    _shouldRenderInContent() {\n        return ((this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n            && this._selectionIsEmpty\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n}\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx) {\n        const className = 'current-line' + (this._shouldRenderOther() ? ' current-line-both' : '');\n        return `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return this._shouldRenderInContent();\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInMargin();\n    }\n}\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx) {\n        const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '');\n        return `<div class=\"${className}\" style=\"width:${this._contentLeft}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return true;\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInContent();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const lineHighlight = theme.getColor(editorLineHighlight);\n    if (lineHighlight) {\n        collector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n        collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n    }\n    if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n        const lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n        if (lineHighlightBorder) {\n            collector.addRule(`.monaco-editor .view-overlays .current-line { border: 2px solid ${lineHighlightBorder}; }`);\n            collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border: 2px solid ${lineHighlightBorder}; }`);\n            if (isHighContrast(theme.type)) {\n                collector.addRule(`.monaco-editor .view-overlays .current-line { border-width: 1px; }`);\n                collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border-width: 1px; }`);\n            }\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Range } from '../../../common/core/range.js';\nimport { HorizontalRange } from '../../view/renderingContext.js';\nexport class DecorationsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(48 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(48 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        const _decorations = ctx.getDecorationsInViewport();\n        // Keep only decorations with `className`\n        let decorations = [];\n        let decorationsLen = 0;\n        for (let i = 0, len = _decorations.length; i < len; i++) {\n            const d = _decorations[i];\n            if (d.options.className) {\n                decorations[decorationsLen++] = d;\n            }\n        }\n        // Sort decorations for consistent render output\n        decorations = decorations.sort((a, b) => {\n            if (a.options.zIndex < b.options.zIndex) {\n                return -1;\n            }\n            if (a.options.zIndex > b.options.zIndex) {\n                return 1;\n            }\n            const aClassName = a.options.className;\n            const bClassName = b.options.className;\n            if (aClassName < bClassName) {\n                return -1;\n            }\n            if (aClassName > bClassName) {\n                return 1;\n            }\n            return Range.compareRangesUsingStarts(a.range, b.range);\n        });\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = '';\n        }\n        // Render first whole line decorations and then regular decorations\n        this._renderWholeLineDecorations(ctx, decorations, output);\n        this._renderNormalDecorations(ctx, decorations, output);\n        this._renderResult = output;\n    }\n    _renderWholeLineDecorations(ctx, decorations, output) {\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (!d.options.isWholeLine) {\n                continue;\n            }\n            const decorationOutput = ('<div class=\"cdr '\n                + d.options.className\n                + '\" style=\"left:0;width:100%;height:'\n                + lineHeight\n                + 'px;\"></div>');\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            for (let j = startLineNumber; j <= endLineNumber; j++) {\n                const lineIndex = j - visibleStartLineNumber;\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    _renderNormalDecorations(ctx, decorations, output) {\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        let prevClassName = null;\n        let prevShowIfCollapsed = false;\n        let prevRange = null;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (d.options.isWholeLine) {\n                continue;\n            }\n            const className = d.options.className;\n            const showIfCollapsed = Boolean(d.options.showIfCollapsed);\n            let range = d.range;\n            if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n                range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.viewModel.getLineMaxColumn(range.endLineNumber - 1));\n            }\n            if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n                // merge into previous decoration\n                prevRange = Range.plusRange(prevRange, range);\n                continue;\n            }\n            // flush previous decoration\n            if (prevClassName !== null) {\n                this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n            }\n            prevClassName = className;\n            prevShowIfCollapsed = showIfCollapsed;\n            prevRange = range;\n        }\n        if (prevClassName !== null) {\n            this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n        }\n    }\n    _renderNormalDecoration(ctx, range, className, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\n        const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/ className === 'findMatch');\n        if (!linesVisibleRanges) {\n            return;\n        }\n        for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n            const lineVisibleRanges = linesVisibleRanges[j];\n            if (lineVisibleRanges.outsideRenderedLine) {\n                continue;\n            }\n            const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n            if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n                const singleVisibleRange = lineVisibleRanges.ranges[0];\n                if (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n                    // collapsed/very small range case => make the decoration visible by expanding its width\n                    // expand its size on both sides (both to the left and to the right, keeping it centered)\n                    const center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n                    const left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n                    lineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n                }\n            }\n            for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n                const visibleRange = lineVisibleRanges.ranges[k];\n                const decorationOutput = ('<div class=\"cdr '\n                    + className\n                    + '\" style=\"left:'\n                    + String(visibleRange.left)\n                    + 'px;width:'\n                    + String(visibleRange.width)\n                    + 'px;height:'\n                    + lineHeight\n                    + 'px;\"></div>');\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { SmoothScrollableElement } from '../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { getThemeTypeSelector } from '../../../../platform/theme/common/themeService.js';\nexport class EditorScrollbar extends ViewPart {\n    constructor(context, linesContent, viewDomNode, overflowGuardDomNode) {\n        super(context);\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(99 /* EditorOption.scrollbar */);\n        const mouseWheelScrollSensitivity = options.get(72 /* EditorOption.mouseWheelScrollSensitivity */);\n        const fastScrollSensitivity = options.get(38 /* EditorOption.fastScrollSensitivity */);\n        const scrollPredominantAxis = options.get(102 /* EditorOption.scrollPredominantAxis */);\n        const scrollbarOptions = {\n            listenOnDomNode: viewDomNode.domNode,\n            className: 'editor-scrollable' + ' ' + getThemeTypeSelector(context.theme.type),\n            useShadows: false,\n            lazyRender: true,\n            vertical: scrollbar.vertical,\n            horizontal: scrollbar.horizontal,\n            verticalHasArrows: scrollbar.verticalHasArrows,\n            horizontalHasArrows: scrollbar.horizontalHasArrows,\n            verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n            verticalSliderSize: scrollbar.verticalSliderSize,\n            horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n            horizontalSliderSize: scrollbar.horizontalSliderSize,\n            handleMouseWheel: scrollbar.handleMouseWheel,\n            alwaysConsumeMouseWheel: scrollbar.alwaysConsumeMouseWheel,\n            arrowSize: scrollbar.arrowSize,\n            mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n            fastScrollSensitivity: fastScrollSensitivity,\n            scrollPredominantAxis: scrollPredominantAxis,\n            scrollByPage: scrollbar.scrollByPage,\n        };\n        this.scrollbar = this._register(new SmoothScrollableElement(linesContent.domNode, scrollbarOptions, this._context.viewLayout.getScrollable()));\n        PartFingerprints.write(this.scrollbar.getDomNode(), 5 /* PartFingerprint.ScrollableElement */);\n        this.scrollbarDomNode = createFastDomNode(this.scrollbar.getDomNode());\n        this.scrollbarDomNode.setPosition('absolute');\n        this._setLayout();\n        // When having a zone widget that calls .focus() on one of its dom elements,\n        // the browser will try desperately to reveal that dom node, unexpectedly\n        // changing the .scrollTop of this.linesContent\n        const onBrowserDesperateReveal = (domNode, lookAtScrollTop, lookAtScrollLeft) => {\n            const newScrollPosition = {};\n            if (lookAtScrollTop) {\n                const deltaTop = domNode.scrollTop;\n                if (deltaTop) {\n                    newScrollPosition.scrollTop = this._context.viewLayout.getCurrentScrollTop() + deltaTop;\n                    domNode.scrollTop = 0;\n                }\n            }\n            if (lookAtScrollLeft) {\n                const deltaLeft = domNode.scrollLeft;\n                if (deltaLeft) {\n                    newScrollPosition.scrollLeft = this._context.viewLayout.getCurrentScrollLeft() + deltaLeft;\n                    domNode.scrollLeft = 0;\n                }\n            }\n            this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, 1 /* ScrollType.Immediate */);\n        };\n        // I've seen this happen both on the view dom node & on the lines content dom node.\n        this._register(dom.addDisposableListener(viewDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(viewDomNode.domNode, true, true)));\n        this._register(dom.addDisposableListener(linesContent.domNode, 'scroll', (e) => onBrowserDesperateReveal(linesContent.domNode, true, false)));\n        this._register(dom.addDisposableListener(overflowGuardDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(overflowGuardDomNode.domNode, true, false)));\n        this._register(dom.addDisposableListener(this.scrollbarDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(this.scrollbarDomNode.domNode, true, false)));\n    }\n    dispose() {\n        super.dispose();\n    }\n    _setLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this.scrollbarDomNode.setLeft(layoutInfo.contentLeft);\n        const minimap = options.get(70 /* EditorOption.minimap */);\n        const side = minimap.side;\n        if (side === 'right') {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth + layoutInfo.minimap.minimapWidth);\n        }\n        else {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth);\n        }\n        this.scrollbarDomNode.setHeight(layoutInfo.height);\n    }\n    getOverviewRulerLayoutInfo() {\n        return this.scrollbar.getOverviewRulerLayoutInfo();\n    }\n    getDomNode() {\n        return this.scrollbarDomNode;\n    }\n    delegateVerticalScrollbarPointerDown(browserEvent) {\n        this.scrollbar.delegateVerticalScrollbarPointerDown(browserEvent);\n    }\n    delegateScrollFromMouseWheelEvent(browserEvent) {\n        this.scrollbar.delegateScrollFromMouseWheelEvent(browserEvent);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(99 /* EditorOption.scrollbar */)\n            || e.hasChanged(72 /* EditorOption.mouseWheelScrollSensitivity */)\n            || e.hasChanged(38 /* EditorOption.fastScrollSensitivity */)) {\n            const options = this._context.configuration.options;\n            const scrollbar = options.get(99 /* EditorOption.scrollbar */);\n            const mouseWheelScrollSensitivity = options.get(72 /* EditorOption.mouseWheelScrollSensitivity */);\n            const fastScrollSensitivity = options.get(38 /* EditorOption.fastScrollSensitivity */);\n            const scrollPredominantAxis = options.get(102 /* EditorOption.scrollPredominantAxis */);\n            const newOpts = {\n                vertical: scrollbar.vertical,\n                horizontal: scrollbar.horizontal,\n                verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n                horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n                scrollByPage: scrollbar.scrollByPage,\n                handleMouseWheel: scrollbar.handleMouseWheel,\n                mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n                fastScrollSensitivity: fastScrollSensitivity,\n                scrollPredominantAxis: scrollPredominantAxis\n            };\n            this.scrollbar.updateOptions(newOpts);\n        }\n        if (e.hasChanged(140 /* EditorOption.layoutInfo */)) {\n            this._setLayout();\n        }\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        this.scrollbar.updateClassName('editor-scrollable' + ' ' + getThemeTypeSelector(this._context.theme.type));\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to do\n    }\n    render(ctx) {\n        this.scrollbar.renderNow();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nexport class DecorationToRender {\n    constructor(startLineNumber, endLineNumber, className, zIndex, decorationLane) {\n        this._decorationToRenderBrand = undefined;\n        this.startLineNumber = +startLineNumber;\n        this.endLineNumber = +endLineNumber;\n        this.className = String(className);\n        this.zIndex = zIndex !== null && zIndex !== void 0 ? zIndex : 0;\n        this.decorationLane = decorationLane !== null && decorationLane !== void 0 ? decorationLane : 1;\n    }\n}\nexport class RenderedDecoration {\n    constructor(className, zIndex) {\n        this.className = className;\n        this.zIndex = zIndex;\n    }\n}\nexport class LineRenderedDecorations {\n    constructor() {\n        this.lanes = [];\n    }\n    add(lane, decoration) {\n        while (lane >= this.lanes.length) {\n            this.lanes.push([]);\n        }\n        this.lanes[lane].push(decoration);\n    }\n    getLaneDecorations(laneIndex) {\n        if (laneIndex < this.lanes.length) {\n            return this.lanes[laneIndex];\n        }\n        return [];\n    }\n    isEmpty() {\n        for (const lane of this.lanes) {\n            if (lane.length > 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexport class DedupOverlay extends DynamicViewOverlay {\n    _render(visibleStartLineNumber, visibleEndLineNumber, decorations, decorationLaneCount) {\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = new LineRenderedDecorations();\n        }\n        if (decorations.length === 0) {\n            return output;\n        }\n        decorations.sort((a, b) => {\n            if (a.className === b.className) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return (a.className < b.className ? -1 : 1);\n        });\n        let prevClassName = null;\n        let prevEndLineIndex = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const className = d.className;\n            const zIndex = d.zIndex;\n            let startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n            const endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n            const lane = Math.min(d.decorationLane, decorationLaneCount);\n            if (prevClassName === className) {\n                startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n                prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n            }\n            else {\n                prevClassName = className;\n                prevEndLineIndex = endLineIndex;\n            }\n            for (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n                output[i].add(lane, new RenderedDecoration(className, zIndex));\n            }\n        }\n        return output;\n    }\n}\nexport class GlyphMarginOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(55 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._glyphMarginDecorationLaneCount = layoutInfo.glyphMarginDecorationLaneCount;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(55 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._glyphMarginDecorationLaneCount = layoutInfo.glyphMarginDecorationLaneCount;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        var _a;\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const glyphMarginClassName = d.options.glyphMarginClassName;\n            const zIndex = d.options.zIndex;\n            const lane = (_a = d.options.glyphMargin) === null || _a === void 0 ? void 0 : _a.position;\n            if (glyphMarginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, glyphMarginClassName, zIndex, lane);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        if (!this._glyphMargin) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const decorationsToRender = this._getDecorations(ctx);\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, decorationsToRender, this._glyphMarginDecorationLaneCount);\n        const lineHeight = this._lineHeight.toString();\n        const width = (Math.round(this._glyphMarginWidth / this._glyphMarginDecorationLaneCount)).toString();\n        const common = '\" style=\"width:' + width + 'px' + ';height:' + lineHeight + 'px;';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const renderInfo = toRender[lineIndex];\n            if (renderInfo.isEmpty()) {\n                output[lineIndex] = '';\n            }\n            else {\n                let css = '';\n                for (let lane = 1; lane <= this._glyphMarginDecorationLaneCount; lane += 1) {\n                    const decorations = renderInfo.getLaneDecorations(lane);\n                    if (decorations.length === 0) {\n                        continue;\n                    }\n                    decorations.sort((a, b) => b.zIndex - a.zIndex);\n                    // Render winning decorations with the same zIndex together\n                    const winningDecoration = decorations[0];\n                    const winningDecorationClassNames = [winningDecoration.className];\n                    for (let i = 1; i < decorations.length; i += 1) {\n                        const decoration = decorations[i];\n                        if (decoration.zIndex !== winningDecoration.zIndex) {\n                            break;\n                        }\n                        winningDecorationClassNames.push(decoration.className);\n                    }\n                    const left = (this._glyphMarginLeft + (lane - 1) * this._lineHeight).toString();\n                    css += ('<div class=\"cgmr codicon '\n                        + winningDecorationClassNames.join(' ') // TODO@joyceerhl Implement overflow for remaining decorations\n                        + common\n                        + 'left:' + left + 'px;\"></div>');\n                }\n                output[lineIndex] = css;\n            }\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './indentGuides.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorBracketHighlightingForeground1, editorBracketHighlightingForeground2, editorBracketHighlightingForeground3, editorBracketHighlightingForeground4, editorBracketHighlightingForeground5, editorBracketHighlightingForeground6, editorBracketPairGuideActiveBackground1, editorBracketPairGuideActiveBackground2, editorBracketPairGuideActiveBackground3, editorBracketPairGuideActiveBackground4, editorBracketPairGuideActiveBackground5, editorBracketPairGuideActiveBackground6, editorBracketPairGuideBackground1, editorBracketPairGuideBackground2, editorBracketPairGuideBackground3, editorBracketPairGuideBackground4, editorBracketPairGuideBackground5, editorBracketPairGuideBackground6 } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Position } from '../../../common/core/position.js';\nimport { ArrayQueue } from '../../../../base/common/arrays.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { BracketPairGuidesClassNames } from '../../../common/model/guidesTextModelPart.js';\nimport { IndentGuide, HorizontalGuidesState } from '../../../common/textModelGuides.js';\nexport class IndentGuidesOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._primaryPosition = null;\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(141 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(48 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(14 /* EditorOption.guides */);\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(141 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(48 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(14 /* EditorOption.guides */);\n        return true;\n    }\n    onCursorStateChanged(e) {\n        var _a;\n        const selection = e.selections[0];\n        const newPosition = selection.getPosition();\n        if (!((_a = this._primaryPosition) === null || _a === void 0 ? void 0 : _a.equals(newPosition))) {\n            this._primaryPosition = newPosition;\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged; // || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLanguageConfigurationChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        var _a, _b, _c, _d;\n        if (!this._bracketPairGuideOptions.indentation && this._bracketPairGuideOptions.bracketPairs === false) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const scrollWidth = ctx.scrollWidth;\n        const lineHeight = this._lineHeight;\n        const activeCursorPosition = this._primaryPosition;\n        const indents = this.getGuidesByLine(visibleStartLineNumber, Math.min(visibleEndLineNumber + 1, this._context.viewModel.getLineCount()), activeCursorPosition);\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const indent = indents[lineIndex];\n            let result = '';\n            const leftOffset = (_b = (_a = ctx.visibleRangeForPosition(new Position(lineNumber, 1))) === null || _a === void 0 ? void 0 : _a.left) !== null && _b !== void 0 ? _b : 0;\n            for (const guide of indent) {\n                const left = guide.column === -1\n                    ? leftOffset + (guide.visibleColumn - 1) * this._spaceWidth\n                    : ctx.visibleRangeForPosition(new Position(lineNumber, guide.column)).left;\n                if (left > scrollWidth || (this._maxIndentLeft > 0 && left > this._maxIndentLeft)) {\n                    break;\n                }\n                const className = guide.horizontalLine ? (guide.horizontalLine.top ? 'horizontal-top' : 'horizontal-bottom') : 'vertical';\n                const width = guide.horizontalLine\n                    ? ((_d = (_c = ctx.visibleRangeForPosition(new Position(lineNumber, guide.horizontalLine.endColumn))) === null || _c === void 0 ? void 0 : _c.left) !== null && _d !== void 0 ? _d : (left + this._spaceWidth)) - left\n                    : this._spaceWidth;\n                result += `<div class=\"core-guide ${guide.className} ${className}\" style=\"left:${left}px;height:${lineHeight}px;width:${width}px\"></div>`;\n            }\n            output[lineIndex] = result;\n        }\n        this._renderResult = output;\n    }\n    getGuidesByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition) {\n        const bracketGuides = this._bracketPairGuideOptions.bracketPairs !== false\n            ? this._context.viewModel.getBracketGuidesInRangeByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition, {\n                highlightActive: this._bracketPairGuideOptions.highlightActiveBracketPair,\n                horizontalGuides: this._bracketPairGuideOptions.bracketPairsHorizontal === true\n                    ? HorizontalGuidesState.Enabled\n                    : this._bracketPairGuideOptions.bracketPairsHorizontal === 'active'\n                        ? HorizontalGuidesState.EnabledForActive\n                        : HorizontalGuidesState.Disabled,\n                includeInactive: this._bracketPairGuideOptions.bracketPairs === true,\n            })\n            : null;\n        const indentGuides = this._bracketPairGuideOptions.indentation\n            ? this._context.viewModel.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber)\n            : null;\n        let activeIndentStartLineNumber = 0;\n        let activeIndentEndLineNumber = 0;\n        let activeIndentLevel = 0;\n        if (this._bracketPairGuideOptions.highlightActiveIndentation !== false && activeCursorPosition) {\n            const activeIndentInfo = this._context.viewModel.getActiveIndentGuide(activeCursorPosition.lineNumber, visibleStartLineNumber, visibleEndLineNumber);\n            activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\n            activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\n            activeIndentLevel = activeIndentInfo.indent;\n        }\n        const { indentSize } = this._context.viewModel.model.getOptions();\n        const result = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineGuides = new Array();\n            result.push(lineGuides);\n            const bracketGuidesInLine = bracketGuides ? bracketGuides[lineNumber - visibleStartLineNumber] : [];\n            const bracketGuidesInLineQueue = new ArrayQueue(bracketGuidesInLine);\n            const indentGuidesInLine = indentGuides ? indentGuides[lineNumber - visibleStartLineNumber] : 0;\n            for (let indentLvl = 1; indentLvl <= indentGuidesInLine; indentLvl++) {\n                const indentGuide = (indentLvl - 1) * indentSize + 1;\n                const isActive = \n                // Disable active indent guide if there are bracket guides.\n                (this._bracketPairGuideOptions.highlightActiveIndentation === 'always' || bracketGuidesInLine.length === 0) &&\n                    activeIndentStartLineNumber <= lineNumber &&\n                    lineNumber <= activeIndentEndLineNumber &&\n                    indentLvl === activeIndentLevel;\n                lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => g.visibleColumn < indentGuide) || []);\n                const peeked = bracketGuidesInLineQueue.peek();\n                if (!peeked || peeked.visibleColumn !== indentGuide || peeked.horizontalLine) {\n                    lineGuides.push(new IndentGuide(indentGuide, -1, isActive ? 'core-guide-indent-active' : 'core-guide-indent', null, -1, -1));\n                }\n            }\n            lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => true) || []);\n        }\n        return result;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nfunction transparentToUndefined(color) {\n    if (color && color.isTransparent()) {\n        return undefined;\n    }\n    return color;\n}\nregisterThemingParticipant((theme, collector) => {\n    const colors = [\n        { bracketColor: editorBracketHighlightingForeground1, guideColor: editorBracketPairGuideBackground1, guideColorActive: editorBracketPairGuideActiveBackground1 },\n        { bracketColor: editorBracketHighlightingForeground2, guideColor: editorBracketPairGuideBackground2, guideColorActive: editorBracketPairGuideActiveBackground2 },\n        { bracketColor: editorBracketHighlightingForeground3, guideColor: editorBracketPairGuideBackground3, guideColorActive: editorBracketPairGuideActiveBackground3 },\n        { bracketColor: editorBracketHighlightingForeground4, guideColor: editorBracketPairGuideBackground4, guideColorActive: editorBracketPairGuideActiveBackground4 },\n        { bracketColor: editorBracketHighlightingForeground5, guideColor: editorBracketPairGuideBackground5, guideColorActive: editorBracketPairGuideActiveBackground5 },\n        { bracketColor: editorBracketHighlightingForeground6, guideColor: editorBracketPairGuideBackground6, guideColorActive: editorBracketPairGuideActiveBackground6 }\n    ];\n    const colorProvider = new BracketPairGuidesClassNames();\n    const colorValues = colors\n        .map(c => {\n        var _a, _b;\n        const bracketColor = theme.getColor(c.bracketColor);\n        const guideColor = theme.getColor(c.guideColor);\n        const guideColorActive = theme.getColor(c.guideColorActive);\n        const effectiveGuideColor = transparentToUndefined((_a = transparentToUndefined(guideColor)) !== null && _a !== void 0 ? _a : bracketColor === null || bracketColor === void 0 ? void 0 : bracketColor.transparent(0.3));\n        const effectiveGuideColorActive = transparentToUndefined((_b = transparentToUndefined(guideColorActive)) !== null && _b !== void 0 ? _b : bracketColor);\n        if (!effectiveGuideColor || !effectiveGuideColorActive) {\n            return undefined;\n        }\n        return {\n            guideColor: effectiveGuideColor,\n            guideColorActive: effectiveGuideColorActive,\n        };\n    })\n        .filter(isDefined);\n    if (colorValues.length > 0) {\n        for (let level = 0; level < 30; level++) {\n            const colors = colorValues[level % colorValues.length];\n            collector.addRule(`.monaco-editor .${colorProvider.getInlineClassNameOfLevel(level).replace(/ /g, '.')} { --guide-color: ${colors.guideColor}; --guide-color-active: ${colors.guideColorActive}; }`);\n        }\n        collector.addRule(`.monaco-editor .vertical { box-shadow: 1px 0 0 0 var(--guide-color) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top { border-top: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom { border-bottom: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .vertical.${colorProvider.activeClassName} { box-shadow: 1px 0 0 0 var(--guide-color-active) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top.${colorProvider.activeClassName} { border-top: 1px solid var(--guide-color-active); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom.${colorProvider.activeClassName} { border-bottom: 1px solid var(--guide-color-active); }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class DomReadingContext {\n    get didDomLayout() {\n        return this._didDomLayout;\n    }\n    readClientRect() {\n        if (!this._clientRectRead) {\n            this._clientRectRead = true;\n            const rect = this._domNode.getBoundingClientRect();\n            this.markDidDomLayout();\n            this._clientRectDeltaLeft = rect.left;\n            this._clientRectScale = rect.width / this._domNode.offsetWidth;\n        }\n    }\n    get clientRectDeltaLeft() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectDeltaLeft;\n    }\n    get clientRectScale() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectScale;\n    }\n    constructor(_domNode, endNode) {\n        this._domNode = _domNode;\n        this.endNode = endNode;\n        this._didDomLayout = false;\n        this._clientRectDeltaLeft = 0;\n        this._clientRectScale = 1;\n        this._clientRectRead = false;\n    }\n    markDidDomLayout() {\n        this._didDomLayout = true;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './viewLines.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { ViewLine, ViewLineOptions } from './viewLine.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { LineVisibleRanges, HorizontalPosition, HorizontalRange } from '../../view/renderingContext.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { DomReadingContext } from './domReadingContext.js';\nclass LastRenderedData {\n    constructor() {\n        this._currentVisibleRange = new Range(1, 1, 1, 1);\n    }\n    getCurrentVisibleRange() {\n        return this._currentVisibleRange;\n    }\n    setCurrentVisibleRange(currentVisibleRange) {\n        this._currentVisibleRange = currentVisibleRange;\n    }\n}\nclass HorizontalRevealRangeRequest {\n    constructor(minimalReveal, lineNumber, startColumn, endColumn, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.lineNumber = lineNumber;\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'range';\n        this.minLineNumber = lineNumber;\n        this.maxLineNumber = lineNumber;\n    }\n}\nclass HorizontalRevealSelectionsRequest {\n    constructor(minimalReveal, selections, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.selections = selections;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'selections';\n        let minLineNumber = selections[0].startLineNumber;\n        let maxLineNumber = selections[0].endLineNumber;\n        for (let i = 1, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n            maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n        }\n        this.minLineNumber = minLineNumber;\n        this.maxLineNumber = maxLineNumber;\n    }\n}\nexport class ViewLines extends ViewPart {\n    constructor(context, linesContent) {\n        super(context);\n        this._linesContent = linesContent;\n        this._textRangeRestingSpot = document.createElement('div');\n        this._visibleLines = new VisibleLinesCollection(this);\n        this.domNode = this._visibleLines.domNode;\n        const conf = this._context.configuration;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(48 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(141 /* EditorOption.wrappingInfo */);\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(96 /* EditorOption.revealHorizontalRightPadding */);\n        this._cursorSurroundingLines = options.get(27 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(28 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(30 /* EditorOption.disableLayerHinting */);\n        this._viewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        PartFingerprints.write(this.domNode, 7 /* PartFingerprint.ViewLines */);\n        this.domNode.setClassName(`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        applyFontInfo(this.domNode, fontInfo);\n        // --- width & height\n        this._maxLineWidth = 0;\n        this._asyncUpdateLineWidths = new RunOnceScheduler(() => {\n            this._updateLineWidthsSlow();\n        }, 200);\n        this._asyncCheckMonospaceFontAssumptions = new RunOnceScheduler(() => {\n            this._checkMonospaceFontAssumptions();\n        }, 2000);\n        this._lastRenderedData = new LastRenderedData();\n        this._horizontalRevealRequest = null;\n        // sticky scroll widget\n        this._stickyScrollEnabled = options.get(111 /* EditorOption.stickyScroll */).enabled;\n        this._maxNumberStickyLines = options.get(111 /* EditorOption.stickyScroll */).maxLineCount;\n    }\n    dispose() {\n        this._asyncUpdateLineWidths.dispose();\n        this._asyncCheckMonospaceFontAssumptions.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    // ---- begin IVisibleLinesHost\n    createVisibleLine() {\n        return new ViewLine(this._viewLineOptions);\n    }\n    // ---- end IVisibleLinesHost\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        if (e.hasChanged(141 /* EditorOption.wrappingInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(48 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(141 /* EditorOption.wrappingInfo */);\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(96 /* EditorOption.revealHorizontalRightPadding */);\n        this._cursorSurroundingLines = options.get(27 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(28 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(30 /* EditorOption.disableLayerHinting */);\n        // sticky scroll\n        this._stickyScrollEnabled = options.get(111 /* EditorOption.stickyScroll */).enabled;\n        this._maxNumberStickyLines = options.get(111 /* EditorOption.stickyScroll */).maxLineCount;\n        applyFontInfo(this.domNode, fontInfo);\n        this._onOptionsMaybeChanged();\n        if (e.hasChanged(140 /* EditorOption.layoutInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        return true;\n    }\n    _onOptionsMaybeChanged() {\n        const conf = this._context.configuration;\n        const newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        if (!this._viewLineOptions.equals(newViewLineOptions)) {\n            this._viewLineOptions = newViewLineOptions;\n            const startLineNumber = this._visibleLines.getStartLineNumber();\n            const endLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n                const line = this._visibleLines.getVisibleLine(lineNumber);\n                line.onOptionsChanged(this._viewLineOptions);\n            }\n            return true;\n        }\n        return false;\n    }\n    onCursorStateChanged(e) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let r = false;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            r = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\n        }\n        return r;\n    }\n    onDecorationsChanged(e) {\n        if (true /*e.inlineDecorationsChanged*/) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\n            }\n        }\n        return true;\n    }\n    onFlushed(e) {\n        const shouldRender = this._visibleLines.onFlushed(e);\n        this._maxLineWidth = 0;\n        return shouldRender;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onRevealRangeRequest(e) {\n        // Using the future viewport here in order to handle multiple\n        // incoming reveal range requests that might all desire to be animated\n        const desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.minimalReveal, e.range, e.selections, e.verticalType);\n        if (desiredScrollTop === -1) {\n            // marker to abort the reveal range request\n            return false;\n        }\n        // validate the new desired scroll top\n        let newScrollPosition = this._context.viewLayout.validateScrollPosition({ scrollTop: desiredScrollTop });\n        if (e.revealHorizontal) {\n            if (e.range && e.range.startLineNumber !== e.range.endLineNumber) {\n                // Two or more lines? => scroll to base (That's how you see most of the two lines)\n                newScrollPosition = {\n                    scrollTop: newScrollPosition.scrollTop,\n                    scrollLeft: 0\n                };\n            }\n            else if (e.range) {\n                // We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n                this._horizontalRevealRequest = new HorizontalRevealRangeRequest(e.minimalReveal, e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n            else if (e.selections && e.selections.length > 0) {\n                this._horizontalRevealRequest = new HorizontalRevealSelectionsRequest(e.minimalReveal, e.selections, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n        }\n        else {\n            this._horizontalRevealRequest = null;\n        }\n        const scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\n        const scrollType = (scrollTopDelta <= this._lineHeight ? 1 /* ScrollType.Immediate */ : e.scrollType);\n        this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, scrollType);\n        return true;\n    }\n    onScrollChanged(e) {\n        if (this._horizontalRevealRequest && e.scrollLeftChanged) {\n            // cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n            this._horizontalRevealRequest = null;\n        }\n        if (this._horizontalRevealRequest && e.scrollTopChanged) {\n            const min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            const max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            if (e.scrollTop < min || e.scrollTop > max) {\n                // cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n                this._horizontalRevealRequest = null;\n            }\n        }\n        this.domNode.setWidth(e.scrollWidth);\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        return this._visibleLines.onZonesChanged(e);\n    }\n    onThemeChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    // ---- end view event handlers\n    // ----------- HELPERS FOR OTHERS\n    getPositionFromDOMInfo(spanNode, offset) {\n        const viewLineDomNode = this._getViewLineDomNode(spanNode);\n        if (viewLineDomNode === null) {\n            // Couldn't find view line node\n            return null;\n        }\n        const lineNumber = this._getLineNumberFor(viewLineDomNode);\n        if (lineNumber === -1) {\n            // Couldn't find view line node\n            return null;\n        }\n        if (lineNumber < 1 || lineNumber > this._context.viewModel.getLineCount()) {\n            // lineNumber is outside range\n            return null;\n        }\n        if (this._context.viewModel.getLineMaxColumn(lineNumber) === 1) {\n            // Line is empty\n            return new Position(lineNumber, 1);\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return null;\n        }\n        let column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(lineNumber, spanNode, offset);\n        const minColumn = this._context.viewModel.getLineMinColumn(lineNumber);\n        if (column < minColumn) {\n            column = minColumn;\n        }\n        return new Position(lineNumber, column);\n    }\n    _getViewLineDomNode(node) {\n        while (node && node.nodeType === 1) {\n            if (node.className === ViewLine.CLASS_NAME) {\n                return node;\n            }\n            node = node.parentElement;\n        }\n        return null;\n    }\n    /**\n     * @returns the line number of this view line dom node.\n     */\n    _getLineNumberFor(domNode) {\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const line = this._visibleLines.getVisibleLine(lineNumber);\n            if (domNode === line.getDomNode()) {\n                return lineNumber;\n            }\n        }\n        return -1;\n    }\n    getLineWidth(lineNumber) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return -1;\n        }\n        const context = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        const result = this._visibleLines.getVisibleLine(lineNumber).getWidth(context);\n        this._updateLineWidthsSlowIfDomDidLayout(context);\n        return result;\n    }\n    linesVisibleRangesForRange(_range, includeNewLines) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        const originalEndLineNumber = _range.endLineNumber;\n        const range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\n        if (!range) {\n            return null;\n        }\n        const visibleRanges = [];\n        let visibleRangesLen = 0;\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        let nextLineModelLineNumber = 0;\n        if (includeNewLines) {\n            nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n            if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n                continue;\n            }\n            const startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\n            const endColumn = lineNumber === range.endLineNumber ? range.endColumn : this._context.viewModel.getLineMaxColumn(lineNumber);\n            const visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n            if (!visibleRangesForLine) {\n                continue;\n            }\n            if (includeNewLines && lineNumber < originalEndLineNumber) {\n                const currentLineModelLineNumber = nextLineModelLineNumber;\n                nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\n                if (currentLineModelLineNumber !== nextLineModelLineNumber) {\n                    visibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\n                }\n            }\n            visibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, HorizontalRange.from(visibleRangesForLine.ranges));\n        }\n        this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n        if (visibleRangesLen === 0) {\n            return null;\n        }\n        return visibleRanges;\n    }\n    _visibleRangesForLineRange(lineNumber, startColumn, endColumn) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        if (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\n            return null;\n        }\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        const result = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n        this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n        return result;\n    }\n    visibleRangeForPosition(position) {\n        const visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\n        if (!visibleRanges) {\n            return null;\n        }\n        return new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\n    }\n    /**\n     * Updates the max line width if it is fast to compute.\n     * Returns true if all lines were taken into account.\n     * Returns false if some lines need to be reevaluated (in a slow fashion).\n     */\n    _updateLineWidthsFast() {\n        return this._updateLineWidths(true);\n    }\n    _updateLineWidthsSlow() {\n        this._updateLineWidths(false);\n    }\n    /**\n     * Update the line widths using DOM layout information after someone else\n     * has caused a synchronous layout.\n     */\n    _updateLineWidthsSlowIfDomDidLayout(domReadingContext) {\n        if (!domReadingContext.didDomLayout) {\n            // only proceed if we just did a layout\n            return;\n        }\n        if (this._asyncUpdateLineWidths.isScheduled()) {\n            // reading widths is not scheduled => widths are up-to-date\n            return;\n        }\n        this._asyncUpdateLineWidths.cancel();\n        this._updateLineWidthsSlow();\n    }\n    _updateLineWidths(fast) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let localMaxLineWidth = 1;\n        let allWidthsComputed = true;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (fast && !visibleLine.getWidthIsFast()) {\n                // Cannot compute width in a fast way for this line\n                allWidthsComputed = false;\n                continue;\n            }\n            localMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth(null));\n        }\n        if (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.viewModel.getLineCount()) {\n            // we know the max line width for all the lines\n            this._maxLineWidth = 0;\n        }\n        this._ensureMaxLineWidth(localMaxLineWidth);\n        return allWidthsComputed;\n    }\n    _checkMonospaceFontAssumptions() {\n        // Problems with monospace assumptions are more apparent for longer lines,\n        // as small rounding errors start to sum up, so we will select the longest\n        // line for a closer inspection\n        let longestLineNumber = -1;\n        let longestWidth = -1;\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (visibleLine.needsMonospaceFontCheck()) {\n                const lineWidth = visibleLine.getWidth(null);\n                if (lineWidth > longestWidth) {\n                    longestWidth = lineWidth;\n                    longestLineNumber = lineNumber;\n                }\n            }\n        }\n        if (longestLineNumber === -1) {\n            return;\n        }\n        if (!this._visibleLines.getVisibleLine(longestLineNumber).monospaceAssumptionsAreValid()) {\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                visibleLine.onMonospaceAssumptionsInvalidated();\n            }\n        }\n    }\n    prepareRender() {\n        throw new Error('Not supported');\n    }\n    render() {\n        throw new Error('Not supported');\n    }\n    renderText(viewportData) {\n        // (1) render lines - ensures lines are in the DOM\n        this._visibleLines.renderLines(viewportData);\n        this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\n        this.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n        this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000));\n        // (2) compute horizontal scroll position:\n        //  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n        //  - it might change `scrollWidth` and `scrollLeft`\n        if (this._horizontalRevealRequest) {\n            const horizontalRevealRequest = this._horizontalRevealRequest;\n            // Check that we have the line that contains the horizontal range in the viewport\n            if (viewportData.startLineNumber <= horizontalRevealRequest.minLineNumber && horizontalRevealRequest.maxLineNumber <= viewportData.endLineNumber) {\n                this._horizontalRevealRequest = null;\n                // allow `visibleRangesForRange2` to work\n                this.onDidRender();\n                // compute new scroll position\n                const newScrollLeft = this._computeScrollLeftToReveal(horizontalRevealRequest);\n                if (newScrollLeft) {\n                    if (!this._isViewportWrapping) {\n                        // ensure `scrollWidth` is large enough\n                        this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\n                    }\n                    // set `scrollLeft`\n                    this._context.viewModel.viewLayout.setScrollPosition({\n                        scrollLeft: newScrollLeft.scrollLeft\n                    }, horizontalRevealRequest.scrollType);\n                }\n            }\n        }\n        // Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n        if (!this._updateLineWidthsFast()) {\n            // Computing the width of some lines would be slow => delay it\n            this._asyncUpdateLineWidths.schedule();\n        }\n        else {\n            this._asyncUpdateLineWidths.cancel();\n        }\n        if (platform.isLinux && !this._asyncCheckMonospaceFontAssumptions.isScheduled()) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                if (visibleLine.needsMonospaceFontCheck()) {\n                    this._asyncCheckMonospaceFontAssumptions.schedule();\n                    break;\n                }\n            }\n        }\n        // (3) handle scrolling\n        this._linesContent.setLayerHinting(this._canUseLayerHinting);\n        this._linesContent.setContain('strict');\n        const adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\n        this._linesContent.setTop(-adjustedScrollTop);\n        this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\n    }\n    // --- width\n    _ensureMaxLineWidth(lineWidth) {\n        const iLineWidth = Math.ceil(lineWidth);\n        if (this._maxLineWidth < iLineWidth) {\n            this._maxLineWidth = iLineWidth;\n            this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        }\n    }\n    _computeScrollTopToRevealRange(viewport, source, minimalReveal, range, selections, verticalType) {\n        const viewportStartY = viewport.top;\n        const viewportHeight = viewport.height;\n        const viewportEndY = viewportStartY + viewportHeight;\n        let boxIsSingleRange;\n        let boxStartY;\n        let boxEndY;\n        if (selections && selections.length > 0) {\n            let minLineNumber = selections[0].startLineNumber;\n            let maxLineNumber = selections[0].endLineNumber;\n            for (let i = 1, len = selections.length; i < len; i++) {\n                const selection = selections[i];\n                minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n                maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n            }\n            boxIsSingleRange = false;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(minLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(maxLineNumber) + this._lineHeight;\n        }\n        else if (range) {\n            boxIsSingleRange = true;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\n        }\n        else {\n            return -1;\n        }\n        const shouldIgnoreScrollOff = (source === 'mouse' || minimalReveal) && this._cursorSurroundingLinesStyle === 'default';\n        let paddingTop = 0;\n        let paddingBottom = 0;\n        if (!shouldIgnoreScrollOff) {\n            const context = Math.min((viewportHeight / this._lineHeight) / 2, this._cursorSurroundingLines);\n            if (this._stickyScrollEnabled) {\n                paddingTop = Math.max(context, this._maxNumberStickyLines) * this._lineHeight;\n            }\n            else {\n                paddingTop = context * this._lineHeight;\n            }\n            paddingBottom = Math.max(0, (context - 1)) * this._lineHeight;\n        }\n        else {\n            if (!minimalReveal) {\n                // Reveal one more line above (this case is hit when dragging)\n                paddingTop = this._lineHeight;\n            }\n        }\n        if (!minimalReveal) {\n            if (verticalType === 0 /* viewEvents.VerticalRevealType.Simple */ || verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */) {\n                // Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n                paddingBottom += this._lineHeight;\n            }\n        }\n        boxStartY -= paddingTop;\n        boxEndY += paddingBottom;\n        let newScrollTop;\n        if (boxEndY - boxStartY > viewportHeight) {\n            // the box is larger than the viewport ... scroll to its top\n            if (!boxIsSingleRange) {\n                // do not reveal multiple cursors if there are more than fit the viewport\n                return -1;\n            }\n            newScrollTop = boxStartY;\n        }\n        else if (verticalType === 5 /* viewEvents.VerticalRevealType.NearTop */ || verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */) {\n            if (verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // We want a gap that is 20% of the viewport, but with a minimum of 5 lines\n                const desiredGapAbove = Math.max(5 * this._lineHeight, viewportHeight * 0.2);\n                // Try to scroll just above the box with the desired gap\n                const desiredScrollTop = boxStartY - desiredGapAbove;\n                // But ensure that the box is not pushed out of viewport\n                const minScrollTop = boxEndY - viewportHeight;\n                newScrollTop = Math.max(minScrollTop, desiredScrollTop);\n            }\n        }\n        else if (verticalType === 1 /* viewEvents.VerticalRevealType.Center */ || verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */) {\n            if (verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // Box is outside the viewport... center it\n                const boxMiddleY = (boxStartY + boxEndY) / 2;\n                newScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n            }\n        }\n        else {\n            newScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === 3 /* viewEvents.VerticalRevealType.Top */, verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */);\n        }\n        return newScrollTop;\n    }\n    _computeScrollLeftToReveal(horizontalRevealRequest) {\n        const viewport = this._context.viewLayout.getCurrentViewport();\n        const layoutInfo = this._context.configuration.options.get(140 /* EditorOption.layoutInfo */);\n        const viewportStartX = viewport.left;\n        const viewportEndX = viewportStartX + viewport.width - layoutInfo.verticalScrollbarWidth;\n        let boxStartX = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n        let boxEndX = 0;\n        if (horizontalRevealRequest.type === 'range') {\n            const visibleRanges = this._visibleRangesForLineRange(horizontalRevealRequest.lineNumber, horizontalRevealRequest.startColumn, horizontalRevealRequest.endColumn);\n            if (!visibleRanges) {\n                return null;\n            }\n            for (const visibleRange of visibleRanges.ranges) {\n                boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n            }\n        }\n        else {\n            for (const selection of horizontalRevealRequest.selections) {\n                if (selection.startLineNumber !== selection.endLineNumber) {\n                    return null;\n                }\n                const visibleRanges = this._visibleRangesForLineRange(selection.startLineNumber, selection.startColumn, selection.endColumn);\n                if (!visibleRanges) {\n                    return null;\n                }\n                for (const visibleRange of visibleRanges.ranges) {\n                    boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                    boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n                }\n            }\n        }\n        if (!horizontalRevealRequest.minimalReveal) {\n            boxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n            boxEndX += this._revealHorizontalRightPadding;\n        }\n        if (horizontalRevealRequest.type === 'selections' && boxEndX - boxStartX > viewport.width) {\n            return null;\n        }\n        const newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\n        return {\n            scrollLeft: newScrollLeft,\n            maxHorizontalOffset: boxEndX\n        };\n    }\n    _computeMinimumScrolling(viewportStart, viewportEnd, boxStart, boxEnd, revealAtStart, revealAtEnd) {\n        viewportStart = viewportStart | 0;\n        viewportEnd = viewportEnd | 0;\n        boxStart = boxStart | 0;\n        boxEnd = boxEnd | 0;\n        revealAtStart = !!revealAtStart;\n        revealAtEnd = !!revealAtEnd;\n        const viewportLength = viewportEnd - viewportStart;\n        const boxLength = boxEnd - boxStart;\n        if (boxLength < viewportLength) {\n            // The box would fit in the viewport\n            if (revealAtStart) {\n                return boxStart;\n            }\n            if (revealAtEnd) {\n                return Math.max(0, boxEnd - viewportLength);\n            }\n            if (boxStart < viewportStart) {\n                // The box is above the viewport\n                return boxStart;\n            }\n            else if (boxEnd > viewportEnd) {\n                // The box is below the viewport\n                return Math.max(0, boxEnd - viewportLength);\n            }\n        }\n        else {\n            // The box would not fit in the viewport\n            // Reveal the beginning of the box\n            return boxStart;\n        }\n        return viewportStart;\n    }\n}\n/**\n * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\n */\nViewLines.HORIZONTAL_EXTRA_PX = 30;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './linesDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class LinesDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const linesDecorationsClassName = d.options.linesDecorationsClassName;\n            const zIndex = d.options.zIndex;\n            if (linesDecorationsClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName, zIndex);\n            }\n            const firstLineDecorationClassName = d.options.firstLineDecorationClassName;\n            if (firstLineDecorationClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.startLineNumber, firstLineDecorationClassName, zIndex);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx), 1);\n        const left = this._decorationsLeft.toString();\n        const width = this._decorationsWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const decorations = toRender[lineIndex].getLaneDecorations(1); // there is only one lane, see _render call above\n            let lineOutput = '';\n            for (const decoration of decorations) {\n                lineOutput += '<div class=\"cldr ' + decoration.className + common;\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './marginDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class MarginViewLineDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const marginClassName = d.options.marginClassName;\n            const zIndex = d.options.zIndex;\n            if (marginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, marginClassName, zIndex);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx), 1);\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const decorations = toRender[lineIndex].getLaneDecorations(1); // there is only one lane, see _render call above\n            let lineOutput = '';\n            for (const decoration of decorations) {\n                lineOutput += '<div class=\"cmdr ' + decoration.className + '\" style=\"\"></div>';\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const allCharCodes = (() => {\n    const v = [];\n    for (let i = 32 /* Constants.START_CH_CODE */; i <= 126 /* Constants.END_CH_CODE */; i++) {\n        v.push(i);\n    }\n    v.push(65533 /* Constants.UNKNOWN_CODE */);\n    return v;\n})();\nexport const getCharIndex = (chCode, fontScale) => {\n    chCode -= 32 /* Constants.START_CH_CODE */;\n    if (chCode < 0 || chCode > 96 /* Constants.CHAR_COUNT */) {\n        if (fontScale <= 2) {\n            // for smaller scales, we can get away with using any ASCII character...\n            return (chCode + 96 /* Constants.CHAR_COUNT */) % 96 /* Constants.CHAR_COUNT */;\n        }\n        return 96 /* Constants.CHAR_COUNT */ - 1; // unknown symbol\n    }\n    return chCode;\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getCharIndex } from './minimapCharSheet.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\nexport class MinimapCharRenderer {\n    constructor(charData, scale) {\n        this.scale = scale;\n        this._minimapCharRendererBrand = undefined;\n        this.charDataNormal = MinimapCharRenderer.soften(charData, 12 / 15);\n        this.charDataLight = MinimapCharRenderer.soften(charData, 50 / 60);\n    }\n    static soften(input, ratio) {\n        const result = new Uint8ClampedArray(input.length);\n        for (let i = 0, len = input.length; i < len; i++) {\n            result[i] = toUint8(input[i] * ratio);\n        }\n        return result;\n    }\n    renderChar(target, dx, dy, chCode, color, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight) {\n        const charWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* Constants.BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const charData = useLighterFont ? this.charDataLight : this.charDataNormal;\n        const charIndex = getCharIndex(chCode, fontScale);\n        const destWidth = target.width * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let sourceOffset = charIndex * charWidth * charHeight;\n        let row = dy * destWidth + dx * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                const c = (charData[sourceOffset++] / 255) * (foregroundAlpha / 255);\n                dest[column++] = backgroundR + deltaR * c;\n                dest[column++] = backgroundG + deltaG * c;\n                dest[column++] = backgroundB + deltaB * c;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n    blockRenderChar(target, dx, dy, color, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight) {\n        const charWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* Constants.BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const destWidth = target.width * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        const c = 0.5 * (foregroundAlpha / 255);\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const colorR = backgroundR + deltaR * c;\n        const colorG = backgroundG + deltaG * c;\n        const colorB = backgroundB + deltaB * c;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let row = dy * destWidth + dx * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                dest[column++] = colorR;\n                dest[column++] = colorG;\n                dest[column++] = colorB;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { once } from '../../../../base/common/functional.js';\nconst charTable = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15\n};\nconst decodeData = (str) => {\n    const output = new Uint8ClampedArray(str.length / 2);\n    for (let i = 0; i < str.length; i += 2) {\n        output[i >> 1] = (charTable[str[i]] << 4) | (charTable[str[i + 1]] & 0xF);\n    }\n    return output;\n};\n/*\nconst encodeData = (data: Uint8ClampedArray, length: string) => {\n    const chars = '0123456789ABCDEF';\n    let output = '';\n    for (let i = 0; i < data.length; i++) {\n        output += chars[data[i] >> 4] + chars[data[i] & 0xf];\n    }\n    return output;\n};\n*/\n/**\n * Map of minimap scales to prebaked sample data at those scales. We don't\n * sample much larger data, because then font family becomes visible, which\n * is use-configurable.\n */\nexport const prebakedMiniMaps = {\n    1: once(() => decodeData('0000511D6300CF609C709645A78432005642574171487021003C451900274D35D762755E8B629C5BA856AF57BA649530C167D1512A272A3F6038604460398526BCA2A968DB6F8957C768BE5FBE2FB467CF5D8D5B795DC7625B5DFF50DE64C466DB2FC47CD860A65E9A2EB96CB54CE06DA763AB2EA26860524D3763536601005116008177A8705E53AB738E6A982F88BAA35B5F5B626D9C636B449B737E5B7B678598869A662F6B5B8542706C704C80736A607578685B70594A49715A4522E792')),\n    2: once(() => decodeDatan};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MinimapCharRenderer } from './minimapCharRenderer.js';\nimport { allCharCodes } from './minimapCharSheet.js';\nimport { prebakedMiniMaps } from './minimapPreBaked.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\n/**\n * Creates character renderers. It takes a 'scale' that determines how large\n * characters should be drawn. Using this, it draws data into a canvas and\n * then downsamples the characters as necessary for the current display.\n * This makes rendering more efficient, rather than drawing a full (tiny)\n * font, or downsampling in real-time.\n */\nexport class MinimapCharRendererFactory {\n    /**\n     * Creates a new character renderer factory with the given scale.\n     */\n    static create(scale, fontFamily) {\n        // renderers are immutable. By default we'll 'create' a new minimap\n        // character renderer whenever we switch editors, no need to do extra work.\n        if (this.lastCreated && scale === this.lastCreated.scale && fontFamily === this.lastFontFamily) {\n            return this.lastCreated;\n        }\n        let factory;\n        if (prebakedMiniMaps[scale]) {\n            factory = new MinimapCharRenderer(prebakedMiniMaps[scale](), scale);\n        }\n        else {\n            factory = MinimapCharRendererFactory.createFromSampleData(MinimapCharRendererFactory.createSampleData(fontFamily).data, scale);\n        }\n        this.lastFontFamily = fontFamily;\n        this.lastCreated = factory;\n        return factory;\n    }\n    /**\n     * Creates the font sample data, writing to a canvas.\n     */\n    static createSampleData(fontFamily) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.style.height = `${16 /* Constants.SAMPLED_CHAR_HEIGHT */}px`;\n        canvas.height = 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n        canvas.width = 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n        canvas.style.width = 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */ + 'px';\n        ctx.fillStyle = '#ffffff';\n        ctx.font = `bold ${16 /* Constants.SAMPLED_CHAR_HEIGHT */}px ${fontFamily}`;\n        ctx.textBaseline = 'middle';\n        let x = 0;\n        for (const code of allCharCodes) {\n            ctx.fillText(String.fromCharCode(code), x, 16 /* Constants.SAMPLED_CHAR_HEIGHT */ / 2);\n            x += 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n        }\n        return ctx.getImageData(0, 0, 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */, 16 /* Constants.SAMPLED_CHAR_HEIGHT */);\n    }\n    /**\n     * Creates a character renderer from the canvas sample data.\n     */\n    static createFromSampleData(source, scale) {\n        const expectedLength = 16 /* Constants.SAMPLED_CHAR_HEIGHT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */ * 4 /* Constants.RGBA_CHANNELS_CNT */ * 96 /* Constants.CHAR_COUNT */;\n        if (source.length !== expectedLength) {\n            throw new Error('Unexpected source in MinimapCharRenderer');\n        }\n        const charData = MinimapCharRendererFactory._downsample(source, scale);\n        return new MinimapCharRenderer(charData, scale);\n    }\n    static _downsampleChar(source, sourceOffset, dest, destOffset, scale) {\n        const width = 1 /* Constants.BASE_CHAR_WIDTH */ * scale;\n        const height = 2 /* Constants.BASE_CHAR_HEIGHT */ * scale;\n        let targetIndex = destOffset;\n        let brightest = 0;\n        // This is essentially an ad-hoc rescaling algorithm. Standard approaches\n        // like bicubic interpolation are awesome for scaling between image sizes,\n        // but don't work so well when scaling to very small pixel values, we end\n        // up with blurry, indistinct forms.\n        //\n        // The approach taken here is simply mapping each source pixel to the target\n        // pixels, and taking the weighted values for all pixels in each, and then\n        // averaging them out. Finally we apply an intensity boost in _downsample,\n        // since when scaling to the smallest pixel sizes there's more black space\n        // which causes characters to be much less distinct.\n        for (let y = 0; y < height; y++) {\n            // 1. For this destination pixel, get the source pixels we're sampling\n            // from (x1, y1) to the next pixel (x2, y2)\n            const sourceY1 = (y / height) * 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n            const sourceY2 = ((y + 1) / height) * 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n            for (let x = 0; x < width; x++) {\n                const sourceX1 = (x / width) * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n                const sourceX2 = ((x + 1) / width) * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n                // 2. Sample all of them, summing them up and weighting them. Similar\n                // to bilinear interpolation.\n                let value = 0;\n                let samples = 0;\n                for (let sy = sourceY1; sy < sourceY2; sy++) {\n                    const sourceRow = sourceOffset + Math.floor(sy) * 3840 /* Constants.RGBA_SAMPLED_ROW_WIDTH */;\n                    const yBalance = 1 - (sy - Math.floor(sy));\n                    for (let sx = sourceX1; sx < sourceX2; sx++) {\n                        const xBalance = 1 - (sx - Math.floor(sx));\n                        const sourceIndex = sourceRow + Math.floor(sx) * 4 /* Constants.RGBA_CHANNELS_CNT */;\n                        const weight = xBalance * yBalance;\n                        samples += weight;\n                        value += ((source[sourceIndex] * source[sourceIndex + 3]) / 255) * weight;\n                    }\n                }\n                const final = value / samples;\n                brightest = Math.max(brightest, final);\n                dest[targetIndex++] = toUint8(final);\n            }\n        }\n        return brightest;\n    }\n    static _downsample(data, scale) {\n        const pixelsPerCharacter = 2 /* Constants.BASE_CHAR_HEIGHT */ * scale * 1 /* Constants.BASE_CHAR_WIDTH */ * scale;\n        const resultLen = pixelsPerCharacter * 96 /* Constants.CHAR_COUNT */;\n        const result = new Uint8ClampedArray(resultLen);\n        let resultOffset = 0;\n        let sourceOffset = 0;\n        let brightest = 0;\n        for (let charIndex = 0; charIndex < 96 /* Constants.CHAR_COUNT */; charIndex++) {\n            brightest = Math.max(brightest, this._downsampleChar(data, sourceOffset, result, resultOffset, scale));\n            resultOffset += pixelsPerCharacter;\n            sourceOffset += 10 /* Constants.SAMPLED_CHAR_WIDTH */ * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        }\n        if (brightest > 0) {\n            const adjust = 255 / brightest;\n            for (let i = 0; i < resultLen; i++) {\n                result[i] *= adjust;\n            }\n        }\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './minimap.css';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { GlobalPointerMoveMonitor } from '../../../../base/browser/globalPointerMoveMonitor.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { RenderedLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { MINIMAP_GUTTER_WIDTH, EditorLayoutInfoComputer } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { RGBA8 } from '../../../common/core/rgba.js';\nimport { MinimapTokensColorTracker } from '../../../common/viewModel/minimapTokensColorTracker.js';\nimport { ViewModelDecoration } from '../../../common/viewModel.js';\nimport { minimapSelection, minimapBackground, minimapForegroundOpacity } from '../../../../platform/theme/common/colorRegistry.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EventType, Gesture } from '../../../../base/browser/touch.js';\nimport { MinimapCharRendererFactory } from './minimapCharRendererFactory.js';\nimport { MinimapPosition } from '../../../common/model.js';\nimport { once } from '../../../../base/common/functional.js';\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nconst POINTER_DRAG_RESET_DISTANCE = 140;\nconst GUTTER_DECORATION_WIDTH = 2;\nclass MinimapOptions {\n    constructor(configuration, theme, tokensColorTracker) {\n        const options = configuration.options;\n        const pixelRatio = options.get(138 /* EditorOption.pixelRatio */);\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        const minimapLayout = layoutInfo.minimap;\n        const fontInfo = options.get(48 /* EditorOption.fontInfo */);\n        const minimapOpts = options.get(70 /* EditorOption.minimap */);\n        this.renderMinimap = minimapLayout.renderMinimap;\n        this.size = minimapOpts.size;\n        this.minimapHeightIsEditorHeight = minimapLayout.minimapHeightIsEditorHeight;\n        this.scrollBeyondLastLine = options.get(101 /* EditorOption.scrollBeyondLastLine */);\n        this.paddingTop = options.get(81 /* EditorOption.padding */).top;\n        this.paddingBottom = options.get(81 /* EditorOption.padding */).bottom;\n        this.showSlider = minimapOpts.showSlider;\n        this.autohide = minimapOpts.autohide;\n        this.pixelRatio = pixelRatio;\n        this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this.lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this.minimapLeft = minimapLayout.minimapLeft;\n        this.minimapWidth = minimapLayout.minimapWidth;\n        this.minimapHeight = layoutInfo.height;\n        this.canvasInnerWidth = minimapLayout.minimapCanvasInnerWidth;\n        this.canvasInnerHeight = minimapLayout.minimapCanvasInnerHeight;\n        this.canvasOuterWidth = minimapLayout.minimapCanvasOuterWidth;\n        this.canvasOuterHeight = minimapLayout.minimapCanvasOuterHeight;\n        this.isSampling = minimapLayout.minimapIsSampling;\n        this.editorHeight = layoutInfo.height;\n        this.fontScale = minimapLayout.minimapScale;\n        this.minimapLineHeight = minimapLayout.minimapLineHeight;\n        this.minimapCharWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.fontScale;\n        this.charRenderer = once(() => MinimapCharRendererFactory.create(this.fontScale, fontInfo.fontFamily));\n        this.defaultBackgroundColor = tokensColorTracker.getColor(2 /* ColorId.DefaultBackground */);\n        this.backgroundColor = MinimapOptions._getMinimapBackground(theme, this.defaultBackgroundColor);\n        this.foregroundAlpha = MinimapOptions._getMinimapForegroundOpacity(theme);\n    }\n    static _getMinimapBackground(theme, defaultBackgroundColor) {\n        const themeColor = theme.getColor(minimapBackground);\n        if (themeColor) {\n            return new RGBA8(themeColor.rgba.r, themeColor.rgba.g, themeColor.rgba.b, Math.round(255 * themeColor.rgba.a));\n        }\n        return defaultBackgroundColor;\n    }\n    static _getMinimapForegroundOpacity(theme) {\n        const themeColor = theme.getColor(minimapForegroundOpacity);\n        if (themeColor) {\n            return RGBA8._clamp(Math.round(255 * themeColor.rgba.a));\n        }\n        return 255;\n    }\n    equals(other) {\n        return (this.renderMinimap === other.renderMinimap\n            && this.size === other.size\n            && this.minimapHeightIsEditorHeight === other.minimapHeightIsEditorHeight\n            && this.scrollBeyondLastLine === other.scrollBeyondLastLine\n            && this.paddingTop === other.paddingTop\n            && this.paddingBottom === other.paddingBottom\n            && this.showSlider === other.showSlider\n            && this.autohide === other.autohide\n            && this.pixelRatio === other.pixelRatio\n            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n            && this.lineHeight === other.lineHeight\n            && this.minimapLeft === other.minimapLeft\n            && this.minimapWidth === other.minimapWidth\n            && this.minimapHeight === other.minimapHeight\n            && this.canvasInnerWidth === other.canvasInnerWidth\n            && this.canvasInnerHeight === other.canvasInnerHeight\n            && this.canvasOuterWidth === other.canvasOuterWidth\n            && this.canvasOuterHeight === other.canvasOuterHeight\n            && this.isSampling === other.isSampling\n            && this.editorHeight === other.editorHeight\n            && this.fontScale === other.fontScale\n            && this.minimapLineHeight === other.minimapLineHeight\n            && this.minimapCharWidth === other.minimapCharWidth\n            && this.defaultBackgroundColor && this.defaultBackgroundColor.equals(other.defaultBackgroundColor)\n            && this.backgroundColor && this.backgroundColor.equals(other.backgroundColor)\n            && this.foregroundAlpha === other.foregroundAlpha);\n    }\n}\nclass MinimapLayout {\n    constructor(\n    /**\n     * The given editor scrollTop (input).\n     */\n    scrollTop, \n    /**\n     * The given editor scrollHeight (input).\n     */\n    scrollHeight, sliderNeeded, _computedSliderRatio, \n    /**\n     * slider dom node top (in CSS px)\n     */\n    sliderTop, \n    /**\n     * slider dom node height (in CSS px)\n     */\n    sliderHeight, \n    /**\n     * empty lines to reserve at the top of the minimap.\n     */\n    topPaddingLineCount, \n    /**\n     * minimap render start line number.\n     */\n    startLineNumber, \n    /**\n     * minimap render end line number.\n     */\n    endLineNumber) {\n        this.scrollTop = scrollTop;\n        this.scrollHeight = scrollHeight;\n        this.sliderNeeded = sliderNeeded;\n        this._computedSliderRatio = _computedSliderRatio;\n        this.sliderTop = sliderTop;\n        this.sliderHeight = sliderHeight;\n        this.topPaddingLineCount = topPaddingLineCount;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n    }\n    /**\n     * Compute a desired `scrollPosition` such that the slider moves by `delta`.\n     */\n    getDesiredScrollTopFromDelta(delta) {\n        return Math.round(this.scrollTop + delta / this._computedSliderRatio);\n    }\n    getDesiredScrollTopFromTouchLocation(pageY) {\n        return Math.round((pageY - this.sliderHeight / 2) / this._computedSliderRatio);\n    }\n    /**\n     * Intersect a line range with `this.startLineNumber` and `this.endLineNumber`.\n     */\n    intersectWithViewport(range) {\n        const startLineNumber = Math.max(this.startLineNumber, range.startLineNumber);\n        const endLineNumber = Math.min(this.endLineNumber, range.endLineNumber);\n        if (startLineNumber > endLineNumber) {\n            // entirely outside minimap's viewport\n            return null;\n        }\n        return [startLineNumber, endLineNumber];\n    }\n    /**\n     * Get the inner minimap y coordinate for a line number.\n     */\n    getYForLineNumber(lineNumber, minimapLineHeight) {\n        return +(lineNumber - this.startLineNumber + this.topPaddingLineCount) * minimapLineHeight;\n    }\n    static create(options, viewportStartLineNumber, viewportEndLineNumber, viewportStartLineNumberVerticalOffset, viewportHeight, viewportContainsWhitespaceGaps, lineCount, realLineCount, scrollTop, scrollHeight, previousLayout) {\n        const pixelRatio = options.pixelRatio;\n        const minimapLineHeight = options.minimapLineHeight;\n        const minimapLinesFitting = Math.floor(options.canvasInnerHeight / minimapLineHeight);\n        const lineHeight = options.lineHeight;\n        if (options.minimapHeightIsEditorHeight) {\n            let logicalScrollHeight = (realLineCount * options.lineHeight\n                + options.paddingTop\n                + options.paddingBottom);\n            if (options.scrollBeyondLastLine) {\n                logicalScrollHeight += Math.max(0, viewportHeight - options.lineHeight - options.paddingBottom);\n            }\n            const sliderHeight = Math.max(1, Math.floor(viewportHeight * viewportHeight / logicalScrollHeight));\n            const maxMinimapSliderTop = Math.max(0, options.minimapHeight - sliderHeight);\n            // The slider can move from 0 to `maxMinimapSliderTop`\n            // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n            const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n            const sliderTop = (scrollTop * computedSliderRatio);\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            const maxLinesFitting = Math.floor(options.canvasInnerHeight / options.minimapLineHeight);\n            const topPaddingLineCount = Math.floor(options.paddingTop / options.lineHeight);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, topPaddingLineCount, 1, Math.min(lineCount, maxLinesFitting));\n        }\n        // The visible line count in a viewport can change due to a number of reasons:\n        //  a) with the same viewport width, different scroll positions can result in partial lines being visible:\n        //    e.g. for a line height of 20, and a viewport height of 600\n        //          * scrollTop = 0  => visible lines are [1, 30]\n        //          * scrollTop = 10 => visible lines are [1, 31] (with lines 1 and 31 partially visible)\n        //          * scrollTop = 20 => visible lines are [2, 31]\n        //  b) whitespace gaps might make their way in the viewport (which results in a decrease in the visible line count)\n        //  c) we could be in the scroll beyond last line case (which also results in a decrease in the visible line count, down to possibly only one line being visible)\n        // We must first establish a desirable slider height.\n        let sliderHeight;\n        if (viewportContainsWhitespaceGaps && viewportEndLineNumber !== lineCount) {\n            // case b) from above: there are whitespace gaps in the viewport.\n            // In this case, the height of the slider directly reflects the visible line count.\n            const viewportLineCount = viewportEndLineNumber - viewportStartLineNumber + 1;\n            sliderHeight = Math.floor(viewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        else {\n            // The slider has a stable height\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            sliderHeight = Math.floor(expectedViewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        const extraLinesAtTheTop = Math.floor(options.paddingTop / lineHeight);\n        let extraLinesAtTheBottom = Math.floor(options.paddingBottom / lineHeight);\n        if (options.scrollBeyondLastLine) {\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            extraLinesAtTheBottom = Math.max(extraLinesAtTheBottom, expectedViewportLineCount - 1);\n        }\n        let maxMinimapSliderTop;\n        if (extraLinesAtTheBottom > 0) {\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            // The minimap slider, when dragged all the way down, will contain the last line at its top\n            maxMinimapSliderTop = (extraLinesAtTheTop + lineCount + extraLinesAtTheBottom - expectedViewportLineCount - 1) * minimapLineHeight / pixelRatio;\n        }\n        else {\n            // The minimap slider, when dragged all the way down, will contain the last line at its bottom\n            maxMinimapSliderTop = Math.max(0, (extraLinesAtTheTop + lineCount) * minimapLineHeight / pixelRatio - sliderHeight);\n        }\n        maxMinimapSliderTop = Math.min(options.minimapHeight - sliderHeight, maxMinimapSliderTop);\n        // The slider can move from 0 to `maxMinimapSliderTop`\n        // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n        const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n        const sliderTop = (scrollTop * computedSliderRatio);\n        if (minimapLinesFitting >= extraLinesAtTheTop + lineCount + extraLinesAtTheBottom) {\n            // All lines fit in the minimap\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, extraLinesAtTheTop, 1, lineCount);\n        }\n        else {\n            let consideringStartLineNumber;\n            if (viewportStartLineNumber > 1) {\n                consideringStartLineNumber = viewportStartLineNumber + extraLinesAtTheTop;\n            }\n            else {\n                consideringStartLineNumber = Math.max(1, scrollTop / lineHeight);\n            }\n            let topPaddingLineCount;\n            let startLineNumber = Math.max(1, Math.floor(consideringStartLineNumber - sliderTop * pixelRatio / minimapLineHeight));\n            if (startLineNumber < extraLinesAtTheTop) {\n                topPaddingLineCount = extraLinesAtTheTop - startLineNumber + 1;\n                startLineNumber = 1;\n            }\n            else {\n                topPaddingLineCount = 0;\n                startLineNumber = Math.max(1, startLineNumber - extraLinesAtTheTop);\n            }\n            // Avoid flickering caused by a partial viewport start line\n            // by being consistent w.r.t. the previous layout decision\n            if (previousLayout && previousLayout.scrollHeight === scrollHeight) {\n                if (previousLayout.scrollTop > scrollTop) {\n                    // Scrolling up => never increase `startLineNumber`\n                    startLineNumber = Math.min(startLineNumber, previousLayout.startLineNumber);\n                    topPaddingLineCount = Math.max(topPaddingLineCount, previousLayout.topPaddingLineCount);\n                }\n                if (previousLayout.scrollTop < scrollTop) {\n                    // Scrolling down => never decrease `startLineNumber`\n                    startLineNumber = Math.max(startLineNumber, previousLayout.startLineNumber);\n                    topPaddingLineCount = Math.min(topPaddingLineCount, previousLayout.topPaddingLineCount);\n                }\n            }\n            const endLineNumber = Math.min(lineCount, startLineNumber - topPaddingLineCount + minimapLinesFitting - 1);\n            const partialLine = (scrollTop - viewportStartLineNumberVerticalOffset) / lineHeight;\n            let sliderTopAligned;\n            if (scrollTop > options.paddingTop) {\n                sliderTopAligned = (viewportStartLineNumber - startLineNumber + topPaddingLineCount + partialLine) * minimapLineHeight / pixelRatio;\n            }\n            else {\n                sliderTopAligned = (scrollTop / options.paddingTop) * (topPaddingLineCount + partialLine) * minimapLineHeight / pixelRatio;\n            }\n            return new MinimapLayout(scrollTop, scrollHeight, true, computedSliderRatio, sliderTopAligned, sliderHeight, topPaddingLineCount, startLineNumber, endLineNumber);\n        }\n    }\n}\nclass MinimapLine {\n    constructor(dy) {\n        this.dy = dy;\n    }\n    onContentChanged() {\n        this.dy = -1;\n    }\n    onTokensChanged() {\n        this.dy = -1;\n    }\n}\nMinimapLine.INVALID = new MinimapLine(-1);\nclass RenderData {\n    constructor(renderedLayout, imageData, lines) {\n        this.renderedLayout = renderedLayout;\n        this._imageData = imageData;\n        this._renderedLines = new RenderedLinesCollection(() => MinimapLine.INVALID);\n        this._renderedLines._set(renderedLayout.startLineNumber, lines);\n    }\n    /**\n     * Check if the current RenderData matches accurately the new desired layout and no painting is needed.\n     */\n    linesEquals(layout) {\n        if (!this.scrollEquals(layout)) {\n            return false;\n        }\n        const tmp = this._renderedLines._get();\n        const lines = tmp.lines;\n        for (let i = 0, len = lines.length; i < len; i++) {\n            if (lines[i].dy === -1) {\n                // This line is invalid\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Check if the current RenderData matches the new layout's scroll position\n     */\n    scrollEquals(layout) {\n        return this.renderedLayout.startLineNumber === layout.startLineNumber\n            && this.renderedLayout.endLineNumber === layout.endLineNumber;\n    }\n    _get() {\n        const tmp = this._renderedLines._get();\n        return {\n            imageData: this._imageData,\n            rendLineNumberStart: tmp.rendLineNumberStart,\n            lines: tmp.lines\n        };\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        return this._renderedLines.onLinesChanged(changeFromLineNumber, changeCount);\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        this._renderedLines.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        this._renderedLines.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n    }\n    onTokensChanged(ranges) {\n        return this._renderedLines.onTokensChanged(ranges);\n    }\n}\n/**\n * Some sort of double buffering.\n *\n * Keeps two buffers around that will be rotated for painting.\n * Always gives a buffer that is filled with the background color.\n */\nclass MinimapBuffers {\n    constructor(ctx, WIDTH, HEIGHT, background) {\n        this._backgroundFillData = MinimapBuffers._createBackgroundFillData(WIDTH, HEIGHT, background);\n        this._buffers = [\n            ctx.createImageData(WIDTH, HEIGHT),\n            ctx.createImageData(WIDTH, HEIGHT)\n        ];\n        this._lastUsedBuffer = 0;\n    }\n    getBuffer() {\n        // rotate buffers\n        this._lastUsedBuffer = 1 - this._lastUsedBuffer;\n        const result = this._buffers[this._lastUsedBuffer];\n        // fill with background color\n        result.data.set(this._backgroundFillData);\n        return result;\n    }\n    static _createBackgroundFillData(WIDTH, HEIGHT, background) {\n        const backgroundR = background.r;\n        const backgroundG = background.g;\n        const backgroundB = background.b;\n        const backgroundA = background.a;\n        const result = new Uint8ClampedArray(WIDTH * HEIGHT * 4);\n        let offset = 0;\n        for (let i = 0; i < HEIGHT; i++) {\n            for (let j = 0; j < WIDTH; j++) {\n                result[offset] = backgroundR;\n                result[offset + 1] = backgroundG;\n                result[offset + 2] = backgroundB;\n                result[offset + 3] = backgroundA;\n                offset += 4;\n            }\n        }\n        return result;\n    }\n}\nclass MinimapSamplingState {\n    static compute(options, viewLineCount, oldSamplingState) {\n        if (options.renderMinimap === 0 /* RenderMinimap.None */ || !options.isSampling) {\n            return [null, []];\n        }\n        // ratio is intentionally not part of the layout to avoid the layout changing all the time\n        // so we need to recompute it again...\n        const { minimapLineCount } = EditorLayoutInfoComputer.computeContainedMinimapLineCount({\n            viewLineCount: viewLineCount,\n            scrollBeyondLastLine: options.scrollBeyondLastLine,\n            paddingTop: options.paddingTop,\n            paddingBottom: options.paddingBottom,\n            height: options.editorHeight,\n            lineHeight: options.lineHeight,\n            pixelRatio: options.pixelRatio\n        });\n        const ratio = viewLineCount / minimapLineCount;\n        const halfRatio = ratio / 2;\n        if (!oldSamplingState || oldSamplingState.minimapLines.length === 0) {\n            const result = [];\n            result[0] = 1;\n            if (minimapLineCount > 1) {\n                for (let i = 0, lastIndex = minimapLineCount - 1; i < lastIndex; i++) {\n                    result[i] = Math.round(i * ratio + halfRatio);\n                }\n                result[minimapLineCount - 1] = viewLineCount;\n            }\n            return [new MinimapSamplingState(ratio, result), []];\n        }\n        const oldMinimapLines = oldSamplingState.minimapLines;\n        const oldLength = oldMinimapLines.length;\n        const result = [];\n        let oldIndex = 0;\n        let oldDeltaLineCount = 0;\n        let minViewLineNumber = 1;\n        const MAX_EVENT_COUNT = 10; // generate at most 10 events, if there are more than 10 changes, just flush all previous data\n        let events = [];\n        let lastEvent = null;\n        for (let i = 0; i < minimapLineCount; i++) {\n            const fromViewLineNumber = Math.max(minViewLineNumber, Math.round(i * ratio));\n            const toViewLineNumber = Math.max(fromViewLineNumber, Math.round((i + 1) * ratio));\n            while (oldIndex < oldLength && oldMinimapLines[oldIndex] < fromViewLineNumber) {\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                        lastEvent.deleteToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount--;\n                }\n                oldIndex++;\n            }\n            let selectedViewLineNumber;\n            if (oldIndex < oldLength && oldMinimapLines[oldIndex] <= toViewLineNumber) {\n                // reuse the old sampled line\n                selectedViewLineNumber = oldMinimapLines[oldIndex];\n                oldIndex++;\n            }\n            else {\n                if (i === 0) {\n                    selectedViewLineNumber = 1;\n                }\n                else if (i + 1 === minimapLineCount) {\n                    selectedViewLineNumber = viewLineCount;\n                }\n                else {\n                    selectedViewLineNumber = Math.round(i * ratio + halfRatio);\n                }\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'inserted' && lastEvent._i === i - 1) {\n                        lastEvent.insertToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'inserted', _i: i, insertFromLineNumber: oldMinimapLineNumber, insertToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount++;\n                }\n            }\n            result[i] = selectedViewLineNumber;\n            minViewLineNumber = selectedViewLineNumber;\n        }\n        if (events.length < MAX_EVENT_COUNT) {\n            while (oldIndex < oldLength) {\n                const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                    lastEvent.deleteToLineNumber++;\n                }\n                else {\n                    lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                    events.push(lastEvent);\n                }\n                oldDeltaLineCount--;\n                oldIndex++;\n            }\n        }\n        else {\n            // too many events, just give up\n            events = [{ type: 'flush' }];\n        }\n        return [new MinimapSamplingState(ratio, result), events];\n    }\n    constructor(samplingRatio, minimapLines) {\n        this.samplingRatio = samplingRatio;\n        this.minimapLines = minimapLines;\n    }\n    modelLineToMinimapLine(lineNumber) {\n        return Math.min(this.minimapLines.length, Math.max(1, Math.round(lineNumber / this.samplingRatio)));\n    }\n    /**\n     * Will return null if the model line ranges are not intersecting with a sampled model line.\n     */\n    modelLineRangeToMinimapLineRange(fromLineNumber, toLineNumber) {\n        let fromLineIndex = this.modelLineToMinimapLine(fromLineNumber) - 1;\n        while (fromLineIndex > 0 && this.minimapLines[fromLineIndex - 1] >= fromLineNumber) {\n            fromLineIndex--;\n        }\n        let toLineIndex = this.modelLineToMinimapLine(toLineNumber) - 1;\n        while (toLineIndex + 1 < this.minimapLines.length && this.minimapLines[toLineIndex + 1] <= toLineNumber) {\n            toLineIndex++;\n        }\n        if (fromLineIndex === toLineIndex) {\n            const sampledLineNumber = this.minimapLines[fromLineIndex];\n            if (sampledLineNumber < fromLineNumber || sampledLineNumber > toLineNumber) {\n                // This line is not part of the sampled lines ==> nothing to do\n                return null;\n            }\n        }\n        return [fromLineIndex + 1, toLineIndex + 1];\n    }\n    /**\n     * Will always return a range, even if it is not intersecting with a sampled model line.\n     */\n    decorationLineRangeToMinimapLineRange(startLineNumber, endLineNumber) {\n        let minimapLineStart = this.modelLineToMinimapLine(startLineNumber);\n        let minimapLineEnd = this.modelLineToMinimapLine(endLineNumber);\n        if (startLineNumber !== endLineNumber && minimapLineEnd === minimapLineStart) {\n            if (minimapLineEnd === this.minimapLines.length) {\n                if (minimapLineStart > 1) {\n                    minimapLineStart--;\n                }\n            }\n            else {\n                minimapLineEnd++;\n            }\n        }\n        return [minimapLineStart, minimapLineEnd];\n    }\n    onLinesDeleted(e) {\n        // have the mapping be sticky\n        const deletedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        let changeStartIndex = this.minimapLines.length;\n        let changeEndIndex = 0;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            if (this.minimapLines[i] <= e.toLineNumber) {\n                // this line got deleted => move to previous available\n                this.minimapLines[i] = Math.max(1, e.fromLineNumber - 1);\n                changeStartIndex = Math.min(changeStartIndex, i);\n                changeEndIndex = Math.max(changeEndIndex, i);\n            }\n            else {\n                this.minimapLines[i] -= deletedLineCount;\n            }\n        }\n        return [changeStartIndex, changeEndIndex];\n    }\n    onLinesInserted(e) {\n        // have the mapping be sticky\n        const insertedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            this.minimapLines[i] += insertedLineCount;\n        }\n    }\n}\nexport class Minimap extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.tokensColorTracker = MinimapTokensColorTracker.getInstance();\n        this._selections = [];\n        this._minimapSelections = null;\n        this.options = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        const [samplingState,] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), null);\n        this._samplingState = samplingState;\n        this._shouldCheckSampling = false;\n        this._actual = new InnerMinimap(context.theme, this);\n    }\n    dispose() {\n        this._actual.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this._actual.getDomNode();\n    }\n    _onOptionsMaybeChanged() {\n        const opts = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        if (this.options.equals(opts)) {\n            return false;\n        }\n        this.options = opts;\n        this._recreateLineSampling();\n        this._actual.onDidChangeOptions();\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        this._minimapSelections = null;\n        return this._actual.onSelectionChanged();\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsMinimap) {\n            return this._actual.onDecorationsChanged();\n        }\n        return false;\n    }\n    onFlushed(e) {\n        if (this._samplingState) {\n            this._shouldCheckSampling = true;\n        }\n        return this._actual.onFlushed();\n    }\n    onLinesChanged(e) {\n        if (this._samplingState) {\n            const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(e.fromLineNumber, e.fromLineNumber + e.count - 1);\n            if (minimapLineRange) {\n                return this._actual.onLinesChanged(minimapLineRange[0], minimapLineRange[1] - minimapLineRange[0] + 1);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onLinesChanged(e.fromLineNumber, e.count);\n        }\n    }\n    onLinesDeleted(e) {\n        if (this._samplingState) {\n            const [changeStartIndex, changeEndIndex] = this._samplingState.onLinesDeleted(e);\n            if (changeStartIndex <= changeEndIndex) {\n                this._actual.onLinesChanged(changeStartIndex + 1, changeEndIndex - changeStartIndex + 1);\n            }\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onLinesInserted(e) {\n        if (this._samplingState) {\n            this._samplingState.onLinesInserted(e);\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onScrollChanged(e) {\n        return this._actual.onScrollChanged();\n    }\n    onThemeChanged(e) {\n        this._actual.onThemeChanged();\n        this._onOptionsMaybeChanged();\n        return true;\n    }\n    onTokensChanged(e) {\n        if (this._samplingState) {\n            const ranges = [];\n            for (const range of e.ranges) {\n                const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(range.fromLineNumber, range.toLineNumber);\n                if (minimapLineRange) {\n                    ranges.push({ fromLineNumber: minimapLineRange[0], toLineNumber: minimapLineRange[1] });\n                }\n            }\n            if (ranges.length) {\n                return this._actual.onTokensChanged(ranges);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onTokensChanged(e.ranges);\n        }\n    }\n    onTokensColorsChanged(e) {\n        this._onOptionsMaybeChanged();\n        return this._actual.onTokensColorsChanged();\n    }\n    onZonesChanged(e) {\n        return this._actual.onZonesChanged();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._shouldCheckSampling) {\n            this._shouldCheckSampling = false;\n            this._recreateLineSampling();\n        }\n    }\n    render(ctx) {\n        let viewportStartLineNumber = ctx.visibleRange.startLineNumber;\n        let viewportEndLineNumber = ctx.visibleRange.endLineNumber;\n        if (this._samplingState) {\n            viewportStartLineNumber = this._samplingState.modelLineToMinimapLine(viewportStartLineNumber);\n            viewportEndLineNumber = this._samplingState.modelLineToMinimapLine(viewportEndLineNumber);\n        }\n        const minimapCtx = {\n            viewportContainsWhitespaceGaps: (ctx.viewportData.whitespaceViewportData.length > 0),\n            scrollWidth: ctx.scrollWidth,\n            scrollHeight: ctx.scrollHeight,\n            viewportStartLineNumber: viewportStartLineNumber,\n            viewportEndLineNumber: viewportEndLineNumber,\n            viewportStartLineNumberVerticalOffset: ctx.getVerticalOffsetForLineNumber(viewportStartLineNumber),\n            scrollTop: ctx.scrollTop,\n            scrollLeft: ctx.scrollLeft,\n            viewportWidth: ctx.viewportWidth,\n            viewportHeight: ctx.viewportHeight,\n        };\n        this._actual.render(minimapCtx);\n    }\n    //#region IMinimapModel\n    _recreateLineSampling() {\n        this._minimapSelections = null;\n        const wasSampling = Boolean(this._samplingState);\n        const [samplingState, events] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), this._samplingState);\n        this._samplingState = samplingState;\n        if (wasSampling && this._samplingState) {\n            // was sampling, is sampling\n            for (const event of events) {\n                switch (event.type) {\n                    case 'deleted':\n                        this._actual.onLinesDeleted(event.deleteFromLineNumber, event.deleteToLineNumber);\n                        break;\n                    case 'inserted':\n                        this._actual.onLinesInserted(event.insertFromLineNumber, event.insertToLineNumber);\n                        break;\n                    case 'flush':\n                        this._actual.onFlushed();\n                        break;\n                }\n            }\n        }\n    }\n    getLineCount() {\n        if (this._samplingState) {\n            return this._samplingState.minimapLines.length;\n        }\n        return this._context.viewModel.getLineCount();\n    }\n    getRealLineCount() {\n        return this._context.viewModel.getLineCount();\n    }\n    getLineContent(lineNumber) {\n        if (this._samplingState) {\n            return this._context.viewModel.getLineContent(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.viewModel.getLineContent(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        if (this._samplingState) {\n            return this._context.viewModel.getLineMaxColumn(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.viewModel.getLineMaxColumn(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        if (this._samplingState) {\n            const result = [];\n            for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n                if (needed[lineIndex]) {\n                    result[lineIndex] = this._context.viewModel.getViewLineData(this._samplingState.minimapLines[startLineNumber + lineIndex - 1]);\n                }\n                else {\n                    result[lineIndex] = null;\n                }\n            }\n            return result;\n        }\n        return this._context.viewModel.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed).data;\n    }\n    getSelections() {\n        if (this._minimapSelections === null) {\n            if (this._samplingState) {\n                this._minimapSelections = [];\n                for (const selection of this._selections) {\n                    const [minimapLineStart, minimapLineEnd] = this._samplingState.decorationLineRangeToMinimapLineRange(selection.startLineNumber, selection.endLineNumber);\n                    this._minimapSelections.push(new Selection(minimapLineStart, selection.startColumn, minimapLineEnd, selection.endColumn));\n                }\n            }\n            else {\n                this._minimapSelections = this._selections;\n            }\n        }\n        return this._minimapSelections;\n    }\n    getMinimapDecorationsInViewport(startLineNumber, endLineNumber) {\n        let visibleRange;\n        if (this._samplingState) {\n            const modelStartLineNumber = this._samplingState.minimapLines[startLineNumber - 1];\n            const modelEndLineNumber = this._samplingState.minimapLines[endLineNumber - 1];\n            visibleRange = new Range(modelStartLineNumber, 1, modelEndLineNumber, this._context.viewModel.getLineMaxColumn(modelEndLineNumber));\n        }\n        else {\n            visibleRange = new Range(startLineNumber, 1, endLineNumber, this._context.viewModel.getLineMaxColumn(endLineNumber));\n        }\n        const decorations = this._context.viewModel.getMinimapDecorationsInRange(visibleRange);\n        if (this._samplingState) {\n            const result = [];\n            for (const decoration of decorations) {\n                if (!decoration.options.minimap) {\n                    continue;\n                }\n                const range = decoration.range;\n                const minimapStartLineNumber = this._samplingState.modelLineToMinimapLine(range.startLineNumber);\n                const minimapEndLineNumber = this._samplingState.modelLineToMinimapLine(range.endLineNumber);\n                result.push(new ViewModelDecoration(new Range(minimapStartLineNumber, range.startColumn, minimapEndLineNumber, range.endColumn), decoration.options));\n            }\n            return result;\n        }\n        return decorations;\n    }\n    getOptions() {\n        return this._context.viewModel.model.getOptions();\n    }\n    revealLineNumber(lineNumber) {\n        if (this._samplingState) {\n            lineNumber = this._samplingState.minimapLines[lineNumber - 1];\n        }\n        this._context.viewModel.revealRange('mouse', false, new Range(lineNumber, 1, lineNumber, 1), 1 /* viewEvents.VerticalRevealType.Center */, 0 /* ScrollType.Smooth */);\n    }\n    setScrollTop(scrollTop) {\n        this._context.viewModel.viewLayout.setScrollPosition({\n            scrollTop: scrollTop\n        }, 1 /* ScrollType.Immediate */);\n    }\n}\nclass InnerMinimap extends Disposable {\n    constructor(theme, model) {\n        super();\n        this._renderDecorations = false;\n        this._gestureInProgress = false;\n        this._theme = theme;\n        this._model = model;\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 8 /* PartFingerprint.Minimap */);\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._shadow = createFastDomNode(document.createElement('div'));\n        this._shadow.setClassName('minimap-shadow-hidden');\n        this._domNode.appendChild(this._shadow);\n        this._canvas = createFastDomNode(document.createElement('canvas'));\n        this._canvas.setPosition('absolute');\n        this._canvas.setLeft(0);\n        this._domNode.appendChild(this._canvas);\n        this._decorationsCanvas = createFastDomNode(document.createElement('canvas'));\n        this._decorationsCanvas.setPosition('absolute');\n        this._decorationsCanvas.setClassName('minimap-decorations-layer');\n        this._decorationsCanvas.setLeft(0);\n        this._domNode.appendChild(this._decorationsCanvas);\n        this._slider = createFastDomNode(document.createElement('div'));\n        this._slider.setPosition('absolute');\n        this._slider.setClassName('minimap-slider');\n        this._slider.setLayerHinting(true);\n        this._slider.setContain('strict');\n        this._domNode.appendChild(this._slider);\n        this._sliderHorizontal = createFastDomNode(document.createElement('div'));\n        this._sliderHorizontal.setPosition('absolute');\n        this._sliderHorizontal.setClassName('minimap-slider-horizontal');\n        this._slider.appendChild(this._sliderHorizontal);\n        this._applyLayout();\n        this._pointerDownListener = dom.addStandardDisposableListener(this._domNode.domNode, dom.EventType.POINTER_DOWN, (e) => {\n            e.preventDefault();\n            const renderMinimap = this._model.options.renderMinimap;\n            if (renderMinimap === 0 /* RenderMinimap.None */) {\n                return;\n            }\n            if (!this._lastRenderData) {\n                return;\n            }\n            if (this._model.options.size !== 'proportional') {\n                if (e.button === 0 && this._lastRenderData) {\n                    // pretend the click occurred in the center of the slider\n                    const position = dom.getDomNodePagePosition(this._slider.domNode);\n                    const initialPosY = position.top + position.height / 2;\n                    this._startSliderDragging(e, initialPosY, this._lastRenderData.renderedLayout);\n                }\n                return;\n            }\n            const minimapLineHeight = this._model.options.minimapLineHeight;\n            const internalOffsetY = (this._model.options.canvasInnerHeight / this._model.options.canvasOuterHeight) * e.offsetY;\n            const lineIndex = Math.floor(internalOffsetY / minimapLineHeight);\n            let lineNumber = lineIndex + this._lastRenderData.renderedLayout.startLineNumber - this._lastRenderData.renderedLayout.topPaddingLineCount;\n            lineNumber = Math.min(lineNumber, this._model.getLineCount());\n            this._model.revealLineNumber(lineNumber);\n        });\n        this._sliderPointerMoveMonitor = new GlobalPointerMoveMonitor();\n        this._sliderPointerDownListener = dom.addStandardDisposableListener(this._slider.domNode, dom.EventType.POINTER_DOWN, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (e.button === 0 && this._lastRenderData) {\n                this._startSliderDragging(e, e.pageY, this._lastRenderData.renderedLayout);\n            }\n        });\n        this._gestureDisposable = Gesture.addTarget(this._domNode.domNode);\n        this._sliderTouchStartListener = dom.addDisposableListener(this._domNode.domNode, EventType.Start, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData) {\n                this._slider.toggleClassName('active', true);\n                this._gestureInProgress = true;\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchMoveListener = dom.addDisposableListener(this._domNode.domNode, EventType.Change, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData && this._gestureInProgress) {\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchEndListener = dom.addStandardDisposableListener(this._domNode.domNode, EventType.End, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            this._gestureInProgress = false;\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    _startSliderDragging(e, initialPosY, initialSliderState) {\n        if (!e.target || !(e.target instanceof Element)) {\n            return;\n        }\n        const initialPosX = e.pageX;\n        this._slider.toggleClassName('active', true);\n        const handlePointerMove = (posy, posx) => {\n            const minimapPosition = dom.getDomNodePagePosition(this._domNode.domNode);\n            const pointerOrthogonalDelta = Math.min(Math.abs(posx - initialPosX), Math.abs(posx - minimapPosition.left), Math.abs(posx - minimapPosition.left - minimapPosition.width));\n            if (platform.isWindows && pointerOrthogonalDelta > POINTER_DRAG_RESET_DISTANCE) {\n                // The pointer has wondered away from the scrollbar => reset dragging\n                this._model.setScrollTop(initialSliderState.scrollTop);\n                return;\n            }\n            const pointerDelta = posy - initialPosY;\n            this._model.setScrollTop(initialSliderState.getDesiredScrollTopFromDelta(pointerDelta));\n        };\n        if (e.pageY !== initialPosY) {\n            handlePointerMove(e.pageY, initialPosX);\n        }\n        this._sliderPointerMoveMonitor.startMonitoring(e.target, e.pointerId, e.buttons, pointerMoveData => handlePointerMove(pointerMoveData.pageY, pointerMoveData.pageX), () => {\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    scrollDueToTouchEvent(touch) {\n        const startY = this._domNode.domNode.getBoundingClientRect().top;\n        const scrollTop = this._lastRenderData.renderedLayout.getDesiredScrollTopFromTouchLocation(touch.pageY - startY);\n        this._model.setScrollTop(scrollTop);\n    }\n    dispose() {\n        this._pointerDownListener.dispose();\n        this._sliderPointerMoveMonitor.dispose();\n        this._sliderPointerDownListener.dispose();\n        this._gestureDisposable.dispose();\n        this._sliderTouchStartListener.dispose();\n        this._sliderTouchMoveListener.dispose();\n        this._sliderTouchEndListener.dispose();\n        super.dispose();\n    }\n    _getMinimapDomNodeClassName() {\n        const class_ = ['minimap'];\n        if (this._model.options.showSlider === 'always') {\n            class_.push('slider-always');\n        }\n        else {\n            class_.push('slider-mouseover');\n        }\n        if (this._model.options.autohide) {\n            class_.push('autohide');\n        }\n        return class_.join(' ');\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _applyLayout() {\n        this._domNode.setLeft(this._model.options.minimapLeft);\n        this._domNode.setWidth(this._model.options.minimapWidth);\n        this._domNode.setHeight(this._model.options.minimapHeight);\n        this._shadow.setHeight(this._model.options.minimapHeight);\n        this._canvas.setWidth(this._model.options.canvasOuterWidth);\n        this._canvas.setHeight(this._model.options.canvasOuterHeight);\n        this._canvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._canvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._decorationsCanvas.setWidth(this._model.options.canvasOuterWidth);\n        this._decorationsCanvas.setHeight(this._model.options.canvasOuterHeight);\n        this._decorationsCanvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._decorationsCanvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._slider.setWidth(this._model.options.minimapWidth);\n    }\n    _getBuffer() {\n        if (!this._buffers) {\n            if (this._model.options.canvasInnerWidth > 0 && this._model.options.canvasInnerHeight > 0) {\n                this._buffers = new MinimapBuffers(this._canvas.domNode.getContext('2d'), this._model.options.canvasInnerWidth, this._model.options.canvasInnerHeight, this._model.options.backgroundColor);\n            }\n        }\n        return this._buffers ? this._buffers.getBuffer() : null;\n    }\n    // ---- begin view event handlers\n    onDidChangeOptions() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._applyLayout();\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n    }\n    onSelectionChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onDecorationsChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onFlushed() {\n        this._lastRenderData = null;\n        return true;\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onLinesChanged(changeFromLineNumber, changeCount);\n        }\n        return false;\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        var _a;\n        (_a = this._lastRenderData) === null || _a === void 0 ? void 0 : _a.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n        return true;\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        var _a;\n        (_a = this._lastRenderData) === null || _a === void 0 ? void 0 : _a.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n        return true;\n    }\n    onScrollChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onThemeChanged() {\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._renderDecorations = true;\n        return true;\n    }\n    onTokensChanged(ranges) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onTokensChanged(ranges);\n        }\n        return false;\n    }\n    onTokensColorsChanged() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        return true;\n    }\n    onZonesChanged() {\n        this._lastRenderData = null;\n        return true;\n    }\n    // --- end event handlers\n    render(renderingCtx) {\n        const renderMinimap = this._model.options.renderMinimap;\n        if (renderMinimap === 0 /* RenderMinimap.None */) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n            this._sliderHorizontal.setWidth(0);\n            this._sliderHorizontal.setHeight(0);\n            return;\n        }\n        if (renderingCtx.scrollLeft + renderingCtx.viewportWidth >= renderingCtx.scrollWidth) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n        }\n        else {\n            this._shadow.setClassName('minimap-shadow-visible');\n        }\n        const layout = MinimapLayout.create(this._model.options, renderingCtx.viewportStartLineNumber, renderingCtx.viewportEndLineNumber, renderingCtx.viewportStartLineNumberVerticalOffset, renderingCtx.viewportHeight, renderingCtx.viewportContainsWhitespaceGaps, this._model.getLineCount(), this._model.getRealLineCount(), renderingCtx.scrollTop, renderingCtx.scrollHeight, this._lastRenderData ? this._lastRenderData.renderedLayout : null);\n        this._slider.setDisplay(layout.sliderNeeded ? 'block' : 'none');\n        this._slider.setTop(layout.sliderTop);\n        this._slider.setHeight(layout.sliderHeight);\n        // Compute horizontal slider coordinates\n        this._sliderHorizontal.setLeft(0);\n        this._sliderHorizontal.setWidth(this._model.options.minimapWidth);\n        this._sliderHorizontal.setTop(0);\n        this._sliderHorizontal.setHeight(layout.sliderHeight);\n        this.renderDecorations(layout);\n        this._lastRenderData = this.renderLines(layout);\n    }\n    renderDecorations(layout) {\n        if (this._renderDecorations) {\n            this._renderDecorations = false;\n            const selections = this._model.getSelections();\n            selections.sort(Range.compareRangesUsingStarts);\n            const decorations = this._model.getMinimapDecorationsInViewport(layout.startLineNumber, layout.endLineNumber);\n            decorations.sort((a, b) => (a.options.zIndex || 0) - (b.options.zIndex || 0));\n            const { canvasInnerWidth, canvasInnerHeight } = this._model.options;\n            const minimapLineHeight = this._model.options.minimapLineHeight;\n            const minimapCharWidth = this._model.options.minimapCharWidth;\n            const tabSize = this._model.getOptions().tabSize;\n            const canvasContext = this._decorationsCanvas.domNode.getContext('2d');\n            canvasContext.clearRect(0, 0, canvasInnerWidth, canvasInnerHeight);\n            // We first need to render line highlights and then render decorations on top of those.\n            // But we need to pick a single color for each line, and use that as a line highlight.\n            // This needs to be the color of the decoration with the highest `zIndex`, but priority\n            // is given to the selection.\n            const highlightedLines = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, false);\n            this._renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, minimapLineHeight);\n            this._renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, minimapLineHeight);\n            const lineOffsetMap = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, null);\n            this._renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, minimapLineHeight, tabSize, minimapCharWidth, canvasInnerWidth);\n            this._renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, minimapLineHeight, tabSize, minimapCharWidth, canvasInnerWidth);\n        }\n    }\n    _renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, minimapLineHeight) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        canvasContext.fillStyle = this._selectionColor.transparent(0.5).toString();\n        let y1 = 0;\n        let y2 = 0;\n        for (const selection of selections) {\n            const intersection = layout.intersectWithViewport(selection);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                highlightedLines.set(line, true);\n            }\n            const yy1 = layout.getYForLineNumber(startLineNumber, minimapLineHeight);\n            const yy2 = layout.getYForLineNumber(endLineNumber, minimapLineHeight);\n            if (y2 >= yy1) {\n                // merge into previous\n                y2 = yy2;\n            }\n            else {\n                if (y2 > y1) {\n                    // flush\n                    canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n                }\n                y1 = yy1;\n                y2 = yy2;\n            }\n        }\n        if (y2 > y1) {\n            // flush\n            canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n        }\n    }\n    _renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, minimapLineHeight) {\n        const highlightColors = new Map();\n        // Loop backwards to hit first decorations with higher `zIndex`\n        for (let i = decorations.length - 1; i >= 0; i--) {\n            const decoration = decorations[i];\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions || minimapOptions.position !== MinimapPosition.Inline) {\n                continue;\n            }\n            const intersection = layout.intersectWithViewport(decoration.range);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            let highlightColor = highlightColors.get(decorationColor.toString());\n            if (!highlightColor) {\n                highlightColor = decorationColor.transparent(0.5).toString();\n                highlightColors.set(decorationColor.toString(), highlightColor);\n            }\n            canvasContext.fillStyle = highlightColor;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                if (highlightedLines.has(line)) {\n                    continue;\n                }\n                highlightedLines.set(line, true);\n                const y = layout.getYForLineNumber(startLineNumber, minimapLineHeight);\n                canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y, canvasContext.canvas.width, minimapLineHeight);\n            }\n        }\n    }\n    _renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        for (const selection of selections) {\n            const intersection = layout.intersectWithViewport(selection);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                this.renderDecorationOnLine(canvasContext, lineOffsetMap, selection, this._selectionColor, layout, line, lineHeight, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n            }\n        }\n    }\n    _renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, minimapLineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        // Loop forwards to hit first decorations with lower `zIndex`\n        for (const decoration of decorations) {\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions) {\n                continue;\n            }\n            const intersection = layout.intersectWithViewport(decoration.range);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                switch (minimapOptions.position) {\n                    case MinimapPosition.Inline:\n                        this.renderDecorationOnLine(canvasContext, lineOffsetMap, decoration.range, decorationColor, layout, line, minimapLineHeight, minimapLineHeight, tabSize, characterWidth, canvasInnerWidth);\n                        continue;\n                    case MinimapPosition.Gutter: {\n                        const y = layout.getYForLineNumber(line, minimapLineHeight);\n                        const x = 2;\n                        this.renderDecoration(canvasContext, decorationColor, x, y, GUTTER_DECORATION_WIDTH, minimapLineHeight);\n                        continue;\n                    }\n                }\n            }\n        }\n    }\n    renderDecorationOnLine(canvasContext, lineOffsetMap, decorationRange, decorationColor, layout, lineNumber, height, minimapLineHeight, tabSize, charWidth, canvasInnerWidth) {\n        const y = layout.getYForLineNumber(lineNumber, minimapLineHeight);\n        // Skip rendering the line if it's vertically outside our viewport\n        if (y + height < 0 || y > this._model.options.canvasInnerHeight) {\n            return;\n        }\n        const { startLineNumber, endLineNumber } = decorationRange;\n        const startColumn = (startLineNumber === lineNumber ? decorationRange.startColumn : 1);\n        const endColumn = (endLineNumber === lineNumber ? decorationRange.endColumn : this._model.getLineMaxColumn(lineNumber));\n        const x1 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, startColumn, tabSize, charWidth, canvasInnerWidth);\n        const x2 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, endColumn, tabSize, charWidth, canvasInnerWidth);\n        this.renderDecoration(canvasContext, decorationColor, x1, y, x2 - x1, height);\n    }\n    getXOffsetForPosition(lineOffsetMap, lineNumber, column, tabSize, charWidth, canvasInnerWidth) {\n        if (column === 1) {\n            return MINIMAP_GUTTER_WIDTH;\n        }\n        const minimumXOffset = (column - 1) * charWidth;\n        if (minimumXOffset >= canvasInnerWidth) {\n            // there is no need to look at actual characters,\n            // as this column is certainly after the minimap width\n            return canvasInnerWidth;\n        }\n        // Cache line offset data so that it is only read once per line\n        let lineIndexToXOffset = lineOffsetMap.get(lineNumber);\n        if (!lineIndexToXOffset) {\n            const lineData = this._model.getLineContent(lineNumber);\n            lineIndexToXOffset = [MINIMAP_GUTTER_WIDTH];\n            let prevx = MINIMAP_GUTTER_WIDTH;\n            for (let i = 1; i < lineData.length + 1; i++) {\n                const charCode = lineData.charCodeAt(i - 1);\n                const dx = charCode === 9 /* CharCode.Tab */\n                    ? tabSize * charWidth\n                    : strings.isFullWidthCharacter(charCode)\n                        ? 2 * charWidth\n                        : charWidth;\n                const x = prevx + dx;\n                if (x >= canvasInnerWidth) {\n                    // no need to keep on going, as we've hit the canvas width\n                    lineIndexToXOffset[i] = canvasInnerWidth;\n                    break;\n                }\n                lineIndexToXOffset[i] = x;\n                prevx = x;\n            }\n            lineOffsetMap.set(lineNumber, lineIndexToXOffset);\n        }\n        if (column - 1 < lineIndexToXOffset.length) {\n            return lineIndexToXOffset[column - 1];\n        }\n        // goes over the canvas width\n        return canvasInnerWidth;\n    }\n    renderDecoration(canvasContext, decorationColor, x, y, width, height) {\n        canvasContext.fillStyle = decorationColor && decorationColor.toString() || '';\n        canvasContext.fillRect(x, y, width, height);\n    }\n    renderLines(layout) {\n        const startLineNumber = layout.startLineNumber;\n        const endLineNumber = layout.endLineNumber;\n        const minimapLineHeight = this._model.options.minimapLineHeight;\n        // Check if nothing changed w.r.t. lines from last frame\n        if (this._lastRenderData && this._lastRenderData.linesEquals(layout)) {\n            const _lastData = this._lastRenderData._get();\n            // Nice!! Nothing changed from last frame\n            return new RenderData(layout, _lastData.imageData, _lastData.lines);\n        }\n        // Oh well!! We need to repaint some lines...\n        const imageData = this._getBuffer();\n        if (!imageData) {\n            // 0 width or 0 height canvas, nothing to do\n            return null;\n        }\n        // Render untouched lines by using last rendered data.\n        const [_dirtyY1, _dirtyY2, needed] = InnerMinimap._renderUntouchedLines(imageData, layout.topPaddingLineCount, startLineNumber, endLineNumber, minimapLineHeight, this._lastRenderData);\n        // Fetch rendering info from view model for rest of lines that need rendering.\n        const lineInfo = this._model.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed);\n        const tabSize = this._model.getOptions().tabSize;\n        const defaultBackground = this._model.options.defaultBackgroundColor;\n        const background = this._model.options.backgroundColor;\n        const foregroundAlpha = this._model.options.foregroundAlpha;\n        const tokensColorTracker = this._model.tokensColorTracker;\n        const useLighterFont = tokensColorTracker.backgroundIsLight();\n        const renderMinimap = this._model.options.renderMinimap;\n        const charRenderer = this._model.options.charRenderer();\n        const fontScale = this._model.options.fontScale;\n        const minimapCharWidth = this._model.options.minimapCharWidth;\n        const baseCharHeight = (renderMinimap === 1 /* RenderMinimap.Text */ ? 2 /* Constants.BASE_CHAR_HEIGHT */ : 2 /* Constants.BASE_CHAR_HEIGHT */ + 1);\n        const renderMinimapLineHeight = baseCharHeight * fontScale;\n        const innerLinePadding = (minimapLineHeight > renderMinimapLineHeight ? Math.floor((minimapLineHeight - renderMinimapLineHeight) / 2) : 0);\n        // Render the rest of lines\n        const backgroundA = background.a / 255;\n        const renderBackground = new RGBA8(Math.round((background.r - defaultBackground.r) * backgroundA + defaultBackground.r), Math.round((background.g - defaultBackground.g) * backgroundA + defaultBackground.g), Math.round((background.b - defaultBackground.b) * backgroundA + defaultBackground.b), 255);\n        let dy = layout.topPaddingLineCount * minimapLineHeight;\n        const renderedLines = [];\n        for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n            if (needed[lineIndex]) {\n                InnerMinimap._renderLine(imageData, renderBackground, background.a, useLighterFont, renderMinimap, minimapCharWidth, tokensColorTracker, foregroundAlpha, charRenderer, dy, innerLinePadding, tabSize, lineInfo[lineIndex], fontScale, minimapLineHeight);\n            }\n            renderedLines[lineIndex] = new MinimapLine(dy);\n            dy += minimapLineHeight;\n        }\n        const dirtyY1 = (_dirtyY1 === -1 ? 0 : _dirtyY1);\n        const dirtyY2 = (_dirtyY2 === -1 ? imageData.height : _dirtyY2);\n        const dirtyHeight = dirtyY2 - dirtyY1;\n        // Finally, paint to the canvas\n        const ctx = this._canvas.domNode.getContext('2d');\n        ctx.putImageData(imageData, 0, 0, 0, dirtyY1, imageData.width, dirtyHeight);\n        // Save rendered data for reuse on next frame if possible\n        return new RenderData(layout, imageData, renderedLines);\n    }\n    static _renderUntouchedLines(target, topPaddingLineCount, startLineNumber, endLineNumber, minimapLineHeight, lastRenderData) {\n        const needed = [];\n        if (!lastRenderData) {\n            for (let i = 0, len = endLineNumber - startLineNumber + 1; i < len; i++) {\n                needed[i] = true;\n            }\n            return [-1, -1, needed];\n        }\n        const _lastData = lastRenderData._get();\n        const lastTargetData = _lastData.imageData.data;\n        const lastStartLineNumber = _lastData.rendLineNumberStart;\n        const lastLines = _lastData.lines;\n        const lastLinesLength = lastLines.length;\n        const WIDTH = target.width;\n        const targetData = target.data;\n        const maxDestPixel = (endLineNumber - startLineNumber + 1) * minimapLineHeight * WIDTH * 4;\n        let dirtyPixel1 = -1; // the pixel offset up to which all the data is equal to the prev frame\n        let dirtyPixel2 = -1; // the pixel offset after which all the data is equal to the prev frame\n        let copySourceStart = -1;\n        let copySourceEnd = -1;\n        let copyDestStart = -1;\n        let copyDestEnd = -1;\n        let dest_dy = topPaddingLineCount * minimapLineHeight;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - startLineNumber;\n            const lastLineIndex = lineNumber - lastStartLineNumber;\n            const source_dy = (lastLineIndex >= 0 && lastLineIndex < lastLinesLength ? lastLines[lastLineIndex].dy : -1);\n            if (source_dy === -1) {\n                needed[lineIndex] = true;\n                dest_dy += minimapLineHeight;\n                continue;\n            }\n            const sourceStart = source_dy * WIDTH * 4;\n            const sourceEnd = (source_dy + minimapLineHeight) * WIDTH * 4;\n            const destStart = dest_dy * WIDTH * 4;\n            const destEnd = (dest_dy + minimapLineHeight) * WIDTH * 4;\n            if (copySourceEnd === sourceStart && copyDestEnd === destStart) {\n                // contiguous zone => extend copy request\n                copySourceEnd = sourceEnd;\n                copyDestEnd = destEnd;\n            }\n            else {\n                if (copySourceStart !== -1) {\n                    // flush existing copy request\n                    targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n                    if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                        dirtyPixel1 = copySourceEnd;\n                    }\n                    if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                        dirtyPixel2 = copySourceStart;\n                    }\n                }\n                copySourceStart = sourceStart;\n                copySourceEnd = sourceEnd;\n                copyDestStart = destStart;\n                copyDestEnd = destEnd;\n            }\n            needed[lineIndex] = false;\n            dest_dy += minimapLineHeight;\n        }\n        if (copySourceStart !== -1) {\n            // flush existing copy request\n            targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n            if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                dirtyPixel1 = copySourceEnd;\n            }\n            if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                dirtyPixel2 = copySourceStart;\n            }\n        }\n        const dirtyY1 = (dirtyPixel1 === -1 ? -1 : dirtyPixel1 / (WIDTH * 4));\n        const dirtyY2 = (dirtyPixel2 === -1 ? -1 : dirtyPixel2 / (WIDTH * 4));\n        return [dirtyY1, dirtyY2, needed];\n    }\n    static _renderLine(target, backgroundColor, backgroundAlpha, useLighterFont, renderMinimap, charWidth, colorTracker, foregroundAlpha, minimapCharRenderer, dy, innerLinePadding, tabSize, lineData, fontScale, minimapLineHeight) {\n        const content = lineData.content;\n        const tokens = lineData.tokens;\n        const maxDx = target.width - charWidth;\n        const force1pxHeight = (minimapLineHeight === 1);\n        let dx = MINIMAP_GUTTER_WIDTH;\n        let charIndex = 0;\n        let tabsCharDelta = 0;\n        for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n            const tokenEndIndex = tokens.getEndOffset(tokenIndex);\n            const tokenColorId = tokens.getForeground(tokenIndex);\n            const tokenColor = colorTracker.getColor(tokenColorId);\n            for (; charIndex < tokenEndIndex; charIndex++) {\n                if (dx > maxDx) {\n                    // hit edge of minimap\n                    return;\n                }\n                const charCode = content.charCodeAt(charIndex);\n                if (charCode === 9 /* CharCode.Tab */) {\n                    const insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n                    tabsCharDelta += insertSpacesCount - 1;\n                    // No need to render anything since tab is invisible\n                    dx += insertSpacesCount * charWidth;\n                }\n                else if (charCode === 32 /* CharCode.Space */) {\n                    // No need to render anything since space is invisible\n                    dx += charWidth;\n                }\n                else {\n                    // Render twice for a full width character\n                    const count = strings.isFullWidthCharacter(charCode) ? 2 : 1;\n                    for (let i = 0; i < count; i++) {\n                        if (renderMinimap === 2 /* RenderMinimap.Blocks */) {\n                            minimapCharRenderer.blockRenderChar(target, dx, dy + innerLinePadding, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight);\n                        }\n                        else { // RenderMinimap.Text\n                            minimapCharRenderer.renderChar(target, dx, dy + innerLinePadding, charCode, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight);\n                        }\n                        dx += charWidth;\n                        if (dx > maxDx) {\n                            // hit edge of minimap\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nclass ContiguousLineMap {\n    constructor(startLineNumber, endLineNumber, defaultValue) {\n        this._startLineNumber = startLineNumber;\n        this._endLineNumber = endLineNumber;\n        this._defaultValue = defaultValue;\n        this._values = [];\n        for (let i = 0, count = this._endLineNumber - this._startLineNumber + 1; i < count; i++) {\n            this._values[i] = defaultValue;\n        }\n    }\n    has(lineNumber) {\n        return (this.get(lineNumber) !== this._defaultValue);\n    }\n    set(lineNumber, value) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return;\n        }\n        this._values[lineNumber - this._startLineNumber] = value;\n    }\n    get(lineNumber) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return this._defaultValue;\n        }\n        return this._values[lineNumber - this._startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './overlayWidgets.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewOverlayWidgets extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this._widgets = {};\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 4 /* PartFingerprint.OverlayWidgets */);\n        this._domNode.setClassName('overlayWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        return true;\n    }\n    // ---- end view event handlers\n    addWidget(widget) {\n        const domNode = createFastDomNode(widget.getDomNode());\n        this._widgets[widget.getId()] = {\n            widget: widget,\n            preference: null,\n            domNode: domNode\n        };\n        // This is sync because a widget wants to be in the dom\n        domNode.setPosition('absolute');\n        domNode.setAttribute('widgetId', widget.getId());\n        this._domNode.appendChild(domNode);\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, preference) {\n        const widgetData = this._widgets[widget.getId()];\n        if (widgetData.preference === preference) {\n            return false;\n        }\n        widgetData.preference = preference;\n        this.setShouldRender();\n        return true;\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._widgets[widgetId];\n            const domNode = widgetData.domNode.domNode;\n            delete this._widgets[widgetId];\n            domNode.parentNode.removeChild(domNode);\n            this.setShouldRender();\n        }\n    }\n    _renderWidget(widgetData) {\n        const domNode = widgetData.domNode;\n        if (widgetData.preference === null) {\n            domNode.setTop('');\n            return;\n        }\n        if (widgetData.preference === 0 /* OverlayWidgetPositionPreference.TOP_RIGHT_CORNER */) {\n            domNode.setTop(0);\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 1 /* OverlayWidgetPositionPreference.BOTTOM_RIGHT_CORNER */) {\n            const widgetHeight = domNode.domNode.clientHeight;\n            domNode.setTop((this._editorHeight - widgetHeight - 2 * this._horizontalScrollbarHeight));\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 2 /* OverlayWidgetPositionPreference.TOP_CENTER */) {\n            domNode.setTop(0);\n            domNode.domNode.style.right = '50%';\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._editorWidth);\n        const keys = Object.keys(this._widgets);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const widgetId = keys[i];\n            this._renderWidget(this._widgets[widgetId]);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';\nclass Settings {\n    constructor(config, theme) {\n        const options = config.options;\n        this.lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this.pixelRatio = options.get(138 /* EditorOption.pixelRatio */);\n        this.overviewRulerLanes = options.get(80 /* EditorOption.overviewRulerLanes */);\n        this.renderBorder = options.get(79 /* EditorOption.overviewRulerBorder */);\n        const borderColor = theme.getColor(editorOverviewRulerBorder);\n        this.borderColor = borderColor ? borderColor.toString() : null;\n        this.hideCursor = options.get(57 /* EditorOption.hideCursorInOverviewRuler */);\n        const cursorColor = theme.getColor(editorCursorForeground);\n        this.cursorColor = cursorColor ? cursorColor.transparent(0.7).toString() : null;\n        this.themeType = theme.type;\n        const minimapOpts = options.get(70 /* EditorOption.minimap */);\n        const minimapEnabled = minimapOpts.enabled;\n        const minimapSide = minimapOpts.side;\n        const themeColor = theme.getColor(editorOverviewRulerBackground);\n        const defaultBackground = TokenizationRegistry.getDefaultBackground();\n        if (themeColor) {\n            this.backgroundColor = themeColor;\n        }\n        else if (minimapEnabled && minimapSide === 'right') {\n            this.backgroundColor = defaultBackground;\n        }\n        else {\n            this.backgroundColor = null;\n        }\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        const position = layoutInfo.overviewRuler;\n        this.top = position.top;\n        this.right = position.right;\n        this.domWidth = position.width;\n        this.domHeight = position.height;\n        if (this.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this.canvasWidth = 0;\n            this.canvasHeight = 0;\n        }\n        else {\n            this.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n            this.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n        }\n        const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n        this.x = x;\n        this.w = w;\n    }\n    _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n        const remainingWidth = canvasWidth - canvasLeftOffset;\n        if (laneCount >= 3) {\n            const leftWidth = Math.floor(remainingWidth / 3);\n            const rightWidth = Math.floor(remainingWidth / 3);\n            const centerWidth = remainingWidth - leftWidth - rightWidth;\n            const leftOffset = canvasLeftOffset;\n            const centerOffset = leftOffset + leftWidth;\n            const rightOffset = leftOffset + leftWidth + centerWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth,\n                    centerWidth,\n                    leftWidth + centerWidth,\n                    rightWidth,\n                    leftWidth + centerWidth + rightWidth,\n                    centerWidth + rightWidth,\n                    leftWidth + centerWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else if (laneCount === 2) {\n            const leftWidth = Math.floor(remainingWidth / 2);\n            const rightWidth = remainingWidth - leftWidth;\n            const leftOffset = canvasLeftOffset;\n            const rightOffset = leftOffset + leftWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth,\n                    leftWidth,\n                    leftWidth,\n                    rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else {\n            const offset = canvasLeftOffset;\n            const width = remainingWidth;\n            return [\n                [\n                    0,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset, // Left | Center | Right\n                ], [\n                    0,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width, // Left | Center | Right\n                ]\n            ];\n        }\n    }\n    equals(other) {\n        return (this.lineHeight === other.lineHeight\n            && this.pixelRatio === other.pixelRatio\n            && this.overviewRulerLanes === other.overviewRulerLanes\n            && this.renderBorder === other.renderBorder\n            && this.borderColor === other.borderColor\n            && this.hideCursor === other.hideCursor\n            && this.cursorColor === other.cursorColor\n            && this.themeType === other.themeType\n            && Color.equals(this.backgroundColor, other.backgroundColor)\n            && this.top === other.top\n            && this.right === other.right\n            && this.domWidth === other.domWidth\n            && this.domHeight === other.domHeight\n            && this.canvasWidth === other.canvasWidth\n            && this.canvasHeight === other.canvasHeight);\n    }\n}\nexport class DecorationsOverviewRuler extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName('decorationsOverviewRuler');\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateSettings(false);\n        this._tokensColorTrackerListener = TokenizationRegistry.onDidChange((e) => {\n            if (e.changedColorMap) {\n                this._updateSettings(true);\n            }\n        });\n        this._cursorPositions = [];\n    }\n    dispose() {\n        super.dispose();\n        this._tokensColorTrackerListener.dispose();\n    }\n    _updateSettings(renderNow) {\n        const newSettings = new Settings(this._context.configuration, this._context.theme);\n        if (this._settings && this._settings.equals(newSettings)) {\n            // nothing to do\n            return false;\n        }\n        this._settings = newSettings;\n        this._domNode.setTop(this._settings.top);\n        this._domNode.setRight(this._settings.right);\n        this._domNode.setWidth(this._settings.domWidth);\n        this._domNode.setHeight(this._settings.domHeight);\n        this._domNode.domNode.width = this._settings.canvasWidth;\n        this._domNode.domNode.height = this._settings.canvasHeight;\n        if (renderNow) {\n            this._render();\n        }\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._updateSettings(false);\n    }\n    onCursorStateChanged(e) {\n        this._cursorPositions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            this._cursorPositions[i] = e.selections[i].getPosition();\n        }\n        this._cursorPositions.sort(Position.compare);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsOverviewRuler) {\n            return true;\n        }\n        return false;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        return this._updateSettings(false);\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(editorCtx) {\n        this._render();\n    }\n    _render() {\n        const backgroundColor = this._settings.backgroundColor;\n        if (this._settings.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this._domNode.setBackgroundColor(backgroundColor ? Color.Format.CSS.formatHexA(backgroundColor) : '');\n            this._domNode.setDisplay('none');\n            return;\n        }\n        this._domNode.setDisplay('block');\n        const canvasWidth = this._settings.canvasWidth;\n        const canvasHeight = this._settings.canvasHeight;\n        const lineHeight = this._settings.lineHeight;\n        const viewLayout = this._context.viewLayout;\n        const outerHeight = this._context.viewLayout.getScrollHeight();\n        const heightRatio = canvasHeight / outerHeight;\n        const decorations = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);\n        const minDecorationHeight = (6 /* Constants.MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio) | 0;\n        const halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n        const canvasCtx = this._domNode.domNode.getContext('2d');\n        if (backgroundColor) {\n            if (backgroundColor.isOpaque()) {\n                // We have a background color which is opaque, we can just paint the entire surface with it\n                canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n            }\n            else {\n                // We have a background color which is transparent, we need to first clear the surface and\n                // then fill it\n                canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n                canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n            }\n        }\n        else {\n            // We don't have a background color\n            canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        }\n        const x = this._settings.x;\n        const w = this._settings.w;\n        decorations.sort(OverviewRulerDecorationsGroup.cmp);\n        for (const decorationGroup of decorations) {\n            const color = decorationGroup.color;\n            const decorationGroupData = decorationGroup.data;\n            canvasCtx.fillStyle = color;\n            let prevLane = 0;\n            let prevY1 = 0;\n            let prevY2 = 0;\n            for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n                const lane = decorationGroupData[3 * i];\n                const startLineNumber = decorationGroupData[3 * i + 1];\n                const endLineNumber = decorationGroupData[3 * i + 2];\n                let y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n                let y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n                const height = y2 - y1;\n                if (height < minDecorationHeight) {\n                    let yCenter = ((y1 + y2) / 2) | 0;\n                    if (yCenter < halfMinDecorationHeight) {\n                        yCenter = halfMinDecorationHeight;\n                    }\n                    else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n                        yCenter = canvasHeight - halfMinDecorationHeight;\n                    }\n                    y1 = yCenter - halfMinDecorationHeight;\n                    y2 = yCenter + halfMinDecorationHeight;\n                }\n                if (y1 > prevY2 + 1 || lane !== prevLane) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n                    }\n                    prevLane = lane;\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n        }\n        // Draw cursors\n        if (!this._settings.hideCursor && this._settings.cursorColor) {\n            const cursorHeight = (2 * this._settings.pixelRatio) | 0;\n            const halfCursorHeight = (cursorHeight / 2) | 0;\n            const cursorX = this._settings.x[7 /* OverviewRulerLane.Full */];\n            const cursorW = this._settings.w[7 /* OverviewRulerLane.Full */];\n            canvasCtx.fillStyle = this._settings.cursorColor;\n            let prevY1 = -100;\n            let prevY2 = -100;\n            for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n                const cursor = this._cursorPositions[i];\n                let yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n                if (yCenter < halfCursorHeight) {\n                    yCenter = halfCursorHeight;\n                }\n                else if (yCenter + halfCursorHeight > canvasHeight) {\n                    yCenter = canvasHeight - halfCursorHeight;\n                }\n                const y1 = yCenter - halfCursorHeight;\n                const y2 = y1 + cursorHeight;\n                if (y1 > prevY2 + 1) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n                    }\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n        }\n        if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n            canvasCtx.beginPath();\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = this._settings.borderColor;\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(0, canvasHeight);\n            canvasCtx.stroke();\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(canvasWidth, 0);\n            canvasCtx.stroke();\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { OverviewZoneManager } from '../../../common/viewModel/overviewZoneManager.js';\nimport { ViewEventHandler } from '../../../common/viewEventHandler.js';\nexport class OverviewRuler extends ViewEventHandler {\n    constructor(context, cssClassName) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName(cssClassName);\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._zoneManager = new OverviewZoneManager((lineNumber) => this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber));\n        this._zoneManager.setDOMWidth(0);\n        this._zoneManager.setDOMHeight(0);\n        this._zoneManager.setOuterHeight(this._context.viewLayout.getScrollHeight());\n        this._zoneManager.setLineHeight(options.get(64 /* EditorOption.lineHeight */));\n        this._zoneManager.setPixelRatio(options.get(138 /* EditorOption.pixelRatio */));\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        if (e.hasChanged(64 /* EditorOption.lineHeight */)) {\n            this._zoneManager.setLineHeight(options.get(64 /* EditorOption.lineHeight */));\n            this._render();\n        }\n        if (e.hasChanged(138 /* EditorOption.pixelRatio */)) {\n            this._zoneManager.setPixelRatio(options.get(138 /* EditorOption.pixelRatio */));\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n        return true;\n    }\n    onFlushed(e) {\n        this._render();\n        return true;\n    }\n    onScrollChanged(e) {\n        if (e.scrollHeightChanged) {\n            this._zoneManager.setOuterHeight(e.scrollHeight);\n            this._render();\n        }\n        return true;\n    }\n    onZonesChanged(e) {\n        this._render();\n        return true;\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    setLayout(position) {\n        this._domNode.setTop(position.top);\n        this._domNode.setRight(position.right);\n        let hasChanged = false;\n        hasChanged = this._zoneManager.setDOMWidth(position.width) || hasChanged;\n        hasChanged = this._zoneManager.setDOMHeight(position.height) || hasChanged;\n        if (hasChanged) {\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n    }\n    setZones(zones) {\n        this._zoneManager.setZones(zones);\n        this._render();\n    }\n    _render() {\n        if (this._zoneManager.getOuterHeight() === 0) {\n            return false;\n        }\n        const width = this._zoneManager.getCanvasWidth();\n        const height = this._zoneManager.getCanvasHeight();\n        const colorZones = this._zoneManager.resolveColorZones();\n        const id2Color = this._zoneManager.getId2Color();\n        const ctx = this._domNode.domNode.getContext('2d');\n        ctx.clearRect(0, 0, width, height);\n        if (colorZones.length > 0) {\n            this._renderOneLane(ctx, colorZones, id2Color, width);\n        }\n        return true;\n    }\n    _renderOneLane(ctx, colorZones, id2Color, width) {\n        let currentColorId = 0;\n        let currentFrom = 0;\n        let currentTo = 0;\n        for (const zone of colorZones) {\n            const zoneColorId = zone.colorId;\n            const zoneFrom = zone.from;\n            const zoneTo = zone.to;\n            if (zoneColorId !== currentColorId) {\n                ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                currentColorId = zoneColorId;\n                ctx.fillStyle = id2Color[currentColorId];\n                currentFrom = zoneFrom;\n                currentTo = zoneTo;\n            }\n            else {\n                if (currentTo >= zoneFrom) {\n                    currentTo = Math.max(currentTo, zoneTo);\n                }\n                else {\n                    ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                    currentFrom = zoneFrom;\n                    currentTo = zoneTo;\n                }\n            }\n        }\n        ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './rulers.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class Rulers extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.domNode.setClassName('view-rulers');\n        this._renderedRulers = [];\n        const options = this._context.configuration.options;\n        this._rulers = options.get(98 /* EditorOption.rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(48 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n    }\n    dispose() {\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._rulers = options.get(98 /* EditorOption.rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(48 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    _ensureRulersCount() {\n        const currentCount = this._renderedRulers.length;\n        const desiredCount = this._rulers.length;\n        if (currentCount === desiredCount) {\n            // Nothing to do\n            return;\n        }\n        if (currentCount < desiredCount) {\n            const { tabSize } = this._context.viewModel.model.getOptions();\n            const rulerWidth = tabSize;\n            let addCount = desiredCount - currentCount;\n            while (addCount > 0) {\n                const node = createFastDomNode(document.createElement('div'));\n                node.setClassName('view-ruler');\n                node.setWidth(rulerWidth);\n                this.domNode.appendChild(node);\n                this._renderedRulers.push(node);\n                addCount--;\n            }\n            return;\n        }\n        let removeCount = currentCount - desiredCount;\n        while (removeCount > 0) {\n            const node = this._renderedRulers.pop();\n            this.domNode.removeChild(node);\n            removeCount--;\n        }\n    }\n    render(ctx) {\n        this._ensureRulersCount();\n        for (let i = 0, len = this._rulers.length; i < len; i++) {\n            const node = this._renderedRulers[i];\n            const ruler = this._rulers[i];\n            node.setBoxShadow(ruler.color ? `1px 0 0 0 ${ruler.color} inset` : ``);\n            node.setHeight(Math.min(ctx.scrollHeight, 1000000));\n            node.setLeft(ruler.column * this._typicalHalfwidthCharacterWidth);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './scrollDecoration.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class ScrollDecorationViewPart extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._scrollTop = 0;\n        this._width = 0;\n        this._updateWidth();\n        this._shouldShow = false;\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(99 /* EditorOption.scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n    }\n    dispose() {\n        super.dispose();\n    }\n    _updateShouldShow() {\n        const newShouldShow = (this._useShadows && this._scrollTop > 0);\n        if (this._shouldShow !== newShouldShow) {\n            this._shouldShow = newShouldShow;\n            return true;\n        }\n        return false;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _updateWidth() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        if (layoutInfo.minimap.renderMinimap === 0 || (layoutInfo.minimap.minimapWidth > 0 && layoutInfo.minimap.minimapLeft === 0)) {\n            this._width = layoutInfo.width;\n        }\n        else {\n            this._width = layoutInfo.width - layoutInfo.verticalScrollbarWidth;\n        }\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(99 /* EditorOption.scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._updateWidth();\n        this._updateShouldShow();\n        return true;\n    }\n    onScrollChanged(e) {\n        this._scrollTop = e.scrollTop;\n        return this._updateShouldShow();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._width);\n        this._domNode.setClassName(this._shouldShow ? 'scroll-decoration' : '');\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './selections.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorSelectionForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nclass HorizontalRangeWithStyle {\n    constructor(other) {\n        this.left = other.left;\n        this.width = other.width;\n        this.startStyle = null;\n        this.endStyle = null;\n    }\n}\nclass LineVisibleRangesWithStyle {\n    constructor(lineNumber, ranges) {\n        this.lineNumber = lineNumber;\n        this.ranges = ranges;\n    }\n}\nfunction toStyledRange(item) {\n    return new HorizontalRangeWithStyle(item);\n}\nfunction toStyled(item) {\n    return new LineVisibleRangesWithStyle(item.lineNumber, item.ranges.map(toStyledRange));\n}\nexport class SelectionsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._previousFrameVisibleRangesWithStyle = [];\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._roundedSelection = options.get(97 /* EditorOption.roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(48 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._selections = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._roundedSelection = options.get(97 /* EditorOption.roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(48 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections.slice(0);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true; //e.inlineDecorationsChanged;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _visibleRangesHaveGaps(linesVisibleRanges) {\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = linesVisibleRanges[i];\n            if (lineVisibleRanges.ranges.length > 1) {\n                // There are two ranges on the same line\n                return true;\n            }\n        }\n        return false;\n    }\n    _enrichVisibleRangesWithStyle(viewport, linesVisibleRanges, previousFrame) {\n        const epsilon = this._typicalHalfwidthCharacterWidth / 4;\n        let previousFrameTop = null;\n        let previousFrameBottom = null;\n        if (previousFrame && previousFrame.length > 0 && linesVisibleRanges.length > 0) {\n            const topLineNumber = linesVisibleRanges[0].lineNumber;\n            if (topLineNumber === viewport.startLineNumber) {\n                for (let i = 0; !previousFrameTop && i < previousFrame.length; i++) {\n                    if (previousFrame[i].lineNumber === topLineNumber) {\n                        previousFrameTop = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            const bottomLineNumber = linesVisibleRanges[linesVisibleRanges.length - 1].lineNumber;\n            if (bottomLineNumber === viewport.endLineNumber) {\n                for (let i = previousFrame.length - 1; !previousFrameBottom && i >= 0; i--) {\n                    if (previousFrame[i].lineNumber === bottomLineNumber) {\n                        previousFrameBottom = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            if (previousFrameTop && !previousFrameTop.startStyle) {\n                previousFrameTop = null;\n            }\n            if (previousFrameBottom && !previousFrameBottom.startStyle) {\n                previousFrameBottom = null;\n            }\n        }\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            // We know for a fact that there is precisely one range on each line\n            const curLineRange = linesVisibleRanges[i].ranges[0];\n            const curLeft = curLineRange.left;\n            const curRight = curLineRange.left + curLineRange.width;\n            const startStyle = {\n                top: 0 /* CornerStyle.EXTERN */,\n                bottom: 0 /* CornerStyle.EXTERN */\n            };\n            const endStyle = {\n                top: 0 /* CornerStyle.EXTERN */,\n                bottom: 0 /* CornerStyle.EXTERN */\n            };\n            if (i > 0) {\n                // Look above\n                const prevLeft = linesVisibleRanges[i - 1].ranges[0].left;\n                const prevRight = linesVisibleRanges[i - 1].ranges[0].left + linesVisibleRanges[i - 1].ranges[0].width;\n                if (abs(curLeft - prevLeft) < epsilon) {\n                    startStyle.top = 2 /* CornerStyle.FLAT */;\n                }\n                else if (curLeft > prevLeft) {\n                    startStyle.top = 1 /* CornerStyle.INTERN */;\n                }\n                if (abs(curRight - prevRight) < epsilon) {\n                    endStyle.top = 2 /* CornerStyle.FLAT */;\n                }\n                else if (prevLeft < curRight && curRight < prevRight) {\n                    endStyle.top = 1 /* CornerStyle.INTERN */;\n                }\n            }\n            else if (previousFrameTop) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.top = previousFrameTop.startStyle.top;\n                endStyle.top = previousFrameTop.endStyle.top;\n            }\n            if (i + 1 < len) {\n                // Look below\n                const nextLeft = linesVisibleRanges[i + 1].ranges[0].left;\n                const nextRight = linesVisibleRanges[i + 1].ranges[0].left + linesVisibleRanges[i + 1].ranges[0].width;\n                if (abs(curLeft - nextLeft) < epsilon) {\n                    startStyle.bottom = 2 /* CornerStyle.FLAT */;\n                }\n                else if (nextLeft < curLeft && curLeft < nextRight) {\n                    startStyle.bottom = 1 /* CornerStyle.INTERN */;\n                }\n                if (abs(curRight - nextRight) < epsilon) {\n                    endStyle.bottom = 2 /* CornerStyle.FLAT */;\n                }\n                else if (curRight < nextRight) {\n                    endStyle.bottom = 1 /* CornerStyle.INTERN */;\n                }\n            }\n            else if (previousFrameBottom) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.bottom = previousFrameBottom.startStyle.bottom;\n                endStyle.bottom = previousFrameBottom.endStyle.bottom;\n            }\n            curLineRange.startStyle = startStyle;\n            curLineRange.endStyle = endStyle;\n        }\n    }\n    _getVisibleRangesWithStyle(selection, ctx, previousFrame) {\n        const _linesVisibleRanges = ctx.linesVisibleRangesForRange(selection, true) || [];\n        const linesVisibleRanges = _linesVisibleRanges.map(toStyled);\n        const visibleRangesHaveGaps = this._visibleRangesHaveGaps(linesVisibleRanges);\n        if (!visibleRangesHaveGaps && this._roundedSelection) {\n            this._enrichVisibleRangesWithStyle(ctx.visibleRange, linesVisibleRanges, previousFrame);\n        }\n        // The visible ranges are sorted TOP-BOTTOM and LEFT-RIGHT\n        return linesVisibleRanges;\n    }\n    _createSelectionPiece(top, height, className, left, width) {\n        return ('<div class=\"cslr '\n            + className\n            + '\" style=\"top:'\n            + top.toString()\n            + 'px;left:'\n            + left.toString()\n            + 'px;width:'\n            + width.toString()\n            + 'px;height:'\n            + height\n            + 'px;\"></div>');\n    }\n    _actualRenderOneSelection(output2, visibleStartLineNumber, hasMultipleSelections, visibleRanges) {\n        if (visibleRanges.length === 0) {\n            return;\n        }\n        const visibleRangesHaveStyle = !!visibleRanges[0].ranges[0].startStyle;\n        const fullLineHeight = (this._lineHeight).toString();\n        const reducedLineHeight = (this._lineHeight - 1).toString();\n        const firstLineNumber = visibleRanges[0].lineNumber;\n        const lastLineNumber = visibleRanges[visibleRanges.length - 1].lineNumber;\n        for (let i = 0, len = visibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = visibleRanges[i];\n            const lineNumber = lineVisibleRanges.lineNumber;\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const lineHeight = hasMultipleSelections ? (lineNumber === lastLineNumber || lineNumber === firstLineNumber ? reducedLineHeight : fullLineHeight) : fullLineHeight;\n            const top = hasMultipleSelections ? (lineNumber === firstLineNumber ? 1 : 0) : 0;\n            let innerCornerOutput = '';\n            let restOfSelectionOutput = '';\n            for (let j = 0, lenJ = lineVisibleRanges.ranges.length; j < lenJ; j++) {\n                const visibleRange = lineVisibleRanges.ranges[j];\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 1 /* CornerStyle.INTERN */ || startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                        // Reverse rounded corner to the left\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (startStyle.top === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                        }\n                        if (startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                    if (endStyle.top === 1 /* CornerStyle.INTERN */ || endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                        // Reverse rounded corner to the right\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (endStyle.top === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                        }\n                        if (endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                }\n                let className = SelectionsOverlay.SELECTION_CLASS_NAME;\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                    }\n                    if (startStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                    }\n                    if (endStyle.top === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                    }\n                    if (endStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                    }\n                }\n                restOfSelectionOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left, visibleRange.width);\n            }\n            output2[lineIndex][0] += innerCornerOutput;\n            output2[lineIndex][1] += restOfSelectionOutput;\n        }\n    }\n    prepareRender(ctx) {\n        // Build HTML for inner corners separate from HTML for the rest of selections,\n        // as the inner corner HTML can interfere with that of other selections.\n        // In final render, make sure to place the inner corner HTML before the rest of selection HTML. See issue #77777.\n        const output = [];\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = ['', ''];\n        }\n        const thisFrameVisibleRangesWithStyle = [];\n        for (let i = 0, len = this._selections.length; i < len; i++) {\n            const selection = this._selections[i];\n            if (selection.isEmpty()) {\n                thisFrameVisibleRangesWithStyle[i] = null;\n                continue;\n            }\n            const visibleRangesWithStyle = this._getVisibleRangesWithStyle(selection, ctx, this._previousFrameVisibleRangesWithStyle[i]);\n            thisFrameVisibleRangesWithStyle[i] = visibleRangesWithStyle;\n            this._actualRenderOneSelection(output, visibleStartLineNumber, this._selections.length > 1, visibleRangesWithStyle);\n        }\n        this._previousFrameVisibleRangesWithStyle = thisFrameVisibleRangesWithStyle;\n        this._renderResult = output.map(([internalCorners, restOfSelection]) => internalCorners + restOfSelection);\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nSelectionsOverlay.SELECTION_CLASS_NAME = 'selected-text';\nSelectionsOverlay.SELECTION_TOP_LEFT = 'top-left-radius';\nSelectionsOverlay.SELECTION_BOTTOM_LEFT = 'bottom-left-radius';\nSelectionsOverlay.SELECTION_TOP_RIGHT = 'top-right-radius';\nSelectionsOverlay.SELECTION_BOTTOM_RIGHT = 'bottom-right-radius';\nSelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME = 'monaco-editor-background';\nSelectionsOverlay.ROUNDED_PIECE_WIDTH = 10;\nregisterThemingParticipant((theme, collector) => {\n    const editorSelectionForegroundColor = theme.getColor(editorSelectionForeground);\n    if (editorSelectionForegroundColor && !editorSelectionForegroundColor.isTransparent()) {\n        collector.addRule(`.monaco-editor .view-line span.inline-selected-text { color: ${editorSelectionForegroundColor}; }`);\n    }\n});\nfunction abs(n) {\n    return n < 0 ? -n : n;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass ViewCursorRenderData {\n    constructor(top, left, paddingLeft, width, height, textContent, textContentClassName) {\n        this.top = top;\n        this.left = left;\n        this.paddingLeft = paddingLeft;\n        this.width = width;\n        this.height = height;\n        this.textContent = textContent;\n        this.textContentClassName = textContentClassName;\n    }\n}\nexport class ViewCursor {\n    constructor(context) {\n        this._context = context;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(48 /* EditorOption.fontInfo */);\n        this._cursorStyle = options.get(26 /* EditorOption.cursorStyle */);\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(29 /* EditorOption.cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        this._isVisible = true;\n        // Create the dom node\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this._domNode.setHeight(this._lineHeight);\n        this._domNode.setTop(0);\n        this._domNode.setLeft(0);\n        applyFontInfo(this._domNode, fontInfo);\n        this._domNode.setDisplay('none');\n        this._position = new Position(1, 1);\n        this._lastRenderedContent = '';\n        this._renderData = null;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return this._position;\n    }\n    show() {\n        if (!this._isVisible) {\n            this._domNode.setVisibility('inherit');\n            this._isVisible = true;\n        }\n    }\n    hide() {\n        if (this._isVisible) {\n            this._domNode.setVisibility('hidden');\n            this._isVisible = false;\n        }\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(48 /* EditorOption.fontInfo */);\n        this._cursorStyle = options.get(26 /* EditorOption.cursorStyle */);\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(29 /* EditorOption.cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        applyFontInfo(this._domNode, fontInfo);\n        return true;\n    }\n    onCursorPositionChanged(position, pauseAnimation) {\n        if (pauseAnimation) {\n            this._domNode.domNode.style.transitionProperty = 'none';\n        }\n        else {\n            this._domNode.domNode.style.transitionProperty = '';\n        }\n        this._position = position;\n        return true;\n    }\n    /**\n     * If `this._position` is inside a grapheme, returns the position where the grapheme starts.\n     * Also returns the next grapheme.\n     */\n    _getGraphemeAwarePosition() {\n        const { lineNumber, column } = this._position;\n        const lineContent = this._context.viewModel.getLineContent(lineNumber);\n        const [startOffset, endOffset] = strings.getCharContainingOffset(lineContent, column - 1);\n        return [new Position(lineNumber, startOffset + 1), lineContent.substring(startOffset, endOffset)];\n    }\n    _prepareRender(ctx) {\n        let textContent = '';\n        let textContentClassName = '';\n        const [position, nextGrapheme] = this._getGraphemeAwarePosition();\n        if (this._cursorStyle === TextEditorCursorStyle.Line || this._cursorStyle === TextEditorCursorStyle.LineThin) {\n            const visibleRange = ctx.visibleRangeForPosition(position);\n            if (!visibleRange || visibleRange.outsideRenderedLine) {\n                // Outside viewport\n                return null;\n            }\n            let width;\n            if (this._cursorStyle === TextEditorCursorStyle.Line) {\n                width = dom.computeScreenAwareSize(this._lineCursorWidth > 0 ? this._lineCursorWidth : 2);\n                if (width > 2) {\n                    textContent = nextGrapheme;\n                    textContentClassName = this._getTokenClassName(position);\n                }\n            }\n            else {\n                width = dom.computeScreenAwareSize(1);\n            }\n            let left = visibleRange.left;\n            let paddingLeft = 0;\n            if (width >= 2 && left >= 1) {\n                // shift the cursor a bit between the characters\n                paddingLeft = 1;\n                left -= paddingLeft;\n            }\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n            return new ViewCursorRenderData(top, left, paddingLeft, width, this._lineHeight, textContent, textContentClassName);\n        }\n        const visibleRangeForCharacter = ctx.linesVisibleRangesForRange(new Range(position.lineNumber, position.column, position.lineNumber, position.column + nextGrapheme.length), false);\n        if (!visibleRangeForCharacter || visibleRangeForCharacter.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const firstVisibleRangeForCharacter = visibleRangeForCharacter[0];\n        if (firstVisibleRangeForCharacter.outsideRenderedLine || firstVisibleRangeForCharacter.ranges.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const range = firstVisibleRangeForCharacter.ranges[0];\n        const width = (nextGrapheme === '\\t'\n            ? this._typicalHalfwidthCharacterWidth\n            : (range.width < 1\n                ? this._typicalHalfwidthCharacterWidth\n                : range.width));\n        if (this._cursorStyle === TextEditorCursorStyle.Block) {\n            textContent = nextGrapheme;\n            textContentClassName = this._getTokenClassName(position);\n        }\n        let top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n        let height = this._lineHeight;\n        // Underline might interfere with clicking\n        if (this._cursorStyle === TextEditorCursorStyle.Underline || this._cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n            top += this._lineHeight - 2;\n            height = 2;\n        }\n        return new ViewCursorRenderData(top, range.left, 0, width, height, textContent, textContentClassName);\n    }\n    _getTokenClassName(position) {\n        const lineData = this._context.viewModel.getViewLineData(position.lineNumber);\n        const tokenIndex = lineData.tokens.findTokenIndexAtOffset(position.column - 1);\n        return lineData.tokens.getClassName(tokenIndex);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRender(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            this._domNode.setDisplay('none');\n            return null;\n        }\n        if (this._lastRenderedContent !== this._renderData.textContent) {\n            this._lastRenderedContent = this._renderData.textContent;\n            this._domNode.domNode.textContent = this._lastRenderedContent;\n        }\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ${this._renderData.textContentClassName}`);\n        this._domNode.setDisplay('block');\n        this._domNode.setTop(this._renderData.top);\n        this._domNode.setLeft(this._renderData.left);\n        this._domNode.setPaddingLeft(this._renderData.paddingLeft);\n        this._domNode.setWidth(this._renderData.width);\n        this._domNode.setLineHeight(this._renderData.height);\n        this._domNode.setHeight(this._renderData.height);\n        return {\n            domNode: this._domNode.domNode,\n            position: this._position,\n            contentLeft: this._renderData.left,\n            height: this._renderData.height,\n            width: 2\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './viewCursors.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { IntervalTimer, TimeoutTimer } from '../../../../base/common/async.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { ViewCursor } from './viewCursor.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { editorCursorBackground, editorCursorForeground } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nexport class ViewCursors extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(88 /* EditorOption.readOnly */);\n        this._cursorBlinking = options.get(24 /* EditorOption.cursorBlinking */);\n        this._cursorStyle = options.get(26 /* EditorOption.cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(25 /* EditorOption.cursorSmoothCaretAnimation */);\n        this._selectionIsEmpty = true;\n        this._isComposingInput = false;\n        this._isVisible = false;\n        this._primaryCursor = new ViewCursor(this._context);\n        this._secondaryCursors = [];\n        this._renderData = [];\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateDomClassName();\n        this._domNode.appendChild(this._primaryCursor.getDomNode());\n        this._startCursorBlinkAnimation = new TimeoutTimer();\n        this._cursorFlatBlinkInterval = new IntervalTimer();\n        this._blinkingEnabled = false;\n        this._editorHasFocus = false;\n        this._updateBlinking();\n    }\n    dispose() {\n        super.dispose();\n        this._startCursorBlinkAnimation.dispose();\n        this._cursorFlatBlinkInterval.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onCompositionStart(e) {\n        this._isComposingInput = true;\n        this._updateBlinking();\n        return true;\n    }\n    onCompositionEnd(e) {\n        this._isComposingInput = false;\n        this._updateBlinking();\n        return true;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(88 /* EditorOption.readOnly */);\n        this._cursorBlinking = options.get(24 /* EditorOption.cursorBlinking */);\n        this._cursorStyle = options.get(26 /* EditorOption.cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(25 /* EditorOption.cursorSmoothCaretAnimation */);\n        this._updateBlinking();\n        this._updateDomClassName();\n        this._primaryCursor.onConfigurationChanged(e);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    _onCursorPositionChanged(position, secondaryPositions, reason) {\n        const pauseAnimation = (this._secondaryCursors.length !== secondaryPositions.length\n            || (this._cursorSmoothCaretAnimation === 'explicit' && reason !== 3 /* CursorChangeReason.Explicit */));\n        this._primaryCursor.onCursorPositionChanged(position, pauseAnimation);\n        this._updateBlinking();\n        if (this._secondaryCursors.length < secondaryPositions.length) {\n            // Create new cursors\n            const addCnt = secondaryPositions.length - this._secondaryCursors.length;\n            for (let i = 0; i < addCnt; i++) {\n                const newCursor = new ViewCursor(this._context);\n                this._domNode.domNode.insertBefore(newCursor.getDomNode().domNode, this._primaryCursor.getDomNode().domNode.nextSibling);\n                this._secondaryCursors.push(newCursor);\n            }\n        }\n        else if (this._secondaryCursors.length > secondaryPositions.length) {\n            // Remove some cursors\n            const removeCnt = this._secondaryCursors.length - secondaryPositions.length;\n            for (let i = 0; i < removeCnt; i++) {\n                this._domNode.removeChild(this._secondaryCursors[0].getDomNode());\n                this._secondaryCursors.splice(0, 1);\n            }\n        }\n        for (let i = 0; i < secondaryPositions.length; i++) {\n            this._secondaryCursors[i].onCursorPositionChanged(secondaryPositions[i], pauseAnimation);\n        }\n    }\n    onCursorStateChanged(e) {\n        const positions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            positions[i] = e.selections[i].getPosition();\n        }\n        this._onCursorPositionChanged(positions[0], positions.slice(1), e.reason);\n        const selectionIsEmpty = e.selections[0].isEmpty();\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            this._updateDomClassName();\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        this._editorHasFocus = e.isFocused;\n        this._updateBlinking();\n        return false;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onTokensChanged(e) {\n        const shouldRender = (position) => {\n            for (let i = 0, len = e.ranges.length; i < len; i++) {\n                if (e.ranges[i].fromLineNumber <= position.lineNumber && position.lineNumber <= e.ranges[i].toLineNumber) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        if (shouldRender(this._primaryCursor.getPosition())) {\n            return true;\n        }\n        for (const secondaryCursor of this._secondaryCursors) {\n            if (shouldRender(secondaryCursor.getPosition())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // ---- blinking logic\n    _getCursorBlinking() {\n        if (this._isComposingInput) {\n            // avoid double cursors\n            return 0 /* TextEditorCursorBlinkingStyle.Hidden */;\n        }\n        if (!this._editorHasFocus) {\n            return 0 /* TextEditorCursorBlinkingStyle.Hidden */;\n        }\n        if (this._readOnly) {\n            return 5 /* TextEditorCursorBlinkingStyle.Solid */;\n        }\n        return this._cursorBlinking;\n    }\n    _updateBlinking() {\n        this._startCursorBlinkAnimation.cancel();\n        this._cursorFlatBlinkInterval.cancel();\n        const blinkingStyle = this._getCursorBlinking();\n        // hidden and solid are special as they involve no animations\n        const isHidden = (blinkingStyle === 0 /* TextEditorCursorBlinkingStyle.Hidden */);\n        const isSolid = (blinkingStyle === 5 /* TextEditorCursorBlinkingStyle.Solid */);\n        if (isHidden) {\n            this._hide();\n        }\n        else {\n            this._show();\n        }\n        this._blinkingEnabled = false;\n        this._updateDomClassName();\n        if (!isHidden && !isSolid) {\n            if (blinkingStyle === 1 /* TextEditorCursorBlinkingStyle.Blink */) {\n                // flat blinking is handled by JavaScript to save battery life due to Chromium step timing issue https://bugs.chromium.org/p/chromium/issues/detail?id=361587\n                this._cursorFlatBlinkInterval.cancelAndSet(() => {\n                    if (this._isVisible) {\n                        this._hide();\n                    }\n                    else {\n                        this._show();\n                    }\n                }, ViewCursors.BLINK_INTERVAL);\n            }\n            else {\n                this._startCursorBlinkAnimation.setIfNotSet(() => {\n                    this._blinkingEnabled = true;\n                    this._updateDomClassName();\n                }, ViewCursors.BLINK_INTERVAL);\n            }\n        }\n    }\n    // --- end blinking logic\n    _updateDomClassName() {\n        this._domNode.setClassName(this._getClassName());\n    }\n    _getClassName() {\n        let result = 'cursors-layer';\n        if (!this._selectionIsEmpty) {\n            result += ' has-selection';\n        }\n        switch (this._cursorStyle) {\n            case TextEditorCursorStyle.Line:\n                result += ' cursor-line-style';\n                break;\n            case TextEditorCursorStyle.Block:\n                result += ' cursor-block-style';\n                break;\n            case TextEditorCursorStyle.Underline:\n                result += ' cursor-underline-style';\n                break;\n            case TextEditorCursorStyle.LineThin:\n                result += ' cursor-line-thin-style';\n                break;\n            case TextEditorCursorStyle.BlockOutline:\n                result += ' cursor-block-outline-style';\n                break;\n            case TextEditorCursorStyle.UnderlineThin:\n                result += ' cursor-underline-thin-style';\n                break;\n            default:\n                result += ' cursor-line-style';\n        }\n        if (this._blinkingEnabled) {\n            switch (this._getCursorBlinking()) {\n                case 1 /* TextEditorCursorBlinkingStyle.Blink */:\n                    result += ' cursor-blink';\n                    break;\n                case 2 /* TextEditorCursorBlinkingStyle.Smooth */:\n                    result += ' cursor-smooth';\n                    break;\n                case 3 /* TextEditorCursorBlinkingStyle.Phase */:\n                    result += ' cursor-phase';\n                    break;\n                case 4 /* TextEditorCursorBlinkingStyle.Expand */:\n                    result += ' cursor-expand';\n                    break;\n                case 5 /* TextEditorCursorBlinkingStyle.Solid */:\n                    result += ' cursor-solid';\n                    break;\n                default:\n                    result += ' cursor-solid';\n            }\n        }\n        else {\n            result += ' cursor-solid';\n        }\n        if (this._cursorSmoothCaretAnimation === 'on' || this._cursorSmoothCaretAnimation === 'explicit') {\n            result += ' cursor-smooth-caret-animation';\n        }\n        return result;\n    }\n    _show() {\n        this._primaryCursor.show();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].show();\n        }\n        this._isVisible = true;\n    }\n    _hide() {\n        this._primaryCursor.hide();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].hide();\n        }\n        this._isVisible = false;\n    }\n    // ---- IViewPart implementation\n    prepareRender(ctx) {\n        this._primaryCursor.prepareRender(ctx);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const renderData = [];\n        let renderDataLen = 0;\n        const primaryRenderData = this._primaryCursor.render(ctx);\n        if (primaryRenderData) {\n            renderData[renderDataLen++] = primaryRenderData;\n        }\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            const secondaryRenderData = this._secondaryCursors[i].render(ctx);\n            if (secondaryRenderData) {\n                renderData[renderDataLen++] = secondaryRenderData;\n            }\n        }\n        this._renderData = renderData;\n    }\n    getLastRenderData() {\n        return this._renderData;\n    }\n}\nViewCursors.BLINK_INTERVAL = 500;\nregisterThemingParticipant((theme, collector) => {\n    const caret = theme.getColor(editorCursorForeground);\n    if (caret) {\n        let caretBackground = theme.getColor(editorCursorBackground);\n        if (!caretBackground) {\n            caretBackground = caret.opposite();\n        }\n        collector.addRule(`.monaco-editor .cursors-layer .cursor { background-color: ${caret}; border-color: ${caret}; color: ${caretBackground}; }`);\n        if (isHighContrast(theme.type)) {\n            collector.addRule(`.monaco-editor .cursors-layer.has-selection .cursor { border-left: 1px solid ${caretBackground}; border-right: 1px solid ${caretBackground}; }`);\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\nexport class ViewZones extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName('view-zones');\n        this.domNode.setPosition('absolute');\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.marginDomNode = createFastDomNode(document.createElement('div'));\n        this.marginDomNode.setClassName('margin-view-zones');\n        this.marginDomNode.setPosition('absolute');\n        this.marginDomNode.setAttribute('role', 'presentation');\n        this.marginDomNode.setAttribute('aria-hidden', 'true');\n        this._zones = {};\n    }\n    dispose() {\n        super.dispose();\n        this._zones = {};\n    }\n    // ---- begin view event handlers\n    _recomputeWhitespacesProps() {\n        const whitespaces = this._context.viewLayout.getWhitespaces();\n        const oldWhitespaces = new Map();\n        for (const whitespace of whitespaces) {\n            oldWhitespaces.set(whitespace.id, whitespace);\n        }\n        let hadAChange = false;\n        this._context.viewModel.changeWhitespace((whitespaceAccessor) => {\n            const keys = Object.keys(this._zones);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const id = keys[i];\n                const zone = this._zones[id];\n                const props = this._computeWhitespaceProps(zone.delegate);\n                zone.isInHiddenArea = props.isInHiddenArea;\n                const oldWhitespace = oldWhitespaces.get(id);\n                if (oldWhitespace && (oldWhitespace.afterLineNumber !== props.afterViewLineNumber || oldWhitespace.height !== props.heightInPx)) {\n                    whitespaceAccessor.changeOneWhitespace(id, props.afterViewLineNumber, props.heightInPx);\n                    this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n                    hadAChange = true;\n                }\n            }\n        });\n        return hadAChange;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        if (e.hasChanged(64 /* EditorOption.lineHeight */)) {\n            this._recomputeWhitespacesProps();\n        }\n        return true;\n    }\n    onLineMappingChanged(e) {\n        return this._recomputeWhitespacesProps();\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    _getZoneOrdinal(zone) {\n        var _a, _b;\n        return (_b = (_a = zone.ordinal) !== null && _a !== void 0 ? _a : zone.afterColumn) !== null && _b !== void 0 ? _b : 10000;\n    }\n    _computeWhitespaceProps(zone) {\n        if (zone.afterLineNumber === 0) {\n            return {\n                isInHiddenArea: false,\n                afterViewLineNumber: 0,\n                heightInPx: this._heightInPixels(zone),\n                minWidthInPx: this._minWidthInPixels(zone)\n            };\n        }\n        let zoneAfterModelPosition;\n        if (typeof zone.afterColumn !== 'undefined') {\n            zoneAfterModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zone.afterLineNumber,\n                column: zone.afterColumn\n            });\n        }\n        else {\n            const validAfterLineNumber = this._context.viewModel.model.validatePosition({\n                lineNumber: zone.afterLineNumber,\n                column: 1\n            }).lineNumber;\n            zoneAfterModelPosition = new Position(validAfterLineNumber, this._context.viewModel.model.getLineMaxColumn(validAfterLineNumber));\n        }\n        let zoneBeforeModelPosition;\n        if (zoneAfterModelPosition.column === this._context.viewModel.model.getLineMaxColumn(zoneAfterModelPosition.lineNumber)) {\n            zoneBeforeModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zoneAfterModelPosition.lineNumber + 1,\n                column: 1\n            });\n        }\n        else {\n            zoneBeforeModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zoneAfterModelPosition.lineNumber,\n                column: zoneAfterModelPosition.column + 1\n            });\n        }\n        const viewPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(zoneAfterModelPosition, zone.afterColumnAffinity);\n        const isVisible = zone.showInHiddenAreas || this._context.viewModel.coordinatesConverter.modelPositionIsVisible(zoneBeforeModelPosition);\n        return {\n            isInHiddenArea: !isVisible,\n            afterViewLineNumber: viewPosition.lineNumber,\n            heightInPx: (isVisible ? this._heightInPixels(zone) : 0),\n            minWidthInPx: this._minWidthInPixels(zone)\n        };\n    }\n    changeViewZones(callback) {\n        let zonesHaveChanged = false;\n        this._context.viewModel.changeWhitespace((whitespaceAccessor) => {\n            const changeAccessor = {\n                addZone: (zone) => {\n                    zonesHaveChanged = true;\n                    return this._addZone(whitespaceAccessor, zone);\n                },\n                removeZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._removeZone(whitespaceAccessor, id) || zonesHaveChanged;\n                },\n                layoutZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._layoutZone(whitespaceAccessor, id) || zonesHaveChanged;\n                }\n            };\n            safeInvoke1Arg(callback, changeAccessor);\n            // Invalidate changeAccessor\n            changeAccessor.addZone = invalidFunc;\n            changeAccessor.removeZone = invalidFunc;\n            changeAccessor.layoutZone = invalidFunc;\n        });\n        return zonesHaveChanged;\n    }\n    _addZone(whitespaceAccessor, zone) {\n        const props = this._computeWhitespaceProps(zone);\n        const whitespaceId = whitespaceAccessor.insertWhitespace(props.afterViewLineNumber, this._getZoneOrdinal(zone), props.heightInPx, props.minWidthInPx);\n        const myZone = {\n            whitespaceId: whitespaceId,\n            delegate: zone,\n            isInHiddenArea: props.isInHiddenArea,\n            isVisible: false,\n            domNode: createFastDomNode(zone.domNode),\n            marginDomNode: zone.marginDomNode ? createFastDomNode(zone.marginDomNode) : null\n        };\n        this._safeCallOnComputedHeight(myZone.delegate, props.heightInPx);\n        myZone.domNode.setPosition('absolute');\n        myZone.domNode.domNode.style.width = '100%';\n        myZone.domNode.setDisplay('none');\n        myZone.domNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n        this.domNode.appendChild(myZone.domNode);\n        if (myZone.marginDomNode) {\n            myZone.marginDomNode.setPosition('absolute');\n            myZone.marginDomNode.domNode.style.width = '100%';\n            myZone.marginDomNode.setDisplay('none');\n            myZone.marginDomNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n            this.marginDomNode.appendChild(myZone.marginDomNode);\n        }\n        this._zones[myZone.whitespaceId] = myZone;\n        this.setShouldRender();\n        return myZone.whitespaceId;\n    }\n    _removeZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            delete this._zones[id];\n            whitespaceAccessor.removeWhitespace(zone.whitespaceId);\n            zone.domNode.removeAttribute('monaco-visible-view-zone');\n            zone.domNode.removeAttribute('monaco-view-zone');\n            zone.domNode.domNode.parentNode.removeChild(zone.domNode.domNode);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.removeAttribute('monaco-visible-view-zone');\n                zone.marginDomNode.removeAttribute('monaco-view-zone');\n                zone.marginDomNode.domNode.parentNode.removeChild(zone.marginDomNode.domNode);\n            }\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    _layoutZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            const props = this._computeWhitespaceProps(zone.delegate);\n            zone.isInHiddenArea = props.isInHiddenArea;\n            // const newOrdinal = this._getZoneOrdinal(zone.delegate);\n            whitespaceAccessor.changeOneWhitespace(zone.whitespaceId, props.afterViewLineNumber, props.heightInPx);\n            // TODO@Alex: change `newOrdinal` too\n            this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    shouldSuppressMouseDownOnViewZone(id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            return Boolean(zone.delegate.suppressMouseDown);\n        }\n        return false;\n    }\n    _heightInPixels(zone) {\n        if (typeof zone.heightInPx === 'number') {\n            return zone.heightInPx;\n        }\n        if (typeof zone.heightInLines === 'number') {\n            return this._lineHeight * zone.heightInLines;\n        }\n        return this._lineHeight;\n    }\n    _minWidthInPixels(zone) {\n        if (typeof zone.minWidthInPx === 'number') {\n            return zone.minWidthInPx;\n        }\n        return 0;\n    }\n    _safeCallOnComputedHeight(zone, height) {\n        if (typeof zone.onComputedHeight === 'function') {\n            try {\n                zone.onComputedHeight(height);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    _safeCallOnDomNodeTop(zone, top) {\n        if (typeof zone.onDomNodeTop === 'function') {\n            try {\n                zone.onDomNodeTop(top);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        const visibleWhitespaces = ctx.viewportData.whitespaceViewportData;\n        const visibleZones = {};\n        let hasVisibleZone = false;\n        for (const visibleWhitespace of visibleWhitespaces) {\n            if (this._zones[visibleWhitespace.id].isInHiddenArea) {\n                continue;\n            }\n            visibleZones[visibleWhitespace.id] = visibleWhitespace;\n            hasVisibleZone = true;\n        }\n        const keys = Object.keys(this._zones);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const id = keys[i];\n            const zone = this._zones[id];\n            let newTop = 0;\n            let newHeight = 0;\n            let newDisplay = 'none';\n            if (visibleZones.hasOwnProperty(id)) {\n                newTop = visibleZones[id].verticalOffset - ctx.bigNumbersDelta;\n                newHeight = visibleZones[id].height;\n                newDisplay = 'block';\n                // zone is visible\n                if (!zone.isVisible) {\n                    zone.domNode.setAttribute('monaco-visible-view-zone', 'true');\n                    zone.isVisible = true;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(visibleZones[id].verticalOffset));\n            }\n            else {\n                if (zone.isVisible) {\n                    zone.domNode.removeAttribute('monaco-visible-view-zone');\n                    zone.isVisible = false;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(-1000000));\n            }\n            zone.domNode.setTop(newTop);\n            zone.domNode.setHeight(newHeight);\n            zone.domNode.setDisplay(newDisplay);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.setTop(newTop);\n                zone.marginDomNode.setHeight(newHeight);\n                zone.marginDomNode.setDisplay(newDisplay);\n            }\n        }\n        if (hasVisibleZone) {\n            this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n            this.marginDomNode.setWidth(this._contentLeft);\n        }\n    }\n}\nfunction safeInvoke1Arg(func, arg1) {\n    try {\n        return func(arg1);\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport './blockDecorations.css';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class BlockDecorations extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.blocks = [];\n        this.contentWidth = -1;\n        this.contentLeft = 0;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.domNode.setClassName('blockDecorations-container');\n        this.update();\n    }\n    update() {\n        let didChange = false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        const newContentWidth = layoutInfo.contentWidth - layoutInfo.verticalScrollbarWidth;\n        if (this.contentWidth !== newContentWidth) {\n            this.contentWidth = newContentWidth;\n            didChange = true;\n        }\n        const newContentLeft = layoutInfo.contentLeft;\n        if (this.contentLeft !== newContentLeft) {\n            this.contentLeft = newContentLeft;\n            didChange = true;\n        }\n        return didChange;\n    }\n    dispose() {\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return this.update();\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollLeftChanged;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        var _a;\n        let count = 0;\n        const decorations = ctx.getDecorationsInViewport();\n        for (const decoration of decorations) {\n            if (!decoration.options.blockClassName) {\n                continue;\n            }\n            let block = this.blocks[count];\n            if (!block) {\n                block = this.blocks[count] = createFastDomNode(document.createElement('div'));\n                this.domNode.appendChild(block);\n            }\n            let top;\n            let bottom;\n            if (decoration.options.blockIsAfterEnd) {\n                // range must be empty\n                top = ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, false);\n                bottom = ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, true);\n            }\n            else {\n                top = ctx.getVerticalOffsetForLineNumber(decoration.range.startLineNumber, true);\n                bottom = decoration.range.isEmpty() && !decoration.options.blockDoesNotCollapse\n                    ? ctx.getVerticalOffsetForLineNumber(decoration.range.startLineNumber, false)\n                    : ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, true);\n            }\n            const [paddingTop, paddingRight, paddingBottom, paddingLeft] = (_a = decoration.options.blockPadding) !== null && _a !== void 0 ? _a : [0, 0, 0, 0];\n            block.setClassName('blockDecorations-block ' + decoration.options.blockClassName);\n            block.setLeft(this.contentLeft - paddingLeft);\n            block.setWidth(this.contentWidth + paddingLeft + paddingRight);\n            block.setTop(top - ctx.scrollTop - paddingTop);\n            block.setHeight(bottom - top + paddingTop + paddingBottom);\n            count++;\n        }\n        for (let i = count; i < this.blocks.length; i++) {\n            this.blocks[i].domNode.remove();\n        }\n        this.blocks.length = count;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './whitespace.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { LineRange } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorWhitespaces } from '../../../common/core/editorColorRegistry.js';\nexport class WhitespaceOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._options = new WhitespaceOptions(this._context.configuration);\n        this._selection = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const newOptions = new WhitespaceOptions(this._context.configuration);\n        if (this._options.equals(newOptions)) {\n            return e.hasChanged(140 /* EditorOption.layoutInfo */);\n        }\n        this._options = newOptions;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selection = e.selections;\n        if (this._options.renderWhitespace === 'selection') {\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._options.renderWhitespace === 'none') {\n            this._renderResult = null;\n            return;\n        }\n        const startLineNumber = ctx.visibleRange.startLineNumber;\n        const endLineNumber = ctx.visibleRange.endLineNumber;\n        const lineCount = endLineNumber - startLineNumber + 1;\n        const needed = new Array(lineCount);\n        for (let i = 0; i < lineCount; i++) {\n            needed[i] = true;\n        }\n        const viewportData = this._context.viewModel.getMinimapLinesRenderingData(ctx.viewportData.startLineNumber, ctx.viewportData.endLineNumber, needed);\n        this._renderResult = [];\n        for (let lineNumber = ctx.viewportData.startLineNumber; lineNumber <= ctx.viewportData.endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - ctx.viewportData.startLineNumber;\n            const lineData = viewportData.data[lineIndex];\n            let selectionsOnLine = null;\n            if (this._options.renderWhitespace === 'selection') {\n                const selections = this._selection;\n                for (const selection of selections) {\n                    if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                        // Selection does not intersect line\n                        continue;\n                    }\n                    const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                    const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                    if (startColumn < endColumn) {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n            this._renderResult[lineIndex] = this._applyRenderWhitespace(ctx, lineNumber, selectionsOnLine, lineData);\n        }\n    }\n    _applyRenderWhitespace(ctx, lineNumber, selections, lineData) {\n        if (this._options.renderWhitespace === 'selection' && !selections) {\n            return '';\n        }\n        if (this._options.renderWhitespace === 'trailing' && lineData.continuesWithWrappedLine) {\n            return '';\n        }\n        const color = this._context.theme.getColor(editorWhitespaces);\n        const USE_SVG = this._options.renderWithSVG;\n        const lineContent = lineData.content;\n        const len = (this._options.stopRenderingLineAfter === -1 ? lineContent.length : Math.min(this._options.stopRenderingLineAfter, lineContent.length));\n        const continuesWithWrappedLine = lineData.continuesWithWrappedLine;\n        const fauxIndentLength = lineData.minColumn - 1;\n        const onlyBoundary = (this._options.renderWhitespace === 'boundary');\n        const onlyTrailing = (this._options.renderWhitespace === 'trailing');\n        const lineHeight = this._options.lineHeight;\n        const middotWidth = this._options.middotWidth;\n        const wsmiddotWidth = this._options.wsmiddotWidth;\n        const spaceWidth = this._options.spaceWidth;\n        const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n        const middotDiff = Math.abs(middotWidth - spaceWidth);\n        // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        // U+00B7 - MIDDLE DOT\n        const renderSpaceCharCode = (wsmiddotDiff < middotDiff ? 0x2E31 : 0xB7);\n        const canUseHalfwidthRightwardsArrow = this._options.canUseHalfwidthRightwardsArrow;\n        let result = '';\n        let lineIsEmptyOrWhitespace = false;\n        let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n        let lastNonWhitespaceIndex;\n        if (firstNonWhitespaceIndex === -1) {\n            lineIsEmptyOrWhitespace = true;\n            firstNonWhitespaceIndex = len;\n            lastNonWhitespaceIndex = len;\n        }\n        else {\n            lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n        }\n        let currentSelectionIndex = 0;\n        let currentSelection = selections && selections[currentSelectionIndex];\n        let maxLeft = 0;\n        for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n            const chCode = lineContent.charCodeAt(charIndex);\n            if (currentSelection && charIndex >= currentSelection.endOffset) {\n                currentSelectionIndex++;\n                currentSelection = selections && selections[currentSelectionIndex];\n            }\n            if (chCode !== 9 /* CharCode.Tab */ && chCode !== 32 /* CharCode.Space */) {\n                continue;\n            }\n            if (onlyTrailing && !lineIsEmptyOrWhitespace && charIndex <= lastNonWhitespaceIndex) {\n                // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n                continue;\n            }\n            if (onlyBoundary && charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex && chCode === 32 /* CharCode.Space */) {\n                // rendering only boundary whitespace\n                const prevChCode = (charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */);\n                const nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n                if (prevChCode !== 32 /* CharCode.Space */ && nextChCode !== 32 /* CharCode.Space */) {\n                    continue;\n                }\n            }\n            if (onlyBoundary && continuesWithWrappedLine && charIndex === len - 1) {\n                const prevCharCode = (charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */);\n                const isSingleTrailingSpace = (chCode === 32 /* CharCode.Space */ && (prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */));\n                if (isSingleTrailingSpace) {\n                    continue;\n                }\n            }\n            if (selections && (!currentSelection || currentSelection.startOffset > charIndex || currentSelection.endOffset <= charIndex)) {\n                // If rendering whitespace on selection, check that the charIndex falls within a selection\n                continue;\n            }\n            const visibleRange = ctx.visibleRangeForPosition(new Position(lineNumber, charIndex + 1));\n            if (!visibleRange) {\n                continue;\n            }\n            if (USE_SVG) {\n                maxLeft = Math.max(maxLeft, visibleRange.left);\n                if (chCode === 9 /* CharCode.Tab */) {\n                    result += this._renderArrow(lineHeight, spaceWidth, visibleRange.left);\n                }\n                else {\n                    result += `<circle cx=\"${(visibleRange.left + spaceWidth / 2).toFixed(2)}\" cy=\"${(lineHeight / 2).toFixed(2)}\" r=\"${(spaceWidth / 7).toFixed(2)}\" />`;\n                }\n            }\n            else {\n                if (chCode === 9 /* CharCode.Tab */) {\n                    result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${canUseHalfwidthRightwardsArrow ? String.fromCharCode(0xFFEB) : String.fromCharCode(0x2192)}</div>`;\n                }\n                else {\n                    result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${String.fromCharCode(renderSpaceCharCode)}</div>`;\n                }\n            }\n        }\n        if (USE_SVG) {\n            maxLeft = Math.round(maxLeft + spaceWidth);\n            return (`<svg style=\"position:absolute;width:${maxLeft}px;height:${lineHeight}px\" viewBox=\"0 0 ${maxLeft} ${lineHeight}\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"${color}\">`\n                + result\n                + `</svg>`);\n        }\n        return result;\n    }\n    _renderArrow(lineHeight, spaceWidth, left) {\n        const strokeWidth = spaceWidth / 7;\n        const width = spaceWidth;\n        const dy = lineHeight / 2;\n        const dx = left;\n        const p1 = { x: 0, y: strokeWidth / 2 };\n        const p2 = { x: 100 / 125 * width, y: p1.y };\n        const p3 = { x: p2.x - 0.2 * p2.x, y: p2.y + 0.2 * p2.x };\n        const p4 = { x: p3.x + 0.1 * p2.x, y: p3.y + 0.1 * p2.x };\n        const p5 = { x: p4.x + 0.35 * p2.x, y: p4.y - 0.35 * p2.x };\n        const p6 = { x: p5.x, y: -p5.y };\n        const p7 = { x: p4.x, y: -p4.y };\n        const p8 = { x: p3.x, y: -p3.y };\n        const p9 = { x: p2.x, y: -p2.y };\n        const p10 = { x: p1.x, y: -p1.y };\n        const p = [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10];\n        const parts = p.map((p) => `${(dx + p.x).toFixed(2)} ${(dy + p.y).toFixed(2)}`).join(' L ');\n        return `<path d=\"M ${parts}\" />`;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nclass WhitespaceOptions {\n    constructor(config) {\n        const options = config.options;\n        const fontInfo = options.get(48 /* EditorOption.fontInfo */);\n        const experimentalWhitespaceRendering = options.get(36 /* EditorOption.experimentalWhitespaceRendering */);\n        if (experimentalWhitespaceRendering === 'off') {\n            // whitespace is rendered in the view line\n            this.renderWhitespace = 'none';\n            this.renderWithSVG = false;\n        }\n        else if (experimentalWhitespaceRendering === 'svg') {\n            this.renderWhitespace = options.get(95 /* EditorOption.renderWhitespace */);\n            this.renderWithSVG = true;\n        }\n        else {\n            this.renderWhitespace = options.get(95 /* EditorOption.renderWhitespace */);\n            this.renderWithSVG = false;\n        }\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this.stopRenderingLineAfter = options.get(113 /* EditorOption.stopRenderingLineAfter */);\n    }\n    equals(other) {\n        return (this.renderWhitespace === other.renderWhitespace\n            && this.renderWithSVG === other.renderWithSVG\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../base/browser/dom.js';\nimport { Selection } from '../common/core/selection.js';\nimport { createFastDomNode } from '../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../base/common/errors.js';\nimport { PointerHandler } from './controller/pointerHandler.js';\nimport { TextAreaHandler } from './controller/textAreaHandler.js';\nimport { ViewController } from './view/viewController.js';\nimport { ViewUserInputEvents } from './view/viewUserInputEvents.js';\nimport { ContentViewOverlays, MarginViewOverlays } from './view/viewOverlays.js';\nimport { PartFingerprints } from './view/viewPart.js';\nimport { ViewContentWidgets } from './viewParts/contentWidgets/contentWidgets.js';\nimport { CurrentLineHighlightOverlay, CurrentLineMarginHighlightOverlay } from './viewParts/currentLineHighlight/currentLineHighlight.js';\nimport { DecorationsOverlay } from './viewParts/decorations/decorations.js';\nimport { EditorScrollbar } from './viewParts/editorScrollbar/editorScrollbar.js';\nimport { GlyphMarginOverlay } from './viewParts/glyphMargin/glyphMargin.js';\nimport { IndentGuidesOverlay } from './viewParts/indentGuides/indentGuides.js';\nimport { LineNumbersOverlay } from './viewParts/lineNumbers/lineNumbers.js';\nimport { ViewLines } from './viewParts/lines/viewLines.js';\nimport { LinesDecorationsOverlay } from './viewParts/linesDecorations/linesDecorations.js';\nimport { Margin } from './viewParts/margin/margin.js';\nimport { MarginViewLineDecorationsOverlay } from './viewParts/marginDecorations/marginDecorations.js';\nimport { Minimap } from './viewParts/minimap/minimap.js';\nimport { ViewOverlayWidgets } from './viewParts/overlayWidgets/overlayWidgets.js';\nimport { DecorationsOverviewRuler } from './viewParts/overviewRuler/decorationsOverviewRuler.js';\nimport { OverviewRuler } from './viewParts/overviewRuler/overviewRuler.js';\nimport { Rulers } from './viewParts/rulers/rulers.js';\nimport { ScrollDecorationViewPart } from './viewParts/scrollDecoration/scrollDecoration.js';\nimport { SelectionsOverlay } from './viewParts/selections/selections.js';\nimport { ViewCursors } from './viewParts/viewCursors/viewCursors.js';\nimport { ViewZones } from './viewParts/viewZones/viewZones.js';\nimport { Position } from '../common/core/position.js';\nimport { RenderingContext } from './view/renderingContext.js';\nimport { ViewContext } from '../common/viewModel/viewContext.js';\nimport { ViewportData } from '../common/viewLayout/viewLinesViewportData.js';\nimport { ViewEventHandler } from '../common/viewEventHandler.js';\nimport { getThemeTypeSelector } from '../../platform/theme/common/themeService.js';\nimport { PointerHandlerLastRenderData } from './controller/mouseTarget.js';\nimport { BlockDecorations } from './viewParts/blockDecorations/blockDecorations.js';\nimport { inputLatency } from '../../base/browser/performance.js';\nimport { WhitespaceOverlay } from './viewParts/whitespace/whitespace.js';\nexport class View extends ViewEventHandler {\n    constructor(commandDelegate, configuration, colorTheme, model, userInputEvents, overflowWidgetsDomNode) {\n        super();\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderAnimationFrame = null;\n        const viewController = new ViewController(configuration, model, userInputEvents, commandDelegate);\n        // The view context is passed on to most classes (basically to reduce param. counts in ctors)\n        this._context = new ViewContext(configuration, colorTheme, model);\n        // Ensure the view is the first event handler in order to update the layout\n        this._context.addEventHandler(this);\n        this._viewParts = [];\n        // Keyboard handler\n        this._textAreaHandler = new TextAreaHandler(this._context, viewController, this._createTextAreaHandlerHelper());\n        this._viewParts.push(this._textAreaHandler);\n        // These two dom nodes must be constructed up front, since references are needed in the layout provider (scrolling & co.)\n        this._linesContent = createFastDomNode(document.createElement('div'));\n        this._linesContent.setClassName('lines-content' + ' monaco-editor-background');\n        this._linesContent.setPosition('absolute');\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName(this._getEditorClassName());\n        // Set role 'code' for better screen reader support https://github.com/microsoft/vscode/issues/93438\n        this.domNode.setAttribute('role', 'code');\n        this._overflowGuardContainer = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._overflowGuardContainer, 3 /* PartFingerprint.OverflowGuard */);\n        this._overflowGuardContainer.setClassName('overflow-guard');\n        this._scrollbar = new EditorScrollbar(this._context, this._linesContent, this.domNode, this._overflowGuardContainer);\n        this._viewParts.push(this._scrollbar);\n        // View Lines\n        this._viewLines = new ViewLines(this._context, this._linesContent);\n        // View Zones\n        this._viewZones = new ViewZones(this._context);\n        this._viewParts.push(this._viewZones);\n        // Decorations overview ruler\n        const decorationsOverviewRuler = new DecorationsOverviewRuler(this._context);\n        this._viewParts.push(decorationsOverviewRuler);\n        const scrollDecoration = new ScrollDecorationViewPart(this._context);\n        this._viewParts.push(scrollDecoration);\n        const contentViewOverlays = new ContentViewOverlays(this._context);\n        this._viewParts.push(contentViewOverlays);\n        contentViewOverlays.addDynamicOverlay(new CurrentLineHighlightOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new SelectionsOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new IndentGuidesOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new DecorationsOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new WhitespaceOverlay(this._context));\n        const marginViewOverlays = new MarginViewOverlays(this._context);\n        this._viewParts.push(marginViewOverlays);\n        marginViewOverlays.addDynamicOverlay(new CurrentLineMarginHighlightOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new GlyphMarginOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new MarginViewLineDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LinesDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LineNumbersOverlay(this._context));\n        const margin = new Margin(this._context);\n        margin.getDomNode().appendChild(this._viewZones.marginDomNode);\n        margin.getDomNode().appendChild(marginViewOverlays.getDomNode());\n        this._viewParts.push(margin);\n        // Content widgets\n        this._contentWidgets = new ViewContentWidgets(this._context, this.domNode);\n        this._viewParts.push(this._contentWidgets);\n        this._viewCursors = new ViewCursors(this._context);\n        this._viewParts.push(this._viewCursors);\n        // Overlay widgets\n        this._overlayWidgets = new ViewOverlayWidgets(this._context);\n        this._viewParts.push(this._overlayWidgets);\n        const rulers = new Rulers(this._context);\n        this._viewParts.push(rulers);\n        const blockOutline = new BlockDecorations(this._context);\n        this._viewParts.push(blockOutline);\n        const minimap = new Minimap(this._context);\n        this._viewParts.push(minimap);\n        // -------------- Wire dom nodes up\n        if (decorationsOverviewRuler) {\n            const overviewRulerData = this._scrollbar.getOverviewRulerLayoutInfo();\n            overviewRulerData.parent.insertBefore(decorationsOverviewRuler.getDomNode(), overviewRulerData.insertBefore);\n        }\n        this._linesContent.appendChild(contentViewOverlays.getDomNode());\n        this._linesContent.appendChild(rulers.domNode);\n        this._linesContent.appendChild(this._viewZones.domNode);\n        this._linesContent.appendChild(this._viewLines.getDomNode());\n        this._linesContent.appendChild(this._contentWidgets.domNode);\n        this._linesContent.appendChild(this._viewCursors.getDomNode());\n        this._overflowGuardContainer.appendChild(margin.getDomNode());\n        this._overflowGuardContainer.appendChild(this._scrollbar.getDomNode());\n        this._overflowGuardContainer.appendChild(scrollDecoration.getDomNode());\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textArea);\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textAreaCover);\n        this._overflowGuardContainer.appendChild(this._overlayWidgets.getDomNode());\n        this._overflowGuardContainer.appendChild(minimap.getDomNode());\n        this._overflowGuardContainer.appendChild(blockOutline.domNode);\n        this.domNode.appendChild(this._overflowGuardContainer);\n        if (overflowWidgetsDomNode) {\n            overflowWidgetsDomNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode.domNode);\n        }\n        else {\n            this.domNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode);\n        }\n        this._applyLayout();\n        // Pointer handler\n        this._pointerHandler = this._register(new PointerHandler(this._context, viewController, this._createPointerHandlerHelper()));\n    }\n    _flushAccumulatedAndRenderNow() {\n        inputLatency.onRenderStart();\n        this._renderNow();\n    }\n    _createPointerHandlerHelper() {\n        return {\n            viewDomNode: this.domNode.domNode,\n            linesContentDomNode: this._linesContent.domNode,\n            viewLinesDomNode: this._viewLines.getDomNode().domNode,\n            focusTextArea: () => {\n                this.focus();\n            },\n            dispatchTextAreaEvent: (event) => {\n                this._textAreaHandler.textArea.domNode.dispatchEvent(event);\n            },\n            getLastRenderData: () => {\n                const lastViewCursorsRenderData = this._viewCursors.getLastRenderData() || [];\n                const lastTextareaPosition = this._textAreaHandler.getLastRenderData();\n                return new PointerHandlerLastRenderData(lastViewCursorsRenderData, lastTextareaPosition);\n            },\n            renderNow: () => {\n                this.render(true, false);\n            },\n            shouldSuppressMouseDownOnViewZone: (viewZoneId) => {\n                return this._viewZones.shouldSuppressMouseDownOnViewZone(viewZoneId);\n            },\n            shouldSuppressMouseDownOnWidget: (widgetId) => {\n                return this._contentWidgets.shouldSuppressMouseDownOnWidget(widgetId);\n            },\n            getPositionFromDOMInfo: (spanNode, offset) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getPositionFromDOMInfo(spanNode, offset);\n            },\n            visibleRangeForPosition: (lineNumber, column) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(new Position(lineNumber, column));\n            },\n            getLineWidth: (lineNumber) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getLineWidth(lineNumber);\n            }\n        };\n    }\n    _createTextAreaHandlerHelper() {\n        return {\n            visibleRangeForPosition: (position) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(position);\n            }\n        };\n    }\n    _applyLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this.domNode.setWidth(layoutInfo.width);\n        this.domNode.setHeight(layoutInfo.height);\n        this._overflowGuardContainer.setWidth(layoutInfo.width);\n        this._overflowGuardContainer.setHeight(layoutInfo.height);\n        this._linesContent.setWidth(1000000);\n        this._linesContent.setHeight(1000000);\n    }\n    _getEditorClassName() {\n        const focused = this._textAreaHandler.isFocused() ? ' focused' : '';\n        return this._context.configuration.options.get(137 /* EditorOption.editorClassName */) + ' ' + getThemeTypeSelector(this._context.theme.type) + focused;\n    }\n    // --- begin event handlers\n    handleEvents(events) {\n        super.handleEvents(events);\n        this._scheduleRender();\n    }\n    onConfigurationChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        this._applyLayout();\n        return false;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return false;\n    }\n    onFocusChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    onThemeChanged(e) {\n        this._context.theme.update(e.theme);\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    // --- end event handlers\n    dispose() {\n        if (this._renderAnimationFrame !== null) {\n            this._renderAnimationFrame.dispose();\n            this._renderAnimationFrame = null;\n        }\n        this._contentWidgets.overflowingContentWidgetsDomNode.domNode.remove();\n        this._context.removeEventHandler(this);\n        this._viewLines.dispose();\n        // Destroy view parts\n        for (const viewPart of this._viewParts) {\n            viewPart.dispose();\n        }\n        super.dispose();\n    }\n    _scheduleRender() {\n        if (this._renderAnimationFrame === null) {\n            this._renderAnimationFrame = dom.runAtThisOrScheduleAtNextAnimationFrame(this._onRenderScheduled.bind(this), 100);\n        }\n    }\n    _onRenderScheduled() {\n        this._renderAnimationFrame = null;\n        this._flushAccumulatedAndRenderNow();\n    }\n    _renderNow() {\n        safeInvokeNoArg(() => this._actualRender());\n    }\n    _getViewPartsToRender() {\n        const result = [];\n        let resultLen = 0;\n        for (const viewPart of this._viewParts) {\n            if (viewPart.shouldRender()) {\n                result[resultLen++] = viewPart;\n            }\n        }\n        return result;\n    }\n    _actualRender() {\n        if (!dom.isInDOM(this.domNode.domNode)) {\n            return;\n        }\n        let viewPartsToRender = this._getViewPartsToRender();\n        if (!this._viewLines.shouldRender() && viewPartsToRender.length === 0) {\n            // Nothing to render\n            return;\n        }\n        const partialViewportData = this._context.viewLayout.getLinesViewportData();\n        this._context.viewModel.setViewport(partialViewportData.startLineNumber, partialViewportData.endLineNumber, partialViewportData.centeredLineNumber);\n        const viewportData = new ViewportData(this._selections, partialViewportData, this._context.viewLayout.getWhitespaceViewportData(), this._context.viewModel);\n        if (this._contentWidgets.shouldRender()) {\n            // Give the content widgets a chance to set their max width before a possible synchronous layout\n            this._contentWidgets.onBeforeRender(viewportData);\n        }\n        if (this._viewLines.shouldRender()) {\n            this._viewLines.renderText(viewportData);\n            this._viewLines.onDidRender();\n            // Rendering of viewLines might cause scroll events to occur, so collect view parts to render again\n            viewPartsToRender = this._getViewPartsToRender();\n        }\n        const renderingContext = new RenderingContext(this._context.viewLayout, viewportData, this._viewLines);\n        // Render the rest of the parts\n        for (const viewPart of viewPartsToRender) {\n            viewPart.prepareRender(renderingContext);\n        }\n        for (const viewPart of viewPartsToRender) {\n            viewPart.render(renderingContext);\n            viewPart.onDidRender();\n        }\n    }\n    // --- BEGIN CodeEditor helpers\n    delegateVerticalScrollbarPointerDown(browserEvent) {\n        this._scrollbar.delegateVerticalScrollbarPointerDown(browserEvent);\n    }\n    delegateScrollFromMouseWheelEvent(browserEvent) {\n        this._scrollbar.delegateScrollFromMouseWheelEvent(browserEvent);\n    }\n    restoreState(scrollPosition) {\n        this._context.viewModel.viewLayout.setScrollPosition({\n            scrollTop: scrollPosition.scrollTop,\n            scrollLeft: scrollPosition.scrollLeft\n        }, 1 /* ScrollType.Immediate */);\n        this._context.viewModel.visibleLinesStabilized();\n    }\n    getOffsetForColumn(modelLineNumber, modelColumn) {\n        const modelPosition = this._context.viewModel.model.validatePosition({\n            lineNumber: modelLineNumber,\n            column: modelColumn\n        });\n        const viewPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        this._flushAccumulatedAndRenderNow();\n        const visibleRange = this._viewLines.visibleRangeForPosition(new Position(viewPosition.lineNumber, viewPosition.column));\n        if (!visibleRange) {\n            return -1;\n        }\n        return visibleRange.left;\n    }\n    getTargetAtClientPoint(clientX, clientY) {\n        const mouseTarget = this._pointerHandler.getTargetAtClientPoint(clientX, clientY);\n        if (!mouseTarget) {\n            return null;\n        }\n        return ViewUserInputEvents.convertViewToModelMouseTarget(mouseTarget, this._context.viewModel.coordinatesConverter);\n    }\n    createOverviewRuler(cssClassName) {\n        return new OverviewRuler(this._context, cssClassName);\n    }\n    change(callback) {\n        this._viewZones.changeViewZones(callback);\n        this._scheduleRender();\n    }\n    render(now, everything) {\n        if (everything) {\n            // Force everything to render...\n            this._viewLines.forceShouldRender();\n            for (const viewPart of this._viewParts) {\n                viewPart.forceShouldRender();\n            }\n        }\n        if (now) {\n            this._flushAccumulatedAndRenderNow();\n        }\n        else {\n            this._scheduleRender();\n        }\n    }\n    writeScreenReaderContent(reason) {\n        this._textAreaHandler.writeScreenReaderContent(reason);\n    }\n    focus() {\n        this._textAreaHandler.focusTextArea();\n    }\n    isFocused() {\n        return this._textAreaHandler.isFocused();\n    }\n    setAriaOptions(options) {\n        this._textAreaHandler.setAriaOptions(options);\n    }\n    addContentWidget(widgetData) {\n        this._contentWidgets.addWidget(widgetData.widget);\n        this.layoutContentWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutContentWidget(widgetData) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        this._contentWidgets.setWidgetPosition(widgetData.widget, (_b = (_a = widgetData.position) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : null, (_d = (_c = widgetData.position) === null || _c === void 0 ? void 0 : _c.secondaryPosition) !== null && _d !== void 0 ? _d : null, (_f = (_e = widgetData.position) === null || _e === void 0 ? void 0 : _e.preference) !== null && _f !== void 0 ? _f : null, (_h = (_g = widgetData.position) === null || _g === void 0 ? void 0 : _g.positionAffinity) !== null && _h !== void 0 ? _h : null);\n        this._scheduleRender();\n    }\n    removeContentWidget(widgetData) {\n        this._contentWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n    addOverlayWidget(widgetData) {\n        this._overlayWidgets.addWidget(widgetData.widget);\n        this.layoutOverlayWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutOverlayWidget(widgetData) {\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\n        const shouldRender = this._overlayWidgets.setWidgetPosition(widgetData.widget, newPreference);\n        if (shouldRender) {\n            this._scheduleRender();\n        }\n    }\n    removeOverlayWidget(widgetData) {\n        this._overlayWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n}\nfunction safeInvokeNoArg(func) {\n    try {\n        return func();\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { StringBuilder } from '../../common/core/stringBuilder.js';\nimport { ModelLineProjectionData } from '../../common/modelLineProjectionData.js';\nimport { LineInjectedText } from '../../common/textModelEvents.js';\nconst ttPolicy = createTrustedTypesPolicy('domLineBreaksComputer', { createHTML: value => value });\nexport class DOMLineBreaksComputerFactory {\n    static create() {\n        return new DOMLineBreaksComputerFactory();\n    }\n    constructor() {\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak) {\n        const requests = [];\n        const injectedTexts = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n            },\n            finalize: () => {\n                return createLineBreaks(requests, fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak, injectedTexts);\n            }\n        };\n    }\n}\nfunction createLineBreaks(requests, fontInfo, tabSize, firstLineBreakColumn, wrappingIndent, wordBreak, injectedTextsPerLine) {\n    var _a;\n    function createEmptyLineBreakWithPossiblyInjectedText(requestIdx) {\n        const injectedTexts = injectedTextsPerLine[requestIdx];\n        if (injectedTexts) {\n            const lineText = LineInjectedText.applyInjectedText(requests[requestIdx], injectedTexts);\n            const injectionOptions = injectedTexts.map(t => t.options);\n            const injectionOffsets = injectedTexts.map(text => text.column - 1);\n            // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n            // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n            return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n        }\n        else {\n            return null;\n        }\n    }\n    if (firstLineBreakColumn === -1) {\n        const result = [];\n        for (let i = 0, len = requests.length; i < len; i++) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n        }\n        return result;\n    }\n    const overallWidth = Math.round(firstLineBreakColumn * fontInfo.typicalHalfwidthCharacterWidth);\n    const additionalIndent = (wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0);\n    const additionalIndentSize = Math.round(tabSize * additionalIndent);\n    const additionalIndentLength = Math.ceil(fontInfo.spaceWidth * additionalIndentSize);\n    const containerDomNode = document.createElement('div');\n    applyFontInfo(containerDomNode, fontInfo);\n    const sb = new StringBuilder(10000);\n    const firstNonWhitespaceIndices = [];\n    const wrappedTextIndentLengths = [];\n    const renderLineContents = [];\n    const allCharOffsets = [];\n    const allVisibleColumns = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineContent = LineInjectedText.applyInjectedText(requests[i], injectedTextsPerLine[i]);\n        let firstNonWhitespaceIndex = 0;\n        let wrappedTextIndentLength = 0;\n        let width = overallWidth;\n        if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n            firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n            if (firstNonWhitespaceIndex === -1) {\n                // all whitespace line\n                firstNonWhitespaceIndex = 0;\n            }\n            else {\n                // Track existing indent\n                for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                    const charWidth = (lineContent.charCodeAt(i) === 9 /* CharCode.Tab */\n                        ? (tabSize - (wrappedTextIndentLength % tabSize))\n                        : 1);\n                    wrappedTextIndentLength += charWidth;\n                }\n                const indentWidth = Math.ceil(fontInfo.spaceWidth * wrappedTextIndentLength);\n                // Force sticking to beginning of line if no character would fit except for the indentation\n                if (indentWidth + fontInfo.typicalFullwidthCharacterWidth > overallWidth) {\n                    firstNonWhitespaceIndex = 0;\n                    wrappedTextIndentLength = 0;\n                }\n                else {\n                    width = overallWidth - indentWidth;\n                }\n            }\n        }\n        const renderLineContent = lineContent.substr(firstNonWhitespaceIndex);\n        const tmp = renderLine(renderLineContent, wrappedTextIndentLength, tabSize, width, sb, additionalIndentLength);\n        firstNonWhitespaceIndices[i] = firstNonWhitespaceIndex;\n        wrappedTextIndentLengths[i] = wrappedTextIndentLength;\n        renderLineContents[i] = renderLineContent;\n        allCharOffsets[i] = tmp[0];\n        allVisibleColumns[i] = tmp[1];\n    }\n    const html = sb.build();\n    const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(html)) !== null && _a !== void 0 ? _a : html;\n    containerDomNode.innerHTML = trustedhtml;\n    containerDomNode.style.position = 'absolute';\n    containerDomNode.style.top = '10000';\n    if (wordBreak === 'keepAll') {\n        // word-break: keep-all; overflow-wrap: anywhere\n        containerDomNode.style.wordBreak = 'keep-all';\n        containerDomNode.style.overflowWrap = 'anywhere';\n    }\n    else {\n        // overflow-wrap: break-word\n        containerDomNode.style.wordBreak = 'inherit';\n        containerDomNode.style.overflowWrap = 'break-word';\n    }\n    document.body.appendChild(containerDomNode);\n    const range = document.createRange();\n    const lineDomNodes = Array.prototype.slice.call(containerDomNode.children, 0);\n    const result = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineDomNode = lineDomNodes[i];\n        const breakOffsets = readLineBreaks(range, lineDomNode, renderLineContents[i], allCharOffsets[i]);\n        if (breakOffsets === null) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n            continue;\n        }\n        const firstNonWhitespaceIndex = firstNonWhitespaceIndices[i];\n        const wrappedTextIndentLength = wrappedTextIndentLengths[i] + additionalIndentSize;\n        const visibleColumns = allVisibleColumns[i];\n        const breakOffsetsVisibleColumn = [];\n        for (let j = 0, len = breakOffsets.length; j < len; j++) {\n            breakOffsetsVisibleColumn[j] = visibleColumns[breakOffsets[j]];\n        }\n        if (firstNonWhitespaceIndex !== 0) {\n            // All break offsets are relative to the renderLineContent, make them absolute again\n            for (let j = 0, len = breakOffsets.length; j < len; j++) {\n                breakOffsets[j] += firstNonWhitespaceIndex;\n            }\n        }\n        let injectionOptions;\n        let injectionOffsets;\n        const curInjectedTexts = injectedTextsPerLine[i];\n        if (curInjectedTexts) {\n            injectionOptions = curInjectedTexts.map(t => t.options);\n            injectionOffsets = curInjectedTexts.map(text => text.column - 1);\n        }\n        else {\n            injectionOptions = null;\n            injectionOffsets = null;\n        }\n        result[i] = new ModelLineProjectionData(injectionOffsets, injectionOptions, breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength);\n    }\n    document.body.removeChild(containerDomNode);\n    return result;\n}\nfunction renderLine(lineContent, initialVisibleColumn, tabSize, width, sb, wrappingIndentLength) {\n    if (wrappingIndentLength !== 0) {\n        const hangingOffset = String(wrappingIndentLength);\n        sb.appendString('<div style=\"text-indent: -');\n        sb.appendString(hangingOffset);\n        sb.appendString('px; padding-left: ');\n        sb.appendString(hangingOffset);\n        sb.appendString('px; box-sizing: border-box; width:');\n    }\n    else {\n        sb.appendString('<div style=\"width:');\n    }\n    sb.appendString(String(width));\n    sb.appendString('px;\">');\n    // if (containsRTL) {\n    // \tsb.appendASCIIString('\" dir=\"ltr');\n    // }\n    const len = lineContent.length;\n    let visibleColumn = initialVisibleColumn;\n    let charOffset = 0;\n    const charOffsets = [];\n    const visibleColumns = [];\n    let nextCharCode = (0 < len ? lineContent.charCodeAt(0) : 0 /* CharCode.Null */);\n    sb.appendString('<span>');\n    for (let charIndex = 0; charIndex < len; charIndex++) {\n        if (charIndex !== 0 && charIndex % 16384 /* Constants.SPAN_MODULO_LIMIT */ === 0) {\n            sb.appendString('</span><span>');\n        }\n        charOffsets[charIndex] = charOffset;\n        visibleColumns[charIndex] = visibleColumn;\n        const charCode = nextCharCode;\n        nextCharCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n        let producedCharacters = 1;\n        let charWidth = 1;\n        switch (charCode) {\n            case 9 /* CharCode.Tab */:\n                producedCharacters = (tabSize - (visibleColumn % tabSize));\n                charWidth = producedCharacters;\n                for (let space = 1; space <= producedCharacters; space++) {\n                    if (space < producedCharacters) {\n                        sb.appendCharCode(0xA0); // &nbsp;\n                    }\n                    else {\n                        sb.appendASCIICharCode(32 /* CharCode.Space */);\n                    }\n                }\n                break;\n            case 32 /* CharCode.Space */:\n                if (nextCharCode === 32 /* CharCode.Space */) {\n                    sb.appendCharCode(0xA0); // &nbsp;\n                }\n                else {\n                    sb.appendASCIICharCode(32 /* CharCode.Space */);\n                }\n                break;\n            case 60 /* CharCode.LessThan */:\n                sb.appendString('&lt;');\n                break;\n            case 62 /* CharCode.GreaterThan */:\n                sb.appendString('&gt;');\n                break;\n            case 38 /* CharCode.Ampersand */:\n                sb.appendString('&amp;');\n                break;\n            case 0 /* CharCode.Null */:\n                sb.appendString('&#00;');\n                break;\n            case 65279 /* CharCode.UTF8_BOM */:\n            case 8232 /* CharCode.LINE_SEPARATOR */:\n            case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n            case 133 /* CharCode.NEXT_LINE */:\n                sb.appendCharCode(0xFFFD);\n                break;\n            default:\n                if (strings.isFullWidthCharacter(charCode)) {\n                    charWidth++;\n                }\n                if (charCode < 32) {\n                    sb.appendCharCode(9216 + charCode);\n                }\n                else {\n                    sb.appendCharCode(charCode);\n                }\n        }\n        charOffset += producedCharacters;\n        visibleColumn += charWidth;\n    }\n    sb.appendString('</span>');\n    charOffsets[lineContent.length] = charOffset;\n    visibleColumns[lineContent.length] = visibleColumn;\n    sb.appendString('</div>');\n    return [charOffsets, visibleColumns];\n}\nfunction readLineBreaks(range, lineDomNode, lineContent, charOffsets) {\n    if (lineContent.length <= 1) {\n        return null;\n    }\n    const spans = Array.prototype.slice.call(lineDomNode.children, 0);\n    const breakOffsets = [];\n    try {\n        discoverBreaks(range, spans, charOffsets, 0, null, lineContent.length - 1, null, breakOffsets);\n    }\n    catch (err) {\n        console.log(err);\n        return null;\n    }\n    if (breakOffsets.length === 0) {\n        return null;\n    }\n    breakOffsets.push(lineContent.length);\n    return breakOffsets;\n}\nfunction discoverBreaks(range, spans, charOffsets, low, lowRects, high, highRects, result) {\n    if (low === high) {\n        return;\n    }\n    lowRects = lowRects || readClientRect(range, spans, charOffsets[low], charOffsets[low + 1]);\n    highRects = highRects || readClientRect(range, spans, charOffsets[high], charOffsets[high + 1]);\n    if (Math.abs(lowRects[0].top - highRects[0].top) <= 0.1) {\n        // same line\n        return;\n    }\n    // there is at least one line break between these two offsets\n    if (low + 1 === high) {\n        // the two characters are adjacent, so the line break must be exactly between them\n        result.push(high);\n        return;\n    }\n    const mid = low + ((high - low) / 2) | 0;\n    const midRects = readClientRect(range, spans, charOffsets[mid], charOffsets[mid + 1]);\n    discoverBreaks(range, spans, charOffsets, low, lowRects, mid, midRects, result);\n    discoverBreaks(range, spans, charOffsets, mid, midRects, high, highRects, result);\n}\nfunction readClientRect(range, spans, startOffset, endOffset) {\n    range.setStart(spans[(startOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */) | 0].firstChild, startOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n    range.setEnd(spans[(endOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */) | 0].firstChild, endOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n    return range.getClientRects();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ViewEventHandler } from '../../common/viewEventHandler.js';\nexport class DynamicViewOverlay extends ViewEventHandler {\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { editorDimmedLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._readConfig();\n        this._lastCursorModelPosition = new Position(1, 1);\n        this._renderResult = null;\n        this._activeLineNumber = 1;\n        this._context.addEventHandler(this);\n    }\n    _readConfig() {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        const lineNumbers = options.get(65 /* EditorOption.lineNumbers */);\n        this._renderLineNumbers = lineNumbers.renderType;\n        this._renderCustomLineNumbers = lineNumbers.renderFn;\n        this._renderFinalNewline = options.get(91 /* EditorOption.renderFinalNewline */);\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n        this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        this._readConfig();\n        return true;\n    }\n    onCursorStateChanged(e) {\n        const primaryViewPosition = e.selections[0].getPosition();\n        this._lastCursorModelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n        let shouldRender = false;\n        if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n            this._activeLineNumber = primaryViewPosition.lineNumber;\n            shouldRender = true;\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */ || this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            shouldRender = true;\n        }\n        return shouldRender;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getLineRenderLineNumber(viewLineNumber) {\n        const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n        if (modelPosition.column !== 1) {\n            return '';\n        }\n        const modelLineNumber = modelPosition.lineNumber;\n        if (this._renderCustomLineNumbers) {\n            return this._renderCustomLineNumbers(modelLineNumber);\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */) {\n            const diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n            if (diff === 0) {\n                return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n            }\n            return String(diff);\n        }\n        if (this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n                return String(modelLineNumber);\n            }\n            if (modelLineNumber % 10 === 0) {\n                return String(modelLineNumber);\n            }\n            return '';\n        }\n        return String(modelLineNumber);\n    }\n    prepareRender(ctx) {\n        if (this._renderLineNumbers === 0 /* RenderLineNumbersType.Off */) {\n            this._renderResult = null;\n            return;\n        }\n        const lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const lineCount = this._context.viewModel.getLineCount();\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n            if (!renderLineNumber) {\n                output[lineIndex] = '';\n                continue;\n            }\n            let extraClassName = '';\n            if (lineNumber === lineCount && this._context.viewModel.getLineLength(lineNumber) === 0) {\n                // this is the last line\n                if (this._renderFinalNewline === 'off') {\n                    output[lineIndex] = '';\n                    continue;\n                }\n                if (this._renderFinalNewline === 'dimmed') {\n                    extraClassName = ' dimmed-line-number';\n                }\n            }\n            if (lineNumber === this._activeLineNumber) {\n                extraClassName = ' active-line-number';\n            }\n            output[lineIndex] = (`<div class=\"${LineNumbersOverlay.CLASS_NAME}${lineHeightClassName}${extraClassName}\" style=\"left:${this._lineNumbersLeft}px;width:${this._lineNumbersWidth}px;\">${renderLineNumber}</div>`);\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nLineNumbersOverlay.CLASS_NAME = 'line-numbers';\nregisterThemingParticipant((theme, collector) => {\n    const editorLineNumbersColor = theme.getColor(editorLineNumbers);\n    const editorDimmedLineNumberColor = theme.getColor(editorDimmedLineNumber);\n    if (editorDimmedLineNumberColor) {\n        collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorDimmedLineNumberColor}; }`);\n    }\n    else if (editorLineNumbersColor) {\n        collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorLineNumbersColor.transparent(0.4)}; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { FloatHorizontalRange } from '../../view/renderingContext.js';\nexport class RangeUtil {\n    static _createRange() {\n        if (!this._handyReadyRange) {\n            this._handyReadyRange = document.createRange();\n        }\n        return this._handyReadyRange;\n    }\n    static _detachRange(range, endNode) {\n        // Move range out of the span node, IE doesn't like having many ranges in\n        // the same spot and will act badly for lines containing dashes ('-')\n        range.selectNodeContents(endNode);\n    }\n    static _readClientRects(startElement, startOffset, endElement, endOffset, endNode) {\n        const range = this._createRange();\n        try {\n            range.setStart(startElement, startOffset);\n            range.setEnd(endElement, endOffset);\n            return range.getClientRects();\n        }\n        catch (e) {\n            // This is life ...\n            return null;\n        }\n        finally {\n            this._detachRange(range, endNode);\n        }\n    }\n    static _mergeAdjacentRanges(ranges) {\n        if (ranges.length === 1) {\n            // There is nothing to merge\n            return ranges;\n        }\n        ranges.sort(FloatHorizontalRange.compare);\n        const result = [];\n        let resultLen = 0;\n        let prev = ranges[0];\n        for (let i = 1, len = ranges.length; i < len; i++) {\n            const range = ranges[i];\n            if (prev.left + prev.width + 0.9 /* account for browser's rounding errors*/ >= range.left) {\n                prev.width = Math.max(prev.width, range.left + range.width - prev.left);\n            }\n            else {\n                result[resultLen++] = prev;\n                prev = range;\n            }\n        }\n        result[resultLen++] = prev;\n        return result;\n    }\n    static _createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale) {\n        if (!clientRects || clientRects.length === 0) {\n            return null;\n        }\n        // We go through FloatHorizontalRange because it has been observed in bi-di text\n        // that the clientRects are not coming in sorted from the browser\n        const result = [];\n        for (let i = 0, len = clientRects.length; i < len; i++) {\n            const clientRect = clientRects[i];\n            result[i] = new FloatHorizontalRange(Math.max(0, (clientRect.left - clientRectDeltaLeft) / clientRectScale), clientRect.width / clientRectScale);\n        }\n        return this._mergeAdjacentRanges(result);\n    }\n    static readHorizontalRanges(domNode, startChildIndex, startOffset, endChildIndex, endOffset, context) {\n        // Panic check\n        const min = 0;\n        const max = domNode.children.length - 1;\n        if (min > max) {\n            return null;\n        }\n        startChildIndex = Math.min(max, Math.max(min, startChildIndex));\n        endChildIndex = Math.min(max, Math.max(min, endChildIndex));\n        if (startChildIndex === endChildIndex && startOffset === endOffset && startOffset === 0 && !domNode.children[startChildIndex].firstChild) {\n            // We must find the position at the beginning of a <span>\n            // To cover cases of empty <span>s, avoid using a range and use the <span>'s bounding box\n            const clientRects = domNode.children[startChildIndex].getClientRects();\n            context.markDidDomLayout();\n            return this._createHorizontalRangesFromClientRects(clientRects, context.clientRectDeltaLeft, context.clientRectScale);\n        }\n        // If crossing over to a span only to select offset 0, then use the previous span's maximum offset\n        // Chrome is buggy and doesn't handle 0 offsets well sometimes.\n        if (startChildIndex !== endChildIndex) {\n            if (endChildIndex > 0 && endOffset === 0) {\n                endChildIndex--;\n                endOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        let startElement = domNode.children[startChildIndex].firstChild;\n        let endElement = domNode.children[endChildIndex].firstChild;\n        if (!startElement || !endElement) {\n            // When having an empty <span> (without any text content), try to move to the previous <span>\n            if (!startElement && startOffset === 0 && startChildIndex > 0) {\n                startElement = domNode.children[startChildIndex - 1].firstChild;\n                startOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n            if (!endElement && endOffset === 0 && endChildIndex > 0) {\n                endElement = domNode.children[endChildIndex - 1].firstChild;\n                endOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        if (!startElement || !endElement) {\n            return null;\n        }\n        startOffset = Math.min(startElement.textContent.length, Math.max(0, startOffset));\n        endOffset = Math.min(endElement.textContent.length, Math.max(0, endOffset));\n        const clientRects = this._readClientRects(startElement, startOffset, endElement, endOffset, context.endNode);\n        context.markDidDomLayout();\n        return this._createHorizontalRangesFromClientRects(clientRects, context.clientRectDeltaLeft, context.clientRectScale);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RangeUtil } from './rangeUtil.js';\nimport { FloatHorizontalRange, VisibleRanges } from '../../view/renderingContext.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine, LineRange, DomPosition } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nconst canUseFastRenderedViewLine = (function () {\n    if (platform.isNative) {\n        // In VSCode we know very well when the zoom level changes\n        return true;\n    }\n    if (platform.isLinux || browser.isFirefox || browser.isSafari) {\n        // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n        // --\n        // Even though we read character widths correctly, having read them at a specific zoom level\n        // does not mean they are the same at the current zoom level.\n        // --\n        // This could be improved if we ever figure out how to get an event when browsers zoom,\n        // but until then we have to stick with reading client rects.\n        // --\n        // The same has been observed with Firefox on Windows7\n        // --\n        // The same has been oversved with Safari\n        return false;\n    }\n    return true;\n})();\nlet monospaceAssumptionsAreValid = true;\nexport class ViewLineOptions {\n    constructor(config, themeType) {\n        this.themeType = themeType;\n        const options = config.options;\n        const fontInfo = options.get(48 /* EditorOption.fontInfo */);\n        const experimentalWhitespaceRendering = options.get(36 /* EditorOption.experimentalWhitespaceRendering */);\n        if (experimentalWhitespaceRendering === 'off') {\n            this.renderWhitespace = options.get(95 /* EditorOption.renderWhitespace */);\n        }\n        else {\n            // whitespace is rendered in a different layer\n            this.renderWhitespace = 'none';\n        }\n        this.renderControlCharacters = options.get(90 /* EditorOption.renderControlCharacters */);\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.useMonospaceOptimizations = (fontInfo.isMonospace\n            && !options.get(31 /* EditorOption.disableMonospaceOptimizations */));\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(64 /* EditorOption.lineHeight */);\n        this.stopRenderingLineAfter = options.get(113 /* EditorOption.stopRenderingLineAfter */);\n        this.fontLigatures = options.get(49 /* EditorOption.fontLigatures */);\n    }\n    equals(other) {\n        return (this.themeType === other.themeType\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.fontLigatures === other.fontLigatures);\n    }\n}\nexport class ViewLine {\n    constructor(options) {\n        this._options = options;\n        this._isMaybeInvalid = true;\n        this._renderedViewLine = null;\n    }\n    // --- begin IVisibleLineData\n    getDomNode() {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            return this._renderedViewLine.domNode.domNode;\n        }\n        return null;\n    }\n    setDomNode(domNode) {\n        if (this._renderedViewLine) {\n            this._renderedViewLine.domNode = createFastDomNode(domNode);\n        }\n        else {\n            throw new Error('I have no rendered view line to set the dom node to...');\n        }\n    }\n    onContentChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onTokensChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onDecorationsChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onOptionsChanged(newOptions) {\n        this._isMaybeInvalid = true;\n        this._options = newOptions;\n    }\n    onSelectionChanged() {\n        if (isHighContrast(this._options.themeType) || this._options.renderWhitespace === 'selection') {\n            this._isMaybeInvalid = true;\n            return true;\n        }\n        return false;\n    }\n    renderLine(lineNumber, deltaTop, viewportData, sb) {\n        if (this._isMaybeInvalid === false) {\n            // it appears that nothing relevant has changed\n            return false;\n        }\n        this._isMaybeInvalid = false;\n        const lineData = viewportData.getViewLineRenderingData(lineNumber);\n        const options = this._options;\n        const actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\n        // Only send selection information when needed for rendering whitespace\n        let selectionsOnLine = null;\n        if (isHighContrast(options.themeType) || this._options.renderWhitespace === 'selection') {\n            const selections = viewportData.selections;\n            for (const selection of selections) {\n                if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                    // Selection does not intersect line\n                    continue;\n                }\n                const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                if (startColumn < endColumn) {\n                    if (isHighContrast(options.themeType)) {\n                        actualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', 0 /* InlineDecorationType.Regular */));\n                    }\n                    if (this._options.renderWhitespace === 'selection') {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n        }\n        const renderLineInput = new RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, lineData.startVisibleColumn, options.spaceWidth, options.middotWidth, options.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, selectionsOnLine);\n        if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n            // no need to do anything, we have the same render input\n            return false;\n        }\n        sb.appendString('<div style=\"top:');\n        sb.appendString(String(deltaTop));\n        sb.appendString('px;height:');\n        sb.appendString(String(this._options.lineHeight));\n        sb.appendString('px;\" class=\"');\n        sb.appendString(ViewLine.CLASS_NAME);\n        sb.appendString('\">');\n        const output = renderViewLine(renderLineInput, sb);\n        sb.appendString('</div>');\n        let renderedViewLine = null;\n        if (monospaceAssumptionsAreValid && canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === 0 /* ForeignElementType.None */) {\n            renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\n        }\n        if (!renderedViewLine) {\n            renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\n        }\n        this._renderedViewLine = renderedViewLine;\n        return true;\n    }\n    layoutLine(lineNumber, deltaTop) {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            this._renderedViewLine.domNode.setTop(deltaTop);\n            this._renderedViewLine.domNode.setHeight(this._options.lineHeight);\n        }\n    }\n    // --- end IVisibleLineData\n    getWidth(context) {\n        if (!this._renderedViewLine) {\n            return 0;\n        }\n        return this._renderedViewLine.getWidth(context);\n    }\n    getWidthIsFast() {\n        if (!this._renderedViewLine) {\n            return true;\n        }\n        return this._renderedViewLine.getWidthIsFast();\n    }\n    needsMonospaceFontCheck() {\n        if (!this._renderedViewLine) {\n            return false;\n        }\n        return (this._renderedViewLine instanceof FastRenderedViewLine);\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this._renderedViewLine) {\n            return monospaceAssumptionsAreValid;\n        }\n        if (this._renderedViewLine instanceof FastRenderedViewLine) {\n            return this._renderedViewLine.monospaceAssumptionsAreValid();\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    onMonospaceAssumptionsInvalidated() {\n        if (this._renderedViewLine && this._renderedViewLine instanceof FastRenderedViewLine) {\n            this._renderedViewLine = this._renderedViewLine.toSlowRenderedLine();\n        }\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this._renderedViewLine) {\n            return null;\n        }\n        startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n        endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n        const stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter;\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\n            // This range is obviously not visible\n            return new VisibleRanges(true, [new FloatHorizontalRange(this.getWidth(context), 0)]);\n        }\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\n            startColumn = stopRenderingLineAfter + 1;\n        }\n        if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\n            endColumn = stopRenderingLineAfter + 1;\n        }\n        const horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(lineNumber, startColumn, endColumn, context);\n        if (horizontalRanges && horizontalRanges.length > 0) {\n            return new VisibleRanges(false, horizontalRanges);\n        }\n        return null;\n    }\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        if (!this._renderedViewLine) {\n            return 1;\n        }\n        return this._renderedViewLine.getColumnOfNodeOffset(lineNumber, spanNode, offset);\n    }\n}\nViewLine.CLASS_NAME = 'view-line';\n/**\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\n */\nclass FastRenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping) {\n        this._cachedWidth = -1;\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        const keyColumnCount = Math.floor(renderLineInput.lineContent.length / 300 /* Constants.MaxMonospaceDistance */);\n        if (keyColumnCount > 0) {\n            this._keyColumnPixelOffsetCache = new Float32Array(keyColumnCount);\n            for (let i = 0; i < keyColumnCount; i++) {\n                this._keyColumnPixelOffsetCache[i] = -1;\n            }\n        }\n        else {\n            this._keyColumnPixelOffsetCache = null;\n        }\n        this._characterMapping = characterMapping;\n        this._charWidth = renderLineInput.spaceWidth;\n    }\n    getWidth(context) {\n        if (!this.domNode || this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(this._characterMapping.length);\n            return Math.round(this._charWidth * horizontalOffset);\n        }\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n            context === null || context === void 0 ? void 0 : context.markDidDomLayout();\n        }\n        return this._cachedWidth;\n    }\n    getWidthIsFast() {\n        return (this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) || this._cachedWidth !== -1;\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this.domNode) {\n            return monospaceAssumptionsAreValid;\n        }\n        if (this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) {\n            const expectedWidth = this.getWidth(null);\n            const actualWidth = this.domNode.domNode.firstChild.offsetWidth;\n            if (Math.abs(expectedWidth - actualWidth) >= 2) {\n                // more than 2px off\n                console.warn(`monospace assumptions have been violated, therefore disabling monospace optimizations!`);\n                monospaceAssumptionsAreValid = false;\n            }\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    toSlowRenderedLine() {\n        return createRenderedLine(this.domNode, this.input, this._characterMapping, false, 0 /* ForeignElementType.None */);\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        const startPosition = this._getColumnPixelOffset(lineNumber, startColumn, context);\n        const endPosition = this._getColumnPixelOffset(lineNumber, endColumn, context);\n        return [new FloatHorizontalRange(startPosition, endPosition - startPosition)];\n    }\n    _getColumnPixelOffset(lineNumber, column, context) {\n        if (column <= 300 /* Constants.MaxMonospaceDistance */) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            return this._charWidth * horizontalOffset;\n        }\n        const keyColumnOrdinal = Math.floor((column - 1) / 300 /* Constants.MaxMonospaceDistance */) - 1;\n        const keyColumn = (keyColumnOrdinal + 1) * 300 /* Constants.MaxMonospaceDistance */ + 1;\n        let keyColumnPixelOffset = -1;\n        if (this._keyColumnPixelOffsetCache) {\n            keyColumnPixelOffset = this._keyColumnPixelOffsetCache[keyColumnOrdinal];\n            if (keyColumnPixelOffset === -1) {\n                keyColumnPixelOffset = this._actualReadPixelOffset(lineNumber, keyColumn, context);\n                this._keyColumnPixelOffsetCache[keyColumnOrdinal] = keyColumnPixelOffset;\n            }\n        }\n        if (keyColumnPixelOffset === -1) {\n            // Could not read actual key column pixel offset\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            return this._charWidth * horizontalOffset;\n        }\n        const keyColumnHorizontalOffset = this._characterMapping.getHorizontalOffset(keyColumn);\n        const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n        return keyColumnPixelOffset + this._charWidth * (horizontalOffset - keyColumnHorizontalOffset);\n    }\n    _getReadingTarget(myDomNode) {\n        return myDomNode.domNode.firstChild;\n    }\n    _actualReadPixelOffset(lineNumber, column, context) {\n        if (!this.domNode) {\n            return -1;\n        }\n        const domPosition = this._characterMapping.getDomPosition(column);\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(this.domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        return r[0].left;\n    }\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        const spanNodeTextContentLength = spanNode.textContent.length;\n        let spanIndex = -1;\n        while (spanNode) {\n            spanNode = spanNode.previousSibling;\n            spanIndex++;\n        }\n        return this._characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n    }\n}\n/**\n * Every time we render a line, we save what we have rendered in an instance of this class.\n */\nclass RenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n        this._containsForeignElements = containsForeignElements;\n        this._cachedWidth = -1;\n        this._pixelOffsetCache = null;\n        if (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\n            this._pixelOffsetCache = new Float32Array(Math.max(2, this._characterMapping.length + 1));\n            for (let column = 0, len = this._characterMapping.length; column <= len; column++) {\n                this._pixelOffsetCache[column] = -1;\n            }\n        }\n    }\n    // --- Reading from the DOM methods\n    _getReadingTarget(myDomNode) {\n        return myDomNode.domNode.firstChild;\n    }\n    /**\n     * Width of the line in pixels\n     */\n    getWidth(context) {\n        if (!this.domNode) {\n            return 0;\n        }\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n            context === null || context === void 0 ? void 0 : context.markDidDomLayout();\n        }\n        return this._cachedWidth;\n    }\n    getWidthIsFast() {\n        if (this._cachedWidth === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Visible ranges for a model range\n     */\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this.domNode) {\n            return null;\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const startOffset = this._readPixelOffset(this.domNode, lineNumber, startColumn, context);\n            if (startOffset === -1) {\n                return null;\n            }\n            const endOffset = this._readPixelOffset(this.domNode, lineNumber, endColumn, context);\n            if (endOffset === -1) {\n                return null;\n            }\n            return [new FloatHorizontalRange(startOffset, endOffset - startOffset)];\n        }\n        return this._readVisibleRangesForRange(this.domNode, lineNumber, startColumn, endColumn, context);\n    }\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        if (startColumn === endColumn) {\n            const pixelOffset = this._readPixelOffset(domNode, lineNumber, startColumn, context);\n            if (pixelOffset === -1) {\n                return null;\n            }\n            else {\n                return [new FloatHorizontalRange(pixelOffset, 0)];\n            }\n        }\n        else {\n            return this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\n        }\n    }\n    _readPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            if (this._containsForeignElements === 0 /* ForeignElementType.None */) {\n                // We can assume the line is really empty\n                return 0;\n            }\n            if (this._containsForeignElements === 2 /* ForeignElementType.After */) {\n                // We have foreign elements after the (empty) line\n                return 0;\n            }\n            if (this._containsForeignElements === 1 /* ForeignElementType.Before */) {\n                // We have foreign elements before the (empty) line\n                return this.getWidth(context);\n            }\n            // We have foreign elements before & after the (empty) line\n            const readingTarget = this._getReadingTarget(domNode);\n            if (readingTarget.firstChild) {\n                context.markDidDomLayout();\n                return readingTarget.firstChild.offsetWidth;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const cachedPixelOffset = this._pixelOffsetCache[column];\n            if (cachedPixelOffset !== -1) {\n                return cachedPixelOffset;\n            }\n            const result = this._actualReadPixelOffset(domNode, lineNumber, column, context);\n            this._pixelOffsetCache[column] = result;\n            return result;\n        }\n        return this._actualReadPixelOffset(domNode, lineNumber, column, context);\n    }\n    _actualReadPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context);\n            if (!r || r.length === 0) {\n                return -1;\n            }\n            return r[0].left;\n        }\n        if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0 /* ForeignElementType.None */) {\n            // This branch helps in the case of whitespace only lines which have a width set\n            return this.getWidth(context);\n        }\n        const domPosition = this._characterMapping.getDomPosition(column);\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        const result = r[0].left;\n        if (this.input.isBasicASCII) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            const expectedResult = Math.round(this.input.spaceWidth * horizontalOffset);\n            if (Math.abs(expectedResult - result) <= 1) {\n                return expectedResult;\n            }\n        }\n        return result;\n    }\n    _readRawVisibleRangesForRange(domNode, startColumn, endColumn, context) {\n        if (startColumn === 1 && endColumn === this._characterMapping.length) {\n            // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n            return [new FloatHorizontalRange(0, this.getWidth(context))];\n        }\n        const startDomPosition = this._characterMapping.getDomPosition(startColumn);\n        const endDomPosition = this._characterMapping.getDomPosition(endColumn);\n        return RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startDomPosition.partIndex, startDomPosition.charIndex, endDomPosition.partIndex, endDomPosition.charIndex, context);\n    }\n    /**\n     * Returns the column for the text found at a specific offset inside a rendered dom node\n     */\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        const spanNodeTextContentLength = spanNode.textContent.length;\n        let spanIndex = -1;\n        while (spanNode) {\n            spanNode = spanNode.previousSibling;\n            spanIndex++;\n        }\n        return this._characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n    }\n}\nclass WebKitRenderedViewLine extends RenderedViewLine {\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        const output = super._readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context);\n        if (!output || output.length === 0 || startColumn === endColumn || (startColumn === 1 && endColumn === this._characterMapping.length)) {\n            return output;\n        }\n        // WebKit is buggy and returns an expanded range (to contain words in some cases)\n        // The last client rect is enlarged (I think)\n        if (!this.input.containsRTL) {\n            // This is an attempt to patch things up\n            // Find position of last column\n            const endPixelOffset = this._readPixelOffset(domNode, lineNumber, endColumn, context);\n            if (endPixelOffset !== -1) {\n                const lastRange = output[output.length - 1];\n                if (lastRange.left < endPixelOffset) {\n                    // Trim down the width of the last visible range to not go after the last column's position\n                    lastRange.width = endPixelOffset - lastRange.left;\n                }\n            }\n        }\n        return output;\n    }\n}\nconst createRenderedLine = (function () {\n    if (browser.isWebKit) {\n        return createWebKitRenderedLine;\n    }\n    return createNormalRenderedLine;\n})();\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './margin.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class Margin extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this._canUseLayerHinting = !options.get(30 /* EditorOption.disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(Margin.OUTER_CLASS_NAME);\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._glyphMarginBackgroundDomNode = createFastDomNode(document.createElement('div'));\n        this._glyphMarginBackgroundDomNode.setClassName(Margin.CLASS_NAME);\n        this._domNode.appendChild(this._glyphMarginBackgroundDomNode);\n    }\n    dispose() {\n        super.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(140 /* EditorOption.layoutInfo */);\n        this._canUseLayerHinting = !options.get(30 /* EditorOption.disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollTopChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setLayerHinting(this._canUseLayerHinting);\n        this._domNode.setContain('strict');\n        const adjustedScrollTop = ctx.scrollTop - ctx.bigNumbersDelta;\n        this._domNode.setTop(-adjustedScrollTop);\n        const height = Math.min(ctx.scrollHeight, 1000000);\n        this._domNode.setHeight(height);\n        this._domNode.setWidth(this._contentLeft);\n        this._glyphMarginBackgroundDomNode.setLeft(this._glyphMarginLeft);\n        this._glyphMarginBackgroundDomNode.setWidth(this._glyphMarginWidth);\n        this._glyphMarginBackgroundDomNode.setHeight(height);\n    }\n}\nMargin.CLASS_NAME = 'glyph-margin';\nMargin.OUTER_CLASS_NAME = 'margin';\n"],"names":["ViewContentWidgets","_ViewPart","_inherits","_super","_createSuper","context","viewDomNode","_this","_classCallCheck","call","_viewDomNode","_widgets","domNode","createFastDomNode","document","createElement","PartFingerprints","write","setClassName","setPosition","setTop","overflowingContentWidgetsDomNode","_createClass","key","value","_get","_getPrototypeOf","prototype","this","e","_i","_keys","Object","keys","length","widgetId","onConfigurationChanged","_updateAnchorsViewPositions","_i2","_keys2","updateAnchorViewPosition","_widget","myWidget","Widget","_context","id","allowEditorOverflow","appendChild","setShouldRender","widget","primaryAnchor","secondaryAnchor","preference","affinity","getId","hasOwnProperty","parentNode","removeChild","removeAttribute","suppressMouseDown","viewportData","_i3","_keys3","onBeforeRender","ctx","_i4","_keys4","prepareRender","_i5","_keys5","render","ViewPart","actual","_primaryAnchor","PositionPair","_secondaryAnchor","_actual","getDomNode","options","configuration","layoutInfo","get","_fixedOverflowWidgets","_contentWidth","contentWidth","_contentLeft","contentLeft","_lineHeight","_affinity","_preference","_cachedDomNodeOffsetWidth","_cachedDomNodeOffsetHeight","_maxWidth","_getMaxWidth","_isVisible","_renderData","setDisplay","setVisibility","setAttribute","setMaxWidth","hasChanged","_setPosition","modelPosition","getValidPositionPair","position","viewModel","validModelPosition","model","validatePosition","coordinatesConverter","modelPositionIsVisible","viewPosition","convertModelPositionToViewPosition","undefined","window","innerWidth","documentElement","offsetWidth","body","anchor","width","height","aboveLineTop","top","heightAvailableAboveLine","underLineTop","aboveTop","fitsAbove","belowTop","fitsBelow","viewportHeight","left","scrollLeft","viewportWidth","windowSize","domNodePosition","MIN_LIMIT","Math","max","MAX_LIMIT","min","absoluteLeft","scrollX","delta","dom","getDomNodePagePosition","absoluteAboveTop","scrollY","absoluteBelowTop","getClientArea","_this$_layoutHorizont","_layoutHorizontalSegmentInPage","_this$_layoutHorizont2","_slicedToArray","absoluteAboveLeft","topLeft","Coordinate","_a","_b","primary","getCoordinates","secondary","lineNumber","lineHeight","horizontalPosition","visibleRangeForPosition","column","getVerticalOffsetForLineNumber","scrollTop","AnchorCoordinate","fontInfo","typicalFullwidthCharacterWidth","_this$_getAnchorsCoor","_getAnchorsCoordinates","preferredDimensions","beforeRender","safeInvoke","clientRect","getBoundingClientRect","round","placement","_reduceAnchorCoordinates","_layoutBoxInPage","_layoutBoxInViewport","pass","_step","_iterator","_createForOfIteratorHelper","s","n","done","pref","coordinate","_prepareRenderWidgetAtExactPositionOverflowing","err","f","startLineNumber","endLineNumber","_prepareRenderWidget","afterRender","setLeft","bigNumbersDelta","_coordinateBrand","_anchorCoordinateBrand","fn","thisArg","_len","arguments","args","Array","_key","apply","concat","AbstractLineHighlightOverlay","_DynamicViewOverlay","_renderLineHighlight","_renderLineHighlightOnlyWhenFocus","_selectionIsEmpty","_focused","_cursorLineNumbers","_selections","Selection","addEventHandler","_assertThisInitialized","removeEventHandler","cursorsLineNumbers","map","positionLineNumber","sort","a","b","arrays","selectionIsEmpty","every","isEmpty","_readFromSelections","selections","scrollWidthChanged","scrollTopChanged","isFocused","_shouldRenderThis","renderedLine","_renderOne","visibleStartLineNumber","visibleRange","visibleEndLineNumber","len","index","renderData","lineIndex","DynamicViewOverlay","CurrentLineHighlightOverlay","_AbstractLineHighligh","_super2","className","_shouldRenderOther","scrollWidth","_shouldRenderInContent","_shouldRenderInMargin","CurrentLineMarginHighlightOverlay","_AbstractLineHighligh2","_super3","registerThemingParticipant","theme","collector","lineHighlight","getColor","editorLineHighlight","addRule","isTransparent","defines","editorLineHighlightBorder","lineHighlightBorder","isHighContrast","type","DecorationsOverlay","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_renderResult","_decorations","getDecorationsInViewport","decorations","decorationsLen","i","d","zIndex","aClassName","bClassName","Range","compareRangesUsingStarts","range","output","_renderWholeLineDecorations","_renderNormalDecorations","String","lenI","isWholeLine","decorationOutput","j","prevClassName","prevShowIfCollapsed","prevRange","showIfCollapsed","Boolean","endColumn","startColumn","getLineMaxColumn","areIntersectingOrTouching","plusRange","_renderNormalDecoration","linesVisibleRanges","linesVisibleRangesForRange","lenJ","lineVisibleRanges","outsideRenderedLine","ranges","singleVisibleRange","center","HorizontalRange","k","lenK","EditorScrollbar","linesContent","overflowGuardDomNode","scrollbar","mouseWheelScrollSensitivity","fastScrollSensitivity","scrollPredominantAxis","scrollbarOptions","listenOnDomNode","getThemeTypeSelector","useShadows","lazyRender","vertical","horizontal","verticalHasArrows","horizontalHasArrows","verticalScrollbarSize","verticalSliderSize","horizontalScrollbarSize","horizontalSliderSize","handleMouseWheel","alwaysConsumeMouseWheel","arrowSize","scrollByPage","_register","SmoothScrollableElement","viewLayout","getScrollable","scrollbarDomNode","_setLayout","onBrowserDesperateReveal","lookAtScrollTop","lookAtScrollLeft","newScrollPosition","deltaTop","getCurrentScrollTop","deltaLeft","getCurrentScrollLeft","setScrollPosition","addDisposableListener","side","setWidth","minimap","minimapWidth","setHeight","getOverviewRulerLayoutInfo","browserEvent","delegateVerticalScrollbarPointerDown","delegateScrollFromMouseWheelEvent","newOpts","updateOptions","updateClassName","renderNow","DecorationToRender","decorationLane","_decorationToRenderBrand","RenderedDecoration","LineRenderedDecorations","lanes","lane","decoration","push","laneIndex","DedupOverlay","decorationLaneCount","prevEndLineIndex","startLineIndex","endLineIndex","add","GlyphMarginOverlay","_DedupOverlay","_glyphMargin","_glyphMarginLeft","glyphMarginLeft","_glyphMarginWidth","glyphMarginWidth","_glyphMarginDecorationLaneCount","glyphMarginDecorationLaneCount","r","rLen","glyphMarginClassName","glyphMargin","decorationsToRender","_getDecorations","toRender","_render","toString","common","renderInfo","css","getLaneDecorations","winningDecoration","winningDecorationClassNames","join","IndentGuidesOverlay","_primaryPosition","wrappingInfo","_spaceWidth","spaceWidth","_maxIndentLeft","wrappingColumn","_bracketPairGuideOptions","newPosition","getPosition","equals","_c","_d","indentation","bracketPairs","activeCursorPosition","indents","getGuidesByLine","getLineCount","indent","result","leftOffset","Position","guide","visibleColumn","horizontalLine","_this2","bracketGuides","getBracketGuidesInRangeByLine","highlightActive","highlightActiveBracketPair","horizontalGuides","bracketPairsHorizontal","HorizontalGuidesState","Enabled","EnabledForActive","Disabled","includeInactive","indentGuides","getLinesIndentGuides","activeIndentStartLineNumber","activeIndentEndLineNumber","activeIndentLevel","highlightActiveIndentation","activeIndentInfo","getActiveIndentGuide","indentSize","getOptions","lineGuides","bracketGuidesInLine","bracketGuidesInLineQueue","ArrayQueue","indentGuidesInLine","_loop","indentGuide","indentLvl","isActive","_toConsumableArray","takeWhile","g","peeked","peek","IndentGuide","transparentToUndefined","color","colors","bracketColor","editorBracketHighlightingForeground1","guideColor","editorBracketPairGuideBackground1","guideColorActive","editorBracketPairGuideActiveBackground1","editorBracketHighlightingForeground2","editorBracketPairGuideBackground2","editorBracketPairGuideActiveBackground2","editorBracketHighlightingForeground3","editorBracketPairGuideBackground3","editorBracketPairGuideActiveBackground3","editorBracketHighlightingForeground4","editorBracketPairGuideBackground4","editorBracketPairGuideActiveBackground4","editorBracketHighlightingForeground5","editorBracketPairGuideBackground5","editorBracketPairGuideActiveBackground5","editorBracketHighlightingForeground6","editorBracketPairGuideBackground6","editorBracketPairGuideActiveBackground6","colorProvider","BracketPairGuidesClassNames","colorValues","c","effectiveGuideColor","transparent","effectiveGuideColorActive","filter","isDefined","level","getInlineClassNameOfLevel","replace","activeClassName","DomReadingContext","_domNode","endNode","_didDomLayout","_clientRectDeltaLeft","_clientRectScale","_clientRectRead","rect","markDidDomLayout","readClientRect","LastRenderedData","_currentVisibleRange","currentVisibleRange","HorizontalRevealRangeRequest","minimalReveal","startScrollTop","stopScrollTop","scrollType","minLineNumber","maxLineNumber","HorizontalRevealSelectionsRequest","selection","ViewLines","_linesContent","_textRangeRestingSpot","_visibleLines","VisibleLinesCollection","conf","_isViewportWrapping","isViewportWrapping","_revealHorizontalRightPadding","_cursorSurroundingLines","_cursorSurroundingLinesStyle","_canUseLayerHinting","_viewLineOptions","ViewLineOptions","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","applyFontInfo","_maxLineWidth","_asyncUpdateLineWidths","RunOnceScheduler","_updateLineWidthsSlow","_asyncCheckMonospaceFontAssumptions","_checkMonospaceFontAssumptions","_lastRenderedData","_horizontalRevealRequest","_stickyScrollEnabled","enabled","_maxNumberStickyLines","maxLineCount","dispose","ViewLine","_onOptionsMaybeChanged","newViewLineOptions","getStartLineNumber","getEndLineNumber","getVisibleLine","onOptionsChanged","rendStartLineNumber","rendEndLineNumber","onSelectionChanged","onDecorationsChanged","shouldRender","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","desiredScrollTop","_computeScrollTopToRevealRange","getFutureViewport","source","verticalType","validateScrollPosition","revealHorizontal","abs","scrollLeftChanged","onScrollChanged","onTokensChanged","setMaxLineWidth","onZonesChanged","spanNode","offset","viewLineDomNode","_getViewLineDomNode","_getLineNumberFor","getColumnOfNodeOffset","minColumn","getLineMinColumn","node","nodeType","CLASS_NAME","parentElement","getWidth","_updateLineWidthsSlowIfDomDidLayout","_range","includeNewLines","originalEndLineNumber","intersectRanges","getCurrentVisibleRange","visibleRanges","visibleRangesLen","domReadingContext","nextLineModelLineNumber","convertViewPositionToModelPosition","visibleRangesForLine","getVisibleRangesForRange","LineVisibleRanges","from","_visibleRangesForLineRange","HorizontalPosition","_updateLineWidths","didDomLayout","isScheduled","cancel","fast","localMaxLineWidth","allWidthsComputed","visibleLine","getWidthIsFast","_ensureMaxLineWidth","longestLineNumber","longestWidth","needsMonospaceFontCheck","lineWidth","monospaceAssumptionsAreValid","onMonospaceAssumptionsInvalidated","Error","renderLines","setCurrentVisibleRange","getScrollWidth","getScrollHeight","horizontalRevealRequest","onDidRender","newScrollLeft","_computeScrollLeftToReveal","maxHorizontalOffset","_updateLineWidthsFast","schedule","platform","setLayerHinting","setContain","adjustedScrollTop","iLineWidth","ceil","viewport","boxIsSingleRange","boxStartY","boxEndY","viewportStartY","viewportEndY","newScrollTop","paddingTop","paddingBottom","minScrollTop","boxMiddleY","_computeMinimumScrolling","getCurrentViewport","viewportStartX","viewportEndX","verticalScrollbarWidth","boxStartX","boxEndX","_step2","_iterator2","_step3","_iterator3","HORIZONTAL_EXTRA_PX","viewportStart","viewportEnd","boxStart","boxEnd","revealAtStart","revealAtEnd","viewportLength","LinesDecorationsOverlay","_decorationsLeft","decorationsLeft","_decorationsWidth","decorationsWidth","linesDecorationsClassName","firstLineDecorationClassName","lineOutput","MarginViewLineDecorationsOverlay","marginClassName","allCharCodes","v","MinimapCharRenderer","charData","scale","_minimapCharRendererBrand","charDataNormal","soften","charDataLight","target","dx","dy","chCode","foregroundAlpha","backgroundColor","backgroundAlpha","fontScale","useLighterFont","force1pxHeight","charWidth","charHeight","renderHeight","console","warn","charIndex","getCharIndex","destWidth","backgroundR","backgroundG","backgroundB","deltaR","deltaG","deltaB","destAlpha","dest","data","sourceOffset","row","y","x","colorR","colorG","colorB","input","ratio","Uint8ClampedArray","toUint8","charTable","A","B","C","D","E","F","decodeData","str","prebakedMiniMaps","once","MinimapCharRendererFactory","fontFamily","lastCreated","lastFontFamily","factory","createFromSampleData","createSampleData","canvas","getContext","style","fillStyle","font","textBaseline","code","fillText","fromCharCode","getImageData","_downsample","destOffset","targetIndex","brightest","sourceY1","sourceY2","sourceX1","sourceX2","samples","sy","sourceRow","floor","yBalance","sx","xBalance","sourceIndex","weight","final","pixelsPerCharacter","resultLen","resultOffset","_downsampleChar","adjust","MinimapOptions","tokensColorTracker","pixelRatio","minimapLayout","minimapOpts","renderMinimap","size","minimapHeightIsEditorHeight","scrollBeyondLastLine","bottom","showSlider","autohide","minimapLeft","minimapHeight","canvasInnerWidth","minimapCanvasInnerWidth","canvasInnerHeight","minimapCanvasInnerHeight","canvasOuterWidth","minimapCanvasOuterWidth","canvasOuterHeight","minimapCanvasOuterHeight","isSampling","minimapIsSampling","editorHeight","minimapScale","minimapLineHeight","minimapCharWidth","charRenderer","create","defaultBackgroundColor","_getMinimapBackground","_getMinimapForegroundOpacity","other","themeColor","minimapBackground","RGBA8","rgba","minimapForegroundOpacity","_clamp","MinimapLayout","scrollHeight","sliderNeeded","_computedSliderRatio","sliderTop","sliderHeight","topPaddingLineCount","pageY","viewportStartLineNumber","viewportEndLineNumber","viewportStartLineNumberVerticalOffset","viewportContainsWhitespaceGaps","lineCount","realLineCount","previousLayout","minimapLinesFitting","logicalScrollHeight","maxMinimapSliderTop","computedSliderRatio","maxLinesFitting","viewportLineCount","expectedViewportLineCount","extraLinesAtTheTop","extraLinesAtTheBottom","consideringStartLineNumber","partialLine","MinimapLine","INVALID","RenderData","renderedLayout","imageData","lines","_imageData","_renderedLines","RenderedLinesCollection","_set","layout","scrollEquals","tmp","rendLineNumberStart","changeFromLineNumber","changeCount","deleteFromLineNumber","deleteToLineNumber","insertFromLineNumber","insertToLineNumber","MinimapBuffers","WIDTH","HEIGHT","background","_backgroundFillData","_createBackgroundFillData","_buffers","createImageData","_lastUsedBuffer","set","backgroundA","MinimapSamplingState","samplingRatio","minimapLines","fromLineNumber","toLineNumber","fromLineIndex","modelLineToMinimapLine","toLineIndex","sampledLineNumber","minimapLineStart","minimapLineEnd","deletedLineCount","changeStartIndex","changeEndIndex","insertedLineCount","viewLineCount","oldSamplingState","minimapLineCount","EditorLayoutInfoComputer","computeContainedMinimapLineCount","halfRatio","lastIndex","oldMinimapLines","oldLength","oldIndex","oldDeltaLineCount","minViewLineNumber","events","lastEvent","fromViewLineNumber","toViewLineNumber","oldMinimapLineNumber","_oldIndex","selectedViewLineNumber","Minimap","MinimapTokensColorTracker","getInstance","_minimapSelections","_MinimapSamplingState","compute","samplingState","_samplingState","_shouldCheckSampling","InnerMinimap","_get2","opts","_recreateLineSampling","onDidChangeOptions","affectsMinimap","minimapLineRange","modelLineRangeToMinimapLineRange","count","_this$_samplingState$","_this$_samplingState$2","onThemeChanged","onTokensColorsChanged","minimapCtx","whitespaceViewportData","wasSampling","_MinimapSamplingState3","_MinimapSamplingState4","event","getLineContent","needed","getViewLineData","getMinimapLinesRenderingData","_this$_samplingState$3","decorationLineRangeToMinimapLineRange","_this$_samplingState$4","modelStartLineNumber","modelEndLineNumber","getMinimapDecorationsInRange","_step4","_iterator4","minimapStartLineNumber","minimapEndLineNumber","ViewModelDecoration","revealRange","_Disposable","_this3","_renderDecorations","_gestureInProgress","_theme","_model","_lastRenderData","_selectionColor","minimapSelection","_getMinimapDomNodeClassName","_shadow","_canvas","_decorationsCanvas","_slider","_sliderHorizontal","_applyLayout","_pointerDownListener","addStandardDisposableListener","EventType","POINTER_DOWN","preventDefault","internalOffsetY","offsetY","revealLineNumber","button","initialPosY","_startSliderDragging","_sliderPointerMoveMonitor","GlobalPointerMoveMonitor","_sliderPointerDownListener","stopPropagation","_gestureDisposable","Gesture","addTarget","_sliderTouchStartListener","Start","toggleClassName","scrollDueToTouchEvent","passive","_sliderTouchMoveListener","Change","_sliderTouchEndListener","End","initialSliderState","_this4","Element","initialPosX","pageX","handlePointerMove","posy","posx","minimapPosition","pointerOrthogonalDelta","setScrollTop","pointerDelta","getDesiredScrollTopFromDelta","startMonitoring","pointerId","buttons","pointerMoveData","touch","startY","getDesiredScrollTopFromTouchLocation","class_","getBuffer","renderingCtx","getRealLineCount","renderDecorations","getSelections","getMinimapDecorationsInViewport","_this$_model$options","tabSize","canvasContext","clearRect","highlightedLines","ContiguousLineMap","_renderSelectionLineHighlights","_renderDecorationsLineHighlights","lineOffsetMap","_renderSelectionsHighlights","_renderDecorationsHighlights","_step5","y1","y2","_iterator5","intersection","intersectWithViewport","_intersection","line","yy1","getYForLineNumber","yy2","fillRect","MINIMAP_GUTTER_WIDTH","highlightColors","Map","minimapOptions","MinimapPosition","Inline","_intersection2","decorationColor","highlightColor","has","characterWidth","_step6","_iterator6","_intersection3","renderDecorationOnLine","_step7","_iterator7","_intersection4","Gutter","renderDecoration","decorationRange","x1","getXOffsetForPosition","x2","lineIndexToXOffset","lineData","prevx","charCode","charCodeAt","strings","linesEquals","_lastData","_getBuffer","_InnerMinimap$_render","_renderUntouchedLines","_InnerMinimap$_render2","_dirtyY1","_dirtyY2","lineInfo","defaultBackground","backgroundIsLight","renderMinimapLineHeight","innerLinePadding","renderBackground","renderedLines","_renderLine","dirtyY1","dirtyHeight","putImageData","lastRenderData","lastTargetData","lastStartLineNumber","lastLines","lastLinesLength","targetData","maxDestPixel","dirtyPixel1","dirtyPixel2","copySourceStart","copySourceEnd","copyDestStart","copyDestEnd","dest_dy","lastLineIndex","source_dy","sourceStart","sourceEnd","destStart","destEnd","subarray","colorTracker","minimapCharRenderer","content","tokens","maxDx","tabsCharDelta","tokenIndex","tokensLen","getCount","tokenEndIndex","getEndOffset","tokenColorId","getForeground","tokenColor","insertSpacesCount","blockRenderChar","renderChar","Disposable","defaultValue","_startLineNumber","_endLineNumber","_defaultValue","_values","ViewOverlayWidgets","_verticalScrollbarWidth","_minimapWidth","_horizontalScrollbarHeight","horizontalScrollbarHeight","_editorHeight","_editorWidth","widgetData","setRight","widgetHeight","clientHeight","right","_renderWidget","Settings","config","overviewRulerLanes","renderBorder","borderColor","editorOverviewRulerBorder","hideCursor","cursorColor","editorCursorForeground","themeType","minimapEnabled","minimapSide","editorOverviewRulerBackground","TokenizationRegistry","getDefaultBackground","overviewRuler","domWidth","domHeight","canvasWidth","canvasHeight","_this$_initLanes","_initLanes","_this$_initLanes2","w","canvasLeftOffset","laneCount","remainingWidth","leftWidth","rightWidth","centerWidth","centerOffset","Color","DecorationsOverviewRuler","_updateSettings","_tokensColorTrackerListener","onDidChange","changedColorMap","_cursorPositions","newSettings","_settings","compare","affectsOverviewRuler","scrollHeightChanged","editorCtx","setBackgroundColor","Format","CSS","formatHexA","heightRatio","getAllOverviewRulerDecorations","minDecorationHeight","halfMinDecorationHeight","canvasCtx","isOpaque","OverviewRulerDecorationsGroup","cmp","decorationGroup","decorationGroupData","prevLane","prevY1","prevY2","yCenter","cursorHeight","halfCursorHeight","cursorX","cursorW","cursor","beginPath","strokeStyle","moveTo","lineTo","stroke","OverviewRuler","_ViewEventHandler","cssClassName","_zoneManager","OverviewZoneManager","setDOMWidth","setDOMHeight","setOuterHeight","setLineHeight","setPixelRatio","getDOMWidth","getDOMHeight","getCanvasWidth","getCanvasHeight","zones","setZones","getOuterHeight","colorZones","resolveColorZones","id2Color","getId2Color","_renderOneLane","currentColorId","currentFrom","currentTo","zone","zoneColorId","colorId","zoneFrom","zoneTo","to","ViewEventHandler","Rulers","_renderedRulers","_rulers","currentCount","desiredCount","rulerWidth","addCount","removeCount","pop","_ensureRulersCount","ruler","setBoxShadow","ScrollDecorationViewPart","_scrollTop","_width","_updateWidth","_shouldShow","_useShadows","newShouldShow","_updateShouldShow","HorizontalRangeWithStyle","startStyle","endStyle","LineVisibleRangesWithStyle","toStyledRange","item","toStyled","SelectionsOverlay","_previousFrameVisibleRangesWithStyle","_roundedSelection","slice","previousFrame","epsilon","previousFrameTop","previousFrameBottom","topLineNumber","bottomLineNumber","curLineRange","curLeft","curRight","prevLeft","prevRight","nextLeft","nextRight","_visibleRangesHaveGaps","_enrichVisibleRangesWithStyle","output2","hasMultipleSelections","visibleRangesHaveStyle","fullLineHeight","reducedLineHeight","firstLineNumber","lastLineNumber","innerCornerOutput","restOfSelectionOutput","_createSelectionPiece","SELECTION_CLASS_NAME","ROUNDED_PIECE_WIDTH","EDITOR_BACKGROUND_CLASS_NAME","SELECTION_TOP_RIGHT","SELECTION_BOTTOM_RIGHT","SELECTION_TOP_LEFT","SELECTION_BOTTOM_LEFT","thisFrameVisibleRangesWithStyle","visibleRangesWithStyle","_getVisibleRangesWithStyle","_actualRenderOneSelection","_ref","_ref2","editorSelectionForegroundColor","editorSelectionForeground","ViewCursorRenderData","paddingLeft","textContent","textContentClassName","ViewCursor","_cursorStyle","_lineCursorWidth","_position","_lastRenderedContent","pauseAnimation","transitionProperty","_this$_position","lineContent","_strings$getCharConta","_strings$getCharConta2","startOffset","endOffset","substring","_this$_getGraphemeAwa","_getGraphemeAwarePosition","_this$_getGraphemeAwa2","nextGrapheme","TextEditorCursorStyle","Line","LineThin","computeScreenAwareSize","_getTokenClassName","visibleRangeForCharacter","firstVisibleRangeForCharacter","Block","Underline","UnderlineThin","findTokenIndexAtOffset","getClassName","_prepareRender","setPaddingLeft","ViewCursors","_readOnly","_cursorBlinking","_cursorSmoothCaretAnimation","_isComposingInput","_primaryCursor","_secondaryCursors","_updateDomClassName","_startCursorBlinkAnimation","TimeoutTimer","_cursorFlatBlinkInterval","IntervalTimer","_blinkingEnabled","_editorHasFocus","_updateBlinking","secondaryPositions","reason","onCursorPositionChanged","addCnt","newCursor","insertBefore","nextSibling","removeCnt","splice","positions","_onCursorPositionChanged","blinkingStyle","_getCursorBlinking","isHidden","isSolid","_hide","_show","cancelAndSet","BLINK_INTERVAL","setIfNotSet","_getClassName","BlockOutline","show","hide","renderDataLen","primaryRenderData","secondaryRenderData","caret","caretBackground","editorCursorBackground","opposite","invalidFunc","ViewZones","marginDomNode","_zones","whitespaces","getWhitespaces","oldWhitespaces","whitespace","hadAChange","changeWhitespace","whitespaceAccessor","props","_computeWhitespaceProps","delegate","isInHiddenArea","oldWhitespace","afterLineNumber","afterViewLineNumber","heightInPx","changeOneWhitespace","_safeCallOnComputedHeight","_recomputeWhitespacesProps","ordinal","afterColumn","_heightInPixels","minWidthInPx","_minWidthInPixels","zoneAfterModelPosition","zoneBeforeModelPosition","validAfterLineNumber","afterColumnAffinity","isVisible","showInHiddenAreas","callback","zonesHaveChanged","changeAccessor","addZone","_addZone","removeZone","_removeZone","layoutZone","_layoutZone","func","arg1","onUnexpectedError","safeInvoke1Arg","myZone","whitespaceId","insertWhitespace","_getZoneOrdinal","removeWhitespace","heightInLines","onComputedHeight","onDomNodeTop","visibleWhitespaces","visibleZones","hasVisibleZone","visibleWhitespace","newTop","newHeight","newDisplay","verticalOffset","_safeCallOnDomNodeTop","getScrolledTopFromAbsoluteTop","BlockDecorations","blocks","update","didChange","newContentWidth","newContentLeft","blockClassName","block","blockIsAfterEnd","getVerticalOffsetAfterLineNumber","blockDoesNotCollapse","blockPadding","paddingRight","remove","WhitespaceOverlay","_options","WhitespaceOptions","_selection","newOptions","renderWhitespace","selectionsOnLine","maxColumn","LineRange","_applyRenderWhitespace","continuesWithWrappedLine","lastNonWhitespaceIndex","editorWhitespaces","USE_SVG","renderWithSVG","stopRenderingLineAfter","fauxIndentLength","onlyBoundary","onlyTrailing","middotWidth","wsmiddotWidth","renderSpaceCharCode","canUseHalfwidthRightwardsArrow","lineIsEmptyOrWhitespace","firstNonWhitespaceIndex","currentSelectionIndex","currentSelection","maxLeft","prevChCode","nextChCode","prevCharCode","_renderArrow","toFixed","p1","p2","p3","p4","p5","parts","p","experimentalWhitespaceRendering","View","commandDelegate","colorTheme","userInputEvents","overflowWidgetsDomNode","_renderAnimationFrame","viewController","ViewController","ViewContext","_viewParts","_textAreaHandler","TextAreaHandler","_createTextAreaHandlerHelper","_getEditorClassName","_overflowGuardContainer","_scrollbar","_viewLines","_viewZones","decorationsOverviewRuler","scrollDecoration","contentViewOverlays","ContentViewOverlays","addDynamicOverlay","marginViewOverlays","MarginViewOverlays","LineNumbersOverlay","margin","Margin","_contentWidgets","_viewCursors","_overlayWidgets","rulers","blockOutline","overviewRulerData","parent","textArea","textAreaCover","_pointerHandler","PointerHandler","_createPointerHandlerHelper","inputLatency","onRenderStart","_renderNow","linesContentDomNode","viewLinesDomNode","focusTextArea","focus","dispatchTextAreaEvent","dispatchEvent","getLastRenderData","lastViewCursorsRenderData","lastTextareaPosition","PointerHandlerLastRenderData","shouldSuppressMouseDownOnViewZone","viewZoneId","shouldSuppressMouseDownOnWidget","getPositionFromDOMInfo","_flushAccumulatedAndRenderNow","getLineWidth","focused","_scheduleRender","runAtThisOrScheduleAtNextAnimationFrame","_onRenderScheduled","bind","safeInvokeNoArg","_actualRender","viewPart","isInDOM","viewPartsToRender","_getViewPartsToRender","partialViewportData","getLinesViewportData","setViewport","centeredLineNumber","ViewportData","getWhitespaceViewportData","renderText","renderingContext","RenderingContext","scrollPosition","visibleLinesStabilized","modelLineNumber","modelColumn","clientX","clientY","mouseTarget","getTargetAtClientPoint","ViewUserInputEvents","convertViewToModelMouseTarget","changeViewZones","now","everything","forceShouldRender","writeScreenReaderContent","setAriaOptions","addWidget","layoutContentWidget","_e","_f","_g","_h","setWidgetPosition","secondaryPosition","positionAffinity","removeWidget","layoutOverlayWidget","newPreference","ttPolicy","createTrustedTypesPolicy","createHTML","DOMLineBreaksComputerFactory","wrappingIndent","wordBreak","requests","injectedTexts","addRequest","lineText","injectedText","previousLineBreakData","finalize","firstLineBreakColumn","injectedTextsPerLine","createEmptyLineBreakWithPossiblyInjectedText","requestIdx","LineInjectedText","applyInjectedText","injectionOptions","t","injectionOffsets","text","ModelLineProjectionData","overallWidth","additionalIndent","additionalIndentSize","additionalIndentLength","containerDomNode","sb","StringBuilder","firstNonWhitespaceIndices","wrappedTextIndentLengths","renderLineContents","allCharOffsets","allVisibleColumns","wrappedTextIndentLength","indentWidth","renderLineContent","substr","renderLine","html","build","trustedhtml","innerHTML","overflowWrap","createRange","lineDomNodes","children","breakOffsets","readLineBreaks","visibleColumns","breakOffsetsVisibleColumn","curInjectedTexts","createLineBreaks","initialVisibleColumn","wrappingIndentLength","hangingOffset","appendString","charOffset","charOffsets","nextCharCode","producedCharacters","space","appendCharCode","appendASCIICharCode","lineDomNode","spans","discoverBreaks","log","low","lowRects","high","highRects","mid","midRects","setStart","firstChild","setEnd","getClientRects","_readConfig","_lastCursorModelPosition","_activeLineNumber","lineNumbers","_renderLineNumbers","renderType","_renderCustomLineNumbers","renderFn","_renderFinalNewline","_lineNumbersLeft","lineNumbersLeft","_lineNumbersWidth","lineNumbersWidth","primaryViewPosition","viewLineNumber","diff","lineHeightClassName","renderLineNumber","_getLineRenderLineNumber","extraClassName","getLineLength","editorLineNumbersColor","editorLineNumbers","editorDimmedLineNumberColor","editorDimmedLineNumber","RangeUtil","_handyReadyRange","selectNodeContents","startElement","endElement","_createRange","_detachRange","FloatHorizontalRange","prev","clientRects","clientRectDeltaLeft","clientRectScale","_mergeAdjacentRanges","startChildIndex","endChildIndex","_createHorizontalRangesFromClientRects","_readClientRects","canUseFastRenderedViewLine","browser","isFirefox","isSafari","renderControlCharacters","useMonospaceOptimizations","isMonospace","fontLigatures","_isMaybeInvalid","_renderedViewLine","getViewLineRenderingData","actualInlineDecorations","LineDecoration","inlineDecorations","renderLineInput","RenderLineInput","isBasicASCII","containsRTL","startVisibleColumn","EditorFontLigatures","OFF","renderViewLine","renderedViewLine","containsForeignElements","FastRenderedViewLine","characterMapping","createRenderedLine","toSlowRenderedLine","VisibleRanges","horizontalRanges","_cachedWidth","keyColumnCount","_keyColumnPixelOffsetCache","Float32Array","_characterMapping","_charWidth","horizontalOffset","getHorizontalOffset","_getReadingTarget","expectedWidth","actualWidth","startPosition","_getColumnPixelOffset","endPosition","keyColumnOrdinal","keyColumn","keyColumnPixelOffset","_actualReadPixelOffset","keyColumnHorizontalOffset","myDomNode","domPosition","getDomPosition","readHorizontalRanges","partIndex","spanNodeTextContentLength","spanIndex","previousSibling","getColumn","DomPosition","RenderedViewLine","_isWhitespaceOnly","test","_containsForeignElements","_pixelOffsetCache","_readPixelOffset","_readVisibleRangesForRange","pixelOffset","_readRawVisibleRangesForRange","readingTarget","cachedPixelOffset","expectedResult","startDomPosition","endDomPosition","WebKitRenderedViewLine","_RenderedViewLine","endPixelOffset","lastRange","isWebKit","createWebKitRenderedLine","createNormalRenderedLine","OUTER_CLASS_NAME","_glyphMarginBackgroundDomNode"],"sourceRoot":""}