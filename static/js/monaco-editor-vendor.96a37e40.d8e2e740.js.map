{"version":3,"file":"static/js/monaco-editor-vendor.96a37e40.d8e2e740.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/browser/view/domLineBreaksComputer.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/dynamicViewOverlay.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/renderingContext.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/viewLayer.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/viewController.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/viewOverlays.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/contentWidgets/contentWidgets.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/currentLineHighlight/currentLineHighlight.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/decorations/decorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/editorScrollbar/editorScrollbar.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/glyphMargin/glyphMargin.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/indentGuides/indentGuides.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLines.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/linesDecorations/linesDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/marginDecorations/marginDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharSheet.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRenderer.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapPreBaked.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimap.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/overviewRuler.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/rulers/rulers.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/scrollDecoration/scrollDecoration.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/selections/selections.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursor.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursors.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewZones/viewZones.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/view.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/viewPart.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/viewUserInputEvents.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lineNumbers/lineNumbers.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/rangeUtil.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLine.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/margin/margin.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { LineInjectedText } from '../../common/textModelEvents.js';\nimport { ModelLineProjectionData } from '../../common/viewModel/modelLineProjectionData.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('domLineBreaksComputer', { createHTML: value => value });\nexport class DOMLineBreaksComputerFactory {\n    static create() {\n        return new DOMLineBreaksComputerFactory();\n    }\n    constructor() {\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent) {\n        const requests = [];\n        const injectedTexts = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n            },\n            finalize: () => {\n                return createLineBreaks(requests, fontInfo, tabSize, wrappingColumn, wrappingIndent, injectedTexts);\n            }\n        };\n    }\n}\nfunction createLineBreaks(requests, fontInfo, tabSize, firstLineBreakColumn, wrappingIndent, injectedTextsPerLine) {\n    var _a;\n    function createEmptyLineBreakWithPossiblyInjectedText(requestIdx) {\n        const injectedTexts = injectedTextsPerLine[requestIdx];\n        if (injectedTexts) {\n            const lineText = LineInjectedText.applyInjectedText(requests[requestIdx], injectedTexts);\n            const injectionOptions = injectedTexts.map(t => t.options);\n            const injectionOffsets = injectedTexts.map(text => text.column - 1);\n            // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n            // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n            return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n        }\n        else {\n            return null;\n        }\n    }\n    if (firstLineBreakColumn === -1) {\n        const result = [];\n        for (let i = 0, len = requests.length; i < len; i++) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n        }\n        return result;\n    }\n    const overallWidth = Math.round(firstLineBreakColumn * fontInfo.typicalHalfwidthCharacterWidth);\n    const additionalIndent = (wrappingIndent === 3 /* DeepIndent */ ? 2 : wrappingIndent === 2 /* Indent */ ? 1 : 0);\n    const additionalIndentSize = Math.round(tabSize * additionalIndent);\n    const additionalIndentLength = Math.ceil(fontInfo.spaceWidth * additionalIndentSize);\n    const containerDomNode = document.createElement('div');\n    applyFontInfo(containerDomNode, fontInfo);\n    const sb = createStringBuilder(10000);\n    const firstNonWhitespaceIndices = [];\n    const wrappedTextIndentLengths = [];\n    const renderLineContents = [];\n    const allCharOffsets = [];\n    const allVisibleColumns = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineContent = LineInjectedText.applyInjectedText(requests[i], injectedTextsPerLine[i]);\n        let firstNonWhitespaceIndex = 0;\n        let wrappedTextIndentLength = 0;\n        let width = overallWidth;\n        if (wrappingIndent !== 0 /* None */) {\n            firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n            if (firstNonWhitespaceIndex === -1) {\n                // all whitespace line\n                firstNonWhitespaceIndex = 0;\n            }\n            else {\n                // Track existing indent\n                for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                    const charWidth = (lineContent.charCodeAt(i) === 9 /* Tab */\n                        ? (tabSize - (wrappedTextIndentLength % tabSize))\n                        : 1);\n                    wrappedTextIndentLength += charWidth;\n                }\n                const indentWidth = Math.ceil(fontInfo.spaceWidth * wrappedTextIndentLength);\n                // Force sticking to beginning of line if no character would fit except for the indentation\n                if (indentWidth + fontInfo.typicalFullwidthCharacterWidth > overallWidth) {\n                    firstNonWhitespaceIndex = 0;\n                    wrappedTextIndentLength = 0;\n                }\n                else {\n                    width = overallWidth - indentWidth;\n                }\n            }\n        }\n        const renderLineContent = lineContent.substr(firstNonWhitespaceIndex);\n        const tmp = renderLine(renderLineContent, wrappedTextIndentLength, tabSize, width, sb, additionalIndentLength);\n        firstNonWhitespaceIndices[i] = firstNonWhitespaceIndex;\n        wrappedTextIndentLengths[i] = wrappedTextIndentLength;\n        renderLineContents[i] = renderLineContent;\n        allCharOffsets[i] = tmp[0];\n        allVisibleColumns[i] = tmp[1];\n    }\n    const html = sb.build();\n    const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(html)) !== null && _a !== void 0 ? _a : html;\n    containerDomNode.innerHTML = trustedhtml;\n    containerDomNode.style.position = 'absolute';\n    containerDomNode.style.top = '10000';\n    containerDomNode.style.wordWrap = 'break-word';\n    document.body.appendChild(containerDomNode);\n    const range = document.createRange();\n    const lineDomNodes = Array.prototype.slice.call(containerDomNode.children, 0);\n    const result = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineDomNode = lineDomNodes[i];\n        const breakOffsets = readLineBreaks(range, lineDomNode, renderLineContents[i], allCharOffsets[i]);\n        if (breakOffsets === null) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n            continue;\n        }\n        const firstNonWhitespaceIndex = firstNonWhitespaceIndices[i];\n        const wrappedTextIndentLength = wrappedTextIndentLengths[i] + additionalIndentSize;\n        const visibleColumns = allVisibleColumns[i];\n        const breakOffsetsVisibleColumn = [];\n        for (let j = 0, len = breakOffsets.length; j < len; j++) {\n            breakOffsetsVisibleColumn[j] = visibleColumns[breakOffsets[j]];\n        }\n        if (firstNonWhitespaceIndex !== 0) {\n            // All break offsets are relative to the renderLineContent, make them absolute again\n            for (let j = 0, len = breakOffsets.length; j < len; j++) {\n                breakOffsets[j] += firstNonWhitespaceIndex;\n            }\n        }\n        let injectionOptions;\n        let injectionOffsets;\n        const curInjectedTexts = injectedTextsPerLine[i];\n        if (curInjectedTexts) {\n            injectionOptions = curInjectedTexts.map(t => t.options);\n            injectionOffsets = curInjectedTexts.map(text => text.column - 1);\n        }\n        else {\n            injectionOptions = null;\n            injectionOffsets = null;\n        }\n        result[i] = new ModelLineProjectionData(injectionOffsets, injectionOptions, breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength);\n    }\n    document.body.removeChild(containerDomNode);\n    return result;\n}\nfunction renderLine(lineContent, initialVisibleColumn, tabSize, width, sb, wrappingIndentLength) {\n    if (wrappingIndentLength !== 0) {\n        const hangingOffset = String(wrappingIndentLength);\n        sb.appendASCIIString('<div style=\"text-indent: -');\n        sb.appendASCIIString(hangingOffset);\n        sb.appendASCIIString('px; padding-left: ');\n        sb.appendASCIIString(hangingOffset);\n        sb.appendASCIIString('px; box-sizing: border-box; width:');\n    }\n    else {\n        sb.appendASCIIString('<div style=\"width:');\n    }\n    sb.appendASCIIString(String(width));\n    sb.appendASCIIString('px;\">');\n    // if (containsRTL) {\n    // \tsb.appendASCIIString('\" dir=\"ltr');\n    // }\n    const len = lineContent.length;\n    let visibleColumn = initialVisibleColumn;\n    let charOffset = 0;\n    const charOffsets = [];\n    const visibleColumns = [];\n    let nextCharCode = (0 < len ? lineContent.charCodeAt(0) : 0 /* Null */);\n    sb.appendASCIIString('<span>');\n    for (let charIndex = 0; charIndex < len; charIndex++) {\n        if (charIndex !== 0 && charIndex % 16384 /* SPAN_MODULO_LIMIT */ === 0) {\n            sb.appendASCIIString('</span><span>');\n        }\n        charOffsets[charIndex] = charOffset;\n        visibleColumns[charIndex] = visibleColumn;\n        const charCode = nextCharCode;\n        nextCharCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* Null */);\n        let producedCharacters = 1;\n        let charWidth = 1;\n        switch (charCode) {\n            case 9 /* Tab */:\n                producedCharacters = (tabSize - (visibleColumn % tabSize));\n                charWidth = producedCharacters;\n                for (let space = 1; space <= producedCharacters; space++) {\n                    if (space < producedCharacters) {\n                        sb.write1(0xA0); // &nbsp;\n                    }\n                    else {\n                        sb.appendASCII(32 /* Space */);\n                    }\n                }\n                break;\n            case 32 /* Space */:\n                if (nextCharCode === 32 /* Space */) {\n                    sb.write1(0xA0); // &nbsp;\n                }\n                else {\n                    sb.appendASCII(32 /* Space */);\n                }\n                break;\n            case 60 /* LessThan */:\n                sb.appendASCIIString('&lt;');\n                break;\n            case 62 /* GreaterThan */:\n                sb.appendASCIIString('&gt;');\n                break;\n            case 38 /* Ampersand */:\n                sb.appendASCIIString('&amp;');\n                break;\n            case 0 /* Null */:\n                sb.appendASCIIString('&#00;');\n                break;\n            case 65279 /* UTF8_BOM */:\n            case 8232 /* LINE_SEPARATOR */:\n            case 8233 /* PARAGRAPH_SEPARATOR */:\n            case 133 /* NEXT_LINE */:\n                sb.write1(0xFFFD);\n                break;\n            default:\n                if (strings.isFullWidthCharacter(charCode)) {\n                    charWidth++;\n                }\n                if (charCode < 32) {\n                    sb.write1(9216 + charCode);\n                }\n                else {\n                    sb.write1(charCode);\n                }\n        }\n        charOffset += producedCharacters;\n        visibleColumn += charWidth;\n    }\n    sb.appendASCIIString('</span>');\n    charOffsets[lineContent.length] = charOffset;\n    visibleColumns[lineContent.length] = visibleColumn;\n    sb.appendASCIIString('</div>');\n    return [charOffsets, visibleColumns];\n}\nfunction readLineBreaks(range, lineDomNode, lineContent, charOffsets) {\n    if (lineContent.length <= 1) {\n        return null;\n    }\n    const spans = Array.prototype.slice.call(lineDomNode.children, 0);\n    const breakOffsets = [];\n    try {\n        discoverBreaks(range, spans, charOffsets, 0, null, lineContent.length - 1, null, breakOffsets);\n    }\n    catch (err) {\n        console.log(err);\n        return null;\n    }\n    if (breakOffsets.length === 0) {\n        return null;\n    }\n    breakOffsets.push(lineContent.length);\n    return breakOffsets;\n}\nfunction discoverBreaks(range, spans, charOffsets, low, lowRects, high, highRects, result) {\n    if (low === high) {\n        return;\n    }\n    lowRects = lowRects || readClientRect(range, spans, charOffsets[low], charOffsets[low + 1]);\n    highRects = highRects || readClientRect(range, spans, charOffsets[high], charOffsets[high + 1]);\n    if (Math.abs(lowRects[0].top - highRects[0].top) <= 0.1) {\n        // same line\n        return;\n    }\n    // there is at least one line break between these two offsets\n    if (low + 1 === high) {\n        // the two characters are adjacent, so the line break must be exactly between them\n        result.push(high);\n        return;\n    }\n    const mid = low + ((high - low) / 2) | 0;\n    const midRects = readClientRect(range, spans, charOffsets[mid], charOffsets[mid + 1]);\n    discoverBreaks(range, spans, charOffsets, low, lowRects, mid, midRects, result);\n    discoverBreaks(range, spans, charOffsets, mid, midRects, high, highRects, result);\n}\nfunction readClientRect(range, spans, startOffset, endOffset) {\n    range.setStart(spans[(startOffset / 16384 /* SPAN_MODULO_LIMIT */) | 0].firstChild, startOffset % 16384 /* SPAN_MODULO_LIMIT */);\n    range.setEnd(spans[(endOffset / 16384 /* SPAN_MODULO_LIMIT */) | 0].firstChild, endOffset % 16384 /* SPAN_MODULO_LIMIT */);\n    return range.getClientRects();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ViewEventHandler } from '../../common/viewModel/viewEventHandler.js';\nexport class DynamicViewOverlay extends ViewEventHandler {\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class RestrictedRenderingContext {\n    constructor(viewLayout, viewportData) {\n        this._restrictedRenderingContextBrand = undefined;\n        this._viewLayout = viewLayout;\n        this.viewportData = viewportData;\n        this.scrollWidth = this._viewLayout.getScrollWidth();\n        this.scrollHeight = this._viewLayout.getScrollHeight();\n        this.visibleRange = this.viewportData.visibleRange;\n        this.bigNumbersDelta = this.viewportData.bigNumbersDelta;\n        const vInfo = this._viewLayout.getCurrentViewport();\n        this.scrollTop = vInfo.top;\n        this.scrollLeft = vInfo.left;\n        this.viewportWidth = vInfo.width;\n        this.viewportHeight = vInfo.height;\n    }\n    getScrolledTopFromAbsoluteTop(absoluteTop) {\n        return absoluteTop - this.scrollTop;\n    }\n    getVerticalOffsetForLineNumber(lineNumber) {\n        return this._viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n    }\n    getDecorationsInViewport() {\n        return this.viewportData.getDecorationsInViewport();\n    }\n}\nexport class RenderingContext extends RestrictedRenderingContext {\n    constructor(viewLayout, viewportData, viewLines) {\n        super(viewLayout, viewportData);\n        this._renderingContextBrand = undefined;\n        this._viewLines = viewLines;\n    }\n    linesVisibleRangesForRange(range, includeNewLines) {\n        return this._viewLines.linesVisibleRangesForRange(range, includeNewLines);\n    }\n    visibleRangeForPosition(position) {\n        return this._viewLines.visibleRangeForPosition(position);\n    }\n}\nexport class LineVisibleRanges {\n    constructor(outsideRenderedLine, lineNumber, ranges) {\n        this.outsideRenderedLine = outsideRenderedLine;\n        this.lineNumber = lineNumber;\n        this.ranges = ranges;\n    }\n}\nexport class HorizontalRange {\n    constructor(left, width) {\n        this._horizontalRangeBrand = undefined;\n        this.left = Math.round(left);\n        this.width = Math.round(width);\n    }\n    static from(ranges) {\n        const result = new Array(ranges.length);\n        for (let i = 0, len = ranges.length; i < len; i++) {\n            const range = ranges[i];\n            result[i] = new HorizontalRange(range.left, range.width);\n        }\n        return result;\n    }\n    toString() {\n        return `[${this.left},${this.width}]`;\n    }\n}\nexport class FloatHorizontalRange {\n    constructor(left, width) {\n        this._floatHorizontalRangeBrand = undefined;\n        this.left = left;\n        this.width = width;\n    }\n    toString() {\n        return `[${this.left},${this.width}]`;\n    }\n    static compare(a, b) {\n        return a.left - b.left;\n    }\n}\nexport class HorizontalPosition {\n    constructor(outsideRenderedLine, left) {\n        this.outsideRenderedLine = outsideRenderedLine;\n        this.originalLeft = left;\n        this.left = Math.round(this.originalLeft);\n    }\n}\nexport class VisibleRanges {\n    constructor(outsideRenderedLine, ranges) {\n        this.outsideRenderedLine = outsideRenderedLine;\n        this.ranges = ranges;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\nexport class RenderedLinesCollection {\n    constructor(createLine) {\n        this._createLine = createLine;\n        this._set(1, []);\n    }\n    flush() {\n        this._set(1, []);\n    }\n    _set(rendLineNumberStart, lines) {\n        this._lines = lines;\n        this._rendLineNumberStart = rendLineNumberStart;\n    }\n    _get() {\n        return {\n            rendLineNumberStart: this._rendLineNumberStart,\n            lines: this._lines\n        };\n    }\n    /**\n     * @returns Inclusive line number that is inside this collection\n     */\n    getStartLineNumber() {\n        return this._rendLineNumberStart;\n    }\n    /**\n     * @returns Inclusive line number that is inside this collection\n     */\n    getEndLineNumber() {\n        return this._rendLineNumberStart + this._lines.length - 1;\n    }\n    getCount() {\n        return this._lines.length;\n    }\n    getLine(lineNumber) {\n        const lineIndex = lineNumber - this._rendLineNumberStart;\n        if (lineIndex < 0 || lineIndex >= this._lines.length) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        return this._lines[lineIndex];\n    }\n    /**\n     * @returns Lines that were removed from this collection\n     */\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        if (this.getCount() === 0) {\n            // no lines\n            return null;\n        }\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        if (deleteToLineNumber < startLineNumber) {\n            // deleting above the viewport\n            const deleteCnt = deleteToLineNumber - deleteFromLineNumber + 1;\n            this._rendLineNumberStart -= deleteCnt;\n            return null;\n        }\n        if (deleteFromLineNumber > endLineNumber) {\n            // deleted below the viewport\n            return null;\n        }\n        // Record what needs to be deleted\n        let deleteStartIndex = 0;\n        let deleteCount = 0;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - this._rendLineNumberStart;\n            if (deleteFromLineNumber <= lineNumber && lineNumber <= deleteToLineNumber) {\n                // this is a line to be deleted\n                if (deleteCount === 0) {\n                    // this is the first line to be deleted\n                    deleteStartIndex = lineIndex;\n                    deleteCount = 1;\n                }\n                else {\n                    deleteCount++;\n                }\n            }\n        }\n        // Adjust this._rendLineNumberStart for lines deleted above\n        if (deleteFromLineNumber < startLineNumber) {\n            // Something was deleted above\n            let deleteAboveCount = 0;\n            if (deleteToLineNumber < startLineNumber) {\n                // the entire deleted lines are above\n                deleteAboveCount = deleteToLineNumber - deleteFromLineNumber + 1;\n            }\n            else {\n                deleteAboveCount = startLineNumber - deleteFromLineNumber;\n            }\n            this._rendLineNumberStart -= deleteAboveCount;\n        }\n        const deleted = this._lines.splice(deleteStartIndex, deleteCount);\n        return deleted;\n    }\n    onLinesChanged(changeFromLineNumber, changeToLineNumber) {\n        if (this.getCount() === 0) {\n            // no lines\n            return false;\n        }\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        let someoneNotified = false;\n        for (let changedLineNumber = changeFromLineNumber; changedLineNumber <= changeToLineNumber; changedLineNumber++) {\n            if (changedLineNumber >= startLineNumber && changedLineNumber <= endLineNumber) {\n                // Notify the line\n                this._lines[changedLineNumber - this._rendLineNumberStart].onContentChanged();\n                someoneNotified = true;\n            }\n        }\n        return someoneNotified;\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        if (this.getCount() === 0) {\n            // no lines\n            return null;\n        }\n        const insertCnt = insertToLineNumber - insertFromLineNumber + 1;\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        if (insertFromLineNumber <= startLineNumber) {\n            // inserting above the viewport\n            this._rendLineNumberStart += insertCnt;\n            return null;\n        }\n        if (insertFromLineNumber > endLineNumber) {\n            // inserting below the viewport\n            return null;\n        }\n        if (insertCnt + insertFromLineNumber > endLineNumber) {\n            // insert inside the viewport in such a way that all remaining lines are pushed outside\n            const deleted = this._lines.splice(insertFromLineNumber - this._rendLineNumberStart, endLineNumber - insertFromLineNumber + 1);\n            return deleted;\n        }\n        // insert inside the viewport, push out some lines, but not all remaining lines\n        const newLines = [];\n        for (let i = 0; i < insertCnt; i++) {\n            newLines[i] = this._createLine();\n        }\n        const insertIndex = insertFromLineNumber - this._rendLineNumberStart;\n        const beforeLines = this._lines.slice(0, insertIndex);\n        const afterLines = this._lines.slice(insertIndex, this._lines.length - insertCnt);\n        const deletedLines = this._lines.slice(this._lines.length - insertCnt, this._lines.length);\n        this._lines = beforeLines.concat(newLines).concat(afterLines);\n        return deletedLines;\n    }\n    onTokensChanged(ranges) {\n        if (this.getCount() === 0) {\n            // no lines\n            return false;\n        }\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        let notifiedSomeone = false;\n        for (let i = 0, len = ranges.length; i < len; i++) {\n            const rng = ranges[i];\n            if (rng.toLineNumber < startLineNumber || rng.fromLineNumber > endLineNumber) {\n                // range outside viewport\n                continue;\n            }\n            const from = Math.max(startLineNumber, rng.fromLineNumber);\n            const to = Math.min(endLineNumber, rng.toLineNumber);\n            for (let lineNumber = from; lineNumber <= to; lineNumber++) {\n                const lineIndex = lineNumber - this._rendLineNumberStart;\n                this._lines[lineIndex].onTokensChanged();\n                notifiedSomeone = true;\n            }\n        }\n        return notifiedSomeone;\n    }\n}\nexport class VisibleLinesCollection {\n    constructor(host) {\n        this._host = host;\n        this.domNode = this._createDomNode();\n        this._linesCollection = new RenderedLinesCollection(() => this._host.createVisibleLine());\n    }\n    _createDomNode() {\n        const domNode = createFastDomNode(document.createElement('div'));\n        domNode.setClassName('view-layer');\n        domNode.setPosition('absolute');\n        domNode.domNode.setAttribute('role', 'presentation');\n        domNode.domNode.setAttribute('aria-hidden', 'true');\n        return domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(131 /* layoutInfo */)) {\n            return true;\n        }\n        return false;\n    }\n    onFlushed(e) {\n        this._linesCollection.flush();\n        // No need to clear the dom node because a full .innerHTML will occur in ViewLayerRenderer._render\n        return true;\n    }\n    onLinesChanged(e) {\n        return this._linesCollection.onLinesChanged(e.fromLineNumber, e.toLineNumber);\n    }\n    onLinesDeleted(e) {\n        const deleted = this._linesCollection.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n        if (deleted) {\n            // Remove from DOM\n            for (let i = 0, len = deleted.length; i < len; i++) {\n                const lineDomNode = deleted[i].getDomNode();\n                if (lineDomNode) {\n                    this.domNode.domNode.removeChild(lineDomNode);\n                }\n            }\n        }\n        return true;\n    }\n    onLinesInserted(e) {\n        const deleted = this._linesCollection.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n        if (deleted) {\n            // Remove from DOM\n            for (let i = 0, len = deleted.length; i < len; i++) {\n                const lineDomNode = deleted[i].getDomNode();\n                if (lineDomNode) {\n                    this.domNode.domNode.removeChild(lineDomNode);\n                }\n            }\n        }\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onTokensChanged(e) {\n        return this._linesCollection.onTokensChanged(e.ranges);\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    getStartLineNumber() {\n        return this._linesCollection.getStartLineNumber();\n    }\n    getEndLineNumber() {\n        return this._linesCollection.getEndLineNumber();\n    }\n    getVisibleLine(lineNumber) {\n        return this._linesCollection.getLine(lineNumber);\n    }\n    renderLines(viewportData) {\n        const inp = this._linesCollection._get();\n        const renderer = new ViewLayerRenderer(this.domNode.domNode, this._host, viewportData);\n        const ctx = {\n            rendLineNumberStart: inp.rendLineNumberStart,\n            lines: inp.lines,\n            linesLength: inp.lines.length\n        };\n        // Decide if this render will do a single update (single large .innerHTML) or many updates (inserting/removing dom nodes)\n        const resCtx = renderer.render(ctx, viewportData.startLineNumber, viewportData.endLineNumber, viewportData.relativeVerticalOffset);\n        this._linesCollection._set(resCtx.rendLineNumberStart, resCtx.lines);\n    }\n}\nclass ViewLayerRenderer {\n    constructor(domNode, host, viewportData) {\n        this.domNode = domNode;\n        this.host = host;\n        this.viewportData = viewportData;\n    }\n    render(inContext, startLineNumber, stopLineNumber, deltaTop) {\n        const ctx = {\n            rendLineNumberStart: inContext.rendLineNumberStart,\n            lines: inContext.lines.slice(0),\n            linesLength: inContext.linesLength\n        };\n        if ((ctx.rendLineNumberStart + ctx.linesLength - 1 < startLineNumber) || (stopLineNumber < ctx.rendLineNumberStart)) {\n            // There is no overlap whatsoever\n            ctx.rendLineNumberStart = startLineNumber;\n            ctx.linesLength = stopLineNumber - startLineNumber + 1;\n            ctx.lines = [];\n            for (let x = startLineNumber; x <= stopLineNumber; x++) {\n                ctx.lines[x - startLineNumber] = this.host.createVisibleLine();\n            }\n            this._finishRendering(ctx, true, deltaTop);\n            return ctx;\n        }\n        // Update lines which will remain untouched\n        this._renderUntouchedLines(ctx, Math.max(startLineNumber - ctx.rendLineNumberStart, 0), Math.min(stopLineNumber - ctx.rendLineNumberStart, ctx.linesLength - 1), deltaTop, startLineNumber);\n        if (ctx.rendLineNumberStart > startLineNumber) {\n            // Insert lines before\n            const fromLineNumber = startLineNumber;\n            const toLineNumber = Math.min(stopLineNumber, ctx.rendLineNumberStart - 1);\n            if (fromLineNumber <= toLineNumber) {\n                this._insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n                ctx.linesLength += toLineNumber - fromLineNumber + 1;\n            }\n        }\n        else if (ctx.rendLineNumberStart < startLineNumber) {\n            // Remove lines before\n            const removeCnt = Math.min(ctx.linesLength, startLineNumber - ctx.rendLineNumberStart);\n            if (removeCnt > 0) {\n                this._removeLinesBefore(ctx, removeCnt);\n                ctx.linesLength -= removeCnt;\n            }\n        }\n        ctx.rendLineNumberStart = startLineNumber;\n        if (ctx.rendLineNumberStart + ctx.linesLength - 1 < stopLineNumber) {\n            // Insert lines after\n            const fromLineNumber = ctx.rendLineNumberStart + ctx.linesLength;\n            const toLineNumber = stopLineNumber;\n            if (fromLineNumber <= toLineNumber) {\n                this._insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n                ctx.linesLength += toLineNumber - fromLineNumber + 1;\n            }\n        }\n        else if (ctx.rendLineNumberStart + ctx.linesLength - 1 > stopLineNumber) {\n            // Remove lines after\n            const fromLineNumber = Math.max(0, stopLineNumber - ctx.rendLineNumberStart + 1);\n            const toLineNumber = ctx.linesLength - 1;\n            const removeCnt = toLineNumber - fromLineNumber + 1;\n            if (removeCnt > 0) {\n                this._removeLinesAfter(ctx, removeCnt);\n                ctx.linesLength -= removeCnt;\n            }\n        }\n        this._finishRendering(ctx, false, deltaTop);\n        return ctx;\n    }\n    _renderUntouchedLines(ctx, startIndex, endIndex, deltaTop, deltaLN) {\n        const rendLineNumberStart = ctx.rendLineNumberStart;\n        const lines = ctx.lines;\n        for (let i = startIndex; i <= endIndex; i++) {\n            const lineNumber = rendLineNumberStart + i;\n            lines[i].layoutLine(lineNumber, deltaTop[lineNumber - deltaLN]);\n        }\n    }\n    _insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n        const newLines = [];\n        let newLinesLen = 0;\n        for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n            newLines[newLinesLen++] = this.host.createVisibleLine();\n        }\n        ctx.lines = newLines.concat(ctx.lines);\n    }\n    _removeLinesBefore(ctx, removeCount) {\n        for (let i = 0; i < removeCount; i++) {\n            const lineDomNode = ctx.lines[i].getDomNode();\n            if (lineDomNode) {\n                this.domNode.removeChild(lineDomNode);\n            }\n        }\n        ctx.lines.splice(0, removeCount);\n    }\n    _insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n        const newLines = [];\n        let newLinesLen = 0;\n        for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n            newLines[newLinesLen++] = this.host.createVisibleLine();\n        }\n        ctx.lines = ctx.lines.concat(newLines);\n    }\n    _removeLinesAfter(ctx, removeCount) {\n        const removeIndex = ctx.linesLength - removeCount;\n        for (let i = 0; i < removeCount; i++) {\n            const lineDomNode = ctx.lines[removeIndex + i].getDomNode();\n            if (lineDomNode) {\n                this.domNode.removeChild(lineDomNode);\n            }\n        }\n        ctx.lines.splice(removeIndex, removeCount);\n    }\n    _finishRenderingNewLines(ctx, domNodeIsEmpty, newLinesHTML, wasNew) {\n        if (ViewLayerRenderer._ttPolicy) {\n            newLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(newLinesHTML);\n        }\n        const lastChild = this.domNode.lastChild;\n        if (domNodeIsEmpty || !lastChild) {\n            this.domNode.innerHTML = newLinesHTML; // explains the ugly casts -> https://github.com/microsoft/vscode/issues/106396#issuecomment-692625393;\n        }\n        else {\n            lastChild.insertAdjacentHTML('afterend', newLinesHTML);\n        }\n        let currChild = this.domNode.lastChild;\n        for (let i = ctx.linesLength - 1; i >= 0; i--) {\n            const line = ctx.lines[i];\n            if (wasNew[i]) {\n                line.setDomNode(currChild);\n                currChild = currChild.previousSibling;\n            }\n        }\n    }\n    _finishRenderingInvalidLines(ctx, invalidLinesHTML, wasInvalid) {\n        const hugeDomNode = document.createElement('div');\n        if (ViewLayerRenderer._ttPolicy) {\n            invalidLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(invalidLinesHTML);\n        }\n        hugeDomNode.innerHTML = invalidLinesHTML;\n        for (let i = 0; i < ctx.linesLength; i++) {\n            const line = ctx.lines[i];\n            if (wasInvalid[i]) {\n                const source = hugeDomNode.firstChild;\n                const lineDomNode = line.getDomNode();\n                lineDomNode.parentNode.replaceChild(source, lineDomNode);\n                line.setDomNode(source);\n            }\n        }\n    }\n    _finishRendering(ctx, domNodeIsEmpty, deltaTop) {\n        const sb = ViewLayerRenderer._sb;\n        const linesLength = ctx.linesLength;\n        const lines = ctx.lines;\n        const rendLineNumberStart = ctx.rendLineNumberStart;\n        const wasNew = [];\n        {\n            sb.reset();\n            let hadNewLine = false;\n            for (let i = 0; i < linesLength; i++) {\n                const line = lines[i];\n                wasNew[i] = false;\n                const lineDomNode = line.getDomNode();\n                if (lineDomNode) {\n                    // line is not new\n                    continue;\n                }\n                const renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\n                if (!renderResult) {\n                    // line does not need rendering\n                    continue;\n                }\n                wasNew[i] = true;\n                hadNewLine = true;\n            }\n            if (hadNewLine) {\n                this._finishRenderingNewLines(ctx, domNodeIsEmpty, sb.build(), wasNew);\n            }\n        }\n        {\n            sb.reset();\n            let hadInvalidLine = false;\n            const wasInvalid = [];\n            for (let i = 0; i < linesLength; i++) {\n                const line = lines[i];\n                wasInvalid[i] = false;\n                if (wasNew[i]) {\n                    // line was new\n                    continue;\n                }\n                const renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this.viewportData, sb);\n                if (!renderResult) {\n                    // line does not need rendering\n                    continue;\n                }\n                wasInvalid[i] = true;\n                hadInvalidLine = true;\n            }\n            if (hadInvalidLine) {\n                this._finishRenderingInvalidLines(ctx, sb.build(), wasInvalid);\n            }\n        }\n    }\n}\nViewLayerRenderer._ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('editorViewLayer', { createHTML: value => value });\nViewLayerRenderer._sb = createStringBuilder(100000);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CoreNavigationCommands } from '../controller/coreCommands.js';\nimport { Position } from '../../common/core/position.js';\nimport * as platform from '../../../base/common/platform.js';\nexport class ViewController {\n    constructor(configuration, viewModel, userInputEvents, commandDelegate) {\n        this.configuration = configuration;\n        this.viewModel = viewModel;\n        this.userInputEvents = userInputEvents;\n        this.commandDelegate = commandDelegate;\n    }\n    paste(text, pasteOnNewLine, multicursorText, mode) {\n        this.commandDelegate.paste(text, pasteOnNewLine, multicursorText, mode);\n    }\n    type(text) {\n        this.commandDelegate.type(text);\n    }\n    compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n        this.commandDelegate.compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta);\n    }\n    compositionStart() {\n        this.commandDelegate.startComposition();\n    }\n    compositionEnd() {\n        this.commandDelegate.endComposition();\n    }\n    cut() {\n        this.commandDelegate.cut();\n    }\n    setSelection(modelSelection) {\n        CoreNavigationCommands.SetSelection.runCoreEditorCommand(this.viewModel, {\n            source: 'keyboard',\n            selection: modelSelection\n        });\n    }\n    _validateViewColumn(viewPosition) {\n        const minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\n        if (viewPosition.column < minColumn) {\n            return new Position(viewPosition.lineNumber, minColumn);\n        }\n        return viewPosition;\n    }\n    _hasMulticursorModifier(data) {\n        switch (this.configuration.options.get(70 /* multiCursorModifier */)) {\n            case 'altKey':\n                return data.altKey;\n            case 'ctrlKey':\n                return data.ctrlKey;\n            case 'metaKey':\n                return data.metaKey;\n            default:\n                return false;\n        }\n    }\n    _hasNonMulticursorModifier(data) {\n        switch (this.configuration.options.get(70 /* multiCursorModifier */)) {\n            case 'altKey':\n                return data.ctrlKey || data.metaKey;\n            case 'ctrlKey':\n                return data.altKey || data.metaKey;\n            case 'metaKey':\n                return data.ctrlKey || data.altKey;\n            default:\n                return false;\n        }\n    }\n    dispatchMouse(data) {\n        const options = this.configuration.options;\n        const selectionClipboardIsOn = (platform.isLinux && options.get(96 /* selectionClipboard */));\n        const columnSelection = options.get(18 /* columnSelection */);\n        if (data.middleButton && !selectionClipboardIsOn) {\n            this._columnSelect(data.position, data.mouseColumn, data.inSelectionMode);\n        }\n        else if (data.startedOnLineNumbers) {\n            // If the dragging started on the gutter, then have operations work on the entire line\n            if (this._hasMulticursorModifier(data)) {\n                if (data.inSelectionMode) {\n                    this._lastCursorLineSelect(data.position);\n                }\n                else {\n                    this._createCursor(data.position, true);\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._lineSelectDrag(data.position);\n                }\n                else {\n                    this._lineSelect(data.position);\n                }\n            }\n        }\n        else if (data.mouseDownCount >= 4) {\n            this._selectAll();\n        }\n        else if (data.mouseDownCount === 3) {\n            if (this._hasMulticursorModifier(data)) {\n                if (data.inSelectionMode) {\n                    this._lastCursorLineSelectDrag(data.position);\n                }\n                else {\n                    this._lastCursorLineSelect(data.position);\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._lineSelectDrag(data.position);\n                }\n                else {\n                    this._lineSelect(data.position);\n                }\n            }\n        }\n        else if (data.mouseDownCount === 2) {\n            if (this._hasMulticursorModifier(data)) {\n                this._lastCursorWordSelect(data.position);\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._wordSelectDrag(data.position);\n                }\n                else {\n                    this._wordSelect(data.position);\n                }\n            }\n        }\n        else {\n            if (this._hasMulticursorModifier(data)) {\n                if (!this._hasNonMulticursorModifier(data)) {\n                    if (data.shiftKey) {\n                        this._columnSelect(data.position, data.mouseColumn, true);\n                    }\n                    else {\n                        // Do multi-cursor operations only when purely alt is pressed\n                        if (data.inSelectionMode) {\n                            this._lastCursorMoveToSelect(data.position);\n                        }\n                        else {\n                            this._createCursor(data.position, false);\n                        }\n                    }\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    if (data.altKey) {\n                        this._columnSelect(data.position, data.mouseColumn, true);\n                    }\n                    else {\n                        if (columnSelection) {\n                            this._columnSelect(data.position, data.mouseColumn, true);\n                        }\n                        else {\n                            this._moveToSelect(data.position);\n                        }\n                    }\n                }\n                else {\n                    this.moveTo(data.position);\n                }\n            }\n        }\n    }\n    _usualArgs(viewPosition) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        return {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition\n        };\n    }\n    moveTo(viewPosition) {\n        CoreNavigationCommands.MoveTo.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _moveToSelect(viewPosition) {\n        CoreNavigationCommands.MoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _columnSelect(viewPosition, mouseColumn, doColumnSelect) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        CoreNavigationCommands.ColumnSelect.runCoreEditorCommand(this.viewModel, {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition,\n            mouseColumn: mouseColumn,\n            doColumnSelect: doColumnSelect\n        });\n    }\n    _createCursor(viewPosition, wholeLine) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        CoreNavigationCommands.CreateCursor.runCoreEditorCommand(this.viewModel, {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition,\n            wholeLine: wholeLine\n        });\n    }\n    _lastCursorMoveToSelect(viewPosition) {\n        CoreNavigationCommands.LastCursorMoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _wordSelect(viewPosition) {\n        CoreNavigationCommands.WordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _wordSelectDrag(viewPosition) {\n        CoreNavigationCommands.WordSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lastCursorWordSelect(viewPosition) {\n        CoreNavigationCommands.LastCursorWordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lineSelect(viewPosition) {\n        CoreNavigationCommands.LineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lineSelectDrag(viewPosition) {\n        CoreNavigationCommands.LineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lastCursorLineSelect(viewPosition) {\n        CoreNavigationCommands.LastCursorLineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _lastCursorLineSelectDrag(viewPosition) {\n        CoreNavigationCommands.LastCursorLineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition));\n    }\n    _selectAll() {\n        CoreNavigationCommands.SelectAll.runCoreEditorCommand(this.viewModel, { source: 'mouse' });\n    }\n    // ----------------------\n    _convertViewToModelPosition(viewPosition) {\n        return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\n    }\n    emitKeyDown(e) {\n        this.userInputEvents.emitKeyDown(e);\n    }\n    emitKeyUp(e) {\n        this.userInputEvents.emitKeyUp(e);\n    }\n    emitContextMenu(e) {\n        this.userInputEvents.emitContextMenu(e);\n    }\n    emitMouseMove(e) {\n        this.userInputEvents.emitMouseMove(e);\n    }\n    emitMouseLeave(e) {\n        this.userInputEvents.emitMouseLeave(e);\n    }\n    emitMouseUp(e) {\n        this.userInputEvents.emitMouseUp(e);\n    }\n    emitMouseDown(e) {\n        this.userInputEvents.emitMouseDown(e);\n    }\n    emitMouseDrag(e) {\n        this.userInputEvents.emitMouseDrag(e);\n    }\n    emitMouseDrop(e) {\n        this.userInputEvents.emitMouseDrop(e);\n    }\n    emitMouseDropCanceled() {\n        this.userInputEvents.emitMouseDropCanceled();\n    }\n    emitMouseWheel(e) {\n        this.userInputEvents.emitMouseWheel(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { VisibleLinesCollection } from './viewLayer.js';\nimport { ViewPart } from './viewPart.js';\nexport class ViewOverlays extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._visibleLines = new VisibleLinesCollection(this);\n        this.domNode = this._visibleLines.domNode;\n        this._dynamicOverlays = [];\n        this._isFocused = false;\n        this.domNode.setClassName('view-overlays');\n    }\n    shouldRender() {\n        if (super.shouldRender()) {\n            return true;\n        }\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            if (dynamicOverlay.shouldRender()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    dispose() {\n        super.dispose();\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            dynamicOverlay.dispose();\n        }\n        this._dynamicOverlays = [];\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    // ---- begin IVisibleLinesHost\n    createVisibleLine() {\n        return new ViewOverlayLine(this._context.configuration, this._dynamicOverlays);\n    }\n    // ---- end IVisibleLinesHost\n    addDynamicOverlay(overlay) {\n        this._dynamicOverlays.push(overlay);\n    }\n    // ----- event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const line = this._visibleLines.getVisibleLine(lineNumber);\n            line.onConfigurationChanged(e);\n        }\n        return true;\n    }\n    onFlushed(e) {\n        return this._visibleLines.onFlushed(e);\n    }\n    onFocusChanged(e) {\n        this._isFocused = e.isFocused;\n        return true;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onScrollChanged(e) {\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        return this._visibleLines.onZonesChanged(e);\n    }\n    // ----- end event handlers\n    prepareRender(ctx) {\n        const toRender = this._dynamicOverlays.filter(overlay => overlay.shouldRender());\n        for (let i = 0, len = toRender.length; i < len; i++) {\n            const dynamicOverlay = toRender[i];\n            dynamicOverlay.prepareRender(ctx);\n            dynamicOverlay.onDidRender();\n        }\n    }\n    render(ctx) {\n        // Overwriting to bypass `shouldRender` flag\n        this._viewOverlaysRender(ctx);\n        this.domNode.toggleClassName('focused', this._isFocused);\n    }\n    _viewOverlaysRender(ctx) {\n        this._visibleLines.renderLines(ctx.viewportData);\n    }\n}\nexport class ViewOverlayLine {\n    constructor(configuration, dynamicOverlays) {\n        this._configuration = configuration;\n        this._lineHeight = this._configuration.options.get(59 /* lineHeight */);\n        this._dynamicOverlays = dynamicOverlays;\n        this._domNode = null;\n        this._renderedContent = null;\n    }\n    getDomNode() {\n        if (!this._domNode) {\n            return null;\n        }\n        return this._domNode.domNode;\n    }\n    setDomNode(domNode) {\n        this._domNode = createFastDomNode(domNode);\n    }\n    onContentChanged() {\n        // Nothing\n    }\n    onTokensChanged() {\n        // Nothing\n    }\n    onConfigurationChanged(e) {\n        this._lineHeight = this._configuration.options.get(59 /* lineHeight */);\n    }\n    renderLine(lineNumber, deltaTop, viewportData, sb) {\n        let result = '';\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            result += dynamicOverlay.render(viewportData.startLineNumber, lineNumber);\n        }\n        if (this._renderedContent === result) {\n            // No rendering needed\n            return false;\n        }\n        this._renderedContent = result;\n        sb.appendASCIIString('<div style=\"position:absolute;top:');\n        sb.appendASCIIString(String(deltaTop));\n        sb.appendASCIIString('px;width:100%;height:');\n        sb.appendASCIIString(String(this._lineHeight));\n        sb.appendASCIIString('px;\">');\n        sb.appendASCIIString(result);\n        sb.appendASCIIString('</div>');\n        return true;\n    }\n    layoutLine(lineNumber, deltaTop) {\n        if (this._domNode) {\n            this._domNode.setTop(deltaTop);\n            this._domNode.setHeight(this._lineHeight);\n        }\n    }\n}\nexport class ContentViewOverlays extends ViewOverlays {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this.domNode.setHeight(0);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._contentWidth = layoutInfo.contentWidth;\n        return super.onConfigurationChanged(e) || true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollWidthChanged;\n    }\n    // --- end event handlers\n    _viewOverlaysRender(ctx) {\n        super._viewOverlaysRender(ctx);\n        this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n    }\n}\nexport class MarginViewOverlays extends ViewOverlays {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this.domNode.setClassName('margin-view-overlays');\n        this.domNode.setWidth(1);\n        applyFontInfo(this.domNode, options.get(44 /* fontInfo */));\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        applyFontInfo(this.domNode, options.get(44 /* fontInfo */));\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._contentLeft = layoutInfo.contentLeft;\n        return super.onConfigurationChanged(e) || true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollHeightChanged;\n    }\n    _viewOverlaysRender(ctx) {\n        super._viewOverlaysRender(ctx);\n        const height = Math.min(ctx.scrollHeight, 1000000);\n        this.domNode.setHeight(height);\n        this.domNode.setWidth(this._contentLeft);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nclass Coordinate {\n    constructor(top, left) {\n        this._coordinateBrand = undefined;\n        this.top = top;\n        this.left = left;\n    }\n}\nexport class ViewContentWidgets extends ViewPart {\n    constructor(context, viewDomNode) {\n        super(context);\n        this._viewDomNode = viewDomNode;\n        this._widgets = {};\n        this.domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.domNode, 1 /* ContentWidgets */);\n        this.domNode.setClassName('contentWidgets');\n        this.domNode.setPosition('absolute');\n        this.domNode.setTop(0);\n        this.overflowingContentWidgetsDomNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.overflowingContentWidgetsDomNode, 2 /* OverflowingContentWidgets */);\n        this.overflowingContentWidgetsDomNode.setClassName('overflowingContentWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLineMappingChanged(e) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onLineMappingChanged(e);\n        }\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    addWidget(_widget) {\n        const myWidget = new Widget(this._context, this._viewDomNode, _widget);\n        this._widgets[myWidget.id] = myWidget;\n        if (myWidget.allowEditorOverflow) {\n            this.overflowingContentWidgetsDomNode.appendChild(myWidget.domNode);\n        }\n        else {\n            this.domNode.appendChild(myWidget.domNode);\n        }\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, range, preference) {\n        const myWidget = this._widgets[widget.getId()];\n        myWidget.setPosition(range, preference);\n        this.setShouldRender();\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const myWidget = this._widgets[widgetId];\n            delete this._widgets[widgetId];\n            const domNode = myWidget.domNode.domNode;\n            domNode.parentNode.removeChild(domNode);\n            domNode.removeAttribute('monaco-visible-content-widget');\n            this.setShouldRender();\n        }\n    }\n    shouldSuppressMouseDownOnWidget(widgetId) {\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            return this._widgets[widgetId].suppressMouseDown;\n        }\n        return false;\n    }\n    onBeforeRender(viewportData) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onBeforeRender(viewportData);\n        }\n    }\n    prepareRender(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].render(ctx);\n        }\n    }\n}\nclass Widget {\n    constructor(context, viewDomNode, actual) {\n        this._context = context;\n        this._viewDomNode = viewDomNode;\n        this._actual = actual;\n        this.domNode = createFastDomNode(this._actual.getDomNode());\n        this.id = this._actual.getId();\n        this.allowEditorOverflow = this._actual.allowEditorOverflow || false;\n        this.suppressMouseDown = this._actual.suppressMouseDown || false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._fixedOverflowWidgets = options.get(36 /* fixedOverflowWidgets */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._range = null;\n        this._viewRange = null;\n        this._preference = [];\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n        this._maxWidth = this._getMaxWidth();\n        this._isVisible = false;\n        this._renderData = null;\n        this.domNode.setPosition((this._fixedOverflowWidgets && this.allowEditorOverflow) ? 'fixed' : 'absolute');\n        this.domNode.setDisplay('none');\n        this.domNode.setVisibility('hidden');\n        this.domNode.setAttribute('widgetId', this.id);\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        if (e.hasChanged(131 /* layoutInfo */)) {\n            const layoutInfo = options.get(131 /* layoutInfo */);\n            this._contentLeft = layoutInfo.contentLeft;\n            this._contentWidth = layoutInfo.contentWidth;\n            this._maxWidth = this._getMaxWidth();\n        }\n    }\n    onLineMappingChanged(e) {\n        this._setPosition(this._range);\n    }\n    _setPosition(range) {\n        this._range = range;\n        this._viewRange = null;\n        if (this._range) {\n            // Do not trust that widgets give a valid position\n            const validModelRange = this._context.model.validateModelRange(this._range);\n            if (this._context.model.coordinatesConverter.modelPositionIsVisible(validModelRange.getStartPosition()) || this._context.model.coordinatesConverter.modelPositionIsVisible(validModelRange.getEndPosition())) {\n                this._viewRange = this._context.model.coordinatesConverter.convertModelRangeToViewRange(validModelRange);\n            }\n        }\n    }\n    _getMaxWidth() {\n        return (this.allowEditorOverflow\n            ? window.innerWidth || document.documentElement.offsetWidth || document.body.offsetWidth\n            : this._contentWidth);\n    }\n    setPosition(range, preference) {\n        this._setPosition(range);\n        this._preference = preference;\n        if (this._viewRange && this._preference && this._preference.length > 0) {\n            // this content widget would like to be visible if possible\n            // we change it from `display:none` to `display:block` even if it\n            // might be outside the viewport such that we can measure its size\n            // in `prepareRender`\n            this.domNode.setDisplay('block');\n        }\n        else {\n            this.domNode.setDisplay('none');\n        }\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n    }\n    _layoutBoxInViewport(topLeft, bottomLeft, width, height, ctx) {\n        // Our visible box is split horizontally by the current line => 2 boxes\n        // a) the box above the line\n        const aboveLineTop = topLeft.top;\n        const heightAboveLine = aboveLineTop;\n        // b) the box under the line\n        const underLineTop = bottomLeft.top + this._lineHeight;\n        const heightUnderLine = ctx.viewportHeight - underLineTop;\n        const aboveTop = aboveLineTop - height;\n        const fitsAbove = (heightAboveLine >= height);\n        const belowTop = underLineTop;\n        const fitsBelow = (heightUnderLine >= height);\n        // And its left\n        let actualAboveLeft = topLeft.left;\n        let actualBelowLeft = bottomLeft.left;\n        if (actualAboveLeft + width > ctx.scrollLeft + ctx.viewportWidth) {\n            actualAboveLeft = ctx.scrollLeft + ctx.viewportWidth - width;\n        }\n        if (actualBelowLeft + width > ctx.scrollLeft + ctx.viewportWidth) {\n            actualBelowLeft = ctx.scrollLeft + ctx.viewportWidth - width;\n        }\n        if (actualAboveLeft < ctx.scrollLeft) {\n            actualAboveLeft = ctx.scrollLeft;\n        }\n        if (actualBelowLeft < ctx.scrollLeft) {\n            actualBelowLeft = ctx.scrollLeft;\n        }\n        return {\n            fitsAbove: fitsAbove,\n            aboveTop: aboveTop,\n            aboveLeft: actualAboveLeft,\n            fitsBelow: fitsBelow,\n            belowTop: belowTop,\n            belowLeft: actualBelowLeft,\n        };\n    }\n    _layoutHorizontalSegmentInPage(windowSize, domNodePosition, left, width) {\n        // Initially, the limits are defined as the dom node limits\n        const MIN_LIMIT = Math.max(0, domNodePosition.left - width);\n        const MAX_LIMIT = Math.min(domNodePosition.left + domNodePosition.width + width, windowSize.width);\n        let absoluteLeft = domNodePosition.left + left - dom.StandardWindow.scrollX;\n        if (absoluteLeft + width > MAX_LIMIT) {\n            const delta = absoluteLeft - (MAX_LIMIT - width);\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        if (absoluteLeft < MIN_LIMIT) {\n            const delta = absoluteLeft - MIN_LIMIT;\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        return [left, absoluteLeft];\n    }\n    _layoutBoxInPage(topLeft, bottomLeft, width, height, ctx) {\n        const aboveTop = topLeft.top - height;\n        const belowTop = bottomLeft.top + this._lineHeight;\n        const domNodePosition = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n        const absoluteAboveTop = domNodePosition.top + aboveTop - dom.StandardWindow.scrollY;\n        const absoluteBelowTop = domNodePosition.top + belowTop - dom.StandardWindow.scrollY;\n        const windowSize = dom.getClientArea(document.body);\n        const [aboveLeft, absoluteAboveLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, topLeft.left - ctx.scrollLeft + this._contentLeft, width);\n        const [belowLeft, absoluteBelowLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, bottomLeft.left - ctx.scrollLeft + this._contentLeft, width);\n        // Leave some clearance to the top/bottom\n        const TOP_PADDING = 22;\n        const BOTTOM_PADDING = 22;\n        const fitsAbove = (absoluteAboveTop >= TOP_PADDING);\n        const fitsBelow = (absoluteBelowTop + height <= windowSize.height - BOTTOM_PADDING);\n        if (this._fixedOverflowWidgets) {\n            return {\n                fitsAbove,\n                aboveTop: Math.max(absoluteAboveTop, TOP_PADDING),\n                aboveLeft: absoluteAboveLeft,\n                fitsBelow,\n                belowTop: absoluteBelowTop,\n                belowLeft: absoluteBelowLeft\n            };\n        }\n        return {\n            fitsAbove,\n            aboveTop: aboveTop,\n            aboveLeft,\n            fitsBelow,\n            belowTop,\n            belowLeft\n        };\n    }\n    _prepareRenderWidgetAtExactPositionOverflowing(topLeft) {\n        return new Coordinate(topLeft.top, topLeft.left + this._contentLeft);\n    }\n    /**\n     * Compute `this._topLeft`\n     */\n    _getTopAndBottomLeft(ctx) {\n        if (!this._viewRange) {\n            return [null, null];\n        }\n        const visibleRangesForRange = ctx.linesVisibleRangesForRange(this._viewRange, false);\n        if (!visibleRangesForRange || visibleRangesForRange.length === 0) {\n            return [null, null];\n        }\n        let firstLine = visibleRangesForRange[0];\n        let lastLine = visibleRangesForRange[0];\n        for (const visibleRangesForLine of visibleRangesForRange) {\n            if (visibleRangesForLine.lineNumber < firstLine.lineNumber) {\n                firstLine = visibleRangesForLine;\n            }\n            if (visibleRangesForLine.lineNumber > lastLine.lineNumber) {\n                lastLine = visibleRangesForLine;\n            }\n        }\n        let firstLineMinLeft = 1073741824 /* MAX_SAFE_SMALL_INTEGER */; //firstLine.Constants.MAX_SAFE_SMALL_INTEGER;\n        for (const visibleRange of firstLine.ranges) {\n            if (visibleRange.left < firstLineMinLeft) {\n                firstLineMinLeft = visibleRange.left;\n            }\n        }\n        let lastLineMinLeft = 1073741824 /* MAX_SAFE_SMALL_INTEGER */; //lastLine.Constants.MAX_SAFE_SMALL_INTEGER;\n        for (const visibleRange of lastLine.ranges) {\n            if (visibleRange.left < lastLineMinLeft) {\n                lastLineMinLeft = visibleRange.left;\n            }\n        }\n        const topForPosition = ctx.getVerticalOffsetForLineNumber(firstLine.lineNumber) - ctx.scrollTop;\n        const topLeft = new Coordinate(topForPosition, firstLineMinLeft);\n        const topForBottomLine = ctx.getVerticalOffsetForLineNumber(lastLine.lineNumber) - ctx.scrollTop;\n        const bottomLeft = new Coordinate(topForBottomLine, lastLineMinLeft);\n        return [topLeft, bottomLeft];\n    }\n    _prepareRenderWidget(ctx) {\n        if (!this._preference || this._preference.length === 0) {\n            return null;\n        }\n        const [topLeft, bottomLeft] = this._getTopAndBottomLeft(ctx);\n        if (!topLeft || !bottomLeft) {\n            return null;\n        }\n        if (this._cachedDomNodeOffsetWidth === -1 || this._cachedDomNodeOffsetHeight === -1) {\n            let preferredDimensions = null;\n            if (typeof this._actual.beforeRender === 'function') {\n                preferredDimensions = safeInvoke(this._actual.beforeRender, this._actual);\n            }\n            if (preferredDimensions) {\n                this._cachedDomNodeOffsetWidth = preferredDimensions.width;\n                this._cachedDomNodeOffsetHeight = preferredDimensions.height;\n            }\n            else {\n                const domNode = this.domNode.domNode;\n                this._cachedDomNodeOffsetWidth = domNode.offsetWidth;\n                this._cachedDomNodeOffsetHeight = domNode.offsetHeight;\n            }\n        }\n        let placement;\n        if (this.allowEditorOverflow) {\n            placement = this._layoutBoxInPage(topLeft, bottomLeft, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        else {\n            placement = this._layoutBoxInViewport(topLeft, bottomLeft, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        // Do two passes, first for perfect fit, second picks first option\n        for (let pass = 1; pass <= 2; pass++) {\n            for (const pref of this._preference) {\n                // placement\n                if (pref === 1 /* ABOVE */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsAbove) {\n                        return { coordinate: new Coordinate(placement.aboveTop, placement.aboveLeft), position: 1 /* ABOVE */ };\n                    }\n                }\n                else if (pref === 2 /* BELOW */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsBelow) {\n                        return { coordinate: new Coordinate(placement.belowTop, placement.belowLeft), position: 2 /* BELOW */ };\n                    }\n                }\n                else {\n                    if (this.allowEditorOverflow) {\n                        return { coordinate: this._prepareRenderWidgetAtExactPositionOverflowing(topLeft), position: 0 /* EXACT */ };\n                    }\n                    else {\n                        return { coordinate: topLeft, position: 0 /* EXACT */ };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * On this first pass, we ensure that the content widget (if it is in the viewport) has the max width set correctly.\n     */\n    onBeforeRender(viewportData) {\n        if (!this._viewRange || !this._preference) {\n            return;\n        }\n        if (this._viewRange.endLineNumber < viewportData.startLineNumber || this._viewRange.startLineNumber > viewportData.endLineNumber) {\n            // Outside of viewport\n            return;\n        }\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRenderWidget(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            // This widget should be invisible\n            if (this._isVisible) {\n                this.domNode.removeAttribute('monaco-visible-content-widget');\n                this._isVisible = false;\n                this.domNode.setVisibility('hidden');\n            }\n            if (typeof this._actual.afterRender === 'function') {\n                safeInvoke(this._actual.afterRender, this._actual, null);\n            }\n            return;\n        }\n        // This widget should be visible\n        if (this.allowEditorOverflow) {\n            this.domNode.setTop(this._renderData.coordinate.top);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        else {\n            this.domNode.setTop(this._renderData.coordinate.top + ctx.scrollTop - ctx.bigNumbersDelta);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        if (!this._isVisible) {\n            this.domNode.setVisibility('inherit');\n            this.domNode.setAttribute('monaco-visible-content-widget', 'true');\n            this._isVisible = true;\n        }\n        if (typeof this._actual.afterRender === 'function') {\n            safeInvoke(this._actual.afterRender, this._actual, this._renderData.position);\n        }\n    }\n}\nfunction safeInvoke(fn, thisArg, ...args) {\n    try {\n        return fn.call(thisArg, ...args);\n    }\n    catch (_a) {\n        // ignore\n        return null;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nexport class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._renderLineHighlight = options.get(85 /* renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(86 /* renderLineHighlightOnlyWhenFocus */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._selectionIsEmpty = true;\n        this._focused = false;\n        this._cursorLineNumbers = [1];\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderData = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    _readFromSelections() {\n        let hasChanged = false;\n        const cursorsLineNumbers = this._selections.map(s => s.positionLineNumber);\n        cursorsLineNumbers.sort((a, b) => a - b);\n        if (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n            this._cursorLineNumbers = cursorsLineNumbers;\n            hasChanged = true;\n        }\n        const selectionIsEmpty = this._selections.every(s => s.isEmpty());\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            hasChanged = true;\n        }\n        return hasChanged;\n    }\n    // --- begin event handlers\n    onThemeChanged(e) {\n        return this._readFromSelections();\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._renderLineHighlight = options.get(85 /* renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(86 /* renderLineHighlightOnlyWhenFocus */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return this._readFromSelections();\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollWidthChanged || e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        if (!this._renderLineHighlightOnlyWhenFocus) {\n            return false;\n        }\n        this._focused = e.isFocused;\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (!this._shouldRenderThis()) {\n            this._renderData = null;\n            return;\n        }\n        const renderedLine = this._renderOne(ctx);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const len = this._cursorLineNumbers.length;\n        let index = 0;\n        const renderData = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            while (index < len && this._cursorLineNumbers[index] < lineNumber) {\n                index++;\n            }\n            if (index < len && this._cursorLineNumbers[index] === lineNumber) {\n                renderData[lineIndex] = renderedLine;\n            }\n            else {\n                renderData[lineIndex] = '';\n            }\n        }\n        this._renderData = renderData;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderData) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex >= this._renderData.length) {\n            return '';\n        }\n        return this._renderData[lineIndex];\n    }\n    _shouldRenderInMargin() {\n        return ((this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n    _shouldRenderInContent() {\n        return ((this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n            && this._selectionIsEmpty\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n}\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx) {\n        const className = 'current-line' + (this._shouldRenderOther() ? ' current-line-both' : '');\n        return `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return this._shouldRenderInContent();\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInMargin();\n    }\n}\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx) {\n        const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '');\n        return `<div class=\"${className}\" style=\"width:${this._contentLeft}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return true;\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInContent();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const lineHighlight = theme.getColor(editorLineHighlight);\n    if (lineHighlight) {\n        collector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n        collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n    }\n    if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n        const lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n        if (lineHighlightBorder) {\n            collector.addRule(`.monaco-editor .view-overlays .current-line { border: 2px solid ${lineHighlightBorder}; }`);\n            collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border: 2px solid ${lineHighlightBorder}; }`);\n            if (theme.type === 'hc') {\n                collector.addRule(`.monaco-editor .view-overlays .current-line { border-width: 1px; }`);\n                collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border-width: 1px; }`);\n            }\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Range } from '../../../common/core/range.js';\nimport { HorizontalRange } from '../../view/renderingContext.js';\nexport class DecorationsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(44 /* fontInfo */).typicalHalfwidthCharacterWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(44 /* fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        const _decorations = ctx.getDecorationsInViewport();\n        // Keep only decorations with `className`\n        let decorations = [];\n        let decorationsLen = 0;\n        for (let i = 0, len = _decorations.length; i < len; i++) {\n            const d = _decorations[i];\n            if (d.options.className) {\n                decorations[decorationsLen++] = d;\n            }\n        }\n        // Sort decorations for consistent render output\n        decorations = decorations.sort((a, b) => {\n            if (a.options.zIndex < b.options.zIndex) {\n                return -1;\n            }\n            if (a.options.zIndex > b.options.zIndex) {\n                return 1;\n            }\n            const aClassName = a.options.className;\n            const bClassName = b.options.className;\n            if (aClassName < bClassName) {\n                return -1;\n            }\n            if (aClassName > bClassName) {\n                return 1;\n            }\n            return Range.compareRangesUsingStarts(a.range, b.range);\n        });\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = '';\n        }\n        // Render first whole line decorations and then regular decorations\n        this._renderWholeLineDecorations(ctx, decorations, output);\n        this._renderNormalDecorations(ctx, decorations, output);\n        this._renderResult = output;\n    }\n    _renderWholeLineDecorations(ctx, decorations, output) {\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (!d.options.isWholeLine) {\n                continue;\n            }\n            const decorationOutput = ('<div class=\"cdr '\n                + d.options.className\n                + '\" style=\"left:0;width:100%;height:'\n                + lineHeight\n                + 'px;\"></div>');\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            for (let j = startLineNumber; j <= endLineNumber; j++) {\n                const lineIndex = j - visibleStartLineNumber;\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    _renderNormalDecorations(ctx, decorations, output) {\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        let prevClassName = null;\n        let prevShowIfCollapsed = false;\n        let prevRange = null;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (d.options.isWholeLine) {\n                continue;\n            }\n            const className = d.options.className;\n            const showIfCollapsed = Boolean(d.options.showIfCollapsed);\n            let range = d.range;\n            if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n                range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.model.getLineMaxColumn(range.endLineNumber - 1));\n            }\n            if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n                // merge into previous decoration\n                prevRange = Range.plusRange(prevRange, range);\n                continue;\n            }\n            // flush previous decoration\n            if (prevClassName !== null) {\n                this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n            }\n            prevClassName = className;\n            prevShowIfCollapsed = showIfCollapsed;\n            prevRange = range;\n        }\n        if (prevClassName !== null) {\n            this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n        }\n    }\n    _renderNormalDecoration(ctx, range, className, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\n        const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/ className === 'findMatch');\n        if (!linesVisibleRanges) {\n            return;\n        }\n        for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n            const lineVisibleRanges = linesVisibleRanges[j];\n            if (lineVisibleRanges.outsideRenderedLine) {\n                continue;\n            }\n            const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n            if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n                const singleVisibleRange = lineVisibleRanges.ranges[0];\n                if (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n                    // collapsed/very small range case => make the decoration visible by expanding its width\n                    // expand its size on both sides (both to the left and to the right, keeping it centered)\n                    const center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n                    const left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n                    lineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n                }\n            }\n            for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n                const visibleRange = lineVisibleRanges.ranges[k];\n                const decorationOutput = ('<div class=\"cdr '\n                    + className\n                    + '\" style=\"left:'\n                    + String(visibleRange.left)\n                    + 'px;width:'\n                    + String(visibleRange.width)\n                    + 'px;height:'\n                    + lineHeight\n                    + 'px;\"></div>');\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { SmoothScrollableElement } from '../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { registerThemingParticipant, getThemeTypeSelector } from '../../../../platform/theme/common/themeService.js';\nimport { scrollbarShadow, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground } from '../../../../platform/theme/common/colorRegistry.js';\nexport class EditorScrollbar extends ViewPart {\n    constructor(context, linesContent, viewDomNode, overflowGuardDomNode) {\n        super(context);\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(92 /* scrollbar */);\n        const mouseWheelScrollSensitivity = options.get(67 /* mouseWheelScrollSensitivity */);\n        const fastScrollSensitivity = options.get(34 /* fastScrollSensitivity */);\n        const scrollPredominantAxis = options.get(95 /* scrollPredominantAxis */);\n        const scrollbarOptions = {\n            listenOnDomNode: viewDomNode.domNode,\n            className: 'editor-scrollable' + ' ' + getThemeTypeSelector(context.theme.type),\n            useShadows: false,\n            lazyRender: true,\n            vertical: scrollbar.vertical,\n            horizontal: scrollbar.horizontal,\n            verticalHasArrows: scrollbar.verticalHasArrows,\n            horizontalHasArrows: scrollbar.horizontalHasArrows,\n            verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n            verticalSliderSize: scrollbar.verticalSliderSize,\n            horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n            horizontalSliderSize: scrollbar.horizontalSliderSize,\n            handleMouseWheel: scrollbar.handleMouseWheel,\n            alwaysConsumeMouseWheel: scrollbar.alwaysConsumeMouseWheel,\n            arrowSize: scrollbar.arrowSize,\n            mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n            fastScrollSensitivity: fastScrollSensitivity,\n            scrollPredominantAxis: scrollPredominantAxis,\n            scrollByPage: scrollbar.scrollByPage,\n        };\n        this.scrollbar = this._register(new SmoothScrollableElement(linesContent.domNode, scrollbarOptions, this._context.viewLayout.getScrollable()));\n        PartFingerprints.write(this.scrollbar.getDomNode(), 5 /* ScrollableElement */);\n        this.scrollbarDomNode = createFastDomNode(this.scrollbar.getDomNode());\n        this.scrollbarDomNode.setPosition('absolute');\n        this._setLayout();\n        // When having a zone widget that calls .focus() on one of its dom elements,\n        // the browser will try desperately to reveal that dom node, unexpectedly\n        // changing the .scrollTop of this.linesContent\n        const onBrowserDesperateReveal = (domNode, lookAtScrollTop, lookAtScrollLeft) => {\n            const newScrollPosition = {};\n            if (lookAtScrollTop) {\n                const deltaTop = domNode.scrollTop;\n                if (deltaTop) {\n                    newScrollPosition.scrollTop = this._context.viewLayout.getCurrentScrollTop() + deltaTop;\n                    domNode.scrollTop = 0;\n                }\n            }\n            if (lookAtScrollLeft) {\n                const deltaLeft = domNode.scrollLeft;\n                if (deltaLeft) {\n                    newScrollPosition.scrollLeft = this._context.viewLayout.getCurrentScrollLeft() + deltaLeft;\n                    domNode.scrollLeft = 0;\n                }\n            }\n            this._context.model.setScrollPosition(newScrollPosition, 1 /* Immediate */);\n        };\n        // I've seen this happen both on the view dom node & on the lines content dom node.\n        this._register(dom.addDisposableListener(viewDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(viewDomNode.domNode, true, true)));\n        this._register(dom.addDisposableListener(linesContent.domNode, 'scroll', (e) => onBrowserDesperateReveal(linesContent.domNode, true, false)));\n        this._register(dom.addDisposableListener(overflowGuardDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(overflowGuardDomNode.domNode, true, false)));\n        this._register(dom.addDisposableListener(this.scrollbarDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(this.scrollbarDomNode.domNode, true, false)));\n    }\n    dispose() {\n        super.dispose();\n    }\n    _setLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this.scrollbarDomNode.setLeft(layoutInfo.contentLeft);\n        const minimap = options.get(65 /* minimap */);\n        const side = minimap.side;\n        if (side === 'right') {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth + layoutInfo.minimap.minimapWidth);\n        }\n        else {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth);\n        }\n        this.scrollbarDomNode.setHeight(layoutInfo.height);\n    }\n    getOverviewRulerLayoutInfo() {\n        return this.scrollbar.getOverviewRulerLayoutInfo();\n    }\n    getDomNode() {\n        return this.scrollbarDomNode;\n    }\n    delegateVerticalScrollbarMouseDown(browserEvent) {\n        this.scrollbar.delegateVerticalScrollbarMouseDown(browserEvent);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(92 /* scrollbar */)\n            || e.hasChanged(67 /* mouseWheelScrollSensitivity */)\n            || e.hasChanged(34 /* fastScrollSensitivity */)) {\n            const options = this._context.configuration.options;\n            const scrollbar = options.get(92 /* scrollbar */);\n            const mouseWheelScrollSensitivity = options.get(67 /* mouseWheelScrollSensitivity */);\n            const fastScrollSensitivity = options.get(34 /* fastScrollSensitivity */);\n            const scrollPredominantAxis = options.get(95 /* scrollPredominantAxis */);\n            const newOpts = {\n                vertical: scrollbar.vertical,\n                horizontal: scrollbar.horizontal,\n                verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n                horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n                scrollByPage: scrollbar.scrollByPage,\n                handleMouseWheel: scrollbar.handleMouseWheel,\n                mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n                fastScrollSensitivity: fastScrollSensitivity,\n                scrollPredominantAxis: scrollPredominantAxis\n            };\n            this.scrollbar.updateOptions(newOpts);\n        }\n        if (e.hasChanged(131 /* layoutInfo */)) {\n            this._setLayout();\n        }\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        this.scrollbar.updateClassName('editor-scrollable' + ' ' + getThemeTypeSelector(this._context.theme.type));\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to do\n    }\n    render(ctx) {\n        this.scrollbar.renderNow();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    // Scrollbars\n    const scrollbarShadowColor = theme.getColor(scrollbarShadow);\n    if (scrollbarShadowColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .shadow.top {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 0 6px 6px -6px inset;\n\t\t\t}\n\n\t\t\t.monaco-scrollable-element > .shadow.left {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 6px 0 6px -6px inset;\n\t\t\t}\n\n\t\t\t.monaco-scrollable-element > .shadow.top.left {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 6px 6px 6px -6px inset;\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderBackgroundColor = theme.getColor(scrollbarSliderBackground);\n    if (scrollbarSliderBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider {\n\t\t\t\tbackground: ${scrollbarSliderBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderHoverBackgroundColor = theme.getColor(scrollbarSliderHoverBackground);\n    if (scrollbarSliderHoverBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider:hover {\n\t\t\t\tbackground: ${scrollbarSliderHoverBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderActiveBackgroundColor = theme.getColor(scrollbarSliderActiveBackground);\n    if (scrollbarSliderActiveBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider.active {\n\t\t\t\tbackground: ${scrollbarSliderActiveBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nexport class DecorationToRender {\n    constructor(startLineNumber, endLineNumber, className) {\n        this._decorationToRenderBrand = undefined;\n        this.startLineNumber = +startLineNumber;\n        this.endLineNumber = +endLineNumber;\n        this.className = String(className);\n    }\n}\nexport class DedupOverlay extends DynamicViewOverlay {\n    _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = [];\n        }\n        if (decorations.length === 0) {\n            return output;\n        }\n        decorations.sort((a, b) => {\n            if (a.className === b.className) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return (a.className < b.className ? -1 : 1);\n        });\n        let prevClassName = null;\n        let prevEndLineIndex = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const className = d.className;\n            let startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n            const endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n            if (prevClassName === className) {\n                startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n                prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n            }\n            else {\n                prevClassName = className;\n                prevEndLineIndex = endLineIndex;\n            }\n            for (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n                output[i].push(prevClassName);\n            }\n        }\n        return output;\n    }\n}\nexport class GlyphMarginOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._glyphMargin = options.get(50 /* glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._glyphMargin = options.get(50 /* glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const glyphMarginClassName = d.options.glyphMarginClassName;\n            if (glyphMarginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, glyphMarginClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        if (!this._glyphMargin) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const lineHeight = this._lineHeight.toString();\n        const left = this._glyphMarginLeft.toString();\n        const width = this._glyphMarginWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px' + ';height:' + lineHeight + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            if (classNames.length === 0) {\n                output[lineIndex] = '';\n            }\n            else {\n                output[lineIndex] = ('<div class=\"cgmr codicon '\n                    + classNames.join(' ')\n                    + common);\n            }\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './indentGuides.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorActiveIndentGuides, editorBracketHighlightingForeground1, editorBracketHighlightingForeground2, editorBracketHighlightingForeground3, editorBracketHighlightingForeground4, editorBracketHighlightingForeground5, editorBracketHighlightingForeground6, editorBracketPairGuideActiveBackground1, editorBracketPairGuideActiveBackground2, editorBracketPairGuideActiveBackground3, editorBracketPairGuideActiveBackground4, editorBracketPairGuideActiveBackground5, editorBracketPairGuideActiveBackground6, editorBracketPairGuideBackground1, editorBracketPairGuideBackground2, editorBracketPairGuideBackground3, editorBracketPairGuideBackground4, editorBracketPairGuideBackground5, editorBracketPairGuideBackground6, editorIndentGuides } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Position } from '../../../common/core/position.js';\nimport { ArrayQueue } from '../../../../base/common/arrays.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { BracketPairGuidesClassNames } from '../../../common/model/guidesTextModelPart.js';\nimport { IndentGuide, HorizontalGuidesState } from '../../../common/textModelGuides.js';\nexport class IndentGuidesOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._primaryPosition = null;\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(132 /* wrappingInfo */);\n        const fontInfo = options.get(44 /* fontInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(13 /* guides */);\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(132 /* wrappingInfo */);\n        const fontInfo = options.get(44 /* fontInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(13 /* guides */);\n        return true;\n    }\n    onCursorStateChanged(e) {\n        var _a;\n        const selection = e.selections[0];\n        const newPosition = selection.getPosition();\n        if (!((_a = this._primaryPosition) === null || _a === void 0 ? void 0 : _a.equals(newPosition))) {\n            this._primaryPosition = newPosition;\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged; // || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLanguageConfigurationChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        var _a, _b, _c, _d;\n        if (!this._bracketPairGuideOptions.indentation && this._bracketPairGuideOptions.bracketPairs === false) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const scrollWidth = ctx.scrollWidth;\n        const lineHeight = this._lineHeight;\n        const activeCursorPosition = this._primaryPosition;\n        const indents = this.getGuidesByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition);\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const indent = indents[lineIndex];\n            let result = '';\n            const leftOffset = (_b = (_a = ctx.visibleRangeForPosition(new Position(lineNumber, 1))) === null || _a === void 0 ? void 0 : _a.left) !== null && _b !== void 0 ? _b : 0;\n            for (const guide of indent) {\n                const left = leftOffset + (guide.visibleColumn - 1) * this._spaceWidth;\n                if (left > scrollWidth || (this._maxIndentLeft > 0 && left > this._maxIndentLeft)) {\n                    break;\n                }\n                const className = guide.horizontalLine ? (guide.horizontalLine.top ? 'horizontal-top' : 'horizontal-bottom') : 'vertical';\n                const width = guide.horizontalLine\n                    ? ((_d = (_c = ctx.visibleRangeForPosition(new Position(lineNumber, guide.horizontalLine.endColumn))) === null || _c === void 0 ? void 0 : _c.left) !== null && _d !== void 0 ? _d : (left + this._spaceWidth)) - left\n                    : this._spaceWidth;\n                result += `<div class=\"core-guide ${guide.className} ${className}\" style=\"left:${left}px;height:${lineHeight}px;width:${width}px\"></div>`;\n            }\n            output[lineIndex] = result;\n        }\n        this._renderResult = output;\n    }\n    getGuidesByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition) {\n        const bracketGuides = this._bracketPairGuideOptions.bracketPairs !== false\n            ? this._context.model.getBracketGuidesInRangeByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition, {\n                highlightActive: this._bracketPairGuideOptions.highlightActiveBracketPair,\n                horizontalGuides: this._bracketPairGuideOptions.bracketPairsHorizontal === true\n                    ? HorizontalGuidesState.Enabled\n                    : this._bracketPairGuideOptions.bracketPairsHorizontal === 'active'\n                        ? HorizontalGuidesState.EnabledForActive\n                        : HorizontalGuidesState.Disabled,\n                includeInactive: this._bracketPairGuideOptions.bracketPairs === true,\n            })\n            : null;\n        const indentGuides = this._bracketPairGuideOptions.indentation\n            ? this._context.model.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber)\n            : null;\n        let activeIndentStartLineNumber = 0;\n        let activeIndentEndLineNumber = 0;\n        let activeIndentLevel = 0;\n        if (this._bracketPairGuideOptions.highlightActiveIndentation && activeCursorPosition) {\n            const activeIndentInfo = this._context.model.getActiveIndentGuide(activeCursorPosition.lineNumber, visibleStartLineNumber, visibleEndLineNumber);\n            activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\n            activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\n            activeIndentLevel = activeIndentInfo.indent;\n        }\n        const { indentSize } = this._context.model.getTextModelOptions();\n        const result = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineGuides = new Array();\n            result.push(lineGuides);\n            const bracketGuidesInLine = bracketGuides ? bracketGuides[lineNumber - visibleStartLineNumber] : [];\n            const bracketGuidesInLineQueue = new ArrayQueue(bracketGuidesInLine);\n            const indentGuidesInLine = indentGuides ? indentGuides[lineNumber - visibleStartLineNumber] : [];\n            for (let indentLvl = 1; indentLvl <= indentGuidesInLine; indentLvl++) {\n                const indentGuide = (indentLvl - 1) * indentSize + 1;\n                const isActive = \n                // Disable active indent guide if there are bracket guides.\n                bracketGuidesInLine.length === 0 &&\n                    activeIndentStartLineNumber <= lineNumber &&\n                    lineNumber <= activeIndentEndLineNumber &&\n                    indentLvl === activeIndentLevel;\n                lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => g.visibleColumn < indentGuide) || []);\n                const peeked = bracketGuidesInLineQueue.peek();\n                if (!peeked || peeked.visibleColumn !== indentGuide || peeked.horizontalLine) {\n                    lineGuides.push(new IndentGuide(indentGuide, isActive ? 'core-guide-indent-active' : 'core-guide-indent', null));\n                }\n            }\n            lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => true) || []);\n        }\n        return result;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nfunction transparentToUndefined(color) {\n    if (color && color.isTransparent()) {\n        return undefined;\n    }\n    return color;\n}\nregisterThemingParticipant((theme, collector) => {\n    const editorIndentGuidesColor = theme.getColor(editorIndentGuides);\n    if (editorIndentGuidesColor) {\n        collector.addRule(`.monaco-editor .lines-content .core-guide-indent { box-shadow: 1px 0 0 0 ${editorIndentGuidesColor} inset; }`);\n    }\n    const editorActiveIndentGuidesColor = theme.getColor(editorActiveIndentGuides) || editorIndentGuidesColor;\n    if (editorActiveIndentGuidesColor) {\n        collector.addRule(`.monaco-editor .lines-content .core-guide-indent-active { box-shadow: 1px 0 0 0 ${editorActiveIndentGuidesColor} inset; }`);\n    }\n    const colors = [\n        { bracketColor: editorBracketHighlightingForeground1, guideColor: editorBracketPairGuideBackground1, guideColorActive: editorBracketPairGuideActiveBackground1 },\n        { bracketColor: editorBracketHighlightingForeground2, guideColor: editorBracketPairGuideBackground2, guideColorActive: editorBracketPairGuideActiveBackground2 },\n        { bracketColor: editorBracketHighlightingForeground3, guideColor: editorBracketPairGuideBackground3, guideColorActive: editorBracketPairGuideActiveBackground3 },\n        { bracketColor: editorBracketHighlightingForeground4, guideColor: editorBracketPairGuideBackground4, guideColorActive: editorBracketPairGuideActiveBackground4 },\n        { bracketColor: editorBracketHighlightingForeground5, guideColor: editorBracketPairGuideBackground5, guideColorActive: editorBracketPairGuideActiveBackground5 },\n        { bracketColor: editorBracketHighlightingForeground6, guideColor: editorBracketPairGuideBackground6, guideColorActive: editorBracketPairGuideActiveBackground6 }\n    ];\n    const colorProvider = new BracketPairGuidesClassNames();\n    const colorValues = colors\n        .map(c => {\n        var _a, _b;\n        const bracketColor = theme.getColor(c.bracketColor);\n        const guideColor = theme.getColor(c.guideColor);\n        const guideColorActive = theme.getColor(c.guideColorActive);\n        const effectiveGuideColor = transparentToUndefined((_a = transparentToUndefined(guideColor)) !== null && _a !== void 0 ? _a : bracketColor === null || bracketColor === void 0 ? void 0 : bracketColor.transparent(0.3));\n        const effectiveGuideColorActive = transparentToUndefined((_b = transparentToUndefined(guideColorActive)) !== null && _b !== void 0 ? _b : bracketColor);\n        if (!effectiveGuideColor || !effectiveGuideColorActive) {\n            return undefined;\n        }\n        return {\n            guideColor: effectiveGuideColor,\n            guideColorActive: effectiveGuideColorActive,\n        };\n    })\n        .filter(isDefined);\n    if (colorValues.length > 0) {\n        for (let level = 0; level < 30; level++) {\n            const colors = colorValues[level % colorValues.length];\n            collector.addRule(`.monaco-editor .${colorProvider.getInlineClassNameOfLevel(level).replace(/ /g, '.')} { --guide-color: ${colors.guideColor}; --guide-color-active: ${colors.guideColorActive}; }`);\n        }\n        collector.addRule(`.monaco-editor .vertical { box-shadow: 1px 0 0 0 var(--guide-color) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top { border-top: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom { border-bottom: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .vertical.${colorProvider.activeClassName} { box-shadow: 1px 0 0 0 var(--guide-color-active) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top.${colorProvider.activeClassName} { border-top: 1px solid var(--guide-color-active); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom.${colorProvider.activeClassName} { border-bottom: 1px solid var(--guide-color-active); }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './viewLines.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { DomReadingContext, ViewLine, ViewLineOptions } from './viewLine.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { LineVisibleRanges, HorizontalPosition, HorizontalRange } from '../../view/renderingContext.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass LastRenderedData {\n    constructor() {\n        this._currentVisibleRange = new Range(1, 1, 1, 1);\n    }\n    getCurrentVisibleRange() {\n        return this._currentVisibleRange;\n    }\n    setCurrentVisibleRange(currentVisibleRange) {\n        this._currentVisibleRange = currentVisibleRange;\n    }\n}\nclass HorizontalRevealRangeRequest {\n    constructor(minimalReveal, lineNumber, startColumn, endColumn, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.lineNumber = lineNumber;\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'range';\n        this.minLineNumber = lineNumber;\n        this.maxLineNumber = lineNumber;\n    }\n}\nclass HorizontalRevealSelectionsRequest {\n    constructor(minimalReveal, selections, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.selections = selections;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'selections';\n        let minLineNumber = selections[0].startLineNumber;\n        let maxLineNumber = selections[0].endLineNumber;\n        for (let i = 1, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n            maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n        }\n        this.minLineNumber = minLineNumber;\n        this.maxLineNumber = maxLineNumber;\n    }\n}\nexport class ViewLines extends ViewPart {\n    constructor(context, linesContent) {\n        super(context);\n        this._linesContent = linesContent;\n        this._textRangeRestingSpot = document.createElement('div');\n        this._visibleLines = new VisibleLinesCollection(this);\n        this.domNode = this._visibleLines.domNode;\n        const conf = this._context.configuration;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(44 /* fontInfo */);\n        const wrappingInfo = options.get(132 /* wrappingInfo */);\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(89 /* revealHorizontalRightPadding */);\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._cursorSurroundingLines = options.get(25 /* cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(26 /* cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(28 /* disableLayerHinting */);\n        this._viewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        PartFingerprints.write(this.domNode, 7 /* ViewLines */);\n        this.domNode.setClassName(`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        applyFontInfo(this.domNode, fontInfo);\n        // --- width & height\n        this._maxLineWidth = 0;\n        this._asyncUpdateLineWidths = new RunOnceScheduler(() => {\n            this._updateLineWidthsSlow();\n        }, 200);\n        this._asyncCheckMonospaceFontAssumptions = new RunOnceScheduler(() => {\n            this._checkMonospaceFontAssumptions();\n        }, 2000);\n        this._lastRenderedData = new LastRenderedData();\n        this._horizontalRevealRequest = null;\n    }\n    dispose() {\n        this._asyncUpdateLineWidths.dispose();\n        this._asyncCheckMonospaceFontAssumptions.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    // ---- begin IVisibleLinesHost\n    createVisibleLine() {\n        return new ViewLine(this._viewLineOptions);\n    }\n    // ---- end IVisibleLinesHost\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        if (e.hasChanged(132 /* wrappingInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(44 /* fontInfo */);\n        const wrappingInfo = options.get(132 /* wrappingInfo */);\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(89 /* revealHorizontalRightPadding */);\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._cursorSurroundingLines = options.get(25 /* cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(26 /* cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(28 /* disableLayerHinting */);\n        applyFontInfo(this.domNode, fontInfo);\n        this._onOptionsMaybeChanged();\n        if (e.hasChanged(131 /* layoutInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        return true;\n    }\n    _onOptionsMaybeChanged() {\n        const conf = this._context.configuration;\n        const newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        if (!this._viewLineOptions.equals(newViewLineOptions)) {\n            this._viewLineOptions = newViewLineOptions;\n            const startLineNumber = this._visibleLines.getStartLineNumber();\n            const endLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n                const line = this._visibleLines.getVisibleLine(lineNumber);\n                line.onOptionsChanged(this._viewLineOptions);\n            }\n            return true;\n        }\n        return false;\n    }\n    onCursorStateChanged(e) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let r = false;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            r = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\n        }\n        return r;\n    }\n    onDecorationsChanged(e) {\n        if (true /*e.inlineDecorationsChanged*/) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\n            }\n        }\n        return true;\n    }\n    onFlushed(e) {\n        const shouldRender = this._visibleLines.onFlushed(e);\n        this._maxLineWidth = 0;\n        return shouldRender;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onRevealRangeRequest(e) {\n        // Using the future viewport here in order to handle multiple\n        // incoming reveal range requests that might all desire to be animated\n        const desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.minimalReveal, e.range, e.selections, e.verticalType);\n        if (desiredScrollTop === -1) {\n            // marker to abort the reveal range request\n            return false;\n        }\n        // validate the new desired scroll top\n        let newScrollPosition = this._context.viewLayout.validateScrollPosition({ scrollTop: desiredScrollTop });\n        if (e.revealHorizontal) {\n            if (e.range && e.range.startLineNumber !== e.range.endLineNumber) {\n                // Two or more lines? => scroll to base (That's how you see most of the two lines)\n                newScrollPosition = {\n                    scrollTop: newScrollPosition.scrollTop,\n                    scrollLeft: 0\n                };\n            }\n            else if (e.range) {\n                // We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n                this._horizontalRevealRequest = new HorizontalRevealRangeRequest(e.minimalReveal, e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n            else if (e.selections && e.selections.length > 0) {\n                this._horizontalRevealRequest = new HorizontalRevealSelectionsRequest(e.minimalReveal, e.selections, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n        }\n        else {\n            this._horizontalRevealRequest = null;\n        }\n        const scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\n        const scrollType = (scrollTopDelta <= this._lineHeight ? 1 /* Immediate */ : e.scrollType);\n        this._context.model.setScrollPosition(newScrollPosition, scrollType);\n        return true;\n    }\n    onScrollChanged(e) {\n        if (this._horizontalRevealRequest && e.scrollLeftChanged) {\n            // cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n            this._horizontalRevealRequest = null;\n        }\n        if (this._horizontalRevealRequest && e.scrollTopChanged) {\n            const min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            const max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            if (e.scrollTop < min || e.scrollTop > max) {\n                // cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n                this._horizontalRevealRequest = null;\n            }\n        }\n        this.domNode.setWidth(e.scrollWidth);\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        this._context.model.setMaxLineWidth(this._maxLineWidth);\n        return this._visibleLines.onZonesChanged(e);\n    }\n    onThemeChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    // ---- end view event handlers\n    // ----------- HELPERS FOR OTHERS\n    getPositionFromDOMInfo(spanNode, offset) {\n        const viewLineDomNode = this._getViewLineDomNode(spanNode);\n        if (viewLineDomNode === null) {\n            // Couldn't find view line node\n            return null;\n        }\n        const lineNumber = this._getLineNumberFor(viewLineDomNode);\n        if (lineNumber === -1) {\n            // Couldn't find view line node\n            return null;\n        }\n        if (lineNumber < 1 || lineNumber > this._context.model.getLineCount()) {\n            // lineNumber is outside range\n            return null;\n        }\n        if (this._context.model.getLineMaxColumn(lineNumber) === 1) {\n            // Line is empty\n            return new Position(lineNumber, 1);\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return null;\n        }\n        let column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(lineNumber, spanNode, offset);\n        const minColumn = this._context.model.getLineMinColumn(lineNumber);\n        if (column < minColumn) {\n            column = minColumn;\n        }\n        return new Position(lineNumber, column);\n    }\n    _getViewLineDomNode(node) {\n        while (node && node.nodeType === 1) {\n            if (node.className === ViewLine.CLASS_NAME) {\n                return node;\n            }\n            node = node.parentElement;\n        }\n        return null;\n    }\n    /**\n     * @returns the line number of this view line dom node.\n     */\n    _getLineNumberFor(domNode) {\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const line = this._visibleLines.getVisibleLine(lineNumber);\n            if (domNode === line.getDomNode()) {\n                return lineNumber;\n            }\n        }\n        return -1;\n    }\n    getLineWidth(lineNumber) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return -1;\n        }\n        return this._visibleLines.getVisibleLine(lineNumber).getWidth();\n    }\n    linesVisibleRangesForRange(_range, includeNewLines) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        const originalEndLineNumber = _range.endLineNumber;\n        const range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\n        if (!range) {\n            return null;\n        }\n        let visibleRanges = [], visibleRangesLen = 0;\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        let nextLineModelLineNumber = 0;\n        if (includeNewLines) {\n            nextLineModelLineNumber = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n            if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n                continue;\n            }\n            const startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\n            const endColumn = lineNumber === range.endLineNumber ? range.endColumn : this._context.model.getLineMaxColumn(lineNumber);\n            const visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n            if (!visibleRangesForLine) {\n                continue;\n            }\n            if (includeNewLines && lineNumber < originalEndLineNumber) {\n                const currentLineModelLineNumber = nextLineModelLineNumber;\n                nextLineModelLineNumber = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\n                if (currentLineModelLineNumber !== nextLineModelLineNumber) {\n                    visibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\n                }\n            }\n            visibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, HorizontalRange.from(visibleRangesForLine.ranges));\n        }\n        if (visibleRangesLen === 0) {\n            return null;\n        }\n        return visibleRanges;\n    }\n    _visibleRangesForLineRange(lineNumber, startColumn, endColumn) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        if (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\n            return null;\n        }\n        return this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot));\n    }\n    visibleRangeForPosition(position) {\n        const visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\n        if (!visibleRanges) {\n            return null;\n        }\n        return new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\n    }\n    // --- implementation\n    updateLineWidths() {\n        this._updateLineWidths(false);\n    }\n    /**\n     * Updates the max line width if it is fast to compute.\n     * Returns true if all lines were taken into account.\n     * Returns false if some lines need to be reevaluated (in a slow fashion).\n     */\n    _updateLineWidthsFast() {\n        return this._updateLineWidths(true);\n    }\n    _updateLineWidthsSlow() {\n        this._updateLineWidths(false);\n    }\n    _updateLineWidths(fast) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let localMaxLineWidth = 1;\n        let allWidthsComputed = true;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (fast && !visibleLine.getWidthIsFast()) {\n                // Cannot compute width in a fast way for this line\n                allWidthsComputed = false;\n                continue;\n            }\n            localMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth());\n        }\n        if (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.model.getLineCount()) {\n            // we know the max line width for all the lines\n            this._maxLineWidth = 0;\n        }\n        this._ensureMaxLineWidth(localMaxLineWidth);\n        return allWidthsComputed;\n    }\n    _checkMonospaceFontAssumptions() {\n        // Problems with monospace assumptions are more apparent for longer lines,\n        // as small rounding errors start to sum up, so we will select the longest\n        // line for a closer inspection\n        let longestLineNumber = -1;\n        let longestWidth = -1;\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (visibleLine.needsMonospaceFontCheck()) {\n                const lineWidth = visibleLine.getWidth();\n                if (lineWidth > longestWidth) {\n                    longestWidth = lineWidth;\n                    longestLineNumber = lineNumber;\n                }\n            }\n        }\n        if (longestLineNumber === -1) {\n            return;\n        }\n        if (!this._visibleLines.getVisibleLine(longestLineNumber).monospaceAssumptionsAreValid()) {\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                visibleLine.onMonospaceAssumptionsInvalidated();\n            }\n        }\n    }\n    prepareRender() {\n        throw new Error('Not supported');\n    }\n    render() {\n        throw new Error('Not supported');\n    }\n    renderText(viewportData) {\n        // (1) render lines - ensures lines are in the DOM\n        this._visibleLines.renderLines(viewportData);\n        this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\n        this.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n        this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000));\n        // (2) compute horizontal scroll position:\n        //  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n        //  - it might change `scrollWidth` and `scrollLeft`\n        if (this._horizontalRevealRequest) {\n            const horizontalRevealRequest = this._horizontalRevealRequest;\n            // Check that we have the line that contains the horizontal range in the viewport\n            if (viewportData.startLineNumber <= horizontalRevealRequest.minLineNumber && horizontalRevealRequest.maxLineNumber <= viewportData.endLineNumber) {\n                this._horizontalRevealRequest = null;\n                // allow `visibleRangesForRange2` to work\n                this.onDidRender();\n                // compute new scroll position\n                const newScrollLeft = this._computeScrollLeftToReveal(horizontalRevealRequest);\n                if (newScrollLeft) {\n                    if (!this._isViewportWrapping) {\n                        // ensure `scrollWidth` is large enough\n                        this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\n                    }\n                    // set `scrollLeft`\n                    this._context.model.setScrollPosition({\n                        scrollLeft: newScrollLeft.scrollLeft\n                    }, horizontalRevealRequest.scrollType);\n                }\n            }\n        }\n        // Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n        if (!this._updateLineWidthsFast()) {\n            // Computing the width of some lines would be slow => delay it\n            this._asyncUpdateLineWidths.schedule();\n        }\n        if (platform.isLinux && !this._asyncCheckMonospaceFontAssumptions.isScheduled()) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                if (visibleLine.needsMonospaceFontCheck()) {\n                    this._asyncCheckMonospaceFontAssumptions.schedule();\n                    break;\n                }\n            }\n        }\n        // (3) handle scrolling\n        this._linesContent.setLayerHinting(this._canUseLayerHinting);\n        this._linesContent.setContain('strict');\n        const adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\n        this._linesContent.setTop(-adjustedScrollTop);\n        this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\n    }\n    // --- width\n    _ensureMaxLineWidth(lineWidth) {\n        const iLineWidth = Math.ceil(lineWidth);\n        if (this._maxLineWidth < iLineWidth) {\n            this._maxLineWidth = iLineWidth;\n            this._context.model.setMaxLineWidth(this._maxLineWidth);\n        }\n    }\n    _computeScrollTopToRevealRange(viewport, source, minimalReveal, range, selections, verticalType) {\n        const viewportStartY = viewport.top;\n        const viewportHeight = viewport.height;\n        const viewportEndY = viewportStartY + viewportHeight;\n        let boxIsSingleRange;\n        let boxStartY;\n        let boxEndY;\n        if (selections && selections.length > 0) {\n            let minLineNumber = selections[0].startLineNumber;\n            let maxLineNumber = selections[0].endLineNumber;\n            for (let i = 1, len = selections.length; i < len; i++) {\n                const selection = selections[i];\n                minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n                maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n            }\n            boxIsSingleRange = false;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(minLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(maxLineNumber) + this._lineHeight;\n        }\n        else if (range) {\n            boxIsSingleRange = true;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\n        }\n        else {\n            return -1;\n        }\n        const shouldIgnoreScrollOff = (source === 'mouse' || minimalReveal) && this._cursorSurroundingLinesStyle === 'default';\n        if (!shouldIgnoreScrollOff) {\n            const context = Math.min((viewportHeight / this._lineHeight) / 2, this._cursorSurroundingLines);\n            boxStartY -= context * this._lineHeight;\n            boxEndY += Math.max(0, (context - 1)) * this._lineHeight;\n        }\n        else {\n            if (!minimalReveal) {\n                // Reveal one more line above (this case is hit when dragging)\n                boxStartY -= this._lineHeight;\n            }\n        }\n        if (verticalType === 0 /* Simple */ || verticalType === 4 /* Bottom */) {\n            // Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n            boxEndY += (minimalReveal ? this._horizontalScrollbarHeight : this._lineHeight);\n        }\n        let newScrollTop;\n        if (boxEndY - boxStartY > viewportHeight) {\n            // the box is larger than the viewport ... scroll to its top\n            if (!boxIsSingleRange) {\n                // do not reveal multiple cursors if there are more than fit the viewport\n                return -1;\n            }\n            newScrollTop = boxStartY;\n        }\n        else if (verticalType === 5 /* NearTop */ || verticalType === 6 /* NearTopIfOutsideViewport */) {\n            if (verticalType === 6 /* NearTopIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // We want a gap that is 20% of the viewport, but with a minimum of 5 lines\n                const desiredGapAbove = Math.max(5 * this._lineHeight, viewportHeight * 0.2);\n                // Try to scroll just above the box with the desired gap\n                const desiredScrollTop = boxStartY - desiredGapAbove;\n                // But ensure that the box is not pushed out of viewport\n                const minScrollTop = boxEndY - viewportHeight;\n                newScrollTop = Math.max(minScrollTop, desiredScrollTop);\n            }\n        }\n        else if (verticalType === 1 /* Center */ || verticalType === 2 /* CenterIfOutsideViewport */) {\n            if (verticalType === 2 /* CenterIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // Box is outside the viewport... center it\n                const boxMiddleY = (boxStartY + boxEndY) / 2;\n                newScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n            }\n        }\n        else {\n            newScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === 3 /* Top */, verticalType === 4 /* Bottom */);\n        }\n        return newScrollTop;\n    }\n    _computeScrollLeftToReveal(horizontalRevealRequest) {\n        const viewport = this._context.viewLayout.getCurrentViewport();\n        const viewportStartX = viewport.left;\n        const viewportEndX = viewportStartX + viewport.width;\n        let boxStartX = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n        let boxEndX = 0;\n        if (horizontalRevealRequest.type === 'range') {\n            const visibleRanges = this._visibleRangesForLineRange(horizontalRevealRequest.lineNumber, horizontalRevealRequest.startColumn, horizontalRevealRequest.endColumn);\n            if (!visibleRanges) {\n                return null;\n            }\n            for (const visibleRange of visibleRanges.ranges) {\n                boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n            }\n        }\n        else {\n            for (const selection of horizontalRevealRequest.selections) {\n                if (selection.startLineNumber !== selection.endLineNumber) {\n                    return null;\n                }\n                const visibleRanges = this._visibleRangesForLineRange(selection.startLineNumber, selection.startColumn, selection.endColumn);\n                if (!visibleRanges) {\n                    return null;\n                }\n                for (const visibleRange of visibleRanges.ranges) {\n                    boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                    boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n                }\n            }\n        }\n        if (!horizontalRevealRequest.minimalReveal) {\n            boxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n            boxEndX += this._revealHorizontalRightPadding;\n        }\n        if (horizontalRevealRequest.type === 'selections' && boxEndX - boxStartX > viewport.width) {\n            return null;\n        }\n        const newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\n        return {\n            scrollLeft: newScrollLeft,\n            maxHorizontalOffset: boxEndX\n        };\n    }\n    _computeMinimumScrolling(viewportStart, viewportEnd, boxStart, boxEnd, revealAtStart, revealAtEnd) {\n        viewportStart = viewportStart | 0;\n        viewportEnd = viewportEnd | 0;\n        boxStart = boxStart | 0;\n        boxEnd = boxEnd | 0;\n        revealAtStart = !!revealAtStart;\n        revealAtEnd = !!revealAtEnd;\n        const viewportLength = viewportEnd - viewportStart;\n        const boxLength = boxEnd - boxStart;\n        if (boxLength < viewportLength) {\n            // The box would fit in the viewport\n            if (revealAtStart) {\n                return boxStart;\n            }\n            if (revealAtEnd) {\n                return Math.max(0, boxEnd - viewportLength);\n            }\n            if (boxStart < viewportStart) {\n                // The box is above the viewport\n                return boxStart;\n            }\n            else if (boxEnd > viewportEnd) {\n                // The box is below the viewport\n                return Math.max(0, boxEnd - viewportLength);\n            }\n        }\n        else {\n            // The box would not fit in the viewport\n            // Reveal the beginning of the box\n            return boxStart;\n        }\n        return viewportStart;\n    }\n}\n/**\n * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\n */\nViewLines.HORIZONTAL_EXTRA_PX = 30;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './linesDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class LinesDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const linesDecorationsClassName = d.options.linesDecorationsClassName;\n            if (linesDecorationsClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName);\n            }\n            const firstLineDecorationClassName = d.options.firstLineDecorationClassName;\n            if (firstLineDecorationClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.startLineNumber, firstLineDecorationClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const left = this._decorationsLeft.toString();\n        const width = this._decorationsWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            let lineOutput = '';\n            for (let i = 0, len = classNames.length; i < len; i++) {\n                lineOutput += '<div class=\"cldr ' + classNames[i] + common;\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './marginDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class MarginViewLineDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const marginClassName = d.options.marginClassName;\n            if (marginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, marginClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            let lineOutput = '';\n            for (let i = 0, len = classNames.length; i < len; i++) {\n                lineOutput += '<div class=\"cmdr ' + classNames[i] + '\" style=\"\"></div>';\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const allCharCodes = (() => {\n    const v = [];\n    for (let i = 32 /* START_CH_CODE */; i <= 126 /* END_CH_CODE */; i++) {\n        v.push(i);\n    }\n    v.push(65533 /* UNKNOWN_CODE */);\n    return v;\n})();\nexport const getCharIndex = (chCode, fontScale) => {\n    chCode -= 32 /* START_CH_CODE */;\n    if (chCode < 0 || chCode > 96 /* CHAR_COUNT */) {\n        if (fontScale <= 2) {\n            // for smaller scales, we can get away with using any ASCII character...\n            return (chCode + 96 /* CHAR_COUNT */) % 96 /* CHAR_COUNT */;\n        }\n        return 96 /* CHAR_COUNT */ - 1; // unknown symbol\n    }\n    return chCode;\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getCharIndex } from './minimapCharSheet.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\nexport class MinimapCharRenderer {\n    constructor(charData, scale) {\n        this.scale = scale;\n        this._minimapCharRendererBrand = undefined;\n        this.charDataNormal = MinimapCharRenderer.soften(charData, 12 / 15);\n        this.charDataLight = MinimapCharRenderer.soften(charData, 50 / 60);\n    }\n    static soften(input, ratio) {\n        const result = new Uint8ClampedArray(input.length);\n        for (let i = 0, len = input.length; i < len; i++) {\n            result[i] = toUint8(input[i] * ratio);\n        }\n        return result;\n    }\n    renderChar(target, dx, dy, chCode, color, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight) {\n        const charWidth = 1 /* BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const charData = useLighterFont ? this.charDataLight : this.charDataNormal;\n        const charIndex = getCharIndex(chCode, fontScale);\n        const destWidth = target.width * 4 /* RGBA_CHANNELS_CNT */;\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let sourceOffset = charIndex * charWidth * charHeight;\n        let row = dy * destWidth + dx * 4 /* RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                const c = (charData[sourceOffset++] / 255) * (foregroundAlpha / 255);\n                dest[column++] = backgroundR + deltaR * c;\n                dest[column++] = backgroundG + deltaG * c;\n                dest[column++] = backgroundB + deltaB * c;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n    blockRenderChar(target, dx, dy, color, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight) {\n        const charWidth = 1 /* BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const destWidth = target.width * 4 /* RGBA_CHANNELS_CNT */;\n        const c = 0.5 * (foregroundAlpha / 255);\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const colorR = backgroundR + deltaR * c;\n        const colorG = backgroundG + deltaG * c;\n        const colorB = backgroundB + deltaB * c;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let row = dy * destWidth + dx * 4 /* RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                dest[column++] = colorR;\n                dest[column++] = colorG;\n                dest[column++] = colorB;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { once } from '../../../../base/common/functional.js';\nconst charTable = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15\n};\nconst decodeData = (str) => {\n    const output = new Uint8ClampedArray(str.length / 2);\n    for (let i = 0; i < str.length; i += 2) {\n        output[i >> 1] = (charTable[str[i]] << 4) | (charTable[str[i + 1]] & 0xF);\n    }\n    return output;\n};\n/*\nconst encodeData = (data: Uint8ClampedArray, length: string) => {\n    const chars = '0123456789ABCDEF';\n    let output = '';\n    for (let i = 0; i < data.length; i++) {\n        output += chars[data[i] >> 4] + chars[data[i] & 0xf];\n    }\n    return output;\n};\n*/\n/**\n * Map of minimap scales to prebaked sample data at those scales. We don't\n * sample much larger data, because then font family becomes visible, which\n * is use-configurable.\n */\nexport const prebakedMiniMaps = {\n    1: once(() => decodeData('0000511D6300CF609C709645A78432005642574171487021003C451900274D35D762755E8B629C5BA856AF57BA649530C167D1512A272A3F6038604460398526BCA2A968DB6F8957C768BE5FBE2FB467CF5D8D5B795DC7625B5DFF50DE64C466DB2FC47CD860A65E9A2EB96CB54CE06DA763AB2EA26860524D3763536601005116008177A8705E53AB738E6A982F88BAA35B5F5B626D9C636B449B737E5B7B678598869A662F6B5B8542706C704C80736A607578685B70594A49715A4522E792')),\n    2: once(() => decodeDatan};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MinimapCharRenderer } from './minimapCharRenderer.js';\nimport { allCharCodes } from './minimapCharSheet.js';\nimport { prebakedMiniMaps } from './minimapPreBaked.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\n/**\n * Creates character renderers. It takes a 'scale' that determines how large\n * characters should be drawn. Using this, it draws data into a canvas and\n * then downsamples the characters as necessary for the current display.\n * This makes rendering more efficient, rather than drawing a full (tiny)\n * font, or downsampling in real-time.\n */\nexport class MinimapCharRendererFactory {\n    /**\n     * Creates a new character renderer factory with the given scale.\n     */\n    static create(scale, fontFamily) {\n        // renderers are immutable. By default we'll 'create' a new minimap\n        // character renderer whenever we switch editors, no need to do extra work.\n        if (this.lastCreated && scale === this.lastCreated.scale && fontFamily === this.lastFontFamily) {\n            return this.lastCreated;\n        }\n        let factory;\n        if (prebakedMiniMaps[scale]) {\n            factory = new MinimapCharRenderer(prebakedMiniMaps[scale](), scale);\n        }\n        else {\n            factory = MinimapCharRendererFactory.createFromSampleData(MinimapCharRendererFactory.createSampleData(fontFamily).data, scale);\n        }\n        this.lastFontFamily = fontFamily;\n        this.lastCreated = factory;\n        return factory;\n    }\n    /**\n     * Creates the font sample data, writing to a canvas.\n     */\n    static createSampleData(fontFamily) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.style.height = `${16 /* SAMPLED_CHAR_HEIGHT */}px`;\n        canvas.height = 16 /* SAMPLED_CHAR_HEIGHT */;\n        canvas.width = 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */;\n        canvas.style.width = 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */ + 'px';\n        ctx.fillStyle = '#ffffff';\n        ctx.font = `bold ${16 /* SAMPLED_CHAR_HEIGHT */}px ${fontFamily}`;\n        ctx.textBaseline = 'middle';\n        let x = 0;\n        for (const code of allCharCodes) {\n            ctx.fillText(String.fromCharCode(code), x, 16 /* SAMPLED_CHAR_HEIGHT */ / 2);\n            x += 10 /* SAMPLED_CHAR_WIDTH */;\n        }\n        return ctx.getImageData(0, 0, 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */, 16 /* SAMPLED_CHAR_HEIGHT */);\n    }\n    /**\n     * Creates a character renderer from the canvas sample data.\n     */\n    static createFromSampleData(source, scale) {\n        const expectedLength = 16 /* SAMPLED_CHAR_HEIGHT */ * 10 /* SAMPLED_CHAR_WIDTH */ * 4 /* RGBA_CHANNELS_CNT */ * 96 /* CHAR_COUNT */;\n        if (source.length !== expectedLength) {\n            throw new Error('Unexpected source in MinimapCharRenderer');\n        }\n        const charData = MinimapCharRendererFactory._downsample(source, scale);\n        return new MinimapCharRenderer(charData, scale);\n    }\n    static _downsampleChar(source, sourceOffset, dest, destOffset, scale) {\n        const width = 1 /* BASE_CHAR_WIDTH */ * scale;\n        const height = 2 /* BASE_CHAR_HEIGHT */ * scale;\n        let targetIndex = destOffset;\n        let brightest = 0;\n        // This is essentially an ad-hoc rescaling algorithm. Standard approaches\n        // like bicubic interpolation are awesome for scaling between image sizes,\n        // but don't work so well when scaling to very small pixel values, we end\n        // up with blurry, indistinct forms.\n        //\n        // The approach taken here is simply mapping each source pixel to the target\n        // pixels, and taking the weighted values for all pixels in each, and then\n        // averaging them out. Finally we apply an intensity boost in _downsample,\n        // since when scaling to the smallest pixel sizes there's more black space\n        // which causes characters to be much less distinct.\n        for (let y = 0; y < height; y++) {\n            // 1. For this destination pixel, get the source pixels we're sampling\n            // from (x1, y1) to the next pixel (x2, y2)\n            const sourceY1 = (y / height) * 16 /* SAMPLED_CHAR_HEIGHT */;\n            const sourceY2 = ((y + 1) / height) * 16 /* SAMPLED_CHAR_HEIGHT */;\n            for (let x = 0; x < width; x++) {\n                const sourceX1 = (x / width) * 10 /* SAMPLED_CHAR_WIDTH */;\n                const sourceX2 = ((x + 1) / width) * 10 /* SAMPLED_CHAR_WIDTH */;\n                // 2. Sample all of them, summing them up and weighting them. Similar\n                // to bilinear interpolation.\n                let value = 0;\n                let samples = 0;\n                for (let sy = sourceY1; sy < sourceY2; sy++) {\n                    const sourceRow = sourceOffset + Math.floor(sy) * 3840 /* RGBA_SAMPLED_ROW_WIDTH */;\n                    const yBalance = 1 - (sy - Math.floor(sy));\n                    for (let sx = sourceX1; sx < sourceX2; sx++) {\n                        const xBalance = 1 - (sx - Math.floor(sx));\n                        const sourceIndex = sourceRow + Math.floor(sx) * 4 /* RGBA_CHANNELS_CNT */;\n                        const weight = xBalance * yBalance;\n                        samples += weight;\n                        value += ((source[sourceIndex] * source[sourceIndex + 3]) / 255) * weight;\n                    }\n                }\n                const final = value / samples;\n                brightest = Math.max(brightest, final);\n                dest[targetIndex++] = toUint8(final);\n            }\n        }\n        return brightest;\n    }\n    static _downsample(data, scale) {\n        const pixelsPerCharacter = 2 /* BASE_CHAR_HEIGHT */ * scale * 1 /* BASE_CHAR_WIDTH */ * scale;\n        const resultLen = pixelsPerCharacter * 96 /* CHAR_COUNT */;\n        const result = new Uint8ClampedArray(resultLen);\n        let resultOffset = 0;\n        let sourceOffset = 0;\n        let brightest = 0;\n        for (let charIndex = 0; charIndex < 96 /* CHAR_COUNT */; charIndex++) {\n            brightest = Math.max(brightest, this._downsampleChar(data, sourceOffset, result, resultOffset, scale));\n            resultOffset += pixelsPerCharacter;\n            sourceOffset += 10 /* SAMPLED_CHAR_WIDTH */ * 4 /* RGBA_CHANNELS_CNT */;\n        }\n        if (brightest > 0) {\n            const adjust = 255 / brightest;\n            for (let i = 0; i < resultLen; i++) {\n                result[i] *= adjust;\n            }\n        }\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './minimap.css';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { GlobalMouseMoveMonitor, standardMouseMoveMerger } from '../../../../base/browser/globalMouseMoveMonitor.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { RenderedLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { MINIMAP_GUTTER_WIDTH, EditorLayoutInfoComputer } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { RGBA8 } from '../../../common/core/rgba.js';\nimport { MinimapTokensColorTracker } from '../../../common/viewModel/minimapTokensColorTracker.js';\nimport { ViewModelDecoration } from '../../../common/viewModel/viewModel.js';\nimport { minimapSelection, scrollbarShadow, minimapBackground, minimapSliderBackground, minimapSliderHoverBackground, minimapSliderActiveBackground, minimapForegroundOpacity } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EventType, Gesture } from '../../../../base/browser/touch.js';\nimport { MinimapCharRendererFactory } from './minimapCharRendererFactory.js';\nimport { MinimapPosition } from '../../../common/model.js';\nimport { once } from '../../../../base/common/functional.js';\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nconst MOUSE_DRAG_RESET_DISTANCE = 140;\nconst GUTTER_DECORATION_WIDTH = 2;\nclass MinimapOptions {\n    constructor(configuration, theme, tokensColorTracker) {\n        const options = configuration.options;\n        const pixelRatio = options.get(129 /* pixelRatio */);\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        const minimapLayout = layoutInfo.minimap;\n        const fontInfo = options.get(44 /* fontInfo */);\n        const minimapOpts = options.get(65 /* minimap */);\n        this.renderMinimap = minimapLayout.renderMinimap;\n        this.size = minimapOpts.size;\n        this.minimapHeightIsEditorHeight = minimapLayout.minimapHeightIsEditorHeight;\n        this.scrollBeyondLastLine = options.get(94 /* scrollBeyondLastLine */);\n        this.showSlider = minimapOpts.showSlider;\n        this.pixelRatio = pixelRatio;\n        this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this.lineHeight = options.get(59 /* lineHeight */);\n        this.minimapLeft = minimapLayout.minimapLeft;\n        this.minimapWidth = minimapLayout.minimapWidth;\n        this.minimapHeight = layoutInfo.height;\n        this.canvasInnerWidth = minimapLayout.minimapCanvasInnerWidth;\n        this.canvasInnerHeight = minimapLayout.minimapCanvasInnerHeight;\n        this.canvasOuterWidth = minimapLayout.minimapCanvasOuterWidth;\n        this.canvasOuterHeight = minimapLayout.minimapCanvasOuterHeight;\n        this.isSampling = minimapLayout.minimapIsSampling;\n        this.editorHeight = layoutInfo.height;\n        this.fontScale = minimapLayout.minimapScale;\n        this.minimapLineHeight = minimapLayout.minimapLineHeight;\n        this.minimapCharWidth = 1 /* BASE_CHAR_WIDTH */ * this.fontScale;\n        this.charRenderer = once(() => MinimapCharRendererFactory.create(this.fontScale, fontInfo.fontFamily));\n        this.defaultBackgroundColor = tokensColorTracker.getColor(2 /* DefaultBackground */);\n        this.backgroundColor = MinimapOptions._getMinimapBackground(theme, this.defaultBackgroundColor);\n        this.foregroundAlpha = MinimapOptions._getMinimapForegroundOpacity(theme);\n    }\n    static _getMinimapBackground(theme, defaultBackgroundColor) {\n        const themeColor = theme.getColor(minimapBackground);\n        if (themeColor) {\n            return new RGBA8(themeColor.rgba.r, themeColor.rgba.g, themeColor.rgba.b, Math.round(255 * themeColor.rgba.a));\n        }\n        return defaultBackgroundColor;\n    }\n    static _getMinimapForegroundOpacity(theme) {\n        const themeColor = theme.getColor(minimapForegroundOpacity);\n        if (themeColor) {\n            return RGBA8._clamp(Math.round(255 * themeColor.rgba.a));\n        }\n        return 255;\n    }\n    equals(other) {\n        return (this.renderMinimap === other.renderMinimap\n            && this.size === other.size\n            && this.minimapHeightIsEditorHeight === other.minimapHeightIsEditorHeight\n            && this.scrollBeyondLastLine === other.scrollBeyondLastLine\n            && this.showSlider === other.showSlider\n            && this.pixelRatio === other.pixelRatio\n            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n            && this.lineHeight === other.lineHeight\n            && this.minimapLeft === other.minimapLeft\n            && this.minimapWidth === other.minimapWidth\n            && this.minimapHeight === other.minimapHeight\n            && this.canvasInnerWidth === other.canvasInnerWidth\n            && this.canvasInnerHeight === other.canvasInnerHeight\n            && this.canvasOuterWidth === other.canvasOuterWidth\n            && this.canvasOuterHeight === other.canvasOuterHeight\n            && this.isSampling === other.isSampling\n            && this.editorHeight === other.editorHeight\n            && this.fontScale === other.fontScale\n            && this.minimapLineHeight === other.minimapLineHeight\n            && this.minimapCharWidth === other.minimapCharWidth\n            && this.defaultBackgroundColor && this.defaultBackgroundColor.equals(other.defaultBackgroundColor)\n            && this.backgroundColor && this.backgroundColor.equals(other.backgroundColor)\n            && this.foregroundAlpha === other.foregroundAlpha);\n    }\n}\nclass MinimapLayout {\n    constructor(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, startLineNumber, endLineNumber) {\n        this.scrollTop = scrollTop;\n        this.scrollHeight = scrollHeight;\n        this.sliderNeeded = sliderNeeded;\n        this._computedSliderRatio = computedSliderRatio;\n        this.sliderTop = sliderTop;\n        this.sliderHeight = sliderHeight;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n    }\n    /**\n     * Compute a desired `scrollPosition` such that the slider moves by `delta`.\n     */\n    getDesiredScrollTopFromDelta(delta) {\n        return Math.round(this.scrollTop + delta / this._computedSliderRatio);\n    }\n    getDesiredScrollTopFromTouchLocation(pageY) {\n        return Math.round((pageY - this.sliderHeight / 2) / this._computedSliderRatio);\n    }\n    static create(options, viewportStartLineNumber, viewportEndLineNumber, viewportStartLineNumberVerticalOffset, viewportHeight, viewportContainsWhitespaceGaps, lineCount, realLineCount, scrollTop, scrollHeight, previousLayout) {\n        const pixelRatio = options.pixelRatio;\n        const minimapLineHeight = options.minimapLineHeight;\n        const minimapLinesFitting = Math.floor(options.canvasInnerHeight / minimapLineHeight);\n        const lineHeight = options.lineHeight;\n        if (options.minimapHeightIsEditorHeight) {\n            const logicalScrollHeight = (realLineCount * options.lineHeight\n                + (options.scrollBeyondLastLine ? viewportHeight - options.lineHeight : 0));\n            const sliderHeight = Math.max(1, Math.floor(viewportHeight * viewportHeight / logicalScrollHeight));\n            const maxMinimapSliderTop = Math.max(0, options.minimapHeight - sliderHeight);\n            // The slider can move from 0 to `maxMinimapSliderTop`\n            // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n            const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n            const sliderTop = (scrollTop * computedSliderRatio);\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            const maxLinesFitting = Math.floor(options.canvasInnerHeight / options.minimapLineHeight);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, 1, Math.min(lineCount, maxLinesFitting));\n        }\n        // The visible line count in a viewport can change due to a number of reasons:\n        //  a) with the same viewport width, different scroll positions can result in partial lines being visible:\n        //    e.g. for a line height of 20, and a viewport height of 600\n        //          * scrollTop = 0  => visible lines are [1, 30]\n        //          * scrollTop = 10 => visible lines are [1, 31] (with lines 1 and 31 partially visible)\n        //          * scrollTop = 20 => visible lines are [2, 31]\n        //  b) whitespace gaps might make their way in the viewport (which results in a decrease in the visible line count)\n        //  c) we could be in the scroll beyond last line case (which also results in a decrease in the visible line count, down to possibly only one line being visible)\n        // We must first establish a desirable slider height.\n        let sliderHeight;\n        if (viewportContainsWhitespaceGaps && viewportEndLineNumber !== lineCount) {\n            // case b) from above: there are whitespace gaps in the viewport.\n            // In this case, the height of the slider directly reflects the visible line count.\n            const viewportLineCount = viewportEndLineNumber - viewportStartLineNumber + 1;\n            sliderHeight = Math.floor(viewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        else {\n            // The slider has a stable height\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            sliderHeight = Math.floor(expectedViewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        let maxMinimapSliderTop;\n        if (options.scrollBeyondLastLine) {\n            // The minimap slider, when dragged all the way down, will contain the last line at its top\n            maxMinimapSliderTop = (lineCount - 1) * minimapLineHeight / pixelRatio;\n        }\n        else {\n            // The minimap slider, when dragged all the way down, will contain the last line at its bottom\n            maxMinimapSliderTop = Math.max(0, lineCount * minimapLineHeight / pixelRatio - sliderHeight);\n        }\n        maxMinimapSliderTop = Math.min(options.minimapHeight - sliderHeight, maxMinimapSliderTop);\n        // The slider can move from 0 to `maxMinimapSliderTop`\n        // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n        const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n        const sliderTop = (scrollTop * computedSliderRatio);\n        let extraLinesAtTheBottom = 0;\n        if (options.scrollBeyondLastLine) {\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            extraLinesAtTheBottom = expectedViewportLineCount - 1;\n        }\n        if (minimapLinesFitting >= lineCount + extraLinesAtTheBottom) {\n            // All lines fit in the minimap\n            const startLineNumber = 1;\n            const endLineNumber = lineCount;\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, startLineNumber, endLineNumber);\n        }\n        else {\n            let startLineNumber = Math.max(1, Math.floor(viewportStartLineNumber - sliderTop * pixelRatio / minimapLineHeight));\n            // Avoid flickering caused by a partial viewport start line\n            // by being consistent w.r.t. the previous layout decision\n            if (previousLayout && previousLayout.scrollHeight === scrollHeight) {\n                if (previousLayout.scrollTop > scrollTop) {\n                    // Scrolling up => never increase `startLineNumber`\n                    startLineNumber = Math.min(startLineNumber, previousLayout.startLineNumber);\n                }\n                if (previousLayout.scrollTop < scrollTop) {\n                    // Scrolling down => never decrease `startLineNumber`\n                    startLineNumber = Math.max(startLineNumber, previousLayout.startLineNumber);\n                }\n            }\n            const endLineNumber = Math.min(lineCount, startLineNumber + minimapLinesFitting - 1);\n            const partialLine = (scrollTop - viewportStartLineNumberVerticalOffset) / lineHeight;\n            const sliderTopAligned = (viewportStartLineNumber - startLineNumber + partialLine) * minimapLineHeight / pixelRatio;\n            return new MinimapLayout(scrollTop, scrollHeight, true, computedSliderRatio, sliderTopAligned, sliderHeight, startLineNumber, endLineNumber);\n        }\n    }\n}\nclass MinimapLine {\n    constructor(dy) {\n        this.dy = dy;\n    }\n    onContentChanged() {\n        this.dy = -1;\n    }\n    onTokensChanged() {\n        this.dy = -1;\n    }\n}\nMinimapLine.INVALID = new MinimapLine(-1);\nclass RenderData {\n    constructor(renderedLayout, imageData, lines) {\n        this.renderedLayout = renderedLayout;\n        this._imageData = imageData;\n        this._renderedLines = new RenderedLinesCollection(() => MinimapLine.INVALID);\n        this._renderedLines._set(renderedLayout.startLineNumber, lines);\n    }\n    /**\n     * Check if the current RenderData matches accurately the new desired layout and no painting is needed.\n     */\n    linesEquals(layout) {\n        if (!this.scrollEquals(layout)) {\n            return false;\n        }\n        const tmp = this._renderedLines._get();\n        const lines = tmp.lines;\n        for (let i = 0, len = lines.length; i < len; i++) {\n            if (lines[i].dy === -1) {\n                // This line is invalid\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Check if the current RenderData matches the new layout's scroll position\n     */\n    scrollEquals(layout) {\n        return this.renderedLayout.startLineNumber === layout.startLineNumber\n            && this.renderedLayout.endLineNumber === layout.endLineNumber;\n    }\n    _get() {\n        const tmp = this._renderedLines._get();\n        return {\n            imageData: this._imageData,\n            rendLineNumberStart: tmp.rendLineNumberStart,\n            lines: tmp.lines\n        };\n    }\n    onLinesChanged(changeFromLineNumber, changeToLineNumber) {\n        return this._renderedLines.onLinesChanged(changeFromLineNumber, changeToLineNumber);\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        this._renderedLines.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        this._renderedLines.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n    }\n    onTokensChanged(ranges) {\n        return this._renderedLines.onTokensChanged(ranges);\n    }\n}\n/**\n * Some sort of double buffering.\n *\n * Keeps two buffers around that will be rotated for painting.\n * Always gives a buffer that is filled with the background color.\n */\nclass MinimapBuffers {\n    constructor(ctx, WIDTH, HEIGHT, background) {\n        this._backgroundFillData = MinimapBuffers._createBackgroundFillData(WIDTH, HEIGHT, background);\n        this._buffers = [\n            ctx.createImageData(WIDTH, HEIGHT),\n            ctx.createImageData(WIDTH, HEIGHT)\n        ];\n        this._lastUsedBuffer = 0;\n    }\n    getBuffer() {\n        // rotate buffers\n        this._lastUsedBuffer = 1 - this._lastUsedBuffer;\n        const result = this._buffers[this._lastUsedBuffer];\n        // fill with background color\n        result.data.set(this._backgroundFillData);\n        return result;\n    }\n    static _createBackgroundFillData(WIDTH, HEIGHT, background) {\n        const backgroundR = background.r;\n        const backgroundG = background.g;\n        const backgroundB = background.b;\n        const backgroundA = background.a;\n        const result = new Uint8ClampedArray(WIDTH * HEIGHT * 4);\n        let offset = 0;\n        for (let i = 0; i < HEIGHT; i++) {\n            for (let j = 0; j < WIDTH; j++) {\n                result[offset] = backgroundR;\n                result[offset + 1] = backgroundG;\n                result[offset + 2] = backgroundB;\n                result[offset + 3] = backgroundA;\n                offset += 4;\n            }\n        }\n        return result;\n    }\n}\nclass MinimapSamplingState {\n    constructor(samplingRatio, minimapLines) {\n        this.samplingRatio = samplingRatio;\n        this.minimapLines = minimapLines;\n    }\n    static compute(options, viewLineCount, oldSamplingState) {\n        if (options.renderMinimap === 0 /* None */ || !options.isSampling) {\n            return [null, []];\n        }\n        // ratio is intentionally not part of the layout to avoid the layout changing all the time\n        // so we need to recompute it again...\n        const pixelRatio = options.pixelRatio;\n        const lineHeight = options.lineHeight;\n        const scrollBeyondLastLine = options.scrollBeyondLastLine;\n        const { minimapLineCount } = EditorLayoutInfoComputer.computeContainedMinimapLineCount({\n            viewLineCount: viewLineCount,\n            scrollBeyondLastLine: scrollBeyondLastLine,\n            height: options.editorHeight,\n            lineHeight: lineHeight,\n            pixelRatio: pixelRatio\n        });\n        const ratio = viewLineCount / minimapLineCount;\n        const halfRatio = ratio / 2;\n        if (!oldSamplingState || oldSamplingState.minimapLines.length === 0) {\n            const result = [];\n            result[0] = 1;\n            if (minimapLineCount > 1) {\n                for (let i = 0, lastIndex = minimapLineCount - 1; i < lastIndex; i++) {\n                    result[i] = Math.round(i * ratio + halfRatio);\n                }\n                result[minimapLineCount - 1] = viewLineCount;\n            }\n            return [new MinimapSamplingState(ratio, result), []];\n        }\n        const oldMinimapLines = oldSamplingState.minimapLines;\n        const oldLength = oldMinimapLines.length;\n        const result = [];\n        let oldIndex = 0;\n        let oldDeltaLineCount = 0;\n        let minViewLineNumber = 1;\n        const MAX_EVENT_COUNT = 10; // generate at most 10 events, if there are more than 10 changes, just flush all previous data\n        let events = [];\n        let lastEvent = null;\n        for (let i = 0; i < minimapLineCount; i++) {\n            const fromViewLineNumber = Math.max(minViewLineNumber, Math.round(i * ratio));\n            const toViewLineNumber = Math.max(fromViewLineNumber, Math.round((i + 1) * ratio));\n            while (oldIndex < oldLength && oldMinimapLines[oldIndex] < fromViewLineNumber) {\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                        lastEvent.deleteToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount--;\n                }\n                oldIndex++;\n            }\n            let selectedViewLineNumber;\n            if (oldIndex < oldLength && oldMinimapLines[oldIndex] <= toViewLineNumber) {\n                // reuse the old sampled line\n                selectedViewLineNumber = oldMinimapLines[oldIndex];\n                oldIndex++;\n            }\n            else {\n                if (i === 0) {\n                    selectedViewLineNumber = 1;\n                }\n                else if (i + 1 === minimapLineCount) {\n                    selectedViewLineNumber = viewLineCount;\n                }\n                else {\n                    selectedViewLineNumber = Math.round(i * ratio + halfRatio);\n                }\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'inserted' && lastEvent._i === i - 1) {\n                        lastEvent.insertToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'inserted', _i: i, insertFromLineNumber: oldMinimapLineNumber, insertToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount++;\n                }\n            }\n            result[i] = selectedViewLineNumber;\n            minViewLineNumber = selectedViewLineNumber;\n        }\n        if (events.length < MAX_EVENT_COUNT) {\n            while (oldIndex < oldLength) {\n                const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                    lastEvent.deleteToLineNumber++;\n                }\n                else {\n                    lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                    events.push(lastEvent);\n                }\n                oldDeltaLineCount--;\n                oldIndex++;\n            }\n        }\n        else {\n            // too many events, just give up\n            events = [{ type: 'flush' }];\n        }\n        return [new MinimapSamplingState(ratio, result), events];\n    }\n    modelLineToMinimapLine(lineNumber) {\n        return Math.min(this.minimapLines.length, Math.max(1, Math.round(lineNumber / this.samplingRatio)));\n    }\n    /**\n     * Will return null if the model line ranges are not intersecting with a sampled model line.\n     */\n    modelLineRangeToMinimapLineRange(fromLineNumber, toLineNumber) {\n        let fromLineIndex = this.modelLineToMinimapLine(fromLineNumber) - 1;\n        while (fromLineIndex > 0 && this.minimapLines[fromLineIndex - 1] >= fromLineNumber) {\n            fromLineIndex--;\n        }\n        let toLineIndex = this.modelLineToMinimapLine(toLineNumber) - 1;\n        while (toLineIndex + 1 < this.minimapLines.length && this.minimapLines[toLineIndex + 1] <= toLineNumber) {\n            toLineIndex++;\n        }\n        if (fromLineIndex === toLineIndex) {\n            const sampledLineNumber = this.minimapLines[fromLineIndex];\n            if (sampledLineNumber < fromLineNumber || sampledLineNumber > toLineNumber) {\n                // This line is not part of the sampled lines ==> nothing to do\n                return null;\n            }\n        }\n        return [fromLineIndex + 1, toLineIndex + 1];\n    }\n    /**\n     * Will always return a range, even if it is not intersecting with a sampled model line.\n     */\n    decorationLineRangeToMinimapLineRange(startLineNumber, endLineNumber) {\n        let minimapLineStart = this.modelLineToMinimapLine(startLineNumber);\n        let minimapLineEnd = this.modelLineToMinimapLine(endLineNumber);\n        if (startLineNumber !== endLineNumber && minimapLineEnd === minimapLineStart) {\n            if (minimapLineEnd === this.minimapLines.length) {\n                if (minimapLineStart > 1) {\n                    minimapLineStart--;\n                }\n            }\n            else {\n                minimapLineEnd++;\n            }\n        }\n        return [minimapLineStart, minimapLineEnd];\n    }\n    onLinesDeleted(e) {\n        // have the mapping be sticky\n        const deletedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        let changeStartIndex = this.minimapLines.length;\n        let changeEndIndex = 0;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            if (this.minimapLines[i] <= e.toLineNumber) {\n                // this line got deleted => move to previous available\n                this.minimapLines[i] = Math.max(1, e.fromLineNumber - 1);\n                changeStartIndex = Math.min(changeStartIndex, i);\n                changeEndIndex = Math.max(changeEndIndex, i);\n            }\n            else {\n                this.minimapLines[i] -= deletedLineCount;\n            }\n        }\n        return [changeStartIndex, changeEndIndex];\n    }\n    onLinesInserted(e) {\n        // have the mapping be sticky\n        const insertedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            this.minimapLines[i] += insertedLineCount;\n        }\n    }\n}\nexport class Minimap extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.tokensColorTracker = MinimapTokensColorTracker.getInstance();\n        this._selections = [];\n        this._minimapSelections = null;\n        this.options = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        const [samplingState,] = MinimapSamplingState.compute(this.options, this._context.model.getLineCount(), null);\n        this._samplingState = samplingState;\n        this._shouldCheckSampling = false;\n        this._actual = new InnerMinimap(context.theme, this);\n    }\n    dispose() {\n        this._actual.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this._actual.getDomNode();\n    }\n    _onOptionsMaybeChanged() {\n        const opts = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        if (this.options.equals(opts)) {\n            return false;\n        }\n        this.options = opts;\n        this._recreateLineSampling();\n        this._actual.onDidChangeOptions();\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        this._minimapSelections = null;\n        return this._actual.onSelectionChanged();\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsMinimap) {\n            return this._actual.onDecorationsChanged();\n        }\n        return false;\n    }\n    onFlushed(e) {\n        if (this._samplingState) {\n            this._shouldCheckSampling = true;\n        }\n        return this._actual.onFlushed();\n    }\n    onLinesChanged(e) {\n        if (this._samplingState) {\n            const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(e.fromLineNumber, e.toLineNumber);\n            if (minimapLineRange) {\n                return this._actual.onLinesChanged(minimapLineRange[0], minimapLineRange[1]);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onLinesChanged(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onLinesDeleted(e) {\n        if (this._samplingState) {\n            const [changeStartIndex, changeEndIndex] = this._samplingState.onLinesDeleted(e);\n            if (changeStartIndex <= changeEndIndex) {\n                this._actual.onLinesChanged(changeStartIndex + 1, changeEndIndex + 1);\n            }\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onLinesInserted(e) {\n        if (this._samplingState) {\n            this._samplingState.onLinesInserted(e);\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onScrollChanged(e) {\n        return this._actual.onScrollChanged();\n    }\n    onThemeChanged(e) {\n        this._context.model.invalidateMinimapColorCache();\n        this._actual.onThemeChanged();\n        this._onOptionsMaybeChanged();\n        return true;\n    }\n    onTokensChanged(e) {\n        if (this._samplingState) {\n            const ranges = [];\n            for (const range of e.ranges) {\n                const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(range.fromLineNumber, range.toLineNumber);\n                if (minimapLineRange) {\n                    ranges.push({ fromLineNumber: minimapLineRange[0], toLineNumber: minimapLineRange[1] });\n                }\n            }\n            if (ranges.length) {\n                return this._actual.onTokensChanged(ranges);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onTokensChanged(e.ranges);\n        }\n    }\n    onTokensColorsChanged(e) {\n        this._onOptionsMaybeChanged();\n        return this._actual.onTokensColorsChanged();\n    }\n    onZonesChanged(e) {\n        return this._actual.onZonesChanged();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._shouldCheckSampling) {\n            this._shouldCheckSampling = false;\n            this._recreateLineSampling();\n        }\n    }\n    render(ctx) {\n        let viewportStartLineNumber = ctx.visibleRange.startLineNumber;\n        let viewportEndLineNumber = ctx.visibleRange.endLineNumber;\n        if (this._samplingState) {\n            viewportStartLineNumber = this._samplingState.modelLineToMinimapLine(viewportStartLineNumber);\n            viewportEndLineNumber = this._samplingState.modelLineToMinimapLine(viewportEndLineNumber);\n        }\n        const minimapCtx = {\n            viewportContainsWhitespaceGaps: (ctx.viewportData.whitespaceViewportData.length > 0),\n            scrollWidth: ctx.scrollWidth,\n            scrollHeight: ctx.scrollHeight,\n            viewportStartLineNumber: viewportStartLineNumber,\n            viewportEndLineNumber: viewportEndLineNumber,\n            viewportStartLineNumberVerticalOffset: ctx.getVerticalOffsetForLineNumber(viewportStartLineNumber),\n            scrollTop: ctx.scrollTop,\n            scrollLeft: ctx.scrollLeft,\n            viewportWidth: ctx.viewportWidth,\n            viewportHeight: ctx.viewportHeight,\n        };\n        this._actual.render(minimapCtx);\n    }\n    //#region IMinimapModel\n    _recreateLineSampling() {\n        this._minimapSelections = null;\n        const wasSampling = Boolean(this._samplingState);\n        const [samplingState, events] = MinimapSamplingState.compute(this.options, this._context.model.getLineCount(), this._samplingState);\n        this._samplingState = samplingState;\n        if (wasSampling && this._samplingState) {\n            // was sampling, is sampling\n            for (const event of events) {\n                switch (event.type) {\n                    case 'deleted':\n                        this._actual.onLinesDeleted(event.deleteFromLineNumber, event.deleteToLineNumber);\n                        break;\n                    case 'inserted':\n                        this._actual.onLinesInserted(event.insertFromLineNumber, event.insertToLineNumber);\n                        break;\n                    case 'flush':\n                        this._actual.onFlushed();\n                        break;\n                }\n            }\n        }\n    }\n    getLineCount() {\n        if (this._samplingState) {\n            return this._samplingState.minimapLines.length;\n        }\n        return this._context.model.getLineCount();\n    }\n    getRealLineCount() {\n        return this._context.model.getLineCount();\n    }\n    getLineContent(lineNumber) {\n        if (this._samplingState) {\n            return this._context.model.getLineContent(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.model.getLineContent(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        if (this._samplingState) {\n            return this._context.model.getLineMaxColumn(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.model.getLineMaxColumn(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        if (this._samplingState) {\n            const result = [];\n            for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n                if (needed[lineIndex]) {\n                    result[lineIndex] = this._context.model.getViewLineData(this._samplingState.minimapLines[startLineNumber + lineIndex - 1]);\n                }\n                else {\n                    result[lineIndex] = null;\n                }\n            }\n            return result;\n        }\n        return this._context.model.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed).data;\n    }\n    getSelections() {\n        if (this._minimapSelections === null) {\n            if (this._samplingState) {\n                this._minimapSelections = [];\n                for (const selection of this._selections) {\n                    const [minimapLineStart, minimapLineEnd] = this._samplingState.decorationLineRangeToMinimapLineRange(selection.startLineNumber, selection.endLineNumber);\n                    this._minimapSelections.push(new Selection(minimapLineStart, selection.startColumn, minimapLineEnd, selection.endColumn));\n                }\n            }\n            else {\n                this._minimapSelections = this._selections;\n            }\n        }\n        return this._minimapSelections;\n    }\n    getMinimapDecorationsInViewport(startLineNumber, endLineNumber) {\n        let visibleRange;\n        if (this._samplingState) {\n            const modelStartLineNumber = this._samplingState.minimapLines[startLineNumber - 1];\n            const modelEndLineNumber = this._samplingState.minimapLines[endLineNumber - 1];\n            visibleRange = new Range(modelStartLineNumber, 1, modelEndLineNumber, this._context.model.getLineMaxColumn(modelEndLineNumber));\n        }\n        else {\n            visibleRange = new Range(startLineNumber, 1, endLineNumber, this._context.model.getLineMaxColumn(endLineNumber));\n        }\n        const decorations = this._context.model.getDecorationsInViewport(visibleRange);\n        if (this._samplingState) {\n            const result = [];\n            for (const decoration of decorations) {\n                if (!decoration.options.minimap) {\n                    continue;\n                }\n                const range = decoration.range;\n                const minimapStartLineNumber = this._samplingState.modelLineToMinimapLine(range.startLineNumber);\n                const minimapEndLineNumber = this._samplingState.modelLineToMinimapLine(range.endLineNumber);\n                result.push(new ViewModelDecoration(new Range(minimapStartLineNumber, range.startColumn, minimapEndLineNumber, range.endColumn), decoration.options));\n            }\n            return result;\n        }\n        return decorations;\n    }\n    getOptions() {\n        return this._context.model.getTextModelOptions();\n    }\n    revealLineNumber(lineNumber) {\n        if (this._samplingState) {\n            lineNumber = this._samplingState.minimapLines[lineNumber - 1];\n        }\n        this._context.model.revealRange('mouse', false, new Range(lineNumber, 1, lineNumber, 1), 1 /* Center */, 0 /* Smooth */);\n    }\n    setScrollTop(scrollTop) {\n        this._context.model.setScrollPosition({\n            scrollTop: scrollTop\n        }, 1 /* Immediate */);\n    }\n}\nclass InnerMinimap extends Disposable {\n    constructor(theme, model) {\n        super();\n        this._renderDecorations = false;\n        this._gestureInProgress = false;\n        this._theme = theme;\n        this._model = model;\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 8 /* Minimap */);\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._shadow = createFastDomNode(document.createElement('div'));\n        this._shadow.setClassName('minimap-shadow-hidden');\n        this._domNode.appendChild(this._shadow);\n        this._canvas = createFastDomNode(document.createElement('canvas'));\n        this._canvas.setPosition('absolute');\n        this._canvas.setLeft(0);\n        this._domNode.appendChild(this._canvas);\n        this._decorationsCanvas = createFastDomNode(document.createElement('canvas'));\n        this._decorationsCanvas.setPosition('absolute');\n        this._decorationsCanvas.setClassName('minimap-decorations-layer');\n        this._decorationsCanvas.setLeft(0);\n        this._domNode.appendChild(this._decorationsCanvas);\n        this._slider = createFastDomNode(document.createElement('div'));\n        this._slider.setPosition('absolute');\n        this._slider.setClassName('minimap-slider');\n        this._slider.setLayerHinting(true);\n        this._slider.setContain('strict');\n        this._domNode.appendChild(this._slider);\n        this._sliderHorizontal = createFastDomNode(document.createElement('div'));\n        this._sliderHorizontal.setPosition('absolute');\n        this._sliderHorizontal.setClassName('minimap-slider-horizontal');\n        this._slider.appendChild(this._sliderHorizontal);\n        this._applyLayout();\n        this._mouseDownListener = dom.addStandardDisposableListener(this._domNode.domNode, 'mousedown', (e) => {\n            e.preventDefault();\n            const renderMinimap = this._model.options.renderMinimap;\n            if (renderMinimap === 0 /* None */) {\n                return;\n            }\n            if (!this._lastRenderData) {\n                return;\n            }\n            if (this._model.options.size !== 'proportional') {\n                if (e.leftButton && this._lastRenderData) {\n                    // pretend the click occurred in the center of the slider\n                    const position = dom.getDomNodePagePosition(this._slider.domNode);\n                    const initialPosY = position.top + position.height / 2;\n                    this._startSliderDragging(e.buttons, e.posx, initialPosY, e.posy, this._lastRenderData.renderedLayout);\n                }\n                return;\n            }\n            const minimapLineHeight = this._model.options.minimapLineHeight;\n            const internalOffsetY = (this._model.options.canvasInnerHeight / this._model.options.canvasOuterHeight) * e.browserEvent.offsetY;\n            const lineIndex = Math.floor(internalOffsetY / minimapLineHeight);\n            let lineNumber = lineIndex + this._lastRenderData.renderedLayout.startLineNumber;\n            lineNumber = Math.min(lineNumber, this._model.getLineCount());\n            this._model.revealLineNumber(lineNumber);\n        });\n        this._sliderMouseMoveMonitor = new GlobalMouseMoveMonitor();\n        this._sliderMouseDownListener = dom.addStandardDisposableListener(this._slider.domNode, 'mousedown', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (e.leftButton && this._lastRenderData) {\n                this._startSliderDragging(e.buttons, e.posx, e.posy, e.posy, this._lastRenderData.renderedLayout);\n            }\n        });\n        this._gestureDisposable = Gesture.addTarget(this._domNode.domNode);\n        this._sliderTouchStartListener = dom.addDisposableListener(this._domNode.domNode, EventType.Start, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData) {\n                this._slider.toggleClassName('active', true);\n                this._gestureInProgress = true;\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchMoveListener = dom.addDisposableListener(this._domNode.domNode, EventType.Change, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData && this._gestureInProgress) {\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchEndListener = dom.addStandardDisposableListener(this._domNode.domNode, EventType.End, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            this._gestureInProgress = false;\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    _startSliderDragging(initialButtons, initialPosX, initialPosY, posy, initialSliderState) {\n        this._slider.toggleClassName('active', true);\n        const handleMouseMove = (posy, posx) => {\n            const mouseOrthogonalDelta = Math.abs(posx - initialPosX);\n            if (platform.isWindows && mouseOrthogonalDelta > MOUSE_DRAG_RESET_DISTANCE) {\n                // The mouse has wondered away from the scrollbar => reset dragging\n                this._model.setScrollTop(initialSliderState.scrollTop);\n                return;\n            }\n            const mouseDelta = posy - initialPosY;\n            this._model.setScrollTop(initialSliderState.getDesiredScrollTopFromDelta(mouseDelta));\n        };\n        if (posy !== initialPosY) {\n            handleMouseMove(posy, initialPosX);\n        }\n        this._sliderMouseMoveMonitor.startMonitoring(this._slider.domNode, initialButtons, standardMouseMoveMerger, (mouseMoveData) => handleMouseMove(mouseMoveData.posy, mouseMoveData.posx), () => {\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    scrollDueToTouchEvent(touch) {\n        const startY = this._domNode.domNode.getBoundingClientRect().top;\n        const scrollTop = this._lastRenderData.renderedLayout.getDesiredScrollTopFromTouchLocation(touch.pageY - startY);\n        this._model.setScrollTop(scrollTop);\n    }\n    dispose() {\n        this._mouseDownListener.dispose();\n        this._sliderMouseMoveMonitor.dispose();\n        this._sliderMouseDownListener.dispose();\n        this._gestureDisposable.dispose();\n        this._sliderTouchStartListener.dispose();\n        this._sliderTouchMoveListener.dispose();\n        this._sliderTouchEndListener.dispose();\n        super.dispose();\n    }\n    _getMinimapDomNodeClassName() {\n        if (this._model.options.showSlider === 'always') {\n            return 'minimap slider-always';\n        }\n        return 'minimap slider-mouseover';\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _applyLayout() {\n        this._domNode.setLeft(this._model.options.minimapLeft);\n        this._domNode.setWidth(this._model.options.minimapWidth);\n        this._domNode.setHeight(this._model.options.minimapHeight);\n        this._shadow.setHeight(this._model.options.minimapHeight);\n        this._canvas.setWidth(this._model.options.canvasOuterWidth);\n        this._canvas.setHeight(this._model.options.canvasOuterHeight);\n        this._canvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._canvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._decorationsCanvas.setWidth(this._model.options.canvasOuterWidth);\n        this._decorationsCanvas.setHeight(this._model.options.canvasOuterHeight);\n        this._decorationsCanvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._decorationsCanvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._slider.setWidth(this._model.options.minimapWidth);\n    }\n    _getBuffer() {\n        if (!this._buffers) {\n            if (this._model.options.canvasInnerWidth > 0 && this._model.options.canvasInnerHeight > 0) {\n                this._buffers = new MinimapBuffers(this._canvas.domNode.getContext('2d'), this._model.options.canvasInnerWidth, this._model.options.canvasInnerHeight, this._model.options.backgroundColor);\n            }\n        }\n        return this._buffers ? this._buffers.getBuffer() : null;\n    }\n    // ---- begin view event handlers\n    onDidChangeOptions() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._applyLayout();\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n    }\n    onSelectionChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onDecorationsChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onFlushed() {\n        this._lastRenderData = null;\n        return true;\n    }\n    onLinesChanged(changeFromLineNumber, changeToLineNumber) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onLinesChanged(changeFromLineNumber, changeToLineNumber);\n        }\n        return false;\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        if (this._lastRenderData) {\n            this._lastRenderData.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n        }\n        return true;\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        if (this._lastRenderData) {\n            this._lastRenderData.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n        }\n        return true;\n    }\n    onScrollChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onThemeChanged() {\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._renderDecorations = true;\n        return true;\n    }\n    onTokensChanged(ranges) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onTokensChanged(ranges);\n        }\n        return false;\n    }\n    onTokensColorsChanged() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        return true;\n    }\n    onZonesChanged() {\n        this._lastRenderData = null;\n        return true;\n    }\n    // --- end event handlers\n    render(renderingCtx) {\n        const renderMinimap = this._model.options.renderMinimap;\n        if (renderMinimap === 0 /* None */) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n            this._sliderHorizontal.setWidth(0);\n            this._sliderHorizontal.setHeight(0);\n            return;\n        }\n        if (renderingCtx.scrollLeft + renderingCtx.viewportWidth >= renderingCtx.scrollWidth) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n        }\n        else {\n            this._shadow.setClassName('minimap-shadow-visible');\n        }\n        const layout = MinimapLayout.create(this._model.options, renderingCtx.viewportStartLineNumber, renderingCtx.viewportEndLineNumber, renderingCtx.viewportStartLineNumberVerticalOffset, renderingCtx.viewportHeight, renderingCtx.viewportContainsWhitespaceGaps, this._model.getLineCount(), this._model.getRealLineCount(), renderingCtx.scrollTop, renderingCtx.scrollHeight, this._lastRenderData ? this._lastRenderData.renderedLayout : null);\n        this._slider.setDisplay(layout.sliderNeeded ? 'block' : 'none');\n        this._slider.setTop(layout.sliderTop);\n        this._slider.setHeight(layout.sliderHeight);\n        // Compute horizontal slider coordinates\n        this._sliderHorizontal.setLeft(0);\n        this._sliderHorizontal.setWidth(this._model.options.minimapWidth);\n        this._sliderHorizontal.setTop(0);\n        this._sliderHorizontal.setHeight(layout.sliderHeight);\n        this.renderDecorations(layout);\n        this._lastRenderData = this.renderLines(layout);\n    }\n    renderDecorations(layout) {\n        if (this._renderDecorations) {\n            this._renderDecorations = false;\n            const selections = this._model.getSelections();\n            selections.sort(Range.compareRangesUsingStarts);\n            const decorations = this._model.getMinimapDecorationsInViewport(layout.startLineNumber, layout.endLineNumber);\n            decorations.sort((a, b) => (a.options.zIndex || 0) - (b.options.zIndex || 0));\n            const { canvasInnerWidth, canvasInnerHeight } = this._model.options;\n            const lineHeight = this._model.options.minimapLineHeight;\n            const characterWidth = this._model.options.minimapCharWidth;\n            const tabSize = this._model.getOptions().tabSize;\n            const canvasContext = this._decorationsCanvas.domNode.getContext('2d');\n            canvasContext.clearRect(0, 0, canvasInnerWidth, canvasInnerHeight);\n            // We first need to render line highlights and then render decorations on top of those.\n            // But we need to pick a single color for each line, and use that as a line highlight.\n            // This needs to be the color of the decoration with the highest `zIndex`, but priority\n            // is given to the selection.\n            const highlightedLines = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, false);\n            this._renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, lineHeight);\n            this._renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, lineHeight);\n            const lineOffsetMap = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, null);\n            this._renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n            this._renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n        }\n    }\n    _renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, lineHeight) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        canvasContext.fillStyle = this._selectionColor.transparent(0.5).toString();\n        let y1 = 0;\n        let y2 = 0;\n        for (const selection of selections) {\n            const startLineNumber = Math.max(layout.startLineNumber, selection.startLineNumber);\n            const endLineNumber = Math.min(layout.endLineNumber, selection.endLineNumber);\n            if (startLineNumber > endLineNumber) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                highlightedLines.set(line, true);\n            }\n            const yy1 = (startLineNumber - layout.startLineNumber) * lineHeight;\n            const yy2 = (endLineNumber - layout.startLineNumber) * lineHeight + lineHeight;\n            if (y2 >= yy1) {\n                // merge into previous\n                y2 = yy2;\n            }\n            else {\n                if (y2 > y1) {\n                    // flush\n                    canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n                }\n                y1 = yy1;\n                y2 = yy2;\n            }\n        }\n        if (y2 > y1) {\n            // flush\n            canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n        }\n    }\n    _renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, lineHeight) {\n        const highlightColors = new Map();\n        // Loop backwards to hit first decorations with higher `zIndex`\n        for (let i = decorations.length - 1; i >= 0; i--) {\n            const decoration = decorations[i];\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions || minimapOptions.position !== MinimapPosition.Inline) {\n                continue;\n            }\n            const startLineNumber = Math.max(layout.startLineNumber, decoration.range.startLineNumber);\n            const endLineNumber = Math.min(layout.endLineNumber, decoration.range.endLineNumber);\n            if (startLineNumber > endLineNumber) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            let highlightColor = highlightColors.get(decorationColor.toString());\n            if (!highlightColor) {\n                highlightColor = decorationColor.transparent(0.5).toString();\n                highlightColors.set(decorationColor.toString(), highlightColor);\n            }\n            canvasContext.fillStyle = highlightColor;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                if (highlightedLines.has(line)) {\n                    continue;\n                }\n                highlightedLines.set(line, true);\n                const y = (startLineNumber - layout.startLineNumber) * lineHeight;\n                canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y, canvasContext.canvas.width, lineHeight);\n            }\n        }\n    }\n    _renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        for (const selection of selections) {\n            const startLineNumber = Math.max(layout.startLineNumber, selection.startLineNumber);\n            const endLineNumber = Math.min(layout.endLineNumber, selection.endLineNumber);\n            if (startLineNumber > endLineNumber) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                this.renderDecorationOnLine(canvasContext, lineOffsetMap, selection, this._selectionColor, layout, line, lineHeight, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n            }\n        }\n    }\n    _renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        // Loop forwards to hit first decorations with lower `zIndex`\n        for (const decoration of decorations) {\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions) {\n                continue;\n            }\n            const startLineNumber = Math.max(layout.startLineNumber, decoration.range.startLineNumber);\n            const endLineNumber = Math.min(layout.endLineNumber, decoration.range.endLineNumber);\n            if (startLineNumber > endLineNumber) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                switch (minimapOptions.position) {\n                    case MinimapPosition.Inline:\n                        this.renderDecorationOnLine(canvasContext, lineOffsetMap, decoration.range, decorationColor, layout, line, lineHeight, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n                        continue;\n                    case MinimapPosition.Gutter: {\n                        const y = (line - layout.startLineNumber) * lineHeight;\n                        const x = 2;\n                        this.renderDecoration(canvasContext, decorationColor, x, y, GUTTER_DECORATION_WIDTH, lineHeight);\n                        continue;\n                    }\n                }\n            }\n        }\n    }\n    renderDecorationOnLine(canvasContext, lineOffsetMap, decorationRange, decorationColor, layout, lineNumber, height, lineHeight, tabSize, charWidth, canvasInnerWidth) {\n        const y = (lineNumber - layout.startLineNumber) * lineHeight;\n        // Skip rendering the line if it's vertically outside our viewport\n        if (y + height < 0 || y > this._model.options.canvasInnerHeight) {\n            return;\n        }\n        const { startLineNumber, endLineNumber } = decorationRange;\n        const startColumn = (startLineNumber === lineNumber ? decorationRange.startColumn : 1);\n        const endColumn = (endLineNumber === lineNumber ? decorationRange.endColumn : this._model.getLineMaxColumn(lineNumber));\n        const x1 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, startColumn, tabSize, charWidth, canvasInnerWidth);\n        const x2 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, endColumn, tabSize, charWidth, canvasInnerWidth);\n        this.renderDecoration(canvasContext, decorationColor, x1, y, x2 - x1, height);\n    }\n    getXOffsetForPosition(lineOffsetMap, lineNumber, column, tabSize, charWidth, canvasInnerWidth) {\n        if (column === 1) {\n            return MINIMAP_GUTTER_WIDTH;\n        }\n        const minimumXOffset = (column - 1) * charWidth;\n        if (minimumXOffset >= canvasInnerWidth) {\n            // there is no need to look at actual characters,\n            // as this column is certainly after the minimap width\n            return canvasInnerWidth;\n        }\n        // Cache line offset data so that it is only read once per line\n        let lineIndexToXOffset = lineOffsetMap.get(lineNumber);\n        if (!lineIndexToXOffset) {\n            const lineData = this._model.getLineContent(lineNumber);\n            lineIndexToXOffset = [MINIMAP_GUTTER_WIDTH];\n            let prevx = MINIMAP_GUTTER_WIDTH;\n            for (let i = 1; i < lineData.length + 1; i++) {\n                const charCode = lineData.charCodeAt(i - 1);\n                const dx = charCode === 9 /* Tab */\n                    ? tabSize * charWidth\n                    : strings.isFullWidthCharacter(charCode)\n                        ? 2 * charWidth\n                        : charWidth;\n                const x = prevx + dx;\n                if (x >= canvasInnerWidth) {\n                    // no need to keep on going, as we've hit the canvas width\n                    lineIndexToXOffset[i] = canvasInnerWidth;\n                    break;\n                }\n                lineIndexToXOffset[i] = x;\n                prevx = x;\n            }\n            lineOffsetMap.set(lineNumber, lineIndexToXOffset);\n        }\n        if (column - 1 < lineIndexToXOffset.length) {\n            return lineIndexToXOffset[column - 1];\n        }\n        // goes over the canvas width\n        return canvasInnerWidth;\n    }\n    renderDecoration(canvasContext, decorationColor, x, y, width, height) {\n        canvasContext.fillStyle = decorationColor && decorationColor.toString() || '';\n        canvasContext.fillRect(x, y, width, height);\n    }\n    renderLines(layout) {\n        const startLineNumber = layout.startLineNumber;\n        const endLineNumber = layout.endLineNumber;\n        const minimapLineHeight = this._model.options.minimapLineHeight;\n        // Check if nothing changed w.r.t. lines from last frame\n        if (this._lastRenderData && this._lastRenderData.linesEquals(layout)) {\n            const _lastData = this._lastRenderData._get();\n            // Nice!! Nothing changed from last frame\n            return new RenderData(layout, _lastData.imageData, _lastData.lines);\n        }\n        // Oh well!! We need to repaint some lines...\n        const imageData = this._getBuffer();\n        if (!imageData) {\n            // 0 width or 0 height canvas, nothing to do\n            return null;\n        }\n        // Render untouched lines by using last rendered data.\n        const [_dirtyY1, _dirtyY2, needed] = InnerMinimap._renderUntouchedLines(imageData, startLineNumber, endLineNumber, minimapLineHeight, this._lastRenderData);\n        // Fetch rendering info from view model for rest of lines that need rendering.\n        const lineInfo = this._model.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed);\n        const tabSize = this._model.getOptions().tabSize;\n        const defaultBackground = this._model.options.defaultBackgroundColor;\n        const background = this._model.options.backgroundColor;\n        const foregroundAlpha = this._model.options.foregroundAlpha;\n        const tokensColorTracker = this._model.tokensColorTracker;\n        const useLighterFont = tokensColorTracker.backgroundIsLight();\n        const renderMinimap = this._model.options.renderMinimap;\n        const charRenderer = this._model.options.charRenderer();\n        const fontScale = this._model.options.fontScale;\n        const minimapCharWidth = this._model.options.minimapCharWidth;\n        const baseCharHeight = (renderMinimap === 1 /* Text */ ? 2 /* BASE_CHAR_HEIGHT */ : 2 /* BASE_CHAR_HEIGHT */ + 1);\n        const renderMinimapLineHeight = baseCharHeight * fontScale;\n        const innerLinePadding = (minimapLineHeight > renderMinimapLineHeight ? Math.floor((minimapLineHeight - renderMinimapLineHeight) / 2) : 0);\n        // Render the rest of lines\n        const backgroundA = background.a / 255;\n        const renderBackground = new RGBA8(Math.round((background.r - defaultBackground.r) * backgroundA + defaultBackground.r), Math.round((background.g - defaultBackground.g) * backgroundA + defaultBackground.g), Math.round((background.b - defaultBackground.b) * backgroundA + defaultBackground.b), 255);\n        let dy = 0;\n        const renderedLines = [];\n        for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n            if (needed[lineIndex]) {\n                InnerMinimap._renderLine(imageData, renderBackground, background.a, useLighterFont, renderMinimap, minimapCharWidth, tokensColorTracker, foregroundAlpha, charRenderer, dy, innerLinePadding, tabSize, lineInfo[lineIndex], fontScale, minimapLineHeight);\n            }\n            renderedLines[lineIndex] = new MinimapLine(dy);\n            dy += minimapLineHeight;\n        }\n        const dirtyY1 = (_dirtyY1 === -1 ? 0 : _dirtyY1);\n        const dirtyY2 = (_dirtyY2 === -1 ? imageData.height : _dirtyY2);\n        const dirtyHeight = dirtyY2 - dirtyY1;\n        // Finally, paint to the canvas\n        const ctx = this._canvas.domNode.getContext('2d');\n        ctx.putImageData(imageData, 0, 0, 0, dirtyY1, imageData.width, dirtyHeight);\n        // Save rendered data for reuse on next frame if possible\n        return new RenderData(layout, imageData, renderedLines);\n    }\n    static _renderUntouchedLines(target, startLineNumber, endLineNumber, minimapLineHeight, lastRenderData) {\n        const needed = [];\n        if (!lastRenderData) {\n            for (let i = 0, len = endLineNumber - startLineNumber + 1; i < len; i++) {\n                needed[i] = true;\n            }\n            return [-1, -1, needed];\n        }\n        const _lastData = lastRenderData._get();\n        const lastTargetData = _lastData.imageData.data;\n        const lastStartLineNumber = _lastData.rendLineNumberStart;\n        const lastLines = _lastData.lines;\n        const lastLinesLength = lastLines.length;\n        const WIDTH = target.width;\n        const targetData = target.data;\n        const maxDestPixel = (endLineNumber - startLineNumber + 1) * minimapLineHeight * WIDTH * 4;\n        let dirtyPixel1 = -1; // the pixel offset up to which all the data is equal to the prev frame\n        let dirtyPixel2 = -1; // the pixel offset after which all the data is equal to the prev frame\n        let copySourceStart = -1;\n        let copySourceEnd = -1;\n        let copyDestStart = -1;\n        let copyDestEnd = -1;\n        let dest_dy = 0;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - startLineNumber;\n            const lastLineIndex = lineNumber - lastStartLineNumber;\n            const source_dy = (lastLineIndex >= 0 && lastLineIndex < lastLinesLength ? lastLines[lastLineIndex].dy : -1);\n            if (source_dy === -1) {\n                needed[lineIndex] = true;\n                dest_dy += minimapLineHeight;\n                continue;\n            }\n            const sourceStart = source_dy * WIDTH * 4;\n            const sourceEnd = (source_dy + minimapLineHeight) * WIDTH * 4;\n            const destStart = dest_dy * WIDTH * 4;\n            const destEnd = (dest_dy + minimapLineHeight) * WIDTH * 4;\n            if (copySourceEnd === sourceStart && copyDestEnd === destStart) {\n                // contiguous zone => extend copy request\n                copySourceEnd = sourceEnd;\n                copyDestEnd = destEnd;\n            }\n            else {\n                if (copySourceStart !== -1) {\n                    // flush existing copy request\n                    targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n                    if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                        dirtyPixel1 = copySourceEnd;\n                    }\n                    if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                        dirtyPixel2 = copySourceStart;\n                    }\n                }\n                copySourceStart = sourceStart;\n                copySourceEnd = sourceEnd;\n                copyDestStart = destStart;\n                copyDestEnd = destEnd;\n            }\n            needed[lineIndex] = false;\n            dest_dy += minimapLineHeight;\n        }\n        if (copySourceStart !== -1) {\n            // flush existing copy request\n            targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n            if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                dirtyPixel1 = copySourceEnd;\n            }\n            if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                dirtyPixel2 = copySourceStart;\n            }\n        }\n        const dirtyY1 = (dirtyPixel1 === -1 ? -1 : dirtyPixel1 / (WIDTH * 4));\n        const dirtyY2 = (dirtyPixel2 === -1 ? -1 : dirtyPixel2 / (WIDTH * 4));\n        return [dirtyY1, dirtyY2, needed];\n    }\n    static _renderLine(target, backgroundColor, backgroundAlpha, useLighterFont, renderMinimap, charWidth, colorTracker, foregroundAlpha, minimapCharRenderer, dy, innerLinePadding, tabSize, lineData, fontScale, minimapLineHeight) {\n        const content = lineData.content;\n        const tokens = lineData.tokens;\n        const maxDx = target.width - charWidth;\n        const force1pxHeight = (minimapLineHeight === 1);\n        let dx = MINIMAP_GUTTER_WIDTH;\n        let charIndex = 0;\n        let tabsCharDelta = 0;\n        for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n            const tokenEndIndex = tokens.getEndOffset(tokenIndex);\n            const tokenColorId = tokens.getForeground(tokenIndex);\n            const tokenColor = colorTracker.getColor(tokenColorId);\n            for (; charIndex < tokenEndIndex; charIndex++) {\n                if (dx > maxDx) {\n                    // hit edge of minimap\n                    return;\n                }\n                const charCode = content.charCodeAt(charIndex);\n                if (charCode === 9 /* Tab */) {\n                    const insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n                    tabsCharDelta += insertSpacesCount - 1;\n                    // No need to render anything since tab is invisible\n                    dx += insertSpacesCount * charWidth;\n                }\n                else if (charCode === 32 /* Space */) {\n                    // No need to render anything since space is invisible\n                    dx += charWidth;\n                }\n                else {\n                    // Render twice for a full width character\n                    const count = strings.isFullWidthCharacter(charCode) ? 2 : 1;\n                    for (let i = 0; i < count; i++) {\n                        if (renderMinimap === 2 /* Blocks */) {\n                            minimapCharRenderer.blockRenderChar(target, dx, dy + innerLinePadding, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight);\n                        }\n                        else { // RenderMinimap.Text\n                            minimapCharRenderer.renderChar(target, dx, dy + innerLinePadding, charCode, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight);\n                        }\n                        dx += charWidth;\n                        if (dx > maxDx) {\n                            // hit edge of minimap\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nclass ContiguousLineMap {\n    constructor(startLineNumber, endLineNumber, defaultValue) {\n        this._startLineNumber = startLineNumber;\n        this._endLineNumber = endLineNumber;\n        this._defaultValue = defaultValue;\n        this._values = [];\n        for (let i = 0, count = this._endLineNumber - this._startLineNumber + 1; i < count; i++) {\n            this._values[i] = defaultValue;\n        }\n    }\n    has(lineNumber) {\n        return (this.get(lineNumber) !== this._defaultValue);\n    }\n    set(lineNumber, value) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return;\n        }\n        this._values[lineNumber - this._startLineNumber] = value;\n    }\n    get(lineNumber) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return this._defaultValue;\n        }\n        return this._values[lineNumber - this._startLineNumber];\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const sliderBackground = theme.getColor(minimapSliderBackground);\n    if (sliderBackground) {\n        collector.addRule(`.monaco-editor .minimap-slider .minimap-slider-horizontal { background: ${sliderBackground}; }`);\n    }\n    const sliderHoverBackground = theme.getColor(minimapSliderHoverBackground);\n    if (sliderHoverBackground) {\n        collector.addRule(`.monaco-editor .minimap-slider:hover .minimap-slider-horizontal { background: ${sliderHoverBackground}; }`);\n    }\n    const sliderActiveBackground = theme.getColor(minimapSliderActiveBackground);\n    if (sliderActiveBackground) {\n        collector.addRule(`.monaco-editor .minimap-slider.active .minimap-slider-horizontal { background: ${sliderActiveBackground}; }`);\n    }\n    const shadow = theme.getColor(scrollbarShadow);\n    if (shadow) {\n        collector.addRule(`.monaco-editor .minimap-shadow-visible { box-shadow: ${shadow} -6px 0 6px -6px inset; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './overlayWidgets.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewOverlayWidgets extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._widgets = {};\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 4 /* OverlayWidgets */);\n        this._domNode.setClassName('overlayWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        return true;\n    }\n    // ---- end view event handlers\n    addWidget(widget) {\n        const domNode = createFastDomNode(widget.getDomNode());\n        this._widgets[widget.getId()] = {\n            widget: widget,\n            preference: null,\n            domNode: domNode\n        };\n        // This is sync because a widget wants to be in the dom\n        domNode.setPosition('absolute');\n        domNode.setAttribute('widgetId', widget.getId());\n        this._domNode.appendChild(domNode);\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, preference) {\n        const widgetData = this._widgets[widget.getId()];\n        if (widgetData.preference === preference) {\n            return false;\n        }\n        widgetData.preference = preference;\n        this.setShouldRender();\n        return true;\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._widgets[widgetId];\n            const domNode = widgetData.domNode.domNode;\n            delete this._widgets[widgetId];\n            domNode.parentNode.removeChild(domNode);\n            this.setShouldRender();\n        }\n    }\n    _renderWidget(widgetData) {\n        const domNode = widgetData.domNode;\n        if (widgetData.preference === null) {\n            domNode.unsetTop();\n            return;\n        }\n        if (widgetData.preference === 0 /* TOP_RIGHT_CORNER */) {\n            domNode.setTop(0);\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 1 /* BOTTOM_RIGHT_CORNER */) {\n            const widgetHeight = domNode.domNode.clientHeight;\n            domNode.setTop((this._editorHeight - widgetHeight - 2 * this._horizontalScrollbarHeight));\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 2 /* TOP_CENTER */) {\n            domNode.setTop(0);\n            domNode.domNode.style.right = '50%';\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._editorWidth);\n        const keys = Object.keys(this._widgets);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const widgetId = keys[i];\n            this._renderWidget(this._widgets[widgetId]);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel/viewModel.js';\nclass Settings {\n    constructor(config, theme) {\n        const options = config.options;\n        this.lineHeight = options.get(59 /* lineHeight */);\n        this.pixelRatio = options.get(129 /* pixelRatio */);\n        this.overviewRulerLanes = options.get(74 /* overviewRulerLanes */);\n        this.renderBorder = options.get(73 /* overviewRulerBorder */);\n        const borderColor = theme.getColor(editorOverviewRulerBorder);\n        this.borderColor = borderColor ? borderColor.toString() : null;\n        this.hideCursor = options.get(52 /* hideCursorInOverviewRuler */);\n        const cursorColor = theme.getColor(editorCursorForeground);\n        this.cursorColor = cursorColor ? cursorColor.transparent(0.7).toString() : null;\n        this.themeType = theme.type;\n        const minimapOpts = options.get(65 /* minimap */);\n        const minimapEnabled = minimapOpts.enabled;\n        const minimapSide = minimapOpts.side;\n        const backgroundColor = minimapEnabled\n            ? theme.getColor(editorOverviewRulerBackground) || TokenizationRegistry.getDefaultBackground()\n            : null;\n        if (backgroundColor === null || minimapSide === 'left') {\n            this.backgroundColor = null;\n        }\n        else {\n            this.backgroundColor = Color.Format.CSS.formatHex(backgroundColor);\n        }\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        const position = layoutInfo.overviewRuler;\n        this.top = position.top;\n        this.right = position.right;\n        this.domWidth = position.width;\n        this.domHeight = position.height;\n        if (this.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this.canvasWidth = 0;\n            this.canvasHeight = 0;\n        }\n        else {\n            this.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n            this.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n        }\n        const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n        this.x = x;\n        this.w = w;\n    }\n    _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n        const remainingWidth = canvasWidth - canvasLeftOffset;\n        if (laneCount >= 3) {\n            const leftWidth = Math.floor(remainingWidth / 3);\n            const rightWidth = Math.floor(remainingWidth / 3);\n            const centerWidth = remainingWidth - leftWidth - rightWidth;\n            const leftOffset = canvasLeftOffset;\n            const centerOffset = leftOffset + leftWidth;\n            const rightOffset = leftOffset + leftWidth + centerWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth,\n                    centerWidth,\n                    leftWidth + centerWidth,\n                    rightWidth,\n                    leftWidth + centerWidth + rightWidth,\n                    centerWidth + rightWidth,\n                    leftWidth + centerWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else if (laneCount === 2) {\n            const leftWidth = Math.floor(remainingWidth / 2);\n            const rightWidth = remainingWidth - leftWidth;\n            const leftOffset = canvasLeftOffset;\n            const rightOffset = leftOffset + leftWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth,\n                    leftWidth,\n                    leftWidth,\n                    rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else {\n            const offset = canvasLeftOffset;\n            const width = remainingWidth;\n            return [\n                [\n                    0,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset, // Left | Center | Right\n                ], [\n                    0,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width, // Left | Center | Right\n                ]\n            ];\n        }\n    }\n    equals(other) {\n        return (this.lineHeight === other.lineHeight\n            && this.pixelRatio === other.pixelRatio\n            && this.overviewRulerLanes === other.overviewRulerLanes\n            && this.renderBorder === other.renderBorder\n            && this.borderColor === other.borderColor\n            && this.hideCursor === other.hideCursor\n            && this.cursorColor === other.cursorColor\n            && this.themeType === other.themeType\n            && this.backgroundColor === other.backgroundColor\n            && this.top === other.top\n            && this.right === other.right\n            && this.domWidth === other.domWidth\n            && this.domHeight === other.domHeight\n            && this.canvasWidth === other.canvasWidth\n            && this.canvasHeight === other.canvasHeight);\n    }\n}\nexport class DecorationsOverviewRuler extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName('decorationsOverviewRuler');\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateSettings(false);\n        this._tokensColorTrackerListener = TokenizationRegistry.onDidChange((e) => {\n            if (e.changedColorMap) {\n                this._updateSettings(true);\n            }\n        });\n        this._cursorPositions = [];\n    }\n    dispose() {\n        super.dispose();\n        this._tokensColorTrackerListener.dispose();\n    }\n    _updateSettings(renderNow) {\n        const newSettings = new Settings(this._context.configuration, this._context.theme);\n        if (this._settings && this._settings.equals(newSettings)) {\n            // nothing to do\n            return false;\n        }\n        this._settings = newSettings;\n        this._domNode.setTop(this._settings.top);\n        this._domNode.setRight(this._settings.right);\n        this._domNode.setWidth(this._settings.domWidth);\n        this._domNode.setHeight(this._settings.domHeight);\n        this._domNode.domNode.width = this._settings.canvasWidth;\n        this._domNode.domNode.height = this._settings.canvasHeight;\n        if (renderNow) {\n            this._render();\n        }\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._updateSettings(false);\n    }\n    onCursorStateChanged(e) {\n        this._cursorPositions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            this._cursorPositions[i] = e.selections[i].getPosition();\n        }\n        this._cursorPositions.sort(Position.compare);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsOverviewRuler) {\n            return true;\n        }\n        return false;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        // invalidate color cache\n        this._context.model.invalidateOverviewRulerColorCache();\n        return this._updateSettings(false);\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(editorCtx) {\n        this._render();\n    }\n    _render() {\n        if (this._settings.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this._domNode.setBackgroundColor(this._settings.backgroundColor ? this._settings.backgroundColor : '');\n            this._domNode.setDisplay('none');\n            return;\n        }\n        this._domNode.setDisplay('block');\n        const canvasWidth = this._settings.canvasWidth;\n        const canvasHeight = this._settings.canvasHeight;\n        const lineHeight = this._settings.lineHeight;\n        const viewLayout = this._context.viewLayout;\n        const outerHeight = this._context.viewLayout.getScrollHeight();\n        const heightRatio = canvasHeight / outerHeight;\n        const decorations = this._context.model.getAllOverviewRulerDecorations(this._context.theme);\n        const minDecorationHeight = (6 /* MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio) | 0;\n        const halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n        const canvasCtx = this._domNode.domNode.getContext('2d');\n        if (this._settings.backgroundColor === null) {\n            canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        }\n        else {\n            canvasCtx.fillStyle = this._settings.backgroundColor;\n            canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n        }\n        const x = this._settings.x;\n        const w = this._settings.w;\n        decorations.sort(OverviewRulerDecorationsGroup.cmp);\n        for (const decorationGroup of decorations) {\n            const color = decorationGroup.color;\n            const decorationGroupData = decorationGroup.data;\n            canvasCtx.fillStyle = color;\n            let prevLane = 0;\n            let prevY1 = 0;\n            let prevY2 = 0;\n            for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n                const lane = decorationGroupData[3 * i];\n                const startLineNumber = decorationGroupData[3 * i + 1];\n                const endLineNumber = decorationGroupData[3 * i + 2];\n                let y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n                let y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n                const height = y2 - y1;\n                if (height < minDecorationHeight) {\n                    let yCenter = ((y1 + y2) / 2) | 0;\n                    if (yCenter < halfMinDecorationHeight) {\n                        yCenter = halfMinDecorationHeight;\n                    }\n                    else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n                        yCenter = canvasHeight - halfMinDecorationHeight;\n                    }\n                    y1 = yCenter - halfMinDecorationHeight;\n                    y2 = yCenter + halfMinDecorationHeight;\n                }\n                if (y1 > prevY2 + 1 || lane !== prevLane) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n                    }\n                    prevLane = lane;\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n        }\n        // Draw cursors\n        if (!this._settings.hideCursor && this._settings.cursorColor) {\n            const cursorHeight = (2 * this._settings.pixelRatio) | 0;\n            const halfCursorHeight = (cursorHeight / 2) | 0;\n            const cursorX = this._settings.x[7 /* Full */];\n            const cursorW = this._settings.w[7 /* Full */];\n            canvasCtx.fillStyle = this._settings.cursorColor;\n            let prevY1 = -100;\n            let prevY2 = -100;\n            for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n                const cursor = this._cursorPositions[i];\n                let yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n                if (yCenter < halfCursorHeight) {\n                    yCenter = halfCursorHeight;\n                }\n                else if (yCenter + halfCursorHeight > canvasHeight) {\n                    yCenter = canvasHeight - halfCursorHeight;\n                }\n                const y1 = yCenter - halfCursorHeight;\n                const y2 = y1 + cursorHeight;\n                if (y1 > prevY2 + 1) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n                    }\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n        }\n        if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n            canvasCtx.beginPath();\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = this._settings.borderColor;\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(0, canvasHeight);\n            canvasCtx.stroke();\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(canvasWidth, 0);\n            canvasCtx.stroke();\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { OverviewZoneManager } from '../../../common/viewModel/overviewZoneManager.js';\nimport { ViewEventHandler } from '../../../common/viewModel/viewEventHandler.js';\nexport class OverviewRuler extends ViewEventHandler {\n    constructor(context, cssClassName) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName(cssClassName);\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._zoneManager = new OverviewZoneManager((lineNumber) => this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber));\n        this._zoneManager.setDOMWidth(0);\n        this._zoneManager.setDOMHeight(0);\n        this._zoneManager.setOuterHeight(this._context.viewLayout.getScrollHeight());\n        this._zoneManager.setLineHeight(options.get(59 /* lineHeight */));\n        this._zoneManager.setPixelRatio(options.get(129 /* pixelRatio */));\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        if (e.hasChanged(59 /* lineHeight */)) {\n            this._zoneManager.setLineHeight(options.get(59 /* lineHeight */));\n            this._render();\n        }\n        if (e.hasChanged(129 /* pixelRatio */)) {\n            this._zoneManager.setPixelRatio(options.get(129 /* pixelRatio */));\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n        return true;\n    }\n    onFlushed(e) {\n        this._render();\n        return true;\n    }\n    onScrollChanged(e) {\n        if (e.scrollHeightChanged) {\n            this._zoneManager.setOuterHeight(e.scrollHeight);\n            this._render();\n        }\n        return true;\n    }\n    onZonesChanged(e) {\n        this._render();\n        return true;\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    setLayout(position) {\n        this._domNode.setTop(position.top);\n        this._domNode.setRight(position.right);\n        let hasChanged = false;\n        hasChanged = this._zoneManager.setDOMWidth(position.width) || hasChanged;\n        hasChanged = this._zoneManager.setDOMHeight(position.height) || hasChanged;\n        if (hasChanged) {\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n    }\n    setZones(zones) {\n        this._zoneManager.setZones(zones);\n        this._render();\n    }\n    _render() {\n        if (this._zoneManager.getOuterHeight() === 0) {\n            return false;\n        }\n        const width = this._zoneManager.getCanvasWidth();\n        const height = this._zoneManager.getCanvasHeight();\n        const colorZones = this._zoneManager.resolveColorZones();\n        const id2Color = this._zoneManager.getId2Color();\n        const ctx = this._domNode.domNode.getContext('2d');\n        ctx.clearRect(0, 0, width, height);\n        if (colorZones.length > 0) {\n            this._renderOneLane(ctx, colorZones, id2Color, width);\n        }\n        return true;\n    }\n    _renderOneLane(ctx, colorZones, id2Color, width) {\n        let currentColorId = 0;\n        let currentFrom = 0;\n        let currentTo = 0;\n        for (const zone of colorZones) {\n            const zoneColorId = zone.colorId;\n            const zoneFrom = zone.from;\n            const zoneTo = zone.to;\n            if (zoneColorId !== currentColorId) {\n                ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                currentColorId = zoneColorId;\n                ctx.fillStyle = id2Color[currentColorId];\n                currentFrom = zoneFrom;\n                currentTo = zoneTo;\n            }\n            else {\n                if (currentTo >= zoneFrom) {\n                    currentTo = Math.max(currentTo, zoneTo);\n                }\n                else {\n                    ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                    currentFrom = zoneFrom;\n                    currentTo = zoneTo;\n                }\n            }\n        }\n        ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './rulers.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { editorRuler } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class Rulers extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.domNode.setClassName('view-rulers');\n        this._renderedRulers = [];\n        const options = this._context.configuration.options;\n        this._rulers = options.get(91 /* rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(44 /* fontInfo */).typicalHalfwidthCharacterWidth;\n    }\n    dispose() {\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._rulers = options.get(91 /* rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(44 /* fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    _ensureRulersCount() {\n        const currentCount = this._renderedRulers.length;\n        const desiredCount = this._rulers.length;\n        if (currentCount === desiredCount) {\n            // Nothing to do\n            return;\n        }\n        if (currentCount < desiredCount) {\n            const { tabSize } = this._context.model.getTextModelOptions();\n            const rulerWidth = tabSize;\n            let addCount = desiredCount - currentCount;\n            while (addCount > 0) {\n                const node = createFastDomNode(document.createElement('div'));\n                node.setClassName('view-ruler');\n                node.setWidth(rulerWidth);\n                this.domNode.appendChild(node);\n                this._renderedRulers.push(node);\n                addCount--;\n            }\n            return;\n        }\n        let removeCount = currentCount - desiredCount;\n        while (removeCount > 0) {\n            const node = this._renderedRulers.pop();\n            this.domNode.removeChild(node);\n            removeCount--;\n        }\n    }\n    render(ctx) {\n        this._ensureRulersCount();\n        for (let i = 0, len = this._rulers.length; i < len; i++) {\n            const node = this._renderedRulers[i];\n            const ruler = this._rulers[i];\n            node.setBoxShadow(ruler.color ? `1px 0 0 0 ${ruler.color} inset` : ``);\n            node.setHeight(Math.min(ctx.scrollHeight, 1000000));\n            node.setLeft(ruler.column * this._typicalHalfwidthCharacterWidth);\n        }\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const rulerColor = theme.getColor(editorRuler);\n    if (rulerColor) {\n        collector.addRule(`.monaco-editor .view-ruler { box-shadow: 1px 0 0 0 ${rulerColor} inset; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './scrollDecoration.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { scrollbarShadow } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class ScrollDecorationViewPart extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._scrollTop = 0;\n        this._width = 0;\n        this._updateWidth();\n        this._shouldShow = false;\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(92 /* scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n    }\n    dispose() {\n        super.dispose();\n    }\n    _updateShouldShow() {\n        const newShouldShow = (this._useShadows && this._scrollTop > 0);\n        if (this._shouldShow !== newShouldShow) {\n            this._shouldShow = newShouldShow;\n            return true;\n        }\n        return false;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _updateWidth() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        if (layoutInfo.minimap.renderMinimap === 0 || (layoutInfo.minimap.minimapWidth > 0 && layoutInfo.minimap.minimapLeft === 0)) {\n            this._width = layoutInfo.width;\n        }\n        else {\n            this._width = layoutInfo.width - layoutInfo.minimap.minimapWidth - layoutInfo.verticalScrollbarWidth;\n        }\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(92 /* scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._updateWidth();\n        this._updateShouldShow();\n        return true;\n    }\n    onScrollChanged(e) {\n        this._scrollTop = e.scrollTop;\n        return this._updateShouldShow();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._width);\n        this._domNode.setClassName(this._shouldShow ? 'scroll-decoration' : '');\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const shadow = theme.getColor(scrollbarShadow);\n    if (shadow) {\n        collector.addRule(`.monaco-editor .scroll-decoration { box-shadow: ${shadow} 0 6px 6px -6px inset; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './selections.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorInactiveSelection, editorSelectionBackground, editorSelectionForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nclass HorizontalRangeWithStyle {\n    constructor(other) {\n        this.left = other.left;\n        this.width = other.width;\n        this.startStyle = null;\n        this.endStyle = null;\n    }\n}\nclass LineVisibleRangesWithStyle {\n    constructor(lineNumber, ranges) {\n        this.lineNumber = lineNumber;\n        this.ranges = ranges;\n    }\n}\nfunction toStyledRange(item) {\n    return new HorizontalRangeWithStyle(item);\n}\nfunction toStyled(item) {\n    return new LineVisibleRangesWithStyle(item.lineNumber, item.ranges.map(toStyledRange));\n}\nexport class SelectionsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._previousFrameVisibleRangesWithStyle = [];\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._roundedSelection = options.get(90 /* roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(44 /* fontInfo */).typicalHalfwidthCharacterWidth;\n        this._selections = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._roundedSelection = options.get(90 /* roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(44 /* fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections.slice(0);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true; //e.inlineDecorationsChanged;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _visibleRangesHaveGaps(linesVisibleRanges) {\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = linesVisibleRanges[i];\n            if (lineVisibleRanges.ranges.length > 1) {\n                // There are two ranges on the same line\n                return true;\n            }\n        }\n        return false;\n    }\n    _enrichVisibleRangesWithStyle(viewport, linesVisibleRanges, previousFrame) {\n        const epsilon = this._typicalHalfwidthCharacterWidth / 4;\n        let previousFrameTop = null;\n        let previousFrameBottom = null;\n        if (previousFrame && previousFrame.length > 0 && linesVisibleRanges.length > 0) {\n            const topLineNumber = linesVisibleRanges[0].lineNumber;\n            if (topLineNumber === viewport.startLineNumber) {\n                for (let i = 0; !previousFrameTop && i < previousFrame.length; i++) {\n                    if (previousFrame[i].lineNumber === topLineNumber) {\n                        previousFrameTop = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            const bottomLineNumber = linesVisibleRanges[linesVisibleRanges.length - 1].lineNumber;\n            if (bottomLineNumber === viewport.endLineNumber) {\n                for (let i = previousFrame.length - 1; !previousFrameBottom && i >= 0; i--) {\n                    if (previousFrame[i].lineNumber === bottomLineNumber) {\n                        previousFrameBottom = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            if (previousFrameTop && !previousFrameTop.startStyle) {\n                previousFrameTop = null;\n            }\n            if (previousFrameBottom && !previousFrameBottom.startStyle) {\n                previousFrameBottom = null;\n            }\n        }\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            // We know for a fact that there is precisely one range on each line\n            const curLineRange = linesVisibleRanges[i].ranges[0];\n            const curLeft = curLineRange.left;\n            const curRight = curLineRange.left + curLineRange.width;\n            const startStyle = {\n                top: 0 /* EXTERN */,\n                bottom: 0 /* EXTERN */\n            };\n            const endStyle = {\n                top: 0 /* EXTERN */,\n                bottom: 0 /* EXTERN */\n            };\n            if (i > 0) {\n                // Look above\n                const prevLeft = linesVisibleRanges[i - 1].ranges[0].left;\n                const prevRight = linesVisibleRanges[i - 1].ranges[0].left + linesVisibleRanges[i - 1].ranges[0].width;\n                if (abs(curLeft - prevLeft) < epsilon) {\n                    startStyle.top = 2 /* FLAT */;\n                }\n                else if (curLeft > prevLeft) {\n                    startStyle.top = 1 /* INTERN */;\n                }\n                if (abs(curRight - prevRight) < epsilon) {\n                    endStyle.top = 2 /* FLAT */;\n                }\n                else if (prevLeft < curRight && curRight < prevRight) {\n                    endStyle.top = 1 /* INTERN */;\n                }\n            }\n            else if (previousFrameTop) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.top = previousFrameTop.startStyle.top;\n                endStyle.top = previousFrameTop.endStyle.top;\n            }\n            if (i + 1 < len) {\n                // Look below\n                const nextLeft = linesVisibleRanges[i + 1].ranges[0].left;\n                const nextRight = linesVisibleRanges[i + 1].ranges[0].left + linesVisibleRanges[i + 1].ranges[0].width;\n                if (abs(curLeft - nextLeft) < epsilon) {\n                    startStyle.bottom = 2 /* FLAT */;\n                }\n                else if (nextLeft < curLeft && curLeft < nextRight) {\n                    startStyle.bottom = 1 /* INTERN */;\n                }\n                if (abs(curRight - nextRight) < epsilon) {\n                    endStyle.bottom = 2 /* FLAT */;\n                }\n                else if (curRight < nextRight) {\n                    endStyle.bottom = 1 /* INTERN */;\n                }\n            }\n            else if (previousFrameBottom) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.bottom = previousFrameBottom.startStyle.bottom;\n                endStyle.bottom = previousFrameBottom.endStyle.bottom;\n            }\n            curLineRange.startStyle = startStyle;\n            curLineRange.endStyle = endStyle;\n        }\n    }\n    _getVisibleRangesWithStyle(selection, ctx, previousFrame) {\n        const _linesVisibleRanges = ctx.linesVisibleRangesForRange(selection, true) || [];\n        const linesVisibleRanges = _linesVisibleRanges.map(toStyled);\n        const visibleRangesHaveGaps = this._visibleRangesHaveGaps(linesVisibleRanges);\n        if (!visibleRangesHaveGaps && this._roundedSelection) {\n            this._enrichVisibleRangesWithStyle(ctx.visibleRange, linesVisibleRanges, previousFrame);\n        }\n        // The visible ranges are sorted TOP-BOTTOM and LEFT-RIGHT\n        return linesVisibleRanges;\n    }\n    _createSelectionPiece(top, height, className, left, width) {\n        return ('<div class=\"cslr '\n            + className\n            + '\" style=\"top:'\n            + top.toString()\n            + 'px;left:'\n            + left.toString()\n            + 'px;width:'\n            + width.toString()\n            + 'px;height:'\n            + height\n            + 'px;\"></div>');\n    }\n    _actualRenderOneSelection(output2, visibleStartLineNumber, hasMultipleSelections, visibleRanges) {\n        if (visibleRanges.length === 0) {\n            return;\n        }\n        const visibleRangesHaveStyle = !!visibleRanges[0].ranges[0].startStyle;\n        const fullLineHeight = (this._lineHeight).toString();\n        const reducedLineHeight = (this._lineHeight - 1).toString();\n        const firstLineNumber = visibleRanges[0].lineNumber;\n        const lastLineNumber = visibleRanges[visibleRanges.length - 1].lineNumber;\n        for (let i = 0, len = visibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = visibleRanges[i];\n            const lineNumber = lineVisibleRanges.lineNumber;\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const lineHeight = hasMultipleSelections ? (lineNumber === lastLineNumber || lineNumber === firstLineNumber ? reducedLineHeight : fullLineHeight) : fullLineHeight;\n            const top = hasMultipleSelections ? (lineNumber === firstLineNumber ? 1 : 0) : 0;\n            let innerCornerOutput = '';\n            let restOfSelectionOutput = '';\n            for (let j = 0, lenJ = lineVisibleRanges.ranges.length; j < lenJ; j++) {\n                const visibleRange = lineVisibleRanges.ranges[j];\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 1 /* INTERN */ || startStyle.bottom === 1 /* INTERN */) {\n                        // Reverse rounded corner to the left\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (startStyle.top === 1 /* INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                        }\n                        if (startStyle.bottom === 1 /* INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                    if (endStyle.top === 1 /* INTERN */ || endStyle.bottom === 1 /* INTERN */) {\n                        // Reverse rounded corner to the right\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (endStyle.top === 1 /* INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                        }\n                        if (endStyle.bottom === 1 /* INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                }\n                let className = SelectionsOverlay.SELECTION_CLASS_NAME;\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 0 /* EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                    }\n                    if (startStyle.bottom === 0 /* EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                    }\n                    if (endStyle.top === 0 /* EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                    }\n                    if (endStyle.bottom === 0 /* EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                    }\n                }\n                restOfSelectionOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left, visibleRange.width);\n            }\n            output2[lineIndex][0] += innerCornerOutput;\n            output2[lineIndex][1] += restOfSelectionOutput;\n        }\n    }\n    prepareRender(ctx) {\n        // Build HTML for inner corners separate from HTML for the rest of selections,\n        // as the inner corner HTML can interfere with that of other selections.\n        // In final render, make sure to place the inner corner HTML before the rest of selection HTML. See issue #77777.\n        const output = [];\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = ['', ''];\n        }\n        const thisFrameVisibleRangesWithStyle = [];\n        for (let i = 0, len = this._selections.length; i < len; i++) {\n            const selection = this._selections[i];\n            if (selection.isEmpty()) {\n                thisFrameVisibleRangesWithStyle[i] = null;\n                continue;\n            }\n            const visibleRangesWithStyle = this._getVisibleRangesWithStyle(selection, ctx, this._previousFrameVisibleRangesWithStyle[i]);\n            thisFrameVisibleRangesWithStyle[i] = visibleRangesWithStyle;\n            this._actualRenderOneSelection(output, visibleStartLineNumber, this._selections.length > 1, visibleRangesWithStyle);\n        }\n        this._previousFrameVisibleRangesWithStyle = thisFrameVisibleRangesWithStyle;\n        this._renderResult = output.map(([internalCorners, restOfSelection]) => internalCorners + restOfSelection);\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nSelectionsOverlay.SELECTION_CLASS_NAME = 'selected-text';\nSelectionsOverlay.SELECTION_TOP_LEFT = 'top-left-radius';\nSelectionsOverlay.SELECTION_BOTTOM_LEFT = 'bottom-left-radius';\nSelectionsOverlay.SELECTION_TOP_RIGHT = 'top-right-radius';\nSelectionsOverlay.SELECTION_BOTTOM_RIGHT = 'bottom-right-radius';\nSelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME = 'monaco-editor-background';\nSelectionsOverlay.ROUNDED_PIECE_WIDTH = 10;\nregisterThemingParticipant((theme, collector) => {\n    const editorSelectionColor = theme.getColor(editorSelectionBackground);\n    if (editorSelectionColor) {\n        collector.addRule(`.monaco-editor .focused .selected-text { background-color: ${editorSelectionColor}; }`);\n    }\n    const editorInactiveSelectionColor = theme.getColor(editorInactiveSelection);\n    if (editorInactiveSelectionColor) {\n        collector.addRule(`.monaco-editor .selected-text { background-color: ${editorInactiveSelectionColor}; }`);\n    }\n    const editorSelectionForegroundColor = theme.getColor(editorSelectionForeground);\n    if (editorSelectionForegroundColor && !editorSelectionForegroundColor.isTransparent()) {\n        collector.addRule(`.monaco-editor .view-line span.inline-selected-text { color: ${editorSelectionForegroundColor}; }`);\n    }\n});\nfunction abs(n) {\n    return n < 0 ? -n : n;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass ViewCursorRenderData {\n    constructor(top, left, width, height, textContent, textContentClassName) {\n        this.top = top;\n        this.left = left;\n        this.width = width;\n        this.height = height;\n        this.textContent = textContent;\n        this.textContentClassName = textContentClassName;\n    }\n}\nexport class ViewCursor {\n    constructor(context) {\n        this._context = context;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(44 /* fontInfo */);\n        this._cursorStyle = options.get(24 /* cursorStyle */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(27 /* cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        this._isVisible = true;\n        // Create the dom node\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this._domNode.setHeight(this._lineHeight);\n        this._domNode.setTop(0);\n        this._domNode.setLeft(0);\n        applyFontInfo(this._domNode, fontInfo);\n        this._domNode.setDisplay('none');\n        this._position = new Position(1, 1);\n        this._lastRenderedContent = '';\n        this._renderData = null;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return this._position;\n    }\n    show() {\n        if (!this._isVisible) {\n            this._domNode.setVisibility('inherit');\n            this._isVisible = true;\n        }\n    }\n    hide() {\n        if (this._isVisible) {\n            this._domNode.setVisibility('hidden');\n            this._isVisible = false;\n        }\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(44 /* fontInfo */);\n        this._cursorStyle = options.get(24 /* cursorStyle */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(27 /* cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        applyFontInfo(this._domNode, fontInfo);\n        return true;\n    }\n    onCursorPositionChanged(position) {\n        this._position = position;\n        return true;\n    }\n    /**\n     * If `this._position` is inside a grapheme, returns the position where the grapheme starts.\n     * Also returns the next grapheme.\n     */\n    _getGraphemeAwarePosition() {\n        const { lineNumber, column } = this._position;\n        const lineContent = this._context.model.getLineContent(lineNumber);\n        const [startOffset, endOffset] = strings.getCharContainingOffset(lineContent, column - 1);\n        return [new Position(lineNumber, startOffset + 1), lineContent.substring(startOffset, endOffset)];\n    }\n    _prepareRender(ctx) {\n        let textContent = '';\n        const [position, nextGrapheme] = this._getGraphemeAwarePosition();\n        if (this._cursorStyle === TextEditorCursorStyle.Line || this._cursorStyle === TextEditorCursorStyle.LineThin) {\n            const visibleRange = ctx.visibleRangeForPosition(position);\n            if (!visibleRange || visibleRange.outsideRenderedLine) {\n                // Outside viewport\n                return null;\n            }\n            let width;\n            if (this._cursorStyle === TextEditorCursorStyle.Line) {\n                width = dom.computeScreenAwareSize(this._lineCursorWidth > 0 ? this._lineCursorWidth : 2);\n                if (width > 2) {\n                    textContent = nextGrapheme;\n                }\n            }\n            else {\n                width = dom.computeScreenAwareSize(1);\n            }\n            let left = visibleRange.left;\n            if (width >= 2 && left >= 1) {\n                // try to center cursor\n                left -= 1;\n            }\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n            return new ViewCursorRenderData(top, left, width, this._lineHeight, textContent, '');\n        }\n        const visibleRangeForCharacter = ctx.linesVisibleRangesForRange(new Range(position.lineNumber, position.column, position.lineNumber, position.column + nextGrapheme.length), false);\n        if (!visibleRangeForCharacter || visibleRangeForCharacter.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const firstVisibleRangeForCharacter = visibleRangeForCharacter[0];\n        if (firstVisibleRangeForCharacter.outsideRenderedLine || firstVisibleRangeForCharacter.ranges.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const range = firstVisibleRangeForCharacter.ranges[0];\n        const width = range.width < 1 ? this._typicalHalfwidthCharacterWidth : range.width;\n        let textContentClassName = '';\n        if (this._cursorStyle === TextEditorCursorStyle.Block) {\n            const lineData = this._context.model.getViewLineData(position.lineNumber);\n            textContent = nextGrapheme;\n            const tokenIndex = lineData.tokens.findTokenIndexAtOffset(position.column - 1);\n            textContentClassName = lineData.tokens.getClassName(tokenIndex);\n        }\n        let top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n        let height = this._lineHeight;\n        // Underline might interfere with clicking\n        if (this._cursorStyle === TextEditorCursorStyle.Underline || this._cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n            top += this._lineHeight - 2;\n            height = 2;\n        }\n        return new ViewCursorRenderData(top, range.left, width, height, textContent, textContentClassName);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRender(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            this._domNode.setDisplay('none');\n            return null;\n        }\n        if (this._lastRenderedContent !== this._renderData.textContent) {\n            this._lastRenderedContent = this._renderData.textContent;\n            this._domNode.domNode.textContent = this._lastRenderedContent;\n        }\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ${this._renderData.textContentClassName}`);\n        this._domNode.setDisplay('block');\n        this._domNode.setTop(this._renderData.top);\n        this._domNode.setLeft(this._renderData.left);\n        this._domNode.setWidth(this._renderData.width);\n        this._domNode.setLineHeight(this._renderData.height);\n        this._domNode.setHeight(this._renderData.height);\n        return {\n            domNode: this._domNode.domNode,\n            position: this._position,\n            contentLeft: this._renderData.left,\n            height: this._renderData.height,\n            width: 2\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './viewCursors.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { IntervalTimer, TimeoutTimer } from '../../../../base/common/async.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { ViewCursor } from './viewCursor.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { editorCursorBackground, editorCursorForeground } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class ViewCursors extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(81 /* readOnly */);\n        this._cursorBlinking = options.get(22 /* cursorBlinking */);\n        this._cursorStyle = options.get(24 /* cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(23 /* cursorSmoothCaretAnimation */);\n        this._selectionIsEmpty = true;\n        this._isComposingInput = false;\n        this._isVisible = false;\n        this._primaryCursor = new ViewCursor(this._context);\n        this._secondaryCursors = [];\n        this._renderData = [];\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateDomClassName();\n        this._domNode.appendChild(this._primaryCursor.getDomNode());\n        this._startCursorBlinkAnimation = new TimeoutTimer();\n        this._cursorFlatBlinkInterval = new IntervalTimer();\n        this._blinkingEnabled = false;\n        this._editorHasFocus = false;\n        this._updateBlinking();\n    }\n    dispose() {\n        super.dispose();\n        this._startCursorBlinkAnimation.dispose();\n        this._cursorFlatBlinkInterval.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onCompositionStart(e) {\n        this._isComposingInput = true;\n        this._updateBlinking();\n        return true;\n    }\n    onCompositionEnd(e) {\n        this._isComposingInput = false;\n        this._updateBlinking();\n        return true;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(81 /* readOnly */);\n        this._cursorBlinking = options.get(22 /* cursorBlinking */);\n        this._cursorStyle = options.get(24 /* cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(23 /* cursorSmoothCaretAnimation */);\n        this._updateBlinking();\n        this._updateDomClassName();\n        this._primaryCursor.onConfigurationChanged(e);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    _onCursorPositionChanged(position, secondaryPositions) {\n        this._primaryCursor.onCursorPositionChanged(position);\n        this._updateBlinking();\n        if (this._secondaryCursors.length < secondaryPositions.length) {\n            // Create new cursors\n            const addCnt = secondaryPositions.length - this._secondaryCursors.length;\n            for (let i = 0; i < addCnt; i++) {\n                const newCursor = new ViewCursor(this._context);\n                this._domNode.domNode.insertBefore(newCursor.getDomNode().domNode, this._primaryCursor.getDomNode().domNode.nextSibling);\n                this._secondaryCursors.push(newCursor);\n            }\n        }\n        else if (this._secondaryCursors.length > secondaryPositions.length) {\n            // Remove some cursors\n            const removeCnt = this._secondaryCursors.length - secondaryPositions.length;\n            for (let i = 0; i < removeCnt; i++) {\n                this._domNode.removeChild(this._secondaryCursors[0].getDomNode());\n                this._secondaryCursors.splice(0, 1);\n            }\n        }\n        for (let i = 0; i < secondaryPositions.length; i++) {\n            this._secondaryCursors[i].onCursorPositionChanged(secondaryPositions[i]);\n        }\n    }\n    onCursorStateChanged(e) {\n        const positions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            positions[i] = e.selections[i].getPosition();\n        }\n        this._onCursorPositionChanged(positions[0], positions.slice(1));\n        const selectionIsEmpty = e.selections[0].isEmpty();\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            this._updateDomClassName();\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        this._editorHasFocus = e.isFocused;\n        this._updateBlinking();\n        return false;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onTokensChanged(e) {\n        const shouldRender = (position) => {\n            for (let i = 0, len = e.ranges.length; i < len; i++) {\n                if (e.ranges[i].fromLineNumber <= position.lineNumber && position.lineNumber <= e.ranges[i].toLineNumber) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        if (shouldRender(this._primaryCursor.getPosition())) {\n            return true;\n        }\n        for (const secondaryCursor of this._secondaryCursors) {\n            if (shouldRender(secondaryCursor.getPosition())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // ---- blinking logic\n    _getCursorBlinking() {\n        if (this._isComposingInput) {\n            // avoid double cursors\n            return 0 /* Hidden */;\n        }\n        if (!this._editorHasFocus) {\n            return 0 /* Hidden */;\n        }\n        if (this._readOnly) {\n            return 5 /* Solid */;\n        }\n        return this._cursorBlinking;\n    }\n    _updateBlinking() {\n        this._startCursorBlinkAnimation.cancel();\n        this._cursorFlatBlinkInterval.cancel();\n        const blinkingStyle = this._getCursorBlinking();\n        // hidden and solid are special as they involve no animations\n        const isHidden = (blinkingStyle === 0 /* Hidden */);\n        const isSolid = (blinkingStyle === 5 /* Solid */);\n        if (isHidden) {\n            this._hide();\n        }\n        else {\n            this._show();\n        }\n        this._blinkingEnabled = false;\n        this._updateDomClassName();\n        if (!isHidden && !isSolid) {\n            if (blinkingStyle === 1 /* Blink */) {\n                // flat blinking is handled by JavaScript to save battery life due to Chromium step timing issue https://bugs.chromium.org/p/chromium/issues/detail?id=361587\n                this._cursorFlatBlinkInterval.cancelAndSet(() => {\n                    if (this._isVisible) {\n                        this._hide();\n                    }\n                    else {\n                        this._show();\n                    }\n                }, ViewCursors.BLINK_INTERVAL);\n            }\n            else {\n                this._startCursorBlinkAnimation.setIfNotSet(() => {\n                    this._blinkingEnabled = true;\n                    this._updateDomClassName();\n                }, ViewCursors.BLINK_INTERVAL);\n            }\n        }\n    }\n    // --- end blinking logic\n    _updateDomClassName() {\n        this._domNode.setClassName(this._getClassName());\n    }\n    _getClassName() {\n        let result = 'cursors-layer';\n        if (!this._selectionIsEmpty) {\n            result += ' has-selection';\n        }\n        switch (this._cursorStyle) {\n            case TextEditorCursorStyle.Line:\n                result += ' cursor-line-style';\n                break;\n            case TextEditorCursorStyle.Block:\n                result += ' cursor-block-style';\n                break;\n            case TextEditorCursorStyle.Underline:\n                result += ' cursor-underline-style';\n                break;\n            case TextEditorCursorStyle.LineThin:\n                result += ' cursor-line-thin-style';\n                break;\n            case TextEditorCursorStyle.BlockOutline:\n                result += ' cursor-block-outline-style';\n                break;\n            case TextEditorCursorStyle.UnderlineThin:\n                result += ' cursor-underline-thin-style';\n                break;\n            default:\n                result += ' cursor-line-style';\n        }\n        if (this._blinkingEnabled) {\n            switch (this._getCursorBlinking()) {\n                case 1 /* Blink */:\n                    result += ' cursor-blink';\n                    break;\n                case 2 /* Smooth */:\n                    result += ' cursor-smooth';\n                    break;\n                case 3 /* Phase */:\n                    result += ' cursor-phase';\n                    break;\n                case 4 /* Expand */:\n                    result += ' cursor-expand';\n                    break;\n                case 5 /* Solid */:\n                    result += ' cursor-solid';\n                    break;\n                default:\n                    result += ' cursor-solid';\n            }\n        }\n        else {\n            result += ' cursor-solid';\n        }\n        if (this._cursorSmoothCaretAnimation) {\n            result += ' cursor-smooth-caret-animation';\n        }\n        return result;\n    }\n    _show() {\n        this._primaryCursor.show();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].show();\n        }\n        this._isVisible = true;\n    }\n    _hide() {\n        this._primaryCursor.hide();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].hide();\n        }\n        this._isVisible = false;\n    }\n    // ---- IViewPart implementation\n    prepareRender(ctx) {\n        this._primaryCursor.prepareRender(ctx);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const renderData = [];\n        let renderDataLen = 0;\n        const primaryRenderData = this._primaryCursor.render(ctx);\n        if (primaryRenderData) {\n            renderData[renderDataLen++] = primaryRenderData;\n        }\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            const secondaryRenderData = this._secondaryCursors[i].render(ctx);\n            if (secondaryRenderData) {\n                renderData[renderDataLen++] = secondaryRenderData;\n            }\n        }\n        this._renderData = renderData;\n    }\n    getLastRenderData() {\n        return this._renderData;\n    }\n}\nViewCursors.BLINK_INTERVAL = 500;\nregisterThemingParticipant((theme, collector) => {\n    const caret = theme.getColor(editorCursorForeground);\n    if (caret) {\n        let caretBackground = theme.getColor(editorCursorBackground);\n        if (!caretBackground) {\n            caretBackground = caret.opposite();\n        }\n        collector.addRule(`.monaco-editor .cursors-layer .cursor { background-color: ${caret}; border-color: ${caret}; color: ${caretBackground}; }`);\n        if (theme.type === 'hc') {\n            collector.addRule(`.monaco-editor .cursors-layer.has-selection .cursor { border-left: 1px solid ${caretBackground}; border-right: 1px solid ${caretBackground}; }`);\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\nexport class ViewZones extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName('view-zones');\n        this.domNode.setPosition('absolute');\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.marginDomNode = createFastDomNode(document.createElement('div'));\n        this.marginDomNode.setClassName('margin-view-zones');\n        this.marginDomNode.setPosition('absolute');\n        this.marginDomNode.setAttribute('role', 'presentation');\n        this.marginDomNode.setAttribute('aria-hidden', 'true');\n        this._zones = {};\n    }\n    dispose() {\n        super.dispose();\n        this._zones = {};\n    }\n    // ---- begin view event handlers\n    _recomputeWhitespacesProps() {\n        const whitespaces = this._context.viewLayout.getWhitespaces();\n        const oldWhitespaces = new Map();\n        for (const whitespace of whitespaces) {\n            oldWhitespaces.set(whitespace.id, whitespace);\n        }\n        let hadAChange = false;\n        this._context.model.changeWhitespace((whitespaceAccessor) => {\n            const keys = Object.keys(this._zones);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const id = keys[i];\n                const zone = this._zones[id];\n                const props = this._computeWhitespaceProps(zone.delegate);\n                zone.isInHiddenArea = props.isInHiddenArea;\n                const oldWhitespace = oldWhitespaces.get(id);\n                if (oldWhitespace && (oldWhitespace.afterLineNumber !== props.afterViewLineNumber || oldWhitespace.height !== props.heightInPx)) {\n                    whitespaceAccessor.changeOneWhitespace(id, props.afterViewLineNumber, props.heightInPx);\n                    this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n                    hadAChange = true;\n                }\n            }\n        });\n        return hadAChange;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        if (e.hasChanged(59 /* lineHeight */)) {\n            this._recomputeWhitespacesProps();\n        }\n        return true;\n    }\n    onLineMappingChanged(e) {\n        return this._recomputeWhitespacesProps();\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    _getZoneOrdinal(zone) {\n        if (typeof zone.afterColumn !== 'undefined') {\n            return zone.afterColumn;\n        }\n        return 10000;\n    }\n    _computeWhitespaceProps(zone) {\n        if (zone.afterLineNumber === 0) {\n            return {\n                isInHiddenArea: false,\n                afterViewLineNumber: 0,\n                heightInPx: this._heightInPixels(zone),\n                minWidthInPx: this._minWidthInPixels(zone)\n            };\n        }\n        let zoneAfterModelPosition;\n        if (typeof zone.afterColumn !== 'undefined') {\n            zoneAfterModelPosition = this._context.model.validateModelPosition({\n                lineNumber: zone.afterLineNumber,\n                column: zone.afterColumn\n            });\n        }\n        else {\n            const validAfterLineNumber = this._context.model.validateModelPosition({\n                lineNumber: zone.afterLineNumber,\n                column: 1\n            }).lineNumber;\n            zoneAfterModelPosition = new Position(validAfterLineNumber, this._context.model.getModelLineMaxColumn(validAfterLineNumber));\n        }\n        let zoneBeforeModelPosition;\n        if (zoneAfterModelPosition.column === this._context.model.getModelLineMaxColumn(zoneAfterModelPosition.lineNumber)) {\n            zoneBeforeModelPosition = this._context.model.validateModelPosition({\n                lineNumber: zoneAfterModelPosition.lineNumber + 1,\n                column: 1\n            });\n        }\n        else {\n            zoneBeforeModelPosition = this._context.model.validateModelPosition({\n                lineNumber: zoneAfterModelPosition.lineNumber,\n                column: zoneAfterModelPosition.column + 1\n            });\n        }\n        const viewPosition = this._context.model.coordinatesConverter.convertModelPositionToViewPosition(zoneAfterModelPosition, zone.afterColumnAffinity);\n        const isVisible = this._context.model.coordinatesConverter.modelPositionIsVisible(zoneBeforeModelPosition);\n        return {\n            isInHiddenArea: !isVisible,\n            afterViewLineNumber: viewPosition.lineNumber,\n            heightInPx: (isVisible ? this._heightInPixels(zone) : 0),\n            minWidthInPx: this._minWidthInPixels(zone)\n        };\n    }\n    changeViewZones(callback) {\n        let zonesHaveChanged = false;\n        this._context.model.changeWhitespace((whitespaceAccessor) => {\n            const changeAccessor = {\n                addZone: (zone) => {\n                    zonesHaveChanged = true;\n                    return this._addZone(whitespaceAccessor, zone);\n                },\n                removeZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._removeZone(whitespaceAccessor, id) || zonesHaveChanged;\n                },\n                layoutZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._layoutZone(whitespaceAccessor, id) || zonesHaveChanged;\n                }\n            };\n            safeInvoke1Arg(callback, changeAccessor);\n            // Invalidate changeAccessor\n            changeAccessor.addZone = invalidFunc;\n            changeAccessor.removeZone = invalidFunc;\n            changeAccessor.layoutZone = invalidFunc;\n        });\n        return zonesHaveChanged;\n    }\n    _addZone(whitespaceAccessor, zone) {\n        const props = this._computeWhitespaceProps(zone);\n        const whitespaceId = whitespaceAccessor.insertWhitespace(props.afterViewLineNumber, this._getZoneOrdinal(zone), props.heightInPx, props.minWidthInPx);\n        const myZone = {\n            whitespaceId: whitespaceId,\n            delegate: zone,\n            isInHiddenArea: props.isInHiddenArea,\n            isVisible: false,\n            domNode: createFastDomNode(zone.domNode),\n            marginDomNode: zone.marginDomNode ? createFastDomNode(zone.marginDomNode) : null\n        };\n        this._safeCallOnComputedHeight(myZone.delegate, props.heightInPx);\n        myZone.domNode.setPosition('absolute');\n        myZone.domNode.domNode.style.width = '100%';\n        myZone.domNode.setDisplay('none');\n        myZone.domNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n        this.domNode.appendChild(myZone.domNode);\n        if (myZone.marginDomNode) {\n            myZone.marginDomNode.setPosition('absolute');\n            myZone.marginDomNode.domNode.style.width = '100%';\n            myZone.marginDomNode.setDisplay('none');\n            myZone.marginDomNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n            this.marginDomNode.appendChild(myZone.marginDomNode);\n        }\n        this._zones[myZone.whitespaceId] = myZone;\n        this.setShouldRender();\n        return myZone.whitespaceId;\n    }\n    _removeZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            delete this._zones[id];\n            whitespaceAccessor.removeWhitespace(zone.whitespaceId);\n            zone.domNode.removeAttribute('monaco-visible-view-zone');\n            zone.domNode.removeAttribute('monaco-view-zone');\n            zone.domNode.domNode.parentNode.removeChild(zone.domNode.domNode);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.removeAttribute('monaco-visible-view-zone');\n                zone.marginDomNode.removeAttribute('monaco-view-zone');\n                zone.marginDomNode.domNode.parentNode.removeChild(zone.marginDomNode.domNode);\n            }\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    _layoutZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            const props = this._computeWhitespaceProps(zone.delegate);\n            zone.isInHiddenArea = props.isInHiddenArea;\n            // const newOrdinal = this._getZoneOrdinal(zone.delegate);\n            whitespaceAccessor.changeOneWhitespace(zone.whitespaceId, props.afterViewLineNumber, props.heightInPx);\n            // TODO@Alex: change `newOrdinal` too\n            this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    shouldSuppressMouseDownOnViewZone(id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            return Boolean(zone.delegate.suppressMouseDown);\n        }\n        return false;\n    }\n    _heightInPixels(zone) {\n        if (typeof zone.heightInPx === 'number') {\n            return zone.heightInPx;\n        }\n        if (typeof zone.heightInLines === 'number') {\n            return this._lineHeight * zone.heightInLines;\n        }\n        return this._lineHeight;\n    }\n    _minWidthInPixels(zone) {\n        if (typeof zone.minWidthInPx === 'number') {\n            return zone.minWidthInPx;\n        }\n        return 0;\n    }\n    _safeCallOnComputedHeight(zone, height) {\n        if (typeof zone.onComputedHeight === 'function') {\n            try {\n                zone.onComputedHeight(height);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    _safeCallOnDomNodeTop(zone, top) {\n        if (typeof zone.onDomNodeTop === 'function') {\n            try {\n                zone.onDomNodeTop(top);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        const visibleWhitespaces = ctx.viewportData.whitespaceViewportData;\n        const visibleZones = {};\n        let hasVisibleZone = false;\n        for (const visibleWhitespace of visibleWhitespaces) {\n            if (this._zones[visibleWhitespace.id].isInHiddenArea) {\n                continue;\n            }\n            visibleZones[visibleWhitespace.id] = visibleWhitespace;\n            hasVisibleZone = true;\n        }\n        const keys = Object.keys(this._zones);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const id = keys[i];\n            const zone = this._zones[id];\n            let newTop = 0;\n            let newHeight = 0;\n            let newDisplay = 'none';\n            if (visibleZones.hasOwnProperty(id)) {\n                newTop = visibleZones[id].verticalOffset - ctx.bigNumbersDelta;\n                newHeight = visibleZones[id].height;\n                newDisplay = 'block';\n                // zone is visible\n                if (!zone.isVisible) {\n                    zone.domNode.setAttribute('monaco-visible-view-zone', 'true');\n                    zone.isVisible = true;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(visibleZones[id].verticalOffset));\n            }\n            else {\n                if (zone.isVisible) {\n                    zone.domNode.removeAttribute('monaco-visible-view-zone');\n                    zone.isVisible = false;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(-1000000));\n            }\n            zone.domNode.setTop(newTop);\n            zone.domNode.setHeight(newHeight);\n            zone.domNode.setDisplay(newDisplay);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.setTop(newTop);\n                zone.marginDomNode.setHeight(newHeight);\n                zone.marginDomNode.setDisplay(newDisplay);\n            }\n        }\n        if (hasVisibleZone) {\n            this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n            this.marginDomNode.setWidth(this._contentLeft);\n        }\n    }\n}\nfunction safeInvoke1Arg(func, arg1) {\n    try {\n        return func(arg1);\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { PointerHandler } from '../controller/pointerHandler.js';\nimport { TextAreaHandler } from '../controller/textAreaHandler.js';\nimport { ViewController } from './viewController.js';\nimport { ViewUserInputEvents } from './viewUserInputEvents.js';\nimport { ContentViewOverlays, MarginViewOverlays } from './viewOverlays.js';\nimport { PartFingerprints } from './viewPart.js';\nimport { ViewContentWidgets } from '../viewParts/contentWidgets/contentWidgets.js';\nimport { CurrentLineHighlightOverlay, CurrentLineMarginHighlightOverlay } from '../viewParts/currentLineHighlight/currentLineHighlight.js';\nimport { DecorationsOverlay } from '../viewParts/decorations/decorations.js';\nimport { EditorScrollbar } from '../viewParts/editorScrollbar/editorScrollbar.js';\nimport { GlyphMarginOverlay } from '../viewParts/glyphMargin/glyphMargin.js';\nimport { IndentGuidesOverlay } from '../viewParts/indentGuides/indentGuides.js';\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\nimport { ViewLines } from '../viewParts/lines/viewLines.js';\nimport { LinesDecorationsOverlay } from '../viewParts/linesDecorations/linesDecorations.js';\nimport { Margin } from '../viewParts/margin/margin.js';\nimport { MarginViewLineDecorationsOverlay } from '../viewParts/marginDecorations/marginDecorations.js';\nimport { Minimap } from '../viewParts/minimap/minimap.js';\nimport { ViewOverlayWidgets } from '../viewParts/overlayWidgets/overlayWidgets.js';\nimport { DecorationsOverviewRuler } from '../viewParts/overviewRuler/decorationsOverviewRuler.js';\nimport { OverviewRuler } from '../viewParts/overviewRuler/overviewRuler.js';\nimport { Rulers } from '../viewParts/rulers/rulers.js';\nimport { ScrollDecorationViewPart } from '../viewParts/scrollDecoration/scrollDecoration.js';\nimport { SelectionsOverlay } from '../viewParts/selections/selections.js';\nimport { ViewCursors } from '../viewParts/viewCursors/viewCursors.js';\nimport { ViewZones } from '../viewParts/viewZones/viewZones.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { RenderingContext } from './renderingContext.js';\nimport { ViewContext } from '../../common/viewModel/viewContext.js';\nimport { ViewportData } from '../../common/viewLayout/viewLinesViewportData.js';\nimport { ViewEventHandler } from '../../common/viewModel/viewEventHandler.js';\nimport { getThemeTypeSelector } from '../../../platform/theme/common/themeService.js';\nimport { PointerHandlerLastRenderData } from '../controller/mouseTarget.js';\nexport class View extends ViewEventHandler {\n    constructor(commandDelegate, configuration, themeService, model, userInputEvents, overflowWidgetsDomNode) {\n        super();\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderAnimationFrame = null;\n        const viewController = new ViewController(configuration, model, userInputEvents, commandDelegate);\n        // The view context is passed on to most classes (basically to reduce param. counts in ctors)\n        this._context = new ViewContext(configuration, themeService.getColorTheme(), model);\n        // Ensure the view is the first event handler in order to update the layout\n        this._context.addEventHandler(this);\n        this._register(themeService.onDidColorThemeChange(theme => {\n            this._context.theme.update(theme);\n            this._context.model.onDidColorThemeChange();\n            this.render(true, false);\n        }));\n        this._viewParts = [];\n        // Keyboard handler\n        this._textAreaHandler = new TextAreaHandler(this._context, viewController, this._createTextAreaHandlerHelper());\n        this._viewParts.push(this._textAreaHandler);\n        // These two dom nodes must be constructed up front, since references are needed in the layout provider (scrolling & co.)\n        this._linesContent = createFastDomNode(document.createElement('div'));\n        this._linesContent.setClassName('lines-content' + ' monaco-editor-background');\n        this._linesContent.setPosition('absolute');\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName(this._getEditorClassName());\n        // Set role 'code' for better screen reader support https://github.com/microsoft/vscode/issues/93438\n        this.domNode.setAttribute('role', 'code');\n        this._overflowGuardContainer = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._overflowGuardContainer, 3 /* OverflowGuard */);\n        this._overflowGuardContainer.setClassName('overflow-guard');\n        this._scrollbar = new EditorScrollbar(this._context, this._linesContent, this.domNode, this._overflowGuardContainer);\n        this._viewParts.push(this._scrollbar);\n        // View Lines\n        this._viewLines = new ViewLines(this._context, this._linesContent);\n        // View Zones\n        this._viewZones = new ViewZones(this._context);\n        this._viewParts.push(this._viewZones);\n        // Decorations overview ruler\n        const decorationsOverviewRuler = new DecorationsOverviewRuler(this._context);\n        this._viewParts.push(decorationsOverviewRuler);\n        const scrollDecoration = new ScrollDecorationViewPart(this._context);\n        this._viewParts.push(scrollDecoration);\n        const contentViewOverlays = new ContentViewOverlays(this._context);\n        this._viewParts.push(contentViewOverlays);\n        contentViewOverlays.addDynamicOverlay(new CurrentLineHighlightOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new SelectionsOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new IndentGuidesOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new DecorationsOverlay(this._context));\n        const marginViewOverlays = new MarginViewOverlays(this._context);\n        this._viewParts.push(marginViewOverlays);\n        marginViewOverlays.addDynamicOverlay(new CurrentLineMarginHighlightOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new GlyphMarginOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new MarginViewLineDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LinesDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LineNumbersOverlay(this._context));\n        const margin = new Margin(this._context);\n        margin.getDomNode().appendChild(this._viewZones.marginDomNode);\n        margin.getDomNode().appendChild(marginViewOverlays.getDomNode());\n        this._viewParts.push(margin);\n        // Content widgets\n        this._contentWidgets = new ViewContentWidgets(this._context, this.domNode);\n        this._viewParts.push(this._contentWidgets);\n        this._viewCursors = new ViewCursors(this._context);\n        this._viewParts.push(this._viewCursors);\n        // Overlay widgets\n        this._overlayWidgets = new ViewOverlayWidgets(this._context);\n        this._viewParts.push(this._overlayWidgets);\n        const rulers = new Rulers(this._context);\n        this._viewParts.push(rulers);\n        const minimap = new Minimap(this._context);\n        this._viewParts.push(minimap);\n        // -------------- Wire dom nodes up\n        if (decorationsOverviewRuler) {\n            const overviewRulerData = this._scrollbar.getOverviewRulerLayoutInfo();\n            overviewRulerData.parent.insertBefore(decorationsOverviewRuler.getDomNode(), overviewRulerData.insertBefore);\n        }\n        this._linesContent.appendChild(contentViewOverlays.getDomNode());\n        this._linesContent.appendChild(rulers.domNode);\n        this._linesContent.appendChild(this._viewZones.domNode);\n        this._linesContent.appendChild(this._viewLines.getDomNode());\n        this._linesContent.appendChild(this._contentWidgets.domNode);\n        this._linesContent.appendChild(this._viewCursors.getDomNode());\n        this._overflowGuardContainer.appendChild(margin.getDomNode());\n        this._overflowGuardContainer.appendChild(this._scrollbar.getDomNode());\n        this._overflowGuardContainer.appendChild(scrollDecoration.getDomNode());\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textArea);\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textAreaCover);\n        this._overflowGuardContainer.appendChild(this._overlayWidgets.getDomNode());\n        this._overflowGuardContainer.appendChild(minimap.getDomNode());\n        this.domNode.appendChild(this._overflowGuardContainer);\n        if (overflowWidgetsDomNode) {\n            overflowWidgetsDomNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode.domNode);\n        }\n        else {\n            this.domNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode);\n        }\n        this._applyLayout();\n        // Pointer handler\n        this._pointerHandler = this._register(new PointerHandler(this._context, viewController, this._createPointerHandlerHelper()));\n    }\n    _flushAccumulatedAndRenderNow() {\n        this._renderNow();\n    }\n    _createPointerHandlerHelper() {\n        return {\n            viewDomNode: this.domNode.domNode,\n            linesContentDomNode: this._linesContent.domNode,\n            focusTextArea: () => {\n                this.focus();\n            },\n            dispatchTextAreaEvent: (event) => {\n                this._textAreaHandler.textArea.domNode.dispatchEvent(event);\n            },\n            getLastRenderData: () => {\n                const lastViewCursorsRenderData = this._viewCursors.getLastRenderData() || [];\n                const lastTextareaPosition = this._textAreaHandler.getLastRenderData();\n                return new PointerHandlerLastRenderData(lastViewCursorsRenderData, lastTextareaPosition);\n            },\n            shouldSuppressMouseDownOnViewZone: (viewZoneId) => {\n                return this._viewZones.shouldSuppressMouseDownOnViewZone(viewZoneId);\n            },\n            shouldSuppressMouseDownOnWidget: (widgetId) => {\n                return this._contentWidgets.shouldSuppressMouseDownOnWidget(widgetId);\n            },\n            getPositionFromDOMInfo: (spanNode, offset) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getPositionFromDOMInfo(spanNode, offset);\n            },\n            visibleRangeForPosition: (lineNumber, column) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(new Position(lineNumber, column));\n            },\n            getLineWidth: (lineNumber) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getLineWidth(lineNumber);\n            }\n        };\n    }\n    _createTextAreaHandlerHelper() {\n        return {\n            visibleRangeForPosition: (position) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(position);\n            }\n        };\n    }\n    _applyLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this.domNode.setWidth(layoutInfo.width);\n        this.domNode.setHeight(layoutInfo.height);\n        this._overflowGuardContainer.setWidth(layoutInfo.width);\n        this._overflowGuardContainer.setHeight(layoutInfo.height);\n        this._linesContent.setWidth(1000000);\n        this._linesContent.setHeight(1000000);\n    }\n    _getEditorClassName() {\n        const focused = this._textAreaHandler.isFocused() ? ' focused' : '';\n        return this._context.configuration.options.get(128 /* editorClassName */) + ' ' + getThemeTypeSelector(this._context.theme.type) + focused;\n    }\n    // --- begin event handlers\n    handleEvents(events) {\n        super.handleEvents(events);\n        this._scheduleRender();\n    }\n    onConfigurationChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        this._applyLayout();\n        return false;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return false;\n    }\n    onFocusChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    onThemeChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    // --- end event handlers\n    dispose() {\n        if (this._renderAnimationFrame !== null) {\n            this._renderAnimationFrame.dispose();\n            this._renderAnimationFrame = null;\n        }\n        this._contentWidgets.overflowingContentWidgetsDomNode.domNode.remove();\n        this._context.removeEventHandler(this);\n        this._viewLines.dispose();\n        // Destroy view parts\n        for (const viewPart of this._viewParts) {\n            viewPart.dispose();\n        }\n        super.dispose();\n    }\n    _scheduleRender() {\n        if (this._renderAnimationFrame === null) {\n            this._renderAnimationFrame = dom.runAtThisOrScheduleAtNextAnimationFrame(this._onRenderScheduled.bind(this), 100);\n        }\n    }\n    _onRenderScheduled() {\n        this._renderAnimationFrame = null;\n        this._flushAccumulatedAndRenderNow();\n    }\n    _renderNow() {\n        safeInvokeNoArg(() => this._actualRender());\n    }\n    _getViewPartsToRender() {\n        const result = [];\n        let resultLen = 0;\n        for (const viewPart of this._viewParts) {\n            if (viewPart.shouldRender()) {\n                result[resultLen++] = viewPart;\n            }\n        }\n        return result;\n    }\n    _actualRender() {\n        if (!dom.isInDOM(this.domNode.domNode)) {\n            return;\n        }\n        let viewPartsToRender = this._getViewPartsToRender();\n        if (!this._viewLines.shouldRender() && viewPartsToRender.length === 0) {\n            // Nothing to render\n            return;\n        }\n        const partialViewportData = this._context.viewLayout.getLinesViewportData();\n        this._context.model.setViewport(partialViewportData.startLineNumber, partialViewportData.endLineNumber, partialViewportData.centeredLineNumber);\n        const viewportData = new ViewportData(this._selections, partialViewportData, this._context.viewLayout.getWhitespaceViewportData(), this._context.model);\n        if (this._contentWidgets.shouldRender()) {\n            // Give the content widgets a chance to set their max width before a possible synchronous layout\n            this._contentWidgets.onBeforeRender(viewportData);\n        }\n        if (this._viewLines.shouldRender()) {\n            this._viewLines.renderText(viewportData);\n            this._viewLines.onDidRender();\n            // Rendering of viewLines might cause scroll events to occur, so collect view parts to render again\n            viewPartsToRender = this._getViewPartsToRender();\n        }\n        const renderingContext = new RenderingContext(this._context.viewLayout, viewportData, this._viewLines);\n        // Render the rest of the parts\n        for (const viewPart of viewPartsToRender) {\n            viewPart.prepareRender(renderingContext);\n        }\n        for (const viewPart of viewPartsToRender) {\n            viewPart.render(renderingContext);\n            viewPart.onDidRender();\n        }\n    }\n    // --- BEGIN CodeEditor helpers\n    delegateVerticalScrollbarMouseDown(browserEvent) {\n        this._scrollbar.delegateVerticalScrollbarMouseDown(browserEvent);\n    }\n    restoreState(scrollPosition) {\n        this._context.model.setScrollPosition({ scrollTop: scrollPosition.scrollTop }, 1 /* Immediate */);\n        this._context.model.tokenizeViewport();\n        this._renderNow();\n        this._viewLines.updateLineWidths();\n        this._context.model.setScrollPosition({ scrollLeft: scrollPosition.scrollLeft }, 1 /* Immediate */);\n    }\n    getOffsetForColumn(modelLineNumber, modelColumn) {\n        const modelPosition = this._context.model.validateModelPosition({\n            lineNumber: modelLineNumber,\n            column: modelColumn\n        });\n        const viewPosition = this._context.model.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        this._flushAccumulatedAndRenderNow();\n        const visibleRange = this._viewLines.visibleRangeForPosition(new Position(viewPosition.lineNumber, viewPosition.column));\n        if (!visibleRange) {\n            return -1;\n        }\n        return visibleRange.left;\n    }\n    getTargetAtClientPoint(clientX, clientY) {\n        const mouseTarget = this._pointerHandler.getTargetAtClientPoint(clientX, clientY);\n        if (!mouseTarget) {\n            return null;\n        }\n        return ViewUserInputEvents.convertViewToModelMouseTarget(mouseTarget, this._context.model.coordinatesConverter);\n    }\n    createOverviewRuler(cssClassName) {\n        return new OverviewRuler(this._context, cssClassName);\n    }\n    change(callback) {\n        this._viewZones.changeViewZones(callback);\n        this._scheduleRender();\n    }\n    render(now, everything) {\n        if (everything) {\n            // Force everything to render...\n            this._viewLines.forceShouldRender();\n            for (const viewPart of this._viewParts) {\n                viewPart.forceShouldRender();\n            }\n        }\n        if (now) {\n            this._flushAccumulatedAndRenderNow();\n        }\n        else {\n            this._scheduleRender();\n        }\n    }\n    focus() {\n        this._textAreaHandler.focusTextArea();\n    }\n    isFocused() {\n        return this._textAreaHandler.isFocused();\n    }\n    setAriaOptions(options) {\n        this._textAreaHandler.setAriaOptions(options);\n    }\n    addContentWidget(widgetData) {\n        this._contentWidgets.addWidget(widgetData.widget);\n        this.layoutContentWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutContentWidget(widgetData) {\n        let newRange = widgetData.position ? widgetData.position.range || null : null;\n        if (newRange === null) {\n            const newPosition = widgetData.position ? widgetData.position.position : null;\n            if (newPosition !== null) {\n                newRange = new Range(newPosition.lineNumber, newPosition.column, newPosition.lineNumber, newPosition.column);\n            }\n        }\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\n        this._contentWidgets.setWidgetPosition(widgetData.widget, newRange, newPreference);\n        this._scheduleRender();\n    }\n    removeContentWidget(widgetData) {\n        this._contentWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n    addOverlayWidget(widgetData) {\n        this._overlayWidgets.addWidget(widgetData.widget);\n        this.layoutOverlayWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutOverlayWidget(widgetData) {\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\n        const shouldRender = this._overlayWidgets.setWidgetPosition(widgetData.widget, newPreference);\n        if (shouldRender) {\n            this._scheduleRender();\n        }\n    }\n    removeOverlayWidget(widgetData) {\n        this._overlayWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n}\nfunction safeInvokeNoArg(func) {\n    try {\n        return func();\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ViewEventHandler } from '../../common/viewModel/viewEventHandler.js';\nexport class ViewPart extends ViewEventHandler {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n}\nexport class PartFingerprints {\n    static write(target, partId) {\n        target.setAttribute('data-mprt', String(partId));\n    }\n    static read(target) {\n        const r = target.getAttribute('data-mprt');\n        if (r === null) {\n            return 0 /* None */;\n        }\n        return parseInt(r, 10);\n    }\n    static collect(child, stopAt) {\n        const result = [];\n        let resultLen = 0;\n        while (child && child !== document.body) {\n            if (child === stopAt) {\n                break;\n            }\n            if (child.nodeType === child.ELEMENT_NODE) {\n                result[resultLen++] = this.read(child);\n            }\n            child = child.parentElement;\n        }\n        const r = new Uint8Array(resultLen);\n        for (let i = 0; i < resultLen; i++) {\n            r[i] = result[resultLen - i - 1];\n        }\n        return r;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ViewUserInputEvents {\n    constructor(coordinatesConverter) {\n        this.onKeyDown = null;\n        this.onKeyUp = null;\n        this.onContextMenu = null;\n        this.onMouseMove = null;\n        this.onMouseLeave = null;\n        this.onMouseDown = null;\n        this.onMouseUp = null;\n        this.onMouseDrag = null;\n        this.onMouseDrop = null;\n        this.onMouseDropCanceled = null;\n        this.onMouseWheel = null;\n        this._coordinatesConverter = coordinatesConverter;\n    }\n    emitKeyDown(e) {\n        if (this.onKeyDown) {\n            this.onKeyDown(e);\n        }\n    }\n    emitKeyUp(e) {\n        if (this.onKeyUp) {\n            this.onKeyUp(e);\n        }\n    }\n    emitContextMenu(e) {\n        if (this.onContextMenu) {\n            this.onContextMenu(this._convertViewToModelMouseEvent(e));\n        }\n    }\n    emitMouseMove(e) {\n        if (this.onMouseMove) {\n            this.onMouseMove(this._convertViewToModelMouseEvent(e));\n        }\n    }\n    emitMouseLeave(e) {\n        if (this.onMouseLeave) {\n            this.onMouseLeave(this._convertViewToModelMouseEvent(e));\n        }\n    }\n    emitMouseDown(e) {\n        if (this.onMouseDown) {\n            this.onMouseDown(this._convertViewToModelMouseEvent(e));\n        }\n    }\n    emitMouseUp(e) {\n        if (this.onMouseUp) {\n            this.onMouseUp(this._convertViewToModelMouseEvent(e));\n        }\n    }\n    emitMouseDrag(e) {\n        if (this.onMouseDrag) {\n            this.onMouseDrag(this._convertViewToModelMouseEvent(e));\n        }\n    }\n    emitMouseDrop(e) {\n        if (this.onMouseDrop) {\n            this.onMouseDrop(this._convertViewToModelMouseEvent(e));\n        }\n    }\n    emitMouseDropCanceled() {\n        if (this.onMouseDropCanceled) {\n            this.onMouseDropCanceled();\n        }\n    }\n    emitMouseWheel(e) {\n        if (this.onMouseWheel) {\n            this.onMouseWheel(e);\n        }\n    }\n    _convertViewToModelMouseEvent(e) {\n        if (e.target) {\n            return {\n                event: e.event,\n                target: this._convertViewToModelMouseTarget(e.target)\n            };\n        }\n        return e;\n    }\n    _convertViewToModelMouseTarget(target) {\n        return ViewUserInputEvents.convertViewToModelMouseTarget(target, this._coordinatesConverter);\n    }\n    static convertViewToModelMouseTarget(target, coordinatesConverter) {\n        const result = Object.assign({}, target);\n        if (result.position) {\n            result.position = coordinatesConverter.convertViewPositionToModelPosition(result.position);\n        }\n        if (result.range) {\n            result.range = coordinatesConverter.convertViewRangeToModelRange(result.range);\n        }\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorActiveLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._readConfig();\n        this._lastCursorModelPosition = new Position(1, 1);\n        this._renderResult = null;\n        this._activeLineNumber = 1;\n        this._context.addEventHandler(this);\n    }\n    _readConfig() {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        const lineNumbers = options.get(60 /* lineNumbers */);\n        this._renderLineNumbers = lineNumbers.renderType;\n        this._renderCustomLineNumbers = lineNumbers.renderFn;\n        this._renderFinalNewline = options.get(84 /* renderFinalNewline */);\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n        this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        this._readConfig();\n        return true;\n    }\n    onCursorStateChanged(e) {\n        const primaryViewPosition = e.selections[0].getPosition();\n        this._lastCursorModelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n        let shouldRender = false;\n        if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n            this._activeLineNumber = primaryViewPosition.lineNumber;\n            shouldRender = true;\n        }\n        if (this._renderLineNumbers === 2 /* Relative */ || this._renderLineNumbers === 3 /* Interval */) {\n            shouldRender = true;\n        }\n        return shouldRender;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getLineRenderLineNumber(viewLineNumber) {\n        const modelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n        if (modelPosition.column !== 1) {\n            return '';\n        }\n        const modelLineNumber = modelPosition.lineNumber;\n        if (this._renderCustomLineNumbers) {\n            return this._renderCustomLineNumbers(modelLineNumber);\n        }\n        if (this._renderLineNumbers === 2 /* Relative */) {\n            const diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n            if (diff === 0) {\n                return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n            }\n            return String(diff);\n        }\n        if (this._renderLineNumbers === 3 /* Interval */) {\n            if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n                return String(modelLineNumber);\n            }\n            if (modelLineNumber % 10 === 0) {\n                return String(modelLineNumber);\n            }\n            return '';\n        }\n        return String(modelLineNumber);\n    }\n    prepareRender(ctx) {\n        if (this._renderLineNumbers === 0 /* Off */) {\n            this._renderResult = null;\n            return;\n        }\n        const lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const common = '<div class=\"' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft + 'px;width:' + this._lineNumbersWidth + 'px;\">';\n        const lineCount = this._context.model.getLineCount();\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            if (!this._renderFinalNewline) {\n                if (lineNumber === lineCount && this._context.model.getLineLength(lineNumber) === 0) {\n                    // Do not render last (empty) line\n                    output[lineIndex] = '';\n                    continue;\n                }\n            }\n            const renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n            if (renderLineNumber) {\n                if (lineNumber === this._activeLineNumber) {\n                    output[lineIndex] = ('<div class=\"active-line-number ' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft + 'px;width:' + this._lineNumbersWidth + 'px;\">'\n                        + renderLineNumber\n                        + '</div>');\n                }\n                else {\n                    output[lineIndex] = (common\n                        + renderLineNumber\n                        + '</div>');\n                }\n            }\n            else {\n                output[lineIndex] = '';\n            }\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nLineNumbersOverlay.CLASS_NAME = 'line-numbers';\n// theming\nregisterThemingParticipant((theme, collector) => {\n    const lineNumbers = theme.getColor(editorLineNumbers);\n    if (lineNumbers) {\n        collector.addRule(`.monaco-editor .line-numbers { color: ${lineNumbers}; }`);\n    }\n    const activeLineNumber = theme.getColor(editorActiveLineNumber);\n    if (activeLineNumber) {\n        collector.addRule(`.monaco-editor .line-numbers.active-line-number { color: ${activeLineNumber}; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { FloatHorizontalRange } from '../../view/renderingContext.js';\nexport class RangeUtil {\n    static _createRange() {\n        if (!this._handyReadyRange) {\n            this._handyReadyRange = document.createRange();\n        }\n        return this._handyReadyRange;\n    }\n    static _detachRange(range, endNode) {\n        // Move range out of the span node, IE doesn't like having many ranges in\n        // the same spot and will act badly for lines containing dashes ('-')\n        range.selectNodeContents(endNode);\n    }\n    static _readClientRects(startElement, startOffset, endElement, endOffset, endNode) {\n        const range = this._createRange();\n        try {\n            range.setStart(startElement, startOffset);\n            range.setEnd(endElement, endOffset);\n            return range.getClientRects();\n        }\n        catch (e) {\n            // This is life ...\n            return null;\n        }\n        finally {\n            this._detachRange(range, endNode);\n        }\n    }\n    static _mergeAdjacentRanges(ranges) {\n        if (ranges.length === 1) {\n            // There is nothing to merge\n            return ranges;\n        }\n        ranges.sort(FloatHorizontalRange.compare);\n        const result = [];\n        let resultLen = 0;\n        let prev = ranges[0];\n        for (let i = 1, len = ranges.length; i < len; i++) {\n            const range = ranges[i];\n            if (prev.left + prev.width + 0.9 /* account for browser's rounding errors*/ >= range.left) {\n                prev.width = Math.max(prev.width, range.left + range.width - prev.left);\n            }\n            else {\n                result[resultLen++] = prev;\n                prev = range;\n            }\n        }\n        result[resultLen++] = prev;\n        return result;\n    }\n    static _createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale) {\n        if (!clientRects || clientRects.length === 0) {\n            return null;\n        }\n        // We go through FloatHorizontalRange because it has been observed in bi-di text\n        // that the clientRects are not coming in sorted from the browser\n        const result = [];\n        for (let i = 0, len = clientRects.length; i < len; i++) {\n            const clientRect = clientRects[i];\n            result[i] = new FloatHorizontalRange(Math.max(0, (clientRect.left - clientRectDeltaLeft) / clientRectScale), clientRect.width / clientRectScale);\n        }\n        return this._mergeAdjacentRanges(result);\n    }\n    static readHorizontalRanges(domNode, startChildIndex, startOffset, endChildIndex, endOffset, clientRectDeltaLeft, clientRectScale, endNode) {\n        // Panic check\n        const min = 0;\n        const max = domNode.children.length - 1;\n        if (min > max) {\n            return null;\n        }\n        startChildIndex = Math.min(max, Math.max(min, startChildIndex));\n        endChildIndex = Math.min(max, Math.max(min, endChildIndex));\n        if (startChildIndex === endChildIndex && startOffset === endOffset && startOffset === 0 && !domNode.children[startChildIndex].firstChild) {\n            // We must find the position at the beginning of a <span>\n            // To cover cases of empty <span>s, avoid using a range and use the <span>'s bounding box\n            const clientRects = domNode.children[startChildIndex].getClientRects();\n            return this._createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale);\n        }\n        // If crossing over to a span only to select offset 0, then use the previous span's maximum offset\n        // Chrome is buggy and doesn't handle 0 offsets well sometimes.\n        if (startChildIndex !== endChildIndex) {\n            if (endChildIndex > 0 && endOffset === 0) {\n                endChildIndex--;\n                endOffset = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        let startElement = domNode.children[startChildIndex].firstChild;\n        let endElement = domNode.children[endChildIndex].firstChild;\n        if (!startElement || !endElement) {\n            // When having an empty <span> (without any text content), try to move to the previous <span>\n            if (!startElement && startOffset === 0 && startChildIndex > 0) {\n                startElement = domNode.children[startChildIndex - 1].firstChild;\n                startOffset = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n            }\n            if (!endElement && endOffset === 0 && endChildIndex > 0) {\n                endElement = domNode.children[endChildIndex - 1].firstChild;\n                endOffset = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        if (!startElement || !endElement) {\n            return null;\n        }\n        startOffset = Math.min(startElement.textContent.length, Math.max(0, startOffset));\n        endOffset = Math.min(endElement.textContent.length, Math.max(0, endOffset));\n        const clientRects = this._readClientRects(startElement, startOffset, endElement, endOffset, endNode);\n        return this._createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RangeUtil } from './rangeUtil.js';\nimport { FloatHorizontalRange, VisibleRanges } from '../../view/renderingContext.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine, LineRange, DomPosition } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { ColorScheme } from '../../../../platform/theme/common/theme.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nconst canUseFastRenderedViewLine = (function () {\n    if (platform.isNative) {\n        // In VSCode we know very well when the zoom level changes\n        return true;\n    }\n    if (platform.isLinux || browser.isFirefox || browser.isSafari) {\n        // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n        // --\n        // Even though we read character widths correctly, having read them at a specific zoom level\n        // does not mean they are the same at the current zoom level.\n        // --\n        // This could be improved if we ever figure out how to get an event when browsers zoom,\n        // but until then we have to stick with reading client rects.\n        // --\n        // The same has been observed with Firefox on Windows7\n        // --\n        // The same has been oversved with Safari\n        return false;\n    }\n    return true;\n})();\nlet monospaceAssumptionsAreValid = true;\nexport class DomReadingContext {\n    constructor(domNode, endNode) {\n        this._domNode = domNode;\n        this._clientRectDeltaLeft = 0;\n        this._clientRectScale = 1;\n        this._clientRectRead = false;\n        this.endNode = endNode;\n    }\n    readClientRect() {\n        if (!this._clientRectRead) {\n            this._clientRectRead = true;\n            const rect = this._domNode.getBoundingClientRect();\n            this._clientRectDeltaLeft = rect.left;\n            this._clientRectScale = rect.width / this._domNode.offsetWidth;\n        }\n    }\n    get clientRectDeltaLeft() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectDeltaLeft;\n    }\n    get clientRectScale() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectScale;\n    }\n}\nexport class ViewLineOptions {\n    constructor(config, themeType) {\n        this.themeType = themeType;\n        const options = config.options;\n        const fontInfo = options.get(44 /* fontInfo */);\n        this.renderWhitespace = options.get(88 /* renderWhitespace */);\n        this.renderControlCharacters = options.get(83 /* renderControlCharacters */);\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.useMonospaceOptimizations = (fontInfo.isMonospace\n            && !options.get(29 /* disableMonospaceOptimizations */));\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(59 /* lineHeight */);\n        this.stopRenderingLineAfter = options.get(105 /* stopRenderingLineAfter */);\n        this.fontLigatures = options.get(45 /* fontLigatures */);\n    }\n    equals(other) {\n        return (this.themeType === other.themeType\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.fontLigatures === other.fontLigatures);\n    }\n}\nexport class ViewLine {\n    constructor(options) {\n        this._options = options;\n        this._isMaybeInvalid = true;\n        this._renderedViewLine = null;\n    }\n    // --- begin IVisibleLineData\n    getDomNode() {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            return this._renderedViewLine.domNode.domNode;\n        }\n        return null;\n    }\n    setDomNode(domNode) {\n        if (this._renderedViewLine) {\n            this._renderedViewLine.domNode = createFastDomNode(domNode);\n        }\n        else {\n            throw new Error('I have no rendered view line to set the dom node to...');\n        }\n    }\n    onContentChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onTokensChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onDecorationsChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onOptionsChanged(newOptions) {\n        this._isMaybeInvalid = true;\n        this._options = newOptions;\n    }\n    onSelectionChanged() {\n        if (this._options.themeType === ColorScheme.HIGH_CONTRAST || this._options.renderWhitespace === 'selection') {\n            this._isMaybeInvalid = true;\n            return true;\n        }\n        return false;\n    }\n    renderLine(lineNumber, deltaTop, viewportData, sb) {\n        if (this._isMaybeInvalid === false) {\n            // it appears that nothing relevant has changed\n            return false;\n        }\n        this._isMaybeInvalid = false;\n        const lineData = viewportData.getViewLineRenderingData(lineNumber);\n        const options = this._options;\n        const actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\n        // Only send selection information when needed for rendering whitespace\n        let selectionsOnLine = null;\n        if (options.themeType === ColorScheme.HIGH_CONTRAST || this._options.renderWhitespace === 'selection') {\n            const selections = viewportData.selections;\n            for (const selection of selections) {\n                if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                    // Selection does not intersect line\n                    continue;\n                }\n                const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                if (startColumn < endColumn) {\n                    if (options.themeType === ColorScheme.HIGH_CONTRAST || this._options.renderWhitespace !== 'selection') {\n                        actualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', 0 /* Regular */));\n                    }\n                    else {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n        }\n        const renderLineInput = new RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, lineData.startVisibleColumn, options.spaceWidth, options.middotWidth, options.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, selectionsOnLine);\n        if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n            // no need to do anything, we have the same render input\n            return false;\n        }\n        sb.appendASCIIString('<div style=\"top:');\n        sb.appendASCIIString(String(deltaTop));\n        sb.appendASCIIString('px;height:');\n        sb.appendASCIIString(String(this._options.lineHeight));\n        sb.appendASCIIString('px;\" class=\"');\n        sb.appendASCIIString(ViewLine.CLASS_NAME);\n        sb.appendASCIIString('\">');\n        const output = renderViewLine(renderLineInput, sb);\n        sb.appendASCIIString('</div>');\n        let renderedViewLine = null;\n        if (monospaceAssumptionsAreValid && canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === 0 /* None */) {\n            if (lineData.content.length < 300 && renderLineInput.lineTokens.getCount() < 100) {\n                // Browser rounding errors have been observed in Chrome and IE, so using the fast\n                // view line only for short lines. Please test before removing the length check...\n                // ---\n                // Another rounding error has been observed on Linux in VSCode, where <span> width\n                // rounding errors add up to an observable large number...\n                // ---\n                // Also see another example of rounding errors on Windows in\n                // https://github.com/microsoft/vscode/issues/33178\n                renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\n            }\n        }\n        if (!renderedViewLine) {\n            renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\n        }\n        this._renderedViewLine = renderedViewLine;\n        return true;\n    }\n    layoutLine(lineNumber, deltaTop) {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            this._renderedViewLine.domNode.setTop(deltaTop);\n            this._renderedViewLine.domNode.setHeight(this._options.lineHeight);\n        }\n    }\n    // --- end IVisibleLineData\n    getWidth() {\n        if (!this._renderedViewLine) {\n            return 0;\n        }\n        return this._renderedViewLine.getWidth();\n    }\n    getWidthIsFast() {\n        if (!this._renderedViewLine) {\n            return true;\n        }\n        return this._renderedViewLine.getWidthIsFast();\n    }\n    needsMonospaceFontCheck() {\n        if (!this._renderedViewLine) {\n            return false;\n        }\n        return (this._renderedViewLine instanceof FastRenderedViewLine);\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this._renderedViewLine) {\n            return monospaceAssumptionsAreValid;\n        }\n        if (this._renderedViewLine instanceof FastRenderedViewLine) {\n            return this._renderedViewLine.monospaceAssumptionsAreValid();\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    onMonospaceAssumptionsInvalidated() {\n        if (this._renderedViewLine && this._renderedViewLine instanceof FastRenderedViewLine) {\n            this._renderedViewLine = this._renderedViewLine.toSlowRenderedLine();\n        }\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this._renderedViewLine) {\n            return null;\n        }\n        startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n        endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n        const stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter;\n        let outsideRenderedLine = false;\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\n            // This range is obviously not visible\n            outsideRenderedLine = true;\n        }\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\n            startColumn = stopRenderingLineAfter + 1;\n        }\n        if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\n            endColumn = stopRenderingLineAfter + 1;\n        }\n        const horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(lineNumber, startColumn, endColumn, context);\n        if (horizontalRanges && horizontalRanges.length > 0) {\n            return new VisibleRanges(outsideRenderedLine, horizontalRanges);\n        }\n        return null;\n    }\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        if (!this._renderedViewLine) {\n            return 1;\n        }\n        return this._renderedViewLine.getColumnOfNodeOffset(lineNumber, spanNode, offset);\n    }\n}\nViewLine.CLASS_NAME = 'view-line';\n/**\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\n */\nclass FastRenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._charWidth = renderLineInput.spaceWidth;\n    }\n    getWidth() {\n        return Math.round(this._getCharPosition(this._characterMapping.length));\n    }\n    getWidthIsFast() {\n        return true;\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this.domNode) {\n            return monospaceAssumptionsAreValid;\n        }\n        const expectedWidth = this.getWidth();\n        const actualWidth = this.domNode.domNode.firstChild.offsetWidth;\n        if (Math.abs(expectedWidth - actualWidth) >= 2) {\n            // more than 2px off\n            console.warn(`monospace assumptions have been violated, therefore disabling monospace optimizations!`);\n            monospaceAssumptionsAreValid = false;\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    toSlowRenderedLine() {\n        return createRenderedLine(this.domNode, this.input, this._characterMapping, false, 0 /* None */);\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        const startPosition = this._getCharPosition(startColumn);\n        const endPosition = this._getCharPosition(endColumn);\n        return [new FloatHorizontalRange(startPosition, endPosition - startPosition)];\n    }\n    _getCharPosition(column) {\n        const charOffset = this._characterMapping.getAbsoluteOffset(column);\n        return this._charWidth * charOffset;\n    }\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        const spanNodeTextContentLength = spanNode.textContent.length;\n        let spanIndex = -1;\n        while (spanNode) {\n            spanNode = spanNode.previousSibling;\n            spanIndex++;\n        }\n        return this._characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n    }\n}\n/**\n * Every time we render a line, we save what we have rendered in an instance of this class.\n */\nclass RenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n        this._containsForeignElements = containsForeignElements;\n        this._cachedWidth = -1;\n        this._pixelOffsetCache = null;\n        if (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\n            this._pixelOffsetCache = new Float32Array(Math.max(2, this._characterMapping.length + 1));\n            for (let column = 0, len = this._characterMapping.length; column <= len; column++) {\n                this._pixelOffsetCache[column] = -1;\n            }\n        }\n    }\n    // --- Reading from the DOM methods\n    _getReadingTarget(myDomNode) {\n        return myDomNode.domNode.firstChild;\n    }\n    /**\n     * Width of the line in pixels\n     */\n    getWidth() {\n        if (!this.domNode) {\n            return 0;\n        }\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n        }\n        return this._cachedWidth;\n    }\n    getWidthIsFast() {\n        if (this._cachedWidth === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Visible ranges for a model range\n     */\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this.domNode) {\n            return null;\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const startOffset = this._readPixelOffset(this.domNode, lineNumber, startColumn, context);\n            if (startOffset === -1) {\n                return null;\n            }\n            const endOffset = this._readPixelOffset(this.domNode, lineNumber, endColumn, context);\n            if (endOffset === -1) {\n                return null;\n            }\n            return [new FloatHorizontalRange(startOffset, endOffset - startOffset)];\n        }\n        return this._readVisibleRangesForRange(this.domNode, lineNumber, startColumn, endColumn, context);\n    }\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        if (startColumn === endColumn) {\n            const pixelOffset = this._readPixelOffset(domNode, lineNumber, startColumn, context);\n            if (pixelOffset === -1) {\n                return null;\n            }\n            else {\n                return [new FloatHorizontalRange(pixelOffset, 0)];\n            }\n        }\n        else {\n            return this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\n        }\n    }\n    _readPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            if (this._containsForeignElements === 0 /* None */) {\n                // We can assume the line is really empty\n                return 0;\n            }\n            if (this._containsForeignElements === 2 /* After */) {\n                // We have foreign elements after the (empty) line\n                return 0;\n            }\n            if (this._containsForeignElements === 1 /* Before */) {\n                // We have foreign elements before the (empty) line\n                return this.getWidth();\n            }\n            // We have foreign elements before & after the (empty) line\n            const readingTarget = this._getReadingTarget(domNode);\n            if (readingTarget.firstChild) {\n                return readingTarget.firstChild.offsetWidth;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const cachedPixelOffset = this._pixelOffsetCache[column];\n            if (cachedPixelOffset !== -1) {\n                return cachedPixelOffset;\n            }\n            const result = this._actualReadPixelOffset(domNode, lineNumber, column, context);\n            this._pixelOffsetCache[column] = result;\n            return result;\n        }\n        return this._actualReadPixelOffset(domNode, lineNumber, column, context);\n    }\n    _actualReadPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n            if (!r || r.length === 0) {\n                return -1;\n            }\n            return r[0].left;\n        }\n        if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0 /* None */) {\n            // This branch helps in the case of whitespace only lines which have a width set\n            return this.getWidth();\n        }\n        const domPosition = this._characterMapping.getDomPosition(column);\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        const result = r[0].left;\n        if (this.input.isBasicASCII) {\n            const charOffset = this._characterMapping.getAbsoluteOffset(column);\n            const expectedResult = Math.round(this.input.spaceWidth * charOffset);\n            if (Math.abs(expectedResult - result) <= 1) {\n                return expectedResult;\n            }\n        }\n        return result;\n    }\n    _readRawVisibleRangesForRange(domNode, startColumn, endColumn, context) {\n        if (startColumn === 1 && endColumn === this._characterMapping.length) {\n            // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n            return [new FloatHorizontalRange(0, this.getWidth())];\n        }\n        const startDomPosition = this._characterMapping.getDomPosition(startColumn);\n        const endDomPosition = this._characterMapping.getDomPosition(endColumn);\n        return RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startDomPosition.partIndex, startDomPosition.charIndex, endDomPosition.partIndex, endDomPosition.charIndex, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n    }\n    /**\n     * Returns the column for the text found at a specific offset inside a rendered dom node\n     */\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        const spanNodeTextContentLength = spanNode.textContent.length;\n        let spanIndex = -1;\n        while (spanNode) {\n            spanNode = spanNode.previousSibling;\n            spanIndex++;\n        }\n        return this._characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n    }\n}\nclass WebKitRenderedViewLine extends RenderedViewLine {\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        const output = super._readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context);\n        if (!output || output.length === 0 || startColumn === endColumn || (startColumn === 1 && endColumn === this._characterMapping.length)) {\n            return output;\n        }\n        // WebKit is buggy and returns an expanded range (to contain words in some cases)\n        // The last client rect is enlarged (I think)\n        if (!this.input.containsRTL) {\n            // This is an attempt to patch things up\n            // Find position of last column\n            const endPixelOffset = this._readPixelOffset(domNode, lineNumber, endColumn, context);\n            if (endPixelOffset !== -1) {\n                const lastRange = output[output.length - 1];\n                if (lastRange.left < endPixelOffset) {\n                    // Trim down the width of the last visible range to not go after the last column's position\n                    lastRange.width = endPixelOffset - lastRange.left;\n                }\n            }\n        }\n        return output;\n    }\n}\nconst createRenderedLine = (function () {\n    if (browser.isWebKit) {\n        return createWebKitRenderedLine;\n    }\n    return createNormalRenderedLine;\n})();\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class Margin extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._canUseLayerHinting = !options.get(28 /* disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(Margin.OUTER_CLASS_NAME);\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._glyphMarginBackgroundDomNode = createFastDomNode(document.createElement('div'));\n        this._glyphMarginBackgroundDomNode.setClassName(Margin.CLASS_NAME);\n        this._domNode.appendChild(this._glyphMarginBackgroundDomNode);\n    }\n    dispose() {\n        super.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._canUseLayerHinting = !options.get(28 /* disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollTopChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setLayerHinting(this._canUseLayerHinting);\n        this._domNode.setContain('strict');\n        const adjustedScrollTop = ctx.scrollTop - ctx.bigNumbersDelta;\n        this._domNode.setTop(-adjustedScrollTop);\n        const height = Math.min(ctx.scrollHeight, 1000000);\n        this._domNode.setHeight(height);\n        this._domNode.setWidth(this._contentLeft);\n        this._glyphMarginBackgroundDomNode.setLeft(this._glyphMarginLeft);\n        this._glyphMarginBackgroundDomNode.setWidth(this._glyphMarginWidth);\n        this._glyphMarginBackgroundDomNode.setHeight(height);\n    }\n}\nMargin.CLASS_NAME = 'glyph-margin';\nMargin.OUTER_CLASS_NAME = 'margin';\n"],"names":["_a","ttPolicy","window","trustedTypes","createPolicy","createHTML","value","DOMLineBreaksComputerFactory","fontInfo","tabSize","wrappingColumn","wrappingIndent","requests","injectedTexts","addRequest","lineText","injectedText","previousLineBreakData","push","finalize","firstLineBreakColumn","injectedTextsPerLine","createEmptyLineBreakWithPossiblyInjectedText","requestIdx","LineInjectedText","injectionOptions","map","t","options","injectionOffsets","text","column","ModelLineProjectionData","length","result","i","len","overallWidth","Math","round","typicalHalfwidthCharacterWidth","additionalIndent","additionalIndentSize","additionalIndentLength","ceil","spaceWidth","containerDomNode","document","createElement","applyFontInfo","sb","createStringBuilder","firstNonWhitespaceIndices","wrappedTextIndentLengths","renderLineContents","allCharOffsets","allVisibleColumns","lineContent","firstNonWhitespaceIndex","wrappedTextIndentLength","width","strings","charCodeAt","indentWidth","typicalFullwidthCharacterWidth","renderLineContent","substr","tmp","renderLine","html","build","trustedhtml","innerHTML","style","position","top","wordWrap","body","appendChild","range","createRange","lineDomNodes","Array","prototype","slice","call","children","breakOffsets","readLineBreaks","visibleColumns","breakOffsetsVisibleColumn","j","curInjectedTexts","removeChild","createLineBreaks","initialVisibleColumn","wrappingIndentLength","hangingOffset","String","appendASCIIString","visibleColumn","charOffset","charOffsets","nextCharCode","charIndex","charCode","producedCharacters","charWidth","space","write1","appendASCII","lineDomNode","spans","discoverBreaks","err","console","log","low","lowRects","high","highRects","readClientRect","abs","mid","midRects","startOffset","endOffset","setStart","firstChild","setEnd","getClientRects","DynamicViewOverlay","ViewEventHandler","RenderingContext","viewLayout","viewportData","viewLines","_renderingContextBrand","undefined","_viewLines","includeNewLines","this","linesVisibleRangesForRange","visibleRangeForPosition","_restrictedRenderingContextBrand","_viewLayout","scrollWidth","getScrollWidth","scrollHeight","getScrollHeight","visibleRange","bigNumbersDelta","vInfo","getCurrentViewport","scrollTop","scrollLeft","left","viewportWidth","viewportHeight","height","absoluteTop","lineNumber","getVerticalOffsetForLineNumber","getDecorationsInViewport","LineVisibleRanges","outsideRenderedLine","ranges","HorizontalRange","_horizontalRangeBrand","FloatHorizontalRange","_floatHorizontalRangeBrand","a","b","HorizontalPosition","originalLeft","VisibleRanges","ViewController","configuration","viewModel","userInputEvents","commandDelegate","pasteOnNewLine","multicursorText","mode","paste","type","replacePrevCharCnt","replaceNextCharCnt","positionDelta","compositionType","startComposition","endComposition","cut","modelSelection","CoreNavigationCommands","source","selection","viewPosition","minColumn","getLineMinColumn","Position","data","get","altKey","ctrlKey","metaKey","selectionClipboardIsOn","platform","columnSelection","middleButton","_columnSelect","mouseColumn","inSelectionMode","startedOnLineNumbers","_hasMulticursorModifier","_lastCursorLineSelect","_createCursor","_lineSelectDrag","_lineSelect","mouseDownCount","_selectAll","_lastCursorLineSelectDrag","_lastCursorWordSelect","_wordSelectDrag","_wordSelect","_hasNonMulticursorModifier","shiftKey","_lastCursorMoveToSelect","_moveToSelect","moveTo","_validateViewColumn","_convertViewToModelPosition","_usualArgs","doColumnSelect","wholeLine","coordinatesConverter","convertViewPositionToModelPosition","e","emitKeyDown","emitKeyUp","emitContextMenu","emitMouseMove","emitMouseLeave","emitMouseUp","emitMouseDown","emitMouseDrag","emitMouseDrop","emitMouseDropCanceled","emitMouseWheel","RenderedLinesCollection","createLine","_createLine","_set","rendLineNumberStart","lines","_lines","_rendLineNumberStart","lineIndex","Error","deleteFromLineNumber","deleteToLineNumber","getCount","startLineNumber","getStartLineNumber","endLineNumber","getEndLineNumber","deleteCnt","deleteStartIndex","deleteCount","deleteAboveCount","splice","changeFromLineNumber","changeToLineNumber","someoneNotified","changedLineNumber","onContentChanged","insertFromLineNumber","insertToLineNumber","insertCnt","newLines","insertIndex","beforeLines","afterLines","deletedLines","concat","notifiedSomeone","rng","toLineNumber","fromLineNumber","from","max","to","min","onTokensChanged","VisibleLinesCollection","host","_host","domNode","_createDomNode","_linesCollection","createVisibleLine","createFastDomNode","setClassName","setPosition","setAttribute","hasChanged","flush","onLinesChanged","deleted","onLinesDeleted","getDomNode","onLinesInserted","scrollTopChanged","getLine","inp","_get","renderer","ViewLayerRenderer","ctx","linesLength","resCtx","render","relativeVerticalOffset","inContext","stopLineNumber","deltaTop","x","_finishRendering","_renderUntouchedLines","_insertLinesBefore","removeCnt","_removeLinesBefore","_insertLinesAfter","_removeLinesAfter","startIndex","endIndex","deltaLN","layoutLine","newLinesLen","removeCount","removeIndex","domNodeIsEmpty","newLinesHTML","wasNew","_ttPolicy","lastChild","insertAdjacentHTML","currChild","line","setDomNode","previousSibling","invalidLinesHTML","wasInvalid","hugeDomNode","parentNode","replaceChild","_sb","reset","hadNewLine","_finishRenderingNewLines","hadInvalidLine","_finishRenderingInvalidLines","ViewOverlays","context","_visibleLines","_dynamicOverlays","_isFocused","shouldRender","dispose","ViewOverlayLine","_context","overlay","onConfigurationChanged","getVisibleLine","onFlushed","isFocused","onScrollChanged","onZonesChanged","toRender","filter","dynamicOverlay","prepareRender","onDidRender","_viewOverlaysRender","toggleClassName","renderLines","ViewPart","dynamicOverlays","_configuration","_lineHeight","_domNode","_renderedContent","setTop","setHeight","ContentViewOverlays","layoutInfo","_contentWidth","contentWidth","scrollWidthChanged","setWidth","MarginViewOverlays","_contentLeft","contentLeft","scrollHeightChanged","Coordinate","_coordinateBrand","ViewContentWidgets","viewDomNode","_viewDomNode","_widgets","PartFingerprints","overflowingContentWidgetsDomNode","Object","keys","widgetId","onLineMappingChanged","_widget","myWidget","Widget","id","allowEditorOverflow","setShouldRender","widget","preference","getId","hasOwnProperty","removeAttribute","suppressMouseDown","onBeforeRender","actual","_actual","_fixedOverflowWidgets","_range","_viewRange","_preference","_cachedDomNodeOffsetWidth","_cachedDomNodeOffsetHeight","_maxWidth","_getMaxWidth","_isVisible","_renderData","setDisplay","setVisibility","setMaxWidth","_setPosition","validModelRange","model","validateModelRange","modelPositionIsVisible","getStartPosition","getEndPosition","convertModelRangeToViewRange","innerWidth","documentElement","offsetWidth","topLeft","bottomLeft","aboveLineTop","heightAboveLine","underLineTop","aboveTop","fitsAbove","belowTop","fitsBelow","actualAboveLeft","actualBelowLeft","aboveLeft","belowLeft","windowSize","domNodePosition","MIN_LIMIT","MAX_LIMIT","absoluteLeft","dom","StandardWindow","scrollX","delta","getDomNodePagePosition","absoluteAboveTop","scrollY","absoluteBelowTop","getClientArea","_layoutHorizontalSegmentInPage","absoluteAboveLeft","absoluteBelowLeft","visibleRangesForRange","firstLine","lastLine","visibleRangesForLine","firstLineMinLeft","lastLineMinLeft","topForPosition","topForBottomLine","placement","_getTopAndBottomLeft","preferredDimensions","beforeRender","safeInvoke","offsetHeight","_layoutBoxInPage","_layoutBoxInViewport","pass","pref","coordinate","_prepareRenderWidgetAtExactPositionOverflowing","_prepareRenderWidget","afterRender","setLeft","fn","thisArg","args","AbstractLineHighlightOverlay","_renderLineHighlight","_renderLineHighlightOnlyWhenFocus","_selectionIsEmpty","_focused","_cursorLineNumbers","_selections","Selection","addEventHandler","removeEventHandler","cursorsLineNumbers","s","positionLineNumber","sort","arrays","selectionIsEmpty","every","isEmpty","_readFromSelections","selections","_shouldRenderThis","renderedLine","_renderOne","visibleStartLineNumber","visibleEndLineNumber","index","renderData","CurrentLineHighlightOverlay","className","_shouldRenderOther","_shouldRenderInContent","_shouldRenderInMargin","CurrentLineMarginHighlightOverlay","registerThemingParticipant","theme","collector","lineHighlight","getColor","editorLineHighlight","addRule","isTransparent","defines","editorLineHighlightBorder","lineHighlightBorder","DecorationsOverlay","_typicalHalfwidthCharacterWidth","_renderResult","_decorations","decorations","decorationsLen","d","zIndex","aClassName","bClassName","Range","output","_renderWholeLineDecorations","_renderNormalDecorations","lineHeight","lenI","isWholeLine","decorationOutput","prevClassName","prevShowIfCollapsed","prevRange","showIfCollapsed","Boolean","endColumn","startColumn","getLineMaxColumn","_renderNormalDecoration","linesVisibleRanges","lenJ","lineVisibleRanges","singleVisibleRange","center","k","lenK","EditorScrollbar","linesContent","overflowGuardDomNode","scrollbar","mouseWheelScrollSensitivity","fastScrollSensitivity","scrollPredominantAxis","scrollbarOptions","listenOnDomNode","getThemeTypeSelector","useShadows","lazyRender","vertical","horizontal","verticalHasArrows","horizontalHasArrows","verticalScrollbarSize","verticalSliderSize","horizontalScrollbarSize","horizontalSliderSize","handleMouseWheel","alwaysConsumeMouseWheel","arrowSize","scrollByPage","_register","SmoothScrollableElement","getScrollable","scrollbarDomNode","_setLayout","onBrowserDesperateReveal","lookAtScrollTop","lookAtScrollLeft","newScrollPosition","getCurrentScrollTop","deltaLeft","getCurrentScrollLeft","setScrollPosition","addDisposableListener","side","minimap","minimapWidth","getOverviewRulerLayoutInfo","browserEvent","delegateVerticalScrollbarMouseDown","newOpts","updateOptions","updateClassName","renderNow","scrollbarShadowColor","scrollbarShadow","scrollbarSliderBackgroundColor","scrollbarSliderBackground","scrollbarSliderHoverBackgroundColor","scrollbarSliderHoverBackground","scrollbarSliderActiveBackgroundColor","scrollbarSliderActiveBackground","DecorationToRender","_decorationToRenderBrand","DedupOverlay","prevEndLineIndex","startLineIndex","endLineIndex","GlyphMarginOverlay","_glyphMargin","_glyphMarginLeft","glyphMarginLeft","_glyphMarginWidth","glyphMarginWidth","r","rLen","glyphMarginClassName","_render","_getDecorations","toString","common","classNames","join","IndentGuidesOverlay","_primaryPosition","wrappingInfo","_spaceWidth","_maxIndentLeft","_bracketPairGuideOptions","newPosition","getPosition","equals","_b","_c","_d","indentation","bracketPairs","activeCursorPosition","indents","getGuidesByLine","indent","leftOffset","guide","horizontalLine","bracketGuides","getBracketGuidesInRangeByLine","highlightActive","highlightActiveBracketPair","horizontalGuides","bracketPairsHorizontal","HorizontalGuidesState","includeInactive","indentGuides","getLinesIndentGuides","activeIndentStartLineNumber","activeIndentEndLineNumber","activeIndentLevel","highlightActiveIndentation","activeIndentInfo","getActiveIndentGuide","indentSize","getTextModelOptions","lineGuides","bracketGuidesInLine","bracketGuidesInLineQueue","ArrayQueue","indentGuidesInLine","indentLvl","indentGuide","isActive","takeWhile","g","peeked","peek","IndentGuide","transparentToUndefined","color","editorIndentGuidesColor","editorIndentGuides","editorActiveIndentGuidesColor","editorActiveIndentGuides","colors","bracketColor","editorBracketHighlightingForeground1","guideColor","editorBracketPairGuideBackground1","guideColorActive","editorBracketPairGuideActiveBackground1","editorBracketHighlightingForeground2","editorBracketPairGuideBackground2","editorBracketPairGuideActiveBackground2","editorBracketHighlightingForeground3","editorBracketPairGuideBackground3","editorBracketPairGuideActiveBackground3","editorBracketHighlightingForeground4","editorBracketPairGuideBackground4","editorBracketPairGuideActiveBackground4","editorBracketHighlightingForeground5","editorBracketPairGuideBackground5","editorBracketPairGuideActiveBackground5","editorBracketHighlightingForeground6","editorBracketPairGuideBackground6","editorBracketPairGuideActiveBackground6","colorProvider","BracketPairGuidesClassNames","colorValues","c","effectiveGuideColor","transparent","effectiveGuideColorActive","isDefined","level","getInlineClassNameOfLevel","replace","activeClassName","LastRenderedData","_currentVisibleRange","currentVisibleRange","HorizontalRevealRangeRequest","minimalReveal","startScrollTop","stopScrollTop","scrollType","minLineNumber","maxLineNumber","HorizontalRevealSelectionsRequest","ViewLines","_linesContent","_textRangeRestingSpot","conf","_isViewportWrapping","isViewportWrapping","_revealHorizontalRightPadding","_horizontalScrollbarHeight","horizontalScrollbarHeight","_cursorSurroundingLines","_cursorSurroundingLinesStyle","_canUseLayerHinting","_viewLineOptions","ViewLineOptions","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","_maxLineWidth","_asyncUpdateLineWidths","RunOnceScheduler","_updateLineWidthsSlow","_asyncCheckMonospaceFontAssumptions","_checkMonospaceFontAssumptions","_lastRenderedData","_horizontalRevealRequest","ViewLine","_onOptionsMaybeChanged","newViewLineOptions","onOptionsChanged","rendStartLineNumber","rendEndLineNumber","onSelectionChanged","onDecorationsChanged","desiredScrollTop","_computeScrollTopToRevealRange","getFutureViewport","verticalType","validateScrollPosition","revealHorizontal","scrollLeftChanged","setMaxLineWidth","spanNode","offset","viewLineDomNode","_getViewLineDomNode","_getLineNumberFor","getLineCount","getColumnOfNodeOffset","node","nodeType","parentElement","getWidth","originalEndLineNumber","getCurrentVisibleRange","visibleRanges","visibleRangesLen","domReadingContext","DomReadingContext","nextLineModelLineNumber","getVisibleRangesForRange","_visibleRangesForLineRange","_updateLineWidths","fast","localMaxLineWidth","allWidthsComputed","visibleLine","getWidthIsFast","_ensureMaxLineWidth","longestLineNumber","longestWidth","needsMonospaceFontCheck","lineWidth","monospaceAssumptionsAreValid","onMonospaceAssumptionsInvalidated","setCurrentVisibleRange","horizontalRevealRequest","newScrollLeft","_computeScrollLeftToReveal","maxHorizontalOffset","_updateLineWidthsFast","schedule","isScheduled","setLayerHinting","setContain","adjustedScrollTop","iLineWidth","viewport","boxIsSingleRange","boxStartY","boxEndY","newScrollTop","viewportStartY","viewportEndY","minScrollTop","boxMiddleY","_computeMinimumScrolling","viewportStartX","viewportEndX","boxStartX","boxEndX","HORIZONTAL_EXTRA_PX","viewportStart","viewportEnd","boxStart","boxEnd","revealAtStart","revealAtEnd","viewportLength","LinesDecorationsOverlay","_decorationsLeft","decorationsLeft","_decorationsWidth","decorationsWidth","linesDecorationsClassName","firstLineDecorationClassName","lineOutput","MarginViewLineDecorationsOverlay","marginClassName","allCharCodes","v","MinimapCharRenderer","charData","scale","_minimapCharRendererBrand","charDataNormal","soften","charDataLight","target","dx","dy","chCode","foregroundAlpha","backgroundColor","backgroundAlpha","fontScale","useLighterFont","force1pxHeight","charHeight","renderHeight","warn","getCharIndex","destWidth","backgroundR","backgroundG","backgroundB","deltaR","deltaG","deltaB","destAlpha","dest","sourceOffset","row","y","colorR","colorG","colorB","input","ratio","Uint8ClampedArray","toUint8","charTable","A","B","C","D","E","F","decodeData","str","prebakedMiniMaps","once","MinimapCharRendererFactory","fontFamily","lastCreated","lastFontFamily","factory","createFromSampleData","createSampleData","canvas","getContext","fillStyle","font","textBaseline","code","fillText","fromCharCode","getImageData","_downsample","destOffset","targetIndex","brightest","sourceY1","sourceY2","sourceX1","sourceX2","samples","sy","sourceRow","floor","yBalance","sx","xBalance","sourceIndex","weight","final","pixelsPerCharacter","resultLen","resultOffset","_downsampleChar","adjust","MinimapOptions","tokensColorTracker","pixelRatio","minimapLayout","minimapOpts","renderMinimap","size","minimapHeightIsEditorHeight","scrollBeyondLastLine","showSlider","minimapLeft","minimapHeight","canvasInnerWidth","minimapCanvasInnerWidth","canvasInnerHeight","minimapCanvasInnerHeight","canvasOuterWidth","minimapCanvasOuterWidth","canvasOuterHeight","minimapCanvasOuterHeight","isSampling","minimapIsSampling","editorHeight","minimapScale","minimapLineHeight","minimapCharWidth","charRenderer","create","defaultBackgroundColor","_getMinimapBackground","_getMinimapForegroundOpacity","other","themeColor","minimapBackground","RGBA8","rgba","minimapForegroundOpacity","MinimapLayout","sliderNeeded","computedSliderRatio","sliderTop","sliderHeight","_computedSliderRatio","pageY","viewportStartLineNumber","viewportEndLineNumber","viewportStartLineNumberVerticalOffset","viewportContainsWhitespaceGaps","lineCount","realLineCount","previousLayout","maxMinimapSliderTop","minimapLinesFitting","logicalScrollHeight","maxLinesFitting","viewportLineCount","expectedViewportLineCount","extraLinesAtTheBottom","MinimapLine","INVALID","RenderData","renderedLayout","imageData","_imageData","_renderedLines","layout","scrollEquals","MinimapBuffers","WIDTH","HEIGHT","background","_backgroundFillData","_createBackgroundFillData","_buffers","createImageData","_lastUsedBuffer","set","backgroundA","MinimapSamplingState","samplingRatio","minimapLines","fromLineIndex","modelLineToMinimapLine","toLineIndex","sampledLineNumber","minimapLineStart","minimapLineEnd","deletedLineCount","changeStartIndex","changeEndIndex","insertedLineCount","viewLineCount","oldSamplingState","minimapLineCount","EditorLayoutInfoComputer","halfRatio","lastIndex","oldMinimapLines","oldLength","oldIndex","oldDeltaLineCount","minViewLineNumber","events","lastEvent","fromViewLineNumber","toViewLineNumber","oldMinimapLineNumber","_oldIndex","selectedViewLineNumber","_i","Minimap","MinimapTokensColorTracker","_minimapSelections","compute","samplingState","_samplingState","_shouldCheckSampling","InnerMinimap","opts","_recreateLineSampling","onDidChangeOptions","affectsMinimap","minimapLineRange","modelLineRangeToMinimapLineRange","invalidateMinimapColorCache","onThemeChanged","onTokensColorsChanged","minimapCtx","whitespaceViewportData","wasSampling","event","getLineContent","needed","getViewLineData","getMinimapLinesRenderingData","decorationLineRangeToMinimapLineRange","modelStartLineNumber","modelEndLineNumber","decoration","minimapStartLineNumber","minimapEndLineNumber","ViewModelDecoration","revealRange","_renderDecorations","_gestureInProgress","_theme","_model","_lastRenderData","_selectionColor","minimapSelection","_getMinimapDomNodeClassName","_shadow","_canvas","_decorationsCanvas","_slider","_sliderHorizontal","_applyLayout","_mouseDownListener","addStandardDisposableListener","preventDefault","internalOffsetY","offsetY","revealLineNumber","leftButton","initialPosY","_startSliderDragging","buttons","posx","posy","_sliderMouseMoveMonitor","GlobalMouseMoveMonitor","_sliderMouseDownListener","stopPropagation","_gestureDisposable","Gesture","_sliderTouchStartListener","EventType","scrollDueToTouchEvent","passive","_sliderTouchMoveListener","_sliderTouchEndListener","initialButtons","initialPosX","initialSliderState","handleMouseMove","mouseOrthogonalDelta","setScrollTop","mouseDelta","getDesiredScrollTopFromDelta","startMonitoring","standardMouseMoveMerger","mouseMoveData","touch","startY","getBoundingClientRect","getDesiredScrollTopFromTouchLocation","getBuffer","renderingCtx","getRealLineCount","renderDecorations","getSelections","getMinimapDecorationsInViewport","characterWidth","getOptions","canvasContext","clearRect","highlightedLines","ContiguousLineMap","_renderSelectionLineHighlights","_renderDecorationsLineHighlights","lineOffsetMap","_renderSelectionsHighlights","_renderDecorationsHighlights","y1","y2","yy1","yy2","fillRect","MINIMAP_GUTTER_WIDTH","highlightColors","Map","minimapOptions","MinimapPosition","decorationColor","highlightColor","has","renderDecorationOnLine","renderDecoration","decorationRange","x1","getXOffsetForPosition","x2","lineIndexToXOffset","lineData","prevx","linesEquals","_lastData","_getBuffer","_dirtyY1","_dirtyY2","lineInfo","defaultBackground","backgroundIsLight","renderMinimapLineHeight","innerLinePadding","renderBackground","renderedLines","_renderLine","dirtyY1","dirtyHeight","putImageData","lastRenderData","lastTargetData","lastStartLineNumber","lastLines","lastLinesLength","targetData","maxDestPixel","dirtyPixel1","dirtyPixel2","copySourceStart","copySourceEnd","copyDestStart","copyDestEnd","dest_dy","lastLineIndex","source_dy","sourceStart","sourceEnd","destStart","destEnd","subarray","colorTracker","minimapCharRenderer","content","tokens","maxDx","tabsCharDelta","tokenIndex","tokensLen","tokenEndIndex","getEndOffset","tokenColorId","getForeground","tokenColor","insertSpacesCount","count","blockRenderChar","renderChar","Disposable","defaultValue","_startLineNumber","_endLineNumber","_defaultValue","_values","sliderBackground","minimapSliderBackground","sliderHoverBackground","minimapSliderHoverBackground","sliderActiveBackground","minimapSliderActiveBackground","shadow","ViewOverlayWidgets","_verticalScrollbarWidth","verticalScrollbarWidth","_minimapWidth","_editorHeight","_editorWidth","widgetData","setRight","widgetHeight","clientHeight","right","unsetTop","_renderWidget","Settings","config","overviewRulerLanes","renderBorder","borderColor","editorOverviewRulerBorder","hideCursor","cursorColor","editorCursorForeground","themeType","minimapEnabled","enabled","minimapSide","editorOverviewRulerBackground","TokenizationRegistry","Color","overviewRuler","domWidth","domHeight","canvasWidth","canvasHeight","_initLanes","w","canvasLeftOffset","laneCount","remainingWidth","leftWidth","rightWidth","centerWidth","centerOffset","DecorationsOverviewRuler","_updateSettings","_tokensColorTrackerListener","changedColorMap","_cursorPositions","newSettings","_settings","affectsOverviewRuler","invalidateOverviewRulerColorCache","editorCtx","setBackgroundColor","heightRatio","getAllOverviewRulerDecorations","minDecorationHeight","halfMinDecorationHeight","canvasCtx","OverviewRulerDecorationsGroup","decorationGroup","decorationGroupData","prevLane","prevY1","prevY2","lane","yCenter","cursorHeight","halfCursorHeight","cursorX","cursorW","cursor","beginPath","strokeStyle","lineTo","stroke","OverviewRuler","cssClassName","_zoneManager","OverviewZoneManager","setDOMWidth","setDOMHeight","setOuterHeight","setLineHeight","setPixelRatio","getDOMWidth","getDOMHeight","getCanvasWidth","getCanvasHeight","zones","setZones","getOuterHeight","colorZones","resolveColorZones","id2Color","getId2Color","_renderOneLane","currentColorId","currentFrom","currentTo","zone","zoneColorId","colorId","zoneFrom","zoneTo","Rulers","_renderedRulers","_rulers","currentCount","desiredCount","rulerWidth","addCount","pop","_ensureRulersCount","ruler","setBoxShadow","rulerColor","editorRuler","ScrollDecorationViewPart","_scrollTop","_width","_updateWidth","_shouldShow","_useShadows","newShouldShow","_updateShouldShow","HorizontalRangeWithStyle","startStyle","endStyle","LineVisibleRangesWithStyle","toStyledRange","item","toStyled","SelectionsOverlay","_previousFrameVisibleRangesWithStyle","_roundedSelection","previousFrame","epsilon","previousFrameTop","previousFrameBottom","topLineNumber","bottomLineNumber","curLineRange","curLeft","curRight","bottom","prevLeft","prevRight","nextLeft","nextRight","_visibleRangesHaveGaps","_enrichVisibleRangesWithStyle","output2","hasMultipleSelections","visibleRangesHaveStyle","fullLineHeight","reducedLineHeight","firstLineNumber","lastLineNumber","innerCornerOutput","restOfSelectionOutput","_createSelectionPiece","SELECTION_CLASS_NAME","ROUNDED_PIECE_WIDTH","EDITOR_BACKGROUND_CLASS_NAME","SELECTION_TOP_RIGHT","SELECTION_BOTTOM_RIGHT","SELECTION_TOP_LEFT","SELECTION_BOTTOM_LEFT","thisFrameVisibleRangesWithStyle","visibleRangesWithStyle","_getVisibleRangesWithStyle","_actualRenderOneSelection","n","editorSelectionColor","editorSelectionBackground","editorInactiveSelectionColor","editorInactiveSelection","editorSelectionForegroundColor","editorSelectionForeground","ViewCursorRenderData","textContent","textContentClassName","ViewCursor","_cursorStyle","_lineCursorWidth","_position","_lastRenderedContent","substring","_getGraphemeAwarePosition","nextGrapheme","TextEditorCursorStyle","computeScreenAwareSize","visibleRangeForCharacter","firstVisibleRangeForCharacter","findTokenIndexAtOffset","getClassName","_prepareRender","ViewCursors","_readOnly","_cursorBlinking","_cursorSmoothCaretAnimation","_isComposingInput","_primaryCursor","_secondaryCursors","_updateDomClassName","_startCursorBlinkAnimation","TimeoutTimer","_cursorFlatBlinkInterval","IntervalTimer","_blinkingEnabled","_editorHasFocus","_updateBlinking","secondaryPositions","onCursorPositionChanged","addCnt","newCursor","insertBefore","nextSibling","positions","_onCursorPositionChanged","cancel","blinkingStyle","_getCursorBlinking","isHidden","isSolid","_hide","_show","cancelAndSet","BLINK_INTERVAL","setIfNotSet","_getClassName","show","hide","renderDataLen","primaryRenderData","secondaryRenderData","caret","caretBackground","editorCursorBackground","opposite","invalidFunc","ViewZones","marginDomNode","_zones","whitespaces","getWhitespaces","oldWhitespaces","whitespace","hadAChange","changeWhitespace","whitespaceAccessor","props","_computeWhitespaceProps","delegate","isInHiddenArea","oldWhitespace","afterLineNumber","afterViewLineNumber","heightInPx","changeOneWhitespace","_safeCallOnComputedHeight","_recomputeWhitespacesProps","afterColumn","_heightInPixels","minWidthInPx","_minWidthInPixels","zoneAfterModelPosition","zoneBeforeModelPosition","validateModelPosition","validAfterLineNumber","getModelLineMaxColumn","convertModelPositionToViewPosition","afterColumnAffinity","isVisible","callback","zonesHaveChanged","changeAccessor","addZone","_addZone","removeZone","_removeZone","layoutZone","_layoutZone","func","arg1","onUnexpectedError","safeInvoke1Arg","myZone","whitespaceId","insertWhitespace","_getZoneOrdinal","removeWhitespace","heightInLines","onComputedHeight","onDomNodeTop","visibleWhitespaces","visibleZones","hasVisibleZone","visibleWhitespace","newTop","newHeight","newDisplay","verticalOffset","_safeCallOnDomNodeTop","getScrolledTopFromAbsoluteTop","View","themeService","overflowWidgetsDomNode","_renderAnimationFrame","viewController","ViewContext","getColorTheme","onDidColorThemeChange","update","_viewParts","_textAreaHandler","TextAreaHandler","_createTextAreaHandlerHelper","_getEditorClassName","_overflowGuardContainer","_scrollbar","_viewZones","decorationsOverviewRuler","scrollDecoration","contentViewOverlays","addDynamicOverlay","marginViewOverlays","LineNumbersOverlay","margin","Margin","_contentWidgets","_viewCursors","_overlayWidgets","rulers","overviewRulerData","parent","textArea","textAreaCover","_pointerHandler","PointerHandler","_createPointerHandlerHelper","_renderNow","linesContentDomNode","focusTextArea","focus","dispatchTextAreaEvent","dispatchEvent","getLastRenderData","lastViewCursorsRenderData","lastTextareaPosition","PointerHandlerLastRenderData","shouldSuppressMouseDownOnViewZone","viewZoneId","shouldSuppressMouseDownOnWidget","getPositionFromDOMInfo","_flushAccumulatedAndRenderNow","getLineWidth","focused","_scheduleRender","remove","runAtThisOrScheduleAtNextAnimationFrame","_onRenderScheduled","bind","safeInvokeNoArg","_actualRender","viewPart","isInDOM","viewPartsToRender","_getViewPartsToRender","partialViewportData","getLinesViewportData","setViewport","centeredLineNumber","ViewportData","getWhitespaceViewportData","renderText","renderingContext","scrollPosition","tokenizeViewport","updateLineWidths","modelLineNumber","modelColumn","modelPosition","clientX","clientY","mouseTarget","getTargetAtClientPoint","ViewUserInputEvents","changeViewZones","now","everything","forceShouldRender","setAriaOptions","addWidget","layoutContentWidget","newRange","newPreference","setWidgetPosition","removeWidget","layoutOverlayWidget","partId","getAttribute","parseInt","child","stopAt","ELEMENT_NODE","read","Uint8Array","onKeyDown","onKeyUp","onContextMenu","onMouseMove","onMouseLeave","onMouseDown","onMouseUp","onMouseDrag","onMouseDrop","onMouseDropCanceled","onMouseWheel","_coordinatesConverter","_convertViewToModelMouseEvent","_convertViewToModelMouseTarget","convertViewToModelMouseTarget","assign","convertViewRangeToModelRange","_readConfig","_lastCursorModelPosition","_activeLineNumber","lineNumbers","_renderLineNumbers","renderType","_renderCustomLineNumbers","renderFn","_renderFinalNewline","_lineNumbersLeft","lineNumbersLeft","_lineNumbersWidth","lineNumbersWidth","primaryViewPosition","viewLineNumber","diff","lineHeightClassName","CLASS_NAME","getLineLength","renderLineNumber","_getLineRenderLineNumber","editorLineNumbers","activeLineNumber","editorActiveLineNumber","RangeUtil","_handyReadyRange","endNode","selectNodeContents","startElement","endElement","_createRange","_detachRange","prev","clientRects","clientRectDeltaLeft","clientRectScale","clientRect","_mergeAdjacentRanges","startChildIndex","endChildIndex","_createHorizontalRangesFromClientRects","_readClientRects","canUseFastRenderedViewLine","browser","isFirefox","isSafari","_clientRectDeltaLeft","_clientRectScale","_clientRectRead","rect","renderWhitespace","renderControlCharacters","middotWidth","wsmiddotWidth","useMonospaceOptimizations","isMonospace","canUseHalfwidthRightwardsArrow","stopRenderingLineAfter","fontLigatures","_options","_isMaybeInvalid","_renderedViewLine","newOptions","ColorScheme","getViewLineRenderingData","actualInlineDecorations","LineDecoration","inlineDecorations","maxColumn","selectionsOnLine","LineRange","renderLineInput","RenderLineInput","continuesWithWrappedLine","isBasicASCII","containsRTL","startVisibleColumn","EditorFontLigatures","renderViewLine","renderedViewLine","containsForeignElements","lineTokens","FastRenderedViewLine","characterMapping","createRenderedLine","toSlowRenderedLine","horizontalRanges","_characterMapping","_charWidth","_getCharPosition","expectedWidth","actualWidth","startPosition","endPosition","getAbsoluteOffset","spanNodeTextContentLength","spanIndex","getColumn","DomPosition","RenderedViewLine","_isWhitespaceOnly","test","_containsForeignElements","_cachedWidth","_pixelOffsetCache","Float32Array","myDomNode","_getReadingTarget","_readPixelOffset","_readVisibleRangesForRange","pixelOffset","_readRawVisibleRangesForRange","readingTarget","cachedPixelOffset","_actualReadPixelOffset","readHorizontalRanges","domPosition","getDomPosition","partIndex","expectedResult","startDomPosition","endDomPosition","WebKitRenderedViewLine","endPixelOffset","lastRange","isWebKit","createWebKitRenderedLine","createNormalRenderedLine","OUTER_CLASS_NAME","_glyphMarginBackgroundDomNode"],"sourceRoot":""}