{"version":3,"file":"static/js/monaco-editor-vendor.ffbeb0f7.0e977b9c.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/common/encodedTokenAttributes.js","../node_modules/monaco-editor/esm/vs/editor/common/languageSelector.js","../node_modules/monaco-editor/esm/vs/editor/common/languageFeatureRegistry.js","../node_modules/monaco-editor/esm/vs/editor/common/languages.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/autoIndent.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/defaultDocumentColorsComputer.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/enterAction.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/language.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/languageConfiguration.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/characterPair.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/electricCharacter.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/indentRules.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/onEnter.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/languageBracketsConfiguration.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/languageConfigurationRegistry.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/modesRegistry.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/nullTokenize.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/richEditBrackets.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/tokenization.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/textToHtmlTokenizer.js","../node_modules/monaco-editor/esm/vs/editor/common/model.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/bracketPairsTree.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsImpl.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/ast.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/brackets.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/combineTextEditInfos.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/length.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/concat23Trees.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/nodeReader.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/parser.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/smallImmutableSet.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/tokenizer.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/colorizedBracketPairsDecorationProvider.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/fixBrackets.js","../node_modules/monaco-editor/esm/vs/editor/common/model/editStack.js","../node_modules/monaco-editor/esm/vs/editor/common/model/fixedArray.js","../node_modules/monaco-editor/esm/vs/editor/common/model/guidesTextModelPart.js","../node_modules/monaco-editor/esm/vs/editor/common/model/indentationGuesser.js","../node_modules/monaco-editor/esm/vs/editor/common/model/intervalTree.js","../node_modules/monaco-editor/esm/vs/editor/common/modelLineProjectionData.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n */\nexport class TokenMetadata {\n    static getLanguageId(metadata) {\n        return (metadata & 255 /* MetadataConsts.LANGUAGEID_MASK */) >>> 0 /* MetadataConsts.LANGUAGEID_OFFSET */;\n    }\n    static getTokenType(metadata) {\n        return (metadata & 768 /* MetadataConsts.TOKEN_TYPE_MASK */) >>> 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */;\n    }\n    static containsBalancedBrackets(metadata) {\n        return (metadata & 1024 /* MetadataConsts.BALANCED_BRACKETS_MASK */) !== 0;\n    }\n    static getFontStyle(metadata) {\n        return (metadata & 30720 /* MetadataConsts.FONT_STYLE_MASK */) >>> 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n    }\n    static getForeground(metadata) {\n        return (metadata & 16744448 /* MetadataConsts.FOREGROUND_MASK */) >>> 15 /* MetadataConsts.FOREGROUND_OFFSET */;\n    }\n    static getBackground(metadata) {\n        return (metadata & 4278190080 /* MetadataConsts.BACKGROUND_MASK */) >>> 24 /* MetadataConsts.BACKGROUND_OFFSET */;\n    }\n    static getClassNameFromMetadata(metadata) {\n        const foreground = this.getForeground(metadata);\n        let className = 'mtk' + foreground;\n        const fontStyle = this.getFontStyle(metadata);\n        if (fontStyle & 1 /* FontStyle.Italic */) {\n            className += ' mtki';\n        }\n        if (fontStyle & 2 /* FontStyle.Bold */) {\n            className += ' mtkb';\n        }\n        if (fontStyle & 4 /* FontStyle.Underline */) {\n            className += ' mtku';\n        }\n        if (fontStyle & 8 /* FontStyle.Strikethrough */) {\n            className += ' mtks';\n        }\n        return className;\n    }\n    static getInlineStyleFromMetadata(metadata, colorMap) {\n        const foreground = this.getForeground(metadata);\n        const fontStyle = this.getFontStyle(metadata);\n        let result = `color: ${colorMap[foreground]};`;\n        if (fontStyle & 1 /* FontStyle.Italic */) {\n            result += 'font-style: italic;';\n        }\n        if (fontStyle & 2 /* FontStyle.Bold */) {\n            result += 'font-weight: bold;';\n        }\n        let textDecoration = '';\n        if (fontStyle & 4 /* FontStyle.Underline */) {\n            textDecoration += ' underline';\n        }\n        if (fontStyle & 8 /* FontStyle.Strikethrough */) {\n            textDecoration += ' line-through';\n        }\n        if (textDecoration) {\n            result += `text-decoration:${textDecoration};`;\n        }\n        return result;\n    }\n    static getPresentationFromMetadata(metadata) {\n        const foreground = this.getForeground(metadata);\n        const fontStyle = this.getFontStyle(metadata);\n        return {\n            foreground: foreground,\n            italic: Boolean(fontStyle & 1 /* FontStyle.Italic */),\n            bold: Boolean(fontStyle & 2 /* FontStyle.Bold */),\n            underline: Boolean(fontStyle & 4 /* FontStyle.Underline */),\n            strikethrough: Boolean(fontStyle & 8 /* FontStyle.Strikethrough */),\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { match as matchGlobPattern } from '../../base/common/glob.js';\nimport { normalize } from '../../base/common/path.js';\nexport function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType) {\n    if (Array.isArray(selector)) {\n        // array -> take max individual value\n        let ret = 0;\n        for (const filter of selector) {\n            const value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType);\n            if (value === 10) {\n                return value; // already at the highest\n            }\n            if (value > ret) {\n                ret = value;\n            }\n        }\n        return ret;\n    }\n    else if (typeof selector === 'string') {\n        if (!candidateIsSynchronized) {\n            return 0;\n        }\n        // short-hand notion, desugars to\n        // 'fooLang' -> { language: 'fooLang'}\n        // '*' -> { language: '*' }\n        if (selector === '*') {\n            return 5;\n        }\n        else if (selector === candidateLanguage) {\n            return 10;\n        }\n        else {\n            return 0;\n        }\n    }\n    else if (selector) {\n        // filter -> select accordingly, use defaults for scheme\n        const { language, pattern, scheme, hasAccessToAllModels, notebookType } = selector; // TODO: microsoft/TypeScript#42768\n        if (!candidateIsSynchronized && !hasAccessToAllModels) {\n            return 0;\n        }\n        // selector targets a notebook -> use the notebook uri instead\n        // of the \"normal\" document uri.\n        if (notebookType && candidateNotebookUri) {\n            candidateUri = candidateNotebookUri;\n        }\n        let ret = 0;\n        if (scheme) {\n            if (scheme === candidateUri.scheme) {\n                ret = 10;\n            }\n            else if (scheme === '*') {\n                ret = 5;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (language) {\n            if (language === candidateLanguage) {\n                ret = 10;\n            }\n            else if (language === '*') {\n                ret = Math.max(ret, 5);\n            }\n            else {\n                return 0;\n            }\n        }\n        if (notebookType) {\n            if (notebookType === candidateNotebookType) {\n                ret = 10;\n            }\n            else if (notebookType === '*' && candidateNotebookType !== undefined) {\n                ret = Math.max(ret, 5);\n            }\n            else {\n                return 0;\n            }\n        }\n        if (pattern) {\n            let normalizedPattern;\n            if (typeof pattern === 'string') {\n                normalizedPattern = pattern;\n            }\n            else {\n                // Since this pattern has a `base` property, we need\n                // to normalize this path first before passing it on\n                // because we will compare it against `Uri.fsPath`\n                // which uses platform specific separators.\n                // Refs: https://github.com/microsoft/vscode/issues/99938\n                normalizedPattern = Object.assign(Object.assign({}, pattern), { base: normalize(pattern.base) });\n            }\n            if (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n                ret = 10;\n            }\n            else {\n                return 0;\n            }\n        }\n        return ret;\n    }\n    else {\n        return 0;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../base/common/event.js';\nimport { toDisposable } from '../../base/common/lifecycle.js';\nimport { shouldSynchronizeModel } from './model.js';\nimport { score } from './languageSelector.js';\nfunction isExclusive(selector) {\n    if (typeof selector === 'string') {\n        return false;\n    }\n    else if (Array.isArray(selector)) {\n        return selector.every(isExclusive);\n    }\n    else {\n        return !!selector.exclusive; // TODO: microsoft/TypeScript#42768\n    }\n}\nclass MatchCandidate {\n    constructor(uri, languageId, notebookUri, notebookType) {\n        this.uri = uri;\n        this.languageId = languageId;\n        this.notebookUri = notebookUri;\n        this.notebookType = notebookType;\n    }\n    equals(other) {\n        var _a, _b;\n        return this.notebookType === other.notebookType\n            && this.languageId === other.languageId\n            && this.uri.toString() === other.uri.toString()\n            && ((_a = this.notebookUri) === null || _a === void 0 ? void 0 : _a.toString()) === ((_b = other.notebookUri) === null || _b === void 0 ? void 0 : _b.toString());\n    }\n}\nexport class LanguageFeatureRegistry {\n    constructor(_notebookInfoResolver) {\n        this._notebookInfoResolver = _notebookInfoResolver;\n        this._clock = 0;\n        this._entries = [];\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n    }\n    register(selector, provider) {\n        let entry = {\n            selector,\n            provider,\n            _score: -1,\n            _time: this._clock++\n        };\n        this._entries.push(entry);\n        this._lastCandidate = undefined;\n        this._onDidChange.fire(this._entries.length);\n        return toDisposable(() => {\n            if (entry) {\n                const idx = this._entries.indexOf(entry);\n                if (idx >= 0) {\n                    this._entries.splice(idx, 1);\n                    this._lastCandidate = undefined;\n                    this._onDidChange.fire(this._entries.length);\n                    entry = undefined;\n                }\n            }\n        });\n    }\n    has(model) {\n        return this.all(model).length > 0;\n    }\n    all(model) {\n        if (!model) {\n            return [];\n        }\n        this._updateScores(model);\n        const result = [];\n        // from registry\n        for (const entry of this._entries) {\n            if (entry._score > 0) {\n                result.push(entry.provider);\n            }\n        }\n        return result;\n    }\n    ordered(model) {\n        const result = [];\n        this._orderedForEach(model, entry => result.push(entry.provider));\n        return result;\n    }\n    orderedGroups(model) {\n        const result = [];\n        let lastBucket;\n        let lastBucketScore;\n        this._orderedForEach(model, entry => {\n            if (lastBucket && lastBucketScore === entry._score) {\n                lastBucket.push(entry.provider);\n            }\n            else {\n                lastBucketScore = entry._score;\n                lastBucket = [entry.provider];\n                result.push(lastBucket);\n            }\n        });\n        return result;\n    }\n    _orderedForEach(model, callback) {\n        this._updateScores(model);\n        for (const entry of this._entries) {\n            if (entry._score > 0) {\n                callback(entry);\n            }\n        }\n    }\n    _updateScores(model) {\n        var _a, _b;\n        const notebookInfo = (_a = this._notebookInfoResolver) === null || _a === void 0 ? void 0 : _a.call(this, model.uri);\n        // use the uri (scheme, pattern) of the notebook info iff we have one\n        // otherwise it's the model's/document's uri\n        const candidate = notebookInfo\n            ? new MatchCandidate(model.uri, model.getLanguageId(), notebookInfo.uri, notebookInfo.type)\n            : new MatchCandidate(model.uri, model.getLanguageId(), undefined, undefined);\n        if ((_b = this._lastCandidate) === null || _b === void 0 ? void 0 : _b.equals(candidate)) {\n            // nothing has changed\n            return;\n        }\n        this._lastCandidate = candidate;\n        for (const entry of this._entries) {\n            entry._score = score(entry.selector, candidate.uri, candidate.languageId, shouldSynchronizeModel(model), candidate.notebookUri, candidate.notebookType);\n            if (isExclusive(entry.selector) && entry._score > 0) {\n                // support for one exclusive selector that overwrites\n                // any other selector\n                for (const entry of this._entries) {\n                    entry._score = 0;\n                }\n                entry._score = 1000;\n                break;\n            }\n        }\n        // needs sorting\n        this._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n    }\n    static _compareByScoreAndTime(a, b) {\n        if (a._score < b._score) {\n            return 1;\n        }\n        else if (a._score > b._score) {\n            return -1;\n        }\n        // De-prioritize built-in providers\n        if (isBuiltinSelector(a.selector) && !isBuiltinSelector(b.selector)) {\n            return 1;\n        }\n        else if (!isBuiltinSelector(a.selector) && isBuiltinSelector(b.selector)) {\n            return -1;\n        }\n        if (a._time < b._time) {\n            return 1;\n        }\n        else if (a._time > b._time) {\n            return -1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\nfunction isBuiltinSelector(selector) {\n    if (typeof selector === 'string') {\n        return false;\n    }\n    if (Array.isArray(selector)) {\n        return selector.some(isBuiltinSelector);\n    }\n    return Boolean(selector.isBuiltin);\n}\n","import { Codicon } from '../../base/common/codicons.js';\nimport { URI } from '../../base/common/uri.js';\nimport { Range } from './core/range.js';\nimport { TokenizationRegistry as TokenizationRegistryImpl } from './tokenizationRegistry.js';\nimport { localize } from '../../nls.js';\nexport class Token {\n    constructor(offset, type, language) {\n        this.offset = offset;\n        this.type = type;\n        this.language = language;\n        this._tokenBrand = undefined;\n    }\n    toString() {\n        return '(' + this.offset + ', ' + this.type + ')';\n    }\n}\n/**\n * @internal\n */\nexport class TokenizationResult {\n    constructor(tokens, endState) {\n        this.tokens = tokens;\n        this.endState = endState;\n        this._tokenizationResultBrand = undefined;\n    }\n}\n/**\n * @internal\n */\nexport class EncodedTokenizationResult {\n    constructor(\n    /**\n     * The tokens in binary format. Each token occupies two array indices. For token i:\n     *  - at offset 2*i => startIndex\n     *  - at offset 2*i + 1 => metadata\n     *\n     */\n    tokens, endState) {\n        this.tokens = tokens;\n        this.endState = endState;\n        this._encodedTokenizationResultBrand = undefined;\n    }\n}\n/**\n * @internal\n */\nexport var CompletionItemKinds;\n(function (CompletionItemKinds) {\n    const byKind = new Map();\n    byKind.set(0 /* CompletionItemKind.Method */, Codicon.symbolMethod);\n    byKind.set(1 /* CompletionItemKind.Function */, Codicon.symbolFunction);\n    byKind.set(2 /* CompletionItemKind.Constructor */, Codicon.symbolConstructor);\n    byKind.set(3 /* CompletionItemKind.Field */, Codicon.symbolField);\n    byKind.set(4 /* CompletionItemKind.Variable */, Codicon.symbolVariable);\n    byKind.set(5 /* CompletionItemKind.Class */, Codicon.symbolClass);\n    byKind.set(6 /* CompletionItemKind.Struct */, Codicon.symbolStruct);\n    byKind.set(7 /* CompletionItemKind.Interface */, Codicon.symbolInterface);\n    byKind.set(8 /* CompletionItemKind.Module */, Codicon.symbolModule);\n    byKind.set(9 /* CompletionItemKind.Property */, Codicon.symbolProperty);\n    byKind.set(10 /* CompletionItemKind.Event */, Codicon.symbolEvent);\n    byKind.set(11 /* CompletionItemKind.Operator */, Codicon.symbolOperator);\n    byKind.set(12 /* CompletionItemKind.Unit */, Codicon.symbolUnit);\n    byKind.set(13 /* CompletionItemKind.Value */, Codicon.symbolValue);\n    byKind.set(15 /* CompletionItemKind.Enum */, Codicon.symbolEnum);\n    byKind.set(14 /* CompletionItemKind.Constant */, Codicon.symbolConstant);\n    byKind.set(15 /* CompletionItemKind.Enum */, Codicon.symbolEnum);\n    byKind.set(16 /* CompletionItemKind.EnumMember */, Codicon.symbolEnumMember);\n    byKind.set(17 /* CompletionItemKind.Keyword */, Codicon.symbolKeyword);\n    byKind.set(27 /* CompletionItemKind.Snippet */, Codicon.symbolSnippet);\n    byKind.set(18 /* CompletionItemKind.Text */, Codicon.symbolText);\n    byKind.set(19 /* CompletionItemKind.Color */, Codicon.symbolColor);\n    byKind.set(20 /* CompletionItemKind.File */, Codicon.symbolFile);\n    byKind.set(21 /* CompletionItemKind.Reference */, Codicon.symbolReference);\n    byKind.set(22 /* CompletionItemKind.Customcolor */, Codicon.symbolCustomColor);\n    byKind.set(23 /* CompletionItemKind.Folder */, Codicon.symbolFolder);\n    byKind.set(24 /* CompletionItemKind.TypeParameter */, Codicon.symbolTypeParameter);\n    byKind.set(25 /* CompletionItemKind.User */, Codicon.account);\n    byKind.set(26 /* CompletionItemKind.Issue */, Codicon.issues);\n    /**\n     * @internal\n     */\n    function toIcon(kind) {\n        let codicon = byKind.get(kind);\n        if (!codicon) {\n            console.info('No codicon found for CompletionItemKind ' + kind);\n            codicon = Codicon.symbolProperty;\n        }\n        return codicon;\n    }\n    CompletionItemKinds.toIcon = toIcon;\n    const data = new Map();\n    data.set('method', 0 /* CompletionItemKind.Method */);\n    data.set('function', 1 /* CompletionItemKind.Function */);\n    data.set('constructor', 2 /* CompletionItemKind.Constructor */);\n    data.set('field', 3 /* CompletionItemKind.Field */);\n    data.set('variable', 4 /* CompletionItemKind.Variable */);\n    data.set('class', 5 /* CompletionItemKind.Class */);\n    data.set('struct', 6 /* CompletionItemKind.Struct */);\n    data.set('interface', 7 /* CompletionItemKind.Interface */);\n    data.set('module', 8 /* CompletionItemKind.Module */);\n    data.set('property', 9 /* CompletionItemKind.Property */);\n    data.set('event', 10 /* CompletionItemKind.Event */);\n    data.set('operator', 11 /* CompletionItemKind.Operator */);\n    data.set('unit', 12 /* CompletionItemKind.Unit */);\n    data.set('value', 13 /* CompletionItemKind.Value */);\n    data.set('constant', 14 /* CompletionItemKind.Constant */);\n    data.set('enum', 15 /* CompletionItemKind.Enum */);\n    data.set('enum-member', 16 /* CompletionItemKind.EnumMember */);\n    data.set('enumMember', 16 /* CompletionItemKind.EnumMember */);\n    data.set('keyword', 17 /* CompletionItemKind.Keyword */);\n    data.set('snippet', 27 /* CompletionItemKind.Snippet */);\n    data.set('text', 18 /* CompletionItemKind.Text */);\n    data.set('color', 19 /* CompletionItemKind.Color */);\n    data.set('file', 20 /* CompletionItemKind.File */);\n    data.set('reference', 21 /* CompletionItemKind.Reference */);\n    data.set('customcolor', 22 /* CompletionItemKind.Customcolor */);\n    data.set('folder', 23 /* CompletionItemKind.Folder */);\n    data.set('type-parameter', 24 /* CompletionItemKind.TypeParameter */);\n    data.set('typeParameter', 24 /* CompletionItemKind.TypeParameter */);\n    data.set('account', 25 /* CompletionItemKind.User */);\n    data.set('issue', 26 /* CompletionItemKind.Issue */);\n    /**\n     * @internal\n     */\n    function fromString(value, strict) {\n        let res = data.get(value);\n        if (typeof res === 'undefined' && !strict) {\n            res = 9 /* CompletionItemKind.Property */;\n        }\n        return res;\n    }\n    CompletionItemKinds.fromString = fromString;\n})(CompletionItemKinds || (CompletionItemKinds = {}));\n/**\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered automatically while editing.\n     * It is sufficient to return a single completion item in this case.\n     */\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Automatic\"] = 0] = \"Automatic\";\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     * Return multiple completion items to enable cycling through them.\n     */\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Explicit\"] = 1] = \"Explicit\";\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport class SelectedSuggestionInfo {\n    constructor(range, text, completionKind, isSnippetText) {\n        this.range = range;\n        this.text = text;\n        this.completionKind = completionKind;\n        this.isSnippetText = isSnippetText;\n    }\n    equals(other) {\n        return Range.lift(this.range).equalsRange(other.range)\n            && this.text === other.text\n            && this.completionKind === other.completionKind\n            && this.isSnippetText === other.isSnippetText;\n    }\n}\nexport var SignatureHelpTriggerKind;\n(function (SignatureHelpTriggerKind) {\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"Invoke\"] = 1] = \"Invoke\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"TriggerCharacter\"] = 2] = \"TriggerCharacter\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"ContentChange\"] = 3] = \"ContentChange\";\n})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Text\"] = 0] = \"Text\";\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Read\"] = 1] = \"Read\";\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Write\"] = 2] = \"Write\";\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * @internal\n */\nexport function isLocationLink(thing) {\n    return thing\n        && URI.isUri(thing.uri)\n        && Range.isIRange(thing.range)\n        && (Range.isIRange(thing.originSelectionRange) || Range.isIRange(thing.targetSelectionRange));\n}\n/**\n * @internal\n */\nexport const symbolKindNames = {\n    [17 /* SymbolKind.Array */]: localize('Array', \"array\"),\n    [16 /* SymbolKind.Boolean */]: localize('Boolean', \"boolean\"),\n    [4 /* SymbolKind.Class */]: localize('Class', \"class\"),\n    [13 /* SymbolKind.Constant */]: localize('Constant', \"constant\"),\n    [8 /* SymbolKind.Constructor */]: localize('Constructor', \"constructor\"),\n    [9 /* SymbolKind.Enum */]: localize('Enum', \"enumeration\"),\n    [21 /* SymbolKind.EnumMember */]: localize('EnumMember', \"enumeration member\"),\n    [23 /* SymbolKind.Event */]: localize('Event', \"event\"),\n    [7 /* SymbolKind.Field */]: localize('Field', \"field\"),\n    [0 /* SymbolKind.File */]: localize('File', \"file\"),\n    [11 /* SymbolKind.Function */]: localize('Function', \"function\"),\n    [10 /* SymbolKind.Interface */]: localize('Interface', \"interface\"),\n    [19 /* SymbolKind.Key */]: localize('Key', \"key\"),\n    [5 /* SymbolKind.Method */]: localize('Method', \"method\"),\n    [1 /* SymbolKind.Module */]: localize('Module', \"module\"),\n    [2 /* SymbolKind.Namespace */]: localize('Namespace', \"namespace\"),\n    [20 /* SymbolKind.Null */]: localize('Null', \"null\"),\n    [15 /* SymbolKind.Number */]: localize('Number', \"number\"),\n    [18 /* SymbolKind.Object */]: localize('Object', \"object\"),\n    [24 /* SymbolKind.Operator */]: localize('Operator', \"operator\"),\n    [3 /* SymbolKind.Package */]: localize('Package', \"package\"),\n    [6 /* SymbolKind.Property */]: localize('Property', \"property\"),\n    [14 /* SymbolKind.String */]: localize('String', \"string\"),\n    [22 /* SymbolKind.Struct */]: localize('Struct', \"struct\"),\n    [25 /* SymbolKind.TypeParameter */]: localize('TypeParameter', \"type parameter\"),\n    [12 /* SymbolKind.Variable */]: localize('Variable', \"variable\"),\n};\n/**\n * @internal\n */\nexport function getAriaLabelForSymbol(symbolName, kind) {\n    return localize('symbolAriaLabel', '{0} ({1})', symbolName, symbolKindNames[kind]);\n}\n/**\n * @internal\n */\nexport var SymbolKinds;\n(function (SymbolKinds) {\n    const byKind = new Map();\n    byKind.set(0 /* SymbolKind.File */, Codicon.symbolFile);\n    byKind.set(1 /* SymbolKind.Module */, Codicon.symbolModule);\n    byKind.set(2 /* SymbolKind.Namespace */, Codicon.symbolNamespace);\n    byKind.set(3 /* SymbolKind.Package */, Codicon.symbolPackage);\n    byKind.set(4 /* SymbolKind.Class */, Codicon.symbolClass);\n    byKind.set(5 /* SymbolKind.Method */, Codicon.symbolMethod);\n    byKind.set(6 /* SymbolKind.Property */, Codicon.symbolProperty);\n    byKind.set(7 /* SymbolKind.Field */, Codicon.symbolField);\n    byKind.set(8 /* SymbolKind.Constructor */, Codicon.symbolConstructor);\n    byKind.set(9 /* SymbolKind.Enum */, Codicon.symbolEnum);\n    byKind.set(10 /* SymbolKind.Interface */, Codicon.symbolInterface);\n    byKind.set(11 /* SymbolKind.Function */, Codicon.symbolFunction);\n    byKind.set(12 /* SymbolKind.Variable */, Codicon.symbolVariable);\n    byKind.set(13 /* SymbolKind.Constant */, Codicon.symbolConstant);\n    byKind.set(14 /* SymbolKind.String */, Codicon.symbolString);\n    byKind.set(15 /* SymbolKind.Number */, Codicon.symbolNumber);\n    byKind.set(16 /* SymbolKind.Boolean */, Codicon.symbolBoolean);\n    byKind.set(17 /* SymbolKind.Array */, Codicon.symbolArray);\n    byKind.set(18 /* SymbolKind.Object */, Codicon.symbolObject);\n    byKind.set(19 /* SymbolKind.Key */, Codicon.symbolKey);\n    byKind.set(20 /* SymbolKind.Null */, Codicon.symbolNull);\n    byKind.set(21 /* SymbolKind.EnumMember */, Codicon.symbolEnumMember);\n    byKind.set(22 /* SymbolKind.Struct */, Codicon.symbolStruct);\n    byKind.set(23 /* SymbolKind.Event */, Codicon.symbolEvent);\n    byKind.set(24 /* SymbolKind.Operator */, Codicon.symbolOperator);\n    byKind.set(25 /* SymbolKind.TypeParameter */, Codicon.symbolTypeParameter);\n    /**\n     * @internal\n     */\n    function toIcon(kind) {\n        let icon = byKind.get(kind);\n        if (!icon) {\n            console.info('No codicon found for SymbolKind ' + kind);\n            icon = Codicon.symbolProperty;\n        }\n        return icon;\n    }\n    SymbolKinds.toIcon = toIcon;\n})(SymbolKinds || (SymbolKinds = {}));\n/** @internal */\nexport class TextEdit {\n}\nexport class FoldingRangeKind {\n    /**\n     * Returns a {@link FoldingRangeKind} for the given value.\n     *\n     * @param value of the kind.\n     */\n    static fromValue(value) {\n        switch (value) {\n            case 'comment': return FoldingRangeKind.Comment;\n            case 'imports': return FoldingRangeKind.Imports;\n            case 'region': return FoldingRangeKind.Region;\n        }\n        return new FoldingRangeKind(value);\n    }\n    /**\n     * Creates a new {@link FoldingRangeKind}.\n     *\n     * @param value of the kind.\n     */\n    constructor(value) {\n        this.value = value;\n    }\n}\n/**\n * Kind for folding range representing a comment. The value of the kind is 'comment'.\n */\nFoldingRangeKind.Comment = new FoldingRangeKind('comment');\n/**\n * Kind for folding range representing a import. The value of the kind is 'imports'.\n */\nFoldingRangeKind.Imports = new FoldingRangeKind('imports');\n/**\n * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).\n * The value of the kind is 'region'.\n */\nFoldingRangeKind.Region = new FoldingRangeKind('region');\n/**\n * @internal\n */\nexport var Command;\n(function (Command) {\n    /**\n     * @internal\n     */\n    function is(obj) {\n        if (!obj || typeof obj !== 'object') {\n            return false;\n        }\n        return typeof obj.id === 'string' &&\n            typeof obj.title === 'string';\n    }\n    Command.is = is;\n})(Command || (Command = {}));\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    InlayHintKind[InlayHintKind[\"Type\"] = 1] = \"Type\";\n    InlayHintKind[InlayHintKind[\"Parameter\"] = 2] = \"Parameter\";\n})(InlayHintKind || (InlayHintKind = {}));\n/**\n * @internal\n */\nexport class LazyTokenizationSupport {\n    constructor(createSupport) {\n        this.createSupport = createSupport;\n        this._tokenizationSupport = null;\n    }\n    dispose() {\n        if (this._tokenizationSupport) {\n            this._tokenizationSupport.then((support) => {\n                if (support) {\n                    support.dispose();\n                }\n            });\n        }\n    }\n    get tokenizationSupport() {\n        if (!this._tokenizationSupport) {\n            this._tokenizationSupport = this.createSupport();\n        }\n        return this._tokenizationSupport;\n    }\n}\n/**\n * @internal\n */\nexport const TokenizationRegistry = new TokenizationRegistryImpl();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { IndentAction } from './languageConfiguration.js';\nimport { createScopedLineTokens } from './supports.js';\nimport { getScopedLineTokens } from './languageConfigurationRegistry.js';\n/**\n * Get nearest preceding line which doesn't match unIndentPattern or contains all whitespace.\n * Result:\n * -1: run into the boundary of embedded languages\n * 0: every line above are invalid\n * else: nearest preceding line of the same language\n */\nfunction getPrecedingValidLine(model, lineNumber, indentRulesSupport) {\n    const languageId = model.tokenization.getLanguageIdAtPosition(lineNumber, 0);\n    if (lineNumber > 1) {\n        let lastLineNumber;\n        let resultLineNumber = -1;\n        for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n            if (model.tokenization.getLanguageIdAtPosition(lastLineNumber, 0) !== languageId) {\n                return resultLineNumber;\n            }\n            const text = model.getLineContent(lastLineNumber);\n            if (indentRulesSupport.shouldIgnore(text) || /^\\s+$/.test(text) || text === '') {\n                resultLineNumber = lastLineNumber;\n                continue;\n            }\n            return lastLineNumber;\n        }\n    }\n    return -1;\n}\n/**\n * Get inherited indentation from above lines.\n * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.\n * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.\n * 3. If this line doesn't match any indent rules\n *   a. check whether the line above it matches indentNextLinePattern\n *   b. If not, the indent level of this line is the result\n *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).\n * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`\n *\n * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.\n */\nexport function getInheritIndentForLine(autoIndent, model, lineNumber, honorIntentialIndent = true, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.tokenization.getLanguageId()).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    if (lineNumber <= 1) {\n        return {\n            indentation: '',\n            action: null\n        };\n    }\n    // Use no indent if this is the first non-blank line\n    for (let priorLineNumber = lineNumber - 1; priorLineNumber > 0; priorLineNumber--) {\n        if (model.getLineContent(priorLineNumber) !== '') {\n            break;\n        }\n        if (priorLineNumber === 1) {\n            return {\n                indentation: '',\n                action: null\n            };\n        }\n    }\n    const precedingUnIgnoredLine = getPrecedingValidLine(model, lineNumber, indentRulesSupport);\n    if (precedingUnIgnoredLine < 0) {\n        return null;\n    }\n    else if (precedingUnIgnoredLine < 1) {\n        return {\n            indentation: '',\n            action: null\n        };\n    }\n    const precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\n    if (indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent) || indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent)) {\n        return {\n            indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n            action: IndentAction.Indent,\n            line: precedingUnIgnoredLine\n        };\n    }\n    else if (indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent)) {\n        return {\n            indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n            action: null,\n            line: precedingUnIgnoredLine\n        };\n    }\n    else {\n        // precedingUnIgnoredLine can not be ignored.\n        // it doesn't increase indent of following lines\n        // it doesn't increase just next line\n        // so current line is not affect by precedingUnIgnoredLine\n        // and then we should get a correct inheritted indentation from above lines\n        if (precedingUnIgnoredLine === 1) {\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n                action: null,\n                line: precedingUnIgnoredLine\n            };\n        }\n        const previousLine = precedingUnIgnoredLine - 1;\n        const previousLineIndentMetadata = indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));\n        if (!(previousLineIndentMetadata & (1 /* IndentConsts.INCREASE_MASK */ | 2 /* IndentConsts.DECREASE_MASK */)) &&\n            (previousLineIndentMetadata & 4 /* IndentConsts.INDENT_NEXTLINE_MASK */)) {\n            let stopLine = 0;\n            for (let i = previousLine - 1; i > 0; i--) {\n                if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n                    continue;\n                }\n                stopLine = i;\n                break;\n            }\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n                action: null,\n                line: stopLine + 1\n            };\n        }\n        if (honorIntentialIndent) {\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n                action: null,\n                line: precedingUnIgnoredLine\n            };\n        }\n        else {\n            // search from precedingUnIgnoredLine until we find one whose indent is not temporary\n            for (let i = precedingUnIgnoredLine; i > 0; i--) {\n                const lineContent = model.getLineContent(i);\n                if (indentRulesSupport.shouldIncrease(lineContent)) {\n                    return {\n                        indentation: strings.getLeadingWhitespace(lineContent),\n                        action: IndentAction.Indent,\n                        line: i\n                    };\n                }\n                else if (indentRulesSupport.shouldIndentNextLine(lineContent)) {\n                    let stopLine = 0;\n                    for (let j = i - 1; j > 0; j--) {\n                        if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n                            continue;\n                        }\n                        stopLine = j;\n                        break;\n                    }\n                    return {\n                        indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n                        action: null,\n                        line: stopLine + 1\n                    };\n                }\n                else if (indentRulesSupport.shouldDecrease(lineContent)) {\n                    return {\n                        indentation: strings.getLeadingWhitespace(lineContent),\n                        action: null,\n                        line: i\n                    };\n                }\n            }\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(1)),\n                action: null,\n                line: 1\n            };\n        }\n    }\n}\nexport function getGoodIndentForLine(autoIndent, virtualModel, languageId, lineNumber, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const richEditSupport = languageConfigurationService.getLanguageConfiguration(languageId);\n    if (!richEditSupport) {\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const indent = getInheritIndentForLine(autoIndent, virtualModel, lineNumber, undefined, languageConfigurationService);\n    const lineContent = virtualModel.getLineContent(lineNumber);\n    if (indent) {\n        const inheritLine = indent.line;\n        if (inheritLine !== undefined) {\n            // Apply enter action as long as there are only whitespace lines between inherited line and this line.\n            let shouldApplyEnterRules = true;\n            for (let inBetweenLine = inheritLine; inBetweenLine < lineNumber - 1; inBetweenLine++) {\n                if (!/^\\s*$/.test(virtualModel.getLineContent(inBetweenLine))) {\n                    shouldApplyEnterRules = false;\n                    break;\n                }\n            }\n            if (shouldApplyEnterRules) {\n                const enterResult = richEditSupport.onEnter(autoIndent, '', virtualModel.getLineContent(inheritLine), '');\n                if (enterResult) {\n                    let indentation = strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));\n                    if (enterResult.removeText) {\n                        indentation = indentation.substring(0, indentation.length - enterResult.removeText);\n                    }\n                    if ((enterResult.indentAction === IndentAction.Indent) ||\n                        (enterResult.indentAction === IndentAction.IndentOutdent)) {\n                        indentation = indentConverter.shiftIndent(indentation);\n                    }\n                    else if (enterResult.indentAction === IndentAction.Outdent) {\n                        indentation = indentConverter.unshiftIndent(indentation);\n                    }\n                    if (indentRulesSupport.shouldDecrease(lineContent)) {\n                        indentation = indentConverter.unshiftIndent(indentation);\n                    }\n                    if (enterResult.appendText) {\n                        indentation += enterResult.appendText;\n                    }\n                    return strings.getLeadingWhitespace(indentation);\n                }\n            }\n        }\n        if (indentRulesSupport.shouldDecrease(lineContent)) {\n            if (indent.action === IndentAction.Indent) {\n                return indent.indentation;\n            }\n            else {\n                return indentConverter.unshiftIndent(indent.indentation);\n            }\n        }\n        else {\n            if (indent.action === IndentAction.Indent) {\n                return indentConverter.shiftIndent(indent.indentation);\n            }\n            else {\n                return indent.indentation;\n            }\n        }\n    }\n    return null;\n}\nexport function getIndentForEnter(autoIndent, model, range, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    model.tokenization.forceTokenization(range.startLineNumber);\n    const lineTokens = model.tokenization.getLineTokens(range.startLineNumber);\n    const scopedLineTokens = createScopedLineTokens(lineTokens, range.startColumn - 1);\n    const scopedLineText = scopedLineTokens.getLineContent();\n    let embeddedLanguage = false;\n    let beforeEnterText;\n    if (scopedLineTokens.firstCharOffset > 0 && lineTokens.getLanguageId(0) !== scopedLineTokens.languageId) {\n        // we are in the embeded language content\n        embeddedLanguage = true; // if embeddedLanguage is true, then we don't touch the indentation of current line\n        beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        beforeEnterText = lineTokens.getLineContent().substring(0, range.startColumn - 1);\n    }\n    let afterEnterText;\n    if (range.isEmpty()) {\n        afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n        afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const beforeEnterResult = beforeEnterText;\n    const beforeEnterIndent = strings.getLeadingWhitespace(beforeEnterText);\n    const virtualModel = {\n        tokenization: {\n            getLineTokens: (lineNumber) => {\n                return model.tokenization.getLineTokens(lineNumber);\n            },\n            getLanguageId: () => {\n                return model.getLanguageId();\n            },\n            getLanguageIdAtPosition: (lineNumber, column) => {\n                return model.getLanguageIdAtPosition(lineNumber, column);\n            },\n        },\n        getLineContent: (lineNumber) => {\n            if (lineNumber === range.startLineNumber) {\n                return beforeEnterResult;\n            }\n            else {\n                return model.getLineContent(lineNumber);\n            }\n        }\n    };\n    const currentLineIndent = strings.getLeadingWhitespace(lineTokens.getLineContent());\n    const afterEnterAction = getInheritIndentForLine(autoIndent, virtualModel, range.startLineNumber + 1, undefined, languageConfigurationService);\n    if (!afterEnterAction) {\n        const beforeEnter = embeddedLanguage ? currentLineIndent : beforeEnterIndent;\n        return {\n            beforeEnter: beforeEnter,\n            afterEnter: beforeEnter\n        };\n    }\n    let afterEnterIndent = embeddedLanguage ? currentLineIndent : afterEnterAction.indentation;\n    if (afterEnterAction.action === IndentAction.Indent) {\n        afterEnterIndent = indentConverter.shiftIndent(afterEnterIndent);\n    }\n    if (indentRulesSupport.shouldDecrease(afterEnterText)) {\n        afterEnterIndent = indentConverter.unshiftIndent(afterEnterIndent);\n    }\n    return {\n        beforeEnter: embeddedLanguage ? currentLineIndent : beforeEnterIndent,\n        afterEnter: afterEnterIndent\n    };\n}\n/**\n * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of\n * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.\n */\nexport function getIndentActionForType(autoIndent, model, range, ch, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const scopedLineTokens = getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n    if (scopedLineTokens.firstCharOffset) {\n        // this line has mixed languages and indentation rules will not work\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const scopedLineText = scopedLineTokens.getLineContent();\n    const beforeTypeText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    // selection support\n    let afterTypeText;\n    if (range.isEmpty()) {\n        afterTypeText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n        afterTypeText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    // If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted\n    // Users might change the indentation by purpose and we should honor that instead of readjusting.\n    if (!indentRulesSupport.shouldDecrease(beforeTypeText + afterTypeText) && indentRulesSupport.shouldDecrease(beforeTypeText + ch + afterTypeText)) {\n        // after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.\n        // 1. Get inherited indent action\n        const r = getInheritIndentForLine(autoIndent, model, range.startLineNumber, false, languageConfigurationService);\n        if (!r) {\n            return null;\n        }\n        let indentation = r.indentation;\n        if (r.action !== IndentAction.Indent) {\n            indentation = indentConverter.unshiftIndent(indentation);\n        }\n        return indentation;\n    }\n    return null;\n}\nexport function getIndentMetadata(model, lineNumber, languageConfigurationService) {\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    if (lineNumber < 1 || lineNumber > model.getLineCount()) {\n        return null;\n    }\n    return indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber));\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color, HSLA } from '../../../base/common/color.js';\nfunction _parseCaptureGroups(captureGroups) {\n    const values = [];\n    for (const captureGroup of captureGroups) {\n        const parsedNumber = Number(captureGroup);\n        if (parsedNumber || parsedNumber === 0 && captureGroup.replace(/\\s/g, '') !== '') {\n            values.push(parsedNumber);\n        }\n    }\n    return values;\n}\nfunction _toIColor(r, g, b, a) {\n    return {\n        red: r / 255,\n        blue: b / 255,\n        green: g / 255,\n        alpha: a\n    };\n}\nfunction _findRange(model, match) {\n    const index = match.index;\n    const length = match[0].length;\n    if (!index) {\n        return;\n    }\n    const startPosition = model.positionAt(index);\n    const range = {\n        startLineNumber: startPosition.lineNumber,\n        startColumn: startPosition.column,\n        endLineNumber: startPosition.lineNumber,\n        endColumn: startPosition.column + length\n    };\n    return range;\n}\nfunction _findHexColorInformation(range, hexValue) {\n    if (!range) {\n        return;\n    }\n    const parsedHexColor = Color.Format.CSS.parseHex(hexValue);\n    if (!parsedHexColor) {\n        return;\n    }\n    return {\n        range: range,\n        color: _toIColor(parsedHexColor.rgba.r, parsedHexColor.rgba.g, parsedHexColor.rgba.b, parsedHexColor.rgba.a)\n    };\n}\nfunction _findRGBColorInformation(range, matches, isAlpha) {\n    if (!range || matches.length !== 1) {\n        return;\n    }\n    const match = matches[0];\n    const captureGroups = match.values();\n    const parsedRegex = _parseCaptureGroups(captureGroups);\n    return {\n        range: range,\n        color: _toIColor(parsedRegex[0], parsedRegex[1], parsedRegex[2], isAlpha ? parsedRegex[3] : 1)\n    };\n}\nfunction _findHSLColorInformation(range, matches, isAlpha) {\n    if (!range || matches.length !== 1) {\n        return;\n    }\n    const match = matches[0];\n    const captureGroups = match.values();\n    const parsedRegex = _parseCaptureGroups(captureGroups);\n    const colorEquivalent = new Color(new HSLA(parsedRegex[0], parsedRegex[1] / 100, parsedRegex[2] / 100, isAlpha ? parsedRegex[3] : 1));\n    return {\n        range: range,\n        color: _toIColor(colorEquivalent.rgba.r, colorEquivalent.rgba.g, colorEquivalent.rgba.b, colorEquivalent.rgba.a)\n    };\n}\nfunction _findMatches(model, regex) {\n    if (typeof model === 'string') {\n        return [...model.matchAll(regex)];\n    }\n    else {\n        return model.findMatches(regex);\n    }\n}\nfunction computeColors(model) {\n    const result = [];\n    // Early validation for RGB and HSL\n    const initialValidationRegex = /\\b(rgb|rgba|hsl|hsla)(\\([0-9\\s,.\\%]*\\))|(#)([A-Fa-f0-9]{3})\\b|(#)([A-Fa-f0-9]{4})\\b|(#)([A-Fa-f0-9]{6})\\b|(#)([A-Fa-f0-9]{8})\\b/gm;\n    const initialValidationMatches = _findMatches(model, initialValidationRegex);\n    // Potential colors have been found, validate the parameters\n    if (initialValidationMatches.length > 0) {\n        for (const initialMatch of initialValidationMatches) {\n            const initialCaptureGroups = initialMatch.filter(captureGroup => captureGroup !== undefined);\n            const colorScheme = initialCaptureGroups[1];\n            const colorParameters = initialCaptureGroups[2];\n            if (!colorParameters) {\n                continue;\n            }\n            let colorInformation;\n            if (colorScheme === 'rgb') {\n                const regexParameters = /^\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*\\)$/gm;\n                colorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);\n            }\n            else if (colorScheme === 'rgba') {\n                const regexParameters = /^\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\s*,\\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\\s*\\)$/gm;\n                colorInformation = _findRGBColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);\n            }\n            else if (colorScheme === 'hsl') {\n                const regexParameters = /^\\(\\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*\\)$/gm;\n                colorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), false);\n            }\n            else if (colorScheme === 'hsla') {\n                const regexParameters = /^\\(\\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(100|\\d{1,2}[.]\\d*|\\d{1,2})%\\s*,\\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\\s*\\)$/gm;\n                colorInformation = _findHSLColorInformation(_findRange(model, initialMatch), _findMatches(colorParameters, regexParameters), true);\n            }\n            else if (colorScheme === '#') {\n                colorInformation = _findHexColorInformation(_findRange(model, initialMatch), colorScheme + colorParameters);\n            }\n            if (colorInformation) {\n                result.push(colorInformation);\n            }\n        }\n    }\n    return result;\n}\n/**\n * Returns an array of all default document colors in the provided document\n */\nexport function computeDefaultDocumentColors(model) {\n    if (!model || typeof model.getValue !== 'function' || typeof model.positionAt !== 'function') {\n        // Unknown caller!\n        return [];\n    }\n    return computeColors(model);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IndentAction } from './languageConfiguration.js';\nimport { getIndentationAtPosition, getScopedLineTokens } from './languageConfigurationRegistry.js';\nexport function getEnterAction(autoIndent, model, range, languageConfigurationService) {\n    const scopedLineTokens = getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n    const richEditSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId);\n    if (!richEditSupport) {\n        return null;\n    }\n    const scopedLineText = scopedLineTokens.getLineContent();\n    const beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    // selection support\n    let afterEnterText;\n    if (range.isEmpty()) {\n        afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n        afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    let previousLineText = '';\n    if (range.startLineNumber > 1 && scopedLineTokens.firstCharOffset === 0) {\n        // This is not the first line and the entire line belongs to this mode\n        const oneLineAboveScopedLineTokens = getScopedLineTokens(model, range.startLineNumber - 1);\n        if (oneLineAboveScopedLineTokens.languageId === scopedLineTokens.languageId) {\n            // The line above ends with text belonging to the same mode\n            previousLineText = oneLineAboveScopedLineTokens.getLineContent();\n        }\n    }\n    const enterResult = richEditSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n    if (!enterResult) {\n        return null;\n    }\n    const indentAction = enterResult.indentAction;\n    let appendText = enterResult.appendText;\n    const removeText = enterResult.removeText || 0;\n    // Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n    if (!appendText) {\n        if ((indentAction === IndentAction.Indent) ||\n            (indentAction === IndentAction.IndentOutdent)) {\n            appendText = '\\t';\n        }\n        else {\n            appendText = '';\n        }\n    }\n    else if (indentAction === IndentAction.Indent) {\n        appendText = '\\t' + appendText;\n    }\n    let indentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n    if (removeText) {\n        indentation = indentation.substring(0, indentation.length - removeText);\n    }\n    return {\n        indentAction: indentAction,\n        appendText: appendText,\n        removeText: removeText,\n        indentation: indentation\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const ILanguageService = createDecorator('languageService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nexport var IndentAction;\n(function (IndentAction) {\n    /**\n     * Insert new line and copy the previous line's indentation.\n     */\n    IndentAction[IndentAction[\"None\"] = 0] = \"None\";\n    /**\n     * Insert new line and indent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\n    /**\n     * Insert two new lines:\n     *  - the first one indented which will hold the cursor\n     *  - the second one at the same indentation level\n     */\n    IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\n    /**\n     * Insert new line and outdent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\n})(IndentAction || (IndentAction = {}));\n/**\n * @internal\n */\nexport class StandardAutoClosingPairConditional {\n    constructor(source) {\n        this._neutralCharacter = null;\n        this._neutralCharacterSearched = false;\n        this.open = source.open;\n        this.close = source.close;\n        // initially allowed in all tokens\n        this._inString = true;\n        this._inComment = true;\n        this._inRegEx = true;\n        if (Array.isArray(source.notIn)) {\n            for (let i = 0, len = source.notIn.length; i < len; i++) {\n                const notIn = source.notIn[i];\n                switch (notIn) {\n                    case 'string':\n                        this._inString = false;\n                        break;\n                    case 'comment':\n                        this._inComment = false;\n                        break;\n                    case 'regex':\n                        this._inRegEx = false;\n                        break;\n                }\n            }\n        }\n    }\n    isOK(standardToken) {\n        switch (standardToken) {\n            case 0 /* StandardTokenType.Other */:\n                return true;\n            case 1 /* StandardTokenType.Comment */:\n                return this._inComment;\n            case 2 /* StandardTokenType.String */:\n                return this._inString;\n            case 3 /* StandardTokenType.RegEx */:\n                return this._inRegEx;\n        }\n    }\n    shouldAutoClose(context, column) {\n        // Always complete on empty line\n        if (context.getTokenCount() === 0) {\n            return true;\n        }\n        const tokenIndex = context.findTokenIndexAtOffset(column - 2);\n        const standardTokenType = context.getStandardTokenType(tokenIndex);\n        return this.isOK(standardTokenType);\n    }\n    _findNeutralCharacterInRange(fromCharCode, toCharCode) {\n        for (let charCode = fromCharCode; charCode <= toCharCode; charCode++) {\n            const character = String.fromCharCode(charCode);\n            if (!this.open.includes(character) && !this.close.includes(character)) {\n                return character;\n            }\n        }\n        return null;\n    }\n    /**\n     * Find a character in the range [0-9a-zA-Z] that does not appear in the open or close\n     */\n    findNeutralCharacter() {\n        if (!this._neutralCharacterSearched) {\n            this._neutralCharacterSearched = true;\n            if (!this._neutralCharacter) {\n                this._neutralCharacter = this._findNeutralCharacterInRange(48 /* CharCode.Digit0 */, 57 /* CharCode.Digit9 */);\n            }\n            if (!this._neutralCharacter) {\n                this._neutralCharacter = this._findNeutralCharacterInRange(97 /* CharCode.a */, 122 /* CharCode.z */);\n            }\n            if (!this._neutralCharacter) {\n                this._neutralCharacter = this._findNeutralCharacterInRange(65 /* CharCode.A */, 90 /* CharCode.Z */);\n            }\n        }\n        return this._neutralCharacter;\n    }\n}\n/**\n * @internal\n */\nexport class AutoClosingPairs {\n    constructor(autoClosingPairs) {\n        this.autoClosingPairsOpenByStart = new Map();\n        this.autoClosingPairsOpenByEnd = new Map();\n        this.autoClosingPairsCloseByStart = new Map();\n        this.autoClosingPairsCloseByEnd = new Map();\n        this.autoClosingPairsCloseSingleChar = new Map();\n        for (const pair of autoClosingPairs) {\n            appendEntry(this.autoClosingPairsOpenByStart, pair.open.charAt(0), pair);\n            appendEntry(this.autoClosingPairsOpenByEnd, pair.open.charAt(pair.open.length - 1), pair);\n            appendEntry(this.autoClosingPairsCloseByStart, pair.close.charAt(0), pair);\n            appendEntry(this.autoClosingPairsCloseByEnd, pair.close.charAt(pair.close.length - 1), pair);\n            if (pair.close.length === 1 && pair.open.length === 1) {\n                appendEntry(this.autoClosingPairsCloseSingleChar, pair.close, pair);\n            }\n        }\n    }\n}\nfunction appendEntry(target, key, value) {\n    if (target.has(key)) {\n        target.get(key).push(value);\n    }\n    else {\n        target.set(key, [value]);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\nexport class CharacterPairSupport {\n    constructor(config) {\n        if (config.autoClosingPairs) {\n            this._autoClosingPairs = config.autoClosingPairs.map(el => new StandardAutoClosingPairConditional(el));\n        }\n        else if (config.brackets) {\n            this._autoClosingPairs = config.brackets.map(b => new StandardAutoClosingPairConditional({ open: b[0], close: b[1] }));\n        }\n        else {\n            this._autoClosingPairs = [];\n        }\n        if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\n            const docComment = config.__electricCharacterSupport.docComment;\n            // IDocComment is legacy, only partially supported\n            this._autoClosingPairs.push(new StandardAutoClosingPairConditional({ open: docComment.open, close: docComment.close || '' }));\n        }\n        this._autoCloseBeforeForQuotes = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES;\n        this._autoCloseBeforeForBrackets = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS;\n        this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n    }\n    getAutoClosingPairs() {\n        return this._autoClosingPairs;\n    }\n    getAutoCloseBeforeSet(forQuotes) {\n        return (forQuotes ? this._autoCloseBeforeForQuotes : this._autoCloseBeforeForBrackets);\n    }\n    getSurroundingPairs() {\n        return this._surroundingPairs;\n    }\n}\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES = ';:.,=}])> \\n\\t';\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS = '\\'\"`;:.,=}])> \\n\\t';\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { ignoreBracketsInToken } from '../supports.js';\nimport { BracketsUtils } from './richEditBrackets.js';\nexport class BracketElectricCharacterSupport {\n    constructor(richEditBrackets) {\n        this._richEditBrackets = richEditBrackets;\n    }\n    getElectricCharacters() {\n        const result = [];\n        if (this._richEditBrackets) {\n            for (const bracket of this._richEditBrackets.brackets) {\n                for (const close of bracket.close) {\n                    const lastChar = close.charAt(close.length - 1);\n                    result.push(lastChar);\n                }\n            }\n        }\n        return distinct(result);\n    }\n    onElectricCharacter(character, context, column) {\n        if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n            return null;\n        }\n        const tokenIndex = context.findTokenIndexAtOffset(column - 1);\n        if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n            return null;\n        }\n        const reversedBracketRegex = this._richEditBrackets.reversedRegex;\n        const text = context.getLineContent().substring(0, column - 1) + character;\n        const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\n        if (!r) {\n            return null;\n        }\n        const bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n        const isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n        if (isOpen) {\n            return null;\n        }\n        const textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\n        if (!/^\\s*$/.test(textBeforeBracket)) {\n            // There is other text on the line before the bracket\n            return null;\n        }\n        return {\n            matchOpenBracket: bracketText\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction resetGlobalRegex(reg) {\n    if (reg.global) {\n        reg.lastIndex = 0;\n    }\n    return true;\n}\nexport class IndentRulesSupport {\n    constructor(indentationRules) {\n        this._indentationRules = indentationRules;\n    }\n    shouldIncrease(text) {\n        if (this._indentationRules) {\n            if (this._indentationRules.increaseIndentPattern && resetGlobalRegex(this._indentationRules.increaseIndentPattern) && this._indentationRules.increaseIndentPattern.test(text)) {\n                return true;\n            }\n            // if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n            // \treturn true;\n            // }\n        }\n        return false;\n    }\n    shouldDecrease(text) {\n        if (this._indentationRules && this._indentationRules.decreaseIndentPattern && resetGlobalRegex(this._indentationRules.decreaseIndentPattern) && this._indentationRules.decreaseIndentPattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    shouldIndentNextLine(text) {\n        if (this._indentationRules && this._indentationRules.indentNextLinePattern && resetGlobalRegex(this._indentationRules.indentNextLinePattern) && this._indentationRules.indentNextLinePattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    shouldIgnore(text) {\n        // the text matches `unIndentedLinePattern`\n        if (this._indentationRules && this._indentationRules.unIndentedLinePattern && resetGlobalRegex(this._indentationRules.unIndentedLinePattern) && this._indentationRules.unIndentedLinePattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    getIndentMetadata(text) {\n        let ret = 0;\n        if (this.shouldIncrease(text)) {\n            ret += 1 /* IndentConsts.INCREASE_MASK */;\n        }\n        if (this.shouldDecrease(text)) {\n            ret += 2 /* IndentConsts.DECREASE_MASK */;\n        }\n        if (this.shouldIndentNextLine(text)) {\n            ret += 4 /* IndentConsts.INDENT_NEXTLINE_MASK */;\n        }\n        if (this.shouldIgnore(text)) {\n            ret += 8 /* IndentConsts.UNINDENT_MASK */;\n        }\n        return ret;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { IndentAction } from '../languageConfiguration.js';\nexport class OnEnterSupport {\n    constructor(opts) {\n        opts = opts || {};\n        opts.brackets = opts.brackets || [\n            ['(', ')'],\n            ['{', '}'],\n            ['[', ']']\n        ];\n        this._brackets = [];\n        opts.brackets.forEach((bracket) => {\n            const openRegExp = OnEnterSupport._createOpenBracketRegExp(bracket[0]);\n            const closeRegExp = OnEnterSupport._createCloseBracketRegExp(bracket[1]);\n            if (openRegExp && closeRegExp) {\n                this._brackets.push({\n                    open: bracket[0],\n                    openRegExp: openRegExp,\n                    close: bracket[1],\n                    closeRegExp: closeRegExp,\n                });\n            }\n        });\n        this._regExpRules = opts.onEnterRules || [];\n    }\n    onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText) {\n        // (1): `regExpRules`\n        if (autoIndent >= 3 /* EditorAutoIndentStrategy.Advanced */) {\n            for (let i = 0, len = this._regExpRules.length; i < len; i++) {\n                const rule = this._regExpRules[i];\n                const regResult = [{\n                        reg: rule.beforeText,\n                        text: beforeEnterText\n                    }, {\n                        reg: rule.afterText,\n                        text: afterEnterText\n                    }, {\n                        reg: rule.previousLineText,\n                        text: previousLineText\n                    }].every((obj) => {\n                    if (!obj.reg) {\n                        return true;\n                    }\n                    obj.reg.lastIndex = 0; // To disable the effect of the \"g\" flag.\n                    return obj.reg.test(obj.text);\n                });\n                if (regResult) {\n                    return rule.action;\n                }\n            }\n        }\n        // (2): Special indent-outdent\n        if (autoIndent >= 2 /* EditorAutoIndentStrategy.Brackets */) {\n            if (beforeEnterText.length > 0 && afterEnterText.length > 0) {\n                for (let i = 0, len = this._brackets.length; i < len; i++) {\n                    const bracket = this._brackets[i];\n                    if (bracket.openRegExp.test(beforeEnterText) && bracket.closeRegExp.test(afterEnterText)) {\n                        return { indentAction: IndentAction.IndentOutdent };\n                    }\n                }\n            }\n        }\n        // (4): Open bracket based logic\n        if (autoIndent >= 2 /* EditorAutoIndentStrategy.Brackets */) {\n            if (beforeEnterText.length > 0) {\n                for (let i = 0, len = this._brackets.length; i < len; i++) {\n                    const bracket = this._brackets[i];\n                    if (bracket.openRegExp.test(beforeEnterText)) {\n                        return { indentAction: IndentAction.Indent };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    static _createOpenBracketRegExp(bracket) {\n        let str = strings.escapeRegExpCharacters(bracket);\n        if (!/\\B/.test(str.charAt(0))) {\n            str = '\\\\b' + str;\n        }\n        str += '\\\\s*$';\n        return OnEnterSupport._safeRegExp(str);\n    }\n    static _createCloseBracketRegExp(bracket) {\n        let str = strings.escapeRegExpCharacters(bracket);\n        if (!/\\B/.test(str.charAt(str.length - 1))) {\n            str = str + '\\\\b';\n        }\n        str = '^\\\\s*' + str;\n        return OnEnterSupport._safeRegExp(str);\n    }\n    static _safeRegExp(def) {\n        try {\n            return new RegExp(def);\n        }\n        catch (err) {\n            onUnexpectedError(err);\n            return null;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CachedFunction } from '../../../../base/common/cache.js';\n/**\n * Captures all bracket related configurations for a single language.\n * Immutable.\n*/\nexport class LanguageBracketsConfiguration {\n    constructor(languageId, config) {\n        this.languageId = languageId;\n        const bracketPairs = config.brackets ? filterValidBrackets(config.brackets) : [];\n        const openingBracketInfos = new CachedFunction((bracket) => {\n            const closing = new Set();\n            return {\n                info: new OpeningBracketKind(this, bracket, closing),\n                closing,\n            };\n        });\n        const closingBracketInfos = new CachedFunction((bracket) => {\n            const opening = new Set();\n            const openingColorized = new Set();\n            return {\n                info: new ClosingBracketKind(this, bracket, opening, openingColorized),\n                opening,\n                openingColorized,\n            };\n        });\n        for (const [open, close] of bracketPairs) {\n            const opening = openingBracketInfos.get(open);\n            const closing = closingBracketInfos.get(close);\n            opening.closing.add(closing.info);\n            closing.opening.add(opening.info);\n        }\n        // Treat colorized brackets as brackets, and mark them as colorized.\n        const colorizedBracketPairs = config.colorizedBracketPairs\n            ? filterValidBrackets(config.colorizedBracketPairs)\n            // If not configured: Take all brackets except `<` ... `>`\n            // Many languages set < ... > as bracket pair, even though they also use it as comparison operator.\n            // This leads to problems when colorizing this bracket, so we exclude it if not explicitly configured otherwise.\n            // https://github.com/microsoft/vscode/issues/132476\n            : bracketPairs.filter((p) => !(p[0] === '<' && p[1] === '>'));\n        for (const [open, close] of colorizedBracketPairs) {\n            const opening = openingBracketInfos.get(open);\n            const closing = closingBracketInfos.get(close);\n            opening.closing.add(closing.info);\n            closing.openingColorized.add(opening.info);\n            closing.opening.add(opening.info);\n        }\n        this._openingBrackets = new Map([...openingBracketInfos.cachedValues].map(([k, v]) => [k, v.info]));\n        this._closingBrackets = new Map([...closingBracketInfos.cachedValues].map(([k, v]) => [k, v.info]));\n    }\n    /**\n     * No two brackets have the same bracket text.\n    */\n    get openingBrackets() {\n        return [...this._openingBrackets.values()];\n    }\n    /**\n     * No two brackets have the same bracket text.\n    */\n    get closingBrackets() {\n        return [...this._closingBrackets.values()];\n    }\n    getOpeningBracketInfo(bracketText) {\n        return this._openingBrackets.get(bracketText);\n    }\n    getClosingBracketInfo(bracketText) {\n        return this._closingBrackets.get(bracketText);\n    }\n    getBracketInfo(bracketText) {\n        return this.getOpeningBracketInfo(bracketText) || this.getClosingBracketInfo(bracketText);\n    }\n}\nfunction filterValidBrackets(bracketPairs) {\n    return bracketPairs.filter(([open, close]) => open !== '' && close !== '');\n}\nexport class BracketKindBase {\n    constructor(config, bracketText) {\n        this.config = config;\n        this.bracketText = bracketText;\n    }\n    get languageId() {\n        return this.config.languageId;\n    }\n}\nexport class OpeningBracketKind extends BracketKindBase {\n    constructor(config, bracketText, openedBrackets) {\n        super(config, bracketText);\n        this.openedBrackets = openedBrackets;\n        this.isOpeningBracket = true;\n    }\n}\nexport class ClosingBracketKind extends BracketKindBase {\n    constructor(config, bracketText, \n    /**\n     * Non empty array of all opening brackets this bracket closes.\n    */\n    openingBrackets, openingColorizedBrackets) {\n        super(config, bracketText);\n        this.openingBrackets = openingBrackets;\n        this.openingColorizedBrackets = openingColorizedBrackets;\n        this.isOpeningBracket = false;\n    }\n    /**\n     * Checks if this bracket closes the given other bracket.\n     * If the bracket infos come from different configurations, this method will return false.\n    */\n    closes(other) {\n        if (other['config'] !== this.config) {\n            return false;\n        }\n        return this.openingBrackets.has(other);\n    }\n    closesColorized(other) {\n        if (other['config'] !== this.config) {\n            return false;\n        }\n        return this.openingColorizedBrackets.has(other);\n    }\n    getOpeningBrackets() {\n        return [...this.openingBrackets];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { DEFAULT_WORD_REGEXP, ensureValidWordDefinition } from '../core/wordHelper.js';\nimport { AutoClosingPairs } from './languageConfiguration.js';\nimport { createScopedLineTokens } from './supports.js';\nimport { CharacterPairSupport } from './supports/characterPair.js';\nimport { BracketElectricCharacterSupport } from './supports/electricCharacter.js';\nimport { IndentRulesSupport } from './supports/indentRules.js';\nimport { OnEnterSupport } from './supports/onEnter.js';\nimport { RichEditBrackets } from './supports/richEditBrackets.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { ILanguageService } from './language.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { PLAINTEXT_LANGUAGE_ID } from './modesRegistry.js';\nimport { LanguageBracketsConfiguration } from './supports/languageBracketsConfiguration.js';\nexport class LanguageConfigurationServiceChangeEvent {\n    constructor(languageId) {\n        this.languageId = languageId;\n    }\n    affects(languageId) {\n        return !this.languageId ? true : this.languageId === languageId;\n    }\n}\nexport const ILanguageConfigurationService = createDecorator('languageConfigurationService');\nlet LanguageConfigurationService = class LanguageConfigurationService extends Disposable {\n    constructor(configurationService, languageService) {\n        super();\n        this.configurationService = configurationService;\n        this.languageService = languageService;\n        this._registry = this._register(new LanguageConfigurationRegistry());\n        this.onDidChangeEmitter = this._register(new Emitter());\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.configurations = new Map();\n        const languageConfigKeys = new Set(Object.values(customizedLanguageConfigKeys));\n        this._register(this.configurationService.onDidChangeConfiguration((e) => {\n            const globalConfigChanged = e.change.keys.some((k) => languageConfigKeys.has(k));\n            const localConfigChanged = e.change.overrides\n                .filter(([overrideLangName, keys]) => keys.some((k) => languageConfigKeys.has(k)))\n                .map(([overrideLangName]) => overrideLangName);\n            if (globalConfigChanged) {\n                this.configurations.clear();\n                this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(undefined));\n            }\n            else {\n                for (const languageId of localConfigChanged) {\n                    if (this.languageService.isRegisteredLanguageId(languageId)) {\n                        this.configurations.delete(languageId);\n                        this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(languageId));\n                    }\n                }\n            }\n        }));\n        this._register(this._registry.onDidChange((e) => {\n            this.configurations.delete(e.languageId);\n            this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(e.languageId));\n        }));\n    }\n    register(languageId, configuration, priority) {\n        return this._registry.register(languageId, configuration, priority);\n    }\n    getLanguageConfiguration(languageId) {\n        let result = this.configurations.get(languageId);\n        if (!result) {\n            result = computeConfig(languageId, this._registry, this.configurationService, this.languageService);\n            this.configurations.set(languageId, result);\n        }\n        return result;\n    }\n};\nLanguageConfigurationService = __decorate([\n    __param(0, IConfigurationService),\n    __param(1, ILanguageService)\n], LanguageConfigurationService);\nexport { LanguageConfigurationService };\nfunction computeConfig(languageId, registry, configurationService, languageService) {\n    let languageConfig = registry.getLanguageConfiguration(languageId);\n    if (!languageConfig) {\n        if (!languageService.isRegisteredLanguageId(languageId)) {\n            // this happens for the null language, which can be returned by monarch.\n            // Instead of throwing an error, we just return a default config.\n            return new ResolvedLanguageConfiguration(languageId, {});\n        }\n        languageConfig = new ResolvedLanguageConfiguration(languageId, {});\n    }\n    const customizedConfig = getCustomizedLanguageConfig(languageConfig.languageId, configurationService);\n    const data = combineLanguageConfigurations([languageConfig.underlyingConfig, customizedConfig]);\n    const config = new ResolvedLanguageConfiguration(languageConfig.languageId, data);\n    return config;\n}\nconst customizedLanguageConfigKeys = {\n    brackets: 'editor.language.brackets',\n    colorizedBracketPairs: 'editor.language.colorizedBracketPairs'\n};\nfunction getCustomizedLanguageConfig(languageId, configurationService) {\n    const brackets = configurationService.getValue(customizedLanguageConfigKeys.brackets, {\n        overrideIdentifier: languageId,\n    });\n    const colorizedBracketPairs = configurationService.getValue(customizedLanguageConfigKeys.colorizedBracketPairs, {\n        overrideIdentifier: languageId,\n    });\n    return {\n        brackets: validateBracketPairs(brackets),\n        colorizedBracketPairs: validateBracketPairs(colorizedBracketPairs),\n    };\n}\nfunction validateBracketPairs(data) {\n    if (!Array.isArray(data)) {\n        return undefined;\n    }\n    return data.map(pair => {\n        if (!Array.isArray(pair) || pair.length !== 2) {\n            return undefined;\n        }\n        return [pair[0], pair[1]];\n    }).filter((p) => !!p);\n}\nexport function getIndentationAtPosition(model, lineNumber, column) {\n    const lineText = model.getLineContent(lineNumber);\n    let indentation = strings.getLeadingWhitespace(lineText);\n    if (indentation.length > column - 1) {\n        indentation = indentation.substring(0, column - 1);\n    }\n    return indentation;\n}\nexport function getScopedLineTokens(model, lineNumber, columnNumber) {\n    model.tokenization.forceTokenization(lineNumber);\n    const lineTokens = model.tokenization.getLineTokens(lineNumber);\n    const column = (typeof columnNumber === 'undefined' ? model.getLineMaxColumn(lineNumber) - 1 : columnNumber - 1);\n    return createScopedLineTokens(lineTokens, column);\n}\nclass ComposedLanguageConfiguration {\n    constructor(languageId) {\n        this.languageId = languageId;\n        this._resolved = null;\n        this._entries = [];\n        this._order = 0;\n        this._resolved = null;\n    }\n    register(configuration, priority) {\n        const entry = new LanguageConfigurationContribution(configuration, priority, ++this._order);\n        this._entries.push(entry);\n        this._resolved = null;\n        return toDisposable(() => {\n            for (let i = 0; i < this._entries.length; i++) {\n                if (this._entries[i] === entry) {\n                    this._entries.splice(i, 1);\n                    this._resolved = null;\n                    break;\n                }\n            }\n        });\n    }\n    getResolvedConfiguration() {\n        if (!this._resolved) {\n            const config = this._resolve();\n            if (config) {\n                this._resolved = new ResolvedLanguageConfiguration(this.languageId, config);\n            }\n        }\n        return this._resolved;\n    }\n    _resolve() {\n        if (this._entries.length === 0) {\n            return null;\n        }\n        this._entries.sort(LanguageConfigurationContribution.cmp);\n        return combineLanguageConfigurations(this._entries.map(e => e.configuration));\n    }\n}\nfunction combineLanguageConfigurations(configs) {\n    let result = {\n        comments: undefined,\n        brackets: undefined,\n        wordPattern: undefined,\n        indentationRules: undefined,\n        onEnterRules: undefined,\n        autoClosingPairs: undefined,\n        surroundingPairs: undefined,\n        autoCloseBefore: undefined,\n        folding: undefined,\n        colorizedBracketPairs: undefined,\n        __electricCharacterSupport: undefined,\n    };\n    for (const entry of configs) {\n        result = {\n            comments: entry.comments || result.comments,\n            brackets: entry.brackets || result.brackets,\n            wordPattern: entry.wordPattern || result.wordPattern,\n            indentationRules: entry.indentationRules || result.indentationRules,\n            onEnterRules: entry.onEnterRules || result.onEnterRules,\n            autoClosingPairs: entry.autoClosingPairs || result.autoClosingPairs,\n            surroundingPairs: entry.surroundingPairs || result.surroundingPairs,\n            autoCloseBefore: entry.autoCloseBefore || result.autoCloseBefore,\n            folding: entry.folding || result.folding,\n            colorizedBracketPairs: entry.colorizedBracketPairs || result.colorizedBracketPairs,\n            __electricCharacterSupport: entry.__electricCharacterSupport || result.__electricCharacterSupport,\n        };\n    }\n    return result;\n}\nclass LanguageConfigurationContribution {\n    constructor(configuration, priority, order) {\n        this.configuration = configuration;\n        this.priority = priority;\n        this.order = order;\n    }\n    static cmp(a, b) {\n        if (a.priority === b.priority) {\n            // higher order last\n            return a.order - b.order;\n        }\n        // higher priority last\n        return a.priority - b.priority;\n    }\n}\nexport class LanguageConfigurationChangeEvent {\n    constructor(languageId) {\n        this.languageId = languageId;\n    }\n}\nexport class LanguageConfigurationRegistry extends Disposable {\n    constructor() {\n        super();\n        this._entries = new Map();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._register(this.register(PLAINTEXT_LANGUAGE_ID, {\n            brackets: [\n                ['(', ')'],\n                ['[', ']'],\n                ['{', '}'],\n            ],\n            surroundingPairs: [\n                { open: '{', close: '}' },\n                { open: '[', close: ']' },\n                { open: '(', close: ')' },\n                { open: '<', close: '>' },\n                { open: '\\\"', close: '\\\"' },\n                { open: '\\'', close: '\\'' },\n                { open: '`', close: '`' },\n            ],\n            colorizedBracketPairs: [],\n            folding: {\n                offSide: true\n            }\n        }, 0));\n    }\n    /**\n     * @param priority Use a higher number for higher priority\n     */\n    register(languageId, configuration, priority = 0) {\n        let entries = this._entries.get(languageId);\n        if (!entries) {\n            entries = new ComposedLanguageConfiguration(languageId);\n            this._entries.set(languageId, entries);\n        }\n        const disposable = entries.register(configuration, priority);\n        this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageId));\n        return toDisposable(() => {\n            disposable.dispose();\n            this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageId));\n        });\n    }\n    getLanguageConfiguration(languageId) {\n        const entries = this._entries.get(languageId);\n        return (entries === null || entries === void 0 ? void 0 : entries.getResolvedConfiguration()) || null;\n    }\n}\n/**\n * Immutable.\n*/\nexport class ResolvedLanguageConfiguration {\n    constructor(languageId, underlyingConfig) {\n        this.languageId = languageId;\n        this.underlyingConfig = underlyingConfig;\n        this._brackets = null;\n        this._electricCharacter = null;\n        this._onEnterSupport =\n            this.underlyingConfig.brackets ||\n                this.underlyingConfig.indentationRules ||\n                this.underlyingConfig.onEnterRules\n                ? new OnEnterSupport(this.underlyingConfig)\n                : null;\n        this.comments = ResolvedLanguageConfiguration._handleComments(this.underlyingConfig);\n        this.characterPair = new CharacterPairSupport(this.underlyingConfig);\n        this.wordDefinition = this.underlyingConfig.wordPattern || DEFAULT_WORD_REGEXP;\n        this.indentationRules = this.underlyingConfig.indentationRules;\n        if (this.underlyingConfig.indentationRules) {\n            this.indentRulesSupport = new IndentRulesSupport(this.underlyingConfig.indentationRules);\n        }\n        else {\n            this.indentRulesSupport = null;\n        }\n        this.foldingRules = this.underlyingConfig.folding || {};\n        this.bracketsNew = new LanguageBracketsConfiguration(languageId, this.underlyingConfig);\n    }\n    getWordDefinition() {\n        return ensureValidWordDefinition(this.wordDefinition);\n    }\n    get brackets() {\n        if (!this._brackets && this.underlyingConfig.brackets) {\n            this._brackets = new RichEditBrackets(this.languageId, this.underlyingConfig.brackets);\n        }\n        return this._brackets;\n    }\n    get electricCharacter() {\n        if (!this._electricCharacter) {\n            this._electricCharacter = new BracketElectricCharacterSupport(this.brackets);\n        }\n        return this._electricCharacter;\n    }\n    onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText) {\n        if (!this._onEnterSupport) {\n            return null;\n        }\n        return this._onEnterSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n    }\n    getAutoClosingPairs() {\n        return new AutoClosingPairs(this.characterPair.getAutoClosingPairs());\n    }\n    getAutoCloseBeforeSet(forQuotes) {\n        return this.characterPair.getAutoCloseBeforeSet(forQuotes);\n    }\n    getSurroundingPairs() {\n        return this.characterPair.getSurroundingPairs();\n    }\n    static _handleComments(conf) {\n        const commentRule = conf.comments;\n        if (!commentRule) {\n            return null;\n        }\n        // comment configuration\n        const comments = {};\n        if (commentRule.lineComment) {\n            comments.lineCommentToken = commentRule.lineComment;\n        }\n        if (commentRule.blockComment) {\n            const [blockStart, blockEnd] = commentRule.blockComment;\n            comments.blockCommentStartToken = blockStart;\n            comments.blockCommentEndToken = blockEnd;\n        }\n        return comments;\n    }\n}\nregisterSingleton(ILanguageConfigurationService, LanguageConfigurationService, 1 /* InstantiationType.Delayed */);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nclass Uint8Matrix {\n    constructor(rows, cols, defaultValue) {\n        const data = new Uint8Array(rows * cols);\n        for (let i = 0, len = rows * cols; i < len; i++) {\n            data[i] = defaultValue;\n        }\n        this._data = data;\n        this.rows = rows;\n        this.cols = cols;\n    }\n    get(row, col) {\n        return this._data[row * this.cols + col];\n    }\n    set(row, col, value) {\n        this._data[row * this.cols + col] = value;\n    }\n}\nexport class StateMachine {\n    constructor(edges) {\n        let maxCharCode = 0;\n        let maxState = 0 /* State.Invalid */;\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            if (chCode > maxCharCode) {\n                maxCharCode = chCode;\n            }\n            if (from > maxState) {\n                maxState = from;\n            }\n            if (to > maxState) {\n                maxState = to;\n            }\n        }\n        maxCharCode++;\n        maxState++;\n        const states = new Uint8Matrix(maxState, maxCharCode, 0 /* State.Invalid */);\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            states.set(from, chCode, to);\n        }\n        this._states = states;\n        this._maxCharCode = maxCharCode;\n    }\n    nextState(currentState, chCode) {\n        if (chCode < 0 || chCode >= this._maxCharCode) {\n            return 0 /* State.Invalid */;\n        }\n        return this._states.get(currentState, chCode);\n    }\n}\n// State machine for http:// or https:// or file://\nlet _stateMachine = null;\nfunction getStateMachine() {\n    if (_stateMachine === null) {\n        _stateMachine = new StateMachine([\n            [1 /* State.Start */, 104 /* CharCode.h */, 2 /* State.H */],\n            [1 /* State.Start */, 72 /* CharCode.H */, 2 /* State.H */],\n            [1 /* State.Start */, 102 /* CharCode.f */, 6 /* State.F */],\n            [1 /* State.Start */, 70 /* CharCode.F */, 6 /* State.F */],\n            [2 /* State.H */, 116 /* CharCode.t */, 3 /* State.HT */],\n            [2 /* State.H */, 84 /* CharCode.T */, 3 /* State.HT */],\n            [3 /* State.HT */, 116 /* CharCode.t */, 4 /* State.HTT */],\n            [3 /* State.HT */, 84 /* CharCode.T */, 4 /* State.HTT */],\n            [4 /* State.HTT */, 112 /* CharCode.p */, 5 /* State.HTTP */],\n            [4 /* State.HTT */, 80 /* CharCode.P */, 5 /* State.HTTP */],\n            [5 /* State.HTTP */, 115 /* CharCode.s */, 9 /* State.BeforeColon */],\n            [5 /* State.HTTP */, 83 /* CharCode.S */, 9 /* State.BeforeColon */],\n            [5 /* State.HTTP */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\n            [6 /* State.F */, 105 /* CharCode.i */, 7 /* State.FI */],\n            [6 /* State.F */, 73 /* CharCode.I */, 7 /* State.FI */],\n            [7 /* State.FI */, 108 /* CharCode.l */, 8 /* State.FIL */],\n            [7 /* State.FI */, 76 /* CharCode.L */, 8 /* State.FIL */],\n            [8 /* State.FIL */, 101 /* CharCode.e */, 9 /* State.BeforeColon */],\n            [8 /* State.FIL */, 69 /* CharCode.E */, 9 /* State.BeforeColon */],\n            [9 /* State.BeforeColon */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\n            [10 /* State.AfterColon */, 47 /* CharCode.Slash */, 11 /* State.AlmostThere */],\n            [11 /* State.AlmostThere */, 47 /* CharCode.Slash */, 12 /* State.End */],\n        ]);\n    }\n    return _stateMachine;\n}\nlet _classifier = null;\nfunction getClassifier() {\n    if (_classifier === null) {\n        _classifier = new CharacterClassifier(0 /* CharacterClass.None */);\n        // allow-any-unicode-next-line\n        const FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…';\n        for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* CharacterClass.ForceTermination */);\n        }\n        const CANNOT_END_WITH_CHARACTERS = '.,;:';\n        for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CharacterClass.CannotEndIn */);\n        }\n    }\n    return _classifier;\n}\nexport class LinkComputer {\n    static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n        // Do not allow to end link in certain characters...\n        let lastIncludedCharIndex = linkEndIndex - 1;\n        do {\n            const chCode = line.charCodeAt(lastIncludedCharIndex);\n            const chClass = classifier.get(chCode);\n            if (chClass !== 2 /* CharacterClass.CannotEndIn */) {\n                break;\n            }\n            lastIncludedCharIndex--;\n        } while (lastIncludedCharIndex > linkBeginIndex);\n        // Handle links enclosed in parens, square brackets and curlys.\n        if (linkBeginIndex > 0) {\n            const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n            const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n            if ((charCodeBeforeLink === 40 /* CharCode.OpenParen */ && lastCharCodeInLink === 41 /* CharCode.CloseParen */)\n                || (charCodeBeforeLink === 91 /* CharCode.OpenSquareBracket */ && lastCharCodeInLink === 93 /* CharCode.CloseSquareBracket */)\n                || (charCodeBeforeLink === 123 /* CharCode.OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CharCode.CloseCurlyBrace */)) {\n                // Do not end in ) if ( is before the link start\n                // Do not end in ] if [ is before the link start\n                // Do not end in } if { is before the link start\n                lastIncludedCharIndex--;\n            }\n        }\n        return {\n            range: {\n                startLineNumber: lineNumber,\n                startColumn: linkBeginIndex + 1,\n                endLineNumber: lineNumber,\n                endColumn: lastIncludedCharIndex + 2\n            },\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n        };\n    }\n    static computeLinks(model, stateMachine = getStateMachine()) {\n        const classifier = getClassifier();\n        const result = [];\n        for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n            const line = model.getLineContent(i);\n            const len = line.length;\n            let j = 0;\n            let linkBeginIndex = 0;\n            let linkBeginChCode = 0;\n            let state = 1 /* State.Start */;\n            let hasOpenParens = false;\n            let hasOpenSquareBracket = false;\n            let inSquareBrackets = false;\n            let hasOpenCurlyBracket = false;\n            while (j < len) {\n                let resetStateMachine = false;\n                const chCode = line.charCodeAt(j);\n                if (state === 13 /* State.Accept */) {\n                    let chClass;\n                    switch (chCode) {\n                        case 40 /* CharCode.OpenParen */:\n                            hasOpenParens = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 41 /* CharCode.CloseParen */:\n                            chClass = (hasOpenParens ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        case 91 /* CharCode.OpenSquareBracket */:\n                            inSquareBrackets = true;\n                            hasOpenSquareBracket = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 93 /* CharCode.CloseSquareBracket */:\n                            inSquareBrackets = false;\n                            chClass = (hasOpenSquareBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        case 123 /* CharCode.OpenCurlyBrace */:\n                            hasOpenCurlyBracket = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 125 /* CharCode.CloseCurlyBrace */:\n                            chClass = (hasOpenCurlyBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        // The following three rules make it that ' or \" or ` are allowed inside links\n                        // only if the link is wrapped by some other quote character\n                        case 39 /* CharCode.SingleQuote */:\n                        case 34 /* CharCode.DoubleQuote */:\n                        case 96 /* CharCode.BackTick */:\n                            if (linkBeginChCode === chCode) {\n                                chClass = 1 /* CharacterClass.ForceTermination */;\n                            }\n                            else if (linkBeginChCode === 39 /* CharCode.SingleQuote */ || linkBeginChCode === 34 /* CharCode.DoubleQuote */ || linkBeginChCode === 96 /* CharCode.BackTick */) {\n                                chClass = 0 /* CharacterClass.None */;\n                            }\n                            else {\n                                chClass = 1 /* CharacterClass.ForceTermination */;\n                            }\n                            break;\n                        case 42 /* CharCode.Asterisk */:\n                            // `*` terminates a link if the link began with `*`\n                            chClass = (linkBeginChCode === 42 /* CharCode.Asterisk */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                            break;\n                        case 124 /* CharCode.Pipe */:\n                            // `|` terminates a link if the link began with `|`\n                            chClass = (linkBeginChCode === 124 /* CharCode.Pipe */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                            break;\n                        case 32 /* CharCode.Space */:\n                            // ` ` allow space in between [ and ]\n                            chClass = (inSquareBrackets ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        default:\n                            chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n                        resetStateMachine = true;\n                    }\n                }\n                else if (state === 12 /* State.End */) {\n                    let chClass;\n                    if (chCode === 91 /* CharCode.OpenSquareBracket */) {\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n                        hasOpenSquareBracket = true;\n                        chClass = 0 /* CharacterClass.None */;\n                    }\n                    else {\n                        chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\n                        resetStateMachine = true;\n                    }\n                    else {\n                        state = 13 /* State.Accept */;\n                    }\n                }\n                else {\n                    state = stateMachine.nextState(state, chCode);\n                    if (state === 0 /* State.Invalid */) {\n                        resetStateMachine = true;\n                    }\n                }\n                if (resetStateMachine) {\n                    state = 1 /* State.Start */;\n                    hasOpenParens = false;\n                    hasOpenSquareBracket = false;\n                    hasOpenCurlyBracket = false;\n                    // Record where the link started\n                    linkBeginIndex = j + 1;\n                    linkBeginChCode = chCode;\n                }\n                j++;\n            }\n            if (state === 13 /* State.Accept */) {\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n            }\n        }\n        return result;\n    }\n}\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nexport function computeLinks(model) {\n    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n        // Unknown caller!\n        return [];\n    }\n    return LinkComputer.computeLinks(model);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Extensions as ConfigurationExtensions } from '../../../platform/configuration/common/configurationRegistry.js';\n// Define extension point ids\nexport const Extensions = {\n    ModesRegistry: 'editor.modesRegistry'\n};\nexport class EditorModesRegistry {\n    constructor() {\n        this._onDidChangeLanguages = new Emitter();\n        this.onDidChangeLanguages = this._onDidChangeLanguages.event;\n        this._languages = [];\n    }\n    registerLanguage(def) {\n        this._languages.push(def);\n        this._onDidChangeLanguages.fire(undefined);\n        return {\n            dispose: () => {\n                for (let i = 0, len = this._languages.length; i < len; i++) {\n                    if (this._languages[i] === def) {\n                        this._languages.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        };\n    }\n    getLanguages() {\n        return this._languages;\n    }\n}\nexport const ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\nexport const PLAINTEXT_LANGUAGE_ID = 'plaintext';\nexport const PLAINTEXT_EXTENSION = '.txt';\nModesRegistry.registerLanguage({\n    id: PLAINTEXT_LANGUAGE_ID,\n    extensions: [PLAINTEXT_EXTENSION],\n    aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n    mimetypes: [Mimes.text]\n});\nRegistry.as(ConfigurationExtensions.Configuration)\n    .registerDefaultConfigurations([{\n        overrides: {\n            '[plaintext]': {\n                'editor.unicodeHighlight.ambiguousCharacters': false,\n                'editor.unicodeHighlight.invisibleCharacters': false\n            }\n        }\n    }]);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Token, TokenizationResult, EncodedTokenizationResult } from '../languages.js';\nexport const NullState = new class {\n    clone() {\n        return this;\n    }\n    equals(other) {\n        return (this === other);\n    }\n};\nexport function nullTokenize(languageId, state) {\n    return new TokenizationResult([new Token(0, '', languageId)], state);\n}\nexport function nullTokenizeEncoded(languageId, state) {\n    const tokens = new Uint32Array(2);\n    tokens[0] = 0;\n    tokens[1] = ((languageId << 0 /* MetadataConsts.LANGUAGEID_OFFSET */)\n        | (0 /* StandardTokenType.Other */ << 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */)\n        | (0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n        | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n        | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\n    return new EncodedTokenizationResult(tokens, state === null ? NullState : state);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function createScopedLineTokens(context, offset) {\n    const tokenCount = context.getCount();\n    const tokenIndex = context.findTokenIndexAtOffset(offset);\n    const desiredLanguageId = context.getLanguageId(tokenIndex);\n    let lastTokenIndex = tokenIndex;\n    while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\n        lastTokenIndex++;\n    }\n    let firstTokenIndex = tokenIndex;\n    while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\n        firstTokenIndex--;\n    }\n    return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\n}\nexport class ScopedLineTokens {\n    constructor(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\n        this._scopedLineTokensBrand = undefined;\n        this._actual = actual;\n        this.languageId = languageId;\n        this._firstTokenIndex = firstTokenIndex;\n        this._lastTokenIndex = lastTokenIndex;\n        this.firstCharOffset = firstCharOffset;\n        this._lastCharOffset = lastCharOffset;\n    }\n    getLineContent() {\n        const actualLineContent = this._actual.getLineContent();\n        return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\n    }\n    getActualLineContentBefore(offset) {\n        const actualLineContent = this._actual.getLineContent();\n        return actualLineContent.substring(0, this.firstCharOffset + offset);\n    }\n    getTokenCount() {\n        return this._lastTokenIndex - this._firstTokenIndex;\n    }\n    findTokenIndexAtOffset(offset) {\n        return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\n    }\n    getStandardTokenType(tokenIndex) {\n        return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\n    }\n}\nexport function ignoreBracketsInToken(standardTokenType) {\n    return (standardTokenType & 3 /* IgnoreBracketsInTokens.value */) !== 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class BasicInplaceReplace {\n    constructor() {\n        this._defaultValueSet = [\n            ['true', 'false'],\n            ['True', 'False'],\n            ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'],\n            ['public', 'protected', 'private'],\n        ];\n    }\n    navigateValueSet(range1, text1, range2, text2, up) {\n        if (range1 && text1) {\n            const result = this.doNavigateValueSet(text1, up);\n            if (result) {\n                return {\n                    range: range1,\n                    value: result\n                };\n            }\n        }\n        if (range2 && text2) {\n            const result = this.doNavigateValueSet(text2, up);\n            if (result) {\n                return {\n                    range: range2,\n                    value: result\n                };\n            }\n        }\n        return null;\n    }\n    doNavigateValueSet(text, up) {\n        const numberResult = this.numberReplace(text, up);\n        if (numberResult !== null) {\n            return numberResult;\n        }\n        return this.textReplace(text, up);\n    }\n    numberReplace(value, up) {\n        const precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));\n        let n1 = Number(value);\n        const n2 = parseFloat(value);\n        if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\n            if (n1 === 0 && !up) {\n                return null; // don't do negative\n                //\t\t\t} else if(n1 === 9 && up) {\n                //\t\t\t\treturn null; // don't insert 10 into a number\n            }\n            else {\n                n1 = Math.floor(n1 * precision);\n                n1 += up ? precision : -precision;\n                return String(n1 / precision);\n            }\n        }\n        return null;\n    }\n    textReplace(value, up) {\n        return this.valueSetsReplace(this._defaultValueSet, value, up);\n    }\n    valueSetsReplace(valueSets, value, up) {\n        let result = null;\n        for (let i = 0, len = valueSets.length; result === null && i < len; i++) {\n            result = this.valueSetReplace(valueSets[i], value, up);\n        }\n        return result;\n    }\n    valueSetReplace(valueSet, value, up) {\n        let idx = valueSet.indexOf(value);\n        if (idx >= 0) {\n            idx += up ? +1 : -1;\n            if (idx < 0) {\n                idx = valueSet.length - 1;\n            }\n            else {\n                idx %= valueSet.length;\n            }\n            return valueSet[idx];\n        }\n        return null;\n    }\n}\nBasicInplaceReplace.INSTANCE = new BasicInplaceReplace();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport * as stringBuilder from '../../core/stringBuilder.js';\nimport { Range } from '../../core/range.js';\n/**\n * Represents a grouping of colliding bracket pairs.\n *\n * Most of the times this contains a single bracket pair,\n * but sometimes this contains multiple bracket pairs in cases\n * where the same string appears as a closing bracket for multiple\n * bracket pairs, or the same string appears an opening bracket for\n * multiple bracket pairs.\n *\n * e.g. of a group containing a single pair:\n *   open: ['{'], close: ['}']\n *\n * e.g. of a group containing multiple pairs:\n *   open: ['if', 'for'], close: ['end', 'end']\n */\nexport class RichEditBracket {\n    constructor(languageId, index, open, close, forwardRegex, reversedRegex) {\n        this._richEditBracketBrand = undefined;\n        this.languageId = languageId;\n        this.index = index;\n        this.open = open;\n        this.close = close;\n        this.forwardRegex = forwardRegex;\n        this.reversedRegex = reversedRegex;\n        this._openSet = RichEditBracket._toSet(this.open);\n        this._closeSet = RichEditBracket._toSet(this.close);\n    }\n    /**\n     * Check if the provided `text` is an open bracket in this group.\n     */\n    isOpen(text) {\n        return this._openSet.has(text);\n    }\n    /**\n     * Check if the provided `text` is a close bracket in this group.\n     */\n    isClose(text) {\n        return this._closeSet.has(text);\n    }\n    static _toSet(arr) {\n        const result = new Set();\n        for (const element of arr) {\n            result.add(element);\n        }\n        return result;\n    }\n}\n/**\n * Groups together brackets that have equal open or close sequences.\n *\n * For example, if the following brackets are defined:\n *   ['IF','END']\n *   ['for','end']\n *   ['{','}']\n *\n * Then the grouped brackets would be:\n *   { open: ['if', 'for'], close: ['end', 'end'] }\n *   { open: ['{'], close: ['}'] }\n *\n */\nfunction groupFuzzyBrackets(brackets) {\n    const N = brackets.length;\n    brackets = brackets.map(b => [b[0].toLowerCase(), b[1].toLowerCase()]);\n    const group = [];\n    for (let i = 0; i < N; i++) {\n        group[i] = i;\n    }\n    const areOverlapping = (a, b) => {\n        const [aOpen, aClose] = a;\n        const [bOpen, bClose] = b;\n        return (aOpen === bOpen || aOpen === bClose || aClose === bOpen || aClose === bClose);\n    };\n    const mergeGroups = (g1, g2) => {\n        const newG = Math.min(g1, g2);\n        const oldG = Math.max(g1, g2);\n        for (let i = 0; i < N; i++) {\n            if (group[i] === oldG) {\n                group[i] = newG;\n            }\n        }\n    };\n    // group together brackets that have the same open or the same close sequence\n    for (let i = 0; i < N; i++) {\n        const a = brackets[i];\n        for (let j = i + 1; j < N; j++) {\n            const b = brackets[j];\n            if (areOverlapping(a, b)) {\n                mergeGroups(group[i], group[j]);\n            }\n        }\n    }\n    const result = [];\n    for (let g = 0; g < N; g++) {\n        const currentOpen = [];\n        const currentClose = [];\n        for (let i = 0; i < N; i++) {\n            if (group[i] === g) {\n                const [open, close] = brackets[i];\n                currentOpen.push(open);\n                currentClose.push(close);\n            }\n        }\n        if (currentOpen.length > 0) {\n            result.push({\n                open: currentOpen,\n                close: currentClose\n            });\n        }\n    }\n    return result;\n}\nexport class RichEditBrackets {\n    constructor(languageId, _brackets) {\n        this._richEditBracketsBrand = undefined;\n        const brackets = groupFuzzyBrackets(_brackets);\n        this.brackets = brackets.map((b, index) => {\n            return new RichEditBracket(languageId, index, b.open, b.close, getRegexForBracketPair(b.open, b.close, brackets, index), getReversedRegexForBracketPair(b.open, b.close, brackets, index));\n        });\n        this.forwardRegex = getRegexForBrackets(this.brackets);\n        this.reversedRegex = getReversedRegexForBrackets(this.brackets);\n        this.textIsBracket = {};\n        this.textIsOpenBracket = {};\n        this.maxBracketLength = 0;\n        for (const bracket of this.brackets) {\n            for (const open of bracket.open) {\n                this.textIsBracket[open] = bracket;\n                this.textIsOpenBracket[open] = true;\n                this.maxBracketLength = Math.max(this.maxBracketLength, open.length);\n            }\n            for (const close of bracket.close) {\n                this.textIsBracket[close] = bracket;\n                this.textIsOpenBracket[close] = false;\n                this.maxBracketLength = Math.max(this.maxBracketLength, close.length);\n            }\n        }\n    }\n}\nfunction collectSuperstrings(str, brackets, currentIndex, dest) {\n    for (let i = 0, len = brackets.length; i < len; i++) {\n        if (i === currentIndex) {\n            continue;\n        }\n        const bracket = brackets[i];\n        for (const open of bracket.open) {\n            if (open.indexOf(str) >= 0) {\n                dest.push(open);\n            }\n        }\n        for (const close of bracket.close) {\n            if (close.indexOf(str) >= 0) {\n                dest.push(close);\n            }\n        }\n    }\n}\nfunction lengthcmp(a, b) {\n    return a.length - b.length;\n}\nfunction unique(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const result = [];\n    const seen = new Set();\n    for (const element of arr) {\n        if (seen.has(element)) {\n            continue;\n        }\n        result.push(element);\n        seen.add(element);\n    }\n    return result;\n}\n/**\n * Create a regular expression that can be used to search forward in a piece of text\n * for a group of bracket pairs. But this regex must be built in a way in which\n * it is aware of the other bracket pairs defined for the language.\n *\n * For example, if a language contains the following bracket pairs:\n *   ['begin', 'end']\n *   ['if', 'end if']\n * The two bracket pairs do not collide because no open or close brackets are equal.\n * So the function getRegexForBracketPair is called twice, once with\n * the ['begin'], ['end'] group consisting of one bracket pair, and once with\n * the ['if'], ['end if'] group consiting of the other bracket pair.\n *\n * But there could be a situation where an occurrence of 'end if' is mistaken\n * for an occurrence of 'end'.\n *\n * Therefore, for the bracket pair ['begin', 'end'], the regex will also\n * target 'end if'. The regex will be something like:\n *   /(\\bend if\\b)|(\\bend\\b)|(\\bif\\b)/\n *\n * The regex also searches for \"superstrings\" (other brackets that might be mistaken with the current bracket).\n *\n */\nfunction getRegexForBracketPair(open, close, brackets, currentIndex) {\n    // search in all brackets for other brackets that are a superstring of these brackets\n    let pieces = [];\n    pieces = pieces.concat(open);\n    pieces = pieces.concat(close);\n    for (let i = 0, len = pieces.length; i < len; i++) {\n        collectSuperstrings(pieces[i], brackets, currentIndex, pieces);\n    }\n    pieces = unique(pieces);\n    pieces.sort(lengthcmp);\n    pieces.reverse();\n    return createBracketOrRegExp(pieces);\n}\n/**\n * Matching a regular expression in JS can only be done \"forwards\". So JS offers natively only\n * methods to find the first match of a regex in a string. But sometimes, it is useful to\n * find the last match of a regex in a string. For such a situation, a nice solution is to\n * simply reverse the string and then search for a reversed regex.\n *\n * This function also has the fine details of `getRegexForBracketPair`. For the same example\n * given above, the regex produced here would look like:\n *   /(\\bfi dne\\b)|(\\bdne\\b)|(\\bfi\\b)/\n */\nfunction getReversedRegexForBracketPair(open, close, brackets, currentIndex) {\n    // search in all brackets for other brackets that are a superstring of these brackets\n    let pieces = [];\n    pieces = pieces.concat(open);\n    pieces = pieces.concat(close);\n    for (let i = 0, len = pieces.length; i < len; i++) {\n        collectSuperstrings(pieces[i], brackets, currentIndex, pieces);\n    }\n    pieces = unique(pieces);\n    pieces.sort(lengthcmp);\n    pieces.reverse();\n    return createBracketOrRegExp(pieces.map(toReversedString));\n}\n/**\n * Creates a regular expression that targets all bracket pairs.\n *\n * e.g. for the bracket pairs:\n *  ['{','}']\n *  ['begin,'end']\n *  ['for','end']\n * the regex would look like:\n *  /(\\{)|(\\})|(\\bbegin\\b)|(\\bend\\b)|(\\bfor\\b)/\n */\nfunction getRegexForBrackets(brackets) {\n    let pieces = [];\n    for (const bracket of brackets) {\n        for (const open of bracket.open) {\n            pieces.push(open);\n        }\n        for (const close of bracket.close) {\n            pieces.push(close);\n        }\n    }\n    pieces = unique(pieces);\n    return createBracketOrRegExp(pieces);\n}\n/**\n * Matching a regular expression in JS can only be done \"forwards\". So JS offers natively only\n * methods to find the first match of a regex in a string. But sometimes, it is useful to\n * find the last match of a regex in a string. For such a situation, a nice solution is to\n * simply reverse the string and then search for a reversed regex.\n *\n * e.g. for the bracket pairs:\n *  ['{','}']\n *  ['begin,'end']\n *  ['for','end']\n * the regex would look like:\n *  /(\\{)|(\\})|(\\bnigeb\\b)|(\\bdne\\b)|(\\brof\\b)/\n */\nfunction getReversedRegexForBrackets(brackets) {\n    let pieces = [];\n    for (const bracket of brackets) {\n        for (const open of bracket.open) {\n            pieces.push(open);\n        }\n        for (const close of bracket.close) {\n            pieces.push(close);\n        }\n    }\n    pieces = unique(pieces);\n    return createBracketOrRegExp(pieces.map(toReversedString));\n}\nfunction prepareBracketForRegExp(str) {\n    // This bracket pair uses letters like e.g. \"begin\" - \"end\"\n    const insertWordBoundaries = (/^[\\w ]+$/.test(str));\n    str = strings.escapeRegExpCharacters(str);\n    return (insertWordBoundaries ? `\\\\b${str}\\\\b` : str);\n}\nfunction createBracketOrRegExp(pieces) {\n    const regexStr = `(${pieces.map(prepareBracketForRegExp).join(')|(')})`;\n    return strings.createRegExp(regexStr, true);\n}\nconst toReversedString = (function () {\n    function reverse(str) {\n        // create a Uint16Array and then use a TextDecoder to create a string\n        const arr = new Uint16Array(str.length);\n        let offset = 0;\n        for (let i = str.length - 1; i >= 0; i--) {\n            arr[offset++] = str.charCodeAt(i);\n        }\n        return stringBuilder.getPlatformTextDecoder().decode(arr);\n    }\n    let lastInput = null;\n    let lastOutput = null;\n    return function toReversedString(str) {\n        if (lastInput !== str) {\n            lastInput = str;\n            lastOutput = reverse(lastInput);\n        }\n        return lastOutput;\n    };\n})();\nexport class BracketsUtils {\n    static _findPrevBracketInText(reversedBracketRegex, lineNumber, reversedText, offset) {\n        const m = reversedText.match(reversedBracketRegex);\n        if (!m) {\n            return null;\n        }\n        const matchOffset = reversedText.length - (m.index || 0);\n        const matchLength = m[0].length;\n        const absoluteMatchOffset = offset + matchOffset;\n        return new Range(lineNumber, absoluteMatchOffset - matchLength + 1, lineNumber, absoluteMatchOffset + 1);\n    }\n    static findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, startOffset, endOffset) {\n        // Because JS does not support backwards regex search, we search forwards in a reversed string with a reversed regex ;)\n        const reversedLineText = toReversedString(lineText);\n        const reversedSubstr = reversedLineText.substring(lineText.length - endOffset, lineText.length - startOffset);\n        return this._findPrevBracketInText(reversedBracketRegex, lineNumber, reversedSubstr, startOffset);\n    }\n    static findNextBracketInText(bracketRegex, lineNumber, text, offset) {\n        const m = text.match(bracketRegex);\n        if (!m) {\n            return null;\n        }\n        const matchOffset = m.index || 0;\n        const matchLength = m[0].length;\n        if (matchLength === 0) {\n            return null;\n        }\n        const absoluteMatchOffset = offset + matchOffset;\n        return new Range(lineNumber, absoluteMatchOffset + 1, lineNumber, absoluteMatchOffset + 1 + matchLength);\n    }\n    static findNextBracketInRange(bracketRegex, lineNumber, lineText, startOffset, endOffset) {\n        const substr = lineText.substring(startOffset, endOffset);\n        return this.findNextBracketInText(bracketRegex, lineNumber, substr, startOffset);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../../base/common/color.js';\nexport class ParsedTokenThemeRule {\n    constructor(token, index, fontStyle, foreground, background) {\n        this._parsedThemeRuleBrand = undefined;\n        this.token = token;\n        this.index = index;\n        this.fontStyle = fontStyle;\n        this.foreground = foreground;\n        this.background = background;\n    }\n}\n/**\n * Parse a raw theme into rules.\n */\nexport function parseTokenTheme(source) {\n    if (!source || !Array.isArray(source)) {\n        return [];\n    }\n    const result = [];\n    let resultLen = 0;\n    for (let i = 0, len = source.length; i < len; i++) {\n        const entry = source[i];\n        let fontStyle = -1 /* FontStyle.NotSet */;\n        if (typeof entry.fontStyle === 'string') {\n            fontStyle = 0 /* FontStyle.None */;\n            const segments = entry.fontStyle.split(' ');\n            for (let j = 0, lenJ = segments.length; j < lenJ; j++) {\n                const segment = segments[j];\n                switch (segment) {\n                    case 'italic':\n                        fontStyle = fontStyle | 1 /* FontStyle.Italic */;\n                        break;\n                    case 'bold':\n                        fontStyle = fontStyle | 2 /* FontStyle.Bold */;\n                        break;\n                    case 'underline':\n                        fontStyle = fontStyle | 4 /* FontStyle.Underline */;\n                        break;\n                    case 'strikethrough':\n                        fontStyle = fontStyle | 8 /* FontStyle.Strikethrough */;\n                        break;\n                }\n            }\n        }\n        let foreground = null;\n        if (typeof entry.foreground === 'string') {\n            foreground = entry.foreground;\n        }\n        let background = null;\n        if (typeof entry.background === 'string') {\n            background = entry.background;\n        }\n        result[resultLen++] = new ParsedTokenThemeRule(entry.token || '', i, fontStyle, foreground, background);\n    }\n    return result;\n}\n/**\n * Resolve rules (i.e. inheritance).\n */\nfunction resolveParsedTokenThemeRules(parsedThemeRules, customTokenColors) {\n    // Sort rules lexicographically, and then by index if necessary\n    parsedThemeRules.sort((a, b) => {\n        const r = strcmp(a.token, b.token);\n        if (r !== 0) {\n            return r;\n        }\n        return a.index - b.index;\n    });\n    // Determine defaults\n    let defaultFontStyle = 0 /* FontStyle.None */;\n    let defaultForeground = '000000';\n    let defaultBackground = 'ffffff';\n    while (parsedThemeRules.length >= 1 && parsedThemeRules[0].token === '') {\n        const incomingDefaults = parsedThemeRules.shift();\n        if (incomingDefaults.fontStyle !== -1 /* FontStyle.NotSet */) {\n            defaultFontStyle = incomingDefaults.fontStyle;\n        }\n        if (incomingDefaults.foreground !== null) {\n            defaultForeground = incomingDefaults.foreground;\n        }\n        if (incomingDefaults.background !== null) {\n            defaultBackground = incomingDefaults.background;\n        }\n    }\n    const colorMap = new ColorMap();\n    // start with token colors from custom token themes\n    for (const color of customTokenColors) {\n        colorMap.getId(color);\n    }\n    const foregroundColorId = colorMap.getId(defaultForeground);\n    const backgroundColorId = colorMap.getId(defaultBackground);\n    const defaults = new ThemeTrieElementRule(defaultFontStyle, foregroundColorId, backgroundColorId);\n    const root = new ThemeTrieElement(defaults);\n    for (let i = 0, len = parsedThemeRules.length; i < len; i++) {\n        const rule = parsedThemeRules[i];\n        root.insert(rule.token, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\n    }\n    return new TokenTheme(colorMap, root);\n}\nconst colorRegExp = /^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;\nexport class ColorMap {\n    constructor() {\n        this._lastColorId = 0;\n        this._id2color = [];\n        this._color2id = new Map();\n    }\n    getId(color) {\n        if (color === null) {\n            return 0;\n        }\n        const match = color.match(colorRegExp);\n        if (!match) {\n            throw new Error('Illegal value for token color: ' + color);\n        }\n        color = match[1].toUpperCase();\n        let value = this._color2id.get(color);\n        if (value) {\n            return value;\n        }\n        value = ++this._lastColorId;\n        this._color2id.set(color, value);\n        this._id2color[value] = Color.fromHex('#' + color);\n        return value;\n    }\n    getColorMap() {\n        return this._id2color.slice(0);\n    }\n}\nexport class TokenTheme {\n    static createFromRawTokenTheme(source, customTokenColors) {\n        return this.createFromParsedTokenTheme(parseTokenTheme(source), customTokenColors);\n    }\n    static createFromParsedTokenTheme(source, customTokenColors) {\n        return resolveParsedTokenThemeRules(source, customTokenColors);\n    }\n    constructor(colorMap, root) {\n        this._colorMap = colorMap;\n        this._root = root;\n        this._cache = new Map();\n    }\n    getColorMap() {\n        return this._colorMap.getColorMap();\n    }\n    _match(token) {\n        return this._root.match(token);\n    }\n    match(languageId, token) {\n        // The cache contains the metadata without the language bits set.\n        let result = this._cache.get(token);\n        if (typeof result === 'undefined') {\n            const rule = this._match(token);\n            const standardToken = toStandardTokenType(token);\n            result = (rule.metadata\n                | (standardToken << 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */)) >>> 0;\n            this._cache.set(token, result);\n        }\n        return (result\n            | (languageId << 0 /* MetadataConsts.LANGUAGEID_OFFSET */)) >>> 0;\n    }\n}\nconst STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|regexp)\\b/;\nexport function toStandardTokenType(tokenType) {\n    const m = tokenType.match(STANDARD_TOKEN_TYPE_REGEXP);\n    if (!m) {\n        return 0 /* StandardTokenType.Other */;\n    }\n    switch (m[1]) {\n        case 'comment':\n            return 1 /* StandardTokenType.Comment */;\n        case 'string':\n            return 2 /* StandardTokenType.String */;\n        case 'regex':\n            return 3 /* StandardTokenType.RegEx */;\n        case 'regexp':\n            return 3 /* StandardTokenType.RegEx */;\n    }\n    throw new Error('Unexpected match for standard token type!');\n}\nexport function strcmp(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n}\nexport class ThemeTrieElementRule {\n    constructor(fontStyle, foreground, background) {\n        this._themeTrieElementRuleBrand = undefined;\n        this._fontStyle = fontStyle;\n        this._foreground = foreground;\n        this._background = background;\n        this.metadata = ((this._fontStyle << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n            | (this._foreground << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n            | (this._background << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\n    }\n    clone() {\n        return new ThemeTrieElementRule(this._fontStyle, this._foreground, this._background);\n    }\n    acceptOverwrite(fontStyle, foreground, background) {\n        if (fontStyle !== -1 /* FontStyle.NotSet */) {\n            this._fontStyle = fontStyle;\n        }\n        if (foreground !== 0 /* ColorId.None */) {\n            this._foreground = foreground;\n        }\n        if (background !== 0 /* ColorId.None */) {\n            this._background = background;\n        }\n        this.metadata = ((this._fontStyle << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n            | (this._foreground << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n            | (this._background << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\n    }\n}\nexport class ThemeTrieElement {\n    constructor(mainRule) {\n        this._themeTrieElementBrand = undefined;\n        this._mainRule = mainRule;\n        this._children = new Map();\n    }\n    match(token) {\n        if (token === '') {\n            return this._mainRule;\n        }\n        const dotIndex = token.indexOf('.');\n        let head;\n        let tail;\n        if (dotIndex === -1) {\n            head = token;\n            tail = '';\n        }\n        else {\n            head = token.substring(0, dotIndex);\n            tail = token.substring(dotIndex + 1);\n        }\n        const child = this._children.get(head);\n        if (typeof child !== 'undefined') {\n            return child.match(tail);\n        }\n        return this._mainRule;\n    }\n    insert(token, fontStyle, foreground, background) {\n        if (token === '') {\n            // Merge into the main rule\n            this._mainRule.acceptOverwrite(fontStyle, foreground, background);\n            return;\n        }\n        const dotIndex = token.indexOf('.');\n        let head;\n        let tail;\n        if (dotIndex === -1) {\n            head = token;\n            tail = '';\n        }\n        else {\n            head = token.substring(0, dotIndex);\n            tail = token.substring(dotIndex + 1);\n        }\n        let child = this._children.get(head);\n        if (typeof child === 'undefined') {\n            child = new ThemeTrieElement(this._mainRule.clone());\n            this._children.set(head, child);\n        }\n        child.insert(tail, fontStyle, foreground, background);\n    }\n}\nexport function generateTokensCSSForColorMap(colorMap) {\n    const rules = [];\n    for (let i = 1, len = colorMap.length; i < len; i++) {\n        const color = colorMap[i];\n        rules[i] = `.mtk${i} { color: ${color}; }`;\n    }\n    rules.push('.mtki { font-style: italic; }');\n    rules.push('.mtkb { font-weight: bold; }');\n    rules.push('.mtku { text-decoration: underline; text-underline-position: under; }');\n    rules.push('.mtks { text-decoration: line-through; }');\n    rules.push('.mtks.mtku { text-decoration: underline line-through; text-underline-position: under; }');\n    return rules.join('\\n');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { NullState, nullTokenizeEncoded } from './nullTokenize.js';\nconst fallback = {\n    getInitialState: () => NullState,\n    tokenizeEncoded: (buffer, hasEOL, state) => nullTokenizeEncoded(0 /* LanguageId.Null */, state)\n};\nexport function tokenizeToString(languageService, text, languageId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!languageId) {\n            return _tokenizeToString(text, languageService.languageIdCodec, fallback);\n        }\n        const tokenizationSupport = yield TokenizationRegistry.getOrCreate(languageId);\n        return _tokenizeToString(text, languageService.languageIdCodec, tokenizationSupport || fallback);\n    });\n}\nexport function tokenizeLineToHTML(text, viewLineTokens, colorMap, startOffset, endOffset, tabSize, useNbsp) {\n    let result = `<div>`;\n    let charIndex = startOffset;\n    let tabsCharDelta = 0;\n    let prevIsSpace = true;\n    for (let tokenIndex = 0, tokenCount = viewLineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\n        const tokenEndIndex = viewLineTokens.getEndOffset(tokenIndex);\n        if (tokenEndIndex <= startOffset) {\n            continue;\n        }\n        let partContent = '';\n        for (; charIndex < tokenEndIndex && charIndex < endOffset; charIndex++) {\n            const charCode = text.charCodeAt(charIndex);\n            switch (charCode) {\n                case 9 /* CharCode.Tab */: {\n                    let insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n                    tabsCharDelta += insertSpacesCount - 1;\n                    while (insertSpacesCount > 0) {\n                        if (useNbsp && prevIsSpace) {\n                            partContent += '&#160;';\n                            prevIsSpace = false;\n                        }\n                        else {\n                            partContent += ' ';\n                            prevIsSpace = true;\n                        }\n                        insertSpacesCount--;\n                    }\n                    break;\n                }\n                case 60 /* CharCode.LessThan */:\n                    partContent += '&lt;';\n                    prevIsSpace = false;\n                    break;\n                case 62 /* CharCode.GreaterThan */:\n                    partContent += '&gt;';\n                    prevIsSpace = false;\n                    break;\n                case 38 /* CharCode.Ampersand */:\n                    partContent += '&amp;';\n                    prevIsSpace = false;\n                    break;\n                case 0 /* CharCode.Null */:\n                    partContent += '&#00;';\n                    prevIsSpace = false;\n                    break;\n                case 65279 /* CharCode.UTF8_BOM */:\n                case 8232 /* CharCode.LINE_SEPARATOR */:\n                case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n                case 133 /* CharCode.NEXT_LINE */:\n                    partContent += '\\ufffd';\n                    prevIsSpace = false;\n                    break;\n                case 13 /* CharCode.CarriageReturn */:\n                    // zero width space, because carriage return would introduce a line break\n                    partContent += '&#8203';\n                    prevIsSpace = false;\n                    break;\n                case 32 /* CharCode.Space */:\n                    if (useNbsp && prevIsSpace) {\n                        partContent += '&#160;';\n                        prevIsSpace = false;\n                    }\n                    else {\n                        partContent += ' ';\n                        prevIsSpace = true;\n                    }\n                    break;\n                default:\n                    partContent += String.fromCharCode(charCode);\n                    prevIsSpace = false;\n            }\n        }\n        result += `<span style=\"${viewLineTokens.getInlineStyle(tokenIndex, colorMap)}\">${partContent}</span>`;\n        if (tokenEndIndex > endOffset || charIndex >= endOffset) {\n            break;\n        }\n    }\n    result += `</div>`;\n    return result;\n}\nexport function _tokenizeToString(text, languageIdCodec, tokenizationSupport) {\n    let result = `<div class=\"monaco-tokenized-source\">`;\n    const lines = strings.splitLines(text);\n    let currentState = tokenizationSupport.getInitialState();\n    for (let i = 0, len = lines.length; i < len; i++) {\n        const line = lines[i];\n        if (i > 0) {\n            result += `<br/>`;\n        }\n        const tokenizationResult = tokenizationSupport.tokenizeEncoded(line, true, currentState);\n        LineTokens.convertToEndOffset(tokenizationResult.tokens, line.length);\n        const lineTokens = new LineTokens(tokenizationResult.tokens, line, languageIdCodec);\n        const viewLineTokens = lineTokens.inflate();\n        let startOffset = 0;\n        for (let j = 0, lenJ = viewLineTokens.getCount(); j < lenJ; j++) {\n            const type = viewLineTokens.getClassName(j);\n            const endIndex = viewLineTokens.getEndOffset(j);\n            result += `<span class=\"${type}\">${strings.escape(line.substring(startOffset, endIndex))}</span>`;\n            startOffset = endIndex;\n        }\n        currentState = tokenizationResult.endState;\n    }\n    result += `</div>`;\n    return result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../base/common/objects.js';\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nexport var OverviewRulerLane;\n(function (OverviewRulerLane) {\n    OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\n    OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\n    OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\n    OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\n})(OverviewRulerLane || (OverviewRulerLane = {}));\n/**\n * Vertical Lane in the glyph margin of the editor.\n */\nexport var GlyphMarginLane;\n(function (GlyphMarginLane) {\n    GlyphMarginLane[GlyphMarginLane[\"Left\"] = 1] = \"Left\";\n    GlyphMarginLane[GlyphMarginLane[\"Right\"] = 2] = \"Right\";\n})(GlyphMarginLane || (GlyphMarginLane = {}));\n/**\n * Position in the minimap to render the decoration.\n */\nexport var MinimapPosition;\n(function (MinimapPosition) {\n    MinimapPosition[MinimapPosition[\"Inline\"] = 1] = \"Inline\";\n    MinimapPosition[MinimapPosition[\"Gutter\"] = 2] = \"Gutter\";\n})(MinimapPosition || (MinimapPosition = {}));\nexport var InjectedTextCursorStops;\n(function (InjectedTextCursorStops) {\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Both\"] = 0] = \"Both\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Right\"] = 1] = \"Right\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Left\"] = 2] = \"Left\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"None\"] = 3] = \"None\";\n})(InjectedTextCursorStops || (InjectedTextCursorStops = {}));\nexport class TextModelResolvedOptions {\n    get originalIndentSize() {\n        return this._indentSizeIsTabSize ? 'tabSize' : this.indentSize;\n    }\n    /**\n     * @internal\n     */\n    constructor(src) {\n        this._textModelResolvedOptionsBrand = undefined;\n        this.tabSize = Math.max(1, src.tabSize | 0);\n        if (src.indentSize === 'tabSize') {\n            this.indentSize = this.tabSize;\n            this._indentSizeIsTabSize = true;\n        }\n        else {\n            this.indentSize = Math.max(1, src.indentSize | 0);\n            this._indentSizeIsTabSize = false;\n        }\n        this.insertSpaces = Boolean(src.insertSpaces);\n        this.defaultEOL = src.defaultEOL | 0;\n        this.trimAutoWhitespace = Boolean(src.trimAutoWhitespace);\n        this.bracketPairColorizationOptions = src.bracketPairColorizationOptions;\n    }\n    /**\n     * @internal\n     */\n    equals(other) {\n        return (this.tabSize === other.tabSize\n            && this._indentSizeIsTabSize === other._indentSizeIsTabSize\n            && this.indentSize === other.indentSize\n            && this.insertSpaces === other.insertSpaces\n            && this.defaultEOL === other.defaultEOL\n            && this.trimAutoWhitespace === other.trimAutoWhitespace\n            && equals(this.bracketPairColorizationOptions, other.bracketPairColorizationOptions));\n    }\n    /**\n     * @internal\n     */\n    createChangeEvent(newOpts) {\n        return {\n            tabSize: this.tabSize !== newOpts.tabSize,\n            indentSize: this.indentSize !== newOpts.indentSize,\n            insertSpaces: this.insertSpaces !== newOpts.insertSpaces,\n            trimAutoWhitespace: this.trimAutoWhitespace !== newOpts.trimAutoWhitespace,\n        };\n    }\n}\nexport class FindMatch {\n    /**\n     * @internal\n     */\n    constructor(range, matches) {\n        this._findMatchBrand = undefined;\n        this.range = range;\n        this.matches = matches;\n    }\n}\n/**\n * @internal\n */\nexport function isITextSnapshot(obj) {\n    return (obj && typeof obj.read === 'function');\n}\n/**\n * @internal\n */\nexport class ValidAnnotatedEditOperation {\n    constructor(identifier, range, text, forceMoveMarkers, isAutoWhitespaceEdit, _isTracked) {\n        this.identifier = identifier;\n        this.range = range;\n        this.text = text;\n        this.forceMoveMarkers = forceMoveMarkers;\n        this.isAutoWhitespaceEdit = isAutoWhitespaceEdit;\n        this._isTracked = _isTracked;\n    }\n}\n/**\n * @internal\n */\nexport class SearchData {\n    constructor(regex, wordSeparators, simpleSearch) {\n        this.regex = regex;\n        this.wordSeparators = wordSeparators;\n        this.simpleSearch = simpleSearch;\n    }\n}\n/**\n * @internal\n */\nexport class ApplyEditsResult {\n    constructor(reverseEdits, changes, trimAutoWhitespaceLineNumbers) {\n        this.reverseEdits = reverseEdits;\n        this.changes = changes;\n        this.trimAutoWhitespaceLineNumbers = trimAutoWhitespaceLineNumbers;\n    }\n}\n/**\n * @internal\n */\nexport function shouldSynchronizeModel(model) {\n    return (!model.isTooLargeForSyncing() && !model.isForSimpleWidget);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { BracketInfo, BracketPairWithMinIndentationInfo } from '../../../textModelBracketPairs.js';\nimport { TextEditInfo } from './beforeEditPositionMapper.js';\nimport { LanguageAgnosticBracketTokens } from './brackets.js';\nimport { lengthAdd, lengthGreaterThanEqual, lengthLessThan, lengthLessThanEqual, lengthsToRange, lengthZero, positionToLength, toLength } from './length.js';\nimport { parseDocument } from './parser.js';\nimport { DenseKeyProvider } from './smallImmutableSet.js';\nimport { FastTokenizer, TextBufferTokenizer } from './tokenizer.js';\nimport { CallbackIterable } from '../../../../../base/common/arrays.js';\nimport { combineTextEditInfos } from './combineTextEditInfos.js';\nexport class BracketPairsTree extends Disposable {\n    didLanguageChange(languageId) {\n        return this.brackets.didLanguageChange(languageId);\n    }\n    constructor(textModel, getLanguageConfiguration) {\n        super();\n        this.textModel = textModel;\n        this.getLanguageConfiguration = getLanguageConfiguration;\n        this.didChangeEmitter = new Emitter();\n        this.denseKeyProvider = new DenseKeyProvider();\n        this.brackets = new LanguageAgnosticBracketTokens(this.denseKeyProvider, this.getLanguageConfiguration);\n        this.onDidChange = this.didChangeEmitter.event;\n        this.queuedTextEditsForInitialAstWithoutTokens = [];\n        this.queuedTextEdits = [];\n        if (!textModel.tokenization.hasTokens) {\n            const brackets = this.brackets.getSingleLanguageBracketTokens(this.textModel.getLanguageId());\n            const tokenizer = new FastTokenizer(this.textModel.getValue(), brackets);\n            this.initialAstWithoutTokens = parseDocument(tokenizer, [], undefined, true);\n            this.astWithTokens = this.initialAstWithoutTokens;\n        }\n        else if (textModel.tokenization.backgroundTokenizationState === 2 /* BackgroundTokenizationState.Completed */) {\n            // Skip the initial ast, as there is no flickering.\n            // Directly create the tree with token information.\n            this.initialAstWithoutTokens = undefined;\n            this.astWithTokens = this.parseDocumentFromTextBuffer([], undefined, false);\n        }\n        else {\n            // We missed some token changes already, so we cannot use the fast tokenizer + delta increments\n            this.initialAstWithoutTokens = this.parseDocumentFromTextBuffer([], undefined, true);\n            this.astWithTokens = this.initialAstWithoutTokens;\n        }\n    }\n    //#region TextModel events\n    handleDidChangeBackgroundTokenizationState() {\n        if (this.textModel.tokenization.backgroundTokenizationState === 2 /* BackgroundTokenizationState.Completed */) {\n            const wasUndefined = this.initialAstWithoutTokens === undefined;\n            // Clear the initial tree as we can use the tree with token information now.\n            this.initialAstWithoutTokens = undefined;\n            if (!wasUndefined) {\n                this.didChangeEmitter.fire();\n            }\n        }\n    }\n    handleDidChangeTokens({ ranges }) {\n        const edits = ranges.map(r => new TextEditInfo(toLength(r.fromLineNumber - 1, 0), toLength(r.toLineNumber, 0), toLength(r.toLineNumber - r.fromLineNumber + 1, 0)));\n        this.handleEdits(edits, true);\n        if (!this.initialAstWithoutTokens) {\n            this.didChangeEmitter.fire();\n        }\n    }\n    handleContentChanged(change) {\n        const edits = TextEditInfo.fromModelContentChanges(change.changes);\n        this.handleEdits(edits, false);\n    }\n    handleEdits(edits, tokenChange) {\n        // Lazily queue the edits and only apply them when the tree is accessed.\n        const result = combineTextEditInfos(this.queuedTextEdits, edits);\n        this.queuedTextEdits = result;\n        if (this.initialAstWithoutTokens && !tokenChange) {\n            this.queuedTextEditsForInitialAstWithoutTokens = combineTextEditInfos(this.queuedTextEditsForInitialAstWithoutTokens, edits);\n        }\n    }\n    //#endregion\n    flushQueue() {\n        if (this.queuedTextEdits.length > 0) {\n            this.astWithTokens = this.parseDocumentFromTextBuffer(this.queuedTextEdits, this.astWithTokens, false);\n            this.queuedTextEdits = [];\n        }\n        if (this.queuedTextEditsForInitialAstWithoutTokens.length > 0) {\n            if (this.initialAstWithoutTokens) {\n                this.initialAstWithoutTokens = this.parseDocumentFromTextBuffer(this.queuedTextEditsForInitialAstWithoutTokens, this.initialAstWithoutTokens, false);\n            }\n            this.queuedTextEditsForInitialAstWithoutTokens = [];\n        }\n    }\n    /**\n     * @pure (only if isPure = true)\n    */\n    parseDocumentFromTextBuffer(edits, previousAst, immutable) {\n        // Is much faster if `isPure = false`.\n        const isPure = false;\n        const previousAstClone = isPure ? previousAst === null || previousAst === void 0 ? void 0 : previousAst.deepClone() : previousAst;\n        const tokenizer = new TextBufferTokenizer(this.textModel, this.brackets);\n        const result = parseDocument(tokenizer, edits, previousAstClone, immutable);\n        return result;\n    }\n    getBracketsInRange(range, onlyColorizedBrackets) {\n        this.flushQueue();\n        const startOffset = toLength(range.startLineNumber - 1, range.startColumn - 1);\n        const endOffset = toLength(range.endLineNumber - 1, range.endColumn - 1);\n        return new CallbackIterable(cb => {\n            const node = this.initialAstWithoutTokens || this.astWithTokens;\n            collectBrackets(node, lengthZero, node.length, startOffset, endOffset, cb, 0, 0, new Map(), onlyColorizedBrackets);\n        });\n    }\n    getBracketPairsInRange(range, includeMinIndentation) {\n        this.flushQueue();\n        const startLength = positionToLength(range.getStartPosition());\n        const endLength = positionToLength(range.getEndPosition());\n        return new CallbackIterable(cb => {\n            const node = this.initialAstWithoutTokens || this.astWithTokens;\n            const context = new CollectBracketPairsContext(cb, includeMinIndentation, this.textModel);\n            collectBracketPairs(node, lengthZero, node.length, startLength, endLength, context, 0, new Map());\n        });\n    }\n    getFirstBracketAfter(position) {\n        this.flushQueue();\n        const node = this.initialAstWithoutTokens || this.astWithTokens;\n        return getFirstBracketAfter(node, lengthZero, node.length, positionToLength(position));\n    }\n    getFirstBracketBefore(position) {\n        this.flushQueue();\n        const node = this.initialAstWithoutTokens || this.astWithTokens;\n        return getFirstBracketBefore(node, lengthZero, node.length, positionToLength(position));\n    }\n}\nfunction getFirstBracketBefore(node, nodeOffsetStart, nodeOffsetEnd, position) {\n    if (node.kind === 4 /* AstNodeKind.List */ || node.kind === 2 /* AstNodeKind.Pair */) {\n        const lengths = [];\n        for (const child of node.children) {\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            lengths.push({ nodeOffsetStart, nodeOffsetEnd });\n            nodeOffsetStart = nodeOffsetEnd;\n        }\n        for (let i = lengths.length - 1; i >= 0; i--) {\n            const { nodeOffsetStart, nodeOffsetEnd } = lengths[i];\n            if (lengthLessThan(nodeOffsetStart, position)) {\n                const result = getFirstBracketBefore(node.children[i], nodeOffsetStart, nodeOffsetEnd, position);\n                if (result) {\n                    return result;\n                }\n            }\n        }\n        return null;\n    }\n    else if (node.kind === 3 /* AstNodeKind.UnexpectedClosingBracket */) {\n        return null;\n    }\n    else if (node.kind === 1 /* AstNodeKind.Bracket */) {\n        const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n        return {\n            bracketInfo: node.bracketInfo,\n            range\n        };\n    }\n    return null;\n}\nfunction getFirstBracketAfter(node, nodeOffsetStart, nodeOffsetEnd, position) {\n    if (node.kind === 4 /* AstNodeKind.List */ || node.kind === 2 /* AstNodeKind.Pair */) {\n        for (const child of node.children) {\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            if (lengthLessThan(position, nodeOffsetEnd)) {\n                const result = getFirstBracketAfter(child, nodeOffsetStart, nodeOffsetEnd, position);\n                if (result) {\n                    return result;\n                }\n            }\n            nodeOffsetStart = nodeOffsetEnd;\n        }\n        return null;\n    }\n    else if (node.kind === 3 /* AstNodeKind.UnexpectedClosingBracket */) {\n        return null;\n    }\n    else if (node.kind === 1 /* AstNodeKind.Bracket */) {\n        const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n        return {\n            bracketInfo: node.bracketInfo,\n            range\n        };\n    }\n    return null;\n}\nfunction collectBrackets(node, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, push, level, nestingLevelOfEqualBracketType, levelPerBracketType, onlyColorizedBrackets, parentPairIsIncomplete = false) {\n    if (level > 200) {\n        return true;\n    }\n    whileLoop: while (true) {\n        switch (node.kind) {\n            case 4 /* AstNodeKind.List */: {\n                const childCount = node.childrenLength;\n                for (let i = 0; i < childCount; i++) {\n                    const child = node.getChild(i);\n                    if (!child) {\n                        continue;\n                    }\n                    nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n                    if (lengthLessThanEqual(nodeOffsetStart, endOffset) &&\n                        lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                        const childEndsAfterEnd = lengthGreaterThanEqual(nodeOffsetEnd, endOffset);\n                        if (childEndsAfterEnd) {\n                            // No child after this child in the requested window, don't recurse\n                            node = child;\n                            continue whileLoop;\n                        }\n                        const shouldContinue = collectBrackets(child, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, push, level, 0, levelPerBracketType, onlyColorizedBrackets);\n                        if (!shouldContinue) {\n                            return false;\n                        }\n                    }\n                    nodeOffsetStart = nodeOffsetEnd;\n                }\n                return true;\n            }\n            case 2 /* AstNodeKind.Pair */: {\n                const colorize = !onlyColorizedBrackets || !node.closingBracket || node.closingBracket.bracketInfo.closesColorized(node.openingBracket.bracketInfo);\n                let levelPerBracket = 0;\n                if (levelPerBracketType) {\n                    let existing = levelPerBracketType.get(node.openingBracket.text);\n                    if (existing === undefined) {\n                        existing = 0;\n                    }\n                    levelPerBracket = existing;\n                    if (colorize) {\n                        existing++;\n                        levelPerBracketType.set(node.openingBracket.text, existing);\n                    }\n                }\n                const childCount = node.childrenLength;\n                for (let i = 0; i < childCount; i++) {\n                    const child = node.getChild(i);\n                    if (!child) {\n                        continue;\n                    }\n                    nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n                    if (lengthLessThanEqual(nodeOffsetStart, endOffset) &&\n                        lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                        const childEndsAfterEnd = lengthGreaterThanEqual(nodeOffsetEnd, endOffset);\n                        if (childEndsAfterEnd && child.kind !== 1 /* AstNodeKind.Bracket */) {\n                            // No child after this child in the requested window, don't recurse\n                            // Don't do this for brackets because of unclosed/unopened brackets\n                            node = child;\n                            if (colorize) {\n                                level++;\n                                nestingLevelOfEqualBracketType = levelPerBracket + 1;\n                            }\n                            else {\n                                nestingLevelOfEqualBracketType = levelPerBracket;\n                            }\n                            continue whileLoop;\n                        }\n                        if (colorize || child.kind !== 1 /* AstNodeKind.Bracket */ || !node.closingBracket) {\n                            const shouldContinue = collectBrackets(child, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, push, colorize ? level + 1 : level, colorize ? levelPerBracket + 1 : levelPerBracket, levelPerBracketType, onlyColorizedBrackets, !node.closingBracket);\n                            if (!shouldContinue) {\n                                return false;\n                            }\n                        }\n                    }\n                    nodeOffsetStart = nodeOffsetEnd;\n                }\n                levelPerBracketType === null || levelPerBracketType === void 0 ? void 0 : levelPerBracketType.set(node.openingBracket.text, levelPerBracket);\n                return true;\n            }\n            case 3 /* AstNodeKind.UnexpectedClosingBracket */: {\n                const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n                return push(new BracketInfo(range, level - 1, 0, true));\n            }\n            case 1 /* AstNodeKind.Bracket */: {\n                const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n                return push(new BracketInfo(range, level - 1, nestingLevelOfEqualBracketType - 1, parentPairIsIncomplete));\n            }\n            case 0 /* AstNodeKind.Text */:\n                return true;\n        }\n    }\n}\nclass CollectBracketPairsContext {\n    constructor(push, includeMinIndentation, textModel) {\n        this.push = push;\n        this.includeMinIndentation = includeMinIndentation;\n        this.textModel = textModel;\n    }\n}\nfunction collectBracketPairs(node, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, context, level, levelPerBracketType) {\n    var _a;\n    if (level > 200) {\n        return true;\n    }\n    let shouldContinue = true;\n    if (node.kind === 2 /* AstNodeKind.Pair */) {\n        let levelPerBracket = 0;\n        if (levelPerBracketType) {\n            let existing = levelPerBracketType.get(node.openingBracket.text);\n            if (existing === undefined) {\n                existing = 0;\n            }\n            levelPerBracket = existing;\n            existing++;\n            levelPerBracketType.set(node.openingBracket.text, existing);\n        }\n        const openingBracketEnd = lengthAdd(nodeOffsetStart, node.openingBracket.length);\n        let minIndentation = -1;\n        if (context.includeMinIndentation) {\n            minIndentation = node.computeMinIndentation(nodeOffsetStart, context.textModel);\n        }\n        shouldContinue = context.push(new BracketPairWithMinIndentationInfo(lengthsToRange(nodeOffsetStart, nodeOffsetEnd), lengthsToRange(nodeOffsetStart, openingBracketEnd), node.closingBracket\n            ? lengthsToRange(lengthAdd(openingBracketEnd, ((_a = node.child) === null || _a === void 0 ? void 0 : _a.length) || lengthZero), nodeOffsetEnd)\n            : undefined, level, levelPerBracket, node, minIndentation));\n        nodeOffsetStart = openingBracketEnd;\n        if (shouldContinue && node.child) {\n            const child = node.child;\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            if (lengthLessThanEqual(nodeOffsetStart, endOffset) &&\n                lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                shouldContinue = collectBracketPairs(child, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, context, level + 1, levelPerBracketType);\n                if (!shouldContinue) {\n                    return false;\n                }\n            }\n        }\n        levelPerBracketType === null || levelPerBracketType === void 0 ? void 0 : levelPerBracketType.set(node.openingBracket.text, levelPerBracket);\n    }\n    else {\n        let curOffset = nodeOffsetStart;\n        for (const child of node.children) {\n            const childOffset = curOffset;\n            curOffset = lengthAdd(curOffset, child.length);\n            if (lengthLessThanEqual(childOffset, endOffset) &&\n                lengthLessThanEqual(startOffset, curOffset)) {\n                shouldContinue = collectBracketPairs(child, childOffset, curOffset, startOffset, endOffset, context, level, levelPerBracketType);\n                if (!shouldContinue) {\n                    return false;\n                }\n            }\n        }\n    }\n    return shouldContinue;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CallbackIterable, compareBy } from '../../../../base/common/arrays.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { Range } from '../../core/range.js';\nimport { ignoreBracketsInToken } from '../../languages/supports.js';\nimport { BracketsUtils } from '../../languages/supports/richEditBrackets.js';\nimport { BracketPairsTree } from './bracketPairsTree/bracketPairsTree.js';\nexport class BracketPairsTextModelPart extends Disposable {\n    get canBuildAST() {\n        const maxSupportedDocumentLength = /* max lines */ 50000 * /* average column count */ 100;\n        return this.textModel.getValueLength() <= maxSupportedDocumentLength;\n    }\n    constructor(textModel, languageConfigurationService) {\n        super();\n        this.textModel = textModel;\n        this.languageConfigurationService = languageConfigurationService;\n        this.bracketPairsTree = this._register(new MutableDisposable());\n        this.onDidChangeEmitter = new Emitter();\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.bracketsRequested = false;\n        this._register(this.languageConfigurationService.onDidChange(e => {\n            var _a;\n            if (!e.languageId || ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.didLanguageChange(e.languageId))) {\n                this.bracketPairsTree.clear();\n                this.updateBracketPairsTree();\n            }\n        }));\n    }\n    //#region TextModel events\n    handleDidChangeOptions(e) {\n        this.bracketPairsTree.clear();\n        this.updateBracketPairsTree();\n    }\n    handleDidChangeLanguage(e) {\n        this.bracketPairsTree.clear();\n        this.updateBracketPairsTree();\n    }\n    handleDidChangeContent(change) {\n        var _a;\n        (_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.handleContentChanged(change);\n    }\n    handleDidChangeBackgroundTokenizationState() {\n        var _a;\n        (_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.handleDidChangeBackgroundTokenizationState();\n    }\n    handleDidChangeTokens(e) {\n        var _a;\n        (_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.handleDidChangeTokens(e);\n    }\n    //#endregion\n    updateBracketPairsTree() {\n        if (this.bracketsRequested && this.canBuildAST) {\n            if (!this.bracketPairsTree.value) {\n                const store = new DisposableStore();\n                this.bracketPairsTree.value = createDisposableRef(store.add(new BracketPairsTree(this.textModel, (languageId) => {\n                    return this.languageConfigurationService.getLanguageConfiguration(languageId);\n                })), store);\n                store.add(this.bracketPairsTree.value.object.onDidChange(e => this.onDidChangeEmitter.fire(e)));\n                this.onDidChangeEmitter.fire();\n            }\n        }\n        else {\n            if (this.bracketPairsTree.value) {\n                this.bracketPairsTree.clear();\n                // Important: Don't call fire if there was no change!\n                this.onDidChangeEmitter.fire();\n            }\n        }\n    }\n    /**\n     * Returns all bracket pairs that intersect the given range.\n     * The result is sorted by the start position.\n    */\n    getBracketPairsInRange(range) {\n        var _a;\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getBracketPairsInRange(range, false)) || CallbackIterable.empty;\n    }\n    getBracketPairsInRangeWithMinIndentation(range) {\n        var _a;\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getBracketPairsInRange(range, true)) || CallbackIterable.empty;\n    }\n    getBracketsInRange(range, onlyColorizedBrackets = false) {\n        var _a;\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getBracketsInRange(range, onlyColorizedBrackets)) || CallbackIterable.empty;\n    }\n    findMatchingBracketUp(_bracket, _position, maxDuration) {\n        const position = this.textModel.validatePosition(_position);\n        const languageId = this.textModel.getLanguageIdAtPosition(position.lineNumber, position.column);\n        if (this.canBuildAST) {\n            const closingBracketInfo = this.languageConfigurationService\n                .getLanguageConfiguration(languageId)\n                .bracketsNew.getClosingBracketInfo(_bracket);\n            if (!closingBracketInfo) {\n                return null;\n            }\n            const bracketPair = this.getBracketPairsInRange(Range.fromPositions(_position, _position)).findLast((b) => closingBracketInfo.closes(b.openingBracketInfo));\n            if (bracketPair) {\n                return bracketPair.openingBracketRange;\n            }\n            return null;\n        }\n        else {\n            // Fallback to old bracket matching code:\n            const bracket = _bracket.toLowerCase();\n            const bracketsSupport = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n            if (!bracketsSupport) {\n                return null;\n            }\n            const data = bracketsSupport.textIsBracket[bracket];\n            if (!data) {\n                return null;\n            }\n            return stripBracketSearchCanceled(this._findMatchingBracketUp(data, position, createTimeBasedContinueBracketSearchPredicate(maxDuration)));\n        }\n    }\n    matchBracket(position, maxDuration) {\n        if (this.canBuildAST) {\n            const bracketPair = this.getBracketPairsInRange(Range.fromPositions(position, position)).filter((item) => item.closingBracketRange !== undefined &&\n                (item.openingBracketRange.containsPosition(position) ||\n                    item.closingBracketRange.containsPosition(position))).findLastMaxBy(compareBy((item) => item.openingBracketRange.containsPosition(position)\n                ? item.openingBracketRange\n                : item.closingBracketRange, Range.compareRangesUsingStarts));\n            if (bracketPair) {\n                return [bracketPair.openingBracketRange, bracketPair.closingBracketRange];\n            }\n            return null;\n        }\n        else {\n            // Fallback to old bracket matching code:\n            const continueSearchPredicate = createTimeBasedContinueBracketSearchPredicate(maxDuration);\n            return this._matchBracket(this.textModel.validatePosition(position), continueSearchPredicate);\n        }\n    }\n    _establishBracketSearchOffsets(position, lineTokens, modeBrackets, tokenIndex) {\n        const tokenCount = lineTokens.getCount();\n        const currentLanguageId = lineTokens.getLanguageId(tokenIndex);\n        // limit search to not go before `maxBracketLength`\n        let searchStartOffset = Math.max(0, position.column - 1 - modeBrackets.maxBracketLength);\n        for (let i = tokenIndex - 1; i >= 0; i--) {\n            const tokenEndOffset = lineTokens.getEndOffset(i);\n            if (tokenEndOffset <= searchStartOffset) {\n                break;\n            }\n            if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i)) || lineTokens.getLanguageId(i) !== currentLanguageId) {\n                searchStartOffset = tokenEndOffset;\n                break;\n            }\n        }\n        // limit search to not go after `maxBracketLength`\n        let searchEndOffset = Math.min(lineTokens.getLineContent().length, position.column - 1 + modeBrackets.maxBracketLength);\n        for (let i = tokenIndex + 1; i < tokenCount; i++) {\n            const tokenStartOffset = lineTokens.getStartOffset(i);\n            if (tokenStartOffset >= searchEndOffset) {\n                break;\n            }\n            if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i)) || lineTokens.getLanguageId(i) !== currentLanguageId) {\n                searchEndOffset = tokenStartOffset;\n                break;\n            }\n        }\n        return { searchStartOffset, searchEndOffset };\n    }\n    _matchBracket(position, continueSearchPredicate) {\n        const lineNumber = position.lineNumber;\n        const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n        const lineText = this.textModel.getLineContent(lineNumber);\n        const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        if (tokenIndex < 0) {\n            return null;\n        }\n        const currentModeBrackets = this.languageConfigurationService.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).brackets;\n        // check that the token is not to be ignored\n        if (currentModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex))) {\n            let { searchStartOffset, searchEndOffset } = this._establishBracketSearchOffsets(position, lineTokens, currentModeBrackets, tokenIndex);\n            // it might be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\n            // `bestResult` will contain the most right-side result\n            let bestResult = null;\n            while (true) {\n                const foundBracket = BracketsUtils.findNextBracketInRange(currentModeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!foundBracket) {\n                    // there are no more brackets in this text\n                    break;\n                }\n                // check that we didn't hit a bracket too far away from position\n                if (foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n                    const foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n                    const r = this._matchFoundBracket(foundBracket, currentModeBrackets.textIsBracket[foundBracketText], currentModeBrackets.textIsOpenBracket[foundBracketText], continueSearchPredicate);\n                    if (r) {\n                        if (r instanceof BracketSearchCanceled) {\n                            return null;\n                        }\n                        bestResult = r;\n                    }\n                }\n                searchStartOffset = foundBracket.endColumn - 1;\n            }\n            if (bestResult) {\n                return bestResult;\n            }\n        }\n        // If position is in between two tokens, try also looking in the previous token\n        if (tokenIndex > 0 && lineTokens.getStartOffset(tokenIndex) === position.column - 1) {\n            const prevTokenIndex = tokenIndex - 1;\n            const prevModeBrackets = this.languageConfigurationService.getLanguageConfiguration(lineTokens.getLanguageId(prevTokenIndex)).brackets;\n            // check that previous token is not to be ignored\n            if (prevModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(prevTokenIndex))) {\n                const { searchStartOffset, searchEndOffset } = this._establishBracketSearchOffsets(position, lineTokens, prevModeBrackets, prevTokenIndex);\n                const foundBracket = BracketsUtils.findPrevBracketInRange(prevModeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                // check that we didn't hit a bracket too far away from position\n                if (foundBracket && foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n                    const foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n                    const r = this._matchFoundBracket(foundBracket, prevModeBrackets.textIsBracket[foundBracketText], prevModeBrackets.textIsOpenBracket[foundBracketText], continueSearchPredicate);\n                    if (r) {\n                        if (r instanceof BracketSearchCanceled) {\n                            return null;\n                        }\n                        return r;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    _matchFoundBracket(foundBracket, data, isOpen, continueSearchPredicate) {\n        if (!data) {\n            return null;\n        }\n        const matched = (isOpen\n            ? this._findMatchingBracketDown(data, foundBracket.getEndPosition(), continueSearchPredicate)\n            : this._findMatchingBracketUp(data, foundBracket.getStartPosition(), continueSearchPredicate));\n        if (!matched) {\n            return null;\n        }\n        if (matched instanceof BracketSearchCanceled) {\n            return matched;\n        }\n        return [foundBracket, matched];\n    }\n    _findMatchingBracketUp(bracket, position, continueSearchPredicate) {\n        // console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n        const languageId = bracket.languageId;\n        const reversedBracketRegex = bracket.reversedRegex;\n        let count = -1;\n        let totalCallCount = 0;\n        const searchPrevMatchingBracketInRange = (lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                if (bracket.isOpen(hitText)) {\n                    count++;\n                }\n                else if (bracket.isClose(hitText)) {\n                    count--;\n                }\n                if (count === 0) {\n                    return r;\n                }\n                searchEndOffset = r.startColumn - 1;\n            }\n            return null;\n        };\n        for (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = tokenCount - 1;\n            let searchStartOffset = lineText.length;\n            let searchEndOffset = lineText.length;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex >= 0; tokenIndex--) {\n                const searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchStartOffset\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return r;\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return r;\n                }\n            }\n        }\n        return null;\n    }\n    _findMatchingBracketDown(bracket, position, continueSearchPredicate) {\n        // console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n        const languageId = bracket.languageId;\n        const bracketRegex = bracket.forwardRegex;\n        let count = 1;\n        let totalCallCount = 0;\n        const searchNextMatchingBracketInRange = (lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findNextBracketInRange(bracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                if (bracket.isOpen(hitText)) {\n                    count++;\n                }\n                else if (bracket.isClose(hitText)) {\n                    count--;\n                }\n                if (count === 0) {\n                    return r;\n                }\n                searchStartOffset = r.endColumn - 1;\n            }\n            return null;\n        };\n        const lineCount = this.textModel.getLineCount();\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return r;\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return r;\n                }\n            }\n        }\n        return null;\n    }\n    findPrevBracket(_position) {\n        var _a;\n        const position = this.textModel.validatePosition(_position);\n        if (this.canBuildAST) {\n            this.bracketsRequested = true;\n            this.updateBracketPairsTree();\n            return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getFirstBracketBefore(position)) || null;\n        }\n        let languageId = null;\n        let modeBrackets = null;\n        let bracketConfig = null;\n        for (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = tokenCount - 1;\n            let searchStartOffset = lineText.length;\n            let searchEndOffset = lineText.length;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex >= 0; tokenIndex--) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (modeBrackets && bracketConfig && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchStartOffset\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return this._toFoundBracket(bracketConfig, r);\n                }\n            }\n        }\n        return null;\n    }\n    findNextBracket(_position) {\n        var _a;\n        const position = this.textModel.validatePosition(_position);\n        if (this.canBuildAST) {\n            this.bracketsRequested = true;\n            this.updateBracketPairsTree();\n            return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getFirstBracketAfter(position)) || null;\n        }\n        const lineCount = this.textModel.getLineCount();\n        let languageId = null;\n        let modeBrackets = null;\n        let bracketConfig = null;\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return this._toFoundBracket(bracketConfig, r);\n                }\n            }\n        }\n        return null;\n    }\n    findEnclosingBrackets(_position, maxDuration) {\n        const position = this.textModel.validatePosition(_position);\n        if (this.canBuildAST) {\n            const range = Range.fromPositions(position);\n            const bracketPair = this.getBracketPairsInRange(Range.fromPositions(position, position)).findLast((item) => item.closingBracketRange !== undefined && item.range.strictContainsRange(range));\n            if (bracketPair) {\n                return [bracketPair.openingBracketRange, bracketPair.closingBracketRange];\n            }\n            return null;\n        }\n        const continueSearchPredicate = createTimeBasedContinueBracketSearchPredicate(maxDuration);\n        const lineCount = this.textModel.getLineCount();\n        const savedCounts = new Map();\n        let counts = [];\n        const resetCounts = (languageId, modeBrackets) => {\n            if (!savedCounts.has(languageId)) {\n                const tmp = [];\n                for (let i = 0, len = modeBrackets ? modeBrackets.brackets.length : 0; i < len; i++) {\n                    tmp[i] = 0;\n                }\n                savedCounts.set(languageId, tmp);\n            }\n            counts = savedCounts.get(languageId);\n        };\n        let totalCallCount = 0;\n        const searchInRange = (modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                const bracket = modeBrackets.textIsBracket[hitText];\n                if (bracket) {\n                    if (bracket.isOpen(hitText)) {\n                        counts[bracket.index]++;\n                    }\n                    else if (bracket.isClose(hitText)) {\n                        counts[bracket.index]--;\n                    }\n                    if (counts[bracket.index] === -1) {\n                        return this._matchFoundBracket(r, bracket, false, continueSearchPredicate);\n                    }\n                }\n                searchStartOffset = r.endColumn - 1;\n            }\n            return null;\n        };\n        let languageId = null;\n        let modeBrackets = null;\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    resetCounts(languageId, modeBrackets);\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return stripBracketSearchCanceled(r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    resetCounts(languageId, modeBrackets);\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return stripBracketSearchCanceled(r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return stripBracketSearchCanceled(r);\n                }\n            }\n        }\n        return null;\n    }\n    _toFoundBracket(bracketConfig, r) {\n        if (!r) {\n            return null;\n        }\n        let text = this.textModel.getValueInRange(r);\n        text = text.toLowerCase();\n        const bracketInfo = bracketConfig.getBracketInfo(text);\n        if (!bracketInfo) {\n            return null;\n        }\n        return {\n            range: r,\n            bracketInfo\n        };\n    }\n}\nfunction createDisposableRef(object, disposable) {\n    return {\n        object,\n        dispose: () => disposable === null || disposable === void 0 ? void 0 : disposable.dispose(),\n    };\n}\nfunction createTimeBasedContinueBracketSearchPredicate(maxDuration) {\n    if (typeof maxDuration === 'undefined') {\n        return () => true;\n    }\n    else {\n        const startTime = Date.now();\n        return () => {\n            return (Date.now() - startTime <= maxDuration);\n        };\n    }\n}\nclass BracketSearchCanceled {\n    constructor() {\n        this._searchCanceledBrand = undefined;\n    }\n}\nBracketSearchCanceled.INSTANCE = new BracketSearchCanceled();\nfunction stripBracketSearchCanceled(result) {\n    if (result instanceof BracketSearchCanceled) {\n        return null;\n    }\n    return result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BugIndicatingError } from '../../../../../base/common/errors.js';\nimport { CursorColumns } from '../../../core/cursorColumns.js';\nimport { lengthAdd, lengthGetLineCount, lengthToObj, lengthZero } from './length.js';\nimport { SmallImmutableSet } from './smallImmutableSet.js';\n/**\n * The base implementation for all AST nodes.\n*/\nclass BaseAstNode {\n    /**\n     * The length of the entire node, which should equal the sum of lengths of all children.\n    */\n    get length() {\n        return this._length;\n    }\n    constructor(length) {\n        this._length = length;\n    }\n}\n/**\n * Represents a bracket pair including its child (e.g. `{ ... }`).\n * Might be unclosed.\n * Immutable, if all children are immutable.\n*/\nexport class PairAstNode extends BaseAstNode {\n    static create(openingBracket, child, closingBracket) {\n        let length = openingBracket.length;\n        if (child) {\n            length = lengthAdd(length, child.length);\n        }\n        if (closingBracket) {\n            length = lengthAdd(length, closingBracket.length);\n        }\n        return new PairAstNode(length, openingBracket, child, closingBracket, child ? child.missingOpeningBracketIds : SmallImmutableSet.getEmpty());\n    }\n    get kind() {\n        return 2 /* AstNodeKind.Pair */;\n    }\n    get listHeight() {\n        return 0;\n    }\n    get childrenLength() {\n        return 3;\n    }\n    getChild(idx) {\n        switch (idx) {\n            case 0: return this.openingBracket;\n            case 1: return this.child;\n            case 2: return this.closingBracket;\n        }\n        throw new Error('Invalid child index');\n    }\n    /**\n     * Avoid using this property, it allocates an array!\n    */\n    get children() {\n        const result = [];\n        result.push(this.openingBracket);\n        if (this.child) {\n            result.push(this.child);\n        }\n        if (this.closingBracket) {\n            result.push(this.closingBracket);\n        }\n        return result;\n    }\n    constructor(length, openingBracket, child, closingBracket, missingOpeningBracketIds) {\n        super(length);\n        this.openingBracket = openingBracket;\n        this.child = child;\n        this.closingBracket = closingBracket;\n        this.missingOpeningBracketIds = missingOpeningBracketIds;\n    }\n    canBeReused(openBracketIds) {\n        if (this.closingBracket === null) {\n            // Unclosed pair ast nodes only\n            // end at the end of the document\n            // or when a parent node is closed.\n            // This could be improved:\n            // Only return false if some next token is neither \"undefined\" nor a bracket that closes a parent.\n            return false;\n        }\n        if (openBracketIds.intersects(this.missingOpeningBracketIds)) {\n            return false;\n        }\n        return true;\n    }\n    deepClone() {\n        return new PairAstNode(this.length, this.openingBracket.deepClone(), this.child && this.child.deepClone(), this.closingBracket && this.closingBracket.deepClone(), this.missingOpeningBracketIds);\n    }\n    computeMinIndentation(offset, textModel) {\n        return this.child ? this.child.computeMinIndentation(lengthAdd(offset, this.openingBracket.length), textModel) : Number.MAX_SAFE_INTEGER;\n    }\n}\nexport class ListAstNode extends BaseAstNode {\n    /**\n     * This method uses more memory-efficient list nodes that can only store 2 or 3 children.\n    */\n    static create23(item1, item2, item3, immutable = false) {\n        let length = item1.length;\n        let missingBracketIds = item1.missingOpeningBracketIds;\n        if (item1.listHeight !== item2.listHeight) {\n            throw new Error('Invalid list heights');\n        }\n        length = lengthAdd(length, item2.length);\n        missingBracketIds = missingBracketIds.merge(item2.missingOpeningBracketIds);\n        if (item3) {\n            if (item1.listHeight !== item3.listHeight) {\n                throw new Error('Invalid list heights');\n            }\n            length = lengthAdd(length, item3.length);\n            missingBracketIds = missingBracketIds.merge(item3.missingOpeningBracketIds);\n        }\n        return immutable\n            ? new Immutable23ListAstNode(length, item1.listHeight + 1, item1, item2, item3, missingBracketIds)\n            : new TwoThreeListAstNode(length, item1.listHeight + 1, item1, item2, item3, missingBracketIds);\n    }\n    static getEmpty() {\n        return new ImmutableArrayListAstNode(lengthZero, 0, [], SmallImmutableSet.getEmpty());\n    }\n    get kind() {\n        return 4 /* AstNodeKind.List */;\n    }\n    get missingOpeningBracketIds() {\n        return this._missingOpeningBracketIds;\n    }\n    /**\n     * Use ListAstNode.create.\n    */\n    constructor(length, listHeight, _missingOpeningBracketIds) {\n        super(length);\n        this.listHeight = listHeight;\n        this._missingOpeningBracketIds = _missingOpeningBracketIds;\n        this.cachedMinIndentation = -1;\n    }\n    throwIfImmutable() {\n        // NOOP\n    }\n    makeLastElementMutable() {\n        this.throwIfImmutable();\n        const childCount = this.childrenLength;\n        if (childCount === 0) {\n            return undefined;\n        }\n        const lastChild = this.getChild(childCount - 1);\n        const mutable = lastChild.kind === 4 /* AstNodeKind.List */ ? lastChild.toMutable() : lastChild;\n        if (lastChild !== mutable) {\n            this.setChild(childCount - 1, mutable);\n        }\n        return mutable;\n    }\n    makeFirstElementMutable() {\n        this.throwIfImmutable();\n        const childCount = this.childrenLength;\n        if (childCount === 0) {\n            return undefined;\n        }\n        const firstChild = this.getChild(0);\n        const mutable = firstChild.kind === 4 /* AstNodeKind.List */ ? firstChild.toMutable() : firstChild;\n        if (firstChild !== mutable) {\n            this.setChild(0, mutable);\n        }\n        return mutable;\n    }\n    canBeReused(openBracketIds) {\n        if (openBracketIds.intersects(this.missingOpeningBracketIds)) {\n            return false;\n        }\n        if (this.childrenLength === 0) {\n            // Don't reuse empty lists.\n            return false;\n        }\n        let lastChild = this;\n        while (lastChild.kind === 4 /* AstNodeKind.List */) {\n            const lastLength = lastChild.childrenLength;\n            if (lastLength === 0) {\n                // Empty lists should never be contained in other lists.\n                throw new BugIndicatingError();\n            }\n            lastChild = lastChild.getChild(lastLength - 1);\n        }\n        return lastChild.canBeReused(openBracketIds);\n    }\n    handleChildrenChanged() {\n        this.throwIfImmutable();\n        const count = this.childrenLength;\n        let length = this.getChild(0).length;\n        let unopenedBrackets = this.getChild(0).missingOpeningBracketIds;\n        for (let i = 1; i < count; i++) {\n            const child = this.getChild(i);\n            length = lengthAdd(length, child.length);\n            unopenedBrackets = unopenedBrackets.merge(child.missingOpeningBracketIds);\n        }\n        this._length = length;\n        this._missingOpeningBracketIds = unopenedBrackets;\n        this.cachedMinIndentation = -1;\n    }\n    computeMinIndentation(offset, textModel) {\n        if (this.cachedMinIndentation !== -1) {\n            return this.cachedMinIndentation;\n        }\n        let minIndentation = Number.MAX_SAFE_INTEGER;\n        let childOffset = offset;\n        for (let i = 0; i < this.childrenLength; i++) {\n            const child = this.getChild(i);\n            if (child) {\n                minIndentation = Math.min(minIndentation, child.computeMinIndentation(childOffset, textModel));\n                childOffset = lengthAdd(childOffset, child.length);\n            }\n        }\n        this.cachedMinIndentation = minIndentation;\n        return minIndentation;\n    }\n}\nclass TwoThreeListAstNode extends ListAstNode {\n    get childrenLength() {\n        return this._item3 !== null ? 3 : 2;\n    }\n    getChild(idx) {\n        switch (idx) {\n            case 0: return this._item1;\n            case 1: return this._item2;\n            case 2: return this._item3;\n        }\n        throw new Error('Invalid child index');\n    }\n    setChild(idx, node) {\n        switch (idx) {\n            case 0:\n                this._item1 = node;\n                return;\n            case 1:\n                this._item2 = node;\n                return;\n            case 2:\n                this._item3 = node;\n                return;\n        }\n        throw new Error('Invalid child index');\n    }\n    get children() {\n        return this._item3 ? [this._item1, this._item2, this._item3] : [this._item1, this._item2];\n    }\n    get item1() {\n        return this._item1;\n    }\n    get item2() {\n        return this._item2;\n    }\n    get item3() {\n        return this._item3;\n    }\n    constructor(length, listHeight, _item1, _item2, _item3, missingOpeningBracketIds) {\n        super(length, listHeight, missingOpeningBracketIds);\n        this._item1 = _item1;\n        this._item2 = _item2;\n        this._item3 = _item3;\n    }\n    deepClone() {\n        return new TwoThreeListAstNode(this.length, this.listHeight, this._item1.deepClone(), this._item2.deepClone(), this._item3 ? this._item3.deepClone() : null, this.missingOpeningBracketIds);\n    }\n    appendChildOfSameHeight(node) {\n        if (this._item3) {\n            throw new Error('Cannot append to a full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        this._item3 = node;\n        this.handleChildrenChanged();\n    }\n    unappendChild() {\n        if (!this._item3) {\n            throw new Error('Cannot remove from a non-full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        const result = this._item3;\n        this._item3 = null;\n        this.handleChildrenChanged();\n        return result;\n    }\n    prependChildOfSameHeight(node) {\n        if (this._item3) {\n            throw new Error('Cannot prepend to a full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        this._item3 = this._item2;\n        this._item2 = this._item1;\n        this._item1 = node;\n        this.handleChildrenChanged();\n    }\n    unprependChild() {\n        if (!this._item3) {\n            throw new Error('Cannot remove from a non-full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        const result = this._item1;\n        this._item1 = this._item2;\n        this._item2 = this._item3;\n        this._item3 = null;\n        this.handleChildrenChanged();\n        return result;\n    }\n    toMutable() {\n        return this;\n    }\n}\n/**\n * Immutable, if all children are immutable.\n*/\nclass Immutable23ListAstNode extends TwoThreeListAstNode {\n    toMutable() {\n        return new TwoThreeListAstNode(this.length, this.listHeight, this.item1, this.item2, this.item3, this.missingOpeningBracketIds);\n    }\n    throwIfImmutable() {\n        throw new Error('this instance is immutable');\n    }\n}\n/**\n * For debugging.\n*/\nclass ArrayListAstNode extends ListAstNode {\n    get childrenLength() {\n        return this._children.length;\n    }\n    getChild(idx) {\n        return this._children[idx];\n    }\n    setChild(idx, child) {\n        this._children[idx] = child;\n    }\n    get children() {\n        return this._children;\n    }\n    constructor(length, listHeight, _children, missingOpeningBracketIds) {\n        super(length, listHeight, missingOpeningBracketIds);\n        this._children = _children;\n    }\n    deepClone() {\n        const children = new Array(this._children.length);\n        for (let i = 0; i < this._children.length; i++) {\n            children[i] = this._children[i].deepClone();\n        }\n        return new ArrayListAstNode(this.length, this.listHeight, children, this.missingOpeningBracketIds);\n    }\n    appendChildOfSameHeight(node) {\n        this.throwIfImmutable();\n        this._children.push(node);\n        this.handleChildrenChanged();\n    }\n    unappendChild() {\n        this.throwIfImmutable();\n        const item = this._children.pop();\n        this.handleChildrenChanged();\n        return item;\n    }\n    prependChildOfSameHeight(node) {\n        this.throwIfImmutable();\n        this._children.unshift(node);\n        this.handleChildrenChanged();\n    }\n    unprependChild() {\n        this.throwIfImmutable();\n        const item = this._children.shift();\n        this.handleChildrenChanged();\n        return item;\n    }\n    toMutable() {\n        return this;\n    }\n}\n/**\n * Immutable, if all children are immutable.\n*/\nclass ImmutableArrayListAstNode extends ArrayListAstNode {\n    toMutable() {\n        return new ArrayListAstNode(this.length, this.listHeight, [...this.children], this.missingOpeningBracketIds);\n    }\n    throwIfImmutable() {\n        throw new Error('this instance is immutable');\n    }\n}\nconst emptyArray = [];\nclass ImmutableLeafAstNode extends BaseAstNode {\n    get listHeight() {\n        return 0;\n    }\n    get childrenLength() {\n        return 0;\n    }\n    getChild(idx) {\n        return null;\n    }\n    get children() {\n        return emptyArray;\n    }\n    deepClone() {\n        return this;\n    }\n}\nexport class TextAstNode extends ImmutableLeafAstNode {\n    get kind() {\n        return 0 /* AstNodeKind.Text */;\n    }\n    get missingOpeningBracketIds() {\n        return SmallImmutableSet.getEmpty();\n    }\n    canBeReused(_openedBracketIds) {\n        return true;\n    }\n    computeMinIndentation(offset, textModel) {\n        const start = lengthToObj(offset);\n        // Text ast nodes don't have partial indentation (ensured by the tokenizer).\n        // Thus, if this text node does not start at column 0, the first line cannot have any indentation at all.\n        const startLineNumber = (start.columnCount === 0 ? start.lineCount : start.lineCount + 1) + 1;\n        const endLineNumber = lengthGetLineCount(lengthAdd(offset, this.length)) + 1;\n        let result = Number.MAX_SAFE_INTEGER;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const firstNonWsColumn = textModel.getLineFirstNonWhitespaceColumn(lineNumber);\n            const lineContent = textModel.getLineContent(lineNumber);\n            if (firstNonWsColumn === 0) {\n                continue;\n            }\n            const visibleColumn = CursorColumns.visibleColumnFromColumn(lineContent, firstNonWsColumn, textModel.getOptions().tabSize);\n            result = Math.min(result, visibleColumn);\n        }\n        return result;\n    }\n}\nexport class BracketAstNode extends ImmutableLeafAstNode {\n    static create(length, bracketInfo, bracketIds) {\n        const node = new BracketAstNode(length, bracketInfo, bracketIds);\n        return node;\n    }\n    get kind() {\n        return 1 /* AstNodeKind.Bracket */;\n    }\n    get missingOpeningBracketIds() {\n        return SmallImmutableSet.getEmpty();\n    }\n    constructor(length, bracketInfo, \n    /**\n     * In case of a opening bracket, this is the id of the opening bracket.\n     * In case of a closing bracket, this contains the ids of all opening brackets it can close.\n    */\n    bracketIds) {\n        super(length);\n        this.bracketInfo = bracketInfo;\n        this.bracketIds = bracketIds;\n    }\n    get text() {\n        return this.bracketInfo.bracketText;\n    }\n    get languageId() {\n        return this.bracketInfo.languageId;\n    }\n    canBeReused(_openedBracketIds) {\n        // These nodes could be reused,\n        // but not in a general way.\n        // Their parent may be reused.\n        return false;\n    }\n    computeMinIndentation(offset, textModel) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n}\nexport class InvalidBracketAstNode extends ImmutableLeafAstNode {\n    get kind() {\n        return 3 /* AstNodeKind.UnexpectedClosingBracket */;\n    }\n    constructor(closingBrackets, length) {\n        super(length);\n        this.missingOpeningBracketIds = closingBrackets;\n    }\n    canBeReused(openedBracketIds) {\n        return !openedBracketIds.intersects(this.missingOpeningBracketIds);\n    }\n    computeMinIndentation(offset, textModel) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../../core/range.js';\nimport { lengthAdd, lengthDiffNonNegative, lengthLessThanEqual, lengthOfString, lengthToObj, positionToLength, toLength } from './length.js';\nexport class TextEditInfo {\n    static fromModelContentChanges(changes) {\n        // Must be sorted in ascending order\n        const edits = changes.map(c => {\n            const range = Range.lift(c.range);\n            return new TextEditInfo(positionToLength(range.getStartPosition()), positionToLength(range.getEndPosition()), lengthOfString(c.text));\n        }).reverse();\n        return edits;\n    }\n    constructor(startOffset, endOffset, newLength) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.newLength = newLength;\n    }\n    toString() {\n        return `[${lengthToObj(this.startOffset)}...${lengthToObj(this.endOffset)}) -> ${lengthToObj(this.newLength)}`;\n    }\n}\nexport class BeforeEditPositionMapper {\n    /**\n     * @param edits Must be sorted by offset in ascending order.\n    */\n    constructor(edits) {\n        this.nextEditIdx = 0;\n        this.deltaOldToNewLineCount = 0;\n        this.deltaOldToNewColumnCount = 0;\n        this.deltaLineIdxInOld = -1;\n        this.edits = edits.map(edit => TextEditInfoCache.from(edit));\n    }\n    /**\n     * @param offset Must be equal to or greater than the last offset this method has been called with.\n    */\n    getOffsetBeforeChange(offset) {\n        this.adjustNextEdit(offset);\n        return this.translateCurToOld(offset);\n    }\n    /**\n     * @param offset Must be equal to or greater than the last offset this method has been called with.\n     * Returns null if there is no edit anymore.\n    */\n    getDistanceToNextChange(offset) {\n        this.adjustNextEdit(offset);\n        const nextEdit = this.edits[this.nextEditIdx];\n        const nextChangeOffset = nextEdit ? this.translateOldToCur(nextEdit.offsetObj) : null;\n        if (nextChangeOffset === null) {\n            return null;\n        }\n        return lengthDiffNonNegative(offset, nextChangeOffset);\n    }\n    translateOldToCur(oldOffsetObj) {\n        if (oldOffsetObj.lineCount === this.deltaLineIdxInOld) {\n            return toLength(oldOffsetObj.lineCount + this.deltaOldToNewLineCount, oldOffsetObj.columnCount + this.deltaOldToNewColumnCount);\n        }\n        else {\n            return toLength(oldOffsetObj.lineCount + this.deltaOldToNewLineCount, oldOffsetObj.columnCount);\n        }\n    }\n    translateCurToOld(newOffset) {\n        const offsetObj = lengthToObj(newOffset);\n        if (offsetObj.lineCount - this.deltaOldToNewLineCount === this.deltaLineIdxInOld) {\n            return toLength(offsetObj.lineCount - this.deltaOldToNewLineCount, offsetObj.columnCount - this.deltaOldToNewColumnCount);\n        }\n        else {\n            return toLength(offsetObj.lineCount - this.deltaOldToNewLineCount, offsetObj.columnCount);\n        }\n    }\n    adjustNextEdit(offset) {\n        while (this.nextEditIdx < this.edits.length) {\n            const nextEdit = this.edits[this.nextEditIdx];\n            // After applying the edit, what is its end offset (considering all previous edits)?\n            const nextEditEndOffsetInCur = this.translateOldToCur(nextEdit.endOffsetAfterObj);\n            if (lengthLessThanEqual(nextEditEndOffsetInCur, offset)) {\n                // We are after the edit, skip it\n                this.nextEditIdx++;\n                const nextEditEndOffsetInCurObj = lengthToObj(nextEditEndOffsetInCur);\n                // Before applying the edit, what is its end offset (considering all previous edits)?\n                const nextEditEndOffsetBeforeInCurObj = lengthToObj(this.translateOldToCur(nextEdit.endOffsetBeforeObj));\n                const lineDelta = nextEditEndOffsetInCurObj.lineCount - nextEditEndOffsetBeforeInCurObj.lineCount;\n                this.deltaOldToNewLineCount += lineDelta;\n                const previousColumnDelta = this.deltaLineIdxInOld === nextEdit.endOffsetBeforeObj.lineCount ? this.deltaOldToNewColumnCount : 0;\n                const columnDelta = nextEditEndOffsetInCurObj.columnCount - nextEditEndOffsetBeforeInCurObj.columnCount;\n                this.deltaOldToNewColumnCount = previousColumnDelta + columnDelta;\n                this.deltaLineIdxInOld = nextEdit.endOffsetBeforeObj.lineCount;\n            }\n            else {\n                // We are in or before the edit.\n                break;\n            }\n        }\n    }\n}\nclass TextEditInfoCache {\n    static from(edit) {\n        return new TextEditInfoCache(edit.startOffset, edit.endOffset, edit.newLength);\n    }\n    constructor(startOffset, endOffset, textLength) {\n        this.endOffsetBeforeObj = lengthToObj(endOffset);\n        this.endOffsetAfterObj = lengthToObj(lengthAdd(startOffset, textLength));\n        this.offsetObj = lengthToObj(startOffset);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { escapeRegExpCharacters } from '../../../../../base/common/strings.js';\nimport { BracketAstNode } from './ast.js';\nimport { toLength } from './length.js';\nimport { identityKeyProvider, SmallImmutableSet } from './smallImmutableSet.js';\nimport { Token } from './tokenizer.js';\nexport class BracketTokens {\n    static createFromLanguage(configuration, denseKeyProvider) {\n        function getId(bracketInfo) {\n            return denseKeyProvider.getKey(`${bracketInfo.languageId}:::${bracketInfo.bracketText}`);\n        }\n        const map = new Map();\n        for (const openingBracket of configuration.bracketsNew.openingBrackets) {\n            const length = toLength(0, openingBracket.bracketText.length);\n            const openingTextId = getId(openingBracket);\n            const bracketIds = SmallImmutableSet.getEmpty().add(openingTextId, identityKeyProvider);\n            map.set(openingBracket.bracketText, new Token(length, 1 /* TokenKind.OpeningBracket */, openingTextId, bracketIds, BracketAstNode.create(length, openingBracket, bracketIds)));\n        }\n        for (const closingBracket of configuration.bracketsNew.closingBrackets) {\n            const length = toLength(0, closingBracket.bracketText.length);\n            let bracketIds = SmallImmutableSet.getEmpty();\n            const closingBrackets = closingBracket.getOpeningBrackets();\n            for (const bracket of closingBrackets) {\n                bracketIds = bracketIds.add(getId(bracket), identityKeyProvider);\n            }\n            map.set(closingBracket.bracketText, new Token(length, 2 /* TokenKind.ClosingBracket */, getId(closingBrackets[0]), bracketIds, BracketAstNode.create(length, closingBracket, bracketIds)));\n        }\n        return new BracketTokens(map);\n    }\n    constructor(map) {\n        this.map = map;\n        this.hasRegExp = false;\n        this._regExpGlobal = null;\n    }\n    getRegExpStr() {\n        if (this.isEmpty) {\n            return null;\n        }\n        else {\n            const keys = [...this.map.keys()];\n            keys.sort();\n            keys.reverse();\n            return keys.map(k => prepareBracketForRegExp(k)).join('|');\n        }\n    }\n    /**\n     * Returns null if there is no such regexp (because there are no brackets).\n    */\n    get regExpGlobal() {\n        if (!this.hasRegExp) {\n            const regExpStr = this.getRegExpStr();\n            this._regExpGlobal = regExpStr ? new RegExp(regExpStr, 'gi') : null;\n            this.hasRegExp = true;\n        }\n        return this._regExpGlobal;\n    }\n    getToken(value) {\n        return this.map.get(value.toLowerCase());\n    }\n    findClosingTokenText(openingBracketIds) {\n        for (const [closingText, info] of this.map) {\n            if (info.kind === 2 /* TokenKind.ClosingBracket */ && info.bracketIds.intersects(openingBracketIds)) {\n                return closingText;\n            }\n        }\n        return undefined;\n    }\n    get isEmpty() {\n        return this.map.size === 0;\n    }\n}\nfunction prepareBracketForRegExp(str) {\n    let escaped = escapeRegExpCharacters(str);\n    // These bracket pair delimiters start or end with letters\n    // see https://github.com/microsoft/vscode/issues/132162 https://github.com/microsoft/vscode/issues/150440\n    if (/^[\\w ]+/.test(str)) {\n        escaped = `\\\\b${escaped}`;\n    }\n    if (/[\\w ]+$/.test(str)) {\n        escaped = `${escaped}\\\\b`;\n    }\n    return escaped;\n}\nexport class LanguageAgnosticBracketTokens {\n    constructor(denseKeyProvider, getLanguageConfiguration) {\n        this.denseKeyProvider = denseKeyProvider;\n        this.getLanguageConfiguration = getLanguageConfiguration;\n        this.languageIdToBracketTokens = new Map();\n    }\n    didLanguageChange(languageId) {\n        // Report a change whenever the language configuration updates.\n        return this.languageIdToBracketTokens.has(languageId);\n    }\n    getSingleLanguageBracketTokens(languageId) {\n        let singleLanguageBracketTokens = this.languageIdToBracketTokens.get(languageId);\n        if (!singleLanguageBracketTokens) {\n            singleLanguageBracketTokens = BracketTokens.createFromLanguage(this.getLanguageConfiguration(languageId), this.denseKeyProvider);\n            this.languageIdToBracketTokens.set(languageId, singleLanguageBracketTokens);\n        }\n        return singleLanguageBracketTokens;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayQueue } from '../../../../../base/common/arrays.js';\nimport { TextEditInfo } from './beforeEditPositionMapper.js';\nimport { lengthAdd, lengthDiffNonNegative, lengthEquals, lengthIsZero, lengthToObj, lengthZero, sumLengths } from './length.js';\nexport function combineTextEditInfos(textEditInfoFirst, textEditInfoSecond) {\n    if (textEditInfoFirst.length === 0) {\n        return textEditInfoSecond;\n    }\n    if (textEditInfoSecond.length === 0) {\n        return textEditInfoFirst;\n    }\n    // s0: State before any edits\n    const s0ToS1Map = new ArrayQueue(toLengthMapping(textEditInfoFirst));\n    // s1: State after first edit, but before second edit\n    const s1ToS2Map = toLengthMapping(textEditInfoSecond);\n    s1ToS2Map.push({ modified: false, lengthBefore: undefined, lengthAfter: undefined }); // Copy everything from old to new\n    // s2: State after both edits\n    let curItem = s0ToS1Map.dequeue();\n    /**\n     * @param s1Length Use undefined for length \"infinity\"\n     */\n    function nextS0ToS1MapWithS1LengthOf(s1Length) {\n        if (s1Length === undefined) {\n            const arr = s0ToS1Map.takeWhile(v => true) || [];\n            if (curItem) {\n                arr.unshift(curItem);\n            }\n            return arr;\n        }\n        const result = [];\n        while (curItem && !lengthIsZero(s1Length)) {\n            const [item, remainingItem] = curItem.splitAt(s1Length);\n            result.push(item);\n            s1Length = lengthDiffNonNegative(item.lengthAfter, s1Length);\n            curItem = remainingItem !== null && remainingItem !== void 0 ? remainingItem : s0ToS1Map.dequeue();\n        }\n        if (!lengthIsZero(s1Length)) {\n            result.push(new LengthMapping(false, s1Length, s1Length));\n        }\n        return result;\n    }\n    const result = [];\n    function pushEdit(startOffset, endOffset, newLength) {\n        if (result.length > 0 && lengthEquals(result[result.length - 1].endOffset, startOffset)) {\n            const lastResult = result[result.length - 1];\n            result[result.length - 1] = new TextEditInfo(lastResult.startOffset, endOffset, lengthAdd(lastResult.newLength, newLength));\n        }\n        else {\n            result.push({ startOffset, endOffset, newLength });\n        }\n    }\n    let s0offset = lengthZero;\n    for (const s1ToS2 of s1ToS2Map) {\n        const s0ToS1Map = nextS0ToS1MapWithS1LengthOf(s1ToS2.lengthBefore);\n        if (s1ToS2.modified) {\n            const s0Length = sumLengths(s0ToS1Map, s => s.lengthBefore);\n            const s0EndOffset = lengthAdd(s0offset, s0Length);\n            pushEdit(s0offset, s0EndOffset, s1ToS2.lengthAfter);\n            s0offset = s0EndOffset;\n        }\n        else {\n            for (const s1 of s0ToS1Map) {\n                const s0startOffset = s0offset;\n                s0offset = lengthAdd(s0offset, s1.lengthBefore);\n                if (s1.modified) {\n                    pushEdit(s0startOffset, s0offset, s1.lengthAfter);\n                }\n            }\n        }\n    }\n    return result;\n}\nclass LengthMapping {\n    constructor(\n    /**\n     * If false, length before and length after equal.\n     */\n    modified, lengthBefore, lengthAfter) {\n        this.modified = modified;\n        this.lengthBefore = lengthBefore;\n        this.lengthAfter = lengthAfter;\n    }\n    splitAt(lengthAfter) {\n        const remainingLengthAfter = lengthDiffNonNegative(lengthAfter, this.lengthAfter);\n        if (lengthEquals(remainingLengthAfter, lengthZero)) {\n            return [this, undefined];\n        }\n        else if (this.modified) {\n            return [\n                new LengthMapping(this.modified, this.lengthBefore, lengthAfter),\n                new LengthMapping(this.modified, lengthZero, remainingLengthAfter)\n            ];\n        }\n        else {\n            return [\n                new LengthMapping(this.modified, lengthAfter, lengthAfter),\n                new LengthMapping(this.modified, remainingLengthAfter, remainingLengthAfter)\n            ];\n        }\n    }\n    toString() {\n        return `${this.modified ? 'M' : 'U'}:${lengthToObj(this.lengthBefore)} -> ${lengthToObj(this.lengthAfter)}`;\n    }\n}\nfunction toLengthMapping(textEditInfos) {\n    const result = [];\n    let lastOffset = lengthZero;\n    for (const textEditInfo of textEditInfos) {\n        const spaceLength = lengthDiffNonNegative(lastOffset, textEditInfo.startOffset);\n        if (!lengthIsZero(spaceLength)) {\n            result.push(new LengthMapping(false, spaceLength, spaceLength));\n        }\n        const lengthBefore = lengthDiffNonNegative(textEditInfo.startOffset, textEditInfo.endOffset);\n        result.push(new LengthMapping(true, lengthBefore, textEditInfo.newLength));\n        lastOffset = textEditInfo.endOffset;\n    }\n    return result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { splitLines } from '../../../../../base/common/strings.js';\nimport { Position } from '../../../core/position.js';\nimport { Range } from '../../../core/range.js';\n/**\n * Represents a non-negative length in terms of line and column count.\n * Prefer using {@link Length} for performance reasons.\n*/\nexport class LengthObj {\n    constructor(lineCount, columnCount) {\n        this.lineCount = lineCount;\n        this.columnCount = columnCount;\n    }\n    toLength() {\n        return toLength(this.lineCount, this.columnCount);\n    }\n    toString() {\n        return `${this.lineCount},${this.columnCount}`;\n    }\n}\nLengthObj.zero = new LengthObj(0, 0);\n/**\n * The end must be greater than or equal to the start.\n*/\nexport function lengthDiff(startLineCount, startColumnCount, endLineCount, endColumnCount) {\n    return (startLineCount !== endLineCount)\n        ? toLength(endLineCount - startLineCount, endColumnCount)\n        : toLength(0, endColumnCount - startColumnCount);\n}\nexport const lengthZero = 0;\nexport function lengthIsZero(length) {\n    return length === 0;\n}\n/*\n * We have 52 bits available in a JS number.\n * We use the upper 26 bits to store the line and the lower 26 bits to store the column.\n */\n///*\nconst factor = Math.pow(2, 26);\n/*/\nconst factor = 1000000;\n// */\nexport function toLength(lineCount, columnCount) {\n    // llllllllllllllllllllllllllcccccccccccccccccccccccccc (52 bits)\n    //       line count (26 bits)    column count (26 bits)\n    // If there is no overflow (all values/sums below 2^26 = 67108864),\n    // we have `toLength(lns1, cols1) + toLength(lns2, cols2) = toLength(lns1 + lns2, cols1 + cols2)`.\n    return (lineCount * factor + columnCount);\n}\nexport function lengthToObj(length) {\n    const l = length;\n    const lineCount = Math.floor(l / factor);\n    const columnCount = l - lineCount * factor;\n    return new LengthObj(lineCount, columnCount);\n}\nexport function lengthGetLineCount(length) {\n    return Math.floor(length / factor);\n}\n/**\n * Returns the amount of columns of the given length, assuming that it does not span any line.\n*/\nexport function lengthGetColumnCountIfZeroLineCount(length) {\n    return length;\n}\nexport function lengthAdd(l1, l2) {\n    let r = l1 + l2;\n    if (l2 >= factor) {\n        r = r - (l1 % factor);\n    }\n    return r;\n}\nexport function sumLengths(items, lengthFn) {\n    return items.reduce((a, b) => lengthAdd(a, lengthFn(b)), lengthZero);\n}\nexport function lengthEquals(length1, length2) {\n    return length1 === length2;\n}\n/**\n * Returns a non negative length `result` such that `lengthAdd(length1, result) = length2`, or zero if such length does not exist.\n */\nexport function lengthDiffNonNegative(length1, length2) {\n    const l1 = length1;\n    const l2 = length2;\n    const diff = l2 - l1;\n    if (diff <= 0) {\n        // line-count of length1 is higher than line-count of length2\n        // or they are equal and column-count of length1 is higher than column-count of length2\n        return lengthZero;\n    }\n    const lineCount1 = Math.floor(l1 / factor);\n    const lineCount2 = Math.floor(l2 / factor);\n    const colCount2 = l2 - lineCount2 * factor;\n    if (lineCount1 === lineCount2) {\n        const colCount1 = l1 - lineCount1 * factor;\n        return toLength(0, colCount2 - colCount1);\n    }\n    else {\n        return toLength(lineCount2 - lineCount1, colCount2);\n    }\n}\nexport function lengthLessThan(length1, length2) {\n    // First, compare line counts, then column counts.\n    return length1 < length2;\n}\nexport function lengthLessThanEqual(length1, length2) {\n    return length1 <= length2;\n}\nexport function lengthGreaterThanEqual(length1, length2) {\n    return length1 >= length2;\n}\nexport function lengthToPosition(length) {\n    const l = length;\n    const lineCount = Math.floor(l / factor);\n    const colCount = l - lineCount * factor;\n    return new Position(lineCount + 1, colCount + 1);\n}\nexport function positionToLength(position) {\n    return toLength(position.lineNumber - 1, position.column - 1);\n}\nexport function lengthsToRange(lengthStart, lengthEnd) {\n    const l = lengthStart;\n    const lineCount = Math.floor(l / factor);\n    const colCount = l - lineCount * factor;\n    const l2 = lengthEnd;\n    const lineCount2 = Math.floor(l2 / factor);\n    const colCount2 = l2 - lineCount2 * factor;\n    return new Range(lineCount + 1, colCount + 1, lineCount2 + 1, colCount2 + 1);\n}\nexport function lengthOfRange(range) {\n    if (range.startLineNumber === range.endLineNumber) {\n        return new LengthObj(0, range.endColumn - range.startColumn);\n    }\n    else {\n        return new LengthObj(range.endLineNumber - range.startLineNumber, range.endColumn - 1);\n    }\n}\nexport function lengthOfString(str) {\n    const lines = splitLines(str);\n    return toLength(lines.length - 1, lines[lines.length - 1].length);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ListAstNode } from './ast.js';\n/**\n * Concatenates a list of (2,3) AstNode's into a single (2,3) AstNode.\n * This mutates the items of the input array!\n * If all items have the same height, this method has runtime O(items.length).\n * Otherwise, it has runtime O(items.length * max(log(items.length), items.max(i => i.height))).\n*/\nexport function concat23Trees(items) {\n    if (items.length === 0) {\n        return null;\n    }\n    if (items.length === 1) {\n        return items[0];\n    }\n    let i = 0;\n    /**\n     * Reads nodes of same height and concatenates them to a single node.\n    */\n    function readNode() {\n        if (i >= items.length) {\n            return null;\n        }\n        const start = i;\n        const height = items[start].listHeight;\n        i++;\n        while (i < items.length && items[i].listHeight === height) {\n            i++;\n        }\n        if (i - start >= 2) {\n            return concat23TreesOfSameHeight(start === 0 && i === items.length ? items : items.slice(start, i), false);\n        }\n        else {\n            return items[start];\n        }\n    }\n    // The items might not have the same height.\n    // We merge all items by using a binary concat operator.\n    let first = readNode(); // There must be a first item\n    let second = readNode();\n    if (!second) {\n        return first;\n    }\n    for (let item = readNode(); item; item = readNode()) {\n        // Prefer concatenating smaller trees, as the runtime of concat depends on the tree height.\n        if (heightDiff(first, second) <= heightDiff(second, item)) {\n            first = concat(first, second);\n            second = item;\n        }\n        else {\n            second = concat(second, item);\n        }\n    }\n    const result = concat(first, second);\n    return result;\n}\nexport function concat23TreesOfSameHeight(items, createImmutableLists = false) {\n    if (items.length === 0) {\n        return null;\n    }\n    if (items.length === 1) {\n        return items[0];\n    }\n    let length = items.length;\n    // All trees have same height, just create parent nodes.\n    while (length > 3) {\n        const newLength = length >> 1;\n        for (let i = 0; i < newLength; i++) {\n            const j = i << 1;\n            items[i] = ListAstNode.create23(items[j], items[j + 1], j + 3 === length ? items[j + 2] : null, createImmutableLists);\n        }\n        length = newLength;\n    }\n    return ListAstNode.create23(items[0], items[1], length >= 3 ? items[2] : null, createImmutableLists);\n}\nfunction heightDiff(node1, node2) {\n    return Math.abs(node1.listHeight - node2.listHeight);\n}\nfunction concat(node1, node2) {\n    if (node1.listHeight === node2.listHeight) {\n        return ListAstNode.create23(node1, node2, null, false);\n    }\n    else if (node1.listHeight > node2.listHeight) {\n        // node1 is the tree we want to insert into\n        return append(node1, node2);\n    }\n    else {\n        return prepend(node2, node1);\n    }\n}\n/**\n * Appends the given node to the end of this (2,3) tree.\n * Returns the new root.\n*/\nfunction append(list, nodeToAppend) {\n    list = list.toMutable();\n    let curNode = list;\n    const parents = [];\n    let nodeToAppendOfCorrectHeight;\n    while (true) {\n        // assert nodeToInsert.listHeight <= curNode.listHeight\n        if (nodeToAppend.listHeight === curNode.listHeight) {\n            nodeToAppendOfCorrectHeight = nodeToAppend;\n            break;\n        }\n        // assert 0 <= nodeToInsert.listHeight < curNode.listHeight\n        if (curNode.kind !== 4 /* AstNodeKind.List */) {\n            throw new Error('unexpected');\n        }\n        parents.push(curNode);\n        // assert 2 <= curNode.childrenLength <= 3\n        curNode = curNode.makeLastElementMutable();\n    }\n    // assert nodeToAppendOfCorrectHeight!.listHeight === curNode.listHeight\n    for (let i = parents.length - 1; i >= 0; i--) {\n        const parent = parents[i];\n        if (nodeToAppendOfCorrectHeight) {\n            // Can we take the element?\n            if (parent.childrenLength >= 3) {\n                // assert parent.childrenLength === 3 && parent.listHeight === nodeToAppendOfCorrectHeight.listHeight + 1\n                // we need to split to maintain (2,3)-tree property.\n                // Send the third element + the new element to the parent.\n                nodeToAppendOfCorrectHeight = ListAstNode.create23(parent.unappendChild(), nodeToAppendOfCorrectHeight, null, false);\n            }\n            else {\n                parent.appendChildOfSameHeight(nodeToAppendOfCorrectHeight);\n                nodeToAppendOfCorrectHeight = undefined;\n            }\n        }\n        else {\n            parent.handleChildrenChanged();\n        }\n    }\n    if (nodeToAppendOfCorrectHeight) {\n        return ListAstNode.create23(list, nodeToAppendOfCorrectHeight, null, false);\n    }\n    else {\n        return list;\n    }\n}\n/**\n * Prepends the given node to the end of this (2,3) tree.\n * Returns the new root.\n*/\nfunction prepend(list, nodeToAppend) {\n    list = list.toMutable();\n    let curNode = list;\n    const parents = [];\n    // assert nodeToInsert.listHeight <= curNode.listHeight\n    while (nodeToAppend.listHeight !== curNode.listHeight) {\n        // assert 0 <= nodeToInsert.listHeight < curNode.listHeight\n        if (curNode.kind !== 4 /* AstNodeKind.List */) {\n            throw new Error('unexpected');\n        }\n        parents.push(curNode);\n        // assert 2 <= curNode.childrenFast.length <= 3\n        curNode = curNode.makeFirstElementMutable();\n    }\n    let nodeToPrependOfCorrectHeight = nodeToAppend;\n    // assert nodeToAppendOfCorrectHeight!.listHeight === curNode.listHeight\n    for (let i = parents.length - 1; i >= 0; i--) {\n        const parent = parents[i];\n        if (nodeToPrependOfCorrectHeight) {\n            // Can we take the element?\n            if (parent.childrenLength >= 3) {\n                // assert parent.childrenLength === 3 && parent.listHeight === nodeToAppendOfCorrectHeight.listHeight + 1\n                // we need to split to maintain (2,3)-tree property.\n                // Send the third element + the new element to the parent.\n                nodeToPrependOfCorrectHeight = ListAstNode.create23(nodeToPrependOfCorrectHeight, parent.unprependChild(), null, false);\n            }\n            else {\n                parent.prependChildOfSameHeight(nodeToPrependOfCorrectHeight);\n                nodeToPrependOfCorrectHeight = undefined;\n            }\n        }\n        else {\n            parent.handleChildrenChanged();\n        }\n    }\n    if (nodeToPrependOfCorrectHeight) {\n        return ListAstNode.create23(nodeToPrependOfCorrectHeight, list, null, false);\n    }\n    else {\n        return list;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { lengthAdd, lengthZero, lengthLessThan } from './length.js';\n/**\n * Allows to efficiently find a longest child at a given offset in a fixed node.\n * The requested offsets must increase monotonously.\n*/\nexport class NodeReader {\n    constructor(node) {\n        this.lastOffset = lengthZero;\n        this.nextNodes = [node];\n        this.offsets = [lengthZero];\n        this.idxs = [];\n    }\n    /**\n     * Returns the longest node at `offset` that satisfies the predicate.\n     * @param offset must be greater than or equal to the last offset this method has been called with!\n    */\n    readLongestNodeAt(offset, predicate) {\n        if (lengthLessThan(offset, this.lastOffset)) {\n            throw new Error('Invalid offset');\n        }\n        this.lastOffset = offset;\n        // Find the longest node of all those that are closest to the current offset.\n        while (true) {\n            const curNode = lastOrUndefined(this.nextNodes);\n            if (!curNode) {\n                return undefined;\n            }\n            const curNodeOffset = lastOrUndefined(this.offsets);\n            if (lengthLessThan(offset, curNodeOffset)) {\n                // The next best node is not here yet.\n                // The reader must advance before a cached node is hit.\n                return undefined;\n            }\n            if (lengthLessThan(curNodeOffset, offset)) {\n                // The reader is ahead of the current node.\n                if (lengthAdd(curNodeOffset, curNode.length) <= offset) {\n                    // The reader is after the end of the current node.\n                    this.nextNodeAfterCurrent();\n                }\n                else {\n                    // The reader is somewhere in the current node.\n                    const nextChildIdx = getNextChildIdx(curNode);\n                    if (nextChildIdx !== -1) {\n                        // Go to the first child and repeat.\n                        this.nextNodes.push(curNode.getChild(nextChildIdx));\n                        this.offsets.push(curNodeOffset);\n                        this.idxs.push(nextChildIdx);\n                    }\n                    else {\n                        // We don't have children\n                        this.nextNodeAfterCurrent();\n                    }\n                }\n            }\n            else {\n                // readerOffsetBeforeChange === curNodeOffset\n                if (predicate(curNode)) {\n                    this.nextNodeAfterCurrent();\n                    return curNode;\n                }\n                else {\n                    const nextChildIdx = getNextChildIdx(curNode);\n                    // look for shorter node\n                    if (nextChildIdx === -1) {\n                        // There is no shorter node.\n                        this.nextNodeAfterCurrent();\n                        return undefined;\n                    }\n                    else {\n                        // Descend into first child & repeat.\n                        this.nextNodes.push(curNode.getChild(nextChildIdx));\n                        this.offsets.push(curNodeOffset);\n                        this.idxs.push(nextChildIdx);\n                    }\n                }\n            }\n        }\n    }\n    // Navigates to the longest node that continues after the current node.\n    nextNodeAfterCurrent() {\n        while (true) {\n            const currentOffset = lastOrUndefined(this.offsets);\n            const currentNode = lastOrUndefined(this.nextNodes);\n            this.nextNodes.pop();\n            this.offsets.pop();\n            if (this.idxs.length === 0) {\n                // We just popped the root node, there is no next node.\n                break;\n            }\n            // Parent is not undefined, because idxs is not empty\n            const parent = lastOrUndefined(this.nextNodes);\n            const nextChildIdx = getNextChildIdx(parent, this.idxs[this.idxs.length - 1]);\n            if (nextChildIdx !== -1) {\n                this.nextNodes.push(parent.getChild(nextChildIdx));\n                this.offsets.push(lengthAdd(currentOffset, currentNode.length));\n                this.idxs[this.idxs.length - 1] = nextChildIdx;\n                break;\n            }\n            else {\n                this.idxs.pop();\n            }\n            // We fully consumed the parent.\n            // Current node is now parent, so call nextNodeAfterCurrent again\n        }\n    }\n}\nfunction getNextChildIdx(node, curIdx = -1) {\n    while (true) {\n        curIdx++;\n        if (curIdx >= node.childrenLength) {\n            return -1;\n        }\n        if (node.getChild(curIdx)) {\n            return curIdx;\n        }\n    }\n}\nfunction lastOrUndefined(arr) {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { InvalidBracketAstNode, ListAstNode, PairAstNode, TextAstNode } from './ast.js';\nimport { BeforeEditPositionMapper } from './beforeEditPositionMapper.js';\nimport { SmallImmutableSet } from './smallImmutableSet.js';\nimport { lengthIsZero, lengthLessThan } from './length.js';\nimport { concat23Trees, concat23TreesOfSameHeight } from './concat23Trees.js';\nimport { NodeReader } from './nodeReader.js';\n/**\n * Non incrementally built ASTs are immutable.\n*/\nexport function parseDocument(tokenizer, edits, oldNode, createImmutableLists) {\n    const parser = new Parser(tokenizer, edits, oldNode, createImmutableLists);\n    return parser.parseDocument();\n}\n/**\n * Non incrementally built ASTs are immutable.\n*/\nclass Parser {\n    constructor(tokenizer, edits, oldNode, createImmutableLists) {\n        this.tokenizer = tokenizer;\n        this.createImmutableLists = createImmutableLists;\n        this._itemsConstructed = 0;\n        this._itemsFromCache = 0;\n        if (oldNode && createImmutableLists) {\n            throw new Error('Not supported');\n        }\n        this.oldNodeReader = oldNode ? new NodeReader(oldNode) : undefined;\n        this.positionMapper = new BeforeEditPositionMapper(edits);\n    }\n    parseDocument() {\n        this._itemsConstructed = 0;\n        this._itemsFromCache = 0;\n        let result = this.parseList(SmallImmutableSet.getEmpty(), 0);\n        if (!result) {\n            result = ListAstNode.getEmpty();\n        }\n        return result;\n    }\n    parseList(openedBracketIds, level) {\n        const items = [];\n        while (true) {\n            let child = this.tryReadChildFromCache(openedBracketIds);\n            if (!child) {\n                const token = this.tokenizer.peek();\n                if (!token ||\n                    (token.kind === 2 /* TokenKind.ClosingBracket */ &&\n                        token.bracketIds.intersects(openedBracketIds))) {\n                    break;\n                }\n                child = this.parseChild(openedBracketIds, level + 1);\n            }\n            if (child.kind === 4 /* AstNodeKind.List */ && child.childrenLength === 0) {\n                continue;\n            }\n            items.push(child);\n        }\n        // When there is no oldNodeReader, all items are created from scratch and must have the same height.\n        const result = this.oldNodeReader ? concat23Trees(items) : concat23TreesOfSameHeight(items, this.createImmutableLists);\n        return result;\n    }\n    tryReadChildFromCache(openedBracketIds) {\n        if (this.oldNodeReader) {\n            const maxCacheableLength = this.positionMapper.getDistanceToNextChange(this.tokenizer.offset);\n            if (maxCacheableLength === null || !lengthIsZero(maxCacheableLength)) {\n                const cachedNode = this.oldNodeReader.readLongestNodeAt(this.positionMapper.getOffsetBeforeChange(this.tokenizer.offset), curNode => {\n                    // The edit could extend the ending token, thus we cannot re-use nodes that touch the edit.\n                    // If there is no edit anymore, we can re-use the node in any case.\n                    if (maxCacheableLength !== null && !lengthLessThan(curNode.length, maxCacheableLength)) {\n                        // Either the node contains edited text or touches edited text.\n                        // In the latter case, brackets might have been extended (`end` -> `ending`), so even touching nodes cannot be reused.\n                        return false;\n                    }\n                    const canBeReused = curNode.canBeReused(openedBracketIds);\n                    return canBeReused;\n                });\n                if (cachedNode) {\n                    this._itemsFromCache++;\n                    this.tokenizer.skip(cachedNode.length);\n                    return cachedNode;\n                }\n            }\n        }\n        return undefined;\n    }\n    parseChild(openedBracketIds, level) {\n        this._itemsConstructed++;\n        const token = this.tokenizer.read();\n        switch (token.kind) {\n            case 2 /* TokenKind.ClosingBracket */:\n                return new InvalidBracketAstNode(token.bracketIds, token.length);\n            case 0 /* TokenKind.Text */:\n                return token.astNode;\n            case 1 /* TokenKind.OpeningBracket */: {\n                if (level > 300) {\n                    // To prevent stack overflows\n                    return new TextAstNode(token.length);\n                }\n                const set = openedBracketIds.merge(token.bracketIds);\n                const child = this.parseList(set, level + 1);\n                const nextToken = this.tokenizer.peek();\n                if (nextToken &&\n                    nextToken.kind === 2 /* TokenKind.ClosingBracket */ &&\n                    (nextToken.bracketId === token.bracketId || nextToken.bracketIds.intersects(token.bracketIds))) {\n                    this.tokenizer.read();\n                    return PairAstNode.create(token.astNode, child, nextToken.astNode);\n                }\n                else {\n                    return PairAstNode.create(token.astNode, child, null);\n                }\n            }\n            default:\n                throw new Error('unexpected');\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst emptyArr = [];\n/**\n * Represents an immutable set that works best for a small number of elements (less than 32).\n * It uses bits to encode element membership efficiently.\n*/\nexport class SmallImmutableSet {\n    static create(items, additionalItems) {\n        if (items <= 128 && additionalItems.length === 0) {\n            // We create a cache of 128=2^7 elements to cover all sets with up to 7 (dense) elements.\n            let cached = SmallImmutableSet.cache[items];\n            if (!cached) {\n                cached = new SmallImmutableSet(items, additionalItems);\n                SmallImmutableSet.cache[items] = cached;\n            }\n            return cached;\n        }\n        return new SmallImmutableSet(items, additionalItems);\n    }\n    static getEmpty() {\n        return this.empty;\n    }\n    constructor(items, additionalItems) {\n        this.items = items;\n        this.additionalItems = additionalItems;\n    }\n    add(value, keyProvider) {\n        const key = keyProvider.getKey(value);\n        let idx = key >> 5; // divided by 32\n        if (idx === 0) {\n            // fast path\n            const newItem = (1 << key) | this.items;\n            if (newItem === this.items) {\n                return this;\n            }\n            return SmallImmutableSet.create(newItem, this.additionalItems);\n        }\n        idx--;\n        const newItems = this.additionalItems.slice(0);\n        while (newItems.length < idx) {\n            newItems.push(0);\n        }\n        newItems[idx] |= 1 << (key & 31);\n        return SmallImmutableSet.create(this.items, newItems);\n    }\n    merge(other) {\n        const merged = this.items | other.items;\n        if (this.additionalItems === emptyArr && other.additionalItems === emptyArr) {\n            // fast path\n            if (merged === this.items) {\n                return this;\n            }\n            if (merged === other.items) {\n                return other;\n            }\n            return SmallImmutableSet.create(merged, emptyArr);\n        }\n        // This can be optimized, but it's not a common case\n        const newItems = [];\n        for (let i = 0; i < Math.max(this.additionalItems.length, other.additionalItems.length); i++) {\n            const item1 = this.additionalItems[i] || 0;\n            const item2 = other.additionalItems[i] || 0;\n            newItems.push(item1 | item2);\n        }\n        return SmallImmutableSet.create(merged, newItems);\n    }\n    intersects(other) {\n        if ((this.items & other.items) !== 0) {\n            return true;\n        }\n        for (let i = 0; i < Math.min(this.additionalItems.length, other.additionalItems.length); i++) {\n            if ((this.additionalItems[i] & other.additionalItems[i]) !== 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nSmallImmutableSet.cache = new Array(129);\nSmallImmutableSet.empty = SmallImmutableSet.create(0, emptyArr);\nexport const identityKeyProvider = {\n    getKey(value) {\n        return value;\n    }\n};\n/**\n * Assigns values a unique incrementing key.\n*/\nexport class DenseKeyProvider {\n    constructor() {\n        this.items = new Map();\n    }\n    getKey(value) {\n        let existing = this.items.get(value);\n        if (existing === undefined) {\n            existing = this.items.size;\n            this.items.set(value, existing);\n        }\n        return existing;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { NotSupportedError } from '../../../../../base/common/errors.js';\nimport { TokenMetadata } from '../../../encodedTokenAttributes.js';\nimport { TextAstNode } from './ast.js';\nimport { lengthAdd, lengthDiff, lengthGetColumnCountIfZeroLineCount, lengthToObj, lengthZero, toLength } from './length.js';\nimport { SmallImmutableSet } from './smallImmutableSet.js';\nexport class Token {\n    constructor(length, kind, \n    /**\n     * If this token is an opening bracket, this is the id of the opening bracket.\n     * If this token is a closing bracket, this is the id of the first opening bracket that is closed by this bracket.\n     * Otherwise, it is -1.\n     */\n    bracketId, \n    /**\n     * If this token is an opening bracket, this just contains `bracketId`.\n     * If this token is a closing bracket, this lists all opening bracket ids, that it closes.\n     * Otherwise, it is empty.\n     */\n    bracketIds, astNode) {\n        this.length = length;\n        this.kind = kind;\n        this.bracketId = bracketId;\n        this.bracketIds = bracketIds;\n        this.astNode = astNode;\n    }\n}\nexport class TextBufferTokenizer {\n    constructor(textModel, bracketTokens) {\n        this.textModel = textModel;\n        this.bracketTokens = bracketTokens;\n        this.reader = new NonPeekableTextBufferTokenizer(this.textModel, this.bracketTokens);\n        this._offset = lengthZero;\n        this.didPeek = false;\n        this.peeked = null;\n        this.textBufferLineCount = textModel.getLineCount();\n        this.textBufferLastLineLength = textModel.getLineLength(this.textBufferLineCount);\n    }\n    get offset() {\n        return this._offset;\n    }\n    get length() {\n        return toLength(this.textBufferLineCount - 1, this.textBufferLastLineLength);\n    }\n    skip(length) {\n        this.didPeek = false;\n        this._offset = lengthAdd(this._offset, length);\n        const obj = lengthToObj(this._offset);\n        this.reader.setPosition(obj.lineCount, obj.columnCount);\n    }\n    read() {\n        let token;\n        if (this.peeked) {\n            this.didPeek = false;\n            token = this.peeked;\n        }\n        else {\n            token = this.reader.read();\n        }\n        if (token) {\n            this._offset = lengthAdd(this._offset, token.length);\n        }\n        return token;\n    }\n    peek() {\n        if (!this.didPeek) {\n            this.peeked = this.reader.read();\n            this.didPeek = true;\n        }\n        return this.peeked;\n    }\n}\n/**\n * Does not support peek.\n*/\nclass NonPeekableTextBufferTokenizer {\n    constructor(textModel, bracketTokens) {\n        this.textModel = textModel;\n        this.bracketTokens = bracketTokens;\n        this.lineIdx = 0;\n        this.line = null;\n        this.lineCharOffset = 0;\n        this.lineTokens = null;\n        this.lineTokenOffset = 0;\n        /** Must be a zero line token. The end of the document cannot be peeked. */\n        this.peekedToken = null;\n        this.textBufferLineCount = textModel.getLineCount();\n        this.textBufferLastLineLength = textModel.getLineLength(this.textBufferLineCount);\n    }\n    setPosition(lineIdx, column) {\n        // We must not jump into a token!\n        if (lineIdx === this.lineIdx) {\n            this.lineCharOffset = column;\n            if (this.line !== null) {\n                this.lineTokenOffset = this.lineCharOffset === 0 ? 0 : this.lineTokens.findTokenIndexAtOffset(this.lineCharOffset);\n            }\n        }\n        else {\n            this.lineIdx = lineIdx;\n            this.lineCharOffset = column;\n            this.line = null;\n        }\n        this.peekedToken = null;\n    }\n    read() {\n        if (this.peekedToken) {\n            const token = this.peekedToken;\n            this.peekedToken = null;\n            this.lineCharOffset += lengthGetColumnCountIfZeroLineCount(token.length);\n            return token;\n        }\n        if (this.lineIdx > this.textBufferLineCount - 1 || (this.lineIdx === this.textBufferLineCount - 1 && this.lineCharOffset >= this.textBufferLastLineLength)) {\n            // We are after the end\n            return null;\n        }\n        if (this.line === null) {\n            this.lineTokens = this.textModel.tokenization.getLineTokens(this.lineIdx + 1);\n            this.line = this.lineTokens.getLineContent();\n            this.lineTokenOffset = this.lineCharOffset === 0 ? 0 : this.lineTokens.findTokenIndexAtOffset(this.lineCharOffset);\n        }\n        const startLineIdx = this.lineIdx;\n        const startLineCharOffset = this.lineCharOffset;\n        // limits the length of text tokens.\n        // If text tokens get too long, incremental updates will be slow\n        let lengthHeuristic = 0;\n        while (true) {\n            const lineTokens = this.lineTokens;\n            const tokenCount = lineTokens.getCount();\n            let peekedBracketToken = null;\n            if (this.lineTokenOffset < tokenCount) {\n                const tokenMetadata = lineTokens.getMetadata(this.lineTokenOffset);\n                while (this.lineTokenOffset + 1 < tokenCount && tokenMetadata === lineTokens.getMetadata(this.lineTokenOffset + 1)) {\n                    // Skip tokens that are identical.\n                    // Sometimes, (bracket) identifiers are split up into multiple tokens.\n                    this.lineTokenOffset++;\n                }\n                const isOther = TokenMetadata.getTokenType(tokenMetadata) === 0 /* StandardTokenType.Other */;\n                const containsBracketType = TokenMetadata.containsBalancedBrackets(tokenMetadata);\n                const endOffset = lineTokens.getEndOffset(this.lineTokenOffset);\n                // Is there a bracket token next? Only consume text.\n                if (containsBracketType && isOther && this.lineCharOffset < endOffset) {\n                    const languageId = lineTokens.getLanguageId(this.lineTokenOffset);\n                    const text = this.line.substring(this.lineCharOffset, endOffset);\n                    const brackets = this.bracketTokens.getSingleLanguageBracketTokens(languageId);\n                    const regexp = brackets.regExpGlobal;\n                    if (regexp) {\n                        regexp.lastIndex = 0;\n                        const match = regexp.exec(text);\n                        if (match) {\n                            peekedBracketToken = brackets.getToken(match[0]);\n                            if (peekedBracketToken) {\n                                // Consume leading text of the token\n                                this.lineCharOffset += match.index;\n                            }\n                        }\n                    }\n                }\n                lengthHeuristic += endOffset - this.lineCharOffset;\n                if (peekedBracketToken) {\n                    // Don't skip the entire token, as a single token could contain multiple brackets.\n                    if (startLineIdx !== this.lineIdx || startLineCharOffset !== this.lineCharOffset) {\n                        // There is text before the bracket\n                        this.peekedToken = peekedBracketToken;\n                        break;\n                    }\n                    else {\n                        // Consume the peeked token\n                        this.lineCharOffset += lengthGetColumnCountIfZeroLineCount(peekedBracketToken.length);\n                        return peekedBracketToken;\n                    }\n                }\n                else {\n                    // Skip the entire token, as the token contains no brackets at all.\n                    this.lineTokenOffset++;\n                    this.lineCharOffset = endOffset;\n                }\n            }\n            else {\n                if (this.lineIdx === this.textBufferLineCount - 1) {\n                    break;\n                }\n                this.lineIdx++;\n                this.lineTokens = this.textModel.tokenization.getLineTokens(this.lineIdx + 1);\n                this.lineTokenOffset = 0;\n                this.line = this.lineTokens.getLineContent();\n                this.lineCharOffset = 0;\n                lengthHeuristic += 33; // max 1000/33 = 30 lines\n                // This limits the amount of work to recompute min-indentation\n                if (lengthHeuristic > 1000) {\n                    // only break (automatically) at the end of line.\n                    break;\n                }\n            }\n            if (lengthHeuristic > 1500) {\n                // Eventually break regardless of the line length so that\n                // very long lines do not cause bad performance.\n                // This effective limits max indentation to 500, as\n                // indentation is not computed across multiple text nodes.\n                break;\n            }\n        }\n        // If a token contains some proper indentation, it also contains \\n{INDENTATION+}(?!{INDENTATION}),\n        // unless the line is too long.\n        // Thus, the min indentation of the document is the minimum min indentation of every text node.\n        const length = lengthDiff(startLineIdx, startLineCharOffset, this.lineIdx, this.lineCharOffset);\n        return new Token(length, 0 /* TokenKind.Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(length));\n    }\n}\nexport class FastTokenizer {\n    constructor(text, brackets) {\n        this.text = text;\n        this._offset = lengthZero;\n        this.idx = 0;\n        const regExpStr = brackets.getRegExpStr();\n        const regexp = regExpStr ? new RegExp(regExpStr + '|\\n', 'gi') : null;\n        const tokens = [];\n        let match;\n        let curLineCount = 0;\n        let lastLineBreakOffset = 0;\n        let lastTokenEndOffset = 0;\n        let lastTokenEndLine = 0;\n        const smallTextTokens0Line = [];\n        for (let i = 0; i < 60; i++) {\n            smallTextTokens0Line.push(new Token(toLength(0, i), 0 /* TokenKind.Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(toLength(0, i))));\n        }\n        const smallTextTokens1Line = [];\n        for (let i = 0; i < 60; i++) {\n            smallTextTokens1Line.push(new Token(toLength(1, i), 0 /* TokenKind.Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(toLength(1, i))));\n        }\n        if (regexp) {\n            regexp.lastIndex = 0;\n            // If a token contains indentation, it also contains \\n{INDENTATION+}(?!{INDENTATION})\n            while ((match = regexp.exec(text)) !== null) {\n                const curOffset = match.index;\n                const value = match[0];\n                if (value === '\\n') {\n                    curLineCount++;\n                    lastLineBreakOffset = curOffset + 1;\n                }\n                else {\n                    if (lastTokenEndOffset !== curOffset) {\n                        let token;\n                        if (lastTokenEndLine === curLineCount) {\n                            const colCount = curOffset - lastTokenEndOffset;\n                            if (colCount < smallTextTokens0Line.length) {\n                                token = smallTextTokens0Line[colCount];\n                            }\n                            else {\n                                const length = toLength(0, colCount);\n                                token = new Token(length, 0 /* TokenKind.Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(length));\n                            }\n                        }\n                        else {\n                            const lineCount = curLineCount - lastTokenEndLine;\n                            const colCount = curOffset - lastLineBreakOffset;\n                            if (lineCount === 1 && colCount < smallTextTokens1Line.length) {\n                                token = smallTextTokens1Line[colCount];\n                            }\n                            else {\n                                const length = toLength(lineCount, colCount);\n                                token = new Token(length, 0 /* TokenKind.Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(length));\n                            }\n                        }\n                        tokens.push(token);\n                    }\n                    // value is matched by regexp, so the token must exist\n                    tokens.push(brackets.getToken(value));\n                    lastTokenEndOffset = curOffset + value.length;\n                    lastTokenEndLine = curLineCount;\n                }\n            }\n        }\n        const offset = text.length;\n        if (lastTokenEndOffset !== offset) {\n            const length = (lastTokenEndLine === curLineCount)\n                ? toLength(0, offset - lastTokenEndOffset)\n                : toLength(curLineCount - lastTokenEndLine, offset - lastLineBreakOffset);\n            tokens.push(new Token(length, 0 /* TokenKind.Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(length)));\n        }\n        this.length = toLength(curLineCount, offset - lastLineBreakOffset);\n        this.tokens = tokens;\n    }\n    get offset() {\n        return this._offset;\n    }\n    read() {\n        return this.tokens[this.idx++] || null;\n    }\n    peek() {\n        return this.tokens[this.idx] || null;\n    }\n    skip(length) {\n        throw new NotSupportedError();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Range } from '../../core/range.js';\nimport { editorBracketHighlightingForeground1, editorBracketHighlightingForeground2, editorBracketHighlightingForeground3, editorBracketHighlightingForeground4, editorBracketHighlightingForeground5, editorBracketHighlightingForeground6, editorBracketHighlightingUnexpectedBracketForeground } from '../../core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class ColorizedBracketPairsDecorationProvider extends Disposable {\n    constructor(textModel) {\n        super();\n        this.textModel = textModel;\n        this.colorProvider = new ColorProvider();\n        this.onDidChangeEmitter = new Emitter();\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.colorizationOptions = textModel.getOptions().bracketPairColorizationOptions;\n        this._register(textModel.bracketPairs.onDidChange(e => {\n            this.onDidChangeEmitter.fire();\n        }));\n    }\n    //#region TextModel events\n    handleDidChangeOptions(e) {\n        this.colorizationOptions = this.textModel.getOptions().bracketPairColorizationOptions;\n    }\n    //#endregion\n    getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations) {\n        if (onlyMinimapDecorations) {\n            // Bracket pair colorization decorations are not rendered in the minimap\n            return [];\n        }\n        if (ownerId === undefined) {\n            return [];\n        }\n        if (!this.colorizationOptions.enabled) {\n            return [];\n        }\n        const result = this.textModel.bracketPairs.getBracketsInRange(range, true).map(bracket => ({\n            id: `bracket${bracket.range.toString()}-${bracket.nestingLevel}`,\n            options: {\n                description: 'BracketPairColorization',\n                inlineClassName: this.colorProvider.getInlineClassName(bracket, this.colorizationOptions.independentColorPoolPerBracketType),\n            },\n            ownerId: 0,\n            range: bracket.range,\n        })).toArray();\n        return result;\n    }\n    getAllDecorations(ownerId, filterOutValidation) {\n        if (ownerId === undefined) {\n            return [];\n        }\n        if (!this.colorizationOptions.enabled) {\n            return [];\n        }\n        return this.getDecorationsInRange(new Range(1, 1, this.textModel.getLineCount(), 1), ownerId, filterOutValidation);\n    }\n}\nclass ColorProvider {\n    constructor() {\n        this.unexpectedClosingBracketClassName = 'unexpected-closing-bracket';\n    }\n    getInlineClassName(bracket, independentColorPoolPerBracketType) {\n        if (bracket.isInvalid) {\n            return this.unexpectedClosingBracketClassName;\n        }\n        return this.getInlineClassNameOfLevel(independentColorPoolPerBracketType ? bracket.nestingLevelOfEqualBracketType : bracket.nestingLevel);\n    }\n    getInlineClassNameOfLevel(level) {\n        // To support a dynamic amount of colors up to 6 colors,\n        // we use a number that is a lcm of all numbers from 1 to 6.\n        return `bracket-highlighting-${level % 30}`;\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const colors = [\n        editorBracketHighlightingForeground1,\n        editorBracketHighlightingForeground2,\n        editorBracketHighlightingForeground3,\n        editorBracketHighlightingForeground4,\n        editorBracketHighlightingForeground5,\n        editorBracketHighlightingForeground6\n    ];\n    const colorProvider = new ColorProvider();\n    collector.addRule(`.monaco-editor .${colorProvider.unexpectedClosingBracketClassName} { color: ${theme.getColor(editorBracketHighlightingUnexpectedBracketForeground)}; }`);\n    const colorValues = colors\n        .map(c => theme.getColor(c))\n        .filter((c) => !!c)\n        .filter(c => !c.isTransparent());\n    for (let level = 0; level < 30; level++) {\n        const color = colorValues[level % colorValues.length];\n        collector.addRule(`.monaco-editor .${colorProvider.getInlineClassNameOfLevel(level)} { color: ${color}; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LanguageAgnosticBracketTokens } from './bracketPairsTree/brackets.js';\nimport { lengthAdd, lengthGetColumnCountIfZeroLineCount, lengthZero } from './bracketPairsTree/length.js';\nimport { parseDocument } from './bracketPairsTree/parser.js';\nimport { DenseKeyProvider } from './bracketPairsTree/smallImmutableSet.js';\nimport { TextBufferTokenizer } from './bracketPairsTree/tokenizer.js';\nexport function fixBracketsInLine(tokens, languageConfigurationService) {\n    const denseKeyProvider = new DenseKeyProvider();\n    const bracketTokens = new LanguageAgnosticBracketTokens(denseKeyProvider, (languageId) => languageConfigurationService.getLanguageConfiguration(languageId));\n    const tokenizer = new TextBufferTokenizer(new StaticTokenizerSource([tokens]), bracketTokens);\n    const node = parseDocument(tokenizer, [], undefined, true);\n    let str = '';\n    const line = tokens.getLineContent();\n    function processNode(node, offset) {\n        if (node.kind === 2 /* AstNodeKind.Pair */) {\n            processNode(node.openingBracket, offset);\n            offset = lengthAdd(offset, node.openingBracket.length);\n            if (node.child) {\n                processNode(node.child, offset);\n                offset = lengthAdd(offset, node.child.length);\n            }\n            if (node.closingBracket) {\n                processNode(node.closingBracket, offset);\n                offset = lengthAdd(offset, node.closingBracket.length);\n            }\n            else {\n                const singleLangBracketTokens = bracketTokens.getSingleLanguageBracketTokens(node.openingBracket.languageId);\n                const closingTokenText = singleLangBracketTokens.findClosingTokenText(node.openingBracket.bracketIds);\n                str += closingTokenText;\n            }\n        }\n        else if (node.kind === 3 /* AstNodeKind.UnexpectedClosingBracket */) {\n            // remove the bracket\n        }\n        else if (node.kind === 0 /* AstNodeKind.Text */ || node.kind === 1 /* AstNodeKind.Bracket */) {\n            str += line.substring(lengthGetColumnCountIfZeroLineCount(offset), lengthGetColumnCountIfZeroLineCount(lengthAdd(offset, node.length)));\n        }\n        else if (node.kind === 4 /* AstNodeKind.List */) {\n            for (const child of node.children) {\n                processNode(child, offset);\n                offset = lengthAdd(offset, child.length);\n            }\n        }\n    }\n    processNode(node, lengthZero);\n    return str;\n}\nclass StaticTokenizerSource {\n    constructor(lines) {\n        this.lines = lines;\n        this.tokenization = {\n            getLineTokens: (lineNumber) => {\n                return this.lines[lineNumber - 1];\n            }\n        };\n    }\n    getLineCount() {\n        return this.lines.length;\n    }\n    getLineLength(lineNumber) {\n        return this.lines[lineNumber - 1].getLineContent().length;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Selection } from '../core/selection.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { TextChange, compressConsecutiveTextChanges } from '../core/textChange.js';\nimport * as buffer from '../../../base/common/buffer.js';\nimport { basename } from '../../../base/common/resources.js';\nfunction uriGetComparisonKey(resource) {\n    return resource.toString();\n}\nexport class SingleModelEditStackData {\n    static create(model, beforeCursorState) {\n        const alternativeVersionId = model.getAlternativeVersionId();\n        const eol = getModelEOL(model);\n        return new SingleModelEditStackData(alternativeVersionId, alternativeVersionId, eol, eol, beforeCursorState, beforeCursorState, []);\n    }\n    constructor(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes) {\n        this.beforeVersionId = beforeVersionId;\n        this.afterVersionId = afterVersionId;\n        this.beforeEOL = beforeEOL;\n        this.afterEOL = afterEOL;\n        this.beforeCursorState = beforeCursorState;\n        this.afterCursorState = afterCursorState;\n        this.changes = changes;\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        if (textChanges.length > 0) {\n            this.changes = compressConsecutiveTextChanges(this.changes, textChanges);\n        }\n        this.afterEOL = afterEOL;\n        this.afterVersionId = afterVersionId;\n        this.afterCursorState = afterCursorState;\n    }\n    static _writeSelectionsSize(selections) {\n        return 4 + 4 * 4 * (selections ? selections.length : 0);\n    }\n    static _writeSelections(b, selections, offset) {\n        buffer.writeUInt32BE(b, (selections ? selections.length : 0), offset);\n        offset += 4;\n        if (selections) {\n            for (const selection of selections) {\n                buffer.writeUInt32BE(b, selection.selectionStartLineNumber, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.selectionStartColumn, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.positionLineNumber, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.positionColumn, offset);\n                offset += 4;\n            }\n        }\n        return offset;\n    }\n    static _readSelections(b, offset, dest) {\n        const count = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        for (let i = 0; i < count; i++) {\n            const selectionStartLineNumber = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const selectionStartColumn = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const positionLineNumber = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const positionColumn = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            dest.push(new Selection(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn));\n        }\n        return offset;\n    }\n    serialize() {\n        let necessarySize = (+4 // beforeVersionId\n            + 4 // afterVersionId\n            + 1 // beforeEOL\n            + 1 // afterEOL\n            + SingleModelEditStackData._writeSelectionsSize(this.beforeCursorState)\n            + SingleModelEditStackData._writeSelectionsSize(this.afterCursorState)\n            + 4 // change count\n        );\n        for (const change of this.changes) {\n            necessarySize += change.writeSize();\n        }\n        const b = new Uint8Array(necessarySize);\n        let offset = 0;\n        buffer.writeUInt32BE(b, this.beforeVersionId, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, this.afterVersionId, offset);\n        offset += 4;\n        buffer.writeUInt8(b, this.beforeEOL, offset);\n        offset += 1;\n        buffer.writeUInt8(b, this.afterEOL, offset);\n        offset += 1;\n        offset = SingleModelEditStackData._writeSelections(b, this.beforeCursorState, offset);\n        offset = SingleModelEditStackData._writeSelections(b, this.afterCursorState, offset);\n        buffer.writeUInt32BE(b, this.changes.length, offset);\n        offset += 4;\n        for (const change of this.changes) {\n            offset = change.write(b, offset);\n        }\n        return b.buffer;\n    }\n    static deserialize(source) {\n        const b = new Uint8Array(source);\n        let offset = 0;\n        const beforeVersionId = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const afterVersionId = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const beforeEOL = buffer.readUInt8(b, offset);\n        offset += 1;\n        const afterEOL = buffer.readUInt8(b, offset);\n        offset += 1;\n        const beforeCursorState = [];\n        offset = SingleModelEditStackData._readSelections(b, offset, beforeCursorState);\n        const afterCursorState = [];\n        offset = SingleModelEditStackData._readSelections(b, offset, afterCursorState);\n        const changeCount = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const changes = [];\n        for (let i = 0; i < changeCount; i++) {\n            offset = TextChange.read(b, offset, changes);\n        }\n        return new SingleModelEditStackData(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes);\n    }\n}\nexport class SingleModelEditStackElement {\n    get type() {\n        return 0 /* UndoRedoElementType.Resource */;\n    }\n    get resource() {\n        if (URI.isUri(this.model)) {\n            return this.model;\n        }\n        return this.model.uri;\n    }\n    constructor(label, code, model, beforeCursorState) {\n        this.label = label;\n        this.code = code;\n        this.model = model;\n        this._data = SingleModelEditStackData.create(model, beforeCursorState);\n    }\n    toString() {\n        const data = (this._data instanceof SingleModelEditStackData ? this._data : SingleModelEditStackData.deserialize(this._data));\n        return data.changes.map(change => change.toString()).join(', ');\n    }\n    matchesResource(resource) {\n        const uri = (URI.isUri(this.model) ? this.model : this.model.uri);\n        return (uri.toString() === resource.toString());\n    }\n    setModel(model) {\n        this.model = model;\n    }\n    canAppend(model) {\n        return (this.model === model && this._data instanceof SingleModelEditStackData);\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n        }\n    }\n    close() {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n    }\n    open() {\n        if (!(this._data instanceof SingleModelEditStackData)) {\n            this._data = SingleModelEditStackData.deserialize(this._data);\n        }\n    }\n    undo() {\n        if (URI.isUri(this.model)) {\n            // don't have a model\n            throw new Error(`Invalid SingleModelEditStackElement`);\n        }\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        const data = SingleModelEditStackData.deserialize(this._data);\n        this.model._applyUndo(data.changes, data.beforeEOL, data.beforeVersionId, data.beforeCursorState);\n    }\n    redo() {\n        if (URI.isUri(this.model)) {\n            // don't have a model\n            throw new Error(`Invalid SingleModelEditStackElement`);\n        }\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        const data = SingleModelEditStackData.deserialize(this._data);\n        this.model._applyRedo(data.changes, data.afterEOL, data.afterVersionId, data.afterCursorState);\n    }\n    heapSize() {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        return this._data.byteLength + 168 /*heap overhead*/;\n    }\n}\nexport class MultiModelEditStackElement {\n    get resources() {\n        return this._editStackElementsArr.map(editStackElement => editStackElement.resource);\n    }\n    constructor(label, code, editStackElements) {\n        this.label = label;\n        this.code = code;\n        this.type = 1 /* UndoRedoElementType.Workspace */;\n        this._isOpen = true;\n        this._editStackElementsArr = editStackElements.slice(0);\n        this._editStackElementsMap = new Map();\n        for (const editStackElement of this._editStackElementsArr) {\n            const key = uriGetComparisonKey(editStackElement.resource);\n            this._editStackElementsMap.set(key, editStackElement);\n        }\n        this._delegate = null;\n    }\n    prepareUndoRedo() {\n        if (this._delegate) {\n            return this._delegate.prepareUndoRedo(this);\n        }\n    }\n    matchesResource(resource) {\n        const key = uriGetComparisonKey(resource);\n        return (this._editStackElementsMap.has(key));\n    }\n    setModel(model) {\n        const key = uriGetComparisonKey(URI.isUri(model) ? model : model.uri);\n        if (this._editStackElementsMap.has(key)) {\n            this._editStackElementsMap.get(key).setModel(model);\n        }\n    }\n    canAppend(model) {\n        if (!this._isOpen) {\n            return false;\n        }\n        const key = uriGetComparisonKey(model.uri);\n        if (this._editStackElementsMap.has(key)) {\n            const editStackElement = this._editStackElementsMap.get(key);\n            return editStackElement.canAppend(model);\n        }\n        return false;\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        const key = uriGetComparisonKey(model.uri);\n        const editStackElement = this._editStackElementsMap.get(key);\n        editStackElement.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n    }\n    close() {\n        this._isOpen = false;\n    }\n    open() {\n        // cannot reopen\n    }\n    undo() {\n        this._isOpen = false;\n        for (const editStackElement of this._editStackElementsArr) {\n            editStackElement.undo();\n        }\n    }\n    redo() {\n        for (const editStackElement of this._editStackElementsArr) {\n            editStackElement.redo();\n        }\n    }\n    heapSize(resource) {\n        const key = uriGetComparisonKey(resource);\n        if (this._editStackElementsMap.has(key)) {\n            const editStackElement = this._editStackElementsMap.get(key);\n            return editStackElement.heapSize();\n        }\n        return 0;\n    }\n    split() {\n        return this._editStackElementsArr;\n    }\n    toString() {\n        const result = [];\n        for (const editStackElement of this._editStackElementsArr) {\n            result.push(`${basename(editStackElement.resource)}: ${editStackElement}`);\n        }\n        return `{${result.join(', ')}}`;\n    }\n}\nfunction getModelEOL(model) {\n    const eol = model.getEOL();\n    if (eol === '\\n') {\n        return 0 /* EndOfLineSequence.LF */;\n    }\n    else {\n        return 1 /* EndOfLineSequence.CRLF */;\n    }\n}\nexport function isEditStackElement(element) {\n    if (!element) {\n        return false;\n    }\n    return ((element instanceof SingleModelEditStackElement) || (element instanceof MultiModelEditStackElement));\n}\nexport class EditStack {\n    constructor(model, undoRedoService) {\n        this._model = model;\n        this._undoRedoService = undoRedoService;\n    }\n    pushStackElement() {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement)) {\n            lastElement.close();\n        }\n    }\n    popStackElement() {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement)) {\n            lastElement.open();\n        }\n    }\n    clear() {\n        this._undoRedoService.removeElements(this._model.uri);\n    }\n    _getOrCreateEditStackElement(beforeCursorState, group) {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement) && lastElement.canAppend(this._model)) {\n            return lastElement;\n        }\n        const newElement = new SingleModelEditStackElement(nls.localize('edit', \"Typing\"), 'undoredo.textBufferEdit', this._model, beforeCursorState);\n        this._undoRedoService.pushElement(newElement, group);\n        return newElement;\n    }\n    pushEOL(eol) {\n        const editStackElement = this._getOrCreateEditStackElement(null, undefined);\n        this._model.setEOL(eol);\n        editStackElement.append(this._model, [], getModelEOL(this._model), this._model.getAlternativeVersionId(), null);\n    }\n    pushEditOperation(beforeCursorState, editOperations, cursorStateComputer, group) {\n        const editStackElement = this._getOrCreateEditStackElement(beforeCursorState, group);\n        const inverseEditOperations = this._model.applyEdits(editOperations, true);\n        const afterCursorState = EditStack._computeCursorState(cursorStateComputer, inverseEditOperations);\n        const textChanges = inverseEditOperations.map((op, index) => ({ index: index, textChange: op.textChange }));\n        textChanges.sort((a, b) => {\n            if (a.textChange.oldPosition === b.textChange.oldPosition) {\n                return a.index - b.index;\n            }\n            return a.textChange.oldPosition - b.textChange.oldPosition;\n        });\n        editStackElement.append(this._model, textChanges.map(op => op.textChange), getModelEOL(this._model), this._model.getAlternativeVersionId(), afterCursorState);\n        return afterCursorState;\n    }\n    static _computeCursorState(cursorStateComputer, inverseEditOperations) {\n        try {\n            return cursorStateComputer ? cursorStateComputer(inverseEditOperations) : null;\n        }\n        catch (e) {\n            onUnexpectedError(e);\n            return null;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { arrayInsert } from '../../../base/common/arrays.js';\n/**\n * An array that avoids being sparse by always\n * filling up unused indices with a default value.\n */\nexport class FixedArray {\n    constructor(_default) {\n        this._default = _default;\n        this._store = [];\n    }\n    get(index) {\n        if (index < this._store.length) {\n            return this._store[index];\n        }\n        return this._default;\n    }\n    set(index, value) {\n        while (index >= this._store.length) {\n            this._store[this._store.length] = this._default;\n        }\n        this._store[index] = value;\n    }\n    replace(index, oldLength, newLength) {\n        if (index >= this._store.length) {\n            return;\n        }\n        if (oldLength === 0) {\n            this.insert(index, newLength);\n            return;\n        }\n        else if (newLength === 0) {\n            this.delete(index, oldLength);\n            return;\n        }\n        const before = this._store.slice(0, index);\n        const after = this._store.slice(index + oldLength);\n        const insertArr = arrayFill(newLength, this._default);\n        this._store = before.concat(insertArr, after);\n    }\n    delete(deleteIndex, deleteCount) {\n        if (deleteCount === 0 || deleteIndex >= this._store.length) {\n            return;\n        }\n        this._store.splice(deleteIndex, deleteCount);\n    }\n    insert(insertIndex, insertCount) {\n        if (insertCount === 0 || insertIndex >= this._store.length) {\n            return;\n        }\n        const arr = [];\n        for (let i = 0; i < insertCount; i++) {\n            arr[i] = this._default;\n        }\n        this._store = arrayInsert(this._store, insertIndex, arr);\n    }\n}\nfunction arrayFill(length, value) {\n    const arr = [];\n    for (let i = 0; i < length; i++) {\n        arr[i] = value;\n    }\n    return arr;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { findLast } from '../../../base/common/arrays.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { Range } from '../core/range.js';\nimport { TextModelPart } from './textModelPart.js';\nimport { computeIndentLevel } from './utils.js';\nimport { HorizontalGuidesState, IndentGuide, IndentGuideHorizontalLine } from '../textModelGuides.js';\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nexport class GuidesTextModelPart extends TextModelPart {\n    constructor(textModel, languageConfigurationService) {\n        super();\n        this.textModel = textModel;\n        this.languageConfigurationService = languageConfigurationService;\n    }\n    getLanguageConfiguration(languageId) {\n        return this.languageConfigurationService.getLanguageConfiguration(languageId);\n    }\n    _computeIndentLevel(lineIndex) {\n        return computeIndentLevel(this.textModel.getLineContent(lineIndex + 1), this.textModel.getOptions().tabSize);\n    }\n    getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n        this.assertNotDisposed();\n        const lineCount = this.textModel.getLineCount();\n        if (lineNumber < 1 || lineNumber > lineCount) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        const foldingRules = this.getLanguageConfiguration(this.textModel.getLanguageId()).foldingRules;\n        const offSide = Boolean(foldingRules && foldingRules.offSide);\n        let up_aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let up_aboveContentLineIndent = -1;\n        let up_belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let up_belowContentLineIndent = -1;\n        const up_resolveIndents = (lineNumber) => {\n            if (up_aboveContentLineIndex !== -1 &&\n                (up_aboveContentLineIndex === -2 ||\n                    up_aboveContentLineIndex > lineNumber - 1)) {\n                up_aboveContentLineIndex = -1;\n                up_aboveContentLineIndent = -1;\n                // must find previous line with content\n                for (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        up_aboveContentLineIndex = lineIndex;\n                        up_aboveContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            if (up_belowContentLineIndex === -2) {\n                up_belowContentLineIndex = -1;\n                up_belowContentLineIndent = -1;\n                // must find next line with content\n                for (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        up_belowContentLineIndex = lineIndex;\n                        up_belowContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n        };\n        let down_aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let down_aboveContentLineIndent = -1;\n        let down_belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let down_belowContentLineIndent = -1;\n        const down_resolveIndents = (lineNumber) => {\n            if (down_aboveContentLineIndex === -2) {\n                down_aboveContentLineIndex = -1;\n                down_aboveContentLineIndent = -1;\n                // must find previous line with content\n                for (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        down_aboveContentLineIndex = lineIndex;\n                        down_aboveContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            if (down_belowContentLineIndex !== -1 &&\n                (down_belowContentLineIndex === -2 ||\n                    down_belowContentLineIndex < lineNumber - 1)) {\n                down_belowContentLineIndex = -1;\n                down_belowContentLineIndent = -1;\n                // must find next line with content\n                for (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        down_belowContentLineIndex = lineIndex;\n                        down_belowContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n        };\n        let startLineNumber = 0;\n        let goUp = true;\n        let endLineNumber = 0;\n        let goDown = true;\n        let indent = 0;\n        let initialIndent = 0;\n        for (let distance = 0; goUp || goDown; distance++) {\n            const upLineNumber = lineNumber - distance;\n            const downLineNumber = lineNumber + distance;\n            if (distance > 1 && (upLineNumber < 1 || upLineNumber < minLineNumber)) {\n                goUp = false;\n            }\n            if (distance > 1 &&\n                (downLineNumber > lineCount || downLineNumber > maxLineNumber)) {\n                goDown = false;\n            }\n            if (distance > 50000) {\n                // stop processing\n                goUp = false;\n                goDown = false;\n            }\n            let upLineIndentLevel = -1;\n            if (goUp && upLineNumber >= 1) {\n                // compute indent level going up\n                const currentIndent = this._computeIndentLevel(upLineNumber - 1);\n                if (currentIndent >= 0) {\n                    // This line has content (besides whitespace)\n                    // Use the line's indent\n                    up_belowContentLineIndex = upLineNumber - 1;\n                    up_belowContentLineIndent = currentIndent;\n                    upLineIndentLevel = Math.ceil(currentIndent / this.textModel.getOptions().indentSize);\n                }\n                else {\n                    up_resolveIndents(upLineNumber);\n                    upLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, up_aboveContentLineIndent, up_belowContentLineIndent);\n                }\n            }\n            let downLineIndentLevel = -1;\n            if (goDown && downLineNumber <= lineCount) {\n                // compute indent level going down\n                const currentIndent = this._computeIndentLevel(downLineNumber - 1);\n                if (currentIndent >= 0) {\n                    // This line has content (besides whitespace)\n                    // Use the line's indent\n                    down_aboveContentLineIndex = downLineNumber - 1;\n                    down_aboveContentLineIndent = currentIndent;\n                    downLineIndentLevel = Math.ceil(currentIndent / this.textModel.getOptions().indentSize);\n                }\n                else {\n                    down_resolveIndents(downLineNumber);\n                    downLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, down_aboveContentLineIndent, down_belowContentLineIndent);\n                }\n            }\n            if (distance === 0) {\n                initialIndent = upLineIndentLevel;\n                continue;\n            }\n            if (distance === 1) {\n                if (downLineNumber <= lineCount &&\n                    downLineIndentLevel >= 0 &&\n                    initialIndent + 1 === downLineIndentLevel) {\n                    // This is the beginning of a scope, we have special handling here, since we want the\n                    // child scope indent to be active, not the parent scope\n                    goUp = false;\n                    startLineNumber = downLineNumber;\n                    endLineNumber = downLineNumber;\n                    indent = downLineIndentLevel;\n                    continue;\n                }\n                if (upLineNumber >= 1 &&\n                    upLineIndentLevel >= 0 &&\n                    upLineIndentLevel - 1 === initialIndent) {\n                    // This is the end of a scope, just like above\n                    goDown = false;\n                    startLineNumber = upLineNumber;\n                    endLineNumber = upLineNumber;\n                    indent = upLineIndentLevel;\n                    continue;\n                }\n                startLineNumber = lineNumber;\n                endLineNumber = lineNumber;\n                indent = initialIndent;\n                if (indent === 0) {\n                    // No need to continue\n                    return { startLineNumber, endLineNumber, indent };\n                }\n            }\n            if (goUp) {\n                if (upLineIndentLevel >= indent) {\n                    startLineNumber = upLineNumber;\n                }\n                else {\n                    goUp = false;\n                }\n            }\n            if (goDown) {\n                if (downLineIndentLevel >= indent) {\n                    endLineNumber = downLineNumber;\n                }\n                else {\n                    goDown = false;\n                }\n            }\n        }\n        return { startLineNumber, endLineNumber, indent };\n    }\n    getLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options) {\n        var _a;\n        const result = [];\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            result.push([]);\n        }\n        // If requested, this could be made configurable.\n        const includeSingleLinePairs = true;\n        const bracketPairs = this.textModel.bracketPairs.getBracketPairsInRangeWithMinIndentation(new Range(startLineNumber, 1, endLineNumber, this.textModel.getLineMaxColumn(endLineNumber))).toArray();\n        let activeBracketPairRange = undefined;\n        if (activePosition && bracketPairs.length > 0) {\n            const bracketsContainingActivePosition = (startLineNumber <= activePosition.lineNumber &&\n                activePosition.lineNumber <= endLineNumber\n                // We don't need to query the brackets again if the cursor is in the viewport\n                ? bracketPairs\n                : this.textModel.bracketPairs.getBracketPairsInRange(Range.fromPositions(activePosition)).toArray()).filter((bp) => Range.strictContainsPosition(bp.range, activePosition));\n            activeBracketPairRange = (_a = findLast(bracketsContainingActivePosition, (i) => includeSingleLinePairs || i.range.startLineNumber !== i.range.endLineNumber)) === null || _a === void 0 ? void 0 : _a.range;\n        }\n        const independentColorPoolPerBracketType = this.textModel.getOptions().bracketPairColorizationOptions.independentColorPoolPerBracketType;\n        const colorProvider = new BracketPairGuidesClassNames();\n        for (const pair of bracketPairs) {\n            /*\n\n\n                    {\n                    |\n                    }\n\n                    {\n                    |\n                    ----}\n\n                ____{\n                |test\n                ----}\n\n                renderHorizontalEndLineAtTheBottom:\n                    {\n                    |\n                    |x}\n                    --\n                renderHorizontalEndLineAtTheBottom:\n                ____{\n                |test\n                | x }\n                ----\n            */\n            if (!pair.closingBracketRange) {\n                continue;\n            }\n            const isActive = activeBracketPairRange && pair.range.equalsRange(activeBracketPairRange);\n            if (!isActive && !options.includeInactive) {\n                continue;\n            }\n            const className = colorProvider.getInlineClassName(pair.nestingLevel, pair.nestingLevelOfEqualBracketType, independentColorPoolPerBracketType) +\n                (options.highlightActive && isActive\n                    ? ' ' + colorProvider.activeClassName\n                    : '');\n            const start = pair.openingBracketRange.getStartPosition();\n            const end = pair.closingBracketRange.getStartPosition();\n            const horizontalGuides = options.horizontalGuides === HorizontalGuidesState.Enabled || (options.horizontalGuides === HorizontalGuidesState.EnabledForActive && isActive);\n            if (pair.range.startLineNumber === pair.range.endLineNumber) {\n                if (includeSingleLinePairs && horizontalGuides) {\n                    result[pair.range.startLineNumber - startLineNumber].push(new IndentGuide(-1, pair.openingBracketRange.getEndPosition().column, className, new IndentGuideHorizontalLine(false, end.column), -1, -1));\n                }\n                continue;\n            }\n            const endVisibleColumn = this.getVisibleColumnFromPosition(end);\n            const startVisibleColumn = this.getVisibleColumnFromPosition(pair.openingBracketRange.getStartPosition());\n            const guideVisibleColumn = Math.min(startVisibleColumn, endVisibleColumn, pair.minVisibleColumnIndentation + 1);\n            let renderHorizontalEndLineAtTheBottom = false;\n            const firstNonWsIndex = strings.firstNonWhitespaceIndex(this.textModel.getLineContent(pair.closingBracketRange.startLineNumber));\n            const hasTextBeforeClosingBracket = firstNonWsIndex < pair.closingBracketRange.startColumn - 1;\n            if (hasTextBeforeClosingBracket) {\n                renderHorizontalEndLineAtTheBottom = true;\n            }\n            const visibleGuideStartLineNumber = Math.max(start.lineNumber, startLineNumber);\n            const visibleGuideEndLineNumber = Math.min(end.lineNumber, endLineNumber);\n            const offset = renderHorizontalEndLineAtTheBottom ? 1 : 0;\n            for (let l = visibleGuideStartLineNumber; l < visibleGuideEndLineNumber + offset; l++) {\n                result[l - startLineNumber].push(new IndentGuide(guideVisibleColumn, -1, className, null, l === start.lineNumber ? start.column : -1, l === end.lineNumber ? end.column : -1));\n            }\n            if (horizontalGuides) {\n                if (start.lineNumber >= startLineNumber && startVisibleColumn > guideVisibleColumn) {\n                    result[start.lineNumber - startLineNumber].push(new IndentGuide(guideVisibleColumn, -1, className, new IndentGuideHorizontalLine(false, start.column), -1, -1));\n                }\n                if (end.lineNumber <= endLineNumber && endVisibleColumn > guideVisibleColumn) {\n                    result[end.lineNumber - startLineNumber].push(new IndentGuide(guideVisibleColumn, -1, className, new IndentGuideHorizontalLine(!renderHorizontalEndLineAtTheBottom, end.column), -1, -1));\n                }\n            }\n        }\n        for (const guides of result) {\n            guides.sort((a, b) => a.visibleColumn - b.visibleColumn);\n        }\n        return result;\n    }\n    getVisibleColumnFromPosition(position) {\n        return (CursorColumns.visibleColumnFromColumn(this.textModel.getLineContent(position.lineNumber), position.column, this.textModel.getOptions().tabSize) + 1);\n    }\n    getLinesIndentGuides(startLineNumber, endLineNumber) {\n        this.assertNotDisposed();\n        const lineCount = this.textModel.getLineCount();\n        if (startLineNumber < 1 || startLineNumber > lineCount) {\n            throw new Error('Illegal value for startLineNumber');\n        }\n        if (endLineNumber < 1 || endLineNumber > lineCount) {\n            throw new Error('Illegal value for endLineNumber');\n        }\n        const options = this.textModel.getOptions();\n        const foldingRules = this.getLanguageConfiguration(this.textModel.getLanguageId()).foldingRules;\n        const offSide = Boolean(foldingRules && foldingRules.offSide);\n        const result = new Array(endLineNumber - startLineNumber + 1);\n        let aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let aboveContentLineIndent = -1;\n        let belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let belowContentLineIndent = -1;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const resultIndex = lineNumber - startLineNumber;\n            const currentIndent = this._computeIndentLevel(lineNumber - 1);\n            if (currentIndent >= 0) {\n                // This line has content (besides whitespace)\n                // Use the line's indent\n                aboveContentLineIndex = lineNumber - 1;\n                aboveContentLineIndent = currentIndent;\n                result[resultIndex] = Math.ceil(currentIndent / options.indentSize);\n                continue;\n            }\n            if (aboveContentLineIndex === -2) {\n                aboveContentLineIndex = -1;\n                aboveContentLineIndent = -1;\n                // must find previous line with content\n                for (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        aboveContentLineIndex = lineIndex;\n                        aboveContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            if (belowContentLineIndex !== -1 &&\n                (belowContentLineIndex === -2 || belowContentLineIndex < lineNumber - 1)) {\n                belowContentLineIndex = -1;\n                belowContentLineIndent = -1;\n                // must find next line with content\n                for (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        belowContentLineIndex = lineIndex;\n                        belowContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            result[resultIndex] = this._getIndentLevelForWhitespaceLine(offSide, aboveContentLineIndent, belowContentLineIndent);\n        }\n        return result;\n    }\n    _getIndentLevelForWhitespaceLine(offSide, aboveContentLineIndent, belowContentLineIndent) {\n        const options = this.textModel.getOptions();\n        if (aboveContentLineIndent === -1 || belowContentLineIndent === -1) {\n            // At the top or bottom of the file\n            return 0;\n        }\n        else if (aboveContentLineIndent < belowContentLineIndent) {\n            // we are inside the region above\n            return 1 + Math.floor(aboveContentLineIndent / options.indentSize);\n        }\n        else if (aboveContentLineIndent === belowContentLineIndent) {\n            // we are in between two regions\n            return Math.ceil(belowContentLineIndent / options.indentSize);\n        }\n        else {\n            if (offSide) {\n                // same level as region below\n                return Math.ceil(belowContentLineIndent / options.indentSize);\n            }\n            else {\n                // we are inside the region that ends below\n                return 1 + Math.floor(belowContentLineIndent / options.indentSize);\n            }\n        }\n    }\n}\nexport class BracketPairGuidesClassNames {\n    constructor() {\n        this.activeClassName = 'indent-active';\n    }\n    getInlineClassName(nestingLevel, nestingLevelOfEqualBracketType, independentColorPoolPerBracketType) {\n        return this.getInlineClassNameOfLevel(independentColorPoolPerBracketType ? nestingLevelOfEqualBracketType : nestingLevel);\n    }\n    getInlineClassNameOfLevel(level) {\n        // To support a dynamic amount of colors up to 6 colors,\n        // we use a number that is a lcm of all numbers from 1 to 6.\n        return `bracket-indent-guide lvl-${level % 30}`;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass SpacesDiffResult {\n    constructor() {\n        this.spacesDiff = 0;\n        this.looksLikeAlignment = false;\n    }\n}\n/**\n * Compute the diff in spaces between two line's indentation.\n */\nfunction spacesDiff(a, aLength, b, bLength, result) {\n    result.spacesDiff = 0;\n    result.looksLikeAlignment = false;\n    // This can go both ways (e.g.):\n    //  - a: \"\\t\"\n    //  - b: \"\\t    \"\n    //  => This should count 1 tab and 4 spaces\n    let i;\n    for (i = 0; i < aLength && i < bLength; i++) {\n        const aCharCode = a.charCodeAt(i);\n        const bCharCode = b.charCodeAt(i);\n        if (aCharCode !== bCharCode) {\n            break;\n        }\n    }\n    let aSpacesCnt = 0, aTabsCount = 0;\n    for (let j = i; j < aLength; j++) {\n        const aCharCode = a.charCodeAt(j);\n        if (aCharCode === 32 /* CharCode.Space */) {\n            aSpacesCnt++;\n        }\n        else {\n            aTabsCount++;\n        }\n    }\n    let bSpacesCnt = 0, bTabsCount = 0;\n    for (let j = i; j < bLength; j++) {\n        const bCharCode = b.charCodeAt(j);\n        if (bCharCode === 32 /* CharCode.Space */) {\n            bSpacesCnt++;\n        }\n        else {\n            bTabsCount++;\n        }\n    }\n    if (aSpacesCnt > 0 && aTabsCount > 0) {\n        return;\n    }\n    if (bSpacesCnt > 0 && bTabsCount > 0) {\n        return;\n    }\n    const tabsDiff = Math.abs(aTabsCount - bTabsCount);\n    const spacesDiff = Math.abs(aSpacesCnt - bSpacesCnt);\n    if (tabsDiff === 0) {\n        // check if the indentation difference might be caused by alignment reasons\n        // sometime folks like to align their code, but this should not be used as a hint\n        result.spacesDiff = spacesDiff;\n        if (spacesDiff > 0 && 0 <= bSpacesCnt - 1 && bSpacesCnt - 1 < a.length && bSpacesCnt < b.length) {\n            if (b.charCodeAt(bSpacesCnt) !== 32 /* CharCode.Space */ && a.charCodeAt(bSpacesCnt - 1) === 32 /* CharCode.Space */) {\n                if (a.charCodeAt(a.length - 1) === 44 /* CharCode.Comma */) {\n                    // This looks like an alignment desire: e.g.\n                    // const a = b + c,\n                    //       d = b - c;\n                    result.looksLikeAlignment = true;\n                }\n            }\n        }\n        return;\n    }\n    if (spacesDiff % tabsDiff === 0) {\n        result.spacesDiff = spacesDiff / tabsDiff;\n        return;\n    }\n}\nexport function guessIndentation(source, defaultTabSize, defaultInsertSpaces) {\n    // Look at most at the first 10k lines\n    const linesCount = Math.min(source.getLineCount(), 10000);\n    let linesIndentedWithTabsCount = 0; // number of lines that contain at least one tab in indentation\n    let linesIndentedWithSpacesCount = 0; // number of lines that contain only spaces in indentation\n    let previousLineText = ''; // content of latest line that contained non-whitespace chars\n    let previousLineIndentation = 0; // index at which latest line contained the first non-whitespace char\n    const ALLOWED_TAB_SIZE_GUESSES = [2, 4, 6, 8, 3, 5, 7]; // prefer even guesses for `tabSize`, limit to [2, 8].\n    const MAX_ALLOWED_TAB_SIZE_GUESS = 8; // max(ALLOWED_TAB_SIZE_GUESSES) = 8\n    const spacesDiffCount = [0, 0, 0, 0, 0, 0, 0, 0, 0]; // `tabSize` scores\n    const tmp = new SpacesDiffResult();\n    for (let lineNumber = 1; lineNumber <= linesCount; lineNumber++) {\n        const currentLineLength = source.getLineLength(lineNumber);\n        const currentLineText = source.getLineContent(lineNumber);\n        // if the text buffer is chunk based, so long lines are cons-string, v8 will flattern the string when we check charCode.\n        // checking charCode on chunks directly is cheaper.\n        const useCurrentLineText = (currentLineLength <= 65536);\n        let currentLineHasContent = false; // does `currentLineText` contain non-whitespace chars\n        let currentLineIndentation = 0; // index at which `currentLineText` contains the first non-whitespace char\n        let currentLineSpacesCount = 0; // count of spaces found in `currentLineText` indentation\n        let currentLineTabsCount = 0; // count of tabs found in `currentLineText` indentation\n        for (let j = 0, lenJ = currentLineLength; j < lenJ; j++) {\n            const charCode = (useCurrentLineText ? currentLineText.charCodeAt(j) : source.getLineCharCode(lineNumber, j));\n            if (charCode === 9 /* CharCode.Tab */) {\n                currentLineTabsCount++;\n            }\n            else if (charCode === 32 /* CharCode.Space */) {\n                currentLineSpacesCount++;\n            }\n            else {\n                // Hit non whitespace character on this line\n                currentLineHasContent = true;\n                currentLineIndentation = j;\n                break;\n            }\n        }\n        // Ignore empty or only whitespace lines\n        if (!currentLineHasContent) {\n            continue;\n        }\n        if (currentLineTabsCount > 0) {\n            linesIndentedWithTabsCount++;\n        }\n        else if (currentLineSpacesCount > 1) {\n            linesIndentedWithSpacesCount++;\n        }\n        spacesDiff(previousLineText, previousLineIndentation, currentLineText, currentLineIndentation, tmp);\n        if (tmp.looksLikeAlignment) {\n            // if defaultInsertSpaces === true && the spaces count == tabSize, we may want to count it as valid indentation\n            //\n            // - item1\n            //   - item2\n            //\n            // otherwise skip this line entirely\n            //\n            // const a = 1,\n            //       b = 2;\n            if (!(defaultInsertSpaces && defaultTabSize === tmp.spacesDiff)) {\n                continue;\n            }\n        }\n        const currentSpacesDiff = tmp.spacesDiff;\n        if (currentSpacesDiff <= MAX_ALLOWED_TAB_SIZE_GUESS) {\n            spacesDiffCount[currentSpacesDiff]++;\n        }\n        previousLineText = currentLineText;\n        previousLineIndentation = currentLineIndentation;\n    }\n    let insertSpaces = defaultInsertSpaces;\n    if (linesIndentedWithTabsCount !== linesIndentedWithSpacesCount) {\n        insertSpaces = (linesIndentedWithTabsCount < linesIndentedWithSpacesCount);\n    }\n    let tabSize = defaultTabSize;\n    // Guess tabSize only if inserting spaces...\n    if (insertSpaces) {\n        let tabSizeScore = (insertSpaces ? 0 : 0.1 * linesCount);\n        // console.log(\"score threshold: \" + tabSizeScore);\n        ALLOWED_TAB_SIZE_GUESSES.forEach((possibleTabSize) => {\n            const possibleTabSizeScore = spacesDiffCount[possibleTabSize];\n            if (possibleTabSizeScore > tabSizeScore) {\n                tabSizeScore = possibleTabSizeScore;\n                tabSize = possibleTabSize;\n            }\n        });\n        // Let a tabSize of 2 win even if it is not the maximum\n        // (only in case 4 was guessed)\n        if (tabSize === 4 && spacesDiffCount[4] > 0 && spacesDiffCount[2] > 0 && spacesDiffCount[2] >= spacesDiffCount[4] / 2) {\n            tabSize = 2;\n        }\n    }\n    // console.log('--------------------------');\n    // console.log('linesIndentedWithTabsCount: ' + linesIndentedWithTabsCount + ', linesIndentedWithSpacesCount: ' + linesIndentedWithSpacesCount);\n    // console.log('spacesDiffCount: ' + spacesDiffCount);\n    // console.log('tabSize: ' + tabSize + ', tabSizeScore: ' + tabSizeScore);\n    return {\n        insertSpaces: insertSpaces,\n        tabSize: tabSize\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function getNodeColor(node) {\n    return ((node.metadata & 1 /* Constants.ColorMask */) >>> 0 /* Constants.ColorOffset */);\n}\nfunction setNodeColor(node, color) {\n    node.metadata = ((node.metadata & 254 /* Constants.ColorMaskInverse */) | (color << 0 /* Constants.ColorOffset */));\n}\nfunction getNodeIsVisited(node) {\n    return ((node.metadata & 2 /* Constants.IsVisitedMask */) >>> 1 /* Constants.IsVisitedOffset */) === 1;\n}\nfunction setNodeIsVisited(node, value) {\n    node.metadata = ((node.metadata & 253 /* Constants.IsVisitedMaskInverse */) | ((value ? 1 : 0) << 1 /* Constants.IsVisitedOffset */));\n}\nfunction getNodeIsForValidation(node) {\n    return ((node.metadata & 4 /* Constants.IsForValidationMask */) >>> 2 /* Constants.IsForValidationOffset */) === 1;\n}\nfunction setNodeIsForValidation(node, value) {\n    node.metadata = ((node.metadata & 251 /* Constants.IsForValidationMaskInverse */) | ((value ? 1 : 0) << 2 /* Constants.IsForValidationOffset */));\n}\nfunction getNodeIsInGlyphMargin(node) {\n    return ((node.metadata & 64 /* Constants.IsMarginMask */) >>> 6 /* Constants.IsMarginOffset */) === 1;\n}\nfunction setNodeIsInGlyphMargin(node, value) {\n    node.metadata = ((node.metadata & 191 /* Constants.IsMarginMaskInverse */) | ((value ? 1 : 0) << 6 /* Constants.IsMarginOffset */));\n}\nfunction getNodeStickiness(node) {\n    return ((node.metadata & 24 /* Constants.StickinessMask */) >>> 3 /* Constants.StickinessOffset */);\n}\nfunction _setNodeStickiness(node, stickiness) {\n    node.metadata = ((node.metadata & 231 /* Constants.StickinessMaskInverse */) | (stickiness << 3 /* Constants.StickinessOffset */));\n}\nfunction getCollapseOnReplaceEdit(node) {\n    return ((node.metadata & 32 /* Constants.CollapseOnReplaceEditMask */) >>> 5 /* Constants.CollapseOnReplaceEditOffset */) === 1;\n}\nfunction setCollapseOnReplaceEdit(node, value) {\n    node.metadata = ((node.metadata & 223 /* Constants.CollapseOnReplaceEditMaskInverse */) | ((value ? 1 : 0) << 5 /* Constants.CollapseOnReplaceEditOffset */));\n}\nexport class IntervalNode {\n    constructor(id, start, end) {\n        this.metadata = 0;\n        this.parent = this;\n        this.left = this;\n        this.right = this;\n        setNodeColor(this, 1 /* NodeColor.Red */);\n        this.start = start;\n        this.end = end;\n        // FORCE_OVERFLOWING_TEST: this.delta = start;\n        this.delta = 0;\n        this.maxEnd = end;\n        this.id = id;\n        this.ownerId = 0;\n        this.options = null;\n        setNodeIsForValidation(this, false);\n        setNodeIsInGlyphMargin(this, false);\n        _setNodeStickiness(this, 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        setCollapseOnReplaceEdit(this, false);\n        this.cachedVersionId = 0;\n        this.cachedAbsoluteStart = start;\n        this.cachedAbsoluteEnd = end;\n        this.range = null;\n        setNodeIsVisited(this, false);\n    }\n    reset(versionId, start, end, range) {\n        this.start = start;\n        this.end = end;\n        this.maxEnd = end;\n        this.cachedVersionId = versionId;\n        this.cachedAbsoluteStart = start;\n        this.cachedAbsoluteEnd = end;\n        this.range = range;\n    }\n    setOptions(options) {\n        this.options = options;\n        const className = this.options.className;\n        setNodeIsForValidation(this, (className === \"squiggly-error\" /* ClassName.EditorErrorDecoration */\n            || className === \"squiggly-warning\" /* ClassName.EditorWarningDecoration */\n            || className === \"squiggly-info\" /* ClassName.EditorInfoDecoration */));\n        setNodeIsInGlyphMargin(this, this.options.glyphMarginClassName !== null);\n        _setNodeStickiness(this, this.options.stickiness);\n        setCollapseOnReplaceEdit(this, this.options.collapseOnReplaceEdit);\n    }\n    setCachedOffsets(absoluteStart, absoluteEnd, cachedVersionId) {\n        if (this.cachedVersionId !== cachedVersionId) {\n            this.range = null;\n        }\n        this.cachedVersionId = cachedVersionId;\n        this.cachedAbsoluteStart = absoluteStart;\n        this.cachedAbsoluteEnd = absoluteEnd;\n    }\n    detach() {\n        this.parent = null;\n        this.left = null;\n        this.right = null;\n    }\n}\nexport const SENTINEL = new IntervalNode(null, 0, 0);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nsetNodeColor(SENTINEL, 0 /* NodeColor.Black */);\nexport class IntervalTree {\n    constructor() {\n        this.root = SENTINEL;\n        this.requestNormalizeDelta = false;\n    }\n    intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations) {\n        if (this.root === SENTINEL) {\n            return [];\n        }\n        return intervalSearch(this, start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n    }\n    search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations) {\n        if (this.root === SENTINEL) {\n            return [];\n        }\n        return search(this, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n    }\n    /**\n     * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!\n     */\n    collectNodesFromOwner(ownerId) {\n        return collectNodesFromOwner(this, ownerId);\n    }\n    /**\n     * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!\n     */\n    collectNodesPostOrder() {\n        return collectNodesPostOrder(this);\n    }\n    insert(node) {\n        rbTreeInsert(this, node);\n        this._normalizeDeltaIfNecessary();\n    }\n    delete(node) {\n        rbTreeDelete(this, node);\n        this._normalizeDeltaIfNecessary();\n    }\n    resolveNode(node, cachedVersionId) {\n        const initialNode = node;\n        let delta = 0;\n        while (node !== this.root) {\n            if (node === node.parent.right) {\n                delta += node.parent.delta;\n            }\n            node = node.parent;\n        }\n        const nodeStart = initialNode.start + delta;\n        const nodeEnd = initialNode.end + delta;\n        initialNode.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n    }\n    acceptReplace(offset, length, textLength, forceMoveMarkers) {\n        // Our strategy is to remove all directly impacted nodes, and then add them back to the tree.\n        // (1) collect all nodes that are intersecting this edit as nodes of interest\n        const nodesOfInterest = searchForEditing(this, offset, offset + length);\n        // (2) remove all nodes that are intersecting this edit\n        for (let i = 0, len = nodesOfInterest.length; i < len; i++) {\n            const node = nodesOfInterest[i];\n            rbTreeDelete(this, node);\n        }\n        this._normalizeDeltaIfNecessary();\n        // (3) edit all tree nodes except the nodes of interest\n        noOverlapReplace(this, offset, offset + length, textLength);\n        this._normalizeDeltaIfNecessary();\n        // (4) edit the nodes of interest and insert them back in the tree\n        for (let i = 0, len = nodesOfInterest.length; i < len; i++) {\n            const node = nodesOfInterest[i];\n            node.start = node.cachedAbsoluteStart;\n            node.end = node.cachedAbsoluteEnd;\n            nodeAcceptEdit(node, offset, (offset + length), textLength, forceMoveMarkers);\n            node.maxEnd = node.end;\n            rbTreeInsert(this, node);\n        }\n        this._normalizeDeltaIfNecessary();\n    }\n    _normalizeDeltaIfNecessary() {\n        if (!this.requestNormalizeDelta) {\n            return;\n        }\n        this.requestNormalizeDelta = false;\n        normalizeDelta(this);\n    }\n}\n//#region Delta Normalization\nfunction normalizeDelta(T) {\n    let node = T.root;\n    let delta = 0;\n    while (node !== SENTINEL) {\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n        // handle current node\n        node.start = delta + node.start;\n        node.end = delta + node.end;\n        node.delta = 0;\n        recomputeMaxEnd(node);\n        setNodeIsVisited(node, true);\n        // going up from this node\n        setNodeIsVisited(node.left, false);\n        setNodeIsVisited(node.right, false);\n        if (node === node.parent.right) {\n            delta -= node.parent.delta;\n        }\n        node = node.parent;\n    }\n    setNodeIsVisited(T.root, false);\n}\nfunction adjustMarkerBeforeColumn(markerOffset, markerStickToPreviousCharacter, checkOffset, moveSemantics) {\n    if (markerOffset < checkOffset) {\n        return true;\n    }\n    if (markerOffset > checkOffset) {\n        return false;\n    }\n    if (moveSemantics === 1 /* MarkerMoveSemantics.ForceMove */) {\n        return false;\n    }\n    if (moveSemantics === 2 /* MarkerMoveSemantics.ForceStay */) {\n        return true;\n    }\n    return markerStickToPreviousCharacter;\n}\n/**\n * This is a lot more complicated than strictly necessary to maintain the same behaviour\n * as when decorations were implemented using two markers.\n */\nexport function nodeAcceptEdit(node, start, end, textLength, forceMoveMarkers) {\n    const nodeStickiness = getNodeStickiness(node);\n    const startStickToPreviousCharacter = (nodeStickiness === 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */\n        || nodeStickiness === 2 /* TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */);\n    const endStickToPreviousCharacter = (nodeStickiness === 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */\n        || nodeStickiness === 2 /* TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */);\n    const deletingCnt = (end - start);\n    const insertingCnt = textLength;\n    const commonLength = Math.min(deletingCnt, insertingCnt);\n    const nodeStart = node.start;\n    let startDone = false;\n    const nodeEnd = node.end;\n    let endDone = false;\n    if (start <= nodeStart && nodeEnd <= end && getCollapseOnReplaceEdit(node)) {\n        // This edit encompasses the entire decoration range\n        // and the decoration has asked to become collapsed\n        node.start = start;\n        startDone = true;\n        node.end = start;\n        endDone = true;\n    }\n    {\n        const moveSemantics = forceMoveMarkers ? 1 /* MarkerMoveSemantics.ForceMove */ : (deletingCnt > 0 ? 2 /* MarkerMoveSemantics.ForceStay */ : 0 /* MarkerMoveSemantics.MarkerDefined */);\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, start, moveSemantics)) {\n            startDone = true;\n        }\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, start, moveSemantics)) {\n            endDone = true;\n        }\n    }\n    if (commonLength > 0 && !forceMoveMarkers) {\n        const moveSemantics = (deletingCnt > insertingCnt ? 2 /* MarkerMoveSemantics.ForceStay */ : 0 /* MarkerMoveSemantics.MarkerDefined */);\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, start + commonLength, moveSemantics)) {\n            startDone = true;\n        }\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, start + commonLength, moveSemantics)) {\n            endDone = true;\n        }\n    }\n    {\n        const moveSemantics = forceMoveMarkers ? 1 /* MarkerMoveSemantics.ForceMove */ : 0 /* MarkerMoveSemantics.MarkerDefined */;\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, end, moveSemantics)) {\n            node.start = start + insertingCnt;\n            startDone = true;\n        }\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, end, moveSemantics)) {\n            node.end = start + insertingCnt;\n            endDone = true;\n        }\n    }\n    // Finish\n    const deltaColumn = (insertingCnt - deletingCnt);\n    if (!startDone) {\n        node.start = Math.max(0, nodeStart + deltaColumn);\n    }\n    if (!endDone) {\n        node.end = Math.max(0, nodeEnd + deltaColumn);\n    }\n    if (node.start > node.end) {\n        node.end = node.start;\n    }\n}\nfunction searchForEditing(T, start, end) {\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n    // Now, it is known that two intervals A and B overlap only when both\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\n    // nodes overlapping with a given interval, you can immediately skip:\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\n    let node = T.root;\n    let delta = 0;\n    let nodeMaxEnd = 0;\n    let nodeStart = 0;\n    let nodeEnd = 0;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            node = node.parent;\n            continue;\n        }\n        if (!getNodeIsVisited(node.left)) {\n            // first time seeing this node\n            nodeMaxEnd = delta + node.maxEnd;\n            if (nodeMaxEnd < start) {\n                // cover case b) from above\n                // there is no need to search this node or its children\n                setNodeIsVisited(node, true);\n                continue;\n            }\n            if (node.left !== SENTINEL) {\n                // go left\n                node = node.left;\n                continue;\n            }\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        if (nodeStart > end) {\n            // cover case a) from above\n            // there is no need to search this node or its right subtree\n            setNodeIsVisited(node, true);\n            continue;\n        }\n        nodeEnd = delta + node.end;\n        if (nodeEnd >= start) {\n            node.setCachedOffsets(nodeStart, nodeEnd, 0);\n            result[resultLen++] = node;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction noOverlapReplace(T, start, end, textLength) {\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n    // Now, it is known that two intervals A and B overlap only when both\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\n    // nodes overlapping with a given interval, you can immediately skip:\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\n    let node = T.root;\n    let delta = 0;\n    let nodeMaxEnd = 0;\n    let nodeStart = 0;\n    const editDelta = (textLength - (end - start));\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            recomputeMaxEnd(node);\n            node = node.parent;\n            continue;\n        }\n        if (!getNodeIsVisited(node.left)) {\n            // first time seeing this node\n            nodeMaxEnd = delta + node.maxEnd;\n            if (nodeMaxEnd < start) {\n                // cover case b) from above\n                // there is no need to search this node or its children\n                setNodeIsVisited(node, true);\n                continue;\n            }\n            if (node.left !== SENTINEL) {\n                // go left\n                node = node.left;\n                continue;\n            }\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        if (nodeStart > end) {\n            node.start += editDelta;\n            node.end += editDelta;\n            node.delta += editDelta;\n            if (node.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || node.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n                T.requestNormalizeDelta = true;\n            }\n            // cover case a) from above\n            // there is no need to search this node or its right subtree\n            setNodeIsVisited(node, true);\n            continue;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n}\n//#endregion\n//#region Searching\nfunction collectNodesFromOwner(T, ownerId) {\n    let node = T.root;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            node = node.parent;\n            continue;\n        }\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        // handle current node\n        if (node.ownerId === ownerId) {\n            result[resultLen++] = node;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction collectNodesPostOrder(T) {\n    let node = T.root;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            node = node.parent;\n            continue;\n        }\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            node = node.right;\n            continue;\n        }\n        // handle current node\n        result[resultLen++] = node;\n        setNodeIsVisited(node, true);\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction search(T, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations) {\n    let node = T.root;\n    let delta = 0;\n    let nodeStart = 0;\n    let nodeEnd = 0;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            node = node.parent;\n            continue;\n        }\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        nodeEnd = delta + node.end;\n        node.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n        let include = true;\n        if (filterOwnerId && node.ownerId && node.ownerId !== filterOwnerId) {\n            include = false;\n        }\n        if (filterOutValidation && getNodeIsForValidation(node)) {\n            include = false;\n        }\n        if (onlyMarginDecorations && !getNodeIsInGlyphMargin(node)) {\n            include = false;\n        }\n        if (include) {\n            result[resultLen++] = node;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction intervalSearch(T, intervalStart, intervalEnd, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations) {\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n    // Now, it is known that two intervals A and B overlap only when both\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\n    // nodes overlapping with a given interval, you can immediately skip:\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\n    let node = T.root;\n    let delta = 0;\n    let nodeMaxEnd = 0;\n    let nodeStart = 0;\n    let nodeEnd = 0;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            node = node.parent;\n            continue;\n        }\n        if (!getNodeIsVisited(node.left)) {\n            // first time seeing this node\n            nodeMaxEnd = delta + node.maxEnd;\n            if (nodeMaxEnd < intervalStart) {\n                // cover case b) from above\n                // there is no need to search this node or its children\n                setNodeIsVisited(node, true);\n                continue;\n            }\n            if (node.left !== SENTINEL) {\n                // go left\n                node = node.left;\n                continue;\n            }\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        if (nodeStart > intervalEnd) {\n            // cover case a) from above\n            // there is no need to search this node or its right subtree\n            setNodeIsVisited(node, true);\n            continue;\n        }\n        nodeEnd = delta + node.end;\n        if (nodeEnd >= intervalStart) {\n            // There is overlap\n            node.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n            let include = true;\n            if (filterOwnerId && node.ownerId && node.ownerId !== filterOwnerId) {\n                include = false;\n            }\n            if (filterOutValidation && getNodeIsForValidation(node)) {\n                include = false;\n            }\n            if (onlyMarginDecorations && !getNodeIsInGlyphMargin(node)) {\n                include = false;\n            }\n            if (include) {\n                result[resultLen++] = node;\n            }\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\n//#endregion\n//#region Insertion\nfunction rbTreeInsert(T, newNode) {\n    if (T.root === SENTINEL) {\n        newNode.parent = SENTINEL;\n        newNode.left = SENTINEL;\n        newNode.right = SENTINEL;\n        setNodeColor(newNode, 0 /* NodeColor.Black */);\n        T.root = newNode;\n        return T.root;\n    }\n    treeInsert(T, newNode);\n    recomputeMaxEndWalkToRoot(newNode.parent);\n    // repair tree\n    let x = newNode;\n    while (x !== T.root && getNodeColor(x.parent) === 1 /* NodeColor.Red */) {\n        if (x.parent === x.parent.parent.left) {\n            const y = x.parent.parent.right;\n            if (getNodeColor(y) === 1 /* NodeColor.Red */) {\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(y, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent.parent, 1 /* NodeColor.Red */);\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.right) {\n                    x = x.parent;\n                    leftRotate(T, x);\n                }\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent.parent, 1 /* NodeColor.Red */);\n                rightRotate(T, x.parent.parent);\n            }\n        }\n        else {\n            const y = x.parent.parent.left;\n            if (getNodeColor(y) === 1 /* NodeColor.Red */) {\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(y, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent.parent, 1 /* NodeColor.Red */);\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.left) {\n                    x = x.parent;\n                    rightRotate(T, x);\n                }\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent.parent, 1 /* NodeColor.Red */);\n                leftRotate(T, x.parent.parent);\n            }\n        }\n    }\n    setNodeColor(T.root, 0 /* NodeColor.Black */);\n    return newNode;\n}\nfunction treeInsert(T, z) {\n    let delta = 0;\n    let x = T.root;\n    const zAbsoluteStart = z.start;\n    const zAbsoluteEnd = z.end;\n    while (true) {\n        const cmp = intervalCompare(zAbsoluteStart, zAbsoluteEnd, x.start + delta, x.end + delta);\n        if (cmp < 0) {\n            // this node should be inserted to the left\n            // => it is not affected by the node's delta\n            if (x.left === SENTINEL) {\n                z.start -= delta;\n                z.end -= delta;\n                z.maxEnd -= delta;\n                x.left = z;\n                break;\n            }\n            else {\n                x = x.left;\n            }\n        }\n        else {\n            // this node should be inserted to the right\n            // => it is not affected by the node's delta\n            if (x.right === SENTINEL) {\n                z.start -= (delta + x.delta);\n                z.end -= (delta + x.delta);\n                z.maxEnd -= (delta + x.delta);\n                x.right = z;\n                break;\n            }\n            else {\n                delta += x.delta;\n                x = x.right;\n            }\n        }\n    }\n    z.parent = x;\n    z.left = SENTINEL;\n    z.right = SENTINEL;\n    setNodeColor(z, 1 /* NodeColor.Red */);\n}\n//#endregion\n//#region Deletion\nfunction rbTreeDelete(T, z) {\n    let x;\n    let y;\n    // RB-DELETE except we don't swap z and y in case c)\n    // i.e. we always delete what's pointed at by z.\n    if (z.left === SENTINEL) {\n        x = z.right;\n        y = z;\n        // x's delta is no longer influenced by z's delta\n        x.delta += z.delta;\n        if (x.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || x.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n            T.requestNormalizeDelta = true;\n        }\n        x.start += z.delta;\n        x.end += z.delta;\n    }\n    else if (z.right === SENTINEL) {\n        x = z.left;\n        y = z;\n    }\n    else {\n        y = leftest(z.right);\n        x = y.right;\n        // y's delta is no longer influenced by z's delta,\n        // but we don't want to walk the entire right-hand-side subtree of x.\n        // we therefore maintain z's delta in y, and adjust only x\n        x.start += y.delta;\n        x.end += y.delta;\n        x.delta += y.delta;\n        if (x.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || x.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n            T.requestNormalizeDelta = true;\n        }\n        y.start += z.delta;\n        y.end += z.delta;\n        y.delta = z.delta;\n        if (y.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || y.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n            T.requestNormalizeDelta = true;\n        }\n    }\n    if (y === T.root) {\n        T.root = x;\n        setNodeColor(x, 0 /* NodeColor.Black */);\n        z.detach();\n        resetSentinel();\n        recomputeMaxEnd(x);\n        T.root.parent = SENTINEL;\n        return;\n    }\n    const yWasRed = (getNodeColor(y) === 1 /* NodeColor.Red */);\n    if (y === y.parent.left) {\n        y.parent.left = x;\n    }\n    else {\n        y.parent.right = x;\n    }\n    if (y === z) {\n        x.parent = y.parent;\n    }\n    else {\n        if (y.parent === z) {\n            x.parent = y;\n        }\n        else {\n            x.parent = y.parent;\n        }\n        y.left = z.left;\n        y.right = z.right;\n        y.parent = z.parent;\n        setNodeColor(y, getNodeColor(z));\n        if (z === T.root) {\n            T.root = y;\n        }\n        else {\n            if (z === z.parent.left) {\n                z.parent.left = y;\n            }\n            else {\n                z.parent.right = y;\n            }\n        }\n        if (y.left !== SENTINEL) {\n            y.left.parent = y;\n        }\n        if (y.right !== SENTINEL) {\n            y.right.parent = y;\n        }\n    }\n    z.detach();\n    if (yWasRed) {\n        recomputeMaxEndWalkToRoot(x.parent);\n        if (y !== z) {\n            recomputeMaxEndWalkToRoot(y);\n            recomputeMaxEndWalkToRoot(y.parent);\n        }\n        resetSentinel();\n        return;\n    }\n    recomputeMaxEndWalkToRoot(x);\n    recomputeMaxEndWalkToRoot(x.parent);\n    if (y !== z) {\n        recomputeMaxEndWalkToRoot(y);\n        recomputeMaxEndWalkToRoot(y.parent);\n    }\n    // RB-DELETE-FIXUP\n    let w;\n    while (x !== T.root && getNodeColor(x) === 0 /* NodeColor.Black */) {\n        if (x === x.parent.left) {\n            w = x.parent.right;\n            if (getNodeColor(w) === 1 /* NodeColor.Red */) {\n                setNodeColor(w, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent, 1 /* NodeColor.Red */);\n                leftRotate(T, x.parent);\n                w = x.parent.right;\n            }\n            if (getNodeColor(w.left) === 0 /* NodeColor.Black */ && getNodeColor(w.right) === 0 /* NodeColor.Black */) {\n                setNodeColor(w, 1 /* NodeColor.Red */);\n                x = x.parent;\n            }\n            else {\n                if (getNodeColor(w.right) === 0 /* NodeColor.Black */) {\n                    setNodeColor(w.left, 0 /* NodeColor.Black */);\n                    setNodeColor(w, 1 /* NodeColor.Red */);\n                    rightRotate(T, w);\n                    w = x.parent.right;\n                }\n                setNodeColor(w, getNodeColor(x.parent));\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(w.right, 0 /* NodeColor.Black */);\n                leftRotate(T, x.parent);\n                x = T.root;\n            }\n        }\n        else {\n            w = x.parent.left;\n            if (getNodeColor(w) === 1 /* NodeColor.Red */) {\n                setNodeColor(w, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent, 1 /* NodeColor.Red */);\n                rightRotate(T, x.parent);\n                w = x.parent.left;\n            }\n            if (getNodeColor(w.left) === 0 /* NodeColor.Black */ && getNodeColor(w.right) === 0 /* NodeColor.Black */) {\n                setNodeColor(w, 1 /* NodeColor.Red */);\n                x = x.parent;\n            }\n            else {\n                if (getNodeColor(w.left) === 0 /* NodeColor.Black */) {\n                    setNodeColor(w.right, 0 /* NodeColor.Black */);\n                    setNodeColor(w, 1 /* NodeColor.Red */);\n                    leftRotate(T, w);\n                    w = x.parent.left;\n                }\n                setNodeColor(w, getNodeColor(x.parent));\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(w.left, 0 /* NodeColor.Black */);\n                rightRotate(T, x.parent);\n                x = T.root;\n            }\n        }\n    }\n    setNodeColor(x, 0 /* NodeColor.Black */);\n    resetSentinel();\n}\nfunction leftest(node) {\n    while (node.left !== SENTINEL) {\n        node = node.left;\n    }\n    return node;\n}\nfunction resetSentinel() {\n    SENTINEL.parent = SENTINEL;\n    SENTINEL.delta = 0; // optional\n    SENTINEL.start = 0; // optional\n    SENTINEL.end = 0; // optional\n}\n//#endregion\n//#region Rotations\nfunction leftRotate(T, x) {\n    const y = x.right; // set y.\n    y.delta += x.delta; // y's delta is no longer influenced by x's delta\n    if (y.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || y.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n        T.requestNormalizeDelta = true;\n    }\n    y.start += x.delta;\n    y.end += x.delta;\n    x.right = y.left; // turn y's left subtree into x's right subtree.\n    if (y.left !== SENTINEL) {\n        y.left.parent = x;\n    }\n    y.parent = x.parent; // link x's parent to y.\n    if (x.parent === SENTINEL) {\n        T.root = y;\n    }\n    else if (x === x.parent.left) {\n        x.parent.left = y;\n    }\n    else {\n        x.parent.right = y;\n    }\n    y.left = x; // put x on y's left.\n    x.parent = y;\n    recomputeMaxEnd(x);\n    recomputeMaxEnd(y);\n}\nfunction rightRotate(T, y) {\n    const x = y.left;\n    y.delta -= x.delta;\n    if (y.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || y.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n        T.requestNormalizeDelta = true;\n    }\n    y.start -= x.delta;\n    y.end -= x.delta;\n    y.left = x.right;\n    if (x.right !== SENTINEL) {\n        x.right.parent = y;\n    }\n    x.parent = y.parent;\n    if (y.parent === SENTINEL) {\n        T.root = x;\n    }\n    else if (y === y.parent.right) {\n        y.parent.right = x;\n    }\n    else {\n        y.parent.left = x;\n    }\n    x.right = y;\n    y.parent = x;\n    recomputeMaxEnd(y);\n    recomputeMaxEnd(x);\n}\n//#endregion\n//#region max end computation\nfunction computeMaxEnd(node) {\n    let maxEnd = node.end;\n    if (node.left !== SENTINEL) {\n        const leftMaxEnd = node.left.maxEnd;\n        if (leftMaxEnd > maxEnd) {\n            maxEnd = leftMaxEnd;\n        }\n    }\n    if (node.right !== SENTINEL) {\n        const rightMaxEnd = node.right.maxEnd + node.delta;\n        if (rightMaxEnd > maxEnd) {\n            maxEnd = rightMaxEnd;\n        }\n    }\n    return maxEnd;\n}\nexport function recomputeMaxEnd(node) {\n    node.maxEnd = computeMaxEnd(node);\n}\nfunction recomputeMaxEndWalkToRoot(node) {\n    while (node !== SENTINEL) {\n        const maxEnd = computeMaxEnd(node);\n        if (node.maxEnd === maxEnd) {\n            // no need to go further\n            return;\n        }\n        node.maxEnd = maxEnd;\n        node = node.parent;\n    }\n}\n//#endregion\n//#region utils\nexport function intervalCompare(aStart, aEnd, bStart, bEnd) {\n    if (aStart === bStart) {\n        return aEnd - bEnd;\n    }\n    return aStart - bStart;\n}\n//#endregion\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertNever } from '../../base/common/assert.js';\nimport { Position } from './core/position.js';\nimport { InjectedTextCursorStops } from './model.js';\n/**\n * *input*:\n * ```\n * xxxxxxxxxxxxxxxxxxxxxxxxxxx\n * ```\n *\n * -> Applying injections `[i...i]`, *inputWithInjections*:\n * ```\n * xxxxxx[iiiiiiiiii]xxxxxxxxxxxxxxxxx[ii]xxxx\n * ```\n *\n * -> breaking at offsets `|` in `xxxxxx[iiiiiii|iii]xxxxxxxxxxx|xxxxxx[ii]xxxx|`:\n * ```\n * xxxxxx[iiiiiii\n * iii]xxxxxxxxxxx\n * xxxxxx[ii]xxxx\n * ```\n *\n * -> applying wrappedTextIndentLength, *output*:\n * ```\n * xxxxxx[iiiiiii\n *    iii]xxxxxxxxxxx\n *    xxxxxx[ii]xxxx\n * ```\n */\nexport class ModelLineProjectionData {\n    constructor(injectionOffsets, \n    /**\n     * `injectionOptions.length` must equal `injectionOffsets.length`\n     */\n    injectionOptions, \n    /**\n     * Refers to offsets after applying injections to the source.\n     * The last break offset indicates the length of the source after applying injections.\n     */\n    breakOffsets, \n    /**\n     * Refers to offsets after applying injections\n     */\n    breakOffsetsVisibleColumn, wrappedTextIndentLength) {\n        this.injectionOffsets = injectionOffsets;\n        this.injectionOptions = injectionOptions;\n        this.breakOffsets = breakOffsets;\n        this.breakOffsetsVisibleColumn = breakOffsetsVisibleColumn;\n        this.wrappedTextIndentLength = wrappedTextIndentLength;\n    }\n    getOutputLineCount() {\n        return this.breakOffsets.length;\n    }\n    getMinOutputOffset(outputLineIndex) {\n        if (outputLineIndex > 0) {\n            return this.wrappedTextIndentLength;\n        }\n        return 0;\n    }\n    getLineLength(outputLineIndex) {\n        // These offsets refer to model text with injected text.\n        const startOffset = outputLineIndex > 0 ? this.breakOffsets[outputLineIndex - 1] : 0;\n        const endOffset = this.breakOffsets[outputLineIndex];\n        let lineLength = endOffset - startOffset;\n        if (outputLineIndex > 0) {\n            lineLength += this.wrappedTextIndentLength;\n        }\n        return lineLength;\n    }\n    getMaxOutputOffset(outputLineIndex) {\n        return this.getLineLength(outputLineIndex);\n    }\n    translateToInputOffset(outputLineIndex, outputOffset) {\n        if (outputLineIndex > 0) {\n            outputOffset = Math.max(0, outputOffset - this.wrappedTextIndentLength);\n        }\n        const offsetInInputWithInjection = outputLineIndex === 0 ? outputOffset : this.breakOffsets[outputLineIndex - 1] + outputOffset;\n        let offsetInInput = offsetInInputWithInjection;\n        if (this.injectionOffsets !== null) {\n            for (let i = 0; i < this.injectionOffsets.length; i++) {\n                if (offsetInInput > this.injectionOffsets[i]) {\n                    if (offsetInInput < this.injectionOffsets[i] + this.injectionOptions[i].content.length) {\n                        // `inputOffset` is within injected text\n                        offsetInInput = this.injectionOffsets[i];\n                    }\n                    else {\n                        offsetInInput -= this.injectionOptions[i].content.length;\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        return offsetInInput;\n    }\n    translateToOutputPosition(inputOffset, affinity = 2 /* PositionAffinity.None */) {\n        let inputOffsetInInputWithInjection = inputOffset;\n        if (this.injectionOffsets !== null) {\n            for (let i = 0; i < this.injectionOffsets.length; i++) {\n                if (inputOffset < this.injectionOffsets[i]) {\n                    break;\n                }\n                if (affinity !== 1 /* PositionAffinity.Right */ && inputOffset === this.injectionOffsets[i]) {\n                    break;\n                }\n                inputOffsetInInputWithInjection += this.injectionOptions[i].content.length;\n            }\n        }\n        return this.offsetInInputWithInjectionsToOutputPosition(inputOffsetInInputWithInjection, affinity);\n    }\n    offsetInInputWithInjectionsToOutputPosition(offsetInInputWithInjections, affinity = 2 /* PositionAffinity.None */) {\n        let low = 0;\n        let high = this.breakOffsets.length - 1;\n        let mid = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            const midStop = this.breakOffsets[mid];\n            midStart = mid > 0 ? this.breakOffsets[mid - 1] : 0;\n            if (affinity === 0 /* PositionAffinity.Left */) {\n                if (offsetInInputWithInjections <= midStart) {\n                    high = mid - 1;\n                }\n                else if (offsetInInputWithInjections > midStop) {\n                    low = mid + 1;\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                if (offsetInInputWithInjections < midStart) {\n                    high = mid - 1;\n                }\n                else if (offsetInInputWithInjections >= midStop) {\n                    low = mid + 1;\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        let outputOffset = offsetInInputWithInjections - midStart;\n        if (mid > 0) {\n            outputOffset += this.wrappedTextIndentLength;\n        }\n        return new OutputPosition(mid, outputOffset);\n    }\n    normalizeOutputPosition(outputLineIndex, outputOffset, affinity) {\n        if (this.injectionOffsets !== null) {\n            const offsetInInputWithInjections = this.outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset);\n            const normalizedOffsetInUnwrappedLine = this.normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections, affinity);\n            if (normalizedOffsetInUnwrappedLine !== offsetInInputWithInjections) {\n                // injected text caused a change\n                return this.offsetInInputWithInjectionsToOutputPosition(normalizedOffsetInUnwrappedLine, affinity);\n            }\n        }\n        if (affinity === 0 /* PositionAffinity.Left */) {\n            if (outputLineIndex > 0 && outputOffset === this.getMinOutputOffset(outputLineIndex)) {\n                return new OutputPosition(outputLineIndex - 1, this.getMaxOutputOffset(outputLineIndex - 1));\n            }\n        }\n        else if (affinity === 1 /* PositionAffinity.Right */) {\n            const maxOutputLineIndex = this.getOutputLineCount() - 1;\n            if (outputLineIndex < maxOutputLineIndex && outputOffset === this.getMaxOutputOffset(outputLineIndex)) {\n                return new OutputPosition(outputLineIndex + 1, this.getMinOutputOffset(outputLineIndex + 1));\n            }\n        }\n        return new OutputPosition(outputLineIndex, outputOffset);\n    }\n    outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset) {\n        if (outputLineIndex > 0) {\n            outputOffset = Math.max(0, outputOffset - this.wrappedTextIndentLength);\n        }\n        const result = (outputLineIndex > 0 ? this.breakOffsets[outputLineIndex - 1] : 0) + outputOffset;\n        return result;\n    }\n    normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections, affinity) {\n        const injectedText = this.getInjectedTextAtOffset(offsetInInputWithInjections);\n        if (!injectedText) {\n            return offsetInInputWithInjections;\n        }\n        if (affinity === 2 /* PositionAffinity.None */) {\n            if (offsetInInputWithInjections === injectedText.offsetInInputWithInjections + injectedText.length\n                && hasRightCursorStop(this.injectionOptions[injectedText.injectedTextIndex].cursorStops)) {\n                return injectedText.offsetInInputWithInjections + injectedText.length;\n            }\n            else {\n                let result = injectedText.offsetInInputWithInjections;\n                if (hasLeftCursorStop(this.injectionOptions[injectedText.injectedTextIndex].cursorStops)) {\n                    return result;\n                }\n                let index = injectedText.injectedTextIndex - 1;\n                while (index >= 0 && this.injectionOffsets[index] === this.injectionOffsets[injectedText.injectedTextIndex]) {\n                    if (hasRightCursorStop(this.injectionOptions[index].cursorStops)) {\n                        break;\n                    }\n                    result -= this.injectionOptions[index].content.length;\n                    if (hasLeftCursorStop(this.injectionOptions[index].cursorStops)) {\n                        break;\n                    }\n                    index--;\n                }\n                return result;\n            }\n        }\n        else if (affinity === 1 /* PositionAffinity.Right */ || affinity === 4 /* PositionAffinity.RightOfInjectedText */) {\n            let result = injectedText.offsetInInputWithInjections + injectedText.length;\n            let index = injectedText.injectedTextIndex;\n            // traverse all injected text that touch each other\n            while (index + 1 < this.injectionOffsets.length && this.injectionOffsets[index + 1] === this.injectionOffsets[index]) {\n                result += this.injectionOptions[index + 1].content.length;\n                index++;\n            }\n            return result;\n        }\n        else if (affinity === 0 /* PositionAffinity.Left */ || affinity === 3 /* PositionAffinity.LeftOfInjectedText */) {\n            // affinity is left\n            let result = injectedText.offsetInInputWithInjections;\n            let index = injectedText.injectedTextIndex;\n            // traverse all injected text that touch each other\n            while (index - 1 >= 0 && this.injectionOffsets[index - 1] === this.injectionOffsets[index]) {\n                result -= this.injectionOptions[index - 1].content.length;\n                index--;\n            }\n            return result;\n        }\n        assertNever(affinity);\n    }\n    getInjectedText(outputLineIndex, outputOffset) {\n        const offset = this.outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset);\n        const injectedText = this.getInjectedTextAtOffset(offset);\n        if (!injectedText) {\n            return null;\n        }\n        return {\n            options: this.injectionOptions[injectedText.injectedTextIndex]\n        };\n    }\n    getInjectedTextAtOffset(offsetInInputWithInjections) {\n        const injectionOffsets = this.injectionOffsets;\n        const injectionOptions = this.injectionOptions;\n        if (injectionOffsets !== null) {\n            let totalInjectedTextLengthBefore = 0;\n            for (let i = 0; i < injectionOffsets.length; i++) {\n                const length = injectionOptions[i].content.length;\n                const injectedTextStartOffsetInInputWithInjections = injectionOffsets[i] + totalInjectedTextLengthBefore;\n                const injectedTextEndOffsetInInputWithInjections = injectionOffsets[i] + totalInjectedTextLengthBefore + length;\n                if (injectedTextStartOffsetInInputWithInjections > offsetInInputWithInjections) {\n                    // Injected text starts later.\n                    break; // All later injected texts have an even larger offset.\n                }\n                if (offsetInInputWithInjections <= injectedTextEndOffsetInInputWithInjections) {\n                    // Injected text ends after or with the given position (but also starts with or before it).\n                    return {\n                        injectedTextIndex: i,\n                        offsetInInputWithInjections: injectedTextStartOffsetInInputWithInjections,\n                        length\n                    };\n                }\n                totalInjectedTextLengthBefore += length;\n            }\n        }\n        return undefined;\n    }\n}\nfunction hasRightCursorStop(cursorStop) {\n    if (cursorStop === null || cursorStop === undefined) {\n        return true;\n    }\n    return cursorStop === InjectedTextCursorStops.Right || cursorStop === InjectedTextCursorStops.Both;\n}\nfunction hasLeftCursorStop(cursorStop) {\n    if (cursorStop === null || cursorStop === undefined) {\n        return true;\n    }\n    return cursorStop === InjectedTextCursorStops.Left || cursorStop === InjectedTextCursorStops.Both;\n}\nexport class InjectedText {\n    constructor(options) {\n        this.options = options;\n    }\n}\nexport class OutputPosition {\n    constructor(outputLineIndex, outputOffset) {\n        this.outputLineIndex = outputLineIndex;\n        this.outputOffset = outputOffset;\n    }\n    toString() {\n        return `${this.outputLineIndex}:${this.outputOffset}`;\n    }\n    toPosition(baseLineNumber) {\n        return new Position(baseLineNumber + this.outputLineIndex, this.outputOffset + 1);\n    }\n}\n"],"names":["TokenMetadata","_classCallCheck","_createClass","key","value","metadata","className","this","getForeground","fontStyle","getFontStyle","colorMap","foreground","result","concat","textDecoration","italic","Boolean","bold","underline","strikethrough","score","selector","candidateUri","candidateLanguage","candidateIsSynchronized","candidateNotebookUri","candidateNotebookType","Array","isArray","_step","ret","_iterator","_createForOfIteratorHelper","s","n","done","err","e","f","language","pattern","scheme","hasAccessToAllModels","notebookType","Math","max","undefined","normalizedPattern","Object","assign","base","normalize","fsPath","matchGlobPattern","isExclusive","every","exclusive","MatchCandidate","uri","languageId","notebookUri","other","_a","_b","toString","LanguageFeatureRegistry","_notebookInfoResolver","_clock","_entries","_onDidChange","Emitter","onDidChange","event","provider","_this","entry","_score","_time","push","_lastCandidate","fire","length","toDisposable","idx","indexOf","splice","model","all","_updateScores","_orderedForEach","lastBucket","lastBucketScore","callback","_step2","_iterator2","notebookInfo","call","candidate","getLanguageId","type","equals","_step3","_iterator3","shouldSynchronizeModel","_step4","_iterator4","sort","_compareByScoreAndTime","a","b","isBuiltinSelector","some","isBuiltin","CompletionItemKinds","InlineCompletionTriggerKind","Token","offset","_tokenBrand","TokenizationResult","tokens","endState","_tokenizationResultBrand","EncodedTokenizationResult","_encodedTokenizationResultBrand","byKind","Map","set","Codicon","symbolMethod","symbolFunction","symbolConstructor","symbolField","symbolVariable","symbolClass","symbolStruct","symbolInterface","symbolModule","symbolProperty","symbolEvent","symbolOperator","symbolUnit","symbolValue","symbolEnum","symbolConstant","symbolEnumMember","symbolKeyword","symbolSnippet","symbolText","symbolColor","symbolFile","symbolReference","symbolCustomColor","symbolFolder","symbolTypeParameter","account","issues","toIcon","kind","codicon","get","console","info","data","fromString","strict","res","SignatureHelpTriggerKind","DocumentHighlightKind","SelectedSuggestionInfo","range","text","completionKind","isSnippetText","Range","lift","equalsRange","isLocationLink","thing","URI","isUri","isIRange","originSelectionRange","targetSelectionRange","SymbolKinds","symbolKindNames","_symbolKindNames","_defineProperty","localize","getAriaLabelForSymbol","symbolName","symbolNamespace","symbolPackage","symbolString","symbolNumber","symbolBoolean","symbolArray","symbolObject","symbolKey","symbolNull","icon","Command","InlayHintKind","FoldingRangeKind","Comment","Imports","Region","is","obj","id","title","LazyTokenizationSupport","createSupport","_tokenizationSupport","then","support","dispose","TokenizationRegistry","TokenizationRegistryImpl","getInheritIndentForLine","autoIndent","lineNumber","honorIntentialIndent","arguments","indentRulesSupport","getLanguageConfiguration","tokenization","indentation","action","priorLineNumber","getLineContent","precedingUnIgnoredLine","getLanguageIdAtPosition","lastLineNumber","resultLineNumber","shouldIgnore","test","getPrecedingValidLine","precedingUnIgnoredLineContent","shouldIncrease","shouldIndentNextLine","strings","IndentAction","Indent","line","shouldDecrease","previousLine","previousLineIndentMetadata","getIndentMetadata","stopLine","i","lineContent","j","getGoodIndentForLine","virtualModel","indentConverter","languageConfigurationService","richEditSupport","indent","inheritLine","shouldApplyEnterRules","inBetweenLine","enterResult","onEnter","removeText","substring","indentAction","IndentOutdent","shiftIndent","Outdent","unshiftIndent","appendText","getIndentForEnter","forceTokenization","startLineNumber","beforeEnterText","afterEnterText","lineTokens","getLineTokens","scopedLineTokens","createScopedLineTokens","startColumn","scopedLineText","embeddedLanguage","firstCharOffset","substr","isEmpty","getScopedLineTokens","endLineNumber","endColumn","beforeEnterResult","beforeEnterIndent","column","currentLineIndent","afterEnterAction","beforeEnter","afterEnter","afterEnterIndent","getIndentActionForType","ch","afterTypeText","beforeTypeText","r","getLineCount","_parseCaptureGroups","captureGroups","values","captureGroup","parsedNumber","Number","replace","_toIColor","g","red","blue","green","alpha","_findRange","match","index","startPosition","positionAt","_findHexColorInformation","hexValue","parsedHexColor","Color","Format","CSS","parseHex","color","rgba","_findRGBColorInformation","matches","isAlpha","parsedRegex","_findHSLColorInformation","colorEquivalent","HSLA","_findMatches","regex","_toConsumableArray","matchAll","findMatches","computeDefaultDocumentColors","getValue","initialValidationMatches","initialMatch","initialCaptureGroups","filter","colorScheme","colorParameters","colorInformation","computeColors","getEnterAction","previousLineText","oneLineAboveScopedLineTokens","getIndentationAtPosition","ILanguageService","createDecorator","StandardAutoClosingPairConditional","source","_neutralCharacter","_neutralCharacterSearched","open","close","_inString","_inComment","_inRegEx","notIn","len","standardToken","context","getTokenCount","tokenIndex","findTokenIndexAtOffset","standardTokenType","getStandardTokenType","isOK","fromCharCode","toCharCode","charCode","character","String","includes","_findNeutralCharacterInRange","AutoClosingPairs","autoClosingPairs","autoClosingPairsOpenByStart","autoClosingPairsOpenByEnd","autoClosingPairsCloseByStart","autoClosingPairsCloseByEnd","autoClosingPairsCloseSingleChar","pair","appendEntry","charAt","target","has","CharacterPairSupport","config","_autoClosingPairs","map","el","brackets","__electricCharacterSupport","docComment","_autoCloseBeforeForQuotes","autoCloseBefore","DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES","_autoCloseBeforeForBrackets","DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS","_surroundingPairs","surroundingPairs","forQuotes","BracketElectricCharacterSupport","richEditBrackets","_richEditBrackets","bracket","lastChar","distinct","ignoreBracketsInToken","reversedBracketRegex","reversedRegex","BracketsUtils","findPrevBracketInRange","bracketText","toLowerCase","textIsOpenBracket","textBeforeBracket","getActualLineContentBefore","matchOpenBracket","resetGlobalRegex","reg","global","lastIndex","IndentRulesSupport","indentationRules","_indentationRules","increaseIndentPattern","decreaseIndentPattern","indentNextLinePattern","unIndentedLinePattern","OnEnterSupport","opts","_brackets","forEach","openRegExp","_createOpenBracketRegExp","closeRegExp","_createCloseBracketRegExp","_regExpRules","onEnterRules","rule","beforeText","afterText","str","_safeRegExp","def","RegExp","onUnexpectedError","LanguageBracketsConfiguration","bracketPairs","filterValidBrackets","openingBracketInfos","CachedFunction","closing","Set","OpeningBracketKind","closingBracketInfos","opening","openingColorized","ClosingBracketKind","_step$value","_slicedToArray","add","colorizedBracketPairs","p","_step2$value","_openingBrackets","cachedValues","_ref","_ref2","_closingBrackets","_ref3","_ref4","getOpeningBracketInfo","getClosingBracketInfo","_ref5","_ref6","BracketKindBase","_BracketKindBase","_inherits","_super","_createSuper","openedBrackets","_this2","isOpeningBracket","_BracketKindBase2","_super2","openingBrackets","openingColorizedBrackets","_this3","__decorate","decorators","desc","d","c","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","LanguageConfigurationServiceChangeEvent","ILanguageConfigurationService","LanguageConfigurationService","_Disposable","configurationService","languageService","_registry","_register","LanguageConfigurationRegistry","onDidChangeEmitter","configurations","languageConfigKeys","customizedLanguageConfigKeys","onDidChangeConfiguration","globalConfigChanged","change","keys","k","localConfigChanged","overrides","clear","isRegisteredLanguageId","delete","configuration","priority","register","registry","languageConfig","ResolvedLanguageConfiguration","customizedConfig","overrideIdentifier","validateBracketPairs","getCustomizedLanguageConfig","combineLanguageConfigurations","underlyingConfig","computeConfig","Disposable","IConfigurationService","lineText","columnNumber","getLineMaxColumn","ComposedLanguageConfiguration","_resolved","_order","LanguageConfigurationContribution","_resolve","cmp","configs","comments","wordPattern","folding","order","LanguageConfigurationChangeEvent","_Disposable2","PLAINTEXT_LANGUAGE_ID","offSide","_this4","entries","disposable","getResolvedConfiguration","_electricCharacter","_onEnterSupport","_handleComments","characterPair","wordDefinition","DEFAULT_WORD_REGEXP","foldingRules","bracketsNew","ensureValidWordDefinition","RichEditBrackets","getAutoClosingPairs","getAutoCloseBeforeSet","getSurroundingPairs","conf","commentRule","lineComment","lineCommentToken","blockComment","_commentRule$blockCom","blockStart","blockEnd","blockCommentStartToken","blockCommentEndToken","registerSingleton","Uint8Matrix","rows","cols","defaultValue","Uint8Array","_data","row","col","StateMachine","edges","maxCharCode","maxState","_edges$i","from","chCode","to","states","_edges$_i","_states","_maxCharCode","currentState","_stateMachine","_classifier","LinkComputer","classifier","linkBeginIndex","linkEndIndex","lastIncludedCharIndex","charCodeAt","charCodeBeforeLink","lastCharCodeInLink","url","stateMachine","CharacterClassifier","FORCE_TERMINATION_CHARACTERS","CANNOT_END_WITH_CHARACTERS","getClassifier","lineCount","linkBeginChCode","state","hasOpenParens","hasOpenSquareBracket","inSquareBrackets","hasOpenCurlyBracket","resetStateMachine","chClass","_createLink","nextState","computeLinks","ModesRegistry","EditorModesRegistry","_onDidChangeLanguages","onDidChangeLanguages","_languages","Registry","registerLanguage","extensions","aliases","nls","mimetypes","Mimes","as","ConfigurationExtensions","Configuration","registerDefaultConfigurations","NullState","_class","nullTokenize","nullTokenizeEncoded","Uint32Array","tokenCount","getCount","desiredLanguageId","lastTokenIndex","firstTokenIndex","ScopedLineTokens","getStartOffset","getEndOffset","actual","lastCharOffset","_scopedLineTokensBrand","_actual","_firstTokenIndex","_lastTokenIndex","_lastCharOffset","BasicInplaceReplace","_defaultValueSet","range1","text1","range2","text2","up","doNavigateValueSet","numberResult","numberReplace","textReplace","precision","pow","lastIndexOf","n1","n2","parseFloat","isNaN","floor","valueSetsReplace","valueSets","valueSetReplace","valueSet","INSTANCE","RichEditBracket","forwardRegex","_richEditBracketBrand","_openSet","_toSet","_closeSet","arr","element","_richEditBracketsBrand","N","group","areOverlapping","aOpen","aClose","bOpen","bClose","mergeGroups","g1","g2","newG","min","oldG","currentOpen","currentClose","_brackets$_i","groupFuzzyBrackets","currentIndex","pieces","collectSuperstrings","unique","lengthcmp","reverse","createBracketOrRegExp","getRegexForBracketPair","toReversedString","getReversedRegexForBracketPair","_step8","_iterator8","_step9","_iterator9","_step10","_iterator10","getRegexForBrackets","_step11","_iterator11","_step12","_iterator12","_step13","_iterator13","getReversedRegexForBrackets","textIsBracket","maxBracketLength","dest","_step5","_iterator5","_step6","_iterator6","_step7","seen","_iterator7","prepareBracketForRegExp","insertWordBoundaries","regexStr","join","lastInput","lastOutput","Uint16Array","stringBuilder","decode","reversedText","m","matchOffset","matchLength","absoluteMatchOffset","startOffset","endOffset","reversedSubstr","_findPrevBracketInText","bracketRegex","findNextBracketInText","ParsedTokenThemeRule","token","background","_parsedThemeRuleBrand","resolveParsedTokenThemeRules","parsedThemeRules","customTokenColors","strcmp","defaultFontStyle","defaultForeground","defaultBackground","incomingDefaults","shift","ColorMap","getId","foregroundColorId","backgroundColorId","defaults","ThemeTrieElementRule","root","ThemeTrieElement","insert","TokenTheme","colorRegExp","_lastColorId","_id2color","_color2id","Error","toUpperCase","fromHex","slice","_colorMap","_root","_cache","getColorMap","_match","tokenType","STANDARD_TOKEN_TYPE_REGEXP","toStandardTokenType","createFromParsedTokenTheme","resultLen","segments","split","lenJ","parseTokenTheme","_themeTrieElementRuleBrand","_fontStyle","_foreground","_background","mainRule","_themeTrieElementBrand","_mainRule","_children","head","tail","dotIndex","child","clone","acceptOverwrite","generateTokensCSSForColorMap","rules","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","apply","fallback","getInitialState","tokenizeEncoded","buffer","hasEOL","tokenizeToString","_regeneratorRuntime","mark","_callee","tokenizationSupport","wrap","_context","prev","abrupt","_tokenizeToString","languageIdCodec","getOrCreate","sent","stop","tokenizeLineToHTML","viewLineTokens","tabSize","useNbsp","charIndex","tabsCharDelta","prevIsSpace","tokenEndIndex","partContent","insertSpacesCount","getInlineStyle","lines","tokenizationResult","LineTokens","convertToEndOffset","inflate","getClassName","endIndex","OverviewRulerLane","GlyphMarginLane","MinimapPosition","InjectedTextCursorStops","TextModelResolvedOptions","src","_textModelResolvedOptionsBrand","indentSize","_indentSizeIsTabSize","insertSpaces","defaultEOL","trimAutoWhitespace","bracketPairColorizationOptions","newOpts","FindMatch","_findMatchBrand","isITextSnapshot","read","ValidAnnotatedEditOperation","identifier","forceMoveMarkers","isAutoWhitespaceEdit","_isTracked","SearchData","wordSeparators","simpleSearch","ApplyEditsResult","reverseEdits","changes","trimAutoWhitespaceLineNumbers","isTooLargeForSyncing","isForSimpleWidget","BracketPairsTree","textModel","didChangeEmitter","denseKeyProvider","DenseKeyProvider","LanguageAgnosticBracketTokens","queuedTextEditsForInitialAstWithoutTokens","queuedTextEdits","hasTokens","backgroundTokenizationState","initialAstWithoutTokens","astWithTokens","parseDocumentFromTextBuffer","getSingleLanguageBracketTokens","tokenizer","FastTokenizer","parseDocument","didLanguageChange","wasUndefined","edits","ranges","TextEditInfo","toLength","fromLineNumber","toLineNumber","handleEdits","fromModelContentChanges","tokenChange","combineTextEditInfos","previousAst","immutable","previousAstClone","TextBufferTokenizer","onlyColorizedBrackets","flushQueue","CallbackIterable","cb","node","collectBrackets","lengthZero","includeMinIndentation","startLength","positionToLength","getStartPosition","endLength","getEndPosition","CollectBracketPairsContext","collectBracketPairs","position","getFirstBracketAfter","getFirstBracketBefore","nodeOffsetStart","nodeOffsetEnd","lengths","children","lengthAdd","_lengths$i","lengthLessThan","lengthsToRange","bracketInfo","level","nestingLevelOfEqualBracketType","levelPerBracketType","parentPairIsIncomplete","whileLoop","childCount","childrenLength","getChild","lengthLessThanEqual","lengthGreaterThanEqual","colorize","closingBracket","closesColorized","openingBracket","levelPerBracket","existing","BracketInfo","shouldContinue","openingBracketEnd","minIndentation","computeMinIndentation","BracketPairWithMinIndentationInfo","curOffset","childOffset","BracketPairsTextModelPart","bracketPairsTree","MutableDisposable","bracketsRequested","object","updateBracketPairsTree","getValueLength","handleContentChanged","handleDidChangeBackgroundTokenizationState","handleDidChangeTokens","canBuildAST","store","DisposableStore","getBracketPairsInRange","empty","getBracketsInRange","_bracket","_position","maxDuration","validatePosition","closingBracketInfo","bracketPair","fromPositions","findLast","closes","openingBracketInfo","openingBracketRange","bracketsSupport","stripBracketSearchCanceled","_findMatchingBracketUp","createTimeBasedContinueBracketSearchPredicate","item","closingBracketRange","containsPosition","findLastMaxBy","compareBy","compareRangesUsingStarts","continueSearchPredicate","_matchBracket","modeBrackets","currentLanguageId","searchStartOffset","tokenEndOffset","searchEndOffset","tokenStartOffset","currentModeBrackets","_this$_establishBrack","_establishBracketSearchOffsets","bestResult","foundBracket","findNextBracketInRange","foundBracketText","_matchFoundBracket","BracketSearchCanceled","prevTokenIndex","prevModeBrackets","_this$_establishBrack2","isOpen","matched","_findMatchingBracketDown","count","totalCallCount","searchPrevMatchingBracketInRange","hitText","isClose","prevSearchInToken","searchInToken","searchNextMatchingBracketInRange","bracketConfig","tokenLanguageId","_toFoundBracket","strictContainsRange","savedCounts","counts","resetCounts","tmp","searchInRange","getValueInRange","getBracketInfo","startTime","Date","now","_searchCanceledBrand","BaseAstNode","_length","PairAstNode","_BaseAstNode","missingOpeningBracketIds","openBracketIds","intersects","deepClone","MAX_SAFE_INTEGER","SmallImmutableSet","getEmpty","ListAstNode","_BaseAstNode2","listHeight","_missingOpeningBracketIds","cachedMinIndentation","throwIfImmutable","lastChild","mutable","toMutable","setChild","firstChild","lastLength","BugIndicatingError","canBeReused","unopenedBrackets","merge","item1","item2","item3","missingBracketIds","Immutable23ListAstNode","TwoThreeListAstNode","ImmutableArrayListAstNode","_ListAstNode","_super3","_item1","_item2","_item3","handleChildrenChanged","_TwoThreeListAstNode","_super4","ArrayListAstNode","_ListAstNode2","_super5","pop","unshift","_ArrayListAstNode","_super6","emptyArray","ImmutableLeafAstNode","_BaseAstNode3","_super7","TextAstNode","_ImmutableLeafAstNode","_super8","_openedBracketIds","start","lengthToObj","columnCount","lengthGetLineCount","firstNonWsColumn","getLineFirstNonWhitespaceColumn","visibleColumn","CursorColumns","visibleColumnFromColumn","getOptions","BracketAstNode","_ImmutableLeafAstNode2","_super9","bracketIds","_this5","InvalidBracketAstNode","_ImmutableLeafAstNode3","_super10","closingBrackets","_this6","openedBracketIds","newLength","lengthOfString","BeforeEditPositionMapper","nextEditIdx","deltaOldToNewLineCount","deltaOldToNewColumnCount","deltaLineIdxInOld","edit","TextEditInfoCache","adjustNextEdit","translateCurToOld","nextEdit","nextChangeOffset","translateOldToCur","offsetObj","lengthDiffNonNegative","oldOffsetObj","newOffset","nextEditEndOffsetInCur","endOffsetAfterObj","nextEditEndOffsetInCurObj","nextEditEndOffsetBeforeInCurObj","endOffsetBeforeObj","lineDelta","previousColumnDelta","columnDelta","textLength","BracketTokens","hasRegExp","_regExpGlobal","escaped","escapeRegExpCharacters","regExpStr","getRegExpStr","openingBracketIds","closingText","size","getKey","openingTextId","identityKeyProvider","create","getOpeningBrackets","languageIdToBracketTokens","singleLanguageBracketTokens","createFromLanguage","textEditInfoFirst","textEditInfoSecond","s0ToS1Map","ArrayQueue","toLengthMapping","s1ToS2Map","modified","lengthBefore","lengthAfter","curItem","dequeue","nextS0ToS1MapWithS1LengthOf","s1Length","takeWhile","v","lengthIsZero","_curItem$splitAt","splitAt","_curItem$splitAt2","remainingItem","LengthMapping","pushEdit","lengthEquals","lastResult","s0offset","s1ToS2","s0Length","sumLengths","s0EndOffset","s1","s0startOffset","remainingLengthAfter","textEditInfos","lastOffset","textEditInfo","spaceLength","LengthObj","lengthDiff","startLineCount","startColumnCount","endLineCount","endColumnCount","zero","factor","l","lengthGetColumnCountIfZeroLineCount","l1","l2","items","lengthFn","reduce","length1","length2","lineCount1","lineCount2","colCount2","lengthToPosition","colCount","Position","lengthStart","lengthEnd","lengthOfRange","splitLines","concat23TreesOfSameHeight","createImmutableLists","create23","heightDiff","node1","node2","abs","list","nodeToAppend","nodeToAppendOfCorrectHeight","curNode","parents","makeLastElementMutable","parent","unappendChild","appendChildOfSameHeight","append","makeFirstElementMutable","nodeToPrependOfCorrectHeight","unprependChild","prependChildOfSameHeight","prepend","NodeReader","nextNodes","offsets","idxs","predicate","lastOrUndefined","curNodeOffset","nextNodeAfterCurrent","nextChildIdx","getNextChildIdx","currentOffset","currentNode","curIdx","oldNode","Parser","_itemsConstructed","_itemsFromCache","oldNodeReader","positionMapper","parseList","tryReadChildFromCache","peek","parseChild","readNode","height","first","second","concat23Trees","maxCacheableLength","getDistanceToNextChange","cachedNode","readLongestNodeAt","getOffsetBeforeChange","skip","astNode","nextToken","bracketId","emptyArr","additionalItems","keyProvider","newItem","newItems","merged","cached","cache","bracketTokens","reader","NonPeekableTextBufferTokenizer","_offset","didPeek","peeked","textBufferLineCount","textBufferLastLineLength","getLineLength","setPosition","lineIdx","lineCharOffset","lineTokenOffset","peekedToken","startLineIdx","startLineCharOffset","lengthHeuristic","peekedBracketToken","tokenMetadata","getMetadata","isOther","getTokenType","containsBracketType","containsBalancedBrackets","regexp","regExpGlobal","exec","getToken","curLineCount","lastLineBreakOffset","lastTokenEndOffset","lastTokenEndLine","smallTextTokens0Line","smallTextTokens1Line","NotSupportedError","ColorizedBracketPairsDecorationProvider","colorProvider","ColorProvider","colorizationOptions","ownerId","filterOutValidation","onlyMinimapDecorations","enabled","nestingLevel","options","description","inlineClassName","getInlineClassName","independentColorPoolPerBracketType","toArray","getDecorationsInRange","unexpectedClosingBracketClassName","isInvalid","getInlineClassNameOfLevel","registerThemingParticipant","theme","collector","colors","editorBracketHighlightingForeground1","editorBracketHighlightingForeground2","editorBracketHighlightingForeground3","editorBracketHighlightingForeground4","editorBracketHighlightingForeground5","editorBracketHighlightingForeground6","addRule","getColor","editorBracketHighlightingUnexpectedBracketForeground","colorValues","isTransparent","fixBracketsInLine","StaticTokenizerSource","processNode","closingTokenText","findClosingTokenText","uriGetComparisonKey","resource","SingleModelEditStackData","beforeVersionId","afterVersionId","beforeEOL","afterEOL","beforeCursorState","afterCursorState","textChanges","compressConsecutiveTextChanges","necessarySize","_writeSelectionsSize","writeSize","_writeSelections","write","alternativeVersionId","getAlternativeVersionId","eol","getModelEOL","selections","selection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","Selection","_readSelections","changeCount","TextChange","SingleModelEditStackElement","label","code","deserialize","serialize","_applyUndo","_applyRedo","byteLength","MultiModelEditStackElement","editStackElements","_isOpen","_editStackElementsArr","_editStackElementsMap","editStackElement","_delegate","prepareUndoRedo","setModel","canAppend","undo","redo","heapSize","basename","getEOL","isEditStackElement","EditStack","undoRedoService","_model","_undoRedoService","lastElement","getLastElement","removeElements","newElement","pushElement","_getOrCreateEditStackElement","setEOL","editOperations","cursorStateComputer","inverseEditOperations","applyEdits","_computeCursorState","op","textChange","oldPosition","FixedArray","_default","_store","oldLength","before","after","insertArr","arrayFill","deleteIndex","deleteCount","insertIndex","insertCount","arrayInsert","GuidesTextModelPart","_TextModelPart","lineIndex","computeIndentLevel","minLineNumber","maxLineNumber","assertNotDisposed","up_aboveContentLineIndex","up_aboveContentLineIndent","up_belowContentLineIndex","up_belowContentLineIndent","up_resolveIndents","_computeIndentLevel","down_aboveContentLineIndex","down_aboveContentLineIndent","down_belowContentLineIndex","down_belowContentLineIndent","down_resolveIndents","goUp","goDown","initialIndent","distance","upLineNumber","downLineNumber","upLineIndentLevel","currentIndent","ceil","_getIndentLevelForWhitespaceLine","downLineIndentLevel","activePosition","getBracketPairsInRangeWithMinIndentation","activeBracketPairRange","bracketsContainingActivePosition","bp","strictContainsPosition","BracketPairGuidesClassNames","isActive","includeInactive","highlightActive","activeClassName","end","horizontalGuides","HorizontalGuidesState","Enabled","EnabledForActive","endVisibleColumn","getVisibleColumnFromPosition","startVisibleColumn","guideVisibleColumn","minVisibleColumnIndentation","renderHorizontalEndLineAtTheBottom","visibleGuideStartLineNumber","visibleGuideEndLineNumber","IndentGuide","IndentGuideHorizontalLine","_i","_result","aboveContentLineIndex","aboveContentLineIndent","belowContentLineIndex","belowContentLineIndent","resultIndex","TextModelPart","SpacesDiffResult","spacesDiff","looksLikeAlignment","aLength","bLength","aSpacesCnt","aTabsCount","bSpacesCnt","bTabsCount","tabsDiff","guessIndentation","defaultTabSize","defaultInsertSpaces","linesCount","linesIndentedWithTabsCount","linesIndentedWithSpacesCount","previousLineIndentation","spacesDiffCount","currentLineLength","currentLineText","useCurrentLineText","currentLineHasContent","currentLineIndentation","currentLineSpacesCount","currentLineTabsCount","getLineCharCode","currentSpacesDiff","tabSizeScore","possibleTabSize","possibleTabSizeScore","getNodeColor","setNodeColor","getNodeIsVisited","setNodeIsVisited","getNodeIsForValidation","setNodeIsForValidation","getNodeIsInGlyphMargin","setNodeIsInGlyphMargin","_setNodeStickiness","stickiness","setCollapseOnReplaceEdit","IntervalNode","left","right","delta","maxEnd","cachedVersionId","cachedAbsoluteStart","cachedAbsoluteEnd","versionId","glyphMarginClassName","collapseOnReplaceEdit","absoluteStart","absoluteEnd","SENTINEL","IntervalTree","requestNormalizeDelta","filterOwnerId","onlyMarginDecorations","T","intervalStart","intervalEnd","nodeStart","nodeEnd","setCachedOffsets","include","intervalSearch","search","collectNodesFromOwner","collectNodesPostOrder","rbTreeInsert","_normalizeDeltaIfNecessary","rbTreeDelete","initialNode","nodesOfInterest","searchForEditing","editDelta","recomputeMaxEnd","noOverlapReplace","nodeAcceptEdit","normalizeDelta","adjustMarkerBeforeColumn","markerOffset","markerStickToPreviousCharacter","checkOffset","moveSemantics","nodeStickiness","getNodeStickiness","startStickToPreviousCharacter","endStickToPreviousCharacter","deletingCnt","insertingCnt","commonLength","startDone","endDone","getCollapseOnReplaceEdit","deltaColumn","newNode","z","x","zAbsoluteStart","zAbsoluteEnd","intervalCompare","treeInsert","recomputeMaxEndWalkToRoot","y","leftRotate","rightRotate","leftest","detach","resetSentinel","w","yWasRed","computeMaxEnd","leftMaxEnd","rightMaxEnd","aStart","aEnd","bStart","bEnd","ModelLineProjectionData","injectionOffsets","injectionOptions","breakOffsets","breakOffsetsVisibleColumn","wrappedTextIndentLength","outputLineIndex","lineLength","outputOffset","offsetInInput","content","inputOffset","affinity","inputOffsetInInputWithInjection","offsetInInputWithInjectionsToOutputPosition","offsetInInputWithInjections","low","high","mid","midStart","midStop","OutputPosition","outputPositionToOffsetInInputWithInjections","normalizedOffsetInUnwrappedLine","normalizeOffsetInInputWithInjectionsAroundInjections","getMinOutputOffset","getMaxOutputOffset","getOutputLineCount","injectedText","getInjectedTextAtOffset","hasRightCursorStop","injectedTextIndex","cursorStops","hasLeftCursorStop","assertNever","totalInjectedTextLengthBefore","injectedTextStartOffsetInInputWithInjections","injectedTextEndOffsetInInputWithInjections","cursorStop","Right","Both","Left","baseLineNumber"],"sourceRoot":""}