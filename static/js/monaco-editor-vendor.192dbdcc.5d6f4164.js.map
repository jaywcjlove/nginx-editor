{"version":3,"file":"static/js/monaco-editor-vendor.192dbdcc.5d6f4164.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/common/textModelBracketPairs.js","../node_modules/monaco-editor/esm/vs/editor/common/textModelEvents.js","../node_modules/monaco-editor/esm/vs/editor/common/textModelGuides.js","../node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js","../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousMultilineTokens.js","../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousMultilineTokensBuilder.js","../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousTokensEditing.js","../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousTokensStore.js","../node_modules/monaco-editor/esm/vs/editor/common/tokens/lineTokens.js","../node_modules/monaco-editor/esm/vs/editor/common/tokens/sparseMultilineTokens.js","../node_modules/monaco-editor/esm/vs/editor/common/tokens/sparseTokensStore.js","../node_modules/monaco-editor/esm/vs/editor/common/viewEventHandler.js","../node_modules/monaco-editor/esm/vs/editor/common/viewEvents.js","../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/lineDecorations.js","../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linePart.js","../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLineRenderer.js","../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLinesViewportData.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/minimapTokensColorTracker.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/monospaceLineBreaksComputer.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/overviewZoneManager.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewContext.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelDecorations.js","../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linesLayout.js","../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLayout.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/modelLineProjection.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelLines.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModelEventDispatcher.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class BracketInfo {\n    constructor(range, \n    /** 0-based level */\n    nestingLevel, nestingLevelOfEqualBracketType, isInvalid) {\n        this.range = range;\n        this.nestingLevel = nestingLevel;\n        this.nestingLevelOfEqualBracketType = nestingLevelOfEqualBracketType;\n        this.isInvalid = isInvalid;\n    }\n}\nexport class BracketPairInfo {\n    constructor(range, openingBracketRange, closingBracketRange, \n    /** 0-based */\n    nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode) {\n        this.range = range;\n        this.openingBracketRange = openingBracketRange;\n        this.closingBracketRange = closingBracketRange;\n        this.nestingLevel = nestingLevel;\n        this.nestingLevelOfEqualBracketType = nestingLevelOfEqualBracketType;\n        this.bracketPairNode = bracketPairNode;\n    }\n    get openingBracketInfo() {\n        return this.bracketPairNode.openingBracket.bracketInfo;\n    }\n}\nexport class BracketPairWithMinIndentationInfo extends BracketPairInfo {\n    constructor(range, openingBracketRange, closingBracketRange, \n    /**\n     * 0-based\n    */\n    nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode, \n    /**\n     * -1 if not requested, otherwise the size of the minimum indentation in the bracket pair in terms of visible columns.\n    */\n    minVisibleColumnIndentation) {\n        super(range, openingBracketRange, closingBracketRange, nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode);\n        this.minVisibleColumnIndentation = minVisibleColumnIndentation;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n    constructor() {\n        this.changeType = 1 /* RawContentChangedType.Flush */;\n    }\n}\n/**\n * Represents text injected on a line\n * @internal\n */\nexport class LineInjectedText {\n    static applyInjectedText(lineText, injectedTexts) {\n        if (!injectedTexts || injectedTexts.length === 0) {\n            return lineText;\n        }\n        let result = '';\n        let lastOriginalOffset = 0;\n        for (const injectedText of injectedTexts) {\n            result += lineText.substring(lastOriginalOffset, injectedText.column - 1);\n            lastOriginalOffset = injectedText.column - 1;\n            result += injectedText.options.content;\n        }\n        result += lineText.substring(lastOriginalOffset);\n        return result;\n    }\n    static fromDecorations(decorations) {\n        const result = [];\n        for (const decoration of decorations) {\n            if (decoration.options.before && decoration.options.before.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.startLineNumber, decoration.range.startColumn, decoration.options.before, 0));\n            }\n            if (decoration.options.after && decoration.options.after.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.endLineNumber, decoration.range.endColumn, decoration.options.after, 1));\n            }\n        }\n        result.sort((a, b) => {\n            if (a.lineNumber === b.lineNumber) {\n                if (a.column === b.column) {\n                    return a.order - b.order;\n                }\n                return a.column - b.column;\n            }\n            return a.lineNumber - b.lineNumber;\n        });\n        return result;\n    }\n    constructor(ownerId, lineNumber, column, options, order) {\n        this.ownerId = ownerId;\n        this.lineNumber = lineNumber;\n        this.column = column;\n        this.options = options;\n        this.order = order;\n    }\n}\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nexport class ModelRawLineChanged {\n    constructor(lineNumber, detail, injectedText) {\n        this.changeType = 2 /* RawContentChangedType.LineChanged */;\n        this.lineNumber = lineNumber;\n        this.detail = detail;\n        this.injectedText = injectedText;\n    }\n}\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nexport class ModelRawLinesDeleted {\n    constructor(fromLineNumber, toLineNumber) {\n        this.changeType = 3 /* RawContentChangedType.LinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nexport class ModelRawLinesInserted {\n    constructor(fromLineNumber, toLineNumber, detail, injectedTexts) {\n        this.changeType = 4 /* RawContentChangedType.LinesInserted */;\n        this.injectedTexts = injectedTexts;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n        this.detail = detail;\n    }\n}\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nexport class ModelRawEOLChanged {\n    constructor() {\n        this.changeType = 5 /* RawContentChangedType.EOLChanged */;\n    }\n}\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nexport class ModelRawContentChangedEvent {\n    constructor(changes, versionId, isUndoing, isRedoing) {\n        this.changes = changes;\n        this.versionId = versionId;\n        this.isUndoing = isUndoing;\n        this.isRedoing = isRedoing;\n        this.resultingSelection = null;\n    }\n    containsEvent(type) {\n        for (let i = 0, len = this.changes.length; i < len; i++) {\n            const change = this.changes[i];\n            if (change.changeType === type) {\n                return true;\n            }\n        }\n        return false;\n    }\n    static merge(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        return new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n    }\n}\n/**\n * An event describing a change in injected text.\n * @internal\n */\nexport class ModelInjectedTextChangedEvent {\n    constructor(changes) {\n        this.changes = changes;\n    }\n}\n/**\n * @internal\n */\nexport class InternalModelContentChangeEvent {\n    constructor(rawContentChangedEvent, contentChangedEvent) {\n        this.rawContentChangedEvent = rawContentChangedEvent;\n        this.contentChangedEvent = contentChangedEvent;\n    }\n    merge(other) {\n        const rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n        const contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n        return new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n    }\n    static _mergeChangeEvents(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const eol = b.eol;\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        const isFlush = (a.isFlush || b.isFlush);\n        return {\n            changes: changes,\n            eol: eol,\n            versionId: versionId,\n            isUndoing: isUndoing,\n            isRedoing: isRedoing,\n            isFlush: isFlush\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var HorizontalGuidesState;\n(function (HorizontalGuidesState) {\n    HorizontalGuidesState[HorizontalGuidesState[\"Disabled\"] = 0] = \"Disabled\";\n    HorizontalGuidesState[HorizontalGuidesState[\"EnabledForActive\"] = 1] = \"EnabledForActive\";\n    HorizontalGuidesState[HorizontalGuidesState[\"Enabled\"] = 2] = \"Enabled\";\n})(HorizontalGuidesState || (HorizontalGuidesState = {}));\nexport class IndentGuide {\n    constructor(visibleColumn, column, className, \n    /**\n     * If set, this indent guide is a horizontal guide (no vertical part).\n     * It starts at visibleColumn and continues until endColumn.\n    */\n    horizontalLine, \n    /**\n     * If set (!= -1), only show this guide for wrapped lines that don't contain this model column, but are after it.\n    */\n    forWrappedLinesAfterColumn, forWrappedLinesBeforeOrAtColumn) {\n        this.visibleColumn = visibleColumn;\n        this.column = column;\n        this.className = className;\n        this.horizontalLine = horizontalLine;\n        this.forWrappedLinesAfterColumn = forWrappedLinesAfterColumn;\n        this.forWrappedLinesBeforeOrAtColumn = forWrappedLinesBeforeOrAtColumn;\n        if ((visibleColumn !== -1) === (column !== -1)) {\n            throw new Error();\n        }\n    }\n}\nexport class IndentGuideHorizontalLine {\n    constructor(top, endColumn) {\n        this.top = top;\n        this.endColumn = endColumn;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../base/common/lifecycle.js';\nexport class TokenizationRegistry {\n    constructor() {\n        this._map = new Map();\n        this._factories = new Map();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._colorMap = null;\n    }\n    fire(languages) {\n        this._onDidChange.fire({\n            changedLanguages: languages,\n            changedColorMap: false\n        });\n    }\n    register(language, support) {\n        this._map.set(language, support);\n        this.fire([language]);\n        return toDisposable(() => {\n            if (this._map.get(language) !== support) {\n                return;\n            }\n            this._map.delete(language);\n            this.fire([language]);\n        });\n    }\n    registerFactory(languageId, factory) {\n        var _a;\n        (_a = this._factories.get(languageId)) === null || _a === void 0 ? void 0 : _a.dispose();\n        const myData = new TokenizationSupportFactoryData(this, languageId, factory);\n        this._factories.set(languageId, myData);\n        return toDisposable(() => {\n            const v = this._factories.get(languageId);\n            if (!v || v !== myData) {\n                return;\n            }\n            this._factories.delete(languageId);\n            v.dispose();\n        });\n    }\n    getOrCreate(languageId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // check first if the support is already set\n            const tokenizationSupport = this.get(languageId);\n            if (tokenizationSupport) {\n                return tokenizationSupport;\n            }\n            const factory = this._factories.get(languageId);\n            if (!factory || factory.isResolved) {\n                // no factory or factory.resolve already finished\n                return null;\n            }\n            yield factory.resolve();\n            return this.get(languageId);\n        });\n    }\n    get(language) {\n        return (this._map.get(language) || null);\n    }\n    isResolved(languageId) {\n        const tokenizationSupport = this.get(languageId);\n        if (tokenizationSupport) {\n            return true;\n        }\n        const factory = this._factories.get(languageId);\n        if (!factory || factory.isResolved) {\n            return true;\n        }\n        return false;\n    }\n    setColorMap(colorMap) {\n        this._colorMap = colorMap;\n        this._onDidChange.fire({\n            changedLanguages: Array.from(this._map.keys()),\n            changedColorMap: true\n        });\n    }\n    getColorMap() {\n        return this._colorMap;\n    }\n    getDefaultBackground() {\n        if (this._colorMap && this._colorMap.length > 2 /* ColorId.DefaultBackground */) {\n            return this._colorMap[2 /* ColorId.DefaultBackground */];\n        }\n        return null;\n    }\n}\nclass TokenizationSupportFactoryData extends Disposable {\n    get isResolved() {\n        return this._isResolved;\n    }\n    constructor(_registry, _languageId, _factory) {\n        super();\n        this._registry = _registry;\n        this._languageId = _languageId;\n        this._factory = _factory;\n        this._isDisposed = false;\n        this._resolvePromise = null;\n        this._isResolved = false;\n    }\n    dispose() {\n        this._isDisposed = true;\n        super.dispose();\n    }\n    resolve() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._resolvePromise) {\n                this._resolvePromise = this._create();\n            }\n            return this._resolvePromise;\n        });\n    }\n    _create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const value = yield Promise.resolve(this._factory.createTokenizationSupport());\n            this._isResolved = true;\n            if (value && !this._isDisposed) {\n                this._register(this._registry.register(this._languageId, value));\n            }\n        });\n    }\n}\n","/**\n * Represents contiguous tokens over a contiguous range of lines.\n */\nexport class ContiguousMultilineTokens {\n    /**\n     * (Inclusive) start line number for these tokens.\n     */\n    get startLineNumber() {\n        return this._startLineNumber;\n    }\n    /**\n     * (Inclusive) end line number for these tokens.\n     */\n    get endLineNumber() {\n        return this._startLineNumber + this._tokens.length - 1;\n    }\n    constructor(startLineNumber, tokens) {\n        this._startLineNumber = startLineNumber;\n        this._tokens = tokens;\n    }\n    /**\n     * @see {@link _tokens}\n     */\n    getLineTokens(lineNumber) {\n        return this._tokens[lineNumber - this._startLineNumber];\n    }\n    appendLineTokens(lineTokens) {\n        this._tokens.push(lineTokens);\n    }\n}\n","import { ContiguousMultilineTokens } from './contiguousMultilineTokens.js';\nexport class ContiguousMultilineTokensBuilder {\n    constructor() {\n        this._tokens = [];\n    }\n    add(lineNumber, lineTokens) {\n        if (this._tokens.length > 0) {\n            const last = this._tokens[this._tokens.length - 1];\n            if (last.endLineNumber + 1 === lineNumber) {\n                // append\n                last.appendLineTokens(lineTokens);\n                return;\n            }\n        }\n        this._tokens.push(new ContiguousMultilineTokens(lineNumber, [lineTokens]));\n    }\n    finalize() {\n        return this._tokens;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineTokens } from './lineTokens.js';\nexport const EMPTY_LINE_TOKENS = (new Uint32Array(0)).buffer;\nexport class ContiguousTokensEditing {\n    static deleteBeginning(lineTokens, toChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        return ContiguousTokensEditing.delete(lineTokens, 0, toChIndex);\n    }\n    static deleteEnding(lineTokens, fromChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const lineTextLength = tokens[tokens.length - 2];\n        return ContiguousTokensEditing.delete(lineTokens, fromChIndex, lineTextLength);\n    }\n    static delete(lineTokens, fromChIndex, toChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS || fromChIndex === toChIndex) {\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const tokensCount = (tokens.length >>> 1);\n        // special case: deleting everything\n        if (fromChIndex === 0 && tokens[tokens.length - 2] === toChIndex) {\n            return EMPTY_LINE_TOKENS;\n        }\n        const fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, fromChIndex);\n        const fromTokenStartOffset = (fromTokenIndex > 0 ? tokens[(fromTokenIndex - 1) << 1] : 0);\n        const fromTokenEndOffset = tokens[fromTokenIndex << 1];\n        if (toChIndex < fromTokenEndOffset) {\n            // the delete range is inside a single token\n            const delta = (toChIndex - fromChIndex);\n            for (let i = fromTokenIndex; i < tokensCount; i++) {\n                tokens[i << 1] -= delta;\n            }\n            return lineTokens;\n        }\n        let dest;\n        let lastEnd;\n        if (fromTokenStartOffset !== fromChIndex) {\n            tokens[fromTokenIndex << 1] = fromChIndex;\n            dest = ((fromTokenIndex + 1) << 1);\n            lastEnd = fromChIndex;\n        }\n        else {\n            dest = (fromTokenIndex << 1);\n            lastEnd = fromTokenStartOffset;\n        }\n        const delta = (toChIndex - fromChIndex);\n        for (let tokenIndex = fromTokenIndex + 1; tokenIndex < tokensCount; tokenIndex++) {\n            const tokenEndOffset = tokens[tokenIndex << 1] - delta;\n            if (tokenEndOffset > lastEnd) {\n                tokens[dest++] = tokenEndOffset;\n                tokens[dest++] = tokens[(tokenIndex << 1) + 1];\n                lastEnd = tokenEndOffset;\n            }\n        }\n        if (dest === tokens.length) {\n            // nothing to trim\n            return lineTokens;\n        }\n        const tmp = new Uint32Array(dest);\n        tmp.set(tokens.subarray(0, dest), 0);\n        return tmp.buffer;\n    }\n    static append(lineTokens, _otherTokens) {\n        if (_otherTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        if (lineTokens === EMPTY_LINE_TOKENS) {\n            return _otherTokens;\n        }\n        if (lineTokens === null) {\n            return lineTokens;\n        }\n        if (_otherTokens === null) {\n            // cannot determine combined line length...\n            return null;\n        }\n        const myTokens = toUint32Array(lineTokens);\n        const otherTokens = toUint32Array(_otherTokens);\n        const otherTokensCount = (otherTokens.length >>> 1);\n        const result = new Uint32Array(myTokens.length + otherTokens.length);\n        result.set(myTokens, 0);\n        let dest = myTokens.length;\n        const delta = myTokens[myTokens.length - 2];\n        for (let i = 0; i < otherTokensCount; i++) {\n            result[dest++] = otherTokens[(i << 1)] + delta;\n            result[dest++] = otherTokens[(i << 1) + 1];\n        }\n        return result.buffer;\n    }\n    static insert(lineTokens, chIndex, textLength) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            // nothing to do\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const tokensCount = (tokens.length >>> 1);\n        let fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, chIndex);\n        if (fromTokenIndex > 0) {\n            const fromTokenStartOffset = tokens[(fromTokenIndex - 1) << 1];\n            if (fromTokenStartOffset === chIndex) {\n                fromTokenIndex--;\n            }\n        }\n        for (let tokenIndex = fromTokenIndex; tokenIndex < tokensCount; tokenIndex++) {\n            tokens[tokenIndex << 1] += textLength;\n        }\n        return lineTokens;\n    }\n}\nexport function toUint32Array(arr) {\n    if (arr instanceof Uint32Array) {\n        return arr;\n    }\n    else {\n        return new Uint32Array(arr);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { ContiguousTokensEditing, EMPTY_LINE_TOKENS, toUint32Array } from './contiguousTokensEditing.js';\nimport { LineTokens } from './lineTokens.js';\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\n/**\n * Represents contiguous tokens in a text model.\n */\nexport class ContiguousTokensStore {\n    constructor(languageIdCodec) {\n        this._lineTokens = [];\n        this._len = 0;\n        this._languageIdCodec = languageIdCodec;\n    }\n    flush() {\n        this._lineTokens = [];\n        this._len = 0;\n    }\n    get hasTokens() {\n        return this._lineTokens.length > 0;\n    }\n    getTokens(topLevelLanguageId, lineIndex, lineText) {\n        let rawLineTokens = null;\n        if (lineIndex < this._len) {\n            rawLineTokens = this._lineTokens[lineIndex];\n        }\n        if (rawLineTokens !== null && rawLineTokens !== EMPTY_LINE_TOKENS) {\n            return new LineTokens(toUint32Array(rawLineTokens), lineText, this._languageIdCodec);\n        }\n        const lineTokens = new Uint32Array(2);\n        lineTokens[0] = lineText.length;\n        lineTokens[1] = getDefaultMetadata(this._languageIdCodec.encodeLanguageId(topLevelLanguageId));\n        return new LineTokens(lineTokens, lineText, this._languageIdCodec);\n    }\n    static _massageTokens(topLevelLanguageId, lineTextLength, _tokens) {\n        const tokens = _tokens ? toUint32Array(_tokens) : null;\n        if (lineTextLength === 0) {\n            let hasDifferentLanguageId = false;\n            if (tokens && tokens.length > 1) {\n                hasDifferentLanguageId = (TokenMetadata.getLanguageId(tokens[1]) !== topLevelLanguageId);\n            }\n            if (!hasDifferentLanguageId) {\n                return EMPTY_LINE_TOKENS;\n            }\n        }\n        if (!tokens || tokens.length === 0) {\n            const tokens = new Uint32Array(2);\n            tokens[0] = lineTextLength;\n            tokens[1] = getDefaultMetadata(topLevelLanguageId);\n            return tokens.buffer;\n        }\n        // Ensure the last token covers the end of the text\n        tokens[tokens.length - 2] = lineTextLength;\n        if (tokens.byteOffset === 0 && tokens.byteLength === tokens.buffer.byteLength) {\n            // Store directly the ArrayBuffer pointer to save an object\n            return tokens.buffer;\n        }\n        return tokens;\n    }\n    _ensureLine(lineIndex) {\n        while (lineIndex >= this._len) {\n            this._lineTokens[this._len] = null;\n            this._len++;\n        }\n    }\n    _deleteLines(start, deleteCount) {\n        if (deleteCount === 0) {\n            return;\n        }\n        if (start + deleteCount > this._len) {\n            deleteCount = this._len - start;\n        }\n        this._lineTokens.splice(start, deleteCount);\n        this._len -= deleteCount;\n    }\n    _insertLines(insertIndex, insertCount) {\n        if (insertCount === 0) {\n            return;\n        }\n        const lineTokens = [];\n        for (let i = 0; i < insertCount; i++) {\n            lineTokens[i] = null;\n        }\n        this._lineTokens = arrays.arrayInsert(this._lineTokens, insertIndex, lineTokens);\n        this._len += insertCount;\n    }\n    setTokens(topLevelLanguageId, lineIndex, lineTextLength, _tokens, checkEquality) {\n        const tokens = ContiguousTokensStore._massageTokens(this._languageIdCodec.encodeLanguageId(topLevelLanguageId), lineTextLength, _tokens);\n        this._ensureLine(lineIndex);\n        const oldTokens = this._lineTokens[lineIndex];\n        this._lineTokens[lineIndex] = tokens;\n        if (checkEquality) {\n            return !ContiguousTokensStore._equals(oldTokens, tokens);\n        }\n        return false;\n    }\n    static _equals(_a, _b) {\n        if (!_a || !_b) {\n            return !_a && !_b;\n        }\n        const a = toUint32Array(_a);\n        const b = toUint32Array(_b);\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0, len = a.length; i < len; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //#region Editing\n    acceptEdit(range, eolCount, firstLineLength) {\n        this._acceptDeleteRange(range);\n        this._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength);\n    }\n    _acceptDeleteRange(range) {\n        const firstLineIndex = range.startLineNumber - 1;\n        if (firstLineIndex >= this._len) {\n            return;\n        }\n        if (range.startLineNumber === range.endLineNumber) {\n            if (range.startColumn === range.endColumn) {\n                // Nothing to delete\n                return;\n            }\n            this._lineTokens[firstLineIndex] = ContiguousTokensEditing.delete(this._lineTokens[firstLineIndex], range.startColumn - 1, range.endColumn - 1);\n            return;\n        }\n        this._lineTokens[firstLineIndex] = ContiguousTokensEditing.deleteEnding(this._lineTokens[firstLineIndex], range.startColumn - 1);\n        const lastLineIndex = range.endLineNumber - 1;\n        let lastLineTokens = null;\n        if (lastLineIndex < this._len) {\n            lastLineTokens = ContiguousTokensEditing.deleteBeginning(this._lineTokens[lastLineIndex], range.endColumn - 1);\n        }\n        // Take remaining text on last line and append it to remaining text on first line\n        this._lineTokens[firstLineIndex] = ContiguousTokensEditing.append(this._lineTokens[firstLineIndex], lastLineTokens);\n        // Delete middle lines\n        this._deleteLines(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n    }\n    _acceptInsertText(position, eolCount, firstLineLength) {\n        if (eolCount === 0 && firstLineLength === 0) {\n            // Nothing to insert\n            return;\n        }\n        const lineIndex = position.lineNumber - 1;\n        if (lineIndex >= this._len) {\n            return;\n        }\n        if (eolCount === 0) {\n            // Inserting text on one line\n            this._lineTokens[lineIndex] = ContiguousTokensEditing.insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n            return;\n        }\n        this._lineTokens[lineIndex] = ContiguousTokensEditing.deleteEnding(this._lineTokens[lineIndex], position.column - 1);\n        this._lineTokens[lineIndex] = ContiguousTokensEditing.insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n        this._insertLines(position.lineNumber, eolCount);\n    }\n}\nfunction getDefaultMetadata(topLevelLanguageId) {\n    return ((topLevelLanguageId << 0 /* MetadataConsts.LANGUAGEID_OFFSET */)\n        | (0 /* StandardTokenType.Other */ << 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */)\n        | (0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n        | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n        | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)\n        // If there is no grammar, we just take a guess and try to match brackets.\n        | (1024 /* MetadataConsts.BALANCED_BRACKETS_MASK */)) >>> 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\nclass LineTokens {\n    static createEmpty(lineContent, decoder) {\n        const defaultMetadata = LineTokens.defaultTokenMetadata;\n        const tokens = new Uint32Array(2);\n        tokens[0] = lineContent.length;\n        tokens[1] = defaultMetadata;\n        return new LineTokens(tokens, lineContent, decoder);\n    }\n    constructor(tokens, text, decoder) {\n        this._lineTokensBrand = undefined;\n        this._tokens = tokens;\n        this._tokensCount = (this._tokens.length >>> 1);\n        this._text = text;\n        this._languageIdCodec = decoder;\n    }\n    equals(other) {\n        if (other instanceof LineTokens) {\n            return this.slicedEquals(other, 0, this._tokensCount);\n        }\n        return false;\n    }\n    slicedEquals(other, sliceFromTokenIndex, sliceTokenCount) {\n        if (this._text !== other._text) {\n            return false;\n        }\n        if (this._tokensCount !== other._tokensCount) {\n            return false;\n        }\n        const from = (sliceFromTokenIndex << 1);\n        const to = from + (sliceTokenCount << 1);\n        for (let i = from; i < to; i++) {\n            if (this._tokens[i] !== other._tokens[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    getLineContent() {\n        return this._text;\n    }\n    getCount() {\n        return this._tokensCount;\n    }\n    getStartOffset(tokenIndex) {\n        if (tokenIndex > 0) {\n            return this._tokens[(tokenIndex - 1) << 1];\n        }\n        return 0;\n    }\n    getMetadata(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return metadata;\n    }\n    getLanguageId(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        const languageId = TokenMetadata.getLanguageId(metadata);\n        return this._languageIdCodec.decodeLanguageId(languageId);\n    }\n    getStandardTokenType(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getTokenType(metadata);\n    }\n    getForeground(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getForeground(metadata);\n    }\n    getClassName(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getClassNameFromMetadata(metadata);\n    }\n    getInlineStyle(tokenIndex, colorMap) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\n    }\n    getPresentation(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getPresentationFromMetadata(metadata);\n    }\n    getEndOffset(tokenIndex) {\n        return this._tokens[tokenIndex << 1];\n    }\n    /**\n     * Find the token containing offset `offset`.\n     * @param offset The search offset\n     * @return The index of the token containing the offset.\n     */\n    findTokenIndexAtOffset(offset) {\n        return LineTokens.findIndexInTokensArray(this._tokens, offset);\n    }\n    inflate() {\n        return this;\n    }\n    sliceAndInflate(startOffset, endOffset, deltaOffset) {\n        return new SliceLineTokens(this, startOffset, endOffset, deltaOffset);\n    }\n    static convertToEndOffset(tokens, lineTextLength) {\n        const tokenCount = (tokens.length >>> 1);\n        const lastTokenIndex = tokenCount - 1;\n        for (let tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\n            tokens[tokenIndex << 1] = tokens[(tokenIndex + 1) << 1];\n        }\n        tokens[lastTokenIndex << 1] = lineTextLength;\n    }\n    static findIndexInTokensArray(tokens, desiredIndex) {\n        if (tokens.length <= 2) {\n            return 0;\n        }\n        let low = 0;\n        let high = (tokens.length >>> 1) - 1;\n        while (low < high) {\n            const mid = low + Math.floor((high - low) / 2);\n            const endOffset = tokens[(mid << 1)];\n            if (endOffset === desiredIndex) {\n                return mid + 1;\n            }\n            else if (endOffset < desiredIndex) {\n                low = mid + 1;\n            }\n            else if (endOffset > desiredIndex) {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    /**\n     * @pure\n     * @param insertTokens Must be sorted by offset.\n    */\n    withInserted(insertTokens) {\n        if (insertTokens.length === 0) {\n            return this;\n        }\n        let nextOriginalTokenIdx = 0;\n        let nextInsertTokenIdx = 0;\n        let text = '';\n        const newTokens = new Array();\n        let originalEndOffset = 0;\n        while (true) {\n            const nextOriginalTokenEndOffset = nextOriginalTokenIdx < this._tokensCount ? this._tokens[nextOriginalTokenIdx << 1] : -1;\n            const nextInsertToken = nextInsertTokenIdx < insertTokens.length ? insertTokens[nextInsertTokenIdx] : null;\n            if (nextOriginalTokenEndOffset !== -1 && (nextInsertToken === null || nextOriginalTokenEndOffset <= nextInsertToken.offset)) {\n                // original token ends before next insert token\n                text += this._text.substring(originalEndOffset, nextOriginalTokenEndOffset);\n                const metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n                newTokens.push(text.length, metadata);\n                nextOriginalTokenIdx++;\n                originalEndOffset = nextOriginalTokenEndOffset;\n            }\n            else if (nextInsertToken) {\n                if (nextInsertToken.offset > originalEndOffset) {\n                    // insert token is in the middle of the next token.\n                    text += this._text.substring(originalEndOffset, nextInsertToken.offset);\n                    const metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n                    newTokens.push(text.length, metadata);\n                    originalEndOffset = nextInsertToken.offset;\n                }\n                text += nextInsertToken.text;\n                newTokens.push(text.length, nextInsertToken.tokenMetadata);\n                nextInsertTokenIdx++;\n            }\n            else {\n                break;\n            }\n        }\n        return new LineTokens(new Uint32Array(newTokens), text, this._languageIdCodec);\n    }\n}\nLineTokens.defaultTokenMetadata = ((0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n    | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n    | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\nexport { LineTokens };\nclass SliceLineTokens {\n    constructor(source, startOffset, endOffset, deltaOffset) {\n        this._source = source;\n        this._startOffset = startOffset;\n        this._endOffset = endOffset;\n        this._deltaOffset = deltaOffset;\n        this._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\n        this._tokensCount = 0;\n        for (let i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\n            const tokenStartOffset = source.getStartOffset(i);\n            if (tokenStartOffset >= endOffset) {\n                break;\n            }\n            this._tokensCount++;\n        }\n    }\n    getMetadata(tokenIndex) {\n        return this._source.getMetadata(this._firstTokenIndex + tokenIndex);\n    }\n    getLanguageId(tokenIndex) {\n        return this._source.getLanguageId(this._firstTokenIndex + tokenIndex);\n    }\n    getLineContent() {\n        return this._source.getLineContent().substring(this._startOffset, this._endOffset);\n    }\n    equals(other) {\n        if (other instanceof SliceLineTokens) {\n            return (this._startOffset === other._startOffset\n                && this._endOffset === other._endOffset\n                && this._deltaOffset === other._deltaOffset\n                && this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount));\n        }\n        return false;\n    }\n    getCount() {\n        return this._tokensCount;\n    }\n    getForeground(tokenIndex) {\n        return this._source.getForeground(this._firstTokenIndex + tokenIndex);\n    }\n    getEndOffset(tokenIndex) {\n        const tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\n        return Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\n    }\n    getClassName(tokenIndex) {\n        return this._source.getClassName(this._firstTokenIndex + tokenIndex);\n    }\n    getInlineStyle(tokenIndex, colorMap) {\n        return this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\n    }\n    getPresentation(tokenIndex) {\n        return this._source.getPresentation(this._firstTokenIndex + tokenIndex);\n    }\n    findTokenIndexAtOffset(offset) {\n        return this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { countEOL } from '../core/eolCounter.js';\n/**\n * Represents sparse tokens over a contiguous range of lines.\n */\nexport class SparseMultilineTokens {\n    static create(startLineNumber, tokens) {\n        return new SparseMultilineTokens(startLineNumber, new SparseMultilineTokensStorage(tokens));\n    }\n    /**\n     * (Inclusive) start line number for these tokens.\n     */\n    get startLineNumber() {\n        return this._startLineNumber;\n    }\n    /**\n     * (Inclusive) end line number for these tokens.\n     */\n    get endLineNumber() {\n        return this._endLineNumber;\n    }\n    constructor(startLineNumber, tokens) {\n        this._startLineNumber = startLineNumber;\n        this._tokens = tokens;\n        this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n    }\n    toString() {\n        return this._tokens.toString(this._startLineNumber);\n    }\n    _updateEndLineNumber() {\n        this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n    }\n    isEmpty() {\n        return this._tokens.isEmpty();\n    }\n    getLineTokens(lineNumber) {\n        if (this._startLineNumber <= lineNumber && lineNumber <= this._endLineNumber) {\n            return this._tokens.getLineTokens(lineNumber - this._startLineNumber);\n        }\n        return null;\n    }\n    getRange() {\n        const deltaRange = this._tokens.getRange();\n        if (!deltaRange) {\n            return deltaRange;\n        }\n        return new Range(this._startLineNumber + deltaRange.startLineNumber, deltaRange.startColumn, this._startLineNumber + deltaRange.endLineNumber, deltaRange.endColumn);\n    }\n    removeTokens(range) {\n        const startLineIndex = range.startLineNumber - this._startLineNumber;\n        const endLineIndex = range.endLineNumber - this._startLineNumber;\n        this._startLineNumber += this._tokens.removeTokens(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n        this._updateEndLineNumber();\n    }\n    split(range) {\n        // split tokens to two:\n        // a) all the tokens before `range`\n        // b) all the tokens after `range`\n        const startLineIndex = range.startLineNumber - this._startLineNumber;\n        const endLineIndex = range.endLineNumber - this._startLineNumber;\n        const [a, b, bDeltaLine] = this._tokens.split(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n        return [new SparseMultilineTokens(this._startLineNumber, a), new SparseMultilineTokens(this._startLineNumber + bDeltaLine, b)];\n    }\n    applyEdit(range, text) {\n        const [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n        this.acceptEdit(range, eolCount, firstLineLength, lastLineLength, text.length > 0 ? text.charCodeAt(0) : 0 /* CharCode.Null */);\n    }\n    acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        this._acceptDeleteRange(range);\n        this._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength, lastLineLength, firstCharCode);\n        this._updateEndLineNumber();\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n            // Nothing to delete\n            return;\n        }\n        const firstLineIndex = range.startLineNumber - this._startLineNumber;\n        const lastLineIndex = range.endLineNumber - this._startLineNumber;\n        if (lastLineIndex < 0) {\n            // this deletion occurs entirely before this block, so we only need to adjust line numbers\n            const deletedLinesCount = lastLineIndex - firstLineIndex;\n            this._startLineNumber -= deletedLinesCount;\n            return;\n        }\n        const tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n        if (firstLineIndex >= tokenMaxDeltaLine + 1) {\n            // this deletion occurs entirely after this block, so there is nothing to do\n            return;\n        }\n        if (firstLineIndex < 0 && lastLineIndex >= tokenMaxDeltaLine + 1) {\n            // this deletion completely encompasses this block\n            this._startLineNumber = 0;\n            this._tokens.clear();\n            return;\n        }\n        if (firstLineIndex < 0) {\n            const deletedBefore = -firstLineIndex;\n            this._startLineNumber -= deletedBefore;\n            this._tokens.acceptDeleteRange(range.startColumn - 1, 0, 0, lastLineIndex, range.endColumn - 1);\n        }\n        else {\n            this._tokens.acceptDeleteRange(0, firstLineIndex, range.startColumn - 1, lastLineIndex, range.endColumn - 1);\n        }\n    }\n    _acceptInsertText(position, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        if (eolCount === 0 && firstLineLength === 0) {\n            // Nothing to insert\n            return;\n        }\n        const lineIndex = position.lineNumber - this._startLineNumber;\n        if (lineIndex < 0) {\n            // this insertion occurs before this block, so we only need to adjust line numbers\n            this._startLineNumber += eolCount;\n            return;\n        }\n        const tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n        if (lineIndex >= tokenMaxDeltaLine + 1) {\n            // this insertion occurs after this block, so there is nothing to do\n            return;\n        }\n        this._tokens.acceptInsertText(lineIndex, position.column - 1, eolCount, firstLineLength, lastLineLength, firstCharCode);\n    }\n}\nclass SparseMultilineTokensStorage {\n    constructor(tokens) {\n        this._tokens = tokens;\n        this._tokenCount = tokens.length / 4;\n    }\n    toString(startLineNumber) {\n        const pieces = [];\n        for (let i = 0; i < this._tokenCount; i++) {\n            pieces.push(`(${this._getDeltaLine(i) + startLineNumber},${this._getStartCharacter(i)}-${this._getEndCharacter(i)})`);\n        }\n        return `[${pieces.join(',')}]`;\n    }\n    getMaxDeltaLine() {\n        const tokenCount = this._getTokenCount();\n        if (tokenCount === 0) {\n            return -1;\n        }\n        return this._getDeltaLine(tokenCount - 1);\n    }\n    getRange() {\n        const tokenCount = this._getTokenCount();\n        if (tokenCount === 0) {\n            return null;\n        }\n        const startChar = this._getStartCharacter(0);\n        const maxDeltaLine = this._getDeltaLine(tokenCount - 1);\n        const endChar = this._getEndCharacter(tokenCount - 1);\n        return new Range(0, startChar + 1, maxDeltaLine, endChar + 1);\n    }\n    _getTokenCount() {\n        return this._tokenCount;\n    }\n    _getDeltaLine(tokenIndex) {\n        return this._tokens[4 * tokenIndex];\n    }\n    _getStartCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 1];\n    }\n    _getEndCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 2];\n    }\n    isEmpty() {\n        return (this._getTokenCount() === 0);\n    }\n    getLineTokens(deltaLine) {\n        let low = 0;\n        let high = this._getTokenCount() - 1;\n        while (low < high) {\n            const mid = low + Math.floor((high - low) / 2);\n            const midDeltaLine = this._getDeltaLine(mid);\n            if (midDeltaLine < deltaLine) {\n                low = mid + 1;\n            }\n            else if (midDeltaLine > deltaLine) {\n                high = mid - 1;\n            }\n            else {\n                let min = mid;\n                while (min > low && this._getDeltaLine(min - 1) === deltaLine) {\n                    min--;\n                }\n                let max = mid;\n                while (max < high && this._getDeltaLine(max + 1) === deltaLine) {\n                    max++;\n                }\n                return new SparseLineTokens(this._tokens.subarray(4 * min, 4 * max + 4));\n            }\n        }\n        if (this._getDeltaLine(low) === deltaLine) {\n            return new SparseLineTokens(this._tokens.subarray(4 * low, 4 * low + 4));\n        }\n        return null;\n    }\n    clear() {\n        this._tokenCount = 0;\n    }\n    removeTokens(startDeltaLine, startChar, endDeltaLine, endChar) {\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        let newTokenCount = 0;\n        let hasDeletedTokens = false;\n        let firstDeltaLine = 0;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            const tokenDeltaLine = tokens[srcOffset];\n            const tokenStartCharacter = tokens[srcOffset + 1];\n            const tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))\n                && (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n                hasDeletedTokens = true;\n            }\n            else {\n                if (newTokenCount === 0) {\n                    firstDeltaLine = tokenDeltaLine;\n                }\n                if (hasDeletedTokens) {\n                    // must move the token to the left\n                    const destOffset = 4 * newTokenCount;\n                    tokens[destOffset] = tokenDeltaLine - firstDeltaLine;\n                    tokens[destOffset + 1] = tokenStartCharacter;\n                    tokens[destOffset + 2] = tokenEndCharacter;\n                    tokens[destOffset + 3] = tokenMetadata;\n                }\n                newTokenCount++;\n            }\n        }\n        this._tokenCount = newTokenCount;\n        return firstDeltaLine;\n    }\n    split(startDeltaLine, startChar, endDeltaLine, endChar) {\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        const aTokens = [];\n        const bTokens = [];\n        let destTokens = aTokens;\n        let destOffset = 0;\n        let destFirstDeltaLine = 0;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            const tokenDeltaLine = tokens[srcOffset];\n            const tokenStartCharacter = tokens[srcOffset + 1];\n            const tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))) {\n                if ((tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n                    // this token is touching the range\n                    continue;\n                }\n                else {\n                    // this token is after the range\n                    if (destTokens !== bTokens) {\n                        // this token is the first token after the range\n                        destTokens = bTokens;\n                        destOffset = 0;\n                        destFirstDeltaLine = tokenDeltaLine;\n                    }\n                }\n            }\n            destTokens[destOffset++] = tokenDeltaLine - destFirstDeltaLine;\n            destTokens[destOffset++] = tokenStartCharacter;\n            destTokens[destOffset++] = tokenEndCharacter;\n            destTokens[destOffset++] = tokenMetadata;\n        }\n        return [new SparseMultilineTokensStorage(new Uint32Array(aTokens)), new SparseMultilineTokensStorage(new Uint32Array(bTokens)), destFirstDeltaLine];\n    }\n    acceptDeleteRange(horizontalShiftForFirstLineTokens, startDeltaLine, startCharacter, endDeltaLine, endCharacter) {\n        // This is a bit complex, here are the cases I used to think about this:\n        //\n        // 1. The token starts before the deletion range\n        // 1a. The token is completely before the deletion range\n        //               -----------\n        //                          xxxxxxxxxxx\n        // 1b. The token starts before, the deletion range ends after the token\n        //               -----------\n        //                      xxxxxxxxxxx\n        // 1c. The token starts before, the deletion range ends precisely with the token\n        //               ---------------\n        //                      xxxxxxxx\n        // 1d. The token starts before, the deletion range is inside the token\n        //               ---------------\n        //                    xxxxx\n        //\n        // 2. The token starts at the same position with the deletion range\n        // 2a. The token starts at the same position, and ends inside the deletion range\n        //               -------\n        //               xxxxxxxxxxx\n        // 2b. The token starts at the same position, and ends at the same position as the deletion range\n        //               ----------\n        //               xxxxxxxxxx\n        // 2c. The token starts at the same position, and ends after the deletion range\n        //               -------------\n        //               xxxxxxx\n        //\n        // 3. The token starts inside the deletion range\n        // 3a. The token is inside the deletion range\n        //                -------\n        //             xxxxxxxxxxxxx\n        // 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n        //                ----------\n        //             xxxxxxxxxxxxx\n        // 3c. The token starts inside the deletion range, and ends after the deletion range\n        //                ------------\n        //             xxxxxxxxxxx\n        //\n        // 4. The token starts after the deletion range\n        //                  -----------\n        //          xxxxxxxx\n        //\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        const deletedLineCount = (endDeltaLine - startDeltaLine);\n        let newTokenCount = 0;\n        let hasDeletedTokens = false;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            let tokenDeltaLine = tokens[srcOffset];\n            let tokenStartCharacter = tokens[srcOffset + 1];\n            let tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if (tokenDeltaLine < startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter <= startCharacter)) {\n                // 1a. The token is completely before the deletion range\n                // => nothing to do\n                newTokenCount++;\n                continue;\n            }\n            else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter < startCharacter) {\n                // 1b, 1c, 1d\n                // => the token survives, but it needs to shrink\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 1d. The token starts before, the deletion range is inside the token\n                    // => the token shrinks by the deletion character count\n                    tokenEndCharacter -= (endCharacter - startCharacter);\n                }\n                else {\n                    // 1b. The token starts before, the deletion range ends after the token\n                    // 1c. The token starts before, the deletion range ends precisely with the token\n                    // => the token shrinks its ending to the deletion start\n                    tokenEndCharacter = startCharacter;\n                }\n            }\n            else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter === startCharacter) {\n                // 2a, 2b, 2c\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 2c. The token starts at the same position, and ends after the deletion range\n                    // => the token shrinks by the deletion character count\n                    tokenEndCharacter -= (endCharacter - startCharacter);\n                }\n                else {\n                    // 2a. The token starts at the same position, and ends inside the deletion range\n                    // 2b. The token starts at the same position, and ends at the same position as the deletion range\n                    // => the token is deleted\n                    hasDeletedTokens = true;\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter < endCharacter)) {\n                // 3a, 3b, 3c\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 3c. The token starts inside the deletion range, and ends after the deletion range\n                    // => the token moves left and shrinks\n                    if (tokenDeltaLine === startDeltaLine) {\n                        // the deletion started on the same line as the token\n                        // => the token moves left and shrinks\n                        tokenStartCharacter = startCharacter;\n                        tokenEndCharacter = tokenStartCharacter + (tokenEndCharacter - endCharacter);\n                    }\n                    else {\n                        // the deletion started on a line above the token\n                        // => the token moves to the beginning of the line\n                        tokenStartCharacter = 0;\n                        tokenEndCharacter = tokenStartCharacter + (tokenEndCharacter - endCharacter);\n                    }\n                }\n                else {\n                    // 3a. The token is inside the deletion range\n                    // 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n                    // => the token is deleted\n                    hasDeletedTokens = true;\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine > endDeltaLine) {\n                // 4. (partial) The token starts after the deletion range, on a line below...\n                if (deletedLineCount === 0 && !hasDeletedTokens) {\n                    // early stop, there is no need to walk all the tokens and do nothing...\n                    newTokenCount = tokenCount;\n                    break;\n                }\n                tokenDeltaLine -= deletedLineCount;\n            }\n            else if (tokenDeltaLine === endDeltaLine && tokenStartCharacter >= endCharacter) {\n                // 4. (continued) The token starts after the deletion range, on the last line where a deletion occurs\n                if (horizontalShiftForFirstLineTokens && tokenDeltaLine === 0) {\n                    tokenStartCharacter += horizontalShiftForFirstLineTokens;\n                    tokenEndCharacter += horizontalShiftForFirstLineTokens;\n                }\n                tokenDeltaLine -= deletedLineCount;\n                tokenStartCharacter -= (endCharacter - startCharacter);\n                tokenEndCharacter -= (endCharacter - startCharacter);\n            }\n            else {\n                throw new Error(`Not possible!`);\n            }\n            const destOffset = 4 * newTokenCount;\n            tokens[destOffset] = tokenDeltaLine;\n            tokens[destOffset + 1] = tokenStartCharacter;\n            tokens[destOffset + 2] = tokenEndCharacter;\n            tokens[destOffset + 3] = tokenMetadata;\n            newTokenCount++;\n        }\n        this._tokenCount = newTokenCount;\n    }\n    acceptInsertText(deltaLine, character, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        // Here are the cases I used to think about this:\n        //\n        // 1. The token is completely before the insertion point\n        //            -----------   |\n        // 2. The token ends precisely at the insertion point\n        //            -----------|\n        // 3. The token contains the insertion point\n        //            -----|------\n        // 4. The token starts precisely at the insertion point\n        //            |-----------\n        // 5. The token is completely after the insertion point\n        //            |   -----------\n        //\n        const isInsertingPreciselyOneWordCharacter = (eolCount === 0\n            && firstLineLength === 1\n            && ((firstCharCode >= 48 /* CharCode.Digit0 */ && firstCharCode <= 57 /* CharCode.Digit9 */)\n                || (firstCharCode >= 65 /* CharCode.A */ && firstCharCode <= 90 /* CharCode.Z */)\n                || (firstCharCode >= 97 /* CharCode.a */ && firstCharCode <= 122 /* CharCode.z */)));\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        for (let i = 0; i < tokenCount; i++) {\n            const offset = 4 * i;\n            let tokenDeltaLine = tokens[offset];\n            let tokenStartCharacter = tokens[offset + 1];\n            let tokenEndCharacter = tokens[offset + 2];\n            if (tokenDeltaLine < deltaLine || (tokenDeltaLine === deltaLine && tokenEndCharacter < character)) {\n                // 1. The token is completely before the insertion point\n                // => nothing to do\n                continue;\n            }\n            else if (tokenDeltaLine === deltaLine && tokenEndCharacter === character) {\n                // 2. The token ends precisely at the insertion point\n                // => expand the end character only if inserting precisely one character that is a word character\n                if (isInsertingPreciselyOneWordCharacter) {\n                    tokenEndCharacter += 1;\n                }\n                else {\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine === deltaLine && tokenStartCharacter < character && character < tokenEndCharacter) {\n                // 3. The token contains the insertion point\n                if (eolCount === 0) {\n                    // => just expand the end character\n                    tokenEndCharacter += firstLineLength;\n                }\n                else {\n                    // => cut off the token\n                    tokenEndCharacter = character;\n                }\n            }\n            else {\n                // 4. or 5.\n                if (tokenDeltaLine === deltaLine && tokenStartCharacter === character) {\n                    // 4. The token starts precisely at the insertion point\n                    // => grow the token (by keeping its start constant) only if inserting precisely one character that is a word character\n                    // => otherwise behave as in case 5.\n                    if (isInsertingPreciselyOneWordCharacter) {\n                        continue;\n                    }\n                }\n                // => the token must move and keep its size constant\n                if (tokenDeltaLine === deltaLine) {\n                    tokenDeltaLine += eolCount;\n                    // this token is on the line where the insertion is taking place\n                    if (eolCount === 0) {\n                        tokenStartCharacter += firstLineLength;\n                        tokenEndCharacter += firstLineLength;\n                    }\n                    else {\n                        const tokenLength = tokenEndCharacter - tokenStartCharacter;\n                        tokenStartCharacter = lastLineLength + (tokenStartCharacter - character);\n                        tokenEndCharacter = tokenStartCharacter + tokenLength;\n                    }\n                }\n                else {\n                    tokenDeltaLine += eolCount;\n                }\n            }\n            tokens[offset] = tokenDeltaLine;\n            tokens[offset + 1] = tokenStartCharacter;\n            tokens[offset + 2] = tokenEndCharacter;\n        }\n    }\n}\nexport class SparseLineTokens {\n    constructor(tokens) {\n        this._tokens = tokens;\n    }\n    getCount() {\n        return this._tokens.length / 4;\n    }\n    getStartCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 1];\n    }\n    getEndCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 2];\n    }\n    getMetadata(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 3];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { LineTokens } from './lineTokens.js';\n/**\n * Represents sparse tokens in a text model.\n */\nexport class SparseTokensStore {\n    constructor(languageIdCodec) {\n        this._pieces = [];\n        this._isComplete = false;\n        this._languageIdCodec = languageIdCodec;\n    }\n    flush() {\n        this._pieces = [];\n        this._isComplete = false;\n    }\n    isEmpty() {\n        return (this._pieces.length === 0);\n    }\n    set(pieces, isComplete) {\n        this._pieces = pieces || [];\n        this._isComplete = isComplete;\n    }\n    setPartial(_range, pieces) {\n        // console.log(`setPartial ${_range} ${pieces.map(p => p.toString()).join(', ')}`);\n        let range = _range;\n        if (pieces.length > 0) {\n            const _firstRange = pieces[0].getRange();\n            const _lastRange = pieces[pieces.length - 1].getRange();\n            if (!_firstRange || !_lastRange) {\n                return _range;\n            }\n            range = _range.plusRange(_firstRange).plusRange(_lastRange);\n        }\n        let insertPosition = null;\n        for (let i = 0, len = this._pieces.length; i < len; i++) {\n            const piece = this._pieces[i];\n            if (piece.endLineNumber < range.startLineNumber) {\n                // this piece is before the range\n                continue;\n            }\n            if (piece.startLineNumber > range.endLineNumber) {\n                // this piece is after the range, so mark the spot before this piece\n                // as a good insertion position and stop looping\n                insertPosition = insertPosition || { index: i };\n                break;\n            }\n            // this piece might intersect with the range\n            piece.removeTokens(range);\n            if (piece.isEmpty()) {\n                // remove the piece if it became empty\n                this._pieces.splice(i, 1);\n                i--;\n                len--;\n                continue;\n            }\n            if (piece.endLineNumber < range.startLineNumber) {\n                // after removal, this piece is before the range\n                continue;\n            }\n            if (piece.startLineNumber > range.endLineNumber) {\n                // after removal, this piece is after the range\n                insertPosition = insertPosition || { index: i };\n                continue;\n            }\n            // after removal, this piece contains the range\n            const [a, b] = piece.split(range);\n            if (a.isEmpty()) {\n                // this piece is actually after the range\n                insertPosition = insertPosition || { index: i };\n                continue;\n            }\n            if (b.isEmpty()) {\n                // this piece is actually before the range\n                continue;\n            }\n            this._pieces.splice(i, 1, a, b);\n            i++;\n            len++;\n            insertPosition = insertPosition || { index: i };\n        }\n        insertPosition = insertPosition || { index: this._pieces.length };\n        if (pieces.length > 0) {\n            this._pieces = arrays.arrayInsert(this._pieces, insertPosition.index, pieces);\n        }\n        // console.log(`I HAVE ${this._pieces.length} pieces`);\n        // console.log(`${this._pieces.map(p => p.toString()).join('\\n')}`);\n        return range;\n    }\n    isComplete() {\n        return this._isComplete;\n    }\n    addSparseTokens(lineNumber, aTokens) {\n        if (aTokens.getLineContent().length === 0) {\n            // Don't do anything for empty lines\n            return aTokens;\n        }\n        const pieces = this._pieces;\n        if (pieces.length === 0) {\n            return aTokens;\n        }\n        const pieceIndex = SparseTokensStore._findFirstPieceWithLine(pieces, lineNumber);\n        const bTokens = pieces[pieceIndex].getLineTokens(lineNumber);\n        if (!bTokens) {\n            return aTokens;\n        }\n        const aLen = aTokens.getCount();\n        const bLen = bTokens.getCount();\n        let aIndex = 0;\n        const result = [];\n        let resultLen = 0;\n        let lastEndOffset = 0;\n        const emitToken = (endOffset, metadata) => {\n            if (endOffset === lastEndOffset) {\n                return;\n            }\n            lastEndOffset = endOffset;\n            result[resultLen++] = endOffset;\n            result[resultLen++] = metadata;\n        };\n        for (let bIndex = 0; bIndex < bLen; bIndex++) {\n            const bStartCharacter = bTokens.getStartCharacter(bIndex);\n            const bEndCharacter = bTokens.getEndCharacter(bIndex);\n            const bMetadata = bTokens.getMetadata(bIndex);\n            const bMask = (((bMetadata & 1 /* MetadataConsts.SEMANTIC_USE_ITALIC */) ? 2048 /* MetadataConsts.ITALIC_MASK */ : 0)\n                | ((bMetadata & 2 /* MetadataConsts.SEMANTIC_USE_BOLD */) ? 4096 /* MetadataConsts.BOLD_MASK */ : 0)\n                | ((bMetadata & 4 /* MetadataConsts.SEMANTIC_USE_UNDERLINE */) ? 8192 /* MetadataConsts.UNDERLINE_MASK */ : 0)\n                | ((bMetadata & 8 /* MetadataConsts.SEMANTIC_USE_STRIKETHROUGH */) ? 16384 /* MetadataConsts.STRIKETHROUGH_MASK */ : 0)\n                | ((bMetadata & 16 /* MetadataConsts.SEMANTIC_USE_FOREGROUND */) ? 16744448 /* MetadataConsts.FOREGROUND_MASK */ : 0)\n                | ((bMetadata & 32 /* MetadataConsts.SEMANTIC_USE_BACKGROUND */) ? 4278190080 /* MetadataConsts.BACKGROUND_MASK */ : 0)) >>> 0;\n            const aMask = (~bMask) >>> 0;\n            // push any token from `a` that is before `b`\n            while (aIndex < aLen && aTokens.getEndOffset(aIndex) <= bStartCharacter) {\n                emitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n                aIndex++;\n            }\n            // push the token from `a` if it intersects the token from `b`\n            if (aIndex < aLen && aTokens.getStartOffset(aIndex) < bStartCharacter) {\n                emitToken(bStartCharacter, aTokens.getMetadata(aIndex));\n            }\n            // skip any tokens from `a` that are contained inside `b`\n            while (aIndex < aLen && aTokens.getEndOffset(aIndex) < bEndCharacter) {\n                emitToken(aTokens.getEndOffset(aIndex), (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n                aIndex++;\n            }\n            if (aIndex < aLen) {\n                emitToken(bEndCharacter, (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n                if (aTokens.getEndOffset(aIndex) === bEndCharacter) {\n                    // `a` ends exactly at the same spot as `b`!\n                    aIndex++;\n                }\n            }\n            else {\n                const aMergeIndex = Math.min(Math.max(0, aIndex - 1), aLen - 1);\n                // push the token from `b`\n                emitToken(bEndCharacter, (aTokens.getMetadata(aMergeIndex) & aMask) | (bMetadata & bMask));\n            }\n        }\n        // push the remaining tokens from `a`\n        while (aIndex < aLen) {\n            emitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n            aIndex++;\n        }\n        return new LineTokens(new Uint32Array(result), aTokens.getLineContent(), this._languageIdCodec);\n    }\n    static _findFirstPieceWithLine(pieces, lineNumber) {\n        let low = 0;\n        let high = pieces.length - 1;\n        while (low < high) {\n            let mid = low + Math.floor((high - low) / 2);\n            if (pieces[mid].endLineNumber < lineNumber) {\n                low = mid + 1;\n            }\n            else if (pieces[mid].startLineNumber > lineNumber) {\n                high = mid - 1;\n            }\n            else {\n                while (mid > low && pieces[mid - 1].startLineNumber <= lineNumber && lineNumber <= pieces[mid - 1].endLineNumber) {\n                    mid--;\n                }\n                return mid;\n            }\n        }\n        return low;\n    }\n    acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        for (const piece of this._pieces) {\n            piece.acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../base/common/lifecycle.js';\nexport class ViewEventHandler extends Disposable {\n    constructor() {\n        super();\n        this._shouldRender = true;\n    }\n    shouldRender() {\n        return this._shouldRender;\n    }\n    forceShouldRender() {\n        this._shouldRender = true;\n    }\n    setShouldRender() {\n        this._shouldRender = true;\n    }\n    onDidRender() {\n        this._shouldRender = false;\n    }\n    // --- begin event handlers\n    onCompositionStart(e) {\n        return false;\n    }\n    onCompositionEnd(e) {\n        return false;\n    }\n    onConfigurationChanged(e) {\n        return false;\n    }\n    onCursorStateChanged(e) {\n        return false;\n    }\n    onDecorationsChanged(e) {\n        return false;\n    }\n    onFlushed(e) {\n        return false;\n    }\n    onFocusChanged(e) {\n        return false;\n    }\n    onLanguageConfigurationChanged(e) {\n        return false;\n    }\n    onLineMappingChanged(e) {\n        return false;\n    }\n    onLinesChanged(e) {\n        return false;\n    }\n    onLinesDeleted(e) {\n        return false;\n    }\n    onLinesInserted(e) {\n        return false;\n    }\n    onRevealRangeRequest(e) {\n        return false;\n    }\n    onScrollChanged(e) {\n        return false;\n    }\n    onThemeChanged(e) {\n        return false;\n    }\n    onTokensChanged(e) {\n        return false;\n    }\n    onTokensColorsChanged(e) {\n        return false;\n    }\n    onZonesChanged(e) {\n        return false;\n    }\n    // --- end event handlers\n    handleEvents(events) {\n        let shouldRender = false;\n        for (let i = 0, len = events.length; i < len; i++) {\n            const e = events[i];\n            switch (e.type) {\n                case 0 /* viewEvents.ViewEventType.ViewCompositionStart */:\n                    if (this.onCompositionStart(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 1 /* viewEvents.ViewEventType.ViewCompositionEnd */:\n                    if (this.onCompositionEnd(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 2 /* viewEvents.ViewEventType.ViewConfigurationChanged */:\n                    if (this.onConfigurationChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 3 /* viewEvents.ViewEventType.ViewCursorStateChanged */:\n                    if (this.onCursorStateChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 4 /* viewEvents.ViewEventType.ViewDecorationsChanged */:\n                    if (this.onDecorationsChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 5 /* viewEvents.ViewEventType.ViewFlushed */:\n                    if (this.onFlushed(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 6 /* viewEvents.ViewEventType.ViewFocusChanged */:\n                    if (this.onFocusChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 7 /* viewEvents.ViewEventType.ViewLanguageConfigurationChanged */:\n                    if (this.onLanguageConfigurationChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 8 /* viewEvents.ViewEventType.ViewLineMappingChanged */:\n                    if (this.onLineMappingChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 9 /* viewEvents.ViewEventType.ViewLinesChanged */:\n                    if (this.onLinesChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 10 /* viewEvents.ViewEventType.ViewLinesDeleted */:\n                    if (this.onLinesDeleted(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 11 /* viewEvents.ViewEventType.ViewLinesInserted */:\n                    if (this.onLinesInserted(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 12 /* viewEvents.ViewEventType.ViewRevealRangeRequest */:\n                    if (this.onRevealRangeRequest(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 13 /* viewEvents.ViewEventType.ViewScrollChanged */:\n                    if (this.onScrollChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 15 /* viewEvents.ViewEventType.ViewTokensChanged */:\n                    if (this.onTokensChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 14 /* viewEvents.ViewEventType.ViewThemeChanged */:\n                    if (this.onThemeChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 16 /* viewEvents.ViewEventType.ViewTokensColorsChanged */:\n                    if (this.onTokensColorsChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 17 /* viewEvents.ViewEventType.ViewZonesChanged */:\n                    if (this.onZonesChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                default:\n                    console.info('View received unknown event: ');\n                    console.info(e);\n            }\n        }\n        if (shouldRender) {\n            this._shouldRender = true;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ViewCompositionStartEvent {\n    constructor() {\n        this.type = 0 /* ViewEventType.ViewCompositionStart */;\n    }\n}\nexport class ViewCompositionEndEvent {\n    constructor() {\n        this.type = 1 /* ViewEventType.ViewCompositionEnd */;\n    }\n}\nexport class ViewConfigurationChangedEvent {\n    constructor(source) {\n        this.type = 2 /* ViewEventType.ViewConfigurationChanged */;\n        this._source = source;\n    }\n    hasChanged(id) {\n        return this._source.hasChanged(id);\n    }\n}\nexport class ViewCursorStateChangedEvent {\n    constructor(selections, modelSelections, reason) {\n        this.selections = selections;\n        this.modelSelections = modelSelections;\n        this.reason = reason;\n        this.type = 3 /* ViewEventType.ViewCursorStateChanged */;\n    }\n}\nexport class ViewDecorationsChangedEvent {\n    constructor(source) {\n        this.type = 4 /* ViewEventType.ViewDecorationsChanged */;\n        if (source) {\n            this.affectsMinimap = source.affectsMinimap;\n            this.affectsOverviewRuler = source.affectsOverviewRuler;\n        }\n        else {\n            this.affectsMinimap = true;\n            this.affectsOverviewRuler = true;\n        }\n    }\n}\nexport class ViewFlushedEvent {\n    constructor() {\n        this.type = 5 /* ViewEventType.ViewFlushed */;\n        // Nothing to do\n    }\n}\nexport class ViewFocusChangedEvent {\n    constructor(isFocused) {\n        this.type = 6 /* ViewEventType.ViewFocusChanged */;\n        this.isFocused = isFocused;\n    }\n}\nexport class ViewLanguageConfigurationEvent {\n    constructor() {\n        this.type = 7 /* ViewEventType.ViewLanguageConfigurationChanged */;\n    }\n}\nexport class ViewLineMappingChangedEvent {\n    constructor() {\n        this.type = 8 /* ViewEventType.ViewLineMappingChanged */;\n        // Nothing to do\n    }\n}\nexport class ViewLinesChangedEvent {\n    constructor(\n    /**\n     * The first line that has changed.\n     */\n    fromLineNumber, \n    /**\n     * The number of lines that have changed.\n     */\n    count) {\n        this.fromLineNumber = fromLineNumber;\n        this.count = count;\n        this.type = 9 /* ViewEventType.ViewLinesChanged */;\n    }\n}\nexport class ViewLinesDeletedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 10 /* ViewEventType.ViewLinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewLinesInsertedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 11 /* ViewEventType.ViewLinesInserted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewRevealRangeRequestEvent {\n    constructor(\n    /**\n     * Source of the call that caused the event.\n     */\n    source, \n    /**\n     * Reduce the revealing to a minimum (e.g. avoid scrolling if the bounding box is visible and near the viewport edge).\n     */\n    minimalReveal, \n    /**\n     * Range to be reavealed.\n     */\n    range, \n    /**\n     * Selections to be revealed.\n     */\n    selections, \n    /**\n     * The vertical reveal strategy.\n     */\n    verticalType, \n    /**\n     * If true: there should be a horizontal & vertical revealing.\n     * If false: there should be just a vertical revealing.\n     */\n    revealHorizontal, \n    /**\n     * The scroll type.\n     */\n    scrollType) {\n        this.source = source;\n        this.minimalReveal = minimalReveal;\n        this.range = range;\n        this.selections = selections;\n        this.verticalType = verticalType;\n        this.revealHorizontal = revealHorizontal;\n        this.scrollType = scrollType;\n        this.type = 12 /* ViewEventType.ViewRevealRangeRequest */;\n    }\n}\nexport class ViewScrollChangedEvent {\n    constructor(source) {\n        this.type = 13 /* ViewEventType.ViewScrollChanged */;\n        this.scrollWidth = source.scrollWidth;\n        this.scrollLeft = source.scrollLeft;\n        this.scrollHeight = source.scrollHeight;\n        this.scrollTop = source.scrollTop;\n        this.scrollWidthChanged = source.scrollWidthChanged;\n        this.scrollLeftChanged = source.scrollLeftChanged;\n        this.scrollHeightChanged = source.scrollHeightChanged;\n        this.scrollTopChanged = source.scrollTopChanged;\n    }\n}\nexport class ViewThemeChangedEvent {\n    constructor(theme) {\n        this.theme = theme;\n        this.type = 14 /* ViewEventType.ViewThemeChanged */;\n    }\n}\nexport class ViewTokensChangedEvent {\n    constructor(ranges) {\n        this.type = 15 /* ViewEventType.ViewTokensChanged */;\n        this.ranges = ranges;\n    }\n}\nexport class ViewTokensColorsChangedEvent {\n    constructor() {\n        this.type = 16 /* ViewEventType.ViewTokensColorsChanged */;\n        // Nothing to do\n    }\n}\nexport class ViewZonesChangedEvent {\n    constructor() {\n        this.type = 17 /* ViewEventType.ViewZonesChanged */;\n        // Nothing to do\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nexport class LineDecoration {\n    constructor(startColumn, endColumn, className, type) {\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.className = className;\n        this.type = type;\n        this._lineDecorationBrand = undefined;\n    }\n    static _equals(a, b) {\n        return (a.startColumn === b.startColumn\n            && a.endColumn === b.endColumn\n            && a.className === b.className\n            && a.type === b.type);\n    }\n    static equalsArr(a, b) {\n        const aLen = a.length;\n        const bLen = b.length;\n        if (aLen !== bLen) {\n            return false;\n        }\n        for (let i = 0; i < aLen; i++) {\n            if (!LineDecoration._equals(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static extractWrapped(arr, startOffset, endOffset) {\n        if (arr.length === 0) {\n            return arr;\n        }\n        const startColumn = startOffset + 1;\n        const endColumn = endOffset + 1;\n        const lineLength = endOffset - startOffset;\n        const r = [];\n        let rLength = 0;\n        for (const dec of arr) {\n            if (dec.endColumn <= startColumn || dec.startColumn >= endColumn) {\n                continue;\n            }\n            r[rLength++] = new LineDecoration(Math.max(1, dec.startColumn - startColumn + 1), Math.min(lineLength + 1, dec.endColumn - startColumn + 1), dec.className, dec.type);\n        }\n        return r;\n    }\n    static filter(lineDecorations, lineNumber, minLineColumn, maxLineColumn) {\n        if (lineDecorations.length === 0) {\n            return [];\n        }\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = lineDecorations.length; i < len; i++) {\n            const d = lineDecorations[i];\n            const range = d.range;\n            if (range.endLineNumber < lineNumber || range.startLineNumber > lineNumber) {\n                // Ignore decorations that sit outside this line\n                continue;\n            }\n            if (range.isEmpty() && (d.type === 0 /* InlineDecorationType.Regular */ || d.type === 3 /* InlineDecorationType.RegularAffectingLetterSpacing */)) {\n                // Ignore empty range decorations\n                continue;\n            }\n            const startColumn = (range.startLineNumber === lineNumber ? range.startColumn : minLineColumn);\n            const endColumn = (range.endLineNumber === lineNumber ? range.endColumn : maxLineColumn);\n            result[resultLen++] = new LineDecoration(startColumn, endColumn, d.inlineClassName, d.type);\n        }\n        return result;\n    }\n    static _typeCompare(a, b) {\n        const ORDER = [2, 0, 1, 3];\n        return ORDER[a] - ORDER[b];\n    }\n    static compare(a, b) {\n        if (a.startColumn !== b.startColumn) {\n            return a.startColumn - b.startColumn;\n        }\n        if (a.endColumn !== b.endColumn) {\n            return a.endColumn - b.endColumn;\n        }\n        const typeCmp = LineDecoration._typeCompare(a.type, b.type);\n        if (typeCmp !== 0) {\n            return typeCmp;\n        }\n        if (a.className !== b.className) {\n            return a.className < b.className ? -1 : 1;\n        }\n        return 0;\n    }\n}\nexport class DecorationSegment {\n    constructor(startOffset, endOffset, className, metadata) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.className = className;\n        this.metadata = metadata;\n    }\n}\nclass Stack {\n    constructor() {\n        this.stopOffsets = [];\n        this.classNames = [];\n        this.metadata = [];\n        this.count = 0;\n    }\n    static _metadata(metadata) {\n        let result = 0;\n        for (let i = 0, len = metadata.length; i < len; i++) {\n            result |= metadata[i];\n        }\n        return result;\n    }\n    consumeLowerThan(maxStopOffset, nextStartOffset, result) {\n        while (this.count > 0 && this.stopOffsets[0] < maxStopOffset) {\n            let i = 0;\n            // Take all equal stopping offsets\n            while (i + 1 < this.count && this.stopOffsets[i] === this.stopOffsets[i + 1]) {\n                i++;\n            }\n            // Basically we are consuming the first i + 1 elements of the stack\n            result.push(new DecorationSegment(nextStartOffset, this.stopOffsets[i], this.classNames.join(' '), Stack._metadata(this.metadata)));\n            nextStartOffset = this.stopOffsets[i] + 1;\n            // Consume them\n            this.stopOffsets.splice(0, i + 1);\n            this.classNames.splice(0, i + 1);\n            this.metadata.splice(0, i + 1);\n            this.count -= (i + 1);\n        }\n        if (this.count > 0 && nextStartOffset < maxStopOffset) {\n            result.push(new DecorationSegment(nextStartOffset, maxStopOffset - 1, this.classNames.join(' '), Stack._metadata(this.metadata)));\n            nextStartOffset = maxStopOffset;\n        }\n        return nextStartOffset;\n    }\n    insert(stopOffset, className, metadata) {\n        if (this.count === 0 || this.stopOffsets[this.count - 1] <= stopOffset) {\n            // Insert at the end\n            this.stopOffsets.push(stopOffset);\n            this.classNames.push(className);\n            this.metadata.push(metadata);\n        }\n        else {\n            // Find the insertion position for `stopOffset`\n            for (let i = 0; i < this.count; i++) {\n                if (this.stopOffsets[i] >= stopOffset) {\n                    this.stopOffsets.splice(i, 0, stopOffset);\n                    this.classNames.splice(i, 0, className);\n                    this.metadata.splice(i, 0, metadata);\n                    break;\n                }\n            }\n        }\n        this.count++;\n        return;\n    }\n}\nexport class LineDecorationsNormalizer {\n    /**\n     * Normalize line decorations. Overlapping decorations will generate multiple segments\n     */\n    static normalize(lineContent, lineDecorations) {\n        if (lineDecorations.length === 0) {\n            return [];\n        }\n        const result = [];\n        const stack = new Stack();\n        let nextStartOffset = 0;\n        for (let i = 0, len = lineDecorations.length; i < len; i++) {\n            const d = lineDecorations[i];\n            let startColumn = d.startColumn;\n            let endColumn = d.endColumn;\n            const className = d.className;\n            const metadata = (d.type === 1 /* InlineDecorationType.Before */\n                ? 2 /* LinePartMetadata.PSEUDO_BEFORE */\n                : d.type === 2 /* InlineDecorationType.After */\n                    ? 4 /* LinePartMetadata.PSEUDO_AFTER */\n                    : 0);\n            // If the position would end up in the middle of a high-low surrogate pair, we move it to before the pair\n            if (startColumn > 1) {\n                const charCodeBefore = lineContent.charCodeAt(startColumn - 2);\n                if (strings.isHighSurrogate(charCodeBefore)) {\n                    startColumn--;\n                }\n            }\n            if (endColumn > 1) {\n                const charCodeBefore = lineContent.charCodeAt(endColumn - 2);\n                if (strings.isHighSurrogate(charCodeBefore)) {\n                    endColumn--;\n                }\n            }\n            const currentStartOffset = startColumn - 1;\n            const currentEndOffset = endColumn - 2;\n            nextStartOffset = stack.consumeLowerThan(currentStartOffset, nextStartOffset, result);\n            if (stack.count === 0) {\n                nextStartOffset = currentStartOffset;\n            }\n            stack.insert(currentEndOffset, className, metadata);\n        }\n        stack.consumeLowerThan(1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, nextStartOffset, result);\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class LinePart {\n    constructor(\n    /**\n     * last char index of this token (not inclusive).\n     */\n    endIndex, type, metadata, containsRTL) {\n        this.endIndex = endIndex;\n        this.type = type;\n        this.metadata = metadata;\n        this.containsRTL = containsRTL;\n        this._linePartBrand = undefined;\n    }\n    isWhitespace() {\n        return (this.metadata & 1 /* LinePartMetadata.IS_WHITESPACE_MASK */ ? true : false);\n    }\n    isPseudoAfter() {\n        return (this.metadata & 4 /* LinePartMetadata.PSEUDO_AFTER_MASK */ ? true : false);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { StringBuilder } from '../core/stringBuilder.js';\nimport { LineDecoration, LineDecorationsNormalizer } from './lineDecorations.js';\nimport { LinePart } from './linePart.js';\nexport class LineRange {\n    constructor(startIndex, endIndex) {\n        this.startOffset = startIndex;\n        this.endOffset = endIndex;\n    }\n    equals(otherLineRange) {\n        return this.startOffset === otherLineRange.startOffset\n            && this.endOffset === otherLineRange.endOffset;\n    }\n}\nexport class RenderLineInput {\n    constructor(useMonospaceOptimizations, canUseHalfwidthRightwardsArrow, lineContent, continuesWithWrappedLine, isBasicASCII, containsRTL, fauxIndentLength, lineTokens, lineDecorations, tabSize, startVisibleColumn, spaceWidth, middotWidth, wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, selectionsOnLine) {\n        this.useMonospaceOptimizations = useMonospaceOptimizations;\n        this.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n        this.lineContent = lineContent;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.isBasicASCII = isBasicASCII;\n        this.containsRTL = containsRTL;\n        this.fauxIndentLength = fauxIndentLength;\n        this.lineTokens = lineTokens;\n        this.lineDecorations = lineDecorations.sort(LineDecoration.compare);\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n        this.spaceWidth = spaceWidth;\n        this.stopRenderingLineAfter = stopRenderingLineAfter;\n        this.renderWhitespace = (renderWhitespace === 'all'\n            ? 4 /* RenderWhitespace.All */\n            : renderWhitespace === 'boundary'\n                ? 1 /* RenderWhitespace.Boundary */\n                : renderWhitespace === 'selection'\n                    ? 2 /* RenderWhitespace.Selection */\n                    : renderWhitespace === 'trailing'\n                        ? 3 /* RenderWhitespace.Trailing */\n                        : 0 /* RenderWhitespace.None */);\n        this.renderControlCharacters = renderControlCharacters;\n        this.fontLigatures = fontLigatures;\n        this.selectionsOnLine = selectionsOnLine && selectionsOnLine.sort((a, b) => a.startOffset < b.startOffset ? -1 : 1);\n        const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n        const middotDiff = Math.abs(middotWidth - spaceWidth);\n        if (wsmiddotDiff < middotDiff) {\n            this.renderSpaceWidth = wsmiddotWidth;\n            this.renderSpaceCharCode = 0x2E31; // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        }\n        else {\n            this.renderSpaceWidth = middotWidth;\n            this.renderSpaceCharCode = 0xB7; // U+00B7 - MIDDLE DOT\n        }\n    }\n    sameSelection(otherSelections) {\n        if (this.selectionsOnLine === null) {\n            return otherSelections === null;\n        }\n        if (otherSelections === null) {\n            return false;\n        }\n        if (otherSelections.length !== this.selectionsOnLine.length) {\n            return false;\n        }\n        for (let i = 0; i < this.selectionsOnLine.length; i++) {\n            if (!this.selectionsOnLine[i].equals(otherSelections[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    equals(other) {\n        return (this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineContent === other.lineContent\n            && this.continuesWithWrappedLine === other.continuesWithWrappedLine\n            && this.isBasicASCII === other.isBasicASCII\n            && this.containsRTL === other.containsRTL\n            && this.fauxIndentLength === other.fauxIndentLength\n            && this.tabSize === other.tabSize\n            && this.startVisibleColumn === other.startVisibleColumn\n            && this.spaceWidth === other.spaceWidth\n            && this.renderSpaceWidth === other.renderSpaceWidth\n            && this.renderSpaceCharCode === other.renderSpaceCharCode\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.fontLigatures === other.fontLigatures\n            && LineDecoration.equalsArr(this.lineDecorations, other.lineDecorations)\n            && this.lineTokens.equals(other.lineTokens)\n            && this.sameSelection(other.selectionsOnLine));\n    }\n}\nexport class DomPosition {\n    constructor(partIndex, charIndex) {\n        this.partIndex = partIndex;\n        this.charIndex = charIndex;\n    }\n}\n/**\n * Provides a both direction mapping between a line's character and its rendered position.\n */\nexport class CharacterMapping {\n    static getPartIndex(partData) {\n        return (partData & 4294901760 /* CharacterMappingConstants.PART_INDEX_MASK */) >>> 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */;\n    }\n    static getCharIndex(partData) {\n        return (partData & 65535 /* CharacterMappingConstants.CHAR_INDEX_MASK */) >>> 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */;\n    }\n    constructor(length, partCount) {\n        this.length = length;\n        this._data = new Uint32Array(this.length);\n        this._horizontalOffset = new Uint32Array(this.length);\n    }\n    setColumnInfo(column, partIndex, charIndex, horizontalOffset) {\n        const partData = ((partIndex << 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */)\n            | (charIndex << 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */)) >>> 0;\n        this._data[column - 1] = partData;\n        this._horizontalOffset[column - 1] = horizontalOffset;\n    }\n    getHorizontalOffset(column) {\n        if (this._horizontalOffset.length === 0) {\n            // No characters on this line\n            return 0;\n        }\n        return this._horizontalOffset[column - 1];\n    }\n    charOffsetToPartData(charOffset) {\n        if (this.length === 0) {\n            return 0;\n        }\n        if (charOffset < 0) {\n            return this._data[0];\n        }\n        if (charOffset >= this.length) {\n            return this._data[this.length - 1];\n        }\n        return this._data[charOffset];\n    }\n    getDomPosition(column) {\n        const partData = this.charOffsetToPartData(column - 1);\n        const partIndex = CharacterMapping.getPartIndex(partData);\n        const charIndex = CharacterMapping.getCharIndex(partData);\n        return new DomPosition(partIndex, charIndex);\n    }\n    getColumn(domPosition, partLength) {\n        const charOffset = this.partDataToCharOffset(domPosition.partIndex, partLength, domPosition.charIndex);\n        return charOffset + 1;\n    }\n    partDataToCharOffset(partIndex, partLength, charIndex) {\n        if (this.length === 0) {\n            return 0;\n        }\n        const searchEntry = ((partIndex << 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */)\n            | (charIndex << 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */)) >>> 0;\n        let min = 0;\n        let max = this.length - 1;\n        while (min + 1 < max) {\n            const mid = ((min + max) >>> 1);\n            const midEntry = this._data[mid];\n            if (midEntry === searchEntry) {\n                return mid;\n            }\n            else if (midEntry > searchEntry) {\n                max = mid;\n            }\n            else {\n                min = mid;\n            }\n        }\n        if (min === max) {\n            return min;\n        }\n        const minEntry = this._data[min];\n        const maxEntry = this._data[max];\n        if (minEntry === searchEntry) {\n            return min;\n        }\n        if (maxEntry === searchEntry) {\n            return max;\n        }\n        const minPartIndex = CharacterMapping.getPartIndex(minEntry);\n        const minCharIndex = CharacterMapping.getCharIndex(minEntry);\n        const maxPartIndex = CharacterMapping.getPartIndex(maxEntry);\n        let maxCharIndex;\n        if (minPartIndex !== maxPartIndex) {\n            // sitting between parts\n            maxCharIndex = partLength;\n        }\n        else {\n            maxCharIndex = CharacterMapping.getCharIndex(maxEntry);\n        }\n        const minEntryDistance = charIndex - minCharIndex;\n        const maxEntryDistance = maxCharIndex - charIndex;\n        if (minEntryDistance <= maxEntryDistance) {\n            return min;\n        }\n        return max;\n    }\n}\nexport class RenderLineOutput {\n    constructor(characterMapping, containsRTL, containsForeignElements) {\n        this._renderLineOutputBrand = undefined;\n        this.characterMapping = characterMapping;\n        this.containsRTL = containsRTL;\n        this.containsForeignElements = containsForeignElements;\n    }\n}\nexport function renderViewLine(input, sb) {\n    if (input.lineContent.length === 0) {\n        if (input.lineDecorations.length > 0) {\n            // This line is empty, but it contains inline decorations\n            sb.appendString(`<span>`);\n            let beforeCount = 0;\n            let afterCount = 0;\n            let containsForeignElements = 0 /* ForeignElementType.None */;\n            for (const lineDecoration of input.lineDecorations) {\n                if (lineDecoration.type === 1 /* InlineDecorationType.Before */ || lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                    sb.appendString(`<span class=\"`);\n                    sb.appendString(lineDecoration.className);\n                    sb.appendString(`\"></span>`);\n                    if (lineDecoration.type === 1 /* InlineDecorationType.Before */) {\n                        containsForeignElements |= 1 /* ForeignElementType.Before */;\n                        beforeCount++;\n                    }\n                    if (lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                        containsForeignElements |= 2 /* ForeignElementType.After */;\n                        afterCount++;\n                    }\n                }\n            }\n            sb.appendString(`</span>`);\n            const characterMapping = new CharacterMapping(1, beforeCount + afterCount);\n            characterMapping.setColumnInfo(1, beforeCount, 0, 0);\n            return new RenderLineOutput(characterMapping, false, containsForeignElements);\n        }\n        // completely empty line\n        sb.appendString('<span><span></span></span>');\n        return new RenderLineOutput(new CharacterMapping(0, 0), false, 0 /* ForeignElementType.None */);\n    }\n    return _renderLine(resolveRenderLineInput(input), sb);\n}\nexport class RenderLineOutput2 {\n    constructor(characterMapping, html, containsRTL, containsForeignElements) {\n        this.characterMapping = characterMapping;\n        this.html = html;\n        this.containsRTL = containsRTL;\n        this.containsForeignElements = containsForeignElements;\n    }\n}\nexport function renderViewLine2(input) {\n    const sb = new StringBuilder(10000);\n    const out = renderViewLine(input, sb);\n    return new RenderLineOutput2(out.characterMapping, sb.build(), out.containsRTL, out.containsForeignElements);\n}\nclass ResolvedRenderLineInput {\n    constructor(fontIsMonospace, canUseHalfwidthRightwardsArrow, lineContent, len, isOverflowing, overflowingCharCount, parts, containsForeignElements, fauxIndentLength, tabSize, startVisibleColumn, containsRTL, spaceWidth, renderSpaceCharCode, renderWhitespace, renderControlCharacters) {\n        this.fontIsMonospace = fontIsMonospace;\n        this.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n        this.lineContent = lineContent;\n        this.len = len;\n        this.isOverflowing = isOverflowing;\n        this.overflowingCharCount = overflowingCharCount;\n        this.parts = parts;\n        this.containsForeignElements = containsForeignElements;\n        this.fauxIndentLength = fauxIndentLength;\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n        this.containsRTL = containsRTL;\n        this.spaceWidth = spaceWidth;\n        this.renderSpaceCharCode = renderSpaceCharCode;\n        this.renderWhitespace = renderWhitespace;\n        this.renderControlCharacters = renderControlCharacters;\n        //\n    }\n}\nfunction resolveRenderLineInput(input) {\n    const lineContent = input.lineContent;\n    let isOverflowing;\n    let overflowingCharCount;\n    let len;\n    if (input.stopRenderingLineAfter !== -1 && input.stopRenderingLineAfter < lineContent.length) {\n        isOverflowing = true;\n        overflowingCharCount = lineContent.length - input.stopRenderingLineAfter;\n        len = input.stopRenderingLineAfter;\n    }\n    else {\n        isOverflowing = false;\n        overflowingCharCount = 0;\n        len = lineContent.length;\n    }\n    let tokens = transformAndRemoveOverflowing(lineContent, input.containsRTL, input.lineTokens, input.fauxIndentLength, len);\n    if (input.renderControlCharacters && !input.isBasicASCII) {\n        // Calling `extractControlCharacters` before adding (possibly empty) line parts\n        // for inline decorations. `extractControlCharacters` removes empty line parts.\n        tokens = extractControlCharacters(lineContent, tokens);\n    }\n    if (input.renderWhitespace === 4 /* RenderWhitespace.All */ ||\n        input.renderWhitespace === 1 /* RenderWhitespace.Boundary */ ||\n        (input.renderWhitespace === 2 /* RenderWhitespace.Selection */ && !!input.selectionsOnLine) ||\n        (input.renderWhitespace === 3 /* RenderWhitespace.Trailing */ && !input.continuesWithWrappedLine)) {\n        tokens = _applyRenderWhitespace(input, lineContent, len, tokens);\n    }\n    let containsForeignElements = 0 /* ForeignElementType.None */;\n    if (input.lineDecorations.length > 0) {\n        for (let i = 0, len = input.lineDecorations.length; i < len; i++) {\n            const lineDecoration = input.lineDecorations[i];\n            if (lineDecoration.type === 3 /* InlineDecorationType.RegularAffectingLetterSpacing */) {\n                // Pretend there are foreign elements... although not 100% accurate.\n                containsForeignElements |= 1 /* ForeignElementType.Before */;\n            }\n            else if (lineDecoration.type === 1 /* InlineDecorationType.Before */) {\n                containsForeignElements |= 1 /* ForeignElementType.Before */;\n            }\n            else if (lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                containsForeignElements |= 2 /* ForeignElementType.After */;\n            }\n        }\n        tokens = _applyInlineDecorations(lineContent, len, tokens, input.lineDecorations);\n    }\n    if (!input.containsRTL) {\n        // We can never split RTL text, as it ruins the rendering\n        tokens = splitLargeTokens(lineContent, tokens, !input.isBasicASCII || input.fontLigatures);\n    }\n    return new ResolvedRenderLineInput(input.useMonospaceOptimizations, input.canUseHalfwidthRightwardsArrow, lineContent, len, isOverflowing, overflowingCharCount, tokens, containsForeignElements, input.fauxIndentLength, input.tabSize, input.startVisibleColumn, input.containsRTL, input.spaceWidth, input.renderSpaceCharCode, input.renderWhitespace, input.renderControlCharacters);\n}\n/**\n * In the rendering phase, characters are always looped until token.endIndex.\n * Ensure that all tokens end before `len` and the last one ends precisely at `len`.\n */\nfunction transformAndRemoveOverflowing(lineContent, lineContainsRTL, tokens, fauxIndentLength, len) {\n    const result = [];\n    let resultLen = 0;\n    // The faux indent part of the line should have no token type\n    if (fauxIndentLength > 0) {\n        result[resultLen++] = new LinePart(fauxIndentLength, '', 0, false);\n    }\n    let startOffset = fauxIndentLength;\n    for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n        const endIndex = tokens.getEndOffset(tokenIndex);\n        if (endIndex <= fauxIndentLength) {\n            // The faux indent part of the line should have no token type\n            continue;\n        }\n        const type = tokens.getClassName(tokenIndex);\n        if (endIndex >= len) {\n            const tokenContainsRTL = (lineContainsRTL ? strings.containsRTL(lineContent.substring(startOffset, len)) : false);\n            result[resultLen++] = new LinePart(len, type, 0, tokenContainsRTL);\n            break;\n        }\n        const tokenContainsRTL = (lineContainsRTL ? strings.containsRTL(lineContent.substring(startOffset, endIndex)) : false);\n        result[resultLen++] = new LinePart(endIndex, type, 0, tokenContainsRTL);\n        startOffset = endIndex;\n    }\n    return result;\n}\n/**\n * See https://github.com/microsoft/vscode/issues/6885.\n * It appears that having very large spans causes very slow reading of character positions.\n * So here we try to avoid that.\n */\nfunction splitLargeTokens(lineContent, tokens, onlyAtSpaces) {\n    let lastTokenEndIndex = 0;\n    const result = [];\n    let resultLen = 0;\n    if (onlyAtSpaces) {\n        // Split only at spaces => we need to walk each character\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const token = tokens[i];\n            const tokenEndIndex = token.endIndex;\n            if (lastTokenEndIndex + 50 /* Constants.LongToken */ < tokenEndIndex) {\n                const tokenType = token.type;\n                const tokenMetadata = token.metadata;\n                const tokenContainsRTL = token.containsRTL;\n                let lastSpaceOffset = -1;\n                let currTokenStart = lastTokenEndIndex;\n                for (let j = lastTokenEndIndex; j < tokenEndIndex; j++) {\n                    if (lineContent.charCodeAt(j) === 32 /* CharCode.Space */) {\n                        lastSpaceOffset = j;\n                    }\n                    if (lastSpaceOffset !== -1 && j - currTokenStart >= 50 /* Constants.LongToken */) {\n                        // Split at `lastSpaceOffset` + 1\n                        result[resultLen++] = new LinePart(lastSpaceOffset + 1, tokenType, tokenMetadata, tokenContainsRTL);\n                        currTokenStart = lastSpaceOffset + 1;\n                        lastSpaceOffset = -1;\n                    }\n                }\n                if (currTokenStart !== tokenEndIndex) {\n                    result[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n                }\n            }\n            else {\n                result[resultLen++] = token;\n            }\n            lastTokenEndIndex = tokenEndIndex;\n        }\n    }\n    else {\n        // Split anywhere => we don't need to walk each character\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const token = tokens[i];\n            const tokenEndIndex = token.endIndex;\n            const diff = (tokenEndIndex - lastTokenEndIndex);\n            if (diff > 50 /* Constants.LongToken */) {\n                const tokenType = token.type;\n                const tokenMetadata = token.metadata;\n                const tokenContainsRTL = token.containsRTL;\n                const piecesCount = Math.ceil(diff / 50 /* Constants.LongToken */);\n                for (let j = 1; j < piecesCount; j++) {\n                    const pieceEndIndex = lastTokenEndIndex + (j * 50 /* Constants.LongToken */);\n                    result[resultLen++] = new LinePart(pieceEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n                }\n                result[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n            }\n            else {\n                result[resultLen++] = token;\n            }\n            lastTokenEndIndex = tokenEndIndex;\n        }\n    }\n    return result;\n}\nfunction isControlCharacter(charCode) {\n    if (charCode < 32) {\n        return (charCode !== 9 /* CharCode.Tab */);\n    }\n    if (charCode === 127) {\n        // DEL\n        return true;\n    }\n    if ((charCode >= 0x202A && charCode <= 0x202E)\n        || (charCode >= 0x2066 && charCode <= 0x2069)\n        || (charCode >= 0x200E && charCode <= 0x200F)\n        || charCode === 0x061C) {\n        // Unicode Directional Formatting Characters\n        // LRE\tU+202A\tLEFT-TO-RIGHT EMBEDDING\n        // RLE\tU+202B\tRIGHT-TO-LEFT EMBEDDING\n        // PDF\tU+202C\tPOP DIRECTIONAL FORMATTING\n        // LRO\tU+202D\tLEFT-TO-RIGHT OVERRIDE\n        // RLO\tU+202E\tRIGHT-TO-LEFT OVERRIDE\n        // LRI\tU+2066\tLEFT-TO-RIGHT ISOLATE\n        // RLI\tU+2067\tRIGHT-TO-LEFT ISOLATE\n        // FSI\tU+2068\tFIRST STRONG ISOLATE\n        // PDI\tU+2069\tPOP DIRECTIONAL ISOLATE\n        // LRM\tU+200E\tLEFT-TO-RIGHT MARK\n        // RLM\tU+200F\tRIGHT-TO-LEFT MARK\n        // ALM\tU+061C\tARABIC LETTER MARK\n        return true;\n    }\n    return false;\n}\nfunction extractControlCharacters(lineContent, tokens) {\n    const result = [];\n    let lastLinePart = new LinePart(0, '', 0, false);\n    let charOffset = 0;\n    for (const token of tokens) {\n        const tokenEndIndex = token.endIndex;\n        for (; charOffset < tokenEndIndex; charOffset++) {\n            const charCode = lineContent.charCodeAt(charOffset);\n            if (isControlCharacter(charCode)) {\n                if (charOffset > lastLinePart.endIndex) {\n                    // emit previous part if it has text\n                    lastLinePart = new LinePart(charOffset, token.type, token.metadata, token.containsRTL);\n                    result.push(lastLinePart);\n                }\n                lastLinePart = new LinePart(charOffset + 1, 'mtkcontrol', token.metadata, false);\n                result.push(lastLinePart);\n            }\n        }\n        if (charOffset > lastLinePart.endIndex) {\n            // emit previous part if it has text\n            lastLinePart = new LinePart(tokenEndIndex, token.type, token.metadata, token.containsRTL);\n            result.push(lastLinePart);\n        }\n    }\n    return result;\n}\n/**\n * Whitespace is rendered by \"replacing\" tokens with a special-purpose `mtkw` type that is later recognized in the rendering phase.\n * Moreover, a token is created for every visual indent because on some fonts the glyphs used for rendering whitespace (&rarr; or &middot;) do not have the same width as &nbsp;.\n * The rendering phase will generate `style=\"width:...\"` for these tokens.\n */\nfunction _applyRenderWhitespace(input, lineContent, len, tokens) {\n    const continuesWithWrappedLine = input.continuesWithWrappedLine;\n    const fauxIndentLength = input.fauxIndentLength;\n    const tabSize = input.tabSize;\n    const startVisibleColumn = input.startVisibleColumn;\n    const useMonospaceOptimizations = input.useMonospaceOptimizations;\n    const selections = input.selectionsOnLine;\n    const onlyBoundary = (input.renderWhitespace === 1 /* RenderWhitespace.Boundary */);\n    const onlyTrailing = (input.renderWhitespace === 3 /* RenderWhitespace.Trailing */);\n    const generateLinePartForEachWhitespace = (input.renderSpaceWidth !== input.spaceWidth);\n    const result = [];\n    let resultLen = 0;\n    let tokenIndex = 0;\n    let tokenType = tokens[tokenIndex].type;\n    let tokenContainsRTL = tokens[tokenIndex].containsRTL;\n    let tokenEndIndex = tokens[tokenIndex].endIndex;\n    const tokensLength = tokens.length;\n    let lineIsEmptyOrWhitespace = false;\n    let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n    let lastNonWhitespaceIndex;\n    if (firstNonWhitespaceIndex === -1) {\n        lineIsEmptyOrWhitespace = true;\n        firstNonWhitespaceIndex = len;\n        lastNonWhitespaceIndex = len;\n    }\n    else {\n        lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n    }\n    let wasInWhitespace = false;\n    let currentSelectionIndex = 0;\n    let currentSelection = selections && selections[currentSelectionIndex];\n    let tmpIndent = startVisibleColumn % tabSize;\n    for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n        const chCode = lineContent.charCodeAt(charIndex);\n        if (currentSelection && charIndex >= currentSelection.endOffset) {\n            currentSelectionIndex++;\n            currentSelection = selections && selections[currentSelectionIndex];\n        }\n        let isInWhitespace;\n        if (charIndex < firstNonWhitespaceIndex || charIndex > lastNonWhitespaceIndex) {\n            // in leading or trailing whitespace\n            isInWhitespace = true;\n        }\n        else if (chCode === 9 /* CharCode.Tab */) {\n            // a tab character is rendered both in all and boundary cases\n            isInWhitespace = true;\n        }\n        else if (chCode === 32 /* CharCode.Space */) {\n            // hit a space character\n            if (onlyBoundary) {\n                // rendering only boundary whitespace\n                if (wasInWhitespace) {\n                    isInWhitespace = true;\n                }\n                else {\n                    const nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n                    isInWhitespace = (nextChCode === 32 /* CharCode.Space */ || nextChCode === 9 /* CharCode.Tab */);\n                }\n            }\n            else {\n                isInWhitespace = true;\n            }\n        }\n        else {\n            isInWhitespace = false;\n        }\n        // If rendering whitespace on selection, check that the charIndex falls within a selection\n        if (isInWhitespace && selections) {\n            isInWhitespace = !!currentSelection && currentSelection.startOffset <= charIndex && currentSelection.endOffset > charIndex;\n        }\n        // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n        if (isInWhitespace && onlyTrailing) {\n            isInWhitespace = lineIsEmptyOrWhitespace || charIndex > lastNonWhitespaceIndex;\n        }\n        if (isInWhitespace && tokenContainsRTL) {\n            // If the token contains RTL text, breaking it up into multiple line parts\n            // to render whitespace might affect the browser's bidi layout.\n            //\n            // We render whitespace in such tokens only if the whitespace\n            // is the leading or the trailing whitespace of the line,\n            // which doesn't affect the browser's bidi layout.\n            if (charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex) {\n                isInWhitespace = false;\n            }\n        }\n        if (wasInWhitespace) {\n            // was in whitespace token\n            if (!isInWhitespace || (!useMonospaceOptimizations && tmpIndent >= tabSize)) {\n                // leaving whitespace token or entering a new indent\n                if (generateLinePartForEachWhitespace) {\n                    const lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n                    for (let i = lastEndIndex + 1; i <= charIndex; i++) {\n                        result[resultLen++] = new LinePart(i, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n                    }\n                }\n                else {\n                    result[resultLen++] = new LinePart(charIndex, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n                }\n                tmpIndent = tmpIndent % tabSize;\n            }\n        }\n        else {\n            // was in regular token\n            if (charIndex === tokenEndIndex || (isInWhitespace && charIndex > fauxIndentLength)) {\n                result[resultLen++] = new LinePart(charIndex, tokenType, 0, tokenContainsRTL);\n                tmpIndent = tmpIndent % tabSize;\n            }\n        }\n        if (chCode === 9 /* CharCode.Tab */) {\n            tmpIndent = tabSize;\n        }\n        else if (strings.isFullWidthCharacter(chCode)) {\n            tmpIndent += 2;\n        }\n        else {\n            tmpIndent++;\n        }\n        wasInWhitespace = isInWhitespace;\n        while (charIndex === tokenEndIndex) {\n            tokenIndex++;\n            if (tokenIndex < tokensLength) {\n                tokenType = tokens[tokenIndex].type;\n                tokenContainsRTL = tokens[tokenIndex].containsRTL;\n                tokenEndIndex = tokens[tokenIndex].endIndex;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    let generateWhitespace = false;\n    if (wasInWhitespace) {\n        // was in whitespace token\n        if (continuesWithWrappedLine && onlyBoundary) {\n            const lastCharCode = (len > 0 ? lineContent.charCodeAt(len - 1) : 0 /* CharCode.Null */);\n            const prevCharCode = (len > 1 ? lineContent.charCodeAt(len - 2) : 0 /* CharCode.Null */);\n            const isSingleTrailingSpace = (lastCharCode === 32 /* CharCode.Space */ && (prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */));\n            if (!isSingleTrailingSpace) {\n                generateWhitespace = true;\n            }\n        }\n        else {\n            generateWhitespace = true;\n        }\n    }\n    if (generateWhitespace) {\n        if (generateLinePartForEachWhitespace) {\n            const lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n            for (let i = lastEndIndex + 1; i <= len; i++) {\n                result[resultLen++] = new LinePart(i, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n            }\n        }\n        else {\n            result[resultLen++] = new LinePart(len, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n        }\n    }\n    else {\n        result[resultLen++] = new LinePart(len, tokenType, 0, tokenContainsRTL);\n    }\n    return result;\n}\n/**\n * Inline decorations are \"merged\" on top of tokens.\n * Special care must be taken when multiple inline decorations are at play and they overlap.\n */\nfunction _applyInlineDecorations(lineContent, len, tokens, _lineDecorations) {\n    _lineDecorations.sort(LineDecoration.compare);\n    const lineDecorations = LineDecorationsNormalizer.normalize(lineContent, _lineDecorations);\n    const lineDecorationsLen = lineDecorations.length;\n    let lineDecorationIndex = 0;\n    const result = [];\n    let resultLen = 0;\n    let lastResultEndIndex = 0;\n    for (let tokenIndex = 0, len = tokens.length; tokenIndex < len; tokenIndex++) {\n        const token = tokens[tokenIndex];\n        const tokenEndIndex = token.endIndex;\n        const tokenType = token.type;\n        const tokenMetadata = token.metadata;\n        const tokenContainsRTL = token.containsRTL;\n        while (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset < tokenEndIndex) {\n            const lineDecoration = lineDecorations[lineDecorationIndex];\n            if (lineDecoration.startOffset > lastResultEndIndex) {\n                lastResultEndIndex = lineDecoration.startOffset;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n            }\n            if (lineDecoration.endOffset + 1 <= tokenEndIndex) {\n                // This line decoration ends before this token ends\n                lastResultEndIndex = lineDecoration.endOffset + 1;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata, tokenContainsRTL);\n                lineDecorationIndex++;\n            }\n            else {\n                // This line decoration continues on to the next token\n                lastResultEndIndex = tokenEndIndex;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata, tokenContainsRTL);\n                break;\n            }\n        }\n        if (tokenEndIndex > lastResultEndIndex) {\n            lastResultEndIndex = tokenEndIndex;\n            result[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n        }\n    }\n    const lastTokenEndIndex = tokens[tokens.length - 1].endIndex;\n    if (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n        while (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n            const lineDecoration = lineDecorations[lineDecorationIndex];\n            result[resultLen++] = new LinePart(lastResultEndIndex, lineDecoration.className, lineDecoration.metadata, false);\n            lineDecorationIndex++;\n        }\n    }\n    return result;\n}\n/**\n * This function is on purpose not split up into multiple functions to allow runtime type inference (i.e. performance reasons).\n * Notice how all the needed data is fully resolved and passed in (i.e. no other calls).\n */\nfunction _renderLine(input, sb) {\n    const fontIsMonospace = input.fontIsMonospace;\n    const canUseHalfwidthRightwardsArrow = input.canUseHalfwidthRightwardsArrow;\n    const containsForeignElements = input.containsForeignElements;\n    const lineContent = input.lineContent;\n    const len = input.len;\n    const isOverflowing = input.isOverflowing;\n    const overflowingCharCount = input.overflowingCharCount;\n    const parts = input.parts;\n    const fauxIndentLength = input.fauxIndentLength;\n    const tabSize = input.tabSize;\n    const startVisibleColumn = input.startVisibleColumn;\n    const containsRTL = input.containsRTL;\n    const spaceWidth = input.spaceWidth;\n    const renderSpaceCharCode = input.renderSpaceCharCode;\n    const renderWhitespace = input.renderWhitespace;\n    const renderControlCharacters = input.renderControlCharacters;\n    const characterMapping = new CharacterMapping(len + 1, parts.length);\n    let lastCharacterMappingDefined = false;\n    let charIndex = 0;\n    let visibleColumn = startVisibleColumn;\n    let charOffsetInPart = 0; // the character offset in the current part\n    let charHorizontalOffset = 0; // the character horizontal position in terms of chars relative to line start\n    let partDisplacement = 0;\n    if (containsRTL) {\n        sb.appendString('<span dir=\"ltr\">');\n    }\n    else {\n        sb.appendString('<span>');\n    }\n    for (let partIndex = 0, tokensLen = parts.length; partIndex < tokensLen; partIndex++) {\n        const part = parts[partIndex];\n        const partEndIndex = part.endIndex;\n        const partType = part.type;\n        const partContainsRTL = part.containsRTL;\n        const partRendersWhitespace = (renderWhitespace !== 0 /* RenderWhitespace.None */ && part.isWhitespace());\n        const partRendersWhitespaceWithWidth = partRendersWhitespace && !fontIsMonospace && (partType === 'mtkw' /*only whitespace*/ || !containsForeignElements);\n        const partIsEmptyAndHasPseudoAfter = (charIndex === partEndIndex && part.isPseudoAfter());\n        charOffsetInPart = 0;\n        sb.appendString('<span ');\n        if (partContainsRTL) {\n            sb.appendString('style=\"unicode-bidi:isolate\" ');\n        }\n        sb.appendString('class=\"');\n        sb.appendString(partRendersWhitespaceWithWidth ? 'mtkz' : partType);\n        sb.appendASCIICharCode(34 /* CharCode.DoubleQuote */);\n        if (partRendersWhitespace) {\n            let partWidth = 0;\n            {\n                let _charIndex = charIndex;\n                let _visibleColumn = visibleColumn;\n                for (; _charIndex < partEndIndex; _charIndex++) {\n                    const charCode = lineContent.charCodeAt(_charIndex);\n                    const charWidth = (charCode === 9 /* CharCode.Tab */ ? (tabSize - (_visibleColumn % tabSize)) : 1) | 0;\n                    partWidth += charWidth;\n                    if (_charIndex >= fauxIndentLength) {\n                        _visibleColumn += charWidth;\n                    }\n                }\n            }\n            if (partRendersWhitespaceWithWidth) {\n                sb.appendString(' style=\"width:');\n                sb.appendString(String(spaceWidth * partWidth));\n                sb.appendString('px\"');\n            }\n            sb.appendASCIICharCode(62 /* CharCode.GreaterThan */);\n            for (; charIndex < partEndIndex; charIndex++) {\n                characterMapping.setColumnInfo(charIndex + 1, partIndex - partDisplacement, charOffsetInPart, charHorizontalOffset);\n                partDisplacement = 0;\n                const charCode = lineContent.charCodeAt(charIndex);\n                let producedCharacters;\n                let charWidth;\n                if (charCode === 9 /* CharCode.Tab */) {\n                    producedCharacters = (tabSize - (visibleColumn % tabSize)) | 0;\n                    charWidth = producedCharacters;\n                    if (!canUseHalfwidthRightwardsArrow || charWidth > 1) {\n                        sb.appendCharCode(0x2192); // RIGHTWARDS ARROW\n                    }\n                    else {\n                        sb.appendCharCode(0xFFEB); // HALFWIDTH RIGHTWARDS ARROW\n                    }\n                    for (let space = 2; space <= charWidth; space++) {\n                        sb.appendCharCode(0xA0); // &nbsp;\n                    }\n                }\n                else { // must be CharCode.Space\n                    producedCharacters = 2;\n                    charWidth = 1;\n                    sb.appendCharCode(renderSpaceCharCode); // &middot; or word separator middle dot\n                    sb.appendCharCode(0x200C); // ZERO WIDTH NON-JOINER\n                }\n                charOffsetInPart += producedCharacters;\n                charHorizontalOffset += charWidth;\n                if (charIndex >= fauxIndentLength) {\n                    visibleColumn += charWidth;\n                }\n            }\n        }\n        else {\n            sb.appendASCIICharCode(62 /* CharCode.GreaterThan */);\n            for (; charIndex < partEndIndex; charIndex++) {\n                characterMapping.setColumnInfo(charIndex + 1, partIndex - partDisplacement, charOffsetInPart, charHorizontalOffset);\n                partDisplacement = 0;\n                const charCode = lineContent.charCodeAt(charIndex);\n                let producedCharacters = 1;\n                let charWidth = 1;\n                switch (charCode) {\n                    case 9 /* CharCode.Tab */:\n                        producedCharacters = (tabSize - (visibleColumn % tabSize));\n                        charWidth = producedCharacters;\n                        for (let space = 1; space <= producedCharacters; space++) {\n                            sb.appendCharCode(0xA0); // &nbsp;\n                        }\n                        break;\n                    case 32 /* CharCode.Space */:\n                        sb.appendCharCode(0xA0); // &nbsp;\n                        break;\n                    case 60 /* CharCode.LessThan */:\n                        sb.appendString('&lt;');\n                        break;\n                    case 62 /* CharCode.GreaterThan */:\n                        sb.appendString('&gt;');\n                        break;\n                    case 38 /* CharCode.Ampersand */:\n                        sb.appendString('&amp;');\n                        break;\n                    case 0 /* CharCode.Null */:\n                        if (renderControlCharacters) {\n                            // See https://unicode-table.com/en/blocks/control-pictures/\n                            sb.appendCharCode(9216);\n                        }\n                        else {\n                            sb.appendString('&#00;');\n                        }\n                        break;\n                    case 65279 /* CharCode.UTF8_BOM */:\n                    case 8232 /* CharCode.LINE_SEPARATOR */:\n                    case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n                    case 133 /* CharCode.NEXT_LINE */:\n                        sb.appendCharCode(0xFFFD);\n                        break;\n                    default:\n                        if (strings.isFullWidthCharacter(charCode)) {\n                            charWidth++;\n                        }\n                        // See https://unicode-table.com/en/blocks/control-pictures/\n                        if (renderControlCharacters && charCode < 32) {\n                            sb.appendCharCode(9216 + charCode);\n                        }\n                        else if (renderControlCharacters && charCode === 127) {\n                            // DEL\n                            sb.appendCharCode(9249);\n                        }\n                        else if (renderControlCharacters && isControlCharacter(charCode)) {\n                            sb.appendString('[U+');\n                            sb.appendString(to4CharHex(charCode));\n                            sb.appendString(']');\n                            producedCharacters = 8;\n                            charWidth = producedCharacters;\n                        }\n                        else {\n                            sb.appendCharCode(charCode);\n                        }\n                }\n                charOffsetInPart += producedCharacters;\n                charHorizontalOffset += charWidth;\n                if (charIndex >= fauxIndentLength) {\n                    visibleColumn += charWidth;\n                }\n            }\n        }\n        if (partIsEmptyAndHasPseudoAfter) {\n            partDisplacement++;\n        }\n        else {\n            partDisplacement = 0;\n        }\n        if (charIndex >= len && !lastCharacterMappingDefined && part.isPseudoAfter()) {\n            lastCharacterMappingDefined = true;\n            characterMapping.setColumnInfo(charIndex + 1, partIndex, charOffsetInPart, charHorizontalOffset);\n        }\n        sb.appendString('</span>');\n    }\n    if (!lastCharacterMappingDefined) {\n        // When getting client rects for the last character, we will position the\n        // text range at the end of the span, insteaf of at the beginning of next span\n        characterMapping.setColumnInfo(len + 1, parts.length - 1, charOffsetInPart, charHorizontalOffset);\n    }\n    if (isOverflowing) {\n        sb.appendString('<span class=\"mtkoverflow\">');\n        sb.appendString(nls.localize('showMore', \"Show more ({0})\", renderOverflowingCharCount(overflowingCharCount)));\n        sb.appendString('</span>');\n    }\n    sb.appendString('</span>');\n    return new RenderLineOutput(characterMapping, containsRTL, containsForeignElements);\n}\nfunction to4CharHex(n) {\n    return n.toString(16).toUpperCase().padStart(4, '0');\n}\nfunction renderOverflowingCharCount(n) {\n    if (n < 1024) {\n        return nls.localize('overflow.chars', \"{0} chars\", n);\n    }\n    if (n < 1024 * 1024) {\n        return `${(n / 1024).toFixed(1)} KB`;\n    }\n    return `${(n / 1024 / 1024).toFixed(1)} MB`;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\n/**\n * Contains all data needed to render at a specific viewport.\n */\nexport class ViewportData {\n    constructor(selections, partialData, whitespaceViewportData, model) {\n        this.selections = selections;\n        this.startLineNumber = partialData.startLineNumber | 0;\n        this.endLineNumber = partialData.endLineNumber | 0;\n        this.relativeVerticalOffset = partialData.relativeVerticalOffset;\n        this.bigNumbersDelta = partialData.bigNumbersDelta | 0;\n        this.whitespaceViewportData = whitespaceViewportData;\n        this._model = model;\n        this.visibleRange = new Range(partialData.startLineNumber, this._model.getLineMinColumn(partialData.startLineNumber), partialData.endLineNumber, this._model.getLineMaxColumn(partialData.endLineNumber));\n    }\n    getViewLineRenderingData(lineNumber) {\n        return this._model.getViewportViewLineRenderingData(this.visibleRange, lineNumber);\n    }\n    getDecorationsInViewport() {\n        return this._model.getDecorationsInViewport(this.visibleRange);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../base/common/strings.js';\nimport { Range } from './core/range.js';\nexport class Viewport {\n    constructor(top, left, width, height) {\n        this._viewportBrand = undefined;\n        this.top = top | 0;\n        this.left = left | 0;\n        this.width = width | 0;\n        this.height = height | 0;\n    }\n}\nexport class MinimapLinesRenderingData {\n    constructor(tabSize, data) {\n        this.tabSize = tabSize;\n        this.data = data;\n    }\n}\nexport class ViewLineData {\n    constructor(content, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens, inlineDecorations) {\n        this._viewLineDataBrand = undefined;\n        this.content = content;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.minColumn = minColumn;\n        this.maxColumn = maxColumn;\n        this.startVisibleColumn = startVisibleColumn;\n        this.tokens = tokens;\n        this.inlineDecorations = inlineDecorations;\n    }\n}\nexport class ViewLineRenderingData {\n    constructor(minColumn, maxColumn, content, continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, tokens, inlineDecorations, tabSize, startVisibleColumn) {\n        this.minColumn = minColumn;\n        this.maxColumn = maxColumn;\n        this.content = content;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\n        this.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\n        this.tokens = tokens;\n        this.inlineDecorations = inlineDecorations;\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n    }\n    static isBasicASCII(lineContent, mightContainNonBasicASCII) {\n        if (mightContainNonBasicASCII) {\n            return strings.isBasicASCII(lineContent);\n        }\n        return true;\n    }\n    static containsRTL(lineContent, isBasicASCII, mightContainRTL) {\n        if (!isBasicASCII && mightContainRTL) {\n            return strings.containsRTL(lineContent);\n        }\n        return false;\n    }\n}\nexport class InlineDecoration {\n    constructor(range, inlineClassName, type) {\n        this.range = range;\n        this.inlineClassName = inlineClassName;\n        this.type = type;\n    }\n}\nexport class SingleLineInlineDecoration {\n    constructor(startOffset, endOffset, inlineClassName, inlineClassNameAffectsLetterSpacing) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.inlineClassName = inlineClassName;\n        this.inlineClassNameAffectsLetterSpacing = inlineClassNameAffectsLetterSpacing;\n    }\n    toInlineDecoration(lineNumber) {\n        return new InlineDecoration(new Range(lineNumber, this.startOffset + 1, lineNumber, this.endOffset + 1), this.inlineClassName, this.inlineClassNameAffectsLetterSpacing ? 3 /* InlineDecorationType.RegularAffectingLetterSpacing */ : 0 /* InlineDecorationType.Regular */);\n    }\n}\nexport class ViewModelDecoration {\n    constructor(range, options) {\n        this._viewModelDecorationBrand = undefined;\n        this.range = range;\n        this.options = options;\n    }\n}\nexport class OverviewRulerDecorationsGroup {\n    constructor(color, zIndex, \n    /**\n     * Decorations are encoded in a number array using the following scheme:\n     *  - 3*i = lane\n     *  - 3*i+1 = startLineNumber\n     *  - 3*i+2 = endLineNumber\n     */\n    data) {\n        this.color = color;\n        this.zIndex = zIndex;\n        this.data = data;\n    }\n    static cmp(a, b) {\n        if (a.zIndex === b.zIndex) {\n            if (a.color < b.color) {\n                return -1;\n            }\n            if (a.color > b.color) {\n                return 1;\n            }\n            return 0;\n        }\n        return a.zIndex - b.zIndex;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, markAsSingleton } from '../../../base/common/lifecycle.js';\nimport { RGBA8 } from '../core/rgba.js';\nimport { TokenizationRegistry } from '../languages.js';\nclass MinimapTokensColorTracker extends Disposable {\n    static getInstance() {\n        if (!this._INSTANCE) {\n            this._INSTANCE = markAsSingleton(new MinimapTokensColorTracker());\n        }\n        return this._INSTANCE;\n    }\n    constructor() {\n        super();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._updateColorMap();\n        this._register(TokenizationRegistry.onDidChange(e => {\n            if (e.changedColorMap) {\n                this._updateColorMap();\n            }\n        }));\n    }\n    _updateColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        if (!colorMap) {\n            this._colors = [RGBA8.Empty];\n            this._backgroundIsLight = true;\n            return;\n        }\n        this._colors = [RGBA8.Empty];\n        for (let colorId = 1; colorId < colorMap.length; colorId++) {\n            const source = colorMap[colorId].rgba;\n            // Use a VM friendly data-type\n            this._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n        }\n        const backgroundLuminosity = colorMap[2 /* ColorId.DefaultBackground */].getRelativeLuminance();\n        this._backgroundIsLight = backgroundLuminosity >= 0.5;\n        this._onDidChange.fire(undefined);\n    }\n    getColor(colorId) {\n        if (colorId < 1 || colorId >= this._colors.length) {\n            // background color (basically invisible)\n            colorId = 2 /* ColorId.DefaultBackground */;\n        }\n        return this._colors[colorId];\n    }\n    backgroundIsLight() {\n        return this._backgroundIsLight;\n    }\n}\nMinimapTokensColorTracker._INSTANCE = null;\nexport { MinimapTokensColorTracker };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { ModelLineProjectionData } from '../modelLineProjectionData.js';\nexport class MonospaceLineBreaksComputerFactory {\n    static create(options) {\n        return new MonospaceLineBreaksComputerFactory(options.get(127 /* EditorOption.wordWrapBreakBeforeCharacters */), options.get(126 /* EditorOption.wordWrapBreakAfterCharacters */));\n    }\n    constructor(breakBeforeChars, breakAfterChars) {\n        this.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak) {\n        const requests = [];\n        const injectedTexts = [];\n        const previousBreakingData = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n                previousBreakingData.push(previousLineBreakData);\n            },\n            finalize: () => {\n                const columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth;\n                const result = [];\n                for (let i = 0, len = requests.length; i < len; i++) {\n                    const injectedText = injectedTexts[i];\n                    const previousLineBreakData = previousBreakingData[i];\n                    if (previousLineBreakData && !previousLineBreakData.injectionOptions && !injectedText) {\n                        result[i] = createLineBreaksFromPreviousLineBreaks(this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak);\n                    }\n                    else {\n                        result[i] = createLineBreaks(this.classifier, requests[i], injectedText, tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak);\n                    }\n                }\n                arrPool1.length = 0;\n                arrPool2.length = 0;\n                return result;\n            }\n        };\n    }\n}\nclass WrappingCharacterClassifier extends CharacterClassifier {\n    constructor(BREAK_BEFORE, BREAK_AFTER) {\n        super(0 /* CharacterClass.NONE */);\n        for (let i = 0; i < BREAK_BEFORE.length; i++) {\n            this.set(BREAK_BEFORE.charCodeAt(i), 1 /* CharacterClass.BREAK_BEFORE */);\n        }\n        for (let i = 0; i < BREAK_AFTER.length; i++) {\n            this.set(BREAK_AFTER.charCodeAt(i), 2 /* CharacterClass.BREAK_AFTER */);\n        }\n    }\n    get(charCode) {\n        if (charCode >= 0 && charCode < 256) {\n            return this._asciiMap[charCode];\n        }\n        else {\n            // Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\n            // 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\n            // 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\n            // 3. Hiragana and Katakana (0x3040 -- 0x30FF)\n            if ((charCode >= 0x3040 && charCode <= 0x30FF)\n                || (charCode >= 0x3400 && charCode <= 0x4DBF)\n                || (charCode >= 0x4E00 && charCode <= 0x9FFF)) {\n                return 3 /* CharacterClass.BREAK_IDEOGRAPHIC */;\n            }\n            return (this._map.get(charCode) || this._defaultValue);\n        }\n    }\n}\nlet arrPool1 = [];\nlet arrPool2 = [];\nfunction createLineBreaksFromPreviousLineBreaks(classifier, previousBreakingData, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent, wordBreak) {\n    if (firstLineBreakColumn === -1) {\n        return null;\n    }\n    const len = lineText.length;\n    if (len <= 1) {\n        return null;\n    }\n    const isKeepAll = (wordBreak === 'keepAll');\n    const prevBreakingOffsets = previousBreakingData.breakOffsets;\n    const prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n    const breakingOffsets = arrPool1;\n    const breakingOffsetsVisibleColumn = arrPool2;\n    let breakingOffsetsCount = 0;\n    let lastBreakingOffset = 0;\n    let lastBreakingOffsetVisibleColumn = 0;\n    let breakingColumn = firstLineBreakColumn;\n    const prevLen = prevBreakingOffsets.length;\n    let prevIndex = 0;\n    if (prevIndex >= 0) {\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n        while (prevIndex + 1 < prevLen) {\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n            if (distance >= bestDistance) {\n                break;\n            }\n            bestDistance = distance;\n            prevIndex++;\n        }\n    }\n    while (prevIndex < prevLen) {\n        // Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\n        let prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\n        let prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\n        if (lastBreakingOffset > prevBreakOffset) {\n            prevBreakOffset = lastBreakingOffset;\n            prevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\n        }\n        let breakOffset = 0;\n        let breakOffsetVisibleColumn = 0;\n        let forcedBreakOffset = 0;\n        let forcedBreakOffsetVisibleColumn = 0;\n        // initially, we search as much as possible to the right (if it fits)\n        if (prevBreakOffsetVisibleColumn <= breakingColumn) {\n            let visibleColumn = prevBreakOffsetVisibleColumn;\n            let prevCharCode = prevBreakOffset === 0 ? 0 /* CharCode.Null */ : lineText.charCodeAt(prevBreakOffset - 1);\n            let prevCharCodeClass = prevBreakOffset === 0 ? 0 /* CharacterClass.NONE */ : classifier.get(prevCharCode);\n            let entireLineFits = true;\n            for (let i = prevBreakOffset; i < len; i++) {\n                const charStartOffset = i;\n                const charCode = lineText.charCodeAt(i);\n                let charCodeClass;\n                let charWidth;\n                if (strings.isHighSurrogate(charCode)) {\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                    i++;\n                    charCodeClass = 0 /* CharacterClass.NONE */;\n                    charWidth = 2;\n                }\n                else {\n                    charCodeClass = classifier.get(charCode);\n                    charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n                }\n                if (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n                    breakOffset = charStartOffset;\n                    breakOffsetVisibleColumn = visibleColumn;\n                }\n                visibleColumn += charWidth;\n                // check if adding character at `i` will go over the breaking column\n                if (visibleColumn > breakingColumn) {\n                    // We need to break at least before character at `i`:\n                    if (charStartOffset > lastBreakingOffset) {\n                        forcedBreakOffset = charStartOffset;\n                        forcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\n                    }\n                    else {\n                        // we need to advance at least by one character\n                        forcedBreakOffset = i + 1;\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\n                    }\n                    if (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n                        // Cannot break at `breakOffset` => reset it if it was set\n                        breakOffset = 0;\n                    }\n                    entireLineFits = false;\n                    break;\n                }\n                prevCharCode = charCode;\n                prevCharCodeClass = charCodeClass;\n            }\n            if (entireLineFits) {\n                // there is no more need to break => stop the outer loop!\n                if (breakingOffsetsCount > 0) {\n                    // Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\n                    breakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\n                    breakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\n                    breakingOffsetsCount++;\n                }\n                break;\n            }\n        }\n        if (breakOffset === 0) {\n            // must search left\n            let visibleColumn = prevBreakOffsetVisibleColumn;\n            let charCode = lineText.charCodeAt(prevBreakOffset);\n            let charCodeClass = classifier.get(charCode);\n            let hitATabCharacter = false;\n            for (let i = prevBreakOffset - 1; i >= lastBreakingOffset; i--) {\n                const charStartOffset = i + 1;\n                const prevCharCode = lineText.charCodeAt(i);\n                if (prevCharCode === 9 /* CharCode.Tab */) {\n                    // cannot determine the width of a tab when going backwards, so we must go forwards\n                    hitATabCharacter = true;\n                    break;\n                }\n                let prevCharCodeClass;\n                let prevCharWidth;\n                if (strings.isLowSurrogate(prevCharCode)) {\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                    i--;\n                    prevCharCodeClass = 0 /* CharacterClass.NONE */;\n                    prevCharWidth = 2;\n                }\n                else {\n                    prevCharCodeClass = classifier.get(prevCharCode);\n                    prevCharWidth = (strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1);\n                }\n                if (visibleColumn <= breakingColumn) {\n                    if (forcedBreakOffset === 0) {\n                        forcedBreakOffset = charStartOffset;\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\n                    }\n                    if (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\n                        // went too far!\n                        break;\n                    }\n                    if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n                        breakOffset = charStartOffset;\n                        breakOffsetVisibleColumn = visibleColumn;\n                        break;\n                    }\n                }\n                visibleColumn -= prevCharWidth;\n                charCode = prevCharCode;\n                charCodeClass = prevCharCodeClass;\n            }\n            if (breakOffset !== 0) {\n                const remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\n                if (remainingWidthOfNextLine <= tabSize) {\n                    const charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\n                    let charWidth;\n                    if (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\n                        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                        charWidth = 2;\n                    }\n                    else {\n                        charWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n                    }\n                    if (remainingWidthOfNextLine - charWidth < 0) {\n                        // it is not worth it to break at breakOffset, it just introduces an extra needless line!\n                        breakOffset = 0;\n                    }\n                }\n            }\n            if (hitATabCharacter) {\n                // cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\n                prevIndex--;\n                continue;\n            }\n        }\n        if (breakOffset === 0) {\n            // Could not find a good breaking point\n            breakOffset = forcedBreakOffset;\n            breakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\n        }\n        if (breakOffset <= lastBreakingOffset) {\n            // Make sure that we are advancing (at least one character)\n            const charCode = lineText.charCodeAt(lastBreakingOffset);\n            if (strings.isHighSurrogate(charCode)) {\n                // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                breakOffset = lastBreakingOffset + 2;\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\n            }\n            else {\n                breakOffset = lastBreakingOffset + 1;\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(charCode, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n            }\n        }\n        lastBreakingOffset = breakOffset;\n        breakingOffsets[breakingOffsetsCount] = breakOffset;\n        lastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\n        breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n        breakingOffsetsCount++;\n        breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n        while (prevIndex < 0 || (prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn)) {\n            prevIndex++;\n        }\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n        while (prevIndex + 1 < prevLen) {\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n            if (distance >= bestDistance) {\n                break;\n            }\n            bestDistance = distance;\n            prevIndex++;\n        }\n    }\n    if (breakingOffsetsCount === 0) {\n        return null;\n    }\n    // Doing here some object reuse which ends up helping a huge deal with GC pauses!\n    breakingOffsets.length = breakingOffsetsCount;\n    breakingOffsetsVisibleColumn.length = breakingOffsetsCount;\n    arrPool1 = previousBreakingData.breakOffsets;\n    arrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\n    previousBreakingData.breakOffsets = breakingOffsets;\n    previousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\n    previousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\n    return previousBreakingData;\n}\nfunction createLineBreaks(classifier, _lineText, injectedTexts, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent, wordBreak) {\n    const lineText = LineInjectedText.applyInjectedText(_lineText, injectedTexts);\n    let injectionOptions;\n    let injectionOffsets;\n    if (injectedTexts && injectedTexts.length > 0) {\n        injectionOptions = injectedTexts.map(t => t.options);\n        injectionOffsets = injectedTexts.map(text => text.column - 1);\n    }\n    else {\n        injectionOptions = null;\n        injectionOffsets = null;\n    }\n    if (firstLineBreakColumn === -1) {\n        if (!injectionOptions) {\n            return null;\n        }\n        // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n        // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n        return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    }\n    const len = lineText.length;\n    if (len <= 1) {\n        if (!injectionOptions) {\n            return null;\n        }\n        // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n        // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n        return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    }\n    const isKeepAll = (wordBreak === 'keepAll');\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n    const breakingOffsets = [];\n    const breakingOffsetsVisibleColumn = [];\n    let breakingOffsetsCount = 0;\n    let breakOffset = 0;\n    let breakOffsetVisibleColumn = 0;\n    let breakingColumn = firstLineBreakColumn;\n    let prevCharCode = lineText.charCodeAt(0);\n    let prevCharCodeClass = classifier.get(prevCharCode);\n    let visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\n    let startOffset = 1;\n    if (strings.isHighSurrogate(prevCharCode)) {\n        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n        visibleColumn += 1;\n        prevCharCode = lineText.charCodeAt(1);\n        prevCharCodeClass = classifier.get(prevCharCode);\n        startOffset++;\n    }\n    for (let i = startOffset; i < len; i++) {\n        const charStartOffset = i;\n        const charCode = lineText.charCodeAt(i);\n        let charCodeClass;\n        let charWidth;\n        if (strings.isHighSurrogate(charCode)) {\n            // A surrogate pair must always be considered as a single unit, so it is never to be broken\n            i++;\n            charCodeClass = 0 /* CharacterClass.NONE */;\n            charWidth = 2;\n        }\n        else {\n            charCodeClass = classifier.get(charCode);\n            charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n        }\n        if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n            breakOffset = charStartOffset;\n            breakOffsetVisibleColumn = visibleColumn;\n        }\n        visibleColumn += charWidth;\n        // check if adding character at `i` will go over the breaking column\n        if (visibleColumn > breakingColumn) {\n            // We need to break at least before character at `i`:\n            if (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n                // Cannot break at `breakOffset`, must break at `i`\n                breakOffset = charStartOffset;\n                breakOffsetVisibleColumn = visibleColumn - charWidth;\n            }\n            breakingOffsets[breakingOffsetsCount] = breakOffset;\n            breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n            breakingOffsetsCount++;\n            breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n            breakOffset = 0;\n        }\n        prevCharCode = charCode;\n        prevCharCodeClass = charCodeClass;\n    }\n    if (breakingOffsetsCount === 0 && (!injectedTexts || injectedTexts.length === 0)) {\n        return null;\n    }\n    // Add last segment\n    breakingOffsets[breakingOffsetsCount] = len;\n    breakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\n    return new ModelLineProjectionData(injectionOffsets, injectionOptions, breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\n}\nfunction computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar) {\n    if (charCode === 9 /* CharCode.Tab */) {\n        return (tabSize - (visibleColumn % tabSize));\n    }\n    if (strings.isFullWidthCharacter(charCode)) {\n        return columnsForFullWidthChar;\n    }\n    if (charCode < 32) {\n        // when using `editor.renderControlCharacters`, the substitutions are often wide\n        return columnsForFullWidthChar;\n    }\n    return 1;\n}\nfunction tabCharacterWidth(visibleColumn, tabSize) {\n    return (tabSize - (visibleColumn % tabSize));\n}\n/**\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\n * Kinsoku Shori : Don't break before a trailing character, like a period\n */\nfunction canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll) {\n    return (charCode !== 32 /* CharCode.Space */\n        && ((prevCharCodeClass === 2 /* CharacterClass.BREAK_AFTER */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */) // break at the end of multiple BREAK_AFTER\n            || (prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */ && charCodeClass === 1 /* CharacterClass.BREAK_BEFORE */) // break at the start of multiple BREAK_BEFORE\n            || (!isKeepAll && prevCharCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */)\n            || (!isKeepAll && charCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */)));\n}\nfunction computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n    let wrappedTextIndentLength = 0;\n    if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n        const firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\n        if (firstNonWhitespaceIndex !== -1) {\n            // Track existing indent\n            for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                const charWidth = (lineText.charCodeAt(i) === 9 /* CharCode.Tab */ ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1);\n                wrappedTextIndentLength += charWidth;\n            }\n            // Increase indent of continuation lines, if desired\n            const numberOfAdditionalTabs = (wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0);\n            for (let i = 0; i < numberOfAdditionalTabs; i++) {\n                const charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\n                wrappedTextIndentLength += charWidth;\n            }\n            // Force sticking to beginning of line if no character would fit except for the indentation\n            if (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\n                wrappedTextIndentLength = 0;\n            }\n        }\n    }\n    return wrappedTextIndentLength;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ColorZone {\n    constructor(from, to, colorId) {\n        this._colorZoneBrand = undefined;\n        this.from = from | 0;\n        this.to = to | 0;\n        this.colorId = colorId | 0;\n    }\n    static compare(a, b) {\n        if (a.colorId === b.colorId) {\n            if (a.from === b.from) {\n                return a.to - b.to;\n            }\n            return a.from - b.from;\n        }\n        return a.colorId - b.colorId;\n    }\n}\n/**\n * A zone in the overview ruler\n */\nexport class OverviewRulerZone {\n    constructor(startLineNumber, endLineNumber, heightInLines, color) {\n        this._overviewRulerZoneBrand = undefined;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n        this.heightInLines = heightInLines;\n        this.color = color;\n        this._colorZone = null;\n    }\n    static compare(a, b) {\n        if (a.color === b.color) {\n            if (a.startLineNumber === b.startLineNumber) {\n                if (a.heightInLines === b.heightInLines) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.heightInLines - b.heightInLines;\n            }\n            return a.startLineNumber - b.startLineNumber;\n        }\n        return a.color < b.color ? -1 : 1;\n    }\n    setColorZone(colorZone) {\n        this._colorZone = colorZone;\n    }\n    getColorZones() {\n        return this._colorZone;\n    }\n}\nexport class OverviewZoneManager {\n    constructor(getVerticalOffsetForLine) {\n        this._getVerticalOffsetForLine = getVerticalOffsetForLine;\n        this._zones = [];\n        this._colorZonesInvalid = false;\n        this._lineHeight = 0;\n        this._domWidth = 0;\n        this._domHeight = 0;\n        this._outerHeight = 0;\n        this._pixelRatio = 1;\n        this._lastAssignedId = 0;\n        this._color2Id = Object.create(null);\n        this._id2Color = [];\n    }\n    getId2Color() {\n        return this._id2Color;\n    }\n    setZones(newZones) {\n        this._zones = newZones;\n        this._zones.sort(OverviewRulerZone.compare);\n    }\n    setLineHeight(lineHeight) {\n        if (this._lineHeight === lineHeight) {\n            return false;\n        }\n        this._lineHeight = lineHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    setPixelRatio(pixelRatio) {\n        this._pixelRatio = pixelRatio;\n        this._colorZonesInvalid = true;\n    }\n    getDOMWidth() {\n        return this._domWidth;\n    }\n    getCanvasWidth() {\n        return this._domWidth * this._pixelRatio;\n    }\n    setDOMWidth(width) {\n        if (this._domWidth === width) {\n            return false;\n        }\n        this._domWidth = width;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getDOMHeight() {\n        return this._domHeight;\n    }\n    getCanvasHeight() {\n        return this._domHeight * this._pixelRatio;\n    }\n    setDOMHeight(height) {\n        if (this._domHeight === height) {\n            return false;\n        }\n        this._domHeight = height;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getOuterHeight() {\n        return this._outerHeight;\n    }\n    setOuterHeight(outerHeight) {\n        if (this._outerHeight === outerHeight) {\n            return false;\n        }\n        this._outerHeight = outerHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    resolveColorZones() {\n        const colorZonesInvalid = this._colorZonesInvalid;\n        const lineHeight = Math.floor(this._lineHeight);\n        const totalHeight = Math.floor(this.getCanvasHeight());\n        const outerHeight = Math.floor(this._outerHeight);\n        const heightRatio = totalHeight / outerHeight;\n        const halfMinimumHeight = Math.floor(4 /* Constants.MINIMUM_HEIGHT */ * this._pixelRatio / 2);\n        const allColorZones = [];\n        for (let i = 0, len = this._zones.length; i < len; i++) {\n            const zone = this._zones[i];\n            if (!colorZonesInvalid) {\n                const colorZone = zone.getColorZones();\n                if (colorZone) {\n                    allColorZones.push(colorZone);\n                    continue;\n                }\n            }\n            const offset1 = this._getVerticalOffsetForLine(zone.startLineNumber);\n            const offset2 = (zone.heightInLines === 0\n                ? this._getVerticalOffsetForLine(zone.endLineNumber) + lineHeight\n                : offset1 + zone.heightInLines * lineHeight);\n            const y1 = Math.floor(heightRatio * offset1);\n            const y2 = Math.floor(heightRatio * offset2);\n            let ycenter = Math.floor((y1 + y2) / 2);\n            let halfHeight = (y2 - ycenter);\n            if (halfHeight < halfMinimumHeight) {\n                halfHeight = halfMinimumHeight;\n            }\n            if (ycenter - halfHeight < 0) {\n                ycenter = halfHeight;\n            }\n            if (ycenter + halfHeight > totalHeight) {\n                ycenter = totalHeight - halfHeight;\n            }\n            const color = zone.color;\n            let colorId = this._color2Id[color];\n            if (!colorId) {\n                colorId = (++this._lastAssignedId);\n                this._color2Id[color] = colorId;\n                this._id2Color[colorId] = color;\n            }\n            const colorZone = new ColorZone(ycenter - halfHeight, ycenter + halfHeight, colorId);\n            zone.setColorZone(colorZone);\n            allColorZones.push(colorZone);\n        }\n        this._colorZonesInvalid = false;\n        allColorZones.sort(ColorZone.compare);\n        return allColorZones;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorTheme } from '../editorTheme.js';\nexport class ViewContext {\n    constructor(configuration, theme, model) {\n        this.configuration = configuration;\n        this.theme = new EditorTheme(theme);\n        this.viewModel = model;\n        this.viewLayout = model.viewLayout;\n    }\n    addEventHandler(eventHandler) {\n        this.viewModel.addViewEventHandler(eventHandler);\n    }\n    removeEventHandler(eventHandler) {\n        this.viewModel.removeViewEventHandler(eventHandler);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { InlineDecoration, ViewModelDecoration } from '../viewModel.js';\nimport { filterValidationDecorations } from '../config/editorOptions.js';\nexport class ViewModelDecorations {\n    constructor(editorId, model, configuration, linesCollection, coordinatesConverter) {\n        this._cachedOnlyMinimapDecorations = null;\n        this.editorId = editorId;\n        this.model = model;\n        this.configuration = configuration;\n        this._linesCollection = linesCollection;\n        this._coordinatesConverter = coordinatesConverter;\n        this._decorationsCache = Object.create(null);\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    _clearCachedModelDecorationsResolver() {\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    dispose() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    reset() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onModelDecorationsChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onLineMappingChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    _getOrCreateViewModelDecoration(modelDecoration) {\n        const id = modelDecoration.id;\n        let r = this._decorationsCache[id];\n        if (!r) {\n            const modelRange = modelDecoration.range;\n            const options = modelDecoration.options;\n            let viewRange;\n            if (options.isWholeLine) {\n                const start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1), 0 /* PositionAffinity.Left */);\n                const end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)), 1 /* PositionAffinity.Right */);\n                viewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n            }\n            else {\n                // For backwards compatibility reasons, we want injected text before any decoration.\n                // Thus, move decorations to the right.\n                viewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange, 1 /* PositionAffinity.Right */);\n            }\n            r = new ViewModelDecoration(viewRange, options);\n            this._decorationsCache[id] = r;\n        }\n        return r;\n    }\n    getDecorationsViewportData(viewRange, onlyMinimapDecorations = false) {\n        let cacheIsValid = (this._cachedModelDecorationsResolver !== null);\n        cacheIsValid = cacheIsValid && (viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange));\n        cacheIsValid = cacheIsValid && (this._cachedOnlyMinimapDecorations === onlyMinimapDecorations);\n        if (!cacheIsValid) {\n            this._cachedModelDecorationsResolver = this._getDecorationsInRange(viewRange, onlyMinimapDecorations);\n            this._cachedModelDecorationsResolverViewRange = viewRange;\n            this._cachedOnlyMinimapDecorations = onlyMinimapDecorations;\n        }\n        return this._cachedModelDecorationsResolver;\n    }\n    getInlineDecorationsOnLine(lineNumber, onlyMinimapDecorations = false) {\n        const range = new Range(lineNumber, this._linesCollection.getViewLineMinColumn(lineNumber), lineNumber, this._linesCollection.getViewLineMaxColumn(lineNumber));\n        return this._getDecorationsInRange(range, onlyMinimapDecorations).inlineDecorations[0];\n    }\n    _getDecorationsInRange(viewRange, onlyMinimapDecorations) {\n        const modelDecorations = this._linesCollection.getDecorationsInRange(viewRange, this.editorId, filterValidationDecorations(this.configuration.options), onlyMinimapDecorations);\n        const startLineNumber = viewRange.startLineNumber;\n        const endLineNumber = viewRange.endLineNumber;\n        const decorationsInViewport = [];\n        let decorationsInViewportLen = 0;\n        const inlineDecorations = [];\n        for (let j = startLineNumber; j <= endLineNumber; j++) {\n            inlineDecorations[j - startLineNumber] = [];\n        }\n        for (let i = 0, len = modelDecorations.length; i < len; i++) {\n            const modelDecoration = modelDecorations[i];\n            const decorationOptions = modelDecoration.options;\n            if (!isModelDecorationVisible(this.model, modelDecoration)) {\n                continue;\n            }\n            const viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n            const viewRange = viewModelDecoration.range;\n            decorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n            if (decorationOptions.inlineClassName) {\n                const inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? 3 /* InlineDecorationType.RegularAffectingLetterSpacing */ : 0 /* InlineDecorationType.Regular */);\n                const intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n                const intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n                for (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n                    inlineDecorations[j - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.beforeContentClassName) {\n                if (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n                    const inlineDecoration = new InlineDecoration(new Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn), decorationOptions.beforeContentClassName, 1 /* InlineDecorationType.Before */);\n                    inlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.afterContentClassName) {\n                if (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n                    const inlineDecoration = new InlineDecoration(new Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn), decorationOptions.afterContentClassName, 2 /* InlineDecorationType.After */);\n                    inlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n        }\n        return {\n            decorations: decorationsInViewport,\n            inlineDecorations: inlineDecorations\n        };\n    }\n}\nexport function isModelDecorationVisible(model, decoration) {\n    if (decoration.options.hideInCommentTokens && isModelDecorationInComment(model, decoration)) {\n        return false;\n    }\n    if (decoration.options.hideInStringTokens && isModelDecorationInString(model, decoration)) {\n        return false;\n    }\n    return true;\n}\nexport function isModelDecorationInComment(model, decoration) {\n    return testTokensInRange(model, decoration.range, (tokenType) => tokenType === 1 /* StandardTokenType.Comment */);\n}\nexport function isModelDecorationInString(model, decoration) {\n    return testTokensInRange(model, decoration.range, (tokenType) => tokenType === 2 /* StandardTokenType.String */);\n}\n/**\n * Calls the callback for every token that intersects the range.\n * If the callback returns `false`, iteration stops and `false` is returned.\n * Otherwise, `true` is returned.\n */\nfunction testTokensInRange(model, range, callback) {\n    for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n        const lineTokens = model.tokenization.getLineTokens(lineNumber);\n        const isFirstLine = lineNumber === range.startLineNumber;\n        const isEndLine = lineNumber === range.endLineNumber;\n        let tokenIdx = isFirstLine ? lineTokens.findTokenIndexAtOffset(range.startColumn - 1) : 0;\n        while (tokenIdx < lineTokens.getCount()) {\n            if (isEndLine) {\n                const startOffset = lineTokens.getStartOffset(tokenIdx);\n                if (startOffset > range.endColumn - 1) {\n                    break;\n                }\n            }\n            const callbackResult = callback(lineTokens.getStandardTokenType(tokenIdx));\n            if (!callbackResult) {\n                return false;\n            }\n            tokenIdx++;\n        }\n    }\n    return true;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nclass PendingChanges {\n    constructor() {\n        this._hasPending = false;\n        this._inserts = [];\n        this._changes = [];\n        this._removes = [];\n    }\n    insert(x) {\n        this._hasPending = true;\n        this._inserts.push(x);\n    }\n    change(x) {\n        this._hasPending = true;\n        this._changes.push(x);\n    }\n    remove(x) {\n        this._hasPending = true;\n        this._removes.push(x);\n    }\n    mustCommit() {\n        return this._hasPending;\n    }\n    commit(linesLayout) {\n        if (!this._hasPending) {\n            return;\n        }\n        const inserts = this._inserts;\n        const changes = this._changes;\n        const removes = this._removes;\n        this._hasPending = false;\n        this._inserts = [];\n        this._changes = [];\n        this._removes = [];\n        linesLayout._commitPendingChanges(inserts, changes, removes);\n    }\n}\nexport class EditorWhitespace {\n    constructor(id, afterLineNumber, ordinal, height, minWidth) {\n        this.id = id;\n        this.afterLineNumber = afterLineNumber;\n        this.ordinal = ordinal;\n        this.height = height;\n        this.minWidth = minWidth;\n        this.prefixSum = 0;\n    }\n}\n/**\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\n *\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\n */\nclass LinesLayout {\n    constructor(lineCount, lineHeight, paddingTop, paddingBottom) {\n        this._instanceId = strings.singleLetterHash(++LinesLayout.INSTANCE_COUNT);\n        this._pendingChanges = new PendingChanges();\n        this._lastWhitespaceId = 0;\n        this._arr = [];\n        this._prefixSumValidIndex = -1;\n        this._minWidth = -1; /* marker for not being computed */\n        this._lineCount = lineCount;\n        this._lineHeight = lineHeight;\n        this._paddingTop = paddingTop;\n        this._paddingBottom = paddingBottom;\n    }\n    /**\n     * Find the insertion index for a new value inside a sorted array of values.\n     * If the value is already present in the sorted array, the insertion index will be after the already existing value.\n     */\n    static findInsertionIndex(arr, afterLineNumber, ordinal) {\n        let low = 0;\n        let high = arr.length;\n        while (low < high) {\n            const mid = ((low + high) >>> 1);\n            if (afterLineNumber === arr[mid].afterLineNumber) {\n                if (ordinal < arr[mid].ordinal) {\n                    high = mid;\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            else if (afterLineNumber < arr[mid].afterLineNumber) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    /**\n     * Change the height of a line in pixels.\n     */\n    setLineHeight(lineHeight) {\n        this._checkPendingChanges();\n        this._lineHeight = lineHeight;\n    }\n    /**\n     * Changes the padding used to calculate vertical offsets.\n     */\n    setPadding(paddingTop, paddingBottom) {\n        this._paddingTop = paddingTop;\n        this._paddingBottom = paddingBottom;\n    }\n    /**\n     * Set the number of lines.\n     *\n     * @param lineCount New number of lines.\n     */\n    onFlushed(lineCount) {\n        this._checkPendingChanges();\n        this._lineCount = lineCount;\n    }\n    changeWhitespace(callback) {\n        let hadAChange = false;\n        try {\n            const accessor = {\n                insertWhitespace: (afterLineNumber, ordinal, heightInPx, minWidth) => {\n                    hadAChange = true;\n                    afterLineNumber = afterLineNumber | 0;\n                    ordinal = ordinal | 0;\n                    heightInPx = heightInPx | 0;\n                    minWidth = minWidth | 0;\n                    const id = this._instanceId + (++this._lastWhitespaceId);\n                    this._pendingChanges.insert(new EditorWhitespace(id, afterLineNumber, ordinal, heightInPx, minWidth));\n                    return id;\n                },\n                changeOneWhitespace: (id, newAfterLineNumber, newHeight) => {\n                    hadAChange = true;\n                    newAfterLineNumber = newAfterLineNumber | 0;\n                    newHeight = newHeight | 0;\n                    this._pendingChanges.change({ id, newAfterLineNumber, newHeight });\n                },\n                removeWhitespace: (id) => {\n                    hadAChange = true;\n                    this._pendingChanges.remove({ id });\n                }\n            };\n            callback(accessor);\n        }\n        finally {\n            this._pendingChanges.commit(this);\n        }\n        return hadAChange;\n    }\n    _commitPendingChanges(inserts, changes, removes) {\n        if (inserts.length > 0 || removes.length > 0) {\n            this._minWidth = -1; /* marker for not being computed */\n        }\n        if (inserts.length + changes.length + removes.length <= 1) {\n            // when only one thing happened, handle it \"delicately\"\n            for (const insert of inserts) {\n                this._insertWhitespace(insert);\n            }\n            for (const change of changes) {\n                this._changeOneWhitespace(change.id, change.newAfterLineNumber, change.newHeight);\n            }\n            for (const remove of removes) {\n                const index = this._findWhitespaceIndex(remove.id);\n                if (index === -1) {\n                    continue;\n                }\n                this._removeWhitespace(index);\n            }\n            return;\n        }\n        // simply rebuild the entire datastructure\n        const toRemove = new Set();\n        for (const remove of removes) {\n            toRemove.add(remove.id);\n        }\n        const toChange = new Map();\n        for (const change of changes) {\n            toChange.set(change.id, change);\n        }\n        const applyRemoveAndChange = (whitespaces) => {\n            const result = [];\n            for (const whitespace of whitespaces) {\n                if (toRemove.has(whitespace.id)) {\n                    continue;\n                }\n                if (toChange.has(whitespace.id)) {\n                    const change = toChange.get(whitespace.id);\n                    whitespace.afterLineNumber = change.newAfterLineNumber;\n                    whitespace.height = change.newHeight;\n                }\n                result.push(whitespace);\n            }\n            return result;\n        };\n        const result = applyRemoveAndChange(this._arr).concat(applyRemoveAndChange(inserts));\n        result.sort((a, b) => {\n            if (a.afterLineNumber === b.afterLineNumber) {\n                return a.ordinal - b.ordinal;\n            }\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n        this._arr = result;\n        this._prefixSumValidIndex = -1;\n    }\n    _checkPendingChanges() {\n        if (this._pendingChanges.mustCommit()) {\n            this._pendingChanges.commit(this);\n        }\n    }\n    _insertWhitespace(whitespace) {\n        const insertIndex = LinesLayout.findInsertionIndex(this._arr, whitespace.afterLineNumber, whitespace.ordinal);\n        this._arr.splice(insertIndex, 0, whitespace);\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, insertIndex - 1);\n    }\n    _findWhitespaceIndex(id) {\n        const arr = this._arr;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            if (arr[i].id === id) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    _changeOneWhitespace(id, newAfterLineNumber, newHeight) {\n        const index = this._findWhitespaceIndex(id);\n        if (index === -1) {\n            return;\n        }\n        if (this._arr[index].height !== newHeight) {\n            this._arr[index].height = newHeight;\n            this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, index - 1);\n        }\n        if (this._arr[index].afterLineNumber !== newAfterLineNumber) {\n            // `afterLineNumber` changed for this whitespace\n            // Record old whitespace\n            const whitespace = this._arr[index];\n            // Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace\n            this._removeWhitespace(index);\n            whitespace.afterLineNumber = newAfterLineNumber;\n            // And add it again\n            this._insertWhitespace(whitespace);\n        }\n    }\n    _removeWhitespace(removeIndex) {\n        this._arr.splice(removeIndex, 1);\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, removeIndex - 1);\n    }\n    /**\n     * Notify the layouter that lines have been deleted (a continuous zone of lines).\n     *\n     * @param fromLineNumber The line number at which the deletion started, inclusive\n     * @param toLineNumber The line number at which the deletion ended, inclusive\n     */\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._checkPendingChanges();\n        fromLineNumber = fromLineNumber | 0;\n        toLineNumber = toLineNumber | 0;\n        this._lineCount -= (toLineNumber - fromLineNumber + 1);\n        for (let i = 0, len = this._arr.length; i < len; i++) {\n            const afterLineNumber = this._arr[i].afterLineNumber;\n            if (fromLineNumber <= afterLineNumber && afterLineNumber <= toLineNumber) {\n                // The line this whitespace was after has been deleted\n                //  => move whitespace to before first deleted line\n                this._arr[i].afterLineNumber = fromLineNumber - 1;\n            }\n            else if (afterLineNumber > toLineNumber) {\n                // The line this whitespace was after has been moved up\n                //  => move whitespace up\n                this._arr[i].afterLineNumber -= (toLineNumber - fromLineNumber + 1);\n            }\n        }\n    }\n    /**\n     * Notify the layouter that lines have been inserted (a continuous zone of lines).\n     *\n     * @param fromLineNumber The line number at which the insertion started, inclusive\n     * @param toLineNumber The line number at which the insertion ended, inclusive.\n     */\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._checkPendingChanges();\n        fromLineNumber = fromLineNumber | 0;\n        toLineNumber = toLineNumber | 0;\n        this._lineCount += (toLineNumber - fromLineNumber + 1);\n        for (let i = 0, len = this._arr.length; i < len; i++) {\n            const afterLineNumber = this._arr[i].afterLineNumber;\n            if (fromLineNumber <= afterLineNumber) {\n                this._arr[i].afterLineNumber += (toLineNumber - fromLineNumber + 1);\n            }\n        }\n    }\n    /**\n     * Get the sum of all the whitespaces.\n     */\n    getWhitespacesTotalHeight() {\n        this._checkPendingChanges();\n        if (this._arr.length === 0) {\n            return 0;\n        }\n        return this.getWhitespacesAccumulatedHeight(this._arr.length - 1);\n    }\n    /**\n     * Return the sum of the heights of the whitespaces at [0..index].\n     * This includes the whitespace at `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.\n     */\n    getWhitespacesAccumulatedHeight(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        let startIndex = Math.max(0, this._prefixSumValidIndex + 1);\n        if (startIndex === 0) {\n            this._arr[0].prefixSum = this._arr[0].height;\n            startIndex++;\n        }\n        for (let i = startIndex; i <= index; i++) {\n            this._arr[i].prefixSum = this._arr[i - 1].prefixSum + this._arr[i].height;\n        }\n        this._prefixSumValidIndex = Math.max(this._prefixSumValidIndex, index);\n        return this._arr[index].prefixSum;\n    }\n    /**\n     * Get the sum of heights for all objects.\n     *\n     * @return The sum of heights for all objects.\n     */\n    getLinesTotalHeight() {\n        this._checkPendingChanges();\n        const linesHeight = this._lineHeight * this._lineCount;\n        const whitespacesHeight = this.getWhitespacesTotalHeight();\n        return linesHeight + whitespacesHeight + this._paddingTop + this._paddingBottom;\n    }\n    /**\n     * Returns the accumulated height of whitespaces before the given line number.\n     *\n     * @param lineNumber The line number\n     */\n    getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        const lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n        if (lastWhitespaceBeforeLineNumber === -1) {\n            return 0;\n        }\n        return this.getWhitespacesAccumulatedHeight(lastWhitespaceBeforeLineNumber);\n    }\n    _findLastWhitespaceBeforeLineNumber(lineNumber) {\n        lineNumber = lineNumber | 0;\n        // Find the whitespace before line number\n        const arr = this._arr;\n        let low = 0;\n        let high = arr.length - 1;\n        while (low <= high) {\n            const delta = (high - low) | 0;\n            const halfDelta = (delta / 2) | 0;\n            const mid = (low + halfDelta) | 0;\n            if (arr[mid].afterLineNumber < lineNumber) {\n                if (mid + 1 >= arr.length || arr[mid + 1].afterLineNumber >= lineNumber) {\n                    return mid;\n                }\n                else {\n                    low = (mid + 1) | 0;\n                }\n            }\n            else {\n                high = (mid - 1) | 0;\n            }\n        }\n        return -1;\n    }\n    _findFirstWhitespaceAfterLineNumber(lineNumber) {\n        lineNumber = lineNumber | 0;\n        const lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n        const firstWhitespaceAfterLineNumber = lastWhitespaceBeforeLineNumber + 1;\n        if (firstWhitespaceAfterLineNumber < this._arr.length) {\n            return firstWhitespaceAfterLineNumber;\n        }\n        return -1;\n    }\n    /**\n     * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.\n     * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.\n     */\n    getFirstWhitespaceIndexAfterLineNumber(lineNumber) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        return this._findFirstWhitespaceAfterLineNumber(lineNumber);\n    }\n    /**\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n     *\n     * @param lineNumber The line number\n     * @return The sum of heights for all objects above `lineNumber`.\n     */\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        let previousLinesHeight;\n        if (lineNumber > 1) {\n            previousLinesHeight = this._lineHeight * (lineNumber - 1);\n        }\n        else {\n            previousLinesHeight = 0;\n        }\n        const previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber - (includeViewZones ? 1 : 0));\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    /**\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n     *\n     * @param lineNumber The line number\n     * @return The sum of heights for all objects above `lineNumber`.\n     */\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        const previousLinesHeight = this._lineHeight * lineNumber;\n        const previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber + (includeViewZones ? 1 : 0));\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    /**\n     * The maximum min width for all whitespaces.\n     */\n    getWhitespaceMinWidth() {\n        this._checkPendingChanges();\n        if (this._minWidth === -1) {\n            let minWidth = 0;\n            for (let i = 0, len = this._arr.length; i < len; i++) {\n                minWidth = Math.max(minWidth, this._arr[i].minWidth);\n            }\n            this._minWidth = minWidth;\n        }\n        return this._minWidth;\n    }\n    /**\n     * Check if `verticalOffset` is below all lines.\n     */\n    isAfterLines(verticalOffset) {\n        this._checkPendingChanges();\n        const totalHeight = this.getLinesTotalHeight();\n        return verticalOffset > totalHeight;\n    }\n    isInTopPadding(verticalOffset) {\n        if (this._paddingTop === 0) {\n            return false;\n        }\n        this._checkPendingChanges();\n        return (verticalOffset < this._paddingTop);\n    }\n    isInBottomPadding(verticalOffset) {\n        if (this._paddingBottom === 0) {\n            return false;\n        }\n        this._checkPendingChanges();\n        const totalHeight = this.getLinesTotalHeight();\n        return (verticalOffset >= totalHeight - this._paddingBottom);\n    }\n    /**\n     * Find the first line number that is at or after vertical offset `verticalOffset`.\n     * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\n     * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\n     *\n     * @param verticalOffset The vertical offset to search at.\n     * @return The line number at or after vertical offset `verticalOffset`.\n     */\n    getLineNumberAtOrAfterVerticalOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        if (verticalOffset < 0) {\n            return 1;\n        }\n        const linesCount = this._lineCount | 0;\n        const lineHeight = this._lineHeight;\n        let minLineNumber = 1;\n        let maxLineNumber = linesCount;\n        while (minLineNumber < maxLineNumber) {\n            const midLineNumber = ((minLineNumber + maxLineNumber) / 2) | 0;\n            const midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber) | 0;\n            if (verticalOffset >= midLineNumberVerticalOffset + lineHeight) {\n                // vertical offset is after mid line number\n                minLineNumber = midLineNumber + 1;\n            }\n            else if (verticalOffset >= midLineNumberVerticalOffset) {\n                // Hit\n                return midLineNumber;\n            }\n            else {\n                // vertical offset is before mid line number, but mid line number could still be what we're searching for\n                maxLineNumber = midLineNumber;\n            }\n        }\n        if (minLineNumber > linesCount) {\n            return linesCount;\n        }\n        return minLineNumber;\n    }\n    /**\n     * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\n     *\n     * @param verticalOffset1 The beginning of the viewport.\n     * @param verticalOffset2 The end of the viewport.\n     * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\n     */\n    getLinesViewportData(verticalOffset1, verticalOffset2) {\n        this._checkPendingChanges();\n        verticalOffset1 = verticalOffset1 | 0;\n        verticalOffset2 = verticalOffset2 | 0;\n        const lineHeight = this._lineHeight;\n        // Find first line number\n        // We don't live in a perfect world, so the line number might start before or after verticalOffset1\n        const startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1) | 0;\n        const startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber) | 0;\n        let endLineNumber = this._lineCount | 0;\n        // Also keep track of what whitespace we've got\n        let whitespaceIndex = this.getFirstWhitespaceIndexAfterLineNumber(startLineNumber) | 0;\n        const whitespaceCount = this.getWhitespacesCount() | 0;\n        let currentWhitespaceHeight;\n        let currentWhitespaceAfterLineNumber;\n        if (whitespaceIndex === -1) {\n            whitespaceIndex = whitespaceCount;\n            currentWhitespaceAfterLineNumber = endLineNumber + 1;\n            currentWhitespaceHeight = 0;\n        }\n        else {\n            currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n            currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n        }\n        let currentVerticalOffset = startLineNumberVerticalOffset;\n        let currentLineRelativeOffset = currentVerticalOffset;\n        // IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\n        const STEP_SIZE = 500000;\n        let bigNumbersDelta = 0;\n        if (startLineNumberVerticalOffset >= STEP_SIZE) {\n            // Compute a delta that guarantees that lines are positioned at `lineHeight` increments\n            bigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\n            bigNumbersDelta = Math.floor(bigNumbersDelta / lineHeight) * lineHeight;\n            currentLineRelativeOffset -= bigNumbersDelta;\n        }\n        const linesOffsets = [];\n        const verticalCenter = verticalOffset1 + (verticalOffset2 - verticalOffset1) / 2;\n        let centeredLineNumber = -1;\n        // Figure out how far the lines go\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            if (centeredLineNumber === -1) {\n                const currentLineTop = currentVerticalOffset;\n                const currentLineBottom = currentVerticalOffset + lineHeight;\n                if ((currentLineTop <= verticalCenter && verticalCenter < currentLineBottom) || currentLineTop > verticalCenter) {\n                    centeredLineNumber = lineNumber;\n                }\n            }\n            // Count current line height in the vertical offsets\n            currentVerticalOffset += lineHeight;\n            linesOffsets[lineNumber - startLineNumber] = currentLineRelativeOffset;\n            // Next line starts immediately after this one\n            currentLineRelativeOffset += lineHeight;\n            while (currentWhitespaceAfterLineNumber === lineNumber) {\n                // Push down next line with the height of the current whitespace\n                currentLineRelativeOffset += currentWhitespaceHeight;\n                // Count current whitespace in the vertical offsets\n                currentVerticalOffset += currentWhitespaceHeight;\n                whitespaceIndex++;\n                if (whitespaceIndex >= whitespaceCount) {\n                    currentWhitespaceAfterLineNumber = endLineNumber + 1;\n                }\n                else {\n                    currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n                    currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n                }\n            }\n            if (currentVerticalOffset >= verticalOffset2) {\n                // We have covered the entire viewport area, time to stop\n                endLineNumber = lineNumber;\n                break;\n            }\n        }\n        if (centeredLineNumber === -1) {\n            centeredLineNumber = endLineNumber;\n        }\n        const endLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(endLineNumber) | 0;\n        let completelyVisibleStartLineNumber = startLineNumber;\n        let completelyVisibleEndLineNumber = endLineNumber;\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n            if (startLineNumberVerticalOffset < verticalOffset1) {\n                completelyVisibleStartLineNumber++;\n            }\n        }\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n            if (endLineNumberVerticalOffset + lineHeight > verticalOffset2) {\n                completelyVisibleEndLineNumber--;\n            }\n        }\n        return {\n            bigNumbersDelta: bigNumbersDelta,\n            startLineNumber: startLineNumber,\n            endLineNumber: endLineNumber,\n            relativeVerticalOffset: linesOffsets,\n            centeredLineNumber: centeredLineNumber,\n            completelyVisibleStartLineNumber: completelyVisibleStartLineNumber,\n            completelyVisibleEndLineNumber: completelyVisibleEndLineNumber\n        };\n    }\n    getVerticalOffsetForWhitespaceIndex(whitespaceIndex) {\n        this._checkPendingChanges();\n        whitespaceIndex = whitespaceIndex | 0;\n        const afterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\n        let previousLinesHeight;\n        if (afterLineNumber >= 1) {\n            previousLinesHeight = this._lineHeight * afterLineNumber;\n        }\n        else {\n            previousLinesHeight = 0;\n        }\n        let previousWhitespacesHeight;\n        if (whitespaceIndex > 0) {\n            previousWhitespacesHeight = this.getWhitespacesAccumulatedHeight(whitespaceIndex - 1);\n        }\n        else {\n            previousWhitespacesHeight = 0;\n        }\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        let minWhitespaceIndex = 0;\n        let maxWhitespaceIndex = this.getWhitespacesCount() - 1;\n        if (maxWhitespaceIndex < 0) {\n            return -1;\n        }\n        // Special case: nothing to be found\n        const maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex);\n        const maxWhitespaceHeight = this.getHeightForWhitespaceIndex(maxWhitespaceIndex);\n        if (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\n            return -1;\n        }\n        while (minWhitespaceIndex < maxWhitespaceIndex) {\n            const midWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\n            const midWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex);\n            const midWhitespaceHeight = this.getHeightForWhitespaceIndex(midWhitespaceIndex);\n            if (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\n                // vertical offset is after whitespace\n                minWhitespaceIndex = midWhitespaceIndex + 1;\n            }\n            else if (verticalOffset >= midWhitespaceVerticalOffset) {\n                // Hit\n                return midWhitespaceIndex;\n            }\n            else {\n                // vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\n                maxWhitespaceIndex = midWhitespaceIndex;\n            }\n        }\n        return minWhitespaceIndex;\n    }\n    /**\n     * Get exactly the whitespace that is layouted at `verticalOffset`.\n     *\n     * @param verticalOffset The vertical offset.\n     * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\n     */\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        const candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);\n        if (candidateIndex < 0) {\n            return null;\n        }\n        if (candidateIndex >= this.getWhitespacesCount()) {\n            return null;\n        }\n        const candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex);\n        if (candidateTop > verticalOffset) {\n            return null;\n        }\n        const candidateHeight = this.getHeightForWhitespaceIndex(candidateIndex);\n        const candidateId = this.getIdForWhitespaceIndex(candidateIndex);\n        const candidateAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(candidateIndex);\n        return {\n            id: candidateId,\n            afterLineNumber: candidateAfterLineNumber,\n            verticalOffset: candidateTop,\n            height: candidateHeight\n        };\n    }\n    /**\n     * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\n     *\n     * @param verticalOffset1 The beginning of the viewport.\n     * @param verticalOffset2 The end of the viewport.\n     * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\n     */\n    getWhitespaceViewportData(verticalOffset1, verticalOffset2) {\n        this._checkPendingChanges();\n        verticalOffset1 = verticalOffset1 | 0;\n        verticalOffset2 = verticalOffset2 | 0;\n        const startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1);\n        const endIndex = this.getWhitespacesCount() - 1;\n        if (startIndex < 0) {\n            return [];\n        }\n        const result = [];\n        for (let i = startIndex; i <= endIndex; i++) {\n            const top = this.getVerticalOffsetForWhitespaceIndex(i);\n            const height = this.getHeightForWhitespaceIndex(i);\n            if (top >= verticalOffset2) {\n                break;\n            }\n            result.push({\n                id: this.getIdForWhitespaceIndex(i),\n                afterLineNumber: this.getAfterLineNumberForWhitespaceIndex(i),\n                verticalOffset: top,\n                height: height\n            });\n        }\n        return result;\n    }\n    /**\n     * Get all whitespaces.\n     */\n    getWhitespaces() {\n        this._checkPendingChanges();\n        return this._arr.slice(0);\n    }\n    /**\n     * The number of whitespaces.\n     */\n    getWhitespacesCount() {\n        this._checkPendingChanges();\n        return this._arr.length;\n    }\n    /**\n     * Get the `id` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `id` of whitespace at `index`.\n     */\n    getIdForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].id;\n    }\n    /**\n     * Get the `afterLineNumber` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `afterLineNumber` of whitespace at `index`.\n     */\n    getAfterLineNumberForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].afterLineNumber;\n    }\n    /**\n     * Get the `height` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `height` of whitespace at `index`.\n     */\n    getHeightForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].height;\n    }\n}\nLinesLayout.INSTANCE_COUNT = 0;\nexport { LinesLayout };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModelEventDispatcher.js';\nconst SMOOTH_SCROLLING_TIME = 125;\nclass EditorScrollDimensions {\n    constructor(width, contentWidth, height, contentHeight) {\n        width = width | 0;\n        contentWidth = contentWidth | 0;\n        height = height | 0;\n        contentHeight = contentHeight | 0;\n        if (width < 0) {\n            width = 0;\n        }\n        if (contentWidth < 0) {\n            contentWidth = 0;\n        }\n        if (height < 0) {\n            height = 0;\n        }\n        if (contentHeight < 0) {\n            contentHeight = 0;\n        }\n        this.width = width;\n        this.contentWidth = contentWidth;\n        this.scrollWidth = Math.max(width, contentWidth);\n        this.height = height;\n        this.contentHeight = contentHeight;\n        this.scrollHeight = Math.max(height, contentHeight);\n    }\n    equals(other) {\n        return (this.width === other.width\n            && this.contentWidth === other.contentWidth\n            && this.height === other.height\n            && this.contentHeight === other.contentHeight);\n    }\n}\nclass EditorScrollable extends Disposable {\n    constructor(smoothScrollDuration, scheduleAtNextAnimationFrame) {\n        super();\n        this._onDidContentSizeChange = this._register(new Emitter());\n        this.onDidContentSizeChange = this._onDidContentSizeChange.event;\n        this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n        this._scrollable = this._register(new Scrollable({\n            forceIntegerValues: true,\n            smoothScrollDuration,\n            scheduleAtNextAnimationFrame\n        }));\n        this.onDidScroll = this._scrollable.onScroll;\n    }\n    getScrollable() {\n        return this._scrollable;\n    }\n    setSmoothScrollDuration(smoothScrollDuration) {\n        this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    getScrollDimensions() {\n        return this._dimensions;\n    }\n    setScrollDimensions(dimensions) {\n        if (this._dimensions.equals(dimensions)) {\n            return;\n        }\n        const oldDimensions = this._dimensions;\n        this._dimensions = dimensions;\n        this._scrollable.setScrollDimensions({\n            width: dimensions.width,\n            scrollWidth: dimensions.scrollWidth,\n            height: dimensions.height,\n            scrollHeight: dimensions.scrollHeight\n        }, true);\n        const contentWidthChanged = (oldDimensions.contentWidth !== dimensions.contentWidth);\n        const contentHeightChanged = (oldDimensions.contentHeight !== dimensions.contentHeight);\n        if (contentWidthChanged || contentHeightChanged) {\n            this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\n        }\n    }\n    getFutureScrollPosition() {\n        return this._scrollable.getFutureScrollPosition();\n    }\n    getCurrentScrollPosition() {\n        return this._scrollable.getCurrentScrollPosition();\n    }\n    setScrollPositionNow(update) {\n        this._scrollable.setScrollPositionNow(update);\n    }\n    setScrollPositionSmooth(update) {\n        this._scrollable.setScrollPositionSmooth(update);\n    }\n}\nexport class ViewLayout extends Disposable {\n    constructor(configuration, lineCount, scheduleAtNextAnimationFrame) {\n        super();\n        this._configuration = configuration;\n        const options = this._configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        const padding = options.get(80 /* EditorOption.padding */);\n        this._linesLayout = new LinesLayout(lineCount, options.get(63 /* EditorOption.lineHeight */), padding.top, padding.bottom);\n        this._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n        this._configureSmoothScrollDuration();\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\n        this.onDidScroll = this._scrollable.onDidScroll;\n        this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\n        this._updateHeight();\n    }\n    dispose() {\n        super.dispose();\n    }\n    getScrollable() {\n        return this._scrollable.getScrollable();\n    }\n    onHeightMaybeChanged() {\n        this._updateHeight();\n    }\n    _configureSmoothScrollDuration() {\n        this._scrollable.setSmoothScrollDuration(this._configuration.options.get(108 /* EditorOption.smoothScrolling */) ? SMOOTH_SCROLLING_TIME : 0);\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._configuration.options;\n        if (e.hasChanged(63 /* EditorOption.lineHeight */)) {\n            this._linesLayout.setLineHeight(options.get(63 /* EditorOption.lineHeight */));\n        }\n        if (e.hasChanged(80 /* EditorOption.padding */)) {\n            const padding = options.get(80 /* EditorOption.padding */);\n            this._linesLayout.setPadding(padding.top, padding.bottom);\n        }\n        if (e.hasChanged(138 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n            const width = layoutInfo.contentWidth;\n            const height = layoutInfo.height;\n            const scrollDimensions = this._scrollable.getScrollDimensions();\n            const contentWidth = scrollDimensions.contentWidth;\n            this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n        }\n        else {\n            this._updateHeight();\n        }\n        if (e.hasChanged(108 /* EditorOption.smoothScrolling */)) {\n            this._configureSmoothScrollDuration();\n        }\n    }\n    onFlushed(lineCount) {\n        this._linesLayout.onFlushed(lineCount);\n    }\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n    }\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n    }\n    // ---- end view event handlers\n    _getHorizontalScrollbarHeight(width, scrollWidth) {\n        const options = this._configuration.options;\n        const scrollbar = options.get(97 /* EditorOption.scrollbar */);\n        if (scrollbar.horizontal === 2 /* ScrollbarVisibility.Hidden */) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        if (width >= scrollWidth) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        return scrollbar.horizontalScrollbarSize;\n    }\n    _getContentHeight(width, height, contentWidth) {\n        const options = this._configuration.options;\n        let result = this._linesLayout.getLinesTotalHeight();\n        if (options.get(99 /* EditorOption.scrollBeyondLastLine */)) {\n            result += Math.max(0, height - options.get(63 /* EditorOption.lineHeight */) - options.get(80 /* EditorOption.padding */).bottom);\n        }\n        else {\n            result += this._getHorizontalScrollbarHeight(width, contentWidth);\n        }\n        return result;\n    }\n    _updateHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const width = scrollDimensions.width;\n        const height = scrollDimensions.height;\n        const contentWidth = scrollDimensions.contentWidth;\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n    }\n    // ---- Layouting logic\n    getCurrentViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    getFutureViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    _computeContentWidth(maxLineWidth) {\n        const options = this._configuration.options;\n        const wrappingInfo = options.get(139 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        if (wrappingInfo.isViewportWrapping) {\n            const minimap = options.get(69 /* EditorOption.minimap */);\n            if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n                // This is a case where viewport wrapping is on, but the line extends above the viewport\n                if (minimap.enabled && minimap.side === 'right') {\n                    // We need to accomodate the scrollbar width\n                    return maxLineWidth + layoutInfo.verticalScrollbarWidth;\n                }\n            }\n            return maxLineWidth;\n        }\n        else {\n            const extraHorizontalSpace = options.get(98 /* EditorOption.scrollBeyondLastColumn */) * fontInfo.typicalHalfwidthCharacterWidth;\n            const whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n            return Math.max(maxLineWidth + extraHorizontalSpace + layoutInfo.verticalScrollbarWidth, whitespaceMinWidth);\n        }\n    }\n    setMaxLineWidth(maxLineWidth) {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        // const newScrollWidth = ;\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(maxLineWidth), scrollDimensions.height, scrollDimensions.contentHeight));\n        // The height might depend on the fact that there is a horizontal scrollbar or not\n        this._updateHeight();\n    }\n    // ---- view state\n    saveState() {\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        const scrollTop = currentScrollPosition.scrollTop;\n        const firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n        const whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n        return {\n            scrollTop: scrollTop,\n            scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n            scrollLeft: currentScrollPosition.scrollLeft\n        };\n    }\n    // ----\n    changeWhitespace(callback) {\n        const hadAChange = this._linesLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this.onHeightMaybeChanged();\n        }\n        return hadAChange;\n    }\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber, includeViewZones);\n    }\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones);\n    }\n    isAfterLines(verticalOffset) {\n        return this._linesLayout.isAfterLines(verticalOffset);\n    }\n    isInTopPadding(verticalOffset) {\n        return this._linesLayout.isInTopPadding(verticalOffset);\n    }\n    isInBottomPadding(verticalOffset) {\n        return this._linesLayout.isInBottomPadding(verticalOffset);\n    }\n    getLineNumberAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n    }\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n    }\n    getLinesViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getLinesViewportDataAtScrollTop(scrollTop) {\n        // do some minimal validations on scrollTop\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n            scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n        }\n        if (scrollTop < 0) {\n            scrollTop = 0;\n        }\n        return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n    }\n    getWhitespaceViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getWhitespaces() {\n        return this._linesLayout.getWhitespaces();\n    }\n    // ----\n    getContentWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentWidth;\n    }\n    getScrollWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollWidth;\n    }\n    getContentHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentHeight;\n    }\n    getScrollHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollHeight;\n    }\n    getCurrentScrollLeft() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollLeft;\n    }\n    getCurrentScrollTop() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollTop;\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    setScrollPosition(position, type) {\n        if (type === 1 /* ScrollType.Immediate */) {\n            this._scrollable.setScrollPositionNow(position);\n        }\n        else {\n            this._scrollable.setScrollPositionSmooth(position);\n        }\n    }\n    deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        this._scrollable.setScrollPositionNow({\n            scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n            scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n        });\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { Position } from '../core/position.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { SingleLineInlineDecoration, ViewLineData } from '../viewModel.js';\nexport function createModelLineProjection(lineBreakData, isVisible) {\n    if (lineBreakData === null) {\n        // No mapping needed\n        if (isVisible) {\n            return IdentityModelLineProjection.INSTANCE;\n        }\n        return HiddenModelLineProjection.INSTANCE;\n    }\n    else {\n        return new ModelLineProjection(lineBreakData, isVisible);\n    }\n}\n/**\n * This projection is used to\n * * wrap model lines\n * * inject text\n */\nclass ModelLineProjection {\n    constructor(lineBreakData, isVisible) {\n        this._projectionData = lineBreakData;\n        this._isVisible = isVisible;\n    }\n    isVisible() {\n        return this._isVisible;\n    }\n    setVisible(isVisible) {\n        this._isVisible = isVisible;\n        return this;\n    }\n    getProjectionData() {\n        return this._projectionData;\n    }\n    getViewLineCount() {\n        if (!this._isVisible) {\n            return 0;\n        }\n        return this._projectionData.getOutputLineCount();\n    }\n    getViewLineContent(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        const startOffsetInInputWithInjections = outputLineIndex > 0 ? this._projectionData.breakOffsets[outputLineIndex - 1] : 0;\n        const endOffsetInInputWithInjections = this._projectionData.breakOffsets[outputLineIndex];\n        let r;\n        if (this._projectionData.injectionOffsets !== null) {\n            const injectedTexts = this._projectionData.injectionOffsets.map((offset, idx) => new LineInjectedText(0, 0, offset + 1, this._projectionData.injectionOptions[idx], 0));\n            const lineWithInjections = LineInjectedText.applyInjectedText(model.getLineContent(modelLineNumber), injectedTexts);\n            r = lineWithInjections.substring(startOffsetInInputWithInjections, endOffsetInInputWithInjections);\n        }\n        else {\n            r = model.getValueInRange({\n                startLineNumber: modelLineNumber,\n                startColumn: startOffsetInInputWithInjections + 1,\n                endLineNumber: modelLineNumber,\n                endColumn: endOffsetInInputWithInjections + 1\n            });\n        }\n        if (outputLineIndex > 0) {\n            r = spaces(this._projectionData.wrappedTextIndentLength) + r;\n        }\n        return r;\n    }\n    getViewLineLength(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getLineLength(outputLineIndex);\n    }\n    getViewLineMinColumn(_model, _modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n    }\n    getViewLineMaxColumn(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getMaxOutputOffset(outputLineIndex) + 1;\n    }\n    /**\n     * Try using {@link getViewLinesData} instead.\n    */\n    getViewLineData(model, modelLineNumber, outputLineIndex) {\n        const arr = new Array();\n        this.getViewLinesData(model, modelLineNumber, outputLineIndex, 1, 0, [true], arr);\n        return arr[0];\n    }\n    getViewLinesData(model, modelLineNumber, outputLineIdx, lineCount, globalStartIndex, needed, result) {\n        this._assertVisible();\n        const lineBreakData = this._projectionData;\n        const injectionOffsets = lineBreakData.injectionOffsets;\n        const injectionOptions = lineBreakData.injectionOptions;\n        let inlineDecorationsPerOutputLine = null;\n        if (injectionOffsets) {\n            inlineDecorationsPerOutputLine = [];\n            let totalInjectedTextLengthBefore = 0;\n            let currentInjectedOffset = 0;\n            for (let outputLineIndex = 0; outputLineIndex < lineBreakData.getOutputLineCount(); outputLineIndex++) {\n                const inlineDecorations = new Array();\n                inlineDecorationsPerOutputLine[outputLineIndex] = inlineDecorations;\n                const lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n                const lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n                while (currentInjectedOffset < injectionOffsets.length) {\n                    const length = injectionOptions[currentInjectedOffset].content.length;\n                    const injectedTextStartOffsetInInputWithInjections = injectionOffsets[currentInjectedOffset] + totalInjectedTextLengthBefore;\n                    const injectedTextEndOffsetInInputWithInjections = injectedTextStartOffsetInInputWithInjections + length;\n                    if (injectedTextStartOffsetInInputWithInjections > lineEndOffsetInInputWithInjections) {\n                        // Injected text only starts in later wrapped lines.\n                        break;\n                    }\n                    if (lineStartOffsetInInputWithInjections < injectedTextEndOffsetInInputWithInjections) {\n                        // Injected text ends after or in this line (but also starts in or before this line).\n                        const options = injectionOptions[currentInjectedOffset];\n                        if (options.inlineClassName) {\n                            const offset = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n                            const start = offset + Math.max(injectedTextStartOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, 0);\n                            const end = offset + Math.min(injectedTextEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections);\n                            if (start !== end) {\n                                inlineDecorations.push(new SingleLineInlineDecoration(start, end, options.inlineClassName, options.inlineClassNameAffectsLetterSpacing));\n                            }\n                        }\n                    }\n                    if (injectedTextEndOffsetInInputWithInjections <= lineEndOffsetInInputWithInjections) {\n                        totalInjectedTextLengthBefore += length;\n                        currentInjectedOffset++;\n                    }\n                    else {\n                        // injected text breaks into next line, process it again\n                        break;\n                    }\n                }\n            }\n        }\n        let lineWithInjections;\n        if (injectionOffsets) {\n            lineWithInjections = model.tokenization.getLineTokens(modelLineNumber).withInserted(injectionOffsets.map((offset, idx) => ({\n                offset,\n                text: injectionOptions[idx].content,\n                tokenMetadata: LineTokens.defaultTokenMetadata\n            })));\n        }\n        else {\n            lineWithInjections = model.tokenization.getLineTokens(modelLineNumber);\n        }\n        for (let outputLineIndex = outputLineIdx; outputLineIndex < outputLineIdx + lineCount; outputLineIndex++) {\n            const globalIndex = globalStartIndex + outputLineIndex - outputLineIdx;\n            if (!needed[globalIndex]) {\n                result[globalIndex] = null;\n                continue;\n            }\n            result[globalIndex] = this._getViewLineData(lineWithInjections, inlineDecorationsPerOutputLine ? inlineDecorationsPerOutputLine[outputLineIndex] : null, outputLineIndex);\n        }\n    }\n    _getViewLineData(lineWithInjections, inlineDecorations, outputLineIndex) {\n        this._assertVisible();\n        const lineBreakData = this._projectionData;\n        const deltaStartIndex = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n        const lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n        const lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n        const tokens = lineWithInjections.sliceAndInflate(lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections, deltaStartIndex);\n        let lineContent = tokens.getLineContent();\n        if (outputLineIndex > 0) {\n            lineContent = spaces(lineBreakData.wrappedTextIndentLength) + lineContent;\n        }\n        const minColumn = this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n        const maxColumn = lineContent.length + 1;\n        const continuesWithWrappedLine = (outputLineIndex + 1 < this.getViewLineCount());\n        const startVisibleColumn = (outputLineIndex === 0 ? 0 : lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1]);\n        return new ViewLineData(lineContent, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens, inlineDecorations);\n    }\n    getModelColumnOfViewPosition(outputLineIndex, outputColumn) {\n        this._assertVisible();\n        return this._projectionData.translateToInputOffset(outputLineIndex, outputColumn - 1) + 1;\n    }\n    getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity = 2 /* PositionAffinity.None */) {\n        this._assertVisible();\n        const r = this._projectionData.translateToOutputPosition(inputColumn - 1, affinity);\n        return r.toPosition(deltaLineNumber);\n    }\n    getViewLineNumberOfModelPosition(deltaLineNumber, inputColumn) {\n        this._assertVisible();\n        const r = this._projectionData.translateToOutputPosition(inputColumn - 1);\n        return deltaLineNumber + r.outputLineIndex;\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        const baseViewLineNumber = outputPosition.lineNumber - outputLineIndex;\n        const normalizedOutputPosition = this._projectionData.normalizeOutputPosition(outputLineIndex, outputPosition.column - 1, affinity);\n        const result = normalizedOutputPosition.toPosition(baseViewLineNumber);\n        return result;\n    }\n    getInjectedTextAt(outputLineIndex, outputColumn) {\n        return this._projectionData.getInjectedText(outputLineIndex, outputColumn - 1);\n    }\n    _assertVisible() {\n        if (!this._isVisible) {\n            throw new Error('Not supported');\n        }\n    }\n}\n/**\n * This projection does not change the model line.\n*/\nclass IdentityModelLineProjection {\n    constructor() { }\n    isVisible() {\n        return true;\n    }\n    setVisible(isVisible) {\n        if (isVisible) {\n            return this;\n        }\n        return HiddenModelLineProjection.INSTANCE;\n    }\n    getProjectionData() {\n        return null;\n    }\n    getViewLineCount() {\n        return 1;\n    }\n    getViewLineContent(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineContent(modelLineNumber);\n    }\n    getViewLineLength(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineLength(modelLineNumber);\n    }\n    getViewLineMinColumn(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineMinColumn(modelLineNumber);\n    }\n    getViewLineMaxColumn(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineMaxColumn(modelLineNumber);\n    }\n    getViewLineData(model, modelLineNumber, _outputLineIndex) {\n        const lineTokens = model.tokenization.getLineTokens(modelLineNumber);\n        const lineContent = lineTokens.getLineContent();\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate(), null);\n    }\n    getViewLinesData(model, modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, globalStartIndex, needed, result) {\n        if (!needed[globalStartIndex]) {\n            result[globalStartIndex] = null;\n            return;\n        }\n        result[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\n    }\n    getModelColumnOfViewPosition(_outputLineIndex, outputColumn) {\n        return outputColumn;\n    }\n    getViewPositionOfModelPosition(deltaLineNumber, inputColumn) {\n        return new Position(deltaLineNumber, inputColumn);\n    }\n    getViewLineNumberOfModelPosition(deltaLineNumber, _inputColumn) {\n        return deltaLineNumber;\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        return outputPosition;\n    }\n    getInjectedTextAt(_outputLineIndex, _outputColumn) {\n        return null;\n    }\n}\nIdentityModelLineProjection.INSTANCE = new IdentityModelLineProjection();\n/**\n * This projection hides the model line.\n */\nclass HiddenModelLineProjection {\n    constructor() { }\n    isVisible() {\n        return false;\n    }\n    setVisible(isVisible) {\n        if (!isVisible) {\n            return this;\n        }\n        return IdentityModelLineProjection.INSTANCE;\n    }\n    getProjectionData() {\n        return null;\n    }\n    getViewLineCount() {\n        return 0;\n    }\n    getViewLineContent(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineLength(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineMinColumn(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineMaxColumn(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineData(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLinesData(_model, _modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, _globalStartIndex, _needed, _result) {\n        throw new Error('Not supported');\n    }\n    getModelColumnOfViewPosition(_outputLineIndex, _outputColumn) {\n        throw new Error('Not supported');\n    }\n    getViewPositionOfModelPosition(_deltaLineNumber, _inputColumn) {\n        throw new Error('Not supported');\n    }\n    getViewLineNumberOfModelPosition(_deltaLineNumber, _inputColumn) {\n        throw new Error('Not supported');\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        throw new Error('Not supported');\n    }\n    getInjectedTextAt(_outputLineIndex, _outputColumn) {\n        throw new Error('Not supported');\n    }\n}\nHiddenModelLineProjection.INSTANCE = new HiddenModelLineProjection();\nconst _spaces = [''];\nfunction spaces(count) {\n    if (count >= _spaces.length) {\n        for (let i = 1; i <= count; i++) {\n            _spaces[i] = _makeSpaces(i);\n        }\n    }\n    return _spaces[count];\n}\nfunction _makeSpaces(count) {\n    return new Array(count + 1).join(' ');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { IndentGuide, IndentGuideHorizontalLine } from '../textModelGuides.js';\nimport { ModelDecorationOptions } from '../model/textModel.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { createModelLineProjection } from './modelLineProjection.js';\nimport { ConstantTimePrefixSumComputer } from '../model/prefixSumComputer.js';\nimport { ViewLineData } from '../viewModel.js';\nexport class ViewModelLinesFromProjectedModel {\n    constructor(editorId, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, tabSize, wrappingStrategy, wrappingColumn, wrappingIndent, wordBreak) {\n        this._editorId = editorId;\n        this.model = model;\n        this._validModelVersionId = -1;\n        this._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\n        this._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\n        this.fontInfo = fontInfo;\n        this.tabSize = tabSize;\n        this.wrappingStrategy = wrappingStrategy;\n        this.wrappingColumn = wrappingColumn;\n        this.wrappingIndent = wrappingIndent;\n        this.wordBreak = wordBreak;\n        this._constructLines(/*resetHiddenAreas*/ true, null);\n    }\n    dispose() {\n        this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n    }\n    createCoordinatesConverter() {\n        return new CoordinatesConverter(this);\n    }\n    _constructLines(resetHiddenAreas, previousLineBreaks) {\n        this.modelLineProjections = [];\n        if (resetHiddenAreas) {\n            this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n        }\n        const linesContent = this.model.getLinesContent();\n        const injectedTextDecorations = this.model.getInjectedTextDecorations(this._editorId);\n        const lineCount = linesContent.length;\n        const lineBreaksComputer = this.createLineBreaksComputer();\n        const injectedTextQueue = new arrays.ArrayQueue(LineInjectedText.fromDecorations(injectedTextDecorations));\n        for (let i = 0; i < lineCount; i++) {\n            const lineInjectedText = injectedTextQueue.takeWhile(t => t.lineNumber === i + 1);\n            lineBreaksComputer.addRequest(linesContent[i], lineInjectedText, previousLineBreaks ? previousLineBreaks[i] : null);\n        }\n        const linesBreaks = lineBreaksComputer.finalize();\n        const values = [];\n        const hiddenAreas = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)).sort(Range.compareRangesUsingStarts);\n        let hiddenAreaStart = 1, hiddenAreaEnd = 0;\n        let hiddenAreaIdx = -1;\n        let nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n        for (let i = 0; i < lineCount; i++) {\n            const lineNumber = i + 1;\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n                hiddenAreaIdx++;\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n            }\n            const isInHiddenArea = (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd);\n            const line = createModelLineProjection(linesBreaks[i], !isInHiddenArea);\n            values[i] = line.getViewLineCount();\n            this.modelLineProjections[i] = line;\n        }\n        this._validModelVersionId = this.model.getVersionId();\n        this.projectedModelLineLineCounts = new ConstantTimePrefixSumComputer(values);\n    }\n    getHiddenAreas() {\n        return this.hiddenAreasDecorationIds.map((decId) => this.model.getDecorationRange(decId));\n    }\n    setHiddenAreas(_ranges) {\n        const validatedRanges = _ranges.map(r => this.model.validateRange(r));\n        const newRanges = normalizeLineRanges(validatedRanges);\n        // TODO@Martin: Please stop calling this method on each model change!\n        // This checks if there really was a change\n        const oldRanges = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)).sort(Range.compareRangesUsingStarts);\n        if (newRanges.length === oldRanges.length) {\n            let hasDifference = false;\n            for (let i = 0; i < newRanges.length; i++) {\n                if (!newRanges[i].equalsRange(oldRanges[i])) {\n                    hasDifference = true;\n                    break;\n                }\n            }\n            if (!hasDifference) {\n                return false;\n            }\n        }\n        const newDecorations = newRanges.map((r) => ({\n            range: r,\n            options: ModelDecorationOptions.EMPTY,\n        }));\n        this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, newDecorations);\n        const hiddenAreas = newRanges;\n        let hiddenAreaStart = 1, hiddenAreaEnd = 0;\n        let hiddenAreaIdx = -1;\n        let nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n        let hasVisibleLine = false;\n        for (let i = 0; i < this.modelLineProjections.length; i++) {\n            const lineNumber = i + 1;\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n                hiddenAreaIdx++;\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n            }\n            let lineChanged = false;\n            if (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\n                // Line should be hidden\n                if (this.modelLineProjections[i].isVisible()) {\n                    this.modelLineProjections[i] = this.modelLineProjections[i].setVisible(false);\n                    lineChanged = true;\n                }\n            }\n            else {\n                hasVisibleLine = true;\n                // Line should be visible\n                if (!this.modelLineProjections[i].isVisible()) {\n                    this.modelLineProjections[i] = this.modelLineProjections[i].setVisible(true);\n                    lineChanged = true;\n                }\n            }\n            if (lineChanged) {\n                const newOutputLineCount = this.modelLineProjections[i].getViewLineCount();\n                this.projectedModelLineLineCounts.setValue(i, newOutputLineCount);\n            }\n        }\n        if (!hasVisibleLine) {\n            // Cannot have everything be hidden => reveal everything!\n            this.setHiddenAreas([]);\n        }\n        return true;\n    }\n    modelPositionIsVisible(modelLineNumber, _modelColumn) {\n        if (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n            // invalid arguments\n            return false;\n        }\n        return this.modelLineProjections[modelLineNumber - 1].isVisible();\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        if (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n            // invalid arguments\n            return 1;\n        }\n        return this.modelLineProjections[modelLineNumber - 1].getViewLineCount();\n    }\n    setTabSize(newTabSize) {\n        if (this.tabSize === newTabSize) {\n            return false;\n        }\n        this.tabSize = newTabSize;\n        this._constructLines(/*resetHiddenAreas*/ false, null);\n        return true;\n    }\n    setWrappingSettings(fontInfo, wrappingStrategy, wrappingColumn, wrappingIndent, wordBreak) {\n        const equalFontInfo = this.fontInfo.equals(fontInfo);\n        const equalWrappingStrategy = (this.wrappingStrategy === wrappingStrategy);\n        const equalWrappingColumn = (this.wrappingColumn === wrappingColumn);\n        const equalWrappingIndent = (this.wrappingIndent === wrappingIndent);\n        const equalWordBreak = (this.wordBreak === wordBreak);\n        if (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent && equalWordBreak) {\n            return false;\n        }\n        const onlyWrappingColumnChanged = (equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent && equalWordBreak);\n        this.fontInfo = fontInfo;\n        this.wrappingStrategy = wrappingStrategy;\n        this.wrappingColumn = wrappingColumn;\n        this.wrappingIndent = wrappingIndent;\n        this.wordBreak = wordBreak;\n        let previousLineBreaks = null;\n        if (onlyWrappingColumnChanged) {\n            previousLineBreaks = [];\n            for (let i = 0, len = this.modelLineProjections.length; i < len; i++) {\n                previousLineBreaks[i] = this.modelLineProjections[i].getProjectionData();\n            }\n        }\n        this._constructLines(/*resetHiddenAreas*/ false, previousLineBreaks);\n        return true;\n    }\n    createLineBreaksComputer() {\n        const lineBreaksComputerFactory = (this.wrappingStrategy === 'advanced'\n            ? this._domLineBreaksComputerFactory\n            : this._monospaceLineBreaksComputerFactory);\n        return lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent, this.wordBreak);\n    }\n    onModelFlushed() {\n        this._constructLines(/*resetHiddenAreas*/ true, null);\n    }\n    onModelLinesDeleted(versionId, fromLineNumber, toLineNumber) {\n        if (!versionId || versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return null;\n        }\n        const outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n        const outputToLineNumber = this.projectedModelLineLineCounts.getPrefixSum(toLineNumber);\n        this.modelLineProjections.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n        this.projectedModelLineLineCounts.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n        return new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\n    }\n    onModelLinesInserted(versionId, fromLineNumber, _toLineNumber, lineBreaks) {\n        if (!versionId || versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return null;\n        }\n        // cannot use this.getHiddenAreas() because those decorations have already seen the effect of this model change\n        const isInHiddenArea = (fromLineNumber > 2 && !this.modelLineProjections[fromLineNumber - 2].isVisible());\n        const outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n        let totalOutputLineCount = 0;\n        const insertLines = [];\n        const insertPrefixSumValues = [];\n        for (let i = 0, len = lineBreaks.length; i < len; i++) {\n            const line = createModelLineProjection(lineBreaks[i], !isInHiddenArea);\n            insertLines.push(line);\n            const outputLineCount = line.getViewLineCount();\n            totalOutputLineCount += outputLineCount;\n            insertPrefixSumValues[i] = outputLineCount;\n        }\n        // TODO@Alex: use arrays.arrayInsert\n        this.modelLineProjections =\n            this.modelLineProjections.slice(0, fromLineNumber - 1)\n                .concat(insertLines)\n                .concat(this.modelLineProjections.slice(fromLineNumber - 1));\n        this.projectedModelLineLineCounts.insertValues(fromLineNumber - 1, insertPrefixSumValues);\n        return new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\n    }\n    onModelLineChanged(versionId, lineNumber, lineBreakData) {\n        if (versionId !== null && versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return [false, null, null, null];\n        }\n        const lineIndex = lineNumber - 1;\n        const oldOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n        const isVisible = this.modelLineProjections[lineIndex].isVisible();\n        const line = createModelLineProjection(lineBreakData, isVisible);\n        this.modelLineProjections[lineIndex] = line;\n        const newOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n        let lineMappingChanged = false;\n        let changeFrom = 0;\n        let changeTo = -1;\n        let insertFrom = 0;\n        let insertTo = -1;\n        let deleteFrom = 0;\n        let deleteTo = -1;\n        if (oldOutputLineCount > newOutputLineCount) {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + newOutputLineCount - 1;\n            deleteFrom = changeTo + 1;\n            deleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\n            lineMappingChanged = true;\n        }\n        else if (oldOutputLineCount < newOutputLineCount) {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + oldOutputLineCount - 1;\n            insertFrom = changeTo + 1;\n            insertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\n            lineMappingChanged = true;\n        }\n        else {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + newOutputLineCount - 1;\n        }\n        this.projectedModelLineLineCounts.setValue(lineIndex, newOutputLineCount);\n        const viewLinesChangedEvent = (changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo - changeFrom + 1) : null);\n        const viewLinesInsertedEvent = (insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null);\n        const viewLinesDeletedEvent = (deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null);\n        return [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\n    }\n    acceptVersionId(versionId) {\n        this._validModelVersionId = versionId;\n        if (this.modelLineProjections.length === 1 && !this.modelLineProjections[0].isVisible()) {\n            // At least one line must be visible => reset hidden areas\n            this.setHiddenAreas([]);\n        }\n    }\n    getViewLineCount() {\n        return this.projectedModelLineLineCounts.getTotalSum();\n    }\n    _toValidViewLineNumber(viewLineNumber) {\n        if (viewLineNumber < 1) {\n            return 1;\n        }\n        const viewLineCount = this.getViewLineCount();\n        if (viewLineNumber > viewLineCount) {\n            return viewLineCount;\n        }\n        return viewLineNumber | 0;\n    }\n    getActiveIndentGuide(viewLineNumber, minLineNumber, maxLineNumber) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        minLineNumber = this._toValidViewLineNumber(minLineNumber);\n        maxLineNumber = this._toValidViewLineNumber(maxLineNumber);\n        const modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\n        const modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\n        const modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\n        const result = this.model.guides.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\n        const viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\n        const viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\n        return {\n            startLineNumber: viewStartPosition.lineNumber,\n            endLineNumber: viewEndPosition.lineNumber,\n            indent: result.indent\n        };\n    }\n    // #region ViewLineInfo\n    getViewLineInfo(viewLineNumber) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        const r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n        const lineIndex = r.index;\n        const remainder = r.remainder;\n        return new ViewLineInfo(lineIndex + 1, remainder);\n    }\n    getMinColumnOfViewLine(viewLineInfo) {\n        return this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMinColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n    }\n    getMaxColumnOfViewLine(viewLineInfo) {\n        return this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMaxColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n    }\n    getModelStartPositionOfViewLine(viewLineInfo) {\n        const line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n        const minViewColumn = line.getViewLineMinColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n        const column = line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx, minViewColumn);\n        return new Position(viewLineInfo.modelLineNumber, column);\n    }\n    getModelEndPositionOfViewLine(viewLineInfo) {\n        const line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n        const maxViewColumn = line.getViewLineMaxColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n        const column = line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx, maxViewColumn);\n        return new Position(viewLineInfo.modelLineNumber, column);\n    }\n    getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber) {\n        const startViewLine = this.getViewLineInfo(viewStartLineNumber);\n        const endViewLine = this.getViewLineInfo(viewEndLineNumber);\n        const result = new Array();\n        let lastVisibleModelPos = this.getModelStartPositionOfViewLine(startViewLine);\n        let viewLines = new Array();\n        for (let curModelLine = startViewLine.modelLineNumber; curModelLine <= endViewLine.modelLineNumber; curModelLine++) {\n            const line = this.modelLineProjections[curModelLine - 1];\n            if (line.isVisible()) {\n                const startOffset = curModelLine === startViewLine.modelLineNumber\n                    ? startViewLine.modelLineWrappedLineIdx\n                    : 0;\n                const endOffset = curModelLine === endViewLine.modelLineNumber\n                    ? endViewLine.modelLineWrappedLineIdx + 1\n                    : line.getViewLineCount();\n                for (let i = startOffset; i < endOffset; i++) {\n                    viewLines.push(new ViewLineInfo(curModelLine, i));\n                }\n            }\n            if (!line.isVisible() && lastVisibleModelPos) {\n                const lastVisibleModelPos2 = new Position(curModelLine - 1, this.model.getLineMaxColumn(curModelLine - 1) + 1);\n                const modelRange = Range.fromPositions(lastVisibleModelPos, lastVisibleModelPos2);\n                result.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n                viewLines = [];\n                lastVisibleModelPos = null;\n            }\n            else if (line.isVisible() && !lastVisibleModelPos) {\n                lastVisibleModelPos = new Position(curModelLine, 1);\n            }\n        }\n        if (lastVisibleModelPos) {\n            const modelRange = Range.fromPositions(lastVisibleModelPos, this.getModelEndPositionOfViewLine(endViewLine));\n            result.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n        }\n        return result;\n    }\n    // #endregion\n    getViewLinesBracketGuides(viewStartLineNumber, viewEndLineNumber, activeViewPosition, options) {\n        const modelActivePosition = activeViewPosition ? this.convertViewPositionToModelPosition(activeViewPosition.lineNumber, activeViewPosition.column) : null;\n        const resultPerViewLine = [];\n        for (const group of this.getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber)) {\n            const modelRangeStartLineNumber = group.modelRange.startLineNumber;\n            const bracketGuidesPerModelLine = this.model.guides.getLinesBracketGuides(modelRangeStartLineNumber, group.modelRange.endLineNumber, modelActivePosition, options);\n            for (const viewLineInfo of group.viewLines) {\n                const bracketGuides = bracketGuidesPerModelLine[viewLineInfo.modelLineNumber - modelRangeStartLineNumber];\n                // visibleColumns stay as they are (this is a bug and needs to be fixed, but it is not a regression)\n                // model-columns must be converted to view-model columns.\n                const result = bracketGuides.map(g => {\n                    if (g.forWrappedLinesAfterColumn !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesAfterColumn);\n                        if (p.lineNumber >= viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    if (g.forWrappedLinesBeforeOrAtColumn !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesBeforeOrAtColumn);\n                        if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    if (!g.horizontalLine) {\n                        return g;\n                    }\n                    let column = -1;\n                    if (g.column !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.column);\n                        if (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n                            column = p.column;\n                        }\n                        else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                            column = this.getMinColumnOfViewLine(viewLineInfo);\n                        }\n                        else if (p.lineNumber > viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    const viewPosition = this.convertModelPositionToViewPosition(viewLineInfo.modelLineNumber, g.horizontalLine.endColumn);\n                    const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.horizontalLine.endColumn);\n                    if (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n                        return new IndentGuide(g.visibleColumn, column, g.className, new IndentGuideHorizontalLine(g.horizontalLine.top, viewPosition.column), -1, -1);\n                    }\n                    else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                        return undefined;\n                    }\n                    else {\n                        if (g.visibleColumn !== -1) {\n                            // Don't repeat horizontal lines that use visibleColumn for unrelated lines.\n                            return undefined;\n                        }\n                        return new IndentGuide(g.visibleColumn, column, g.className, new IndentGuideHorizontalLine(g.horizontalLine.top, this.getMaxColumnOfViewLine(viewLineInfo)), -1, -1);\n                    }\n                });\n                resultPerViewLine.push(result.filter((r) => !!r));\n            }\n        }\n        return resultPerViewLine;\n    }\n    getViewLinesIndentGuides(viewStartLineNumber, viewEndLineNumber) {\n        // TODO: Use the same code as in `getViewLinesBracketGuides`.\n        // Future TODO: Merge with `getViewLinesBracketGuides`.\n        // However, this requires more refactoring of indent guides.\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n        const modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\n        const modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\n        let result = [];\n        const resultRepeatCount = [];\n        const resultRepeatOption = [];\n        const modelStartLineIndex = modelStart.lineNumber - 1;\n        const modelEndLineIndex = modelEnd.lineNumber - 1;\n        let reqStart = null;\n        for (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (line.isVisible()) {\n                const viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n                const viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\n                const count = viewLineEndIndex - viewLineStartIndex + 1;\n                let option = 0 /* IndentGuideRepeatOption.BlockNone */;\n                if (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\n                    // wrapped lines should block indent guides\n                    option = (viewLineStartIndex === 0 ? 1 /* IndentGuideRepeatOption.BlockSubsequent */ : 2 /* IndentGuideRepeatOption.BlockAll */);\n                }\n                resultRepeatCount.push(count);\n                resultRepeatOption.push(option);\n                // merge into previous request\n                if (reqStart === null) {\n                    reqStart = new Position(modelLineIndex + 1, 0);\n                }\n            }\n            else {\n                // hit invisible line => flush request\n                if (reqStart !== null) {\n                    result = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\n                    reqStart = null;\n                }\n            }\n        }\n        if (reqStart !== null) {\n            result = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\n            reqStart = null;\n        }\n        const viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n        const viewIndents = new Array(viewLineCount);\n        let currIndex = 0;\n        for (let i = 0, len = result.length; i < len; i++) {\n            let value = result[i];\n            const count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\n            const option = resultRepeatOption[i];\n            let blockAtIndex;\n            if (option === 2 /* IndentGuideRepeatOption.BlockAll */) {\n                blockAtIndex = 0;\n            }\n            else if (option === 1 /* IndentGuideRepeatOption.BlockSubsequent */) {\n                blockAtIndex = 1;\n            }\n            else {\n                blockAtIndex = count;\n            }\n            for (let j = 0; j < count; j++) {\n                if (j === blockAtIndex) {\n                    value = 0;\n                }\n                viewIndents[currIndex++] = value;\n            }\n        }\n        return viewIndents;\n    }\n    getViewLineContent(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineContent(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineLength(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineLength(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineMinColumn(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineMinColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineMaxColumn(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineMaxColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineData(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineData(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLinesData(viewStartLineNumber, viewEndLineNumber, needed) {\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n        const start = this.projectedModelLineLineCounts.getIndexOf(viewStartLineNumber - 1);\n        let viewLineNumber = viewStartLineNumber;\n        const startModelLineIndex = start.index;\n        const startRemainder = start.remainder;\n        const result = [];\n        for (let modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (!line.isVisible()) {\n                continue;\n            }\n            const fromViewLineIndex = (modelLineIndex === startModelLineIndex ? startRemainder : 0);\n            let remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\n            let lastLine = false;\n            if (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\n                lastLine = true;\n                remainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\n            }\n            line.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, remainingViewLineCount, viewLineNumber - viewStartLineNumber, needed, result);\n            viewLineNumber += remainingViewLineCount;\n            if (lastLine) {\n                break;\n            }\n        }\n        return result;\n    }\n    validateViewPosition(viewLineNumber, viewColumn, expectedModelPosition) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        const r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n        const lineIndex = r.index;\n        const remainder = r.remainder;\n        const line = this.modelLineProjections[lineIndex];\n        const minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n        const maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n        if (viewColumn < minColumn) {\n            viewColumn = minColumn;\n        }\n        if (viewColumn > maxColumn) {\n            viewColumn = maxColumn;\n        }\n        const computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\n        const computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\n        if (computedModelPosition.equals(expectedModelPosition)) {\n            return new Position(viewLineNumber, viewColumn);\n        }\n        return this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\n    }\n    validateViewRange(viewRange, expectedModelRange) {\n        const validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\n        const validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\n        return new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\n    }\n    convertViewPositionToModelPosition(viewLineNumber, viewColumn) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        const inputColumn = this.modelLineProjections[info.modelLineNumber - 1].getModelColumnOfViewPosition(info.modelLineWrappedLineIdx, viewColumn);\n        // console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\n        return this.model.validatePosition(new Position(info.modelLineNumber, inputColumn));\n    }\n    convertViewRangeToModelRange(viewRange) {\n        const start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\n        const end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    convertModelPositionToViewPosition(_modelLineNumber, _modelColumn, affinity = 2 /* PositionAffinity.None */) {\n        const validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\n        const inputLineNumber = validPosition.lineNumber;\n        const inputColumn = validPosition.column;\n        let lineIndex = inputLineNumber - 1, lineIndexChanged = false;\n        while (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            lineIndex--;\n            lineIndexChanged = true;\n        }\n        if (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            // Could not reach a real line\n            // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\n            return new Position(1, 1);\n        }\n        const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n        let r;\n        if (lineIndexChanged) {\n            r = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1), affinity);\n        }\n        else {\n            r = this.modelLineProjections[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity);\n        }\n        // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\n        return r;\n    }\n    /**\n     * @param affinity The affinity in case of an empty range. Has no effect for non-empty ranges.\n    */\n    convertModelRangeToViewRange(modelRange, affinity = 0 /* PositionAffinity.Left */) {\n        if (modelRange.isEmpty()) {\n            const start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, affinity);\n            return Range.fromPositions(start);\n        }\n        else {\n            const start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, 1 /* PositionAffinity.Right */);\n            const end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn, 0 /* PositionAffinity.Left */);\n            return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n        }\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        let lineIndex = modelLineNumber - 1;\n        if (this.modelLineProjections[lineIndex].isVisible()) {\n            // this model line is visible\n            const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n            return this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, modelColumn);\n        }\n        // this model line is not visible\n        while (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            lineIndex--;\n        }\n        if (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            // Could not reach a real line\n            return 1;\n        }\n        const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n        return this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n    }\n    getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations) {\n        const modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\n        const modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\n        if (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\n            // most likely there are no hidden lines => fast path\n            // fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\n            return this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, onlyMinimapDecorations);\n        }\n        let result = [];\n        const modelStartLineIndex = modelStart.lineNumber - 1;\n        const modelEndLineIndex = modelEnd.lineNumber - 1;\n        let reqStart = null;\n        for (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (line.isVisible()) {\n                // merge into previous request\n                if (reqStart === null) {\n                    reqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n                }\n            }\n            else {\n                // hit invisible line => flush request\n                if (reqStart !== null) {\n                    const maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\n                    result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation, onlyMinimapDecorations));\n                    reqStart = null;\n                }\n            }\n        }\n        if (reqStart !== null) {\n            result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, onlyMinimapDecorations));\n            reqStart = null;\n        }\n        result.sort((a, b) => {\n            const res = Range.compareRangesUsingStarts(a.range, b.range);\n            if (res === 0) {\n                if (a.id < b.id) {\n                    return -1;\n                }\n                if (a.id > b.id) {\n                    return 1;\n                }\n                return 0;\n            }\n            return res;\n        });\n        // Eliminate duplicate decorations that might have intersected our visible ranges multiple times\n        const finalResult = [];\n        let finalResultLen = 0;\n        let prevDecId = null;\n        for (const dec of result) {\n            const decId = dec.id;\n            if (prevDecId === decId) {\n                // skip\n                continue;\n            }\n            prevDecId = decId;\n            finalResult[finalResultLen++] = dec;\n        }\n        return finalResult;\n    }\n    getInjectedTextAt(position) {\n        const info = this.getViewLineInfo(position.lineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getInjectedTextAt(info.modelLineWrappedLineIdx, position.column);\n    }\n    normalizePosition(position, affinity) {\n        const info = this.getViewLineInfo(position.lineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].normalizePosition(info.modelLineWrappedLineIdx, position, affinity);\n    }\n    getLineIndentColumn(lineNumber) {\n        const info = this.getViewLineInfo(lineNumber);\n        if (info.modelLineWrappedLineIdx === 0) {\n            return this.model.getLineIndentColumn(info.modelLineNumber);\n        }\n        // wrapped lines have no indentation.\n        // We deliberately don't handle the case that indentation is wrapped\n        // to avoid two view lines reporting indentation for the very same model line.\n        return 0;\n    }\n}\n/**\n * Overlapping unsorted ranges:\n * [   )      [ )       [  )\n *    [    )      [       )\n * ->\n * Non overlapping sorted ranges:\n * [       )  [ ) [        )\n *\n * Note: This function only considers line information! Columns are ignored.\n*/\nfunction normalizeLineRanges(ranges) {\n    if (ranges.length === 0) {\n        return [];\n    }\n    const sortedRanges = ranges.slice();\n    sortedRanges.sort(Range.compareRangesUsingStarts);\n    const result = [];\n    let currentRangeStart = sortedRanges[0].startLineNumber;\n    let currentRangeEnd = sortedRanges[0].endLineNumber;\n    for (let i = 1, len = sortedRanges.length; i < len; i++) {\n        const range = sortedRanges[i];\n        if (range.startLineNumber > currentRangeEnd + 1) {\n            result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n            currentRangeStart = range.startLineNumber;\n            currentRangeEnd = range.endLineNumber;\n        }\n        else if (range.endLineNumber > currentRangeEnd) {\n            currentRangeEnd = range.endLineNumber;\n        }\n    }\n    result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n    return result;\n}\n/**\n * Represents a view line. Can be used to efficiently query more information about it.\n */\nclass ViewLineInfo {\n    constructor(modelLineNumber, modelLineWrappedLineIdx) {\n        this.modelLineNumber = modelLineNumber;\n        this.modelLineWrappedLineIdx = modelLineWrappedLineIdx;\n    }\n}\n/**\n * A list of view lines that have a contiguous span in the model.\n*/\nclass ViewLineInfoGroupedByModelRange {\n    constructor(modelRange, viewLines) {\n        this.modelRange = modelRange;\n        this.viewLines = viewLines;\n    }\n}\nclass CoordinatesConverter {\n    constructor(lines) {\n        this._lines = lines;\n    }\n    // View -> Model conversion and related methods\n    convertViewPositionToModelPosition(viewPosition) {\n        return this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\n    }\n    convertViewRangeToModelRange(viewRange) {\n        return this._lines.convertViewRangeToModelRange(viewRange);\n    }\n    validateViewPosition(viewPosition, expectedModelPosition) {\n        return this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\n    }\n    validateViewRange(viewRange, expectedModelRange) {\n        return this._lines.validateViewRange(viewRange, expectedModelRange);\n    }\n    // Model -> View conversion and related methods\n    convertModelPositionToViewPosition(modelPosition, affinity) {\n        return this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column, affinity);\n    }\n    convertModelRangeToViewRange(modelRange, affinity) {\n        return this._lines.convertModelRangeToViewRange(modelRange, affinity);\n    }\n    modelPositionIsVisible(modelPosition) {\n        return this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        return this._lines.getModelLineViewLineCount(modelLineNumber);\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        return this._lines.getViewLineNumberOfModelPosition(modelLineNumber, modelColumn);\n    }\n}\nexport class ViewModelLinesFromModelAsIs {\n    constructor(model) {\n        this.model = model;\n    }\n    dispose() {\n    }\n    createCoordinatesConverter() {\n        return new IdentityCoordinatesConverter(this);\n    }\n    getHiddenAreas() {\n        return [];\n    }\n    setHiddenAreas(_ranges) {\n        return false;\n    }\n    setTabSize(_newTabSize) {\n        return false;\n    }\n    setWrappingSettings(_fontInfo, _wrappingStrategy, _wrappingColumn, _wrappingIndent) {\n        return false;\n    }\n    createLineBreaksComputer() {\n        const result = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                result.push(null);\n            },\n            finalize: () => {\n                return result;\n            }\n        };\n    }\n    onModelFlushed() {\n    }\n    onModelLinesDeleted(_versionId, fromLineNumber, toLineNumber) {\n        return new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\n    }\n    onModelLinesInserted(_versionId, fromLineNumber, toLineNumber, lineBreaks) {\n        return new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\n    }\n    onModelLineChanged(_versionId, lineNumber, lineBreakData) {\n        return [false, new viewEvents.ViewLinesChangedEvent(lineNumber, 1), null, null];\n    }\n    acceptVersionId(_versionId) {\n    }\n    getViewLineCount() {\n        return this.model.getLineCount();\n    }\n    getActiveIndentGuide(viewLineNumber, _minLineNumber, _maxLineNumber) {\n        return {\n            startLineNumber: viewLineNumber,\n            endLineNumber: viewLineNumber,\n            indent: 0\n        };\n    }\n    getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition) {\n        return new Array(endLineNumber - startLineNumber + 1).fill([]);\n    }\n    getViewLinesIndentGuides(viewStartLineNumber, viewEndLineNumber) {\n        const viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n        const result = new Array(viewLineCount);\n        for (let i = 0; i < viewLineCount; i++) {\n            result[i] = 0;\n        }\n        return result;\n    }\n    getViewLineContent(viewLineNumber) {\n        return this.model.getLineContent(viewLineNumber);\n    }\n    getViewLineLength(viewLineNumber) {\n        return this.model.getLineLength(viewLineNumber);\n    }\n    getViewLineMinColumn(viewLineNumber) {\n        return this.model.getLineMinColumn(viewLineNumber);\n    }\n    getViewLineMaxColumn(viewLineNumber) {\n        return this.model.getLineMaxColumn(viewLineNumber);\n    }\n    getViewLineData(viewLineNumber) {\n        const lineTokens = this.model.tokenization.getLineTokens(viewLineNumber);\n        const lineContent = lineTokens.getLineContent();\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate(), null);\n    }\n    getViewLinesData(viewStartLineNumber, viewEndLineNumber, needed) {\n        const lineCount = this.model.getLineCount();\n        viewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\n        viewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\n        const result = [];\n        for (let lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\n            const idx = lineNumber - viewStartLineNumber;\n            result[idx] = needed[idx] ? this.getViewLineData(lineNumber) : null;\n        }\n        return result;\n    }\n    getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations) {\n        return this.model.getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations);\n    }\n    normalizePosition(position, affinity) {\n        return this.model.normalizePosition(position, affinity);\n    }\n    getLineIndentColumn(lineNumber) {\n        return this.model.getLineIndentColumn(lineNumber);\n    }\n    getInjectedTextAt(position) {\n        // Identity lines collection does not support injected text.\n        return null;\n    }\n}\nclass IdentityCoordinatesConverter {\n    constructor(lines) {\n        this._lines = lines;\n    }\n    _validPosition(pos) {\n        return this._lines.model.validatePosition(pos);\n    }\n    _validRange(range) {\n        return this._lines.model.validateRange(range);\n    }\n    // View -> Model conversion and related methods\n    convertViewPositionToModelPosition(viewPosition) {\n        return this._validPosition(viewPosition);\n    }\n    convertViewRangeToModelRange(viewRange) {\n        return this._validRange(viewRange);\n    }\n    validateViewPosition(_viewPosition, expectedModelPosition) {\n        return this._validPosition(expectedModelPosition);\n    }\n    validateViewRange(_viewRange, expectedModelRange) {\n        return this._validRange(expectedModelRange);\n    }\n    // Model -> View conversion and related methods\n    convertModelPositionToViewPosition(modelPosition) {\n        return this._validPosition(modelPosition);\n    }\n    convertModelRangeToViewRange(modelRange) {\n        return this._validRange(modelRange);\n    }\n    modelPositionIsVisible(modelPosition) {\n        const lineCount = this._lines.model.getLineCount();\n        if (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\n            // invalid arguments\n            return false;\n        }\n        return true;\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        return 1;\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        return modelLineNumber;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayQueue } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { CursorsController } from '../cursor/cursor.js';\nimport { CursorConfiguration } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport * as textModelEvents from '../textModelEvents.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { tokenizeLineToHTML } from '../languages/textToHtmlTokenizer.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport { MinimapLinesRenderingData, OverviewRulerDecorationsGroup, ViewLineRenderingData } from '../viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { FocusChangedEvent, HiddenAreasChangedEvent, ModelContentChangedEvent, ModelDecorationsChangedEvent, ModelLanguageChangedEvent, ModelLanguageConfigurationChangedEvent, ModelOptionsChangedEvent, ModelTokensChangedEvent, ReadOnlyEditAttemptEvent, ScrollChangedEvent, ViewModelEventDispatcher, ViewZonesChangedEvent } from '../viewModelEventDispatcher.js';\nimport { ViewModelLinesFromModelAsIs, ViewModelLinesFromProjectedModel } from './viewModelLines.js';\nconst USE_IDENTITY_LINES_COLLECTION = true;\nexport class ViewModel extends Disposable {\n    constructor(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame, languageConfigurationService, _themeService) {\n        super();\n        this.languageConfigurationService = languageConfigurationService;\n        this._themeService = _themeService;\n        this.hiddenAreasModel = new HiddenAreasModel();\n        this.previousHiddenAreas = [];\n        this._editorId = editorId;\n        this._configuration = configuration;\n        this.model = model;\n        this._eventDispatcher = new ViewModelEventDispatcher();\n        this.onEvent = this._eventDispatcher.onEvent;\n        this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n        this._tokenizeViewportSoon = this._register(new RunOnceScheduler(() => this.tokenizeViewport(), 50));\n        this._updateConfigurationViewLineCount = this._register(new RunOnceScheduler(() => this._updateConfigurationViewLineCountNow(), 0));\n        this._hasFocus = false;\n        this._viewportStart = ViewportStart.create(this.model);\n        if (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\n            this._lines = new ViewModelLinesFromModelAsIs(this.model);\n        }\n        else {\n            const options = this._configuration.options;\n            const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n            const wrappingStrategy = options.get(132 /* EditorOption.wrappingStrategy */);\n            const wrappingInfo = options.get(139 /* EditorOption.wrappingInfo */);\n            const wrappingIndent = options.get(131 /* EditorOption.wrappingIndent */);\n            const wordBreak = options.get(123 /* EditorOption.wordBreak */);\n            this._lines = new ViewModelLinesFromProjectedModel(this._editorId, this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak);\n        }\n        this.coordinatesConverter = this._lines.createCoordinatesConverter();\n        this._cursor = this._register(new CursorsController(model, this, this.coordinatesConverter, this.cursorConfig));\n        this.viewLayout = this._register(new ViewLayout(this._configuration, this.getLineCount(), scheduleAtNextAnimationFrame));\n        this._register(this.viewLayout.onDidScroll((e) => {\n            if (e.scrollTopChanged) {\n                this._tokenizeViewportSoon.schedule();\n            }\n            if (e.scrollTopChanged) {\n                this._viewportStart.invalidate();\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(e.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop, e.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop));\n        }));\n        this._register(this.viewLayout.onDidContentSizeChange((e) => {\n            this._eventDispatcher.emitOutgoingEvent(e);\n        }));\n        this._decorations = new ViewModelDecorations(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter);\n        this._registerModelEvents();\n        this._register(this._configuration.onDidChangeFast((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                this._onConfigurationChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n        }));\n        this._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n        }));\n        this._register(this._themeService.onDidColorThemeChange((theme) => {\n            this._invalidateDecorationsColorCache();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme));\n        }));\n        this._updateConfigurationViewLineCountNow();\n    }\n    dispose() {\n        // First remove listeners, as disposing the lines might end up sending\n        // model decoration changed events ... and we no longer care about them ...\n        super.dispose();\n        this._decorations.dispose();\n        this._lines.dispose();\n        this._viewportStart.dispose();\n        this._eventDispatcher.dispose();\n    }\n    createLineBreaksComputer() {\n        return this._lines.createLineBreaksComputer();\n    }\n    addViewEventHandler(eventHandler) {\n        this._eventDispatcher.addViewEventHandler(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        this._eventDispatcher.removeViewEventHandler(eventHandler);\n    }\n    _updateConfigurationViewLineCountNow() {\n        this._configuration.setViewLineCount(this._lines.getViewLineCount());\n    }\n    tokenizeViewport() {\n        const linesViewportData = this.viewLayout.getLinesViewportData();\n        const viewVisibleRange = new Range(linesViewportData.startLineNumber, this.getLineMinColumn(linesViewportData.startLineNumber), linesViewportData.endLineNumber, this.getLineMaxColumn(linesViewportData.endLineNumber));\n        const modelVisibleRanges = this._toModelVisibleRanges(viewVisibleRange);\n        for (const modelVisibleRange of modelVisibleRanges) {\n            this.model.tokenization.tokenizeViewport(modelVisibleRange.startLineNumber, modelVisibleRange.endLineNumber);\n        }\n    }\n    setHasFocus(hasFocus) {\n        this._hasFocus = hasFocus;\n        this._cursor.setHasFocus(hasFocus);\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n        this._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n    }\n    onCompositionStart() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n    }\n    onCompositionEnd() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n    }\n    _captureStableViewport() {\n        // We might need to restore the current start view range, so save it (if available)\n        // But only if the scroll position is not at the top of the file\n        if (this._viewportStart.isValid && this.viewLayout.getCurrentScrollTop() > 0) {\n            const previousViewportStartViewPosition = new Position(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber));\n            const previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n            return new StableViewport(previousViewportStartModelPosition, this._viewportStart.startLineDelta);\n        }\n        return new StableViewport(null, 0);\n    }\n    _onConfigurationChanged(eventsCollector, e) {\n        const stableViewport = this._captureStableViewport();\n        const options = this._configuration.options;\n        const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        const wrappingStrategy = options.get(132 /* EditorOption.wrappingStrategy */);\n        const wrappingInfo = options.get(139 /* EditorOption.wrappingInfo */);\n        const wrappingIndent = options.get(131 /* EditorOption.wrappingIndent */);\n        const wordBreak = options.get(123 /* EditorOption.wordBreak */);\n        if (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak)) {\n            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n            this._cursor.onLineMappingChanged(eventsCollector);\n            this._decorations.onLineMappingChanged();\n            this.viewLayout.onFlushed(this.getLineCount());\n            this._updateConfigurationViewLineCount.schedule();\n        }\n        if (e.hasChanged(86 /* EditorOption.readOnly */)) {\n            // Must read again all decorations due to readOnly filtering\n            this._decorations.reset();\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        }\n        eventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n        this.viewLayout.onConfigurationChanged(e);\n        stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n        if (CursorConfiguration.shouldRecreate(e)) {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n        }\n    }\n    _registerModelEvents() {\n        this._register(this.model.onDidChangeContentOrInjectedText((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                let hadOtherModelChange = false;\n                let hadModelLineChangeThatChangedLineMapping = false;\n                const changes = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes);\n                const versionId = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.versionId : null);\n                // Do a first pass to compute line mappings, and a second pass to actually interpret them\n                const lineBreaksComputer = this._lines.createLineBreaksComputer();\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            for (let lineIdx = 0; lineIdx < change.detail.length; lineIdx++) {\n                                const line = change.detail[lineIdx];\n                                let injectedText = change.injectedTexts[lineIdx];\n                                if (injectedText) {\n                                    injectedText = injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                                }\n                                lineBreaksComputer.addRequest(line, injectedText, null);\n                            }\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            let injectedText = null;\n                            if (change.injectedText) {\n                                injectedText = change.injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                            }\n                            lineBreaksComputer.addRequest(change.detail, injectedText, null);\n                            break;\n                        }\n                    }\n                }\n                const lineBreaks = lineBreaksComputer.finalize();\n                const lineBreakQueue = new ArrayQueue(lineBreaks);\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 1 /* textModelEvents.RawContentChangedType.Flush */: {\n                            this._lines.onModelFlushed();\n                            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                            this._decorations.reset();\n                            this.viewLayout.onFlushed(this.getLineCount());\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 3 /* textModelEvents.RawContentChangedType.LinesDeleted */: {\n                            const linesDeletedEvent = this._lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n                            if (linesDeletedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            const insertedLineBreaks = lineBreakQueue.takeCount(change.detail.length);\n                            const linesInsertedEvent = this._lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n                            if (linesInsertedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            const changedLineBreakData = lineBreakQueue.dequeue();\n                            const [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] = this._lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData);\n                            hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n                            if (linesChangedEvent) {\n                                eventsCollector.emitViewEvent(linesChangedEvent);\n                            }\n                            if (linesInsertedEvent) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            if (linesDeletedEvent) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            break;\n                        }\n                        case 5 /* textModelEvents.RawContentChangedType.EOLChanged */: {\n                            // Nothing to do. The new version will be accepted below\n                            break;\n                        }\n                    }\n                }\n                if (versionId !== null) {\n                    this._lines.acceptVersionId(versionId);\n                }\n                this.viewLayout.onHeightMaybeChanged();\n                if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                }\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            // Update the configuration and reset the centered view line\n            const viewportStartWasValid = this._viewportStart.isValid;\n            this._viewportStart.invalidate();\n            this._configuration.setModelLineCount(this.model.getLineCount());\n            this._updateConfigurationViewLineCountNow();\n            // Recover viewport\n            if (!this._hasFocus && this.model.getAttachedEditorCount() >= 2 && viewportStartWasValid) {\n                const modelRange = this.model._getTrackedRange(this._viewportStart.modelTrackedRange);\n                if (modelRange) {\n                    const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n                    const viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n                    this.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStart.startLineDelta }, 1 /* ScrollType.Immediate */);\n                }\n            }\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                if (e instanceof textModelEvents.InternalModelContentChangeEvent) {\n                    eventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent));\n                }\n                this._cursor.onModelContentChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            this._tokenizeViewportSoon.schedule();\n        }));\n        this._register(this.model.onDidChangeTokens((e) => {\n            const viewRanges = [];\n            for (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n                const modelRange = e.ranges[j];\n                const viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n                const viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n                viewRanges[j] = {\n                    fromLineNumber: viewStartLineNumber,\n                    toLineNumber: viewEndLineNumber\n                };\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n            if (e.tokenizationSupportChanged) {\n                this._tokenizeViewportSoon.schedule();\n            }\n            this._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguageConfiguration((e) => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguage((e) => {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeOptions((e) => {\n            // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n            if (this._lines.setTabSize(this.model.getOptions().tabSize)) {\n                try {\n                    const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                    eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                    this.viewLayout.onFlushed(this.getLineCount());\n                }\n                finally {\n                    this._eventDispatcher.endEmitViewEvents();\n                }\n                this._updateConfigurationViewLineCount.schedule();\n            }\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeDecorations((e) => {\n            this._decorations.onModelDecorationsChanged();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e));\n        }));\n    }\n    setHiddenAreas(ranges, source) {\n        this.hiddenAreasModel.setHiddenAreas(source, ranges);\n        const mergedRanges = this.hiddenAreasModel.getMergedRanges();\n        if (mergedRanges === this.previousHiddenAreas) {\n            return;\n        }\n        this.previousHiddenAreas = mergedRanges;\n        const stableViewport = this._captureStableViewport();\n        let lineMappingChanged = false;\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            lineMappingChanged = this._lines.setHiddenAreas(mergedRanges);\n            if (lineMappingChanged) {\n                eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                this._cursor.onLineMappingChanged(eventsCollector);\n                this._decorations.onLineMappingChanged();\n                this.viewLayout.onFlushed(this.getLineCount());\n                this.viewLayout.onHeightMaybeChanged();\n            }\n            stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n        this._updateConfigurationViewLineCount.schedule();\n        if (lineMappingChanged) {\n            this._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent());\n        }\n    }\n    getVisibleRangesPlusViewportAboveBelow() {\n        const layoutInfo = this._configuration.options.get(138 /* EditorOption.layoutInfo */);\n        const lineHeight = this._configuration.options.get(63 /* EditorOption.lineHeight */);\n        const linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n        const endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n        return this._toModelVisibleRanges(new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber)));\n    }\n    getVisibleRanges() {\n        const visibleViewRange = this.getCompletelyVisibleViewRange();\n        return this._toModelVisibleRanges(visibleViewRange);\n    }\n    getHiddenAreas() {\n        return this._lines.getHiddenAreas();\n    }\n    _toModelVisibleRanges(visibleViewRange) {\n        const visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        const hiddenAreas = this._lines.getHiddenAreas();\n        if (hiddenAreas.length === 0) {\n            return [visibleRange];\n        }\n        const result = [];\n        let resultLen = 0;\n        let startLineNumber = visibleRange.startLineNumber;\n        let startColumn = visibleRange.startColumn;\n        const endLineNumber = visibleRange.endLineNumber;\n        const endColumn = visibleRange.endColumn;\n        for (let i = 0, len = hiddenAreas.length; i < len; i++) {\n            const hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n            const hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n            if (hiddenEndLineNumber < startLineNumber) {\n                continue;\n            }\n            if (hiddenStartLineNumber > endLineNumber) {\n                continue;\n            }\n            if (startLineNumber < hiddenStartLineNumber) {\n                result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n            }\n            startLineNumber = hiddenEndLineNumber + 1;\n            startColumn = 1;\n        }\n        if (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\n            result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return result;\n    }\n    getCompletelyVisibleViewRange() {\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    getCompletelyVisibleViewRangeAtScrollTop(scrollTop) {\n        const partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    saveState() {\n        const compatViewState = this.viewLayout.saveState();\n        const scrollTop = compatViewState.scrollTop;\n        const firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n        const firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n        const firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n        return {\n            scrollLeft: compatViewState.scrollLeft,\n            firstPosition: firstPosition,\n            firstPositionDeltaTop: firstPositionDeltaTop\n        };\n    }\n    reduceRestoreState(state) {\n        if (typeof state.firstPosition === 'undefined') {\n            // This is a view state serialized by an older version\n            return this._reduceRestoreStateCompatibility(state);\n        }\n        const modelPosition = this.model.validatePosition(state.firstPosition);\n        const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        const scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: scrollTop\n        };\n    }\n    _reduceRestoreStateCompatibility(state) {\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: state.scrollTopWithoutViewZones\n        };\n    }\n    getTabSize() {\n        return this.model.getOptions().tabSize;\n    }\n    getLineCount() {\n        return this._lines.getViewLineCount();\n    }\n    /**\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\n     */\n    setViewport(startLineNumber, endLineNumber, centeredLineNumber) {\n        this._viewportStart.update(this, startLineNumber);\n    }\n    getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n        return this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n    }\n    getLinesIndentGuides(startLineNumber, endLineNumber) {\n        return this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n    }\n    getBracketGuidesInRangeByLine(startLineNumber, endLineNumber, activePosition, options) {\n        return this._lines.getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options);\n    }\n    getLineContent(lineNumber) {\n        return this._lines.getViewLineContent(lineNumber);\n    }\n    getLineLength(lineNumber) {\n        return this._lines.getViewLineLength(lineNumber);\n    }\n    getLineMinColumn(lineNumber) {\n        return this._lines.getViewLineMinColumn(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        return this._lines.getViewLineMaxColumn(lineNumber);\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 1;\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 2;\n    }\n    getDecorationsInViewport(visibleRange, onlyMinimapDecorations = false) {\n        return this._decorations.getDecorationsViewportData(visibleRange, onlyMinimapDecorations).decorations;\n    }\n    getInjectedTextAt(viewPosition) {\n        return this._lines.getInjectedTextAt(viewPosition);\n    }\n    getViewportViewLineRenderingData(visibleRange, lineNumber) {\n        const allInlineDecorations = this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n        const inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    getViewLineRenderingData(lineNumber) {\n        const inlineDecorations = this._decorations.getInlineDecorationsOnLine(lineNumber);\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    _getViewLineRenderingData(lineNumber, inlineDecorations) {\n        const mightContainRTL = this.model.mightContainRTL();\n        const mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n        const tabSize = this.getTabSize();\n        const lineData = this._lines.getViewLineData(lineNumber);\n        if (lineData.inlineDecorations) {\n            inlineDecorations = [\n                ...inlineDecorations,\n                ...lineData.inlineDecorations.map(d => d.toInlineDecoration(lineNumber))\n            ];\n        }\n        return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\n    }\n    getViewLineData(lineNumber) {\n        return this._lines.getViewLineData(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        const result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n        return new MinimapLinesRenderingData(this.getTabSize(), result);\n    }\n    getAllOverviewRulerDecorations(theme) {\n        const decorations = this.model.getOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options));\n        const result = new OverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const decorationOptions = decoration.options;\n            const opts = decorationOptions.overviewRuler;\n            if (!opts) {\n                continue;\n            }\n            const lane = opts.position;\n            if (lane === 0) {\n                continue;\n            }\n            const color = opts.getColor(theme.value);\n            const viewStartLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n            const viewEndLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n            result.accept(color, decorationOptions.zIndex, viewStartLineNumber, viewEndLineNumber, lane);\n        }\n        return result.asArray;\n    }\n    _invalidateDecorationsColorCache() {\n        const decorations = this.model.getOverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const opts1 = decoration.options.overviewRuler;\n            opts1 === null || opts1 === void 0 ? void 0 : opts1.invalidateCachedColor();\n            const opts2 = decoration.options.minimap;\n            opts2 === null || opts2 === void 0 ? void 0 : opts2.invalidateCachedColor();\n        }\n    }\n    getValueInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueInRange(modelRange, eol);\n    }\n    getValueLengthInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueLengthInRange(modelRange, eol);\n    }\n    modifyPosition(position, offset) {\n        const modelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(position);\n        return this.model.modifyPosition(modelPosition, offset);\n    }\n    deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\n        const modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n        if (this.model.getEOL().length === 2) {\n            // This model uses CRLF, so the delta must take that into account\n            if (deltaOffset < 0) {\n                deltaOffset -= lineFeedCnt;\n            }\n            else {\n                deltaOffset += lineFeedCnt;\n            }\n        }\n        const modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n        const resultOffset = modelAnchorOffset + deltaOffset;\n        return this.model.getPositionAt(resultOffset);\n    }\n    getPlainTextToCopy(modelRanges, emptySelectionClipboard, forceCRLF) {\n        const newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n        modelRanges = modelRanges.slice(0);\n        modelRanges.sort(Range.compareRangesUsingStarts);\n        let hasEmptyRange = false;\n        let hasNonEmptyRange = false;\n        for (const range of modelRanges) {\n            if (range.isEmpty()) {\n                hasEmptyRange = true;\n            }\n            else {\n                hasNonEmptyRange = true;\n            }\n        }\n        if (!hasNonEmptyRange) {\n            // all ranges are empty\n            if (!emptySelectionClipboard) {\n                return '';\n            }\n            const modelLineNumbers = modelRanges.map((r) => r.startLineNumber);\n            let result = '';\n            for (let i = 0; i < modelLineNumbers.length; i++) {\n                if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n                    continue;\n                }\n                result += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n            }\n            return result;\n        }\n        if (hasEmptyRange && emptySelectionClipboard) {\n            // mixed empty selections and non-empty selections\n            const result = [];\n            let prevModelLineNumber = 0;\n            for (const modelRange of modelRanges) {\n                const modelLineNumber = modelRange.startLineNumber;\n                if (modelRange.isEmpty()) {\n                    if (modelLineNumber !== prevModelLineNumber) {\n                        result.push(this.model.getLineContent(modelLineNumber));\n                    }\n                }\n                else {\n                    result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n                }\n                prevModelLineNumber = modelLineNumber;\n            }\n            return result.length === 1 ? result[0] : result;\n        }\n        const result = [];\n        for (const modelRange of modelRanges) {\n            if (!modelRange.isEmpty()) {\n                result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n            }\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n    getRichTextToCopy(modelRanges, emptySelectionClipboard) {\n        const languageId = this.model.getLanguageId();\n        if (languageId === PLAINTEXT_LANGUAGE_ID) {\n            return null;\n        }\n        if (modelRanges.length !== 1) {\n            // no multiple selection support at this time\n            return null;\n        }\n        let range = modelRanges[0];\n        if (range.isEmpty()) {\n            if (!emptySelectionClipboard) {\n                // nothing to copy\n                return null;\n            }\n            const lineNumber = range.startLineNumber;\n            range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n        }\n        const fontInfo = this._configuration.options.get(47 /* EditorOption.fontInfo */);\n        const colorMap = this._getColorMap();\n        const hasBadChars = (/[:;\\\\\\/<>]/.test(fontInfo.fontFamily));\n        const useDefaultFontFamily = (hasBadChars || fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily);\n        let fontFamily;\n        if (useDefaultFontFamily) {\n            fontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n        }\n        else {\n            fontFamily = fontInfo.fontFamily;\n            fontFamily = fontFamily.replace(/\"/g, '\\'');\n            const hasQuotesOrIsList = /[,']/.test(fontFamily);\n            if (!hasQuotesOrIsList) {\n                const needsQuotes = /[+ ]/.test(fontFamily);\n                if (needsQuotes) {\n                    fontFamily = `'${fontFamily}'`;\n                }\n            }\n            fontFamily = `${fontFamily}, ${EDITOR_FONT_DEFAULTS.fontFamily}`;\n        }\n        return {\n            mode: languageId,\n            html: (`<div style=\"`\n                + `color: ${colorMap[1 /* ColorId.DefaultForeground */]};`\n                + `background-color: ${colorMap[2 /* ColorId.DefaultBackground */]};`\n                + `font-family: ${fontFamily};`\n                + `font-weight: ${fontInfo.fontWeight};`\n                + `font-size: ${fontInfo.fontSize}px;`\n                + `line-height: ${fontInfo.lineHeight}px;`\n                + `white-space: pre;`\n                + `\">`\n                + this._getHTMLToCopy(range, colorMap)\n                + '</div>')\n        };\n    }\n    _getHTMLToCopy(modelRange, colorMap) {\n        const startLineNumber = modelRange.startLineNumber;\n        const startColumn = modelRange.startColumn;\n        const endLineNumber = modelRange.endLineNumber;\n        const endColumn = modelRange.endColumn;\n        const tabSize = this.getTabSize();\n        let result = '';\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineTokens = this.model.tokenization.getLineTokens(lineNumber);\n            const lineContent = lineTokens.getLineContent();\n            const startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n            const endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n            if (lineContent === '') {\n                result += '<br>';\n            }\n            else {\n                result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n            }\n        }\n        return result;\n    }\n    _getColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        const result = ['#000000'];\n        if (colorMap) {\n            for (let i = 1, len = colorMap.length; i < len; i++) {\n                result[i] = Color.Format.CSS.formatHex(colorMap[i]);\n            }\n        }\n        return result;\n    }\n    //#region cursor operations\n    getPrimaryCursorState() {\n        return this._cursor.getPrimaryCursorState();\n    }\n    getLastAddedCursorIndex() {\n        return this._cursor.getLastAddedCursorIndex();\n    }\n    getCursorStates() {\n        return this._cursor.getCursorStates();\n    }\n    setCursorStates(source, reason, states) {\n        return this._withViewEventsCollector(eventsCollector => this._cursor.setStates(eventsCollector, source, reason, states));\n    }\n    getCursorColumnSelectData() {\n        return this._cursor.getCursorColumnSelectData();\n    }\n    getCursorAutoClosedCharacters() {\n        return this._cursor.getAutoClosedCharacters();\n    }\n    setCursorColumnSelectData(columnSelectData) {\n        this._cursor.setCursorColumnSelectData(columnSelectData);\n    }\n    getPrevEditOperationType() {\n        return this._cursor.getPrevEditOperationType();\n    }\n    setPrevEditOperationType(type) {\n        this._cursor.setPrevEditOperationType(type);\n    }\n    getSelection() {\n        return this._cursor.getSelection();\n    }\n    getSelections() {\n        return this._cursor.getSelections();\n    }\n    getPosition() {\n        return this._cursor.getPrimaryCursorState().modelState.position;\n    }\n    setSelections(source, selections, reason = 0 /* CursorChangeReason.NotSet */) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.setSelections(eventsCollector, source, selections, reason));\n    }\n    saveCursorState() {\n        return this._cursor.saveState();\n    }\n    restoreCursorState(states) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.restoreState(eventsCollector, states));\n    }\n    _executeCursorEdit(callback) {\n        if (this._cursor.context.cursorConfig.readOnly) {\n            // we cannot edit when read only...\n            this._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n            return;\n        }\n        this._withViewEventsCollector(callback);\n    }\n    executeEdits(source, edits, cursorStateComputer) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer));\n    }\n    startComposition() {\n        this._executeCursorEdit(eventsCollector => this._cursor.startComposition(eventsCollector));\n    }\n    endComposition(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.endComposition(eventsCollector, source));\n    }\n    type(text, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.type(eventsCollector, text, source));\n    }\n    compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source));\n    }\n    paste(text, pasteOnNewLine, multicursorText, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source));\n    }\n    cut(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.cut(eventsCollector, source));\n    }\n    executeCommand(command, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommand(eventsCollector, command, source));\n    }\n    executeCommands(commands, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommands(eventsCollector, commands, source));\n    }\n    revealPrimaryCursor(source, revealHorizontal, minimalReveal = false) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.revealPrimary(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */));\n    }\n    revealTopMostCursor(source) {\n        const viewPosition = this._cursor.getTopMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealBottomMostCursor(source) {\n        const viewPosition = this._cursor.getBottomMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealRange(source, revealHorizontal, viewRange, verticalType, scrollType) {\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, verticalType, revealHorizontal, scrollType)));\n    }\n    //#endregion\n    //#region viewLayout\n    changeWhitespace(callback) {\n        const hadAChange = this.viewLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n            this._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n        }\n    }\n    //#endregion\n    _withViewEventsCollector(callback) {\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            return callback(eventsCollector);\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n    }\n    normalizePosition(position, affinity) {\n        return this._lines.normalizePosition(position, affinity);\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n    getLineIndentColumn(lineNumber) {\n        return this._lines.getLineIndentColumn(lineNumber);\n    }\n}\nclass ViewportStart {\n    static create(model) {\n        const viewportStartLineTrackedRange = model._setTrackedRange(null, new Range(1, 1, 1, 1), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        return new ViewportStart(model, 1, false, viewportStartLineTrackedRange, 0);\n    }\n    get viewLineNumber() {\n        return this._viewLineNumber;\n    }\n    get isValid() {\n        return this._isValid;\n    }\n    get modelTrackedRange() {\n        return this._modelTrackedRange;\n    }\n    get startLineDelta() {\n        return this._startLineDelta;\n    }\n    constructor(_model, _viewLineNumber, _isValid, _modelTrackedRange, _startLineDelta) {\n        this._model = _model;\n        this._viewLineNumber = _viewLineNumber;\n        this._isValid = _isValid;\n        this._modelTrackedRange = _modelTrackedRange;\n        this._startLineDelta = _startLineDelta;\n    }\n    dispose() {\n        this._model._setTrackedRange(this._modelTrackedRange, null, 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n    }\n    update(viewModel, startLineNumber) {\n        const position = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, viewModel.getLineMinColumn(startLineNumber)));\n        const viewportStartLineTrackedRange = viewModel.model._setTrackedRange(this._modelTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        const viewportStartLineTop = viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n        const scrollTop = viewModel.viewLayout.getCurrentScrollTop();\n        this._viewLineNumber = startLineNumber;\n        this._isValid = true;\n        this._modelTrackedRange = viewportStartLineTrackedRange;\n        this._startLineDelta = scrollTop - viewportStartLineTop;\n    }\n    invalidate() {\n        this._isValid = false;\n    }\n}\nclass OverviewRulerDecorations {\n    constructor() {\n        this._asMap = Object.create(null);\n        this.asArray = [];\n    }\n    accept(color, zIndex, startLineNumber, endLineNumber, lane) {\n        const prevGroup = this._asMap[color];\n        if (prevGroup) {\n            const prevData = prevGroup.data;\n            const prevLane = prevData[prevData.length - 3];\n            const prevEndLineNumber = prevData[prevData.length - 1];\n            if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n                // merge into prev\n                if (endLineNumber > prevEndLineNumber) {\n                    prevData[prevData.length - 1] = endLineNumber;\n                }\n                return;\n            }\n            // push\n            prevData.push(lane, startLineNumber, endLineNumber);\n        }\n        else {\n            const group = new OverviewRulerDecorationsGroup(color, zIndex, [lane, startLineNumber, endLineNumber]);\n            this._asMap[color] = group;\n            this.asArray.push(group);\n        }\n    }\n}\nclass HiddenAreasModel {\n    constructor() {\n        this.hiddenAreas = new Map();\n        this.shouldRecompute = false;\n        this.ranges = [];\n    }\n    setHiddenAreas(source, ranges) {\n        const existing = this.hiddenAreas.get(source);\n        if (existing && rangeArraysEqual(existing, ranges)) {\n            return;\n        }\n        this.hiddenAreas.set(source, ranges);\n        this.shouldRecompute = true;\n    }\n    /**\n     * The returned array is immutable.\n    */\n    getMergedRanges() {\n        if (!this.shouldRecompute) {\n            return this.ranges;\n        }\n        this.shouldRecompute = false;\n        const newRanges = Array.from(this.hiddenAreas.values()).reduce((r, hiddenAreas) => mergeLineRangeArray(r, hiddenAreas), []);\n        if (rangeArraysEqual(this.ranges, newRanges)) {\n            return this.ranges;\n        }\n        this.ranges = newRanges;\n        return this.ranges;\n    }\n}\nfunction mergeLineRangeArray(arr1, arr2) {\n    const result = [];\n    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n        const item1 = arr1[i];\n        const item2 = arr2[j];\n        if (item1.endLineNumber < item2.startLineNumber - 1) {\n            result.push(arr1[i++]);\n        }\n        else if (item2.endLineNumber < item1.startLineNumber - 1) {\n            result.push(arr2[j++]);\n        }\n        else {\n            const startLineNumber = Math.min(item1.startLineNumber, item2.startLineNumber);\n            const endLineNumber = Math.max(item1.endLineNumber, item2.endLineNumber);\n            result.push(new Range(startLineNumber, 1, endLineNumber, 1));\n            i++;\n            j++;\n        }\n    }\n    while (i < arr1.length) {\n        result.push(arr1[i++]);\n    }\n    while (j < arr2.length) {\n        result.push(arr2[j++]);\n    }\n    return result;\n}\nfunction rangeArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!arr1[i].equalsRange(arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Maintain a stable viewport by trying to keep the first line in the viewport constant.\n */\nclass StableViewport {\n    constructor(viewportStartModelPosition, startLineDelta) {\n        this.viewportStartModelPosition = viewportStartModelPosition;\n        this.startLineDelta = startLineDelta;\n    }\n    recoverViewportStart(coordinatesConverter, viewLayout) {\n        if (!this.viewportStartModelPosition) {\n            return;\n        }\n        const viewPosition = coordinatesConverter.convertModelPositionToViewPosition(this.viewportStartModelPosition);\n        const viewPositionTop = viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n        viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this.startLineDelta }, 1 /* ScrollType.Immediate */);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable } from '../../base/common/lifecycle.js';\nexport class ViewModelEventDispatcher extends Disposable {\n    constructor() {\n        super();\n        this._onEvent = this._register(new Emitter());\n        this.onEvent = this._onEvent.event;\n        this._eventHandlers = [];\n        this._viewEventQueue = null;\n        this._isConsumingViewEventQueue = false;\n        this._collector = null;\n        this._collectorCnt = 0;\n        this._outgoingEvents = [];\n    }\n    emitOutgoingEvent(e) {\n        this._addOutgoingEvent(e);\n        this._emitOutgoingEvents();\n    }\n    _addOutgoingEvent(e) {\n        for (let i = 0, len = this._outgoingEvents.length; i < len; i++) {\n            const mergeResult = (this._outgoingEvents[i].kind === e.kind ? this._outgoingEvents[i].attemptToMerge(e) : null);\n            if (mergeResult) {\n                this._outgoingEvents[i] = mergeResult;\n                return;\n            }\n        }\n        // not merged\n        this._outgoingEvents.push(e);\n    }\n    _emitOutgoingEvents() {\n        while (this._outgoingEvents.length > 0) {\n            if (this._collector || this._isConsumingViewEventQueue) {\n                // right now collecting or emitting view events, so let's postpone emitting\n                return;\n            }\n            const event = this._outgoingEvents.shift();\n            if (event.isNoOp()) {\n                continue;\n            }\n            this._onEvent.fire(event);\n        }\n    }\n    addViewEventHandler(eventHandler) {\n        for (let i = 0, len = this._eventHandlers.length; i < len; i++) {\n            if (this._eventHandlers[i] === eventHandler) {\n                console.warn('Detected duplicate listener in ViewEventDispatcher', eventHandler);\n            }\n        }\n        this._eventHandlers.push(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        for (let i = 0; i < this._eventHandlers.length; i++) {\n            if (this._eventHandlers[i] === eventHandler) {\n                this._eventHandlers.splice(i, 1);\n                break;\n            }\n        }\n    }\n    beginEmitViewEvents() {\n        this._collectorCnt++;\n        if (this._collectorCnt === 1) {\n            this._collector = new ViewModelEventsCollector();\n        }\n        return this._collector;\n    }\n    endEmitViewEvents() {\n        this._collectorCnt--;\n        if (this._collectorCnt === 0) {\n            const outgoingEvents = this._collector.outgoingEvents;\n            const viewEvents = this._collector.viewEvents;\n            this._collector = null;\n            for (const outgoingEvent of outgoingEvents) {\n                this._addOutgoingEvent(outgoingEvent);\n            }\n            if (viewEvents.length > 0) {\n                this._emitMany(viewEvents);\n            }\n        }\n        this._emitOutgoingEvents();\n    }\n    emitSingleViewEvent(event) {\n        try {\n            const eventsCollector = this.beginEmitViewEvents();\n            eventsCollector.emitViewEvent(event);\n        }\n        finally {\n            this.endEmitViewEvents();\n        }\n    }\n    _emitMany(events) {\n        if (this._viewEventQueue) {\n            this._viewEventQueue = this._viewEventQueue.concat(events);\n        }\n        else {\n            this._viewEventQueue = events;\n        }\n        if (!this._isConsumingViewEventQueue) {\n            this._consumeViewEventQueue();\n        }\n    }\n    _consumeViewEventQueue() {\n        try {\n            this._isConsumingViewEventQueue = true;\n            this._doConsumeQueue();\n        }\n        finally {\n            this._isConsumingViewEventQueue = false;\n        }\n    }\n    _doConsumeQueue() {\n        while (this._viewEventQueue) {\n            // Empty event queue, as events might come in while sending these off\n            const events = this._viewEventQueue;\n            this._viewEventQueue = null;\n            // Use a clone of the event handlers list, as they might remove themselves\n            const eventHandlers = this._eventHandlers.slice(0);\n            for (const eventHandler of eventHandlers) {\n                eventHandler.handleEvents(events);\n            }\n        }\n    }\n}\nexport class ViewModelEventsCollector {\n    constructor() {\n        this.viewEvents = [];\n        this.outgoingEvents = [];\n    }\n    emitViewEvent(event) {\n        this.viewEvents.push(event);\n    }\n    emitOutgoingEvent(e) {\n        this.outgoingEvents.push(e);\n    }\n}\nexport class ContentSizeChangedEvent {\n    constructor(oldContentWidth, oldContentHeight, contentWidth, contentHeight) {\n        this.kind = 0 /* OutgoingViewModelEventKind.ContentSizeChanged */;\n        this._oldContentWidth = oldContentWidth;\n        this._oldContentHeight = oldContentHeight;\n        this.contentWidth = contentWidth;\n        this.contentHeight = contentHeight;\n        this.contentWidthChanged = (this._oldContentWidth !== this.contentWidth);\n        this.contentHeightChanged = (this._oldContentHeight !== this.contentHeight);\n    }\n    isNoOp() {\n        return (!this.contentWidthChanged && !this.contentHeightChanged);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new ContentSizeChangedEvent(this._oldContentWidth, this._oldContentHeight, other.contentWidth, other.contentHeight);\n    }\n}\nexport class FocusChangedEvent {\n    constructor(oldHasFocus, hasFocus) {\n        this.kind = 1 /* OutgoingViewModelEventKind.FocusChanged */;\n        this.oldHasFocus = oldHasFocus;\n        this.hasFocus = hasFocus;\n    }\n    isNoOp() {\n        return (this.oldHasFocus === this.hasFocus);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new FocusChangedEvent(this.oldHasFocus, other.hasFocus);\n    }\n}\nexport class ScrollChangedEvent {\n    constructor(oldScrollWidth, oldScrollLeft, oldScrollHeight, oldScrollTop, scrollWidth, scrollLeft, scrollHeight, scrollTop) {\n        this.kind = 2 /* OutgoingViewModelEventKind.ScrollChanged */;\n        this._oldScrollWidth = oldScrollWidth;\n        this._oldScrollLeft = oldScrollLeft;\n        this._oldScrollHeight = oldScrollHeight;\n        this._oldScrollTop = oldScrollTop;\n        this.scrollWidth = scrollWidth;\n        this.scrollLeft = scrollLeft;\n        this.scrollHeight = scrollHeight;\n        this.scrollTop = scrollTop;\n        this.scrollWidthChanged = (this._oldScrollWidth !== this.scrollWidth);\n        this.scrollLeftChanged = (this._oldScrollLeft !== this.scrollLeft);\n        this.scrollHeightChanged = (this._oldScrollHeight !== this.scrollHeight);\n        this.scrollTopChanged = (this._oldScrollTop !== this.scrollTop);\n    }\n    isNoOp() {\n        return (!this.scrollWidthChanged && !this.scrollLeftChanged && !this.scrollHeightChanged && !this.scrollTopChanged);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new ScrollChangedEvent(this._oldScrollWidth, this._oldScrollLeft, this._oldScrollHeight, this._oldScrollTop, other.scrollWidth, other.scrollLeft, other.scrollHeight, other.scrollTop);\n    }\n}\nexport class ViewZonesChangedEvent {\n    constructor() {\n        this.kind = 3 /* OutgoingViewModelEventKind.ViewZonesChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class HiddenAreasChangedEvent {\n    constructor() {\n        this.kind = 4 /* OutgoingViewModelEventKind.HiddenAreasChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class CursorStateChangedEvent {\n    constructor(oldSelections, selections, oldModelVersionId, modelVersionId, source, reason, reachedMaxCursorCount) {\n        this.kind = 6 /* OutgoingViewModelEventKind.CursorStateChanged */;\n        this.oldSelections = oldSelections;\n        this.selections = selections;\n        this.oldModelVersionId = oldModelVersionId;\n        this.modelVersionId = modelVersionId;\n        this.source = source;\n        this.reason = reason;\n        this.reachedMaxCursorCount = reachedMaxCursorCount;\n    }\n    static _selectionsAreEqual(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        const aLen = a.length;\n        const bLen = b.length;\n        if (aLen !== bLen) {\n            return false;\n        }\n        for (let i = 0; i < aLen; i++) {\n            if (!a[i].equalsSelection(b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    isNoOp() {\n        return (CursorStateChangedEvent._selectionsAreEqual(this.oldSelections, this.selections)\n            && this.oldModelVersionId === this.modelVersionId);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new CursorStateChangedEvent(this.oldSelections, other.selections, this.oldModelVersionId, other.modelVersionId, other.source, other.reason, this.reachedMaxCursorCount || other.reachedMaxCursorCount);\n    }\n}\nexport class ReadOnlyEditAttemptEvent {\n    constructor() {\n        this.kind = 5 /* OutgoingViewModelEventKind.ReadOnlyEditAttempt */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class ModelDecorationsChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 7 /* OutgoingViewModelEventKind.ModelDecorationsChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelLanguageChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 8 /* OutgoingViewModelEventKind.ModelLanguageChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelLanguageConfigurationChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 9 /* OutgoingViewModelEventKind.ModelLanguageConfigurationChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelContentChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 10 /* OutgoingViewModelEventKind.ModelContentChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelOptionsChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 11 /* OutgoingViewModelEventKind.ModelOptionsChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelTokensChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 12 /* OutgoingViewModelEventKind.ModelTokensChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\n"],"names":["BracketInfo","_createClass","range","nestingLevel","nestingLevelOfEqualBracketType","isInvalid","_classCallCheck","this","BracketPairWithMinIndentationInfo","_BracketPairInfo","_inherits","_super","_createSuper","openingBracketRange","closingBracketRange","bracketPairNode","minVisibleColumnIndentation","_this","call","BracketPairInfo","key","get","openingBracket","bracketInfo","ModelRawFlush","changeType","LineInjectedText","ownerId","lineNumber","column","options","order","value","lineText","injectedTexts","length","_step","result","lastOriginalOffset","_iterator","_createForOfIteratorHelper","s","n","done","injectedText","substring","content","err","e","f","decorations","_step2","_iterator2","decoration","before","push","startLineNumber","startColumn","after","endLineNumber","endColumn","sort","a","b","ModelRawLineChanged","detail","ModelRawLinesDeleted","fromLineNumber","toLineNumber","ModelRawLinesInserted","ModelRawEOLChanged","ModelRawContentChangedEvent","changes","versionId","isUndoing","isRedoing","resultingSelection","type","i","len","concat","ModelInjectedTextChangedEvent","InternalModelContentChangeEvent","rawContentChangedEvent","contentChangedEvent","other","merge","_mergeChangeEvents","eol","isFlush","HorizontalGuidesState","IndentGuide","visibleColumn","className","horizontalLine","forWrappedLinesAfterColumn","forWrappedLinesBeforeOrAtColumn","Error","IndentGuideHorizontalLine","top","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","then","apply","TokenizationRegistry","_map","Map","_factories","_onDidChange","Emitter","onDidChange","event","_colorMap","languages","fire","changedLanguages","changedColorMap","language","support","set","toDisposable","delete","languageId","factory","_a","_this2","dispose","myData","TokenizationSupportFactoryData","v","_regeneratorRuntime","mark","_callee","tokenizationSupport","wrap","_context","prev","abrupt","isResolved","stop","colorMap","Array","from","keys","_Disposable","_registry","_languageId","_factory","_this3","_isDisposed","_resolvePromise","_isResolved","_get","_getPrototypeOf","prototype","_callee2","_context2","_create","_callee3","_context3","createTokenizationSupport","sent","_register","register","Disposable","ContiguousMultilineTokens","tokens","_startLineNumber","_tokens","lineTokens","ContiguousMultilineTokensBuilder","last","appendLineTokens","EMPTY_LINE_TOKENS","Uint32Array","buffer","ContiguousTokensEditing","toChIndex","fromChIndex","toUint32Array","lineTextLength","tokensCount","dest","lastEnd","fromTokenIndex","LineTokens","fromTokenStartOffset","delta","tokenIndex","tokenEndOffset","tmp","subarray","_otherTokens","myTokens","otherTokens","otherTokensCount","chIndex","textLength","arr","ContiguousTokensStore","languageIdCodec","_lineTokens","_len","_languageIdCodec","topLevelLanguageId","lineIndex","rawLineTokens","getDefaultMetadata","encodeLanguageId","start","deleteCount","splice","insertIndex","insertCount","arrays","checkEquality","_massageTokens","_ensureLine","oldTokens","_equals","eolCount","firstLineLength","_acceptDeleteRange","_acceptInsertText","Position","firstLineIndex","deleteEnding","lastLineIndex","lastLineTokens","deleteBeginning","append","_deleteLines","position","insert","_insertLines","hasDifferentLanguageId","TokenMetadata","byteOffset","byteLength","_b","text","decoder","_lineTokensBrand","undefined","_tokensCount","_text","slicedEquals","sliceFromTokenIndex","sliceTokenCount","to","metadata","decodeLanguageId","offset","findIndexInTokensArray","startOffset","endOffset","deltaOffset","SliceLineTokens","insertTokens","nextOriginalTokenIdx","nextInsertTokenIdx","newTokens","originalEndOffset","nextOriginalTokenEndOffset","nextInsertToken","tokenMetadata","lineContent","defaultMetadata","defaultTokenMetadata","lastTokenIndex","desiredIndex","low","high","mid","Math","floor","source","_source","_startOffset","_endOffset","_deltaOffset","_firstTokenIndex","findTokenIndexAtOffset","getCount","getStartOffset","getMetadata","getLanguageId","getLineContent","getForeground","getEndOffset","min","getClassName","getInlineStyle","getPresentation","SparseMultilineTokens","_endLineNumber","getMaxDeltaLine","toString","isEmpty","getLineTokens","deltaRange","getRange","Range","startLineIndex","endLineIndex","removeTokens","_updateEndLineNumber","_this$_tokens$split","split","_this$_tokens$split2","_slicedToArray","bDeltaLine","_countEOL","countEOL","_countEOL2","lastLineLength","acceptEdit","charCodeAt","firstCharCode","deletedLinesCount","tokenMaxDeltaLine","clear","deletedBefore","acceptDeleteRange","acceptInsertText","SparseMultilineTokensStorage","_tokenCount","pieces","_getDeltaLine","_getStartCharacter","_getEndCharacter","join","tokenCount","_getTokenCount","startChar","maxDeltaLine","endChar","deltaLine","midDeltaLine","max","SparseLineTokens","startDeltaLine","endDeltaLine","newTokenCount","hasDeletedTokens","firstDeltaLine","srcOffset","tokenDeltaLine","tokenStartCharacter","tokenEndCharacter","destOffset","aTokens","bTokens","destTokens","destFirstDeltaLine","horizontalShiftForFirstLineTokens","startCharacter","endCharacter","deletedLineCount","character","isInsertingPreciselyOneWordCharacter","tokenLength","SparseTokensStore","_pieces","_isComplete","isComplete","_range","_firstRange","_lastRange","plusRange","insertPosition","piece","index","_piece$split","_piece$split2","_findFirstPieceWithLine","aLen","bLen","aIndex","resultLen","lastEndOffset","emitToken","bIndex","bStartCharacter","getStartCharacter","bEndCharacter","getEndCharacter","bMetadata","bMask","aMask","aMergeIndex","ViewEventHandler","_shouldRender","events","shouldRender","onCompositionStart","onCompositionEnd","onConfigurationChanged","onCursorStateChanged","onDecorationsChanged","onFlushed","onFocusChanged","onLanguageConfigurationChanged","onLineMappingChanged","onLinesChanged","onLinesDeleted","onLinesInserted","onRevealRangeRequest","onScrollChanged","onTokensChanged","onThemeChanged","onTokensColorsChanged","onZonesChanged","console","info","ViewCompositionStartEvent","ViewCompositionEndEvent","ViewConfigurationChangedEvent","id","hasChanged","ViewCursorStateChangedEvent","selections","modelSelections","reason","ViewDecorationsChangedEvent","affectsMinimap","affectsOverviewRuler","ViewFlushedEvent","ViewFocusChangedEvent","isFocused","ViewLanguageConfigurationEvent","ViewLineMappingChangedEvent","ViewLinesChangedEvent","count","ViewLinesDeletedEvent","ViewLinesInsertedEvent","ViewRevealRangeRequestEvent","minimalReveal","verticalType","revealHorizontal","scrollType","ViewScrollChangedEvent","scrollWidth","scrollLeft","scrollHeight","scrollTop","scrollWidthChanged","scrollLeftChanged","scrollHeightChanged","scrollTopChanged","ViewThemeChangedEvent","theme","ViewTokensChangedEvent","ranges","ViewTokensColorsChangedEvent","ViewZonesChangedEvent","LineDecoration","_lineDecorationBrand","lineLength","r","rLength","dec","lineDecorations","minLineColumn","maxLineColumn","d","inlineClassName","ORDER","typeCmp","_typeCompare","DecorationSegment","Stack","stopOffsets","classNames","maxStopOffset","nextStartOffset","_metadata","stopOffset","LineDecorationsNormalizer","stack","charCodeBefore","strings","currentStartOffset","currentEndOffset","consumeLowerThan","LinePart","endIndex","containsRTL","_linePartBrand","LineRange","startIndex","otherLineRange","RenderLineInput","useMonospaceOptimizations","canUseHalfwidthRightwardsArrow","continuesWithWrappedLine","isBasicASCII","fauxIndentLength","tabSize","startVisibleColumn","spaceWidth","middotWidth","wsmiddotWidth","stopRenderingLineAfter","renderWhitespace","renderControlCharacters","fontLigatures","selectionsOnLine","abs","renderSpaceWidth","renderSpaceCharCode","otherSelections","equals","sameSelection","DomPosition","partIndex","charIndex","CharacterMapping","partCount","_data","_horizontalOffset","horizontalOffset","partData","charOffset","charOffsetToPartData","getPartIndex","getCharIndex","domPosition","partLength","partDataToCharOffset","searchEntry","midEntry","minEntry","maxEntry","minPartIndex","RenderLineOutput","characterMapping","containsForeignElements","_renderLineOutputBrand","renderViewLine","input","sb","appendString","beforeCount","afterCount","lineDecoration","setColumnInfo","fontIsMonospace","isOverflowing","overflowingCharCount","parts","lastCharacterMappingDefined","charOffsetInPart","charHorizontalOffset","partDisplacement","tokensLen","part","partEndIndex","partType","partContainsRTL","partRendersWhitespace","isWhitespace","partRendersWhitespaceWithWidth","partIsEmptyAndHasPseudoAfter","isPseudoAfter","appendASCIICharCode","partWidth","_charIndex","_visibleColumn","charWidth","String","producedCharacters","appendCharCode","space","charCode","isControlCharacter","to4CharHex","nls","toFixed","renderOverflowingCharCount","_renderLine","lineContainsRTL","tokenContainsRTL","transformAndRemoveOverflowing","lastLinePart","token","tokenEndIndex","extractControlCharacters","lastNonWhitespaceIndex","onlyBoundary","onlyTrailing","generateLinePartForEachWhitespace","tokenType","tokensLength","lineIsEmptyOrWhitespace","firstNonWhitespaceIndex","wasInWhitespace","currentSelectionIndex","currentSelection","tmpIndent","chCode","isInWhitespace","nextChCode","generateWhitespace","lastCharCode","prevCharCode","_applyRenderWhitespace","_lineDecorations","lineDecorationsLen","lineDecorationIndex","lastResultEndIndex","lastTokenEndIndex","_applyInlineDecorations","onlyAtSpaces","lastSpaceOffset","currTokenStart","j","diff","piecesCount","ceil","pieceEndIndex","splitLargeTokens","ResolvedRenderLineInput","resolveRenderLineInput","RenderLineOutput2","html","renderViewLine2","StringBuilder","out","build","toUpperCase","padStart","ViewportData","partialData","whitespaceViewportData","model","relativeVerticalOffset","bigNumbersDelta","_model","visibleRange","getLineMinColumn","getLineMaxColumn","getViewportViewLineRenderingData","getDecorationsInViewport","Viewport","left","width","height","_viewportBrand","MinimapLinesRenderingData","data","ViewLineData","minColumn","maxColumn","inlineDecorations","_viewLineDataBrand","ViewLineRenderingData","mightContainRTL","mightContainNonBasicASCII","InlineDecoration","SingleLineInlineDecoration","inlineClassNameAffectsLetterSpacing","ViewModelDecoration","_viewModelDecorationBrand","OverviewRulerDecorationsGroup","color","zIndex","MinimapTokensColorTracker","_updateColorMap","_colors","RGBA8","_backgroundIsLight","colorId","rgba","g","round","backgroundLuminosity","getRelativeLuminance","_INSTANCE","markAsSingleton","MonospaceLineBreaksComputerFactory","breakBeforeChars","breakAfterChars","classifier","WrappingCharacterClassifier","fontInfo","wrappingColumn","wrappingIndent","wordBreak","requests","previousBreakingData","addRequest","previousLineBreakData","finalize","columnsForFullWidthChar","typicalFullwidthCharacterWidth","typicalHalfwidthCharacterWidth","injectionOptions","createLineBreaks","createLineBreaksFromPreviousLineBreaks","arrPool1","arrPool2","_CharacterClassifier","BREAK_BEFORE","BREAK_AFTER","_asciiMap","_defaultValue","CharacterClassifier","firstLineBreakColumn","isKeepAll","prevBreakingOffsets","breakOffsets","prevBreakingOffsetsVisibleColumn","breakOffsetsVisibleColumn","wrappedTextIndentLength","computeWrappedTextIndentLength","wrappedLineBreakColumn","breakingOffsets","breakingOffsetsVisibleColumn","breakingOffsetsCount","lastBreakingOffset","lastBreakingOffsetVisibleColumn","breakingColumn","prevLen","prevIndex","bestDistance","distance","prevBreakOffset","prevBreakOffsetVisibleColumn","breakOffset","breakOffsetVisibleColumn","forcedBreakOffset","forcedBreakOffsetVisibleColumn","prevCharCodeClass","entireLineFits","charStartOffset","charCodeClass","computeCharWidth","canBreak","hitATabCharacter","prevCharWidth","remainingWidthOfNextLine","charCodeAtForcedBreakOffset","_lineText","injectionOffsets","map","t","ModelLineProjectionData","tabCharacterWidth","numberOfAdditionalTabs","ColorZone","_colorZoneBrand","OverviewRulerZone","heightInLines","_overviewRulerZoneBrand","_colorZone","colorZone","OverviewZoneManager","getVerticalOffsetForLine","_getVerticalOffsetForLine","_zones","_colorZonesInvalid","_lineHeight","_domWidth","_domHeight","_outerHeight","_pixelRatio","_lastAssignedId","_color2Id","Object","create","_id2Color","newZones","compare","lineHeight","pixelRatio","outerHeight","colorZonesInvalid","totalHeight","getCanvasHeight","heightRatio","halfMinimumHeight","allColorZones","zone","getColorZones","offset1","offset2","y1","y2","ycenter","halfHeight","setColorZone","ViewContext","configuration","EditorTheme","viewModel","viewLayout","eventHandler","addViewEventHandler","removeViewEventHandler","ViewModelDecorations","editorId","linesCollection","coordinatesConverter","_cachedOnlyMinimapDecorations","_linesCollection","_coordinatesConverter","_decorationsCache","_cachedModelDecorationsResolver","_cachedModelDecorationsResolverViewRange","_clearCachedModelDecorationsResolver","modelDecoration","viewRange","modelRange","isWholeLine","convertModelPositionToViewPosition","end","convertModelRangeToViewRange","onlyMinimapDecorations","arguments","cacheIsValid","equalsRange","_getDecorationsInRange","getViewLineMinColumn","getViewLineMaxColumn","modelDecorations","getDecorationsInRange","filterValidationDecorations","decorationsInViewport","decorationsInViewportLen","decorationOptions","isModelDecorationVisible","viewModelDecoration","_getOrCreateViewModelDecoration","inlineDecoration","intersectedStartLineNumber","intersectedEndLineNumber","beforeContentClassName","afterContentClassName","hideInCommentTokens","isModelDecorationInComment","hideInStringTokens","isModelDecorationInString","testTokensInRange","callback","tokenization","isFirstLine","isEndLine","tokenIdx","getStandardTokenType","PendingChanges","_hasPending","_inserts","_changes","_removes","x","linesLayout","inserts","removes","_commitPendingChanges","EditorWhitespace","afterLineNumber","ordinal","minWidth","prefixSum","LinesLayout","lineCount","paddingTop","paddingBottom","_instanceId","INSTANCE_COUNT","_pendingChanges","_lastWhitespaceId","_arr","_prefixSumValidIndex","_minWidth","_lineCount","_paddingTop","_paddingBottom","_checkPendingChanges","hadAChange","insertWhitespace","heightInPx","changeOneWhitespace","newAfterLineNumber","newHeight","change","removeWhitespace","remove","commit","_insertWhitespace","_changeOneWhitespace","_step3","_iterator3","_findWhitespaceIndex","_removeWhitespace","_step4","toRemove","Set","_iterator4","add","_step5","toChange","_iterator5","applyRemoveAndChange","whitespaces","_step6","_iterator6","whitespace","has","mustCommit","findInsertionIndex","removeIndex","getWhitespacesAccumulatedHeight","getWhitespacesTotalHeight","lastWhitespaceBeforeLineNumber","_findLastWhitespaceBeforeLineNumber","firstWhitespaceAfterLineNumber","_findFirstWhitespaceAfterLineNumber","includeViewZones","getWhitespaceAccumulatedHeightBeforeLineNumber","verticalOffset","getLinesTotalHeight","linesCount","minLineNumber","maxLineNumber","midLineNumber","midLineNumberVerticalOffset","getVerticalOffsetForLineNumber","verticalOffset1","verticalOffset2","currentWhitespaceHeight","currentWhitespaceAfterLineNumber","getLineNumberAtOrAfterVerticalOffset","startLineNumberVerticalOffset","whitespaceIndex","getFirstWhitespaceIndexAfterLineNumber","whitespaceCount","getWhitespacesCount","getAfterLineNumberForWhitespaceIndex","getHeightForWhitespaceIndex","currentVerticalOffset","currentLineRelativeOffset","STEP_SIZE","linesOffsets","verticalCenter","centeredLineNumber","endLineNumberVerticalOffset","completelyVisibleStartLineNumber","completelyVisibleEndLineNumber","minWhitespaceIndex","maxWhitespaceIndex","getVerticalOffsetForWhitespaceIndex","midWhitespaceIndex","midWhitespaceVerticalOffset","candidateIndex","getWhitespaceIndexAtOrAfterVerticallOffset","candidateTop","candidateHeight","getIdForWhitespaceIndex","slice","EditorScrollDimensions","contentWidth","contentHeight","EditorScrollable","smoothScrollDuration","scheduleAtNextAnimationFrame","_onDidContentSizeChange","onDidContentSizeChange","_dimensions","_scrollable","Scrollable","forceIntegerValues","onDidScroll","onScroll","setSmoothScrollDuration","scrollPosition","validateScrollPosition","dimensions","oldDimensions","setScrollDimensions","contentWidthChanged","contentHeightChanged","ContentSizeChangedEvent","getFutureScrollPosition","getCurrentScrollPosition","update","setScrollPositionNow","setScrollPositionSmooth","ViewLayout","_Disposable2","_super2","_configuration","layoutInfo","padding","_linesLayout","bottom","_configureSmoothScrollDuration","_updateHeight","getScrollable","setLineHeight","setPadding","scrollDimensions","getScrollDimensions","_getContentHeight","scrollbar","horizontal","horizontalScrollbarSize","_getHorizontalScrollbarHeight","currentScrollPosition","maxLineWidth","wrappingInfo","isViewportWrapping","minimap","enabled","side","verticalScrollbarWidth","extraHorizontalSpace","whitespaceMinWidth","getWhitespaceMinWidth","_computeContentWidth","firstLineNumberInViewport","scrollTopWithoutViewZones","changeWhitespace","onHeightMaybeChanged","getVerticalOffsetAfterLineNumber","isAfterLines","isInTopPadding","isInBottomPadding","getWhitespaceAtVerticalOffset","visibleBox","getCurrentViewport","getLinesViewportData","getWhitespaceViewportData","getWhitespaces","deltaScrollLeft","deltaScrollTop","createModelLineProjection","lineBreakData","isVisible","IdentityModelLineProjection","INSTANCE","HiddenModelLineProjection","ModelLineProjection","_projectionData","_isVisible","getOutputLineCount","modelLineNumber","outputLineIndex","_assertVisible","startOffsetInInputWithInjections","endOffsetInInputWithInjections","idx","getValueInRange","spaces","getLineLength","_modelLineNumber","getMinOutputOffset","getMaxOutputOffset","getViewLinesData","outputLineIdx","globalStartIndex","needed","lineWithInjections","inlineDecorationsPerOutputLine","totalInjectedTextLengthBefore","currentInjectedOffset","lineStartOffsetInInputWithInjections","lineEndOffsetInInputWithInjections","injectedTextStartOffsetInInputWithInjections","injectedTextEndOffsetInInputWithInjections","withInserted","globalIndex","_getViewLineData","deltaStartIndex","sliceAndInflate","getViewLineCount","outputColumn","translateToInputOffset","deltaLineNumber","inputColumn","affinity","translateToOutputPosition","toPosition","outputPosition","baseViewLineNumber","normalizeOutputPosition","getInjectedText","_outputLineIndex","inflate","_fromOuputLineIndex","_toOutputLineIndex","getViewLineData","_inputColumn","_outputColumn","_globalStartIndex","_needed","_result","_deltaLineNumber","_spaces","_makeSpaces","ViewModelLinesFromProjectedModel","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","wrappingStrategy","_editorId","_validModelVersionId","_domLineBreaksComputerFactory","_monospaceLineBreaksComputerFactory","_constructLines","hiddenAreasDecorationIds","deltaDecorations","CoordinatesConverter","resetHiddenAreas","previousLineBreaks","modelLineProjections","linesContent","getLinesContent","injectedTextDecorations","getInjectedTextDecorations","lineBreaksComputer","createLineBreaksComputer","injectedTextQueue","_loop","lineInjectedText","takeWhile","linesBreaks","values","hiddenAreas","areaId","getDecorationRange","hiddenAreaStart","hiddenAreaEnd","hiddenAreaIdx","nextLineNumberToUpdateHiddenArea","isInHiddenArea","line","getVersionId","projectedModelLineLineCounts","ConstantTimePrefixSumComputer","decId","_ranges","newRanges","sortedRanges","currentRangeStart","currentRangeEnd","normalizeLineRanges","validateRange","oldRanges","hasDifference","newDecorations","ModelDecorationOptions","hasVisibleLine","lineChanged","setVisible","newOutputLineCount","setValue","setHiddenAreas","_modelColumn","newTabSize","equalFontInfo","equalWrappingStrategy","equalWrappingColumn","equalWrappingIndent","equalWordBreak","onlyWrappingColumnChanged","getProjectionData","outputFromLineNumber","getPrefixSum","outputToLineNumber","removeValues","viewEvents","_toLineNumber","lineBreaks","totalOutputLineCount","insertLines","insertPrefixSumValues","outputLineCount","insertValues","oldOutputLineCount","lineMappingChanged","changeFrom","changeTo","insertFrom","insertTo","deleteFrom","deleteTo","getTotalSum","viewLineNumber","viewLineCount","_toValidViewLineNumber","modelPosition","convertViewPositionToModelPosition","modelMinPosition","modelMaxPosition","guides","getActiveIndentGuide","viewStartPosition","viewEndPosition","indent","getIndexOf","remainder","ViewLineInfo","viewLineInfo","modelLineWrappedLineIdx","minViewColumn","getModelColumnOfViewPosition","maxViewColumn","viewStartLineNumber","viewEndLineNumber","startViewLine","getViewLineInfo","endViewLine","lastVisibleModelPos","getModelStartPositionOfViewLine","viewLines","curModelLine","lastVisibleModelPos2","ViewLineInfoGroupedByModelRange","getModelEndPositionOfViewLine","activeViewPosition","_this4","modelActivePosition","resultPerViewLine","getViewLineInfosGroupedByModelRanges","group","modelRangeStartLineNumber","bracketGuidesPerModelLine","getLinesBracketGuides","_loop2","getViewPositionOfModelPosition","p","getMinColumnOfViewLine","viewPosition","getMaxColumnOfViewLine","filter","modelStart","modelEnd","resultRepeatCount","resultRepeatOption","modelStartLineIndex","modelEndLineIndex","reqStart","modelLineIndex","viewLineStartIndex","getViewLineNumberOfModelPosition","viewLineEndIndex","option","getLinesIndentGuides","viewIndents","currIndex","blockAtIndex","getViewLineContent","getViewLineLength","startModelLineIndex","startRemainder","getLineCount","fromViewLineIndex","remainingViewLineCount","lastLine","viewColumn","expectedModelPosition","computedModelColumn","validatePosition","expectedModelRange","validViewStart","validateViewPosition","getStartPosition","validViewEnd","getEndPosition","validPosition","inputLineNumber","lineIndexChanged","modelColumn","filterOutValidation","res","finalResult","finalResultLen","prevDecId","getInjectedTextAt","normalizePosition","getLineIndentColumn","lines","_lines","convertViewRangeToModelRange","validateViewRange","modelPositionIsVisible","getModelLineViewLineCount","ViewModelLinesFromModelAsIs","IdentityCoordinatesConverter","_newTabSize","_fontInfo","_wrappingStrategy","_wrappingColumn","_wrappingIndent","_versionId","_minLineNumber","_maxLineNumber","activePosition","fill","pos","_validPosition","_validRange","_viewPosition","_viewRange","ViewModel","languageConfigurationService","_themeService","hiddenAreasModel","HiddenAreasModel","previousHiddenAreas","_eventDispatcher","ViewModelEventDispatcher","onEvent","cursorConfig","CursorConfiguration","getOptions","_tokenizeViewportSoon","RunOnceScheduler","tokenizeViewport","_updateConfigurationViewLineCount","_updateConfigurationViewLineCountNow","_hasFocus","_viewportStart","ViewportStart","isTooLargeForTokenization","createCoordinatesConverter","_cursor","CursorsController","_assertThisInitialized","schedule","invalidate","emitSingleViewEvent","emitOutgoingEvent","ScrollChangedEvent","oldScrollWidth","oldScrollLeft","oldScrollHeight","oldScrollTop","_decorations","_registerModelEvents","onDidChangeFast","eventsCollector","beginEmitViewEvents","_onConfigurationChanged","endEmitViewEvents","onDidColorThemeChange","_invalidateDecorationsColorCache","setViewLineCount","linesViewportData","viewVisibleRange","modelVisibleRanges","_toModelVisibleRanges","modelVisibleRange","hasFocus","setHasFocus","FocusChangedEvent","isValid","getCurrentScrollTop","previousViewportStartViewPosition","previousViewportStartModelPosition","StableViewport","startLineDelta","stableViewport","_captureStableViewport","setWrappingSettings","emitViewEvent","reset","recoverViewportStart","updateConfiguration","onDidChangeContentOrInjectedText","hadOtherModelChange","hadModelLineChangeThatChangedLineMapping","textModelEvents","lineIdx","element","lineBreakQueue","ArrayQueue","onModelFlushed","linesDeletedEvent","onModelLinesDeleted","insertedLineBreaks","takeCount","linesInsertedEvent","onModelLinesInserted","changedLineBreakData","dequeue","_this2$_lines$onModel","onModelLineChanged","_this2$_lines$onModel2","linesChangedEvent","acceptVersionId","viewportStartWasValid","setModelLineCount","getAttachedEditorCount","_getTrackedRange","modelTrackedRange","viewPositionTop","setScrollPosition","ModelContentChangedEvent","onModelContentChanged","onDidChangeTokens","viewRanges","lenJ","tokenizationSupportChanged","ModelTokensChangedEvent","onDidChangeLanguageConfiguration","ModelLanguageConfigurationChangedEvent","onDidChangeLanguage","ModelLanguageChangedEvent","onDidChangeOptions","setTabSize","ModelOptionsChangedEvent","onDidChangeDecorations","onModelDecorationsChanged","ModelDecorationsChangedEvent","mergedRanges","getMergedRanges","HiddenAreasChangedEvent","linesAround","startViewLineNumber","endViewLineNumber","visibleViewRange","getCompletelyVisibleViewRange","getHiddenAreas","hiddenStartLineNumber","hiddenEndLineNumber","getLinesViewportDataAtScrollTop","compatViewState","saveState","firstViewLineNumber","getLineNumberAtVerticalOffset","firstPosition","firstPositionDeltaTop","state","_reduceRestoreStateCompatibility","getViewLinesIndentGuides","getViewLinesBracketGuides","getDecorationsViewportData","_getViewLineRenderingData","getInlineDecorationsOnLine","getTabSize","lineData","_toConsumableArray","toInlineDecoration","getOverviewRulerDecorations","OverviewRulerDecorations","opts","overviewRuler","lane","getColor","accept","asArray","opts1","invalidateCachedColor","opts2","getValueLengthInRange","modifyPosition","viewAnchorPosition","lineFeedCnt","modelAnchor","getEOL","resultOffset","getOffsetAt","getPositionAt","modelRanges","emptySelectionClipboard","forceCRLF","newLineCharacter","hasEmptyRange","hasNonEmptyRange","modelLineNumbers","_step7","prevModelLineNumber","_iterator7","_step8","_iterator8","PLAINTEXT_LANGUAGE_ID","fontFamily","_getColorMap","test","EDITOR_FONT_DEFAULTS","replace","mode","fontWeight","fontSize","_getHTMLToCopy","tokenizeLineToHTML","platform","Color","getPrimaryCursorState","getLastAddedCursorIndex","getCursorStates","states","_withViewEventsCollector","setStates","getCursorColumnSelectData","getAutoClosedCharacters","columnSelectData","setCursorColumnSelectData","getPrevEditOperationType","setPrevEditOperationType","getSelection","getSelections","modelState","setSelections","_this5","restoreState","context","readOnly","ReadOnlyEditAttemptEvent","edits","cursorStateComputer","_this6","_executeCursorEdit","executeEdits","_this7","startComposition","_this8","endComposition","_this9","replacePrevCharCnt","replaceNextCharCnt","positionDelta","_this10","compositionType","pasteOnNewLine","multicursorText","_this11","paste","_this12","cut","command","_this13","executeCommand","commands","_this14","executeCommands","_this15","revealPrimary","getTopMostViewPosition","getBottomMostViewPosition","_viewLineNumber","_isValid","_modelTrackedRange","_startLineDelta","_setTrackedRange","viewportStartLineTrackedRange","viewportStartLineTop","_asMap","prevGroup","prevData","prevLane","prevEndLineNumber","shouldRecompute","existing","rangeArraysEqual","reduce","arr1","arr2","item1","item2","mergeLineRangeArray","viewportStartModelPosition","_onEvent","_eventHandlers","_viewEventQueue","_isConsumingViewEventQueue","_collector","_collectorCnt","_outgoingEvents","_addOutgoingEvent","_emitOutgoingEvents","mergeResult","kind","attemptToMerge","shift","isNoOp","warn","ViewModelEventsCollector","outgoingEvents","outgoingEvent","_emitMany","_consumeViewEventQueue","_doConsumeQueue","eventHandlers","handleEvents","oldContentWidth","oldContentHeight","_oldContentWidth","_oldContentHeight","oldHasFocus","_oldScrollWidth","_oldScrollLeft","_oldScrollHeight","_oldScrollTop","CursorStateChangedEvent","oldSelections","oldModelVersionId","modelVersionId","reachedMaxCursorCount","_selectionsAreEqual","equalsSelection"],"sourceRoot":""}