{"version":3,"file":"static/js/monaco-editor-vendor.ffbeb0f7.629eeef2.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/common/encodedTokenAttributes.js","../node_modules/monaco-editor/esm/vs/editor/common/languageSelector.js","../node_modules/monaco-editor/esm/vs/editor/common/languageFeatureRegistry.js","../node_modules/monaco-editor/esm/vs/editor/common/languages.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/autoIndent.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/enterAction.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/language.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/languageConfiguration.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/characterPair.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/electricCharacter.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/indentRules.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/onEnter.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/languageBracketsConfiguration.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/languageConfigurationRegistry.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/modesRegistry.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/nullTokenize.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/richEditBrackets.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/tokenization.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/textToHtmlTokenizer.js","../node_modules/monaco-editor/esm/vs/editor/common/model.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/combineTextEditInfos.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/bracketPairsTree.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsImpl.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/ast.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/brackets.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/length.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/concat23Trees.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/nodeReader.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/parser.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/smallImmutableSet.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/tokenizer.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/colorizedBracketPairsDecorationProvider.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/fixBrackets.js","../node_modules/monaco-editor/esm/vs/editor/common/model/editStack.js","../node_modules/monaco-editor/esm/vs/editor/common/model/guidesTextModelPart.js","../node_modules/monaco-editor/esm/vs/editor/common/model/indentationGuesser.js","../node_modules/monaco-editor/esm/vs/editor/common/model/intervalTree.js","../node_modules/monaco-editor/esm/vs/editor/common/modelLineProjectionData.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n */\nexport class TokenMetadata {\n    static getLanguageId(metadata) {\n        return (metadata & 255 /* MetadataConsts.LANGUAGEID_MASK */) >>> 0 /* MetadataConsts.LANGUAGEID_OFFSET */;\n    }\n    static getTokenType(metadata) {\n        return (metadata & 768 /* MetadataConsts.TOKEN_TYPE_MASK */) >>> 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */;\n    }\n    static containsBalancedBrackets(metadata) {\n        return (metadata & 1024 /* MetadataConsts.BALANCED_BRACKETS_MASK */) !== 0;\n    }\n    static getFontStyle(metadata) {\n        return (metadata & 30720 /* MetadataConsts.FONT_STYLE_MASK */) >>> 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n    }\n    static getForeground(metadata) {\n        return (metadata & 16744448 /* MetadataConsts.FOREGROUND_MASK */) >>> 15 /* MetadataConsts.FOREGROUND_OFFSET */;\n    }\n    static getBackground(metadata) {\n        return (metadata & 4278190080 /* MetadataConsts.BACKGROUND_MASK */) >>> 24 /* MetadataConsts.BACKGROUND_OFFSET */;\n    }\n    static getClassNameFromMetadata(metadata) {\n        const foreground = this.getForeground(metadata);\n        let className = 'mtk' + foreground;\n        const fontStyle = this.getFontStyle(metadata);\n        if (fontStyle & 1 /* FontStyle.Italic */) {\n            className += ' mtki';\n        }\n        if (fontStyle & 2 /* FontStyle.Bold */) {\n            className += ' mtkb';\n        }\n        if (fontStyle & 4 /* FontStyle.Underline */) {\n            className += ' mtku';\n        }\n        if (fontStyle & 8 /* FontStyle.Strikethrough */) {\n            className += ' mtks';\n        }\n        return className;\n    }\n    static getInlineStyleFromMetadata(metadata, colorMap) {\n        const foreground = this.getForeground(metadata);\n        const fontStyle = this.getFontStyle(metadata);\n        let result = `color: ${colorMap[foreground]};`;\n        if (fontStyle & 1 /* FontStyle.Italic */) {\n            result += 'font-style: italic;';\n        }\n        if (fontStyle & 2 /* FontStyle.Bold */) {\n            result += 'font-weight: bold;';\n        }\n        let textDecoration = '';\n        if (fontStyle & 4 /* FontStyle.Underline */) {\n            textDecoration += ' underline';\n        }\n        if (fontStyle & 8 /* FontStyle.Strikethrough */) {\n            textDecoration += ' line-through';\n        }\n        if (textDecoration) {\n            result += `text-decoration:${textDecoration};`;\n        }\n        return result;\n    }\n    static getPresentationFromMetadata(metadata) {\n        const foreground = this.getForeground(metadata);\n        const fontStyle = this.getFontStyle(metadata);\n        return {\n            foreground: foreground,\n            italic: Boolean(fontStyle & 1 /* FontStyle.Italic */),\n            bold: Boolean(fontStyle & 2 /* FontStyle.Bold */),\n            underline: Boolean(fontStyle & 4 /* FontStyle.Underline */),\n            strikethrough: Boolean(fontStyle & 8 /* FontStyle.Strikethrough */),\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { match as matchGlobPattern } from '../../base/common/glob.js';\nimport { normalize } from '../../base/common/path.js';\nexport function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType) {\n    if (Array.isArray(selector)) {\n        // array -> take max individual value\n        let ret = 0;\n        for (const filter of selector) {\n            const value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType);\n            if (value === 10) {\n                return value; // already at the highest\n            }\n            if (value > ret) {\n                ret = value;\n            }\n        }\n        return ret;\n    }\n    else if (typeof selector === 'string') {\n        if (!candidateIsSynchronized) {\n            return 0;\n        }\n        // short-hand notion, desugars to\n        // 'fooLang' -> { language: 'fooLang'}\n        // '*' -> { language: '*' }\n        if (selector === '*') {\n            return 5;\n        }\n        else if (selector === candidateLanguage) {\n            return 10;\n        }\n        else {\n            return 0;\n        }\n    }\n    else if (selector) {\n        // filter -> select accordingly, use defaults for scheme\n        const { language, pattern, scheme, hasAccessToAllModels, notebookType } = selector; // TODO: microsoft/TypeScript#42768\n        if (!candidateIsSynchronized && !hasAccessToAllModels) {\n            return 0;\n        }\n        // selector targets a notebook -> use the notebook uri instead\n        // of the \"normal\" document uri.\n        if (notebookType && candidateNotebookUri) {\n            candidateUri = candidateNotebookUri;\n        }\n        let ret = 0;\n        if (scheme) {\n            if (scheme === candidateUri.scheme) {\n                ret = 10;\n            }\n            else if (scheme === '*') {\n                ret = 5;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (language) {\n            if (language === candidateLanguage) {\n                ret = 10;\n            }\n            else if (language === '*') {\n                ret = Math.max(ret, 5);\n            }\n            else {\n                return 0;\n            }\n        }\n        if (notebookType) {\n            if (notebookType === candidateNotebookType) {\n                ret = 10;\n            }\n            else if (notebookType === '*' && candidateNotebookType !== undefined) {\n                ret = Math.max(ret, 5);\n            }\n            else {\n                return 0;\n            }\n        }\n        if (pattern) {\n            let normalizedPattern;\n            if (typeof pattern === 'string') {\n                normalizedPattern = pattern;\n            }\n            else {\n                // Since this pattern has a `base` property, we need\n                // to normalize this path first before passing it on\n                // because we will compare it against `Uri.fsPath`\n                // which uses platform specific separators.\n                // Refs: https://github.com/microsoft/vscode/issues/99938\n                normalizedPattern = Object.assign(Object.assign({}, pattern), { base: normalize(pattern.base) });\n            }\n            if (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n                ret = 10;\n            }\n            else {\n                return 0;\n            }\n        }\n        return ret;\n    }\n    else {\n        return 0;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../base/common/event.js';\nimport { toDisposable } from '../../base/common/lifecycle.js';\nimport { shouldSynchronizeModel } from './model.js';\nimport { score } from './languageSelector.js';\nfunction isExclusive(selector) {\n    if (typeof selector === 'string') {\n        return false;\n    }\n    else if (Array.isArray(selector)) {\n        return selector.every(isExclusive);\n    }\n    else {\n        return !!selector.exclusive; // TODO: microsoft/TypeScript#42768\n    }\n}\nclass MatchCandidate {\n    constructor(uri, languageId, notebookUri, notebookType) {\n        this.uri = uri;\n        this.languageId = languageId;\n        this.notebookUri = notebookUri;\n        this.notebookType = notebookType;\n    }\n    equals(other) {\n        var _a, _b;\n        return this.notebookType === other.notebookType\n            && this.languageId === other.languageId\n            && this.uri.toString() === other.uri.toString()\n            && ((_a = this.notebookUri) === null || _a === void 0 ? void 0 : _a.toString()) === ((_b = other.notebookUri) === null || _b === void 0 ? void 0 : _b.toString());\n    }\n}\nexport class LanguageFeatureRegistry {\n    constructor(_notebookInfoResolver) {\n        this._notebookInfoResolver = _notebookInfoResolver;\n        this._clock = 0;\n        this._entries = [];\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n    }\n    register(selector, provider) {\n        let entry = {\n            selector,\n            provider,\n            _score: -1,\n            _time: this._clock++\n        };\n        this._entries.push(entry);\n        this._lastCandidate = undefined;\n        this._onDidChange.fire(this._entries.length);\n        return toDisposable(() => {\n            if (entry) {\n                const idx = this._entries.indexOf(entry);\n                if (idx >= 0) {\n                    this._entries.splice(idx, 1);\n                    this._lastCandidate = undefined;\n                    this._onDidChange.fire(this._entries.length);\n                    entry = undefined;\n                }\n            }\n        });\n    }\n    has(model) {\n        return this.all(model).length > 0;\n    }\n    all(model) {\n        if (!model) {\n            return [];\n        }\n        this._updateScores(model);\n        const result = [];\n        // from registry\n        for (const entry of this._entries) {\n            if (entry._score > 0) {\n                result.push(entry.provider);\n            }\n        }\n        return result;\n    }\n    ordered(model) {\n        const result = [];\n        this._orderedForEach(model, entry => result.push(entry.provider));\n        return result;\n    }\n    orderedGroups(model) {\n        const result = [];\n        let lastBucket;\n        let lastBucketScore;\n        this._orderedForEach(model, entry => {\n            if (lastBucket && lastBucketScore === entry._score) {\n                lastBucket.push(entry.provider);\n            }\n            else {\n                lastBucketScore = entry._score;\n                lastBucket = [entry.provider];\n                result.push(lastBucket);\n            }\n        });\n        return result;\n    }\n    _orderedForEach(model, callback) {\n        this._updateScores(model);\n        for (const entry of this._entries) {\n            if (entry._score > 0) {\n                callback(entry);\n            }\n        }\n    }\n    _updateScores(model) {\n        var _a, _b;\n        const notebookInfo = (_a = this._notebookInfoResolver) === null || _a === void 0 ? void 0 : _a.call(this, model.uri);\n        // use the uri (scheme, pattern) of the notebook info iff we have one\n        // otherwise it's the model's/document's uri\n        const candidate = notebookInfo\n            ? new MatchCandidate(model.uri, model.getLanguageId(), notebookInfo.uri, notebookInfo.type)\n            : new MatchCandidate(model.uri, model.getLanguageId(), undefined, undefined);\n        if ((_b = this._lastCandidate) === null || _b === void 0 ? void 0 : _b.equals(candidate)) {\n            // nothing has changed\n            return;\n        }\n        this._lastCandidate = candidate;\n        for (const entry of this._entries) {\n            entry._score = score(entry.selector, candidate.uri, candidate.languageId, shouldSynchronizeModel(model), candidate.notebookUri, candidate.notebookType);\n            if (isExclusive(entry.selector) && entry._score > 0) {\n                // support for one exclusive selector that overwrites\n                // any other selector\n                for (const entry of this._entries) {\n                    entry._score = 0;\n                }\n                entry._score = 1000;\n                break;\n            }\n        }\n        // needs sorting\n        this._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n    }\n    static _compareByScoreAndTime(a, b) {\n        if (a._score < b._score) {\n            return 1;\n        }\n        else if (a._score > b._score) {\n            return -1;\n        }\n        else if (a._time < b._time) {\n            return 1;\n        }\n        else if (a._time > b._time) {\n            return -1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Codicon } from '../../base/common/codicons.js';\nimport { URI } from '../../base/common/uri.js';\nimport { Range } from './core/range.js';\nimport { TokenizationRegistry as TokenizationRegistryImpl } from './tokenizationRegistry.js';\nexport class Token {\n    constructor(offset, type, language) {\n        this.offset = offset;\n        this.type = type;\n        this.language = language;\n        this._tokenBrand = undefined;\n    }\n    toString() {\n        return '(' + this.offset + ', ' + this.type + ')';\n    }\n}\n/**\n * @internal\n */\nexport class TokenizationResult {\n    constructor(tokens, endState) {\n        this.tokens = tokens;\n        this.endState = endState;\n        this._tokenizationResultBrand = undefined;\n    }\n}\n/**\n * @internal\n */\nexport class EncodedTokenizationResult {\n    constructor(\n    /**\n     * The tokens in binary format. Each token occupies two array indices. For token i:\n     *  - at offset 2*i => startIndex\n     *  - at offset 2*i + 1 => metadata\n     *\n     */\n    tokens, endState) {\n        this.tokens = tokens;\n        this.endState = endState;\n        this._encodedTokenizationResultBrand = undefined;\n    }\n}\n/**\n * @internal\n */\nexport var CompletionItemKinds;\n(function (CompletionItemKinds) {\n    const byKind = new Map();\n    byKind.set(0 /* CompletionItemKind.Method */, Codicon.symbolMethod);\n    byKind.set(1 /* CompletionItemKind.Function */, Codicon.symbolFunction);\n    byKind.set(2 /* CompletionItemKind.Constructor */, Codicon.symbolConstructor);\n    byKind.set(3 /* CompletionItemKind.Field */, Codicon.symbolField);\n    byKind.set(4 /* CompletionItemKind.Variable */, Codicon.symbolVariable);\n    byKind.set(5 /* CompletionItemKind.Class */, Codicon.symbolClass);\n    byKind.set(6 /* CompletionItemKind.Struct */, Codicon.symbolStruct);\n    byKind.set(7 /* CompletionItemKind.Interface */, Codicon.symbolInterface);\n    byKind.set(8 /* CompletionItemKind.Module */, Codicon.symbolModule);\n    byKind.set(9 /* CompletionItemKind.Property */, Codicon.symbolProperty);\n    byKind.set(10 /* CompletionItemKind.Event */, Codicon.symbolEvent);\n    byKind.set(11 /* CompletionItemKind.Operator */, Codicon.symbolOperator);\n    byKind.set(12 /* CompletionItemKind.Unit */, Codicon.symbolUnit);\n    byKind.set(13 /* CompletionItemKind.Value */, Codicon.symbolValue);\n    byKind.set(15 /* CompletionItemKind.Enum */, Codicon.symbolEnum);\n    byKind.set(14 /* CompletionItemKind.Constant */, Codicon.symbolConstant);\n    byKind.set(15 /* CompletionItemKind.Enum */, Codicon.symbolEnum);\n    byKind.set(16 /* CompletionItemKind.EnumMember */, Codicon.symbolEnumMember);\n    byKind.set(17 /* CompletionItemKind.Keyword */, Codicon.symbolKeyword);\n    byKind.set(27 /* CompletionItemKind.Snippet */, Codicon.symbolSnippet);\n    byKind.set(18 /* CompletionItemKind.Text */, Codicon.symbolText);\n    byKind.set(19 /* CompletionItemKind.Color */, Codicon.symbolColor);\n    byKind.set(20 /* CompletionItemKind.File */, Codicon.symbolFile);\n    byKind.set(21 /* CompletionItemKind.Reference */, Codicon.symbolReference);\n    byKind.set(22 /* CompletionItemKind.Customcolor */, Codicon.symbolCustomColor);\n    byKind.set(23 /* CompletionItemKind.Folder */, Codicon.symbolFolder);\n    byKind.set(24 /* CompletionItemKind.TypeParameter */, Codicon.symbolTypeParameter);\n    byKind.set(25 /* CompletionItemKind.User */, Codicon.account);\n    byKind.set(26 /* CompletionItemKind.Issue */, Codicon.issues);\n    /**\n     * @internal\n     */\n    function toIcon(kind) {\n        let codicon = byKind.get(kind);\n        if (!codicon) {\n            console.info('No codicon found for CompletionItemKind ' + kind);\n            codicon = Codicon.symbolProperty;\n        }\n        return codicon;\n    }\n    CompletionItemKinds.toIcon = toIcon;\n    const data = new Map();\n    data.set('method', 0 /* CompletionItemKind.Method */);\n    data.set('function', 1 /* CompletionItemKind.Function */);\n    data.set('constructor', 2 /* CompletionItemKind.Constructor */);\n    data.set('field', 3 /* CompletionItemKind.Field */);\n    data.set('variable', 4 /* CompletionItemKind.Variable */);\n    data.set('class', 5 /* CompletionItemKind.Class */);\n    data.set('struct', 6 /* CompletionItemKind.Struct */);\n    data.set('interface', 7 /* CompletionItemKind.Interface */);\n    data.set('module', 8 /* CompletionItemKind.Module */);\n    data.set('property', 9 /* CompletionItemKind.Property */);\n    data.set('event', 10 /* CompletionItemKind.Event */);\n    data.set('operator', 11 /* CompletionItemKind.Operator */);\n    data.set('unit', 12 /* CompletionItemKind.Unit */);\n    data.set('value', 13 /* CompletionItemKind.Value */);\n    data.set('constant', 14 /* CompletionItemKind.Constant */);\n    data.set('enum', 15 /* CompletionItemKind.Enum */);\n    data.set('enum-member', 16 /* CompletionItemKind.EnumMember */);\n    data.set('enumMember', 16 /* CompletionItemKind.EnumMember */);\n    data.set('keyword', 17 /* CompletionItemKind.Keyword */);\n    data.set('snippet', 27 /* CompletionItemKind.Snippet */);\n    data.set('text', 18 /* CompletionItemKind.Text */);\n    data.set('color', 19 /* CompletionItemKind.Color */);\n    data.set('file', 20 /* CompletionItemKind.File */);\n    data.set('reference', 21 /* CompletionItemKind.Reference */);\n    data.set('customcolor', 22 /* CompletionItemKind.Customcolor */);\n    data.set('folder', 23 /* CompletionItemKind.Folder */);\n    data.set('type-parameter', 24 /* CompletionItemKind.TypeParameter */);\n    data.set('typeParameter', 24 /* CompletionItemKind.TypeParameter */);\n    data.set('account', 25 /* CompletionItemKind.User */);\n    data.set('issue', 26 /* CompletionItemKind.Issue */);\n    /**\n     * @internal\n     */\n    function fromString(value, strict) {\n        let res = data.get(value);\n        if (typeof res === 'undefined' && !strict) {\n            res = 9 /* CompletionItemKind.Property */;\n        }\n        return res;\n    }\n    CompletionItemKinds.fromString = fromString;\n})(CompletionItemKinds || (CompletionItemKinds = {}));\n/**\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered automatically while editing.\n     * It is sufficient to return a single completion item in this case.\n     */\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Automatic\"] = 0] = \"Automatic\";\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     * Return multiple completion items to enable cycling through them.\n     */\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Explicit\"] = 1] = \"Explicit\";\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var SignatureHelpTriggerKind;\n(function (SignatureHelpTriggerKind) {\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"Invoke\"] = 1] = \"Invoke\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"TriggerCharacter\"] = 2] = \"TriggerCharacter\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"ContentChange\"] = 3] = \"ContentChange\";\n})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Text\"] = 0] = \"Text\";\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Read\"] = 1] = \"Read\";\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Write\"] = 2] = \"Write\";\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * @internal\n */\nexport function isLocationLink(thing) {\n    return thing\n        && URI.isUri(thing.uri)\n        && Range.isIRange(thing.range)\n        && (Range.isIRange(thing.originSelectionRange) || Range.isIRange(thing.targetSelectionRange));\n}\n/**\n * @internal\n */\nexport var SymbolKinds;\n(function (SymbolKinds) {\n    const byKind = new Map();\n    byKind.set(0 /* SymbolKind.File */, Codicon.symbolFile);\n    byKind.set(1 /* SymbolKind.Module */, Codicon.symbolModule);\n    byKind.set(2 /* SymbolKind.Namespace */, Codicon.symbolNamespace);\n    byKind.set(3 /* SymbolKind.Package */, Codicon.symbolPackage);\n    byKind.set(4 /* SymbolKind.Class */, Codicon.symbolClass);\n    byKind.set(5 /* SymbolKind.Method */, Codicon.symbolMethod);\n    byKind.set(6 /* SymbolKind.Property */, Codicon.symbolProperty);\n    byKind.set(7 /* SymbolKind.Field */, Codicon.symbolField);\n    byKind.set(8 /* SymbolKind.Constructor */, Codicon.symbolConstructor);\n    byKind.set(9 /* SymbolKind.Enum */, Codicon.symbolEnum);\n    byKind.set(10 /* SymbolKind.Interface */, Codicon.symbolInterface);\n    byKind.set(11 /* SymbolKind.Function */, Codicon.symbolFunction);\n    byKind.set(12 /* SymbolKind.Variable */, Codicon.symbolVariable);\n    byKind.set(13 /* SymbolKind.Constant */, Codicon.symbolConstant);\n    byKind.set(14 /* SymbolKind.String */, Codicon.symbolString);\n    byKind.set(15 /* SymbolKind.Number */, Codicon.symbolNumber);\n    byKind.set(16 /* SymbolKind.Boolean */, Codicon.symbolBoolean);\n    byKind.set(17 /* SymbolKind.Array */, Codicon.symbolArray);\n    byKind.set(18 /* SymbolKind.Object */, Codicon.symbolObject);\n    byKind.set(19 /* SymbolKind.Key */, Codicon.symbolKey);\n    byKind.set(20 /* SymbolKind.Null */, Codicon.symbolNull);\n    byKind.set(21 /* SymbolKind.EnumMember */, Codicon.symbolEnumMember);\n    byKind.set(22 /* SymbolKind.Struct */, Codicon.symbolStruct);\n    byKind.set(23 /* SymbolKind.Event */, Codicon.symbolEvent);\n    byKind.set(24 /* SymbolKind.Operator */, Codicon.symbolOperator);\n    byKind.set(25 /* SymbolKind.TypeParameter */, Codicon.symbolTypeParameter);\n    /**\n     * @internal\n     */\n    function toIcon(kind) {\n        let icon = byKind.get(kind);\n        if (!icon) {\n            console.info('No codicon found for SymbolKind ' + kind);\n            icon = Codicon.symbolProperty;\n        }\n        return icon;\n    }\n    SymbolKinds.toIcon = toIcon;\n})(SymbolKinds || (SymbolKinds = {}));\nclass FoldingRangeKind {\n    /**\n     * Returns a {@link FoldingRangeKind} for the given value.\n     *\n     * @param value of the kind.\n     */\n    static fromValue(value) {\n        switch (value) {\n            case 'comment': return FoldingRangeKind.Comment;\n            case 'imports': return FoldingRangeKind.Imports;\n            case 'region': return FoldingRangeKind.Region;\n        }\n        return new FoldingRangeKind(value);\n    }\n    /**\n     * Creates a new {@link FoldingRangeKind}.\n     *\n     * @param value of the kind.\n     */\n    constructor(value) {\n        this.value = value;\n    }\n}\n/**\n * Kind for folding range representing a comment. The value of the kind is 'comment'.\n */\nFoldingRangeKind.Comment = new FoldingRangeKind('comment');\n/**\n * Kind for folding range representing a import. The value of the kind is 'imports'.\n */\nFoldingRangeKind.Imports = new FoldingRangeKind('imports');\n/**\n * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).\n * The value of the kind is 'region'.\n */\nFoldingRangeKind.Region = new FoldingRangeKind('region');\nexport { FoldingRangeKind };\n/**\n * @internal\n */\nexport var Command;\n(function (Command) {\n    /**\n     * @internal\n     */\n    function is(obj) {\n        if (!obj || typeof obj !== 'object') {\n            return false;\n        }\n        return typeof obj.id === 'string' &&\n            typeof obj.title === 'string';\n    }\n    Command.is = is;\n})(Command || (Command = {}));\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    InlayHintKind[InlayHintKind[\"Type\"] = 1] = \"Type\";\n    InlayHintKind[InlayHintKind[\"Parameter\"] = 2] = \"Parameter\";\n})(InlayHintKind || (InlayHintKind = {}));\n/**\n * @internal\n */\nexport const TokenizationRegistry = new TokenizationRegistryImpl();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { IndentAction } from './languageConfiguration.js';\nimport { createScopedLineTokens } from './supports.js';\nimport { getScopedLineTokens } from './languageConfigurationRegistry.js';\n/**\n * Get nearest preceding line which doesn't match unIndentPattern or contains all whitespace.\n * Result:\n * -1: run into the boundary of embedded languages\n * 0: every line above are invalid\n * else: nearest preceding line of the same language\n */\nfunction getPrecedingValidLine(model, lineNumber, indentRulesSupport) {\n    const languageId = model.tokenization.getLanguageIdAtPosition(lineNumber, 0);\n    if (lineNumber > 1) {\n        let lastLineNumber;\n        let resultLineNumber = -1;\n        for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n            if (model.tokenization.getLanguageIdAtPosition(lastLineNumber, 0) !== languageId) {\n                return resultLineNumber;\n            }\n            const text = model.getLineContent(lastLineNumber);\n            if (indentRulesSupport.shouldIgnore(text) || /^\\s+$/.test(text) || text === '') {\n                resultLineNumber = lastLineNumber;\n                continue;\n            }\n            return lastLineNumber;\n        }\n    }\n    return -1;\n}\n/**\n * Get inherited indentation from above lines.\n * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.\n * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.\n * 3. If this line doesn't match any indent rules\n *   a. check whether the line above it matches indentNextLinePattern\n *   b. If not, the indent level of this line is the result\n *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).\n * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`\n *\n * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.\n */\nexport function getInheritIndentForLine(autoIndent, model, lineNumber, honorIntentialIndent = true, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.tokenization.getLanguageId()).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    if (lineNumber <= 1) {\n        return {\n            indentation: '',\n            action: null\n        };\n    }\n    // Use no indent if this is the first non-blank line\n    for (let priorLineNumber = lineNumber - 1; priorLineNumber > 0; priorLineNumber--) {\n        if (model.getLineContent(priorLineNumber) !== '') {\n            break;\n        }\n        if (priorLineNumber === 1) {\n            return {\n                indentation: '',\n                action: null\n            };\n        }\n    }\n    const precedingUnIgnoredLine = getPrecedingValidLine(model, lineNumber, indentRulesSupport);\n    if (precedingUnIgnoredLine < 0) {\n        return null;\n    }\n    else if (precedingUnIgnoredLine < 1) {\n        return {\n            indentation: '',\n            action: null\n        };\n    }\n    const precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\n    if (indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent) || indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent)) {\n        return {\n            indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n            action: IndentAction.Indent,\n            line: precedingUnIgnoredLine\n        };\n    }\n    else if (indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent)) {\n        return {\n            indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n            action: null,\n            line: precedingUnIgnoredLine\n        };\n    }\n    else {\n        // precedingUnIgnoredLine can not be ignored.\n        // it doesn't increase indent of following lines\n        // it doesn't increase just next line\n        // so current line is not affect by precedingUnIgnoredLine\n        // and then we should get a correct inheritted indentation from above lines\n        if (precedingUnIgnoredLine === 1) {\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n                action: null,\n                line: precedingUnIgnoredLine\n            };\n        }\n        const previousLine = precedingUnIgnoredLine - 1;\n        const previousLineIndentMetadata = indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));\n        if (!(previousLineIndentMetadata & (1 /* IndentConsts.INCREASE_MASK */ | 2 /* IndentConsts.DECREASE_MASK */)) &&\n            (previousLineIndentMetadata & 4 /* IndentConsts.INDENT_NEXTLINE_MASK */)) {\n            let stopLine = 0;\n            for (let i = previousLine - 1; i > 0; i--) {\n                if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n                    continue;\n                }\n                stopLine = i;\n                break;\n            }\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n                action: null,\n                line: stopLine + 1\n            };\n        }\n        if (honorIntentialIndent) {\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n                action: null,\n                line: precedingUnIgnoredLine\n            };\n        }\n        else {\n            // search from precedingUnIgnoredLine until we find one whose indent is not temporary\n            for (let i = precedingUnIgnoredLine; i > 0; i--) {\n                const lineContent = model.getLineContent(i);\n                if (indentRulesSupport.shouldIncrease(lineContent)) {\n                    return {\n                        indentation: strings.getLeadingWhitespace(lineContent),\n                        action: IndentAction.Indent,\n                        line: i\n                    };\n                }\n                else if (indentRulesSupport.shouldIndentNextLine(lineContent)) {\n                    let stopLine = 0;\n                    for (let j = i - 1; j > 0; j--) {\n                        if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n                            continue;\n                        }\n                        stopLine = j;\n                        break;\n                    }\n                    return {\n                        indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n                        action: null,\n                        line: stopLine + 1\n                    };\n                }\n                else if (indentRulesSupport.shouldDecrease(lineContent)) {\n                    return {\n                        indentation: strings.getLeadingWhitespace(lineContent),\n                        action: null,\n                        line: i\n                    };\n                }\n            }\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(1)),\n                action: null,\n                line: 1\n            };\n        }\n    }\n}\nexport function getGoodIndentForLine(autoIndent, virtualModel, languageId, lineNumber, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const richEditSupport = languageConfigurationService.getLanguageConfiguration(languageId);\n    if (!richEditSupport) {\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const indent = getInheritIndentForLine(autoIndent, virtualModel, lineNumber, undefined, languageConfigurationService);\n    const lineContent = virtualModel.getLineContent(lineNumber);\n    if (indent) {\n        const inheritLine = indent.line;\n        if (inheritLine !== undefined) {\n            // Apply enter action as long as there are only whitespace lines between inherited line and this line.\n            let shouldApplyEnterRules = true;\n            for (let inBetweenLine = inheritLine; inBetweenLine < lineNumber - 1; inBetweenLine++) {\n                if (!/^\\s*$/.test(virtualModel.getLineContent(inBetweenLine))) {\n                    shouldApplyEnterRules = false;\n                    break;\n                }\n            }\n            if (shouldApplyEnterRules) {\n                const enterResult = richEditSupport.onEnter(autoIndent, '', virtualModel.getLineContent(inheritLine), '');\n                if (enterResult) {\n                    let indentation = strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));\n                    if (enterResult.removeText) {\n                        indentation = indentation.substring(0, indentation.length - enterResult.removeText);\n                    }\n                    if ((enterResult.indentAction === IndentAction.Indent) ||\n                        (enterResult.indentAction === IndentAction.IndentOutdent)) {\n                        indentation = indentConverter.shiftIndent(indentation);\n                    }\n                    else if (enterResult.indentAction === IndentAction.Outdent) {\n                        indentation = indentConverter.unshiftIndent(indentation);\n                    }\n                    if (indentRulesSupport.shouldDecrease(lineContent)) {\n                        indentation = indentConverter.unshiftIndent(indentation);\n                    }\n                    if (enterResult.appendText) {\n                        indentation += enterResult.appendText;\n                    }\n                    return strings.getLeadingWhitespace(indentation);\n                }\n            }\n        }\n        if (indentRulesSupport.shouldDecrease(lineContent)) {\n            if (indent.action === IndentAction.Indent) {\n                return indent.indentation;\n            }\n            else {\n                return indentConverter.unshiftIndent(indent.indentation);\n            }\n        }\n        else {\n            if (indent.action === IndentAction.Indent) {\n                return indentConverter.shiftIndent(indent.indentation);\n            }\n            else {\n                return indent.indentation;\n            }\n        }\n    }\n    return null;\n}\nexport function getIndentForEnter(autoIndent, model, range, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    model.tokenization.forceTokenization(range.startLineNumber);\n    const lineTokens = model.tokenization.getLineTokens(range.startLineNumber);\n    const scopedLineTokens = createScopedLineTokens(lineTokens, range.startColumn - 1);\n    const scopedLineText = scopedLineTokens.getLineContent();\n    let embeddedLanguage = false;\n    let beforeEnterText;\n    if (scopedLineTokens.firstCharOffset > 0 && lineTokens.getLanguageId(0) !== scopedLineTokens.languageId) {\n        // we are in the embeded language content\n        embeddedLanguage = true; // if embeddedLanguage is true, then we don't touch the indentation of current line\n        beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        beforeEnterText = lineTokens.getLineContent().substring(0, range.startColumn - 1);\n    }\n    let afterEnterText;\n    if (range.isEmpty()) {\n        afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n        afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const beforeEnterResult = beforeEnterText;\n    const beforeEnterIndent = strings.getLeadingWhitespace(beforeEnterText);\n    const virtualModel = {\n        tokenization: {\n            getLineTokens: (lineNumber) => {\n                return model.tokenization.getLineTokens(lineNumber);\n            },\n            getLanguageId: () => {\n                return model.getLanguageId();\n            },\n            getLanguageIdAtPosition: (lineNumber, column) => {\n                return model.getLanguageIdAtPosition(lineNumber, column);\n            },\n        },\n        getLineContent: (lineNumber) => {\n            if (lineNumber === range.startLineNumber) {\n                return beforeEnterResult;\n            }\n            else {\n                return model.getLineContent(lineNumber);\n            }\n        }\n    };\n    const currentLineIndent = strings.getLeadingWhitespace(lineTokens.getLineContent());\n    const afterEnterAction = getInheritIndentForLine(autoIndent, virtualModel, range.startLineNumber + 1, undefined, languageConfigurationService);\n    if (!afterEnterAction) {\n        const beforeEnter = embeddedLanguage ? currentLineIndent : beforeEnterIndent;\n        return {\n            beforeEnter: beforeEnter,\n            afterEnter: beforeEnter\n        };\n    }\n    let afterEnterIndent = embeddedLanguage ? currentLineIndent : afterEnterAction.indentation;\n    if (afterEnterAction.action === IndentAction.Indent) {\n        afterEnterIndent = indentConverter.shiftIndent(afterEnterIndent);\n    }\n    if (indentRulesSupport.shouldDecrease(afterEnterText)) {\n        afterEnterIndent = indentConverter.unshiftIndent(afterEnterIndent);\n    }\n    return {\n        beforeEnter: embeddedLanguage ? currentLineIndent : beforeEnterIndent,\n        afterEnter: afterEnterIndent\n    };\n}\n/**\n * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of\n * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.\n */\nexport function getIndentActionForType(autoIndent, model, range, ch, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const scopedLineTokens = getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n    if (scopedLineTokens.firstCharOffset) {\n        // this line has mixed languages and indentation rules will not work\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const scopedLineText = scopedLineTokens.getLineContent();\n    const beforeTypeText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    // selection support\n    let afterTypeText;\n    if (range.isEmpty()) {\n        afterTypeText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n        afterTypeText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    // If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted\n    // Users might change the indentation by purpose and we should honor that instead of readjusting.\n    if (!indentRulesSupport.shouldDecrease(beforeTypeText + afterTypeText) && indentRulesSupport.shouldDecrease(beforeTypeText + ch + afterTypeText)) {\n        // after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.\n        // 1. Get inherited indent action\n        const r = getInheritIndentForLine(autoIndent, model, range.startLineNumber, false, languageConfigurationService);\n        if (!r) {\n            return null;\n        }\n        let indentation = r.indentation;\n        if (r.action !== IndentAction.Indent) {\n            indentation = indentConverter.unshiftIndent(indentation);\n        }\n        return indentation;\n    }\n    return null;\n}\nexport function getIndentMetadata(model, lineNumber, languageConfigurationService) {\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    if (lineNumber < 1 || lineNumber > model.getLineCount()) {\n        return null;\n    }\n    return indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber));\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IndentAction } from './languageConfiguration.js';\nimport { getIndentationAtPosition, getScopedLineTokens } from './languageConfigurationRegistry.js';\nexport function getEnterAction(autoIndent, model, range, languageConfigurationService) {\n    const scopedLineTokens = getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n    const richEditSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId);\n    if (!richEditSupport) {\n        return null;\n    }\n    const scopedLineText = scopedLineTokens.getLineContent();\n    const beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    // selection support\n    let afterEnterText;\n    if (range.isEmpty()) {\n        afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n        afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    let previousLineText = '';\n    if (range.startLineNumber > 1 && scopedLineTokens.firstCharOffset === 0) {\n        // This is not the first line and the entire line belongs to this mode\n        const oneLineAboveScopedLineTokens = getScopedLineTokens(model, range.startLineNumber - 1);\n        if (oneLineAboveScopedLineTokens.languageId === scopedLineTokens.languageId) {\n            // The line above ends with text belonging to the same mode\n            previousLineText = oneLineAboveScopedLineTokens.getLineContent();\n        }\n    }\n    const enterResult = richEditSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n    if (!enterResult) {\n        return null;\n    }\n    const indentAction = enterResult.indentAction;\n    let appendText = enterResult.appendText;\n    const removeText = enterResult.removeText || 0;\n    // Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n    if (!appendText) {\n        if ((indentAction === IndentAction.Indent) ||\n            (indentAction === IndentAction.IndentOutdent)) {\n            appendText = '\\t';\n        }\n        else {\n            appendText = '';\n        }\n    }\n    else if (indentAction === IndentAction.Indent) {\n        appendText = '\\t' + appendText;\n    }\n    let indentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n    if (removeText) {\n        indentation = indentation.substring(0, indentation.length - removeText);\n    }\n    return {\n        indentAction: indentAction,\n        appendText: appendText,\n        removeText: removeText,\n        indentation: indentation\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const ILanguageService = createDecorator('languageService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nexport var IndentAction;\n(function (IndentAction) {\n    /**\n     * Insert new line and copy the previous line's indentation.\n     */\n    IndentAction[IndentAction[\"None\"] = 0] = \"None\";\n    /**\n     * Insert new line and indent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\n    /**\n     * Insert two new lines:\n     *  - the first one indented which will hold the cursor\n     *  - the second one at the same indentation level\n     */\n    IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\n    /**\n     * Insert new line and outdent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\n})(IndentAction || (IndentAction = {}));\n/**\n * @internal\n */\nexport class StandardAutoClosingPairConditional {\n    constructor(source) {\n        this._neutralCharacter = null;\n        this._neutralCharacterSearched = false;\n        this.open = source.open;\n        this.close = source.close;\n        // initially allowed in all tokens\n        this._inString = true;\n        this._inComment = true;\n        this._inRegEx = true;\n        if (Array.isArray(source.notIn)) {\n            for (let i = 0, len = source.notIn.length; i < len; i++) {\n                const notIn = source.notIn[i];\n                switch (notIn) {\n                    case 'string':\n                        this._inString = false;\n                        break;\n                    case 'comment':\n                        this._inComment = false;\n                        break;\n                    case 'regex':\n                        this._inRegEx = false;\n                        break;\n                }\n            }\n        }\n    }\n    isOK(standardToken) {\n        switch (standardToken) {\n            case 0 /* StandardTokenType.Other */:\n                return true;\n            case 1 /* StandardTokenType.Comment */:\n                return this._inComment;\n            case 2 /* StandardTokenType.String */:\n                return this._inString;\n            case 3 /* StandardTokenType.RegEx */:\n                return this._inRegEx;\n        }\n    }\n    shouldAutoClose(context, column) {\n        // Always complete on empty line\n        if (context.getTokenCount() === 0) {\n            return true;\n        }\n        const tokenIndex = context.findTokenIndexAtOffset(column - 2);\n        const standardTokenType = context.getStandardTokenType(tokenIndex);\n        return this.isOK(standardTokenType);\n    }\n    _findNeutralCharacterInRange(fromCharCode, toCharCode) {\n        for (let charCode = fromCharCode; charCode <= toCharCode; charCode++) {\n            const character = String.fromCharCode(charCode);\n            if (!this.open.includes(character) && !this.close.includes(character)) {\n                return character;\n            }\n        }\n        return null;\n    }\n    /**\n     * Find a character in the range [0-9a-zA-Z] that does not appear in the open or close\n     */\n    findNeutralCharacter() {\n        if (!this._neutralCharacterSearched) {\n            this._neutralCharacterSearched = true;\n            if (!this._neutralCharacter) {\n                this._neutralCharacter = this._findNeutralCharacterInRange(48 /* CharCode.Digit0 */, 57 /* CharCode.Digit9 */);\n            }\n            if (!this._neutralCharacter) {\n                this._neutralCharacter = this._findNeutralCharacterInRange(97 /* CharCode.a */, 122 /* CharCode.z */);\n            }\n            if (!this._neutralCharacter) {\n                this._neutralCharacter = this._findNeutralCharacterInRange(65 /* CharCode.A */, 90 /* CharCode.Z */);\n            }\n        }\n        return this._neutralCharacter;\n    }\n}\n/**\n * @internal\n */\nexport class AutoClosingPairs {\n    constructor(autoClosingPairs) {\n        this.autoClosingPairsOpenByStart = new Map();\n        this.autoClosingPairsOpenByEnd = new Map();\n        this.autoClosingPairsCloseByStart = new Map();\n        this.autoClosingPairsCloseByEnd = new Map();\n        this.autoClosingPairsCloseSingleChar = new Map();\n        for (const pair of autoClosingPairs) {\n            appendEntry(this.autoClosingPairsOpenByStart, pair.open.charAt(0), pair);\n            appendEntry(this.autoClosingPairsOpenByEnd, pair.open.charAt(pair.open.length - 1), pair);\n            appendEntry(this.autoClosingPairsCloseByStart, pair.close.charAt(0), pair);\n            appendEntry(this.autoClosingPairsCloseByEnd, pair.close.charAt(pair.close.length - 1), pair);\n            if (pair.close.length === 1 && pair.open.length === 1) {\n                appendEntry(this.autoClosingPairsCloseSingleChar, pair.close, pair);\n            }\n        }\n    }\n}\nfunction appendEntry(target, key, value) {\n    if (target.has(key)) {\n        target.get(key).push(value);\n    }\n    else {\n        target.set(key, [value]);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\nclass CharacterPairSupport {\n    constructor(config) {\n        if (config.autoClosingPairs) {\n            this._autoClosingPairs = config.autoClosingPairs.map(el => new StandardAutoClosingPairConditional(el));\n        }\n        else if (config.brackets) {\n            this._autoClosingPairs = config.brackets.map(b => new StandardAutoClosingPairConditional({ open: b[0], close: b[1] }));\n        }\n        else {\n            this._autoClosingPairs = [];\n        }\n        if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\n            const docComment = config.__electricCharacterSupport.docComment;\n            // IDocComment is legacy, only partially supported\n            this._autoClosingPairs.push(new StandardAutoClosingPairConditional({ open: docComment.open, close: docComment.close || '' }));\n        }\n        this._autoCloseBeforeForQuotes = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES;\n        this._autoCloseBeforeForBrackets = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS;\n        this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n    }\n    getAutoClosingPairs() {\n        return this._autoClosingPairs;\n    }\n    getAutoCloseBeforeSet(forQuotes) {\n        return (forQuotes ? this._autoCloseBeforeForQuotes : this._autoCloseBeforeForBrackets);\n    }\n    getSurroundingPairs() {\n        return this._surroundingPairs;\n    }\n}\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES = ';:.,=}])> \\n\\t';\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS = '\\'\"`;:.,=}])> \\n\\t';\nexport { CharacterPairSupport };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { ignoreBracketsInToken } from '../supports.js';\nimport { BracketsUtils } from './richEditBrackets.js';\nexport class BracketElectricCharacterSupport {\n    constructor(richEditBrackets) {\n        this._richEditBrackets = richEditBrackets;\n    }\n    getElectricCharacters() {\n        const result = [];\n        if (this._richEditBrackets) {\n            for (const bracket of this._richEditBrackets.brackets) {\n                for (const close of bracket.close) {\n                    const lastChar = close.charAt(close.length - 1);\n                    result.push(lastChar);\n                }\n            }\n        }\n        return distinct(result);\n    }\n    onElectricCharacter(character, context, column) {\n        if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n            return null;\n        }\n        const tokenIndex = context.findTokenIndexAtOffset(column - 1);\n        if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n            return null;\n        }\n        const reversedBracketRegex = this._richEditBrackets.reversedRegex;\n        const text = context.getLineContent().substring(0, column - 1) + character;\n        const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\n        if (!r) {\n            return null;\n        }\n        const bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n        const isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n        if (isOpen) {\n            return null;\n        }\n        const textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\n        if (!/^\\s*$/.test(textBeforeBracket)) {\n            // There is other text on the line before the bracket\n            return null;\n        }\n        return {\n            matchOpenBracket: bracketText\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction resetGlobalRegex(reg) {\n    if (reg.global) {\n        reg.lastIndex = 0;\n    }\n    return true;\n}\nexport class IndentRulesSupport {\n    constructor(indentationRules) {\n        this._indentationRules = indentationRules;\n    }\n    shouldIncrease(text) {\n        if (this._indentationRules) {\n            if (this._indentationRules.increaseIndentPattern && resetGlobalRegex(this._indentationRules.increaseIndentPattern) && this._indentationRules.increaseIndentPattern.test(text)) {\n                return true;\n            }\n            // if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n            // \treturn true;\n            // }\n        }\n        return false;\n    }\n    shouldDecrease(text) {\n        if (this._indentationRules && this._indentationRules.decreaseIndentPattern && resetGlobalRegex(this._indentationRules.decreaseIndentPattern) && this._indentationRules.decreaseIndentPattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    shouldIndentNextLine(text) {\n        if (this._indentationRules && this._indentationRules.indentNextLinePattern && resetGlobalRegex(this._indentationRules.indentNextLinePattern) && this._indentationRules.indentNextLinePattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    shouldIgnore(text) {\n        // the text matches `unIndentedLinePattern`\n        if (this._indentationRules && this._indentationRules.unIndentedLinePattern && resetGlobalRegex(this._indentationRules.unIndentedLinePattern) && this._indentationRules.unIndentedLinePattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    getIndentMetadata(text) {\n        let ret = 0;\n        if (this.shouldIncrease(text)) {\n            ret += 1 /* IndentConsts.INCREASE_MASK */;\n        }\n        if (this.shouldDecrease(text)) {\n            ret += 2 /* IndentConsts.DECREASE_MASK */;\n        }\n        if (this.shouldIndentNextLine(text)) {\n            ret += 4 /* IndentConsts.INDENT_NEXTLINE_MASK */;\n        }\n        if (this.shouldIgnore(text)) {\n            ret += 8 /* IndentConsts.UNINDENT_MASK */;\n        }\n        return ret;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { IndentAction } from '../languageConfiguration.js';\nexport class OnEnterSupport {\n    constructor(opts) {\n        opts = opts || {};\n        opts.brackets = opts.brackets || [\n            ['(', ')'],\n            ['{', '}'],\n            ['[', ']']\n        ];\n        this._brackets = [];\n        opts.brackets.forEach((bracket) => {\n            const openRegExp = OnEnterSupport._createOpenBracketRegExp(bracket[0]);\n            const closeRegExp = OnEnterSupport._createCloseBracketRegExp(bracket[1]);\n            if (openRegExp && closeRegExp) {\n                this._brackets.push({\n                    open: bracket[0],\n                    openRegExp: openRegExp,\n                    close: bracket[1],\n                    closeRegExp: closeRegExp,\n                });\n            }\n        });\n        this._regExpRules = opts.onEnterRules || [];\n    }\n    onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText) {\n        // (1): `regExpRules`\n        if (autoIndent >= 3 /* EditorAutoIndentStrategy.Advanced */) {\n            for (let i = 0, len = this._regExpRules.length; i < len; i++) {\n                const rule = this._regExpRules[i];\n                const regResult = [{\n                        reg: rule.beforeText,\n                        text: beforeEnterText\n                    }, {\n                        reg: rule.afterText,\n                        text: afterEnterText\n                    }, {\n                        reg: rule.previousLineText,\n                        text: previousLineText\n                    }].every((obj) => {\n                    if (!obj.reg) {\n                        return true;\n                    }\n                    obj.reg.lastIndex = 0; // To disable the effect of the \"g\" flag.\n                    return obj.reg.test(obj.text);\n                });\n                if (regResult) {\n                    return rule.action;\n                }\n            }\n        }\n        // (2): Special indent-outdent\n        if (autoIndent >= 2 /* EditorAutoIndentStrategy.Brackets */) {\n            if (beforeEnterText.length > 0 && afterEnterText.length > 0) {\n                for (let i = 0, len = this._brackets.length; i < len; i++) {\n                    const bracket = this._brackets[i];\n                    if (bracket.openRegExp.test(beforeEnterText) && bracket.closeRegExp.test(afterEnterText)) {\n                        return { indentAction: IndentAction.IndentOutdent };\n                    }\n                }\n            }\n        }\n        // (4): Open bracket based logic\n        if (autoIndent >= 2 /* EditorAutoIndentStrategy.Brackets */) {\n            if (beforeEnterText.length > 0) {\n                for (let i = 0, len = this._brackets.length; i < len; i++) {\n                    const bracket = this._brackets[i];\n                    if (bracket.openRegExp.test(beforeEnterText)) {\n                        return { indentAction: IndentAction.Indent };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    static _createOpenBracketRegExp(bracket) {\n        let str = strings.escapeRegExpCharacters(bracket);\n        if (!/\\B/.test(str.charAt(0))) {\n            str = '\\\\b' + str;\n        }\n        str += '\\\\s*$';\n        return OnEnterSupport._safeRegExp(str);\n    }\n    static _createCloseBracketRegExp(bracket) {\n        let str = strings.escapeRegExpCharacters(bracket);\n        if (!/\\B/.test(str.charAt(str.length - 1))) {\n            str = str + '\\\\b';\n        }\n        str = '^\\\\s*' + str;\n        return OnEnterSupport._safeRegExp(str);\n    }\n    static _safeRegExp(def) {\n        try {\n            return new RegExp(def);\n        }\n        catch (err) {\n            onUnexpectedError(err);\n            return null;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CachedFunction } from '../../../../base/common/cache.js';\n/**\n * Captures all bracket related configurations for a single language.\n * Immutable.\n*/\nexport class LanguageBracketsConfiguration {\n    constructor(languageId, config) {\n        this.languageId = languageId;\n        const bracketPairs = config.brackets ? filterValidBrackets(config.brackets) : [];\n        const openingBracketInfos = new CachedFunction((bracket) => {\n            const closing = new Set();\n            return {\n                info: new OpeningBracketKind(this, bracket, closing),\n                closing,\n            };\n        });\n        const closingBracketInfos = new CachedFunction((bracket) => {\n            const opening = new Set();\n            const openingColorized = new Set();\n            return {\n                info: new ClosingBracketKind(this, bracket, opening, openingColorized),\n                opening,\n                openingColorized,\n            };\n        });\n        for (const [open, close] of bracketPairs) {\n            const opening = openingBracketInfos.get(open);\n            const closing = closingBracketInfos.get(close);\n            opening.closing.add(closing.info);\n            closing.opening.add(opening.info);\n        }\n        // Treat colorized brackets as brackets, and mark them as colorized.\n        const colorizedBracketPairs = config.colorizedBracketPairs\n            ? filterValidBrackets(config.colorizedBracketPairs)\n            // If not configured: Take all brackets except `<` ... `>`\n            // Many languages set < ... > as bracket pair, even though they also use it as comparison operator.\n            // This leads to problems when colorizing this bracket, so we exclude it if not explicitly configured otherwise.\n            // https://github.com/microsoft/vscode/issues/132476\n            : bracketPairs.filter((p) => !(p[0] === '<' && p[1] === '>'));\n        for (const [open, close] of colorizedBracketPairs) {\n            const opening = openingBracketInfos.get(open);\n            const closing = closingBracketInfos.get(close);\n            opening.closing.add(closing.info);\n            closing.openingColorized.add(opening.info);\n            closing.opening.add(opening.info);\n        }\n        this._openingBrackets = new Map([...openingBracketInfos.cachedValues].map(([k, v]) => [k, v.info]));\n        this._closingBrackets = new Map([...closingBracketInfos.cachedValues].map(([k, v]) => [k, v.info]));\n    }\n    /**\n     * No two brackets have the same bracket text.\n    */\n    get openingBrackets() {\n        return [...this._openingBrackets.values()];\n    }\n    /**\n     * No two brackets have the same bracket text.\n    */\n    get closingBrackets() {\n        return [...this._closingBrackets.values()];\n    }\n    getOpeningBracketInfo(bracketText) {\n        return this._openingBrackets.get(bracketText);\n    }\n    getClosingBracketInfo(bracketText) {\n        return this._closingBrackets.get(bracketText);\n    }\n    getBracketInfo(bracketText) {\n        return this.getOpeningBracketInfo(bracketText) || this.getClosingBracketInfo(bracketText);\n    }\n}\nfunction filterValidBrackets(bracketPairs) {\n    return bracketPairs.filter(([open, close]) => open !== '' && close !== '');\n}\nexport class BracketKindBase {\n    constructor(config, bracketText) {\n        this.config = config;\n        this.bracketText = bracketText;\n    }\n    get languageId() {\n        return this.config.languageId;\n    }\n}\nexport class OpeningBracketKind extends BracketKindBase {\n    constructor(config, bracketText, openedBrackets) {\n        super(config, bracketText);\n        this.openedBrackets = openedBrackets;\n        this.isOpeningBracket = true;\n    }\n}\nexport class ClosingBracketKind extends BracketKindBase {\n    constructor(config, bracketText, \n    /**\n     * Non empty array of all opening brackets this bracket closes.\n    */\n    openingBrackets, openingColorizedBrackets) {\n        super(config, bracketText);\n        this.openingBrackets = openingBrackets;\n        this.openingColorizedBrackets = openingColorizedBrackets;\n        this.isOpeningBracket = false;\n    }\n    /**\n     * Checks if this bracket closes the given other bracket.\n     * If the bracket infos come from different configurations, this method will return false.\n    */\n    closes(other) {\n        if (other['config'] !== this.config) {\n            return false;\n        }\n        return this.openingBrackets.has(other);\n    }\n    closesColorized(other) {\n        if (other['config'] !== this.config) {\n            return false;\n        }\n        return this.openingColorizedBrackets.has(other);\n    }\n    getOpeningBrackets() {\n        return [...this.openingBrackets];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { DEFAULT_WORD_REGEXP, ensureValidWordDefinition } from '../core/wordHelper.js';\nimport { AutoClosingPairs } from './languageConfiguration.js';\nimport { createScopedLineTokens } from './supports.js';\nimport { CharacterPairSupport } from './supports/characterPair.js';\nimport { BracketElectricCharacterSupport } from './supports/electricCharacter.js';\nimport { IndentRulesSupport } from './supports/indentRules.js';\nimport { OnEnterSupport } from './supports/onEnter.js';\nimport { RichEditBrackets } from './supports/richEditBrackets.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { ILanguageService } from './language.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { PLAINTEXT_LANGUAGE_ID } from './modesRegistry.js';\nimport { LanguageBracketsConfiguration } from './supports/languageBracketsConfiguration.js';\nexport class LanguageConfigurationServiceChangeEvent {\n    constructor(languageId) {\n        this.languageId = languageId;\n    }\n    affects(languageId) {\n        return !this.languageId ? true : this.languageId === languageId;\n    }\n}\nexport const ILanguageConfigurationService = createDecorator('languageConfigurationService');\nlet LanguageConfigurationService = class LanguageConfigurationService extends Disposable {\n    constructor(configurationService, languageService) {\n        super();\n        this.configurationService = configurationService;\n        this.languageService = languageService;\n        this._registry = this._register(new LanguageConfigurationRegistry());\n        this.onDidChangeEmitter = this._register(new Emitter());\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.configurations = new Map();\n        const languageConfigKeys = new Set(Object.values(customizedLanguageConfigKeys));\n        this._register(this.configurationService.onDidChangeConfiguration((e) => {\n            const globalConfigChanged = e.change.keys.some((k) => languageConfigKeys.has(k));\n            const localConfigChanged = e.change.overrides\n                .filter(([overrideLangName, keys]) => keys.some((k) => languageConfigKeys.has(k)))\n                .map(([overrideLangName]) => overrideLangName);\n            if (globalConfigChanged) {\n                this.configurations.clear();\n                this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(undefined));\n            }\n            else {\n                for (const languageId of localConfigChanged) {\n                    if (this.languageService.isRegisteredLanguageId(languageId)) {\n                        this.configurations.delete(languageId);\n                        this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(languageId));\n                    }\n                }\n            }\n        }));\n        this._register(this._registry.onDidChange((e) => {\n            this.configurations.delete(e.languageId);\n            this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(e.languageId));\n        }));\n    }\n    register(languageId, configuration, priority) {\n        return this._registry.register(languageId, configuration, priority);\n    }\n    getLanguageConfiguration(languageId) {\n        let result = this.configurations.get(languageId);\n        if (!result) {\n            result = computeConfig(languageId, this._registry, this.configurationService, this.languageService);\n            this.configurations.set(languageId, result);\n        }\n        return result;\n    }\n};\nLanguageConfigurationService = __decorate([\n    __param(0, IConfigurationService),\n    __param(1, ILanguageService)\n], LanguageConfigurationService);\nexport { LanguageConfigurationService };\nfunction computeConfig(languageId, registry, configurationService, languageService) {\n    let languageConfig = registry.getLanguageConfiguration(languageId);\n    if (!languageConfig) {\n        if (!languageService.isRegisteredLanguageId(languageId)) {\n            // this happens for the null language, which can be returned by monarch.\n            // Instead of throwing an error, we just return a default config.\n            return new ResolvedLanguageConfiguration(languageId, {});\n        }\n        languageConfig = new ResolvedLanguageConfiguration(languageId, {});\n    }\n    const customizedConfig = getCustomizedLanguageConfig(languageConfig.languageId, configurationService);\n    const data = combineLanguageConfigurations([languageConfig.underlyingConfig, customizedConfig]);\n    const config = new ResolvedLanguageConfiguration(languageConfig.languageId, data);\n    return config;\n}\nconst customizedLanguageConfigKeys = {\n    brackets: 'editor.language.brackets',\n    colorizedBracketPairs: 'editor.language.colorizedBracketPairs'\n};\nfunction getCustomizedLanguageConfig(languageId, configurationService) {\n    const brackets = configurationService.getValue(customizedLanguageConfigKeys.brackets, {\n        overrideIdentifier: languageId,\n    });\n    const colorizedBracketPairs = configurationService.getValue(customizedLanguageConfigKeys.colorizedBracketPairs, {\n        overrideIdentifier: languageId,\n    });\n    return {\n        brackets: validateBracketPairs(brackets),\n        colorizedBracketPairs: validateBracketPairs(colorizedBracketPairs),\n    };\n}\nfunction validateBracketPairs(data) {\n    if (!Array.isArray(data)) {\n        return undefined;\n    }\n    return data.map(pair => {\n        if (!Array.isArray(pair) || pair.length !== 2) {\n            return undefined;\n        }\n        return [pair[0], pair[1]];\n    }).filter((p) => !!p);\n}\nexport function getIndentationAtPosition(model, lineNumber, column) {\n    const lineText = model.getLineContent(lineNumber);\n    let indentation = strings.getLeadingWhitespace(lineText);\n    if (indentation.length > column - 1) {\n        indentation = indentation.substring(0, column - 1);\n    }\n    return indentation;\n}\nexport function getScopedLineTokens(model, lineNumber, columnNumber) {\n    model.tokenization.forceTokenization(lineNumber);\n    const lineTokens = model.tokenization.getLineTokens(lineNumber);\n    const column = (typeof columnNumber === 'undefined' ? model.getLineMaxColumn(lineNumber) - 1 : columnNumber - 1);\n    return createScopedLineTokens(lineTokens, column);\n}\nclass ComposedLanguageConfiguration {\n    constructor(languageId) {\n        this.languageId = languageId;\n        this._resolved = null;\n        this._entries = [];\n        this._order = 0;\n        this._resolved = null;\n    }\n    register(configuration, priority) {\n        const entry = new LanguageConfigurationContribution(configuration, priority, ++this._order);\n        this._entries.push(entry);\n        this._resolved = null;\n        return toDisposable(() => {\n            for (let i = 0; i < this._entries.length; i++) {\n                if (this._entries[i] === entry) {\n                    this._entries.splice(i, 1);\n                    this._resolved = null;\n                    break;\n                }\n            }\n        });\n    }\n    getResolvedConfiguration() {\n        if (!this._resolved) {\n            const config = this._resolve();\n            if (config) {\n                this._resolved = new ResolvedLanguageConfiguration(this.languageId, config);\n            }\n        }\n        return this._resolved;\n    }\n    _resolve() {\n        if (this._entries.length === 0) {\n            return null;\n        }\n        this._entries.sort(LanguageConfigurationContribution.cmp);\n        return combineLanguageConfigurations(this._entries.map(e => e.configuration));\n    }\n}\nfunction combineLanguageConfigurations(configs) {\n    let result = {\n        comments: undefined,\n        brackets: undefined,\n        wordPattern: undefined,\n        indentationRules: undefined,\n        onEnterRules: undefined,\n        autoClosingPairs: undefined,\n        surroundingPairs: undefined,\n        autoCloseBefore: undefined,\n        folding: undefined,\n        colorizedBracketPairs: undefined,\n        __electricCharacterSupport: undefined,\n    };\n    for (const entry of configs) {\n        result = {\n            comments: entry.comments || result.comments,\n            brackets: entry.brackets || result.brackets,\n            wordPattern: entry.wordPattern || result.wordPattern,\n            indentationRules: entry.indentationRules || result.indentationRules,\n            onEnterRules: entry.onEnterRules || result.onEnterRules,\n            autoClosingPairs: entry.autoClosingPairs || result.autoClosingPairs,\n            surroundingPairs: entry.surroundingPairs || result.surroundingPairs,\n            autoCloseBefore: entry.autoCloseBefore || result.autoCloseBefore,\n            folding: entry.folding || result.folding,\n            colorizedBracketPairs: entry.colorizedBracketPairs || result.colorizedBracketPairs,\n            __electricCharacterSupport: entry.__electricCharacterSupport || result.__electricCharacterSupport,\n        };\n    }\n    return result;\n}\nclass LanguageConfigurationContribution {\n    constructor(configuration, priority, order) {\n        this.configuration = configuration;\n        this.priority = priority;\n        this.order = order;\n    }\n    static cmp(a, b) {\n        if (a.priority === b.priority) {\n            // higher order last\n            return a.order - b.order;\n        }\n        // higher priority last\n        return a.priority - b.priority;\n    }\n}\nexport class LanguageConfigurationChangeEvent {\n    constructor(languageId) {\n        this.languageId = languageId;\n    }\n}\nexport class LanguageConfigurationRegistry extends Disposable {\n    constructor() {\n        super();\n        this._entries = new Map();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._register(this.register(PLAINTEXT_LANGUAGE_ID, {\n            brackets: [\n                ['(', ')'],\n                ['[', ']'],\n                ['{', '}'],\n            ],\n            surroundingPairs: [\n                { open: '{', close: '}' },\n                { open: '[', close: ']' },\n                { open: '(', close: ')' },\n                { open: '<', close: '>' },\n                { open: '\\\"', close: '\\\"' },\n                { open: '\\'', close: '\\'' },\n                { open: '`', close: '`' },\n            ],\n            colorizedBracketPairs: [],\n            folding: {\n                offSide: true\n            }\n        }, 0));\n    }\n    /**\n     * @param priority Use a higher number for higher priority\n     */\n    register(languageId, configuration, priority = 0) {\n        let entries = this._entries.get(languageId);\n        if (!entries) {\n            entries = new ComposedLanguageConfiguration(languageId);\n            this._entries.set(languageId, entries);\n        }\n        const disposable = entries.register(configuration, priority);\n        this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageId));\n        return toDisposable(() => {\n            disposable.dispose();\n            this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageId));\n        });\n    }\n    getLanguageConfiguration(languageId) {\n        const entries = this._entries.get(languageId);\n        return (entries === null || entries === void 0 ? void 0 : entries.getResolvedConfiguration()) || null;\n    }\n}\n/**\n * Immutable.\n*/\nexport class ResolvedLanguageConfiguration {\n    constructor(languageId, underlyingConfig) {\n        this.languageId = languageId;\n        this.underlyingConfig = underlyingConfig;\n        this._brackets = null;\n        this._electricCharacter = null;\n        this._onEnterSupport =\n            this.underlyingConfig.brackets ||\n                this.underlyingConfig.indentationRules ||\n                this.underlyingConfig.onEnterRules\n                ? new OnEnterSupport(this.underlyingConfig)\n                : null;\n        this.comments = ResolvedLanguageConfiguration._handleComments(this.underlyingConfig);\n        this.characterPair = new CharacterPairSupport(this.underlyingConfig);\n        this.wordDefinition = this.underlyingConfig.wordPattern || DEFAULT_WORD_REGEXP;\n        this.indentationRules = this.underlyingConfig.indentationRules;\n        if (this.underlyingConfig.indentationRules) {\n            this.indentRulesSupport = new IndentRulesSupport(this.underlyingConfig.indentationRules);\n        }\n        else {\n            this.indentRulesSupport = null;\n        }\n        this.foldingRules = this.underlyingConfig.folding || {};\n        this.bracketsNew = new LanguageBracketsConfiguration(languageId, this.underlyingConfig);\n    }\n    getWordDefinition() {\n        return ensureValidWordDefinition(this.wordDefinition);\n    }\n    get brackets() {\n        if (!this._brackets && this.underlyingConfig.brackets) {\n            this._brackets = new RichEditBrackets(this.languageId, this.underlyingConfig.brackets);\n        }\n        return this._brackets;\n    }\n    get electricCharacter() {\n        if (!this._electricCharacter) {\n            this._electricCharacter = new BracketElectricCharacterSupport(this.brackets);\n        }\n        return this._electricCharacter;\n    }\n    onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText) {\n        if (!this._onEnterSupport) {\n            return null;\n        }\n        return this._onEnterSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n    }\n    getAutoClosingPairs() {\n        return new AutoClosingPairs(this.characterPair.getAutoClosingPairs());\n    }\n    getAutoCloseBeforeSet(forQuotes) {\n        return this.characterPair.getAutoCloseBeforeSet(forQuotes);\n    }\n    getSurroundingPairs() {\n        return this.characterPair.getSurroundingPairs();\n    }\n    static _handleComments(conf) {\n        const commentRule = conf.comments;\n        if (!commentRule) {\n            return null;\n        }\n        // comment configuration\n        const comments = {};\n        if (commentRule.lineComment) {\n            comments.lineCommentToken = commentRule.lineComment;\n        }\n        if (commentRule.blockComment) {\n            const [blockStart, blockEnd] = commentRule.blockComment;\n            comments.blockCommentStartToken = blockStart;\n            comments.blockCommentEndToken = blockEnd;\n        }\n        return comments;\n    }\n}\nregisterSingleton(ILanguageConfigurationService, LanguageConfigurationService, 1 /* InstantiationType.Delayed */);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nclass Uint8Matrix {\n    constructor(rows, cols, defaultValue) {\n        const data = new Uint8Array(rows * cols);\n        for (let i = 0, len = rows * cols; i < len; i++) {\n            data[i] = defaultValue;\n        }\n        this._data = data;\n        this.rows = rows;\n        this.cols = cols;\n    }\n    get(row, col) {\n        return this._data[row * this.cols + col];\n    }\n    set(row, col, value) {\n        this._data[row * this.cols + col] = value;\n    }\n}\nexport class StateMachine {\n    constructor(edges) {\n        let maxCharCode = 0;\n        let maxState = 0 /* State.Invalid */;\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            if (chCode > maxCharCode) {\n                maxCharCode = chCode;\n            }\n            if (from > maxState) {\n                maxState = from;\n            }\n            if (to > maxState) {\n                maxState = to;\n            }\n        }\n        maxCharCode++;\n        maxState++;\n        const states = new Uint8Matrix(maxState, maxCharCode, 0 /* State.Invalid */);\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            states.set(from, chCode, to);\n        }\n        this._states = states;\n        this._maxCharCode = maxCharCode;\n    }\n    nextState(currentState, chCode) {\n        if (chCode < 0 || chCode >= this._maxCharCode) {\n            return 0 /* State.Invalid */;\n        }\n        return this._states.get(currentState, chCode);\n    }\n}\n// State machine for http:// or https:// or file://\nlet _stateMachine = null;\nfunction getStateMachine() {\n    if (_stateMachine === null) {\n        _stateMachine = new StateMachine([\n            [1 /* State.Start */, 104 /* CharCode.h */, 2 /* State.H */],\n            [1 /* State.Start */, 72 /* CharCode.H */, 2 /* State.H */],\n            [1 /* State.Start */, 102 /* CharCode.f */, 6 /* State.F */],\n            [1 /* State.Start */, 70 /* CharCode.F */, 6 /* State.F */],\n            [2 /* State.H */, 116 /* CharCode.t */, 3 /* State.HT */],\n            [2 /* State.H */, 84 /* CharCode.T */, 3 /* State.HT */],\n            [3 /* State.HT */, 116 /* CharCode.t */, 4 /* State.HTT */],\n            [3 /* State.HT */, 84 /* CharCode.T */, 4 /* State.HTT */],\n            [4 /* State.HTT */, 112 /* CharCode.p */, 5 /* State.HTTP */],\n            [4 /* State.HTT */, 80 /* CharCode.P */, 5 /* State.HTTP */],\n            [5 /* State.HTTP */, 115 /* CharCode.s */, 9 /* State.BeforeColon */],\n            [5 /* State.HTTP */, 83 /* CharCode.S */, 9 /* State.BeforeColon */],\n            [5 /* State.HTTP */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\n            [6 /* State.F */, 105 /* CharCode.i */, 7 /* State.FI */],\n            [6 /* State.F */, 73 /* CharCode.I */, 7 /* State.FI */],\n            [7 /* State.FI */, 108 /* CharCode.l */, 8 /* State.FIL */],\n            [7 /* State.FI */, 76 /* CharCode.L */, 8 /* State.FIL */],\n            [8 /* State.FIL */, 101 /* CharCode.e */, 9 /* State.BeforeColon */],\n            [8 /* State.FIL */, 69 /* CharCode.E */, 9 /* State.BeforeColon */],\n            [9 /* State.BeforeColon */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\n            [10 /* State.AfterColon */, 47 /* CharCode.Slash */, 11 /* State.AlmostThere */],\n            [11 /* State.AlmostThere */, 47 /* CharCode.Slash */, 12 /* State.End */],\n        ]);\n    }\n    return _stateMachine;\n}\nlet _classifier = null;\nfunction getClassifier() {\n    if (_classifier === null) {\n        _classifier = new CharacterClassifier(0 /* CharacterClass.None */);\n        // allow-any-unicode-next-line\n        const FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…';\n        for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* CharacterClass.ForceTermination */);\n        }\n        const CANNOT_END_WITH_CHARACTERS = '.,;:';\n        for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CharacterClass.CannotEndIn */);\n        }\n    }\n    return _classifier;\n}\nexport class LinkComputer {\n    static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n        // Do not allow to end link in certain characters...\n        let lastIncludedCharIndex = linkEndIndex - 1;\n        do {\n            const chCode = line.charCodeAt(lastIncludedCharIndex);\n            const chClass = classifier.get(chCode);\n            if (chClass !== 2 /* CharacterClass.CannotEndIn */) {\n                break;\n            }\n            lastIncludedCharIndex--;\n        } while (lastIncludedCharIndex > linkBeginIndex);\n        // Handle links enclosed in parens, square brackets and curlys.\n        if (linkBeginIndex > 0) {\n            const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n            const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n            if ((charCodeBeforeLink === 40 /* CharCode.OpenParen */ && lastCharCodeInLink === 41 /* CharCode.CloseParen */)\n                || (charCodeBeforeLink === 91 /* CharCode.OpenSquareBracket */ && lastCharCodeInLink === 93 /* CharCode.CloseSquareBracket */)\n                || (charCodeBeforeLink === 123 /* CharCode.OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CharCode.CloseCurlyBrace */)) {\n                // Do not end in ) if ( is before the link start\n                // Do not end in ] if [ is before the link start\n                // Do not end in } if { is before the link start\n                lastIncludedCharIndex--;\n            }\n        }\n        return {\n            range: {\n                startLineNumber: lineNumber,\n                startColumn: linkBeginIndex + 1,\n                endLineNumber: lineNumber,\n                endColumn: lastIncludedCharIndex + 2\n            },\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n        };\n    }\n    static computeLinks(model, stateMachine = getStateMachine()) {\n        const classifier = getClassifier();\n        const result = [];\n        for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n            const line = model.getLineContent(i);\n            const len = line.length;\n            let j = 0;\n            let linkBeginIndex = 0;\n            let linkBeginChCode = 0;\n            let state = 1 /* State.Start */;\n            let hasOpenParens = false;\n            let hasOpenSquareBracket = false;\n            let inSquareBrackets = false;\n            let hasOpenCurlyBracket = false;\n            while (j < len) {\n                let resetStateMachine = false;\n                const chCode = line.charCodeAt(j);\n                if (state === 13 /* State.Accept */) {\n                    let chClass;\n                    switch (chCode) {\n                        case 40 /* CharCode.OpenParen */:\n                            hasOpenParens = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 41 /* CharCode.CloseParen */:\n                            chClass = (hasOpenParens ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        case 91 /* CharCode.OpenSquareBracket */:\n                            inSquareBrackets = true;\n                            hasOpenSquareBracket = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 93 /* CharCode.CloseSquareBracket */:\n                            inSquareBrackets = false;\n                            chClass = (hasOpenSquareBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        case 123 /* CharCode.OpenCurlyBrace */:\n                            hasOpenCurlyBracket = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 125 /* CharCode.CloseCurlyBrace */:\n                            chClass = (hasOpenCurlyBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        // The following three rules make it that ' or \" or ` are allowed inside links\n                        // only if the link is wrapped by some other quote character\n                        case 39 /* CharCode.SingleQuote */:\n                        case 34 /* CharCode.DoubleQuote */:\n                        case 96 /* CharCode.BackTick */:\n                            if (linkBeginChCode === chCode) {\n                                chClass = 1 /* CharacterClass.ForceTermination */;\n                            }\n                            else if (linkBeginChCode === 39 /* CharCode.SingleQuote */ || linkBeginChCode === 34 /* CharCode.DoubleQuote */ || linkBeginChCode === 96 /* CharCode.BackTick */) {\n                                chClass = 0 /* CharacterClass.None */;\n                            }\n                            else {\n                                chClass = 1 /* CharacterClass.ForceTermination */;\n                            }\n                            break;\n                        case 42 /* CharCode.Asterisk */:\n                            // `*` terminates a link if the link began with `*`\n                            chClass = (linkBeginChCode === 42 /* CharCode.Asterisk */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                            break;\n                        case 124 /* CharCode.Pipe */:\n                            // `|` terminates a link if the link began with `|`\n                            chClass = (linkBeginChCode === 124 /* CharCode.Pipe */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                            break;\n                        case 32 /* CharCode.Space */:\n                            // ` ` allow space in between [ and ]\n                            chClass = (inSquareBrackets ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        default:\n                            chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n                        resetStateMachine = true;\n                    }\n                }\n                else if (state === 12 /* State.End */) {\n                    let chClass;\n                    if (chCode === 91 /* CharCode.OpenSquareBracket */) {\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n                        hasOpenSquareBracket = true;\n                        chClass = 0 /* CharacterClass.None */;\n                    }\n                    else {\n                        chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\n                        resetStateMachine = true;\n                    }\n                    else {\n                        state = 13 /* State.Accept */;\n                    }\n                }\n                else {\n                    state = stateMachine.nextState(state, chCode);\n                    if (state === 0 /* State.Invalid */) {\n                        resetStateMachine = true;\n                    }\n                }\n                if (resetStateMachine) {\n                    state = 1 /* State.Start */;\n                    hasOpenParens = false;\n                    hasOpenSquareBracket = false;\n                    hasOpenCurlyBracket = false;\n                    // Record where the link started\n                    linkBeginIndex = j + 1;\n                    linkBeginChCode = chCode;\n                }\n                j++;\n            }\n            if (state === 13 /* State.Accept */) {\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n            }\n        }\n        return result;\n    }\n}\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nexport function computeLinks(model) {\n    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n        // Unknown caller!\n        return [];\n    }\n    return LinkComputer.computeLinks(model);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Extensions as ConfigurationExtensions } from '../../../platform/configuration/common/configurationRegistry.js';\n// Define extension point ids\nexport const Extensions = {\n    ModesRegistry: 'editor.modesRegistry'\n};\nexport class EditorModesRegistry {\n    constructor() {\n        this._onDidChangeLanguages = new Emitter();\n        this.onDidChangeLanguages = this._onDidChangeLanguages.event;\n        this._languages = [];\n    }\n    registerLanguage(def) {\n        this._languages.push(def);\n        this._onDidChangeLanguages.fire(undefined);\n        return {\n            dispose: () => {\n                for (let i = 0, len = this._languages.length; i < len; i++) {\n                    if (this._languages[i] === def) {\n                        this._languages.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        };\n    }\n    getLanguages() {\n        return this._languages;\n    }\n}\nexport const ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\nexport const PLAINTEXT_LANGUAGE_ID = 'plaintext';\nexport const PLAINTEXT_EXTENSION = '.txt';\nModesRegistry.registerLanguage({\n    id: PLAINTEXT_LANGUAGE_ID,\n    extensions: [PLAINTEXT_EXTENSION],\n    aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n    mimetypes: [Mimes.text]\n});\nRegistry.as(ConfigurationExtensions.Configuration)\n    .registerDefaultConfigurations([{\n        overrides: {\n            '[plaintext]': {\n                'editor.unicodeHighlight.ambiguousCharacters': false,\n                'editor.unicodeHighlight.invisibleCharacters': false\n            }\n        }\n    }]);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Token, TokenizationResult, EncodedTokenizationResult } from '../languages.js';\nexport const NullState = new class {\n    clone() {\n        return this;\n    }\n    equals(other) {\n        return (this === other);\n    }\n};\nexport function nullTokenize(languageId, state) {\n    return new TokenizationResult([new Token(0, '', languageId)], state);\n}\nexport function nullTokenizeEncoded(languageId, state) {\n    const tokens = new Uint32Array(2);\n    tokens[0] = 0;\n    tokens[1] = ((languageId << 0 /* MetadataConsts.LANGUAGEID_OFFSET */)\n        | (0 /* StandardTokenType.Other */ << 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */)\n        | (0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n        | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n        | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\n    return new EncodedTokenizationResult(tokens, state === null ? NullState : state);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function createScopedLineTokens(context, offset) {\n    const tokenCount = context.getCount();\n    const tokenIndex = context.findTokenIndexAtOffset(offset);\n    const desiredLanguageId = context.getLanguageId(tokenIndex);\n    let lastTokenIndex = tokenIndex;\n    while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\n        lastTokenIndex++;\n    }\n    let firstTokenIndex = tokenIndex;\n    while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\n        firstTokenIndex--;\n    }\n    return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\n}\nexport class ScopedLineTokens {\n    constructor(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\n        this._scopedLineTokensBrand = undefined;\n        this._actual = actual;\n        this.languageId = languageId;\n        this._firstTokenIndex = firstTokenIndex;\n        this._lastTokenIndex = lastTokenIndex;\n        this.firstCharOffset = firstCharOffset;\n        this._lastCharOffset = lastCharOffset;\n    }\n    getLineContent() {\n        const actualLineContent = this._actual.getLineContent();\n        return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\n    }\n    getActualLineContentBefore(offset) {\n        const actualLineContent = this._actual.getLineContent();\n        return actualLineContent.substring(0, this.firstCharOffset + offset);\n    }\n    getTokenCount() {\n        return this._lastTokenIndex - this._firstTokenIndex;\n    }\n    findTokenIndexAtOffset(offset) {\n        return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\n    }\n    getStandardTokenType(tokenIndex) {\n        return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\n    }\n}\nexport function ignoreBracketsInToken(standardTokenType) {\n    return (standardTokenType & 3 /* IgnoreBracketsInTokens.value */) !== 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass BasicInplaceReplace {\n    constructor() {\n        this._defaultValueSet = [\n            ['true', 'false'],\n            ['True', 'False'],\n            ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'],\n            ['public', 'protected', 'private'],\n        ];\n    }\n    navigateValueSet(range1, text1, range2, text2, up) {\n        if (range1 && text1) {\n            const result = this.doNavigateValueSet(text1, up);\n            if (result) {\n                return {\n                    range: range1,\n                    value: result\n                };\n            }\n        }\n        if (range2 && text2) {\n            const result = this.doNavigateValueSet(text2, up);\n            if (result) {\n                return {\n                    range: range2,\n                    value: result\n                };\n            }\n        }\n        return null;\n    }\n    doNavigateValueSet(text, up) {\n        const numberResult = this.numberReplace(text, up);\n        if (numberResult !== null) {\n            return numberResult;\n        }\n        return this.textReplace(text, up);\n    }\n    numberReplace(value, up) {\n        const precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));\n        let n1 = Number(value);\n        const n2 = parseFloat(value);\n        if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\n            if (n1 === 0 && !up) {\n                return null; // don't do negative\n                //\t\t\t} else if(n1 === 9 && up) {\n                //\t\t\t\treturn null; // don't insert 10 into a number\n            }\n            else {\n                n1 = Math.floor(n1 * precision);\n                n1 += up ? precision : -precision;\n                return String(n1 / precision);\n            }\n        }\n        return null;\n    }\n    textReplace(value, up) {\n        return this.valueSetsReplace(this._defaultValueSet, value, up);\n    }\n    valueSetsReplace(valueSets, value, up) {\n        let result = null;\n        for (let i = 0, len = valueSets.length; result === null && i < len; i++) {\n            result = this.valueSetReplace(valueSets[i], value, up);\n        }\n        return result;\n    }\n    valueSetReplace(valueSet, value, up) {\n        let idx = valueSet.indexOf(value);\n        if (idx >= 0) {\n            idx += up ? +1 : -1;\n            if (idx < 0) {\n                idx = valueSet.length - 1;\n            }\n            else {\n                idx %= valueSet.length;\n            }\n            return valueSet[idx];\n        }\n        return null;\n    }\n}\nBasicInplaceReplace.INSTANCE = new BasicInplaceReplace();\nexport { BasicInplaceReplace };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport * as stringBuilder from '../../core/stringBuilder.js';\nimport { Range } from '../../core/range.js';\n/**\n * Represents a grouping of colliding bracket pairs.\n *\n * Most of the times this contains a single bracket pair,\n * but sometimes this contains multiple bracket pairs in cases\n * where the same string appears as a closing bracket for multiple\n * bracket pairs, or the same string appears an opening bracket for\n * multiple bracket pairs.\n *\n * e.g. of a group containing a single pair:\n *   open: ['{'], close: ['}']\n *\n * e.g. of a group containing multiple pairs:\n *   open: ['if', 'for'], close: ['end', 'end']\n */\nexport class RichEditBracket {\n    constructor(languageId, index, open, close, forwardRegex, reversedRegex) {\n        this._richEditBracketBrand = undefined;\n        this.languageId = languageId;\n        this.index = index;\n        this.open = open;\n        this.close = close;\n        this.forwardRegex = forwardRegex;\n        this.reversedRegex = reversedRegex;\n        this._openSet = RichEditBracket._toSet(this.open);\n        this._closeSet = RichEditBracket._toSet(this.close);\n    }\n    /**\n     * Check if the provided `text` is an open bracket in this group.\n     */\n    isOpen(text) {\n        return this._openSet.has(text);\n    }\n    /**\n     * Check if the provided `text` is a close bracket in this group.\n     */\n    isClose(text) {\n        return this._closeSet.has(text);\n    }\n    static _toSet(arr) {\n        const result = new Set();\n        for (const element of arr) {\n            result.add(element);\n        }\n        return result;\n    }\n}\n/**\n * Groups together brackets that have equal open or close sequences.\n *\n * For example, if the following brackets are defined:\n *   ['IF','END']\n *   ['for','end']\n *   ['{','}']\n *\n * Then the grouped brackets would be:\n *   { open: ['if', 'for'], close: ['end', 'end'] }\n *   { open: ['{'], close: ['}'] }\n *\n */\nfunction groupFuzzyBrackets(brackets) {\n    const N = brackets.length;\n    brackets = brackets.map(b => [b[0].toLowerCase(), b[1].toLowerCase()]);\n    const group = [];\n    for (let i = 0; i < N; i++) {\n        group[i] = i;\n    }\n    const areOverlapping = (a, b) => {\n        const [aOpen, aClose] = a;\n        const [bOpen, bClose] = b;\n        return (aOpen === bOpen || aOpen === bClose || aClose === bOpen || aClose === bClose);\n    };\n    const mergeGroups = (g1, g2) => {\n        const newG = Math.min(g1, g2);\n        const oldG = Math.max(g1, g2);\n        for (let i = 0; i < N; i++) {\n            if (group[i] === oldG) {\n                group[i] = newG;\n            }\n        }\n    };\n    // group together brackets that have the same open or the same close sequence\n    for (let i = 0; i < N; i++) {\n        const a = brackets[i];\n        for (let j = i + 1; j < N; j++) {\n            const b = brackets[j];\n            if (areOverlapping(a, b)) {\n                mergeGroups(group[i], group[j]);\n            }\n        }\n    }\n    const result = [];\n    for (let g = 0; g < N; g++) {\n        const currentOpen = [];\n        const currentClose = [];\n        for (let i = 0; i < N; i++) {\n            if (group[i] === g) {\n                const [open, close] = brackets[i];\n                currentOpen.push(open);\n                currentClose.push(close);\n            }\n        }\n        if (currentOpen.length > 0) {\n            result.push({\n                open: currentOpen,\n                close: currentClose\n            });\n        }\n    }\n    return result;\n}\nexport class RichEditBrackets {\n    constructor(languageId, _brackets) {\n        this._richEditBracketsBrand = undefined;\n        const brackets = groupFuzzyBrackets(_brackets);\n        this.brackets = brackets.map((b, index) => {\n            return new RichEditBracket(languageId, index, b.open, b.close, getRegexForBracketPair(b.open, b.close, brackets, index), getReversedRegexForBracketPair(b.open, b.close, brackets, index));\n        });\n        this.forwardRegex = getRegexForBrackets(this.brackets);\n        this.reversedRegex = getReversedRegexForBrackets(this.brackets);\n        this.textIsBracket = {};\n        this.textIsOpenBracket = {};\n        this.maxBracketLength = 0;\n        for (const bracket of this.brackets) {\n            for (const open of bracket.open) {\n                this.textIsBracket[open] = bracket;\n                this.textIsOpenBracket[open] = true;\n                this.maxBracketLength = Math.max(this.maxBracketLength, open.length);\n            }\n            for (const close of bracket.close) {\n                this.textIsBracket[close] = bracket;\n                this.textIsOpenBracket[close] = false;\n                this.maxBracketLength = Math.max(this.maxBracketLength, close.length);\n            }\n        }\n    }\n}\nfunction collectSuperstrings(str, brackets, currentIndex, dest) {\n    for (let i = 0, len = brackets.length; i < len; i++) {\n        if (i === currentIndex) {\n            continue;\n        }\n        const bracket = brackets[i];\n        for (const open of bracket.open) {\n            if (open.indexOf(str) >= 0) {\n                dest.push(open);\n            }\n        }\n        for (const close of bracket.close) {\n            if (close.indexOf(str) >= 0) {\n                dest.push(close);\n            }\n        }\n    }\n}\nfunction lengthcmp(a, b) {\n    return a.length - b.length;\n}\nfunction unique(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const result = [];\n    const seen = new Set();\n    for (const element of arr) {\n        if (seen.has(element)) {\n            continue;\n        }\n        result.push(element);\n        seen.add(element);\n    }\n    return result;\n}\n/**\n * Create a regular expression that can be used to search forward in a piece of text\n * for a group of bracket pairs. But this regex must be built in a way in which\n * it is aware of the other bracket pairs defined for the language.\n *\n * For example, if a language contains the following bracket pairs:\n *   ['begin', 'end']\n *   ['if', 'end if']\n * The two bracket pairs do not collide because no open or close brackets are equal.\n * So the function getRegexForBracketPair is called twice, once with\n * the ['begin'], ['end'] group consisting of one bracket pair, and once with\n * the ['if'], ['end if'] group consiting of the other bracket pair.\n *\n * But there could be a situation where an occurrence of 'end if' is mistaken\n * for an occurrence of 'end'.\n *\n * Therefore, for the bracket pair ['begin', 'end'], the regex will also\n * target 'end if'. The regex will be something like:\n *   /(\\bend if\\b)|(\\bend\\b)|(\\bif\\b)/\n *\n * The regex also searches for \"superstrings\" (other brackets that might be mistaken with the current bracket).\n *\n */\nfunction getRegexForBracketPair(open, close, brackets, currentIndex) {\n    // search in all brackets for other brackets that are a superstring of these brackets\n    let pieces = [];\n    pieces = pieces.concat(open);\n    pieces = pieces.concat(close);\n    for (let i = 0, len = pieces.length; i < len; i++) {\n        collectSuperstrings(pieces[i], brackets, currentIndex, pieces);\n    }\n    pieces = unique(pieces);\n    pieces.sort(lengthcmp);\n    pieces.reverse();\n    return createBracketOrRegExp(pieces);\n}\n/**\n * Matching a regular expression in JS can only be done \"forwards\". So JS offers natively only\n * methods to find the first match of a regex in a string. But sometimes, it is useful to\n * find the last match of a regex in a string. For such a situation, a nice solution is to\n * simply reverse the string and then search for a reversed regex.\n *\n * This function also has the fine details of `getRegexForBracketPair`. For the same example\n * given above, the regex produced here would look like:\n *   /(\\bfi dne\\b)|(\\bdne\\b)|(\\bfi\\b)/\n */\nfunction getReversedRegexForBracketPair(open, close, brackets, currentIndex) {\n    // search in all brackets for other brackets that are a superstring of these brackets\n    let pieces = [];\n    pieces = pieces.concat(open);\n    pieces = pieces.concat(close);\n    for (let i = 0, len = pieces.length; i < len; i++) {\n        collectSuperstrings(pieces[i], brackets, currentIndex, pieces);\n    }\n    pieces = unique(pieces);\n    pieces.sort(lengthcmp);\n    pieces.reverse();\n    return createBracketOrRegExp(pieces.map(toReversedString));\n}\n/**\n * Creates a regular expression that targets all bracket pairs.\n *\n * e.g. for the bracket pairs:\n *  ['{','}']\n *  ['begin,'end']\n *  ['for','end']\n * the regex would look like:\n *  /(\\{)|(\\})|(\\bbegin\\b)|(\\bend\\b)|(\\bfor\\b)/\n */\nfunction getRegexForBrackets(brackets) {\n    let pieces = [];\n    for (const bracket of brackets) {\n        for (const open of bracket.open) {\n            pieces.push(open);\n        }\n        for (const close of bracket.close) {\n            pieces.push(close);\n        }\n    }\n    pieces = unique(pieces);\n    return createBracketOrRegExp(pieces);\n}\n/**\n * Matching a regular expression in JS can only be done \"forwards\". So JS offers natively only\n * methods to find the first match of a regex in a string. But sometimes, it is useful to\n * find the last match of a regex in a string. For such a situation, a nice solution is to\n * simply reverse the string and then search for a reversed regex.\n *\n * e.g. for the bracket pairs:\n *  ['{','}']\n *  ['begin,'end']\n *  ['for','end']\n * the regex would look like:\n *  /(\\{)|(\\})|(\\bnigeb\\b)|(\\bdne\\b)|(\\brof\\b)/\n */\nfunction getReversedRegexForBrackets(brackets) {\n    let pieces = [];\n    for (const bracket of brackets) {\n        for (const open of bracket.open) {\n            pieces.push(open);\n        }\n        for (const close of bracket.close) {\n            pieces.push(close);\n        }\n    }\n    pieces = unique(pieces);\n    return createBracketOrRegExp(pieces.map(toReversedString));\n}\nfunction prepareBracketForRegExp(str) {\n    // This bracket pair uses letters like e.g. \"begin\" - \"end\"\n    const insertWordBoundaries = (/^[\\w ]+$/.test(str));\n    str = strings.escapeRegExpCharacters(str);\n    return (insertWordBoundaries ? `\\\\b${str}\\\\b` : str);\n}\nfunction createBracketOrRegExp(pieces) {\n    const regexStr = `(${pieces.map(prepareBracketForRegExp).join(')|(')})`;\n    return strings.createRegExp(regexStr, true);\n}\nconst toReversedString = (function () {\n    function reverse(str) {\n        // create a Uint16Array and then use a TextDecoder to create a string\n        const arr = new Uint16Array(str.length);\n        let offset = 0;\n        for (let i = str.length - 1; i >= 0; i--) {\n            arr[offset++] = str.charCodeAt(i);\n        }\n        return stringBuilder.getPlatformTextDecoder().decode(arr);\n    }\n    let lastInput = null;\n    let lastOutput = null;\n    return function toReversedString(str) {\n        if (lastInput !== str) {\n            lastInput = str;\n            lastOutput = reverse(lastInput);\n        }\n        return lastOutput;\n    };\n})();\nexport class BracketsUtils {\n    static _findPrevBracketInText(reversedBracketRegex, lineNumber, reversedText, offset) {\n        const m = reversedText.match(reversedBracketRegex);\n        if (!m) {\n            return null;\n        }\n        const matchOffset = reversedText.length - (m.index || 0);\n        const matchLength = m[0].length;\n        const absoluteMatchOffset = offset + matchOffset;\n        return new Range(lineNumber, absoluteMatchOffset - matchLength + 1, lineNumber, absoluteMatchOffset + 1);\n    }\n    static findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, startOffset, endOffset) {\n        // Because JS does not support backwards regex search, we search forwards in a reversed string with a reversed regex ;)\n        const reversedLineText = toReversedString(lineText);\n        const reversedSubstr = reversedLineText.substring(lineText.length - endOffset, lineText.length - startOffset);\n        return this._findPrevBracketInText(reversedBracketRegex, lineNumber, reversedSubstr, startOffset);\n    }\n    static findNextBracketInText(bracketRegex, lineNumber, text, offset) {\n        const m = text.match(bracketRegex);\n        if (!m) {\n            return null;\n        }\n        const matchOffset = m.index || 0;\n        const matchLength = m[0].length;\n        if (matchLength === 0) {\n            return null;\n        }\n        const absoluteMatchOffset = offset + matchOffset;\n        return new Range(lineNumber, absoluteMatchOffset + 1, lineNumber, absoluteMatchOffset + 1 + matchLength);\n    }\n    static findNextBracketInRange(bracketRegex, lineNumber, lineText, startOffset, endOffset) {\n        const substr = lineText.substring(startOffset, endOffset);\n        return this.findNextBracketInText(bracketRegex, lineNumber, substr, startOffset);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../../base/common/color.js';\nexport class ParsedTokenThemeRule {\n    constructor(token, index, fontStyle, foreground, background) {\n        this._parsedThemeRuleBrand = undefined;\n        this.token = token;\n        this.index = index;\n        this.fontStyle = fontStyle;\n        this.foreground = foreground;\n        this.background = background;\n    }\n}\n/**\n * Parse a raw theme into rules.\n */\nexport function parseTokenTheme(source) {\n    if (!source || !Array.isArray(source)) {\n        return [];\n    }\n    const result = [];\n    let resultLen = 0;\n    for (let i = 0, len = source.length; i < len; i++) {\n        const entry = source[i];\n        let fontStyle = -1 /* FontStyle.NotSet */;\n        if (typeof entry.fontStyle === 'string') {\n            fontStyle = 0 /* FontStyle.None */;\n            const segments = entry.fontStyle.split(' ');\n            for (let j = 0, lenJ = segments.length; j < lenJ; j++) {\n                const segment = segments[j];\n                switch (segment) {\n                    case 'italic':\n                        fontStyle = fontStyle | 1 /* FontStyle.Italic */;\n                        break;\n                    case 'bold':\n                        fontStyle = fontStyle | 2 /* FontStyle.Bold */;\n                        break;\n                    case 'underline':\n                        fontStyle = fontStyle | 4 /* FontStyle.Underline */;\n                        break;\n                    case 'strikethrough':\n                        fontStyle = fontStyle | 8 /* FontStyle.Strikethrough */;\n                        break;\n                }\n            }\n        }\n        let foreground = null;\n        if (typeof entry.foreground === 'string') {\n            foreground = entry.foreground;\n        }\n        let background = null;\n        if (typeof entry.background === 'string') {\n            background = entry.background;\n        }\n        result[resultLen++] = new ParsedTokenThemeRule(entry.token || '', i, fontStyle, foreground, background);\n    }\n    return result;\n}\n/**\n * Resolve rules (i.e. inheritance).\n */\nfunction resolveParsedTokenThemeRules(parsedThemeRules, customTokenColors) {\n    // Sort rules lexicographically, and then by index if necessary\n    parsedThemeRules.sort((a, b) => {\n        const r = strcmp(a.token, b.token);\n        if (r !== 0) {\n            return r;\n        }\n        return a.index - b.index;\n    });\n    // Determine defaults\n    let defaultFontStyle = 0 /* FontStyle.None */;\n    let defaultForeground = '000000';\n    let defaultBackground = 'ffffff';\n    while (parsedThemeRules.length >= 1 && parsedThemeRules[0].token === '') {\n        const incomingDefaults = parsedThemeRules.shift();\n        if (incomingDefaults.fontStyle !== -1 /* FontStyle.NotSet */) {\n            defaultFontStyle = incomingDefaults.fontStyle;\n        }\n        if (incomingDefaults.foreground !== null) {\n            defaultForeground = incomingDefaults.foreground;\n        }\n        if (incomingDefaults.background !== null) {\n            defaultBackground = incomingDefaults.background;\n        }\n    }\n    const colorMap = new ColorMap();\n    // start with token colors from custom token themes\n    for (const color of customTokenColors) {\n        colorMap.getId(color);\n    }\n    const foregroundColorId = colorMap.getId(defaultForeground);\n    const backgroundColorId = colorMap.getId(defaultBackground);\n    const defaults = new ThemeTrieElementRule(defaultFontStyle, foregroundColorId, backgroundColorId);\n    const root = new ThemeTrieElement(defaults);\n    for (let i = 0, len = parsedThemeRules.length; i < len; i++) {\n        const rule = parsedThemeRules[i];\n        root.insert(rule.token, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\n    }\n    return new TokenTheme(colorMap, root);\n}\nconst colorRegExp = /^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;\nexport class ColorMap {\n    constructor() {\n        this._lastColorId = 0;\n        this._id2color = [];\n        this._color2id = new Map();\n    }\n    getId(color) {\n        if (color === null) {\n            return 0;\n        }\n        const match = color.match(colorRegExp);\n        if (!match) {\n            throw new Error('Illegal value for token color: ' + color);\n        }\n        color = match[1].toUpperCase();\n        let value = this._color2id.get(color);\n        if (value) {\n            return value;\n        }\n        value = ++this._lastColorId;\n        this._color2id.set(color, value);\n        this._id2color[value] = Color.fromHex('#' + color);\n        return value;\n    }\n    getColorMap() {\n        return this._id2color.slice(0);\n    }\n}\nexport class TokenTheme {\n    static createFromRawTokenTheme(source, customTokenColors) {\n        return this.createFromParsedTokenTheme(parseTokenTheme(source), customTokenColors);\n    }\n    static createFromParsedTokenTheme(source, customTokenColors) {\n        return resolveParsedTokenThemeRules(source, customTokenColors);\n    }\n    constructor(colorMap, root) {\n        this._colorMap = colorMap;\n        this._root = root;\n        this._cache = new Map();\n    }\n    getColorMap() {\n        return this._colorMap.getColorMap();\n    }\n    _match(token) {\n        return this._root.match(token);\n    }\n    match(languageId, token) {\n        // The cache contains the metadata without the language bits set.\n        let result = this._cache.get(token);\n        if (typeof result === 'undefined') {\n            const rule = this._match(token);\n            const standardToken = toStandardTokenType(token);\n            result = (rule.metadata\n                | (standardToken << 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */)) >>> 0;\n            this._cache.set(token, result);\n        }\n        return (result\n            | (languageId << 0 /* MetadataConsts.LANGUAGEID_OFFSET */)) >>> 0;\n    }\n}\nconst STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|regexp)\\b/;\nexport function toStandardTokenType(tokenType) {\n    const m = tokenType.match(STANDARD_TOKEN_TYPE_REGEXP);\n    if (!m) {\n        return 0 /* StandardTokenType.Other */;\n    }\n    switch (m[1]) {\n        case 'comment':\n            return 1 /* StandardTokenType.Comment */;\n        case 'string':\n            return 2 /* StandardTokenType.String */;\n        case 'regex':\n            return 3 /* StandardTokenType.RegEx */;\n        case 'regexp':\n            return 3 /* StandardTokenType.RegEx */;\n    }\n    throw new Error('Unexpected match for standard token type!');\n}\nexport function strcmp(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n}\nexport class ThemeTrieElementRule {\n    constructor(fontStyle, foreground, background) {\n        this._themeTrieElementRuleBrand = undefined;\n        this._fontStyle = fontStyle;\n        this._foreground = foreground;\n        this._background = background;\n        this.metadata = ((this._fontStyle << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n            | (this._foreground << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n            | (this._background << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\n    }\n    clone() {\n        return new ThemeTrieElementRule(this._fontStyle, this._foreground, this._background);\n    }\n    acceptOverwrite(fontStyle, foreground, background) {\n        if (fontStyle !== -1 /* FontStyle.NotSet */) {\n            this._fontStyle = fontStyle;\n        }\n        if (foreground !== 0 /* ColorId.None */) {\n            this._foreground = foreground;\n        }\n        if (background !== 0 /* ColorId.None */) {\n            this._background = background;\n        }\n        this.metadata = ((this._fontStyle << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n            | (this._foreground << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n            | (this._background << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\n    }\n}\nexport class ThemeTrieElement {\n    constructor(mainRule) {\n        this._themeTrieElementBrand = undefined;\n        this._mainRule = mainRule;\n        this._children = new Map();\n    }\n    match(token) {\n        if (token === '') {\n            return this._mainRule;\n        }\n        const dotIndex = token.indexOf('.');\n        let head;\n        let tail;\n        if (dotIndex === -1) {\n            head = token;\n            tail = '';\n        }\n        else {\n            head = token.substring(0, dotIndex);\n            tail = token.substring(dotIndex + 1);\n        }\n        const child = this._children.get(head);\n        if (typeof child !== 'undefined') {\n            return child.match(tail);\n        }\n        return this._mainRule;\n    }\n    insert(token, fontStyle, foreground, background) {\n        if (token === '') {\n            // Merge into the main rule\n            this._mainRule.acceptOverwrite(fontStyle, foreground, background);\n            return;\n        }\n        const dotIndex = token.indexOf('.');\n        let head;\n        let tail;\n        if (dotIndex === -1) {\n            head = token;\n            tail = '';\n        }\n        else {\n            head = token.substring(0, dotIndex);\n            tail = token.substring(dotIndex + 1);\n        }\n        let child = this._children.get(head);\n        if (typeof child === 'undefined') {\n            child = new ThemeTrieElement(this._mainRule.clone());\n            this._children.set(head, child);\n        }\n        child.insert(tail, fontStyle, foreground, background);\n    }\n}\nexport function generateTokensCSSForColorMap(colorMap) {\n    const rules = [];\n    for (let i = 1, len = colorMap.length; i < len; i++) {\n        const color = colorMap[i];\n        rules[i] = `.mtk${i} { color: ${color}; }`;\n    }\n    rules.push('.mtki { font-style: italic; }');\n    rules.push('.mtkb { font-weight: bold; }');\n    rules.push('.mtku { text-decoration: underline; text-underline-position: under; }');\n    rules.push('.mtks { text-decoration: line-through; }');\n    rules.push('.mtks.mtku { text-decoration: underline line-through; text-underline-position: under; }');\n    return rules.join('\\n');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { NullState, nullTokenizeEncoded } from './nullTokenize.js';\nconst fallback = {\n    getInitialState: () => NullState,\n    tokenizeEncoded: (buffer, hasEOL, state) => nullTokenizeEncoded(0 /* LanguageId.Null */, state)\n};\nexport function tokenizeToString(languageService, text, languageId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!languageId) {\n            return _tokenizeToString(text, languageService.languageIdCodec, fallback);\n        }\n        const tokenizationSupport = yield TokenizationRegistry.getOrCreate(languageId);\n        return _tokenizeToString(text, languageService.languageIdCodec, tokenizationSupport || fallback);\n    });\n}\nexport function tokenizeLineToHTML(text, viewLineTokens, colorMap, startOffset, endOffset, tabSize, useNbsp) {\n    let result = `<div>`;\n    let charIndex = startOffset;\n    let tabsCharDelta = 0;\n    let prevIsSpace = true;\n    for (let tokenIndex = 0, tokenCount = viewLineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\n        const tokenEndIndex = viewLineTokens.getEndOffset(tokenIndex);\n        if (tokenEndIndex <= startOffset) {\n            continue;\n        }\n        let partContent = '';\n        for (; charIndex < tokenEndIndex && charIndex < endOffset; charIndex++) {\n            const charCode = text.charCodeAt(charIndex);\n            switch (charCode) {\n                case 9 /* CharCode.Tab */: {\n                    let insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n                    tabsCharDelta += insertSpacesCount - 1;\n                    while (insertSpacesCount > 0) {\n                        if (useNbsp && prevIsSpace) {\n                            partContent += '&#160;';\n                            prevIsSpace = false;\n                        }\n                        else {\n                            partContent += ' ';\n                            prevIsSpace = true;\n                        }\n                        insertSpacesCount--;\n                    }\n                    break;\n                }\n                case 60 /* CharCode.LessThan */:\n                    partContent += '&lt;';\n                    prevIsSpace = false;\n                    break;\n                case 62 /* CharCode.GreaterThan */:\n                    partContent += '&gt;';\n                    prevIsSpace = false;\n                    break;\n                case 38 /* CharCode.Ampersand */:\n                    partContent += '&amp;';\n                    prevIsSpace = false;\n                    break;\n                case 0 /* CharCode.Null */:\n                    partContent += '&#00;';\n                    prevIsSpace = false;\n                    break;\n                case 65279 /* CharCode.UTF8_BOM */:\n                case 8232 /* CharCode.LINE_SEPARATOR */:\n                case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n                case 133 /* CharCode.NEXT_LINE */:\n                    partContent += '\\ufffd';\n                    prevIsSpace = false;\n                    break;\n                case 13 /* CharCode.CarriageReturn */:\n                    // zero width space, because carriage return would introduce a line break\n                    partContent += '&#8203';\n                    prevIsSpace = false;\n                    break;\n                case 32 /* CharCode.Space */:\n                    if (useNbsp && prevIsSpace) {\n                        partContent += '&#160;';\n                        prevIsSpace = false;\n                    }\n                    else {\n                        partContent += ' ';\n                        prevIsSpace = true;\n                    }\n                    break;\n                default:\n                    partContent += String.fromCharCode(charCode);\n                    prevIsSpace = false;\n            }\n        }\n        result += `<span style=\"${viewLineTokens.getInlineStyle(tokenIndex, colorMap)}\">${partContent}</span>`;\n        if (tokenEndIndex > endOffset || charIndex >= endOffset) {\n            break;\n        }\n    }\n    result += `</div>`;\n    return result;\n}\nexport function _tokenizeToString(text, languageIdCodec, tokenizationSupport) {\n    let result = `<div class=\"monaco-tokenized-source\">`;\n    const lines = strings.splitLines(text);\n    let currentState = tokenizationSupport.getInitialState();\n    for (let i = 0, len = lines.length; i < len; i++) {\n        const line = lines[i];\n        if (i > 0) {\n            result += `<br/>`;\n        }\n        const tokenizationResult = tokenizationSupport.tokenizeEncoded(line, true, currentState);\n        LineTokens.convertToEndOffset(tokenizationResult.tokens, line.length);\n        const lineTokens = new LineTokens(tokenizationResult.tokens, line, languageIdCodec);\n        const viewLineTokens = lineTokens.inflate();\n        let startOffset = 0;\n        for (let j = 0, lenJ = viewLineTokens.getCount(); j < lenJ; j++) {\n            const type = viewLineTokens.getClassName(j);\n            const endIndex = viewLineTokens.getEndOffset(j);\n            result += `<span class=\"${type}\">${strings.escape(line.substring(startOffset, endIndex))}</span>`;\n            startOffset = endIndex;\n        }\n        currentState = tokenizationResult.endState;\n    }\n    result += `</div>`;\n    return result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../base/common/objects.js';\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nexport var OverviewRulerLane;\n(function (OverviewRulerLane) {\n    OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\n    OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\n    OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\n    OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\n})(OverviewRulerLane || (OverviewRulerLane = {}));\n/**\n * Position in the minimap to render the decoration.\n */\nexport var MinimapPosition;\n(function (MinimapPosition) {\n    MinimapPosition[MinimapPosition[\"Inline\"] = 1] = \"Inline\";\n    MinimapPosition[MinimapPosition[\"Gutter\"] = 2] = \"Gutter\";\n})(MinimapPosition || (MinimapPosition = {}));\nexport var InjectedTextCursorStops;\n(function (InjectedTextCursorStops) {\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Both\"] = 0] = \"Both\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Right\"] = 1] = \"Right\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Left\"] = 2] = \"Left\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"None\"] = 3] = \"None\";\n})(InjectedTextCursorStops || (InjectedTextCursorStops = {}));\nexport class TextModelResolvedOptions {\n    get originalIndentSize() {\n        return this._indentSizeIsTabSize ? 'tabSize' : this.indentSize;\n    }\n    /**\n     * @internal\n     */\n    constructor(src) {\n        this._textModelResolvedOptionsBrand = undefined;\n        this.tabSize = Math.max(1, src.tabSize | 0);\n        if (src.indentSize === 'tabSize') {\n            this.indentSize = this.tabSize;\n            this._indentSizeIsTabSize = true;\n        }\n        else {\n            this.indentSize = Math.max(1, src.indentSize | 0);\n            this._indentSizeIsTabSize = false;\n        }\n        this.insertSpaces = Boolean(src.insertSpaces);\n        this.defaultEOL = src.defaultEOL | 0;\n        this.trimAutoWhitespace = Boolean(src.trimAutoWhitespace);\n        this.bracketPairColorizationOptions = src.bracketPairColorizationOptions;\n    }\n    /**\n     * @internal\n     */\n    equals(other) {\n        return (this.tabSize === other.tabSize\n            && this._indentSizeIsTabSize === other._indentSizeIsTabSize\n            && this.indentSize === other.indentSize\n            && this.insertSpaces === other.insertSpaces\n            && this.defaultEOL === other.defaultEOL\n            && this.trimAutoWhitespace === other.trimAutoWhitespace\n            && equals(this.bracketPairColorizationOptions, other.bracketPairColorizationOptions));\n    }\n    /**\n     * @internal\n     */\n    createChangeEvent(newOpts) {\n        return {\n            tabSize: this.tabSize !== newOpts.tabSize,\n            indentSize: this.indentSize !== newOpts.indentSize,\n            insertSpaces: this.insertSpaces !== newOpts.insertSpaces,\n            trimAutoWhitespace: this.trimAutoWhitespace !== newOpts.trimAutoWhitespace,\n        };\n    }\n}\nexport class FindMatch {\n    /**\n     * @internal\n     */\n    constructor(range, matches) {\n        this._findMatchBrand = undefined;\n        this.range = range;\n        this.matches = matches;\n    }\n}\n/**\n * @internal\n */\nexport function isITextSnapshot(obj) {\n    return (obj && typeof obj.read === 'function');\n}\n/**\n * @internal\n */\nexport class ValidAnnotatedEditOperation {\n    constructor(identifier, range, text, forceMoveMarkers, isAutoWhitespaceEdit, _isTracked) {\n        this.identifier = identifier;\n        this.range = range;\n        this.text = text;\n        this.forceMoveMarkers = forceMoveMarkers;\n        this.isAutoWhitespaceEdit = isAutoWhitespaceEdit;\n        this._isTracked = _isTracked;\n    }\n}\n/**\n * @internal\n */\nexport class SearchData {\n    constructor(regex, wordSeparators, simpleSearch) {\n        this.regex = regex;\n        this.wordSeparators = wordSeparators;\n        this.simpleSearch = simpleSearch;\n    }\n}\n/**\n * @internal\n */\nexport class ApplyEditsResult {\n    constructor(reverseEdits, changes, trimAutoWhitespaceLineNumbers) {\n        this.reverseEdits = reverseEdits;\n        this.changes = changes;\n        this.trimAutoWhitespaceLineNumbers = trimAutoWhitespaceLineNumbers;\n    }\n}\n/**\n * @internal\n */\nexport function shouldSynchronizeModel(model) {\n    return (!model.isTooLargeForSyncing() && !model.isForSimpleWidget);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayQueue } from '../../../../../base/common/arrays.js';\nimport { TextEditInfo } from './beforeEditPositionMapper.js';\nimport { lengthAdd, lengthDiffNonNegative, lengthEquals, lengthIsZero, lengthLessThanEqual, lengthZero, sumLengths } from './length.js';\nexport function combineTextEditInfos(textEditInfoFirst, textEditInfoSecond) {\n    if (textEditInfoFirst.length === 0) {\n        return textEditInfoSecond;\n    }\n    // s0: State before any edits\n    const firstMap = new ArrayQueue(toTextMap(textEditInfoFirst));\n    // s1: State after first edit, but before second edit\n    const secondMap = toTextMap(textEditInfoSecond);\n    // s2: State after both edits\n    // If set, we are in an edit\n    let remainingS0Length = undefined;\n    let remainingS1Length = lengthZero;\n    /**\n     * @param s1Length Use undefined for length \"infinity\"\n     */\n    function readPartialS0Map(s1Length) {\n        const result = [];\n        while (true) {\n            if ((remainingS0Length !== undefined && !lengthIsZero(remainingS0Length)) || !lengthIsZero(remainingS1Length)) {\n                let readS1Length;\n                if (s1Length !== undefined && lengthLessThanEqual(s1Length, remainingS1Length)) {\n                    // remaining satisfies request\n                    readS1Length = s1Length;\n                    remainingS1Length = lengthDiffNonNegative(s1Length, remainingS1Length);\n                    s1Length = lengthZero;\n                }\n                else {\n                    // Read all of remaining, potentially even more\n                    readS1Length = remainingS1Length;\n                    if (s1Length !== undefined) {\n                        s1Length = lengthDiffNonNegative(remainingS1Length, s1Length);\n                    }\n                    remainingS1Length = lengthZero;\n                }\n                if (remainingS0Length === undefined) {\n                    // unchanged area\n                    result.push({\n                        oldLength: readS1Length,\n                        newLength: undefined\n                    });\n                }\n                else {\n                    // We eagerly consume all of the old length, even if\n                    // we are in an edit and only consume it partially.\n                    result.push({\n                        oldLength: remainingS0Length,\n                        newLength: readS1Length\n                    });\n                    remainingS0Length = lengthZero;\n                }\n            }\n            if (s1Length !== undefined && lengthIsZero(s1Length)) {\n                break;\n            }\n            const item = firstMap.dequeue();\n            if (!item) {\n                if (s1Length !== undefined) {\n                    result.push({\n                        oldLength: s1Length,\n                        newLength: undefined,\n                    });\n                }\n                break;\n            }\n            if (item.newLength === undefined) {\n                remainingS1Length = item.oldLength;\n                remainingS0Length = undefined;\n            }\n            else {\n                remainingS0Length = item.oldLength;\n                remainingS1Length = item.newLength;\n            }\n        }\n        return result;\n    }\n    const result = [];\n    function push(startOffset, endOffset, newLength) {\n        if (result.length > 0 && lengthEquals(result[result.length - 1].endOffset, startOffset)) {\n            const lastResult = result[result.length - 1];\n            result[result.length - 1] = new TextEditInfo(lastResult.startOffset, endOffset, lengthAdd(lastResult.newLength, newLength));\n        }\n        else {\n            result.push({ startOffset, endOffset, newLength });\n        }\n    }\n    let s0offset = lengthZero;\n    for (const s2 of secondMap) {\n        const s0ToS1Map = readPartialS0Map(s2.oldLength);\n        if (s2.newLength !== undefined) {\n            // This is an edit\n            const s0Length = sumLengths(s0ToS1Map, s => s.oldLength);\n            const s0EndOffset = lengthAdd(s0offset, s0Length);\n            push(s0offset, s0EndOffset, s2.newLength);\n            s0offset = s0EndOffset;\n        }\n        else {\n            // We are in an unchanged area\n            for (const s1 of s0ToS1Map) {\n                const s0startOffset = s0offset;\n                s0offset = lengthAdd(s0offset, s1.oldLength);\n                if (s1.newLength !== undefined) {\n                    push(s0startOffset, s0offset, s1.newLength);\n                }\n            }\n        }\n    }\n    const s0ToS1Map = readPartialS0Map(undefined);\n    for (const s1 of s0ToS1Map) {\n        const s0startOffset = s0offset;\n        s0offset = lengthAdd(s0offset, s1.oldLength);\n        if (s1.newLength !== undefined) {\n            push(s0startOffset, s0offset, s1.newLength);\n        }\n    }\n    return result;\n}\nfunction toTextMap(textEditInfos) {\n    const result = [];\n    let lastOffset = lengthZero;\n    for (const textEditInfo of textEditInfos) {\n        const spaceLength = lengthDiffNonNegative(lastOffset, textEditInfo.startOffset);\n        if (!lengthIsZero(spaceLength)) {\n            result.push({ oldLength: spaceLength });\n        }\n        const oldLength = lengthDiffNonNegative(textEditInfo.startOffset, textEditInfo.endOffset);\n        result.push({ oldLength, newLength: textEditInfo.newLength });\n        lastOffset = textEditInfo.endOffset;\n    }\n    return result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { Range } from '../../../core/range.js';\nimport { BracketInfo, BracketPairWithMinIndentationInfo } from '../../../textModelBracketPairs.js';\nimport { TextEditInfo } from './beforeEditPositionMapper.js';\nimport { LanguageAgnosticBracketTokens } from './brackets.js';\nimport { lengthAdd, lengthGreaterThanEqual, lengthLessThan, lengthLessThanEqual, lengthOfString, lengthsToRange, lengthZero, positionToLength, toLength } from './length.js';\nimport { parseDocument } from './parser.js';\nimport { DenseKeyProvider } from './smallImmutableSet.js';\nimport { FastTokenizer, TextBufferTokenizer } from './tokenizer.js';\nimport { CallbackIterable } from '../../../../../base/common/arrays.js';\nimport { combineTextEditInfos } from './combineTextEditInfos.js';\nexport class BracketPairsTree extends Disposable {\n    didLanguageChange(languageId) {\n        return this.brackets.didLanguageChange(languageId);\n    }\n    constructor(textModel, getLanguageConfiguration) {\n        super();\n        this.textModel = textModel;\n        this.getLanguageConfiguration = getLanguageConfiguration;\n        this.didChangeEmitter = new Emitter();\n        this.denseKeyProvider = new DenseKeyProvider();\n        this.brackets = new LanguageAgnosticBracketTokens(this.denseKeyProvider, this.getLanguageConfiguration);\n        this.onDidChange = this.didChangeEmitter.event;\n        this.queuedTextEditsForInitialAstWithoutTokens = [];\n        this.queuedTextEdits = [];\n        if (!textModel.tokenization.hasTokens) {\n            const brackets = this.brackets.getSingleLanguageBracketTokens(this.textModel.getLanguageId());\n            const tokenizer = new FastTokenizer(this.textModel.getValue(), brackets);\n            this.initialAstWithoutTokens = parseDocument(tokenizer, [], undefined, true);\n            this.astWithTokens = this.initialAstWithoutTokens;\n        }\n        else if (textModel.tokenization.backgroundTokenizationState === 2 /* BackgroundTokenizationState.Completed */) {\n            // Skip the initial ast, as there is no flickering.\n            // Directly create the tree with token information.\n            this.initialAstWithoutTokens = undefined;\n            this.astWithTokens = this.parseDocumentFromTextBuffer([], undefined, false);\n        }\n        else {\n            // We missed some token changes already, so we cannot use the fast tokenizer + delta increments\n            this.initialAstWithoutTokens = this.parseDocumentFromTextBuffer([], undefined, true);\n            this.astWithTokens = this.initialAstWithoutTokens;\n        }\n    }\n    //#region TextModel events\n    handleDidChangeBackgroundTokenizationState() {\n        if (this.textModel.tokenization.backgroundTokenizationState === 2 /* BackgroundTokenizationState.Completed */) {\n            const wasUndefined = this.initialAstWithoutTokens === undefined;\n            // Clear the initial tree as we can use the tree with token information now.\n            this.initialAstWithoutTokens = undefined;\n            if (!wasUndefined) {\n                this.didChangeEmitter.fire();\n            }\n        }\n    }\n    handleDidChangeTokens({ ranges }) {\n        const edits = ranges.map(r => new TextEditInfo(toLength(r.fromLineNumber - 1, 0), toLength(r.toLineNumber, 0), toLength(r.toLineNumber - r.fromLineNumber + 1, 0)));\n        this.handleEdits(edits, true);\n        if (!this.initialAstWithoutTokens) {\n            this.didChangeEmitter.fire();\n        }\n    }\n    handleContentChanged(change) {\n        // Must be sorted in ascending order\n        const edits = change.changes.map(c => {\n            const range = Range.lift(c.range);\n            return new TextEditInfo(positionToLength(range.getStartPosition()), positionToLength(range.getEndPosition()), lengthOfString(c.text));\n        }).reverse();\n        this.handleEdits(edits, false);\n    }\n    handleEdits(edits, tokenChange) {\n        // Lazily queue the edits and only apply them when the tree is accessed.\n        const result = combineTextEditInfos(this.queuedTextEdits, edits);\n        this.queuedTextEdits = result;\n        if (this.initialAstWithoutTokens && !tokenChange) {\n            this.queuedTextEditsForInitialAstWithoutTokens = combineTextEditInfos(this.queuedTextEditsForInitialAstWithoutTokens, edits);\n        }\n    }\n    //#endregion\n    flushQueue() {\n        if (this.queuedTextEdits.length > 0) {\n            this.astWithTokens = this.parseDocumentFromTextBuffer(this.queuedTextEdits, this.astWithTokens, false);\n            this.queuedTextEdits = [];\n        }\n        if (this.queuedTextEditsForInitialAstWithoutTokens.length > 0) {\n            if (this.initialAstWithoutTokens) {\n                this.initialAstWithoutTokens = this.parseDocumentFromTextBuffer(this.queuedTextEditsForInitialAstWithoutTokens, this.initialAstWithoutTokens, false);\n            }\n            this.queuedTextEditsForInitialAstWithoutTokens = [];\n        }\n    }\n    /**\n     * @pure (only if isPure = true)\n    */\n    parseDocumentFromTextBuffer(edits, previousAst, immutable) {\n        // Is much faster if `isPure = false`.\n        const isPure = false;\n        const previousAstClone = isPure ? previousAst === null || previousAst === void 0 ? void 0 : previousAst.deepClone() : previousAst;\n        const tokenizer = new TextBufferTokenizer(this.textModel, this.brackets);\n        const result = parseDocument(tokenizer, edits, previousAstClone, immutable);\n        return result;\n    }\n    getBracketsInRange(range, onlyColorizedBrackets) {\n        this.flushQueue();\n        const startOffset = toLength(range.startLineNumber - 1, range.startColumn - 1);\n        const endOffset = toLength(range.endLineNumber - 1, range.endColumn - 1);\n        return new CallbackIterable(cb => {\n            const node = this.initialAstWithoutTokens || this.astWithTokens;\n            collectBrackets(node, lengthZero, node.length, startOffset, endOffset, cb, 0, 0, new Map(), onlyColorizedBrackets);\n        });\n    }\n    getBracketPairsInRange(range, includeMinIndentation) {\n        this.flushQueue();\n        const startLength = positionToLength(range.getStartPosition());\n        const endLength = positionToLength(range.getEndPosition());\n        return new CallbackIterable(cb => {\n            const node = this.initialAstWithoutTokens || this.astWithTokens;\n            const context = new CollectBracketPairsContext(cb, includeMinIndentation, this.textModel);\n            collectBracketPairs(node, lengthZero, node.length, startLength, endLength, context, 0, new Map());\n        });\n    }\n    getFirstBracketAfter(position) {\n        this.flushQueue();\n        const node = this.initialAstWithoutTokens || this.astWithTokens;\n        return getFirstBracketAfter(node, lengthZero, node.length, positionToLength(position));\n    }\n    getFirstBracketBefore(position) {\n        this.flushQueue();\n        const node = this.initialAstWithoutTokens || this.astWithTokens;\n        return getFirstBracketBefore(node, lengthZero, node.length, positionToLength(position));\n    }\n}\nfunction getFirstBracketBefore(node, nodeOffsetStart, nodeOffsetEnd, position) {\n    if (node.kind === 4 /* AstNodeKind.List */ || node.kind === 2 /* AstNodeKind.Pair */) {\n        const lengths = [];\n        for (const child of node.children) {\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            lengths.push({ nodeOffsetStart, nodeOffsetEnd });\n            nodeOffsetStart = nodeOffsetEnd;\n        }\n        for (let i = lengths.length - 1; i >= 0; i--) {\n            const { nodeOffsetStart, nodeOffsetEnd } = lengths[i];\n            if (lengthLessThan(nodeOffsetStart, position)) {\n                const result = getFirstBracketBefore(node.children[i], nodeOffsetStart, nodeOffsetEnd, position);\n                if (result) {\n                    return result;\n                }\n            }\n        }\n        return null;\n    }\n    else if (node.kind === 3 /* AstNodeKind.UnexpectedClosingBracket */) {\n        return null;\n    }\n    else if (node.kind === 1 /* AstNodeKind.Bracket */) {\n        const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n        return {\n            bracketInfo: node.bracketInfo,\n            range\n        };\n    }\n    return null;\n}\nfunction getFirstBracketAfter(node, nodeOffsetStart, nodeOffsetEnd, position) {\n    if (node.kind === 4 /* AstNodeKind.List */ || node.kind === 2 /* AstNodeKind.Pair */) {\n        for (const child of node.children) {\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            if (lengthLessThan(position, nodeOffsetEnd)) {\n                const result = getFirstBracketAfter(child, nodeOffsetStart, nodeOffsetEnd, position);\n                if (result) {\n                    return result;\n                }\n            }\n            nodeOffsetStart = nodeOffsetEnd;\n        }\n        return null;\n    }\n    else if (node.kind === 3 /* AstNodeKind.UnexpectedClosingBracket */) {\n        return null;\n    }\n    else if (node.kind === 1 /* AstNodeKind.Bracket */) {\n        const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n        return {\n            bracketInfo: node.bracketInfo,\n            range\n        };\n    }\n    return null;\n}\nfunction collectBrackets(node, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, push, level, nestingLevelOfEqualBracketType, levelPerBracketType, onlyColorizedBrackets, parentPairIsIncomplete = false) {\n    if (level > 200) {\n        return true;\n    }\n    whileLoop: while (true) {\n        switch (node.kind) {\n            case 4 /* AstNodeKind.List */: {\n                const childCount = node.childrenLength;\n                for (let i = 0; i < childCount; i++) {\n                    const child = node.getChild(i);\n                    if (!child) {\n                        continue;\n                    }\n                    nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n                    if (lengthLessThanEqual(nodeOffsetStart, endOffset) &&\n                        lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                        const childEndsAfterEnd = lengthGreaterThanEqual(nodeOffsetEnd, endOffset);\n                        if (childEndsAfterEnd) {\n                            // No child after this child in the requested window, don't recurse\n                            node = child;\n                            continue whileLoop;\n                        }\n                        const shouldContinue = collectBrackets(child, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, push, level, 0, levelPerBracketType, onlyColorizedBrackets);\n                        if (!shouldContinue) {\n                            return false;\n                        }\n                    }\n                    nodeOffsetStart = nodeOffsetEnd;\n                }\n                return true;\n            }\n            case 2 /* AstNodeKind.Pair */: {\n                const colorize = !onlyColorizedBrackets || !node.closingBracket || node.closingBracket.bracketInfo.closesColorized(node.openingBracket.bracketInfo);\n                let levelPerBracket = 0;\n                if (levelPerBracketType) {\n                    let existing = levelPerBracketType.get(node.openingBracket.text);\n                    if (existing === undefined) {\n                        existing = 0;\n                    }\n                    levelPerBracket = existing;\n                    if (colorize) {\n                        existing++;\n                        levelPerBracketType.set(node.openingBracket.text, existing);\n                    }\n                }\n                const childCount = node.childrenLength;\n                for (let i = 0; i < childCount; i++) {\n                    const child = node.getChild(i);\n                    if (!child) {\n                        continue;\n                    }\n                    nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n                    if (lengthLessThanEqual(nodeOffsetStart, endOffset) &&\n                        lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                        const childEndsAfterEnd = lengthGreaterThanEqual(nodeOffsetEnd, endOffset);\n                        if (childEndsAfterEnd && child.kind !== 1 /* AstNodeKind.Bracket */) {\n                            // No child after this child in the requested window, don't recurse\n                            // Don't do this for brackets because of unclosed/unopened brackets\n                            node = child;\n                            if (colorize) {\n                                level++;\n                                nestingLevelOfEqualBracketType = levelPerBracket + 1;\n                            }\n                            else {\n                                nestingLevelOfEqualBracketType = levelPerBracket;\n                            }\n                            continue whileLoop;\n                        }\n                        if (colorize || child.kind !== 1 /* AstNodeKind.Bracket */ || !node.closingBracket) {\n                            const shouldContinue = collectBrackets(child, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, push, colorize ? level + 1 : level, colorize ? levelPerBracket + 1 : levelPerBracket, levelPerBracketType, onlyColorizedBrackets, !node.closingBracket);\n                            if (!shouldContinue) {\n                                return false;\n                            }\n                        }\n                    }\n                    nodeOffsetStart = nodeOffsetEnd;\n                }\n                levelPerBracketType === null || levelPerBracketType === void 0 ? void 0 : levelPerBracketType.set(node.openingBracket.text, levelPerBracket);\n                return true;\n            }\n            case 3 /* AstNodeKind.UnexpectedClosingBracket */: {\n                const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n                return push(new BracketInfo(range, level - 1, 0, true));\n            }\n            case 1 /* AstNodeKind.Bracket */: {\n                const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n                return push(new BracketInfo(range, level - 1, nestingLevelOfEqualBracketType - 1, parentPairIsIncomplete));\n            }\n            case 0 /* AstNodeKind.Text */:\n                return true;\n        }\n    }\n}\nclass CollectBracketPairsContext {\n    constructor(push, includeMinIndentation, textModel) {\n        this.push = push;\n        this.includeMinIndentation = includeMinIndentation;\n        this.textModel = textModel;\n    }\n}\nfunction collectBracketPairs(node, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, context, level, levelPerBracketType) {\n    var _a;\n    if (level > 200) {\n        return true;\n    }\n    let shouldContinue = true;\n    if (node.kind === 2 /* AstNodeKind.Pair */) {\n        let levelPerBracket = 0;\n        if (levelPerBracketType) {\n            let existing = levelPerBracketType.get(node.openingBracket.text);\n            if (existing === undefined) {\n                existing = 0;\n            }\n            levelPerBracket = existing;\n            existing++;\n            levelPerBracketType.set(node.openingBracket.text, existing);\n        }\n        const openingBracketEnd = lengthAdd(nodeOffsetStart, node.openingBracket.length);\n        let minIndentation = -1;\n        if (context.includeMinIndentation) {\n            minIndentation = node.computeMinIndentation(nodeOffsetStart, context.textModel);\n        }\n        shouldContinue = context.push(new BracketPairWithMinIndentationInfo(lengthsToRange(nodeOffsetStart, nodeOffsetEnd), lengthsToRange(nodeOffsetStart, openingBracketEnd), node.closingBracket\n            ? lengthsToRange(lengthAdd(openingBracketEnd, ((_a = node.child) === null || _a === void 0 ? void 0 : _a.length) || lengthZero), nodeOffsetEnd)\n            : undefined, level, levelPerBracket, node, minIndentation));\n        nodeOffsetStart = openingBracketEnd;\n        if (shouldContinue && node.child) {\n            const child = node.child;\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            if (lengthLessThanEqual(nodeOffsetStart, endOffset) &&\n                lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                shouldContinue = collectBracketPairs(child, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, context, level + 1, levelPerBracketType);\n                if (!shouldContinue) {\n                    return false;\n                }\n            }\n        }\n        levelPerBracketType === null || levelPerBracketType === void 0 ? void 0 : levelPerBracketType.set(node.openingBracket.text, levelPerBracket);\n    }\n    else {\n        let curOffset = nodeOffsetStart;\n        for (const child of node.children) {\n            const childOffset = curOffset;\n            curOffset = lengthAdd(curOffset, child.length);\n            if (lengthLessThanEqual(childOffset, endOffset) &&\n                lengthLessThanEqual(startOffset, curOffset)) {\n                shouldContinue = collectBracketPairs(child, childOffset, curOffset, startOffset, endOffset, context, level, levelPerBracketType);\n                if (!shouldContinue) {\n                    return false;\n                }\n            }\n        }\n    }\n    return shouldContinue;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CallbackIterable, compareBy } from '../../../../base/common/arrays.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { Range } from '../../core/range.js';\nimport { ignoreBracketsInToken } from '../../languages/supports.js';\nimport { BracketsUtils } from '../../languages/supports/richEditBrackets.js';\nimport { BracketPairsTree } from './bracketPairsTree/bracketPairsTree.js';\nexport class BracketPairsTextModelPart extends Disposable {\n    get canBuildAST() {\n        const maxSupportedDocumentLength = /* max lines */ 50000 * /* average column count */ 100;\n        return this.textModel.getValueLength() <= maxSupportedDocumentLength;\n    }\n    constructor(textModel, languageConfigurationService) {\n        super();\n        this.textModel = textModel;\n        this.languageConfigurationService = languageConfigurationService;\n        this.bracketPairsTree = this._register(new MutableDisposable());\n        this.onDidChangeEmitter = new Emitter();\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.bracketsRequested = false;\n        this._register(this.languageConfigurationService.onDidChange(e => {\n            var _a;\n            if (!e.languageId || ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.didLanguageChange(e.languageId))) {\n                this.bracketPairsTree.clear();\n                this.updateBracketPairsTree();\n            }\n        }));\n    }\n    //#region TextModel events\n    handleDidChangeOptions(e) {\n        this.bracketPairsTree.clear();\n        this.updateBracketPairsTree();\n    }\n    handleDidChangeLanguage(e) {\n        this.bracketPairsTree.clear();\n        this.updateBracketPairsTree();\n    }\n    handleDidChangeContent(change) {\n        var _a;\n        (_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.handleContentChanged(change);\n    }\n    handleDidChangeBackgroundTokenizationState() {\n        var _a;\n        (_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.handleDidChangeBackgroundTokenizationState();\n    }\n    handleDidChangeTokens(e) {\n        var _a;\n        (_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.handleDidChangeTokens(e);\n    }\n    //#endregion\n    updateBracketPairsTree() {\n        if (this.bracketsRequested && this.canBuildAST) {\n            if (!this.bracketPairsTree.value) {\n                const store = new DisposableStore();\n                this.bracketPairsTree.value = createDisposableRef(store.add(new BracketPairsTree(this.textModel, (languageId) => {\n                    return this.languageConfigurationService.getLanguageConfiguration(languageId);\n                })), store);\n                store.add(this.bracketPairsTree.value.object.onDidChange(e => this.onDidChangeEmitter.fire(e)));\n                this.onDidChangeEmitter.fire();\n            }\n        }\n        else {\n            if (this.bracketPairsTree.value) {\n                this.bracketPairsTree.clear();\n                // Important: Don't call fire if there was no change!\n                this.onDidChangeEmitter.fire();\n            }\n        }\n    }\n    /**\n     * Returns all bracket pairs that intersect the given range.\n     * The result is sorted by the start position.\n    */\n    getBracketPairsInRange(range) {\n        var _a;\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getBracketPairsInRange(range, false)) || CallbackIterable.empty;\n    }\n    getBracketPairsInRangeWithMinIndentation(range) {\n        var _a;\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getBracketPairsInRange(range, true)) || CallbackIterable.empty;\n    }\n    getBracketsInRange(range, onlyColorizedBrackets = false) {\n        var _a;\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getBracketsInRange(range, onlyColorizedBrackets)) || CallbackIterable.empty;\n    }\n    findMatchingBracketUp(_bracket, _position, maxDuration) {\n        const position = this.textModel.validatePosition(_position);\n        const languageId = this.textModel.getLanguageIdAtPosition(position.lineNumber, position.column);\n        if (this.canBuildAST) {\n            const closingBracketInfo = this.languageConfigurationService\n                .getLanguageConfiguration(languageId)\n                .bracketsNew.getClosingBracketInfo(_bracket);\n            if (!closingBracketInfo) {\n                return null;\n            }\n            const bracketPair = this.getBracketPairsInRange(Range.fromPositions(_position, _position)).findLast((b) => closingBracketInfo.closes(b.openingBracketInfo));\n            if (bracketPair) {\n                return bracketPair.openingBracketRange;\n            }\n            return null;\n        }\n        else {\n            // Fallback to old bracket matching code:\n            const bracket = _bracket.toLowerCase();\n            const bracketsSupport = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n            if (!bracketsSupport) {\n                return null;\n            }\n            const data = bracketsSupport.textIsBracket[bracket];\n            if (!data) {\n                return null;\n            }\n            return stripBracketSearchCanceled(this._findMatchingBracketUp(data, position, createTimeBasedContinueBracketSearchPredicate(maxDuration)));\n        }\n    }\n    matchBracket(position, maxDuration) {\n        if (this.canBuildAST) {\n            const bracketPair = this.getBracketPairsInRange(Range.fromPositions(position, position)).filter((item) => item.closingBracketRange !== undefined &&\n                (item.openingBracketRange.containsPosition(position) ||\n                    item.closingBracketRange.containsPosition(position))).findLastMaxBy(compareBy((item) => item.openingBracketRange.containsPosition(position)\n                ? item.openingBracketRange\n                : item.closingBracketRange, Range.compareRangesUsingStarts));\n            if (bracketPair) {\n                return [bracketPair.openingBracketRange, bracketPair.closingBracketRange];\n            }\n            return null;\n        }\n        else {\n            // Fallback to old bracket matching code:\n            const continueSearchPredicate = createTimeBasedContinueBracketSearchPredicate(maxDuration);\n            return this._matchBracket(this.textModel.validatePosition(position), continueSearchPredicate);\n        }\n    }\n    _establishBracketSearchOffsets(position, lineTokens, modeBrackets, tokenIndex) {\n        const tokenCount = lineTokens.getCount();\n        const currentLanguageId = lineTokens.getLanguageId(tokenIndex);\n        // limit search to not go before `maxBracketLength`\n        let searchStartOffset = Math.max(0, position.column - 1 - modeBrackets.maxBracketLength);\n        for (let i = tokenIndex - 1; i >= 0; i--) {\n            const tokenEndOffset = lineTokens.getEndOffset(i);\n            if (tokenEndOffset <= searchStartOffset) {\n                break;\n            }\n            if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i)) || lineTokens.getLanguageId(i) !== currentLanguageId) {\n                searchStartOffset = tokenEndOffset;\n                break;\n            }\n        }\n        // limit search to not go after `maxBracketLength`\n        let searchEndOffset = Math.min(lineTokens.getLineContent().length, position.column - 1 + modeBrackets.maxBracketLength);\n        for (let i = tokenIndex + 1; i < tokenCount; i++) {\n            const tokenStartOffset = lineTokens.getStartOffset(i);\n            if (tokenStartOffset >= searchEndOffset) {\n                break;\n            }\n            if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i)) || lineTokens.getLanguageId(i) !== currentLanguageId) {\n                searchEndOffset = tokenStartOffset;\n                break;\n            }\n        }\n        return { searchStartOffset, searchEndOffset };\n    }\n    _matchBracket(position, continueSearchPredicate) {\n        const lineNumber = position.lineNumber;\n        const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n        const lineText = this.textModel.getLineContent(lineNumber);\n        const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        if (tokenIndex < 0) {\n            return null;\n        }\n        const currentModeBrackets = this.languageConfigurationService.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).brackets;\n        // check that the token is not to be ignored\n        if (currentModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex))) {\n            let { searchStartOffset, searchEndOffset } = this._establishBracketSearchOffsets(position, lineTokens, currentModeBrackets, tokenIndex);\n            // it might be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\n            // `bestResult` will contain the most right-side result\n            let bestResult = null;\n            while (true) {\n                const foundBracket = BracketsUtils.findNextBracketInRange(currentModeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!foundBracket) {\n                    // there are no more brackets in this text\n                    break;\n                }\n                // check that we didn't hit a bracket too far away from position\n                if (foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n                    const foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n                    const r = this._matchFoundBracket(foundBracket, currentModeBrackets.textIsBracket[foundBracketText], currentModeBrackets.textIsOpenBracket[foundBracketText], continueSearchPredicate);\n                    if (r) {\n                        if (r instanceof BracketSearchCanceled) {\n                            return null;\n                        }\n                        bestResult = r;\n                    }\n                }\n                searchStartOffset = foundBracket.endColumn - 1;\n            }\n            if (bestResult) {\n                return bestResult;\n            }\n        }\n        // If position is in between two tokens, try also looking in the previous token\n        if (tokenIndex > 0 && lineTokens.getStartOffset(tokenIndex) === position.column - 1) {\n            const prevTokenIndex = tokenIndex - 1;\n            const prevModeBrackets = this.languageConfigurationService.getLanguageConfiguration(lineTokens.getLanguageId(prevTokenIndex)).brackets;\n            // check that previous token is not to be ignored\n            if (prevModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(prevTokenIndex))) {\n                const { searchStartOffset, searchEndOffset } = this._establishBracketSearchOffsets(position, lineTokens, prevModeBrackets, prevTokenIndex);\n                const foundBracket = BracketsUtils.findPrevBracketInRange(prevModeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                // check that we didn't hit a bracket too far away from position\n                if (foundBracket && foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n                    const foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n                    const r = this._matchFoundBracket(foundBracket, prevModeBrackets.textIsBracket[foundBracketText], prevModeBrackets.textIsOpenBracket[foundBracketText], continueSearchPredicate);\n                    if (r) {\n                        if (r instanceof BracketSearchCanceled) {\n                            return null;\n                        }\n                        return r;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    _matchFoundBracket(foundBracket, data, isOpen, continueSearchPredicate) {\n        if (!data) {\n            return null;\n        }\n        const matched = (isOpen\n            ? this._findMatchingBracketDown(data, foundBracket.getEndPosition(), continueSearchPredicate)\n            : this._findMatchingBracketUp(data, foundBracket.getStartPosition(), continueSearchPredicate));\n        if (!matched) {\n            return null;\n        }\n        if (matched instanceof BracketSearchCanceled) {\n            return matched;\n        }\n        return [foundBracket, matched];\n    }\n    _findMatchingBracketUp(bracket, position, continueSearchPredicate) {\n        // console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n        const languageId = bracket.languageId;\n        const reversedBracketRegex = bracket.reversedRegex;\n        let count = -1;\n        let totalCallCount = 0;\n        const searchPrevMatchingBracketInRange = (lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                if (bracket.isOpen(hitText)) {\n                    count++;\n                }\n                else if (bracket.isClose(hitText)) {\n                    count--;\n                }\n                if (count === 0) {\n                    return r;\n                }\n                searchEndOffset = r.startColumn - 1;\n            }\n            return null;\n        };\n        for (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = tokenCount - 1;\n            let searchStartOffset = lineText.length;\n            let searchEndOffset = lineText.length;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex >= 0; tokenIndex--) {\n                const searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchStartOffset\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return r;\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return r;\n                }\n            }\n        }\n        return null;\n    }\n    _findMatchingBracketDown(bracket, position, continueSearchPredicate) {\n        // console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n        const languageId = bracket.languageId;\n        const bracketRegex = bracket.forwardRegex;\n        let count = 1;\n        let totalCallCount = 0;\n        const searchNextMatchingBracketInRange = (lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findNextBracketInRange(bracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                if (bracket.isOpen(hitText)) {\n                    count++;\n                }\n                else if (bracket.isClose(hitText)) {\n                    count--;\n                }\n                if (count === 0) {\n                    return r;\n                }\n                searchStartOffset = r.endColumn - 1;\n            }\n            return null;\n        };\n        const lineCount = this.textModel.getLineCount();\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return r;\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return r;\n                }\n            }\n        }\n        return null;\n    }\n    findPrevBracket(_position) {\n        var _a;\n        const position = this.textModel.validatePosition(_position);\n        if (this.canBuildAST) {\n            this.bracketsRequested = true;\n            this.updateBracketPairsTree();\n            return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getFirstBracketBefore(position)) || null;\n        }\n        let languageId = null;\n        let modeBrackets = null;\n        let bracketConfig = null;\n        for (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = tokenCount - 1;\n            let searchStartOffset = lineText.length;\n            let searchEndOffset = lineText.length;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex >= 0; tokenIndex--) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (modeBrackets && bracketConfig && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchStartOffset\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return this._toFoundBracket(bracketConfig, r);\n                }\n            }\n        }\n        return null;\n    }\n    findNextBracket(_position) {\n        var _a;\n        const position = this.textModel.validatePosition(_position);\n        if (this.canBuildAST) {\n            this.bracketsRequested = true;\n            this.updateBracketPairsTree();\n            return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getFirstBracketAfter(position)) || null;\n        }\n        const lineCount = this.textModel.getLineCount();\n        let languageId = null;\n        let modeBrackets = null;\n        let bracketConfig = null;\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return this._toFoundBracket(bracketConfig, r);\n                }\n            }\n        }\n        return null;\n    }\n    findEnclosingBrackets(_position, maxDuration) {\n        const position = this.textModel.validatePosition(_position);\n        if (this.canBuildAST) {\n            const range = Range.fromPositions(position);\n            const bracketPair = this.getBracketPairsInRange(Range.fromPositions(position, position)).findLast((item) => item.closingBracketRange !== undefined && item.range.strictContainsRange(range));\n            if (bracketPair) {\n                return [bracketPair.openingBracketRange, bracketPair.closingBracketRange];\n            }\n            return null;\n        }\n        const continueSearchPredicate = createTimeBasedContinueBracketSearchPredicate(maxDuration);\n        const lineCount = this.textModel.getLineCount();\n        const savedCounts = new Map();\n        let counts = [];\n        const resetCounts = (languageId, modeBrackets) => {\n            if (!savedCounts.has(languageId)) {\n                const tmp = [];\n                for (let i = 0, len = modeBrackets ? modeBrackets.brackets.length : 0; i < len; i++) {\n                    tmp[i] = 0;\n                }\n                savedCounts.set(languageId, tmp);\n            }\n            counts = savedCounts.get(languageId);\n        };\n        let totalCallCount = 0;\n        const searchInRange = (modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                const bracket = modeBrackets.textIsBracket[hitText];\n                if (bracket) {\n                    if (bracket.isOpen(hitText)) {\n                        counts[bracket.index]++;\n                    }\n                    else if (bracket.isClose(hitText)) {\n                        counts[bracket.index]--;\n                    }\n                    if (counts[bracket.index] === -1) {\n                        return this._matchFoundBracket(r, bracket, false, continueSearchPredicate);\n                    }\n                }\n                searchStartOffset = r.endColumn - 1;\n            }\n            return null;\n        };\n        let languageId = null;\n        let modeBrackets = null;\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    resetCounts(languageId, modeBrackets);\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return stripBracketSearchCanceled(r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    resetCounts(languageId, modeBrackets);\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return stripBracketSearchCanceled(r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return stripBracketSearchCanceled(r);\n                }\n            }\n        }\n        return null;\n    }\n    _toFoundBracket(bracketConfig, r) {\n        if (!r) {\n            return null;\n        }\n        let text = this.textModel.getValueInRange(r);\n        text = text.toLowerCase();\n        const bracketInfo = bracketConfig.getBracketInfo(text);\n        if (!bracketInfo) {\n            return null;\n        }\n        return {\n            range: r,\n            bracketInfo\n        };\n    }\n}\nfunction createDisposableRef(object, disposable) {\n    return {\n        object,\n        dispose: () => disposable === null || disposable === void 0 ? void 0 : disposable.dispose(),\n    };\n}\nfunction createTimeBasedContinueBracketSearchPredicate(maxDuration) {\n    if (typeof maxDuration === 'undefined') {\n        return () => true;\n    }\n    else {\n        const startTime = Date.now();\n        return () => {\n            return (Date.now() - startTime <= maxDuration);\n        };\n    }\n}\nclass BracketSearchCanceled {\n    constructor() {\n        this._searchCanceledBrand = undefined;\n    }\n}\nBracketSearchCanceled.INSTANCE = new BracketSearchCanceled();\nfunction stripBracketSearchCanceled(result) {\n    if (result instanceof BracketSearchCanceled) {\n        return null;\n    }\n    return result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BugIndicatingError } from '../../../../../base/common/errors.js';\nimport { CursorColumns } from '../../../core/cursorColumns.js';\nimport { lengthAdd, lengthGetLineCount, lengthToObj, lengthZero } from './length.js';\nimport { SmallImmutableSet } from './smallImmutableSet.js';\n/**\n * The base implementation for all AST nodes.\n*/\nclass BaseAstNode {\n    /**\n     * The length of the entire node, which should equal the sum of lengths of all children.\n    */\n    get length() {\n        return this._length;\n    }\n    constructor(length) {\n        this._length = length;\n    }\n}\n/**\n * Represents a bracket pair including its child (e.g. `{ ... }`).\n * Might be unclosed.\n * Immutable, if all children are immutable.\n*/\nexport class PairAstNode extends BaseAstNode {\n    static create(openingBracket, child, closingBracket) {\n        let length = openingBracket.length;\n        if (child) {\n            length = lengthAdd(length, child.length);\n        }\n        if (closingBracket) {\n            length = lengthAdd(length, closingBracket.length);\n        }\n        return new PairAstNode(length, openingBracket, child, closingBracket, child ? child.missingOpeningBracketIds : SmallImmutableSet.getEmpty());\n    }\n    get kind() {\n        return 2 /* AstNodeKind.Pair */;\n    }\n    get listHeight() {\n        return 0;\n    }\n    get childrenLength() {\n        return 3;\n    }\n    getChild(idx) {\n        switch (idx) {\n            case 0: return this.openingBracket;\n            case 1: return this.child;\n            case 2: return this.closingBracket;\n        }\n        throw new Error('Invalid child index');\n    }\n    /**\n     * Avoid using this property, it allocates an array!\n    */\n    get children() {\n        const result = [];\n        result.push(this.openingBracket);\n        if (this.child) {\n            result.push(this.child);\n        }\n        if (this.closingBracket) {\n            result.push(this.closingBracket);\n        }\n        return result;\n    }\n    constructor(length, openingBracket, child, closingBracket, missingOpeningBracketIds) {\n        super(length);\n        this.openingBracket = openingBracket;\n        this.child = child;\n        this.closingBracket = closingBracket;\n        this.missingOpeningBracketIds = missingOpeningBracketIds;\n    }\n    canBeReused(openBracketIds) {\n        if (this.closingBracket === null) {\n            // Unclosed pair ast nodes only\n            // end at the end of the document\n            // or when a parent node is closed.\n            // This could be improved:\n            // Only return false if some next token is neither \"undefined\" nor a bracket that closes a parent.\n            return false;\n        }\n        if (openBracketIds.intersects(this.missingOpeningBracketIds)) {\n            return false;\n        }\n        return true;\n    }\n    deepClone() {\n        return new PairAstNode(this.length, this.openingBracket.deepClone(), this.child && this.child.deepClone(), this.closingBracket && this.closingBracket.deepClone(), this.missingOpeningBracketIds);\n    }\n    computeMinIndentation(offset, textModel) {\n        return this.child ? this.child.computeMinIndentation(lengthAdd(offset, this.openingBracket.length), textModel) : Number.MAX_SAFE_INTEGER;\n    }\n}\nexport class ListAstNode extends BaseAstNode {\n    /**\n     * This method uses more memory-efficient list nodes that can only store 2 or 3 children.\n    */\n    static create23(item1, item2, item3, immutable = false) {\n        let length = item1.length;\n        let missingBracketIds = item1.missingOpeningBracketIds;\n        if (item1.listHeight !== item2.listHeight) {\n            throw new Error('Invalid list heights');\n        }\n        length = lengthAdd(length, item2.length);\n        missingBracketIds = missingBracketIds.merge(item2.missingOpeningBracketIds);\n        if (item3) {\n            if (item1.listHeight !== item3.listHeight) {\n                throw new Error('Invalid list heights');\n            }\n            length = lengthAdd(length, item3.length);\n            missingBracketIds = missingBracketIds.merge(item3.missingOpeningBracketIds);\n        }\n        return immutable\n            ? new Immutable23ListAstNode(length, item1.listHeight + 1, item1, item2, item3, missingBracketIds)\n            : new TwoThreeListAstNode(length, item1.listHeight + 1, item1, item2, item3, missingBracketIds);\n    }\n    static getEmpty() {\n        return new ImmutableArrayListAstNode(lengthZero, 0, [], SmallImmutableSet.getEmpty());\n    }\n    get kind() {\n        return 4 /* AstNodeKind.List */;\n    }\n    get missingOpeningBracketIds() {\n        return this._missingOpeningBracketIds;\n    }\n    /**\n     * Use ListAstNode.create.\n    */\n    constructor(length, listHeight, _missingOpeningBracketIds) {\n        super(length);\n        this.listHeight = listHeight;\n        this._missingOpeningBracketIds = _missingOpeningBracketIds;\n        this.cachedMinIndentation = -1;\n    }\n    throwIfImmutable() {\n        // NOOP\n    }\n    makeLastElementMutable() {\n        this.throwIfImmutable();\n        const childCount = this.childrenLength;\n        if (childCount === 0) {\n            return undefined;\n        }\n        const lastChild = this.getChild(childCount - 1);\n        const mutable = lastChild.kind === 4 /* AstNodeKind.List */ ? lastChild.toMutable() : lastChild;\n        if (lastChild !== mutable) {\n            this.setChild(childCount - 1, mutable);\n        }\n        return mutable;\n    }\n    makeFirstElementMutable() {\n        this.throwIfImmutable();\n        const childCount = this.childrenLength;\n        if (childCount === 0) {\n            return undefined;\n        }\n        const firstChild = this.getChild(0);\n        const mutable = firstChild.kind === 4 /* AstNodeKind.List */ ? firstChild.toMutable() : firstChild;\n        if (firstChild !== mutable) {\n            this.setChild(0, mutable);\n        }\n        return mutable;\n    }\n    canBeReused(openBracketIds) {\n        if (openBracketIds.intersects(this.missingOpeningBracketIds)) {\n            return false;\n        }\n        if (this.childrenLength === 0) {\n            // Don't reuse empty lists.\n            return false;\n        }\n        let lastChild = this;\n        while (lastChild.kind === 4 /* AstNodeKind.List */) {\n            const lastLength = lastChild.childrenLength;\n            if (lastLength === 0) {\n                // Empty lists should never be contained in other lists.\n                throw new BugIndicatingError();\n            }\n            lastChild = lastChild.getChild(lastLength - 1);\n        }\n        return lastChild.canBeReused(openBracketIds);\n    }\n    handleChildrenChanged() {\n        this.throwIfImmutable();\n        const count = this.childrenLength;\n        let length = this.getChild(0).length;\n        let unopenedBrackets = this.getChild(0).missingOpeningBracketIds;\n        for (let i = 1; i < count; i++) {\n            const child = this.getChild(i);\n            length = lengthAdd(length, child.length);\n            unopenedBrackets = unopenedBrackets.merge(child.missingOpeningBracketIds);\n        }\n        this._length = length;\n        this._missingOpeningBracketIds = unopenedBrackets;\n        this.cachedMinIndentation = -1;\n    }\n    computeMinIndentation(offset, textModel) {\n        if (this.cachedMinIndentation !== -1) {\n            return this.cachedMinIndentation;\n        }\n        let minIndentation = Number.MAX_SAFE_INTEGER;\n        let childOffset = offset;\n        for (let i = 0; i < this.childrenLength; i++) {\n            const child = this.getChild(i);\n            if (child) {\n                minIndentation = Math.min(minIndentation, child.computeMinIndentation(childOffset, textModel));\n                childOffset = lengthAdd(childOffset, child.length);\n            }\n        }\n        this.cachedMinIndentation = minIndentation;\n        return minIndentation;\n    }\n}\nclass TwoThreeListAstNode extends ListAstNode {\n    get childrenLength() {\n        return this._item3 !== null ? 3 : 2;\n    }\n    getChild(idx) {\n        switch (idx) {\n            case 0: return this._item1;\n            case 1: return this._item2;\n            case 2: return this._item3;\n        }\n        throw new Error('Invalid child index');\n    }\n    setChild(idx, node) {\n        switch (idx) {\n            case 0:\n                this._item1 = node;\n                return;\n            case 1:\n                this._item2 = node;\n                return;\n            case 2:\n                this._item3 = node;\n                return;\n        }\n        throw new Error('Invalid child index');\n    }\n    get children() {\n        return this._item3 ? [this._item1, this._item2, this._item3] : [this._item1, this._item2];\n    }\n    get item1() {\n        return this._item1;\n    }\n    get item2() {\n        return this._item2;\n    }\n    get item3() {\n        return this._item3;\n    }\n    constructor(length, listHeight, _item1, _item2, _item3, missingOpeningBracketIds) {\n        super(length, listHeight, missingOpeningBracketIds);\n        this._item1 = _item1;\n        this._item2 = _item2;\n        this._item3 = _item3;\n    }\n    deepClone() {\n        return new TwoThreeListAstNode(this.length, this.listHeight, this._item1.deepClone(), this._item2.deepClone(), this._item3 ? this._item3.deepClone() : null, this.missingOpeningBracketIds);\n    }\n    appendChildOfSameHeight(node) {\n        if (this._item3) {\n            throw new Error('Cannot append to a full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        this._item3 = node;\n        this.handleChildrenChanged();\n    }\n    unappendChild() {\n        if (!this._item3) {\n            throw new Error('Cannot remove from a non-full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        const result = this._item3;\n        this._item3 = null;\n        this.handleChildrenChanged();\n        return result;\n    }\n    prependChildOfSameHeight(node) {\n        if (this._item3) {\n            throw new Error('Cannot prepend to a full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        this._item3 = this._item2;\n        this._item2 = this._item1;\n        this._item1 = node;\n        this.handleChildrenChanged();\n    }\n    unprependChild() {\n        if (!this._item3) {\n            throw new Error('Cannot remove from a non-full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        const result = this._item1;\n        this._item1 = this._item2;\n        this._item2 = this._item3;\n        this._item3 = null;\n        this.handleChildrenChanged();\n        return result;\n    }\n    toMutable() {\n        return this;\n    }\n}\n/**\n * Immutable, if all children are immutable.\n*/\nclass Immutable23ListAstNode extends TwoThreeListAstNode {\n    toMutable() {\n        return new TwoThreeListAstNode(this.length, this.listHeight, this.item1, this.item2, this.item3, this.missingOpeningBracketIds);\n    }\n    throwIfImmutable() {\n        throw new Error('this instance is immutable');\n    }\n}\n/**\n * For debugging.\n*/\nclass ArrayListAstNode extends ListAstNode {\n    get childrenLength() {\n        return this._children.length;\n    }\n    getChild(idx) {\n        return this._children[idx];\n    }\n    setChild(idx, child) {\n        this._children[idx] = child;\n    }\n    get children() {\n        return this._children;\n    }\n    constructor(length, listHeight, _children, missingOpeningBracketIds) {\n        super(length, listHeight, missingOpeningBracketIds);\n        this._children = _children;\n    }\n    deepClone() {\n        const children = new Array(this._children.length);\n        for (let i = 0; i < this._children.length; i++) {\n            children[i] = this._children[i].deepClone();\n        }\n        return new ArrayListAstNode(this.length, this.listHeight, children, this.missingOpeningBracketIds);\n    }\n    appendChildOfSameHeight(node) {\n        this.throwIfImmutable();\n        this._children.push(node);\n        this.handleChildrenChanged();\n    }\n    unappendChild() {\n        this.throwIfImmutable();\n        const item = this._children.pop();\n        this.handleChildrenChanged();\n        return item;\n    }\n    prependChildOfSameHeight(node) {\n        this.throwIfImmutable();\n        this._children.unshift(node);\n        this.handleChildrenChanged();\n    }\n    unprependChild() {\n        this.throwIfImmutable();\n        const item = this._children.shift();\n        this.handleChildrenChanged();\n        return item;\n    }\n    toMutable() {\n        return this;\n    }\n}\n/**\n * Immutable, if all children are immutable.\n*/\nclass ImmutableArrayListAstNode extends ArrayListAstNode {\n    toMutable() {\n        return new ArrayListAstNode(this.length, this.listHeight, [...this.children], this.missingOpeningBracketIds);\n    }\n    throwIfImmutable() {\n        throw new Error('this instance is immutable');\n    }\n}\nconst emptyArray = [];\nclass ImmutableLeafAstNode extends BaseAstNode {\n    get listHeight() {\n        return 0;\n    }\n    get childrenLength() {\n        return 0;\n    }\n    getChild(idx) {\n        return null;\n    }\n    get children() {\n        return emptyArray;\n    }\n    deepClone() {\n        return this;\n    }\n}\nexport class TextAstNode extends ImmutableLeafAstNode {\n    get kind() {\n        return 0 /* AstNodeKind.Text */;\n    }\n    get missingOpeningBracketIds() {\n        return SmallImmutableSet.getEmpty();\n    }\n    canBeReused(_openedBracketIds) {\n        return true;\n    }\n    computeMinIndentation(offset, textModel) {\n        const start = lengthToObj(offset);\n        // Text ast nodes don't have partial indentation (ensured by the tokenizer).\n        // Thus, if this text node does not start at column 0, the first line cannot have any indentation at all.\n        const startLineNumber = (start.columnCount === 0 ? start.lineCount : start.lineCount + 1) + 1;\n        const endLineNumber = lengthGetLineCount(lengthAdd(offset, this.length)) + 1;\n        let result = Number.MAX_SAFE_INTEGER;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const firstNonWsColumn = textModel.getLineFirstNonWhitespaceColumn(lineNumber);\n            const lineContent = textModel.getLineContent(lineNumber);\n            if (firstNonWsColumn === 0) {\n                continue;\n            }\n            const visibleColumn = CursorColumns.visibleColumnFromColumn(lineContent, firstNonWsColumn, textModel.getOptions().tabSize);\n            result = Math.min(result, visibleColumn);\n        }\n        return result;\n    }\n}\nexport class BracketAstNode extends ImmutableLeafAstNode {\n    static create(length, bracketInfo, bracketIds) {\n        const node = new BracketAstNode(length, bracketInfo, bracketIds);\n        return node;\n    }\n    get kind() {\n        return 1 /* AstNodeKind.Bracket */;\n    }\n    get missingOpeningBracketIds() {\n        return SmallImmutableSet.getEmpty();\n    }\n    constructor(length, bracketInfo, \n    /**\n     * In case of a opening bracket, this is the id of the opening bracket.\n     * In case of a closing bracket, this contains the ids of all opening brackets it can close.\n    */\n    bracketIds) {\n        super(length);\n        this.bracketInfo = bracketInfo;\n        this.bracketIds = bracketIds;\n    }\n    get text() {\n        return this.bracketInfo.bracketText;\n    }\n    get languageId() {\n        return this.bracketInfo.languageId;\n    }\n    canBeReused(_openedBracketIds) {\n        // These nodes could be reused,\n        // but not in a general way.\n        // Their parent may be reused.\n        return false;\n    }\n    computeMinIndentation(offset, textModel) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n}\nexport class InvalidBracketAstNode extends ImmutableLeafAstNode {\n    get kind() {\n        return 3 /* AstNodeKind.UnexpectedClosingBracket */;\n    }\n    constructor(closingBrackets, length) {\n        super(length);\n        this.missingOpeningBracketIds = closingBrackets;\n    }\n    canBeReused(openedBracketIds) {\n        return !openedBracketIds.intersects(this.missingOpeningBracketIds);\n    }\n    computeMinIndentation(offset, textModel) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { lengthAdd, lengthDiffNonNegative, lengthLessThanEqual, lengthToObj, toLength } from './length.js';\nexport class TextEditInfo {\n    constructor(startOffset, endOffset, newLength) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.newLength = newLength;\n    }\n}\nexport class BeforeEditPositionMapper {\n    /**\n     * @param edits Must be sorted by offset in ascending order.\n    */\n    constructor(edits) {\n        this.nextEditIdx = 0;\n        this.deltaOldToNewLineCount = 0;\n        this.deltaOldToNewColumnCount = 0;\n        this.deltaLineIdxInOld = -1;\n        this.edits = edits.map(edit => TextEditInfoCache.from(edit));\n    }\n    /**\n     * @param offset Must be equal to or greater than the last offset this method has been called with.\n    */\n    getOffsetBeforeChange(offset) {\n        this.adjustNextEdit(offset);\n        return this.translateCurToOld(offset);\n    }\n    /**\n     * @param offset Must be equal to or greater than the last offset this method has been called with.\n     * Returns null if there is no edit anymore.\n    */\n    getDistanceToNextChange(offset) {\n        this.adjustNextEdit(offset);\n        const nextEdit = this.edits[this.nextEditIdx];\n        const nextChangeOffset = nextEdit ? this.translateOldToCur(nextEdit.offsetObj) : null;\n        if (nextChangeOffset === null) {\n            return null;\n        }\n        return lengthDiffNonNegative(offset, nextChangeOffset);\n    }\n    translateOldToCur(oldOffsetObj) {\n        if (oldOffsetObj.lineCount === this.deltaLineIdxInOld) {\n            return toLength(oldOffsetObj.lineCount + this.deltaOldToNewLineCount, oldOffsetObj.columnCount + this.deltaOldToNewColumnCount);\n        }\n        else {\n            return toLength(oldOffsetObj.lineCount + this.deltaOldToNewLineCount, oldOffsetObj.columnCount);\n        }\n    }\n    translateCurToOld(newOffset) {\n        const offsetObj = lengthToObj(newOffset);\n        if (offsetObj.lineCount - this.deltaOldToNewLineCount === this.deltaLineIdxInOld) {\n            return toLength(offsetObj.lineCount - this.deltaOldToNewLineCount, offsetObj.columnCount - this.deltaOldToNewColumnCount);\n        }\n        else {\n            return toLength(offsetObj.lineCount - this.deltaOldToNewLineCount, offsetObj.columnCount);\n        }\n    }\n    adjustNextEdit(offset) {\n        while (this.nextEditIdx < this.edits.length) {\n            const nextEdit = this.edits[this.nextEditIdx];\n            // After applying the edit, what is its end offset (considering all previous edits)?\n            const nextEditEndOffsetInCur = this.translateOldToCur(nextEdit.endOffsetAfterObj);\n            if (lengthLessThanEqual(nextEditEndOffsetInCur, offset)) {\n                // We are after the edit, skip it\n                this.nextEditIdx++;\n                const nextEditEndOffsetInCurObj = lengthToObj(nextEditEndOffsetInCur);\n                // Before applying the edit, what is its end offset (considering all previous edits)?\n                const nextEditEndOffsetBeforeInCurObj = lengthToObj(this.translateOldToCur(nextEdit.endOffsetBeforeObj));\n                const lineDelta = nextEditEndOffsetInCurObj.lineCount - nextEditEndOffsetBeforeInCurObj.lineCount;\n                this.deltaOldToNewLineCount += lineDelta;\n                const previousColumnDelta = this.deltaLineIdxInOld === nextEdit.endOffsetBeforeObj.lineCount ? this.deltaOldToNewColumnCount : 0;\n                const columnDelta = nextEditEndOffsetInCurObj.columnCount - nextEditEndOffsetBeforeInCurObj.columnCount;\n                this.deltaOldToNewColumnCount = previousColumnDelta + columnDelta;\n                this.deltaLineIdxInOld = nextEdit.endOffsetBeforeObj.lineCount;\n            }\n            else {\n                // We are in or before the edit.\n                break;\n            }\n        }\n    }\n}\nclass TextEditInfoCache {\n    static from(edit) {\n        return new TextEditInfoCache(edit.startOffset, edit.endOffset, edit.newLength);\n    }\n    constructor(startOffset, endOffset, textLength) {\n        this.endOffsetBeforeObj = lengthToObj(endOffset);\n        this.endOffsetAfterObj = lengthToObj(lengthAdd(startOffset, textLength));\n        this.offsetObj = lengthToObj(startOffset);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { escapeRegExpCharacters } from '../../../../../base/common/strings.js';\nimport { BracketAstNode } from './ast.js';\nimport { toLength } from './length.js';\nimport { identityKeyProvider, SmallImmutableSet } from './smallImmutableSet.js';\nimport { Token } from './tokenizer.js';\nexport class BracketTokens {\n    static createFromLanguage(configuration, denseKeyProvider) {\n        function getId(bracketInfo) {\n            return denseKeyProvider.getKey(`${bracketInfo.languageId}:::${bracketInfo.bracketText}`);\n        }\n        const map = new Map();\n        for (const openingBracket of configuration.bracketsNew.openingBrackets) {\n            const length = toLength(0, openingBracket.bracketText.length);\n            const openingTextId = getId(openingBracket);\n            const bracketIds = SmallImmutableSet.getEmpty().add(openingTextId, identityKeyProvider);\n            map.set(openingBracket.bracketText, new Token(length, 1 /* TokenKind.OpeningBracket */, openingTextId, bracketIds, BracketAstNode.create(length, openingBracket, bracketIds)));\n        }\n        for (const closingBracket of configuration.bracketsNew.closingBrackets) {\n            const length = toLength(0, closingBracket.bracketText.length);\n            let bracketIds = SmallImmutableSet.getEmpty();\n            const closingBrackets = closingBracket.getOpeningBrackets();\n            for (const bracket of closingBrackets) {\n                bracketIds = bracketIds.add(getId(bracket), identityKeyProvider);\n            }\n            map.set(closingBracket.bracketText, new Token(length, 2 /* TokenKind.ClosingBracket */, getId(closingBrackets[0]), bracketIds, BracketAstNode.create(length, closingBracket, bracketIds)));\n        }\n        return new BracketTokens(map);\n    }\n    constructor(map) {\n        this.map = map;\n        this.hasRegExp = false;\n        this._regExpGlobal = null;\n    }\n    getRegExpStr() {\n        if (this.isEmpty) {\n            return null;\n        }\n        else {\n            const keys = [...this.map.keys()];\n            keys.sort();\n            keys.reverse();\n            return keys.map(k => prepareBracketForRegExp(k)).join('|');\n        }\n    }\n    /**\n     * Returns null if there is no such regexp (because there are no brackets).\n    */\n    get regExpGlobal() {\n        if (!this.hasRegExp) {\n            const regExpStr = this.getRegExpStr();\n            this._regExpGlobal = regExpStr ? new RegExp(regExpStr, 'gi') : null;\n            this.hasRegExp = true;\n        }\n        return this._regExpGlobal;\n    }\n    getToken(value) {\n        return this.map.get(value.toLowerCase());\n    }\n    findClosingTokenText(openingBracketIds) {\n        for (const [closingText, info] of this.map) {\n            if (info.kind === 2 /* TokenKind.ClosingBracket */ && info.bracketIds.intersects(openingBracketIds)) {\n                return closingText;\n            }\n        }\n        return undefined;\n    }\n    get isEmpty() {\n        return this.map.size === 0;\n    }\n}\nfunction prepareBracketForRegExp(str) {\n    let escaped = escapeRegExpCharacters(str);\n    // These bracket pair delimiters start or end with letters\n    // see https://github.com/microsoft/vscode/issues/132162 https://github.com/microsoft/vscode/issues/150440\n    if (/^[\\w ]+/.test(str)) {\n        escaped = `\\\\b${escaped}`;\n    }\n    if (/[\\w ]+$/.test(str)) {\n        escaped = `${escaped}\\\\b`;\n    }\n    return escaped;\n}\nexport class LanguageAgnosticBracketTokens {\n    constructor(denseKeyProvider, getLanguageConfiguration) {\n        this.denseKeyProvider = denseKeyProvider;\n        this.getLanguageConfiguration = getLanguageConfiguration;\n        this.languageIdToBracketTokens = new Map();\n    }\n    didLanguageChange(languageId) {\n        // Report a change whenever the language configuration updates.\n        return this.languageIdToBracketTokens.has(languageId);\n    }\n    getSingleLanguageBracketTokens(languageId) {\n        let singleLanguageBracketTokens = this.languageIdToBracketTokens.get(languageId);\n        if (!singleLanguageBracketTokens) {\n            singleLanguageBracketTokens = BracketTokens.createFromLanguage(this.getLanguageConfiguration(languageId), this.denseKeyProvider);\n            this.languageIdToBracketTokens.set(languageId, singleLanguageBracketTokens);\n        }\n        return singleLanguageBracketTokens;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { splitLines } from '../../../../../base/common/strings.js';\nimport { Range } from '../../../core/range.js';\n/**\n * Represents a non-negative length in terms of line and column count.\n * Prefer using {@link Length} for performance reasons.\n*/\nclass LengthObj {\n    constructor(lineCount, columnCount) {\n        this.lineCount = lineCount;\n        this.columnCount = columnCount;\n    }\n    toString() {\n        return `${this.lineCount},${this.columnCount}`;\n    }\n}\nLengthObj.zero = new LengthObj(0, 0);\nexport { LengthObj };\n/**\n * The end must be greater than or equal to the start.\n*/\nexport function lengthDiff(startLineCount, startColumnCount, endLineCount, endColumnCount) {\n    return (startLineCount !== endLineCount)\n        ? toLength(endLineCount - startLineCount, endColumnCount)\n        : toLength(0, endColumnCount - startColumnCount);\n}\nexport const lengthZero = 0;\nexport function lengthIsZero(length) {\n    return length === 0;\n}\n/*\n * We have 52 bits available in a JS number.\n * We use the upper 26 bits to store the line and the lower 26 bits to store the column.\n */\n///*\nconst factor = Math.pow(2, 26);\n/*/\nconst factor = 1000000;\n// */\nexport function toLength(lineCount, columnCount) {\n    // llllllllllllllllllllllllllcccccccccccccccccccccccccc (52 bits)\n    //       line count (26 bits)    column count (26 bits)\n    // If there is no overflow (all values/sums below 2^26 = 67108864),\n    // we have `toLength(lns1, cols1) + toLength(lns2, cols2) = toLength(lns1 + lns2, cols1 + cols2)`.\n    return (lineCount * factor + columnCount);\n}\nexport function lengthToObj(length) {\n    const l = length;\n    const lineCount = Math.floor(l / factor);\n    const columnCount = l - lineCount * factor;\n    return new LengthObj(lineCount, columnCount);\n}\nexport function lengthGetLineCount(length) {\n    return Math.floor(length / factor);\n}\n/**\n * Returns the amount of columns of the given length, assuming that it does not span any line.\n*/\nexport function lengthGetColumnCountIfZeroLineCount(length) {\n    return length;\n}\nexport function lengthAdd(l1, l2) {\n    let r = l1 + l2;\n    if (l2 >= factor) {\n        r = r - (l1 % factor);\n    }\n    return r;\n}\nexport function sumLengths(items, lengthFn) {\n    return items.reduce((a, b) => lengthAdd(a, lengthFn(b)), lengthZero);\n}\nexport function lengthEquals(length1, length2) {\n    return length1 === length2;\n}\n/**\n * Returns a non negative length `result` such that `lengthAdd(length1, result) = length2`, or zero if such length does not exist.\n */\nexport function lengthDiffNonNegative(length1, length2) {\n    const l1 = length1;\n    const l2 = length2;\n    const diff = l2 - l1;\n    if (diff <= 0) {\n        // line-count of length1 is higher than line-count of length2\n        // or they are equal and column-count of length1 is higher than column-count of length2\n        return lengthZero;\n    }\n    const lineCount1 = Math.floor(l1 / factor);\n    const lineCount2 = Math.floor(l2 / factor);\n    const colCount2 = l2 - lineCount2 * factor;\n    if (lineCount1 === lineCount2) {\n        const colCount1 = l1 - lineCount1 * factor;\n        return toLength(0, colCount2 - colCount1);\n    }\n    else {\n        return toLength(lineCount2 - lineCount1, colCount2);\n    }\n}\nexport function lengthLessThan(length1, length2) {\n    // First, compare line counts, then column counts.\n    return length1 < length2;\n}\nexport function lengthLessThanEqual(length1, length2) {\n    return length1 <= length2;\n}\nexport function lengthGreaterThanEqual(length1, length2) {\n    return length1 >= length2;\n}\nexport function positionToLength(position) {\n    return toLength(position.lineNumber - 1, position.column - 1);\n}\nexport function lengthsToRange(lengthStart, lengthEnd) {\n    const l = lengthStart;\n    const lineCount = Math.floor(l / factor);\n    const colCount = l - lineCount * factor;\n    const l2 = lengthEnd;\n    const lineCount2 = Math.floor(l2 / factor);\n    const colCount2 = l2 - lineCount2 * factor;\n    return new Range(lineCount + 1, colCount + 1, lineCount2 + 1, colCount2 + 1);\n}\nexport function lengthOfString(str) {\n    const lines = splitLines(str);\n    return toLength(lines.length - 1, lines[lines.length - 1].length);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ListAstNode } from './ast.js';\n/**\n * Concatenates a list of (2,3) AstNode's into a single (2,3) AstNode.\n * This mutates the items of the input array!\n * If all items have the same height, this method has runtime O(items.length).\n * Otherwise, it has runtime O(items.length * max(log(items.length), items.max(i => i.height))).\n*/\nexport function concat23Trees(items) {\n    if (items.length === 0) {\n        return null;\n    }\n    if (items.length === 1) {\n        return items[0];\n    }\n    let i = 0;\n    /**\n     * Reads nodes of same height and concatenates them to a single node.\n    */\n    function readNode() {\n        if (i >= items.length) {\n            return null;\n        }\n        const start = i;\n        const height = items[start].listHeight;\n        i++;\n        while (i < items.length && items[i].listHeight === height) {\n            i++;\n        }\n        if (i - start >= 2) {\n            return concat23TreesOfSameHeight(start === 0 && i === items.length ? items : items.slice(start, i), false);\n        }\n        else {\n            return items[start];\n        }\n    }\n    // The items might not have the same height.\n    // We merge all items by using a binary concat operator.\n    let first = readNode(); // There must be a first item\n    let second = readNode();\n    if (!second) {\n        return first;\n    }\n    for (let item = readNode(); item; item = readNode()) {\n        // Prefer concatenating smaller trees, as the runtime of concat depends on the tree height.\n        if (heightDiff(first, second) <= heightDiff(second, item)) {\n            first = concat(first, second);\n            second = item;\n        }\n        else {\n            second = concat(second, item);\n        }\n    }\n    const result = concat(first, second);\n    return result;\n}\nexport function concat23TreesOfSameHeight(items, createImmutableLists = false) {\n    if (items.length === 0) {\n        return null;\n    }\n    if (items.length === 1) {\n        return items[0];\n    }\n    let length = items.length;\n    // All trees have same height, just create parent nodes.\n    while (length > 3) {\n        const newLength = length >> 1;\n        for (let i = 0; i < newLength; i++) {\n            const j = i << 1;\n            items[i] = ListAstNode.create23(items[j], items[j + 1], j + 3 === length ? items[j + 2] : null, createImmutableLists);\n        }\n        length = newLength;\n    }\n    return ListAstNode.create23(items[0], items[1], length >= 3 ? items[2] : null, createImmutableLists);\n}\nfunction heightDiff(node1, node2) {\n    return Math.abs(node1.listHeight - node2.listHeight);\n}\nfunction concat(node1, node2) {\n    if (node1.listHeight === node2.listHeight) {\n        return ListAstNode.create23(node1, node2, null, false);\n    }\n    else if (node1.listHeight > node2.listHeight) {\n        // node1 is the tree we want to insert into\n        return append(node1, node2);\n    }\n    else {\n        return prepend(node2, node1);\n    }\n}\n/**\n * Appends the given node to the end of this (2,3) tree.\n * Returns the new root.\n*/\nfunction append(list, nodeToAppend) {\n    list = list.toMutable();\n    let curNode = list;\n    const parents = [];\n    let nodeToAppendOfCorrectHeight;\n    while (true) {\n        // assert nodeToInsert.listHeight <= curNode.listHeight\n        if (nodeToAppend.listHeight === curNode.listHeight) {\n            nodeToAppendOfCorrectHeight = nodeToAppend;\n            break;\n        }\n        // assert 0 <= nodeToInsert.listHeight < curNode.listHeight\n        if (curNode.kind !== 4 /* AstNodeKind.List */) {\n            throw new Error('unexpected');\n        }\n        parents.push(curNode);\n        // assert 2 <= curNode.childrenLength <= 3\n        curNode = curNode.makeLastElementMutable();\n    }\n    // assert nodeToAppendOfCorrectHeight!.listHeight === curNode.listHeight\n    for (let i = parents.length - 1; i >= 0; i--) {\n        const parent = parents[i];\n        if (nodeToAppendOfCorrectHeight) {\n            // Can we take the element?\n            if (parent.childrenLength >= 3) {\n                // assert parent.childrenLength === 3 && parent.listHeight === nodeToAppendOfCorrectHeight.listHeight + 1\n                // we need to split to maintain (2,3)-tree property.\n                // Send the third element + the new element to the parent.\n                nodeToAppendOfCorrectHeight = ListAstNode.create23(parent.unappendChild(), nodeToAppendOfCorrectHeight, null, false);\n            }\n            else {\n                parent.appendChildOfSameHeight(nodeToAppendOfCorrectHeight);\n                nodeToAppendOfCorrectHeight = undefined;\n            }\n        }\n        else {\n            parent.handleChildrenChanged();\n        }\n    }\n    if (nodeToAppendOfCorrectHeight) {\n        return ListAstNode.create23(list, nodeToAppendOfCorrectHeight, null, false);\n    }\n    else {\n        return list;\n    }\n}\n/**\n * Prepends the given node to the end of this (2,3) tree.\n * Returns the new root.\n*/\nfunction prepend(list, nodeToAppend) {\n    list = list.toMutable();\n    let curNode = list;\n    const parents = [];\n    // assert nodeToInsert.listHeight <= curNode.listHeight\n    while (nodeToAppend.listHeight !== curNode.listHeight) {\n        // assert 0 <= nodeToInsert.listHeight < curNode.listHeight\n        if (curNode.kind !== 4 /* AstNodeKind.List */) {\n            throw new Error('unexpected');\n        }\n        parents.push(curNode);\n        // assert 2 <= curNode.childrenFast.length <= 3\n        curNode = curNode.makeFirstElementMutable();\n    }\n    let nodeToPrependOfCorrectHeight = nodeToAppend;\n    // assert nodeToAppendOfCorrectHeight!.listHeight === curNode.listHeight\n    for (let i = parents.length - 1; i >= 0; i--) {\n        const parent = parents[i];\n        if (nodeToPrependOfCorrectHeight) {\n            // Can we take the element?\n            if (parent.childrenLength >= 3) {\n                // assert parent.childrenLength === 3 && parent.listHeight === nodeToAppendOfCorrectHeight.listHeight + 1\n                // we need to split to maintain (2,3)-tree property.\n                // Send the third element + the new element to the parent.\n                nodeToPrependOfCorrectHeight = ListAstNode.create23(nodeToPrependOfCorrectHeight, parent.unprependChild(), null, false);\n            }\n            else {\n                parent.prependChildOfSameHeight(nodeToPrependOfCorrectHeight);\n                nodeToPrependOfCorrectHeight = undefined;\n            }\n        }\n        else {\n            parent.handleChildrenChanged();\n        }\n    }\n    if (nodeToPrependOfCorrectHeight) {\n        return ListAstNode.create23(nodeToPrependOfCorrectHeight, list, null, false);\n    }\n    else {\n        return list;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { lengthAdd, lengthZero, lengthLessThan } from './length.js';\n/**\n * Allows to efficiently find a longest child at a given offset in a fixed node.\n * The requested offsets must increase monotonously.\n*/\nexport class NodeReader {\n    constructor(node) {\n        this.lastOffset = lengthZero;\n        this.nextNodes = [node];\n        this.offsets = [lengthZero];\n        this.idxs = [];\n    }\n    /**\n     * Returns the longest node at `offset` that satisfies the predicate.\n     * @param offset must be greater than or equal to the last offset this method has been called with!\n    */\n    readLongestNodeAt(offset, predicate) {\n        if (lengthLessThan(offset, this.lastOffset)) {\n            throw new Error('Invalid offset');\n        }\n        this.lastOffset = offset;\n        // Find the longest node of all those that are closest to the current offset.\n        while (true) {\n            const curNode = lastOrUndefined(this.nextNodes);\n            if (!curNode) {\n                return undefined;\n            }\n            const curNodeOffset = lastOrUndefined(this.offsets);\n            if (lengthLessThan(offset, curNodeOffset)) {\n                // The next best node is not here yet.\n                // The reader must advance before a cached node is hit.\n                return undefined;\n            }\n            if (lengthLessThan(curNodeOffset, offset)) {\n                // The reader is ahead of the current node.\n                if (lengthAdd(curNodeOffset, curNode.length) <= offset) {\n                    // The reader is after the end of the current node.\n                    this.nextNodeAfterCurrent();\n                }\n                else {\n                    // The reader is somewhere in the current node.\n                    const nextChildIdx = getNextChildIdx(curNode);\n                    if (nextChildIdx !== -1) {\n                        // Go to the first child and repeat.\n                        this.nextNodes.push(curNode.getChild(nextChildIdx));\n                        this.offsets.push(curNodeOffset);\n                        this.idxs.push(nextChildIdx);\n                    }\n                    else {\n                        // We don't have children\n                        this.nextNodeAfterCurrent();\n                    }\n                }\n            }\n            else {\n                // readerOffsetBeforeChange === curNodeOffset\n                if (predicate(curNode)) {\n                    this.nextNodeAfterCurrent();\n                    return curNode;\n                }\n                else {\n                    const nextChildIdx = getNextChildIdx(curNode);\n                    // look for shorter node\n                    if (nextChildIdx === -1) {\n                        // There is no shorter node.\n                        this.nextNodeAfterCurrent();\n                        return undefined;\n                    }\n                    else {\n                        // Descend into first child & repeat.\n                        this.nextNodes.push(curNode.getChild(nextChildIdx));\n                        this.offsets.push(curNodeOffset);\n                        this.idxs.push(nextChildIdx);\n                    }\n                }\n            }\n        }\n    }\n    // Navigates to the longest node that continues after the current node.\n    nextNodeAfterCurrent() {\n        while (true) {\n            const currentOffset = lastOrUndefined(this.offsets);\n            const currentNode = lastOrUndefined(this.nextNodes);\n            this.nextNodes.pop();\n            this.offsets.pop();\n            if (this.idxs.length === 0) {\n                // We just popped the root node, there is no next node.\n                break;\n            }\n            // Parent is not undefined, because idxs is not empty\n            const parent = lastOrUndefined(this.nextNodes);\n            const nextChildIdx = getNextChildIdx(parent, this.idxs[this.idxs.length - 1]);\n            if (nextChildIdx !== -1) {\n                this.nextNodes.push(parent.getChild(nextChildIdx));\n                this.offsets.push(lengthAdd(currentOffset, currentNode.length));\n                this.idxs[this.idxs.length - 1] = nextChildIdx;\n                break;\n            }\n            else {\n                this.idxs.pop();\n            }\n            // We fully consumed the parent.\n            // Current node is now parent, so call nextNodeAfterCurrent again\n        }\n    }\n}\nfunction getNextChildIdx(node, curIdx = -1) {\n    while (true) {\n        curIdx++;\n        if (curIdx >= node.childrenLength) {\n            return -1;\n        }\n        if (node.getChild(curIdx)) {\n            return curIdx;\n        }\n    }\n}\nfunction lastOrUndefined(arr) {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { InvalidBracketAstNode, ListAstNode, PairAstNode } from './ast.js';\nimport { BeforeEditPositionMapper } from './beforeEditPositionMapper.js';\nimport { SmallImmutableSet } from './smallImmutableSet.js';\nimport { lengthIsZero, lengthLessThan } from './length.js';\nimport { concat23Trees, concat23TreesOfSameHeight } from './concat23Trees.js';\nimport { NodeReader } from './nodeReader.js';\n/**\n * Non incrementally built ASTs are immutable.\n*/\nexport function parseDocument(tokenizer, edits, oldNode, createImmutableLists) {\n    const parser = new Parser(tokenizer, edits, oldNode, createImmutableLists);\n    return parser.parseDocument();\n}\n/**\n * Non incrementally built ASTs are immutable.\n*/\nclass Parser {\n    constructor(tokenizer, edits, oldNode, createImmutableLists) {\n        this.tokenizer = tokenizer;\n        this.createImmutableLists = createImmutableLists;\n        this._itemsConstructed = 0;\n        this._itemsFromCache = 0;\n        if (oldNode && createImmutableLists) {\n            throw new Error('Not supported');\n        }\n        this.oldNodeReader = oldNode ? new NodeReader(oldNode) : undefined;\n        this.positionMapper = new BeforeEditPositionMapper(edits);\n    }\n    parseDocument() {\n        this._itemsConstructed = 0;\n        this._itemsFromCache = 0;\n        let result = this.parseList(SmallImmutableSet.getEmpty());\n        if (!result) {\n            result = ListAstNode.getEmpty();\n        }\n        return result;\n    }\n    parseList(openedBracketIds) {\n        const items = [];\n        while (true) {\n            let child = this.tryReadChildFromCache(openedBracketIds);\n            if (!child) {\n                const token = this.tokenizer.peek();\n                if (!token ||\n                    (token.kind === 2 /* TokenKind.ClosingBracket */ &&\n                        token.bracketIds.intersects(openedBracketIds))) {\n                    break;\n                }\n                child = this.parseChild(openedBracketIds);\n            }\n            if (child.kind === 4 /* AstNodeKind.List */ && child.childrenLength === 0) {\n                continue;\n            }\n            items.push(child);\n        }\n        // When there is no oldNodeReader, all items are created from scratch and must have the same height.\n        const result = this.oldNodeReader ? concat23Trees(items) : concat23TreesOfSameHeight(items, this.createImmutableLists);\n        return result;\n    }\n    tryReadChildFromCache(openedBracketIds) {\n        if (this.oldNodeReader) {\n            const maxCacheableLength = this.positionMapper.getDistanceToNextChange(this.tokenizer.offset);\n            if (maxCacheableLength === null || !lengthIsZero(maxCacheableLength)) {\n                const cachedNode = this.oldNodeReader.readLongestNodeAt(this.positionMapper.getOffsetBeforeChange(this.tokenizer.offset), curNode => {\n                    // The edit could extend the ending token, thus we cannot re-use nodes that touch the edit.\n                    // If there is no edit anymore, we can re-use the node in any case.\n                    if (maxCacheableLength !== null && !lengthLessThan(curNode.length, maxCacheableLength)) {\n                        // Either the node contains edited text or touches edited text.\n                        // In the latter case, brackets might have been extended (`end` -> `ending`), so even touching nodes cannot be reused.\n                        return false;\n                    }\n                    const canBeReused = curNode.canBeReused(openedBracketIds);\n                    return canBeReused;\n                });\n                if (cachedNode) {\n                    this._itemsFromCache++;\n                    this.tokenizer.skip(cachedNode.length);\n                    return cachedNode;\n                }\n            }\n        }\n        return undefined;\n    }\n    parseChild(openedBracketIds) {\n        this._itemsConstructed++;\n        const token = this.tokenizer.read();\n        switch (token.kind) {\n            case 2 /* TokenKind.ClosingBracket */:\n                return new InvalidBracketAstNode(token.bracketIds, token.length);\n            case 0 /* TokenKind.Text */:\n                return token.astNode;\n            case 1 /* TokenKind.OpeningBracket */: {\n                const set = openedBracketIds.merge(token.bracketIds);\n                const child = this.parseList(set);\n                const nextToken = this.tokenizer.peek();\n                if (nextToken &&\n                    nextToken.kind === 2 /* TokenKind.ClosingBracket */ &&\n                    (nextToken.bracketId === token.bracketId || nextToken.bracketIds.intersects(token.bracketIds))) {\n                    this.tokenizer.read();\n                    return PairAstNode.create(token.astNode, child, nextToken.astNode);\n                }\n                else {\n                    return PairAstNode.create(token.astNode, child, null);\n                }\n            }\n            default:\n                throw new Error('unexpected');\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst emptyArr = [];\n/**\n * Represents an immutable set that works best for a small number of elements (less than 32).\n * It uses bits to encode element membership efficiently.\n*/\nclass SmallImmutableSet {\n    static create(items, additionalItems) {\n        if (items <= 128 && additionalItems.length === 0) {\n            // We create a cache of 128=2^7 elements to cover all sets with up to 7 (dense) elements.\n            let cached = SmallImmutableSet.cache[items];\n            if (!cached) {\n                cached = new SmallImmutableSet(items, additionalItems);\n                SmallImmutableSet.cache[items] = cached;\n            }\n            return cached;\n        }\n        return new SmallImmutableSet(items, additionalItems);\n    }\n    static getEmpty() {\n        return this.empty;\n    }\n    constructor(items, additionalItems) {\n        this.items = items;\n        this.additionalItems = additionalItems;\n    }\n    add(value, keyProvider) {\n        const key = keyProvider.getKey(value);\n        let idx = key >> 5; // divided by 32\n        if (idx === 0) {\n            // fast path\n            const newItem = (1 << key) | this.items;\n            if (newItem === this.items) {\n                return this;\n            }\n            return SmallImmutableSet.create(newItem, this.additionalItems);\n        }\n        idx--;\n        const newItems = this.additionalItems.slice(0);\n        while (newItems.length < idx) {\n            newItems.push(0);\n        }\n        newItems[idx] |= 1 << (key & 31);\n        return SmallImmutableSet.create(this.items, newItems);\n    }\n    merge(other) {\n        const merged = this.items | other.items;\n        if (this.additionalItems === emptyArr && other.additionalItems === emptyArr) {\n            // fast path\n            if (merged === this.items) {\n                return this;\n            }\n            if (merged === other.items) {\n                return other;\n            }\n            return SmallImmutableSet.create(merged, emptyArr);\n        }\n        // This can be optimized, but it's not a common case\n        const newItems = [];\n        for (let i = 0; i < Math.max(this.additionalItems.length, other.additionalItems.length); i++) {\n            const item1 = this.additionalItems[i] || 0;\n            const item2 = other.additionalItems[i] || 0;\n            newItems.push(item1 | item2);\n        }\n        return SmallImmutableSet.create(merged, newItems);\n    }\n    intersects(other) {\n        if ((this.items & other.items) !== 0) {\n            return true;\n        }\n        for (let i = 0; i < Math.min(this.additionalItems.length, other.additionalItems.length); i++) {\n            if ((this.additionalItems[i] & other.additionalItems[i]) !== 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nSmallImmutableSet.cache = new Array(129);\nSmallImmutableSet.empty = SmallImmutableSet.create(0, emptyArr);\nexport { SmallImmutableSet };\nexport const identityKeyProvider = {\n    getKey(value) {\n        return value;\n    }\n};\n/**\n * Assigns values a unique incrementing key.\n*/\nexport class DenseKeyProvider {\n    constructor() {\n        this.items = new Map();\n    }\n    getKey(value) {\n        let existing = this.items.get(value);\n        if (existing === undefined) {\n            existing = this.items.size;\n            this.items.set(value, existing);\n        }\n        return existing;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { NotSupportedError } from '../../../../../base/common/errors.js';\nimport { TokenMetadata } from '../../../encodedTokenAttributes.js';\nimport { TextAstNode } from './ast.js';\nimport { lengthAdd, lengthDiff, lengthGetColumnCountIfZeroLineCount, lengthToObj, lengthZero, toLength } from './length.js';\nimport { SmallImmutableSet } from './smallImmutableSet.js';\nexport class Token {\n    constructor(length, kind, \n    /**\n     * If this token is an opening bracket, this is the id of the opening bracket.\n     * If this token is a closing bracket, this is the id of the first opening bracket that is closed by this bracket.\n     * Otherwise, it is -1.\n     */\n    bracketId, \n    /**\n     * If this token is an opening bracket, this just contains `bracketId`.\n     * If this token is a closing bracket, this lists all opening bracket ids, that it closes.\n     * Otherwise, it is empty.\n     */\n    bracketIds, astNode) {\n        this.length = length;\n        this.kind = kind;\n        this.bracketId = bracketId;\n        this.bracketIds = bracketIds;\n        this.astNode = astNode;\n    }\n}\nexport class TextBufferTokenizer {\n    constructor(textModel, bracketTokens) {\n        this.textModel = textModel;\n        this.bracketTokens = bracketTokens;\n        this.reader = new NonPeekableTextBufferTokenizer(this.textModel, this.bracketTokens);\n        this._offset = lengthZero;\n        this.didPeek = false;\n        this.peeked = null;\n        this.textBufferLineCount = textModel.getLineCount();\n        this.textBufferLastLineLength = textModel.getLineLength(this.textBufferLineCount);\n    }\n    get offset() {\n        return this._offset;\n    }\n    get length() {\n        return toLength(this.textBufferLineCount - 1, this.textBufferLastLineLength);\n    }\n    skip(length) {\n        this.didPeek = false;\n        this._offset = lengthAdd(this._offset, length);\n        const obj = lengthToObj(this._offset);\n        this.reader.setPosition(obj.lineCount, obj.columnCount);\n    }\n    read() {\n        let token;\n        if (this.peeked) {\n            this.didPeek = false;\n            token = this.peeked;\n        }\n        else {\n            token = this.reader.read();\n        }\n        if (token) {\n            this._offset = lengthAdd(this._offset, token.length);\n        }\n        return token;\n    }\n    peek() {\n        if (!this.didPeek) {\n            this.peeked = this.reader.read();\n            this.didPeek = true;\n        }\n        return this.peeked;\n    }\n}\n/**\n * Does not support peek.\n*/\nclass NonPeekableTextBufferTokenizer {\n    constructor(textModel, bracketTokens) {\n        this.textModel = textModel;\n        this.bracketTokens = bracketTokens;\n        this.lineIdx = 0;\n        this.line = null;\n        this.lineCharOffset = 0;\n        this.lineTokens = null;\n        this.lineTokenOffset = 0;\n        /** Must be a zero line token. The end of the document cannot be peeked. */\n        this.peekedToken = null;\n        this.textBufferLineCount = textModel.getLineCount();\n        this.textBufferLastLineLength = textModel.getLineLength(this.textBufferLineCount);\n    }\n    setPosition(lineIdx, column) {\n        // We must not jump into a token!\n        if (lineIdx === this.lineIdx) {\n            this.lineCharOffset = column;\n            if (this.line !== null) {\n                this.lineTokenOffset = this.lineCharOffset === 0 ? 0 : this.lineTokens.findTokenIndexAtOffset(this.lineCharOffset);\n            }\n        }\n        else {\n            this.lineIdx = lineIdx;\n            this.lineCharOffset = column;\n            this.line = null;\n        }\n        this.peekedToken = null;\n    }\n    read() {\n        if (this.peekedToken) {\n            const token = this.peekedToken;\n            this.peekedToken = null;\n            this.lineCharOffset += lengthGetColumnCountIfZeroLineCount(token.length);\n            return token;\n        }\n        if (this.lineIdx > this.textBufferLineCount - 1 || (this.lineIdx === this.textBufferLineCount - 1 && this.lineCharOffset >= this.textBufferLastLineLength)) {\n            // We are after the end\n            return null;\n        }\n        if (this.line === null) {\n            this.lineTokens = this.textModel.tokenization.getLineTokens(this.lineIdx + 1);\n            this.line = this.lineTokens.getLineContent();\n            this.lineTokenOffset = this.lineCharOffset === 0 ? 0 : this.lineTokens.findTokenIndexAtOffset(this.lineCharOffset);\n        }\n        const startLineIdx = this.lineIdx;\n        const startLineCharOffset = this.lineCharOffset;\n        // limits the length of text tokens.\n        // If text tokens get too long, incremental updates will be slow\n        let lengthHeuristic = 0;\n        while (true) {\n            const lineTokens = this.lineTokens;\n            const tokenCount = lineTokens.getCount();\n            let peekedBracketToken = null;\n            if (this.lineTokenOffset < tokenCount) {\n                const tokenMetadata = lineTokens.getMetadata(this.lineTokenOffset);\n                while (this.lineTokenOffset + 1 < tokenCount && tokenMetadata === lineTokens.getMetadata(this.lineTokenOffset + 1)) {\n                    // Skip tokens that are identical.\n                    // Sometimes, (bracket) identifiers are split up into multiple tokens.\n                    this.lineTokenOffset++;\n                }\n                const isOther = TokenMetadata.getTokenType(tokenMetadata) === 0 /* StandardTokenType.Other */;\n                const containsBracketType = TokenMetadata.containsBalancedBrackets(tokenMetadata);\n                const endOffset = lineTokens.getEndOffset(this.lineTokenOffset);\n                // Is there a bracket token next? Only consume text.\n                if (containsBracketType && isOther && this.lineCharOffset < endOffset) {\n                    const languageId = lineTokens.getLanguageId(this.lineTokenOffset);\n                    const text = this.line.substring(this.lineCharOffset, endOffset);\n                    const brackets = this.bracketTokens.getSingleLanguageBracketTokens(languageId);\n                    const regexp = brackets.regExpGlobal;\n                    if (regexp) {\n                        regexp.lastIndex = 0;\n                        const match = regexp.exec(text);\n                        if (match) {\n                            peekedBracketToken = brackets.getToken(match[0]);\n                            if (peekedBracketToken) {\n                                // Consume leading text of the token\n                                this.lineCharOffset += match.index;\n                            }\n                        }\n                    }\n                }\n                lengthHeuristic += endOffset - this.lineCharOffset;\n                if (peekedBracketToken) {\n                    // Don't skip the entire token, as a single token could contain multiple brackets.\n                    if (startLineIdx !== this.lineIdx || startLineCharOffset !== this.lineCharOffset) {\n                        // There is text before the bracket\n                        this.peekedToken = peekedBracketToken;\n                        break;\n                    }\n                    else {\n                        // Consume the peeked token\n                        this.lineCharOffset += lengthGetColumnCountIfZeroLineCount(peekedBracketToken.length);\n                        return peekedBracketToken;\n                    }\n                }\n                else {\n                    // Skip the entire token, as the token contains no brackets at all.\n                    this.lineTokenOffset++;\n                    this.lineCharOffset = endOffset;\n                }\n            }\n            else {\n                if (this.lineIdx === this.textBufferLineCount - 1) {\n                    break;\n                }\n                this.lineIdx++;\n                this.lineTokens = this.textModel.tokenization.getLineTokens(this.lineIdx + 1);\n                this.lineTokenOffset = 0;\n                this.line = this.lineTokens.getLineContent();\n                this.lineCharOffset = 0;\n                lengthHeuristic += 33; // max 1000/33 = 30 lines\n                // This limits the amount of work to recompute min-indentation\n                if (lengthHeuristic > 1000) {\n                    // only break (automatically) at the end of line.\n                    break;\n                }\n            }\n            if (lengthHeuristic > 1500) {\n                // Eventually break regardless of the line length so that\n                // very long lines do not cause bad performance.\n                // This effective limits max indentation to 500, as\n                // indentation is not computed across multiple text nodes.\n                break;\n            }\n        }\n        // If a token contains some proper indentation, it also contains \\n{INDENTATION+}(?!{INDENTATION}),\n        // unless the line is too long.\n        // Thus, the min indentation of the document is the minimum min indentation of every text node.\n        const length = lengthDiff(startLineIdx, startLineCharOffset, this.lineIdx, this.lineCharOffset);\n        return new Token(length, 0 /* TokenKind.Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(length));\n    }\n}\nexport class FastTokenizer {\n    constructor(text, brackets) {\n        this.text = text;\n        this._offset = lengthZero;\n        this.idx = 0;\n        const regExpStr = brackets.getRegExpStr();\n        const regexp = regExpStr ? new RegExp(regExpStr + '|\\n', 'gi') : null;\n        const tokens = [];\n        let match;\n        let curLineCount = 0;\n        let lastLineBreakOffset = 0;\n        let lastTokenEndOffset = 0;\n        let lastTokenEndLine = 0;\n        const smallTextTokens0Line = [];\n        for (let i = 0; i < 60; i++) {\n            smallTextTokens0Line.push(new Token(toLength(0, i), 0 /* TokenKind.Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(toLength(0, i))));\n        }\n        const smallTextTokens1Line = [];\n        for (let i = 0; i < 60; i++) {\n            smallTextTokens1Line.push(new Token(toLength(1, i), 0 /* TokenKind.Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(toLength(1, i))));\n        }\n        if (regexp) {\n            regexp.lastIndex = 0;\n            // If a token contains indentation, it also contains \\n{INDENTATION+}(?!{INDENTATION})\n            while ((match = regexp.exec(text)) !== null) {\n                const curOffset = match.index;\n                const value = match[0];\n                if (value === '\\n') {\n                    curLineCount++;\n                    lastLineBreakOffset = curOffset + 1;\n                }\n                else {\n                    if (lastTokenEndOffset !== curOffset) {\n                        let token;\n                        if (lastTokenEndLine === curLineCount) {\n                            const colCount = curOffset - lastTokenEndOffset;\n                            if (colCount < smallTextTokens0Line.length) {\n                                token = smallTextTokens0Line[colCount];\n                            }\n                            else {\n                                const length = toLength(0, colCount);\n                                token = new Token(length, 0 /* TokenKind.Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(length));\n                            }\n                        }\n                        else {\n                            const lineCount = curLineCount - lastTokenEndLine;\n                            const colCount = curOffset - lastLineBreakOffset;\n                            if (lineCount === 1 && colCount < smallTextTokens1Line.length) {\n                                token = smallTextTokens1Line[colCount];\n                            }\n                            else {\n                                const length = toLength(lineCount, colCount);\n                                token = new Token(length, 0 /* TokenKind.Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(length));\n                            }\n                        }\n                        tokens.push(token);\n                    }\n                    // value is matched by regexp, so the token must exist\n                    tokens.push(brackets.getToken(value));\n                    lastTokenEndOffset = curOffset + value.length;\n                    lastTokenEndLine = curLineCount;\n                }\n            }\n        }\n        const offset = text.length;\n        if (lastTokenEndOffset !== offset) {\n            const length = (lastTokenEndLine === curLineCount)\n                ? toLength(0, offset - lastTokenEndOffset)\n                : toLength(curLineCount - lastTokenEndLine, offset - lastLineBreakOffset);\n            tokens.push(new Token(length, 0 /* TokenKind.Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(length)));\n        }\n        this.length = toLength(curLineCount, offset - lastLineBreakOffset);\n        this.tokens = tokens;\n    }\n    get offset() {\n        return this._offset;\n    }\n    read() {\n        return this.tokens[this.idx++] || null;\n    }\n    peek() {\n        return this.tokens[this.idx] || null;\n    }\n    skip(length) {\n        throw new NotSupportedError();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Range } from '../../core/range.js';\nimport { editorBracketHighlightingForeground1, editorBracketHighlightingForeground2, editorBracketHighlightingForeground3, editorBracketHighlightingForeground4, editorBracketHighlightingForeground5, editorBracketHighlightingForeground6, editorBracketHighlightingUnexpectedBracketForeground } from '../../core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class ColorizedBracketPairsDecorationProvider extends Disposable {\n    constructor(textModel) {\n        super();\n        this.textModel = textModel;\n        this.colorProvider = new ColorProvider();\n        this.onDidChangeEmitter = new Emitter();\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.colorizationOptions = textModel.getOptions().bracketPairColorizationOptions;\n        this._register(textModel.bracketPairs.onDidChange(e => {\n            this.onDidChangeEmitter.fire();\n        }));\n    }\n    //#region TextModel events\n    handleDidChangeOptions(e) {\n        this.colorizationOptions = this.textModel.getOptions().bracketPairColorizationOptions;\n    }\n    //#endregion\n    getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations) {\n        if (onlyMinimapDecorations) {\n            // Bracket pair colorization decorations are not rendered in the minimap\n            return [];\n        }\n        if (ownerId === undefined) {\n            return [];\n        }\n        if (!this.colorizationOptions.enabled) {\n            return [];\n        }\n        const result = this.textModel.bracketPairs.getBracketsInRange(range, true).map(bracket => ({\n            id: `bracket${bracket.range.toString()}-${bracket.nestingLevel}`,\n            options: {\n                description: 'BracketPairColorization',\n                inlineClassName: this.colorProvider.getInlineClassName(bracket, this.colorizationOptions.independentColorPoolPerBracketType),\n            },\n            ownerId: 0,\n            range: bracket.range,\n        })).toArray();\n        return result;\n    }\n    getAllDecorations(ownerId, filterOutValidation) {\n        if (ownerId === undefined) {\n            return [];\n        }\n        if (!this.colorizationOptions.enabled) {\n            return [];\n        }\n        return this.getDecorationsInRange(new Range(1, 1, this.textModel.getLineCount(), 1), ownerId, filterOutValidation);\n    }\n}\nclass ColorProvider {\n    constructor() {\n        this.unexpectedClosingBracketClassName = 'unexpected-closing-bracket';\n    }\n    getInlineClassName(bracket, independentColorPoolPerBracketType) {\n        if (bracket.isInvalid) {\n            return this.unexpectedClosingBracketClassName;\n        }\n        return this.getInlineClassNameOfLevel(independentColorPoolPerBracketType ? bracket.nestingLevelOfEqualBracketType : bracket.nestingLevel);\n    }\n    getInlineClassNameOfLevel(level) {\n        // To support a dynamic amount of colors up to 6 colors,\n        // we use a number that is a lcm of all numbers from 1 to 6.\n        return `bracket-highlighting-${level % 30}`;\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const colors = [\n        editorBracketHighlightingForeground1,\n        editorBracketHighlightingForeground2,\n        editorBracketHighlightingForeground3,\n        editorBracketHighlightingForeground4,\n        editorBracketHighlightingForeground5,\n        editorBracketHighlightingForeground6\n    ];\n    const colorProvider = new ColorProvider();\n    collector.addRule(`.monaco-editor .${colorProvider.unexpectedClosingBracketClassName} { color: ${theme.getColor(editorBracketHighlightingUnexpectedBracketForeground)}; }`);\n    const colorValues = colors\n        .map(c => theme.getColor(c))\n        .filter((c) => !!c)\n        .filter(c => !c.isTransparent());\n    for (let level = 0; level < 30; level++) {\n        const color = colorValues[level % colorValues.length];\n        collector.addRule(`.monaco-editor .${colorProvider.getInlineClassNameOfLevel(level)} { color: ${color}; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LanguageAgnosticBracketTokens } from './bracketPairsTree/brackets.js';\nimport { lengthAdd, lengthGetColumnCountIfZeroLineCount, lengthZero } from './bracketPairsTree/length.js';\nimport { parseDocument } from './bracketPairsTree/parser.js';\nimport { DenseKeyProvider } from './bracketPairsTree/smallImmutableSet.js';\nimport { TextBufferTokenizer } from './bracketPairsTree/tokenizer.js';\nexport function fixBracketsInLine(tokens, languageConfigurationService) {\n    const denseKeyProvider = new DenseKeyProvider();\n    const bracketTokens = new LanguageAgnosticBracketTokens(denseKeyProvider, (languageId) => languageConfigurationService.getLanguageConfiguration(languageId));\n    const tokenizer = new TextBufferTokenizer(new StaticTokenizerSource([tokens]), bracketTokens);\n    const node = parseDocument(tokenizer, [], undefined, true);\n    let str = '';\n    const line = tokens.getLineContent();\n    function processNode(node, offset) {\n        if (node.kind === 2 /* AstNodeKind.Pair */) {\n            processNode(node.openingBracket, offset);\n            offset = lengthAdd(offset, node.openingBracket.length);\n            if (node.child) {\n                processNode(node.child, offset);\n                offset = lengthAdd(offset, node.child.length);\n            }\n            if (node.closingBracket) {\n                processNode(node.closingBracket, offset);\n                offset = lengthAdd(offset, node.closingBracket.length);\n            }\n            else {\n                const singleLangBracketTokens = bracketTokens.getSingleLanguageBracketTokens(node.openingBracket.languageId);\n                const closingTokenText = singleLangBracketTokens.findClosingTokenText(node.openingBracket.bracketIds);\n                str += closingTokenText;\n            }\n        }\n        else if (node.kind === 3 /* AstNodeKind.UnexpectedClosingBracket */) {\n            // remove the bracket\n        }\n        else if (node.kind === 0 /* AstNodeKind.Text */ || node.kind === 1 /* AstNodeKind.Bracket */) {\n            str += line.substring(lengthGetColumnCountIfZeroLineCount(offset), lengthGetColumnCountIfZeroLineCount(lengthAdd(offset, node.length)));\n        }\n        else if (node.kind === 4 /* AstNodeKind.List */) {\n            for (const child of node.children) {\n                processNode(child, offset);\n                offset = lengthAdd(offset, child.length);\n            }\n        }\n    }\n    processNode(node, lengthZero);\n    return str;\n}\nclass StaticTokenizerSource {\n    constructor(lines) {\n        this.lines = lines;\n        this.tokenization = {\n            getLineTokens: (lineNumber) => {\n                return this.lines[lineNumber - 1];\n            }\n        };\n    }\n    getLineCount() {\n        return this.lines.length;\n    }\n    getLineLength(lineNumber) {\n        return this.lines[lineNumber - 1].getLineContent().length;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Selection } from '../core/selection.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { TextChange, compressConsecutiveTextChanges } from '../core/textChange.js';\nimport * as buffer from '../../../base/common/buffer.js';\nimport { basename } from '../../../base/common/resources.js';\nfunction uriGetComparisonKey(resource) {\n    return resource.toString();\n}\nexport class SingleModelEditStackData {\n    static create(model, beforeCursorState) {\n        const alternativeVersionId = model.getAlternativeVersionId();\n        const eol = getModelEOL(model);\n        return new SingleModelEditStackData(alternativeVersionId, alternativeVersionId, eol, eol, beforeCursorState, beforeCursorState, []);\n    }\n    constructor(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes) {\n        this.beforeVersionId = beforeVersionId;\n        this.afterVersionId = afterVersionId;\n        this.beforeEOL = beforeEOL;\n        this.afterEOL = afterEOL;\n        this.beforeCursorState = beforeCursorState;\n        this.afterCursorState = afterCursorState;\n        this.changes = changes;\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        if (textChanges.length > 0) {\n            this.changes = compressConsecutiveTextChanges(this.changes, textChanges);\n        }\n        this.afterEOL = afterEOL;\n        this.afterVersionId = afterVersionId;\n        this.afterCursorState = afterCursorState;\n    }\n    static _writeSelectionsSize(selections) {\n        return 4 + 4 * 4 * (selections ? selections.length : 0);\n    }\n    static _writeSelections(b, selections, offset) {\n        buffer.writeUInt32BE(b, (selections ? selections.length : 0), offset);\n        offset += 4;\n        if (selections) {\n            for (const selection of selections) {\n                buffer.writeUInt32BE(b, selection.selectionStartLineNumber, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.selectionStartColumn, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.positionLineNumber, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.positionColumn, offset);\n                offset += 4;\n            }\n        }\n        return offset;\n    }\n    static _readSelections(b, offset, dest) {\n        const count = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        for (let i = 0; i < count; i++) {\n            const selectionStartLineNumber = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const selectionStartColumn = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const positionLineNumber = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const positionColumn = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            dest.push(new Selection(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn));\n        }\n        return offset;\n    }\n    serialize() {\n        let necessarySize = (+4 // beforeVersionId\n            + 4 // afterVersionId\n            + 1 // beforeEOL\n            + 1 // afterEOL\n            + SingleModelEditStackData._writeSelectionsSize(this.beforeCursorState)\n            + SingleModelEditStackData._writeSelectionsSize(this.afterCursorState)\n            + 4 // change count\n        );\n        for (const change of this.changes) {\n            necessarySize += change.writeSize();\n        }\n        const b = new Uint8Array(necessarySize);\n        let offset = 0;\n        buffer.writeUInt32BE(b, this.beforeVersionId, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, this.afterVersionId, offset);\n        offset += 4;\n        buffer.writeUInt8(b, this.beforeEOL, offset);\n        offset += 1;\n        buffer.writeUInt8(b, this.afterEOL, offset);\n        offset += 1;\n        offset = SingleModelEditStackData._writeSelections(b, this.beforeCursorState, offset);\n        offset = SingleModelEditStackData._writeSelections(b, this.afterCursorState, offset);\n        buffer.writeUInt32BE(b, this.changes.length, offset);\n        offset += 4;\n        for (const change of this.changes) {\n            offset = change.write(b, offset);\n        }\n        return b.buffer;\n    }\n    static deserialize(source) {\n        const b = new Uint8Array(source);\n        let offset = 0;\n        const beforeVersionId = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const afterVersionId = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const beforeEOL = buffer.readUInt8(b, offset);\n        offset += 1;\n        const afterEOL = buffer.readUInt8(b, offset);\n        offset += 1;\n        const beforeCursorState = [];\n        offset = SingleModelEditStackData._readSelections(b, offset, beforeCursorState);\n        const afterCursorState = [];\n        offset = SingleModelEditStackData._readSelections(b, offset, afterCursorState);\n        const changeCount = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const changes = [];\n        for (let i = 0; i < changeCount; i++) {\n            offset = TextChange.read(b, offset, changes);\n        }\n        return new SingleModelEditStackData(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes);\n    }\n}\nexport class SingleModelEditStackElement {\n    get type() {\n        return 0 /* UndoRedoElementType.Resource */;\n    }\n    get resource() {\n        if (URI.isUri(this.model)) {\n            return this.model;\n        }\n        return this.model.uri;\n    }\n    constructor(label, code, model, beforeCursorState) {\n        this.label = label;\n        this.code = code;\n        this.model = model;\n        this._data = SingleModelEditStackData.create(model, beforeCursorState);\n    }\n    toString() {\n        const data = (this._data instanceof SingleModelEditStackData ? this._data : SingleModelEditStackData.deserialize(this._data));\n        return data.changes.map(change => change.toString()).join(', ');\n    }\n    matchesResource(resource) {\n        const uri = (URI.isUri(this.model) ? this.model : this.model.uri);\n        return (uri.toString() === resource.toString());\n    }\n    setModel(model) {\n        this.model = model;\n    }\n    canAppend(model) {\n        return (this.model === model && this._data instanceof SingleModelEditStackData);\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n        }\n    }\n    close() {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n    }\n    open() {\n        if (!(this._data instanceof SingleModelEditStackData)) {\n            this._data = SingleModelEditStackData.deserialize(this._data);\n        }\n    }\n    undo() {\n        if (URI.isUri(this.model)) {\n            // don't have a model\n            throw new Error(`Invalid SingleModelEditStackElement`);\n        }\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        const data = SingleModelEditStackData.deserialize(this._data);\n        this.model._applyUndo(data.changes, data.beforeEOL, data.beforeVersionId, data.beforeCursorState);\n    }\n    redo() {\n        if (URI.isUri(this.model)) {\n            // don't have a model\n            throw new Error(`Invalid SingleModelEditStackElement`);\n        }\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        const data = SingleModelEditStackData.deserialize(this._data);\n        this.model._applyRedo(data.changes, data.afterEOL, data.afterVersionId, data.afterCursorState);\n    }\n    heapSize() {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        return this._data.byteLength + 168 /*heap overhead*/;\n    }\n}\nexport class MultiModelEditStackElement {\n    get resources() {\n        return this._editStackElementsArr.map(editStackElement => editStackElement.resource);\n    }\n    constructor(label, code, editStackElements) {\n        this.label = label;\n        this.code = code;\n        this.type = 1 /* UndoRedoElementType.Workspace */;\n        this._isOpen = true;\n        this._editStackElementsArr = editStackElements.slice(0);\n        this._editStackElementsMap = new Map();\n        for (const editStackElement of this._editStackElementsArr) {\n            const key = uriGetComparisonKey(editStackElement.resource);\n            this._editStackElementsMap.set(key, editStackElement);\n        }\n        this._delegate = null;\n    }\n    prepareUndoRedo() {\n        if (this._delegate) {\n            return this._delegate.prepareUndoRedo(this);\n        }\n    }\n    matchesResource(resource) {\n        const key = uriGetComparisonKey(resource);\n        return (this._editStackElementsMap.has(key));\n    }\n    setModel(model) {\n        const key = uriGetComparisonKey(URI.isUri(model) ? model : model.uri);\n        if (this._editStackElementsMap.has(key)) {\n            this._editStackElementsMap.get(key).setModel(model);\n        }\n    }\n    canAppend(model) {\n        if (!this._isOpen) {\n            return false;\n        }\n        const key = uriGetComparisonKey(model.uri);\n        if (this._editStackElementsMap.has(key)) {\n            const editStackElement = this._editStackElementsMap.get(key);\n            return editStackElement.canAppend(model);\n        }\n        return false;\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        const key = uriGetComparisonKey(model.uri);\n        const editStackElement = this._editStackElementsMap.get(key);\n        editStackElement.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n    }\n    close() {\n        this._isOpen = false;\n    }\n    open() {\n        // cannot reopen\n    }\n    undo() {\n        this._isOpen = false;\n        for (const editStackElement of this._editStackElementsArr) {\n            editStackElement.undo();\n        }\n    }\n    redo() {\n        for (const editStackElement of this._editStackElementsArr) {\n            editStackElement.redo();\n        }\n    }\n    heapSize(resource) {\n        const key = uriGetComparisonKey(resource);\n        if (this._editStackElementsMap.has(key)) {\n            const editStackElement = this._editStackElementsMap.get(key);\n            return editStackElement.heapSize();\n        }\n        return 0;\n    }\n    split() {\n        return this._editStackElementsArr;\n    }\n    toString() {\n        const result = [];\n        for (const editStackElement of this._editStackElementsArr) {\n            result.push(`${basename(editStackElement.resource)}: ${editStackElement}`);\n        }\n        return `{${result.join(', ')}}`;\n    }\n}\nfunction getModelEOL(model) {\n    const eol = model.getEOL();\n    if (eol === '\\n') {\n        return 0 /* EndOfLineSequence.LF */;\n    }\n    else {\n        return 1 /* EndOfLineSequence.CRLF */;\n    }\n}\nexport function isEditStackElement(element) {\n    if (!element) {\n        return false;\n    }\n    return ((element instanceof SingleModelEditStackElement) || (element instanceof MultiModelEditStackElement));\n}\nexport class EditStack {\n    constructor(model, undoRedoService) {\n        this._model = model;\n        this._undoRedoService = undoRedoService;\n    }\n    pushStackElement() {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement)) {\n            lastElement.close();\n        }\n    }\n    popStackElement() {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement)) {\n            lastElement.open();\n        }\n    }\n    clear() {\n        this._undoRedoService.removeElements(this._model.uri);\n    }\n    _getOrCreateEditStackElement(beforeCursorState, group) {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement) && lastElement.canAppend(this._model)) {\n            return lastElement;\n        }\n        const newElement = new SingleModelEditStackElement(nls.localize('edit', \"Typing\"), 'undoredo.textBufferEdit', this._model, beforeCursorState);\n        this._undoRedoService.pushElement(newElement, group);\n        return newElement;\n    }\n    pushEOL(eol) {\n        const editStackElement = this._getOrCreateEditStackElement(null, undefined);\n        this._model.setEOL(eol);\n        editStackElement.append(this._model, [], getModelEOL(this._model), this._model.getAlternativeVersionId(), null);\n    }\n    pushEditOperation(beforeCursorState, editOperations, cursorStateComputer, group) {\n        const editStackElement = this._getOrCreateEditStackElement(beforeCursorState, group);\n        const inverseEditOperations = this._model.applyEdits(editOperations, true);\n        const afterCursorState = EditStack._computeCursorState(cursorStateComputer, inverseEditOperations);\n        const textChanges = inverseEditOperations.map((op, index) => ({ index: index, textChange: op.textChange }));\n        textChanges.sort((a, b) => {\n            if (a.textChange.oldPosition === b.textChange.oldPosition) {\n                return a.index - b.index;\n            }\n            return a.textChange.oldPosition - b.textChange.oldPosition;\n        });\n        editStackElement.append(this._model, textChanges.map(op => op.textChange), getModelEOL(this._model), this._model.getAlternativeVersionId(), afterCursorState);\n        return afterCursorState;\n    }\n    static _computeCursorState(cursorStateComputer, inverseEditOperations) {\n        try {\n            return cursorStateComputer ? cursorStateComputer(inverseEditOperations) : null;\n        }\n        catch (e) {\n            onUnexpectedError(e);\n            return null;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { findLast } from '../../../base/common/arrays.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { Range } from '../core/range.js';\nimport { TextModelPart } from './textModelPart.js';\nimport { computeIndentLevel } from './utils.js';\nimport { HorizontalGuidesState, IndentGuide, IndentGuideHorizontalLine } from '../textModelGuides.js';\nexport class GuidesTextModelPart extends TextModelPart {\n    constructor(textModel, languageConfigurationService) {\n        super();\n        this.textModel = textModel;\n        this.languageConfigurationService = languageConfigurationService;\n    }\n    getLanguageConfiguration(languageId) {\n        return this.languageConfigurationService.getLanguageConfiguration(languageId);\n    }\n    _computeIndentLevel(lineIndex) {\n        return computeIndentLevel(this.textModel.getLineContent(lineIndex + 1), this.textModel.getOptions().tabSize);\n    }\n    getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n        this.assertNotDisposed();\n        const lineCount = this.textModel.getLineCount();\n        if (lineNumber < 1 || lineNumber > lineCount) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        const foldingRules = this.getLanguageConfiguration(this.textModel.getLanguageId()).foldingRules;\n        const offSide = Boolean(foldingRules && foldingRules.offSide);\n        let up_aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let up_aboveContentLineIndent = -1;\n        let up_belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let up_belowContentLineIndent = -1;\n        const up_resolveIndents = (lineNumber) => {\n            if (up_aboveContentLineIndex !== -1 &&\n                (up_aboveContentLineIndex === -2 ||\n                    up_aboveContentLineIndex > lineNumber - 1)) {\n                up_aboveContentLineIndex = -1;\n                up_aboveContentLineIndent = -1;\n                // must find previous line with content\n                for (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        up_aboveContentLineIndex = lineIndex;\n                        up_aboveContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            if (up_belowContentLineIndex === -2) {\n                up_belowContentLineIndex = -1;\n                up_belowContentLineIndent = -1;\n                // must find next line with content\n                for (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        up_belowContentLineIndex = lineIndex;\n                        up_belowContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n        };\n        let down_aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let down_aboveContentLineIndent = -1;\n        let down_belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let down_belowContentLineIndent = -1;\n        const down_resolveIndents = (lineNumber) => {\n            if (down_aboveContentLineIndex === -2) {\n                down_aboveContentLineIndex = -1;\n                down_aboveContentLineIndent = -1;\n                // must find previous line with content\n                for (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        down_aboveContentLineIndex = lineIndex;\n                        down_aboveContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            if (down_belowContentLineIndex !== -1 &&\n                (down_belowContentLineIndex === -2 ||\n                    down_belowContentLineIndex < lineNumber - 1)) {\n                down_belowContentLineIndex = -1;\n                down_belowContentLineIndent = -1;\n                // must find next line with content\n                for (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        down_belowContentLineIndex = lineIndex;\n                        down_belowContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n        };\n        let startLineNumber = 0;\n        let goUp = true;\n        let endLineNumber = 0;\n        let goDown = true;\n        let indent = 0;\n        let initialIndent = 0;\n        for (let distance = 0; goUp || goDown; distance++) {\n            const upLineNumber = lineNumber - distance;\n            const downLineNumber = lineNumber + distance;\n            if (distance > 1 && (upLineNumber < 1 || upLineNumber < minLineNumber)) {\n                goUp = false;\n            }\n            if (distance > 1 &&\n                (downLineNumber > lineCount || downLineNumber > maxLineNumber)) {\n                goDown = false;\n            }\n            if (distance > 50000) {\n                // stop processing\n                goUp = false;\n                goDown = false;\n            }\n            let upLineIndentLevel = -1;\n            if (goUp && upLineNumber >= 1) {\n                // compute indent level going up\n                const currentIndent = this._computeIndentLevel(upLineNumber - 1);\n                if (currentIndent >= 0) {\n                    // This line has content (besides whitespace)\n                    // Use the line's indent\n                    up_belowContentLineIndex = upLineNumber - 1;\n                    up_belowContentLineIndent = currentIndent;\n                    upLineIndentLevel = Math.ceil(currentIndent / this.textModel.getOptions().indentSize);\n                }\n                else {\n                    up_resolveIndents(upLineNumber);\n                    upLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, up_aboveContentLineIndent, up_belowContentLineIndent);\n                }\n            }\n            let downLineIndentLevel = -1;\n            if (goDown && downLineNumber <= lineCount) {\n                // compute indent level going down\n                const currentIndent = this._computeIndentLevel(downLineNumber - 1);\n                if (currentIndent >= 0) {\n                    // This line has content (besides whitespace)\n                    // Use the line's indent\n                    down_aboveContentLineIndex = downLineNumber - 1;\n                    down_aboveContentLineIndent = currentIndent;\n                    downLineIndentLevel = Math.ceil(currentIndent / this.textModel.getOptions().indentSize);\n                }\n                else {\n                    down_resolveIndents(downLineNumber);\n                    downLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, down_aboveContentLineIndent, down_belowContentLineIndent);\n                }\n            }\n            if (distance === 0) {\n                initialIndent = upLineIndentLevel;\n                continue;\n            }\n            if (distance === 1) {\n                if (downLineNumber <= lineCount &&\n                    downLineIndentLevel >= 0 &&\n                    initialIndent + 1 === downLineIndentLevel) {\n                    // This is the beginning of a scope, we have special handling here, since we want the\n                    // child scope indent to be active, not the parent scope\n                    goUp = false;\n                    startLineNumber = downLineNumber;\n                    endLineNumber = downLineNumber;\n                    indent = downLineIndentLevel;\n                    continue;\n                }\n                if (upLineNumber >= 1 &&\n                    upLineIndentLevel >= 0 &&\n                    upLineIndentLevel - 1 === initialIndent) {\n                    // This is the end of a scope, just like above\n                    goDown = false;\n                    startLineNumber = upLineNumber;\n                    endLineNumber = upLineNumber;\n                    indent = upLineIndentLevel;\n                    continue;\n                }\n                startLineNumber = lineNumber;\n                endLineNumber = lineNumber;\n                indent = initialIndent;\n                if (indent === 0) {\n                    // No need to continue\n                    return { startLineNumber, endLineNumber, indent };\n                }\n            }\n            if (goUp) {\n                if (upLineIndentLevel >= indent) {\n                    startLineNumber = upLineNumber;\n                }\n                else {\n                    goUp = false;\n                }\n            }\n            if (goDown) {\n                if (downLineIndentLevel >= indent) {\n                    endLineNumber = downLineNumber;\n                }\n                else {\n                    goDown = false;\n                }\n            }\n        }\n        return { startLineNumber, endLineNumber, indent };\n    }\n    getLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options) {\n        var _a;\n        const result = [];\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            result.push([]);\n        }\n        // If requested, this could be made configurable.\n        const includeSingleLinePairs = true;\n        const bracketPairs = this.textModel.bracketPairs.getBracketPairsInRangeWithMinIndentation(new Range(startLineNumber, 1, endLineNumber, this.textModel.getLineMaxColumn(endLineNumber))).toArray();\n        let activeBracketPairRange = undefined;\n        if (activePosition && bracketPairs.length > 0) {\n            const bracketsContainingActivePosition = (startLineNumber <= activePosition.lineNumber &&\n                activePosition.lineNumber <= endLineNumber\n                // We don't need to query the brackets again if the cursor is in the viewport\n                ? bracketPairs\n                : this.textModel.bracketPairs.getBracketPairsInRange(Range.fromPositions(activePosition)).toArray()).filter((bp) => Range.strictContainsPosition(bp.range, activePosition));\n            activeBracketPairRange = (_a = findLast(bracketsContainingActivePosition, (i) => includeSingleLinePairs || i.range.startLineNumber !== i.range.endLineNumber)) === null || _a === void 0 ? void 0 : _a.range;\n        }\n        const independentColorPoolPerBracketType = this.textModel.getOptions().bracketPairColorizationOptions.independentColorPoolPerBracketType;\n        const colorProvider = new BracketPairGuidesClassNames();\n        for (const pair of bracketPairs) {\n            /*\n\n\n                    {\n                    |\n                    }\n\n                    {\n                    |\n                    ----}\n\n                ____{\n                |test\n                ----}\n\n                renderHorizontalEndLineAtTheBottom:\n                    {\n                    |\n                    |x}\n                    --\n                renderHorizontalEndLineAtTheBottom:\n                ____{\n                |test\n                | x }\n                ----\n            */\n            if (!pair.closingBracketRange) {\n                continue;\n            }\n            const isActive = activeBracketPairRange && pair.range.equalsRange(activeBracketPairRange);\n            if (!isActive && !options.includeInactive) {\n                continue;\n            }\n            const className = colorProvider.getInlineClassName(pair.nestingLevel, pair.nestingLevelOfEqualBracketType, independentColorPoolPerBracketType) +\n                (options.highlightActive && isActive\n                    ? ' ' + colorProvider.activeClassName\n                    : '');\n            const start = pair.openingBracketRange.getStartPosition();\n            const end = pair.closingBracketRange.getStartPosition();\n            const horizontalGuides = options.horizontalGuides === HorizontalGuidesState.Enabled || (options.horizontalGuides === HorizontalGuidesState.EnabledForActive && isActive);\n            if (pair.range.startLineNumber === pair.range.endLineNumber) {\n                if (includeSingleLinePairs && horizontalGuides) {\n                    result[pair.range.startLineNumber - startLineNumber].push(new IndentGuide(-1, pair.openingBracketRange.getEndPosition().column, className, new IndentGuideHorizontalLine(false, end.column), -1, -1));\n                }\n                continue;\n            }\n            const endVisibleColumn = this.getVisibleColumnFromPosition(end);\n            const startVisibleColumn = this.getVisibleColumnFromPosition(pair.openingBracketRange.getStartPosition());\n            const guideVisibleColumn = Math.min(startVisibleColumn, endVisibleColumn, pair.minVisibleColumnIndentation + 1);\n            let renderHorizontalEndLineAtTheBottom = false;\n            const firstNonWsIndex = strings.firstNonWhitespaceIndex(this.textModel.getLineContent(pair.closingBracketRange.startLineNumber));\n            const hasTextBeforeClosingBracket = firstNonWsIndex < pair.closingBracketRange.startColumn - 1;\n            if (hasTextBeforeClosingBracket) {\n                renderHorizontalEndLineAtTheBottom = true;\n            }\n            const visibleGuideStartLineNumber = Math.max(start.lineNumber, startLineNumber);\n            const visibleGuideEndLineNumber = Math.min(end.lineNumber, endLineNumber);\n            const offset = renderHorizontalEndLineAtTheBottom ? 1 : 0;\n            for (let l = visibleGuideStartLineNumber; l < visibleGuideEndLineNumber + offset; l++) {\n                result[l - startLineNumber].push(new IndentGuide(guideVisibleColumn, -1, className, null, l === start.lineNumber ? start.column : -1, l === end.lineNumber ? end.column : -1));\n            }\n            if (horizontalGuides) {\n                if (start.lineNumber >= startLineNumber && startVisibleColumn > guideVisibleColumn) {\n                    result[start.lineNumber - startLineNumber].push(new IndentGuide(guideVisibleColumn, -1, className, new IndentGuideHorizontalLine(false, start.column), -1, -1));\n                }\n                if (end.lineNumber <= endLineNumber && endVisibleColumn > guideVisibleColumn) {\n                    result[end.lineNumber - startLineNumber].push(new IndentGuide(guideVisibleColumn, -1, className, new IndentGuideHorizontalLine(!renderHorizontalEndLineAtTheBottom, end.column), -1, -1));\n                }\n            }\n        }\n        for (const guides of result) {\n            guides.sort((a, b) => a.visibleColumn - b.visibleColumn);\n        }\n        return result;\n    }\n    getVisibleColumnFromPosition(position) {\n        return (CursorColumns.visibleColumnFromColumn(this.textModel.getLineContent(position.lineNumber), position.column, this.textModel.getOptions().tabSize) + 1);\n    }\n    getLinesIndentGuides(startLineNumber, endLineNumber) {\n        this.assertNotDisposed();\n        const lineCount = this.textModel.getLineCount();\n        if (startLineNumber < 1 || startLineNumber > lineCount) {\n            throw new Error('Illegal value for startLineNumber');\n        }\n        if (endLineNumber < 1 || endLineNumber > lineCount) {\n            throw new Error('Illegal value for endLineNumber');\n        }\n        const options = this.textModel.getOptions();\n        const foldingRules = this.getLanguageConfiguration(this.textModel.getLanguageId()).foldingRules;\n        const offSide = Boolean(foldingRules && foldingRules.offSide);\n        const result = new Array(endLineNumber - startLineNumber + 1);\n        let aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let aboveContentLineIndent = -1;\n        let belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let belowContentLineIndent = -1;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const resultIndex = lineNumber - startLineNumber;\n            const currentIndent = this._computeIndentLevel(lineNumber - 1);\n            if (currentIndent >= 0) {\n                // This line has content (besides whitespace)\n                // Use the line's indent\n                aboveContentLineIndex = lineNumber - 1;\n                aboveContentLineIndent = currentIndent;\n                result[resultIndex] = Math.ceil(currentIndent / options.indentSize);\n                continue;\n            }\n            if (aboveContentLineIndex === -2) {\n                aboveContentLineIndex = -1;\n                aboveContentLineIndent = -1;\n                // must find previous line with content\n                for (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        aboveContentLineIndex = lineIndex;\n                        aboveContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            if (belowContentLineIndex !== -1 &&\n                (belowContentLineIndex === -2 || belowContentLineIndex < lineNumber - 1)) {\n                belowContentLineIndex = -1;\n                belowContentLineIndent = -1;\n                // must find next line with content\n                for (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        belowContentLineIndex = lineIndex;\n                        belowContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            result[resultIndex] = this._getIndentLevelForWhitespaceLine(offSide, aboveContentLineIndent, belowContentLineIndent);\n        }\n        return result;\n    }\n    _getIndentLevelForWhitespaceLine(offSide, aboveContentLineIndent, belowContentLineIndent) {\n        const options = this.textModel.getOptions();\n        if (aboveContentLineIndent === -1 || belowContentLineIndent === -1) {\n            // At the top or bottom of the file\n            return 0;\n        }\n        else if (aboveContentLineIndent < belowContentLineIndent) {\n            // we are inside the region above\n            return 1 + Math.floor(aboveContentLineIndent / options.indentSize);\n        }\n        else if (aboveContentLineIndent === belowContentLineIndent) {\n            // we are in between two regions\n            return Math.ceil(belowContentLineIndent / options.indentSize);\n        }\n        else {\n            if (offSide) {\n                // same level as region below\n                return Math.ceil(belowContentLineIndent / options.indentSize);\n            }\n            else {\n                // we are inside the region that ends below\n                return 1 + Math.floor(belowContentLineIndent / options.indentSize);\n            }\n        }\n    }\n}\nexport class BracketPairGuidesClassNames {\n    constructor() {\n        this.activeClassName = 'indent-active';\n    }\n    getInlineClassName(nestingLevel, nestingLevelOfEqualBracketType, independentColorPoolPerBracketType) {\n        return this.getInlineClassNameOfLevel(independentColorPoolPerBracketType ? nestingLevelOfEqualBracketType : nestingLevel);\n    }\n    getInlineClassNameOfLevel(level) {\n        // To support a dynamic amount of colors up to 6 colors,\n        // we use a number that is a lcm of all numbers from 1 to 6.\n        return `bracket-indent-guide lvl-${level % 30}`;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass SpacesDiffResult {\n    constructor() {\n        this.spacesDiff = 0;\n        this.looksLikeAlignment = false;\n    }\n}\n/**\n * Compute the diff in spaces between two line's indentation.\n */\nfunction spacesDiff(a, aLength, b, bLength, result) {\n    result.spacesDiff = 0;\n    result.looksLikeAlignment = false;\n    // This can go both ways (e.g.):\n    //  - a: \"\\t\"\n    //  - b: \"\\t    \"\n    //  => This should count 1 tab and 4 spaces\n    let i;\n    for (i = 0; i < aLength && i < bLength; i++) {\n        const aCharCode = a.charCodeAt(i);\n        const bCharCode = b.charCodeAt(i);\n        if (aCharCode !== bCharCode) {\n            break;\n        }\n    }\n    let aSpacesCnt = 0, aTabsCount = 0;\n    for (let j = i; j < aLength; j++) {\n        const aCharCode = a.charCodeAt(j);\n        if (aCharCode === 32 /* CharCode.Space */) {\n            aSpacesCnt++;\n        }\n        else {\n            aTabsCount++;\n        }\n    }\n    let bSpacesCnt = 0, bTabsCount = 0;\n    for (let j = i; j < bLength; j++) {\n        const bCharCode = b.charCodeAt(j);\n        if (bCharCode === 32 /* CharCode.Space */) {\n            bSpacesCnt++;\n        }\n        else {\n            bTabsCount++;\n        }\n    }\n    if (aSpacesCnt > 0 && aTabsCount > 0) {\n        return;\n    }\n    if (bSpacesCnt > 0 && bTabsCount > 0) {\n        return;\n    }\n    const tabsDiff = Math.abs(aTabsCount - bTabsCount);\n    const spacesDiff = Math.abs(aSpacesCnt - bSpacesCnt);\n    if (tabsDiff === 0) {\n        // check if the indentation difference might be caused by alignment reasons\n        // sometime folks like to align their code, but this should not be used as a hint\n        result.spacesDiff = spacesDiff;\n        if (spacesDiff > 0 && 0 <= bSpacesCnt - 1 && bSpacesCnt - 1 < a.length && bSpacesCnt < b.length) {\n            if (b.charCodeAt(bSpacesCnt) !== 32 /* CharCode.Space */ && a.charCodeAt(bSpacesCnt - 1) === 32 /* CharCode.Space */) {\n                if (a.charCodeAt(a.length - 1) === 44 /* CharCode.Comma */) {\n                    // This looks like an alignment desire: e.g.\n                    // const a = b + c,\n                    //       d = b - c;\n                    result.looksLikeAlignment = true;\n                }\n            }\n        }\n        return;\n    }\n    if (spacesDiff % tabsDiff === 0) {\n        result.spacesDiff = spacesDiff / tabsDiff;\n        return;\n    }\n}\nexport function guessIndentation(source, defaultTabSize, defaultInsertSpaces) {\n    // Look at most at the first 10k lines\n    const linesCount = Math.min(source.getLineCount(), 10000);\n    let linesIndentedWithTabsCount = 0; // number of lines that contain at least one tab in indentation\n    let linesIndentedWithSpacesCount = 0; // number of lines that contain only spaces in indentation\n    let previousLineText = ''; // content of latest line that contained non-whitespace chars\n    let previousLineIndentation = 0; // index at which latest line contained the first non-whitespace char\n    const ALLOWED_TAB_SIZE_GUESSES = [2, 4, 6, 8, 3, 5, 7]; // prefer even guesses for `tabSize`, limit to [2, 8].\n    const MAX_ALLOWED_TAB_SIZE_GUESS = 8; // max(ALLOWED_TAB_SIZE_GUESSES) = 8\n    const spacesDiffCount = [0, 0, 0, 0, 0, 0, 0, 0, 0]; // `tabSize` scores\n    const tmp = new SpacesDiffResult();\n    for (let lineNumber = 1; lineNumber <= linesCount; lineNumber++) {\n        const currentLineLength = source.getLineLength(lineNumber);\n        const currentLineText = source.getLineContent(lineNumber);\n        // if the text buffer is chunk based, so long lines are cons-string, v8 will flattern the string when we check charCode.\n        // checking charCode on chunks directly is cheaper.\n        const useCurrentLineText = (currentLineLength <= 65536);\n        let currentLineHasContent = false; // does `currentLineText` contain non-whitespace chars\n        let currentLineIndentation = 0; // index at which `currentLineText` contains the first non-whitespace char\n        let currentLineSpacesCount = 0; // count of spaces found in `currentLineText` indentation\n        let currentLineTabsCount = 0; // count of tabs found in `currentLineText` indentation\n        for (let j = 0, lenJ = currentLineLength; j < lenJ; j++) {\n            const charCode = (useCurrentLineText ? currentLineText.charCodeAt(j) : source.getLineCharCode(lineNumber, j));\n            if (charCode === 9 /* CharCode.Tab */) {\n                currentLineTabsCount++;\n            }\n            else if (charCode === 32 /* CharCode.Space */) {\n                currentLineSpacesCount++;\n            }\n            else {\n                // Hit non whitespace character on this line\n                currentLineHasContent = true;\n                currentLineIndentation = j;\n                break;\n            }\n        }\n        // Ignore empty or only whitespace lines\n        if (!currentLineHasContent) {\n            continue;\n        }\n        if (currentLineTabsCount > 0) {\n            linesIndentedWithTabsCount++;\n        }\n        else if (currentLineSpacesCount > 1) {\n            linesIndentedWithSpacesCount++;\n        }\n        spacesDiff(previousLineText, previousLineIndentation, currentLineText, currentLineIndentation, tmp);\n        if (tmp.looksLikeAlignment) {\n            // if defaultInsertSpaces === true && the spaces count == tabSize, we may want to count it as valid indentation\n            //\n            // - item1\n            //   - item2\n            //\n            // otherwise skip this line entirely\n            //\n            // const a = 1,\n            //       b = 2;\n            if (!(defaultInsertSpaces && defaultTabSize === tmp.spacesDiff)) {\n                continue;\n            }\n        }\n        const currentSpacesDiff = tmp.spacesDiff;\n        if (currentSpacesDiff <= MAX_ALLOWED_TAB_SIZE_GUESS) {\n            spacesDiffCount[currentSpacesDiff]++;\n        }\n        previousLineText = currentLineText;\n        previousLineIndentation = currentLineIndentation;\n    }\n    let insertSpaces = defaultInsertSpaces;\n    if (linesIndentedWithTabsCount !== linesIndentedWithSpacesCount) {\n        insertSpaces = (linesIndentedWithTabsCount < linesIndentedWithSpacesCount);\n    }\n    let tabSize = defaultTabSize;\n    // Guess tabSize only if inserting spaces...\n    if (insertSpaces) {\n        let tabSizeScore = (insertSpaces ? 0 : 0.1 * linesCount);\n        // console.log(\"score threshold: \" + tabSizeScore);\n        ALLOWED_TAB_SIZE_GUESSES.forEach((possibleTabSize) => {\n            const possibleTabSizeScore = spacesDiffCount[possibleTabSize];\n            if (possibleTabSizeScore > tabSizeScore) {\n                tabSizeScore = possibleTabSizeScore;\n                tabSize = possibleTabSize;\n            }\n        });\n        // Let a tabSize of 2 win even if it is not the maximum\n        // (only in case 4 was guessed)\n        if (tabSize === 4 && spacesDiffCount[4] > 0 && spacesDiffCount[2] > 0 && spacesDiffCount[2] >= spacesDiffCount[4] / 2) {\n            tabSize = 2;\n        }\n    }\n    // console.log('--------------------------');\n    // console.log('linesIndentedWithTabsCount: ' + linesIndentedWithTabsCount + ', linesIndentedWithSpacesCount: ' + linesIndentedWithSpacesCount);\n    // console.log('spacesDiffCount: ' + spacesDiffCount);\n    // console.log('tabSize: ' + tabSize + ', tabSizeScore: ' + tabSizeScore);\n    return {\n        insertSpaces: insertSpaces,\n        tabSize: tabSize\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function getNodeColor(node) {\n    return ((node.metadata & 1 /* Constants.ColorMask */) >>> 0 /* Constants.ColorOffset */);\n}\nfunction setNodeColor(node, color) {\n    node.metadata = ((node.metadata & 254 /* Constants.ColorMaskInverse */) | (color << 0 /* Constants.ColorOffset */));\n}\nfunction getNodeIsVisited(node) {\n    return ((node.metadata & 2 /* Constants.IsVisitedMask */) >>> 1 /* Constants.IsVisitedOffset */) === 1;\n}\nfunction setNodeIsVisited(node, value) {\n    node.metadata = ((node.metadata & 253 /* Constants.IsVisitedMaskInverse */) | ((value ? 1 : 0) << 1 /* Constants.IsVisitedOffset */));\n}\nfunction getNodeIsForValidation(node) {\n    return ((node.metadata & 4 /* Constants.IsForValidationMask */) >>> 2 /* Constants.IsForValidationOffset */) === 1;\n}\nfunction setNodeIsForValidation(node, value) {\n    node.metadata = ((node.metadata & 251 /* Constants.IsForValidationMaskInverse */) | ((value ? 1 : 0) << 2 /* Constants.IsForValidationOffset */));\n}\nfunction getNodeStickiness(node) {\n    return ((node.metadata & 24 /* Constants.StickinessMask */) >>> 3 /* Constants.StickinessOffset */);\n}\nfunction _setNodeStickiness(node, stickiness) {\n    node.metadata = ((node.metadata & 231 /* Constants.StickinessMaskInverse */) | (stickiness << 3 /* Constants.StickinessOffset */));\n}\nfunction getCollapseOnReplaceEdit(node) {\n    return ((node.metadata & 32 /* Constants.CollapseOnReplaceEditMask */) >>> 5 /* Constants.CollapseOnReplaceEditOffset */) === 1;\n}\nfunction setCollapseOnReplaceEdit(node, value) {\n    node.metadata = ((node.metadata & 223 /* Constants.CollapseOnReplaceEditMaskInverse */) | ((value ? 1 : 0) << 5 /* Constants.CollapseOnReplaceEditOffset */));\n}\nexport class IntervalNode {\n    constructor(id, start, end) {\n        this.metadata = 0;\n        this.parent = this;\n        this.left = this;\n        this.right = this;\n        setNodeColor(this, 1 /* NodeColor.Red */);\n        this.start = start;\n        this.end = end;\n        // FORCE_OVERFLOWING_TEST: this.delta = start;\n        this.delta = 0;\n        this.maxEnd = end;\n        this.id = id;\n        this.ownerId = 0;\n        this.options = null;\n        setNodeIsForValidation(this, false);\n        _setNodeStickiness(this, 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        setCollapseOnReplaceEdit(this, false);\n        this.cachedVersionId = 0;\n        this.cachedAbsoluteStart = start;\n        this.cachedAbsoluteEnd = end;\n        this.range = null;\n        setNodeIsVisited(this, false);\n    }\n    reset(versionId, start, end, range) {\n        this.start = start;\n        this.end = end;\n        this.maxEnd = end;\n        this.cachedVersionId = versionId;\n        this.cachedAbsoluteStart = start;\n        this.cachedAbsoluteEnd = end;\n        this.range = range;\n    }\n    setOptions(options) {\n        this.options = options;\n        const className = this.options.className;\n        setNodeIsForValidation(this, (className === \"squiggly-error\" /* ClassName.EditorErrorDecoration */\n            || className === \"squiggly-warning\" /* ClassName.EditorWarningDecoration */\n            || className === \"squiggly-info\" /* ClassName.EditorInfoDecoration */));\n        _setNodeStickiness(this, this.options.stickiness);\n        setCollapseOnReplaceEdit(this, this.options.collapseOnReplaceEdit);\n    }\n    setCachedOffsets(absoluteStart, absoluteEnd, cachedVersionId) {\n        if (this.cachedVersionId !== cachedVersionId) {\n            this.range = null;\n        }\n        this.cachedVersionId = cachedVersionId;\n        this.cachedAbsoluteStart = absoluteStart;\n        this.cachedAbsoluteEnd = absoluteEnd;\n    }\n    detach() {\n        this.parent = null;\n        this.left = null;\n        this.right = null;\n    }\n}\nexport const SENTINEL = new IntervalNode(null, 0, 0);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nsetNodeColor(SENTINEL, 0 /* NodeColor.Black */);\nexport class IntervalTree {\n    constructor() {\n        this.root = SENTINEL;\n        this.requestNormalizeDelta = false;\n    }\n    intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId) {\n        if (this.root === SENTINEL) {\n            return [];\n        }\n        return intervalSearch(this, start, end, filterOwnerId, filterOutValidation, cachedVersionId);\n    }\n    search(filterOwnerId, filterOutValidation, cachedVersionId) {\n        if (this.root === SENTINEL) {\n            return [];\n        }\n        return search(this, filterOwnerId, filterOutValidation, cachedVersionId);\n    }\n    /**\n     * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!\n     */\n    collectNodesFromOwner(ownerId) {\n        return collectNodesFromOwner(this, ownerId);\n    }\n    /**\n     * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!\n     */\n    collectNodesPostOrder() {\n        return collectNodesPostOrder(this);\n    }\n    insert(node) {\n        rbTreeInsert(this, node);\n        this._normalizeDeltaIfNecessary();\n    }\n    delete(node) {\n        rbTreeDelete(this, node);\n        this._normalizeDeltaIfNecessary();\n    }\n    resolveNode(node, cachedVersionId) {\n        const initialNode = node;\n        let delta = 0;\n        while (node !== this.root) {\n            if (node === node.parent.right) {\n                delta += node.parent.delta;\n            }\n            node = node.parent;\n        }\n        const nodeStart = initialNode.start + delta;\n        const nodeEnd = initialNode.end + delta;\n        initialNode.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n    }\n    acceptReplace(offset, length, textLength, forceMoveMarkers) {\n        // Our strategy is to remove all directly impacted nodes, and then add them back to the tree.\n        // (1) collect all nodes that are intersecting this edit as nodes of interest\n        const nodesOfInterest = searchForEditing(this, offset, offset + length);\n        // (2) remove all nodes that are intersecting this edit\n        for (let i = 0, len = nodesOfInterest.length; i < len; i++) {\n            const node = nodesOfInterest[i];\n            rbTreeDelete(this, node);\n        }\n        this._normalizeDeltaIfNecessary();\n        // (3) edit all tree nodes except the nodes of interest\n        noOverlapReplace(this, offset, offset + length, textLength);\n        this._normalizeDeltaIfNecessary();\n        // (4) edit the nodes of interest and insert them back in the tree\n        for (let i = 0, len = nodesOfInterest.length; i < len; i++) {\n            const node = nodesOfInterest[i];\n            node.start = node.cachedAbsoluteStart;\n            node.end = node.cachedAbsoluteEnd;\n            nodeAcceptEdit(node, offset, (offset + length), textLength, forceMoveMarkers);\n            node.maxEnd = node.end;\n            rbTreeInsert(this, node);\n        }\n        this._normalizeDeltaIfNecessary();\n    }\n    _normalizeDeltaIfNecessary() {\n        if (!this.requestNormalizeDelta) {\n            return;\n        }\n        this.requestNormalizeDelta = false;\n        normalizeDelta(this);\n    }\n}\n//#region Delta Normalization\nfunction normalizeDelta(T) {\n    let node = T.root;\n    let delta = 0;\n    while (node !== SENTINEL) {\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n        // handle current node\n        node.start = delta + node.start;\n        node.end = delta + node.end;\n        node.delta = 0;\n        recomputeMaxEnd(node);\n        setNodeIsVisited(node, true);\n        // going up from this node\n        setNodeIsVisited(node.left, false);\n        setNodeIsVisited(node.right, false);\n        if (node === node.parent.right) {\n            delta -= node.parent.delta;\n        }\n        node = node.parent;\n    }\n    setNodeIsVisited(T.root, false);\n}\nfunction adjustMarkerBeforeColumn(markerOffset, markerStickToPreviousCharacter, checkOffset, moveSemantics) {\n    if (markerOffset < checkOffset) {\n        return true;\n    }\n    if (markerOffset > checkOffset) {\n        return false;\n    }\n    if (moveSemantics === 1 /* MarkerMoveSemantics.ForceMove */) {\n        return false;\n    }\n    if (moveSemantics === 2 /* MarkerMoveSemantics.ForceStay */) {\n        return true;\n    }\n    return markerStickToPreviousCharacter;\n}\n/**\n * This is a lot more complicated than strictly necessary to maintain the same behaviour\n * as when decorations were implemented using two markers.\n */\nexport function nodeAcceptEdit(node, start, end, textLength, forceMoveMarkers) {\n    const nodeStickiness = getNodeStickiness(node);\n    const startStickToPreviousCharacter = (nodeStickiness === 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */\n        || nodeStickiness === 2 /* TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */);\n    const endStickToPreviousCharacter = (nodeStickiness === 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */\n        || nodeStickiness === 2 /* TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */);\n    const deletingCnt = (end - start);\n    const insertingCnt = textLength;\n    const commonLength = Math.min(deletingCnt, insertingCnt);\n    const nodeStart = node.start;\n    let startDone = false;\n    const nodeEnd = node.end;\n    let endDone = false;\n    if (start <= nodeStart && nodeEnd <= end && getCollapseOnReplaceEdit(node)) {\n        // This edit encompasses the entire decoration range\n        // and the decoration has asked to become collapsed\n        node.start = start;\n        startDone = true;\n        node.end = start;\n        endDone = true;\n    }\n    {\n        const moveSemantics = forceMoveMarkers ? 1 /* MarkerMoveSemantics.ForceMove */ : (deletingCnt > 0 ? 2 /* MarkerMoveSemantics.ForceStay */ : 0 /* MarkerMoveSemantics.MarkerDefined */);\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, start, moveSemantics)) {\n            startDone = true;\n        }\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, start, moveSemantics)) {\n            endDone = true;\n        }\n    }\n    if (commonLength > 0 && !forceMoveMarkers) {\n        const moveSemantics = (deletingCnt > insertingCnt ? 2 /* MarkerMoveSemantics.ForceStay */ : 0 /* MarkerMoveSemantics.MarkerDefined */);\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, start + commonLength, moveSemantics)) {\n            startDone = true;\n        }\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, start + commonLength, moveSemantics)) {\n            endDone = true;\n        }\n    }\n    {\n        const moveSemantics = forceMoveMarkers ? 1 /* MarkerMoveSemantics.ForceMove */ : 0 /* MarkerMoveSemantics.MarkerDefined */;\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, end, moveSemantics)) {\n            node.start = start + insertingCnt;\n            startDone = true;\n        }\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, end, moveSemantics)) {\n            node.end = start + insertingCnt;\n            endDone = true;\n        }\n    }\n    // Finish\n    const deltaColumn = (insertingCnt - deletingCnt);\n    if (!startDone) {\n        node.start = Math.max(0, nodeStart + deltaColumn);\n    }\n    if (!endDone) {\n        node.end = Math.max(0, nodeEnd + deltaColumn);\n    }\n    if (node.start > node.end) {\n        node.end = node.start;\n    }\n}\nfunction searchForEditing(T, start, end) {\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n    // Now, it is known that two intervals A and B overlap only when both\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\n    // nodes overlapping with a given interval, you can immediately skip:\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\n    let node = T.root;\n    let delta = 0;\n    let nodeMaxEnd = 0;\n    let nodeStart = 0;\n    let nodeEnd = 0;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            node = node.parent;\n            continue;\n        }\n        if (!getNodeIsVisited(node.left)) {\n            // first time seeing this node\n            nodeMaxEnd = delta + node.maxEnd;\n            if (nodeMaxEnd < start) {\n                // cover case b) from above\n                // there is no need to search this node or its children\n                setNodeIsVisited(node, true);\n                continue;\n            }\n            if (node.left !== SENTINEL) {\n                // go left\n                node = node.left;\n                continue;\n            }\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        if (nodeStart > end) {\n            // cover case a) from above\n            // there is no need to search this node or its right subtree\n            setNodeIsVisited(node, true);\n            continue;\n        }\n        nodeEnd = delta + node.end;\n        if (nodeEnd >= start) {\n            node.setCachedOffsets(nodeStart, nodeEnd, 0);\n            result[resultLen++] = node;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction noOverlapReplace(T, start, end, textLength) {\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n    // Now, it is known that two intervals A and B overlap only when both\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\n    // nodes overlapping with a given interval, you can immediately skip:\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\n    let node = T.root;\n    let delta = 0;\n    let nodeMaxEnd = 0;\n    let nodeStart = 0;\n    const editDelta = (textLength - (end - start));\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            recomputeMaxEnd(node);\n            node = node.parent;\n            continue;\n        }\n        if (!getNodeIsVisited(node.left)) {\n            // first time seeing this node\n            nodeMaxEnd = delta + node.maxEnd;\n            if (nodeMaxEnd < start) {\n                // cover case b) from above\n                // there is no need to search this node or its children\n                setNodeIsVisited(node, true);\n                continue;\n            }\n            if (node.left !== SENTINEL) {\n                // go left\n                node = node.left;\n                continue;\n            }\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        if (nodeStart > end) {\n            node.start += editDelta;\n            node.end += editDelta;\n            node.delta += editDelta;\n            if (node.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || node.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n                T.requestNormalizeDelta = true;\n            }\n            // cover case a) from above\n            // there is no need to search this node or its right subtree\n            setNodeIsVisited(node, true);\n            continue;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n}\n//#endregion\n//#region Searching\nfunction collectNodesFromOwner(T, ownerId) {\n    let node = T.root;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            node = node.parent;\n            continue;\n        }\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        // handle current node\n        if (node.ownerId === ownerId) {\n            result[resultLen++] = node;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction collectNodesPostOrder(T) {\n    let node = T.root;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            node = node.parent;\n            continue;\n        }\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            node = node.right;\n            continue;\n        }\n        // handle current node\n        result[resultLen++] = node;\n        setNodeIsVisited(node, true);\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction search(T, filterOwnerId, filterOutValidation, cachedVersionId) {\n    let node = T.root;\n    let delta = 0;\n    let nodeStart = 0;\n    let nodeEnd = 0;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            node = node.parent;\n            continue;\n        }\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        nodeEnd = delta + node.end;\n        node.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n        let include = true;\n        if (filterOwnerId && node.ownerId && node.ownerId !== filterOwnerId) {\n            include = false;\n        }\n        if (filterOutValidation && getNodeIsForValidation(node)) {\n            include = false;\n        }\n        if (include) {\n            result[resultLen++] = node;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction intervalSearch(T, intervalStart, intervalEnd, filterOwnerId, filterOutValidation, cachedVersionId) {\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n    // Now, it is known that two intervals A and B overlap only when both\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\n    // nodes overlapping with a given interval, you can immediately skip:\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\n    let node = T.root;\n    let delta = 0;\n    let nodeMaxEnd = 0;\n    let nodeStart = 0;\n    let nodeEnd = 0;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            node = node.parent;\n            continue;\n        }\n        if (!getNodeIsVisited(node.left)) {\n            // first time seeing this node\n            nodeMaxEnd = delta + node.maxEnd;\n            if (nodeMaxEnd < intervalStart) {\n                // cover case b) from above\n                // there is no need to search this node or its children\n                setNodeIsVisited(node, true);\n                continue;\n            }\n            if (node.left !== SENTINEL) {\n                // go left\n                node = node.left;\n                continue;\n            }\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        if (nodeStart > intervalEnd) {\n            // cover case a) from above\n            // there is no need to search this node or its right subtree\n            setNodeIsVisited(node, true);\n            continue;\n        }\n        nodeEnd = delta + node.end;\n        if (nodeEnd >= intervalStart) {\n            // There is overlap\n            node.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n            let include = true;\n            if (filterOwnerId && node.ownerId && node.ownerId !== filterOwnerId) {\n                include = false;\n            }\n            if (filterOutValidation && getNodeIsForValidation(node)) {\n                include = false;\n            }\n            if (include) {\n                result[resultLen++] = node;\n            }\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\n//#endregion\n//#region Insertion\nfunction rbTreeInsert(T, newNode) {\n    if (T.root === SENTINEL) {\n        newNode.parent = SENTINEL;\n        newNode.left = SENTINEL;\n        newNode.right = SENTINEL;\n        setNodeColor(newNode, 0 /* NodeColor.Black */);\n        T.root = newNode;\n        return T.root;\n    }\n    treeInsert(T, newNode);\n    recomputeMaxEndWalkToRoot(newNode.parent);\n    // repair tree\n    let x = newNode;\n    while (x !== T.root && getNodeColor(x.parent) === 1 /* NodeColor.Red */) {\n        if (x.parent === x.parent.parent.left) {\n            const y = x.parent.parent.right;\n            if (getNodeColor(y) === 1 /* NodeColor.Red */) {\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(y, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent.parent, 1 /* NodeColor.Red */);\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.right) {\n                    x = x.parent;\n                    leftRotate(T, x);\n                }\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent.parent, 1 /* NodeColor.Red */);\n                rightRotate(T, x.parent.parent);\n            }\n        }\n        else {\n            const y = x.parent.parent.left;\n            if (getNodeColor(y) === 1 /* NodeColor.Red */) {\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(y, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent.parent, 1 /* NodeColor.Red */);\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.left) {\n                    x = x.parent;\n                    rightRotate(T, x);\n                }\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent.parent, 1 /* NodeColor.Red */);\n                leftRotate(T, x.parent.parent);\n            }\n        }\n    }\n    setNodeColor(T.root, 0 /* NodeColor.Black */);\n    return newNode;\n}\nfunction treeInsert(T, z) {\n    let delta = 0;\n    let x = T.root;\n    const zAbsoluteStart = z.start;\n    const zAbsoluteEnd = z.end;\n    while (true) {\n        const cmp = intervalCompare(zAbsoluteStart, zAbsoluteEnd, x.start + delta, x.end + delta);\n        if (cmp < 0) {\n            // this node should be inserted to the left\n            // => it is not affected by the node's delta\n            if (x.left === SENTINEL) {\n                z.start -= delta;\n                z.end -= delta;\n                z.maxEnd -= delta;\n                x.left = z;\n                break;\n            }\n            else {\n                x = x.left;\n            }\n        }\n        else {\n            // this node should be inserted to the right\n            // => it is not affected by the node's delta\n            if (x.right === SENTINEL) {\n                z.start -= (delta + x.delta);\n                z.end -= (delta + x.delta);\n                z.maxEnd -= (delta + x.delta);\n                x.right = z;\n                break;\n            }\n            else {\n                delta += x.delta;\n                x = x.right;\n            }\n        }\n    }\n    z.parent = x;\n    z.left = SENTINEL;\n    z.right = SENTINEL;\n    setNodeColor(z, 1 /* NodeColor.Red */);\n}\n//#endregion\n//#region Deletion\nfunction rbTreeDelete(T, z) {\n    let x;\n    let y;\n    // RB-DELETE except we don't swap z and y in case c)\n    // i.e. we always delete what's pointed at by z.\n    if (z.left === SENTINEL) {\n        x = z.right;\n        y = z;\n        // x's delta is no longer influenced by z's delta\n        x.delta += z.delta;\n        if (x.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || x.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n            T.requestNormalizeDelta = true;\n        }\n        x.start += z.delta;\n        x.end += z.delta;\n    }\n    else if (z.right === SENTINEL) {\n        x = z.left;\n        y = z;\n    }\n    else {\n        y = leftest(z.right);\n        x = y.right;\n        // y's delta is no longer influenced by z's delta,\n        // but we don't want to walk the entire right-hand-side subtree of x.\n        // we therefore maintain z's delta in y, and adjust only x\n        x.start += y.delta;\n        x.end += y.delta;\n        x.delta += y.delta;\n        if (x.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || x.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n            T.requestNormalizeDelta = true;\n        }\n        y.start += z.delta;\n        y.end += z.delta;\n        y.delta = z.delta;\n        if (y.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || y.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n            T.requestNormalizeDelta = true;\n        }\n    }\n    if (y === T.root) {\n        T.root = x;\n        setNodeColor(x, 0 /* NodeColor.Black */);\n        z.detach();\n        resetSentinel();\n        recomputeMaxEnd(x);\n        T.root.parent = SENTINEL;\n        return;\n    }\n    const yWasRed = (getNodeColor(y) === 1 /* NodeColor.Red */);\n    if (y === y.parent.left) {\n        y.parent.left = x;\n    }\n    else {\n        y.parent.right = x;\n    }\n    if (y === z) {\n        x.parent = y.parent;\n    }\n    else {\n        if (y.parent === z) {\n            x.parent = y;\n        }\n        else {\n            x.parent = y.parent;\n        }\n        y.left = z.left;\n        y.right = z.right;\n        y.parent = z.parent;\n        setNodeColor(y, getNodeColor(z));\n        if (z === T.root) {\n            T.root = y;\n        }\n        else {\n            if (z === z.parent.left) {\n                z.parent.left = y;\n            }\n            else {\n                z.parent.right = y;\n            }\n        }\n        if (y.left !== SENTINEL) {\n            y.left.parent = y;\n        }\n        if (y.right !== SENTINEL) {\n            y.right.parent = y;\n        }\n    }\n    z.detach();\n    if (yWasRed) {\n        recomputeMaxEndWalkToRoot(x.parent);\n        if (y !== z) {\n            recomputeMaxEndWalkToRoot(y);\n            recomputeMaxEndWalkToRoot(y.parent);\n        }\n        resetSentinel();\n        return;\n    }\n    recomputeMaxEndWalkToRoot(x);\n    recomputeMaxEndWalkToRoot(x.parent);\n    if (y !== z) {\n        recomputeMaxEndWalkToRoot(y);\n        recomputeMaxEndWalkToRoot(y.parent);\n    }\n    // RB-DELETE-FIXUP\n    let w;\n    while (x !== T.root && getNodeColor(x) === 0 /* NodeColor.Black */) {\n        if (x === x.parent.left) {\n            w = x.parent.right;\n            if (getNodeColor(w) === 1 /* NodeColor.Red */) {\n                setNodeColor(w, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent, 1 /* NodeColor.Red */);\n                leftRotate(T, x.parent);\n                w = x.parent.right;\n            }\n            if (getNodeColor(w.left) === 0 /* NodeColor.Black */ && getNodeColor(w.right) === 0 /* NodeColor.Black */) {\n                setNodeColor(w, 1 /* NodeColor.Red */);\n                x = x.parent;\n            }\n            else {\n                if (getNodeColor(w.right) === 0 /* NodeColor.Black */) {\n                    setNodeColor(w.left, 0 /* NodeColor.Black */);\n                    setNodeColor(w, 1 /* NodeColor.Red */);\n                    rightRotate(T, w);\n                    w = x.parent.right;\n                }\n                setNodeColor(w, getNodeColor(x.parent));\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(w.right, 0 /* NodeColor.Black */);\n                leftRotate(T, x.parent);\n                x = T.root;\n            }\n        }\n        else {\n            w = x.parent.left;\n            if (getNodeColor(w) === 1 /* NodeColor.Red */) {\n                setNodeColor(w, 0 /* NodeColor.Black */);\n                setNodeColor(x.parent, 1 /* NodeColor.Red */);\n                rightRotate(T, x.parent);\n                w = x.parent.left;\n            }\n            if (getNodeColor(w.left) === 0 /* NodeColor.Black */ && getNodeColor(w.right) === 0 /* NodeColor.Black */) {\n                setNodeColor(w, 1 /* NodeColor.Red */);\n                x = x.parent;\n            }\n            else {\n                if (getNodeColor(w.left) === 0 /* NodeColor.Black */) {\n                    setNodeColor(w.right, 0 /* NodeColor.Black */);\n                    setNodeColor(w, 1 /* NodeColor.Red */);\n                    leftRotate(T, w);\n                    w = x.parent.left;\n                }\n                setNodeColor(w, getNodeColor(x.parent));\n                setNodeColor(x.parent, 0 /* NodeColor.Black */);\n                setNodeColor(w.left, 0 /* NodeColor.Black */);\n                rightRotate(T, x.parent);\n                x = T.root;\n            }\n        }\n    }\n    setNodeColor(x, 0 /* NodeColor.Black */);\n    resetSentinel();\n}\nfunction leftest(node) {\n    while (node.left !== SENTINEL) {\n        node = node.left;\n    }\n    return node;\n}\nfunction resetSentinel() {\n    SENTINEL.parent = SENTINEL;\n    SENTINEL.delta = 0; // optional\n    SENTINEL.start = 0; // optional\n    SENTINEL.end = 0; // optional\n}\n//#endregion\n//#region Rotations\nfunction leftRotate(T, x) {\n    const y = x.right; // set y.\n    y.delta += x.delta; // y's delta is no longer influenced by x's delta\n    if (y.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || y.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n        T.requestNormalizeDelta = true;\n    }\n    y.start += x.delta;\n    y.end += x.delta;\n    x.right = y.left; // turn y's left subtree into x's right subtree.\n    if (y.left !== SENTINEL) {\n        y.left.parent = x;\n    }\n    y.parent = x.parent; // link x's parent to y.\n    if (x.parent === SENTINEL) {\n        T.root = y;\n    }\n    else if (x === x.parent.left) {\n        x.parent.left = y;\n    }\n    else {\n        x.parent.right = y;\n    }\n    y.left = x; // put x on y's left.\n    x.parent = y;\n    recomputeMaxEnd(x);\n    recomputeMaxEnd(y);\n}\nfunction rightRotate(T, y) {\n    const x = y.left;\n    y.delta -= x.delta;\n    if (y.delta < -1073741824 /* Constants.MIN_SAFE_DELTA */ || y.delta > 1073741824 /* Constants.MAX_SAFE_DELTA */) {\n        T.requestNormalizeDelta = true;\n    }\n    y.start -= x.delta;\n    y.end -= x.delta;\n    y.left = x.right;\n    if (x.right !== SENTINEL) {\n        x.right.parent = y;\n    }\n    x.parent = y.parent;\n    if (y.parent === SENTINEL) {\n        T.root = x;\n    }\n    else if (y === y.parent.right) {\n        y.parent.right = x;\n    }\n    else {\n        y.parent.left = x;\n    }\n    x.right = y;\n    y.parent = x;\n    recomputeMaxEnd(y);\n    recomputeMaxEnd(x);\n}\n//#endregion\n//#region max end computation\nfunction computeMaxEnd(node) {\n    let maxEnd = node.end;\n    if (node.left !== SENTINEL) {\n        const leftMaxEnd = node.left.maxEnd;\n        if (leftMaxEnd > maxEnd) {\n            maxEnd = leftMaxEnd;\n        }\n    }\n    if (node.right !== SENTINEL) {\n        const rightMaxEnd = node.right.maxEnd + node.delta;\n        if (rightMaxEnd > maxEnd) {\n            maxEnd = rightMaxEnd;\n        }\n    }\n    return maxEnd;\n}\nexport function recomputeMaxEnd(node) {\n    node.maxEnd = computeMaxEnd(node);\n}\nfunction recomputeMaxEndWalkToRoot(node) {\n    while (node !== SENTINEL) {\n        const maxEnd = computeMaxEnd(node);\n        if (node.maxEnd === maxEnd) {\n            // no need to go further\n            return;\n        }\n        node.maxEnd = maxEnd;\n        node = node.parent;\n    }\n}\n//#endregion\n//#region utils\nexport function intervalCompare(aStart, aEnd, bStart, bEnd) {\n    if (aStart === bStart) {\n        return aEnd - bEnd;\n    }\n    return aStart - bStart;\n}\n//#endregion\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertNever } from '../../base/common/assert.js';\nimport { Position } from './core/position.js';\nimport { InjectedTextCursorStops } from './model.js';\n/**\n * *input*:\n * ```\n * xxxxxxxxxxxxxxxxxxxxxxxxxxx\n * ```\n *\n * -> Applying injections `[i...i]`, *inputWithInjections*:\n * ```\n * xxxxxx[iiiiiiiiii]xxxxxxxxxxxxxxxxx[ii]xxxx\n * ```\n *\n * -> breaking at offsets `|` in `xxxxxx[iiiiiii|iii]xxxxxxxxxxx|xxxxxx[ii]xxxx|`:\n * ```\n * xxxxxx[iiiiiii\n * iii]xxxxxxxxxxx\n * xxxxxx[ii]xxxx\n * ```\n *\n * -> applying wrappedTextIndentLength, *output*:\n * ```\n * xxxxxx[iiiiiii\n *    iii]xxxxxxxxxxx\n *    xxxxxx[ii]xxxx\n * ```\n */\nexport class ModelLineProjectionData {\n    constructor(injectionOffsets, \n    /**\n     * `injectionOptions.length` must equal `injectionOffsets.length`\n     */\n    injectionOptions, \n    /**\n     * Refers to offsets after applying injections to the source.\n     * The last break offset indicates the length of the source after applying injections.\n     */\n    breakOffsets, \n    /**\n     * Refers to offsets after applying injections\n     */\n    breakOffsetsVisibleColumn, wrappedTextIndentLength) {\n        this.injectionOffsets = injectionOffsets;\n        this.injectionOptions = injectionOptions;\n        this.breakOffsets = breakOffsets;\n        this.breakOffsetsVisibleColumn = breakOffsetsVisibleColumn;\n        this.wrappedTextIndentLength = wrappedTextIndentLength;\n    }\n    getOutputLineCount() {\n        return this.breakOffsets.length;\n    }\n    getMinOutputOffset(outputLineIndex) {\n        if (outputLineIndex > 0) {\n            return this.wrappedTextIndentLength;\n        }\n        return 0;\n    }\n    getLineLength(outputLineIndex) {\n        // These offsets refer to model text with injected text.\n        const startOffset = outputLineIndex > 0 ? this.breakOffsets[outputLineIndex - 1] : 0;\n        const endOffset = this.breakOffsets[outputLineIndex];\n        let lineLength = endOffset - startOffset;\n        if (outputLineIndex > 0) {\n            lineLength += this.wrappedTextIndentLength;\n        }\n        return lineLength;\n    }\n    getMaxOutputOffset(outputLineIndex) {\n        return this.getLineLength(outputLineIndex);\n    }\n    translateToInputOffset(outputLineIndex, outputOffset) {\n        if (outputLineIndex > 0) {\n            outputOffset = Math.max(0, outputOffset - this.wrappedTextIndentLength);\n        }\n        const offsetInInputWithInjection = outputLineIndex === 0 ? outputOffset : this.breakOffsets[outputLineIndex - 1] + outputOffset;\n        let offsetInInput = offsetInInputWithInjection;\n        if (this.injectionOffsets !== null) {\n            for (let i = 0; i < this.injectionOffsets.length; i++) {\n                if (offsetInInput > this.injectionOffsets[i]) {\n                    if (offsetInInput < this.injectionOffsets[i] + this.injectionOptions[i].content.length) {\n                        // `inputOffset` is within injected text\n                        offsetInInput = this.injectionOffsets[i];\n                    }\n                    else {\n                        offsetInInput -= this.injectionOptions[i].content.length;\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        return offsetInInput;\n    }\n    translateToOutputPosition(inputOffset, affinity = 2 /* PositionAffinity.None */) {\n        let inputOffsetInInputWithInjection = inputOffset;\n        if (this.injectionOffsets !== null) {\n            for (let i = 0; i < this.injectionOffsets.length; i++) {\n                if (inputOffset < this.injectionOffsets[i]) {\n                    break;\n                }\n                if (affinity !== 1 /* PositionAffinity.Right */ && inputOffset === this.injectionOffsets[i]) {\n                    break;\n                }\n                inputOffsetInInputWithInjection += this.injectionOptions[i].content.length;\n            }\n        }\n        return this.offsetInInputWithInjectionsToOutputPosition(inputOffsetInInputWithInjection, affinity);\n    }\n    offsetInInputWithInjectionsToOutputPosition(offsetInInputWithInjections, affinity = 2 /* PositionAffinity.None */) {\n        let low = 0;\n        let high = this.breakOffsets.length - 1;\n        let mid = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            const midStop = this.breakOffsets[mid];\n            midStart = mid > 0 ? this.breakOffsets[mid - 1] : 0;\n            if (affinity === 0 /* PositionAffinity.Left */) {\n                if (offsetInInputWithInjections <= midStart) {\n                    high = mid - 1;\n                }\n                else if (offsetInInputWithInjections > midStop) {\n                    low = mid + 1;\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                if (offsetInInputWithInjections < midStart) {\n                    high = mid - 1;\n                }\n                else if (offsetInInputWithInjections >= midStop) {\n                    low = mid + 1;\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        let outputOffset = offsetInInputWithInjections - midStart;\n        if (mid > 0) {\n            outputOffset += this.wrappedTextIndentLength;\n        }\n        return new OutputPosition(mid, outputOffset);\n    }\n    normalizeOutputPosition(outputLineIndex, outputOffset, affinity) {\n        if (this.injectionOffsets !== null) {\n            const offsetInInputWithInjections = this.outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset);\n            const normalizedOffsetInUnwrappedLine = this.normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections, affinity);\n            if (normalizedOffsetInUnwrappedLine !== offsetInInputWithInjections) {\n                // injected text caused a change\n                return this.offsetInInputWithInjectionsToOutputPosition(normalizedOffsetInUnwrappedLine, affinity);\n            }\n        }\n        if (affinity === 0 /* PositionAffinity.Left */) {\n            if (outputLineIndex > 0 && outputOffset === this.getMinOutputOffset(outputLineIndex)) {\n                return new OutputPosition(outputLineIndex - 1, this.getMaxOutputOffset(outputLineIndex - 1));\n            }\n        }\n        else if (affinity === 1 /* PositionAffinity.Right */) {\n            const maxOutputLineIndex = this.getOutputLineCount() - 1;\n            if (outputLineIndex < maxOutputLineIndex && outputOffset === this.getMaxOutputOffset(outputLineIndex)) {\n                return new OutputPosition(outputLineIndex + 1, this.getMinOutputOffset(outputLineIndex + 1));\n            }\n        }\n        return new OutputPosition(outputLineIndex, outputOffset);\n    }\n    outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset) {\n        if (outputLineIndex > 0) {\n            outputOffset = Math.max(0, outputOffset - this.wrappedTextIndentLength);\n        }\n        const result = (outputLineIndex > 0 ? this.breakOffsets[outputLineIndex - 1] : 0) + outputOffset;\n        return result;\n    }\n    normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections, affinity) {\n        const injectedText = this.getInjectedTextAtOffset(offsetInInputWithInjections);\n        if (!injectedText) {\n            return offsetInInputWithInjections;\n        }\n        if (affinity === 2 /* PositionAffinity.None */) {\n            if (offsetInInputWithInjections === injectedText.offsetInInputWithInjections + injectedText.length\n                && hasRightCursorStop(this.injectionOptions[injectedText.injectedTextIndex].cursorStops)) {\n                return injectedText.offsetInInputWithInjections + injectedText.length;\n            }\n            else {\n                let result = injectedText.offsetInInputWithInjections;\n                if (hasLeftCursorStop(this.injectionOptions[injectedText.injectedTextIndex].cursorStops)) {\n                    return result;\n                }\n                let index = injectedText.injectedTextIndex - 1;\n                while (index >= 0 && this.injectionOffsets[index] === this.injectionOffsets[injectedText.injectedTextIndex]) {\n                    if (hasRightCursorStop(this.injectionOptions[index].cursorStops)) {\n                        break;\n                    }\n                    result -= this.injectionOptions[index].content.length;\n                    if (hasLeftCursorStop(this.injectionOptions[index].cursorStops)) {\n                        break;\n                    }\n                    index--;\n                }\n                return result;\n            }\n        }\n        else if (affinity === 1 /* PositionAffinity.Right */ || affinity === 4 /* PositionAffinity.RightOfInjectedText */) {\n            let result = injectedText.offsetInInputWithInjections + injectedText.length;\n            let index = injectedText.injectedTextIndex;\n            // traverse all injected text that touch each other\n            while (index + 1 < this.injectionOffsets.length && this.injectionOffsets[index + 1] === this.injectionOffsets[index]) {\n                result += this.injectionOptions[index + 1].content.length;\n                index++;\n            }\n            return result;\n        }\n        else if (affinity === 0 /* PositionAffinity.Left */ || affinity === 3 /* PositionAffinity.LeftOfInjectedText */) {\n            // affinity is left\n            let result = injectedText.offsetInInputWithInjections;\n            let index = injectedText.injectedTextIndex;\n            // traverse all injected text that touch each other\n            while (index - 1 >= 0 && this.injectionOffsets[index - 1] === this.injectionOffsets[index]) {\n                result -= this.injectionOptions[index - 1].content.length;\n                index--;\n            }\n            return result;\n        }\n        assertNever(affinity);\n    }\n    getInjectedText(outputLineIndex, outputOffset) {\n        const offset = this.outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset);\n        const injectedText = this.getInjectedTextAtOffset(offset);\n        if (!injectedText) {\n            return null;\n        }\n        return {\n            options: this.injectionOptions[injectedText.injectedTextIndex]\n        };\n    }\n    getInjectedTextAtOffset(offsetInInputWithInjections) {\n        const injectionOffsets = this.injectionOffsets;\n        const injectionOptions = this.injectionOptions;\n        if (injectionOffsets !== null) {\n            let totalInjectedTextLengthBefore = 0;\n            for (let i = 0; i < injectionOffsets.length; i++) {\n                const length = injectionOptions[i].content.length;\n                const injectedTextStartOffsetInInputWithInjections = injectionOffsets[i] + totalInjectedTextLengthBefore;\n                const injectedTextEndOffsetInInputWithInjections = injectionOffsets[i] + totalInjectedTextLengthBefore + length;\n                if (injectedTextStartOffsetInInputWithInjections > offsetInInputWithInjections) {\n                    // Injected text starts later.\n                    break; // All later injected texts have an even larger offset.\n                }\n                if (offsetInInputWithInjections <= injectedTextEndOffsetInInputWithInjections) {\n                    // Injected text ends after or with the given position (but also starts with or before it).\n                    return {\n                        injectedTextIndex: i,\n                        offsetInInputWithInjections: injectedTextStartOffsetInInputWithInjections,\n                        length\n                    };\n                }\n                totalInjectedTextLengthBefore += length;\n            }\n        }\n        return undefined;\n    }\n}\nfunction hasRightCursorStop(cursorStop) {\n    if (cursorStop === null || cursorStop === undefined) {\n        return true;\n    }\n    return cursorStop === InjectedTextCursorStops.Right || cursorStop === InjectedTextCursorStops.Both;\n}\nfunction hasLeftCursorStop(cursorStop) {\n    if (cursorStop === null || cursorStop === undefined) {\n        return true;\n    }\n    return cursorStop === InjectedTextCursorStops.Left || cursorStop === InjectedTextCursorStops.Both;\n}\nexport class InjectedText {\n    constructor(options) {\n        this.options = options;\n    }\n}\nexport class OutputPosition {\n    constructor(outputLineIndex, outputOffset) {\n        this.outputLineIndex = outputLineIndex;\n        this.outputOffset = outputOffset;\n    }\n    toString() {\n        return `${this.outputLineIndex}:${this.outputOffset}`;\n    }\n    toPosition(baseLineNumber) {\n        return new Position(baseLineNumber + this.outputLineIndex, this.outputOffset + 1);\n    }\n}\n"],"names":["TokenMetadata","_classCallCheck","_createClass","key","value","metadata","className","this","getForeground","fontStyle","getFontStyle","colorMap","foreground","result","concat","textDecoration","italic","Boolean","bold","underline","strikethrough","score","selector","candidateUri","candidateLanguage","candidateIsSynchronized","candidateNotebookUri","candidateNotebookType","Array","isArray","_step","ret","_iterator","_createForOfIteratorHelper","s","n","done","err","e","f","language","pattern","scheme","hasAccessToAllModels","notebookType","Math","max","undefined","normalizedPattern","Object","assign","base","normalize","fsPath","matchGlobPattern","isExclusive","every","exclusive","MatchCandidate","uri","languageId","notebookUri","other","_a","_b","toString","LanguageFeatureRegistry","_notebookInfoResolver","_clock","_entries","_onDidChange","Emitter","onDidChange","event","provider","_this","entry","_score","_time","push","_lastCandidate","fire","length","toDisposable","idx","indexOf","splice","model","all","_updateScores","_orderedForEach","lastBucket","lastBucketScore","callback","_step2","_iterator2","notebookInfo","call","candidate","getLanguageId","type","equals","_step3","_iterator3","shouldSynchronizeModel","_step4","_iterator4","sort","_compareByScoreAndTime","a","b","CompletionItemKinds","InlineCompletionTriggerKind","SignatureHelpTriggerKind","DocumentHighlightKind","SymbolKinds","Token","offset","_tokenBrand","TokenizationResult","tokens","endState","_tokenizationResultBrand","EncodedTokenizationResult","_encodedTokenizationResultBrand","isLocationLink","thing","URI","Range","range","originSelectionRange","targetSelectionRange","byKind","Map","set","Codicon","toIcon","kind","codicon","get","console","info","data","fromString","strict","res","icon","Command","InlayHintKind","FoldingRangeKind","Comment","Imports","Region","is","obj","id","title","TokenizationRegistry","TokenizationRegistryImpl","getInheritIndentForLine","autoIndent","lineNumber","honorIntentialIndent","arguments","indentRulesSupport","getLanguageConfiguration","tokenization","indentation","action","priorLineNumber","getLineContent","precedingUnIgnoredLine","getLanguageIdAtPosition","lastLineNumber","resultLineNumber","text","shouldIgnore","test","getPrecedingValidLine","precedingUnIgnoredLineContent","shouldIncrease","shouldIndentNextLine","strings","IndentAction","line","shouldDecrease","previousLine","previousLineIndentMetadata","getIndentMetadata","stopLine","i","lineContent","j","getGoodIndentForLine","virtualModel","indentConverter","languageConfigurationService","richEditSupport","indent","inheritLine","shouldApplyEnterRules","inBetweenLine","enterResult","onEnter","removeText","substring","indentAction","shiftIndent","unshiftIndent","appendText","getIndentForEnter","forceTokenization","startLineNumber","beforeEnterText","afterEnterText","lineTokens","getLineTokens","scopedLineTokens","createScopedLineTokens","startColumn","scopedLineText","embeddedLanguage","firstCharOffset","substr","isEmpty","getScopedLineTokens","endLineNumber","endColumn","beforeEnterResult","beforeEnterIndent","column","currentLineIndent","afterEnterAction","beforeEnter","afterEnter","afterEnterIndent","getIndentActionForType","ch","afterTypeText","beforeTypeText","r","getLineCount","getEnterAction","previousLineText","oneLineAboveScopedLineTokens","getIndentationAtPosition","ILanguageService","createDecorator","StandardAutoClosingPairConditional","source","_neutralCharacter","_neutralCharacterSearched","open","close","_inString","_inComment","_inRegEx","notIn","len","standardToken","context","getTokenCount","tokenIndex","findTokenIndexAtOffset","standardTokenType","getStandardTokenType","isOK","fromCharCode","toCharCode","charCode","character","String","includes","_findNeutralCharacterInRange","AutoClosingPairs","autoClosingPairs","autoClosingPairsOpenByStart","autoClosingPairsOpenByEnd","autoClosingPairsCloseByStart","autoClosingPairsCloseByEnd","autoClosingPairsCloseSingleChar","pair","appendEntry","charAt","target","has","CharacterPairSupport","config","_autoClosingPairs","map","el","brackets","__electricCharacterSupport","docComment","_autoCloseBeforeForQuotes","autoCloseBefore","DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES","_autoCloseBeforeForBrackets","DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS","_surroundingPairs","surroundingPairs","forQuotes","BracketElectricCharacterSupport","richEditBrackets","_richEditBrackets","bracket","lastChar","distinct","ignoreBracketsInToken","reversedBracketRegex","reversedRegex","BracketsUtils","bracketText","toLowerCase","textIsOpenBracket","textBeforeBracket","getActualLineContentBefore","matchOpenBracket","resetGlobalRegex","reg","global","lastIndex","IndentRulesSupport","indentationRules","_indentationRules","increaseIndentPattern","decreaseIndentPattern","indentNextLinePattern","unIndentedLinePattern","OnEnterSupport","opts","_brackets","forEach","openRegExp","_createOpenBracketRegExp","closeRegExp","_createCloseBracketRegExp","_regExpRules","onEnterRules","rule","beforeText","afterText","str","_safeRegExp","def","RegExp","onUnexpectedError","LanguageBracketsConfiguration","bracketPairs","filterValidBrackets","openingBracketInfos","CachedFunction","closing","Set","OpeningBracketKind","closingBracketInfos","opening","openingColorized","ClosingBracketKind","_step$value","_slicedToArray","add","colorizedBracketPairs","filter","p","_step2$value","_openingBrackets","_toConsumableArray","cachedValues","_ref","_ref2","_closingBrackets","_ref3","_ref4","values","getOpeningBracketInfo","getClosingBracketInfo","_ref5","_ref6","BracketKindBase","_BracketKindBase","_inherits","_super","_createSuper","openedBrackets","_this2","isOpeningBracket","_BracketKindBase2","_super2","openingBrackets","openingColorizedBrackets","_this3","__decorate","decorators","desc","d","c","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","LanguageConfigurationServiceChangeEvent","ILanguageConfigurationService","LanguageConfigurationService","_Disposable","configurationService","languageService","_registry","_register","LanguageConfigurationRegistry","onDidChangeEmitter","configurations","languageConfigKeys","customizedLanguageConfigKeys","onDidChangeConfiguration","globalConfigChanged","change","keys","some","k","localConfigChanged","overrides","clear","isRegisteredLanguageId","delete","configuration","priority","register","registry","languageConfig","ResolvedLanguageConfiguration","customizedConfig","getValue","overrideIdentifier","validateBracketPairs","getCustomizedLanguageConfig","combineLanguageConfigurations","underlyingConfig","computeConfig","Disposable","IConfigurationService","lineText","columnNumber","getLineMaxColumn","ComposedLanguageConfiguration","_resolved","_order","LanguageConfigurationContribution","_resolve","cmp","configs","comments","wordPattern","folding","order","LanguageConfigurationChangeEvent","_Disposable2","PLAINTEXT_LANGUAGE_ID","offSide","_this4","entries","disposable","dispose","getResolvedConfiguration","_electricCharacter","_onEnterSupport","_handleComments","characterPair","wordDefinition","DEFAULT_WORD_REGEXP","foldingRules","bracketsNew","ensureValidWordDefinition","RichEditBrackets","getAutoClosingPairs","getAutoCloseBeforeSet","getSurroundingPairs","conf","commentRule","lineComment","lineCommentToken","blockComment","_commentRule$blockCom","blockStart","blockEnd","blockCommentStartToken","blockCommentEndToken","registerSingleton","Uint8Matrix","rows","cols","defaultValue","Uint8Array","_data","row","col","StateMachine","edges","maxCharCode","maxState","_edges$i","from","chCode","to","states","_edges$_i","_states","_maxCharCode","currentState","_stateMachine","_classifier","LinkComputer","classifier","linkBeginIndex","linkEndIndex","lastIncludedCharIndex","charCodeAt","charCodeBeforeLink","lastCharCodeInLink","url","stateMachine","CharacterClassifier","FORCE_TERMINATION_CHARACTERS","CANNOT_END_WITH_CHARACTERS","getClassifier","lineCount","linkBeginChCode","state","hasOpenParens","hasOpenSquareBracket","inSquareBrackets","hasOpenCurlyBracket","resetStateMachine","chClass","_createLink","nextState","computeLinks","ModesRegistry","EditorModesRegistry","_onDidChangeLanguages","onDidChangeLanguages","_languages","Registry","registerLanguage","extensions","aliases","nls","mimetypes","Mimes","ConfigurationExtensions","registerDefaultConfigurations","NullState","_class","nullTokenize","nullTokenizeEncoded","Uint32Array","tokenCount","getCount","desiredLanguageId","lastTokenIndex","firstTokenIndex","ScopedLineTokens","getStartOffset","getEndOffset","actual","lastCharOffset","_scopedLineTokensBrand","_actual","_firstTokenIndex","_lastTokenIndex","_lastCharOffset","BasicInplaceReplace","_defaultValueSet","range1","text1","range2","text2","up","doNavigateValueSet","numberResult","numberReplace","textReplace","precision","pow","lastIndexOf","n1","Number","n2","parseFloat","isNaN","floor","valueSetsReplace","valueSets","valueSetReplace","valueSet","INSTANCE","RichEditBracket","index","forwardRegex","_richEditBracketBrand","_openSet","_toSet","_closeSet","arr","element","_richEditBracketsBrand","N","group","areOverlapping","aOpen","aClose","bOpen","bClose","mergeGroups","g1","g2","newG","min","oldG","g","currentOpen","currentClose","_brackets$_i","groupFuzzyBrackets","currentIndex","pieces","collectSuperstrings","unique","lengthcmp","reverse","createBracketOrRegExp","getRegexForBracketPair","toReversedString","getReversedRegexForBracketPair","_step8","_iterator8","_step9","_iterator9","_step10","_iterator10","getRegexForBrackets","_step11","_iterator11","_step12","_iterator12","_step13","_iterator13","getReversedRegexForBrackets","textIsBracket","maxBracketLength","dest","_step5","_iterator5","_step6","_iterator6","_step7","seen","_iterator7","prepareBracketForRegExp","insertWordBoundaries","regexStr","join","lastInput","lastOutput","Uint16Array","stringBuilder","decode","reversedText","m","match","matchOffset","matchLength","absoluteMatchOffset","startOffset","endOffset","reversedSubstr","_findPrevBracketInText","bracketRegex","findNextBracketInText","ParsedTokenThemeRule","token","background","_parsedThemeRuleBrand","resolveParsedTokenThemeRules","parsedThemeRules","customTokenColors","strcmp","defaultFontStyle","defaultForeground","defaultBackground","incomingDefaults","shift","ColorMap","color","getId","foregroundColorId","backgroundColorId","defaults","ThemeTrieElementRule","root","ThemeTrieElement","insert","TokenTheme","colorRegExp","_lastColorId","_id2color","_color2id","Error","toUpperCase","Color","slice","_colorMap","_root","_cache","getColorMap","_match","tokenType","STANDARD_TOKEN_TYPE_REGEXP","toStandardTokenType","createFromParsedTokenTheme","resultLen","segments","split","lenJ","parseTokenTheme","_themeTrieElementRuleBrand","_fontStyle","_foreground","_background","mainRule","_themeTrieElementBrand","_mainRule","_children","head","tail","dotIndex","child","clone","acceptOverwrite","generateTokensCSSForColorMap","rules","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","then","apply","fallback","getInitialState","tokenizeEncoded","buffer","hasEOL","tokenizeToString","_regeneratorRuntime","mark","_callee","tokenizationSupport","wrap","_context","prev","abrupt","_tokenizeToString","languageIdCodec","sent","stop","tokenizeLineToHTML","viewLineTokens","tabSize","useNbsp","charIndex","tabsCharDelta","prevIsSpace","tokenEndIndex","partContent","insertSpacesCount","getInlineStyle","lines","tokenizationResult","LineTokens","inflate","getClassName","endIndex","OverviewRulerLane","MinimapPosition","InjectedTextCursorStops","TextModelResolvedOptions","src","_textModelResolvedOptionsBrand","indentSize","_indentSizeIsTabSize","insertSpaces","defaultEOL","trimAutoWhitespace","bracketPairColorizationOptions","newOpts","FindMatch","matches","_findMatchBrand","isITextSnapshot","read","ValidAnnotatedEditOperation","identifier","forceMoveMarkers","isAutoWhitespaceEdit","_isTracked","SearchData","regex","wordSeparators","simpleSearch","ApplyEditsResult","reverseEdits","changes","trimAutoWhitespaceLineNumbers","isTooLargeForSyncing","isForSimpleWidget","combineTextEditInfos","textEditInfoFirst","textEditInfoSecond","firstMap","ArrayQueue","toTextMap","secondMap","remainingS0Length","remainingS1Length","lengthZero","readPartialS0Map","s1Length","lengthIsZero","readS1Length","lengthLessThanEqual","lengthDiffNonNegative","oldLength","newLength","item","dequeue","lengthEquals","lastResult","TextEditInfo","lengthAdd","s0offset","s2","s0ToS1Map","s0Length","sumLengths","s0EndOffset","s1","s0startOffset","textEditInfos","lastOffset","textEditInfo","spaceLength","BracketPairsTree","textModel","didChangeEmitter","denseKeyProvider","DenseKeyProvider","LanguageAgnosticBracketTokens","queuedTextEditsForInitialAstWithoutTokens","queuedTextEdits","hasTokens","backgroundTokenizationState","initialAstWithoutTokens","astWithTokens","parseDocumentFromTextBuffer","getSingleLanguageBracketTokens","tokenizer","FastTokenizer","parseDocument","didLanguageChange","wasUndefined","edits","ranges","toLength","fromLineNumber","toLineNumber","handleEdits","positionToLength","getStartPosition","getEndPosition","lengthOfString","tokenChange","previousAst","immutable","previousAstClone","TextBufferTokenizer","onlyColorizedBrackets","flushQueue","CallbackIterable","cb","node","collectBrackets","includeMinIndentation","startLength","endLength","CollectBracketPairsContext","collectBracketPairs","position","getFirstBracketAfter","getFirstBracketBefore","nodeOffsetStart","nodeOffsetEnd","lengths","children","_lengths$i","lengthLessThan","lengthsToRange","bracketInfo","level","nestingLevelOfEqualBracketType","levelPerBracketType","parentPairIsIncomplete","whileLoop","childCount","childrenLength","getChild","lengthGreaterThanEqual","colorize","closingBracket","closesColorized","openingBracket","levelPerBracket","existing","BracketInfo","shouldContinue","openingBracketEnd","minIndentation","computeMinIndentation","BracketPairWithMinIndentationInfo","curOffset","childOffset","BracketPairsTextModelPart","bracketPairsTree","MutableDisposable","bracketsRequested","object","updateBracketPairsTree","getValueLength","handleContentChanged","handleDidChangeBackgroundTokenizationState","handleDidChangeTokens","canBuildAST","store","DisposableStore","getBracketPairsInRange","getBracketsInRange","_bracket","_position","maxDuration","validatePosition","closingBracketInfo","bracketPair","findLast","closes","openingBracketInfo","openingBracketRange","bracketsSupport","stripBracketSearchCanceled","_findMatchingBracketUp","createTimeBasedContinueBracketSearchPredicate","closingBracketRange","containsPosition","findLastMaxBy","compareBy","continueSearchPredicate","_matchBracket","modeBrackets","currentLanguageId","searchStartOffset","tokenEndOffset","searchEndOffset","tokenStartOffset","currentModeBrackets","_this$_establishBrack","_establishBracketSearchOffsets","bestResult","foundBracket","foundBracketText","_matchFoundBracket","BracketSearchCanceled","prevTokenIndex","prevModeBrackets","_this$_establishBrack2","isOpen","matched","_findMatchingBracketDown","count","totalCallCount","searchPrevMatchingBracketInRange","hitText","isClose","prevSearchInToken","searchInToken","searchNextMatchingBracketInRange","bracketConfig","tokenLanguageId","_toFoundBracket","strictContainsRange","savedCounts","counts","resetCounts","tmp","searchInRange","getValueInRange","getBracketInfo","startTime","Date","now","_searchCanceledBrand","BaseAstNode","_length","PairAstNode","_BaseAstNode","missingOpeningBracketIds","openBracketIds","intersects","deepClone","MAX_SAFE_INTEGER","SmallImmutableSet","ListAstNode","_BaseAstNode2","listHeight","_missingOpeningBracketIds","cachedMinIndentation","throwIfImmutable","lastChild","mutable","toMutable","setChild","firstChild","lastLength","BugIndicatingError","canBeReused","unopenedBrackets","merge","item1","item2","item3","missingBracketIds","Immutable23ListAstNode","TwoThreeListAstNode","ImmutableArrayListAstNode","_ListAstNode","_super3","_item1","_item2","_item3","handleChildrenChanged","_TwoThreeListAstNode","_super4","ArrayListAstNode","_ListAstNode2","_super5","pop","unshift","_ArrayListAstNode","_super6","emptyArray","ImmutableLeafAstNode","_BaseAstNode3","_super7","TextAstNode","_ImmutableLeafAstNode","_super8","_openedBracketIds","start","lengthToObj","columnCount","lengthGetLineCount","firstNonWsColumn","getLineFirstNonWhitespaceColumn","visibleColumn","CursorColumns","getOptions","BracketAstNode","_ImmutableLeafAstNode2","_super9","bracketIds","_this5","InvalidBracketAstNode","_ImmutableLeafAstNode3","_super10","closingBrackets","_this6","openedBracketIds","BeforeEditPositionMapper","nextEditIdx","deltaOldToNewLineCount","deltaOldToNewColumnCount","deltaLineIdxInOld","edit","TextEditInfoCache","adjustNextEdit","translateCurToOld","nextEdit","nextChangeOffset","translateOldToCur","offsetObj","oldOffsetObj","newOffset","nextEditEndOffsetInCur","endOffsetAfterObj","nextEditEndOffsetInCurObj","nextEditEndOffsetBeforeInCurObj","endOffsetBeforeObj","lineDelta","previousColumnDelta","columnDelta","textLength","BracketTokens","hasRegExp","_regExpGlobal","escaped","escapeRegExpCharacters","regExpStr","getRegExpStr","openingBracketIds","closingText","size","getKey","openingTextId","identityKeyProvider","getOpeningBrackets","languageIdToBracketTokens","singleLanguageBracketTokens","createFromLanguage","LengthObj","lengthDiff","startLineCount","startColumnCount","endLineCount","endColumnCount","zero","factor","l","lengthGetColumnCountIfZeroLineCount","l1","l2","items","lengthFn","reduce","length1","length2","lineCount1","lineCount2","colCount2","lengthStart","lengthEnd","colCount","splitLines","concat23TreesOfSameHeight","createImmutableLists","heightDiff","node1","node2","abs","list","nodeToAppend","nodeToAppendOfCorrectHeight","curNode","parents","makeLastElementMutable","parent","unappendChild","appendChildOfSameHeight","append","makeFirstElementMutable","nodeToPrependOfCorrectHeight","unprependChild","prependChildOfSameHeight","prepend","NodeReader","nextNodes","offsets","idxs","predicate","lastOrUndefined","curNodeOffset","nextNodeAfterCurrent","nextChildIdx","getNextChildIdx","currentOffset","currentNode","curIdx","oldNode","Parser","_itemsConstructed","_itemsFromCache","oldNodeReader","positionMapper","parseList","tryReadChildFromCache","peek","parseChild","readNode","height","first","second","concat23Trees","maxCacheableLength","getDistanceToNextChange","cachedNode","readLongestNodeAt","getOffsetBeforeChange","skip","astNode","nextToken","bracketId","emptyArr","additionalItems","keyProvider","newItem","create","newItems","merged","cached","cache","empty","bracketTokens","reader","NonPeekableTextBufferTokenizer","_offset","didPeek","peeked","textBufferLineCount","textBufferLastLineLength","getLineLength","setPosition","lineIdx","lineCharOffset","lineTokenOffset","peekedToken","startLineIdx","startLineCharOffset","lengthHeuristic","peekedBracketToken","tokenMetadata","getMetadata","isOther","containsBracketType","regexp","regExpGlobal","exec","getToken","curLineCount","lastLineBreakOffset","lastTokenEndOffset","lastTokenEndLine","smallTextTokens0Line","smallTextTokens1Line","NotSupportedError","ColorizedBracketPairsDecorationProvider","colorProvider","ColorProvider","colorizationOptions","ownerId","filterOutValidation","onlyMinimapDecorations","enabled","nestingLevel","options","description","inlineClassName","getInlineClassName","independentColorPoolPerBracketType","toArray","getDecorationsInRange","unexpectedClosingBracketClassName","isInvalid","getInlineClassNameOfLevel","registerThemingParticipant","theme","collector","colors","editorBracketHighlightingForeground1","editorBracketHighlightingForeground2","editorBracketHighlightingForeground3","editorBracketHighlightingForeground4","editorBracketHighlightingForeground5","editorBracketHighlightingForeground6","addRule","getColor","editorBracketHighlightingUnexpectedBracketForeground","colorValues","isTransparent","fixBracketsInLine","StaticTokenizerSource","processNode","closingTokenText","findClosingTokenText","uriGetComparisonKey","resource","SingleModelEditStackData","beforeVersionId","afterVersionId","beforeEOL","afterEOL","beforeCursorState","afterCursorState","textChanges","compressConsecutiveTextChanges","necessarySize","_writeSelectionsSize","writeSize","_writeSelections","write","alternativeVersionId","getAlternativeVersionId","eol","getModelEOL","selections","selection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","Selection","_readSelections","changeCount","TextChange","SingleModelEditStackElement","label","code","deserialize","serialize","_applyUndo","_applyRedo","byteLength","MultiModelEditStackElement","editStackElements","_isOpen","_editStackElementsArr","_editStackElementsMap","editStackElement","_delegate","prepareUndoRedo","setModel","canAppend","undo","redo","heapSize","basename","getEOL","isEditStackElement","EditStack","undoRedoService","_model","_undoRedoService","lastElement","getLastElement","removeElements","newElement","pushElement","_getOrCreateEditStackElement","setEOL","editOperations","cursorStateComputer","inverseEditOperations","applyEdits","_computeCursorState","op","textChange","oldPosition","GuidesTextModelPart","_TextModelPart","lineIndex","computeIndentLevel","minLineNumber","maxLineNumber","assertNotDisposed","up_aboveContentLineIndex","up_aboveContentLineIndent","up_belowContentLineIndex","up_belowContentLineIndent","up_resolveIndents","_computeIndentLevel","down_aboveContentLineIndex","down_aboveContentLineIndent","down_belowContentLineIndex","down_belowContentLineIndent","down_resolveIndents","goUp","goDown","initialIndent","distance","upLineNumber","downLineNumber","upLineIndentLevel","currentIndent","ceil","_getIndentLevelForWhitespaceLine","downLineIndentLevel","activePosition","getBracketPairsInRangeWithMinIndentation","activeBracketPairRange","bracketsContainingActivePosition","bp","BracketPairGuidesClassNames","isActive","equalsRange","includeInactive","highlightActive","activeClassName","end","horizontalGuides","HorizontalGuidesState","endVisibleColumn","getVisibleColumnFromPosition","startVisibleColumn","guideVisibleColumn","minVisibleColumnIndentation","renderHorizontalEndLineAtTheBottom","visibleGuideStartLineNumber","visibleGuideEndLineNumber","IndentGuide","IndentGuideHorizontalLine","_i","_result","aboveContentLineIndex","aboveContentLineIndent","belowContentLineIndex","belowContentLineIndent","resultIndex","TextModelPart","SpacesDiffResult","spacesDiff","looksLikeAlignment","aLength","bLength","aSpacesCnt","aTabsCount","bSpacesCnt","bTabsCount","tabsDiff","guessIndentation","defaultTabSize","defaultInsertSpaces","linesCount","linesIndentedWithTabsCount","linesIndentedWithSpacesCount","previousLineIndentation","spacesDiffCount","currentLineLength","currentLineText","useCurrentLineText","currentLineHasContent","currentLineIndentation","currentLineSpacesCount","currentLineTabsCount","getLineCharCode","currentSpacesDiff","tabSizeScore","possibleTabSize","possibleTabSizeScore","getNodeColor","setNodeColor","getNodeIsVisited","setNodeIsVisited","getNodeIsForValidation","setNodeIsForValidation","_setNodeStickiness","stickiness","setCollapseOnReplaceEdit","IntervalNode","left","right","delta","maxEnd","cachedVersionId","cachedAbsoluteStart","cachedAbsoluteEnd","versionId","collapseOnReplaceEdit","absoluteStart","absoluteEnd","SENTINEL","IntervalTree","requestNormalizeDelta","filterOwnerId","T","intervalStart","intervalEnd","nodeStart","nodeEnd","setCachedOffsets","include","intervalSearch","search","collectNodesFromOwner","collectNodesPostOrder","rbTreeInsert","_normalizeDeltaIfNecessary","rbTreeDelete","initialNode","nodesOfInterest","searchForEditing","editDelta","recomputeMaxEnd","noOverlapReplace","nodeAcceptEdit","normalizeDelta","adjustMarkerBeforeColumn","markerOffset","markerStickToPreviousCharacter","checkOffset","moveSemantics","nodeStickiness","getNodeStickiness","startStickToPreviousCharacter","endStickToPreviousCharacter","deletingCnt","insertingCnt","commonLength","startDone","endDone","getCollapseOnReplaceEdit","deltaColumn","newNode","z","x","zAbsoluteStart","zAbsoluteEnd","intervalCompare","treeInsert","recomputeMaxEndWalkToRoot","y","leftRotate","rightRotate","leftest","detach","resetSentinel","w","yWasRed","computeMaxEnd","leftMaxEnd","rightMaxEnd","aStart","aEnd","bStart","bEnd","ModelLineProjectionData","injectionOffsets","injectionOptions","breakOffsets","breakOffsetsVisibleColumn","wrappedTextIndentLength","outputLineIndex","lineLength","outputOffset","offsetInInput","content","inputOffset","affinity","inputOffsetInInputWithInjection","offsetInInputWithInjectionsToOutputPosition","offsetInInputWithInjections","low","high","mid","midStart","midStop","OutputPosition","outputPositionToOffsetInInputWithInjections","normalizedOffsetInUnwrappedLine","normalizeOffsetInInputWithInjectionsAroundInjections","getMinOutputOffset","getMaxOutputOffset","getOutputLineCount","injectedText","getInjectedTextAtOffset","hasRightCursorStop","injectedTextIndex","cursorStops","hasLeftCursorStop","assertNever","totalInjectedTextLengthBefore","injectedTextStartOffsetInInputWithInjections","injectedTextEndOffsetInInputWithInjections","cursorStop","baseLineNumber","Position"],"sourceRoot":""}