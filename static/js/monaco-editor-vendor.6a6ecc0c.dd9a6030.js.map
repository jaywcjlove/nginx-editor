{"version":3,"file":"static/js/monaco-editor-vendor.6a6ecc0c.dd9a6030.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/platform/storage/common/storage.js","../node_modules/monaco-editor/esm/vs/platform/telemetry/common/telemetry.js","../node_modules/monaco-editor/esm/vs/platform/theme/browser/defaultStyles.js","../node_modules/monaco-editor/esm/vs/platform/theme/browser/iconsStyleSheet.js","../node_modules/monaco-editor/esm/vs/platform/theme/common/colorUtils.js","../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/baseColors.js","../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/miscColors.js","../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/editorColors.js","../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/minimapColors.js","../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/inputColors.js","../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/chartsColors.js","../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/listColors.js","../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/menuColors.js","../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/quickpickColors.js","../node_modules/monaco-editor/esm/vs/platform/theme/common/colors/searchColors.js","../node_modules/monaco-editor/esm/vs/platform/theme/common/iconRegistry.js","../node_modules/monaco-editor/esm/vs/platform/theme/common/theme.js","../node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../node_modules/monaco-editor/esm/vs/platform/undoRedo/common/undoRedo.js","../node_modules/monaco-editor/esm/vs/platform/undoRedo/common/undoRedoService.js","../node_modules/monaco-editor/esm/vs/platform/workspace/common/workspace.js","../node_modules/monaco-editor/esm/vs/platform/workspace/common/workspaceTrust.js"],"sourcesContent":["import { Emitter, Event, PauseableEmitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { isUndefinedOrNull } from '../../../base/common/types.js';\nimport { InMemoryStorageDatabase, Storage, StorageHint } from '../../../base/parts/storage/common/storage.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const TARGET_KEY = '__$__targetStorageMarker';\nexport const IStorageService = createDecorator('storageService');\nexport var WillSaveStateReason;\n(function (WillSaveStateReason) {\n    /**\n     * No specific reason to save state.\n     */\n    WillSaveStateReason[WillSaveStateReason[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * A hint that the workbench is about to shutdown.\n     */\n    WillSaveStateReason[WillSaveStateReason[\"SHUTDOWN\"] = 1] = \"SHUTDOWN\";\n})(WillSaveStateReason || (WillSaveStateReason = {}));\nexport function loadKeyTargets(storage) {\n    const keysRaw = storage.get(TARGET_KEY);\n    if (keysRaw) {\n        try {\n            return JSON.parse(keysRaw);\n        }\n        catch (error) {\n            // Fail gracefully\n        }\n    }\n    return Object.create(null);\n}\nexport class AbstractStorageService extends Disposable {\n    constructor(options = { flushInterval: AbstractStorageService.DEFAULT_FLUSH_INTERVAL }) {\n        super();\n        this.options = options;\n        this._onDidChangeValue = this._register(new PauseableEmitter());\n        this._onDidChangeTarget = this._register(new PauseableEmitter());\n        this._onWillSaveState = this._register(new Emitter());\n        this.onWillSaveState = this._onWillSaveState.event;\n        this._workspaceKeyTargets = undefined;\n        this._profileKeyTargets = undefined;\n        this._applicationKeyTargets = undefined;\n    }\n    onDidChangeValue(scope, key, disposable) {\n        return Event.filter(this._onDidChangeValue.event, e => e.scope === scope && (key === undefined || e.key === key), disposable);\n    }\n    emitDidChangeValue(scope, event) {\n        const { key, external } = event;\n        // Specially handle `TARGET_KEY`\n        if (key === TARGET_KEY) {\n            // Clear our cached version which is now out of date\n            switch (scope) {\n                case -1 /* StorageScope.APPLICATION */:\n                    this._applicationKeyTargets = undefined;\n                    break;\n                case 0 /* StorageScope.PROFILE */:\n                    this._profileKeyTargets = undefined;\n                    break;\n                case 1 /* StorageScope.WORKSPACE */:\n                    this._workspaceKeyTargets = undefined;\n                    break;\n            }\n            // Emit as `didChangeTarget` event\n            this._onDidChangeTarget.fire({ scope });\n        }\n        // Emit any other key to outside\n        else {\n            this._onDidChangeValue.fire({ scope, key, target: this.getKeyTargets(scope)[key], external });\n        }\n    }\n    get(key, scope, fallbackValue) {\n        var _a;\n        return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.get(key, fallbackValue);\n    }\n    getBoolean(key, scope, fallbackValue) {\n        var _a;\n        return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.getBoolean(key, fallbackValue);\n    }\n    getNumber(key, scope, fallbackValue) {\n        var _a;\n        return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.getNumber(key, fallbackValue);\n    }\n    store(key, value, scope, target, external = false) {\n        // We remove the key for undefined/null values\n        if (isUndefinedOrNull(value)) {\n            this.remove(key, scope, external);\n            return;\n        }\n        // Update our datastructures but send events only after\n        this.withPausedEmitters(() => {\n            var _a;\n            // Update key-target map\n            this.updateKeyTarget(key, scope, target);\n            // Store actual value\n            (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.set(key, value, external);\n        });\n    }\n    remove(key, scope, external = false) {\n        // Update our datastructures but send events only after\n        this.withPausedEmitters(() => {\n            var _a;\n            // Update key-target map\n            this.updateKeyTarget(key, scope, undefined);\n            // Remove actual key\n            (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.delete(key, external);\n        });\n    }\n    withPausedEmitters(fn) {\n        // Pause emitters\n        this._onDidChangeValue.pause();\n        this._onDidChangeTarget.pause();\n        try {\n            fn();\n        }\n        finally {\n            // Resume emitters\n            this._onDidChangeValue.resume();\n            this._onDidChangeTarget.resume();\n        }\n    }\n    updateKeyTarget(key, scope, target, external = false) {\n        var _a, _b;\n        // Add\n        const keyTargets = this.getKeyTargets(scope);\n        if (typeof target === 'number') {\n            if (keyTargets[key] !== target) {\n                keyTargets[key] = target;\n                (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.set(TARGET_KEY, JSON.stringify(keyTargets), external);\n            }\n        }\n        // Remove\n        else {\n            if (typeof keyTargets[key] === 'number') {\n                delete keyTargets[key];\n                (_b = this.getStorage(scope)) === null || _b === void 0 ? void 0 : _b.set(TARGET_KEY, JSON.stringify(keyTargets), external);\n            }\n        }\n    }\n    get workspaceKeyTargets() {\n        if (!this._workspaceKeyTargets) {\n            this._workspaceKeyTargets = this.loadKeyTargets(1 /* StorageScope.WORKSPACE */);\n        }\n        return this._workspaceKeyTargets;\n    }\n    get profileKeyTargets() {\n        if (!this._profileKeyTargets) {\n            this._profileKeyTargets = this.loadKeyTargets(0 /* StorageScope.PROFILE */);\n        }\n        return this._profileKeyTargets;\n    }\n    get applicationKeyTargets() {\n        if (!this._applicationKeyTargets) {\n            this._applicationKeyTargets = this.loadKeyTargets(-1 /* StorageScope.APPLICATION */);\n        }\n        return this._applicationKeyTargets;\n    }\n    getKeyTargets(scope) {\n        switch (scope) {\n            case -1 /* StorageScope.APPLICATION */:\n                return this.applicationKeyTargets;\n            case 0 /* StorageScope.PROFILE */:\n                return this.profileKeyTargets;\n            default:\n                return this.workspaceKeyTargets;\n        }\n    }\n    loadKeyTargets(scope) {\n        const storage = this.getStorage(scope);\n        return storage ? loadKeyTargets(storage) : Object.create(null);\n    }\n}\nAbstractStorageService.DEFAULT_FLUSH_INTERVAL = 60 * 1000; // every minute\nexport class InMemoryStorageService extends AbstractStorageService {\n    constructor() {\n        super();\n        this.applicationStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n        this.profileStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n        this.workspaceStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n        this._register(this.workspaceStorage.onDidChangeStorage(e => this.emitDidChangeValue(1 /* StorageScope.WORKSPACE */, e)));\n        this._register(this.profileStorage.onDidChangeStorage(e => this.emitDidChangeValue(0 /* StorageScope.PROFILE */, e)));\n        this._register(this.applicationStorage.onDidChangeStorage(e => this.emitDidChangeValue(-1 /* StorageScope.APPLICATION */, e)));\n    }\n    getStorage(scope) {\n        switch (scope) {\n            case -1 /* StorageScope.APPLICATION */:\n                return this.applicationStorage;\n            case 0 /* StorageScope.PROFILE */:\n                return this.profileStorage;\n            default:\n                return this.workspaceStorage;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const ITelemetryService = createDecorator('telemetryService');\n","import { keybindingLabelBackground, keybindingLabelBorder, keybindingLabelBottomBorder, keybindingLabelForeground, asCssVariable, widgetShadow, buttonForeground, buttonSeparator, buttonBackground, buttonHoverBackground, buttonSecondaryForeground, buttonSecondaryBackground, buttonSecondaryHoverBackground, buttonBorder, progressBarBackground, inputActiveOptionBorder, inputActiveOptionForeground, inputActiveOptionBackground, editorWidgetBackground, editorWidgetForeground, contrastBorder, checkboxBorder, checkboxBackground, checkboxForeground, problemsErrorIconForeground, problemsWarningIconForeground, problemsInfoIconForeground, inputBackground, inputForeground, inputBorder, textLinkForeground, inputValidationInfoBorder, inputValidationInfoBackground, inputValidationInfoForeground, inputValidationWarningBorder, inputValidationWarningBackground, inputValidationWarningForeground, inputValidationErrorBorder, inputValidationErrorBackground, inputValidationErrorForeground, listFilterWidgetBackground, listFilterWidgetNoMatchesOutline, listFilterWidgetOutline, listFilterWidgetShadow, badgeBackground, badgeForeground, breadcrumbsBackground, breadcrumbsForeground, breadcrumbsFocusForeground, breadcrumbsActiveSelectionForeground, activeContrastBorder, listActiveSelectionBackground, listActiveSelectionForeground, listActiveSelectionIconForeground, listDropOverBackground, listFocusAndSelectionOutline, listFocusBackground, listFocusForeground, listFocusOutline, listHoverBackground, listHoverForeground, listInactiveFocusBackground, listInactiveFocusOutline, listInactiveSelectionBackground, listInactiveSelectionForeground, listInactiveSelectionIconForeground, tableColumnsBorder, tableOddRowsBackgroundColor, treeIndentGuidesStroke, asCssVariableWithDefault, editorWidgetBorder, focusBorder, pickerGroupForeground, quickInputListFocusBackground, quickInputListFocusForeground, quickInputListFocusIconForeground, selectBackground, selectBorder, selectForeground, selectListBackground, treeInactiveIndentGuidesStroke, menuBorder, menuForeground, menuBackground, menuSelectionForeground, menuSelectionBackground, menuSelectionBorder, menuSeparatorBackground, scrollbarShadow, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground, listDropBetweenBackground } from '../common/colorRegistry.js';\nimport { Color } from '../../../base/common/color.js';\nfunction overrideStyles(override, styles) {\n    const result = { ...styles };\n    for (const key in override) {\n        const val = override[key];\n        result[key] = val !== undefined ? asCssVariable(val) : undefined;\n    }\n    return result;\n}\nexport const defaultKeybindingLabelStyles = {\n    keybindingLabelBackground: asCssVariable(keybindingLabelBackground),\n    keybindingLabelForeground: asCssVariable(keybindingLabelForeground),\n    keybindingLabelBorder: asCssVariable(keybindingLabelBorder),\n    keybindingLabelBottomBorder: asCssVariable(keybindingLabelBottomBorder),\n    keybindingLabelShadow: asCssVariable(widgetShadow)\n};\nexport const defaultButtonStyles = {\n    buttonForeground: asCssVariable(buttonForeground),\n    buttonSeparator: asCssVariable(buttonSeparator),\n    buttonBackground: asCssVariable(buttonBackground),\n    buttonHoverBackground: asCssVariable(buttonHoverBackground),\n    buttonSecondaryForeground: asCssVariable(buttonSecondaryForeground),\n    buttonSecondaryBackground: asCssVariable(buttonSecondaryBackground),\n    buttonSecondaryHoverBackground: asCssVariable(buttonSecondaryHoverBackground),\n    buttonBorder: asCssVariable(buttonBorder),\n};\nexport const defaultProgressBarStyles = {\n    progressBarBackground: asCssVariable(progressBarBackground)\n};\nexport const defaultToggleStyles = {\n    inputActiveOptionBorder: asCssVariable(inputActiveOptionBorder),\n    inputActiveOptionForeground: asCssVariable(inputActiveOptionForeground),\n    inputActiveOptionBackground: asCssVariable(inputActiveOptionBackground)\n};\nexport const defaultCheckboxStyles = {\n    checkboxBackground: asCssVariable(checkboxBackground),\n    checkboxBorder: asCssVariable(checkboxBorder),\n    checkboxForeground: asCssVariable(checkboxForeground)\n};\nexport const defaultDialogStyles = {\n    dialogBackground: asCssVariable(editorWidgetBackground),\n    dialogForeground: asCssVariable(editorWidgetForeground),\n    dialogShadow: asCssVariable(widgetShadow),\n    dialogBorder: asCssVariable(contrastBorder),\n    errorIconForeground: asCssVariable(problemsErrorIconForeground),\n    warningIconForeground: asCssVariable(problemsWarningIconForeground),\n    infoIconForeground: asCssVariable(problemsInfoIconForeground),\n    textLinkForeground: asCssVariable(textLinkForeground)\n};\nexport const defaultInputBoxStyles = {\n    inputBackground: asCssVariable(inputBackground),\n    inputForeground: asCssVariable(inputForeground),\n    inputBorder: asCssVariable(inputBorder),\n    inputValidationInfoBorder: asCssVariable(inputValidationInfoBorder),\n    inputValidationInfoBackground: asCssVariable(inputValidationInfoBackground),\n    inputValidationInfoForeground: asCssVariable(inputValidationInfoForeground),\n    inputValidationWarningBorder: asCssVariable(inputValidationWarningBorder),\n    inputValidationWarningBackground: asCssVariable(inputValidationWarningBackground),\n    inputValidationWarningForeground: asCssVariable(inputValidationWarningForeground),\n    inputValidationErrorBorder: asCssVariable(inputValidationErrorBorder),\n    inputValidationErrorBackground: asCssVariable(inputValidationErrorBackground),\n    inputValidationErrorForeground: asCssVariable(inputValidationErrorForeground)\n};\nexport const defaultFindWidgetStyles = {\n    listFilterWidgetBackground: asCssVariable(listFilterWidgetBackground),\n    listFilterWidgetOutline: asCssVariable(listFilterWidgetOutline),\n    listFilterWidgetNoMatchesOutline: asCssVariable(listFilterWidgetNoMatchesOutline),\n    listFilterWidgetShadow: asCssVariable(listFilterWidgetShadow),\n    inputBoxStyles: defaultInputBoxStyles,\n    toggleStyles: defaultToggleStyles\n};\nexport const defaultCountBadgeStyles = {\n    badgeBackground: asCssVariable(badgeBackground),\n    badgeForeground: asCssVariable(badgeForeground),\n    badgeBorder: asCssVariable(contrastBorder)\n};\nexport const defaultBreadcrumbsWidgetStyles = {\n    breadcrumbsBackground: asCssVariable(breadcrumbsBackground),\n    breadcrumbsForeground: asCssVariable(breadcrumbsForeground),\n    breadcrumbsHoverForeground: asCssVariable(breadcrumbsFocusForeground),\n    breadcrumbsFocusForeground: asCssVariable(breadcrumbsFocusForeground),\n    breadcrumbsFocusAndSelectionForeground: asCssVariable(breadcrumbsActiveSelectionForeground)\n};\nexport const defaultListStyles = {\n    listBackground: undefined,\n    listInactiveFocusForeground: undefined,\n    listFocusBackground: asCssVariable(listFocusBackground),\n    listFocusForeground: asCssVariable(listFocusForeground),\n    listFocusOutline: asCssVariable(listFocusOutline),\n    listActiveSelectionBackground: asCssVariable(listActiveSelectionBackground),\n    listActiveSelectionForeground: asCssVariable(listActiveSelectionForeground),\n    listActiveSelectionIconForeground: asCssVariable(listActiveSelectionIconForeground),\n    listFocusAndSelectionOutline: asCssVariable(listFocusAndSelectionOutline),\n    listFocusAndSelectionBackground: asCssVariable(listActiveSelectionBackground),\n    listFocusAndSelectionForeground: asCssVariable(listActiveSelectionForeground),\n    listInactiveSelectionBackground: asCssVariable(listInactiveSelectionBackground),\n    listInactiveSelectionIconForeground: asCssVariable(listInactiveSelectionIconForeground),\n    listInactiveSelectionForeground: asCssVariable(listInactiveSelectionForeground),\n    listInactiveFocusBackground: asCssVariable(listInactiveFocusBackground),\n    listInactiveFocusOutline: asCssVariable(listInactiveFocusOutline),\n    listHoverBackground: asCssVariable(listHoverBackground),\n    listHoverForeground: asCssVariable(listHoverForeground),\n    listDropOverBackground: asCssVariable(listDropOverBackground),\n    listDropBetweenBackground: asCssVariable(listDropBetweenBackground),\n    listSelectionOutline: asCssVariable(activeContrastBorder),\n    listHoverOutline: asCssVariable(activeContrastBorder),\n    treeIndentGuidesStroke: asCssVariable(treeIndentGuidesStroke),\n    treeInactiveIndentGuidesStroke: asCssVariable(treeInactiveIndentGuidesStroke),\n    treeStickyScrollBackground: undefined,\n    treeStickyScrollBorder: undefined,\n    treeStickyScrollShadow: undefined,\n    tableColumnsBorder: asCssVariable(tableColumnsBorder),\n    tableOddRowsBackgroundColor: asCssVariable(tableOddRowsBackgroundColor),\n};\nexport function getListStyles(override) {\n    return overrideStyles(override, defaultListStyles);\n}\nexport const defaultSelectBoxStyles = {\n    selectBackground: asCssVariable(selectBackground),\n    selectListBackground: asCssVariable(selectListBackground),\n    selectForeground: asCssVariable(selectForeground),\n    decoratorRightForeground: asCssVariable(pickerGroupForeground),\n    selectBorder: asCssVariable(selectBorder),\n    focusBorder: asCssVariable(focusBorder),\n    listFocusBackground: asCssVariable(quickInputListFocusBackground),\n    listInactiveSelectionIconForeground: asCssVariable(quickInputListFocusIconForeground),\n    listFocusForeground: asCssVariable(quickInputListFocusForeground),\n    listFocusOutline: asCssVariableWithDefault(activeContrastBorder, Color.transparent.toString()),\n    listHoverBackground: asCssVariable(listHoverBackground),\n    listHoverForeground: asCssVariable(listHoverForeground),\n    listHoverOutline: asCssVariable(activeContrastBorder),\n    selectListBorder: asCssVariable(editorWidgetBorder),\n    listBackground: undefined,\n    listActiveSelectionBackground: undefined,\n    listActiveSelectionForeground: undefined,\n    listActiveSelectionIconForeground: undefined,\n    listFocusAndSelectionBackground: undefined,\n    listDropOverBackground: undefined,\n    listDropBetweenBackground: undefined,\n    listInactiveSelectionBackground: undefined,\n    listInactiveSelectionForeground: undefined,\n    listInactiveFocusBackground: undefined,\n    listInactiveFocusOutline: undefined,\n    listSelectionOutline: undefined,\n    listFocusAndSelectionForeground: undefined,\n    listFocusAndSelectionOutline: undefined,\n    listInactiveFocusForeground: undefined,\n    tableColumnsBorder: undefined,\n    tableOddRowsBackgroundColor: undefined,\n    treeIndentGuidesStroke: undefined,\n    treeInactiveIndentGuidesStroke: undefined,\n    treeStickyScrollBackground: undefined,\n    treeStickyScrollBorder: undefined,\n    treeStickyScrollShadow: undefined\n};\nexport const defaultMenuStyles = {\n    shadowColor: asCssVariable(widgetShadow),\n    borderColor: asCssVariable(menuBorder),\n    foregroundColor: asCssVariable(menuForeground),\n    backgroundColor: asCssVariable(menuBackground),\n    selectionForegroundColor: asCssVariable(menuSelectionForeground),\n    selectionBackgroundColor: asCssVariable(menuSelectionBackground),\n    selectionBorderColor: asCssVariable(menuSelectionBorder),\n    separatorColor: asCssVariable(menuSeparatorBackground),\n    scrollbarShadow: asCssVariable(scrollbarShadow),\n    scrollbarSliderBackground: asCssVariable(scrollbarSliderBackground),\n    scrollbarSliderHoverBackground: asCssVariable(scrollbarSliderHoverBackground),\n    scrollbarSliderActiveBackground: asCssVariable(scrollbarSliderActiveBackground)\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { asCSSPropertyValue, asCSSUrl } from '../../../base/browser/dom.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport { getIconRegistry } from '../common/iconRegistry.js';\nexport function getIconsStyleSheet(themeService) {\n    const disposable = new DisposableStore();\n    const onDidChangeEmmiter = disposable.add(new Emitter());\n    const iconRegistry = getIconRegistry();\n    disposable.add(iconRegistry.onDidChange(() => onDidChangeEmmiter.fire()));\n    if (themeService) {\n        disposable.add(themeService.onDidProductIconThemeChange(() => onDidChangeEmmiter.fire()));\n    }\n    return {\n        dispose: () => disposable.dispose(),\n        onDidChange: onDidChangeEmmiter.event,\n        getCSS() {\n            const productIconTheme = themeService ? themeService.getProductIconTheme() : new UnthemedProductIconTheme();\n            const usedFontIds = {};\n            const rules = [];\n            const rootAttribs = [];\n            for (const contribution of iconRegistry.getIcons()) {\n                const definition = productIconTheme.getIcon(contribution);\n                if (!definition) {\n                    continue;\n                }\n                const fontContribution = definition.font;\n                const fontFamilyVar = `--vscode-icon-${contribution.id}-font-family`;\n                const contentVar = `--vscode-icon-${contribution.id}-content`;\n                if (fontContribution) {\n                    usedFontIds[fontContribution.id] = fontContribution.definition;\n                    rootAttribs.push(`${fontFamilyVar}: ${asCSSPropertyValue(fontContribution.id)};`, `${contentVar}: '${definition.fontCharacter}';`);\n                    rules.push(`.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; font-family: ${asCSSPropertyValue(fontContribution.id)}; }`);\n                }\n                else {\n                    rootAttribs.push(`${contentVar}: '${definition.fontCharacter}'; ${fontFamilyVar}: 'codicon';`);\n                    rules.push(`.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; }`);\n                }\n            }\n            for (const id in usedFontIds) {\n                const definition = usedFontIds[id];\n                const fontWeight = definition.weight ? `font-weight: ${definition.weight};` : '';\n                const fontStyle = definition.style ? `font-style: ${definition.style};` : '';\n                const src = definition.src.map(l => `${asCSSUrl(l.location)} format('${l.format}')`).join(', ');\n                rules.push(`@font-face { src: ${src}; font-family: ${asCSSPropertyValue(id)};${fontWeight}${fontStyle} font-display: block; }`);\n            }\n            rules.push(`:root { ${rootAttribs.join(' ')} }`);\n            return rules.join('\\n');\n        }\n    };\n}\nexport class UnthemedProductIconTheme {\n    getIcon(contribution) {\n        const iconRegistry = getIconRegistry();\n        let definition = contribution.defaults;\n        while (ThemeIcon.isThemeIcon(definition)) {\n            const c = iconRegistry.getIcon(definition.id);\n            if (!c) {\n                return undefined;\n            }\n            definition = c.defaults;\n        }\n        return definition;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertNever } from '../../../base/common/assert.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\n/**\n * Returns the css variable name for the given color identifier. Dots (`.`) are replaced with hyphens (`-`) and\n * everything is prefixed with `--vscode-`.\n *\n * @sample `editorSuggestWidget.background` is `--vscode-editorSuggestWidget-background`.\n */\nexport function asCssVariableName(colorIdent) {\n    return `--vscode-${colorIdent.replace(/\\./g, '-')}`;\n}\nexport function asCssVariable(color) {\n    return `var(${asCssVariableName(color)})`;\n}\nexport function asCssVariableWithDefault(color, defaultCssValue) {\n    return `var(${asCssVariableName(color)}, ${defaultCssValue})`;\n}\n// color registry\nexport const Extensions = {\n    ColorContribution: 'base.contributions.colors'\n};\nclass ColorRegistry {\n    constructor() {\n        this._onDidChangeSchema = new Emitter();\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\n        this.colorSchema = { type: 'object', properties: {} };\n        this.colorReferenceSchema = { type: 'string', enum: [], enumDescriptions: [] };\n        this.colorsById = {};\n    }\n    registerColor(id, defaults, description, needsTransparency = false, deprecationMessage) {\n        const colorContribution = { id, description, defaults, needsTransparency, deprecationMessage };\n        this.colorsById[id] = colorContribution;\n        const propertySchema = { type: 'string', description, format: 'color-hex', defaultSnippets: [{ body: '${1:#ff0000}' }] };\n        if (deprecationMessage) {\n            propertySchema.deprecationMessage = deprecationMessage;\n        }\n        if (needsTransparency) {\n            propertySchema.pattern = '^#(?:(?<rgba>[0-9a-fA-f]{3}[0-9a-eA-E])|(?:[0-9a-fA-F]{6}(?:(?![fF]{2})(?:[0-9a-fA-F]{2}))))?$';\n            propertySchema.patternErrorMessage = 'This color must be transparent or it will obscure content';\n        }\n        this.colorSchema.properties[id] = propertySchema;\n        this.colorReferenceSchema.enum.push(id);\n        this.colorReferenceSchema.enumDescriptions.push(description);\n        this._onDidChangeSchema.fire();\n        return id;\n    }\n    getColors() {\n        return Object.keys(this.colorsById).map(id => this.colorsById[id]);\n    }\n    resolveDefaultColor(id, theme) {\n        const colorDesc = this.colorsById[id];\n        if (colorDesc && colorDesc.defaults) {\n            const colorValue = colorDesc.defaults[theme.type];\n            return resolveColorValue(colorValue, theme);\n        }\n        return undefined;\n    }\n    getColorSchema() {\n        return this.colorSchema;\n    }\n    toString() {\n        const sorter = (a, b) => {\n            const cat1 = a.indexOf('.') === -1 ? 0 : 1;\n            const cat2 = b.indexOf('.') === -1 ? 0 : 1;\n            if (cat1 !== cat2) {\n                return cat1 - cat2;\n            }\n            return a.localeCompare(b);\n        };\n        return Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\n    }\n}\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n    return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n}\n// ----- color functions\nexport function executeTransform(transform, theme) {\n    var _a, _b, _c, _d;\n    switch (transform.op) {\n        case 0 /* ColorTransformType.Darken */:\n            return (_a = resolveColorValue(transform.value, theme)) === null || _a === void 0 ? void 0 : _a.darken(transform.factor);\n        case 1 /* ColorTransformType.Lighten */:\n            return (_b = resolveColorValue(transform.value, theme)) === null || _b === void 0 ? void 0 : _b.lighten(transform.factor);\n        case 2 /* ColorTransformType.Transparent */:\n            return (_c = resolveColorValue(transform.value, theme)) === null || _c === void 0 ? void 0 : _c.transparent(transform.factor);\n        case 3 /* ColorTransformType.Opaque */: {\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return resolveColorValue(transform.value, theme);\n            }\n            return (_d = resolveColorValue(transform.value, theme)) === null || _d === void 0 ? void 0 : _d.makeOpaque(backgroundColor);\n        }\n        case 4 /* ColorTransformType.OneOf */:\n            for (const candidate of transform.values) {\n                const color = resolveColorValue(candidate, theme);\n                if (color) {\n                    return color;\n                }\n            }\n            return undefined;\n        case 6 /* ColorTransformType.IfDefinedThenElse */:\n            return resolveColorValue(theme.defines(transform.if) ? transform.then : transform.else, theme);\n        case 5 /* ColorTransformType.LessProminent */: {\n            const from = resolveColorValue(transform.value, theme);\n            if (!from) {\n                return undefined;\n            }\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return from.transparent(transform.factor * transform.transparency);\n            }\n            return from.isDarkerThan(backgroundColor)\n                ? Color.getLighterColor(from, backgroundColor, transform.factor).transparent(transform.transparency)\n                : Color.getDarkerColor(from, backgroundColor, transform.factor).transparent(transform.transparency);\n        }\n        default:\n            throw assertNever(transform);\n    }\n}\nexport function darken(colorValue, factor) {\n    return { op: 0 /* ColorTransformType.Darken */, value: colorValue, factor };\n}\nexport function lighten(colorValue, factor) {\n    return { op: 1 /* ColorTransformType.Lighten */, value: colorValue, factor };\n}\nexport function transparent(colorValue, factor) {\n    return { op: 2 /* ColorTransformType.Transparent */, value: colorValue, factor };\n}\nexport function oneOf(...colorValues) {\n    return { op: 4 /* ColorTransformType.OneOf */, values: colorValues };\n}\nexport function ifDefinedThenElse(ifArg, thenArg, elseArg) {\n    return { op: 6 /* ColorTransformType.IfDefinedThenElse */, if: ifArg, then: thenArg, else: elseArg };\n}\nexport function lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n    return { op: 5 /* ColorTransformType.LessProminent */, value: colorValue, background: backgroundColorValue, factor, transparency };\n}\n// ----- implementation\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\nexport function resolveColorValue(colorValue, theme) {\n    if (colorValue === null) {\n        return undefined;\n    }\n    else if (typeof colorValue === 'string') {\n        if (colorValue[0] === '#') {\n            return Color.fromHex(colorValue);\n        }\n        return theme.getColor(colorValue);\n    }\n    else if (colorValue instanceof Color) {\n        return colorValue;\n    }\n    else if (typeof colorValue === 'object') {\n        return executeTransform(colorValue, theme);\n    }\n    return undefined;\n}\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nconst schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\ncolorRegistry.onDidChangeSchema(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\nexport const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport const disabledForeground = registerColor('disabledForeground', { dark: '#CCCCCC80', light: '#61616180', hcDark: '#A5A5A5', hcLight: '#7F7F7F' }, nls.localize('disabledForeground', \"Overall foreground for disabled elements. This color is only used if not overridden by a component.\"));\nexport const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport const descriptionForeground = registerColor('descriptionForeground', { light: '#717171', dark: transparent(foreground, 0.7), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('descriptionForeground', \"Foreground color for description text providing additional information, for example for a label.\"));\nexport const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\nexport const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hcDark: '#F38518', hcLight: '#006BBD' }, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hcDark: '#6FC3DF', hcLight: '#0F4A85' }, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport const selectionBackground = registerColor('selection.background', { light: null, dark: null, hcDark: null, hcLight: null }, nls.localize('selectionBackground', \"The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.\"));\n// ------ text link\nexport const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport const textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hcDark: '#21A6FF', hcLight: '#0F4A85' }, nls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\nexport const textSeparatorForeground = registerColor('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hcDark: Color.black, hcLight: '#292929' }, nls.localize('textSeparatorForeground', \"Color for text separators.\"));\n// ------ text preformat\nexport const textPreformatForeground = registerColor('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hcDark: '#000000', hcLight: '#FFFFFF' }, nls.localize('textPreformatForeground', \"Foreground color for preformatted text segments.\"));\nexport const textPreformatBackground = registerColor('textPreformat.background', { light: '#0000001A', dark: '#FFFFFF1A', hcDark: '#FFFFFF', hcLight: '#09345f' }, nls.localize('textPreformatBackground', \"Background color for preformatted text segments.\"));\n// ------ text block quote\nexport const textBlockQuoteBackground = registerColor('textBlockQuote.background', { light: '#f2f2f2', dark: '#222222', hcDark: null, hcLight: '#F2F2F2' }, nls.localize('textBlockQuoteBackground', \"Background color for block quotes in text.\"));\nexport const textBlockQuoteBorder = registerColor('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hcDark: Color.white, hcLight: '#292929' }, nls.localize('textBlockQuoteBorder', \"Border color for block quotes in text.\"));\n// ------ text code block\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hcDark: Color.black, hcLight: '#F2F2F2' }, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\n// Import the colors we need\nimport { contrastBorder, focusBorder } from './baseColors.js';\n// ----- sash\nexport const sashHoverBorder = registerColor('sash.hoverBorder', { dark: focusBorder, light: focusBorder, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('sashActiveBorder', \"Border color of active sashes.\"));\n// ----- badge\nexport const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hcDark: Color.black, hcLight: '#0F4A85' }, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hcDark: Color.white, hcLight: Color.white }, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\n// ----- scrollbar\nexport const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hcDark: null, hcLight: null }, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hcDark: transparent(contrastBorder, 0.6), hcLight: transparent(contrastBorder, 0.4) }, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hcDark: transparent(contrastBorder, 0.8), hcLight: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\n// ----- progress bar\nexport const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent, lessProminent, darken, lighten } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, activeContrastBorder } from './baseColors.js';\nimport { scrollbarShadow, badgeBackground } from './miscColors.js';\n// ----- editor\nexport const editorBackground = registerColor('editor.background', { light: '#ffffff', dark: '#1E1E1E', hcDark: Color.black, hcLight: Color.white }, nls.localize('editorBackground', \"Editor background color.\"));\nexport const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hcDark: Color.white, hcLight: foreground }, nls.localize('editorForeground', \"Editor default foreground color.\"));\nexport const editorStickyScrollBackground = registerColor('editorStickyScroll.background', { light: editorBackground, dark: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('editorStickyScrollBackground', \"Background color of sticky scroll in the editor\"));\nexport const editorStickyScrollHoverBackground = registerColor('editorStickyScrollHover.background', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('editorStickyScrollHoverBackground', \"Background color of sticky scroll on hover in the editor\"));\nexport const editorStickyScrollBorder = registerColor('editorStickyScroll.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorStickyScrollBorder', \"Border color of sticky scroll in the editor\"));\nexport const editorStickyScrollShadow = registerColor('editorStickyScroll.shadow', { dark: scrollbarShadow, light: scrollbarShadow, hcDark: scrollbarShadow, hcLight: scrollbarShadow }, nls.localize('editorStickyScrollShadow', \" Shadow color of sticky scroll in the editor\"));\nexport const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hcDark: '#0C141F', hcLight: Color.white }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', { light: null, dark: null, hcDark: null, hcLight: null }, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\nexport const editorErrorBackground = registerColor('editorError.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hcDark: Color.fromHex('#E47777').transparent(0.8), hcLight: '#B5200D' }, nls.localize('errorBorder', 'If set, color of double underlines for errors in the editor.'));\nexport const editorWarningBackground = registerColor('editorWarning.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hcDark: '#FFD370', hcLight: '#895503' }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hcDark: Color.fromHex('#FFCC00').transparent(0.8), hcLight: Color.fromHex('#FFCC00').transparent(0.8) }, nls.localize('warningBorder', 'If set, color of double underlines for warnings in the editor.'));\nexport const editorInfoBackground = registerColor('editorInfo.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hcDark: '#3794FF', hcLight: '#1a85ff' }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hcDark: Color.fromHex('#3794FF').transparent(0.8), hcLight: '#292929' }, nls.localize('infoBorder', 'If set, color of double underlines for infos in the editor.'));\nexport const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hcDark: null, hcLight: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hcDark: Color.fromHex('#eeeeee').transparent(0.8), hcLight: '#292929' }, nls.localize('hintBorder', 'If set, color of double underlines for hints in the editor.'));\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hcDark: Color.cyan, hcLight: '#292929' }, nls.localize('activeLinkForeground', 'Color of active links.'));\n// ----- editor selection\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hcDark: '#f3f518', hcLight: '#0F4A85' }, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hcDark: '#000000', hcLight: Color.white }, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hcDark: transparent(editorSelectionBackground, 0.7), hcLight: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hcDark: null, hcLight: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n// ----- editor find\nexport const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hcDark: null, hcLight: null }, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hcDark: null, hcLight: null }, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hcDark: null, hcLight: null }, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hcDark: transparent(activeContrastBorder, 0.4), hcLight: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n// ----- editor hover\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hcDark: '#ADD6FF26', hcLight: null }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', { light: editorWidgetForeground, dark: editorWidgetForeground, hcDark: editorWidgetForeground, hcLight: editorWidgetForeground }, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', { light: editorWidgetBorder, dark: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n// ----- editor inlay hint\nexport const editorInlayHintForeground = registerColor('editorInlayHint.foreground', { dark: '#969696', light: '#969696', hcDark: Color.white, hcLight: Color.black }, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\nexport const editorInlayHintBackground = registerColor('editorInlayHint.background', { dark: transparent(badgeBackground, .10), light: transparent(badgeBackground, .10), hcDark: transparent(Color.white, .10), hcLight: transparent(badgeBackground, .10) }, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));\nexport const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hcDark: editorInlayHintForeground, hcLight: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\nexport const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hcDark: editorInlayHintBackground, hcLight: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\nexport const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hcDark: editorInlayHintForeground, hcLight: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\nexport const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hcDark: editorInlayHintBackground, hcLight: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n// ----- editor lightbulb\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hcDark: '#FFCC00', hcLight: '#007ACC' }, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hcDark: '#75BEFF', hcLight: '#007ACC' }, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\nexport const editorLightBulbAiForeground = registerColor('editorLightBulbAi.foreground', { dark: editorLightBulbForeground, light: editorLightBulbForeground, hcDark: editorLightBulbForeground, hcLight: editorLightBulbForeground }, nls.localize('editorLightBulbAiForeground', \"The color used for the lightbulb AI icon.\"));\n// ----- editor snippet\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hcDark: new Color(new RGBA(124, 124, 124, 0.3)), hcLight: new Color(new RGBA(10, 50, 100, 0.2)) }, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hcDark: '#525252', hcLight: '#292929' }, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\n// ----- diff editor\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, .2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, .2));\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: '#9ccc2c33', light: '#9ccc2c40', hcDark: null, hcLight: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: '#ff000033', light: '#ff000033', hcDark: null, hcLight: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLine = registerColor('diffEditor.insertedLineBackground', { dark: defaultInsertColor, light: defaultInsertColor, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemovedLine = registerColor('diffEditor.removedLineBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLineGutter = registerColor('diffEditorGutter.insertedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));\nexport const diffRemovedLineGutter = registerColor('diffEditorGutter.removedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));\nexport const diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));\nexport const diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hcDark: '#33ff2eff', hcLight: '#374E06' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hcDark: '#FF008F', hcLight: '#AD0707' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hcDark: null, hcLight: null }, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\nexport const diffUnchangedRegionBackground = registerColor('diffEditor.unchangedRegionBackground', { dark: 'sideBar.background', light: 'sideBar.background', hcDark: 'sideBar.background', hcLight: 'sideBar.background' }, nls.localize('diffEditor.unchangedRegionBackground', \"The background color of unchanged blocks in the diff editor.\"));\nexport const diffUnchangedRegionForeground = registerColor('diffEditor.unchangedRegionForeground', { dark: 'foreground', light: 'foreground', hcDark: 'foreground', hcLight: 'foreground' }, nls.localize('diffEditor.unchangedRegionForeground', \"The foreground color of unchanged blocks in the diff editor.\"));\nexport const diffUnchangedTextBackground = registerColor('diffEditor.unchangedCodeBackground', { dark: '#74747429', light: '#b8b8b829', hcDark: null, hcLight: null }, nls.localize('diffEditor.unchangedCodeBackground', \"The background color of unchanged code in the diff editor.\"));\n// ----- widget\nexport const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hcDark: null, hcLight: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport const widgetBorder = registerColor('widget.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('widgetBorder', 'Border color of widgets such as find/replace inside the editor.'));\n// ----- toolbar\nexport const toolbarHoverBackground = registerColor('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\nexport const toolbarHoverOutline = registerColor('toolbar.hoverOutline', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('toolbarHoverOutline', \"Toolbar outline when hovering over actions using the mouse\"));\nexport const toolbarActiveBackground = registerColor('toolbar.activeBackground', { dark: lighten(toolbarHoverBackground, 0.1), light: darken(toolbarHoverBackground, 0.1), hcDark: null, hcLight: null }, nls.localize('toolbarActiveBackground', \"Toolbar background when holding the mouse over actions\"));\n// ----- breadcumbs\nexport const breadcrumbsForeground = registerColor('breadcrumb.foreground', { light: transparent(foreground, 0.8), dark: transparent(foreground, 0.8), hcDark: transparent(foreground, 0.8), hcLight: transparent(foreground, 0.8) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsBackground = registerColor('breadcrumb.background', { light: editorBackground, dark: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\nexport const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsSelectedForeground', \"Color of selected breadcrumb items.\"));\nexport const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n// ----- merge\nconst headerTransparency = 0.5;\nconst currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);\nconst incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparency);\nconst commonBaseColor = Color.fromHex('#606060').transparent(0.4);\nconst contentTransparency = 0.4;\nconst rulerTransparency = 1;\nexport const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', { dark: transparent(mergeCurrentHeaderBackground, contentTransparency), light: transparent(mergeCurrentHeaderBackground, contentTransparency), hcDark: transparent(mergeCurrentHeaderBackground, contentTransparency), hcLight: transparent(mergeCurrentHeaderBackground, contentTransparency) }, nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', { dark: transparent(mergeIncomingHeaderBackground, contentTransparency), light: transparent(mergeIncomingHeaderBackground, contentTransparency), hcDark: transparent(mergeIncomingHeaderBackground, contentTransparency), hcLight: transparent(mergeIncomingHeaderBackground, contentTransparency) }, nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonContentBackground = registerColor('merge.commonContentBackground', { dark: transparent(mergeCommonHeaderBackground, contentTransparency), light: transparent(mergeCommonHeaderBackground, contentTransparency), hcDark: transparent(mergeCommonHeaderBackground, contentTransparency), hcLight: transparent(mergeCommonHeaderBackground, contentTransparency) }, nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeBorder = registerColor('merge.border', { dark: null, light: null, hcDark: '#C3DF6F', hcLight: '#007ACC' }, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\nexport const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', { dark: transparent(mergeCurrentHeaderBackground, rulerTransparency), light: transparent(mergeCurrentHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', { dark: transparent(mergeIncomingHeaderBackground, rulerTransparency), light: transparent(mergeIncomingHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', { dark: transparent(mergeCommonHeaderBackground, rulerTransparency), light: transparent(mergeCommonHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hcDark: '#AB5A00', hcLight: '' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hcDark: '#A0A0A0CC', hcLight: '#A0A0A0CC' }, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\n// ----- problems\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', { dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorErrorForeground, hcLight: editorErrorForeground }, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningForeground, hcLight: editorWarningForeground }, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoForeground, hcLight: editorInfoForeground }, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\n// Import the colors we need\nimport { editorInfoForeground, editorWarningForeground, editorWarningBorder, editorInfoBorder } from './editorColors.js';\nimport { scrollbarSliderBackground, scrollbarSliderHoverBackground, scrollbarSliderActiveBackground } from './miscColors.js';\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hcDark: '#AB5A00', hcLight: '#0F4A85' }, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\nexport const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', { light: '#c9c9c9', dark: '#676767', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);\nexport const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\nexport const minimapInfo = registerColor('minimap.infoHighlight', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoBorder, hcLight: editorInfoBorder }, nls.localize('minimapInfo', 'Minimap marker color for infos.'));\nexport const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\nexport const minimapError = registerColor('minimap.errorHighlight', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('minimapError', 'Minimap marker color for errors.'));\nexport const minimapBackground = registerColor('minimap.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('minimapBackground', \"Minimap background color.\"));\nexport const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', { dark: Color.fromHex('#000f'), light: Color.fromHex('#000f'), hcDark: Color.fromHex('#000f'), hcLight: Color.fromHex('#000f') }, nls.localize('minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, \"#000000c0\" will render the elements with 75% opacity.'));\nexport const minimapSliderBackground = registerColor('minimapSlider.background', { light: transparent(scrollbarSliderBackground, 0.5), dark: transparent(scrollbarSliderBackground, 0.5), hcDark: transparent(scrollbarSliderBackground, 0.5), hcLight: transparent(scrollbarSliderBackground, 0.5) }, nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', { light: transparent(scrollbarSliderHoverBackground, 0.5), dark: transparent(scrollbarSliderHoverBackground, 0.5), hcDark: transparent(scrollbarSliderHoverBackground, 0.5), hcLight: transparent(scrollbarSliderHoverBackground, 0.5) }, nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', { light: transparent(scrollbarSliderActiveBackground, 0.5), dark: transparent(scrollbarSliderActiveBackground, 0.5), hcDark: transparent(scrollbarSliderActiveBackground, 0.5), hcLight: transparent(scrollbarSliderActiveBackground, 0.5) }, nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent, lighten, darken } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, focusBorder, iconForeground } from './baseColors.js';\nimport { editorWidgetBackground } from './editorColors.js';\n// ----- input\nexport const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC', light: '#007ACC', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', { dark: '#5a5d5e80', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('inputOption.hoverBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('inputOption.activeBackground', \"Background hover color of options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hcDark: foreground, hcLight: foreground }, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: transparent(foreground, 0.5), dark: transparent(foreground, 0.5), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\n// ----- input validation\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\n// ----- select\nexport const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownListBackground', \"Dropdown list background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: foreground, hcDark: Color.white, hcLight: foreground }, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('dropdownBorder', \"Dropdown border.\"));\n// ------ button\nexport const buttonForeground = registerColor('button.foreground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: Color.white }, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonSeparator = registerColor('button.separator', { dark: transparent(buttonForeground, .4), light: transparent(buttonForeground, .4), hcDark: transparent(buttonForeground, .4), hcLight: transparent(buttonForeground, .4) }, nls.localize('buttonSeparator', \"Button separator color.\"));\nexport const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hcDark: null, hcLight: '#0F4A85' }, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hcDark: buttonBackground, hcLight: buttonBackground }, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const buttonBorder = registerColor('button.border', { dark: contrastBorder, light: contrastBorder, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('buttonBorder', \"Button border color.\"));\nexport const buttonSecondaryForeground = registerColor('button.secondaryForeground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: foreground }, nls.localize('buttonSecondaryForeground', \"Secondary button foreground color.\"));\nexport const buttonSecondaryBackground = registerColor('button.secondaryBackground', { dark: '#3A3D41', light: '#5F6A79', hcDark: null, hcLight: Color.white }, nls.localize('buttonSecondaryBackground', \"Secondary button background color.\"));\nexport const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', { dark: lighten(buttonSecondaryBackground, 0.2), light: darken(buttonSecondaryBackground, 0.2), hcDark: null, hcLight: null }, nls.localize('buttonSecondaryHoverBackground', \"Secondary button background color when hovering.\"));\n// ------ checkbox\nexport const checkboxBackground = registerColor('checkbox.background', { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, nls.localize('checkbox.background', \"Background color of checkbox widget.\"));\nexport const checkboxSelectBackground = registerColor('checkbox.selectBackground', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('checkbox.select.background', \"Background color of checkbox widget when the element it's in is selected.\"));\nexport const checkboxForeground = registerColor('checkbox.foreground', { dark: selectForeground, light: selectForeground, hcDark: selectForeground, hcLight: selectForeground }, nls.localize('checkbox.foreground', \"Foreground color of checkbox widget.\"));\nexport const checkboxBorder = registerColor('checkbox.border', { dark: selectBorder, light: selectBorder, hcDark: selectBorder, hcLight: selectBorder }, nls.localize('checkbox.border', \"Border color of checkbox widget.\"));\nexport const checkboxSelectBorder = registerColor('checkbox.selectBorder', { dark: iconForeground, light: iconForeground, hcDark: iconForeground, hcLight: iconForeground }, nls.localize('checkbox.select.border', \"Border color of checkbox widget when the element it's in is selected.\"));\n// ------ keybinding label\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: new Color(new RGBA(128, 128, 128, 0.17)), light: new Color(new RGBA(221, 221, 221, 0.4)), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: Color.fromHex('#CCCCCC'), light: Color.fromHex('#555555'), hcDark: Color.white, hcLight: foreground }, nls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: new Color(new RGBA(51, 51, 51, 0.6)), light: new Color(new RGBA(204, 204, 204, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: contrastBorder }, nls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: new Color(new RGBA(68, 68, 68, 0.6)), light: new Color(new RGBA(187, 187, 187, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: foreground }, nls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\nimport { registerColor, transparent } from '../colorUtils.js';\nimport { foreground } from './baseColors.js';\nimport { editorErrorForeground, editorInfoForeground, editorWarningForeground } from './editorColors.js';\nimport { minimapFindMatch } from './minimapColors.js';\nexport const chartsForeground = registerColor('charts.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('chartsForeground', \"The foreground color used in charts.\"));\nexport const chartsLines = registerColor('charts.lines', { dark: transparent(foreground, .5), light: transparent(foreground, .5), hcDark: transparent(foreground, .5), hcLight: transparent(foreground, .5) }, nls.localize('chartsLines', \"The color used for horizontal lines in charts.\"));\nexport const chartsRed = registerColor('charts.red', { dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorErrorForeground, hcLight: editorErrorForeground }, nls.localize('chartsRed', \"The red color used in chart visualizations.\"));\nexport const chartsBlue = registerColor('charts.blue', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoForeground, hcLight: editorInfoForeground }, nls.localize('chartsBlue', \"The blue color used in chart visualizations.\"));\nexport const chartsYellow = registerColor('charts.yellow', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningForeground, hcLight: editorWarningForeground }, nls.localize('chartsYellow', \"The yellow color used in chart visualizations.\"));\nexport const chartsOrange = registerColor('charts.orange', { dark: minimapFindMatch, light: minimapFindMatch, hcDark: minimapFindMatch, hcLight: minimapFindMatch }, nls.localize('chartsOrange', \"The orange color used in chart visualizations.\"));\nexport const chartsGreen = registerColor('charts.green', { dark: '#89D185', light: '#388A34', hcDark: '#89D185', hcLight: '#374e06' }, nls.localize('chartsGreen', \"The green color used in chart visualizations.\"));\nexport const chartsPurple = registerColor('charts.purple', { dark: '#B180D7', light: '#652D90', hcDark: '#B180D7', hcLight: '#652D90' }, nls.localize('chartsPurple', \"The purple color used in chart visualizations.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, darken, lighten, transparent, ifDefinedThenElse } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, activeContrastBorder, focusBorder, iconForeground } from './baseColors.js';\nimport { editorWidgetBackground, editorFindMatchHighlightBorder, editorFindMatchHighlight, widgetShadow } from './editorColors.js';\nexport const listFocusBackground = registerColor('list.focusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusForeground = registerColor('list.focusForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusOutline = registerColor('list.focusOutline', { dark: focusBorder, light: focusBorder, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('listFocusOutline', \"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusAndSelectionOutline = registerColor('list.focusAndSelectionOutline', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusAndSelectionOutline', \"List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveFocusOutline', \"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: Color.white.transparent(0.1), hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport const listHoverForeground = registerColor('list.hoverForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport const listDropOverBackground = registerColor('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null }, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items over other items when using the mouse.\"));\nexport const listDropBetweenBackground = registerColor('list.dropBetweenBackground', { dark: iconForeground, light: iconForeground, hcDark: null, hcLight: null }, nls.localize('listDropBetweenBackground', \"List/Tree drag and drop border color when moving items between items when using the mouse.\"));\nexport const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#2AAAFF', light: '#0066BF', hcDark: focusBorder, hcLight: focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', { dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#BBE7FF'), hcDark: listHighlightForeground, hcLight: listHighlightForeground }, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));\nexport const listInvalidItemForeground = registerColor('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' }, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));\nexport const listErrorForeground = registerColor('list.errorForeground', { dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));\nexport const listWarningForeground = registerColor('list.warningForeground', { dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: darken(editorWidgetBackground, 0), dark: lighten(editorWidgetBackground, 0), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport const listFilterWidgetShadow = registerColor('listFilterWidget.shadow', { dark: widgetShadow, light: widgetShadow, hcDark: widgetShadow, hcLight: widgetShadow }, nls.localize('listFilterWidgetShadow', 'Shadow color of the type filter widget in lists and trees.'));\nexport const listFilterMatchHighlight = registerColor('list.filterMatchBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));\nexport const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder', { dark: editorFindMatchHighlightBorder, light: editorFindMatchHighlightBorder, hcDark: contrastBorder, hcLight: activeContrastBorder }, nls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));\nexport const listDeemphasizedForeground = registerColor('list.deemphasizedForeground', { dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' }, nls.localize('listDeemphasizedForeground', \"List/Tree foreground color for items that are deemphasized.\"));\n// ------ tree\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' }, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\nexport const treeInactiveIndentGuidesStroke = registerColor('tree.inactiveIndentGuidesStroke', { dark: transparent(treeIndentGuidesStroke, 0.4), light: transparent(treeIndentGuidesStroke, 0.4), hcDark: transparent(treeIndentGuidesStroke, 0.4), hcLight: transparent(treeIndentGuidesStroke, 0.4) }, nls.localize('treeInactiveIndentGuidesStroke', \"Tree stroke color for the indentation guides that are not active.\"));\n// ------ table\nexport const tableColumnsBorder = registerColor('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null }, nls.localize('tableColumnsBorder', \"Table border color between columns.\"));\nexport const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground', { dark: transparent(foreground, 0.04), light: transparent(foreground, 0.04), hcDark: null, hcLight: null }, nls.localize('tableOddRowsBackgroundColor', \"Background color for odd table rows.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { registerColor } from '../colorUtils.js';\n// Import the colors we need\nimport { contrastBorder, activeContrastBorder } from './baseColors.js';\nimport { selectForeground, selectBackground } from './inputColors.js';\nimport { listActiveSelectionBackground, listActiveSelectionForeground } from './listColors.js';\nexport const menuBorder = registerColor('menu.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuBorder', \"Border color of menus.\"));\nexport const menuForeground = registerColor('menu.foreground', { dark: selectForeground, light: selectForeground, hcDark: selectForeground, hcLight: selectForeground }, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport const menuBackground = registerColor('menu.background', { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hcDark: listActiveSelectionForeground, hcLight: listActiveSelectionForeground }, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', { dark: listActiveSelectionBackground, light: listActiveSelectionBackground, hcDark: listActiveSelectionBackground, hcLight: listActiveSelectionBackground }, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#606060', light: '#D4D4D4', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, oneOf } from '../colorUtils.js';\n// Import the colors we need\nimport { editorWidgetBackground, editorWidgetForeground } from './editorColors.js';\nimport { listActiveSelectionBackground, listActiveSelectionForeground, listActiveSelectionIconForeground } from './listColors.js';\nexport const quickInputBackground = registerColor('quickInput.background', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputForeground = registerColor('quickInput.foreground', { dark: editorWidgetForeground, light: editorWidgetForeground, hcDark: editorWidgetForeground, hcLight: editorWidgetForeground }, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: new Color(new RGBA(255, 255, 255, 0.105)), light: new Color(new RGBA(0, 0, 0, 0.06)), hcDark: '#000000', hcLight: Color.white }, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\nexport const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, '', undefined, nls.localize('quickInput.list.focusBackground deprecation', \"Please use quickInputList.focusBackground instead\"));\nexport const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hcDark: listActiveSelectionForeground, hcLight: listActiveSelectionForeground }, nls.localize('quickInput.listFocusForeground', \"Quick picker foreground color for the focused item.\"));\nexport const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', { dark: listActiveSelectionIconForeground, light: listActiveSelectionIconForeground, hcDark: listActiveSelectionIconForeground, hcLight: listActiveSelectionIconForeground }, nls.localize('quickInput.listFocusIconForeground', \"Quick picker icon foreground color for the focused item.\"));\nexport const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', { dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), hcDark: null, hcLight: null }, nls.localize('quickInput.listFocusBackground', \"Quick picker background color for the focused item.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { registerColor, transparent } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground } from './baseColors.js';\nimport { editorFindMatchHighlight, editorFindMatchHighlightBorder } from './editorColors.js';\nexport const searchResultsInfoForeground = registerColor('search.resultsInfoForeground', { light: foreground, dark: transparent(foreground, 0.65), hcDark: foreground, hcLight: foreground }, nls.localize('search.resultsInfoForeground', \"Color of the text in the search viewlet's completion message.\"));\n// ----- search editor (Distinct from normal editor find match to allow for better differentiation)\nexport const searchEditorFindMatch = registerColor('searchEditor.findMatchBackground', { light: transparent(editorFindMatchHighlight, 0.66), dark: transparent(editorFindMatchHighlight, 0.66), hcDark: editorFindMatchHighlight, hcLight: editorFindMatchHighlight }, nls.localize('searchEditor.queryMatch', \"Color of the Search Editor query matches.\"));\nexport const searchEditorFindMatchBorder = registerColor('searchEditor.findMatchBorder', { light: transparent(editorFindMatchHighlightBorder, 0.66), dark: transparent(editorFindMatchHighlightBorder, 0.66), hcDark: editorFindMatchHighlightBorder, hcLight: editorFindMatchHighlightBorder }, nls.localize('searchEditor.editorFindMatchBorder', \"Border color of the Search Editor query matches.\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Codicon } from '../../../base/common/codicons.js';\nimport { getCodiconFontCharacters } from '../../../base/common/codiconsUtil.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { isString } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\n//  ------ API types\n// icon registry\nexport const Extensions = {\n    IconContribution: 'base.contributions.icons'\n};\nexport var IconContribution;\n(function (IconContribution) {\n    function getDefinition(contribution, registry) {\n        let definition = contribution.defaults;\n        while (ThemeIcon.isThemeIcon(definition)) {\n            const c = iconRegistry.getIcon(definition.id);\n            if (!c) {\n                return undefined;\n            }\n            definition = c.defaults;\n        }\n        return definition;\n    }\n    IconContribution.getDefinition = getDefinition;\n})(IconContribution || (IconContribution = {}));\nexport var IconFontDefinition;\n(function (IconFontDefinition) {\n    function toJSONObject(iconFont) {\n        return {\n            weight: iconFont.weight,\n            style: iconFont.style,\n            src: iconFont.src.map(s => ({ format: s.format, location: s.location.toString() }))\n        };\n    }\n    IconFontDefinition.toJSONObject = toJSONObject;\n    function fromJSONObject(json) {\n        const stringOrUndef = (s) => isString(s) ? s : undefined;\n        if (json && Array.isArray(json.src) && json.src.every((s) => isString(s.format) && isString(s.location))) {\n            return {\n                weight: stringOrUndef(json.weight),\n                style: stringOrUndef(json.style),\n                src: json.src.map((s) => ({ format: s.format, location: URI.parse(s.location) }))\n            };\n        }\n        return undefined;\n    }\n    IconFontDefinition.fromJSONObject = fromJSONObject;\n})(IconFontDefinition || (IconFontDefinition = {}));\nclass IconRegistry {\n    constructor() {\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this.iconSchema = {\n            definitions: {\n                icons: {\n                    type: 'object',\n                    properties: {\n                        fontId: { type: 'string', description: localize('iconDefinition.fontId', 'The id of the font to use. If not set, the font that is defined first is used.') },\n                        fontCharacter: { type: 'string', description: localize('iconDefinition.fontCharacter', 'The font character associated with the icon definition.') }\n                    },\n                    additionalProperties: false,\n                    defaultSnippets: [{ body: { fontCharacter: '\\\\\\\\e030' } }]\n                }\n            },\n            type: 'object',\n            properties: {}\n        };\n        this.iconReferenceSchema = { type: 'string', pattern: `^${ThemeIcon.iconNameExpression}$`, enum: [], enumDescriptions: [] };\n        this.iconsById = {};\n        this.iconFontsById = {};\n    }\n    registerIcon(id, defaults, description, deprecationMessage) {\n        const existing = this.iconsById[id];\n        if (existing) {\n            if (description && !existing.description) {\n                existing.description = description;\n                this.iconSchema.properties[id].markdownDescription = `${description} $(${id})`;\n                const enumIndex = this.iconReferenceSchema.enum.indexOf(id);\n                if (enumIndex !== -1) {\n                    this.iconReferenceSchema.enumDescriptions[enumIndex] = description;\n                }\n                this._onDidChange.fire();\n            }\n            return existing;\n        }\n        const iconContribution = { id, description, defaults, deprecationMessage };\n        this.iconsById[id] = iconContribution;\n        const propertySchema = { $ref: '#/definitions/icons' };\n        if (deprecationMessage) {\n            propertySchema.deprecationMessage = deprecationMessage;\n        }\n        if (description) {\n            propertySchema.markdownDescription = `${description}: $(${id})`;\n        }\n        this.iconSchema.properties[id] = propertySchema;\n        this.iconReferenceSchema.enum.push(id);\n        this.iconReferenceSchema.enumDescriptions.push(description || '');\n        this._onDidChange.fire();\n        return { id };\n    }\n    getIcons() {\n        return Object.keys(this.iconsById).map(id => this.iconsById[id]);\n    }\n    getIcon(id) {\n        return this.iconsById[id];\n    }\n    getIconSchema() {\n        return this.iconSchema;\n    }\n    toString() {\n        const sorter = (i1, i2) => {\n            return i1.id.localeCompare(i2.id);\n        };\n        const classNames = (i) => {\n            while (ThemeIcon.isThemeIcon(i.defaults)) {\n                i = this.iconsById[i.defaults.id];\n            }\n            return `codicon codicon-${i ? i.id : ''}`;\n        };\n        const reference = [];\n        reference.push(`| preview     | identifier                        | default codicon ID                | description`);\n        reference.push(`| ----------- | --------------------------------- | --------------------------------- | --------------------------------- |`);\n        const contributions = Object.keys(this.iconsById).map(key => this.iconsById[key]);\n        for (const i of contributions.filter(i => !!i.description).sort(sorter)) {\n            reference.push(`|<i class=\"${classNames(i)}\"></i>|${i.id}|${ThemeIcon.isThemeIcon(i.defaults) ? i.defaults.id : i.id}|${i.description || ''}|`);\n        }\n        reference.push(`| preview     | identifier                        `);\n        reference.push(`| ----------- | --------------------------------- |`);\n        for (const i of contributions.filter(i => !ThemeIcon.isThemeIcon(i.defaults)).sort(sorter)) {\n            reference.push(`|<i class=\"${classNames(i)}\"></i>|${i.id}|`);\n        }\n        return reference.join('\\n');\n    }\n}\nconst iconRegistry = new IconRegistry();\nplatform.Registry.add(Extensions.IconContribution, iconRegistry);\nexport function registerIcon(id, defaults, description, deprecationMessage) {\n    return iconRegistry.registerIcon(id, defaults, description, deprecationMessage);\n}\nexport function getIconRegistry() {\n    return iconRegistry;\n}\nfunction initialize() {\n    const codiconFontCharacters = getCodiconFontCharacters();\n    for (const icon in codiconFontCharacters) {\n        const fontCharacter = '\\\\' + codiconFontCharacters[icon].toString(16);\n        iconRegistry.registerIcon(icon, { fontCharacter });\n    }\n}\ninitialize();\nexport const iconsSchemaId = 'vscode://schemas/icons';\nconst schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(iconsSchemaId, iconRegistry.getIconSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(iconsSchemaId), 200);\niconRegistry.onDidChange(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n//setTimeout(_ => console.log(iconRegistry.toString()), 5000);\n// common icons\nexport const widgetClose = registerIcon('widget-close', Codicon.close, localize('widgetClose', 'Icon for the close action in widgets.'));\nexport const gotoPreviousLocation = registerIcon('goto-previous-location', Codicon.arrowUp, localize('previousChangeIcon', 'Icon for goto previous editor location.'));\nexport const gotoNextLocation = registerIcon('goto-next-location', Codicon.arrowDown, localize('nextChangeIcon', 'Icon for goto next editor location.'));\nexport const syncing = ThemeIcon.modify(Codicon.sync, 'spin');\nexport const spinningLoading = ThemeIcon.modify(Codicon.loading, 'spin');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Color scheme used by the OS and by color themes.\n */\nexport var ColorScheme;\n(function (ColorScheme) {\n    ColorScheme[\"DARK\"] = \"dark\";\n    ColorScheme[\"LIGHT\"] = \"light\";\n    ColorScheme[\"HIGH_CONTRAST_DARK\"] = \"hcDark\";\n    ColorScheme[\"HIGH_CONTRAST_LIGHT\"] = \"hcLight\";\n})(ColorScheme || (ColorScheme = {}));\nexport function isHighContrast(scheme) {\n    return scheme === ColorScheme.HIGH_CONTRAST_DARK || scheme === ColorScheme.HIGH_CONTRAST_LIGHT;\n}\nexport function isDark(scheme) {\n    return scheme === ColorScheme.DARK || scheme === ColorScheme.HIGH_CONTRAST_DARK;\n}\n","import { Emitter } from '../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport * as platform from '../../registry/common/platform.js';\nimport { ColorScheme } from './theme.js';\nexport const IThemeService = createDecorator('themeService');\nexport function themeColorFromId(id) {\n    return { id };\n}\nexport function getThemeTypeSelector(type) {\n    switch (type) {\n        case ColorScheme.DARK: return 'vs-dark';\n        case ColorScheme.HIGH_CONTRAST_DARK: return 'hc-black';\n        case ColorScheme.HIGH_CONTRAST_LIGHT: return 'hc-light';\n        default: return 'vs';\n    }\n}\n// static theming participant\nexport const Extensions = {\n    ThemingContribution: 'base.contributions.theming'\n};\nclass ThemingRegistry {\n    constructor() {\n        this.themingParticipants = [];\n        this.themingParticipants = [];\n        this.onThemingParticipantAddedEmitter = new Emitter();\n    }\n    onColorThemeChange(participant) {\n        this.themingParticipants.push(participant);\n        this.onThemingParticipantAddedEmitter.fire(participant);\n        return toDisposable(() => {\n            const idx = this.themingParticipants.indexOf(participant);\n            this.themingParticipants.splice(idx, 1);\n        });\n    }\n    getThemingParticipants() {\n        return this.themingParticipants;\n    }\n}\nconst themingRegistry = new ThemingRegistry();\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\nexport function registerThemingParticipant(participant) {\n    return themingRegistry.onColorThemeChange(participant);\n}\n/**\n * Utility base class for all themable components.\n */\nexport class Themable extends Disposable {\n    constructor(themeService) {\n        super();\n        this.themeService = themeService;\n        this.theme = themeService.getColorTheme();\n        // Hook up to theme changes\n        this._register(this.themeService.onDidColorThemeChange(theme => this.onThemeChange(theme)));\n    }\n    onThemeChange(theme) {\n        this.theme = theme;\n        this.updateStyles();\n    }\n    updateStyles() {\n        // Subclasses to override\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IUndoRedoService = createDecorator('undoRedoService');\nexport class ResourceEditStackSnapshot {\n    constructor(resource, elements) {\n        this.resource = resource;\n        this.elements = elements;\n    }\n}\nexport class UndoRedoGroup {\n    constructor() {\n        this.id = UndoRedoGroup._ID++;\n        this.order = 1;\n    }\n    nextOrder() {\n        if (this.id === 0) {\n            return 0;\n        }\n        return this.order++;\n    }\n}\nUndoRedoGroup._ID = 0;\nUndoRedoGroup.None = new UndoRedoGroup();\nexport class UndoRedoSource {\n    constructor() {\n        this.id = UndoRedoSource._ID++;\n        this.order = 1;\n    }\n    nextOrder() {\n        if (this.id === 0) {\n            return 0;\n        }\n        return this.order++;\n    }\n}\nUndoRedoSource._ID = 0;\nUndoRedoSource.None = new UndoRedoSource();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Disposable, isDisposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport Severity from '../../../base/common/severity.js';\nimport * as nls from '../../../nls.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { registerSingleton } from '../../instantiation/common/extensions.js';\nimport { INotificationService } from '../../notification/common/notification.js';\nimport { IUndoRedoService, ResourceEditStackSnapshot, UndoRedoGroup, UndoRedoSource } from './undoRedo.js';\nconst DEBUG = false;\nfunction getResourceLabel(resource) {\n    return resource.scheme === Schemas.file ? resource.fsPath : resource.path;\n}\nlet stackElementCounter = 0;\nclass ResourceStackElement {\n    constructor(actual, resourceLabel, strResource, groupId, groupOrder, sourceId, sourceOrder) {\n        this.id = (++stackElementCounter);\n        this.type = 0 /* UndoRedoElementType.Resource */;\n        this.actual = actual;\n        this.label = actual.label;\n        this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n        this.resourceLabel = resourceLabel;\n        this.strResource = strResource;\n        this.resourceLabels = [this.resourceLabel];\n        this.strResources = [this.strResource];\n        this.groupId = groupId;\n        this.groupOrder = groupOrder;\n        this.sourceId = sourceId;\n        this.sourceOrder = sourceOrder;\n        this.isValid = true;\n    }\n    setValid(isValid) {\n        this.isValid = isValid;\n    }\n    toString() {\n        return `[id:${this.id}] [group:${this.groupId}] [${this.isValid ? '  VALID' : 'INVALID'}] ${this.actual.constructor.name} - ${this.actual}`;\n    }\n}\nclass ResourceReasonPair {\n    constructor(resourceLabel, reason) {\n        this.resourceLabel = resourceLabel;\n        this.reason = reason;\n    }\n}\nclass RemovedResources {\n    constructor() {\n        this.elements = new Map();\n    }\n    createMessage() {\n        const externalRemoval = [];\n        const noParallelUniverses = [];\n        for (const [, element] of this.elements) {\n            const dest = (element.reason === 0 /* RemovedResourceReason.ExternalRemoval */\n                ? externalRemoval\n                : noParallelUniverses);\n            dest.push(element.resourceLabel);\n        }\n        const messages = [];\n        if (externalRemoval.length > 0) {\n            messages.push(nls.localize({ key: 'externalRemoval', comment: ['{0} is a list of filenames'] }, \"The following files have been closed and modified on disk: {0}.\", externalRemoval.join(', ')));\n        }\n        if (noParallelUniverses.length > 0) {\n            messages.push(nls.localize({ key: 'noParallelUniverses', comment: ['{0} is a list of filenames'] }, \"The following files have been modified in an incompatible way: {0}.\", noParallelUniverses.join(', ')));\n        }\n        return messages.join('\\n');\n    }\n    get size() {\n        return this.elements.size;\n    }\n    has(strResource) {\n        return this.elements.has(strResource);\n    }\n    set(strResource, value) {\n        this.elements.set(strResource, value);\n    }\n    delete(strResource) {\n        return this.elements.delete(strResource);\n    }\n}\nclass WorkspaceStackElement {\n    constructor(actual, resourceLabels, strResources, groupId, groupOrder, sourceId, sourceOrder) {\n        this.id = (++stackElementCounter);\n        this.type = 1 /* UndoRedoElementType.Workspace */;\n        this.actual = actual;\n        this.label = actual.label;\n        this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n        this.resourceLabels = resourceLabels;\n        this.strResources = strResources;\n        this.groupId = groupId;\n        this.groupOrder = groupOrder;\n        this.sourceId = sourceId;\n        this.sourceOrder = sourceOrder;\n        this.removedResources = null;\n        this.invalidatedResources = null;\n    }\n    canSplit() {\n        return (typeof this.actual.split === 'function');\n    }\n    removeResource(resourceLabel, strResource, reason) {\n        if (!this.removedResources) {\n            this.removedResources = new RemovedResources();\n        }\n        if (!this.removedResources.has(strResource)) {\n            this.removedResources.set(strResource, new ResourceReasonPair(resourceLabel, reason));\n        }\n    }\n    setValid(resourceLabel, strResource, isValid) {\n        if (isValid) {\n            if (this.invalidatedResources) {\n                this.invalidatedResources.delete(strResource);\n                if (this.invalidatedResources.size === 0) {\n                    this.invalidatedResources = null;\n                }\n            }\n        }\n        else {\n            if (!this.invalidatedResources) {\n                this.invalidatedResources = new RemovedResources();\n            }\n            if (!this.invalidatedResources.has(strResource)) {\n                this.invalidatedResources.set(strResource, new ResourceReasonPair(resourceLabel, 0 /* RemovedResourceReason.ExternalRemoval */));\n            }\n        }\n    }\n    toString() {\n        return `[id:${this.id}] [group:${this.groupId}] [${this.invalidatedResources ? 'INVALID' : '  VALID'}] ${this.actual.constructor.name} - ${this.actual}`;\n    }\n}\nclass ResourceEditStack {\n    constructor(resourceLabel, strResource) {\n        this.resourceLabel = resourceLabel;\n        this.strResource = strResource;\n        this._past = [];\n        this._future = [];\n        this.locked = false;\n        this.versionId = 1;\n    }\n    dispose() {\n        for (const element of this._past) {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        for (const element of this._future) {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        this.versionId++;\n    }\n    toString() {\n        const result = [];\n        result.push(`* ${this.strResource}:`);\n        for (let i = 0; i < this._past.length; i++) {\n            result.push(`   * [UNDO] ${this._past[i]}`);\n        }\n        for (let i = this._future.length - 1; i >= 0; i--) {\n            result.push(`   * [REDO] ${this._future[i]}`);\n        }\n        return result.join('\\n');\n    }\n    flushAllElements() {\n        this._past = [];\n        this._future = [];\n        this.versionId++;\n    }\n    _setElementValidFlag(element, isValid) {\n        if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n            element.setValid(this.resourceLabel, this.strResource, isValid);\n        }\n        else {\n            element.setValid(isValid);\n        }\n    }\n    setElementsValidFlag(isValid, filter) {\n        for (const element of this._past) {\n            if (filter(element.actual)) {\n                this._setElementValidFlag(element, isValid);\n            }\n        }\n        for (const element of this._future) {\n            if (filter(element.actual)) {\n                this._setElementValidFlag(element, isValid);\n            }\n        }\n    }\n    pushElement(element) {\n        // remove the future\n        for (const futureElement of this._future) {\n            if (futureElement.type === 1 /* UndoRedoElementType.Workspace */) {\n                futureElement.removeResource(this.resourceLabel, this.strResource, 1 /* RemovedResourceReason.NoParallelUniverses */);\n            }\n        }\n        this._future = [];\n        this._past.push(element);\n        this.versionId++;\n    }\n    createSnapshot(resource) {\n        const elements = [];\n        for (let i = 0, len = this._past.length; i < len; i++) {\n            elements.push(this._past[i].id);\n        }\n        for (let i = this._future.length - 1; i >= 0; i--) {\n            elements.push(this._future[i].id);\n        }\n        return new ResourceEditStackSnapshot(resource, elements);\n    }\n    restoreSnapshot(snapshot) {\n        const snapshotLength = snapshot.elements.length;\n        let isOK = true;\n        let snapshotIndex = 0;\n        let removePastAfter = -1;\n        for (let i = 0, len = this._past.length; i < len; i++, snapshotIndex++) {\n            const element = this._past[i];\n            if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n                isOK = false;\n                removePastAfter = 0;\n            }\n            if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        let removeFutureBefore = -1;\n        for (let i = this._future.length - 1; i >= 0; i--, snapshotIndex++) {\n            const element = this._future[i];\n            if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n                isOK = false;\n                removeFutureBefore = i;\n            }\n            if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        if (removePastAfter !== -1) {\n            this._past = this._past.slice(0, removePastAfter);\n        }\n        if (removeFutureBefore !== -1) {\n            this._future = this._future.slice(removeFutureBefore + 1);\n        }\n        this.versionId++;\n    }\n    getElements() {\n        const past = [];\n        const future = [];\n        for (const element of this._past) {\n            past.push(element.actual);\n        }\n        for (const element of this._future) {\n            future.push(element.actual);\n        }\n        return { past, future };\n    }\n    getClosestPastElement() {\n        if (this._past.length === 0) {\n            return null;\n        }\n        return this._past[this._past.length - 1];\n    }\n    getSecondClosestPastElement() {\n        if (this._past.length < 2) {\n            return null;\n        }\n        return this._past[this._past.length - 2];\n    }\n    getClosestFutureElement() {\n        if (this._future.length === 0) {\n            return null;\n        }\n        return this._future[this._future.length - 1];\n    }\n    hasPastElements() {\n        return (this._past.length > 0);\n    }\n    hasFutureElements() {\n        return (this._future.length > 0);\n    }\n    splitPastWorkspaceElement(toRemove, individualMap) {\n        for (let j = this._past.length - 1; j >= 0; j--) {\n            if (this._past[j] === toRemove) {\n                if (individualMap.has(this.strResource)) {\n                    // gets replaced\n                    this._past[j] = individualMap.get(this.strResource);\n                }\n                else {\n                    // gets deleted\n                    this._past.splice(j, 1);\n                }\n                break;\n            }\n        }\n        this.versionId++;\n    }\n    splitFutureWorkspaceElement(toRemove, individualMap) {\n        for (let j = this._future.length - 1; j >= 0; j--) {\n            if (this._future[j] === toRemove) {\n                if (individualMap.has(this.strResource)) {\n                    // gets replaced\n                    this._future[j] = individualMap.get(this.strResource);\n                }\n                else {\n                    // gets deleted\n                    this._future.splice(j, 1);\n                }\n                break;\n            }\n        }\n        this.versionId++;\n    }\n    moveBackward(element) {\n        this._past.pop();\n        this._future.push(element);\n        this.versionId++;\n    }\n    moveForward(element) {\n        this._future.pop();\n        this._past.push(element);\n        this.versionId++;\n    }\n}\nclass EditStackSnapshot {\n    constructor(editStacks) {\n        this.editStacks = editStacks;\n        this._versionIds = [];\n        for (let i = 0, len = this.editStacks.length; i < len; i++) {\n            this._versionIds[i] = this.editStacks[i].versionId;\n        }\n    }\n    isValid() {\n        for (let i = 0, len = this.editStacks.length; i < len; i++) {\n            if (this._versionIds[i] !== this.editStacks[i].versionId) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nconst missingEditStack = new ResourceEditStack('', '');\nmissingEditStack.locked = true;\nlet UndoRedoService = class UndoRedoService {\n    constructor(_dialogService, _notificationService) {\n        this._dialogService = _dialogService;\n        this._notificationService = _notificationService;\n        this._editStacks = new Map();\n        this._uriComparisonKeyComputers = [];\n    }\n    getUriComparisonKey(resource) {\n        for (const uriComparisonKeyComputer of this._uriComparisonKeyComputers) {\n            if (uriComparisonKeyComputer[0] === resource.scheme) {\n                return uriComparisonKeyComputer[1].getComparisonKey(resource);\n            }\n        }\n        return resource.toString();\n    }\n    _print(label) {\n        console.log(`------------------------------------`);\n        console.log(`AFTER ${label}: `);\n        const str = [];\n        for (const element of this._editStacks) {\n            str.push(element[1].toString());\n        }\n        console.log(str.join('\\n'));\n    }\n    pushElement(element, group = UndoRedoGroup.None, source = UndoRedoSource.None) {\n        if (element.type === 0 /* UndoRedoElementType.Resource */) {\n            const resourceLabel = getResourceLabel(element.resource);\n            const strResource = this.getUriComparisonKey(element.resource);\n            this._pushElement(new ResourceStackElement(element, resourceLabel, strResource, group.id, group.nextOrder(), source.id, source.nextOrder()));\n        }\n        else {\n            const seen = new Set();\n            const resourceLabels = [];\n            const strResources = [];\n            for (const resource of element.resources) {\n                const resourceLabel = getResourceLabel(resource);\n                const strResource = this.getUriComparisonKey(resource);\n                if (seen.has(strResource)) {\n                    continue;\n                }\n                seen.add(strResource);\n                resourceLabels.push(resourceLabel);\n                strResources.push(strResource);\n            }\n            if (resourceLabels.length === 1) {\n                this._pushElement(new ResourceStackElement(element, resourceLabels[0], strResources[0], group.id, group.nextOrder(), source.id, source.nextOrder()));\n            }\n            else {\n                this._pushElement(new WorkspaceStackElement(element, resourceLabels, strResources, group.id, group.nextOrder(), source.id, source.nextOrder()));\n            }\n        }\n        if (DEBUG) {\n            this._print('pushElement');\n        }\n    }\n    _pushElement(element) {\n        for (let i = 0, len = element.strResources.length; i < len; i++) {\n            const resourceLabel = element.resourceLabels[i];\n            const strResource = element.strResources[i];\n            let editStack;\n            if (this._editStacks.has(strResource)) {\n                editStack = this._editStacks.get(strResource);\n            }\n            else {\n                editStack = new ResourceEditStack(resourceLabel, strResource);\n                this._editStacks.set(strResource, editStack);\n            }\n            editStack.pushElement(element);\n        }\n    }\n    getLastElement(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            if (editStack.hasFutureElements()) {\n                return null;\n            }\n            const closestPastElement = editStack.getClosestPastElement();\n            return closestPastElement ? closestPastElement.actual : null;\n        }\n        return null;\n    }\n    _splitPastWorkspaceElement(toRemove, ignoreResources) {\n        const individualArr = toRemove.actual.split();\n        const individualMap = new Map();\n        for (const _element of individualArr) {\n            const resourceLabel = getResourceLabel(_element.resource);\n            const strResource = this.getUriComparisonKey(_element.resource);\n            const element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n            individualMap.set(element.strResource, element);\n        }\n        for (const strResource of toRemove.strResources) {\n            if (ignoreResources && ignoreResources.has(strResource)) {\n                continue;\n            }\n            const editStack = this._editStacks.get(strResource);\n            editStack.splitPastWorkspaceElement(toRemove, individualMap);\n        }\n    }\n    _splitFutureWorkspaceElement(toRemove, ignoreResources) {\n        const individualArr = toRemove.actual.split();\n        const individualMap = new Map();\n        for (const _element of individualArr) {\n            const resourceLabel = getResourceLabel(_element.resource);\n            const strResource = this.getUriComparisonKey(_element.resource);\n            const element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n            individualMap.set(element.strResource, element);\n        }\n        for (const strResource of toRemove.strResources) {\n            if (ignoreResources && ignoreResources.has(strResource)) {\n                continue;\n            }\n            const editStack = this._editStacks.get(strResource);\n            editStack.splitFutureWorkspaceElement(toRemove, individualMap);\n        }\n    }\n    removeElements(resource) {\n        const strResource = typeof resource === 'string' ? resource : this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.dispose();\n            this._editStacks.delete(strResource);\n        }\n        if (DEBUG) {\n            this._print('removeElements');\n        }\n    }\n    setElementsValidFlag(resource, isValid, filter) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.setElementsValidFlag(isValid, filter);\n        }\n        if (DEBUG) {\n            this._print('setElementsValidFlag');\n        }\n    }\n    createSnapshot(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.createSnapshot(resource);\n        }\n        return new ResourceEditStackSnapshot(resource, []);\n    }\n    restoreSnapshot(snapshot) {\n        const strResource = this.getUriComparisonKey(snapshot.resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.restoreSnapshot(snapshot);\n            if (!editStack.hasPastElements() && !editStack.hasFutureElements()) {\n                // the edit stack is now empty, just remove it entirely\n                editStack.dispose();\n                this._editStacks.delete(strResource);\n            }\n        }\n        if (DEBUG) {\n            this._print('restoreSnapshot');\n        }\n    }\n    getElements(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.getElements();\n        }\n        return { past: [], future: [] };\n    }\n    _findClosestUndoElementWithSource(sourceId) {\n        if (!sourceId) {\n            return [null, null];\n        }\n        // find an element with the sourceId and with the highest sourceOrder ready to be undone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestPastElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.sourceId === sourceId) {\n                if (!matchedElement || candidate.sourceOrder > matchedElement.sourceOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    canUndo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? true : false;\n        }\n        const strResource = this.getUriComparisonKey(resourceOrSource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.hasPastElements();\n        }\n        return false;\n    }\n    _onError(err, element) {\n        onUnexpectedError(err);\n        // An error occurred while undoing or redoing => drop the undo/redo stack for all affected resources\n        for (const strResource of element.strResources) {\n            this.removeElements(strResource);\n        }\n        this._notificationService.error(err);\n    }\n    _acquireLocks(editStackSnapshot) {\n        // first, check if all locks can be acquired\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                throw new Error('Cannot acquire edit stack lock');\n            }\n        }\n        // can acquire all locks\n        for (const editStack of editStackSnapshot.editStacks) {\n            editStack.locked = true;\n        }\n        return () => {\n            // release all locks\n            for (const editStack of editStackSnapshot.editStacks) {\n                editStack.locked = false;\n            }\n        };\n    }\n    _safeInvokeWithLocks(element, invoke, editStackSnapshot, cleanup, continuation) {\n        const releaseLocks = this._acquireLocks(editStackSnapshot);\n        let result;\n        try {\n            result = invoke();\n        }\n        catch (err) {\n            releaseLocks();\n            cleanup.dispose();\n            return this._onError(err, element);\n        }\n        if (result) {\n            // result is Promise<void>\n            return result.then(() => {\n                releaseLocks();\n                cleanup.dispose();\n                return continuation();\n            }, (err) => {\n                releaseLocks();\n                cleanup.dispose();\n                return this._onError(err, element);\n            });\n        }\n        else {\n            // result is void\n            releaseLocks();\n            cleanup.dispose();\n            return continuation();\n        }\n    }\n    async _invokeWorkspacePrepare(element) {\n        if (typeof element.actual.prepareUndoRedo === 'undefined') {\n            return Disposable.None;\n        }\n        const result = element.actual.prepareUndoRedo();\n        if (typeof result === 'undefined') {\n            return Disposable.None;\n        }\n        return result;\n    }\n    _invokeResourcePrepare(element, callback) {\n        if (element.actual.type !== 1 /* UndoRedoElementType.Workspace */ || typeof element.actual.prepareUndoRedo === 'undefined') {\n            // no preparation needed\n            return callback(Disposable.None);\n        }\n        const r = element.actual.prepareUndoRedo();\n        if (!r) {\n            // nothing to clean up\n            return callback(Disposable.None);\n        }\n        if (isDisposable(r)) {\n            return callback(r);\n        }\n        return r.then((disposable) => {\n            return callback(disposable);\n        });\n    }\n    _getAffectedEditStacks(element) {\n        const affectedEditStacks = [];\n        for (const strResource of element.strResources) {\n            affectedEditStacks.push(this._editStacks.get(strResource) || missingEditStack);\n        }\n        return new EditStackSnapshot(affectedEditStacks);\n    }\n    _tryToSplitAndUndo(strResource, element, ignoreResources, message) {\n        if (element.canSplit()) {\n            this._splitPastWorkspaceElement(element, ignoreResources);\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError(this._undo(strResource, 0, true));\n        }\n        else {\n            // Cannot safely split this workspace element => flush all undo/redo stacks\n            for (const strResource of element.strResources) {\n                this.removeElements(strResource);\n            }\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError();\n        }\n    }\n    _checkWorkspaceUndo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n        if (element.removedResources) {\n            return this._tryToSplitAndUndo(strResource, element, element.removedResources, nls.localize({ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not undo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n        }\n        if (checkInvalidatedResources && element.invalidatedResources) {\n            return this._tryToSplitAndUndo(strResource, element, element.invalidatedResources, nls.localize({ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not undo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n        }\n        // this must be the last past element in all the impacted resources!\n        const cannotUndoDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.getClosestPastElement() !== element) {\n                cannotUndoDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotUndoDueToResources.length > 0) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because changes were made to {1}\", element.label, cannotUndoDueToResources.join(', ')));\n        }\n        const cannotLockDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                cannotLockDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotLockDueToResources.length > 0) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n        }\n        // check if new stack elements were added in the meantime...\n        if (!editStackSnapshot.isValid()) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n        }\n        return null;\n    }\n    _workspaceUndo(strResource, element, undoConfirmed) {\n        const affectedEditStacks = this._getAffectedEditStacks(element);\n        const verificationError = this._checkWorkspaceUndo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/ false);\n        if (verificationError) {\n            return verificationError.returnValue;\n        }\n        return this._confirmAndExecuteWorkspaceUndo(strResource, element, affectedEditStacks, undoConfirmed);\n    }\n    _isPartOfUndoGroup(element) {\n        if (!element.groupId) {\n            return false;\n        }\n        // check that there is at least another element with the same groupId ready to be undone\n        for (const [, editStack] of this._editStacks) {\n            const pastElement = editStack.getClosestPastElement();\n            if (!pastElement) {\n                continue;\n            }\n            if (pastElement === element) {\n                const secondPastElement = editStack.getSecondClosestPastElement();\n                if (secondPastElement && secondPastElement.groupId === element.groupId) {\n                    // there is another element with the same group id in the same stack!\n                    return true;\n                }\n            }\n            if (pastElement.groupId === element.groupId) {\n                // there is another element with the same group id in another stack!\n                return true;\n            }\n        }\n        return false;\n    }\n    async _confirmAndExecuteWorkspaceUndo(strResource, element, editStackSnapshot, undoConfirmed) {\n        if (element.canSplit() && !this._isPartOfUndoGroup(element)) {\n            // this element can be split\n            let UndoChoice;\n            (function (UndoChoice) {\n                UndoChoice[UndoChoice[\"All\"] = 0] = \"All\";\n                UndoChoice[UndoChoice[\"This\"] = 1] = \"This\";\n                UndoChoice[UndoChoice[\"Cancel\"] = 2] = \"Cancel\";\n            })(UndoChoice || (UndoChoice = {}));\n            const { result } = await this._dialogService.prompt({\n                type: Severity.Info,\n                message: nls.localize('confirmWorkspace', \"Would you like to undo '{0}' across all files?\", element.label),\n                buttons: [\n                    {\n                        label: nls.localize({ key: 'ok', comment: ['{0} denotes a number that is > 1, && denotes a mnemonic'] }, \"&&Undo in {0} Files\", editStackSnapshot.editStacks.length),\n                        run: () => UndoChoice.All\n                    },\n                    {\n                        label: nls.localize({ key: 'nok', comment: ['&& denotes a mnemonic'] }, \"Undo this &&File\"),\n                        run: () => UndoChoice.This\n                    }\n                ],\n                cancelButton: {\n                    run: () => UndoChoice.Cancel\n                }\n            });\n            if (result === UndoChoice.Cancel) {\n                // choice: cancel\n                return;\n            }\n            if (result === UndoChoice.This) {\n                // choice: undo this file\n                this._splitPastWorkspaceElement(element, null);\n                return this._undo(strResource, 0, true);\n            }\n            // choice: undo in all files\n            // At this point, it is possible that the element has been made invalid in the meantime (due to the confirmation await)\n            const verificationError1 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*invalidated resources will be checked after the prepare call*/ false);\n            if (verificationError1) {\n                return verificationError1.returnValue;\n            }\n            undoConfirmed = true;\n        }\n        // prepare\n        let cleanup;\n        try {\n            cleanup = await this._invokeWorkspacePrepare(element);\n        }\n        catch (err) {\n            return this._onError(err, element);\n        }\n        // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n        const verificationError2 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/ true);\n        if (verificationError2) {\n            cleanup.dispose();\n            return verificationError2.returnValue;\n        }\n        for (const editStack of editStackSnapshot.editStacks) {\n            editStack.moveBackward(element);\n        }\n        return this._safeInvokeWithLocks(element, () => element.actual.undo(), editStackSnapshot, cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n    }\n    _resourceUndo(editStack, element, undoConfirmed) {\n        if (!element.isValid) {\n            // invalid element => immediately flush edit stack!\n            editStack.flushAllElements();\n            return;\n        }\n        if (editStack.locked) {\n            const message = nls.localize({ key: 'cannotResourceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, \"Could not undo '{0}' because there is already an undo or redo operation running.\", element.label);\n            this._notificationService.warn(message);\n            return;\n        }\n        return this._invokeResourcePrepare(element, (cleanup) => {\n            editStack.moveBackward(element);\n            return this._safeInvokeWithLocks(element, () => element.actual.undo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n        });\n    }\n    _findClosestUndoElementInGroup(groupId) {\n        if (!groupId) {\n            return [null, null];\n        }\n        // find another element with the same groupId and with the highest groupOrder ready to be undone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestPastElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.groupId === groupId) {\n                if (!matchedElement || candidate.groupOrder > matchedElement.groupOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    _continueUndoInGroup(groupId, undoConfirmed) {\n        if (!groupId) {\n            return;\n        }\n        const [, matchedStrResource] = this._findClosestUndoElementInGroup(groupId);\n        if (matchedStrResource) {\n            return this._undo(matchedStrResource, 0, undoConfirmed);\n        }\n    }\n    undo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? this._undo(matchedStrResource, resourceOrSource.id, false) : undefined;\n        }\n        if (typeof resourceOrSource === 'string') {\n            return this._undo(resourceOrSource, 0, false);\n        }\n        return this._undo(this.getUriComparisonKey(resourceOrSource), 0, false);\n    }\n    _undo(strResource, sourceId = 0, undoConfirmed) {\n        if (!this._editStacks.has(strResource)) {\n            return;\n        }\n        const editStack = this._editStacks.get(strResource);\n        const element = editStack.getClosestPastElement();\n        if (!element) {\n            return;\n        }\n        if (element.groupId) {\n            // this element is a part of a group, we need to make sure undoing in a group is in order\n            const [matchedElement, matchedStrResource] = this._findClosestUndoElementInGroup(element.groupId);\n            if (element !== matchedElement && matchedStrResource) {\n                // there is an element in the same group that should be undone before this one\n                return this._undo(matchedStrResource, sourceId, undoConfirmed);\n            }\n        }\n        const shouldPromptForConfirmation = (element.sourceId !== sourceId || element.confirmBeforeUndo);\n        if (shouldPromptForConfirmation && !undoConfirmed) {\n            // Hit a different source or the element asks for prompt before undo, prompt for confirmation\n            return this._confirmAndContinueUndo(strResource, sourceId, element);\n        }\n        try {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                return this._workspaceUndo(strResource, element, undoConfirmed);\n            }\n            else {\n                return this._resourceUndo(editStack, element, undoConfirmed);\n            }\n        }\n        finally {\n            if (DEBUG) {\n                this._print('undo');\n            }\n        }\n    }\n    async _confirmAndContinueUndo(strResource, sourceId, element) {\n        const result = await this._dialogService.confirm({\n            message: nls.localize('confirmDifferentSource', \"Would you like to undo '{0}'?\", element.label),\n            primaryButton: nls.localize({ key: 'confirmDifferentSource.yes', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"),\n            cancelButton: nls.localize('confirmDifferentSource.no', \"No\")\n        });\n        if (!result.confirmed) {\n            return;\n        }\n        return this._undo(strResource, sourceId, true);\n    }\n    _findClosestRedoElementWithSource(sourceId) {\n        if (!sourceId) {\n            return [null, null];\n        }\n        // find an element with sourceId and with the lowest sourceOrder ready to be redone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestFutureElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.sourceId === sourceId) {\n                if (!matchedElement || candidate.sourceOrder < matchedElement.sourceOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    canRedo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? true : false;\n        }\n        const strResource = this.getUriComparisonKey(resourceOrSource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.hasFutureElements();\n        }\n        return false;\n    }\n    _tryToSplitAndRedo(strResource, element, ignoreResources, message) {\n        if (element.canSplit()) {\n            this._splitFutureWorkspaceElement(element, ignoreResources);\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError(this._redo(strResource));\n        }\n        else {\n            // Cannot safely split this workspace element => flush all undo/redo stacks\n            for (const strResource of element.strResources) {\n                this.removeElements(strResource);\n            }\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError();\n        }\n    }\n    _checkWorkspaceRedo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n        if (element.removedResources) {\n            return this._tryToSplitAndRedo(strResource, element, element.removedResources, nls.localize({ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not redo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n        }\n        if (checkInvalidatedResources && element.invalidatedResources) {\n            return this._tryToSplitAndRedo(strResource, element, element.invalidatedResources, nls.localize({ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not redo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n        }\n        // this must be the last future element in all the impacted resources!\n        const cannotRedoDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.getClosestFutureElement() !== element) {\n                cannotRedoDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotRedoDueToResources.length > 0) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because changes were made to {1}\", element.label, cannotRedoDueToResources.join(', ')));\n        }\n        const cannotLockDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                cannotLockDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotLockDueToResources.length > 0) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n        }\n        // check if new stack elements were added in the meantime...\n        if (!editStackSnapshot.isValid()) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n        }\n        return null;\n    }\n    _workspaceRedo(strResource, element) {\n        const affectedEditStacks = this._getAffectedEditStacks(element);\n        const verificationError = this._checkWorkspaceRedo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/ false);\n        if (verificationError) {\n            return verificationError.returnValue;\n        }\n        return this._executeWorkspaceRedo(strResource, element, affectedEditStacks);\n    }\n    async _executeWorkspaceRedo(strResource, element, editStackSnapshot) {\n        // prepare\n        let cleanup;\n        try {\n            cleanup = await this._invokeWorkspacePrepare(element);\n        }\n        catch (err) {\n            return this._onError(err, element);\n        }\n        // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n        const verificationError = this._checkWorkspaceRedo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/ true);\n        if (verificationError) {\n            cleanup.dispose();\n            return verificationError.returnValue;\n        }\n        for (const editStack of editStackSnapshot.editStacks) {\n            editStack.moveForward(element);\n        }\n        return this._safeInvokeWithLocks(element, () => element.actual.redo(), editStackSnapshot, cleanup, () => this._continueRedoInGroup(element.groupId));\n    }\n    _resourceRedo(editStack, element) {\n        if (!element.isValid) {\n            // invalid element => immediately flush edit stack!\n            editStack.flushAllElements();\n            return;\n        }\n        if (editStack.locked) {\n            const message = nls.localize({ key: 'cannotResourceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, \"Could not redo '{0}' because there is already an undo or redo operation running.\", element.label);\n            this._notificationService.warn(message);\n            return;\n        }\n        return this._invokeResourcePrepare(element, (cleanup) => {\n            editStack.moveForward(element);\n            return this._safeInvokeWithLocks(element, () => element.actual.redo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueRedoInGroup(element.groupId));\n        });\n    }\n    _findClosestRedoElementInGroup(groupId) {\n        if (!groupId) {\n            return [null, null];\n        }\n        // find another element with the same groupId and with the lowest groupOrder ready to be redone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestFutureElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.groupId === groupId) {\n                if (!matchedElement || candidate.groupOrder < matchedElement.groupOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    _continueRedoInGroup(groupId) {\n        if (!groupId) {\n            return;\n        }\n        const [, matchedStrResource] = this._findClosestRedoElementInGroup(groupId);\n        if (matchedStrResource) {\n            return this._redo(matchedStrResource);\n        }\n    }\n    redo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? this._redo(matchedStrResource) : undefined;\n        }\n        if (typeof resourceOrSource === 'string') {\n            return this._redo(resourceOrSource);\n        }\n        return this._redo(this.getUriComparisonKey(resourceOrSource));\n    }\n    _redo(strResource) {\n        if (!this._editStacks.has(strResource)) {\n            return;\n        }\n        const editStack = this._editStacks.get(strResource);\n        const element = editStack.getClosestFutureElement();\n        if (!element) {\n            return;\n        }\n        if (element.groupId) {\n            // this element is a part of a group, we need to make sure redoing in a group is in order\n            const [matchedElement, matchedStrResource] = this._findClosestRedoElementInGroup(element.groupId);\n            if (element !== matchedElement && matchedStrResource) {\n                // there is an element in the same group that should be redone before this one\n                return this._redo(matchedStrResource);\n            }\n        }\n        try {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                return this._workspaceRedo(strResource, element);\n            }\n            else {\n                return this._resourceRedo(editStack, element);\n            }\n        }\n        finally {\n            if (DEBUG) {\n                this._print('redo');\n            }\n        }\n    }\n};\nUndoRedoService = __decorate([\n    __param(0, IDialogService),\n    __param(1, INotificationService)\n], UndoRedoService);\nexport { UndoRedoService };\nclass WorkspaceVerificationError {\n    constructor(returnValue) {\n        this.returnValue = returnValue;\n    }\n}\nregisterSingleton(IUndoRedoService, UndoRedoService, 1 /* InstantiationType.Delayed */);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { localize } from '../../../nls.js';\nimport { basename } from '../../../base/common/path.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IWorkspaceContextService = createDecorator('contextService');\nexport function isSingleFolderWorkspaceIdentifier(obj) {\n    const singleFolderIdentifier = obj;\n    return typeof (singleFolderIdentifier === null || singleFolderIdentifier === void 0 ? void 0 : singleFolderIdentifier.id) === 'string' && URI.isUri(singleFolderIdentifier.uri);\n}\nexport function isEmptyWorkspaceIdentifier(obj) {\n    const emptyWorkspaceIdentifier = obj;\n    return typeof (emptyWorkspaceIdentifier === null || emptyWorkspaceIdentifier === void 0 ? void 0 : emptyWorkspaceIdentifier.id) === 'string'\n        && !isSingleFolderWorkspaceIdentifier(obj)\n        && !isWorkspaceIdentifier(obj);\n}\nexport const EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE = { id: 'ext-dev' };\nexport const UNKNOWN_EMPTY_WINDOW_WORKSPACE = { id: 'empty-window' };\nexport function toWorkspaceIdentifier(arg0, isExtensionDevelopment) {\n    // Empty workspace\n    if (typeof arg0 === 'string' || typeof arg0 === 'undefined') {\n        // With a backupPath, the basename is the empty workspace identifier\n        if (typeof arg0 === 'string') {\n            return {\n                id: basename(arg0)\n            };\n        }\n        // Extension development empty windows have backups disabled\n        // so we return a constant workspace identifier for extension\n        // authors to allow to restore their workspace state even then.\n        if (isExtensionDevelopment) {\n            return EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE;\n        }\n        return UNKNOWN_EMPTY_WINDOW_WORKSPACE;\n    }\n    // Multi root\n    const workspace = arg0;\n    if (workspace.configuration) {\n        return {\n            id: workspace.id,\n            configPath: workspace.configuration\n        };\n    }\n    // Single folder\n    if (workspace.folders.length === 1) {\n        return {\n            id: workspace.id,\n            uri: workspace.folders[0].uri\n        };\n    }\n    // Empty window\n    return {\n        id: workspace.id\n    };\n}\nexport function isWorkspaceIdentifier(obj) {\n    const workspaceIdentifier = obj;\n    return typeof (workspaceIdentifier === null || workspaceIdentifier === void 0 ? void 0 : workspaceIdentifier.id) === 'string' && URI.isUri(workspaceIdentifier.configPath);\n}\nexport class Workspace {\n    constructor(_id, folders, _transient, _configuration, _ignorePathCasing) {\n        this._id = _id;\n        this._transient = _transient;\n        this._configuration = _configuration;\n        this._ignorePathCasing = _ignorePathCasing;\n        this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing, () => true);\n        this.folders = folders;\n    }\n    get folders() {\n        return this._folders;\n    }\n    set folders(folders) {\n        this._folders = folders;\n        this.updateFoldersMap();\n    }\n    get id() {\n        return this._id;\n    }\n    get transient() {\n        return this._transient;\n    }\n    get configuration() {\n        return this._configuration;\n    }\n    set configuration(configuration) {\n        this._configuration = configuration;\n    }\n    getFolder(resource) {\n        if (!resource) {\n            return null;\n        }\n        return this._foldersMap.findSubstr(resource) || null;\n    }\n    updateFoldersMap() {\n        this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing, () => true);\n        for (const folder of this.folders) {\n            this._foldersMap.set(folder.uri, folder);\n        }\n    }\n    toJSON() {\n        return { id: this.id, folders: this.folders, transient: this.transient, configuration: this.configuration };\n    }\n}\nexport class WorkspaceFolder {\n    constructor(data, \n    /**\n     * Provides access to the original metadata for this workspace\n     * folder. This can be different from the metadata provided in\n     * this class:\n     * - raw paths can be relative\n     * - raw paths are not normalized\n     */\n    raw) {\n        this.raw = raw;\n        this.uri = data.uri;\n        this.index = data.index;\n        this.name = data.name;\n    }\n    toJSON() {\n        return { uri: this.uri, name: this.name, index: this.index };\n    }\n}\nexport const WORKSPACE_EXTENSION = 'code-workspace';\nexport const WORKSPACE_FILTER = [{ name: localize('codeWorkspace', \"Code Workspace\"), extensions: [WORKSPACE_EXTENSION] }];\nexport const STANDALONE_EDITOR_WORKSPACE_ID = '4064f6ec-cb38-4ad0-af64-ee6467e63c82';\nexport function isStandaloneEditorWorkspace(workspace) {\n    return workspace.id === STANDALONE_EDITOR_WORKSPACE_ID;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IWorkspaceTrustManagementService = createDecorator('workspaceTrustManagementService');\n"],"names":["TARGET_KEY","IStorageService","createDecorator","WillSaveStateReason","AbstractStorageService","Disposable","constructor","options","arguments","length","undefined","flushInterval","DEFAULT_FLUSH_INTERVAL","super","this","_onDidChangeValue","_register","PauseableEmitter","_onDidChangeTarget","_onWillSaveState","Emitter","onWillSaveState","event","_workspaceKeyTargets","_profileKeyTargets","_applicationKeyTargets","onDidChangeValue","scope","key","disposable","Event","filter","e","emitDidChangeValue","external","fire","target","getKeyTargets","get","fallbackValue","_a","getStorage","getBoolean","getNumber","store","value","isUndefinedOrNull","remove","withPausedEmitters","updateKeyTarget","set","delete","fn","pause","resume","_b","keyTargets","JSON","stringify","workspaceKeyTargets","loadKeyTargets","profileKeyTargets","applicationKeyTargets","storage","keysRaw","parse","error","Object","create","InMemoryStorageService","applicationStorage","Storage","InMemoryStorageDatabase","hint","StorageHint","STORAGE_IN_MEMORY","profileStorage","workspaceStorage","onDidChangeStorage","ITelemetryService","defaultKeybindingLabelStyles","keybindingLabelBackground","asCssVariable","keybindingLabelForeground","keybindingLabelBorder","keybindingLabelBottomBorder","keybindingLabelShadow","widgetShadow","defaultButtonStyles","buttonForeground","buttonSeparator","buttonBackground","buttonHoverBackground","buttonSecondaryForeground","buttonSecondaryBackground","buttonSecondaryHoverBackground","buttonBorder","defaultProgressBarStyles","progressBarBackground","defaultToggleStyles","inputActiveOptionBorder","inputActiveOptionForeground","inputActiveOptionBackground","defaultInputBoxStyles","checkboxBackground","checkboxBorder","checkboxForeground","editorWidgetBackground","editorWidgetForeground","contrastBorder","problemsErrorIconForeground","problemsWarningIconForeground","problemsInfoIconForeground","textLinkForeground","inputBackground","inputForeground","inputBorder","inputValidationInfoBorder","inputValidationInfoBackground","inputValidationInfoForeground","inputValidationWarningBorder","inputValidationWarningBackground","inputValidationWarningForeground","inputValidationErrorBorder","inputValidationErrorBackground","inputValidationErrorForeground","defaultFindWidgetStyles","listFilterWidgetBackground","listFilterWidgetOutline","listFilterWidgetNoMatchesOutline","listFilterWidgetShadow","inputBoxStyles","toggleStyles","defaultCountBadgeStyles","badgeBackground","badgeForeground","badgeBorder","defaultListStyles","breadcrumbsBackground","breadcrumbsForeground","breadcrumbsFocusForeground","breadcrumbsActiveSelectionForeground","listBackground","listInactiveFocusForeground","listFocusBackground","listFocusForeground","listFocusOutline","listActiveSelectionBackground","listActiveSelectionForeground","listActiveSelectionIconForeground","listFocusAndSelectionOutline","listFocusAndSelectionBackground","listFocusAndSelectionForeground","listInactiveSelectionBackground","listInactiveSelectionIconForeground","listInactiveSelectionForeground","listInactiveFocusBackground","listInactiveFocusOutline","listHoverBackground","listHoverForeground","listDropOverBackground","listDropBetweenBackground","listSelectionOutline","activeContrastBorder","listHoverOutline","treeIndentGuidesStroke","treeInactiveIndentGuidesStroke","treeStickyScrollBackground","treeStickyScrollBorder","treeStickyScrollShadow","tableColumnsBorder","tableOddRowsBackgroundColor","getListStyles","override","styles","result","val","overrideStyles","defaultSelectBoxStyles","selectBackground","selectListBackground","selectForeground","decoratorRightForeground","pickerGroupForeground","selectBorder","focusBorder","quickInputListFocusBackground","quickInputListFocusIconForeground","quickInputListFocusForeground","asCssVariableWithDefault","Color","transparent","toString","selectListBorder","editorWidgetBorder","defaultMenuStyles","shadowColor","borderColor","menuBorder","foregroundColor","menuForeground","backgroundColor","menuBackground","selectionForegroundColor","menuSelectionForeground","selectionBackgroundColor","menuSelectionBackground","selectionBorderColor","menuSelectionBorder","separatorColor","menuSeparatorBackground","scrollbarShadow","scrollbarSliderBackground","scrollbarSliderHoverBackground","scrollbarSliderActiveBackground","getIconsStyleSheet","themeService","DisposableStore","onDidChangeEmmiter","add","iconRegistry","getIconRegistry","onDidChange","onDidProductIconThemeChange","dispose","getCSS","productIconTheme","getProductIconTheme","UnthemedProductIconTheme","usedFontIds","rules","rootAttribs","contribution","getIcons","definition","getIcon","fontContribution","font","fontFamilyVar","concat","id","contentVar","push","asCSSPropertyValue","fontCharacter","fontWeight","weight","fontStyle","style","src","map","l","asCSSUrl","location","format","join","defaults","ThemeIcon","isThemeIcon","c","asCssVariableName","colorIdent","replace","color","defaultCssValue","Extensions","ColorContribution","colorRegistry","_onDidChangeSchema","onDidChangeSchema","colorSchema","type","properties","colorReferenceSchema","enum","enumDescriptions","colorsById","registerColor","description","needsTransparency","deprecationMessage","colorContribution","propertySchema","defaultSnippets","body","pattern","patternErrorMessage","getColors","keys","resolveDefaultColor","theme","colorDesc","resolveColorValue","getColorSchema","sort","sorter","a","b","cat1","indexOf","cat2","localeCompare","k","darken","colorValue","factor","op","lighten","oneOf","_len","colorValues","Array","_key","values","lessProminent","backgroundColorValue","transparency","background","fromHex","getColor","transform","_c","_d","makeOpaque","candidate","defines","if","then","else","from","isDarkerThan","getLighterColor","getDarkerColor","assertNever","executeTransform","platform","workbenchColorsSchemaId","schemaRegistry","as","JSONExtensions","JSONContribution","registerSchema","delayer","RunOnceScheduler","notifySchemaChanged","isScheduled","schedule","foreground","dark","light","hcDark","hcLight","nls","iconForeground","black","white","editorBackground","editorForeground","editorErrorForeground","editorErrorBorder","editorWarningBackground","editorWarningForeground","editorWarningBorder","editorInfoForeground","editorInfoBorder","editorHintForeground","editorActiveLinkForeground","blue","cyan","editorSelectionBackground","editorSelectionForeground","editorInactiveSelection","editorSelectionHighlight","editorFindMatchHighlight","editorFindMatchHighlightBorder","editorFindRangeHighlightBorder","editorHoverBackground","editorHoverBorder","editorInlayHintForeground","editorInlayHintBackground","editorInlayHintTypeForeground","editorInlayHintTypeBackground","editorInlayHintParameterForeground","editorInlayHintParameterBackground","editorLightBulbForeground","defaultInsertColor","RGBA","defaultRemoveColor","diffInserted","diffRemoved","diffOverviewRulerInserted","diffOverviewRulerRemoved","widgetBorder","toolbarHoverBackground","currentBaseColor","incomingBaseColor","commonBaseColor","contentTransparency","mergeCurrentHeaderBackground","mergeIncomingHeaderBackground","mergeCommonHeaderBackground","mergeBorder","overviewRulerFindMatchForeground","overviewRulerSelectionHighlightForeground","minimapFindMatch","minimapSelectionOccurrenceHighlight","minimapSelection","minimapInfo","minimapWarning","minimapError","minimapBackground","minimapForegroundOpacity","listHighlightForeground","listFocusHighlightForeground","ifArg","thenArg","elseArg","quickInputBackground","quickInputForeground","quickInputTitleBackground","pickerGroupBorder","_deprecatedQuickInputListFocusBackground","IconContribution","IconFontDefinition","getDefinition","registry","toJSONObject","iconFont","s","fromJSONObject","json","stringOrUndef","isString","isArray","every","URI","_onDidChange","iconSchema","definitions","icons","fontId","localize","additionalProperties","iconReferenceSchema","iconNameExpression","iconsById","iconFontsById","registerIcon","existing","markdownDescription","enumIndex","iconContribution","$ref","getIconSchema","i1","i2","classNames","i","reference","contributions","codiconFontCharacters","getCodiconFontCharacters","icon","initialize","iconsSchemaId","widgetClose","Codicon","close","arrowUp","arrowDown","modify","sync","loading","ColorScheme","isHighContrast","scheme","HIGH_CONTRAST_DARK","HIGH_CONTRAST_LIGHT","isDark","DARK","IThemeService","themeColorFromId","getThemeTypeSelector","ThemingContribution","themingRegistry","themingParticipants","onThemingParticipantAddedEmitter","onColorThemeChange","participant","toDisposable","idx","splice","getThemingParticipants","registerThemingParticipant","Themable","getColorTheme","onDidColorThemeChange","onThemeChange","updateStyles","IUndoRedoService","ResourceEditStackSnapshot","resource","elements","UndoRedoGroup","_ID","order","nextOrder","None","UndoRedoSource","__decorate","decorators","desc","d","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","DEBUG","getResourceLabel","Schemas","file","fsPath","path","stackElementCounter","ResourceStackElement","actual","resourceLabel","strResource","groupId","groupOrder","sourceId","sourceOrder","label","confirmBeforeUndo","resourceLabels","strResources","isValid","setValid","name","ResourceReasonPair","reason","RemovedResources","Map","createMessage","externalRemoval","noParallelUniverses","element","messages","comment","size","has","WorkspaceStackElement","removedResources","invalidatedResources","canSplit","split","removeResource","ResourceEditStack","_past","_future","locked","versionId","flushAllElements","_setElementValidFlag","setElementsValidFlag","pushElement","futureElement","createSnapshot","len","restoreSnapshot","snapshot","snapshotLength","isOK","snapshotIndex","removePastAfter","removeFutureBefore","slice","getElements","past","future","getClosestPastElement","getSecondClosestPastElement","getClosestFutureElement","hasPastElements","hasFutureElements","splitPastWorkspaceElement","toRemove","individualMap","j","splitFutureWorkspaceElement","moveBackward","pop","moveForward","EditStackSnapshot","editStacks","_versionIds","missingEditStack","UndoRedoService","_dialogService","_notificationService","_editStacks","_uriComparisonKeyComputers","getUriComparisonKey","uriComparisonKeyComputer","getComparisonKey","_print","console","log","str","group","source","_pushElement","seen","Set","resources","editStack","getLastElement","closestPastElement","_splitPastWorkspaceElement","ignoreResources","individualArr","_element","_splitFutureWorkspaceElement","removeElements","_findClosestUndoElementWithSource","matchedElement","matchedStrResource","canUndo","resourceOrSource","_onError","err","onUnexpectedError","_acquireLocks","editStackSnapshot","Error","_safeInvokeWithLocks","invoke","cleanup","continuation","releaseLocks","_invokeWorkspacePrepare","prepareUndoRedo","_invokeResourcePrepare","callback","isDisposable","_getAffectedEditStacks","affectedEditStacks","_tryToSplitAndUndo","message","warn","WorkspaceVerificationError","_undo","_checkWorkspaceUndo","checkInvalidatedResources","cannotUndoDueToResources","cannotLockDueToResources","_workspaceUndo","undoConfirmed","verificationError","returnValue","_confirmAndExecuteWorkspaceUndo","_isPartOfUndoGroup","pastElement","secondPastElement","UndoChoice","prompt","Severity","Info","buttons","run","All","This","cancelButton","Cancel","verificationError1","verificationError2","undo","_continueUndoInGroup","_resourceUndo","_findClosestUndoElementInGroup","_confirmAndContinueUndo","confirm","primaryButton","confirmed","_findClosestRedoElementWithSource","canRedo","_tryToSplitAndRedo","_redo","_checkWorkspaceRedo","cannotRedoDueToResources","_workspaceRedo","_executeWorkspaceRedo","redo","_continueRedoInGroup","_resourceRedo","_findClosestRedoElementInGroup","IDialogService","INotificationService","registerSingleton","IWorkspaceContextService","isSingleFolderWorkspaceIdentifier","obj","singleFolderIdentifier","isUri","uri","isEmptyWorkspaceIdentifier","workspaceIdentifier","configPath","isWorkspaceIdentifier","EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE","UNKNOWN_EMPTY_WINDOW_WORKSPACE","toWorkspaceIdentifier","arg0","isExtensionDevelopment","basename","workspace","configuration","folders","WorkspaceFolder","data","raw","index","toJSON","WORKSPACE_EXTENSION","STANDALONE_EDITOR_WORKSPACE_ID","isStandaloneEditorWorkspace","IWorkspaceTrustManagementService"],"sourceRoot":""}