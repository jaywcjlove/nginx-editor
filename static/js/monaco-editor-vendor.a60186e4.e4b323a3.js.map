{"version":3,"file":"static/js/monaco-editor-vendor.a60186e4.e4b323a3.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/common/languageSelector.js","../node_modules/monaco-editor/esm/vs/editor/common/languageFeatureRegistry.js","../node_modules/monaco-editor/esm/vs/editor/common/languages.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/language.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/languageConfiguration.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/characterPair.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/electricCharacter.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/indentRules.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/onEnter.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/languageConfigurationRegistry.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/modesRegistry.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/nullTokenize.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/richEditBrackets.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/supports/tokenization.js","../node_modules/monaco-editor/esm/vs/editor/common/languages/textToHtmlTokenizer.js","../node_modules/monaco-editor/esm/vs/editor/common/model.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/bracketPairsTree.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsImpl.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/ast.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/brackets.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/length.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/concat23Trees.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/nodeReader.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/parser.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/smallImmutableSet.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/tokenizer.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/colorizedBracketPairsDecorationProvider.js","../node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/fixBrackets.js","../node_modules/monaco-editor/esm/vs/editor/common/model/editStack.js","../node_modules/monaco-editor/esm/vs/editor/common/model/guidesTextModelPart.js","../node_modules/monaco-editor/esm/vs/editor/common/model/indentationGuesser.js","../node_modules/monaco-editor/esm/vs/editor/common/model/intervalTree.js","../node_modules/monaco-editor/esm/vs/editor/common/modelLineProjectionData.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { match as matchGlobPattern } from '../../base/common/glob.js';\nimport { normalize } from '../../base/common/path.js';\nexport function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookType) {\n    if (Array.isArray(selector)) {\n        // array -> take max individual value\n        let ret = 0;\n        for (const filter of selector) {\n            const value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookType);\n            if (value === 10) {\n                return value; // already at the highest\n            }\n            if (value > ret) {\n                ret = value;\n            }\n        }\n        return ret;\n    }\n    else if (typeof selector === 'string') {\n        if (!candidateIsSynchronized) {\n            return 0;\n        }\n        // short-hand notion, desugars to\n        // 'fooLang' -> { language: 'fooLang'}\n        // '*' -> { language: '*' }\n        if (selector === '*') {\n            return 5;\n        }\n        else if (selector === candidateLanguage) {\n            return 10;\n        }\n        else {\n            return 0;\n        }\n    }\n    else if (selector) {\n        // filter -> select accordingly, use defaults for scheme\n        const { language, pattern, scheme, hasAccessToAllModels, notebookType } = selector; // TODO: microsoft/TypeScript#42768\n        if (!candidateIsSynchronized && !hasAccessToAllModels) {\n            return 0;\n        }\n        let ret = 0;\n        if (scheme) {\n            if (scheme === candidateUri.scheme) {\n                ret = 10;\n            }\n            else if (scheme === '*') {\n                ret = 5;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (language) {\n            if (language === candidateLanguage) {\n                ret = 10;\n            }\n            else if (language === '*') {\n                ret = Math.max(ret, 5);\n            }\n            else {\n                return 0;\n            }\n        }\n        if (notebookType) {\n            if (notebookType === candidateNotebookType) {\n                ret = 10;\n            }\n            else if (notebookType === '*') {\n                ret = Math.max(ret, 5);\n            }\n            else {\n                return 0;\n            }\n        }\n        if (pattern) {\n            let normalizedPattern;\n            if (typeof pattern === 'string') {\n                normalizedPattern = pattern;\n            }\n            else {\n                // Since this pattern has a `base` property, we need\n                // to normalize this path first before passing it on\n                // because we will compare it against `Uri.fsPath`\n                // which uses platform specific separators.\n                // Refs: https://github.com/microsoft/vscode/issues/99938\n                normalizedPattern = Object.assign(Object.assign({}, pattern), { base: normalize(pattern.base) });\n            }\n            if (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n                ret = 10;\n            }\n            else {\n                return 0;\n            }\n        }\n        return ret;\n    }\n    else {\n        return 0;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../base/common/event.js';\nimport { toDisposable } from '../../base/common/lifecycle.js';\nimport { shouldSynchronizeModel } from './model.js';\nimport { score } from './languageSelector.js';\nfunction isExclusive(selector) {\n    if (typeof selector === 'string') {\n        return false;\n    }\n    else if (Array.isArray(selector)) {\n        return selector.every(isExclusive);\n    }\n    else {\n        return !!selector.exclusive; // TODO: microsoft/TypeScript#42768\n    }\n}\nexport class LanguageFeatureRegistry {\n    constructor(_notebookTypeResolver) {\n        this._notebookTypeResolver = _notebookTypeResolver;\n        this._clock = 0;\n        this._entries = [];\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n    }\n    register(selector, provider) {\n        let entry = {\n            selector,\n            provider,\n            _score: -1,\n            _time: this._clock++\n        };\n        this._entries.push(entry);\n        this._lastCandidate = undefined;\n        this._onDidChange.fire(this._entries.length);\n        return toDisposable(() => {\n            if (entry) {\n                const idx = this._entries.indexOf(entry);\n                if (idx >= 0) {\n                    this._entries.splice(idx, 1);\n                    this._lastCandidate = undefined;\n                    this._onDidChange.fire(this._entries.length);\n                    entry = undefined;\n                }\n            }\n        });\n    }\n    has(model) {\n        return this.all(model).length > 0;\n    }\n    all(model) {\n        if (!model) {\n            return [];\n        }\n        this._updateScores(model);\n        const result = [];\n        // from registry\n        for (let entry of this._entries) {\n            if (entry._score > 0) {\n                result.push(entry.provider);\n            }\n        }\n        return result;\n    }\n    ordered(model) {\n        const result = [];\n        this._orderedForEach(model, entry => result.push(entry.provider));\n        return result;\n    }\n    orderedGroups(model) {\n        const result = [];\n        let lastBucket;\n        let lastBucketScore;\n        this._orderedForEach(model, entry => {\n            if (lastBucket && lastBucketScore === entry._score) {\n                lastBucket.push(entry.provider);\n            }\n            else {\n                lastBucketScore = entry._score;\n                lastBucket = [entry.provider];\n                result.push(lastBucket);\n            }\n        });\n        return result;\n    }\n    _orderedForEach(model, callback) {\n        if (!model) {\n            return;\n        }\n        this._updateScores(model);\n        for (const entry of this._entries) {\n            if (entry._score > 0) {\n                callback(entry);\n            }\n        }\n    }\n    _updateScores(model) {\n        var _a;\n        const notebookType = (_a = this._notebookTypeResolver) === null || _a === void 0 ? void 0 : _a.call(this, model.uri);\n        const candidate = {\n            uri: model.uri.toString(),\n            language: model.getLanguageId(),\n            notebookType\n        };\n        if (this._lastCandidate\n            && this._lastCandidate.language === candidate.language\n            && this._lastCandidate.uri === candidate.uri\n            && this._lastCandidate.notebookType === candidate.notebookType) {\n            // nothing has changed\n            return;\n        }\n        this._lastCandidate = candidate;\n        for (let entry of this._entries) {\n            entry._score = score(entry.selector, model.uri, model.getLanguageId(), shouldSynchronizeModel(model), notebookType);\n            if (isExclusive(entry.selector) && entry._score > 0) {\n                // support for one exclusive selector that overwrites\n                // any other selector\n                for (let entry of this._entries) {\n                    entry._score = 0;\n                }\n                entry._score = 1000;\n                break;\n            }\n        }\n        // needs sorting\n        this._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n    }\n    static _compareByScoreAndTime(a, b) {\n        if (a._score < b._score) {\n            return 1;\n        }\n        else if (a._score > b._score) {\n            return -1;\n        }\n        else if (a._time < b._time) {\n            return 1;\n        }\n        else if (a._time > b._time) {\n            return -1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { URI } from '../../base/common/uri.js';\nimport { Range } from './core/range.js';\nimport { TokenizationRegistry as TokenizationRegistryImpl } from './tokenizationRegistry.js';\nimport { Codicon } from '../../base/common/codicons.js';\n/**\n * @internal\n */\nexport class TokenMetadata {\n    static getLanguageId(metadata) {\n        return (metadata & 255 /* LANGUAGEID_MASK */) >>> 0 /* LANGUAGEID_OFFSET */;\n    }\n    static getTokenType(metadata) {\n        return (metadata & 768 /* TOKEN_TYPE_MASK */) >>> 8 /* TOKEN_TYPE_OFFSET */;\n    }\n    static getFontStyle(metadata) {\n        return (metadata & 15360 /* FONT_STYLE_MASK */) >>> 10 /* FONT_STYLE_OFFSET */;\n    }\n    static getForeground(metadata) {\n        return (metadata & 8372224 /* FOREGROUND_MASK */) >>> 14 /* FOREGROUND_OFFSET */;\n    }\n    static getBackground(metadata) {\n        return (metadata & 4286578688 /* BACKGROUND_MASK */) >>> 23 /* BACKGROUND_OFFSET */;\n    }\n    static getClassNameFromMetadata(metadata) {\n        const foreground = this.getForeground(metadata);\n        let className = 'mtk' + foreground;\n        const fontStyle = this.getFontStyle(metadata);\n        if (fontStyle & 1 /* Italic */) {\n            className += ' mtki';\n        }\n        if (fontStyle & 2 /* Bold */) {\n            className += ' mtkb';\n        }\n        if (fontStyle & 4 /* Underline */) {\n            className += ' mtku';\n        }\n        if (fontStyle & 8 /* Strikethrough */) {\n            className += ' mtks';\n        }\n        return className;\n    }\n    static getInlineStyleFromMetadata(metadata, colorMap) {\n        const foreground = this.getForeground(metadata);\n        const fontStyle = this.getFontStyle(metadata);\n        let result = `color: ${colorMap[foreground]};`;\n        if (fontStyle & 1 /* Italic */) {\n            result += 'font-style: italic;';\n        }\n        if (fontStyle & 2 /* Bold */) {\n            result += 'font-weight: bold;';\n        }\n        let textDecoration = '';\n        if (fontStyle & 4 /* Underline */) {\n            textDecoration += ' underline';\n        }\n        if (fontStyle & 8 /* Strikethrough */) {\n            textDecoration += ' line-through';\n        }\n        if (textDecoration) {\n            result += `text-decoration:${textDecoration};`;\n        }\n        return result;\n    }\n    static getPresentationFromMetadata(metadata) {\n        const foreground = this.getForeground(metadata);\n        const fontStyle = this.getFontStyle(metadata);\n        return {\n            foreground: foreground,\n            italic: Boolean(fontStyle & 1 /* Italic */),\n            bold: Boolean(fontStyle & 2 /* Bold */),\n            underline: Boolean(fontStyle & 4 /* Underline */),\n            strikethrough: Boolean(fontStyle & 8 /* Strikethrough */),\n        };\n    }\n}\nexport class Token {\n    constructor(offset, type, language) {\n        this._tokenBrand = undefined;\n        this.offset = offset;\n        this.type = type;\n        this.language = language;\n    }\n    toString() {\n        return '(' + this.offset + ', ' + this.type + ')';\n    }\n}\n/**\n * @internal\n */\nexport class TokenizationResult {\n    constructor(tokens, endState) {\n        this._tokenizationResultBrand = undefined;\n        this.tokens = tokens;\n        this.endState = endState;\n    }\n}\n/**\n * @internal\n */\nexport class EncodedTokenizationResult {\n    constructor(tokens, endState) {\n        this._encodedTokenizationResultBrand = undefined;\n        this.tokens = tokens;\n        this.endState = endState;\n    }\n}\n/**\n * @internal\n */\nexport var CompletionItemKinds;\n(function (CompletionItemKinds) {\n    const byKind = new Map();\n    byKind.set(0 /* Method */, Codicon.symbolMethod);\n    byKind.set(1 /* Function */, Codicon.symbolFunction);\n    byKind.set(2 /* Constructor */, Codicon.symbolConstructor);\n    byKind.set(3 /* Field */, Codicon.symbolField);\n    byKind.set(4 /* Variable */, Codicon.symbolVariable);\n    byKind.set(5 /* Class */, Codicon.symbolClass);\n    byKind.set(6 /* Struct */, Codicon.symbolStruct);\n    byKind.set(7 /* Interface */, Codicon.symbolInterface);\n    byKind.set(8 /* Module */, Codicon.symbolModule);\n    byKind.set(9 /* Property */, Codicon.symbolProperty);\n    byKind.set(10 /* Event */, Codicon.symbolEvent);\n    byKind.set(11 /* Operator */, Codicon.symbolOperator);\n    byKind.set(12 /* Unit */, Codicon.symbolUnit);\n    byKind.set(13 /* Value */, Codicon.symbolValue);\n    byKind.set(15 /* Enum */, Codicon.symbolEnum);\n    byKind.set(14 /* Constant */, Codicon.symbolConstant);\n    byKind.set(15 /* Enum */, Codicon.symbolEnum);\n    byKind.set(16 /* EnumMember */, Codicon.symbolEnumMember);\n    byKind.set(17 /* Keyword */, Codicon.symbolKeyword);\n    byKind.set(27 /* Snippet */, Codicon.symbolSnippet);\n    byKind.set(18 /* Text */, Codicon.symbolText);\n    byKind.set(19 /* Color */, Codicon.symbolColor);\n    byKind.set(20 /* File */, Codicon.symbolFile);\n    byKind.set(21 /* Reference */, Codicon.symbolReference);\n    byKind.set(22 /* Customcolor */, Codicon.symbolCustomColor);\n    byKind.set(23 /* Folder */, Codicon.symbolFolder);\n    byKind.set(24 /* TypeParameter */, Codicon.symbolTypeParameter);\n    byKind.set(25 /* User */, Codicon.account);\n    byKind.set(26 /* Issue */, Codicon.issues);\n    /**\n     * @internal\n     */\n    function toIcon(kind) {\n        let codicon = byKind.get(kind);\n        if (!codicon) {\n            console.info('No codicon found for CompletionItemKind ' + kind);\n            codicon = Codicon.symbolProperty;\n        }\n        return codicon;\n    }\n    CompletionItemKinds.toIcon = toIcon;\n    const data = new Map();\n    data.set('method', 0 /* Method */);\n    data.set('function', 1 /* Function */);\n    data.set('constructor', 2 /* Constructor */);\n    data.set('field', 3 /* Field */);\n    data.set('variable', 4 /* Variable */);\n    data.set('class', 5 /* Class */);\n    data.set('struct', 6 /* Struct */);\n    data.set('interface', 7 /* Interface */);\n    data.set('module', 8 /* Module */);\n    data.set('property', 9 /* Property */);\n    data.set('event', 10 /* Event */);\n    data.set('operator', 11 /* Operator */);\n    data.set('unit', 12 /* Unit */);\n    data.set('value', 13 /* Value */);\n    data.set('constant', 14 /* Constant */);\n    data.set('enum', 15 /* Enum */);\n    data.set('enum-member', 16 /* EnumMember */);\n    data.set('enumMember', 16 /* EnumMember */);\n    data.set('keyword', 17 /* Keyword */);\n    data.set('snippet', 27 /* Snippet */);\n    data.set('text', 18 /* Text */);\n    data.set('color', 19 /* Color */);\n    data.set('file', 20 /* File */);\n    data.set('reference', 21 /* Reference */);\n    data.set('customcolor', 22 /* Customcolor */);\n    data.set('folder', 23 /* Folder */);\n    data.set('type-parameter', 24 /* TypeParameter */);\n    data.set('typeParameter', 24 /* TypeParameter */);\n    data.set('account', 25 /* User */);\n    data.set('issue', 26 /* Issue */);\n    /**\n     * @internal\n     */\n    function fromString(value, strict) {\n        let res = data.get(value);\n        if (typeof res === 'undefined' && !strict) {\n            res = 9 /* Property */;\n        }\n        return res;\n    }\n    CompletionItemKinds.fromString = fromString;\n})(CompletionItemKinds || (CompletionItemKinds = {}));\n/**\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered automatically while editing.\n     * It is sufficient to return a single completion item in this case.\n     */\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Automatic\"] = 0] = \"Automatic\";\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     * Return multiple completion items to enable cycling through them.\n     */\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Explicit\"] = 1] = \"Explicit\";\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var SignatureHelpTriggerKind;\n(function (SignatureHelpTriggerKind) {\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"Invoke\"] = 1] = \"Invoke\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"TriggerCharacter\"] = 2] = \"TriggerCharacter\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"ContentChange\"] = 3] = \"ContentChange\";\n})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Text\"] = 0] = \"Text\";\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Read\"] = 1] = \"Read\";\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Write\"] = 2] = \"Write\";\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * @internal\n */\nexport function isLocationLink(thing) {\n    return thing\n        && URI.isUri(thing.uri)\n        && Range.isIRange(thing.range)\n        && (Range.isIRange(thing.originSelectionRange) || Range.isIRange(thing.targetSelectionRange));\n}\n/**\n * @internal\n */\nexport var SymbolKinds;\n(function (SymbolKinds) {\n    const byKind = new Map();\n    byKind.set(0 /* File */, Codicon.symbolFile);\n    byKind.set(1 /* Module */, Codicon.symbolModule);\n    byKind.set(2 /* Namespace */, Codicon.symbolNamespace);\n    byKind.set(3 /* Package */, Codicon.symbolPackage);\n    byKind.set(4 /* Class */, Codicon.symbolClass);\n    byKind.set(5 /* Method */, Codicon.symbolMethod);\n    byKind.set(6 /* Property */, Codicon.symbolProperty);\n    byKind.set(7 /* Field */, Codicon.symbolField);\n    byKind.set(8 /* Constructor */, Codicon.symbolConstructor);\n    byKind.set(9 /* Enum */, Codicon.symbolEnum);\n    byKind.set(10 /* Interface */, Codicon.symbolInterface);\n    byKind.set(11 /* Function */, Codicon.symbolFunction);\n    byKind.set(12 /* Variable */, Codicon.symbolVariable);\n    byKind.set(13 /* Constant */, Codicon.symbolConstant);\n    byKind.set(14 /* String */, Codicon.symbolString);\n    byKind.set(15 /* Number */, Codicon.symbolNumber);\n    byKind.set(16 /* Boolean */, Codicon.symbolBoolean);\n    byKind.set(17 /* Array */, Codicon.symbolArray);\n    byKind.set(18 /* Object */, Codicon.symbolObject);\n    byKind.set(19 /* Key */, Codicon.symbolKey);\n    byKind.set(20 /* Null */, Codicon.symbolNull);\n    byKind.set(21 /* EnumMember */, Codicon.symbolEnumMember);\n    byKind.set(22 /* Struct */, Codicon.symbolStruct);\n    byKind.set(23 /* Event */, Codicon.symbolEvent);\n    byKind.set(24 /* Operator */, Codicon.symbolOperator);\n    byKind.set(25 /* TypeParameter */, Codicon.symbolTypeParameter);\n    /**\n     * @internal\n     */\n    function toIcon(kind) {\n        let icon = byKind.get(kind);\n        if (!icon) {\n            console.info('No codicon found for SymbolKind ' + kind);\n            icon = Codicon.symbolProperty;\n        }\n        return icon;\n    }\n    SymbolKinds.toIcon = toIcon;\n})(SymbolKinds || (SymbolKinds = {}));\nexport class FoldingRangeKind {\n    /**\n     * Creates a new {@link FoldingRangeKind}.\n     *\n     * @param value of the kind.\n     */\n    constructor(value) {\n        this.value = value;\n    }\n}\n/**\n * Kind for folding range representing a comment. The value of the kind is 'comment'.\n */\nFoldingRangeKind.Comment = new FoldingRangeKind('comment');\n/**\n * Kind for folding range representing a import. The value of the kind is 'imports'.\n */\nFoldingRangeKind.Imports = new FoldingRangeKind('imports');\n/**\n * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).\n * The value of the kind is 'region'.\n */\nFoldingRangeKind.Region = new FoldingRangeKind('region');\n/**\n * @internal\n */\nexport var Command;\n(function (Command) {\n    /**\n     * @internal\n     */\n    function is(obj) {\n        if (!obj || typeof obj !== 'object') {\n            return false;\n        }\n        return typeof obj.id === 'string' &&\n            typeof obj.title === 'string';\n    }\n    Command.is = is;\n})(Command || (Command = {}));\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    InlayHintKind[InlayHintKind[\"Type\"] = 1] = \"Type\";\n    InlayHintKind[InlayHintKind[\"Parameter\"] = 2] = \"Parameter\";\n})(InlayHintKind || (InlayHintKind = {}));\n/**\n * @internal\n */\nexport const TokenizationRegistry = new TokenizationRegistryImpl();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const ILanguageService = createDecorator('languageService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nexport var IndentAction;\n(function (IndentAction) {\n    /**\n     * Insert new line and copy the previous line's indentation.\n     */\n    IndentAction[IndentAction[\"None\"] = 0] = \"None\";\n    /**\n     * Insert new line and indent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\n    /**\n     * Insert two new lines:\n     *  - the first one indented which will hold the cursor\n     *  - the second one at the same indentation level\n     */\n    IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\n    /**\n     * Insert new line and outdent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\n})(IndentAction || (IndentAction = {}));\n/**\n * @internal\n */\nexport class StandardAutoClosingPairConditional {\n    constructor(source) {\n        this._neutralCharacter = null;\n        this._neutralCharacterSearched = false;\n        this.open = source.open;\n        this.close = source.close;\n        // initially allowed in all tokens\n        this._inString = true;\n        this._inComment = true;\n        this._inRegEx = true;\n        if (Array.isArray(source.notIn)) {\n            for (let i = 0, len = source.notIn.length; i < len; i++) {\n                const notIn = source.notIn[i];\n                switch (notIn) {\n                    case 'string':\n                        this._inString = false;\n                        break;\n                    case 'comment':\n                        this._inComment = false;\n                        break;\n                    case 'regex':\n                        this._inRegEx = false;\n                        break;\n                }\n            }\n        }\n    }\n    isOK(standardToken) {\n        switch (standardToken) {\n            case 0 /* Other */:\n                return true;\n            case 1 /* Comment */:\n                return this._inComment;\n            case 2 /* String */:\n                return this._inString;\n            case 3 /* RegEx */:\n                return this._inRegEx;\n        }\n    }\n    shouldAutoClose(context, column) {\n        // Always complete on empty line\n        if (context.getTokenCount() === 0) {\n            return true;\n        }\n        const tokenIndex = context.findTokenIndexAtOffset(column - 2);\n        const standardTokenType = context.getStandardTokenType(tokenIndex);\n        return this.isOK(standardTokenType);\n    }\n    _findNeutralCharacterInRange(fromCharCode, toCharCode) {\n        for (let charCode = fromCharCode; charCode <= toCharCode; charCode++) {\n            const character = String.fromCharCode(charCode);\n            if (!this.open.includes(character) && !this.close.includes(character)) {\n                return character;\n            }\n        }\n        return null;\n    }\n    /**\n     * Find a character in the range [0-9a-zA-Z] that does not appear in the open or close\n     */\n    findNeutralCharacter() {\n        if (!this._neutralCharacterSearched) {\n            this._neutralCharacterSearched = true;\n            if (!this._neutralCharacter) {\n                this._neutralCharacter = this._findNeutralCharacterInRange(48 /* Digit0 */, 57 /* Digit9 */);\n            }\n            if (!this._neutralCharacter) {\n                this._neutralCharacter = this._findNeutralCharacterInRange(97 /* a */, 122 /* z */);\n            }\n            if (!this._neutralCharacter) {\n                this._neutralCharacter = this._findNeutralCharacterInRange(65 /* A */, 90 /* Z */);\n            }\n        }\n        return this._neutralCharacter;\n    }\n}\n/**\n * @internal\n */\nexport class AutoClosingPairs {\n    constructor(autoClosingPairs) {\n        this.autoClosingPairsOpenByStart = new Map();\n        this.autoClosingPairsOpenByEnd = new Map();\n        this.autoClosingPairsCloseByStart = new Map();\n        this.autoClosingPairsCloseByEnd = new Map();\n        this.autoClosingPairsCloseSingleChar = new Map();\n        for (const pair of autoClosingPairs) {\n            appendEntry(this.autoClosingPairsOpenByStart, pair.open.charAt(0), pair);\n            appendEntry(this.autoClosingPairsOpenByEnd, pair.open.charAt(pair.open.length - 1), pair);\n            appendEntry(this.autoClosingPairsCloseByStart, pair.close.charAt(0), pair);\n            appendEntry(this.autoClosingPairsCloseByEnd, pair.close.charAt(pair.close.length - 1), pair);\n            if (pair.close.length === 1 && pair.open.length === 1) {\n                appendEntry(this.autoClosingPairsCloseSingleChar, pair.close, pair);\n            }\n        }\n    }\n}\nfunction appendEntry(target, key, value) {\n    if (target.has(key)) {\n        target.get(key).push(value);\n    }\n    else {\n        target.set(key, [value]);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\nexport class CharacterPairSupport {\n    constructor(config) {\n        if (config.autoClosingPairs) {\n            this._autoClosingPairs = config.autoClosingPairs.map(el => new StandardAutoClosingPairConditional(el));\n        }\n        else if (config.brackets) {\n            this._autoClosingPairs = config.brackets.map(b => new StandardAutoClosingPairConditional({ open: b[0], close: b[1] }));\n        }\n        else {\n            this._autoClosingPairs = [];\n        }\n        if (config.colorizedBracketPairs) {\n            this._colorizedBracketPairs = filterValidBrackets(config.colorizedBracketPairs.map(b => [b[0], b[1]]));\n        }\n        else if (config.brackets) {\n            this._colorizedBracketPairs = filterValidBrackets(config.brackets\n                .map((b) => [b[0], b[1]])\n                // Many languages set < ... > as bracket pair, even though they also use it as comparison operator.\n                // This leads to problems when colorizing this bracket, so we exclude it by default.\n                // Languages can still override this by configuring `colorizedBracketPairs`\n                // https://github.com/microsoft/vscode/issues/132476\n                .filter((p) => !(p[0] === '<' && p[1] === '>')));\n        }\n        else {\n            this._colorizedBracketPairs = [];\n        }\n        if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\n            const docComment = config.__electricCharacterSupport.docComment;\n            // IDocComment is legacy, only partially supported\n            this._autoClosingPairs.push(new StandardAutoClosingPairConditional({ open: docComment.open, close: docComment.close || '' }));\n        }\n        this._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\n        this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n    }\n    getAutoClosingPairs() {\n        return this._autoClosingPairs;\n    }\n    getAutoCloseBeforeSet() {\n        return this._autoCloseBefore;\n    }\n    getSurroundingPairs() {\n        return this._surroundingPairs;\n    }\n    getColorizedBrackets() {\n        return this._colorizedBracketPairs;\n    }\n}\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';\nfunction filterValidBrackets(bracketPairs) {\n    return bracketPairs.filter(([open, close]) => open !== '' && close !== '');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { ignoreBracketsInToken } from '../supports.js';\nimport { BracketsUtils } from './richEditBrackets.js';\nexport class BracketElectricCharacterSupport {\n    constructor(richEditBrackets) {\n        this._richEditBrackets = richEditBrackets;\n    }\n    getElectricCharacters() {\n        const result = [];\n        if (this._richEditBrackets) {\n            for (const bracket of this._richEditBrackets.brackets) {\n                for (const close of bracket.close) {\n                    const lastChar = close.charAt(close.length - 1);\n                    result.push(lastChar);\n                }\n            }\n        }\n        return distinct(result);\n    }\n    onElectricCharacter(character, context, column) {\n        if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n            return null;\n        }\n        const tokenIndex = context.findTokenIndexAtOffset(column - 1);\n        if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n            return null;\n        }\n        const reversedBracketRegex = this._richEditBrackets.reversedRegex;\n        const text = context.getLineContent().substring(0, column - 1) + character;\n        const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\n        if (!r) {\n            return null;\n        }\n        const bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n        const isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n        if (isOpen) {\n            return null;\n        }\n        const textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\n        if (!/^\\s*$/.test(textBeforeBracket)) {\n            // There is other text on the line before the bracket\n            return null;\n        }\n        return {\n            matchOpenBracket: bracketText\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction resetGlobalRegex(reg) {\n    if (reg.global) {\n        reg.lastIndex = 0;\n    }\n    return true;\n}\nexport class IndentRulesSupport {\n    constructor(indentationRules) {\n        this._indentationRules = indentationRules;\n    }\n    shouldIncrease(text) {\n        if (this._indentationRules) {\n            if (this._indentationRules.increaseIndentPattern && resetGlobalRegex(this._indentationRules.increaseIndentPattern) && this._indentationRules.increaseIndentPattern.test(text)) {\n                return true;\n            }\n            // if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n            // \treturn true;\n            // }\n        }\n        return false;\n    }\n    shouldDecrease(text) {\n        if (this._indentationRules && this._indentationRules.decreaseIndentPattern && resetGlobalRegex(this._indentationRules.decreaseIndentPattern) && this._indentationRules.decreaseIndentPattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    shouldIndentNextLine(text) {\n        if (this._indentationRules && this._indentationRules.indentNextLinePattern && resetGlobalRegex(this._indentationRules.indentNextLinePattern) && this._indentationRules.indentNextLinePattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    shouldIgnore(text) {\n        // the text matches `unIndentedLinePattern`\n        if (this._indentationRules && this._indentationRules.unIndentedLinePattern && resetGlobalRegex(this._indentationRules.unIndentedLinePattern) && this._indentationRules.unIndentedLinePattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    getIndentMetadata(text) {\n        let ret = 0;\n        if (this.shouldIncrease(text)) {\n            ret += 1 /* INCREASE_MASK */;\n        }\n        if (this.shouldDecrease(text)) {\n            ret += 2 /* DECREASE_MASK */;\n        }\n        if (this.shouldIndentNextLine(text)) {\n            ret += 4 /* INDENT_NEXTLINE_MASK */;\n        }\n        if (this.shouldIgnore(text)) {\n            ret += 8 /* UNINDENT_MASK */;\n        }\n        return ret;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { IndentAction } from '../languageConfiguration.js';\nexport class OnEnterSupport {\n    constructor(opts) {\n        opts = opts || {};\n        opts.brackets = opts.brackets || [\n            ['(', ')'],\n            ['{', '}'],\n            ['[', ']']\n        ];\n        this._brackets = [];\n        opts.brackets.forEach((bracket) => {\n            const openRegExp = OnEnterSupport._createOpenBracketRegExp(bracket[0]);\n            const closeRegExp = OnEnterSupport._createCloseBracketRegExp(bracket[1]);\n            if (openRegExp && closeRegExp) {\n                this._brackets.push({\n                    open: bracket[0],\n                    openRegExp: openRegExp,\n                    close: bracket[1],\n                    closeRegExp: closeRegExp,\n                });\n            }\n        });\n        this._regExpRules = opts.onEnterRules || [];\n    }\n    onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText) {\n        // (1): `regExpRules`\n        if (autoIndent >= 3 /* Advanced */) {\n            for (let i = 0, len = this._regExpRules.length; i < len; i++) {\n                const rule = this._regExpRules[i];\n                const regResult = [{\n                        reg: rule.beforeText,\n                        text: beforeEnterText\n                    }, {\n                        reg: rule.afterText,\n                        text: afterEnterText\n                    }, {\n                        reg: rule.previousLineText,\n                        text: previousLineText\n                    }].every((obj) => {\n                    if (!obj.reg) {\n                        return true;\n                    }\n                    obj.reg.lastIndex = 0; // To disable the effect of the \"g\" flag.\n                    return obj.reg.test(obj.text);\n                });\n                if (regResult) {\n                    return rule.action;\n                }\n            }\n        }\n        // (2): Special indent-outdent\n        if (autoIndent >= 2 /* Brackets */) {\n            if (beforeEnterText.length > 0 && afterEnterText.length > 0) {\n                for (let i = 0, len = this._brackets.length; i < len; i++) {\n                    const bracket = this._brackets[i];\n                    if (bracket.openRegExp.test(beforeEnterText) && bracket.closeRegExp.test(afterEnterText)) {\n                        return { indentAction: IndentAction.IndentOutdent };\n                    }\n                }\n            }\n        }\n        // (4): Open bracket based logic\n        if (autoIndent >= 2 /* Brackets */) {\n            if (beforeEnterText.length > 0) {\n                for (let i = 0, len = this._brackets.length; i < len; i++) {\n                    const bracket = this._brackets[i];\n                    if (bracket.openRegExp.test(beforeEnterText)) {\n                        return { indentAction: IndentAction.Indent };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    static _createOpenBracketRegExp(bracket) {\n        let str = strings.escapeRegExpCharacters(bracket);\n        if (!/\\B/.test(str.charAt(0))) {\n            str = '\\\\b' + str;\n        }\n        str += '\\\\s*$';\n        return OnEnterSupport._safeRegExp(str);\n    }\n    static _createCloseBracketRegExp(bracket) {\n        let str = strings.escapeRegExpCharacters(bracket);\n        if (!/\\B/.test(str.charAt(str.length - 1))) {\n            str = str + '\\\\b';\n        }\n        str = '^\\\\s*' + str;\n        return OnEnterSupport._safeRegExp(str);\n    }\n    static _safeRegExp(def) {\n        try {\n            return new RegExp(def);\n        }\n        catch (err) {\n            onUnexpectedError(err);\n            return null;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { DEFAULT_WORD_REGEXP, ensureValidWordDefinition } from '../core/wordHelper.js';\nimport { IndentAction, AutoClosingPairs } from './languageConfiguration.js';\nimport { createScopedLineTokens } from './supports.js';\nimport { CharacterPairSupport } from './supports/characterPair.js';\nimport { BracketElectricCharacterSupport } from './supports/electricCharacter.js';\nimport { IndentRulesSupport } from './supports/indentRules.js';\nimport { OnEnterSupport } from './supports/onEnter.js';\nimport { RichEditBrackets } from './supports/richEditBrackets.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { ILanguageService } from './language.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nexport class LanguageConfigurationServiceChangeEvent {\n    constructor(languageId) {\n        this.languageId = languageId;\n    }\n    affects(languageId) {\n        return !this.languageId ? true : this.languageId === languageId;\n    }\n}\nexport const ILanguageConfigurationService = createDecorator('languageConfigurationService');\nlet LanguageConfigurationService = class LanguageConfigurationService extends Disposable {\n    constructor(configurationService, languageService) {\n        super();\n        this.configurationService = configurationService;\n        this.languageService = languageService;\n        this.onDidChangeEmitter = this._register(new Emitter());\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.configurations = new Map();\n        const languageConfigKeys = new Set(Object.values(customizedLanguageConfigKeys));\n        this._register(this.configurationService.onDidChangeConfiguration((e) => {\n            const globalConfigChanged = e.change.keys.some((k) => languageConfigKeys.has(k));\n            const localConfigChanged = e.change.overrides\n                .filter(([overrideLangName, keys]) => keys.some((k) => languageConfigKeys.has(k)))\n                .map(([overrideLangName]) => overrideLangName);\n            if (globalConfigChanged) {\n                this.configurations.clear();\n                this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(undefined));\n            }\n            else {\n                for (const languageId of localConfigChanged) {\n                    if (this.languageService.isRegisteredLanguageId(languageId)) {\n                        this.configurations.delete(languageId);\n                        this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(languageId));\n                    }\n                }\n            }\n        }));\n        this._register(LanguageConfigurationRegistry.onDidChange((e) => {\n            this.configurations.delete(e.languageId);\n            this.onDidChangeEmitter.fire(new LanguageConfigurationServiceChangeEvent(e.languageId));\n        }));\n    }\n    getLanguageConfiguration(languageId) {\n        let result = this.configurations.get(languageId);\n        if (!result) {\n            result = computeConfig(languageId, this.configurationService, this.languageService);\n            this.configurations.set(languageId, result);\n        }\n        return result;\n    }\n};\nLanguageConfigurationService = __decorate([\n    __param(0, IConfigurationService),\n    __param(1, ILanguageService)\n], LanguageConfigurationService);\nexport { LanguageConfigurationService };\nfunction computeConfig(languageId, configurationService, languageService) {\n    let languageConfig = LanguageConfigurationRegistry.getLanguageConfiguration(languageId);\n    if (!languageConfig) {\n        if (!languageService.isRegisteredLanguageId(languageId)) {\n            throw new Error(`Language id \"${languageId}\" is not configured nor known`);\n        }\n        languageConfig = new ResolvedLanguageConfiguration(languageId, {});\n    }\n    const customizedConfig = getCustomizedLanguageConfig(languageConfig.languageId, configurationService);\n    const data = combineLanguageConfigurations([languageConfig.underlyingConfig, customizedConfig]);\n    const config = new ResolvedLanguageConfiguration(languageConfig.languageId, data);\n    return config;\n}\nconst customizedLanguageConfigKeys = {\n    brackets: 'editor.language.brackets',\n    colorizedBracketPairs: 'editor.language.colorizedBracketPairs'\n};\nfunction getCustomizedLanguageConfig(languageId, configurationService) {\n    const brackets = configurationService.getValue(customizedLanguageConfigKeys.brackets, {\n        overrideIdentifier: languageId,\n    });\n    const colorizedBracketPairs = configurationService.getValue(customizedLanguageConfigKeys.colorizedBracketPairs, {\n        overrideIdentifier: languageId,\n    });\n    return {\n        brackets: validateBracketPairs(brackets),\n        colorizedBracketPairs: validateBracketPairs(colorizedBracketPairs),\n    };\n}\nfunction validateBracketPairs(data) {\n    if (!Array.isArray(data)) {\n        return undefined;\n    }\n    return data.map(pair => {\n        if (!Array.isArray(pair) || pair.length !== 2) {\n            return undefined;\n        }\n        return [pair[0], pair[1]];\n    }).filter((p) => !!p);\n}\nexport class LanguageConfigurationChangeEvent {\n    constructor(languageId) {\n        this.languageId = languageId;\n    }\n}\nexport class LanguageConfigurationRegistryImpl {\n    constructor() {\n        this._entries = new Map();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n    }\n    /**\n     * @param priority Use a higher number for higher priority\n     */\n    register(languageId, configuration, priority = 0) {\n        let entries = this._entries.get(languageId);\n        if (!entries) {\n            entries = new ComposedLanguageConfiguration(languageId);\n            this._entries.set(languageId, entries);\n        }\n        const disposable = entries.register(configuration, priority);\n        this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageId));\n        return toDisposable(() => {\n            disposable.dispose();\n            this._onDidChange.fire(new LanguageConfigurationChangeEvent(languageId));\n        });\n    }\n    getLanguageConfiguration(languageId) {\n        const entries = this._entries.get(languageId);\n        return (entries === null || entries === void 0 ? void 0 : entries.getResolvedConfiguration()) || null;\n    }\n    getComments(languageId) {\n        const value = this.getLanguageConfiguration(languageId);\n        if (!value) {\n            return null;\n        }\n        return value.comments || null;\n    }\n    // begin Indent Rules\n    getIndentRulesSupport(languageId) {\n        const value = this.getLanguageConfiguration(languageId);\n        if (!value) {\n            return null;\n        }\n        return value.indentRulesSupport || null;\n    }\n    /**\n     * Get nearest preceding line which doesn't match unIndentPattern or contains all whitespace.\n     * Result:\n     * -1: run into the boundary of embedded languages\n     * 0: every line above are invalid\n     * else: nearest preceding line of the same language\n     */\n    getPrecedingValidLine(model, lineNumber, indentRulesSupport) {\n        const languageId = model.getLanguageIdAtPosition(lineNumber, 0);\n        if (lineNumber > 1) {\n            let lastLineNumber;\n            let resultLineNumber = -1;\n            for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n                if (model.getLanguageIdAtPosition(lastLineNumber, 0) !== languageId) {\n                    return resultLineNumber;\n                }\n                const text = model.getLineContent(lastLineNumber);\n                if (indentRulesSupport.shouldIgnore(text) || /^\\s+$/.test(text) || text === '') {\n                    resultLineNumber = lastLineNumber;\n                    continue;\n                }\n                return lastLineNumber;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Get inherited indentation from above lines.\n     * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.\n     * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.\n     * 3. If this line doesn't match any indent rules\n     *   a. check whether the line above it matches indentNextLinePattern\n     *   b. If not, the indent level of this line is the result\n     *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).\n     * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`\n     *\n     * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.\n     */\n    getInheritIndentForLine(autoIndent, model, lineNumber, honorIntentialIndent = true) {\n        if (autoIndent < 4 /* Full */) {\n            return null;\n        }\n        const indentRulesSupport = this.getIndentRulesSupport(model.getLanguageId());\n        if (!indentRulesSupport) {\n            return null;\n        }\n        if (lineNumber <= 1) {\n            return {\n                indentation: '',\n                action: null\n            };\n        }\n        const precedingUnIgnoredLine = this.getPrecedingValidLine(model, lineNumber, indentRulesSupport);\n        if (precedingUnIgnoredLine < 0) {\n            return null;\n        }\n        else if (precedingUnIgnoredLine < 1) {\n            return {\n                indentation: '',\n                action: null\n            };\n        }\n        const precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\n        if (indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent) || indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent)) {\n            return {\n                indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n                action: IndentAction.Indent,\n                line: precedingUnIgnoredLine\n            };\n        }\n        else if (indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent)) {\n            return {\n                indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n                action: null,\n                line: precedingUnIgnoredLine\n            };\n        }\n        else {\n            // precedingUnIgnoredLine can not be ignored.\n            // it doesn't increase indent of following lines\n            // it doesn't increase just next line\n            // so current line is not affect by precedingUnIgnoredLine\n            // and then we should get a correct inheritted indentation from above lines\n            if (precedingUnIgnoredLine === 1) {\n                return {\n                    indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n                    action: null,\n                    line: precedingUnIgnoredLine\n                };\n            }\n            const previousLine = precedingUnIgnoredLine - 1;\n            const previousLineIndentMetadata = indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));\n            if (!(previousLineIndentMetadata & (1 /* INCREASE_MASK */ | 2 /* DECREASE_MASK */)) &&\n                (previousLineIndentMetadata & 4 /* INDENT_NEXTLINE_MASK */)) {\n                let stopLine = 0;\n                for (let i = previousLine - 1; i > 0; i--) {\n                    if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n                        continue;\n                    }\n                    stopLine = i;\n                    break;\n                }\n                return {\n                    indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n                    action: null,\n                    line: stopLine + 1\n                };\n            }\n            if (honorIntentialIndent) {\n                return {\n                    indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n                    action: null,\n                    line: precedingUnIgnoredLine\n                };\n            }\n            else {\n                // search from precedingUnIgnoredLine until we find one whose indent is not temporary\n                for (let i = precedingUnIgnoredLine; i > 0; i--) {\n                    const lineContent = model.getLineContent(i);\n                    if (indentRulesSupport.shouldIncrease(lineContent)) {\n                        return {\n                            indentation: strings.getLeadingWhitespace(lineContent),\n                            action: IndentAction.Indent,\n                            line: i\n                        };\n                    }\n                    else if (indentRulesSupport.shouldIndentNextLine(lineContent)) {\n                        let stopLine = 0;\n                        for (let j = i - 1; j > 0; j--) {\n                            if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n                                continue;\n                            }\n                            stopLine = j;\n                            break;\n                        }\n                        return {\n                            indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n                            action: null,\n                            line: stopLine + 1\n                        };\n                    }\n                    else if (indentRulesSupport.shouldDecrease(lineContent)) {\n                        return {\n                            indentation: strings.getLeadingWhitespace(lineContent),\n                            action: null,\n                            line: i\n                        };\n                    }\n                }\n                return {\n                    indentation: strings.getLeadingWhitespace(model.getLineContent(1)),\n                    action: null,\n                    line: 1\n                };\n            }\n        }\n    }\n    getGoodIndentForLine(autoIndent, virtualModel, languageId, lineNumber, indentConverter) {\n        if (autoIndent < 4 /* Full */) {\n            return null;\n        }\n        const richEditSupport = this.getLanguageConfiguration(languageId);\n        if (!richEditSupport) {\n            return null;\n        }\n        const indentRulesSupport = this.getIndentRulesSupport(languageId);\n        if (!indentRulesSupport) {\n            return null;\n        }\n        const indent = this.getInheritIndentForLine(autoIndent, virtualModel, lineNumber);\n        const lineContent = virtualModel.getLineContent(lineNumber);\n        if (indent) {\n            const inheritLine = indent.line;\n            if (inheritLine !== undefined) {\n                const enterResult = richEditSupport.onEnter(autoIndent, '', virtualModel.getLineContent(inheritLine), '');\n                if (enterResult) {\n                    let indentation = strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));\n                    if (enterResult.removeText) {\n                        indentation = indentation.substring(0, indentation.length - enterResult.removeText);\n                    }\n                    if ((enterResult.indentAction === IndentAction.Indent) ||\n                        (enterResult.indentAction === IndentAction.IndentOutdent)) {\n                        indentation = indentConverter.shiftIndent(indentation);\n                    }\n                    else if (enterResult.indentAction === IndentAction.Outdent) {\n                        indentation = indentConverter.unshiftIndent(indentation);\n                    }\n                    if (indentRulesSupport.shouldDecrease(lineContent)) {\n                        indentation = indentConverter.unshiftIndent(indentation);\n                    }\n                    if (enterResult.appendText) {\n                        indentation += enterResult.appendText;\n                    }\n                    return strings.getLeadingWhitespace(indentation);\n                }\n            }\n            if (indentRulesSupport.shouldDecrease(lineContent)) {\n                if (indent.action === IndentAction.Indent) {\n                    return indent.indentation;\n                }\n                else {\n                    return indentConverter.unshiftIndent(indent.indentation);\n                }\n            }\n            else {\n                if (indent.action === IndentAction.Indent) {\n                    return indentConverter.shiftIndent(indent.indentation);\n                }\n                else {\n                    return indent.indentation;\n                }\n            }\n        }\n        return null;\n    }\n    getIndentForEnter(autoIndent, model, range, indentConverter) {\n        if (autoIndent < 4 /* Full */) {\n            return null;\n        }\n        model.forceTokenization(range.startLineNumber);\n        const lineTokens = model.getLineTokens(range.startLineNumber);\n        const scopedLineTokens = createScopedLineTokens(lineTokens, range.startColumn - 1);\n        const scopedLineText = scopedLineTokens.getLineContent();\n        let embeddedLanguage = false;\n        let beforeEnterText;\n        if (scopedLineTokens.firstCharOffset > 0 && lineTokens.getLanguageId(0) !== scopedLineTokens.languageId) {\n            // we are in the embeded language content\n            embeddedLanguage = true; // if embeddedLanguage is true, then we don't touch the indentation of current line\n            beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n        }\n        else {\n            beforeEnterText = lineTokens.getLineContent().substring(0, range.startColumn - 1);\n        }\n        let afterEnterText;\n        if (range.isEmpty()) {\n            afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n        }\n        else {\n            const endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n            afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n        }\n        const indentRulesSupport = this.getIndentRulesSupport(scopedLineTokens.languageId);\n        if (!indentRulesSupport) {\n            return null;\n        }\n        const beforeEnterResult = beforeEnterText;\n        const beforeEnterIndent = strings.getLeadingWhitespace(beforeEnterText);\n        const virtualModel = {\n            getLineTokens: (lineNumber) => {\n                return model.getLineTokens(lineNumber);\n            },\n            getLanguageId: () => {\n                return model.getLanguageId();\n            },\n            getLanguageIdAtPosition: (lineNumber, column) => {\n                return model.getLanguageIdAtPosition(lineNumber, column);\n            },\n            getLineContent: (lineNumber) => {\n                if (lineNumber === range.startLineNumber) {\n                    return beforeEnterResult;\n                }\n                else {\n                    return model.getLineContent(lineNumber);\n                }\n            }\n        };\n        const currentLineIndent = strings.getLeadingWhitespace(lineTokens.getLineContent());\n        const afterEnterAction = this.getInheritIndentForLine(autoIndent, virtualModel, range.startLineNumber + 1);\n        if (!afterEnterAction) {\n            const beforeEnter = embeddedLanguage ? currentLineIndent : beforeEnterIndent;\n            return {\n                beforeEnter: beforeEnter,\n                afterEnter: beforeEnter\n            };\n        }\n        let afterEnterIndent = embeddedLanguage ? currentLineIndent : afterEnterAction.indentation;\n        if (afterEnterAction.action === IndentAction.Indent) {\n            afterEnterIndent = indentConverter.shiftIndent(afterEnterIndent);\n        }\n        if (indentRulesSupport.shouldDecrease(afterEnterText)) {\n            afterEnterIndent = indentConverter.unshiftIndent(afterEnterIndent);\n        }\n        return {\n            beforeEnter: embeddedLanguage ? currentLineIndent : beforeEnterIndent,\n            afterEnter: afterEnterIndent\n        };\n    }\n    /**\n     * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of\n     * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.\n     */\n    getIndentActionForType(autoIndent, model, range, ch, indentConverter) {\n        if (autoIndent < 4 /* Full */) {\n            return null;\n        }\n        const scopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n        if (scopedLineTokens.firstCharOffset) {\n            // this line has mixed languages and indentation rules will not work\n            return null;\n        }\n        const indentRulesSupport = this.getIndentRulesSupport(scopedLineTokens.languageId);\n        if (!indentRulesSupport) {\n            return null;\n        }\n        const scopedLineText = scopedLineTokens.getLineContent();\n        const beforeTypeText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n        // selection support\n        let afterTypeText;\n        if (range.isEmpty()) {\n            afterTypeText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n        }\n        else {\n            const endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n            afterTypeText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n        }\n        // If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted\n        // Users might change the indentation by purpose and we should honor that instead of readjusting.\n        if (!indentRulesSupport.shouldDecrease(beforeTypeText + afterTypeText) && indentRulesSupport.shouldDecrease(beforeTypeText + ch + afterTypeText)) {\n            // after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.\n            // 1. Get inherited indent action\n            const r = this.getInheritIndentForLine(autoIndent, model, range.startLineNumber, false);\n            if (!r) {\n                return null;\n            }\n            let indentation = r.indentation;\n            if (r.action !== IndentAction.Indent) {\n                indentation = indentConverter.unshiftIndent(indentation);\n            }\n            return indentation;\n        }\n        return null;\n    }\n    getIndentMetadata(model, lineNumber) {\n        const indentRulesSupport = this.getIndentRulesSupport(model.getLanguageId());\n        if (!indentRulesSupport) {\n            return null;\n        }\n        if (lineNumber < 1 || lineNumber > model.getLineCount()) {\n            return null;\n        }\n        return indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber));\n    }\n    // end Indent Rules\n    // begin onEnter\n    getEnterAction(autoIndent, model, range) {\n        const scopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n        const richEditSupport = this.getLanguageConfiguration(scopedLineTokens.languageId);\n        if (!richEditSupport) {\n            return null;\n        }\n        const scopedLineText = scopedLineTokens.getLineContent();\n        const beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n        // selection support\n        let afterEnterText;\n        if (range.isEmpty()) {\n            afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n        }\n        else {\n            const endScopedLineTokens = this.getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n            afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n        }\n        let previousLineText = '';\n        if (range.startLineNumber > 1 && scopedLineTokens.firstCharOffset === 0) {\n            // This is not the first line and the entire line belongs to this mode\n            const oneLineAboveScopedLineTokens = this.getScopedLineTokens(model, range.startLineNumber - 1);\n            if (oneLineAboveScopedLineTokens.languageId === scopedLineTokens.languageId) {\n                // The line above ends with text belonging to the same mode\n                previousLineText = oneLineAboveScopedLineTokens.getLineContent();\n            }\n        }\n        const enterResult = richEditSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n        if (!enterResult) {\n            return null;\n        }\n        const indentAction = enterResult.indentAction;\n        let appendText = enterResult.appendText;\n        const removeText = enterResult.removeText || 0;\n        // Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n        if (!appendText) {\n            if ((indentAction === IndentAction.Indent) ||\n                (indentAction === IndentAction.IndentOutdent)) {\n                appendText = '\\t';\n            }\n            else {\n                appendText = '';\n            }\n        }\n        else if (indentAction === IndentAction.Indent) {\n            appendText = '\\t' + appendText;\n        }\n        let indentation = this.getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n        if (removeText) {\n            indentation = indentation.substring(0, indentation.length - removeText);\n        }\n        return {\n            indentAction: indentAction,\n            appendText: appendText,\n            removeText: removeText,\n            indentation: indentation\n        };\n    }\n    getIndentationAtPosition(model, lineNumber, column) {\n        const lineText = model.getLineContent(lineNumber);\n        let indentation = strings.getLeadingWhitespace(lineText);\n        if (indentation.length > column - 1) {\n            indentation = indentation.substring(0, column - 1);\n        }\n        return indentation;\n    }\n    getScopedLineTokens(model, lineNumber, columnNumber) {\n        model.forceTokenization(lineNumber);\n        const lineTokens = model.getLineTokens(lineNumber);\n        const column = (typeof columnNumber === 'undefined' ? model.getLineMaxColumn(lineNumber) - 1 : columnNumber - 1);\n        return createScopedLineTokens(lineTokens, column);\n    }\n}\n/**\n * @deprecated Use ILanguageConfigurationService instead.\n*/\nexport const LanguageConfigurationRegistry = new LanguageConfigurationRegistryImpl();\nclass ComposedLanguageConfiguration {\n    constructor(languageId) {\n        this.languageId = languageId;\n        this._resolved = null;\n        this._entries = [];\n        this._order = 0;\n        this._resolved = null;\n    }\n    register(configuration, priority) {\n        const entry = new LanguageConfigurationContribution(configuration, priority, ++this._order);\n        this._entries.push(entry);\n        this._resolved = null;\n        return toDisposable(() => {\n            for (let i = 0; i < this._entries.length; i++) {\n                if (this._entries[i] === entry) {\n                    this._entries.splice(i, 1);\n                    this._resolved = null;\n                    break;\n                }\n            }\n        });\n    }\n    getResolvedConfiguration() {\n        if (!this._resolved) {\n            const config = this._resolve();\n            if (config) {\n                this._resolved = new ResolvedLanguageConfiguration(this.languageId, config);\n            }\n        }\n        return this._resolved;\n    }\n    _resolve() {\n        if (this._entries.length === 0) {\n            return null;\n        }\n        this._entries.sort(LanguageConfigurationContribution.cmp);\n        return combineLanguageConfigurations(this._entries.map(e => e.configuration));\n    }\n}\nfunction combineLanguageConfigurations(configs) {\n    let result = {\n        comments: undefined,\n        brackets: undefined,\n        wordPattern: undefined,\n        indentationRules: undefined,\n        onEnterRules: undefined,\n        autoClosingPairs: undefined,\n        surroundingPairs: undefined,\n        autoCloseBefore: undefined,\n        folding: undefined,\n        colorizedBracketPairs: undefined,\n        __electricCharacterSupport: undefined,\n    };\n    for (const entry of configs) {\n        result = {\n            comments: entry.comments || result.comments,\n            brackets: entry.brackets || result.brackets,\n            wordPattern: entry.wordPattern || result.wordPattern,\n            indentationRules: entry.indentationRules || result.indentationRules,\n            onEnterRules: entry.onEnterRules || result.onEnterRules,\n            autoClosingPairs: entry.autoClosingPairs || result.autoClosingPairs,\n            surroundingPairs: entry.surroundingPairs || result.surroundingPairs,\n            autoCloseBefore: entry.autoCloseBefore || result.autoCloseBefore,\n            folding: entry.folding || result.folding,\n            colorizedBracketPairs: entry.colorizedBracketPairs || result.colorizedBracketPairs,\n            __electricCharacterSupport: entry.__electricCharacterSupport || result.__electricCharacterSupport,\n        };\n    }\n    return result;\n}\nclass LanguageConfigurationContribution {\n    constructor(configuration, priority, order) {\n        this.configuration = configuration;\n        this.priority = priority;\n        this.order = order;\n    }\n    static cmp(a, b) {\n        if (a.priority === b.priority) {\n            // higher order last\n            return a.order - b.order;\n        }\n        // higher priority last\n        return a.priority - b.priority;\n    }\n}\n/**\n * Immutable.\n*/\nexport class ResolvedLanguageConfiguration {\n    constructor(languageId, underlyingConfig) {\n        this.languageId = languageId;\n        this.underlyingConfig = underlyingConfig;\n        this._brackets = null;\n        this._electricCharacter = null;\n        this._onEnterSupport =\n            this.underlyingConfig.brackets ||\n                this.underlyingConfig.indentationRules ||\n                this.underlyingConfig.onEnterRules\n                ? new OnEnterSupport(this.underlyingConfig)\n                : null;\n        this.comments = ResolvedLanguageConfiguration._handleComments(this.underlyingConfig);\n        this.characterPair = new CharacterPairSupport(this.underlyingConfig);\n        this.wordDefinition = this.underlyingConfig.wordPattern || DEFAULT_WORD_REGEXP;\n        this.indentationRules = this.underlyingConfig.indentationRules;\n        if (this.underlyingConfig.indentationRules) {\n            this.indentRulesSupport = new IndentRulesSupport(this.underlyingConfig.indentationRules);\n        }\n        else {\n            this.indentRulesSupport = null;\n        }\n        this.foldingRules = this.underlyingConfig.folding || {};\n    }\n    getWordDefinition() {\n        return ensureValidWordDefinition(this.wordDefinition);\n    }\n    get brackets() {\n        if (!this._brackets && this.underlyingConfig.brackets) {\n            this._brackets = new RichEditBrackets(this.languageId, this.underlyingConfig.brackets);\n        }\n        return this._brackets;\n    }\n    get electricCharacter() {\n        if (!this._electricCharacter) {\n            this._electricCharacter = new BracketElectricCharacterSupport(this.brackets);\n        }\n        return this._electricCharacter;\n    }\n    onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText) {\n        if (!this._onEnterSupport) {\n            return null;\n        }\n        return this._onEnterSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n    }\n    getAutoClosingPairs() {\n        return new AutoClosingPairs(this.characterPair.getAutoClosingPairs());\n    }\n    getAutoCloseBeforeSet() {\n        return this.characterPair.getAutoCloseBeforeSet();\n    }\n    getSurroundingPairs() {\n        return this.characterPair.getSurroundingPairs();\n    }\n    static _handleComments(conf) {\n        const commentRule = conf.comments;\n        if (!commentRule) {\n            return null;\n        }\n        // comment configuration\n        const comments = {};\n        if (commentRule.lineComment) {\n            comments.lineCommentToken = commentRule.lineComment;\n        }\n        if (commentRule.blockComment) {\n            const [blockStart, blockEnd] = commentRule.blockComment;\n            comments.blockCommentStartToken = blockStart;\n            comments.blockCommentEndToken = blockEnd;\n        }\n        return comments;\n    }\n}\nregisterSingleton(ILanguageConfigurationService, LanguageConfigurationService);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nexport class Uint8Matrix {\n    constructor(rows, cols, defaultValue) {\n        const data = new Uint8Array(rows * cols);\n        for (let i = 0, len = rows * cols; i < len; i++) {\n            data[i] = defaultValue;\n        }\n        this._data = data;\n        this.rows = rows;\n        this.cols = cols;\n    }\n    get(row, col) {\n        return this._data[row * this.cols + col];\n    }\n    set(row, col, value) {\n        this._data[row * this.cols + col] = value;\n    }\n}\nexport class StateMachine {\n    constructor(edges) {\n        let maxCharCode = 0;\n        let maxState = 0 /* Invalid */;\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            if (chCode > maxCharCode) {\n                maxCharCode = chCode;\n            }\n            if (from > maxState) {\n                maxState = from;\n            }\n            if (to > maxState) {\n                maxState = to;\n            }\n        }\n        maxCharCode++;\n        maxState++;\n        const states = new Uint8Matrix(maxState, maxCharCode, 0 /* Invalid */);\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            states.set(from, chCode, to);\n        }\n        this._states = states;\n        this._maxCharCode = maxCharCode;\n    }\n    nextState(currentState, chCode) {\n        if (chCode < 0 || chCode >= this._maxCharCode) {\n            return 0 /* Invalid */;\n        }\n        return this._states.get(currentState, chCode);\n    }\n}\n// State machine for http:// or https:// or file://\nlet _stateMachine = null;\nfunction getStateMachine() {\n    if (_stateMachine === null) {\n        _stateMachine = new StateMachine([\n            [1 /* Start */, 104 /* h */, 2 /* H */],\n            [1 /* Start */, 72 /* H */, 2 /* H */],\n            [1 /* Start */, 102 /* f */, 6 /* F */],\n            [1 /* Start */, 70 /* F */, 6 /* F */],\n            [2 /* H */, 116 /* t */, 3 /* HT */],\n            [2 /* H */, 84 /* T */, 3 /* HT */],\n            [3 /* HT */, 116 /* t */, 4 /* HTT */],\n            [3 /* HT */, 84 /* T */, 4 /* HTT */],\n            [4 /* HTT */, 112 /* p */, 5 /* HTTP */],\n            [4 /* HTT */, 80 /* P */, 5 /* HTTP */],\n            [5 /* HTTP */, 115 /* s */, 9 /* BeforeColon */],\n            [5 /* HTTP */, 83 /* S */, 9 /* BeforeColon */],\n            [5 /* HTTP */, 58 /* Colon */, 10 /* AfterColon */],\n            [6 /* F */, 105 /* i */, 7 /* FI */],\n            [6 /* F */, 73 /* I */, 7 /* FI */],\n            [7 /* FI */, 108 /* l */, 8 /* FIL */],\n            [7 /* FI */, 76 /* L */, 8 /* FIL */],\n            [8 /* FIL */, 101 /* e */, 9 /* BeforeColon */],\n            [8 /* FIL */, 69 /* E */, 9 /* BeforeColon */],\n            [9 /* BeforeColon */, 58 /* Colon */, 10 /* AfterColon */],\n            [10 /* AfterColon */, 47 /* Slash */, 11 /* AlmostThere */],\n            [11 /* AlmostThere */, 47 /* Slash */, 12 /* End */],\n        ]);\n    }\n    return _stateMachine;\n}\nlet _classifier = null;\nfunction getClassifier() {\n    if (_classifier === null) {\n        _classifier = new CharacterClassifier(0 /* None */);\n        // allow-any-unicode-next-line\n        const FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…';\n        for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* ForceTermination */);\n        }\n        const CANNOT_END_WITH_CHARACTERS = '.,;';\n        for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CannotEndIn */);\n        }\n    }\n    return _classifier;\n}\nexport class LinkComputer {\n    static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n        // Do not allow to end link in certain characters...\n        let lastIncludedCharIndex = linkEndIndex - 1;\n        do {\n            const chCode = line.charCodeAt(lastIncludedCharIndex);\n            const chClass = classifier.get(chCode);\n            if (chClass !== 2 /* CannotEndIn */) {\n                break;\n            }\n            lastIncludedCharIndex--;\n        } while (lastIncludedCharIndex > linkBeginIndex);\n        // Handle links enclosed in parens, square brackets and curlys.\n        if (linkBeginIndex > 0) {\n            const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n            const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n            if ((charCodeBeforeLink === 40 /* OpenParen */ && lastCharCodeInLink === 41 /* CloseParen */)\n                || (charCodeBeforeLink === 91 /* OpenSquareBracket */ && lastCharCodeInLink === 93 /* CloseSquareBracket */)\n                || (charCodeBeforeLink === 123 /* OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CloseCurlyBrace */)) {\n                // Do not end in ) if ( is before the link start\n                // Do not end in ] if [ is before the link start\n                // Do not end in } if { is before the link start\n                lastIncludedCharIndex--;\n            }\n        }\n        return {\n            range: {\n                startLineNumber: lineNumber,\n                startColumn: linkBeginIndex + 1,\n                endLineNumber: lineNumber,\n                endColumn: lastIncludedCharIndex + 2\n            },\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n        };\n    }\n    static computeLinks(model, stateMachine = getStateMachine()) {\n        const classifier = getClassifier();\n        const result = [];\n        for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n            const line = model.getLineContent(i);\n            const len = line.length;\n            let j = 0;\n            let linkBeginIndex = 0;\n            let linkBeginChCode = 0;\n            let state = 1 /* Start */;\n            let hasOpenParens = false;\n            let hasOpenSquareBracket = false;\n            let inSquareBrackets = false;\n            let hasOpenCurlyBracket = false;\n            while (j < len) {\n                let resetStateMachine = false;\n                const chCode = line.charCodeAt(j);\n                if (state === 13 /* Accept */) {\n                    let chClass;\n                    switch (chCode) {\n                        case 40 /* OpenParen */:\n                            hasOpenParens = true;\n                            chClass = 0 /* None */;\n                            break;\n                        case 41 /* CloseParen */:\n                            chClass = (hasOpenParens ? 0 /* None */ : 1 /* ForceTermination */);\n                            break;\n                        case 91 /* OpenSquareBracket */:\n                            inSquareBrackets = true;\n                            hasOpenSquareBracket = true;\n                            chClass = 0 /* None */;\n                            break;\n                        case 93 /* CloseSquareBracket */:\n                            inSquareBrackets = false;\n                            chClass = (hasOpenSquareBracket ? 0 /* None */ : 1 /* ForceTermination */);\n                            break;\n                        case 123 /* OpenCurlyBrace */:\n                            hasOpenCurlyBracket = true;\n                            chClass = 0 /* None */;\n                            break;\n                        case 125 /* CloseCurlyBrace */:\n                            chClass = (hasOpenCurlyBracket ? 0 /* None */ : 1 /* ForceTermination */);\n                            break;\n                        /* The following three rules make it that ' or \" or ` are allowed inside links if the link began with a different one */\n                        case 39 /* SingleQuote */:\n                            chClass = (linkBeginChCode === 34 /* DoubleQuote */ || linkBeginChCode === 96 /* BackTick */) ? 0 /* None */ : 1 /* ForceTermination */;\n                            break;\n                        case 34 /* DoubleQuote */:\n                            chClass = (linkBeginChCode === 39 /* SingleQuote */ || linkBeginChCode === 96 /* BackTick */) ? 0 /* None */ : 1 /* ForceTermination */;\n                            break;\n                        case 96 /* BackTick */:\n                            chClass = (linkBeginChCode === 39 /* SingleQuote */ || linkBeginChCode === 34 /* DoubleQuote */) ? 0 /* None */ : 1 /* ForceTermination */;\n                            break;\n                        case 42 /* Asterisk */:\n                            // `*` terminates a link if the link began with `*`\n                            chClass = (linkBeginChCode === 42 /* Asterisk */) ? 1 /* ForceTermination */ : 0 /* None */;\n                            break;\n                        case 124 /* Pipe */:\n                            // `|` terminates a link if the link began with `|`\n                            chClass = (linkBeginChCode === 124 /* Pipe */) ? 1 /* ForceTermination */ : 0 /* None */;\n                            break;\n                        case 32 /* Space */:\n                            // ` ` allow space in between [ and ]\n                            chClass = (inSquareBrackets ? 0 /* None */ : 1 /* ForceTermination */);\n                            break;\n                        default:\n                            chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* ForceTermination */) {\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n                        resetStateMachine = true;\n                    }\n                }\n                else if (state === 12 /* End */) {\n                    let chClass;\n                    if (chCode === 91 /* OpenSquareBracket */) {\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n                        hasOpenSquareBracket = true;\n                        chClass = 0 /* None */;\n                    }\n                    else {\n                        chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* ForceTermination */) {\n                        resetStateMachine = true;\n                    }\n                    else {\n                        state = 13 /* Accept */;\n                    }\n                }\n                else {\n                    state = stateMachine.nextState(state, chCode);\n                    if (state === 0 /* Invalid */) {\n                        resetStateMachine = true;\n                    }\n                }\n                if (resetStateMachine) {\n                    state = 1 /* Start */;\n                    hasOpenParens = false;\n                    hasOpenSquareBracket = false;\n                    hasOpenCurlyBracket = false;\n                    // Record where the link started\n                    linkBeginIndex = j + 1;\n                    linkBeginChCode = chCode;\n                }\n                j++;\n            }\n            if (state === 13 /* Accept */) {\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n            }\n        }\n        return result;\n    }\n}\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nexport function computeLinks(model) {\n    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n        // Unknown caller!\n        return [];\n    }\n    return LinkComputer.computeLinks(model);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { LanguageConfigurationRegistry } from './languageConfigurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Extensions as ConfigurationExtensions } from '../../../platform/configuration/common/configurationRegistry.js';\n// Define extension point ids\nexport const Extensions = {\n    ModesRegistry: 'editor.modesRegistry'\n};\nexport class EditorModesRegistry {\n    constructor() {\n        this._onDidChangeLanguages = new Emitter();\n        this.onDidChangeLanguages = this._onDidChangeLanguages.event;\n        this._languages = [];\n    }\n    registerLanguage(def) {\n        this._languages.push(def);\n        this._onDidChangeLanguages.fire(undefined);\n        return {\n            dispose: () => {\n                for (let i = 0, len = this._languages.length; i < len; i++) {\n                    if (this._languages[i] === def) {\n                        this._languages.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        };\n    }\n    getLanguages() {\n        return this._languages;\n    }\n}\nexport const ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\nexport const PLAINTEXT_LANGUAGE_ID = 'plaintext';\nexport const PLAINTEXT_EXTENSION = '.txt';\nModesRegistry.registerLanguage({\n    id: PLAINTEXT_LANGUAGE_ID,\n    extensions: [PLAINTEXT_EXTENSION],\n    aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n    mimetypes: [Mimes.text]\n});\nLanguageConfigurationRegistry.register(PLAINTEXT_LANGUAGE_ID, {\n    brackets: [\n        ['(', ')'],\n        ['[', ']'],\n        ['{', '}'],\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: '\\\"', close: '\\\"' },\n        { open: '\\'', close: '\\'' },\n        { open: '`', close: '`' },\n    ],\n    colorizedBracketPairs: [],\n    folding: {\n        offSide: true\n    }\n}, 0);\nRegistry.as(ConfigurationExtensions.Configuration)\n    .registerDefaultConfigurations([{\n        overrides: {\n            '[plaintext]': {\n                'editor.unicodeHighlight.ambiguousCharacters': false,\n                'editor.unicodeHighlight.invisibleCharacters': false\n            }\n        }\n    }]);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Token, TokenizationResult, EncodedTokenizationResult } from '../languages.js';\nexport const NullState = new class {\n    clone() {\n        return this;\n    }\n    equals(other) {\n        return (this === other);\n    }\n};\nexport function nullTokenize(languageId, state) {\n    return new TokenizationResult([new Token(0, '', languageId)], state);\n}\nexport function nullTokenizeEncoded(languageId, state) {\n    const tokens = new Uint32Array(2);\n    tokens[0] = 0;\n    tokens[1] = ((languageId << 0 /* LANGUAGEID_OFFSET */)\n        | (0 /* Other */ << 8 /* TOKEN_TYPE_OFFSET */)\n        | (0 /* None */ << 10 /* FONT_STYLE_OFFSET */)\n        | (1 /* DefaultForeground */ << 14 /* FOREGROUND_OFFSET */)\n        | (2 /* DefaultBackground */ << 23 /* BACKGROUND_OFFSET */)) >>> 0;\n    return new EncodedTokenizationResult(tokens, state === null ? NullState : state);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function createScopedLineTokens(context, offset) {\n    const tokenCount = context.getCount();\n    const tokenIndex = context.findTokenIndexAtOffset(offset);\n    const desiredLanguageId = context.getLanguageId(tokenIndex);\n    let lastTokenIndex = tokenIndex;\n    while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\n        lastTokenIndex++;\n    }\n    let firstTokenIndex = tokenIndex;\n    while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\n        firstTokenIndex--;\n    }\n    return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\n}\nexport class ScopedLineTokens {\n    constructor(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\n        this._scopedLineTokensBrand = undefined;\n        this._actual = actual;\n        this.languageId = languageId;\n        this._firstTokenIndex = firstTokenIndex;\n        this._lastTokenIndex = lastTokenIndex;\n        this.firstCharOffset = firstCharOffset;\n        this._lastCharOffset = lastCharOffset;\n    }\n    getLineContent() {\n        const actualLineContent = this._actual.getLineContent();\n        return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\n    }\n    getActualLineContentBefore(offset) {\n        const actualLineContent = this._actual.getLineContent();\n        return actualLineContent.substring(0, this.firstCharOffset + offset);\n    }\n    getTokenCount() {\n        return this._lastTokenIndex - this._firstTokenIndex;\n    }\n    findTokenIndexAtOffset(offset) {\n        return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\n    }\n    getStandardTokenType(tokenIndex) {\n        return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\n    }\n}\nexport function ignoreBracketsInToken(standardTokenType) {\n    return (standardTokenType & 3 /* value */) !== 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class BasicInplaceReplace {\n    constructor() {\n        this._defaultValueSet = [\n            ['true', 'false'],\n            ['True', 'False'],\n            ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'],\n            ['public', 'protected', 'private'],\n        ];\n    }\n    navigateValueSet(range1, text1, range2, text2, up) {\n        if (range1 && text1) {\n            const result = this.doNavigateValueSet(text1, up);\n            if (result) {\n                return {\n                    range: range1,\n                    value: result\n                };\n            }\n        }\n        if (range2 && text2) {\n            const result = this.doNavigateValueSet(text2, up);\n            if (result) {\n                return {\n                    range: range2,\n                    value: result\n                };\n            }\n        }\n        return null;\n    }\n    doNavigateValueSet(text, up) {\n        const numberResult = this.numberReplace(text, up);\n        if (numberResult !== null) {\n            return numberResult;\n        }\n        return this.textReplace(text, up);\n    }\n    numberReplace(value, up) {\n        const precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));\n        let n1 = Number(value);\n        let n2 = parseFloat(value);\n        if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\n            if (n1 === 0 && !up) {\n                return null; // don't do negative\n                //\t\t\t} else if(n1 === 9 && up) {\n                //\t\t\t\treturn null; // don't insert 10 into a number\n            }\n            else {\n                n1 = Math.floor(n1 * precision);\n                n1 += up ? precision : -precision;\n                return String(n1 / precision);\n            }\n        }\n        return null;\n    }\n    textReplace(value, up) {\n        return this.valueSetsReplace(this._defaultValueSet, value, up);\n    }\n    valueSetsReplace(valueSets, value, up) {\n        let result = null;\n        for (let i = 0, len = valueSets.length; result === null && i < len; i++) {\n            result = this.valueSetReplace(valueSets[i], value, up);\n        }\n        return result;\n    }\n    valueSetReplace(valueSet, value, up) {\n        let idx = valueSet.indexOf(value);\n        if (idx >= 0) {\n            idx += up ? +1 : -1;\n            if (idx < 0) {\n                idx = valueSet.length - 1;\n            }\n            else {\n                idx %= valueSet.length;\n            }\n            return valueSet[idx];\n        }\n        return null;\n    }\n}\nBasicInplaceReplace.INSTANCE = new BasicInplaceReplace();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport * as stringBuilder from '../../core/stringBuilder.js';\nimport { Range } from '../../core/range.js';\n/**\n * Represents a grouping of colliding bracket pairs.\n *\n * Most of the times this contains a single bracket pair,\n * but sometimes this contains multiple bracket pairs in cases\n * where the same string appears as a closing bracket for multiple\n * bracket pairs, or the same string appears an opening bracket for\n * multiple bracket pairs.\n *\n * e.g. of a group containing a single pair:\n *   open: ['{'], close: ['}']\n *\n * e.g. of a group containing multiple pairs:\n *   open: ['if', 'for'], close: ['end', 'end']\n */\nexport class RichEditBracket {\n    constructor(languageId, index, open, close, forwardRegex, reversedRegex) {\n        this._richEditBracketBrand = undefined;\n        this.languageId = languageId;\n        this.index = index;\n        this.open = open;\n        this.close = close;\n        this.forwardRegex = forwardRegex;\n        this.reversedRegex = reversedRegex;\n        this._openSet = RichEditBracket._toSet(this.open);\n        this._closeSet = RichEditBracket._toSet(this.close);\n    }\n    /**\n     * Check if the provided `text` is an open bracket in this group.\n     */\n    isOpen(text) {\n        return this._openSet.has(text);\n    }\n    /**\n     * Check if the provided `text` is a close bracket in this group.\n     */\n    isClose(text) {\n        return this._closeSet.has(text);\n    }\n    static _toSet(arr) {\n        const result = new Set();\n        for (const element of arr) {\n            result.add(element);\n        }\n        return result;\n    }\n}\n/**\n * Groups together brackets that have equal open or close sequences.\n *\n * For example, if the following brackets are defined:\n *   ['IF','END']\n *   ['for','end']\n *   ['{','}']\n *\n * Then the grouped brackets would be:\n *   { open: ['if', 'for'], close: ['end', 'end'] }\n *   { open: ['{'], close: ['}'] }\n *\n */\nfunction groupFuzzyBrackets(brackets) {\n    const N = brackets.length;\n    brackets = brackets.map(b => [b[0].toLowerCase(), b[1].toLowerCase()]);\n    const group = [];\n    for (let i = 0; i < N; i++) {\n        group[i] = i;\n    }\n    const areOverlapping = (a, b) => {\n        const [aOpen, aClose] = a;\n        const [bOpen, bClose] = b;\n        return (aOpen === bOpen || aOpen === bClose || aClose === bOpen || aClose === bClose);\n    };\n    const mergeGroups = (g1, g2) => {\n        const newG = Math.min(g1, g2);\n        const oldG = Math.max(g1, g2);\n        for (let i = 0; i < N; i++) {\n            if (group[i] === oldG) {\n                group[i] = newG;\n            }\n        }\n    };\n    // group together brackets that have the same open or the same close sequence\n    for (let i = 0; i < N; i++) {\n        const a = brackets[i];\n        for (let j = i + 1; j < N; j++) {\n            const b = brackets[j];\n            if (areOverlapping(a, b)) {\n                mergeGroups(group[i], group[j]);\n            }\n        }\n    }\n    const result = [];\n    for (let g = 0; g < N; g++) {\n        const currentOpen = [];\n        const currentClose = [];\n        for (let i = 0; i < N; i++) {\n            if (group[i] === g) {\n                const [open, close] = brackets[i];\n                currentOpen.push(open);\n                currentClose.push(close);\n            }\n        }\n        if (currentOpen.length > 0) {\n            result.push({\n                open: currentOpen,\n                close: currentClose\n            });\n        }\n    }\n    return result;\n}\nexport class RichEditBrackets {\n    constructor(languageId, _brackets) {\n        this._richEditBracketsBrand = undefined;\n        const brackets = groupFuzzyBrackets(_brackets);\n        this.brackets = brackets.map((b, index) => {\n            return new RichEditBracket(languageId, index, b.open, b.close, getRegexForBracketPair(b.open, b.close, brackets, index), getReversedRegexForBracketPair(b.open, b.close, brackets, index));\n        });\n        this.forwardRegex = getRegexForBrackets(this.brackets);\n        this.reversedRegex = getReversedRegexForBrackets(this.brackets);\n        this.textIsBracket = {};\n        this.textIsOpenBracket = {};\n        this.maxBracketLength = 0;\n        for (const bracket of this.brackets) {\n            for (const open of bracket.open) {\n                this.textIsBracket[open] = bracket;\n                this.textIsOpenBracket[open] = true;\n                this.maxBracketLength = Math.max(this.maxBracketLength, open.length);\n            }\n            for (const close of bracket.close) {\n                this.textIsBracket[close] = bracket;\n                this.textIsOpenBracket[close] = false;\n                this.maxBracketLength = Math.max(this.maxBracketLength, close.length);\n            }\n        }\n    }\n}\nfunction collectSuperstrings(str, brackets, currentIndex, dest) {\n    for (let i = 0, len = brackets.length; i < len; i++) {\n        if (i === currentIndex) {\n            continue;\n        }\n        const bracket = brackets[i];\n        for (const open of bracket.open) {\n            if (open.indexOf(str) >= 0) {\n                dest.push(open);\n            }\n        }\n        for (const close of bracket.close) {\n            if (close.indexOf(str) >= 0) {\n                dest.push(close);\n            }\n        }\n    }\n}\nfunction lengthcmp(a, b) {\n    return a.length - b.length;\n}\nfunction unique(arr) {\n    if (arr.length <= 1) {\n        return arr;\n    }\n    const result = [];\n    const seen = new Set();\n    for (const element of arr) {\n        if (seen.has(element)) {\n            continue;\n        }\n        result.push(element);\n        seen.add(element);\n    }\n    return result;\n}\n/**\n * Create a regular expression that can be used to search forward in a piece of text\n * for a group of bracket pairs. But this regex must be built in a way in which\n * it is aware of the other bracket pairs defined for the language.\n *\n * For example, if a language contains the following bracket pairs:\n *   ['begin', 'end']\n *   ['if', 'end if']\n * The two bracket pairs do not collide because no open or close brackets are equal.\n * So the function getRegexForBracketPair is called twice, once with\n * the ['begin'], ['end'] group consisting of one bracket pair, and once with\n * the ['if'], ['end if'] group consiting of the other bracket pair.\n *\n * But there could be a situation where an occurrence of 'end if' is mistaken\n * for an occurrence of 'end'.\n *\n * Therefore, for the bracket pair ['begin', 'end'], the regex will also\n * target 'end if'. The regex will be something like:\n *   /(\\bend if\\b)|(\\bend\\b)|(\\bif\\b)/\n *\n * The regex also searches for \"superstrings\" (other brackets that might be mistaken with the current bracket).\n *\n */\nfunction getRegexForBracketPair(open, close, brackets, currentIndex) {\n    // search in all brackets for other brackets that are a superstring of these brackets\n    let pieces = [];\n    pieces = pieces.concat(open);\n    pieces = pieces.concat(close);\n    for (let i = 0, len = pieces.length; i < len; i++) {\n        collectSuperstrings(pieces[i], brackets, currentIndex, pieces);\n    }\n    pieces = unique(pieces);\n    pieces.sort(lengthcmp);\n    pieces.reverse();\n    return createBracketOrRegExp(pieces);\n}\n/**\n * Matching a regular expression in JS can only be done \"forwards\". So JS offers natively only\n * methods to find the first match of a regex in a string. But sometimes, it is useful to\n * find the last match of a regex in a string. For such a situation, a nice solution is to\n * simply reverse the string and then search for a reversed regex.\n *\n * This function also has the fine details of `getRegexForBracketPair`. For the same example\n * given above, the regex produced here would look like:\n *   /(\\bfi dne\\b)|(\\bdne\\b)|(\\bfi\\b)/\n */\nfunction getReversedRegexForBracketPair(open, close, brackets, currentIndex) {\n    // search in all brackets for other brackets that are a superstring of these brackets\n    let pieces = [];\n    pieces = pieces.concat(open);\n    pieces = pieces.concat(close);\n    for (let i = 0, len = pieces.length; i < len; i++) {\n        collectSuperstrings(pieces[i], brackets, currentIndex, pieces);\n    }\n    pieces = unique(pieces);\n    pieces.sort(lengthcmp);\n    pieces.reverse();\n    return createBracketOrRegExp(pieces.map(toReversedString));\n}\n/**\n * Creates a regular expression that targets all bracket pairs.\n *\n * e.g. for the bracket pairs:\n *  ['{','}']\n *  ['begin,'end']\n *  ['for','end']\n * the regex would look like:\n *  /(\\{)|(\\})|(\\bbegin\\b)|(\\bend\\b)|(\\bfor\\b)/\n */\nfunction getRegexForBrackets(brackets) {\n    let pieces = [];\n    for (const bracket of brackets) {\n        for (const open of bracket.open) {\n            pieces.push(open);\n        }\n        for (const close of bracket.close) {\n            pieces.push(close);\n        }\n    }\n    pieces = unique(pieces);\n    return createBracketOrRegExp(pieces);\n}\n/**\n * Matching a regular expression in JS can only be done \"forwards\". So JS offers natively only\n * methods to find the first match of a regex in a string. But sometimes, it is useful to\n * find the last match of a regex in a string. For such a situation, a nice solution is to\n * simply reverse the string and then search for a reversed regex.\n *\n * e.g. for the bracket pairs:\n *  ['{','}']\n *  ['begin,'end']\n *  ['for','end']\n * the regex would look like:\n *  /(\\{)|(\\})|(\\bnigeb\\b)|(\\bdne\\b)|(\\brof\\b)/\n */\nfunction getReversedRegexForBrackets(brackets) {\n    let pieces = [];\n    for (const bracket of brackets) {\n        for (const open of bracket.open) {\n            pieces.push(open);\n        }\n        for (const close of bracket.close) {\n            pieces.push(close);\n        }\n    }\n    pieces = unique(pieces);\n    return createBracketOrRegExp(pieces.map(toReversedString));\n}\nfunction prepareBracketForRegExp(str) {\n    // This bracket pair uses letters like e.g. \"begin\" - \"end\"\n    const insertWordBoundaries = (/^[\\w ]+$/.test(str));\n    str = strings.escapeRegExpCharacters(str);\n    return (insertWordBoundaries ? `\\\\b${str}\\\\b` : str);\n}\nfunction createBracketOrRegExp(pieces) {\n    const regexStr = `(${pieces.map(prepareBracketForRegExp).join(')|(')})`;\n    return strings.createRegExp(regexStr, true);\n}\nconst toReversedString = (function () {\n    function reverse(str) {\n        if (stringBuilder.hasTextDecoder) {\n            // create a Uint16Array and then use a TextDecoder to create a string\n            const arr = new Uint16Array(str.length);\n            let offset = 0;\n            for (let i = str.length - 1; i >= 0; i--) {\n                arr[offset++] = str.charCodeAt(i);\n            }\n            return stringBuilder.getPlatformTextDecoder().decode(arr);\n        }\n        else {\n            const result = [];\n            let resultLen = 0;\n            for (let i = str.length - 1; i >= 0; i--) {\n                result[resultLen++] = str.charAt(i);\n            }\n            return result.join('');\n        }\n    }\n    let lastInput = null;\n    let lastOutput = null;\n    return function toReversedString(str) {\n        if (lastInput !== str) {\n            lastInput = str;\n            lastOutput = reverse(lastInput);\n        }\n        return lastOutput;\n    };\n})();\nexport class BracketsUtils {\n    static _findPrevBracketInText(reversedBracketRegex, lineNumber, reversedText, offset) {\n        const m = reversedText.match(reversedBracketRegex);\n        if (!m) {\n            return null;\n        }\n        const matchOffset = reversedText.length - (m.index || 0);\n        const matchLength = m[0].length;\n        const absoluteMatchOffset = offset + matchOffset;\n        return new Range(lineNumber, absoluteMatchOffset - matchLength + 1, lineNumber, absoluteMatchOffset + 1);\n    }\n    static findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, startOffset, endOffset) {\n        // Because JS does not support backwards regex search, we search forwards in a reversed string with a reversed regex ;)\n        const reversedLineText = toReversedString(lineText);\n        const reversedSubstr = reversedLineText.substring(lineText.length - endOffset, lineText.length - startOffset);\n        return this._findPrevBracketInText(reversedBracketRegex, lineNumber, reversedSubstr, startOffset);\n    }\n    static findNextBracketInText(bracketRegex, lineNumber, text, offset) {\n        const m = text.match(bracketRegex);\n        if (!m) {\n            return null;\n        }\n        const matchOffset = m.index || 0;\n        const matchLength = m[0].length;\n        if (matchLength === 0) {\n            return null;\n        }\n        const absoluteMatchOffset = offset + matchOffset;\n        return new Range(lineNumber, absoluteMatchOffset + 1, lineNumber, absoluteMatchOffset + 1 + matchLength);\n    }\n    static findNextBracketInRange(bracketRegex, lineNumber, lineText, startOffset, endOffset) {\n        const substr = lineText.substring(startOffset, endOffset);\n        return this.findNextBracketInText(bracketRegex, lineNumber, substr, startOffset);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../../base/common/color.js';\nexport class ParsedTokenThemeRule {\n    constructor(token, index, fontStyle, foreground, background) {\n        this._parsedThemeRuleBrand = undefined;\n        this.token = token;\n        this.index = index;\n        this.fontStyle = fontStyle;\n        this.foreground = foreground;\n        this.background = background;\n    }\n}\n/**\n * Parse a raw theme into rules.\n */\nexport function parseTokenTheme(source) {\n    if (!source || !Array.isArray(source)) {\n        return [];\n    }\n    const result = [];\n    let resultLen = 0;\n    for (let i = 0, len = source.length; i < len; i++) {\n        const entry = source[i];\n        let fontStyle = -1 /* NotSet */;\n        if (typeof entry.fontStyle === 'string') {\n            fontStyle = 0 /* None */;\n            const segments = entry.fontStyle.split(' ');\n            for (let j = 0, lenJ = segments.length; j < lenJ; j++) {\n                const segment = segments[j];\n                switch (segment) {\n                    case 'italic':\n                        fontStyle = fontStyle | 1 /* Italic */;\n                        break;\n                    case 'bold':\n                        fontStyle = fontStyle | 2 /* Bold */;\n                        break;\n                    case 'underline':\n                        fontStyle = fontStyle | 4 /* Underline */;\n                        break;\n                    case 'strikethrough':\n                        fontStyle = fontStyle | 8 /* Strikethrough */;\n                        break;\n                }\n            }\n        }\n        let foreground = null;\n        if (typeof entry.foreground === 'string') {\n            foreground = entry.foreground;\n        }\n        let background = null;\n        if (typeof entry.background === 'string') {\n            background = entry.background;\n        }\n        result[resultLen++] = new ParsedTokenThemeRule(entry.token || '', i, fontStyle, foreground, background);\n    }\n    return result;\n}\n/**\n * Resolve rules (i.e. inheritance).\n */\nfunction resolveParsedTokenThemeRules(parsedThemeRules, customTokenColors) {\n    // Sort rules lexicographically, and then by index if necessary\n    parsedThemeRules.sort((a, b) => {\n        const r = strcmp(a.token, b.token);\n        if (r !== 0) {\n            return r;\n        }\n        return a.index - b.index;\n    });\n    // Determine defaults\n    let defaultFontStyle = 0 /* None */;\n    let defaultForeground = '000000';\n    let defaultBackground = 'ffffff';\n    while (parsedThemeRules.length >= 1 && parsedThemeRules[0].token === '') {\n        const incomingDefaults = parsedThemeRules.shift();\n        if (incomingDefaults.fontStyle !== -1 /* NotSet */) {\n            defaultFontStyle = incomingDefaults.fontStyle;\n        }\n        if (incomingDefaults.foreground !== null) {\n            defaultForeground = incomingDefaults.foreground;\n        }\n        if (incomingDefaults.background !== null) {\n            defaultBackground = incomingDefaults.background;\n        }\n    }\n    const colorMap = new ColorMap();\n    // start with token colors from custom token themes\n    for (let color of customTokenColors) {\n        colorMap.getId(color);\n    }\n    const foregroundColorId = colorMap.getId(defaultForeground);\n    const backgroundColorId = colorMap.getId(defaultBackground);\n    const defaults = new ThemeTrieElementRule(defaultFontStyle, foregroundColorId, backgroundColorId);\n    const root = new ThemeTrieElement(defaults);\n    for (let i = 0, len = parsedThemeRules.length; i < len; i++) {\n        const rule = parsedThemeRules[i];\n        root.insert(rule.token, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\n    }\n    return new TokenTheme(colorMap, root);\n}\nconst colorRegExp = /^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;\nexport class ColorMap {\n    constructor() {\n        this._lastColorId = 0;\n        this._id2color = [];\n        this._color2id = new Map();\n    }\n    getId(color) {\n        if (color === null) {\n            return 0;\n        }\n        const match = color.match(colorRegExp);\n        if (!match) {\n            throw new Error('Illegal value for token color: ' + color);\n        }\n        color = match[1].toUpperCase();\n        let value = this._color2id.get(color);\n        if (value) {\n            return value;\n        }\n        value = ++this._lastColorId;\n        this._color2id.set(color, value);\n        this._id2color[value] = Color.fromHex('#' + color);\n        return value;\n    }\n    getColorMap() {\n        return this._id2color.slice(0);\n    }\n}\nexport class TokenTheme {\n    constructor(colorMap, root) {\n        this._colorMap = colorMap;\n        this._root = root;\n        this._cache = new Map();\n    }\n    static createFromRawTokenTheme(source, customTokenColors) {\n        return this.createFromParsedTokenTheme(parseTokenTheme(source), customTokenColors);\n    }\n    static createFromParsedTokenTheme(source, customTokenColors) {\n        return resolveParsedTokenThemeRules(source, customTokenColors);\n    }\n    getColorMap() {\n        return this._colorMap.getColorMap();\n    }\n    _match(token) {\n        return this._root.match(token);\n    }\n    match(languageId, token) {\n        // The cache contains the metadata without the language bits set.\n        let result = this._cache.get(token);\n        if (typeof result === 'undefined') {\n            const rule = this._match(token);\n            const standardToken = toStandardTokenType(token);\n            result = (rule.metadata\n                | (standardToken << 8 /* TOKEN_TYPE_OFFSET */)) >>> 0;\n            this._cache.set(token, result);\n        }\n        return (result\n            | (languageId << 0 /* LANGUAGEID_OFFSET */)) >>> 0;\n    }\n}\nconst STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|regexp)\\b/;\nexport function toStandardTokenType(tokenType) {\n    const m = tokenType.match(STANDARD_TOKEN_TYPE_REGEXP);\n    if (!m) {\n        return 0 /* Other */;\n    }\n    switch (m[1]) {\n        case 'comment':\n            return 1 /* Comment */;\n        case 'string':\n            return 2 /* String */;\n        case 'regex':\n            return 3 /* RegEx */;\n        case 'regexp':\n            return 3 /* RegEx */;\n    }\n    throw new Error('Unexpected match for standard token type!');\n}\nexport function strcmp(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n}\nexport class ThemeTrieElementRule {\n    constructor(fontStyle, foreground, background) {\n        this._themeTrieElementRuleBrand = undefined;\n        this._fontStyle = fontStyle;\n        this._foreground = foreground;\n        this._background = background;\n        this.metadata = ((this._fontStyle << 10 /* FONT_STYLE_OFFSET */)\n            | (this._foreground << 14 /* FOREGROUND_OFFSET */)\n            | (this._background << 23 /* BACKGROUND_OFFSET */)) >>> 0;\n    }\n    clone() {\n        return new ThemeTrieElementRule(this._fontStyle, this._foreground, this._background);\n    }\n    acceptOverwrite(fontStyle, foreground, background) {\n        if (fontStyle !== -1 /* NotSet */) {\n            this._fontStyle = fontStyle;\n        }\n        if (foreground !== 0 /* None */) {\n            this._foreground = foreground;\n        }\n        if (background !== 0 /* None */) {\n            this._background = background;\n        }\n        this.metadata = ((this._fontStyle << 10 /* FONT_STYLE_OFFSET */)\n            | (this._foreground << 14 /* FOREGROUND_OFFSET */)\n            | (this._background << 23 /* BACKGROUND_OFFSET */)) >>> 0;\n    }\n}\nexport class ThemeTrieElement {\n    constructor(mainRule) {\n        this._themeTrieElementBrand = undefined;\n        this._mainRule = mainRule;\n        this._children = new Map();\n    }\n    match(token) {\n        if (token === '') {\n            return this._mainRule;\n        }\n        const dotIndex = token.indexOf('.');\n        let head;\n        let tail;\n        if (dotIndex === -1) {\n            head = token;\n            tail = '';\n        }\n        else {\n            head = token.substring(0, dotIndex);\n            tail = token.substring(dotIndex + 1);\n        }\n        const child = this._children.get(head);\n        if (typeof child !== 'undefined') {\n            return child.match(tail);\n        }\n        return this._mainRule;\n    }\n    insert(token, fontStyle, foreground, background) {\n        if (token === '') {\n            // Merge into the main rule\n            this._mainRule.acceptOverwrite(fontStyle, foreground, background);\n            return;\n        }\n        const dotIndex = token.indexOf('.');\n        let head;\n        let tail;\n        if (dotIndex === -1) {\n            head = token;\n            tail = '';\n        }\n        else {\n            head = token.substring(0, dotIndex);\n            tail = token.substring(dotIndex + 1);\n        }\n        let child = this._children.get(head);\n        if (typeof child === 'undefined') {\n            child = new ThemeTrieElement(this._mainRule.clone());\n            this._children.set(head, child);\n        }\n        child.insert(tail, fontStyle, foreground, background);\n    }\n}\nexport function generateTokensCSSForColorMap(colorMap) {\n    const rules = [];\n    for (let i = 1, len = colorMap.length; i < len; i++) {\n        const color = colorMap[i];\n        rules[i] = `.mtk${i} { color: ${color}; }`;\n    }\n    rules.push('.mtki { font-style: italic; }');\n    rules.push('.mtkb { font-weight: bold; }');\n    rules.push('.mtku { text-decoration: underline; text-underline-position: under; }');\n    rules.push('.mtks { text-decoration: line-through; }');\n    rules.push('.mtks.mtku { text-decoration: underline line-through; text-underline-position: under; }');\n    return rules.join('\\n');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { NullState, nullTokenizeEncoded } from './nullTokenize.js';\nconst fallback = {\n    getInitialState: () => NullState,\n    tokenizeEncoded: (buffer, hasEOL, state) => nullTokenizeEncoded(0 /* Null */, state)\n};\nexport function tokenizeToString(languageService, text, languageId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!languageId) {\n            return _tokenizeToString(text, languageService.languageIdCodec, fallback);\n        }\n        const tokenizationSupport = yield TokenizationRegistry.getOrCreate(languageId);\n        return _tokenizeToString(text, languageService.languageIdCodec, tokenizationSupport || fallback);\n    });\n}\nexport function tokenizeLineToHTML(text, viewLineTokens, colorMap, startOffset, endOffset, tabSize, useNbsp) {\n    let result = `<div>`;\n    let charIndex = startOffset;\n    let tabsCharDelta = 0;\n    let prevIsSpace = true;\n    for (let tokenIndex = 0, tokenCount = viewLineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\n        const tokenEndIndex = viewLineTokens.getEndOffset(tokenIndex);\n        if (tokenEndIndex <= startOffset) {\n            continue;\n        }\n        let partContent = '';\n        for (; charIndex < tokenEndIndex && charIndex < endOffset; charIndex++) {\n            const charCode = text.charCodeAt(charIndex);\n            switch (charCode) {\n                case 9 /* Tab */: {\n                    let insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n                    tabsCharDelta += insertSpacesCount - 1;\n                    while (insertSpacesCount > 0) {\n                        if (useNbsp && prevIsSpace) {\n                            partContent += '&#160;';\n                            prevIsSpace = false;\n                        }\n                        else {\n                            partContent += ' ';\n                            prevIsSpace = true;\n                        }\n                        insertSpacesCount--;\n                    }\n                    break;\n                }\n                case 60 /* LessThan */:\n                    partContent += '&lt;';\n                    prevIsSpace = false;\n                    break;\n                case 62 /* GreaterThan */:\n                    partContent += '&gt;';\n                    prevIsSpace = false;\n                    break;\n                case 38 /* Ampersand */:\n                    partContent += '&amp;';\n                    prevIsSpace = false;\n                    break;\n                case 0 /* Null */:\n                    partContent += '&#00;';\n                    prevIsSpace = false;\n                    break;\n                case 65279 /* UTF8_BOM */:\n                case 8232 /* LINE_SEPARATOR */:\n                case 8233 /* PARAGRAPH_SEPARATOR */:\n                case 133 /* NEXT_LINE */:\n                    partContent += '\\ufffd';\n                    prevIsSpace = false;\n                    break;\n                case 13 /* CarriageReturn */:\n                    // zero width space, because carriage return would introduce a line break\n                    partContent += '&#8203';\n                    prevIsSpace = false;\n                    break;\n                case 32 /* Space */:\n                    if (useNbsp && prevIsSpace) {\n                        partContent += '&#160;';\n                        prevIsSpace = false;\n                    }\n                    else {\n                        partContent += ' ';\n                        prevIsSpace = true;\n                    }\n                    break;\n                default:\n                    partContent += String.fromCharCode(charCode);\n                    prevIsSpace = false;\n            }\n        }\n        result += `<span style=\"${viewLineTokens.getInlineStyle(tokenIndex, colorMap)}\">${partContent}</span>`;\n        if (tokenEndIndex > endOffset || charIndex >= endOffset) {\n            break;\n        }\n    }\n    result += `</div>`;\n    return result;\n}\nexport function _tokenizeToString(text, languageIdCodec, tokenizationSupport) {\n    let result = `<div class=\"monaco-tokenized-source\">`;\n    const lines = strings.splitLines(text);\n    let currentState = tokenizationSupport.getInitialState();\n    for (let i = 0, len = lines.length; i < len; i++) {\n        const line = lines[i];\n        if (i > 0) {\n            result += `<br/>`;\n        }\n        const tokenizationResult = tokenizationSupport.tokenizeEncoded(line, true, currentState);\n        LineTokens.convertToEndOffset(tokenizationResult.tokens, line.length);\n        const lineTokens = new LineTokens(tokenizationResult.tokens, line, languageIdCodec);\n        const viewLineTokens = lineTokens.inflate();\n        let startOffset = 0;\n        for (let j = 0, lenJ = viewLineTokens.getCount(); j < lenJ; j++) {\n            const type = viewLineTokens.getClassName(j);\n            const endIndex = viewLineTokens.getEndOffset(j);\n            result += `<span class=\"${type}\">${strings.escape(line.substring(startOffset, endIndex))}</span>`;\n            startOffset = endIndex;\n        }\n        currentState = tokenizationResult.endState;\n    }\n    result += `</div>`;\n    return result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../base/common/objects.js';\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nexport var OverviewRulerLane;\n(function (OverviewRulerLane) {\n    OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\n    OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\n    OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\n    OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\n})(OverviewRulerLane || (OverviewRulerLane = {}));\n/**\n * Position in the minimap to render the decoration.\n */\nexport var MinimapPosition;\n(function (MinimapPosition) {\n    MinimapPosition[MinimapPosition[\"Inline\"] = 1] = \"Inline\";\n    MinimapPosition[MinimapPosition[\"Gutter\"] = 2] = \"Gutter\";\n})(MinimapPosition || (MinimapPosition = {}));\nexport var InjectedTextCursorStops;\n(function (InjectedTextCursorStops) {\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Both\"] = 0] = \"Both\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Right\"] = 1] = \"Right\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Left\"] = 2] = \"Left\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"None\"] = 3] = \"None\";\n})(InjectedTextCursorStops || (InjectedTextCursorStops = {}));\nexport class TextModelResolvedOptions {\n    /**\n     * @internal\n     */\n    constructor(src) {\n        this._textModelResolvedOptionsBrand = undefined;\n        this.tabSize = Math.max(1, src.tabSize | 0);\n        this.indentSize = src.tabSize | 0;\n        this.insertSpaces = Boolean(src.insertSpaces);\n        this.defaultEOL = src.defaultEOL | 0;\n        this.trimAutoWhitespace = Boolean(src.trimAutoWhitespace);\n        this.bracketPairColorizationOptions = src.bracketPairColorizationOptions;\n    }\n    /**\n     * @internal\n     */\n    equals(other) {\n        return (this.tabSize === other.tabSize\n            && this.indentSize === other.indentSize\n            && this.insertSpaces === other.insertSpaces\n            && this.defaultEOL === other.defaultEOL\n            && this.trimAutoWhitespace === other.trimAutoWhitespace\n            && equals(this.bracketPairColorizationOptions, other.bracketPairColorizationOptions));\n    }\n    /**\n     * @internal\n     */\n    createChangeEvent(newOpts) {\n        return {\n            tabSize: this.tabSize !== newOpts.tabSize,\n            indentSize: this.indentSize !== newOpts.indentSize,\n            insertSpaces: this.insertSpaces !== newOpts.insertSpaces,\n            trimAutoWhitespace: this.trimAutoWhitespace !== newOpts.trimAutoWhitespace,\n        };\n    }\n}\nexport class FindMatch {\n    /**\n     * @internal\n     */\n    constructor(range, matches) {\n        this._findMatchBrand = undefined;\n        this.range = range;\n        this.matches = matches;\n    }\n}\n/**\n * @internal\n */\nexport class ValidAnnotatedEditOperation {\n    constructor(identifier, range, text, forceMoveMarkers, isAutoWhitespaceEdit, _isTracked) {\n        this.identifier = identifier;\n        this.range = range;\n        this.text = text;\n        this.forceMoveMarkers = forceMoveMarkers;\n        this.isAutoWhitespaceEdit = isAutoWhitespaceEdit;\n        this._isTracked = _isTracked;\n    }\n}\n/**\n * @internal\n */\nexport class SearchData {\n    constructor(regex, wordSeparators, simpleSearch) {\n        this.regex = regex;\n        this.wordSeparators = wordSeparators;\n        this.simpleSearch = simpleSearch;\n    }\n}\n/**\n * @internal\n */\nexport class ApplyEditsResult {\n    constructor(reverseEdits, changes, trimAutoWhitespaceLineNumbers) {\n        this.reverseEdits = reverseEdits;\n        this.changes = changes;\n        this.trimAutoWhitespaceLineNumbers = trimAutoWhitespaceLineNumbers;\n    }\n}\n/**\n * @internal\n */\nexport function shouldSynchronizeModel(model) {\n    return (!model.isTooLargeForSyncing() && !model.isForSimpleWidget);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { Range } from '../../../core/range.js';\nimport { BracketInfo, BracketPairWithMinIndentationInfo } from '../../../textModelBracketPairs.js';\nimport { TextEditInfo } from './beforeEditPositionMapper.js';\nimport { LanguageAgnosticBracketTokens } from './brackets.js';\nimport { lengthAdd, lengthGreaterThanEqual, lengthLessThanEqual, lengthOfString, lengthsToRange, lengthZero, positionToLength, toLength } from './length.js';\nimport { parseDocument } from './parser.js';\nimport { DenseKeyProvider } from './smallImmutableSet.js';\nimport { FastTokenizer, TextBufferTokenizer } from './tokenizer.js';\nexport class BracketPairsTree extends Disposable {\n    constructor(textModel, getLanguageConfiguration) {\n        super();\n        this.textModel = textModel;\n        this.getLanguageConfiguration = getLanguageConfiguration;\n        this.didChangeEmitter = new Emitter();\n        this.denseKeyProvider = new DenseKeyProvider();\n        this.brackets = new LanguageAgnosticBracketTokens(this.denseKeyProvider, this.getLanguageConfiguration);\n        this.onDidChange = this.didChangeEmitter.event;\n        if (textModel.backgroundTokenizationState === 0 /* Uninitialized */) {\n            // There are no token information yet\n            const brackets = this.brackets.getSingleLanguageBracketTokens(this.textModel.getLanguageId());\n            const tokenizer = new FastTokenizer(this.textModel.getValue(), brackets);\n            this.initialAstWithoutTokens = parseDocument(tokenizer, [], undefined, true);\n            this.astWithTokens = this.initialAstWithoutTokens;\n        }\n        else if (textModel.backgroundTokenizationState === 2 /* Completed */) {\n            // Skip the initial ast, as there is no flickering.\n            // Directly create the tree with token information.\n            this.initialAstWithoutTokens = undefined;\n            this.astWithTokens = this.parseDocumentFromTextBuffer([], undefined, false);\n        }\n        else if (textModel.backgroundTokenizationState === 1 /* InProgress */) {\n            this.initialAstWithoutTokens = this.parseDocumentFromTextBuffer([], undefined, true);\n            this.astWithTokens = this.initialAstWithoutTokens;\n        }\n    }\n    didLanguageChange(languageId) {\n        return this.brackets.didLanguageChange(languageId);\n    }\n    //#region TextModel events\n    handleDidChangeBackgroundTokenizationState() {\n        if (this.textModel.backgroundTokenizationState === 2 /* Completed */) {\n            const wasUndefined = this.initialAstWithoutTokens === undefined;\n            // Clear the initial tree as we can use the tree with token information now.\n            this.initialAstWithoutTokens = undefined;\n            if (!wasUndefined) {\n                this.didChangeEmitter.fire();\n            }\n        }\n    }\n    handleDidChangeTokens({ ranges }) {\n        const edits = ranges.map(r => new TextEditInfo(toLength(r.fromLineNumber - 1, 0), toLength(r.toLineNumber, 0), toLength(r.toLineNumber - r.fromLineNumber + 1, 0)));\n        this.astWithTokens = this.parseDocumentFromTextBuffer(edits, this.astWithTokens, false);\n        if (!this.initialAstWithoutTokens) {\n            this.didChangeEmitter.fire();\n        }\n    }\n    handleContentChanged(change) {\n        const edits = change.changes.map(c => {\n            const range = Range.lift(c.range);\n            return new TextEditInfo(positionToLength(range.getStartPosition()), positionToLength(range.getEndPosition()), lengthOfString(c.text));\n        }).reverse();\n        this.astWithTokens = this.parseDocumentFromTextBuffer(edits, this.astWithTokens, false);\n        if (this.initialAstWithoutTokens) {\n            this.initialAstWithoutTokens = this.parseDocumentFromTextBuffer(edits, this.initialAstWithoutTokens, false);\n        }\n    }\n    //#endregion\n    /**\n     * @pure (only if isPure = true)\n    */\n    parseDocumentFromTextBuffer(edits, previousAst, immutable) {\n        // Is much faster if `isPure = false`.\n        const isPure = false;\n        const previousAstClone = isPure ? previousAst === null || previousAst === void 0 ? void 0 : previousAst.deepClone() : previousAst;\n        const tokenizer = new TextBufferTokenizer(this.textModel, this.brackets);\n        const result = parseDocument(tokenizer, edits, previousAstClone, immutable);\n        return result;\n    }\n    getBracketsInRange(range) {\n        const startOffset = toLength(range.startLineNumber - 1, range.startColumn - 1);\n        const endOffset = toLength(range.endLineNumber - 1, range.endColumn - 1);\n        const result = new Array();\n        const node = this.initialAstWithoutTokens || this.astWithTokens;\n        collectBrackets(node, lengthZero, node.length, startOffset, endOffset, result);\n        return result;\n    }\n    getBracketPairsInRange(range, includeMinIndentation) {\n        const result = new Array();\n        const startLength = positionToLength(range.getStartPosition());\n        const endLength = positionToLength(range.getEndPosition());\n        const node = this.initialAstWithoutTokens || this.astWithTokens;\n        const context = new CollectBracketPairsContext(result, includeMinIndentation, this.textModel);\n        collectBracketPairs(node, lengthZero, node.length, startLength, endLength, context);\n        return result;\n    }\n}\nfunction collectBrackets(node, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, result, level = 0) {\n    if (node.kind === 4 /* List */) {\n        for (const child of node.children) {\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            if (lengthLessThanEqual(nodeOffsetStart, endOffset) && lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                collectBrackets(child, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, result, level);\n            }\n            nodeOffsetStart = nodeOffsetEnd;\n        }\n    }\n    else if (node.kind === 2 /* Pair */) {\n        // Don't use node.children here to improve performance\n        level++;\n        {\n            const child = node.openingBracket;\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            if (lengthLessThanEqual(nodeOffsetStart, endOffset) && lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n                result.push(new BracketInfo(range, level - 1, !node.closingBracket));\n            }\n            nodeOffsetStart = nodeOffsetEnd;\n        }\n        if (node.child) {\n            const child = node.child;\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            if (lengthLessThanEqual(nodeOffsetStart, endOffset) && lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                collectBrackets(child, nodeOffsetStart, nodeOffsetEnd, startOffset, endOffset, result, level);\n            }\n            nodeOffsetStart = nodeOffsetEnd;\n        }\n        if (node.closingBracket) {\n            const child = node.closingBracket;\n            nodeOffsetEnd = lengthAdd(nodeOffsetStart, child.length);\n            if (lengthLessThanEqual(nodeOffsetStart, endOffset) && lengthGreaterThanEqual(nodeOffsetEnd, startOffset)) {\n                const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n                result.push(new BracketInfo(range, level - 1, false));\n            }\n            nodeOffsetStart = nodeOffsetEnd;\n        }\n    }\n    else if (node.kind === 3 /* UnexpectedClosingBracket */) {\n        const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n        result.push(new BracketInfo(range, level - 1, true));\n    }\n    else if (node.kind === 1 /* Bracket */) {\n        const range = lengthsToRange(nodeOffsetStart, nodeOffsetEnd);\n        result.push(new BracketInfo(range, level - 1, false));\n    }\n}\nclass CollectBracketPairsContext {\n    constructor(result, includeMinIndentation, textModel) {\n        this.result = result;\n        this.includeMinIndentation = includeMinIndentation;\n        this.textModel = textModel;\n    }\n}\nfunction collectBracketPairs(node, nodeOffset, nodeOffsetEnd, startOffset, endOffset, context, level = 0) {\n    var _a;\n    if (node.kind === 2 /* Pair */) {\n        const openingBracketEnd = lengthAdd(nodeOffset, node.openingBracket.length);\n        let minIndentation = -1;\n        if (context.includeMinIndentation) {\n            minIndentation = node.computeMinIndentation(nodeOffset, context.textModel);\n        }\n        context.result.push(new BracketPairWithMinIndentationInfo(lengthsToRange(nodeOffset, nodeOffsetEnd), lengthsToRange(nodeOffset, openingBracketEnd), node.closingBracket\n            ? lengthsToRange(lengthAdd(openingBracketEnd, ((_a = node.child) === null || _a === void 0 ? void 0 : _a.length) || lengthZero), nodeOffsetEnd)\n            : undefined, level, minIndentation));\n        level++;\n    }\n    let curOffset = nodeOffset;\n    for (const child of node.children) {\n        const childOffset = curOffset;\n        curOffset = lengthAdd(curOffset, child.length);\n        if (lengthLessThanEqual(childOffset, endOffset) && lengthLessThanEqual(startOffset, curOffset)) {\n            collectBracketPairs(child, childOffset, curOffset, startOffset, endOffset, context, level);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { BracketPairsTree } from './bracketPairsTree/bracketPairsTree.js';\nimport { ignoreBracketsInToken } from '../../languages/supports.js';\nimport { BracketsUtils } from '../../languages/supports/richEditBrackets.js';\nexport class BracketPairsTextModelPart extends Disposable {\n    constructor(textModel, languageConfigurationService) {\n        super();\n        this.textModel = textModel;\n        this.languageConfigurationService = languageConfigurationService;\n        this.bracketPairsTree = this._register(new MutableDisposable());\n        this.onDidChangeEmitter = new Emitter();\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.bracketsRequested = false;\n        this._register(this.languageConfigurationService.onDidChange(e => {\n            var _a;\n            if (!e.languageId || ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.didLanguageChange(e.languageId))) {\n                this.bracketPairsTree.clear();\n                this.updateBracketPairsTree();\n            }\n        }));\n    }\n    get isDocumentSupported() {\n        const maxSupportedDocumentLength = /* max lines */ 50000 * /* average column count */ 100;\n        return this.textModel.getValueLength() <= maxSupportedDocumentLength;\n    }\n    //#region TextModel events\n    handleDidChangeOptions(e) {\n        this.bracketPairsTree.clear();\n        this.updateBracketPairsTree();\n    }\n    handleDidChangeLanguage(e) {\n        this.bracketPairsTree.clear();\n        this.updateBracketPairsTree();\n    }\n    handleDidChangeContent(change) {\n        var _a;\n        (_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.handleContentChanged(change);\n    }\n    handleDidChangeBackgroundTokenizationState() {\n        var _a;\n        (_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.handleDidChangeBackgroundTokenizationState();\n    }\n    handleDidChangeTokens(e) {\n        var _a;\n        (_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.handleDidChangeTokens(e);\n    }\n    //#endregion\n    updateBracketPairsTree() {\n        if (this.bracketsRequested && this.isDocumentSupported) {\n            if (!this.bracketPairsTree.value) {\n                const store = new DisposableStore();\n                this.bracketPairsTree.value = createDisposableRef(store.add(new BracketPairsTree(this.textModel, (languageId) => {\n                    return this.languageConfigurationService.getLanguageConfiguration(languageId);\n                })), store);\n                store.add(this.bracketPairsTree.value.object.onDidChange(e => this.onDidChangeEmitter.fire(e)));\n                this.onDidChangeEmitter.fire();\n            }\n        }\n        else {\n            if (this.bracketPairsTree.value) {\n                this.bracketPairsTree.clear();\n                // Important: Don't call fire if there was no change!\n                this.onDidChangeEmitter.fire();\n            }\n        }\n    }\n    /**\n     * Returns all bracket pairs that intersect the given range.\n     * The result is sorted by the start position.\n    */\n    getBracketPairsInRange(range) {\n        var _a;\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getBracketPairsInRange(range, false)) || [];\n    }\n    getBracketPairsInRangeWithMinIndentation(range) {\n        var _a;\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getBracketPairsInRange(range, true)) || [];\n    }\n    getBracketsInRange(range) {\n        var _a;\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return ((_a = this.bracketPairsTree.value) === null || _a === void 0 ? void 0 : _a.object.getBracketsInRange(range)) || [];\n    }\n    findMatchingBracketUp(_bracket, _position, maxDuration) {\n        const bracket = _bracket.toLowerCase();\n        const position = this.textModel.validatePosition(_position);\n        const languageId = this.textModel.getLanguageIdAtPosition(position.lineNumber, position.column);\n        const bracketsSupport = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n        if (!bracketsSupport) {\n            return null;\n        }\n        const data = bracketsSupport.textIsBracket[bracket];\n        if (!data) {\n            return null;\n        }\n        return stripBracketSearchCanceled(this._findMatchingBracketUp(data, position, createTimeBasedContinueBracketSearchPredicate(maxDuration)));\n    }\n    matchBracket(position, maxDuration) {\n        const continueSearchPredicate = createTimeBasedContinueBracketSearchPredicate(maxDuration);\n        return this._matchBracket(this.textModel.validatePosition(position), continueSearchPredicate);\n    }\n    _establishBracketSearchOffsets(position, lineTokens, modeBrackets, tokenIndex) {\n        const tokenCount = lineTokens.getCount();\n        const currentLanguageId = lineTokens.getLanguageId(tokenIndex);\n        // limit search to not go before `maxBracketLength`\n        let searchStartOffset = Math.max(0, position.column - 1 - modeBrackets.maxBracketLength);\n        for (let i = tokenIndex - 1; i >= 0; i--) {\n            const tokenEndOffset = lineTokens.getEndOffset(i);\n            if (tokenEndOffset <= searchStartOffset) {\n                break;\n            }\n            if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i)) || lineTokens.getLanguageId(i) !== currentLanguageId) {\n                searchStartOffset = tokenEndOffset;\n                break;\n            }\n        }\n        // limit search to not go after `maxBracketLength`\n        let searchEndOffset = Math.min(lineTokens.getLineContent().length, position.column - 1 + modeBrackets.maxBracketLength);\n        for (let i = tokenIndex + 1; i < tokenCount; i++) {\n            const tokenStartOffset = lineTokens.getStartOffset(i);\n            if (tokenStartOffset >= searchEndOffset) {\n                break;\n            }\n            if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i)) || lineTokens.getLanguageId(i) !== currentLanguageId) {\n                searchEndOffset = tokenStartOffset;\n                break;\n            }\n        }\n        return { searchStartOffset, searchEndOffset };\n    }\n    _matchBracket(position, continueSearchPredicate) {\n        const lineNumber = position.lineNumber;\n        const lineTokens = this.textModel.getLineTokens(lineNumber);\n        const lineText = this.textModel.getLineContent(lineNumber);\n        const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        if (tokenIndex < 0) {\n            return null;\n        }\n        const currentModeBrackets = this.languageConfigurationService.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).brackets;\n        // check that the token is not to be ignored\n        if (currentModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex))) {\n            let { searchStartOffset, searchEndOffset } = this._establishBracketSearchOffsets(position, lineTokens, currentModeBrackets, tokenIndex);\n            // it might be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\n            // `bestResult` will contain the most right-side result\n            let bestResult = null;\n            while (true) {\n                const foundBracket = BracketsUtils.findNextBracketInRange(currentModeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!foundBracket) {\n                    // there are no more brackets in this text\n                    break;\n                }\n                // check that we didn't hit a bracket too far away from position\n                if (foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n                    const foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n                    const r = this._matchFoundBracket(foundBracket, currentModeBrackets.textIsBracket[foundBracketText], currentModeBrackets.textIsOpenBracket[foundBracketText], continueSearchPredicate);\n                    if (r) {\n                        if (r instanceof BracketSearchCanceled) {\n                            return null;\n                        }\n                        bestResult = r;\n                    }\n                }\n                searchStartOffset = foundBracket.endColumn - 1;\n            }\n            if (bestResult) {\n                return bestResult;\n            }\n        }\n        // If position is in between two tokens, try also looking in the previous token\n        if (tokenIndex > 0 && lineTokens.getStartOffset(tokenIndex) === position.column - 1) {\n            const prevTokenIndex = tokenIndex - 1;\n            const prevModeBrackets = this.languageConfigurationService.getLanguageConfiguration(lineTokens.getLanguageId(prevTokenIndex)).brackets;\n            // check that previous token is not to be ignored\n            if (prevModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(prevTokenIndex))) {\n                const { searchStartOffset, searchEndOffset } = this._establishBracketSearchOffsets(position, lineTokens, prevModeBrackets, prevTokenIndex);\n                const foundBracket = BracketsUtils.findPrevBracketInRange(prevModeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                // check that we didn't hit a bracket too far away from position\n                if (foundBracket && foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n                    const foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n                    const r = this._matchFoundBracket(foundBracket, prevModeBrackets.textIsBracket[foundBracketText], prevModeBrackets.textIsOpenBracket[foundBracketText], continueSearchPredicate);\n                    if (r) {\n                        if (r instanceof BracketSearchCanceled) {\n                            return null;\n                        }\n                        return r;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    _matchFoundBracket(foundBracket, data, isOpen, continueSearchPredicate) {\n        if (!data) {\n            return null;\n        }\n        const matched = (isOpen\n            ? this._findMatchingBracketDown(data, foundBracket.getEndPosition(), continueSearchPredicate)\n            : this._findMatchingBracketUp(data, foundBracket.getStartPosition(), continueSearchPredicate));\n        if (!matched) {\n            return null;\n        }\n        if (matched instanceof BracketSearchCanceled) {\n            return matched;\n        }\n        return [foundBracket, matched];\n    }\n    _findMatchingBracketUp(bracket, position, continueSearchPredicate) {\n        // console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n        const languageId = bracket.languageId;\n        const reversedBracketRegex = bracket.reversedRegex;\n        let count = -1;\n        let totalCallCount = 0;\n        const searchPrevMatchingBracketInRange = (lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                if (bracket.isOpen(hitText)) {\n                    count++;\n                }\n                else if (bracket.isClose(hitText)) {\n                    count--;\n                }\n                if (count === 0) {\n                    return r;\n                }\n                searchEndOffset = r.startColumn - 1;\n            }\n            return null;\n        };\n        for (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n            const lineTokens = this.textModel.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = tokenCount - 1;\n            let searchStartOffset = lineText.length;\n            let searchEndOffset = lineText.length;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex >= 0; tokenIndex--) {\n                const searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchStartOffset\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return r;\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return r;\n                }\n            }\n        }\n        return null;\n    }\n    _findMatchingBracketDown(bracket, position, continueSearchPredicate) {\n        // console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n        const languageId = bracket.languageId;\n        const bracketRegex = bracket.forwardRegex;\n        let count = 1;\n        let totalCallCount = 0;\n        const searchNextMatchingBracketInRange = (lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findNextBracketInRange(bracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                if (bracket.isOpen(hitText)) {\n                    count++;\n                }\n                else if (bracket.isClose(hitText)) {\n                    count--;\n                }\n                if (count === 0) {\n                    return r;\n                }\n                searchStartOffset = r.endColumn - 1;\n            }\n            return null;\n        };\n        const lineCount = this.textModel.getLineCount();\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return r;\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return r;\n                }\n            }\n        }\n        return null;\n    }\n    findPrevBracket(_position) {\n        const position = this.textModel.validatePosition(_position);\n        let languageId = null;\n        let modeBrackets = null;\n        for (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n            const lineTokens = this.textModel.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = tokenCount - 1;\n            let searchStartOffset = lineText.length;\n            let searchEndOffset = lineText.length;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex >= 0; tokenIndex--) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(modeBrackets, r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchStartOffset\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(modeBrackets, r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return this._toFoundBracket(modeBrackets, r);\n                }\n            }\n        }\n        return null;\n    }\n    findNextBracket(_position) {\n        const position = this.textModel.validatePosition(_position);\n        const lineCount = this.textModel.getLineCount();\n        let languageId = null;\n        let modeBrackets = null;\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(modeBrackets, r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(modeBrackets, r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return this._toFoundBracket(modeBrackets, r);\n                }\n            }\n        }\n        return null;\n    }\n    findEnclosingBrackets(_position, maxDuration) {\n        const continueSearchPredicate = createTimeBasedContinueBracketSearchPredicate(maxDuration);\n        const position = this.textModel.validatePosition(_position);\n        const lineCount = this.textModel.getLineCount();\n        const savedCounts = new Map();\n        let counts = [];\n        const resetCounts = (languageId, modeBrackets) => {\n            if (!savedCounts.has(languageId)) {\n                const tmp = [];\n                for (let i = 0, len = modeBrackets ? modeBrackets.brackets.length : 0; i < len; i++) {\n                    tmp[i] = 0;\n                }\n                savedCounts.set(languageId, tmp);\n            }\n            counts = savedCounts.get(languageId);\n        };\n        let totalCallCount = 0;\n        const searchInRange = (modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                const bracket = modeBrackets.textIsBracket[hitText];\n                if (bracket) {\n                    if (bracket.isOpen(hitText)) {\n                        counts[bracket.index]++;\n                    }\n                    else if (bracket.isClose(hitText)) {\n                        counts[bracket.index]--;\n                    }\n                    if (counts[bracket.index] === -1) {\n                        return this._matchFoundBracket(r, bracket, false, continueSearchPredicate);\n                    }\n                }\n                searchStartOffset = r.endColumn - 1;\n            }\n            return null;\n        };\n        let languageId = null;\n        let modeBrackets = null;\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    resetCounts(languageId, modeBrackets);\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return stripBracketSearchCanceled(r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    resetCounts(languageId, modeBrackets);\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return stripBracketSearchCanceled(r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return stripBracketSearchCanceled(r);\n                }\n            }\n        }\n        return null;\n    }\n    _toFoundBracket(modeBrackets, r) {\n        if (!r) {\n            return null;\n        }\n        let text = this.textModel.getValueInRange(r);\n        text = text.toLowerCase();\n        const data = modeBrackets.textIsBracket[text];\n        if (!data) {\n            return null;\n        }\n        return {\n            range: r,\n            open: data.open,\n            close: data.close,\n            isOpen: modeBrackets.textIsOpenBracket[text]\n        };\n    }\n}\nfunction createDisposableRef(object, disposable) {\n    return {\n        object,\n        dispose: () => disposable === null || disposable === void 0 ? void 0 : disposable.dispose(),\n    };\n}\nfunction createTimeBasedContinueBracketSearchPredicate(maxDuration) {\n    if (typeof maxDuration === 'undefined') {\n        return () => true;\n    }\n    else {\n        const startTime = Date.now();\n        return () => {\n            return (Date.now() - startTime <= maxDuration);\n        };\n    }\n}\nclass BracketSearchCanceled {\n    constructor() {\n        this._searchCanceledBrand = undefined;\n    }\n}\nBracketSearchCanceled.INSTANCE = new BracketSearchCanceled();\nfunction stripBracketSearchCanceled(result) {\n    if (result instanceof BracketSearchCanceled) {\n        return null;\n    }\n    return result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns } from '../../../core/cursorColumns.js';\nimport { lengthAdd, lengthGetLineCount, lengthToObj, lengthZero } from './length.js';\nimport { SmallImmutableSet } from './smallImmutableSet.js';\n/**\n * The base implementation for all AST nodes.\n*/\nclass BaseAstNode {\n    constructor(length) {\n        this._length = length;\n    }\n    /**\n     * The length of the entire node, which should equal the sum of lengths of all children.\n    */\n    get length() {\n        return this._length;\n    }\n}\n/**\n * Represents a bracket pair including its child (e.g. `{ ... }`).\n * Might be unclosed.\n * Immutable, if all children are immutable.\n*/\nexport class PairAstNode extends BaseAstNode {\n    constructor(length, openingBracket, child, closingBracket, missingOpeningBracketIds) {\n        super(length);\n        this.openingBracket = openingBracket;\n        this.child = child;\n        this.closingBracket = closingBracket;\n        this.missingOpeningBracketIds = missingOpeningBracketIds;\n    }\n    static create(openingBracket, child, closingBracket) {\n        let length = openingBracket.length;\n        if (child) {\n            length = lengthAdd(length, child.length);\n        }\n        if (closingBracket) {\n            length = lengthAdd(length, closingBracket.length);\n        }\n        return new PairAstNode(length, openingBracket, child, closingBracket, child ? child.missingOpeningBracketIds : SmallImmutableSet.getEmpty());\n    }\n    get kind() {\n        return 2 /* Pair */;\n    }\n    get listHeight() {\n        return 0;\n    }\n    get childrenLength() {\n        return 3;\n    }\n    getChild(idx) {\n        switch (idx) {\n            case 0: return this.openingBracket;\n            case 1: return this.child;\n            case 2: return this.closingBracket;\n        }\n        throw new Error('Invalid child index');\n    }\n    /**\n     * Avoid using this property, it allocates an array!\n    */\n    get children() {\n        const result = new Array();\n        result.push(this.openingBracket);\n        if (this.child) {\n            result.push(this.child);\n        }\n        if (this.closingBracket) {\n            result.push(this.closingBracket);\n        }\n        return result;\n    }\n    canBeReused(openBracketIds) {\n        if (this.closingBracket === null) {\n            // Unclosed pair ast nodes only\n            // end at the end of the document\n            // or when a parent node is closed.\n            // This could be improved:\n            // Only return false if some next token is neither \"undefined\" nor a bracket that closes a parent.\n            return false;\n        }\n        if (openBracketIds.intersects(this.missingOpeningBracketIds)) {\n            return false;\n        }\n        return true;\n    }\n    deepClone() {\n        return new PairAstNode(this.length, this.openingBracket.deepClone(), this.child && this.child.deepClone(), this.closingBracket && this.closingBracket.deepClone(), this.missingOpeningBracketIds);\n    }\n    computeMinIndentation(offset, textModel) {\n        return this.child ? this.child.computeMinIndentation(lengthAdd(offset, this.openingBracket.length), textModel) : Number.MAX_SAFE_INTEGER;\n    }\n}\nexport class ListAstNode extends BaseAstNode {\n    /**\n     * Use ListAstNode.create.\n    */\n    constructor(length, listHeight, _missingOpeningBracketIds) {\n        super(length);\n        this.listHeight = listHeight;\n        this._missingOpeningBracketIds = _missingOpeningBracketIds;\n        this.cachedMinIndentation = -1;\n    }\n    /**\n     * This method uses more memory-efficient list nodes that can only store 2 or 3 children.\n    */\n    static create23(item1, item2, item3, immutable = false) {\n        let length = item1.length;\n        let missingBracketIds = item1.missingOpeningBracketIds;\n        if (item1.listHeight !== item2.listHeight) {\n            throw new Error('Invalid list heights');\n        }\n        length = lengthAdd(length, item2.length);\n        missingBracketIds = missingBracketIds.merge(item2.missingOpeningBracketIds);\n        if (item3) {\n            if (item1.listHeight !== item3.listHeight) {\n                throw new Error('Invalid list heights');\n            }\n            length = lengthAdd(length, item3.length);\n            missingBracketIds = missingBracketIds.merge(item3.missingOpeningBracketIds);\n        }\n        return immutable\n            ? new Immutable23ListAstNode(length, item1.listHeight + 1, item1, item2, item3, missingBracketIds)\n            : new TwoThreeListAstNode(length, item1.listHeight + 1, item1, item2, item3, missingBracketIds);\n    }\n    static getEmpty() {\n        return new ImmutableArrayListAstNode(lengthZero, 0, [], SmallImmutableSet.getEmpty());\n    }\n    get kind() {\n        return 4 /* List */;\n    }\n    get missingOpeningBracketIds() {\n        return this._missingOpeningBracketIds;\n    }\n    throwIfImmutable() {\n        // NOOP\n    }\n    makeLastElementMutable() {\n        this.throwIfImmutable();\n        const childCount = this.childrenLength;\n        if (childCount === 0) {\n            return undefined;\n        }\n        const lastChild = this.getChild(childCount - 1);\n        const mutable = lastChild.kind === 4 /* List */ ? lastChild.toMutable() : lastChild;\n        if (lastChild !== mutable) {\n            this.setChild(childCount - 1, mutable);\n        }\n        return mutable;\n    }\n    makeFirstElementMutable() {\n        this.throwIfImmutable();\n        const childCount = this.childrenLength;\n        if (childCount === 0) {\n            return undefined;\n        }\n        const firstChild = this.getChild(0);\n        const mutable = firstChild.kind === 4 /* List */ ? firstChild.toMutable() : firstChild;\n        if (firstChild !== mutable) {\n            this.setChild(0, mutable);\n        }\n        return mutable;\n    }\n    canBeReused(openBracketIds) {\n        if (openBracketIds.intersects(this.missingOpeningBracketIds)) {\n            return false;\n        }\n        let lastChild = this;\n        let lastLength;\n        while (lastChild.kind === 4 /* List */ && (lastLength = lastChild.childrenLength) > 0) {\n            lastChild = lastChild.getChild(lastLength - 1);\n        }\n        return lastChild.canBeReused(openBracketIds);\n    }\n    handleChildrenChanged() {\n        this.throwIfImmutable();\n        const count = this.childrenLength;\n        let length = this.getChild(0).length;\n        let unopenedBrackets = this.getChild(0).missingOpeningBracketIds;\n        for (let i = 1; i < count; i++) {\n            const child = this.getChild(i);\n            length = lengthAdd(length, child.length);\n            unopenedBrackets = unopenedBrackets.merge(child.missingOpeningBracketIds);\n        }\n        this._length = length;\n        this._missingOpeningBracketIds = unopenedBrackets;\n        this.cachedMinIndentation = -1;\n    }\n    computeMinIndentation(offset, textModel) {\n        if (this.cachedMinIndentation !== -1) {\n            return this.cachedMinIndentation;\n        }\n        let minIndentation = Number.MAX_SAFE_INTEGER;\n        let childOffset = offset;\n        for (let i = 0; i < this.childrenLength; i++) {\n            const child = this.getChild(i);\n            if (child) {\n                minIndentation = Math.min(minIndentation, child.computeMinIndentation(childOffset, textModel));\n                childOffset = lengthAdd(childOffset, child.length);\n            }\n        }\n        this.cachedMinIndentation = minIndentation;\n        return minIndentation;\n    }\n}\nclass TwoThreeListAstNode extends ListAstNode {\n    constructor(length, listHeight, _item1, _item2, _item3, missingOpeningBracketIds) {\n        super(length, listHeight, missingOpeningBracketIds);\n        this._item1 = _item1;\n        this._item2 = _item2;\n        this._item3 = _item3;\n    }\n    get childrenLength() {\n        return this._item3 !== null ? 3 : 2;\n    }\n    getChild(idx) {\n        switch (idx) {\n            case 0: return this._item1;\n            case 1: return this._item2;\n            case 2: return this._item3;\n        }\n        throw new Error('Invalid child index');\n    }\n    setChild(idx, node) {\n        switch (idx) {\n            case 0:\n                this._item1 = node;\n                return;\n            case 1:\n                this._item2 = node;\n                return;\n            case 2:\n                this._item3 = node;\n                return;\n        }\n        throw new Error('Invalid child index');\n    }\n    get children() {\n        return this._item3 ? [this._item1, this._item2, this._item3] : [this._item1, this._item2];\n    }\n    get item1() {\n        return this._item1;\n    }\n    get item2() {\n        return this._item2;\n    }\n    get item3() {\n        return this._item3;\n    }\n    deepClone() {\n        return new TwoThreeListAstNode(this.length, this.listHeight, this._item1.deepClone(), this._item2.deepClone(), this._item3 ? this._item3.deepClone() : null, this.missingOpeningBracketIds);\n    }\n    appendChildOfSameHeight(node) {\n        if (this._item3) {\n            throw new Error('Cannot append to a full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        this._item3 = node;\n        this.handleChildrenChanged();\n    }\n    unappendChild() {\n        if (!this._item3) {\n            throw new Error('Cannot remove from a non-full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        const result = this._item3;\n        this._item3 = null;\n        this.handleChildrenChanged();\n        return result;\n    }\n    prependChildOfSameHeight(node) {\n        if (this._item3) {\n            throw new Error('Cannot prepend to a full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        this._item3 = this._item2;\n        this._item2 = this._item1;\n        this._item1 = node;\n        this.handleChildrenChanged();\n    }\n    unprependChild() {\n        if (!this._item3) {\n            throw new Error('Cannot remove from a non-full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        const result = this._item1;\n        this._item1 = this._item2;\n        this._item2 = this._item3;\n        this._item3 = null;\n        this.handleChildrenChanged();\n        return result;\n    }\n    toMutable() {\n        return this;\n    }\n}\n/**\n * Immutable, if all children are immutable.\n*/\nclass Immutable23ListAstNode extends TwoThreeListAstNode {\n    toMutable() {\n        return new TwoThreeListAstNode(this.length, this.listHeight, this.item1, this.item2, this.item3, this.missingOpeningBracketIds);\n    }\n    throwIfImmutable() {\n        throw new Error('this instance is immutable');\n    }\n}\n/**\n * For debugging.\n*/\nclass ArrayListAstNode extends ListAstNode {\n    constructor(length, listHeight, _children, missingOpeningBracketIds) {\n        super(length, listHeight, missingOpeningBracketIds);\n        this._children = _children;\n    }\n    get childrenLength() {\n        return this._children.length;\n    }\n    getChild(idx) {\n        return this._children[idx];\n    }\n    setChild(idx, child) {\n        this._children[idx] = child;\n    }\n    get children() {\n        return this._children;\n    }\n    deepClone() {\n        const children = new Array(this._children.length);\n        for (let i = 0; i < this._children.length; i++) {\n            children[i] = this._children[i].deepClone();\n        }\n        return new ArrayListAstNode(this.length, this.listHeight, children, this.missingOpeningBracketIds);\n    }\n    appendChildOfSameHeight(node) {\n        this.throwIfImmutable();\n        this._children.push(node);\n        this.handleChildrenChanged();\n    }\n    unappendChild() {\n        this.throwIfImmutable();\n        const item = this._children.pop();\n        this.handleChildrenChanged();\n        return item;\n    }\n    prependChildOfSameHeight(node) {\n        this.throwIfImmutable();\n        this._children.unshift(node);\n        this.handleChildrenChanged();\n    }\n    unprependChild() {\n        this.throwIfImmutable();\n        const item = this._children.shift();\n        this.handleChildrenChanged();\n        return item;\n    }\n    toMutable() {\n        return this;\n    }\n}\n/**\n * Immutable, if all children are immutable.\n*/\nclass ImmutableArrayListAstNode extends ArrayListAstNode {\n    toMutable() {\n        return new ArrayListAstNode(this.length, this.listHeight, [...this.children], this.missingOpeningBracketIds);\n    }\n    throwIfImmutable() {\n        throw new Error('this instance is immutable');\n    }\n}\nconst emptyArray = [];\nclass ImmutableLeafAstNode extends BaseAstNode {\n    get listHeight() {\n        return 0;\n    }\n    get childrenLength() {\n        return 0;\n    }\n    getChild(idx) {\n        return null;\n    }\n    get children() {\n        return emptyArray;\n    }\n    deepClone() {\n        return this;\n    }\n}\nexport class TextAstNode extends ImmutableLeafAstNode {\n    get kind() {\n        return 0 /* Text */;\n    }\n    get missingOpeningBracketIds() {\n        return SmallImmutableSet.getEmpty();\n    }\n    canBeReused(_openedBracketIds) {\n        return true;\n    }\n    computeMinIndentation(offset, textModel) {\n        const start = lengthToObj(offset);\n        // Text ast nodes don't have partial indentation (ensured by the tokenizer).\n        // Thus, if this text node does not start at column 0, the first line cannot have any indentation at all.\n        const startLineNumber = (start.columnCount === 0 ? start.lineCount : start.lineCount + 1) + 1;\n        const endLineNumber = lengthGetLineCount(lengthAdd(offset, this.length)) + 1;\n        let result = Number.MAX_SAFE_INTEGER;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const firstNonWsColumn = textModel.getLineFirstNonWhitespaceColumn(lineNumber);\n            const lineContent = textModel.getLineContent(lineNumber);\n            if (firstNonWsColumn === 0) {\n                continue;\n            }\n            const visibleColumn = CursorColumns.visibleColumnFromColumn(lineContent, firstNonWsColumn, textModel.getOptions().tabSize);\n            result = Math.min(result, visibleColumn);\n        }\n        return result;\n    }\n}\nexport class BracketAstNode extends ImmutableLeafAstNode {\n    constructor(length, languageId, \n    /**\n     * In case of a opening bracket, this is the id of the opening bracket.\n     * In case of a closing bracket, this contains the ids of all opening brackets it can close.\n    */\n    bracketIds) {\n        super(length);\n        this.languageId = languageId;\n        this.bracketIds = bracketIds;\n    }\n    static create(length, languageId, bracketIds) {\n        const node = new BracketAstNode(length, languageId, bracketIds);\n        return node;\n    }\n    get kind() {\n        return 1 /* Bracket */;\n    }\n    get missingOpeningBracketIds() {\n        return SmallImmutableSet.getEmpty();\n    }\n    canBeReused(_openedBracketIds) {\n        // These nodes could be reused,\n        // but not in a general way.\n        // Their parent may be reused.\n        return false;\n    }\n    computeMinIndentation(offset, textModel) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n}\nexport class InvalidBracketAstNode extends ImmutableLeafAstNode {\n    constructor(closingBrackets, length) {\n        super(length);\n        this.missingOpeningBracketIds = closingBrackets;\n    }\n    get kind() {\n        return 3 /* UnexpectedClosingBracket */;\n    }\n    canBeReused(openedBracketIds) {\n        return !openedBracketIds.intersects(this.missingOpeningBracketIds);\n    }\n    computeMinIndentation(offset, textModel) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { lengthAdd, lengthDiffNonNegative, lengthLessThanEqual, lengthToObj, toLength } from './length.js';\nexport class TextEditInfo {\n    constructor(startOffset, endOffset, newLength) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.newLength = newLength;\n    }\n}\nexport class BeforeEditPositionMapper {\n    /**\n     * @param edits Must be sorted by offset in ascending order.\n    */\n    constructor(edits, documentLength) {\n        this.documentLength = documentLength;\n        this.nextEditIdx = 0;\n        this.deltaOldToNewLineCount = 0;\n        this.deltaOldToNewColumnCount = 0;\n        this.deltaLineIdxInOld = -1;\n        this.edits = edits.map(edit => TextEditInfoCache.from(edit));\n    }\n    /**\n     * @param offset Must be equal to or greater than the last offset this method has been called with.\n    */\n    getOffsetBeforeChange(offset) {\n        this.adjustNextEdit(offset);\n        return this.translateCurToOld(offset);\n    }\n    /**\n     * @param offset Must be equal to or greater than the last offset this method has been called with.\n    */\n    getDistanceToNextChange(offset) {\n        this.adjustNextEdit(offset);\n        const nextEdit = this.edits[this.nextEditIdx];\n        const nextChangeOffset = nextEdit ? this.translateOldToCur(nextEdit.offsetObj) : this.documentLength;\n        return lengthDiffNonNegative(offset, nextChangeOffset);\n    }\n    translateOldToCur(oldOffsetObj) {\n        if (oldOffsetObj.lineCount === this.deltaLineIdxInOld) {\n            return toLength(oldOffsetObj.lineCount + this.deltaOldToNewLineCount, oldOffsetObj.columnCount + this.deltaOldToNewColumnCount);\n        }\n        else {\n            return toLength(oldOffsetObj.lineCount + this.deltaOldToNewLineCount, oldOffsetObj.columnCount);\n        }\n    }\n    translateCurToOld(newOffset) {\n        const offsetObj = lengthToObj(newOffset);\n        if (offsetObj.lineCount - this.deltaOldToNewLineCount === this.deltaLineIdxInOld) {\n            return toLength(offsetObj.lineCount - this.deltaOldToNewLineCount, offsetObj.columnCount - this.deltaOldToNewColumnCount);\n        }\n        else {\n            return toLength(offsetObj.lineCount - this.deltaOldToNewLineCount, offsetObj.columnCount);\n        }\n    }\n    adjustNextEdit(offset) {\n        while (this.nextEditIdx < this.edits.length) {\n            const nextEdit = this.edits[this.nextEditIdx];\n            // After applying the edit, what is its end offset (considering all previous edits)?\n            const nextEditEndOffsetInCur = this.translateOldToCur(nextEdit.endOffsetAfterObj);\n            if (lengthLessThanEqual(nextEditEndOffsetInCur, offset)) {\n                // We are after the edit, skip it\n                this.nextEditIdx++;\n                const nextEditEndOffsetInCurObj = lengthToObj(nextEditEndOffsetInCur);\n                // Before applying the edit, what is its end offset (considering all previous edits)?\n                const nextEditEndOffsetBeforeInCurObj = lengthToObj(this.translateOldToCur(nextEdit.endOffsetBeforeObj));\n                const lineDelta = nextEditEndOffsetInCurObj.lineCount - nextEditEndOffsetBeforeInCurObj.lineCount;\n                this.deltaOldToNewLineCount += lineDelta;\n                const previousColumnDelta = this.deltaLineIdxInOld === nextEdit.endOffsetBeforeObj.lineCount ? this.deltaOldToNewColumnCount : 0;\n                const columnDelta = nextEditEndOffsetInCurObj.columnCount - nextEditEndOffsetBeforeInCurObj.columnCount;\n                this.deltaOldToNewColumnCount = previousColumnDelta + columnDelta;\n                this.deltaLineIdxInOld = nextEdit.endOffsetBeforeObj.lineCount;\n            }\n            else {\n                // We are in or before the edit.\n                break;\n            }\n        }\n    }\n}\nclass TextEditInfoCache {\n    constructor(startOffset, endOffset, textLength) {\n        this.endOffsetBeforeObj = lengthToObj(endOffset);\n        this.endOffsetAfterObj = lengthToObj(lengthAdd(startOffset, textLength));\n        this.offsetObj = lengthToObj(startOffset);\n    }\n    static from(edit) {\n        return new TextEditInfoCache(edit.startOffset, edit.endOffset, edit.newLength);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { escapeRegExpCharacters } from '../../../../../base/common/strings.js';\nimport { BracketAstNode } from './ast.js';\nimport { toLength } from './length.js';\nimport { identityKeyProvider, SmallImmutableSet } from './smallImmutableSet.js';\nimport { Token } from './tokenizer.js';\nexport class BracketTokens {\n    constructor(map) {\n        this.map = map;\n        this.hasRegExp = false;\n        this._regExpGlobal = null;\n    }\n    static createFromLanguage(configuration, denseKeyProvider) {\n        function getId(languageId, openingText) {\n            return denseKeyProvider.getKey(`${languageId}:::${openingText}`);\n        }\n        const brackets = configuration.characterPair.getColorizedBrackets();\n        const closingBrackets = new Map();\n        const openingBrackets = new Set();\n        for (const [openingText, closingText] of brackets) {\n            openingBrackets.add(openingText);\n            let info = closingBrackets.get(closingText);\n            const openingTextId = getId(configuration.languageId, openingText);\n            if (!info) {\n                info = { openingBrackets: SmallImmutableSet.getEmpty(), first: openingTextId };\n                closingBrackets.set(closingText, info);\n            }\n            info.openingBrackets = info.openingBrackets.add(openingTextId, identityKeyProvider);\n        }\n        const map = new Map();\n        for (const [closingText, info] of closingBrackets) {\n            const length = toLength(0, closingText.length);\n            map.set(closingText, new Token(length, 2 /* ClosingBracket */, info.first, info.openingBrackets, BracketAstNode.create(length, configuration.languageId, info.openingBrackets)));\n        }\n        for (const openingText of openingBrackets) {\n            const length = toLength(0, openingText.length);\n            const openingTextId = getId(configuration.languageId, openingText);\n            const bracketIds = SmallImmutableSet.getEmpty().add(openingTextId, identityKeyProvider);\n            map.set(openingText, new Token(length, 1 /* OpeningBracket */, openingTextId, bracketIds, BracketAstNode.create(length, configuration.languageId, bracketIds)));\n        }\n        return new BracketTokens(map);\n    }\n    getRegExpStr() {\n        if (this.isEmpty) {\n            return null;\n        }\n        else {\n            const keys = [...this.map.keys()];\n            keys.sort();\n            keys.reverse();\n            return keys.map(k => prepareBracketForRegExp(k)).join('|');\n        }\n    }\n    /**\n     * Returns null if there is no such regexp (because there are no brackets).\n    */\n    get regExpGlobal() {\n        if (!this.hasRegExp) {\n            const regExpStr = this.getRegExpStr();\n            this._regExpGlobal = regExpStr ? new RegExp(regExpStr, 'g') : null;\n            this.hasRegExp = true;\n        }\n        return this._regExpGlobal;\n    }\n    getToken(value) {\n        return this.map.get(value);\n    }\n    findClosingTokenText(openingBracketIds) {\n        for (const [closingText, info] of this.map) {\n            if (info.bracketIds.intersects(openingBracketIds)) {\n                return closingText;\n            }\n        }\n        return undefined;\n    }\n    get isEmpty() {\n        return this.map.size === 0;\n    }\n}\nfunction prepareBracketForRegExp(str) {\n    const escaped = escapeRegExpCharacters(str);\n    // This bracket pair uses letters like e.g. \"begin\" - \"end\" (see https://github.com/microsoft/vscode/issues/132162)\n    const needsWordBoundaries = (/^[\\w ]+$/.test(str));\n    return (needsWordBoundaries ? `\\\\b${escaped}\\\\b` : escaped);\n}\nexport class LanguageAgnosticBracketTokens {\n    constructor(denseKeyProvider, getLanguageConfiguration) {\n        this.denseKeyProvider = denseKeyProvider;\n        this.getLanguageConfiguration = getLanguageConfiguration;\n        this.languageIdToBracketTokens = new Map();\n    }\n    didLanguageChange(languageId) {\n        const existing = this.languageIdToBracketTokens.get(languageId);\n        if (!existing) {\n            return false;\n        }\n        const newRegExpStr = BracketTokens.createFromLanguage(this.getLanguageConfiguration(languageId), this.denseKeyProvider).getRegExpStr();\n        return existing.getRegExpStr() !== newRegExpStr;\n    }\n    getSingleLanguageBracketTokens(languageId) {\n        let singleLanguageBracketTokens = this.languageIdToBracketTokens.get(languageId);\n        if (!singleLanguageBracketTokens) {\n            singleLanguageBracketTokens = BracketTokens.createFromLanguage(this.getLanguageConfiguration(languageId), this.denseKeyProvider);\n            this.languageIdToBracketTokens.set(languageId, singleLanguageBracketTokens);\n        }\n        return singleLanguageBracketTokens;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { splitLines } from '../../../../../base/common/strings.js';\nimport { Range } from '../../../core/range.js';\n/**\n * Represents a non-negative length in terms of line and column count.\n * Prefer using {@link Length} for performance reasons.\n*/\nexport class LengthObj {\n    constructor(lineCount, columnCount) {\n        this.lineCount = lineCount;\n        this.columnCount = columnCount;\n    }\n    toString() {\n        return `${this.lineCount},${this.columnCount}`;\n    }\n}\nLengthObj.zero = new LengthObj(0, 0);\n/**\n * The end must be greater than or equal to the start.\n*/\nexport function lengthDiff(startLineCount, startColumnCount, endLineCount, endColumnCount) {\n    return (startLineCount !== endLineCount)\n        ? toLength(endLineCount - startLineCount, endColumnCount)\n        : toLength(0, endColumnCount - startColumnCount);\n}\nexport const lengthZero = 0;\nexport function lengthIsZero(length) {\n    return length === 0;\n}\n/*\n * We have 52 bits available in a JS number.\n * We use the upper 26 bits to store the line and the lower 26 bits to store the column.\n *\n * Set boolean to `true` when debugging, so that debugging is easier.\n */\nconst factor = /* is debug: */ false ? 100000 : Math.pow(2, 26);\nexport function toLength(lineCount, columnCount) {\n    // llllllllllllllllllllllllllcccccccccccccccccccccccccc (52 bits)\n    //       line count (26 bits)    column count (26 bits)\n    // If there is no overflow (all values/sums below 2^26 = 67108864),\n    // we have `toLength(lns1, cols1) + toLength(lns2, cols2) = toLength(lns1 + lns2, cols1 + cols2)`.\n    return (lineCount * factor + columnCount);\n}\nexport function lengthToObj(length) {\n    const l = length;\n    const lineCount = Math.floor(l / factor);\n    const columnCount = l - lineCount * factor;\n    return new LengthObj(lineCount, columnCount);\n}\nexport function lengthGetLineCount(length) {\n    return Math.floor(length / factor);\n}\n/**\n * Returns the amount of columns of the given length, assuming that it does not span any line.\n*/\nexport function lengthGetColumnCountIfZeroLineCount(length) {\n    return length;\n}\nexport function lengthAdd(l1, l2) {\n    return ((l2 < factor)\n        ? (l1 + l2) // l2 is the amount of columns (zero line count). Keep the column count from l1.\n        : (l1 - (l1 % factor) + l2)); // l1 - (l1 % factor) equals toLength(l1.lineCount, 0)\n}\n/**\n * Returns a non negative length `result` such that `lengthAdd(length1, result) = length2`, or zero if such length does not exist.\n */\nexport function lengthDiffNonNegative(length1, length2) {\n    const l1 = length1;\n    const l2 = length2;\n    const diff = l2 - l1;\n    if (diff <= 0) {\n        // line-count of length1 is higher than line-count of length2\n        // or they are equal and column-count of length1 is higher than column-count of length2\n        return lengthZero;\n    }\n    const lineCount1 = Math.floor(l1 / factor);\n    const lineCount2 = Math.floor(l2 / factor);\n    const colCount2 = l2 - lineCount2 * factor;\n    if (lineCount1 === lineCount2) {\n        const colCount1 = l1 - lineCount1 * factor;\n        return toLength(0, colCount2 - colCount1);\n    }\n    else {\n        return toLength(lineCount2 - lineCount1, colCount2);\n    }\n}\nexport function lengthLessThan(length1, length2) {\n    // First, compare line counts, then column counts.\n    return length1 < length2;\n}\nexport function lengthLessThanEqual(length1, length2) {\n    return length1 <= length2;\n}\nexport function lengthGreaterThanEqual(length1, length2) {\n    return length1 >= length2;\n}\nexport function positionToLength(position) {\n    return toLength(position.lineNumber - 1, position.column - 1);\n}\nexport function lengthsToRange(lengthStart, lengthEnd) {\n    const l = lengthStart;\n    const lineCount = Math.floor(l / factor);\n    const colCount = l - lineCount * factor;\n    const l2 = lengthEnd;\n    const lineCount2 = Math.floor(l2 / factor);\n    const colCount2 = l2 - lineCount2 * factor;\n    return new Range(lineCount + 1, colCount + 1, lineCount2 + 1, colCount2 + 1);\n}\nexport function lengthOfString(str) {\n    const lines = splitLines(str);\n    return toLength(lines.length - 1, lines[lines.length - 1].length);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ListAstNode } from './ast.js';\n/**\n * Concatenates a list of (2,3) AstNode's into a single (2,3) AstNode.\n * This mutates the items of the input array!\n * If all items have the same height, this method has runtime O(items.length).\n * Otherwise, it has runtime O(items.length * max(log(items.length), items.max(i => i.height))).\n*/\nexport function concat23Trees(items) {\n    if (items.length === 0) {\n        return null;\n    }\n    if (items.length === 1) {\n        return items[0];\n    }\n    let i = 0;\n    /**\n     * Reads nodes of same height and concatenates them to a single node.\n    */\n    function readNode() {\n        if (i >= items.length) {\n            return null;\n        }\n        const start = i;\n        const height = items[start].listHeight;\n        i++;\n        while (i < items.length && items[i].listHeight === height) {\n            i++;\n        }\n        if (i - start >= 2) {\n            return concat23TreesOfSameHeight(start === 0 && i === items.length ? items : items.slice(start, i), false);\n        }\n        else {\n            return items[start];\n        }\n    }\n    // The items might not have the same height.\n    // We merge all items by using a binary concat operator.\n    let first = readNode(); // There must be a first item\n    let second = readNode();\n    if (!second) {\n        return first;\n    }\n    for (let item = readNode(); item; item = readNode()) {\n        // Prefer concatenating smaller trees, as the runtime of concat depends on the tree height.\n        if (heightDiff(first, second) <= heightDiff(second, item)) {\n            first = concat(first, second);\n            second = item;\n        }\n        else {\n            second = concat(second, item);\n        }\n    }\n    const result = concat(first, second);\n    return result;\n}\nexport function concat23TreesOfSameHeight(items, createImmutableLists = false) {\n    if (items.length === 0) {\n        return null;\n    }\n    if (items.length === 1) {\n        return items[0];\n    }\n    let length = items.length;\n    // All trees have same height, just create parent nodes.\n    while (length > 3) {\n        const newLength = length >> 1;\n        for (let i = 0; i < newLength; i++) {\n            const j = i << 1;\n            items[i] = ListAstNode.create23(items[j], items[j + 1], j + 3 === length ? items[j + 2] : null, createImmutableLists);\n        }\n        length = newLength;\n    }\n    return ListAstNode.create23(items[0], items[1], length >= 3 ? items[2] : null, createImmutableLists);\n}\nfunction heightDiff(node1, node2) {\n    return Math.abs(node1.listHeight - node2.listHeight);\n}\nfunction concat(node1, node2) {\n    if (node1.listHeight === node2.listHeight) {\n        return ListAstNode.create23(node1, node2, null, false);\n    }\n    else if (node1.listHeight > node2.listHeight) {\n        // node1 is the tree we want to insert into\n        return append(node1, node2);\n    }\n    else {\n        return prepend(node2, node1);\n    }\n}\n/**\n * Appends the given node to the end of this (2,3) tree.\n * Returns the new root.\n*/\nfunction append(list, nodeToAppend) {\n    list = list.toMutable();\n    let curNode = list;\n    const parents = new Array();\n    let nodeToAppendOfCorrectHeight;\n    while (true) {\n        // assert nodeToInsert.listHeight <= curNode.listHeight\n        if (nodeToAppend.listHeight === curNode.listHeight) {\n            nodeToAppendOfCorrectHeight = nodeToAppend;\n            break;\n        }\n        // assert 0 <= nodeToInsert.listHeight < curNode.listHeight\n        if (curNode.kind !== 4 /* List */) {\n            throw new Error('unexpected');\n        }\n        parents.push(curNode);\n        // assert 2 <= curNode.childrenLength <= 3\n        curNode = curNode.makeLastElementMutable();\n    }\n    // assert nodeToAppendOfCorrectHeight!.listHeight === curNode.listHeight\n    for (let i = parents.length - 1; i >= 0; i--) {\n        const parent = parents[i];\n        if (nodeToAppendOfCorrectHeight) {\n            // Can we take the element?\n            if (parent.childrenLength >= 3) {\n                // assert parent.childrenLength === 3 && parent.listHeight === nodeToAppendOfCorrectHeight.listHeight + 1\n                // we need to split to maintain (2,3)-tree property.\n                // Send the third element + the new element to the parent.\n                nodeToAppendOfCorrectHeight = ListAstNode.create23(parent.unappendChild(), nodeToAppendOfCorrectHeight, null, false);\n            }\n            else {\n                parent.appendChildOfSameHeight(nodeToAppendOfCorrectHeight);\n                nodeToAppendOfCorrectHeight = undefined;\n            }\n        }\n        else {\n            parent.handleChildrenChanged();\n        }\n    }\n    if (nodeToAppendOfCorrectHeight) {\n        return ListAstNode.create23(list, nodeToAppendOfCorrectHeight, null, false);\n    }\n    else {\n        return list;\n    }\n}\n/**\n * Prepends the given node to the end of this (2,3) tree.\n * Returns the new root.\n*/\nfunction prepend(list, nodeToAppend) {\n    list = list.toMutable();\n    let curNode = list;\n    const parents = new Array();\n    // assert nodeToInsert.listHeight <= curNode.listHeight\n    while (nodeToAppend.listHeight !== curNode.listHeight) {\n        // assert 0 <= nodeToInsert.listHeight < curNode.listHeight\n        if (curNode.kind !== 4 /* List */) {\n            throw new Error('unexpected');\n        }\n        parents.push(curNode);\n        // assert 2 <= curNode.childrenFast.length <= 3\n        curNode = curNode.makeFirstElementMutable();\n    }\n    let nodeToPrependOfCorrectHeight = nodeToAppend;\n    // assert nodeToAppendOfCorrectHeight!.listHeight === curNode.listHeight\n    for (let i = parents.length - 1; i >= 0; i--) {\n        const parent = parents[i];\n        if (nodeToPrependOfCorrectHeight) {\n            // Can we take the element?\n            if (parent.childrenLength >= 3) {\n                // assert parent.childrenLength === 3 && parent.listHeight === nodeToAppendOfCorrectHeight.listHeight + 1\n                // we need to split to maintain (2,3)-tree property.\n                // Send the third element + the new element to the parent.\n                nodeToPrependOfCorrectHeight = ListAstNode.create23(nodeToPrependOfCorrectHeight, parent.unprependChild(), null, false);\n            }\n            else {\n                parent.prependChildOfSameHeight(nodeToPrependOfCorrectHeight);\n                nodeToPrependOfCorrectHeight = undefined;\n            }\n        }\n        else {\n            parent.handleChildrenChanged();\n        }\n    }\n    if (nodeToPrependOfCorrectHeight) {\n        return ListAstNode.create23(nodeToPrependOfCorrectHeight, list, null, false);\n    }\n    else {\n        return list;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { lengthAdd, lengthZero, lengthLessThan } from './length.js';\n/**\n * Allows to efficiently find a longest child at a given offset in a fixed node.\n * The requested offsets must increase monotonously.\n*/\nexport class NodeReader {\n    constructor(node) {\n        this.lastOffset = lengthZero;\n        this.nextNodes = [node];\n        this.offsets = [lengthZero];\n        this.idxs = [];\n    }\n    /**\n     * Returns the longest node at `offset` that satisfies the predicate.\n     * @param offset must be greater than or equal to the last offset this method has been called with!\n    */\n    readLongestNodeAt(offset, predicate) {\n        if (lengthLessThan(offset, this.lastOffset)) {\n            throw new Error('Invalid offset');\n        }\n        this.lastOffset = offset;\n        // Find the longest node of all those that are closest to the current offset.\n        while (true) {\n            const curNode = lastOrUndefined(this.nextNodes);\n            if (!curNode) {\n                return undefined;\n            }\n            const curNodeOffset = lastOrUndefined(this.offsets);\n            if (lengthLessThan(offset, curNodeOffset)) {\n                // The next best node is not here yet.\n                // The reader must advance before a cached node is hit.\n                return undefined;\n            }\n            if (lengthLessThan(curNodeOffset, offset)) {\n                // The reader is ahead of the current node.\n                if (lengthAdd(curNodeOffset, curNode.length) <= offset) {\n                    // The reader is after the end of the current node.\n                    this.nextNodeAfterCurrent();\n                }\n                else {\n                    // The reader is somewhere in the current node.\n                    const nextChildIdx = getNextChildIdx(curNode);\n                    if (nextChildIdx !== -1) {\n                        // Go to the first child and repeat.\n                        this.nextNodes.push(curNode.getChild(nextChildIdx));\n                        this.offsets.push(curNodeOffset);\n                        this.idxs.push(nextChildIdx);\n                    }\n                    else {\n                        // We don't have children\n                        this.nextNodeAfterCurrent();\n                    }\n                }\n            }\n            else {\n                // readerOffsetBeforeChange === curNodeOffset\n                if (predicate(curNode)) {\n                    this.nextNodeAfterCurrent();\n                    return curNode;\n                }\n                else {\n                    const nextChildIdx = getNextChildIdx(curNode);\n                    // look for shorter node\n                    if (nextChildIdx === -1) {\n                        // There is no shorter node.\n                        this.nextNodeAfterCurrent();\n                        return undefined;\n                    }\n                    else {\n                        // Descend into first child & repeat.\n                        this.nextNodes.push(curNode.getChild(nextChildIdx));\n                        this.offsets.push(curNodeOffset);\n                        this.idxs.push(nextChildIdx);\n                    }\n                }\n            }\n        }\n    }\n    // Navigates to the longest node that continues after the current node.\n    nextNodeAfterCurrent() {\n        while (true) {\n            const currentOffset = lastOrUndefined(this.offsets);\n            const currentNode = lastOrUndefined(this.nextNodes);\n            this.nextNodes.pop();\n            this.offsets.pop();\n            if (this.idxs.length === 0) {\n                // We just popped the root node, there is no next node.\n                break;\n            }\n            // Parent is not undefined, because idxs is not empty\n            const parent = lastOrUndefined(this.nextNodes);\n            const nextChildIdx = getNextChildIdx(parent, this.idxs[this.idxs.length - 1]);\n            if (nextChildIdx !== -1) {\n                this.nextNodes.push(parent.getChild(nextChildIdx));\n                this.offsets.push(lengthAdd(currentOffset, currentNode.length));\n                this.idxs[this.idxs.length - 1] = nextChildIdx;\n                break;\n            }\n            else {\n                this.idxs.pop();\n            }\n            // We fully consumed the parent.\n            // Current node is now parent, so call nextNodeAfterCurrent again\n        }\n    }\n}\nfunction getNextChildIdx(node, curIdx = -1) {\n    while (true) {\n        curIdx++;\n        if (curIdx >= node.childrenLength) {\n            return -1;\n        }\n        if (node.getChild(curIdx)) {\n            return curIdx;\n        }\n    }\n}\nfunction lastOrUndefined(arr) {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { InvalidBracketAstNode, ListAstNode, PairAstNode } from './ast.js';\nimport { BeforeEditPositionMapper } from './beforeEditPositionMapper.js';\nimport { SmallImmutableSet } from './smallImmutableSet.js';\nimport { lengthIsZero, lengthLessThan } from './length.js';\nimport { concat23Trees, concat23TreesOfSameHeight } from './concat23Trees.js';\nimport { NodeReader } from './nodeReader.js';\n/**\n * Non incrementally built ASTs are immutable.\n*/\nexport function parseDocument(tokenizer, edits, oldNode, createImmutableLists) {\n    const parser = new Parser(tokenizer, edits, oldNode, createImmutableLists);\n    return parser.parseDocument();\n}\n/**\n * Non incrementally built ASTs are immutable.\n*/\nclass Parser {\n    constructor(tokenizer, edits, oldNode, createImmutableLists) {\n        this.tokenizer = tokenizer;\n        this.createImmutableLists = createImmutableLists;\n        this._itemsConstructed = 0;\n        this._itemsFromCache = 0;\n        if (oldNode && createImmutableLists) {\n            throw new Error('Not supported');\n        }\n        this.oldNodeReader = oldNode ? new NodeReader(oldNode) : undefined;\n        this.positionMapper = new BeforeEditPositionMapper(edits, tokenizer.length);\n    }\n    parseDocument() {\n        this._itemsConstructed = 0;\n        this._itemsFromCache = 0;\n        let result = this.parseList(SmallImmutableSet.getEmpty());\n        if (!result) {\n            result = ListAstNode.getEmpty();\n        }\n        return result;\n    }\n    parseList(openedBracketIds) {\n        const items = new Array();\n        while (true) {\n            const token = this.tokenizer.peek();\n            if (!token ||\n                (token.kind === 2 /* ClosingBracket */ &&\n                    token.bracketIds.intersects(openedBracketIds))) {\n                break;\n            }\n            const child = this.parseChild(openedBracketIds);\n            if (child.kind === 4 /* List */ && child.childrenLength === 0) {\n                continue;\n            }\n            items.push(child);\n        }\n        // When there is no oldNodeReader, all items are created from scratch and must have the same height.\n        const result = this.oldNodeReader ? concat23Trees(items) : concat23TreesOfSameHeight(items, this.createImmutableLists);\n        return result;\n    }\n    parseChild(openedBracketIds) {\n        if (this.oldNodeReader) {\n            const maxCacheableLength = this.positionMapper.getDistanceToNextChange(this.tokenizer.offset);\n            if (!lengthIsZero(maxCacheableLength)) {\n                const cachedNode = this.oldNodeReader.readLongestNodeAt(this.positionMapper.getOffsetBeforeChange(this.tokenizer.offset), curNode => {\n                    if (!lengthLessThan(curNode.length, maxCacheableLength)) {\n                        // Either the node contains edited text or touches edited text.\n                        // In the latter case, brackets might have been extended (`end` -> `ending`), so even touching nodes cannot be reused.\n                        return false;\n                    }\n                    const canBeReused = curNode.canBeReused(openedBracketIds);\n                    return canBeReused;\n                });\n                if (cachedNode) {\n                    this._itemsFromCache++;\n                    this.tokenizer.skip(cachedNode.length);\n                    return cachedNode;\n                }\n            }\n        }\n        this._itemsConstructed++;\n        const token = this.tokenizer.read();\n        switch (token.kind) {\n            case 2 /* ClosingBracket */:\n                return new InvalidBracketAstNode(token.bracketIds, token.length);\n            case 0 /* Text */:\n                return token.astNode;\n            case 1 /* OpeningBracket */: {\n                const set = openedBracketIds.merge(token.bracketIds);\n                const child = this.parseList(set);\n                const nextToken = this.tokenizer.peek();\n                if (nextToken &&\n                    nextToken.kind === 2 /* ClosingBracket */ &&\n                    (nextToken.bracketId === token.bracketId || nextToken.bracketIds.intersects(token.bracketIds))) {\n                    this.tokenizer.read();\n                    return PairAstNode.create(token.astNode, child, nextToken.astNode);\n                }\n                else {\n                    return PairAstNode.create(token.astNode, child, null);\n                }\n            }\n            default:\n                throw new Error('unexpected');\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst emptyArr = new Array();\n/**\n * Represents an immutable set that works best for a small number of elements (less than 32).\n * It uses bits to encode element membership efficiently.\n*/\nexport class SmallImmutableSet {\n    constructor(items, additionalItems) {\n        this.items = items;\n        this.additionalItems = additionalItems;\n    }\n    static create(items, additionalItems) {\n        if (items <= 128 && additionalItems.length === 0) {\n            // We create a cache of 128=2^7 elements to cover all sets with up to 7 (dense) elements.\n            let cached = SmallImmutableSet.cache[items];\n            if (!cached) {\n                cached = new SmallImmutableSet(items, additionalItems);\n                SmallImmutableSet.cache[items] = cached;\n            }\n            return cached;\n        }\n        return new SmallImmutableSet(items, additionalItems);\n    }\n    static getEmpty() {\n        return this.empty;\n    }\n    add(value, keyProvider) {\n        const key = keyProvider.getKey(value);\n        let idx = key >> 5; // divided by 32\n        if (idx === 0) {\n            // fast path\n            const newItem = (1 << key) | this.items;\n            if (newItem === this.items) {\n                return this;\n            }\n            return SmallImmutableSet.create(newItem, this.additionalItems);\n        }\n        idx--;\n        const newItems = this.additionalItems.slice(0);\n        while (newItems.length < idx) {\n            newItems.push(0);\n        }\n        newItems[idx] |= 1 << (key & 31);\n        return SmallImmutableSet.create(this.items, newItems);\n    }\n    merge(other) {\n        const merged = this.items | other.items;\n        if (this.additionalItems === emptyArr && other.additionalItems === emptyArr) {\n            // fast path\n            if (merged === this.items) {\n                return this;\n            }\n            if (merged === other.items) {\n                return other;\n            }\n            return SmallImmutableSet.create(merged, emptyArr);\n        }\n        // This can be optimized, but it's not a common case\n        const newItems = new Array();\n        for (let i = 0; i < Math.max(this.additionalItems.length, other.additionalItems.length); i++) {\n            const item1 = this.additionalItems[i] || 0;\n            const item2 = other.additionalItems[i] || 0;\n            newItems.push(item1 | item2);\n        }\n        return SmallImmutableSet.create(merged, newItems);\n    }\n    intersects(other) {\n        if ((this.items & other.items) !== 0) {\n            return true;\n        }\n        for (let i = 0; i < Math.min(this.additionalItems.length, other.additionalItems.length); i++) {\n            if ((this.additionalItems[i] & other.additionalItems[i]) !== 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nSmallImmutableSet.cache = new Array(129);\nSmallImmutableSet.empty = SmallImmutableSet.create(0, emptyArr);\nexport const identityKeyProvider = {\n    getKey(value) {\n        return value;\n    }\n};\n/**\n * Assigns values a unique incrementing key.\n*/\nexport class DenseKeyProvider {\n    constructor() {\n        this.items = new Map();\n    }\n    getKey(value) {\n        let existing = this.items.get(value);\n        if (existing === undefined) {\n            existing = this.items.size;\n            this.items.set(value, existing);\n        }\n        return existing;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { NotSupportedError } from '../../../../../base/common/errors.js';\nimport { TokenMetadata } from '../../../languages.js';\nimport { TextAstNode } from './ast.js';\nimport { lengthAdd, lengthDiff, lengthGetColumnCountIfZeroLineCount, lengthToObj, lengthZero, toLength } from './length.js';\nimport { SmallImmutableSet } from './smallImmutableSet.js';\nexport class Token {\n    constructor(length, kind, \n    /**\n     * If this token is an opening bracket, this is the id of the opening bracket.\n     * If this token is a closing bracket, this is the id of the first opening bracket that is closed by this bracket.\n     * Otherwise, it is -1.\n     */\n    bracketId, \n    /**\n     * If this token is an opening bracket, this just contains `bracketId`.\n     * If this token is a closing bracket, this lists all opening bracket ids, that it closes.\n     * Otherwise, it is empty.\n     */\n    bracketIds, astNode) {\n        this.length = length;\n        this.kind = kind;\n        this.bracketId = bracketId;\n        this.bracketIds = bracketIds;\n        this.astNode = astNode;\n    }\n}\nexport class TextBufferTokenizer {\n    constructor(textModel, bracketTokens) {\n        this.textModel = textModel;\n        this.bracketTokens = bracketTokens;\n        this.reader = new NonPeekableTextBufferTokenizer(this.textModel, this.bracketTokens);\n        this._offset = lengthZero;\n        this.didPeek = false;\n        this.peeked = null;\n        this.textBufferLineCount = textModel.getLineCount();\n        this.textBufferLastLineLength = textModel.getLineLength(this.textBufferLineCount);\n    }\n    get offset() {\n        return this._offset;\n    }\n    get length() {\n        return toLength(this.textBufferLineCount, this.textBufferLastLineLength);\n    }\n    skip(length) {\n        this.didPeek = false;\n        this._offset = lengthAdd(this._offset, length);\n        const obj = lengthToObj(this._offset);\n        this.reader.setPosition(obj.lineCount, obj.columnCount);\n    }\n    read() {\n        let token;\n        if (this.peeked) {\n            this.didPeek = false;\n            token = this.peeked;\n        }\n        else {\n            token = this.reader.read();\n        }\n        if (token) {\n            this._offset = lengthAdd(this._offset, token.length);\n        }\n        return token;\n    }\n    peek() {\n        if (!this.didPeek) {\n            this.peeked = this.reader.read();\n            this.didPeek = true;\n        }\n        return this.peeked;\n    }\n}\n/**\n * Does not support peek.\n*/\nclass NonPeekableTextBufferTokenizer {\n    constructor(textModel, bracketTokens) {\n        this.textModel = textModel;\n        this.bracketTokens = bracketTokens;\n        this.lineIdx = 0;\n        this.line = null;\n        this.lineCharOffset = 0;\n        this.lineTokens = null;\n        this.lineTokenOffset = 0;\n        /** Must be a zero line token. The end of the document cannot be peeked. */\n        this.peekedToken = null;\n        this.textBufferLineCount = textModel.getLineCount();\n        this.textBufferLastLineLength = textModel.getLineLength(this.textBufferLineCount);\n    }\n    setPosition(lineIdx, column) {\n        // We must not jump into a token!\n        if (lineIdx === this.lineIdx) {\n            this.lineCharOffset = column;\n            this.lineTokenOffset = this.lineCharOffset === 0 ? 0 : this.lineTokens.findTokenIndexAtOffset(this.lineCharOffset);\n        }\n        else {\n            this.lineIdx = lineIdx;\n            this.lineCharOffset = column;\n            this.line = null;\n        }\n        this.peekedToken = null;\n    }\n    read() {\n        if (this.peekedToken) {\n            const token = this.peekedToken;\n            this.peekedToken = null;\n            this.lineCharOffset += lengthGetColumnCountIfZeroLineCount(token.length);\n            return token;\n        }\n        if (this.lineIdx > this.textBufferLineCount - 1 || (this.lineIdx === this.textBufferLineCount - 1 && this.lineCharOffset >= this.textBufferLastLineLength)) {\n            // We are after the end\n            return null;\n        }\n        if (this.line === null) {\n            this.lineTokens = this.textModel.getLineTokens(this.lineIdx + 1);\n            this.line = this.lineTokens.getLineContent();\n            this.lineTokenOffset = this.lineCharOffset === 0 ? 0 : this.lineTokens.findTokenIndexAtOffset(this.lineCharOffset);\n        }\n        const startLineIdx = this.lineIdx;\n        const startLineCharOffset = this.lineCharOffset;\n        // limits the length of text tokens.\n        // If text tokens get too long, incremental updates will be slow\n        let lengthHeuristic = 0;\n        while (true) {\n            const lineTokens = this.lineTokens;\n            const tokenCount = lineTokens.getCount();\n            let peekedBracketToken = null;\n            if (this.lineTokenOffset < tokenCount) {\n                const tokenMetadata = lineTokens.getMetadata(this.lineTokenOffset);\n                while (this.lineTokenOffset + 1 < tokenCount && tokenMetadata === lineTokens.getMetadata(this.lineTokenOffset + 1)) {\n                    // Skip tokens that are identical.\n                    // Sometimes, (bracket) identifiers are split up into multiple tokens.\n                    this.lineTokenOffset++;\n                }\n                const isOther = TokenMetadata.getTokenType(tokenMetadata) === 0 /* Other */;\n                const endOffset = lineTokens.getEndOffset(this.lineTokenOffset);\n                // Is there a bracket token next? Only consume text.\n                if (isOther && endOffset !== this.lineCharOffset) {\n                    const languageId = lineTokens.getLanguageId(this.lineTokenOffset);\n                    const text = this.line.substring(this.lineCharOffset, endOffset);\n                    const brackets = this.bracketTokens.getSingleLanguageBracketTokens(languageId);\n                    const regexp = brackets.regExpGlobal;\n                    if (regexp) {\n                        regexp.lastIndex = 0;\n                        const match = regexp.exec(text);\n                        if (match) {\n                            peekedBracketToken = brackets.getToken(match[0]);\n                            if (peekedBracketToken) {\n                                // Consume leading text of the token\n                                this.lineCharOffset += match.index;\n                            }\n                        }\n                    }\n                }\n                lengthHeuristic += endOffset - this.lineCharOffset;\n                if (peekedBracketToken) {\n                    // Don't skip the entire token, as a single token could contain multiple brackets.\n                    if (startLineIdx !== this.lineIdx || startLineCharOffset !== this.lineCharOffset) {\n                        // There is text before the bracket\n                        this.peekedToken = peekedBracketToken;\n                        break;\n                    }\n                    else {\n                        // Consume the peeked token\n                        this.lineCharOffset += lengthGetColumnCountIfZeroLineCount(peekedBracketToken.length);\n                        return peekedBracketToken;\n                    }\n                }\n                else {\n                    // Skip the entire token, as the token contains no brackets at all.\n                    this.lineTokenOffset++;\n                    this.lineCharOffset = endOffset;\n                }\n            }\n            else {\n                if (this.lineIdx === this.textBufferLineCount - 1) {\n                    break;\n                }\n                this.lineIdx++;\n                this.lineTokens = this.textModel.getLineTokens(this.lineIdx + 1);\n                this.lineTokenOffset = 0;\n                this.line = this.lineTokens.getLineContent();\n                this.lineCharOffset = 0;\n                lengthHeuristic += 33; // max 1000/33 = 30 lines\n                // This limits the amount of work to recompute min-indentation\n                if (lengthHeuristic > 1000) {\n                    // only break (automatically) at the end of line.\n                    break;\n                }\n            }\n            if (lengthHeuristic > 1500) {\n                // Eventually break regardless of the line length so that\n                // very long lines do not cause bad performance.\n                // This effective limits max indentation to 500, as\n                // indentation is not computed across multiple text nodes.\n                break;\n            }\n        }\n        // If a token contains some proper indentation, it also contains \\n{INDENTATION+}(?!{INDENTATION}),\n        // unless the line is too long.\n        // Thus, the min indentation of the document is the minimum min indentation of every text node.\n        const length = lengthDiff(startLineIdx, startLineCharOffset, this.lineIdx, this.lineCharOffset);\n        return new Token(length, 0 /* Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(length));\n    }\n}\nexport class FastTokenizer {\n    constructor(text, brackets) {\n        this.text = text;\n        this._offset = lengthZero;\n        this.idx = 0;\n        const regExpStr = brackets.getRegExpStr();\n        const regexp = regExpStr ? new RegExp(brackets.getRegExpStr() + '|\\n', 'g') : null;\n        const tokens = [];\n        let match;\n        let curLineCount = 0;\n        let lastLineBreakOffset = 0;\n        let lastTokenEndOffset = 0;\n        let lastTokenEndLine = 0;\n        const smallTextTokens0Line = new Array();\n        for (let i = 0; i < 60; i++) {\n            smallTextTokens0Line.push(new Token(toLength(0, i), 0 /* Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(toLength(0, i))));\n        }\n        const smallTextTokens1Line = new Array();\n        for (let i = 0; i < 60; i++) {\n            smallTextTokens1Line.push(new Token(toLength(1, i), 0 /* Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(toLength(1, i))));\n        }\n        if (regexp) {\n            regexp.lastIndex = 0;\n            // If a token contains indentation, it also contains \\n{INDENTATION+}(?!{INDENTATION})\n            while ((match = regexp.exec(text)) !== null) {\n                const curOffset = match.index;\n                const value = match[0];\n                if (value === '\\n') {\n                    curLineCount++;\n                    lastLineBreakOffset = curOffset + 1;\n                }\n                else {\n                    if (lastTokenEndOffset !== curOffset) {\n                        let token;\n                        if (lastTokenEndLine === curLineCount) {\n                            const colCount = curOffset - lastTokenEndOffset;\n                            if (colCount < smallTextTokens0Line.length) {\n                                token = smallTextTokens0Line[colCount];\n                            }\n                            else {\n                                const length = toLength(0, colCount);\n                                token = new Token(length, 0 /* Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(length));\n                            }\n                        }\n                        else {\n                            const lineCount = curLineCount - lastTokenEndLine;\n                            const colCount = curOffset - lastLineBreakOffset;\n                            if (lineCount === 1 && colCount < smallTextTokens1Line.length) {\n                                token = smallTextTokens1Line[colCount];\n                            }\n                            else {\n                                const length = toLength(lineCount, colCount);\n                                token = new Token(length, 0 /* Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(length));\n                            }\n                        }\n                        tokens.push(token);\n                    }\n                    // value is matched by regexp, so the token must exist\n                    tokens.push(brackets.getToken(value));\n                    lastTokenEndOffset = curOffset + value.length;\n                    lastTokenEndLine = curLineCount;\n                }\n            }\n        }\n        const offset = text.length;\n        if (lastTokenEndOffset !== offset) {\n            const length = (lastTokenEndLine === curLineCount)\n                ? toLength(0, offset - lastTokenEndOffset)\n                : toLength(curLineCount - lastTokenEndLine, offset - lastLineBreakOffset);\n            tokens.push(new Token(length, 0 /* Text */, -1, SmallImmutableSet.getEmpty(), new TextAstNode(length)));\n        }\n        this.length = toLength(curLineCount, offset - lastLineBreakOffset);\n        this.tokens = tokens;\n    }\n    get offset() {\n        return this._offset;\n    }\n    read() {\n        return this.tokens[this.idx++] || null;\n    }\n    peek() {\n        return this.tokens[this.idx] || null;\n    }\n    skip(length) {\n        throw new NotSupportedError();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Range } from '../../core/range.js';\nimport { editorBracketHighlightingForeground1, editorBracketHighlightingForeground2, editorBracketHighlightingForeground3, editorBracketHighlightingForeground4, editorBracketHighlightingForeground5, editorBracketHighlightingForeground6, editorBracketHighlightingUnexpectedBracketForeground } from '../../core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class ColorizedBracketPairsDecorationProvider extends Disposable {\n    constructor(textModel) {\n        super();\n        this.textModel = textModel;\n        this.colorProvider = new ColorProvider();\n        this.onDidChangeEmitter = new Emitter();\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.colorizationOptions = textModel.getOptions().bracketPairColorizationOptions;\n        this._register(textModel.bracketPairs.onDidChange(e => {\n            this.onDidChangeEmitter.fire();\n        }));\n    }\n    //#region TextModel events\n    handleDidChangeOptions(e) {\n        this.colorizationOptions = this.textModel.getOptions().bracketPairColorizationOptions;\n    }\n    //#endregion\n    getDecorationsInRange(range, ownerId, filterOutValidation) {\n        if (ownerId === undefined) {\n            return [];\n        }\n        if (!this.colorizationOptions.enabled) {\n            return [];\n        }\n        const result = new Array();\n        const bracketsInRange = this.textModel.bracketPairs.getBracketsInRange(range);\n        for (const bracket of bracketsInRange) {\n            result.push({\n                id: `bracket${bracket.range.toString()}-${bracket.nestingLevel}`,\n                options: { description: 'BracketPairColorization', inlineClassName: this.colorProvider.getInlineClassName(bracket) },\n                ownerId: 0,\n                range: bracket.range\n            });\n        }\n        return result;\n    }\n    getAllDecorations(ownerId, filterOutValidation) {\n        if (ownerId === undefined) {\n            return [];\n        }\n        if (!this.colorizationOptions.enabled) {\n            return [];\n        }\n        return this.getDecorationsInRange(new Range(1, 1, this.textModel.getLineCount(), 1), ownerId, filterOutValidation);\n    }\n}\nclass ColorProvider {\n    constructor() {\n        this.unexpectedClosingBracketClassName = 'unexpected-closing-bracket';\n    }\n    getInlineClassName(bracket) {\n        if (bracket.isInvalid) {\n            return this.unexpectedClosingBracketClassName;\n        }\n        return this.getInlineClassNameOfLevel(bracket.nestingLevel);\n    }\n    getInlineClassNameOfLevel(level) {\n        // To support a dynamic amount of colors up to 6 colors,\n        // we use a number that is a lcm of all numbers from 1 to 6.\n        return `bracket-highlighting-${level % 30}`;\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const colors = [\n        editorBracketHighlightingForeground1,\n        editorBracketHighlightingForeground2,\n        editorBracketHighlightingForeground3,\n        editorBracketHighlightingForeground4,\n        editorBracketHighlightingForeground5,\n        editorBracketHighlightingForeground6\n    ];\n    const colorProvider = new ColorProvider();\n    collector.addRule(`.monaco-editor .${colorProvider.unexpectedClosingBracketClassName} { color: ${theme.getColor(editorBracketHighlightingUnexpectedBracketForeground)}; }`);\n    const colorValues = colors\n        .map(c => theme.getColor(c))\n        .filter((c) => !!c)\n        .filter(c => !c.isTransparent());\n    for (let level = 0; level < 30; level++) {\n        const color = colorValues[level % colorValues.length];\n        collector.addRule(`.monaco-editor .${colorProvider.getInlineClassNameOfLevel(level)} { color: ${color}; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LanguageAgnosticBracketTokens } from './bracketPairsTree/brackets.js';\nimport { lengthAdd, lengthGetColumnCountIfZeroLineCount, lengthZero } from './bracketPairsTree/length.js';\nimport { parseDocument } from './bracketPairsTree/parser.js';\nimport { DenseKeyProvider } from './bracketPairsTree/smallImmutableSet.js';\nimport { TextBufferTokenizer } from './bracketPairsTree/tokenizer.js';\nexport function fixBracketsInLine(tokens, languageConfigurationService) {\n    const denseKeyProvider = new DenseKeyProvider();\n    const bracketTokens = new LanguageAgnosticBracketTokens(denseKeyProvider, (languageId) => languageConfigurationService.getLanguageConfiguration(languageId));\n    const tokenizer = new TextBufferTokenizer(new StaticTokenizerSource([tokens]), bracketTokens);\n    const node = parseDocument(tokenizer, [], undefined, true);\n    let str = '';\n    const line = tokens.getLineContent();\n    function processNode(node, offset) {\n        if (node.kind === 2 /* Pair */) {\n            processNode(node.openingBracket, offset);\n            offset = lengthAdd(offset, node.openingBracket.length);\n            if (node.child) {\n                processNode(node.child, offset);\n                offset = lengthAdd(offset, node.child.length);\n            }\n            if (node.closingBracket) {\n                processNode(node.closingBracket, offset);\n                offset = lengthAdd(offset, node.closingBracket.length);\n            }\n            else {\n                const singleLangBracketTokens = bracketTokens.getSingleLanguageBracketTokens(node.openingBracket.languageId);\n                const closingTokenText = singleLangBracketTokens.findClosingTokenText(node.openingBracket.bracketIds);\n                str += closingTokenText;\n            }\n        }\n        else if (node.kind === 3 /* UnexpectedClosingBracket */) {\n            // remove the bracket\n        }\n        else if (node.kind === 0 /* Text */ || node.kind === 1 /* Bracket */) {\n            str += line.substring(lengthGetColumnCountIfZeroLineCount(offset), lengthGetColumnCountIfZeroLineCount(lengthAdd(offset, node.length)));\n        }\n        else if (node.kind === 4 /* List */) {\n            for (const child of node.children) {\n                processNode(child, offset);\n                offset = lengthAdd(offset, child.length);\n            }\n        }\n    }\n    processNode(node, lengthZero);\n    return str;\n}\nclass StaticTokenizerSource {\n    constructor(lines) {\n        this.lines = lines;\n    }\n    getLineCount() {\n        return this.lines.length;\n    }\n    getLineLength(lineNumber) {\n        return this.lines[lineNumber - 1].getLineContent().length;\n    }\n    getLineTokens(lineNumber) {\n        return this.lines[lineNumber - 1];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Selection } from '../core/selection.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { TextChange, compressConsecutiveTextChanges } from '../core/textChange.js';\nimport * as buffer from '../../../base/common/buffer.js';\nimport { basename } from '../../../base/common/resources.js';\nfunction uriGetComparisonKey(resource) {\n    return resource.toString();\n}\nexport class SingleModelEditStackData {\n    constructor(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes) {\n        this.beforeVersionId = beforeVersionId;\n        this.afterVersionId = afterVersionId;\n        this.beforeEOL = beforeEOL;\n        this.afterEOL = afterEOL;\n        this.beforeCursorState = beforeCursorState;\n        this.afterCursorState = afterCursorState;\n        this.changes = changes;\n    }\n    static create(model, beforeCursorState) {\n        const alternativeVersionId = model.getAlternativeVersionId();\n        const eol = getModelEOL(model);\n        return new SingleModelEditStackData(alternativeVersionId, alternativeVersionId, eol, eol, beforeCursorState, beforeCursorState, []);\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        if (textChanges.length > 0) {\n            this.changes = compressConsecutiveTextChanges(this.changes, textChanges);\n        }\n        this.afterEOL = afterEOL;\n        this.afterVersionId = afterVersionId;\n        this.afterCursorState = afterCursorState;\n    }\n    static _writeSelectionsSize(selections) {\n        return 4 + 4 * 4 * (selections ? selections.length : 0);\n    }\n    static _writeSelections(b, selections, offset) {\n        buffer.writeUInt32BE(b, (selections ? selections.length : 0), offset);\n        offset += 4;\n        if (selections) {\n            for (const selection of selections) {\n                buffer.writeUInt32BE(b, selection.selectionStartLineNumber, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.selectionStartColumn, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.positionLineNumber, offset);\n                offset += 4;\n                buffer.writeUInt32BE(b, selection.positionColumn, offset);\n                offset += 4;\n            }\n        }\n        return offset;\n    }\n    static _readSelections(b, offset, dest) {\n        const count = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        for (let i = 0; i < count; i++) {\n            const selectionStartLineNumber = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const selectionStartColumn = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const positionLineNumber = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            const positionColumn = buffer.readUInt32BE(b, offset);\n            offset += 4;\n            dest.push(new Selection(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn));\n        }\n        return offset;\n    }\n    serialize() {\n        let necessarySize = (+4 // beforeVersionId\n            + 4 // afterVersionId\n            + 1 // beforeEOL\n            + 1 // afterEOL\n            + SingleModelEditStackData._writeSelectionsSize(this.beforeCursorState)\n            + SingleModelEditStackData._writeSelectionsSize(this.afterCursorState)\n            + 4 // change count\n        );\n        for (const change of this.changes) {\n            necessarySize += change.writeSize();\n        }\n        const b = new Uint8Array(necessarySize);\n        let offset = 0;\n        buffer.writeUInt32BE(b, this.beforeVersionId, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, this.afterVersionId, offset);\n        offset += 4;\n        buffer.writeUInt8(b, this.beforeEOL, offset);\n        offset += 1;\n        buffer.writeUInt8(b, this.afterEOL, offset);\n        offset += 1;\n        offset = SingleModelEditStackData._writeSelections(b, this.beforeCursorState, offset);\n        offset = SingleModelEditStackData._writeSelections(b, this.afterCursorState, offset);\n        buffer.writeUInt32BE(b, this.changes.length, offset);\n        offset += 4;\n        for (const change of this.changes) {\n            offset = change.write(b, offset);\n        }\n        return b.buffer;\n    }\n    static deserialize(source) {\n        const b = new Uint8Array(source);\n        let offset = 0;\n        const beforeVersionId = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const afterVersionId = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const beforeEOL = buffer.readUInt8(b, offset);\n        offset += 1;\n        const afterEOL = buffer.readUInt8(b, offset);\n        offset += 1;\n        const beforeCursorState = [];\n        offset = SingleModelEditStackData._readSelections(b, offset, beforeCursorState);\n        const afterCursorState = [];\n        offset = SingleModelEditStackData._readSelections(b, offset, afterCursorState);\n        const changeCount = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const changes = [];\n        for (let i = 0; i < changeCount; i++) {\n            offset = TextChange.read(b, offset, changes);\n        }\n        return new SingleModelEditStackData(beforeVersionId, afterVersionId, beforeEOL, afterEOL, beforeCursorState, afterCursorState, changes);\n    }\n}\nexport class SingleModelEditStackElement {\n    constructor(model, beforeCursorState) {\n        this.model = model;\n        this._data = SingleModelEditStackData.create(model, beforeCursorState);\n    }\n    get type() {\n        return 0 /* Resource */;\n    }\n    get resource() {\n        if (URI.isUri(this.model)) {\n            return this.model;\n        }\n        return this.model.uri;\n    }\n    get label() {\n        return nls.localize('edit', \"Typing\");\n    }\n    toString() {\n        const data = (this._data instanceof SingleModelEditStackData ? this._data : SingleModelEditStackData.deserialize(this._data));\n        return data.changes.map(change => change.toString()).join(', ');\n    }\n    matchesResource(resource) {\n        const uri = (URI.isUri(this.model) ? this.model : this.model.uri);\n        return (uri.toString() === resource.toString());\n    }\n    setModel(model) {\n        this.model = model;\n    }\n    canAppend(model) {\n        return (this.model === model && this._data instanceof SingleModelEditStackData);\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n        }\n    }\n    close() {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n    }\n    open() {\n        if (!(this._data instanceof SingleModelEditStackData)) {\n            this._data = SingleModelEditStackData.deserialize(this._data);\n        }\n    }\n    undo() {\n        if (URI.isUri(this.model)) {\n            // don't have a model\n            throw new Error(`Invalid SingleModelEditStackElement`);\n        }\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        const data = SingleModelEditStackData.deserialize(this._data);\n        this.model._applyUndo(data.changes, data.beforeEOL, data.beforeVersionId, data.beforeCursorState);\n    }\n    redo() {\n        if (URI.isUri(this.model)) {\n            // don't have a model\n            throw new Error(`Invalid SingleModelEditStackElement`);\n        }\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        const data = SingleModelEditStackData.deserialize(this._data);\n        this.model._applyRedo(data.changes, data.afterEOL, data.afterVersionId, data.afterCursorState);\n    }\n    heapSize() {\n        if (this._data instanceof SingleModelEditStackData) {\n            this._data = this._data.serialize();\n        }\n        return this._data.byteLength + 168 /*heap overhead*/;\n    }\n}\nexport class MultiModelEditStackElement {\n    constructor(label, editStackElements) {\n        this.type = 1 /* Workspace */;\n        this.label = label;\n        this._isOpen = true;\n        this._editStackElementsArr = editStackElements.slice(0);\n        this._editStackElementsMap = new Map();\n        for (const editStackElement of this._editStackElementsArr) {\n            const key = uriGetComparisonKey(editStackElement.resource);\n            this._editStackElementsMap.set(key, editStackElement);\n        }\n        this._delegate = null;\n    }\n    get resources() {\n        return this._editStackElementsArr.map(editStackElement => editStackElement.resource);\n    }\n    prepareUndoRedo() {\n        if (this._delegate) {\n            return this._delegate.prepareUndoRedo(this);\n        }\n    }\n    matchesResource(resource) {\n        const key = uriGetComparisonKey(resource);\n        return (this._editStackElementsMap.has(key));\n    }\n    setModel(model) {\n        const key = uriGetComparisonKey(URI.isUri(model) ? model : model.uri);\n        if (this._editStackElementsMap.has(key)) {\n            this._editStackElementsMap.get(key).setModel(model);\n        }\n    }\n    canAppend(model) {\n        if (!this._isOpen) {\n            return false;\n        }\n        const key = uriGetComparisonKey(model.uri);\n        if (this._editStackElementsMap.has(key)) {\n            const editStackElement = this._editStackElementsMap.get(key);\n            return editStackElement.canAppend(model);\n        }\n        return false;\n    }\n    append(model, textChanges, afterEOL, afterVersionId, afterCursorState) {\n        const key = uriGetComparisonKey(model.uri);\n        const editStackElement = this._editStackElementsMap.get(key);\n        editStackElement.append(model, textChanges, afterEOL, afterVersionId, afterCursorState);\n    }\n    close() {\n        this._isOpen = false;\n    }\n    open() {\n        // cannot reopen\n    }\n    undo() {\n        this._isOpen = false;\n        for (const editStackElement of this._editStackElementsArr) {\n            editStackElement.undo();\n        }\n    }\n    redo() {\n        for (const editStackElement of this._editStackElementsArr) {\n            editStackElement.redo();\n        }\n    }\n    heapSize(resource) {\n        const key = uriGetComparisonKey(resource);\n        if (this._editStackElementsMap.has(key)) {\n            const editStackElement = this._editStackElementsMap.get(key);\n            return editStackElement.heapSize();\n        }\n        return 0;\n    }\n    split() {\n        return this._editStackElementsArr;\n    }\n    toString() {\n        let result = [];\n        for (const editStackElement of this._editStackElementsArr) {\n            result.push(`${basename(editStackElement.resource)}: ${editStackElement}`);\n        }\n        return `{${result.join(', ')}}`;\n    }\n}\nfunction getModelEOL(model) {\n    const eol = model.getEOL();\n    if (eol === '\\n') {\n        return 0 /* LF */;\n    }\n    else {\n        return 1 /* CRLF */;\n    }\n}\nexport function isEditStackElement(element) {\n    if (!element) {\n        return false;\n    }\n    return ((element instanceof SingleModelEditStackElement) || (element instanceof MultiModelEditStackElement));\n}\nexport class EditStack {\n    constructor(model, undoRedoService) {\n        this._model = model;\n        this._undoRedoService = undoRedoService;\n    }\n    pushStackElement() {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement)) {\n            lastElement.close();\n        }\n    }\n    popStackElement() {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement)) {\n            lastElement.open();\n        }\n    }\n    clear() {\n        this._undoRedoService.removeElements(this._model.uri);\n    }\n    _getOrCreateEditStackElement(beforeCursorState) {\n        const lastElement = this._undoRedoService.getLastElement(this._model.uri);\n        if (isEditStackElement(lastElement) && lastElement.canAppend(this._model)) {\n            return lastElement;\n        }\n        const newElement = new SingleModelEditStackElement(this._model, beforeCursorState);\n        this._undoRedoService.pushElement(newElement);\n        return newElement;\n    }\n    pushEOL(eol) {\n        const editStackElement = this._getOrCreateEditStackElement(null);\n        this._model.setEOL(eol);\n        editStackElement.append(this._model, [], getModelEOL(this._model), this._model.getAlternativeVersionId(), null);\n    }\n    pushEditOperation(beforeCursorState, editOperations, cursorStateComputer) {\n        const editStackElement = this._getOrCreateEditStackElement(beforeCursorState);\n        const inverseEditOperations = this._model.applyEdits(editOperations, true);\n        const afterCursorState = EditStack._computeCursorState(cursorStateComputer, inverseEditOperations);\n        const textChanges = inverseEditOperations.map((op, index) => ({ index: index, textChange: op.textChange }));\n        textChanges.sort((a, b) => {\n            if (a.textChange.oldPosition === b.textChange.oldPosition) {\n                return a.index - b.index;\n            }\n            return a.textChange.oldPosition - b.textChange.oldPosition;\n        });\n        editStackElement.append(this._model, textChanges.map(op => op.textChange), getModelEOL(this._model), this._model.getAlternativeVersionId(), afterCursorState);\n        return afterCursorState;\n    }\n    static _computeCursorState(cursorStateComputer, inverseEditOperations) {\n        try {\n            return cursorStateComputer ? cursorStateComputer(inverseEditOperations) : null;\n        }\n        catch (e) {\n            onUnexpectedError(e);\n            return null;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayQueue, findLast } from '../../../base/common/arrays.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { Range } from '../core/range.js';\nimport { TextModelPart } from './textModelPart.js';\nimport { computeIndentLevel } from './utils.js';\nimport { HorizontalGuidesState, IndentGuide, IndentGuideHorizontalLine } from '../textModelGuides.js';\nexport class GuidesTextModelPart extends TextModelPart {\n    constructor(textModel, languageConfigurationService) {\n        super();\n        this.textModel = textModel;\n        this.languageConfigurationService = languageConfigurationService;\n    }\n    getLanguageConfiguration(languageId) {\n        return this.languageConfigurationService.getLanguageConfiguration(languageId);\n    }\n    _computeIndentLevel(lineIndex) {\n        return computeIndentLevel(this.textModel.getLineContent(lineIndex + 1), this.textModel.getOptions().tabSize);\n    }\n    getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n        this.assertNotDisposed();\n        const lineCount = this.textModel.getLineCount();\n        if (lineNumber < 1 || lineNumber > lineCount) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        const foldingRules = this.getLanguageConfiguration(this.textModel.getLanguageId()).foldingRules;\n        const offSide = Boolean(foldingRules && foldingRules.offSide);\n        let up_aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let up_aboveContentLineIndent = -1;\n        let up_belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let up_belowContentLineIndent = -1;\n        const up_resolveIndents = (lineNumber) => {\n            if (up_aboveContentLineIndex !== -1 &&\n                (up_aboveContentLineIndex === -2 ||\n                    up_aboveContentLineIndex > lineNumber - 1)) {\n                up_aboveContentLineIndex = -1;\n                up_aboveContentLineIndent = -1;\n                // must find previous line with content\n                for (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        up_aboveContentLineIndex = lineIndex;\n                        up_aboveContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            if (up_belowContentLineIndex === -2) {\n                up_belowContentLineIndex = -1;\n                up_belowContentLineIndent = -1;\n                // must find next line with content\n                for (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        up_belowContentLineIndex = lineIndex;\n                        up_belowContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n        };\n        let down_aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let down_aboveContentLineIndent = -1;\n        let down_belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let down_belowContentLineIndent = -1;\n        const down_resolveIndents = (lineNumber) => {\n            if (down_aboveContentLineIndex === -2) {\n                down_aboveContentLineIndex = -1;\n                down_aboveContentLineIndent = -1;\n                // must find previous line with content\n                for (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        down_aboveContentLineIndex = lineIndex;\n                        down_aboveContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            if (down_belowContentLineIndex !== -1 &&\n                (down_belowContentLineIndex === -2 ||\n                    down_belowContentLineIndex < lineNumber - 1)) {\n                down_belowContentLineIndex = -1;\n                down_belowContentLineIndent = -1;\n                // must find next line with content\n                for (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        down_belowContentLineIndex = lineIndex;\n                        down_belowContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n        };\n        let startLineNumber = 0;\n        let goUp = true;\n        let endLineNumber = 0;\n        let goDown = true;\n        let indent = 0;\n        let initialIndent = 0;\n        for (let distance = 0; goUp || goDown; distance++) {\n            const upLineNumber = lineNumber - distance;\n            const downLineNumber = lineNumber + distance;\n            if (distance > 1 && (upLineNumber < 1 || upLineNumber < minLineNumber)) {\n                goUp = false;\n            }\n            if (distance > 1 &&\n                (downLineNumber > lineCount || downLineNumber > maxLineNumber)) {\n                goDown = false;\n            }\n            if (distance > 50000) {\n                // stop processing\n                goUp = false;\n                goDown = false;\n            }\n            let upLineIndentLevel = -1;\n            if (goUp && upLineNumber >= 1) {\n                // compute indent level going up\n                const currentIndent = this._computeIndentLevel(upLineNumber - 1);\n                if (currentIndent >= 0) {\n                    // This line has content (besides whitespace)\n                    // Use the line's indent\n                    up_belowContentLineIndex = upLineNumber - 1;\n                    up_belowContentLineIndent = currentIndent;\n                    upLineIndentLevel = Math.ceil(currentIndent / this.textModel.getOptions().indentSize);\n                }\n                else {\n                    up_resolveIndents(upLineNumber);\n                    upLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, up_aboveContentLineIndent, up_belowContentLineIndent);\n                }\n            }\n            let downLineIndentLevel = -1;\n            if (goDown && downLineNumber <= lineCount) {\n                // compute indent level going down\n                const currentIndent = this._computeIndentLevel(downLineNumber - 1);\n                if (currentIndent >= 0) {\n                    // This line has content (besides whitespace)\n                    // Use the line's indent\n                    down_aboveContentLineIndex = downLineNumber - 1;\n                    down_aboveContentLineIndent = currentIndent;\n                    downLineIndentLevel = Math.ceil(currentIndent / this.textModel.getOptions().indentSize);\n                }\n                else {\n                    down_resolveIndents(downLineNumber);\n                    downLineIndentLevel = this._getIndentLevelForWhitespaceLine(offSide, down_aboveContentLineIndent, down_belowContentLineIndent);\n                }\n            }\n            if (distance === 0) {\n                initialIndent = upLineIndentLevel;\n                continue;\n            }\n            if (distance === 1) {\n                if (downLineNumber <= lineCount &&\n                    downLineIndentLevel >= 0 &&\n                    initialIndent + 1 === downLineIndentLevel) {\n                    // This is the beginning of a scope, we have special handling here, since we want the\n                    // child scope indent to be active, not the parent scope\n                    goUp = false;\n                    startLineNumber = downLineNumber;\n                    endLineNumber = downLineNumber;\n                    indent = downLineIndentLevel;\n                    continue;\n                }\n                if (upLineNumber >= 1 &&\n                    upLineIndentLevel >= 0 &&\n                    upLineIndentLevel - 1 === initialIndent) {\n                    // This is the end of a scope, just like above\n                    goDown = false;\n                    startLineNumber = upLineNumber;\n                    endLineNumber = upLineNumber;\n                    indent = upLineIndentLevel;\n                    continue;\n                }\n                startLineNumber = lineNumber;\n                endLineNumber = lineNumber;\n                indent = initialIndent;\n                if (indent === 0) {\n                    // No need to continue\n                    return { startLineNumber, endLineNumber, indent };\n                }\n            }\n            if (goUp) {\n                if (upLineIndentLevel >= indent) {\n                    startLineNumber = upLineNumber;\n                }\n                else {\n                    goUp = false;\n                }\n            }\n            if (goDown) {\n                if (downLineIndentLevel >= indent) {\n                    endLineNumber = downLineNumber;\n                }\n                else {\n                    goDown = false;\n                }\n            }\n        }\n        return { startLineNumber, endLineNumber, indent };\n    }\n    getLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options) {\n        var _a, _b, _c, _d, _e;\n        const result = [];\n        const bracketPairs = this.textModel.bracketPairs.getBracketPairsInRangeWithMinIndentation(new Range(startLineNumber, 1, endLineNumber, this.textModel.getLineMaxColumn(endLineNumber)));\n        let activeBracketPairRange = undefined;\n        if (activePosition && bracketPairs.length > 0) {\n            const bracketsContainingActivePosition = startLineNumber <= activePosition.lineNumber &&\n                activePosition.lineNumber <= endLineNumber\n                ? // Does active position intersect with the view port? -> Intersect bracket pairs with activePosition\n                    bracketPairs.filter((bp) => Range.strictContainsPosition(bp.range, activePosition))\n                : this.textModel.bracketPairs.getBracketPairsInRange(Range.fromPositions(activePosition));\n            activeBracketPairRange = (_a = findLast(bracketsContainingActivePosition, \n            /* Exclude single line bracket pairs for cases such as\n             * ```\n             * function test() {\n             * \t\tif (true) { | }\n             * }\n             * ```\n             */\n            (i) => i.range.startLineNumber !== i.range.endLineNumber)) === null || _a === void 0 ? void 0 : _a.range;\n        }\n        const queue = new ArrayQueue(bracketPairs);\n        /** Indexed by nesting level */\n        const activeGuides = new Array();\n        const nextGuides = new Array();\n        const colorProvider = new BracketPairGuidesClassNames();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            let guides = new Array();\n            if (nextGuides.length > 0) {\n                guides = guides.concat(nextGuides);\n                nextGuides.length = 0;\n            }\n            result.push(guides);\n            // Update activeGuides\n            for (const pair of queue.takeWhile((b) => b.openingBracketRange.startLineNumber <= lineNumber) || []) {\n                if (pair.range.startLineNumber === pair.range.endLineNumber) {\n                    // ignore single line brackets\n                    continue;\n                }\n                const guideVisibleColumn = Math.min(this.getVisibleColumnFromPosition(pair.openingBracketRange.getStartPosition()), this.getVisibleColumnFromPosition((_c = (_b = pair.closingBracketRange) === null || _b === void 0 ? void 0 : _b.getStartPosition()) !== null && _c !== void 0 ? _c : pair.range.getEndPosition()), pair.minVisibleColumnIndentation + 1);\n                let renderHorizontalEndLineAtTheBottom = false;\n                if (pair.closingBracketRange) {\n                    const firstNonWsIndex = strings.firstNonWhitespaceIndex(this.textModel.getLineContent(pair.closingBracketRange.startLineNumber));\n                    if (firstNonWsIndex < pair.closingBracketRange.startColumn - 1) {\n                        renderHorizontalEndLineAtTheBottom = true;\n                    }\n                }\n                const start = pair.openingBracketRange.getStartPosition();\n                const end = (_e = (_d = pair.closingBracketRange) === null || _d === void 0 ? void 0 : _d.getStartPosition()) !== null && _e !== void 0 ? _e : pair.range.getEndPosition();\n                if (pair.closingBracketRange === undefined) {\n                    // Don't show guides for bracket pairs that are not balanced.\n                    // See #135125.\n                    activeGuides[pair.nestingLevel] = null;\n                }\n                else {\n                    activeGuides[pair.nestingLevel] = {\n                        nestingLevel: pair.nestingLevel,\n                        guideVisibleColumn,\n                        start,\n                        visibleStartColumn: this.getVisibleColumnFromPosition(start),\n                        end,\n                        visibleEndColumn: this.getVisibleColumnFromPosition(end),\n                        bracketPair: pair,\n                        renderHorizontalEndLineAtTheBottom,\n                    };\n                }\n            }\n            for (const line of activeGuides) {\n                if (!line) {\n                    continue;\n                }\n                const isActive = activeBracketPairRange &&\n                    line.bracketPair.range.equalsRange(activeBracketPairRange);\n                const className = colorProvider.getInlineClassNameOfLevel(line.nestingLevel) +\n                    (options.highlightActive && isActive\n                        ? ' ' + colorProvider.activeClassName\n                        : '');\n                if ((isActive &&\n                    options.horizontalGuides !==\n                        HorizontalGuidesState.Disabled) ||\n                    (options.includeInactive &&\n                        options.horizontalGuides === HorizontalGuidesState.Enabled)) {\n                    if (line.start.lineNumber === lineNumber) {\n                        if (line.guideVisibleColumn < line.visibleStartColumn) {\n                            guides.push(new IndentGuide(line.guideVisibleColumn, className, new IndentGuideHorizontalLine(false, line.start.column)));\n                        }\n                    }\n                    if (line.end.lineNumber === lineNumber + 1) {\n                        // The next line might have horizontal guides.\n                        // However, the next line might also have a new bracket pair with the same indentation,\n                        // so the current bracket pair might get replaced. That's why we push the guide to nextGuides one line ahead.\n                        if (line.guideVisibleColumn < line.visibleEndColumn) {\n                            nextGuides.push(new IndentGuide(line.guideVisibleColumn, className, new IndentGuideHorizontalLine(!line.renderHorizontalEndLineAtTheBottom, line.end.column)));\n                        }\n                    }\n                }\n            }\n            let lastVisibleColumnCount = Number.MAX_SAFE_INTEGER;\n            // Going backwards, so the last guide potentially replaces others\n            for (let i = activeGuides.length - 1; i >= 0; i--) {\n                const line = activeGuides[i];\n                if (!line) {\n                    continue;\n                }\n                const isActive = options.highlightActive &&\n                    activeBracketPairRange &&\n                    line.bracketPair.range.equalsRange(activeBracketPairRange);\n                const className = colorProvider.getInlineClassNameOfLevel(line.nestingLevel) +\n                    (isActive ? ' ' + colorProvider.activeClassName : '');\n                if (isActive || options.includeInactive) {\n                    if (line.renderHorizontalEndLineAtTheBottom &&\n                        line.end.lineNumber === lineNumber + 1) {\n                        nextGuides.push(new IndentGuide(line.guideVisibleColumn, className, null));\n                    }\n                }\n                if (line.end.lineNumber <= lineNumber ||\n                    line.start.lineNumber >= lineNumber) {\n                    continue;\n                }\n                if (line.guideVisibleColumn >= lastVisibleColumnCount && !isActive) {\n                    // Don't render a guide on top of an existing guide, unless it is active.\n                    continue;\n                }\n                lastVisibleColumnCount = line.guideVisibleColumn;\n                if (isActive || options.includeInactive) {\n                    guides.push(new IndentGuide(line.guideVisibleColumn, className, null));\n                }\n            }\n            guides.sort((a, b) => a.visibleColumn - b.visibleColumn);\n        }\n        return result;\n    }\n    getVisibleColumnFromPosition(position) {\n        return (CursorColumns.visibleColumnFromColumn(this.textModel.getLineContent(position.lineNumber), position.column, this.textModel.getOptions().tabSize) + 1);\n    }\n    getLinesIndentGuides(startLineNumber, endLineNumber) {\n        this.assertNotDisposed();\n        const lineCount = this.textModel.getLineCount();\n        if (startLineNumber < 1 || startLineNumber > lineCount) {\n            throw new Error('Illegal value for startLineNumber');\n        }\n        if (endLineNumber < 1 || endLineNumber > lineCount) {\n            throw new Error('Illegal value for endLineNumber');\n        }\n        const options = this.textModel.getOptions();\n        const foldingRules = this.getLanguageConfiguration(this.textModel.getLanguageId()).foldingRules;\n        const offSide = Boolean(foldingRules && foldingRules.offSide);\n        const result = new Array(endLineNumber - startLineNumber + 1);\n        let aboveContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let aboveContentLineIndent = -1;\n        let belowContentLineIndex = -2; /* -2 is a marker for not having computed it */\n        let belowContentLineIndent = -1;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const resultIndex = lineNumber - startLineNumber;\n            const currentIndent = this._computeIndentLevel(lineNumber - 1);\n            if (currentIndent >= 0) {\n                // This line has content (besides whitespace)\n                // Use the line's indent\n                aboveContentLineIndex = lineNumber - 1;\n                aboveContentLineIndent = currentIndent;\n                result[resultIndex] = Math.ceil(currentIndent / options.indentSize);\n                continue;\n            }\n            if (aboveContentLineIndex === -2) {\n                aboveContentLineIndex = -1;\n                aboveContentLineIndent = -1;\n                // must find previous line with content\n                for (let lineIndex = lineNumber - 2; lineIndex >= 0; lineIndex--) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        aboveContentLineIndex = lineIndex;\n                        aboveContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            if (belowContentLineIndex !== -1 &&\n                (belowContentLineIndex === -2 || belowContentLineIndex < lineNumber - 1)) {\n                belowContentLineIndex = -1;\n                belowContentLineIndent = -1;\n                // must find next line with content\n                for (let lineIndex = lineNumber; lineIndex < lineCount; lineIndex++) {\n                    const indent = this._computeIndentLevel(lineIndex);\n                    if (indent >= 0) {\n                        belowContentLineIndex = lineIndex;\n                        belowContentLineIndent = indent;\n                        break;\n                    }\n                }\n            }\n            result[resultIndex] = this._getIndentLevelForWhitespaceLine(offSide, aboveContentLineIndent, belowContentLineIndent);\n        }\n        return result;\n    }\n    _getIndentLevelForWhitespaceLine(offSide, aboveContentLineIndent, belowContentLineIndent) {\n        const options = this.textModel.getOptions();\n        if (aboveContentLineIndent === -1 || belowContentLineIndent === -1) {\n            // At the top or bottom of the file\n            return 0;\n        }\n        else if (aboveContentLineIndent < belowContentLineIndent) {\n            // we are inside the region above\n            return 1 + Math.floor(aboveContentLineIndent / options.indentSize);\n        }\n        else if (aboveContentLineIndent === belowContentLineIndent) {\n            // we are in between two regions\n            return Math.ceil(belowContentLineIndent / options.indentSize);\n        }\n        else {\n            if (offSide) {\n                // same level as region below\n                return Math.ceil(belowContentLineIndent / options.indentSize);\n            }\n            else {\n                // we are inside the region that ends below\n                return 1 + Math.floor(belowContentLineIndent / options.indentSize);\n            }\n        }\n    }\n}\nexport class BracketPairGuidesClassNames {\n    constructor() {\n        this.activeClassName = 'indent-active';\n    }\n    getInlineClassNameOfLevel(level) {\n        // To support a dynamic amount of colors up to 6 colors,\n        // we use a number that is a lcm of all numbers from 1 to 6.\n        return `bracket-indent-guide lvl-${level % 30}`;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass SpacesDiffResult {\n    constructor() {\n        this.spacesDiff = 0;\n        this.looksLikeAlignment = false;\n    }\n}\n/**\n * Compute the diff in spaces between two line's indentation.\n */\nfunction spacesDiff(a, aLength, b, bLength, result) {\n    result.spacesDiff = 0;\n    result.looksLikeAlignment = false;\n    // This can go both ways (e.g.):\n    //  - a: \"\\t\"\n    //  - b: \"\\t    \"\n    //  => This should count 1 tab and 4 spaces\n    let i;\n    for (i = 0; i < aLength && i < bLength; i++) {\n        const aCharCode = a.charCodeAt(i);\n        const bCharCode = b.charCodeAt(i);\n        if (aCharCode !== bCharCode) {\n            break;\n        }\n    }\n    let aSpacesCnt = 0, aTabsCount = 0;\n    for (let j = i; j < aLength; j++) {\n        const aCharCode = a.charCodeAt(j);\n        if (aCharCode === 32 /* Space */) {\n            aSpacesCnt++;\n        }\n        else {\n            aTabsCount++;\n        }\n    }\n    let bSpacesCnt = 0, bTabsCount = 0;\n    for (let j = i; j < bLength; j++) {\n        const bCharCode = b.charCodeAt(j);\n        if (bCharCode === 32 /* Space */) {\n            bSpacesCnt++;\n        }\n        else {\n            bTabsCount++;\n        }\n    }\n    if (aSpacesCnt > 0 && aTabsCount > 0) {\n        return;\n    }\n    if (bSpacesCnt > 0 && bTabsCount > 0) {\n        return;\n    }\n    const tabsDiff = Math.abs(aTabsCount - bTabsCount);\n    const spacesDiff = Math.abs(aSpacesCnt - bSpacesCnt);\n    if (tabsDiff === 0) {\n        // check if the indentation difference might be caused by alignment reasons\n        // sometime folks like to align their code, but this should not be used as a hint\n        result.spacesDiff = spacesDiff;\n        if (spacesDiff > 0 && 0 <= bSpacesCnt - 1 && bSpacesCnt - 1 < a.length && bSpacesCnt < b.length) {\n            if (b.charCodeAt(bSpacesCnt) !== 32 /* Space */ && a.charCodeAt(bSpacesCnt - 1) === 32 /* Space */) {\n                if (a.charCodeAt(a.length - 1) === 44 /* Comma */) {\n                    // This looks like an alignment desire: e.g.\n                    // const a = b + c,\n                    //       d = b - c;\n                    result.looksLikeAlignment = true;\n                }\n            }\n        }\n        return;\n    }\n    if (spacesDiff % tabsDiff === 0) {\n        result.spacesDiff = spacesDiff / tabsDiff;\n        return;\n    }\n}\nexport function guessIndentation(source, defaultTabSize, defaultInsertSpaces) {\n    // Look at most at the first 10k lines\n    const linesCount = Math.min(source.getLineCount(), 10000);\n    let linesIndentedWithTabsCount = 0; // number of lines that contain at least one tab in indentation\n    let linesIndentedWithSpacesCount = 0; // number of lines that contain only spaces in indentation\n    let previousLineText = ''; // content of latest line that contained non-whitespace chars\n    let previousLineIndentation = 0; // index at which latest line contained the first non-whitespace char\n    const ALLOWED_TAB_SIZE_GUESSES = [2, 4, 6, 8, 3, 5, 7]; // prefer even guesses for `tabSize`, limit to [2, 8].\n    const MAX_ALLOWED_TAB_SIZE_GUESS = 8; // max(ALLOWED_TAB_SIZE_GUESSES) = 8\n    const spacesDiffCount = [0, 0, 0, 0, 0, 0, 0, 0, 0]; // `tabSize` scores\n    const tmp = new SpacesDiffResult();\n    for (let lineNumber = 1; lineNumber <= linesCount; lineNumber++) {\n        const currentLineLength = source.getLineLength(lineNumber);\n        const currentLineText = source.getLineContent(lineNumber);\n        // if the text buffer is chunk based, so long lines are cons-string, v8 will flattern the string when we check charCode.\n        // checking charCode on chunks directly is cheaper.\n        const useCurrentLineText = (currentLineLength <= 65536);\n        let currentLineHasContent = false; // does `currentLineText` contain non-whitespace chars\n        let currentLineIndentation = 0; // index at which `currentLineText` contains the first non-whitespace char\n        let currentLineSpacesCount = 0; // count of spaces found in `currentLineText` indentation\n        let currentLineTabsCount = 0; // count of tabs found in `currentLineText` indentation\n        for (let j = 0, lenJ = currentLineLength; j < lenJ; j++) {\n            const charCode = (useCurrentLineText ? currentLineText.charCodeAt(j) : source.getLineCharCode(lineNumber, j));\n            if (charCode === 9 /* Tab */) {\n                currentLineTabsCount++;\n            }\n            else if (charCode === 32 /* Space */) {\n                currentLineSpacesCount++;\n            }\n            else {\n                // Hit non whitespace character on this line\n                currentLineHasContent = true;\n                currentLineIndentation = j;\n                break;\n            }\n        }\n        // Ignore empty or only whitespace lines\n        if (!currentLineHasContent) {\n            continue;\n        }\n        if (currentLineTabsCount > 0) {\n            linesIndentedWithTabsCount++;\n        }\n        else if (currentLineSpacesCount > 1) {\n            linesIndentedWithSpacesCount++;\n        }\n        spacesDiff(previousLineText, previousLineIndentation, currentLineText, currentLineIndentation, tmp);\n        if (tmp.looksLikeAlignment) {\n            // if defaultInsertSpaces === true && the spaces count == tabSize, we may want to count it as valid indentation\n            //\n            // - item1\n            //   - item2\n            //\n            // otherwise skip this line entirely\n            //\n            // const a = 1,\n            //       b = 2;\n            if (!(defaultInsertSpaces && defaultTabSize === tmp.spacesDiff)) {\n                continue;\n            }\n        }\n        const currentSpacesDiff = tmp.spacesDiff;\n        if (currentSpacesDiff <= MAX_ALLOWED_TAB_SIZE_GUESS) {\n            spacesDiffCount[currentSpacesDiff]++;\n        }\n        previousLineText = currentLineText;\n        previousLineIndentation = currentLineIndentation;\n    }\n    let insertSpaces = defaultInsertSpaces;\n    if (linesIndentedWithTabsCount !== linesIndentedWithSpacesCount) {\n        insertSpaces = (linesIndentedWithTabsCount < linesIndentedWithSpacesCount);\n    }\n    let tabSize = defaultTabSize;\n    // Guess tabSize only if inserting spaces...\n    if (insertSpaces) {\n        let tabSizeScore = (insertSpaces ? 0 : 0.1 * linesCount);\n        // console.log(\"score threshold: \" + tabSizeScore);\n        ALLOWED_TAB_SIZE_GUESSES.forEach((possibleTabSize) => {\n            const possibleTabSizeScore = spacesDiffCount[possibleTabSize];\n            if (possibleTabSizeScore > tabSizeScore) {\n                tabSizeScore = possibleTabSizeScore;\n                tabSize = possibleTabSize;\n            }\n        });\n        // Let a tabSize of 2 win even if it is not the maximum\n        // (only in case 4 was guessed)\n        if (tabSize === 4 && spacesDiffCount[4] > 0 && spacesDiffCount[2] > 0 && spacesDiffCount[2] >= spacesDiffCount[4] / 2) {\n            tabSize = 2;\n        }\n    }\n    // console.log('--------------------------');\n    // console.log('linesIndentedWithTabsCount: ' + linesIndentedWithTabsCount + ', linesIndentedWithSpacesCount: ' + linesIndentedWithSpacesCount);\n    // console.log('spacesDiffCount: ' + spacesDiffCount);\n    // console.log('tabSize: ' + tabSize + ', tabSizeScore: ' + tabSizeScore);\n    return {\n        insertSpaces: insertSpaces,\n        tabSize: tabSize\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function getNodeColor(node) {\n    return ((node.metadata & 1 /* ColorMask */) >>> 0 /* ColorOffset */);\n}\nfunction setNodeColor(node, color) {\n    node.metadata = ((node.metadata & 254 /* ColorMaskInverse */) | (color << 0 /* ColorOffset */));\n}\nfunction getNodeIsVisited(node) {\n    return ((node.metadata & 2 /* IsVisitedMask */) >>> 1 /* IsVisitedOffset */) === 1;\n}\nfunction setNodeIsVisited(node, value) {\n    node.metadata = ((node.metadata & 253 /* IsVisitedMaskInverse */) | ((value ? 1 : 0) << 1 /* IsVisitedOffset */));\n}\nfunction getNodeIsForValidation(node) {\n    return ((node.metadata & 4 /* IsForValidationMask */) >>> 2 /* IsForValidationOffset */) === 1;\n}\nfunction setNodeIsForValidation(node, value) {\n    node.metadata = ((node.metadata & 251 /* IsForValidationMaskInverse */) | ((value ? 1 : 0) << 2 /* IsForValidationOffset */));\n}\nfunction getNodeStickiness(node) {\n    return ((node.metadata & 24 /* StickinessMask */) >>> 3 /* StickinessOffset */);\n}\nfunction _setNodeStickiness(node, stickiness) {\n    node.metadata = ((node.metadata & 231 /* StickinessMaskInverse */) | (stickiness << 3 /* StickinessOffset */));\n}\nfunction getCollapseOnReplaceEdit(node) {\n    return ((node.metadata & 32 /* CollapseOnReplaceEditMask */) >>> 5 /* CollapseOnReplaceEditOffset */) === 1;\n}\nfunction setCollapseOnReplaceEdit(node, value) {\n    node.metadata = ((node.metadata & 223 /* CollapseOnReplaceEditMaskInverse */) | ((value ? 1 : 0) << 5 /* CollapseOnReplaceEditOffset */));\n}\nexport class IntervalNode {\n    constructor(id, start, end) {\n        this.metadata = 0;\n        this.parent = this;\n        this.left = this;\n        this.right = this;\n        setNodeColor(this, 1 /* Red */);\n        this.start = start;\n        this.end = end;\n        // FORCE_OVERFLOWING_TEST: this.delta = start;\n        this.delta = 0;\n        this.maxEnd = end;\n        this.id = id;\n        this.ownerId = 0;\n        this.options = null;\n        setNodeIsForValidation(this, false);\n        _setNodeStickiness(this, 1 /* NeverGrowsWhenTypingAtEdges */);\n        setCollapseOnReplaceEdit(this, false);\n        this.cachedVersionId = 0;\n        this.cachedAbsoluteStart = start;\n        this.cachedAbsoluteEnd = end;\n        this.range = null;\n        setNodeIsVisited(this, false);\n    }\n    reset(versionId, start, end, range) {\n        this.start = start;\n        this.end = end;\n        this.maxEnd = end;\n        this.cachedVersionId = versionId;\n        this.cachedAbsoluteStart = start;\n        this.cachedAbsoluteEnd = end;\n        this.range = range;\n    }\n    setOptions(options) {\n        this.options = options;\n        const className = this.options.className;\n        setNodeIsForValidation(this, (className === \"squiggly-error\" /* EditorErrorDecoration */\n            || className === \"squiggly-warning\" /* EditorWarningDecoration */\n            || className === \"squiggly-info\" /* EditorInfoDecoration */));\n        _setNodeStickiness(this, this.options.stickiness);\n        setCollapseOnReplaceEdit(this, this.options.collapseOnReplaceEdit);\n    }\n    setCachedOffsets(absoluteStart, absoluteEnd, cachedVersionId) {\n        if (this.cachedVersionId !== cachedVersionId) {\n            this.range = null;\n        }\n        this.cachedVersionId = cachedVersionId;\n        this.cachedAbsoluteStart = absoluteStart;\n        this.cachedAbsoluteEnd = absoluteEnd;\n    }\n    detach() {\n        this.parent = null;\n        this.left = null;\n        this.right = null;\n    }\n}\nexport const SENTINEL = new IntervalNode(null, 0, 0);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nsetNodeColor(SENTINEL, 0 /* Black */);\nexport class IntervalTree {\n    constructor() {\n        this.root = SENTINEL;\n        this.requestNormalizeDelta = false;\n    }\n    intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId) {\n        if (this.root === SENTINEL) {\n            return [];\n        }\n        return intervalSearch(this, start, end, filterOwnerId, filterOutValidation, cachedVersionId);\n    }\n    search(filterOwnerId, filterOutValidation, cachedVersionId) {\n        if (this.root === SENTINEL) {\n            return [];\n        }\n        return search(this, filterOwnerId, filterOutValidation, cachedVersionId);\n    }\n    /**\n     * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!\n     */\n    collectNodesFromOwner(ownerId) {\n        return collectNodesFromOwner(this, ownerId);\n    }\n    /**\n     * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!\n     */\n    collectNodesPostOrder() {\n        return collectNodesPostOrder(this);\n    }\n    insert(node) {\n        rbTreeInsert(this, node);\n        this._normalizeDeltaIfNecessary();\n    }\n    delete(node) {\n        rbTreeDelete(this, node);\n        this._normalizeDeltaIfNecessary();\n    }\n    resolveNode(node, cachedVersionId) {\n        const initialNode = node;\n        let delta = 0;\n        while (node !== this.root) {\n            if (node === node.parent.right) {\n                delta += node.parent.delta;\n            }\n            node = node.parent;\n        }\n        const nodeStart = initialNode.start + delta;\n        const nodeEnd = initialNode.end + delta;\n        initialNode.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n    }\n    acceptReplace(offset, length, textLength, forceMoveMarkers) {\n        // Our strategy is to remove all directly impacted nodes, and then add them back to the tree.\n        // (1) collect all nodes that are intersecting this edit as nodes of interest\n        const nodesOfInterest = searchForEditing(this, offset, offset + length);\n        // (2) remove all nodes that are intersecting this edit\n        for (let i = 0, len = nodesOfInterest.length; i < len; i++) {\n            const node = nodesOfInterest[i];\n            rbTreeDelete(this, node);\n        }\n        this._normalizeDeltaIfNecessary();\n        // (3) edit all tree nodes except the nodes of interest\n        noOverlapReplace(this, offset, offset + length, textLength);\n        this._normalizeDeltaIfNecessary();\n        // (4) edit the nodes of interest and insert them back in the tree\n        for (let i = 0, len = nodesOfInterest.length; i < len; i++) {\n            const node = nodesOfInterest[i];\n            node.start = node.cachedAbsoluteStart;\n            node.end = node.cachedAbsoluteEnd;\n            nodeAcceptEdit(node, offset, (offset + length), textLength, forceMoveMarkers);\n            node.maxEnd = node.end;\n            rbTreeInsert(this, node);\n        }\n        this._normalizeDeltaIfNecessary();\n    }\n    _normalizeDeltaIfNecessary() {\n        if (!this.requestNormalizeDelta) {\n            return;\n        }\n        this.requestNormalizeDelta = false;\n        normalizeDelta(this);\n    }\n}\n//#region Delta Normalization\nfunction normalizeDelta(T) {\n    let node = T.root;\n    let delta = 0;\n    while (node !== SENTINEL) {\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n        // handle current node\n        node.start = delta + node.start;\n        node.end = delta + node.end;\n        node.delta = 0;\n        recomputeMaxEnd(node);\n        setNodeIsVisited(node, true);\n        // going up from this node\n        setNodeIsVisited(node.left, false);\n        setNodeIsVisited(node.right, false);\n        if (node === node.parent.right) {\n            delta -= node.parent.delta;\n        }\n        node = node.parent;\n    }\n    setNodeIsVisited(T.root, false);\n}\nfunction adjustMarkerBeforeColumn(markerOffset, markerStickToPreviousCharacter, checkOffset, moveSemantics) {\n    if (markerOffset < checkOffset) {\n        return true;\n    }\n    if (markerOffset > checkOffset) {\n        return false;\n    }\n    if (moveSemantics === 1 /* ForceMove */) {\n        return false;\n    }\n    if (moveSemantics === 2 /* ForceStay */) {\n        return true;\n    }\n    return markerStickToPreviousCharacter;\n}\n/**\n * This is a lot more complicated than strictly necessary to maintain the same behaviour\n * as when decorations were implemented using two markers.\n */\nexport function nodeAcceptEdit(node, start, end, textLength, forceMoveMarkers) {\n    const nodeStickiness = getNodeStickiness(node);\n    const startStickToPreviousCharacter = (nodeStickiness === 0 /* AlwaysGrowsWhenTypingAtEdges */\n        || nodeStickiness === 2 /* GrowsOnlyWhenTypingBefore */);\n    const endStickToPreviousCharacter = (nodeStickiness === 1 /* NeverGrowsWhenTypingAtEdges */\n        || nodeStickiness === 2 /* GrowsOnlyWhenTypingBefore */);\n    const deletingCnt = (end - start);\n    const insertingCnt = textLength;\n    const commonLength = Math.min(deletingCnt, insertingCnt);\n    const nodeStart = node.start;\n    let startDone = false;\n    const nodeEnd = node.end;\n    let endDone = false;\n    if (start <= nodeStart && nodeEnd <= end && getCollapseOnReplaceEdit(node)) {\n        // This edit encompasses the entire decoration range\n        // and the decoration has asked to become collapsed\n        node.start = start;\n        startDone = true;\n        node.end = start;\n        endDone = true;\n    }\n    {\n        const moveSemantics = forceMoveMarkers ? 1 /* ForceMove */ : (deletingCnt > 0 ? 2 /* ForceStay */ : 0 /* MarkerDefined */);\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, start, moveSemantics)) {\n            startDone = true;\n        }\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, start, moveSemantics)) {\n            endDone = true;\n        }\n    }\n    if (commonLength > 0 && !forceMoveMarkers) {\n        const moveSemantics = (deletingCnt > insertingCnt ? 2 /* ForceStay */ : 0 /* MarkerDefined */);\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, start + commonLength, moveSemantics)) {\n            startDone = true;\n        }\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, start + commonLength, moveSemantics)) {\n            endDone = true;\n        }\n    }\n    {\n        const moveSemantics = forceMoveMarkers ? 1 /* ForceMove */ : 0 /* MarkerDefined */;\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, end, moveSemantics)) {\n            node.start = start + insertingCnt;\n            startDone = true;\n        }\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, end, moveSemantics)) {\n            node.end = start + insertingCnt;\n            endDone = true;\n        }\n    }\n    // Finish\n    const deltaColumn = (insertingCnt - deletingCnt);\n    if (!startDone) {\n        node.start = Math.max(0, nodeStart + deltaColumn);\n    }\n    if (!endDone) {\n        node.end = Math.max(0, nodeEnd + deltaColumn);\n    }\n    if (node.start > node.end) {\n        node.end = node.start;\n    }\n}\nfunction searchForEditing(T, start, end) {\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n    // Now, it is known that two intervals A and B overlap only when both\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\n    // nodes overlapping with a given interval, you can immediately skip:\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\n    let node = T.root;\n    let delta = 0;\n    let nodeMaxEnd = 0;\n    let nodeStart = 0;\n    let nodeEnd = 0;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            node = node.parent;\n            continue;\n        }\n        if (!getNodeIsVisited(node.left)) {\n            // first time seeing this node\n            nodeMaxEnd = delta + node.maxEnd;\n            if (nodeMaxEnd < start) {\n                // cover case b) from above\n                // there is no need to search this node or its children\n                setNodeIsVisited(node, true);\n                continue;\n            }\n            if (node.left !== SENTINEL) {\n                // go left\n                node = node.left;\n                continue;\n            }\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        if (nodeStart > end) {\n            // cover case a) from above\n            // there is no need to search this node or its right subtree\n            setNodeIsVisited(node, true);\n            continue;\n        }\n        nodeEnd = delta + node.end;\n        if (nodeEnd >= start) {\n            node.setCachedOffsets(nodeStart, nodeEnd, 0);\n            result[resultLen++] = node;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction noOverlapReplace(T, start, end, textLength) {\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n    // Now, it is known that two intervals A and B overlap only when both\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\n    // nodes overlapping with a given interval, you can immediately skip:\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\n    let node = T.root;\n    let delta = 0;\n    let nodeMaxEnd = 0;\n    let nodeStart = 0;\n    const editDelta = (textLength - (end - start));\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            recomputeMaxEnd(node);\n            node = node.parent;\n            continue;\n        }\n        if (!getNodeIsVisited(node.left)) {\n            // first time seeing this node\n            nodeMaxEnd = delta + node.maxEnd;\n            if (nodeMaxEnd < start) {\n                // cover case b) from above\n                // there is no need to search this node or its children\n                setNodeIsVisited(node, true);\n                continue;\n            }\n            if (node.left !== SENTINEL) {\n                // go left\n                node = node.left;\n                continue;\n            }\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        if (nodeStart > end) {\n            node.start += editDelta;\n            node.end += editDelta;\n            node.delta += editDelta;\n            if (node.delta < -1073741824 /* MIN_SAFE_DELTA */ || node.delta > 1073741824 /* MAX_SAFE_DELTA */) {\n                T.requestNormalizeDelta = true;\n            }\n            // cover case a) from above\n            // there is no need to search this node or its right subtree\n            setNodeIsVisited(node, true);\n            continue;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n}\n//#endregion\n//#region Searching\nfunction collectNodesFromOwner(T, ownerId) {\n    let node = T.root;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            node = node.parent;\n            continue;\n        }\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        // handle current node\n        if (node.ownerId === ownerId) {\n            result[resultLen++] = node;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction collectNodesPostOrder(T) {\n    let node = T.root;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            node = node.parent;\n            continue;\n        }\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            node = node.right;\n            continue;\n        }\n        // handle current node\n        result[resultLen++] = node;\n        setNodeIsVisited(node, true);\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction search(T, filterOwnerId, filterOutValidation, cachedVersionId) {\n    let node = T.root;\n    let delta = 0;\n    let nodeStart = 0;\n    let nodeEnd = 0;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            node = node.parent;\n            continue;\n        }\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\n            // go left\n            node = node.left;\n            continue;\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        nodeEnd = delta + node.end;\n        node.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n        let include = true;\n        if (filterOwnerId && node.ownerId && node.ownerId !== filterOwnerId) {\n            include = false;\n        }\n        if (filterOutValidation && getNodeIsForValidation(node)) {\n            include = false;\n        }\n        if (include) {\n            result[resultLen++] = node;\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\nfunction intervalSearch(T, intervalStart, intervalEnd, filterOwnerId, filterOutValidation, cachedVersionId) {\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\n    // Now, it is known that two intervals A and B overlap only when both\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\n    // nodes overlapping with a given interval, you can immediately skip:\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\n    let node = T.root;\n    let delta = 0;\n    let nodeMaxEnd = 0;\n    let nodeStart = 0;\n    let nodeEnd = 0;\n    const result = [];\n    let resultLen = 0;\n    while (node !== SENTINEL) {\n        if (getNodeIsVisited(node)) {\n            // going up from this node\n            setNodeIsVisited(node.left, false);\n            setNodeIsVisited(node.right, false);\n            if (node === node.parent.right) {\n                delta -= node.parent.delta;\n            }\n            node = node.parent;\n            continue;\n        }\n        if (!getNodeIsVisited(node.left)) {\n            // first time seeing this node\n            nodeMaxEnd = delta + node.maxEnd;\n            if (nodeMaxEnd < intervalStart) {\n                // cover case b) from above\n                // there is no need to search this node or its children\n                setNodeIsVisited(node, true);\n                continue;\n            }\n            if (node.left !== SENTINEL) {\n                // go left\n                node = node.left;\n                continue;\n            }\n        }\n        // handle current node\n        nodeStart = delta + node.start;\n        if (nodeStart > intervalEnd) {\n            // cover case a) from above\n            // there is no need to search this node or its right subtree\n            setNodeIsVisited(node, true);\n            continue;\n        }\n        nodeEnd = delta + node.end;\n        if (nodeEnd >= intervalStart) {\n            // There is overlap\n            node.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\n            let include = true;\n            if (filterOwnerId && node.ownerId && node.ownerId !== filterOwnerId) {\n                include = false;\n            }\n            if (filterOutValidation && getNodeIsForValidation(node)) {\n                include = false;\n            }\n            if (include) {\n                result[resultLen++] = node;\n            }\n        }\n        setNodeIsVisited(node, true);\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\n            // go right\n            delta += node.delta;\n            node = node.right;\n            continue;\n        }\n    }\n    setNodeIsVisited(T.root, false);\n    return result;\n}\n//#endregion\n//#region Insertion\nfunction rbTreeInsert(T, newNode) {\n    if (T.root === SENTINEL) {\n        newNode.parent = SENTINEL;\n        newNode.left = SENTINEL;\n        newNode.right = SENTINEL;\n        setNodeColor(newNode, 0 /* Black */);\n        T.root = newNode;\n        return T.root;\n    }\n    treeInsert(T, newNode);\n    recomputeMaxEndWalkToRoot(newNode.parent);\n    // repair tree\n    let x = newNode;\n    while (x !== T.root && getNodeColor(x.parent) === 1 /* Red */) {\n        if (x.parent === x.parent.parent.left) {\n            const y = x.parent.parent.right;\n            if (getNodeColor(y) === 1 /* Red */) {\n                setNodeColor(x.parent, 0 /* Black */);\n                setNodeColor(y, 0 /* Black */);\n                setNodeColor(x.parent.parent, 1 /* Red */);\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.right) {\n                    x = x.parent;\n                    leftRotate(T, x);\n                }\n                setNodeColor(x.parent, 0 /* Black */);\n                setNodeColor(x.parent.parent, 1 /* Red */);\n                rightRotate(T, x.parent.parent);\n            }\n        }\n        else {\n            const y = x.parent.parent.left;\n            if (getNodeColor(y) === 1 /* Red */) {\n                setNodeColor(x.parent, 0 /* Black */);\n                setNodeColor(y, 0 /* Black */);\n                setNodeColor(x.parent.parent, 1 /* Red */);\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.left) {\n                    x = x.parent;\n                    rightRotate(T, x);\n                }\n                setNodeColor(x.parent, 0 /* Black */);\n                setNodeColor(x.parent.parent, 1 /* Red */);\n                leftRotate(T, x.parent.parent);\n            }\n        }\n    }\n    setNodeColor(T.root, 0 /* Black */);\n    return newNode;\n}\nfunction treeInsert(T, z) {\n    let delta = 0;\n    let x = T.root;\n    const zAbsoluteStart = z.start;\n    const zAbsoluteEnd = z.end;\n    while (true) {\n        const cmp = intervalCompare(zAbsoluteStart, zAbsoluteEnd, x.start + delta, x.end + delta);\n        if (cmp < 0) {\n            // this node should be inserted to the left\n            // => it is not affected by the node's delta\n            if (x.left === SENTINEL) {\n                z.start -= delta;\n                z.end -= delta;\n                z.maxEnd -= delta;\n                x.left = z;\n                break;\n            }\n            else {\n                x = x.left;\n            }\n        }\n        else {\n            // this node should be inserted to the right\n            // => it is not affected by the node's delta\n            if (x.right === SENTINEL) {\n                z.start -= (delta + x.delta);\n                z.end -= (delta + x.delta);\n                z.maxEnd -= (delta + x.delta);\n                x.right = z;\n                break;\n            }\n            else {\n                delta += x.delta;\n                x = x.right;\n            }\n        }\n    }\n    z.parent = x;\n    z.left = SENTINEL;\n    z.right = SENTINEL;\n    setNodeColor(z, 1 /* Red */);\n}\n//#endregion\n//#region Deletion\nfunction rbTreeDelete(T, z) {\n    let x;\n    let y;\n    // RB-DELETE except we don't swap z and y in case c)\n    // i.e. we always delete what's pointed at by z.\n    if (z.left === SENTINEL) {\n        x = z.right;\n        y = z;\n        // x's delta is no longer influenced by z's delta\n        x.delta += z.delta;\n        if (x.delta < -1073741824 /* MIN_SAFE_DELTA */ || x.delta > 1073741824 /* MAX_SAFE_DELTA */) {\n            T.requestNormalizeDelta = true;\n        }\n        x.start += z.delta;\n        x.end += z.delta;\n    }\n    else if (z.right === SENTINEL) {\n        x = z.left;\n        y = z;\n    }\n    else {\n        y = leftest(z.right);\n        x = y.right;\n        // y's delta is no longer influenced by z's delta,\n        // but we don't want to walk the entire right-hand-side subtree of x.\n        // we therefore maintain z's delta in y, and adjust only x\n        x.start += y.delta;\n        x.end += y.delta;\n        x.delta += y.delta;\n        if (x.delta < -1073741824 /* MIN_SAFE_DELTA */ || x.delta > 1073741824 /* MAX_SAFE_DELTA */) {\n            T.requestNormalizeDelta = true;\n        }\n        y.start += z.delta;\n        y.end += z.delta;\n        y.delta = z.delta;\n        if (y.delta < -1073741824 /* MIN_SAFE_DELTA */ || y.delta > 1073741824 /* MAX_SAFE_DELTA */) {\n            T.requestNormalizeDelta = true;\n        }\n    }\n    if (y === T.root) {\n        T.root = x;\n        setNodeColor(x, 0 /* Black */);\n        z.detach();\n        resetSentinel();\n        recomputeMaxEnd(x);\n        T.root.parent = SENTINEL;\n        return;\n    }\n    const yWasRed = (getNodeColor(y) === 1 /* Red */);\n    if (y === y.parent.left) {\n        y.parent.left = x;\n    }\n    else {\n        y.parent.right = x;\n    }\n    if (y === z) {\n        x.parent = y.parent;\n    }\n    else {\n        if (y.parent === z) {\n            x.parent = y;\n        }\n        else {\n            x.parent = y.parent;\n        }\n        y.left = z.left;\n        y.right = z.right;\n        y.parent = z.parent;\n        setNodeColor(y, getNodeColor(z));\n        if (z === T.root) {\n            T.root = y;\n        }\n        else {\n            if (z === z.parent.left) {\n                z.parent.left = y;\n            }\n            else {\n                z.parent.right = y;\n            }\n        }\n        if (y.left !== SENTINEL) {\n            y.left.parent = y;\n        }\n        if (y.right !== SENTINEL) {\n            y.right.parent = y;\n        }\n    }\n    z.detach();\n    if (yWasRed) {\n        recomputeMaxEndWalkToRoot(x.parent);\n        if (y !== z) {\n            recomputeMaxEndWalkToRoot(y);\n            recomputeMaxEndWalkToRoot(y.parent);\n        }\n        resetSentinel();\n        return;\n    }\n    recomputeMaxEndWalkToRoot(x);\n    recomputeMaxEndWalkToRoot(x.parent);\n    if (y !== z) {\n        recomputeMaxEndWalkToRoot(y);\n        recomputeMaxEndWalkToRoot(y.parent);\n    }\n    // RB-DELETE-FIXUP\n    let w;\n    while (x !== T.root && getNodeColor(x) === 0 /* Black */) {\n        if (x === x.parent.left) {\n            w = x.parent.right;\n            if (getNodeColor(w) === 1 /* Red */) {\n                setNodeColor(w, 0 /* Black */);\n                setNodeColor(x.parent, 1 /* Red */);\n                leftRotate(T, x.parent);\n                w = x.parent.right;\n            }\n            if (getNodeColor(w.left) === 0 /* Black */ && getNodeColor(w.right) === 0 /* Black */) {\n                setNodeColor(w, 1 /* Red */);\n                x = x.parent;\n            }\n            else {\n                if (getNodeColor(w.right) === 0 /* Black */) {\n                    setNodeColor(w.left, 0 /* Black */);\n                    setNodeColor(w, 1 /* Red */);\n                    rightRotate(T, w);\n                    w = x.parent.right;\n                }\n                setNodeColor(w, getNodeColor(x.parent));\n                setNodeColor(x.parent, 0 /* Black */);\n                setNodeColor(w.right, 0 /* Black */);\n                leftRotate(T, x.parent);\n                x = T.root;\n            }\n        }\n        else {\n            w = x.parent.left;\n            if (getNodeColor(w) === 1 /* Red */) {\n                setNodeColor(w, 0 /* Black */);\n                setNodeColor(x.parent, 1 /* Red */);\n                rightRotate(T, x.parent);\n                w = x.parent.left;\n            }\n            if (getNodeColor(w.left) === 0 /* Black */ && getNodeColor(w.right) === 0 /* Black */) {\n                setNodeColor(w, 1 /* Red */);\n                x = x.parent;\n            }\n            else {\n                if (getNodeColor(w.left) === 0 /* Black */) {\n                    setNodeColor(w.right, 0 /* Black */);\n                    setNodeColor(w, 1 /* Red */);\n                    leftRotate(T, w);\n                    w = x.parent.left;\n                }\n                setNodeColor(w, getNodeColor(x.parent));\n                setNodeColor(x.parent, 0 /* Black */);\n                setNodeColor(w.left, 0 /* Black */);\n                rightRotate(T, x.parent);\n                x = T.root;\n            }\n        }\n    }\n    setNodeColor(x, 0 /* Black */);\n    resetSentinel();\n}\nfunction leftest(node) {\n    while (node.left !== SENTINEL) {\n        node = node.left;\n    }\n    return node;\n}\nfunction resetSentinel() {\n    SENTINEL.parent = SENTINEL;\n    SENTINEL.delta = 0; // optional\n    SENTINEL.start = 0; // optional\n    SENTINEL.end = 0; // optional\n}\n//#endregion\n//#region Rotations\nfunction leftRotate(T, x) {\n    const y = x.right; // set y.\n    y.delta += x.delta; // y's delta is no longer influenced by x's delta\n    if (y.delta < -1073741824 /* MIN_SAFE_DELTA */ || y.delta > 1073741824 /* MAX_SAFE_DELTA */) {\n        T.requestNormalizeDelta = true;\n    }\n    y.start += x.delta;\n    y.end += x.delta;\n    x.right = y.left; // turn y's left subtree into x's right subtree.\n    if (y.left !== SENTINEL) {\n        y.left.parent = x;\n    }\n    y.parent = x.parent; // link x's parent to y.\n    if (x.parent === SENTINEL) {\n        T.root = y;\n    }\n    else if (x === x.parent.left) {\n        x.parent.left = y;\n    }\n    else {\n        x.parent.right = y;\n    }\n    y.left = x; // put x on y's left.\n    x.parent = y;\n    recomputeMaxEnd(x);\n    recomputeMaxEnd(y);\n}\nfunction rightRotate(T, y) {\n    const x = y.left;\n    y.delta -= x.delta;\n    if (y.delta < -1073741824 /* MIN_SAFE_DELTA */ || y.delta > 1073741824 /* MAX_SAFE_DELTA */) {\n        T.requestNormalizeDelta = true;\n    }\n    y.start -= x.delta;\n    y.end -= x.delta;\n    y.left = x.right;\n    if (x.right !== SENTINEL) {\n        x.right.parent = y;\n    }\n    x.parent = y.parent;\n    if (y.parent === SENTINEL) {\n        T.root = x;\n    }\n    else if (y === y.parent.right) {\n        y.parent.right = x;\n    }\n    else {\n        y.parent.left = x;\n    }\n    x.right = y;\n    y.parent = x;\n    recomputeMaxEnd(y);\n    recomputeMaxEnd(x);\n}\n//#endregion\n//#region max end computation\nfunction computeMaxEnd(node) {\n    let maxEnd = node.end;\n    if (node.left !== SENTINEL) {\n        const leftMaxEnd = node.left.maxEnd;\n        if (leftMaxEnd > maxEnd) {\n            maxEnd = leftMaxEnd;\n        }\n    }\n    if (node.right !== SENTINEL) {\n        const rightMaxEnd = node.right.maxEnd + node.delta;\n        if (rightMaxEnd > maxEnd) {\n            maxEnd = rightMaxEnd;\n        }\n    }\n    return maxEnd;\n}\nexport function recomputeMaxEnd(node) {\n    node.maxEnd = computeMaxEnd(node);\n}\nfunction recomputeMaxEndWalkToRoot(node) {\n    while (node !== SENTINEL) {\n        const maxEnd = computeMaxEnd(node);\n        if (node.maxEnd === maxEnd) {\n            // no need to go further\n            return;\n        }\n        node.maxEnd = maxEnd;\n        node = node.parent;\n    }\n}\n//#endregion\n//#region utils\nexport function intervalCompare(aStart, aEnd, bStart, bEnd) {\n    if (aStart === bStart) {\n        return aEnd - bEnd;\n    }\n    return aStart - bStart;\n}\n//#endregion\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertNever } from '../../base/common/types.js';\nimport { Position } from './core/position.js';\nimport { InjectedTextCursorStops } from './model.js';\n/**\n * *input*:\n * ```\n * xxxxxxxxxxxxxxxxxxxxxxxxxxx\n * ```\n *\n * -> Applying injections `[i...i]`, *inputWithInjections*:\n * ```\n * xxxxxx[iiiiiiiiii]xxxxxxxxxxxxxxxxx[ii]xxxx\n * ```\n *\n * -> breaking at offsets `|` in `xxxxxx[iiiiiii|iii]xxxxxxxxxxx|xxxxxx[ii]xxxx|`:\n * ```\n * xxxxxx[iiiiiii\n * iii]xxxxxxxxxxx\n * xxxxxx[ii]xxxx\n * ```\n *\n * -> applying wrappedTextIndentLength, *output*:\n * ```\n * xxxxxx[iiiiiii\n *    iii]xxxxxxxxxxx\n *    xxxxxx[ii]xxxx\n * ```\n */\nexport class ModelLineProjectionData {\n    constructor(injectionOffsets, \n    /**\n     * `injectionOptions.length` must equal `injectionOffsets.length`\n     */\n    injectionOptions, \n    /**\n     * Refers to offsets after applying injections to the source.\n     * The last break offset indicates the length of the source after applying injections.\n     */\n    breakOffsets, \n    /**\n     * Refers to offsets after applying injections\n     */\n    breakOffsetsVisibleColumn, wrappedTextIndentLength) {\n        this.injectionOffsets = injectionOffsets;\n        this.injectionOptions = injectionOptions;\n        this.breakOffsets = breakOffsets;\n        this.breakOffsetsVisibleColumn = breakOffsetsVisibleColumn;\n        this.wrappedTextIndentLength = wrappedTextIndentLength;\n    }\n    getOutputLineCount() {\n        return this.breakOffsets.length;\n    }\n    getMinOutputOffset(outputLineIndex) {\n        if (outputLineIndex > 0) {\n            return this.wrappedTextIndentLength;\n        }\n        return 0;\n    }\n    getLineLength(outputLineIndex) {\n        // These offsets refer to model text with injected text.\n        const startOffset = outputLineIndex > 0 ? this.breakOffsets[outputLineIndex - 1] : 0;\n        const endOffset = this.breakOffsets[outputLineIndex];\n        let lineLength = endOffset - startOffset;\n        if (outputLineIndex > 0) {\n            lineLength += this.wrappedTextIndentLength;\n        }\n        return lineLength;\n    }\n    getMaxOutputOffset(outputLineIndex) {\n        return this.getLineLength(outputLineIndex);\n    }\n    translateToInputOffset(outputLineIndex, outputOffset) {\n        if (outputLineIndex > 0) {\n            outputOffset = Math.max(0, outputOffset - this.wrappedTextIndentLength);\n        }\n        const offsetInInputWithInjection = outputLineIndex === 0 ? outputOffset : this.breakOffsets[outputLineIndex - 1] + outputOffset;\n        let offsetInInput = offsetInInputWithInjection;\n        if (this.injectionOffsets !== null) {\n            for (let i = 0; i < this.injectionOffsets.length; i++) {\n                if (offsetInInput > this.injectionOffsets[i]) {\n                    if (offsetInInput < this.injectionOffsets[i] + this.injectionOptions[i].content.length) {\n                        // `inputOffset` is within injected text\n                        offsetInInput = this.injectionOffsets[i];\n                    }\n                    else {\n                        offsetInInput -= this.injectionOptions[i].content.length;\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        return offsetInInput;\n    }\n    translateToOutputPosition(inputOffset, affinity = 2 /* None */) {\n        let inputOffsetInInputWithInjection = inputOffset;\n        if (this.injectionOffsets !== null) {\n            for (let i = 0; i < this.injectionOffsets.length; i++) {\n                if (inputOffset < this.injectionOffsets[i]) {\n                    break;\n                }\n                if (affinity !== 1 /* Right */ && inputOffset === this.injectionOffsets[i]) {\n                    break;\n                }\n                inputOffsetInInputWithInjection += this.injectionOptions[i].content.length;\n            }\n        }\n        return this.offsetInInputWithInjectionsToOutputPosition(inputOffsetInInputWithInjection, affinity);\n    }\n    offsetInInputWithInjectionsToOutputPosition(offsetInInputWithInjections, affinity = 2 /* None */) {\n        let low = 0;\n        let high = this.breakOffsets.length - 1;\n        let mid = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            const midStop = this.breakOffsets[mid];\n            midStart = mid > 0 ? this.breakOffsets[mid - 1] : 0;\n            if (affinity === 0 /* Left */) {\n                if (offsetInInputWithInjections <= midStart) {\n                    high = mid - 1;\n                }\n                else if (offsetInInputWithInjections > midStop) {\n                    low = mid + 1;\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                if (offsetInInputWithInjections < midStart) {\n                    high = mid - 1;\n                }\n                else if (offsetInInputWithInjections >= midStop) {\n                    low = mid + 1;\n                }\n                else {\n                    break;\n                }\n            }\n        }\n        let outputOffset = offsetInInputWithInjections - midStart;\n        if (mid > 0) {\n            outputOffset += this.wrappedTextIndentLength;\n        }\n        return new OutputPosition(mid, outputOffset);\n    }\n    normalizeOutputPosition(outputLineIndex, outputOffset, affinity) {\n        if (this.injectionOffsets !== null) {\n            const offsetInInputWithInjections = this.outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset);\n            const normalizedOffsetInUnwrappedLine = this.normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections, affinity);\n            if (normalizedOffsetInUnwrappedLine !== offsetInInputWithInjections) {\n                // injected text caused a change\n                return this.offsetInInputWithInjectionsToOutputPosition(normalizedOffsetInUnwrappedLine, affinity);\n            }\n        }\n        if (affinity === 0 /* Left */) {\n            if (outputLineIndex > 0 && outputOffset === this.getMinOutputOffset(outputLineIndex)) {\n                return new OutputPosition(outputLineIndex - 1, this.getMaxOutputOffset(outputLineIndex - 1));\n            }\n        }\n        else if (affinity === 1 /* Right */) {\n            const maxOutputLineIndex = this.getOutputLineCount() - 1;\n            if (outputLineIndex < maxOutputLineIndex && outputOffset === this.getMaxOutputOffset(outputLineIndex)) {\n                return new OutputPosition(outputLineIndex + 1, this.getMinOutputOffset(outputLineIndex + 1));\n            }\n        }\n        return new OutputPosition(outputLineIndex, outputOffset);\n    }\n    outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset) {\n        if (outputLineIndex > 0) {\n            outputOffset = Math.max(0, outputOffset - this.wrappedTextIndentLength);\n        }\n        const result = (outputLineIndex > 0 ? this.breakOffsets[outputLineIndex - 1] : 0) + outputOffset;\n        return result;\n    }\n    normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections, affinity) {\n        const injectedText = this.getInjectedTextAtOffset(offsetInInputWithInjections);\n        if (!injectedText) {\n            return offsetInInputWithInjections;\n        }\n        if (affinity === 2 /* None */) {\n            if (offsetInInputWithInjections === injectedText.offsetInInputWithInjections + injectedText.length\n                && hasRightCursorStop(this.injectionOptions[injectedText.injectedTextIndex].cursorStops)) {\n                return injectedText.offsetInInputWithInjections + injectedText.length;\n            }\n            else {\n                let result = injectedText.offsetInInputWithInjections;\n                if (hasLeftCursorStop(this.injectionOptions[injectedText.injectedTextIndex].cursorStops)) {\n                    return result;\n                }\n                let index = injectedText.injectedTextIndex - 1;\n                while (index >= 0 && this.injectionOffsets[index] === this.injectionOffsets[injectedText.injectedTextIndex]) {\n                    if (hasRightCursorStop(this.injectionOptions[index].cursorStops)) {\n                        break;\n                    }\n                    result -= this.injectionOptions[index].content.length;\n                    if (hasLeftCursorStop(this.injectionOptions[index].cursorStops)) {\n                        break;\n                    }\n                    index--;\n                }\n                return result;\n            }\n        }\n        else if (affinity === 1 /* Right */) {\n            let result = injectedText.offsetInInputWithInjections + injectedText.length;\n            let index = injectedText.injectedTextIndex;\n            // traverse all injected text that touch each other\n            while (index + 1 < this.injectionOffsets.length && this.injectionOffsets[index + 1] === this.injectionOffsets[index]) {\n                result += this.injectionOptions[index + 1].content.length;\n                index++;\n            }\n            return result;\n        }\n        else if (affinity === 0 /* Left */) {\n            // affinity is left\n            let result = injectedText.offsetInInputWithInjections;\n            let index = injectedText.injectedTextIndex;\n            // traverse all injected text that touch each other\n            while (index - 1 >= 0 && this.injectionOffsets[index - 1] === this.injectionOffsets[index]) {\n                result -= this.injectionOptions[index - 1].content.length;\n                index--;\n            }\n            return result;\n        }\n        assertNever(affinity);\n    }\n    getInjectedText(outputLineIndex, outputOffset) {\n        const offset = this.outputPositionToOffsetInInputWithInjections(outputLineIndex, outputOffset);\n        const injectedText = this.getInjectedTextAtOffset(offset);\n        if (!injectedText) {\n            return null;\n        }\n        return {\n            options: this.injectionOptions[injectedText.injectedTextIndex]\n        };\n    }\n    getInjectedTextAtOffset(offsetInInputWithInjections) {\n        const injectionOffsets = this.injectionOffsets;\n        const injectionOptions = this.injectionOptions;\n        if (injectionOffsets !== null) {\n            let totalInjectedTextLengthBefore = 0;\n            for (let i = 0; i < injectionOffsets.length; i++) {\n                const length = injectionOptions[i].content.length;\n                const injectedTextStartOffsetInInputWithInjections = injectionOffsets[i] + totalInjectedTextLengthBefore;\n                const injectedTextEndOffsetInInputWithInjections = injectionOffsets[i] + totalInjectedTextLengthBefore + length;\n                if (injectedTextStartOffsetInInputWithInjections > offsetInInputWithInjections) {\n                    // Injected text starts later.\n                    break; // All later injected texts have an even larger offset.\n                }\n                if (offsetInInputWithInjections <= injectedTextEndOffsetInInputWithInjections) {\n                    // Injected text ends after or with the given position (but also starts with or before it).\n                    return {\n                        injectedTextIndex: i,\n                        offsetInInputWithInjections: injectedTextStartOffsetInInputWithInjections,\n                        length\n                    };\n                }\n                totalInjectedTextLengthBefore += length;\n            }\n        }\n        return undefined;\n    }\n}\nfunction hasRightCursorStop(cursorStop) {\n    if (cursorStop === null || cursorStop === undefined) {\n        return true;\n    }\n    return cursorStop === InjectedTextCursorStops.Right || cursorStop === InjectedTextCursorStops.Both;\n}\nfunction hasLeftCursorStop(cursorStop) {\n    if (cursorStop === null || cursorStop === undefined) {\n        return true;\n    }\n    return cursorStop === InjectedTextCursorStops.Left || cursorStop === InjectedTextCursorStops.Both;\n}\nexport class InjectedText {\n    constructor(options) {\n        this.options = options;\n    }\n}\nexport class OutputPosition {\n    constructor(outputLineIndex, outputOffset) {\n        this.outputLineIndex = outputLineIndex;\n        this.outputOffset = outputOffset;\n    }\n    toString() {\n        return `${this.outputLineIndex}:${this.outputOffset}`;\n    }\n    toPosition(baseLineNumber) {\n        return new Position(baseLineNumber + this.outputLineIndex, this.outputOffset + 1);\n    }\n}\n"],"names":["score","selector","candidateUri","candidateLanguage","candidateIsSynchronized","candidateNotebookType","Array","isArray","ret","value","language","pattern","scheme","hasAccessToAllModels","notebookType","Math","max","normalizedPattern","Object","assign","base","normalize","fsPath","matchGlobPattern","isExclusive","every","exclusive","LanguageFeatureRegistry","_notebookTypeResolver","this","_clock","_entries","_onDidChange","Emitter","onDidChange","event","provider","entry","_score","_time","push","_lastCandidate","undefined","fire","length","toDisposable","idx","indexOf","splice","model","all","_updateScores","result","_orderedForEach","lastBucket","lastBucketScore","callback","_a","call","uri","candidate","toString","getLanguageId","shouldSynchronizeModel","sort","_compareByScoreAndTime","a","b","CompletionItemKinds","InlineCompletionTriggerKind","SignatureHelpTriggerKind","DocumentHighlightKind","SymbolKinds","TokenMetadata","metadata","className","getForeground","fontStyle","getFontStyle","colorMap","foreground","textDecoration","italic","Boolean","bold","underline","strikethrough","Token","offset","type","_tokenBrand","TokenizationResult","tokens","endState","_tokenizationResultBrand","EncodedTokenizationResult","_encodedTokenizationResultBrand","isLocationLink","thing","URI","Range","range","originSelectionRange","targetSelectionRange","byKind","Map","set","Codicon","toIcon","kind","codicon","get","console","info","data","fromString","strict","res","icon","Command","InlayHintKind","FoldingRangeKind","Comment","Imports","Region","is","obj","id","title","TokenizationRegistry","TokenizationRegistryImpl","ILanguageService","createDecorator","IndentAction","StandardAutoClosingPairConditional","source","_neutralCharacter","_neutralCharacterSearched","open","close","_inString","_inComment","_inRegEx","notIn","i","len","standardToken","context","column","getTokenCount","tokenIndex","findTokenIndexAtOffset","standardTokenType","getStandardTokenType","isOK","fromCharCode","toCharCode","charCode","character","String","includes","_findNeutralCharacterInRange","AutoClosingPairs","autoClosingPairs","autoClosingPairsOpenByStart","autoClosingPairsOpenByEnd","autoClosingPairsCloseByStart","autoClosingPairsCloseByEnd","autoClosingPairsCloseSingleChar","pair","appendEntry","charAt","target","key","has","CharacterPairSupport","config","_autoClosingPairs","map","el","brackets","colorizedBracketPairs","_colorizedBracketPairs","filterValidBrackets","filter","p","__electricCharacterSupport","docComment","_autoCloseBefore","autoCloseBefore","DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED","_surroundingPairs","surroundingPairs","bracketPairs","BracketElectricCharacterSupport","richEditBrackets","_richEditBrackets","bracket","lastChar","distinct","ignoreBracketsInToken","reversedBracketRegex","reversedRegex","text","getLineContent","substring","r","BracketsUtils","bracketText","startColumn","endColumn","toLowerCase","textIsOpenBracket","textBeforeBracket","getActualLineContentBefore","test","matchOpenBracket","resetGlobalRegex","reg","global","lastIndex","IndentRulesSupport","indentationRules","_indentationRules","increaseIndentPattern","decreaseIndentPattern","indentNextLinePattern","unIndentedLinePattern","shouldIncrease","shouldDecrease","shouldIndentNextLine","shouldIgnore","OnEnterSupport","opts","_brackets","forEach","openRegExp","_createOpenBracketRegExp","closeRegExp","_createCloseBracketRegExp","_regExpRules","onEnterRules","autoIndent","previousLineText","beforeEnterText","afterEnterText","rule","beforeText","afterText","action","indentAction","str","strings","_safeRegExp","def","RegExp","err","onUnexpectedError","__decorate","decorators","desc","d","c","arguments","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","LanguageConfigurationServiceChangeEvent","languageId","ILanguageConfigurationService","LanguageConfigurationService","configurationService","languageService","onDidChangeEmitter","_register","configurations","languageConfigKeys","Set","values","customizedLanguageConfigKeys","onDidChangeConfiguration","e","globalConfigChanged","change","keys","some","k","localConfigChanged","overrides","clear","isRegisteredLanguageId","delete","LanguageConfigurationRegistry","languageConfig","getLanguageConfiguration","Error","ResolvedLanguageConfiguration","customizedConfig","getValue","overrideIdentifier","validateBracketPairs","getCustomizedLanguageConfig","combineLanguageConfigurations","underlyingConfig","computeConfig","Disposable","IConfigurationService","LanguageConfigurationChangeEvent","LanguageConfigurationRegistryImpl","configuration","priority","entries","ComposedLanguageConfiguration","disposable","register","dispose","getResolvedConfiguration","comments","indentRulesSupport","lineNumber","getLanguageIdAtPosition","lastLineNumber","resultLineNumber","honorIntentialIndent","getIndentRulesSupport","indentation","precedingUnIgnoredLine","getPrecedingValidLine","precedingUnIgnoredLineContent","line","previousLine","previousLineIndentMetadata","getIndentMetadata","stopLine","lineContent","j","virtualModel","indentConverter","richEditSupport","indent","getInheritIndentForLine","inheritLine","enterResult","onEnter","removeText","shiftIndent","unshiftIndent","appendText","forceTokenization","startLineNumber","lineTokens","getLineTokens","scopedLineTokens","createScopedLineTokens","scopedLineText","embeddedLanguage","firstCharOffset","substr","isEmpty","getScopedLineTokens","endLineNumber","beforeEnterResult","beforeEnterIndent","currentLineIndent","afterEnterAction","beforeEnter","afterEnter","afterEnterIndent","ch","afterTypeText","beforeTypeText","getLineCount","oneLineAboveScopedLineTokens","getIndentationAtPosition","lineText","columnNumber","getLineMaxColumn","_resolved","_order","LanguageConfigurationContribution","_resolve","cmp","configs","wordPattern","folding","order","_electricCharacter","_onEnterSupport","_handleComments","characterPair","wordDefinition","DEFAULT_WORD_REGEXP","foldingRules","ensureValidWordDefinition","RichEditBrackets","getAutoClosingPairs","getAutoCloseBeforeSet","getSurroundingPairs","conf","commentRule","lineComment","lineCommentToken","blockComment","blockStart","blockEnd","blockCommentStartToken","blockCommentEndToken","registerSingleton","Uint8Matrix","rows","cols","defaultValue","Uint8Array","_data","row","col","StateMachine","edges","maxCharCode","maxState","from","chCode","to","states","_states","_maxCharCode","currentState","_stateMachine","getStateMachine","_classifier","getClassifier","CharacterClassifier","FORCE_TERMINATION_CHARACTERS","charCodeAt","LinkComputer","classifier","linkBeginIndex","linkEndIndex","lastIncludedCharIndex","charCodeBeforeLink","lastCharCodeInLink","url","stateMachine","lineCount","linkBeginChCode","state","hasOpenParens","hasOpenSquareBracket","inSquareBrackets","hasOpenCurlyBracket","resetStateMachine","chClass","_createLink","nextState","computeLinks","ModesRegistry","_onDidChangeLanguages","onDidChangeLanguages","_languages","Registry","PLAINTEXT_LANGUAGE_ID","registerLanguage","extensions","aliases","nls","mimetypes","Mimes","offSide","ConfigurationExtensions","registerDefaultConfigurations","NullState","other","nullTokenize","nullTokenizeEncoded","Uint32Array","tokenCount","getCount","desiredLanguageId","lastTokenIndex","firstTokenIndex","ScopedLineTokens","getStartOffset","getEndOffset","actual","lastCharOffset","_scopedLineTokensBrand","_actual","_firstTokenIndex","_lastTokenIndex","_lastCharOffset","BasicInplaceReplace","_defaultValueSet","range1","text1","range2","text2","up","doNavigateValueSet","numberResult","numberReplace","textReplace","precision","pow","lastIndexOf","n1","Number","n2","parseFloat","isNaN","floor","valueSetsReplace","valueSets","valueSetReplace","valueSet","INSTANCE","RichEditBracket","index","forwardRegex","_richEditBracketBrand","_openSet","_toSet","_closeSet","arr","element","add","_richEditBracketsBrand","N","group","areOverlapping","aOpen","aClose","bOpen","bClose","mergeGroups","g1","g2","newG","min","oldG","g","currentOpen","currentClose","groupFuzzyBrackets","currentIndex","pieces","concat","collectSuperstrings","unique","lengthcmp","reverse","createBracketOrRegExp","getRegexForBracketPair","toReversedString","getReversedRegexForBracketPair","getRegexForBrackets","getReversedRegexForBrackets","textIsBracket","maxBracketLength","dest","seen","prepareBracketForRegExp","insertWordBoundaries","regexStr","join","lastInput","lastOutput","stringBuilder","Uint16Array","decode","resultLen","reversedText","m","match","matchOffset","matchLength","absoluteMatchOffset","startOffset","endOffset","reversedSubstr","_findPrevBracketInText","bracketRegex","findNextBracketInText","ParsedTokenThemeRule","token","background","_parsedThemeRuleBrand","resolveParsedTokenThemeRules","parsedThemeRules","customTokenColors","strcmp","defaultFontStyle","defaultForeground","defaultBackground","incomingDefaults","shift","ColorMap","color","getId","foregroundColorId","backgroundColorId","defaults","ThemeTrieElementRule","root","ThemeTrieElement","insert","TokenTheme","colorRegExp","_lastColorId","_id2color","_color2id","toUpperCase","Color","slice","_colorMap","_root","_cache","getColorMap","_match","tokenType","STANDARD_TOKEN_TYPE_REGEXP","toStandardTokenType","createFromParsedTokenTheme","segments","split","lenJ","parseTokenTheme","_themeTrieElementRuleBrand","_fontStyle","_foreground","_background","mainRule","_themeTrieElementBrand","_mainRule","_children","head","tail","dotIndex","child","clone","acceptOverwrite","generateTokensCSSForColorMap","rules","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","done","then","apply","fallback","getInitialState","tokenizeEncoded","buffer","hasEOL","tokenizeToString","_tokenizeToString","languageIdCodec","tokenizationSupport","tokenizeLineToHTML","viewLineTokens","tabSize","useNbsp","charIndex","tabsCharDelta","prevIsSpace","tokenEndIndex","partContent","insertSpacesCount","getInlineStyle","lines","tokenizationResult","LineTokens","inflate","getClassName","endIndex","OverviewRulerLane","MinimapPosition","InjectedTextCursorStops","TextModelResolvedOptions","src","_textModelResolvedOptionsBrand","indentSize","insertSpaces","defaultEOL","trimAutoWhitespace","bracketPairColorizationOptions","equals","newOpts","FindMatch","matches","_findMatchBrand","ValidAnnotatedEditOperation","identifier","forceMoveMarkers","isAutoWhitespaceEdit","_isTracked","SearchData","regex","wordSeparators","simpleSearch","ApplyEditsResult","reverseEdits","changes","trimAutoWhitespaceLineNumbers","isTooLargeForSyncing","isForSimpleWidget","BracketPairsTree","textModel","didChangeEmitter","denseKeyProvider","DenseKeyProvider","LanguageAgnosticBracketTokens","backgroundTokenizationState","getSingleLanguageBracketTokens","tokenizer","FastTokenizer","initialAstWithoutTokens","parseDocument","astWithTokens","parseDocumentFromTextBuffer","didLanguageChange","wasUndefined","edits","ranges","TextEditInfo","toLength","fromLineNumber","toLineNumber","positionToLength","getStartPosition","getEndPosition","lengthOfString","previousAst","immutable","previousAstClone","TextBufferTokenizer","node","collectBrackets","lengthZero","includeMinIndentation","startLength","endLength","CollectBracketPairsContext","collectBracketPairs","nodeOffsetStart","nodeOffsetEnd","level","children","lengthAdd","lengthLessThanEqual","lengthGreaterThanEqual","openingBracket","lengthsToRange","BracketInfo","closingBracket","nodeOffset","openingBracketEnd","minIndentation","computeMinIndentation","BracketPairWithMinIndentationInfo","curOffset","childOffset","BracketPairsTextModelPart","languageConfigurationService","bracketPairsTree","MutableDisposable","bracketsRequested","object","updateBracketPairsTree","getValueLength","handleContentChanged","handleDidChangeBackgroundTokenizationState","handleDidChangeTokens","isDocumentSupported","store","DisposableStore","getBracketPairsInRange","getBracketsInRange","_bracket","_position","maxDuration","position","validatePosition","bracketsSupport","stripBracketSearchCanceled","_findMatchingBracketUp","createTimeBasedContinueBracketSearchPredicate","continueSearchPredicate","_matchBracket","modeBrackets","currentLanguageId","searchStartOffset","tokenEndOffset","searchEndOffset","tokenStartOffset","currentModeBrackets","_establishBracketSearchOffsets","bestResult","foundBracket","foundBracketText","_matchFoundBracket","BracketSearchCanceled","prevTokenIndex","prevModeBrackets","isOpen","matched","_findMatchingBracketDown","count","totalCallCount","searchPrevMatchingBracketInRange","hitText","isClose","prevSearchInToken","searchInToken","searchNextMatchingBracketInRange","tokenLanguageId","_toFoundBracket","savedCounts","counts","resetCounts","tmp","searchInRange","getValueInRange","startTime","Date","now","_searchCanceledBrand","BaseAstNode","_length","PairAstNode","missingOpeningBracketIds","openBracketIds","intersects","deepClone","MAX_SAFE_INTEGER","SmallImmutableSet","ListAstNode","listHeight","_missingOpeningBracketIds","cachedMinIndentation","throwIfImmutable","childCount","childrenLength","lastChild","getChild","mutable","toMutable","setChild","firstChild","lastLength","canBeReused","unopenedBrackets","merge","item1","item2","item3","missingBracketIds","Immutable23ListAstNode","TwoThreeListAstNode","ImmutableArrayListAstNode","_item1","_item2","_item3","handleChildrenChanged","ArrayListAstNode","item","pop","unshift","emptyArray","ImmutableLeafAstNode","TextAstNode","_openedBracketIds","start","lengthToObj","columnCount","lengthGetLineCount","firstNonWsColumn","getLineFirstNonWhitespaceColumn","visibleColumn","CursorColumns","getOptions","BracketAstNode","bracketIds","InvalidBracketAstNode","closingBrackets","openedBracketIds","newLength","BeforeEditPositionMapper","documentLength","nextEditIdx","deltaOldToNewLineCount","deltaOldToNewColumnCount","deltaLineIdxInOld","edit","TextEditInfoCache","adjustNextEdit","translateCurToOld","nextEdit","nextChangeOffset","translateOldToCur","offsetObj","lengthDiffNonNegative","oldOffsetObj","newOffset","nextEditEndOffsetInCur","endOffsetAfterObj","nextEditEndOffsetInCurObj","nextEditEndOffsetBeforeInCurObj","endOffsetBeforeObj","lineDelta","previousColumnDelta","columnDelta","textLength","BracketTokens","hasRegExp","_regExpGlobal","escaped","escapeRegExpCharacters","regExpStr","getRegExpStr","openingBracketIds","closingText","size","openingText","getKey","getColorizedBrackets","openingBrackets","openingTextId","first","identityKeyProvider","languageIdToBracketTokens","existing","newRegExpStr","createFromLanguage","singleLanguageBracketTokens","LengthObj","lengthDiff","startLineCount","startColumnCount","endLineCount","endColumnCount","zero","lengthIsZero","factor","l","lengthGetColumnCountIfZeroLineCount","l1","l2","length1","length2","lineCount1","lineCount2","colCount2","lengthLessThan","lengthStart","lengthEnd","colCount","splitLines","concat23TreesOfSameHeight","items","createImmutableLists","heightDiff","node1","node2","abs","list","nodeToAppend","nodeToAppendOfCorrectHeight","curNode","parents","makeLastElementMutable","parent","unappendChild","appendChildOfSameHeight","append","makeFirstElementMutable","nodeToPrependOfCorrectHeight","unprependChild","prependChildOfSameHeight","prepend","NodeReader","lastOffset","nextNodes","offsets","idxs","predicate","lastOrUndefined","curNodeOffset","nextNodeAfterCurrent","nextChildIdx","getNextChildIdx","currentOffset","currentNode","curIdx","oldNode","Parser","_itemsConstructed","_itemsFromCache","oldNodeReader","positionMapper","parseList","peek","parseChild","readNode","height","second","concat23Trees","maxCacheableLength","getDistanceToNextChange","cachedNode","readLongestNodeAt","getOffsetBeforeChange","skip","read","astNode","nextToken","bracketId","emptyArr","additionalItems","keyProvider","newItem","create","newItems","merged","cached","cache","empty","bracketTokens","reader","NonPeekableTextBufferTokenizer","_offset","didPeek","peeked","textBufferLineCount","textBufferLastLineLength","getLineLength","setPosition","lineIdx","lineCharOffset","lineTokenOffset","peekedToken","startLineIdx","startLineCharOffset","lengthHeuristic","peekedBracketToken","tokenMetadata","getMetadata","isOther","regexp","regExpGlobal","exec","getToken","curLineCount","lastLineBreakOffset","lastTokenEndOffset","lastTokenEndLine","smallTextTokens0Line","smallTextTokens1Line","NotSupportedError","ColorizedBracketPairsDecorationProvider","colorProvider","ColorProvider","colorizationOptions","ownerId","filterOutValidation","enabled","bracketsInRange","nestingLevel","options","description","inlineClassName","getInlineClassName","getDecorationsInRange","unexpectedClosingBracketClassName","isInvalid","getInlineClassNameOfLevel","registerThemingParticipant","theme","collector","colors","editorBracketHighlightingForeground1","editorBracketHighlightingForeground2","editorBracketHighlightingForeground3","editorBracketHighlightingForeground4","editorBracketHighlightingForeground5","editorBracketHighlightingForeground6","addRule","getColor","editorBracketHighlightingUnexpectedBracketForeground","colorValues","isTransparent","fixBracketsInLine","StaticTokenizerSource","processNode","closingTokenText","findClosingTokenText","uriGetComparisonKey","resource","SingleModelEditStackData","beforeVersionId","afterVersionId","beforeEOL","afterEOL","beforeCursorState","afterCursorState","textChanges","compressConsecutiveTextChanges","necessarySize","_writeSelectionsSize","writeSize","_writeSelections","write","alternativeVersionId","getAlternativeVersionId","eol","getModelEOL","selections","selection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","Selection","_readSelections","changeCount","TextChange","SingleModelEditStackElement","deserialize","serialize","_applyUndo","_applyRedo","byteLength","MultiModelEditStackElement","label","editStackElements","_isOpen","_editStackElementsArr","_editStackElementsMap","editStackElement","_delegate","prepareUndoRedo","setModel","canAppend","undo","redo","heapSize","basename","getEOL","isEditStackElement","EditStack","undoRedoService","_model","_undoRedoService","lastElement","getLastElement","removeElements","newElement","pushElement","_getOrCreateEditStackElement","setEOL","editOperations","cursorStateComputer","inverseEditOperations","applyEdits","_computeCursorState","op","textChange","oldPosition","GuidesTextModelPart","lineIndex","computeIndentLevel","minLineNumber","maxLineNumber","assertNotDisposed","up_aboveContentLineIndex","up_aboveContentLineIndent","up_belowContentLineIndex","up_belowContentLineIndent","up_resolveIndents","_computeIndentLevel","down_aboveContentLineIndex","down_aboveContentLineIndent","down_belowContentLineIndex","down_belowContentLineIndent","down_resolveIndents","goUp","goDown","initialIndent","distance","upLineNumber","downLineNumber","upLineIndentLevel","currentIndent","ceil","_getIndentLevelForWhitespaceLine","downLineIndentLevel","activePosition","_b","_c","_d","_e","getBracketPairsInRangeWithMinIndentation","activeBracketPairRange","bracketsContainingActivePosition","bp","findLast","queue","ArrayQueue","activeGuides","nextGuides","BracketPairGuidesClassNames","guides","takeWhile","openingBracketRange","guideVisibleColumn","getVisibleColumnFromPosition","closingBracketRange","minVisibleColumnIndentation","renderHorizontalEndLineAtTheBottom","end","visibleStartColumn","visibleEndColumn","bracketPair","isActive","equalsRange","highlightActive","activeClassName","horizontalGuides","HorizontalGuidesState","includeInactive","IndentGuide","IndentGuideHorizontalLine","lastVisibleColumnCount","aboveContentLineIndex","aboveContentLineIndent","belowContentLineIndex","belowContentLineIndent","resultIndex","TextModelPart","SpacesDiffResult","spacesDiff","looksLikeAlignment","aLength","bLength","aSpacesCnt","aTabsCount","bSpacesCnt","bTabsCount","tabsDiff","guessIndentation","defaultTabSize","defaultInsertSpaces","linesCount","linesIndentedWithTabsCount","linesIndentedWithSpacesCount","previousLineIndentation","spacesDiffCount","currentLineLength","currentLineText","useCurrentLineText","currentLineHasContent","currentLineIndentation","currentLineSpacesCount","currentLineTabsCount","getLineCharCode","currentSpacesDiff","tabSizeScore","possibleTabSize","possibleTabSizeScore","getNodeColor","setNodeColor","getNodeIsVisited","setNodeIsVisited","getNodeIsForValidation","setNodeIsForValidation","_setNodeStickiness","stickiness","setCollapseOnReplaceEdit","IntervalNode","left","right","delta","maxEnd","cachedVersionId","cachedAbsoluteStart","cachedAbsoluteEnd","versionId","collapseOnReplaceEdit","absoluteStart","absoluteEnd","SENTINEL","IntervalTree","requestNormalizeDelta","filterOwnerId","T","intervalStart","intervalEnd","nodeStart","nodeEnd","setCachedOffsets","include","intervalSearch","search","collectNodesFromOwner","collectNodesPostOrder","rbTreeInsert","_normalizeDeltaIfNecessary","rbTreeDelete","initialNode","nodesOfInterest","searchForEditing","editDelta","recomputeMaxEnd","noOverlapReplace","nodeAcceptEdit","normalizeDelta","adjustMarkerBeforeColumn","markerOffset","markerStickToPreviousCharacter","checkOffset","moveSemantics","nodeStickiness","getNodeStickiness","startStickToPreviousCharacter","endStickToPreviousCharacter","deletingCnt","insertingCnt","commonLength","startDone","endDone","getCollapseOnReplaceEdit","deltaColumn","newNode","z","x","zAbsoluteStart","zAbsoluteEnd","intervalCompare","treeInsert","recomputeMaxEndWalkToRoot","y","leftRotate","rightRotate","leftest","detach","resetSentinel","w","yWasRed","computeMaxEnd","leftMaxEnd","rightMaxEnd","aStart","aEnd","bStart","bEnd","ModelLineProjectionData","injectionOffsets","injectionOptions","breakOffsets","breakOffsetsVisibleColumn","wrappedTextIndentLength","outputLineIndex","lineLength","outputOffset","offsetInInput","content","inputOffset","affinity","inputOffsetInInputWithInjection","offsetInInputWithInjectionsToOutputPosition","offsetInInputWithInjections","low","high","mid","midStart","midStop","OutputPosition","outputPositionToOffsetInInputWithInjections","normalizedOffsetInUnwrappedLine","normalizeOffsetInInputWithInjectionsAroundInjections","getMinOutputOffset","getMaxOutputOffset","getOutputLineCount","injectedText","getInjectedTextAtOffset","hasRightCursorStop","injectedTextIndex","cursorStops","hasLeftCursorStop","assertNever","totalInjectedTextLengthBefore","injectedTextStartOffsetInInputWithInjections","injectedTextEndOffsetInInputWithInjections","cursorStop","baseLineNumber","Position"],"sourceRoot":""}