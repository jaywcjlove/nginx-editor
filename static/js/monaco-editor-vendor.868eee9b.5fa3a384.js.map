{"version":3,"file":"static/js/monaco-editor-vendor.868eee9b.5fa3a384.js","mappings":"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","sources":["../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/textModelBracketPairs.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/textModelEvents.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/textModelGuides.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousMultilineTokens.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousMultilineTokensBuilder.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousTokensEditing.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousTokensStore.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/tokens/lineTokens.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/tokens/sparseMultilineTokens.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/tokens/sparseTokensStore.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewEventHandler.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewEvents.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/lineDecorations.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linePart.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLineRenderer.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLinesViewportData.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewModel.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewModel/minimapTokensColorTracker.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewModel/monospaceLineBreaksComputer.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewModel/overviewZoneManager.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewContext.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelDecorations.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linesLayout.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLayout.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewModel/modelLineProjection.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelLines.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/viewModelEventDispatcher.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class BracketInfo {\n    constructor(range, \n    /** 0-based level */\n    nestingLevel, nestingLevelOfEqualBracketType, isInvalid) {\n        this.range = range;\n        this.nestingLevel = nestingLevel;\n        this.nestingLevelOfEqualBracketType = nestingLevelOfEqualBracketType;\n        this.isInvalid = isInvalid;\n    }\n}\nexport class BracketPairInfo {\n    constructor(range, openingBracketRange, closingBracketRange, \n    /** 0-based */\n    nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode) {\n        this.range = range;\n        this.openingBracketRange = openingBracketRange;\n        this.closingBracketRange = closingBracketRange;\n        this.nestingLevel = nestingLevel;\n        this.nestingLevelOfEqualBracketType = nestingLevelOfEqualBracketType;\n        this.bracketPairNode = bracketPairNode;\n    }\n    get openingBracketInfo() {\n        return this.bracketPairNode.openingBracket.bracketInfo;\n    }\n}\nexport class BracketPairWithMinIndentationInfo extends BracketPairInfo {\n    constructor(range, openingBracketRange, closingBracketRange, \n    /**\n     * 0-based\n    */\n    nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode, \n    /**\n     * -1 if not requested, otherwise the size of the minimum indentation in the bracket pair in terms of visible columns.\n    */\n    minVisibleColumnIndentation) {\n        super(range, openingBracketRange, closingBracketRange, nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode);\n        this.minVisibleColumnIndentation = minVisibleColumnIndentation;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n    constructor() {\n        this.changeType = 1 /* RawContentChangedType.Flush */;\n    }\n}\n/**\n * Represents text injected on a line\n * @internal\n */\nexport class LineInjectedText {\n    static applyInjectedText(lineText, injectedTexts) {\n        if (!injectedTexts || injectedTexts.length === 0) {\n            return lineText;\n        }\n        let result = '';\n        let lastOriginalOffset = 0;\n        for (const injectedText of injectedTexts) {\n            result += lineText.substring(lastOriginalOffset, injectedText.column - 1);\n            lastOriginalOffset = injectedText.column - 1;\n            result += injectedText.options.content;\n        }\n        result += lineText.substring(lastOriginalOffset);\n        return result;\n    }\n    static fromDecorations(decorations) {\n        const result = [];\n        for (const decoration of decorations) {\n            if (decoration.options.before && decoration.options.before.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.startLineNumber, decoration.range.startColumn, decoration.options.before, 0));\n            }\n            if (decoration.options.after && decoration.options.after.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.endLineNumber, decoration.range.endColumn, decoration.options.after, 1));\n            }\n        }\n        result.sort((a, b) => {\n            if (a.lineNumber === b.lineNumber) {\n                if (a.column === b.column) {\n                    return a.order - b.order;\n                }\n                return a.column - b.column;\n            }\n            return a.lineNumber - b.lineNumber;\n        });\n        return result;\n    }\n    constructor(ownerId, lineNumber, column, options, order) {\n        this.ownerId = ownerId;\n        this.lineNumber = lineNumber;\n        this.column = column;\n        this.options = options;\n        this.order = order;\n    }\n}\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nexport class ModelRawLineChanged {\n    constructor(lineNumber, detail, injectedText) {\n        this.changeType = 2 /* RawContentChangedType.LineChanged */;\n        this.lineNumber = lineNumber;\n        this.detail = detail;\n        this.injectedText = injectedText;\n    }\n}\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nexport class ModelRawLinesDeleted {\n    constructor(fromLineNumber, toLineNumber) {\n        this.changeType = 3 /* RawContentChangedType.LinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nexport class ModelRawLinesInserted {\n    constructor(fromLineNumber, toLineNumber, detail, injectedTexts) {\n        this.changeType = 4 /* RawContentChangedType.LinesInserted */;\n        this.injectedTexts = injectedTexts;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n        this.detail = detail;\n    }\n}\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nexport class ModelRawEOLChanged {\n    constructor() {\n        this.changeType = 5 /* RawContentChangedType.EOLChanged */;\n    }\n}\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nexport class ModelRawContentChangedEvent {\n    constructor(changes, versionId, isUndoing, isRedoing) {\n        this.changes = changes;\n        this.versionId = versionId;\n        this.isUndoing = isUndoing;\n        this.isRedoing = isRedoing;\n        this.resultingSelection = null;\n    }\n    containsEvent(type) {\n        for (let i = 0, len = this.changes.length; i < len; i++) {\n            const change = this.changes[i];\n            if (change.changeType === type) {\n                return true;\n            }\n        }\n        return false;\n    }\n    static merge(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        return new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n    }\n}\n/**\n * An event describing a change in injected text.\n * @internal\n */\nexport class ModelInjectedTextChangedEvent {\n    constructor(changes) {\n        this.changes = changes;\n    }\n}\n/**\n * @internal\n */\nexport class InternalModelContentChangeEvent {\n    constructor(rawContentChangedEvent, contentChangedEvent) {\n        this.rawContentChangedEvent = rawContentChangedEvent;\n        this.contentChangedEvent = contentChangedEvent;\n    }\n    merge(other) {\n        const rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n        const contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n        return new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n    }\n    static _mergeChangeEvents(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const eol = b.eol;\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        const isFlush = (a.isFlush || b.isFlush);\n        return {\n            changes: changes,\n            eol: eol,\n            versionId: versionId,\n            isUndoing: isUndoing,\n            isRedoing: isRedoing,\n            isFlush: isFlush\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var HorizontalGuidesState;\n(function (HorizontalGuidesState) {\n    HorizontalGuidesState[HorizontalGuidesState[\"Disabled\"] = 0] = \"Disabled\";\n    HorizontalGuidesState[HorizontalGuidesState[\"EnabledForActive\"] = 1] = \"EnabledForActive\";\n    HorizontalGuidesState[HorizontalGuidesState[\"Enabled\"] = 2] = \"Enabled\";\n})(HorizontalGuidesState || (HorizontalGuidesState = {}));\nexport class IndentGuide {\n    constructor(visibleColumn, column, className, \n    /**\n     * If set, this indent guide is a horizontal guide (no vertical part).\n     * It starts at visibleColumn and continues until endColumn.\n    */\n    horizontalLine, \n    /**\n     * If set (!= -1), only show this guide for wrapped lines that don't contain this model column, but are after it.\n    */\n    forWrappedLinesAfterColumn, forWrappedLinesBeforeOrAtColumn) {\n        this.visibleColumn = visibleColumn;\n        this.column = column;\n        this.className = className;\n        this.horizontalLine = horizontalLine;\n        this.forWrappedLinesAfterColumn = forWrappedLinesAfterColumn;\n        this.forWrappedLinesBeforeOrAtColumn = forWrappedLinesBeforeOrAtColumn;\n        if ((visibleColumn !== -1) === (column !== -1)) {\n            throw new Error();\n        }\n    }\n}\nexport class IndentGuideHorizontalLine {\n    constructor(top, endColumn) {\n        this.top = top;\n        this.endColumn = endColumn;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../base/common/lifecycle.js';\nexport class TokenizationRegistry {\n    constructor() {\n        this._map = new Map();\n        this._factories = new Map();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._colorMap = null;\n    }\n    fire(languages) {\n        this._onDidChange.fire({\n            changedLanguages: languages,\n            changedColorMap: false\n        });\n    }\n    register(language, support) {\n        this._map.set(language, support);\n        this.fire([language]);\n        return toDisposable(() => {\n            if (this._map.get(language) !== support) {\n                return;\n            }\n            this._map.delete(language);\n            this.fire([language]);\n        });\n    }\n    registerFactory(languageId, factory) {\n        var _a;\n        (_a = this._factories.get(languageId)) === null || _a === void 0 ? void 0 : _a.dispose();\n        const myData = new TokenizationSupportFactoryData(this, languageId, factory);\n        this._factories.set(languageId, myData);\n        return toDisposable(() => {\n            const v = this._factories.get(languageId);\n            if (!v || v !== myData) {\n                return;\n            }\n            this._factories.delete(languageId);\n            v.dispose();\n        });\n    }\n    getOrCreate(languageId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // check first if the support is already set\n            const tokenizationSupport = this.get(languageId);\n            if (tokenizationSupport) {\n                return tokenizationSupport;\n            }\n            const factory = this._factories.get(languageId);\n            if (!factory || factory.isResolved) {\n                // no factory or factory.resolve already finished\n                return null;\n            }\n            yield factory.resolve();\n            return this.get(languageId);\n        });\n    }\n    get(language) {\n        return (this._map.get(language) || null);\n    }\n    isResolved(languageId) {\n        const tokenizationSupport = this.get(languageId);\n        if (tokenizationSupport) {\n            return true;\n        }\n        const factory = this._factories.get(languageId);\n        if (!factory || factory.isResolved) {\n            return true;\n        }\n        return false;\n    }\n    setColorMap(colorMap) {\n        this._colorMap = colorMap;\n        this._onDidChange.fire({\n            changedLanguages: Array.from(this._map.keys()),\n            changedColorMap: true\n        });\n    }\n    getColorMap() {\n        return this._colorMap;\n    }\n    getDefaultBackground() {\n        if (this._colorMap && this._colorMap.length > 2 /* ColorId.DefaultBackground */) {\n            return this._colorMap[2 /* ColorId.DefaultBackground */];\n        }\n        return null;\n    }\n}\nclass TokenizationSupportFactoryData extends Disposable {\n    get isResolved() {\n        return this._isResolved;\n    }\n    constructor(_registry, _languageId, _factory) {\n        super();\n        this._registry = _registry;\n        this._languageId = _languageId;\n        this._factory = _factory;\n        this._isDisposed = false;\n        this._resolvePromise = null;\n        this._isResolved = false;\n    }\n    dispose() {\n        this._isDisposed = true;\n        super.dispose();\n    }\n    resolve() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._resolvePromise) {\n                this._resolvePromise = this._create();\n            }\n            return this._resolvePromise;\n        });\n    }\n    _create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const value = yield Promise.resolve(this._factory.createTokenizationSupport());\n            this._isResolved = true;\n            if (value && !this._isDisposed) {\n                this._register(this._registry.register(this._languageId, value));\n            }\n        });\n    }\n}\n","/**\n * Represents contiguous tokens over a contiguous range of lines.\n */\nexport class ContiguousMultilineTokens {\n    /**\n     * (Inclusive) start line number for these tokens.\n     */\n    get startLineNumber() {\n        return this._startLineNumber;\n    }\n    /**\n     * (Inclusive) end line number for these tokens.\n     */\n    get endLineNumber() {\n        return this._startLineNumber + this._tokens.length - 1;\n    }\n    constructor(startLineNumber, tokens) {\n        this._startLineNumber = startLineNumber;\n        this._tokens = tokens;\n    }\n    /**\n     * @see {@link _tokens}\n     */\n    getLineTokens(lineNumber) {\n        return this._tokens[lineNumber - this._startLineNumber];\n    }\n    appendLineTokens(lineTokens) {\n        this._tokens.push(lineTokens);\n    }\n}\n","import { ContiguousMultilineTokens } from './contiguousMultilineTokens.js';\nexport class ContiguousMultilineTokensBuilder {\n    constructor() {\n        this._tokens = [];\n    }\n    add(lineNumber, lineTokens) {\n        if (this._tokens.length > 0) {\n            const last = this._tokens[this._tokens.length - 1];\n            if (last.endLineNumber + 1 === lineNumber) {\n                // append\n                last.appendLineTokens(lineTokens);\n                return;\n            }\n        }\n        this._tokens.push(new ContiguousMultilineTokens(lineNumber, [lineTokens]));\n    }\n    finalize() {\n        return this._tokens;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineTokens } from './lineTokens.js';\nexport const EMPTY_LINE_TOKENS = (new Uint32Array(0)).buffer;\nexport class ContiguousTokensEditing {\n    static deleteBeginning(lineTokens, toChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        return ContiguousTokensEditing.delete(lineTokens, 0, toChIndex);\n    }\n    static deleteEnding(lineTokens, fromChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const lineTextLength = tokens[tokens.length - 2];\n        return ContiguousTokensEditing.delete(lineTokens, fromChIndex, lineTextLength);\n    }\n    static delete(lineTokens, fromChIndex, toChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS || fromChIndex === toChIndex) {\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const tokensCount = (tokens.length >>> 1);\n        // special case: deleting everything\n        if (fromChIndex === 0 && tokens[tokens.length - 2] === toChIndex) {\n            return EMPTY_LINE_TOKENS;\n        }\n        const fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, fromChIndex);\n        const fromTokenStartOffset = (fromTokenIndex > 0 ? tokens[(fromTokenIndex - 1) << 1] : 0);\n        const fromTokenEndOffset = tokens[fromTokenIndex << 1];\n        if (toChIndex < fromTokenEndOffset) {\n            // the delete range is inside a single token\n            const delta = (toChIndex - fromChIndex);\n            for (let i = fromTokenIndex; i < tokensCount; i++) {\n                tokens[i << 1] -= delta;\n            }\n            return lineTokens;\n        }\n        let dest;\n        let lastEnd;\n        if (fromTokenStartOffset !== fromChIndex) {\n            tokens[fromTokenIndex << 1] = fromChIndex;\n            dest = ((fromTokenIndex + 1) << 1);\n            lastEnd = fromChIndex;\n        }\n        else {\n            dest = (fromTokenIndex << 1);\n            lastEnd = fromTokenStartOffset;\n        }\n        const delta = (toChIndex - fromChIndex);\n        for (let tokenIndex = fromTokenIndex + 1; tokenIndex < tokensCount; tokenIndex++) {\n            const tokenEndOffset = tokens[tokenIndex << 1] - delta;\n            if (tokenEndOffset > lastEnd) {\n                tokens[dest++] = tokenEndOffset;\n                tokens[dest++] = tokens[(tokenIndex << 1) + 1];\n                lastEnd = tokenEndOffset;\n            }\n        }\n        if (dest === tokens.length) {\n            // nothing to trim\n            return lineTokens;\n        }\n        const tmp = new Uint32Array(dest);\n        tmp.set(tokens.subarray(0, dest), 0);\n        return tmp.buffer;\n    }\n    static append(lineTokens, _otherTokens) {\n        if (_otherTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        if (lineTokens === EMPTY_LINE_TOKENS) {\n            return _otherTokens;\n        }\n        if (lineTokens === null) {\n            return lineTokens;\n        }\n        if (_otherTokens === null) {\n            // cannot determine combined line length...\n            return null;\n        }\n        const myTokens = toUint32Array(lineTokens);\n        const otherTokens = toUint32Array(_otherTokens);\n        const otherTokensCount = (otherTokens.length >>> 1);\n        const result = new Uint32Array(myTokens.length + otherTokens.length);\n        result.set(myTokens, 0);\n        let dest = myTokens.length;\n        const delta = myTokens[myTokens.length - 2];\n        for (let i = 0; i < otherTokensCount; i++) {\n            result[dest++] = otherTokens[(i << 1)] + delta;\n            result[dest++] = otherTokens[(i << 1) + 1];\n        }\n        return result.buffer;\n    }\n    static insert(lineTokens, chIndex, textLength) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            // nothing to do\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const tokensCount = (tokens.length >>> 1);\n        let fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, chIndex);\n        if (fromTokenIndex > 0) {\n            const fromTokenStartOffset = tokens[(fromTokenIndex - 1) << 1];\n            if (fromTokenStartOffset === chIndex) {\n                fromTokenIndex--;\n            }\n        }\n        for (let tokenIndex = fromTokenIndex; tokenIndex < tokensCount; tokenIndex++) {\n            tokens[tokenIndex << 1] += textLength;\n        }\n        return lineTokens;\n    }\n}\nexport function toUint32Array(arr) {\n    if (arr instanceof Uint32Array) {\n        return arr;\n    }\n    else {\n        return new Uint32Array(arr);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { ContiguousTokensEditing, EMPTY_LINE_TOKENS, toUint32Array } from './contiguousTokensEditing.js';\nimport { LineTokens } from './lineTokens.js';\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\n/**\n * Represents contiguous tokens in a text model.\n */\nexport class ContiguousTokensStore {\n    constructor(languageIdCodec) {\n        this._lineTokens = [];\n        this._len = 0;\n        this._languageIdCodec = languageIdCodec;\n    }\n    flush() {\n        this._lineTokens = [];\n        this._len = 0;\n    }\n    get hasTokens() {\n        return this._lineTokens.length > 0;\n    }\n    getTokens(topLevelLanguageId, lineIndex, lineText) {\n        let rawLineTokens = null;\n        if (lineIndex < this._len) {\n            rawLineTokens = this._lineTokens[lineIndex];\n        }\n        if (rawLineTokens !== null && rawLineTokens !== EMPTY_LINE_TOKENS) {\n            return new LineTokens(toUint32Array(rawLineTokens), lineText, this._languageIdCodec);\n        }\n        const lineTokens = new Uint32Array(2);\n        lineTokens[0] = lineText.length;\n        lineTokens[1] = getDefaultMetadata(this._languageIdCodec.encodeLanguageId(topLevelLanguageId));\n        return new LineTokens(lineTokens, lineText, this._languageIdCodec);\n    }\n    static _massageTokens(topLevelLanguageId, lineTextLength, _tokens) {\n        const tokens = _tokens ? toUint32Array(_tokens) : null;\n        if (lineTextLength === 0) {\n            let hasDifferentLanguageId = false;\n            if (tokens && tokens.length > 1) {\n                hasDifferentLanguageId = (TokenMetadata.getLanguageId(tokens[1]) !== topLevelLanguageId);\n            }\n            if (!hasDifferentLanguageId) {\n                return EMPTY_LINE_TOKENS;\n            }\n        }\n        if (!tokens || tokens.length === 0) {\n            const tokens = new Uint32Array(2);\n            tokens[0] = lineTextLength;\n            tokens[1] = getDefaultMetadata(topLevelLanguageId);\n            return tokens.buffer;\n        }\n        // Ensure the last token covers the end of the text\n        tokens[tokens.length - 2] = lineTextLength;\n        if (tokens.byteOffset === 0 && tokens.byteLength === tokens.buffer.byteLength) {\n            // Store directly the ArrayBuffer pointer to save an object\n            return tokens.buffer;\n        }\n        return tokens;\n    }\n    _ensureLine(lineIndex) {\n        while (lineIndex >= this._len) {\n            this._lineTokens[this._len] = null;\n            this._len++;\n        }\n    }\n    _deleteLines(start, deleteCount) {\n        if (deleteCount === 0) {\n            return;\n        }\n        if (start + deleteCount > this._len) {\n            deleteCount = this._len - start;\n        }\n        this._lineTokens.splice(start, deleteCount);\n        this._len -= deleteCount;\n    }\n    _insertLines(insertIndex, insertCount) {\n        if (insertCount === 0) {\n            return;\n        }\n        const lineTokens = [];\n        for (let i = 0; i < insertCount; i++) {\n            lineTokens[i] = null;\n        }\n        this._lineTokens = arrays.arrayInsert(this._lineTokens, insertIndex, lineTokens);\n        this._len += insertCount;\n    }\n    setTokens(topLevelLanguageId, lineIndex, lineTextLength, _tokens, checkEquality) {\n        const tokens = ContiguousTokensStore._massageTokens(this._languageIdCodec.encodeLanguageId(topLevelLanguageId), lineTextLength, _tokens);\n        this._ensureLine(lineIndex);\n        const oldTokens = this._lineTokens[lineIndex];\n        this._lineTokens[lineIndex] = tokens;\n        if (checkEquality) {\n            return !ContiguousTokensStore._equals(oldTokens, tokens);\n        }\n        return false;\n    }\n    static _equals(_a, _b) {\n        if (!_a || !_b) {\n            return !_a && !_b;\n        }\n        const a = toUint32Array(_a);\n        const b = toUint32Array(_b);\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0, len = a.length; i < len; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //#region Editing\n    acceptEdit(range, eolCount, firstLineLength) {\n        this._acceptDeleteRange(range);\n        this._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength);\n    }\n    _acceptDeleteRange(range) {\n        const firstLineIndex = range.startLineNumber - 1;\n        if (firstLineIndex >= this._len) {\n            return;\n        }\n        if (range.startLineNumber === range.endLineNumber) {\n            if (range.startColumn === range.endColumn) {\n                // Nothing to delete\n                return;\n            }\n            this._lineTokens[firstLineIndex] = ContiguousTokensEditing.delete(this._lineTokens[firstLineIndex], range.startColumn - 1, range.endColumn - 1);\n            return;\n        }\n        this._lineTokens[firstLineIndex] = ContiguousTokensEditing.deleteEnding(this._lineTokens[firstLineIndex], range.startColumn - 1);\n        const lastLineIndex = range.endLineNumber - 1;\n        let lastLineTokens = null;\n        if (lastLineIndex < this._len) {\n            lastLineTokens = ContiguousTokensEditing.deleteBeginning(this._lineTokens[lastLineIndex], range.endColumn - 1);\n        }\n        // Take remaining text on last line and append it to remaining text on first line\n        this._lineTokens[firstLineIndex] = ContiguousTokensEditing.append(this._lineTokens[firstLineIndex], lastLineTokens);\n        // Delete middle lines\n        this._deleteLines(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n    }\n    _acceptInsertText(position, eolCount, firstLineLength) {\n        if (eolCount === 0 && firstLineLength === 0) {\n            // Nothing to insert\n            return;\n        }\n        const lineIndex = position.lineNumber - 1;\n        if (lineIndex >= this._len) {\n            return;\n        }\n        if (eolCount === 0) {\n            // Inserting text on one line\n            this._lineTokens[lineIndex] = ContiguousTokensEditing.insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n            return;\n        }\n        this._lineTokens[lineIndex] = ContiguousTokensEditing.deleteEnding(this._lineTokens[lineIndex], position.column - 1);\n        this._lineTokens[lineIndex] = ContiguousTokensEditing.insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n        this._insertLines(position.lineNumber, eolCount);\n    }\n}\nfunction getDefaultMetadata(topLevelLanguageId) {\n    return ((topLevelLanguageId << 0 /* MetadataConsts.LANGUAGEID_OFFSET */)\n        | (0 /* StandardTokenType.Other */ << 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */)\n        | (0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n        | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n        | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)\n        // If there is no grammar, we just take a guess and try to match brackets.\n        | (1024 /* MetadataConsts.BALANCED_BRACKETS_MASK */)) >>> 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\nclass LineTokens {\n    static createEmpty(lineContent, decoder) {\n        const defaultMetadata = LineTokens.defaultTokenMetadata;\n        const tokens = new Uint32Array(2);\n        tokens[0] = lineContent.length;\n        tokens[1] = defaultMetadata;\n        return new LineTokens(tokens, lineContent, decoder);\n    }\n    constructor(tokens, text, decoder) {\n        this._lineTokensBrand = undefined;\n        this._tokens = tokens;\n        this._tokensCount = (this._tokens.length >>> 1);\n        this._text = text;\n        this._languageIdCodec = decoder;\n    }\n    equals(other) {\n        if (other instanceof LineTokens) {\n            return this.slicedEquals(other, 0, this._tokensCount);\n        }\n        return false;\n    }\n    slicedEquals(other, sliceFromTokenIndex, sliceTokenCount) {\n        if (this._text !== other._text) {\n            return false;\n        }\n        if (this._tokensCount !== other._tokensCount) {\n            return false;\n        }\n        const from = (sliceFromTokenIndex << 1);\n        const to = from + (sliceTokenCount << 1);\n        for (let i = from; i < to; i++) {\n            if (this._tokens[i] !== other._tokens[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    getLineContent() {\n        return this._text;\n    }\n    getCount() {\n        return this._tokensCount;\n    }\n    getStartOffset(tokenIndex) {\n        if (tokenIndex > 0) {\n            return this._tokens[(tokenIndex - 1) << 1];\n        }\n        return 0;\n    }\n    getMetadata(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return metadata;\n    }\n    getLanguageId(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        const languageId = TokenMetadata.getLanguageId(metadata);\n        return this._languageIdCodec.decodeLanguageId(languageId);\n    }\n    getStandardTokenType(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getTokenType(metadata);\n    }\n    getForeground(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getForeground(metadata);\n    }\n    getClassName(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getClassNameFromMetadata(metadata);\n    }\n    getInlineStyle(tokenIndex, colorMap) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\n    }\n    getPresentation(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getPresentationFromMetadata(metadata);\n    }\n    getEndOffset(tokenIndex) {\n        return this._tokens[tokenIndex << 1];\n    }\n    /**\n     * Find the token containing offset `offset`.\n     * @param offset The search offset\n     * @return The index of the token containing the offset.\n     */\n    findTokenIndexAtOffset(offset) {\n        return LineTokens.findIndexInTokensArray(this._tokens, offset);\n    }\n    inflate() {\n        return this;\n    }\n    sliceAndInflate(startOffset, endOffset, deltaOffset) {\n        return new SliceLineTokens(this, startOffset, endOffset, deltaOffset);\n    }\n    static convertToEndOffset(tokens, lineTextLength) {\n        const tokenCount = (tokens.length >>> 1);\n        const lastTokenIndex = tokenCount - 1;\n        for (let tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\n            tokens[tokenIndex << 1] = tokens[(tokenIndex + 1) << 1];\n        }\n        tokens[lastTokenIndex << 1] = lineTextLength;\n    }\n    static findIndexInTokensArray(tokens, desiredIndex) {\n        if (tokens.length <= 2) {\n            return 0;\n        }\n        let low = 0;\n        let high = (tokens.length >>> 1) - 1;\n        while (low < high) {\n            const mid = low + Math.floor((high - low) / 2);\n            const endOffset = tokens[(mid << 1)];\n            if (endOffset === desiredIndex) {\n                return mid + 1;\n            }\n            else if (endOffset < desiredIndex) {\n                low = mid + 1;\n            }\n            else if (endOffset > desiredIndex) {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    /**\n     * @pure\n     * @param insertTokens Must be sorted by offset.\n    */\n    withInserted(insertTokens) {\n        if (insertTokens.length === 0) {\n            return this;\n        }\n        let nextOriginalTokenIdx = 0;\n        let nextInsertTokenIdx = 0;\n        let text = '';\n        const newTokens = new Array();\n        let originalEndOffset = 0;\n        while (true) {\n            const nextOriginalTokenEndOffset = nextOriginalTokenIdx < this._tokensCount ? this._tokens[nextOriginalTokenIdx << 1] : -1;\n            const nextInsertToken = nextInsertTokenIdx < insertTokens.length ? insertTokens[nextInsertTokenIdx] : null;\n            if (nextOriginalTokenEndOffset !== -1 && (nextInsertToken === null || nextOriginalTokenEndOffset <= nextInsertToken.offset)) {\n                // original token ends before next insert token\n                text += this._text.substring(originalEndOffset, nextOriginalTokenEndOffset);\n                const metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n                newTokens.push(text.length, metadata);\n                nextOriginalTokenIdx++;\n                originalEndOffset = nextOriginalTokenEndOffset;\n            }\n            else if (nextInsertToken) {\n                if (nextInsertToken.offset > originalEndOffset) {\n                    // insert token is in the middle of the next token.\n                    text += this._text.substring(originalEndOffset, nextInsertToken.offset);\n                    const metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n                    newTokens.push(text.length, metadata);\n                    originalEndOffset = nextInsertToken.offset;\n                }\n                text += nextInsertToken.text;\n                newTokens.push(text.length, nextInsertToken.tokenMetadata);\n                nextInsertTokenIdx++;\n            }\n            else {\n                break;\n            }\n        }\n        return new LineTokens(new Uint32Array(newTokens), text, this._languageIdCodec);\n    }\n}\nLineTokens.defaultTokenMetadata = ((0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n    | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n    | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\nexport { LineTokens };\nclass SliceLineTokens {\n    constructor(source, startOffset, endOffset, deltaOffset) {\n        this._source = source;\n        this._startOffset = startOffset;\n        this._endOffset = endOffset;\n        this._deltaOffset = deltaOffset;\n        this._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\n        this._tokensCount = 0;\n        for (let i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\n            const tokenStartOffset = source.getStartOffset(i);\n            if (tokenStartOffset >= endOffset) {\n                break;\n            }\n            this._tokensCount++;\n        }\n    }\n    getMetadata(tokenIndex) {\n        return this._source.getMetadata(this._firstTokenIndex + tokenIndex);\n    }\n    getLanguageId(tokenIndex) {\n        return this._source.getLanguageId(this._firstTokenIndex + tokenIndex);\n    }\n    getLineContent() {\n        return this._source.getLineContent().substring(this._startOffset, this._endOffset);\n    }\n    equals(other) {\n        if (other instanceof SliceLineTokens) {\n            return (this._startOffset === other._startOffset\n                && this._endOffset === other._endOffset\n                && this._deltaOffset === other._deltaOffset\n                && this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount));\n        }\n        return false;\n    }\n    getCount() {\n        return this._tokensCount;\n    }\n    getForeground(tokenIndex) {\n        return this._source.getForeground(this._firstTokenIndex + tokenIndex);\n    }\n    getEndOffset(tokenIndex) {\n        const tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\n        return Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\n    }\n    getClassName(tokenIndex) {\n        return this._source.getClassName(this._firstTokenIndex + tokenIndex);\n    }\n    getInlineStyle(tokenIndex, colorMap) {\n        return this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\n    }\n    getPresentation(tokenIndex) {\n        return this._source.getPresentation(this._firstTokenIndex + tokenIndex);\n    }\n    findTokenIndexAtOffset(offset) {\n        return this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { countEOL } from '../core/eolCounter.js';\n/**\n * Represents sparse tokens over a contiguous range of lines.\n */\nexport class SparseMultilineTokens {\n    static create(startLineNumber, tokens) {\n        return new SparseMultilineTokens(startLineNumber, new SparseMultilineTokensStorage(tokens));\n    }\n    /**\n     * (Inclusive) start line number for these tokens.\n     */\n    get startLineNumber() {\n        return this._startLineNumber;\n    }\n    /**\n     * (Inclusive) end line number for these tokens.\n     */\n    get endLineNumber() {\n        return this._endLineNumber;\n    }\n    constructor(startLineNumber, tokens) {\n        this._startLineNumber = startLineNumber;\n        this._tokens = tokens;\n        this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n    }\n    toString() {\n        return this._tokens.toString(this._startLineNumber);\n    }\n    _updateEndLineNumber() {\n        this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n    }\n    isEmpty() {\n        return this._tokens.isEmpty();\n    }\n    getLineTokens(lineNumber) {\n        if (this._startLineNumber <= lineNumber && lineNumber <= this._endLineNumber) {\n            return this._tokens.getLineTokens(lineNumber - this._startLineNumber);\n        }\n        return null;\n    }\n    getRange() {\n        const deltaRange = this._tokens.getRange();\n        if (!deltaRange) {\n            return deltaRange;\n        }\n        return new Range(this._startLineNumber + deltaRange.startLineNumber, deltaRange.startColumn, this._startLineNumber + deltaRange.endLineNumber, deltaRange.endColumn);\n    }\n    removeTokens(range) {\n        const startLineIndex = range.startLineNumber - this._startLineNumber;\n        const endLineIndex = range.endLineNumber - this._startLineNumber;\n        this._startLineNumber += this._tokens.removeTokens(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n        this._updateEndLineNumber();\n    }\n    split(range) {\n        // split tokens to two:\n        // a) all the tokens before `range`\n        // b) all the tokens after `range`\n        const startLineIndex = range.startLineNumber - this._startLineNumber;\n        const endLineIndex = range.endLineNumber - this._startLineNumber;\n        const [a, b, bDeltaLine] = this._tokens.split(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n        return [new SparseMultilineTokens(this._startLineNumber, a), new SparseMultilineTokens(this._startLineNumber + bDeltaLine, b)];\n    }\n    applyEdit(range, text) {\n        const [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n        this.acceptEdit(range, eolCount, firstLineLength, lastLineLength, text.length > 0 ? text.charCodeAt(0) : 0 /* CharCode.Null */);\n    }\n    acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        this._acceptDeleteRange(range);\n        this._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength, lastLineLength, firstCharCode);\n        this._updateEndLineNumber();\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n            // Nothing to delete\n            return;\n        }\n        const firstLineIndex = range.startLineNumber - this._startLineNumber;\n        const lastLineIndex = range.endLineNumber - this._startLineNumber;\n        if (lastLineIndex < 0) {\n            // this deletion occurs entirely before this block, so we only need to adjust line numbers\n            const deletedLinesCount = lastLineIndex - firstLineIndex;\n            this._startLineNumber -= deletedLinesCount;\n            return;\n        }\n        const tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n        if (firstLineIndex >= tokenMaxDeltaLine + 1) {\n            // this deletion occurs entirely after this block, so there is nothing to do\n            return;\n        }\n        if (firstLineIndex < 0 && lastLineIndex >= tokenMaxDeltaLine + 1) {\n            // this deletion completely encompasses this block\n            this._startLineNumber = 0;\n            this._tokens.clear();\n            return;\n        }\n        if (firstLineIndex < 0) {\n            const deletedBefore = -firstLineIndex;\n            this._startLineNumber -= deletedBefore;\n            this._tokens.acceptDeleteRange(range.startColumn - 1, 0, 0, lastLineIndex, range.endColumn - 1);\n        }\n        else {\n            this._tokens.acceptDeleteRange(0, firstLineIndex, range.startColumn - 1, lastLineIndex, range.endColumn - 1);\n        }\n    }\n    _acceptInsertText(position, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        if (eolCount === 0 && firstLineLength === 0) {\n            // Nothing to insert\n            return;\n        }\n        const lineIndex = position.lineNumber - this._startLineNumber;\n        if (lineIndex < 0) {\n            // this insertion occurs before this block, so we only need to adjust line numbers\n            this._startLineNumber += eolCount;\n            return;\n        }\n        const tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n        if (lineIndex >= tokenMaxDeltaLine + 1) {\n            // this insertion occurs after this block, so there is nothing to do\n            return;\n        }\n        this._tokens.acceptInsertText(lineIndex, position.column - 1, eolCount, firstLineLength, lastLineLength, firstCharCode);\n    }\n}\nclass SparseMultilineTokensStorage {\n    constructor(tokens) {\n        this._tokens = tokens;\n        this._tokenCount = tokens.length / 4;\n    }\n    toString(startLineNumber) {\n        const pieces = [];\n        for (let i = 0; i < this._tokenCount; i++) {\n            pieces.push(`(${this._getDeltaLine(i) + startLineNumber},${this._getStartCharacter(i)}-${this._getEndCharacter(i)})`);\n        }\n        return `[${pieces.join(',')}]`;\n    }\n    getMaxDeltaLine() {\n        const tokenCount = this._getTokenCount();\n        if (tokenCount === 0) {\n            return -1;\n        }\n        return this._getDeltaLine(tokenCount - 1);\n    }\n    getRange() {\n        const tokenCount = this._getTokenCount();\n        if (tokenCount === 0) {\n            return null;\n        }\n        const startChar = this._getStartCharacter(0);\n        const maxDeltaLine = this._getDeltaLine(tokenCount - 1);\n        const endChar = this._getEndCharacter(tokenCount - 1);\n        return new Range(0, startChar + 1, maxDeltaLine, endChar + 1);\n    }\n    _getTokenCount() {\n        return this._tokenCount;\n    }\n    _getDeltaLine(tokenIndex) {\n        return this._tokens[4 * tokenIndex];\n    }\n    _getStartCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 1];\n    }\n    _getEndCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 2];\n    }\n    isEmpty() {\n        return (this._getTokenCount() === 0);\n    }\n    getLineTokens(deltaLine) {\n        let low = 0;\n        let high = this._getTokenCount() - 1;\n        while (low < high) {\n            const mid = low + Math.floor((high - low) / 2);\n            const midDeltaLine = this._getDeltaLine(mid);\n            if (midDeltaLine < deltaLine) {\n                low = mid + 1;\n            }\n            else if (midDeltaLine > deltaLine) {\n                high = mid - 1;\n            }\n            else {\n                let min = mid;\n                while (min > low && this._getDeltaLine(min - 1) === deltaLine) {\n                    min--;\n                }\n                let max = mid;\n                while (max < high && this._getDeltaLine(max + 1) === deltaLine) {\n                    max++;\n                }\n                return new SparseLineTokens(this._tokens.subarray(4 * min, 4 * max + 4));\n            }\n        }\n        if (this._getDeltaLine(low) === deltaLine) {\n            return new SparseLineTokens(this._tokens.subarray(4 * low, 4 * low + 4));\n        }\n        return null;\n    }\n    clear() {\n        this._tokenCount = 0;\n    }\n    removeTokens(startDeltaLine, startChar, endDeltaLine, endChar) {\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        let newTokenCount = 0;\n        let hasDeletedTokens = false;\n        let firstDeltaLine = 0;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            const tokenDeltaLine = tokens[srcOffset];\n            const tokenStartCharacter = tokens[srcOffset + 1];\n            const tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))\n                && (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n                hasDeletedTokens = true;\n            }\n            else {\n                if (newTokenCount === 0) {\n                    firstDeltaLine = tokenDeltaLine;\n                }\n                if (hasDeletedTokens) {\n                    // must move the token to the left\n                    const destOffset = 4 * newTokenCount;\n                    tokens[destOffset] = tokenDeltaLine - firstDeltaLine;\n                    tokens[destOffset + 1] = tokenStartCharacter;\n                    tokens[destOffset + 2] = tokenEndCharacter;\n                    tokens[destOffset + 3] = tokenMetadata;\n                }\n                newTokenCount++;\n            }\n        }\n        this._tokenCount = newTokenCount;\n        return firstDeltaLine;\n    }\n    split(startDeltaLine, startChar, endDeltaLine, endChar) {\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        const aTokens = [];\n        const bTokens = [];\n        let destTokens = aTokens;\n        let destOffset = 0;\n        let destFirstDeltaLine = 0;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            const tokenDeltaLine = tokens[srcOffset];\n            const tokenStartCharacter = tokens[srcOffset + 1];\n            const tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))) {\n                if ((tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n                    // this token is touching the range\n                    continue;\n                }\n                else {\n                    // this token is after the range\n                    if (destTokens !== bTokens) {\n                        // this token is the first token after the range\n                        destTokens = bTokens;\n                        destOffset = 0;\n                        destFirstDeltaLine = tokenDeltaLine;\n                    }\n                }\n            }\n            destTokens[destOffset++] = tokenDeltaLine - destFirstDeltaLine;\n            destTokens[destOffset++] = tokenStartCharacter;\n            destTokens[destOffset++] = tokenEndCharacter;\n            destTokens[destOffset++] = tokenMetadata;\n        }\n        return [new SparseMultilineTokensStorage(new Uint32Array(aTokens)), new SparseMultilineTokensStorage(new Uint32Array(bTokens)), destFirstDeltaLine];\n    }\n    acceptDeleteRange(horizontalShiftForFirstLineTokens, startDeltaLine, startCharacter, endDeltaLine, endCharacter) {\n        // This is a bit complex, here are the cases I used to think about this:\n        //\n        // 1. The token starts before the deletion range\n        // 1a. The token is completely before the deletion range\n        //               -----------\n        //                          xxxxxxxxxxx\n        // 1b. The token starts before, the deletion range ends after the token\n        //               -----------\n        //                      xxxxxxxxxxx\n        // 1c. The token starts before, the deletion range ends precisely with the token\n        //               ---------------\n        //                      xxxxxxxx\n        // 1d. The token starts before, the deletion range is inside the token\n        //               ---------------\n        //                    xxxxx\n        //\n        // 2. The token starts at the same position with the deletion range\n        // 2a. The token starts at the same position, and ends inside the deletion range\n        //               -------\n        //               xxxxxxxxxxx\n        // 2b. The token starts at the same position, and ends at the same position as the deletion range\n        //               ----------\n        //               xxxxxxxxxx\n        // 2c. The token starts at the same position, and ends after the deletion range\n        //               -------------\n        //               xxxxxxx\n        //\n        // 3. The token starts inside the deletion range\n        // 3a. The token is inside the deletion range\n        //                -------\n        //             xxxxxxxxxxxxx\n        // 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n        //                ----------\n        //             xxxxxxxxxxxxx\n        // 3c. The token starts inside the deletion range, and ends after the deletion range\n        //                ------------\n        //             xxxxxxxxxxx\n        //\n        // 4. The token starts after the deletion range\n        //                  -----------\n        //          xxxxxxxx\n        //\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        const deletedLineCount = (endDeltaLine - startDeltaLine);\n        let newTokenCount = 0;\n        let hasDeletedTokens = false;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            let tokenDeltaLine = tokens[srcOffset];\n            let tokenStartCharacter = tokens[srcOffset + 1];\n            let tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if (tokenDeltaLine < startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter <= startCharacter)) {\n                // 1a. The token is completely before the deletion range\n                // => nothing to do\n                newTokenCount++;\n                continue;\n            }\n            else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter < startCharacter) {\n                // 1b, 1c, 1d\n                // => the token survives, but it needs to shrink\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 1d. The token starts before, the deletion range is inside the token\n                    // => the token shrinks by the deletion character count\n                    tokenEndCharacter -= (endCharacter - startCharacter);\n                }\n                else {\n                    // 1b. The token starts before, the deletion range ends after the token\n                    // 1c. The token starts before, the deletion range ends precisely with the token\n                    // => the token shrinks its ending to the deletion start\n                    tokenEndCharacter = startCharacter;\n                }\n            }\n            else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter === startCharacter) {\n                // 2a, 2b, 2c\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 2c. The token starts at the same position, and ends after the deletion range\n                    // => the token shrinks by the deletion character count\n                    tokenEndCharacter -= (endCharacter - startCharacter);\n                }\n                else {\n                    // 2a. The token starts at the same position, and ends inside the deletion range\n                    // 2b. The token starts at the same position, and ends at the same position as the deletion range\n                    // => the token is deleted\n                    hasDeletedTokens = true;\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter < endCharacter)) {\n                // 3a, 3b, 3c\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 3c. The token starts inside the deletion range, and ends after the deletion range\n                    // => the token moves left and shrinks\n                    if (tokenDeltaLine === startDeltaLine) {\n                        // the deletion started on the same line as the token\n                        // => the token moves left and shrinks\n                        tokenStartCharacter = startCharacter;\n                        tokenEndCharacter = tokenStartCharacter + (tokenEndCharacter - endCharacter);\n                    }\n                    else {\n                        // the deletion started on a line above the token\n                        // => the token moves to the beginning of the line\n                        tokenStartCharacter = 0;\n                        tokenEndCharacter = tokenStartCharacter + (tokenEndCharacter - endCharacter);\n                    }\n                }\n                else {\n                    // 3a. The token is inside the deletion range\n                    // 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n                    // => the token is deleted\n                    hasDeletedTokens = true;\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine > endDeltaLine) {\n                // 4. (partial) The token starts after the deletion range, on a line below...\n                if (deletedLineCount === 0 && !hasDeletedTokens) {\n                    // early stop, there is no need to walk all the tokens and do nothing...\n                    newTokenCount = tokenCount;\n                    break;\n                }\n                tokenDeltaLine -= deletedLineCount;\n            }\n            else if (tokenDeltaLine === endDeltaLine && tokenStartCharacter >= endCharacter) {\n                // 4. (continued) The token starts after the deletion range, on the last line where a deletion occurs\n                if (horizontalShiftForFirstLineTokens && tokenDeltaLine === 0) {\n                    tokenStartCharacter += horizontalShiftForFirstLineTokens;\n                    tokenEndCharacter += horizontalShiftForFirstLineTokens;\n                }\n                tokenDeltaLine -= deletedLineCount;\n                tokenStartCharacter -= (endCharacter - startCharacter);\n                tokenEndCharacter -= (endCharacter - startCharacter);\n            }\n            else {\n                throw new Error(`Not possible!`);\n            }\n            const destOffset = 4 * newTokenCount;\n            tokens[destOffset] = tokenDeltaLine;\n            tokens[destOffset + 1] = tokenStartCharacter;\n            tokens[destOffset + 2] = tokenEndCharacter;\n            tokens[destOffset + 3] = tokenMetadata;\n            newTokenCount++;\n        }\n        this._tokenCount = newTokenCount;\n    }\n    acceptInsertText(deltaLine, character, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        // Here are the cases I used to think about this:\n        //\n        // 1. The token is completely before the insertion point\n        //            -----------   |\n        // 2. The token ends precisely at the insertion point\n        //            -----------|\n        // 3. The token contains the insertion point\n        //            -----|------\n        // 4. The token starts precisely at the insertion point\n        //            |-----------\n        // 5. The token is completely after the insertion point\n        //            |   -----------\n        //\n        const isInsertingPreciselyOneWordCharacter = (eolCount === 0\n            && firstLineLength === 1\n            && ((firstCharCode >= 48 /* CharCode.Digit0 */ && firstCharCode <= 57 /* CharCode.Digit9 */)\n                || (firstCharCode >= 65 /* CharCode.A */ && firstCharCode <= 90 /* CharCode.Z */)\n                || (firstCharCode >= 97 /* CharCode.a */ && firstCharCode <= 122 /* CharCode.z */)));\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        for (let i = 0; i < tokenCount; i++) {\n            const offset = 4 * i;\n            let tokenDeltaLine = tokens[offset];\n            let tokenStartCharacter = tokens[offset + 1];\n            let tokenEndCharacter = tokens[offset + 2];\n            if (tokenDeltaLine < deltaLine || (tokenDeltaLine === deltaLine && tokenEndCharacter < character)) {\n                // 1. The token is completely before the insertion point\n                // => nothing to do\n                continue;\n            }\n            else if (tokenDeltaLine === deltaLine && tokenEndCharacter === character) {\n                // 2. The token ends precisely at the insertion point\n                // => expand the end character only if inserting precisely one character that is a word character\n                if (isInsertingPreciselyOneWordCharacter) {\n                    tokenEndCharacter += 1;\n                }\n                else {\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine === deltaLine && tokenStartCharacter < character && character < tokenEndCharacter) {\n                // 3. The token contains the insertion point\n                if (eolCount === 0) {\n                    // => just expand the end character\n                    tokenEndCharacter += firstLineLength;\n                }\n                else {\n                    // => cut off the token\n                    tokenEndCharacter = character;\n                }\n            }\n            else {\n                // 4. or 5.\n                if (tokenDeltaLine === deltaLine && tokenStartCharacter === character) {\n                    // 4. The token starts precisely at the insertion point\n                    // => grow the token (by keeping its start constant) only if inserting precisely one character that is a word character\n                    // => otherwise behave as in case 5.\n                    if (isInsertingPreciselyOneWordCharacter) {\n                        continue;\n                    }\n                }\n                // => the token must move and keep its size constant\n                if (tokenDeltaLine === deltaLine) {\n                    tokenDeltaLine += eolCount;\n                    // this token is on the line where the insertion is taking place\n                    if (eolCount === 0) {\n                        tokenStartCharacter += firstLineLength;\n                        tokenEndCharacter += firstLineLength;\n                    }\n                    else {\n                        const tokenLength = tokenEndCharacter - tokenStartCharacter;\n                        tokenStartCharacter = lastLineLength + (tokenStartCharacter - character);\n                        tokenEndCharacter = tokenStartCharacter + tokenLength;\n                    }\n                }\n                else {\n                    tokenDeltaLine += eolCount;\n                }\n            }\n            tokens[offset] = tokenDeltaLine;\n            tokens[offset + 1] = tokenStartCharacter;\n            tokens[offset + 2] = tokenEndCharacter;\n        }\n    }\n}\nexport class SparseLineTokens {\n    constructor(tokens) {\n        this._tokens = tokens;\n    }\n    getCount() {\n        return this._tokens.length / 4;\n    }\n    getStartCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 1];\n    }\n    getEndCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 2];\n    }\n    getMetadata(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 3];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { LineTokens } from './lineTokens.js';\n/**\n * Represents sparse tokens in a text model.\n */\nexport class SparseTokensStore {\n    constructor(languageIdCodec) {\n        this._pieces = [];\n        this._isComplete = false;\n        this._languageIdCodec = languageIdCodec;\n    }\n    flush() {\n        this._pieces = [];\n        this._isComplete = false;\n    }\n    isEmpty() {\n        return (this._pieces.length === 0);\n    }\n    set(pieces, isComplete) {\n        this._pieces = pieces || [];\n        this._isComplete = isComplete;\n    }\n    setPartial(_range, pieces) {\n        // console.log(`setPartial ${_range} ${pieces.map(p => p.toString()).join(', ')}`);\n        let range = _range;\n        if (pieces.length > 0) {\n            const _firstRange = pieces[0].getRange();\n            const _lastRange = pieces[pieces.length - 1].getRange();\n            if (!_firstRange || !_lastRange) {\n                return _range;\n            }\n            range = _range.plusRange(_firstRange).plusRange(_lastRange);\n        }\n        let insertPosition = null;\n        for (let i = 0, len = this._pieces.length; i < len; i++) {\n            const piece = this._pieces[i];\n            if (piece.endLineNumber < range.startLineNumber) {\n                // this piece is before the range\n                continue;\n            }\n            if (piece.startLineNumber > range.endLineNumber) {\n                // this piece is after the range, so mark the spot before this piece\n                // as a good insertion position and stop looping\n                insertPosition = insertPosition || { index: i };\n                break;\n            }\n            // this piece might intersect with the range\n            piece.removeTokens(range);\n            if (piece.isEmpty()) {\n                // remove the piece if it became empty\n                this._pieces.splice(i, 1);\n                i--;\n                len--;\n                continue;\n            }\n            if (piece.endLineNumber < range.startLineNumber) {\n                // after removal, this piece is before the range\n                continue;\n            }\n            if (piece.startLineNumber > range.endLineNumber) {\n                // after removal, this piece is after the range\n                insertPosition = insertPosition || { index: i };\n                continue;\n            }\n            // after removal, this piece contains the range\n            const [a, b] = piece.split(range);\n            if (a.isEmpty()) {\n                // this piece is actually after the range\n                insertPosition = insertPosition || { index: i };\n                continue;\n            }\n            if (b.isEmpty()) {\n                // this piece is actually before the range\n                continue;\n            }\n            this._pieces.splice(i, 1, a, b);\n            i++;\n            len++;\n            insertPosition = insertPosition || { index: i };\n        }\n        insertPosition = insertPosition || { index: this._pieces.length };\n        if (pieces.length > 0) {\n            this._pieces = arrays.arrayInsert(this._pieces, insertPosition.index, pieces);\n        }\n        // console.log(`I HAVE ${this._pieces.length} pieces`);\n        // console.log(`${this._pieces.map(p => p.toString()).join('\\n')}`);\n        return range;\n    }\n    isComplete() {\n        return this._isComplete;\n    }\n    addSparseTokens(lineNumber, aTokens) {\n        if (aTokens.getLineContent().length === 0) {\n            // Don't do anything for empty lines\n            return aTokens;\n        }\n        const pieces = this._pieces;\n        if (pieces.length === 0) {\n            return aTokens;\n        }\n        const pieceIndex = SparseTokensStore._findFirstPieceWithLine(pieces, lineNumber);\n        const bTokens = pieces[pieceIndex].getLineTokens(lineNumber);\n        if (!bTokens) {\n            return aTokens;\n        }\n        const aLen = aTokens.getCount();\n        const bLen = bTokens.getCount();\n        let aIndex = 0;\n        const result = [];\n        let resultLen = 0;\n        let lastEndOffset = 0;\n        const emitToken = (endOffset, metadata) => {\n            if (endOffset === lastEndOffset) {\n                return;\n            }\n            lastEndOffset = endOffset;\n            result[resultLen++] = endOffset;\n            result[resultLen++] = metadata;\n        };\n        for (let bIndex = 0; bIndex < bLen; bIndex++) {\n            const bStartCharacter = bTokens.getStartCharacter(bIndex);\n            const bEndCharacter = bTokens.getEndCharacter(bIndex);\n            const bMetadata = bTokens.getMetadata(bIndex);\n            const bMask = (((bMetadata & 1 /* MetadataConsts.SEMANTIC_USE_ITALIC */) ? 2048 /* MetadataConsts.ITALIC_MASK */ : 0)\n                | ((bMetadata & 2 /* MetadataConsts.SEMANTIC_USE_BOLD */) ? 4096 /* MetadataConsts.BOLD_MASK */ : 0)\n                | ((bMetadata & 4 /* MetadataConsts.SEMANTIC_USE_UNDERLINE */) ? 8192 /* MetadataConsts.UNDERLINE_MASK */ : 0)\n                | ((bMetadata & 8 /* MetadataConsts.SEMANTIC_USE_STRIKETHROUGH */) ? 16384 /* MetadataConsts.STRIKETHROUGH_MASK */ : 0)\n                | ((bMetadata & 16 /* MetadataConsts.SEMANTIC_USE_FOREGROUND */) ? 16744448 /* MetadataConsts.FOREGROUND_MASK */ : 0)\n                | ((bMetadata & 32 /* MetadataConsts.SEMANTIC_USE_BACKGROUND */) ? 4278190080 /* MetadataConsts.BACKGROUND_MASK */ : 0)) >>> 0;\n            const aMask = (~bMask) >>> 0;\n            // push any token from `a` that is before `b`\n            while (aIndex < aLen && aTokens.getEndOffset(aIndex) <= bStartCharacter) {\n                emitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n                aIndex++;\n            }\n            // push the token from `a` if it intersects the token from `b`\n            if (aIndex < aLen && aTokens.getStartOffset(aIndex) < bStartCharacter) {\n                emitToken(bStartCharacter, aTokens.getMetadata(aIndex));\n            }\n            // skip any tokens from `a` that are contained inside `b`\n            while (aIndex < aLen && aTokens.getEndOffset(aIndex) < bEndCharacter) {\n                emitToken(aTokens.getEndOffset(aIndex), (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n                aIndex++;\n            }\n            if (aIndex < aLen) {\n                emitToken(bEndCharacter, (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n                if (aTokens.getEndOffset(aIndex) === bEndCharacter) {\n                    // `a` ends exactly at the same spot as `b`!\n                    aIndex++;\n                }\n            }\n            else {\n                const aMergeIndex = Math.min(Math.max(0, aIndex - 1), aLen - 1);\n                // push the token from `b`\n                emitToken(bEndCharacter, (aTokens.getMetadata(aMergeIndex) & aMask) | (bMetadata & bMask));\n            }\n        }\n        // push the remaining tokens from `a`\n        while (aIndex < aLen) {\n            emitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n            aIndex++;\n        }\n        return new LineTokens(new Uint32Array(result), aTokens.getLineContent(), this._languageIdCodec);\n    }\n    static _findFirstPieceWithLine(pieces, lineNumber) {\n        let low = 0;\n        let high = pieces.length - 1;\n        while (low < high) {\n            let mid = low + Math.floor((high - low) / 2);\n            if (pieces[mid].endLineNumber < lineNumber) {\n                low = mid + 1;\n            }\n            else if (pieces[mid].startLineNumber > lineNumber) {\n                high = mid - 1;\n            }\n            else {\n                while (mid > low && pieces[mid - 1].startLineNumber <= lineNumber && lineNumber <= pieces[mid - 1].endLineNumber) {\n                    mid--;\n                }\n                return mid;\n            }\n        }\n        return low;\n    }\n    acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        for (const piece of this._pieces) {\n            piece.acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../base/common/lifecycle.js';\nexport class ViewEventHandler extends Disposable {\n    constructor() {\n        super();\n        this._shouldRender = true;\n    }\n    shouldRender() {\n        return this._shouldRender;\n    }\n    forceShouldRender() {\n        this._shouldRender = true;\n    }\n    setShouldRender() {\n        this._shouldRender = true;\n    }\n    onDidRender() {\n        this._shouldRender = false;\n    }\n    // --- begin event handlers\n    onCompositionStart(e) {\n        return false;\n    }\n    onCompositionEnd(e) {\n        return false;\n    }\n    onConfigurationChanged(e) {\n        return false;\n    }\n    onCursorStateChanged(e) {\n        return false;\n    }\n    onDecorationsChanged(e) {\n        return false;\n    }\n    onFlushed(e) {\n        return false;\n    }\n    onFocusChanged(e) {\n        return false;\n    }\n    onLanguageConfigurationChanged(e) {\n        return false;\n    }\n    onLineMappingChanged(e) {\n        return false;\n    }\n    onLinesChanged(e) {\n        return false;\n    }\n    onLinesDeleted(e) {\n        return false;\n    }\n    onLinesInserted(e) {\n        return false;\n    }\n    onRevealRangeRequest(e) {\n        return false;\n    }\n    onScrollChanged(e) {\n        return false;\n    }\n    onThemeChanged(e) {\n        return false;\n    }\n    onTokensChanged(e) {\n        return false;\n    }\n    onTokensColorsChanged(e) {\n        return false;\n    }\n    onZonesChanged(e) {\n        return false;\n    }\n    // --- end event handlers\n    handleEvents(events) {\n        let shouldRender = false;\n        for (let i = 0, len = events.length; i < len; i++) {\n            const e = events[i];\n            switch (e.type) {\n                case 0 /* viewEvents.ViewEventType.ViewCompositionStart */:\n                    if (this.onCompositionStart(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 1 /* viewEvents.ViewEventType.ViewCompositionEnd */:\n                    if (this.onCompositionEnd(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 2 /* viewEvents.ViewEventType.ViewConfigurationChanged */:\n                    if (this.onConfigurationChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 3 /* viewEvents.ViewEventType.ViewCursorStateChanged */:\n                    if (this.onCursorStateChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 4 /* viewEvents.ViewEventType.ViewDecorationsChanged */:\n                    if (this.onDecorationsChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 5 /* viewEvents.ViewEventType.ViewFlushed */:\n                    if (this.onFlushed(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 6 /* viewEvents.ViewEventType.ViewFocusChanged */:\n                    if (this.onFocusChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 7 /* viewEvents.ViewEventType.ViewLanguageConfigurationChanged */:\n                    if (this.onLanguageConfigurationChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 8 /* viewEvents.ViewEventType.ViewLineMappingChanged */:\n                    if (this.onLineMappingChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 9 /* viewEvents.ViewEventType.ViewLinesChanged */:\n                    if (this.onLinesChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 10 /* viewEvents.ViewEventType.ViewLinesDeleted */:\n                    if (this.onLinesDeleted(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 11 /* viewEvents.ViewEventType.ViewLinesInserted */:\n                    if (this.onLinesInserted(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 12 /* viewEvents.ViewEventType.ViewRevealRangeRequest */:\n                    if (this.onRevealRangeRequest(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 13 /* viewEvents.ViewEventType.ViewScrollChanged */:\n                    if (this.onScrollChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 15 /* viewEvents.ViewEventType.ViewTokensChanged */:\n                    if (this.onTokensChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 14 /* viewEvents.ViewEventType.ViewThemeChanged */:\n                    if (this.onThemeChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 16 /* viewEvents.ViewEventType.ViewTokensColorsChanged */:\n                    if (this.onTokensColorsChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 17 /* viewEvents.ViewEventType.ViewZonesChanged */:\n                    if (this.onZonesChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                default:\n                    console.info('View received unknown event: ');\n                    console.info(e);\n            }\n        }\n        if (shouldRender) {\n            this._shouldRender = true;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ViewCompositionStartEvent {\n    constructor() {\n        this.type = 0 /* ViewEventType.ViewCompositionStart */;\n    }\n}\nexport class ViewCompositionEndEvent {\n    constructor() {\n        this.type = 1 /* ViewEventType.ViewCompositionEnd */;\n    }\n}\nexport class ViewConfigurationChangedEvent {\n    constructor(source) {\n        this.type = 2 /* ViewEventType.ViewConfigurationChanged */;\n        this._source = source;\n    }\n    hasChanged(id) {\n        return this._source.hasChanged(id);\n    }\n}\nexport class ViewCursorStateChangedEvent {\n    constructor(selections, modelSelections, reason) {\n        this.selections = selections;\n        this.modelSelections = modelSelections;\n        this.reason = reason;\n        this.type = 3 /* ViewEventType.ViewCursorStateChanged */;\n    }\n}\nexport class ViewDecorationsChangedEvent {\n    constructor(source) {\n        this.type = 4 /* ViewEventType.ViewDecorationsChanged */;\n        if (source) {\n            this.affectsMinimap = source.affectsMinimap;\n            this.affectsOverviewRuler = source.affectsOverviewRuler;\n        }\n        else {\n            this.affectsMinimap = true;\n            this.affectsOverviewRuler = true;\n        }\n    }\n}\nexport class ViewFlushedEvent {\n    constructor() {\n        this.type = 5 /* ViewEventType.ViewFlushed */;\n        // Nothing to do\n    }\n}\nexport class ViewFocusChangedEvent {\n    constructor(isFocused) {\n        this.type = 6 /* ViewEventType.ViewFocusChanged */;\n        this.isFocused = isFocused;\n    }\n}\nexport class ViewLanguageConfigurationEvent {\n    constructor() {\n        this.type = 7 /* ViewEventType.ViewLanguageConfigurationChanged */;\n    }\n}\nexport class ViewLineMappingChangedEvent {\n    constructor() {\n        this.type = 8 /* ViewEventType.ViewLineMappingChanged */;\n        // Nothing to do\n    }\n}\nexport class ViewLinesChangedEvent {\n    constructor(\n    /**\n     * The first line that has changed.\n     */\n    fromLineNumber, \n    /**\n     * The number of lines that have changed.\n     */\n    count) {\n        this.fromLineNumber = fromLineNumber;\n        this.count = count;\n        this.type = 9 /* ViewEventType.ViewLinesChanged */;\n    }\n}\nexport class ViewLinesDeletedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 10 /* ViewEventType.ViewLinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewLinesInsertedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 11 /* ViewEventType.ViewLinesInserted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewRevealRangeRequestEvent {\n    constructor(\n    /**\n     * Source of the call that caused the event.\n     */\n    source, \n    /**\n     * Reduce the revealing to a minimum (e.g. avoid scrolling if the bounding box is visible and near the viewport edge).\n     */\n    minimalReveal, \n    /**\n     * Range to be reavealed.\n     */\n    range, \n    /**\n     * Selections to be revealed.\n     */\n    selections, \n    /**\n     * The vertical reveal strategy.\n     */\n    verticalType, \n    /**\n     * If true: there should be a horizontal & vertical revealing.\n     * If false: there should be just a vertical revealing.\n     */\n    revealHorizontal, \n    /**\n     * The scroll type.\n     */\n    scrollType) {\n        this.source = source;\n        this.minimalReveal = minimalReveal;\n        this.range = range;\n        this.selections = selections;\n        this.verticalType = verticalType;\n        this.revealHorizontal = revealHorizontal;\n        this.scrollType = scrollType;\n        this.type = 12 /* ViewEventType.ViewRevealRangeRequest */;\n    }\n}\nexport class ViewScrollChangedEvent {\n    constructor(source) {\n        this.type = 13 /* ViewEventType.ViewScrollChanged */;\n        this.scrollWidth = source.scrollWidth;\n        this.scrollLeft = source.scrollLeft;\n        this.scrollHeight = source.scrollHeight;\n        this.scrollTop = source.scrollTop;\n        this.scrollWidthChanged = source.scrollWidthChanged;\n        this.scrollLeftChanged = source.scrollLeftChanged;\n        this.scrollHeightChanged = source.scrollHeightChanged;\n        this.scrollTopChanged = source.scrollTopChanged;\n    }\n}\nexport class ViewThemeChangedEvent {\n    constructor(theme) {\n        this.theme = theme;\n        this.type = 14 /* ViewEventType.ViewThemeChanged */;\n    }\n}\nexport class ViewTokensChangedEvent {\n    constructor(ranges) {\n        this.type = 15 /* ViewEventType.ViewTokensChanged */;\n        this.ranges = ranges;\n    }\n}\nexport class ViewTokensColorsChangedEvent {\n    constructor() {\n        this.type = 16 /* ViewEventType.ViewTokensColorsChanged */;\n        // Nothing to do\n    }\n}\nexport class ViewZonesChangedEvent {\n    constructor() {\n        this.type = 17 /* ViewEventType.ViewZonesChanged */;\n        // Nothing to do\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nexport class LineDecoration {\n    constructor(startColumn, endColumn, className, type) {\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.className = className;\n        this.type = type;\n        this._lineDecorationBrand = undefined;\n    }\n    static _equals(a, b) {\n        return (a.startColumn === b.startColumn\n            && a.endColumn === b.endColumn\n            && a.className === b.className\n            && a.type === b.type);\n    }\n    static equalsArr(a, b) {\n        const aLen = a.length;\n        const bLen = b.length;\n        if (aLen !== bLen) {\n            return false;\n        }\n        for (let i = 0; i < aLen; i++) {\n            if (!LineDecoration._equals(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static extractWrapped(arr, startOffset, endOffset) {\n        if (arr.length === 0) {\n            return arr;\n        }\n        const startColumn = startOffset + 1;\n        const endColumn = endOffset + 1;\n        const lineLength = endOffset - startOffset;\n        const r = [];\n        let rLength = 0;\n        for (const dec of arr) {\n            if (dec.endColumn <= startColumn || dec.startColumn >= endColumn) {\n                continue;\n            }\n            r[rLength++] = new LineDecoration(Math.max(1, dec.startColumn - startColumn + 1), Math.min(lineLength + 1, dec.endColumn - startColumn + 1), dec.className, dec.type);\n        }\n        return r;\n    }\n    static filter(lineDecorations, lineNumber, minLineColumn, maxLineColumn) {\n        if (lineDecorations.length === 0) {\n            return [];\n        }\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = lineDecorations.length; i < len; i++) {\n            const d = lineDecorations[i];\n            const range = d.range;\n            if (range.endLineNumber < lineNumber || range.startLineNumber > lineNumber) {\n                // Ignore decorations that sit outside this line\n                continue;\n            }\n            if (range.isEmpty() && (d.type === 0 /* InlineDecorationType.Regular */ || d.type === 3 /* InlineDecorationType.RegularAffectingLetterSpacing */)) {\n                // Ignore empty range decorations\n                continue;\n            }\n            const startColumn = (range.startLineNumber === lineNumber ? range.startColumn : minLineColumn);\n            const endColumn = (range.endLineNumber === lineNumber ? range.endColumn : maxLineColumn);\n            result[resultLen++] = new LineDecoration(startColumn, endColumn, d.inlineClassName, d.type);\n        }\n        return result;\n    }\n    static _typeCompare(a, b) {\n        const ORDER = [2, 0, 1, 3];\n        return ORDER[a] - ORDER[b];\n    }\n    static compare(a, b) {\n        if (a.startColumn !== b.startColumn) {\n            return a.startColumn - b.startColumn;\n        }\n        if (a.endColumn !== b.endColumn) {\n            return a.endColumn - b.endColumn;\n        }\n        const typeCmp = LineDecoration._typeCompare(a.type, b.type);\n        if (typeCmp !== 0) {\n            return typeCmp;\n        }\n        if (a.className !== b.className) {\n            return a.className < b.className ? -1 : 1;\n        }\n        return 0;\n    }\n}\nexport class DecorationSegment {\n    constructor(startOffset, endOffset, className, metadata) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.className = className;\n        this.metadata = metadata;\n    }\n}\nclass Stack {\n    constructor() {\n        this.stopOffsets = [];\n        this.classNames = [];\n        this.metadata = [];\n        this.count = 0;\n    }\n    static _metadata(metadata) {\n        let result = 0;\n        for (let i = 0, len = metadata.length; i < len; i++) {\n            result |= metadata[i];\n        }\n        return result;\n    }\n    consumeLowerThan(maxStopOffset, nextStartOffset, result) {\n        while (this.count > 0 && this.stopOffsets[0] < maxStopOffset) {\n            let i = 0;\n            // Take all equal stopping offsets\n            while (i + 1 < this.count && this.stopOffsets[i] === this.stopOffsets[i + 1]) {\n                i++;\n            }\n            // Basically we are consuming the first i + 1 elements of the stack\n            result.push(new DecorationSegment(nextStartOffset, this.stopOffsets[i], this.classNames.join(' '), Stack._metadata(this.metadata)));\n            nextStartOffset = this.stopOffsets[i] + 1;\n            // Consume them\n            this.stopOffsets.splice(0, i + 1);\n            this.classNames.splice(0, i + 1);\n            this.metadata.splice(0, i + 1);\n            this.count -= (i + 1);\n        }\n        if (this.count > 0 && nextStartOffset < maxStopOffset) {\n            result.push(new DecorationSegment(nextStartOffset, maxStopOffset - 1, this.classNames.join(' '), Stack._metadata(this.metadata)));\n            nextStartOffset = maxStopOffset;\n        }\n        return nextStartOffset;\n    }\n    insert(stopOffset, className, metadata) {\n        if (this.count === 0 || this.stopOffsets[this.count - 1] <= stopOffset) {\n            // Insert at the end\n            this.stopOffsets.push(stopOffset);\n            this.classNames.push(className);\n            this.metadata.push(metadata);\n        }\n        else {\n            // Find the insertion position for `stopOffset`\n            for (let i = 0; i < this.count; i++) {\n                if (this.stopOffsets[i] >= stopOffset) {\n                    this.stopOffsets.splice(i, 0, stopOffset);\n                    this.classNames.splice(i, 0, className);\n                    this.metadata.splice(i, 0, metadata);\n                    break;\n                }\n            }\n        }\n        this.count++;\n        return;\n    }\n}\nexport class LineDecorationsNormalizer {\n    /**\n     * Normalize line decorations. Overlapping decorations will generate multiple segments\n     */\n    static normalize(lineContent, lineDecorations) {\n        if (lineDecorations.length === 0) {\n            return [];\n        }\n        const result = [];\n        const stack = new Stack();\n        let nextStartOffset = 0;\n        for (let i = 0, len = lineDecorations.length; i < len; i++) {\n            const d = lineDecorations[i];\n            let startColumn = d.startColumn;\n            let endColumn = d.endColumn;\n            const className = d.className;\n            const metadata = (d.type === 1 /* InlineDecorationType.Before */\n                ? 2 /* LinePartMetadata.PSEUDO_BEFORE */\n                : d.type === 2 /* InlineDecorationType.After */\n                    ? 4 /* LinePartMetadata.PSEUDO_AFTER */\n                    : 0);\n            // If the position would end up in the middle of a high-low surrogate pair, we move it to before the pair\n            if (startColumn > 1) {\n                const charCodeBefore = lineContent.charCodeAt(startColumn - 2);\n                if (strings.isHighSurrogate(charCodeBefore)) {\n                    startColumn--;\n                }\n            }\n            if (endColumn > 1) {\n                const charCodeBefore = lineContent.charCodeAt(endColumn - 2);\n                if (strings.isHighSurrogate(charCodeBefore)) {\n                    endColumn--;\n                }\n            }\n            const currentStartOffset = startColumn - 1;\n            const currentEndOffset = endColumn - 2;\n            nextStartOffset = stack.consumeLowerThan(currentStartOffset, nextStartOffset, result);\n            if (stack.count === 0) {\n                nextStartOffset = currentStartOffset;\n            }\n            stack.insert(currentEndOffset, className, metadata);\n        }\n        stack.consumeLowerThan(1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, nextStartOffset, result);\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class LinePart {\n    constructor(\n    /**\n     * last char index of this token (not inclusive).\n     */\n    endIndex, type, metadata, containsRTL) {\n        this.endIndex = endIndex;\n        this.type = type;\n        this.metadata = metadata;\n        this.containsRTL = containsRTL;\n        this._linePartBrand = undefined;\n    }\n    isWhitespace() {\n        return (this.metadata & 1 /* LinePartMetadata.IS_WHITESPACE_MASK */ ? true : false);\n    }\n    isPseudoAfter() {\n        return (this.metadata & 4 /* LinePartMetadata.PSEUDO_AFTER_MASK */ ? true : false);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { StringBuilder } from '../core/stringBuilder.js';\nimport { LineDecoration, LineDecorationsNormalizer } from './lineDecorations.js';\nimport { LinePart } from './linePart.js';\nexport class LineRange {\n    constructor(startIndex, endIndex) {\n        this.startOffset = startIndex;\n        this.endOffset = endIndex;\n    }\n    equals(otherLineRange) {\n        return this.startOffset === otherLineRange.startOffset\n            && this.endOffset === otherLineRange.endOffset;\n    }\n}\nexport class RenderLineInput {\n    constructor(useMonospaceOptimizations, canUseHalfwidthRightwardsArrow, lineContent, continuesWithWrappedLine, isBasicASCII, containsRTL, fauxIndentLength, lineTokens, lineDecorations, tabSize, startVisibleColumn, spaceWidth, middotWidth, wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, selectionsOnLine) {\n        this.useMonospaceOptimizations = useMonospaceOptimizations;\n        this.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n        this.lineContent = lineContent;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.isBasicASCII = isBasicASCII;\n        this.containsRTL = containsRTL;\n        this.fauxIndentLength = fauxIndentLength;\n        this.lineTokens = lineTokens;\n        this.lineDecorations = lineDecorations.sort(LineDecoration.compare);\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n        this.spaceWidth = spaceWidth;\n        this.stopRenderingLineAfter = stopRenderingLineAfter;\n        this.renderWhitespace = (renderWhitespace === 'all'\n            ? 4 /* RenderWhitespace.All */\n            : renderWhitespace === 'boundary'\n                ? 1 /* RenderWhitespace.Boundary */\n                : renderWhitespace === 'selection'\n                    ? 2 /* RenderWhitespace.Selection */\n                    : renderWhitespace === 'trailing'\n                        ? 3 /* RenderWhitespace.Trailing */\n                        : 0 /* RenderWhitespace.None */);\n        this.renderControlCharacters = renderControlCharacters;\n        this.fontLigatures = fontLigatures;\n        this.selectionsOnLine = selectionsOnLine && selectionsOnLine.sort((a, b) => a.startOffset < b.startOffset ? -1 : 1);\n        const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n        const middotDiff = Math.abs(middotWidth - spaceWidth);\n        if (wsmiddotDiff < middotDiff) {\n            this.renderSpaceWidth = wsmiddotWidth;\n            this.renderSpaceCharCode = 0x2E31; // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        }\n        else {\n            this.renderSpaceWidth = middotWidth;\n            this.renderSpaceCharCode = 0xB7; // U+00B7 - MIDDLE DOT\n        }\n    }\n    sameSelection(otherSelections) {\n        if (this.selectionsOnLine === null) {\n            return otherSelections === null;\n        }\n        if (otherSelections === null) {\n            return false;\n        }\n        if (otherSelections.length !== this.selectionsOnLine.length) {\n            return false;\n        }\n        for (let i = 0; i < this.selectionsOnLine.length; i++) {\n            if (!this.selectionsOnLine[i].equals(otherSelections[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    equals(other) {\n        return (this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineContent === other.lineContent\n            && this.continuesWithWrappedLine === other.continuesWithWrappedLine\n            && this.isBasicASCII === other.isBasicASCII\n            && this.containsRTL === other.containsRTL\n            && this.fauxIndentLength === other.fauxIndentLength\n            && this.tabSize === other.tabSize\n            && this.startVisibleColumn === other.startVisibleColumn\n            && this.spaceWidth === other.spaceWidth\n            && this.renderSpaceWidth === other.renderSpaceWidth\n            && this.renderSpaceCharCode === other.renderSpaceCharCode\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.fontLigatures === other.fontLigatures\n            && LineDecoration.equalsArr(this.lineDecorations, other.lineDecorations)\n            && this.lineTokens.equals(other.lineTokens)\n            && this.sameSelection(other.selectionsOnLine));\n    }\n}\nexport class DomPosition {\n    constructor(partIndex, charIndex) {\n        this.partIndex = partIndex;\n        this.charIndex = charIndex;\n    }\n}\n/**\n * Provides a both direction mapping between a line's character and its rendered position.\n */\nexport class CharacterMapping {\n    static getPartIndex(partData) {\n        return (partData & 4294901760 /* CharacterMappingConstants.PART_INDEX_MASK */) >>> 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */;\n    }\n    static getCharIndex(partData) {\n        return (partData & 65535 /* CharacterMappingConstants.CHAR_INDEX_MASK */) >>> 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */;\n    }\n    constructor(length, partCount) {\n        this.length = length;\n        this._data = new Uint32Array(this.length);\n        this._horizontalOffset = new Uint32Array(this.length);\n    }\n    setColumnInfo(column, partIndex, charIndex, horizontalOffset) {\n        const partData = ((partIndex << 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */)\n            | (charIndex << 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */)) >>> 0;\n        this._data[column - 1] = partData;\n        this._horizontalOffset[column - 1] = horizontalOffset;\n    }\n    getHorizontalOffset(column) {\n        if (this._horizontalOffset.length === 0) {\n            // No characters on this line\n            return 0;\n        }\n        return this._horizontalOffset[column - 1];\n    }\n    charOffsetToPartData(charOffset) {\n        if (this.length === 0) {\n            return 0;\n        }\n        if (charOffset < 0) {\n            return this._data[0];\n        }\n        if (charOffset >= this.length) {\n            return this._data[this.length - 1];\n        }\n        return this._data[charOffset];\n    }\n    getDomPosition(column) {\n        const partData = this.charOffsetToPartData(column - 1);\n        const partIndex = CharacterMapping.getPartIndex(partData);\n        const charIndex = CharacterMapping.getCharIndex(partData);\n        return new DomPosition(partIndex, charIndex);\n    }\n    getColumn(domPosition, partLength) {\n        const charOffset = this.partDataToCharOffset(domPosition.partIndex, partLength, domPosition.charIndex);\n        return charOffset + 1;\n    }\n    partDataToCharOffset(partIndex, partLength, charIndex) {\n        if (this.length === 0) {\n            return 0;\n        }\n        const searchEntry = ((partIndex << 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */)\n            | (charIndex << 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */)) >>> 0;\n        let min = 0;\n        let max = this.length - 1;\n        while (min + 1 < max) {\n            const mid = ((min + max) >>> 1);\n            const midEntry = this._data[mid];\n            if (midEntry === searchEntry) {\n                return mid;\n            }\n            else if (midEntry > searchEntry) {\n                max = mid;\n            }\n            else {\n                min = mid;\n            }\n        }\n        if (min === max) {\n            return min;\n        }\n        const minEntry = this._data[min];\n        const maxEntry = this._data[max];\n        if (minEntry === searchEntry) {\n            return min;\n        }\n        if (maxEntry === searchEntry) {\n            return max;\n        }\n        const minPartIndex = CharacterMapping.getPartIndex(minEntry);\n        const minCharIndex = CharacterMapping.getCharIndex(minEntry);\n        const maxPartIndex = CharacterMapping.getPartIndex(maxEntry);\n        let maxCharIndex;\n        if (minPartIndex !== maxPartIndex) {\n            // sitting between parts\n            maxCharIndex = partLength;\n        }\n        else {\n            maxCharIndex = CharacterMapping.getCharIndex(maxEntry);\n        }\n        const minEntryDistance = charIndex - minCharIndex;\n        const maxEntryDistance = maxCharIndex - charIndex;\n        if (minEntryDistance <= maxEntryDistance) {\n            return min;\n        }\n        return max;\n    }\n}\nexport class RenderLineOutput {\n    constructor(characterMapping, containsRTL, containsForeignElements) {\n        this._renderLineOutputBrand = undefined;\n        this.characterMapping = characterMapping;\n        this.containsRTL = containsRTL;\n        this.containsForeignElements = containsForeignElements;\n    }\n}\nexport function renderViewLine(input, sb) {\n    if (input.lineContent.length === 0) {\n        if (input.lineDecorations.length > 0) {\n            // This line is empty, but it contains inline decorations\n            sb.appendString(`<span>`);\n            let beforeCount = 0;\n            let afterCount = 0;\n            let containsForeignElements = 0 /* ForeignElementType.None */;\n            for (const lineDecoration of input.lineDecorations) {\n                if (lineDecoration.type === 1 /* InlineDecorationType.Before */ || lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                    sb.appendString(`<span class=\"`);\n                    sb.appendString(lineDecoration.className);\n                    sb.appendString(`\"></span>`);\n                    if (lineDecoration.type === 1 /* InlineDecorationType.Before */) {\n                        containsForeignElements |= 1 /* ForeignElementType.Before */;\n                        beforeCount++;\n                    }\n                    if (lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                        containsForeignElements |= 2 /* ForeignElementType.After */;\n                        afterCount++;\n                    }\n                }\n            }\n            sb.appendString(`</span>`);\n            const characterMapping = new CharacterMapping(1, beforeCount + afterCount);\n            characterMapping.setColumnInfo(1, beforeCount, 0, 0);\n            return new RenderLineOutput(characterMapping, false, containsForeignElements);\n        }\n        // completely empty line\n        sb.appendString('<span><span></span></span>');\n        return new RenderLineOutput(new CharacterMapping(0, 0), false, 0 /* ForeignElementType.None */);\n    }\n    return _renderLine(resolveRenderLineInput(input), sb);\n}\nexport class RenderLineOutput2 {\n    constructor(characterMapping, html, containsRTL, containsForeignElements) {\n        this.characterMapping = characterMapping;\n        this.html = html;\n        this.containsRTL = containsRTL;\n        this.containsForeignElements = containsForeignElements;\n    }\n}\nexport function renderViewLine2(input) {\n    const sb = new StringBuilder(10000);\n    const out = renderViewLine(input, sb);\n    return new RenderLineOutput2(out.characterMapping, sb.build(), out.containsRTL, out.containsForeignElements);\n}\nclass ResolvedRenderLineInput {\n    constructor(fontIsMonospace, canUseHalfwidthRightwardsArrow, lineContent, len, isOverflowing, overflowingCharCount, parts, containsForeignElements, fauxIndentLength, tabSize, startVisibleColumn, containsRTL, spaceWidth, renderSpaceCharCode, renderWhitespace, renderControlCharacters) {\n        this.fontIsMonospace = fontIsMonospace;\n        this.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n        this.lineContent = lineContent;\n        this.len = len;\n        this.isOverflowing = isOverflowing;\n        this.overflowingCharCount = overflowingCharCount;\n        this.parts = parts;\n        this.containsForeignElements = containsForeignElements;\n        this.fauxIndentLength = fauxIndentLength;\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n        this.containsRTL = containsRTL;\n        this.spaceWidth = spaceWidth;\n        this.renderSpaceCharCode = renderSpaceCharCode;\n        this.renderWhitespace = renderWhitespace;\n        this.renderControlCharacters = renderControlCharacters;\n        //\n    }\n}\nfunction resolveRenderLineInput(input) {\n    const lineContent = input.lineContent;\n    let isOverflowing;\n    let overflowingCharCount;\n    let len;\n    if (input.stopRenderingLineAfter !== -1 && input.stopRenderingLineAfter < lineContent.length) {\n        isOverflowing = true;\n        overflowingCharCount = lineContent.length - input.stopRenderingLineAfter;\n        len = input.stopRenderingLineAfter;\n    }\n    else {\n        isOverflowing = false;\n        overflowingCharCount = 0;\n        len = lineContent.length;\n    }\n    let tokens = transformAndRemoveOverflowing(lineContent, input.containsRTL, input.lineTokens, input.fauxIndentLength, len);\n    if (input.renderControlCharacters && !input.isBasicASCII) {\n        // Calling `extractControlCharacters` before adding (possibly empty) line parts\n        // for inline decorations. `extractControlCharacters` removes empty line parts.\n        tokens = extractControlCharacters(lineContent, tokens);\n    }\n    if (input.renderWhitespace === 4 /* RenderWhitespace.All */ ||\n        input.renderWhitespace === 1 /* RenderWhitespace.Boundary */ ||\n        (input.renderWhitespace === 2 /* RenderWhitespace.Selection */ && !!input.selectionsOnLine) ||\n        (input.renderWhitespace === 3 /* RenderWhitespace.Trailing */ && !input.continuesWithWrappedLine)) {\n        tokens = _applyRenderWhitespace(input, lineContent, len, tokens);\n    }\n    let containsForeignElements = 0 /* ForeignElementType.None */;\n    if (input.lineDecorations.length > 0) {\n        for (let i = 0, len = input.lineDecorations.length; i < len; i++) {\n            const lineDecoration = input.lineDecorations[i];\n            if (lineDecoration.type === 3 /* InlineDecorationType.RegularAffectingLetterSpacing */) {\n                // Pretend there are foreign elements... although not 100% accurate.\n                containsForeignElements |= 1 /* ForeignElementType.Before */;\n            }\n            else if (lineDecoration.type === 1 /* InlineDecorationType.Before */) {\n                containsForeignElements |= 1 /* ForeignElementType.Before */;\n            }\n            else if (lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                containsForeignElements |= 2 /* ForeignElementType.After */;\n            }\n        }\n        tokens = _applyInlineDecorations(lineContent, len, tokens, input.lineDecorations);\n    }\n    if (!input.containsRTL) {\n        // We can never split RTL text, as it ruins the rendering\n        tokens = splitLargeTokens(lineContent, tokens, !input.isBasicASCII || input.fontLigatures);\n    }\n    return new ResolvedRenderLineInput(input.useMonospaceOptimizations, input.canUseHalfwidthRightwardsArrow, lineContent, len, isOverflowing, overflowingCharCount, tokens, containsForeignElements, input.fauxIndentLength, input.tabSize, input.startVisibleColumn, input.containsRTL, input.spaceWidth, input.renderSpaceCharCode, input.renderWhitespace, input.renderControlCharacters);\n}\n/**\n * In the rendering phase, characters are always looped until token.endIndex.\n * Ensure that all tokens end before `len` and the last one ends precisely at `len`.\n */\nfunction transformAndRemoveOverflowing(lineContent, lineContainsRTL, tokens, fauxIndentLength, len) {\n    const result = [];\n    let resultLen = 0;\n    // The faux indent part of the line should have no token type\n    if (fauxIndentLength > 0) {\n        result[resultLen++] = new LinePart(fauxIndentLength, '', 0, false);\n    }\n    let startOffset = fauxIndentLength;\n    for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n        const endIndex = tokens.getEndOffset(tokenIndex);\n        if (endIndex <= fauxIndentLength) {\n            // The faux indent part of the line should have no token type\n            continue;\n        }\n        const type = tokens.getClassName(tokenIndex);\n        if (endIndex >= len) {\n            const tokenContainsRTL = (lineContainsRTL ? strings.containsRTL(lineContent.substring(startOffset, len)) : false);\n            result[resultLen++] = new LinePart(len, type, 0, tokenContainsRTL);\n            break;\n        }\n        const tokenContainsRTL = (lineContainsRTL ? strings.containsRTL(lineContent.substring(startOffset, endIndex)) : false);\n        result[resultLen++] = new LinePart(endIndex, type, 0, tokenContainsRTL);\n        startOffset = endIndex;\n    }\n    return result;\n}\n/**\n * See https://github.com/microsoft/vscode/issues/6885.\n * It appears that having very large spans causes very slow reading of character positions.\n * So here we try to avoid that.\n */\nfunction splitLargeTokens(lineContent, tokens, onlyAtSpaces) {\n    let lastTokenEndIndex = 0;\n    const result = [];\n    let resultLen = 0;\n    if (onlyAtSpaces) {\n        // Split only at spaces => we need to walk each character\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const token = tokens[i];\n            const tokenEndIndex = token.endIndex;\n            if (lastTokenEndIndex + 50 /* Constants.LongToken */ < tokenEndIndex) {\n                const tokenType = token.type;\n                const tokenMetadata = token.metadata;\n                const tokenContainsRTL = token.containsRTL;\n                let lastSpaceOffset = -1;\n                let currTokenStart = lastTokenEndIndex;\n                for (let j = lastTokenEndIndex; j < tokenEndIndex; j++) {\n                    if (lineContent.charCodeAt(j) === 32 /* CharCode.Space */) {\n                        lastSpaceOffset = j;\n                    }\n                    if (lastSpaceOffset !== -1 && j - currTokenStart >= 50 /* Constants.LongToken */) {\n                        // Split at `lastSpaceOffset` + 1\n                        result[resultLen++] = new LinePart(lastSpaceOffset + 1, tokenType, tokenMetadata, tokenContainsRTL);\n                        currTokenStart = lastSpaceOffset + 1;\n                        lastSpaceOffset = -1;\n                    }\n                }\n                if (currTokenStart !== tokenEndIndex) {\n                    result[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n                }\n            }\n            else {\n                result[resultLen++] = token;\n            }\n            lastTokenEndIndex = tokenEndIndex;\n        }\n    }\n    else {\n        // Split anywhere => we don't need to walk each character\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const token = tokens[i];\n            const tokenEndIndex = token.endIndex;\n            const diff = (tokenEndIndex - lastTokenEndIndex);\n            if (diff > 50 /* Constants.LongToken */) {\n                const tokenType = token.type;\n                const tokenMetadata = token.metadata;\n                const tokenContainsRTL = token.containsRTL;\n                const piecesCount = Math.ceil(diff / 50 /* Constants.LongToken */);\n                for (let j = 1; j < piecesCount; j++) {\n                    const pieceEndIndex = lastTokenEndIndex + (j * 50 /* Constants.LongToken */);\n                    result[resultLen++] = new LinePart(pieceEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n                }\n                result[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n            }\n            else {\n                result[resultLen++] = token;\n            }\n            lastTokenEndIndex = tokenEndIndex;\n        }\n    }\n    return result;\n}\nfunction isControlCharacter(charCode) {\n    if (charCode < 32) {\n        return (charCode !== 9 /* CharCode.Tab */);\n    }\n    if (charCode === 127) {\n        // DEL\n        return true;\n    }\n    if ((charCode >= 0x202A && charCode <= 0x202E)\n        || (charCode >= 0x2066 && charCode <= 0x2069)\n        || (charCode >= 0x200E && charCode <= 0x200F)\n        || charCode === 0x061C) {\n        // Unicode Directional Formatting Characters\n        // LRE\tU+202A\tLEFT-TO-RIGHT EMBEDDING\n        // RLE\tU+202B\tRIGHT-TO-LEFT EMBEDDING\n        // PDF\tU+202C\tPOP DIRECTIONAL FORMATTING\n        // LRO\tU+202D\tLEFT-TO-RIGHT OVERRIDE\n        // RLO\tU+202E\tRIGHT-TO-LEFT OVERRIDE\n        // LRI\tU+2066\tLEFT-TO-RIGHT ISOLATE\n        // RLI\tU+2067\tRIGHT-TO-LEFT ISOLATE\n        // FSI\tU+2068\tFIRST STRONG ISOLATE\n        // PDI\tU+2069\tPOP DIRECTIONAL ISOLATE\n        // LRM\tU+200E\tLEFT-TO-RIGHT MARK\n        // RLM\tU+200F\tRIGHT-TO-LEFT MARK\n        // ALM\tU+061C\tARABIC LETTER MARK\n        return true;\n    }\n    return false;\n}\nfunction extractControlCharacters(lineContent, tokens) {\n    const result = [];\n    let lastLinePart = new LinePart(0, '', 0, false);\n    let charOffset = 0;\n    for (const token of tokens) {\n        const tokenEndIndex = token.endIndex;\n        for (; charOffset < tokenEndIndex; charOffset++) {\n            const charCode = lineContent.charCodeAt(charOffset);\n            if (isControlCharacter(charCode)) {\n                if (charOffset > lastLinePart.endIndex) {\n                    // emit previous part if it has text\n                    lastLinePart = new LinePart(charOffset, token.type, token.metadata, token.containsRTL);\n                    result.push(lastLinePart);\n                }\n                lastLinePart = new LinePart(charOffset + 1, 'mtkcontrol', token.metadata, false);\n                result.push(lastLinePart);\n            }\n        }\n        if (charOffset > lastLinePart.endIndex) {\n            // emit previous part if it has text\n            lastLinePart = new LinePart(tokenEndIndex, token.type, token.metadata, token.containsRTL);\n            result.push(lastLinePart);\n        }\n    }\n    return result;\n}\n/**\n * Whitespace is rendered by \"replacing\" tokens with a special-purpose `mtkw` type that is later recognized in the rendering phase.\n * Moreover, a token is created for every visual indent because on some fonts the glyphs used for rendering whitespace (&rarr; or &middot;) do not have the same width as &nbsp;.\n * The rendering phase will generate `style=\"width:...\"` for these tokens.\n */\nfunction _applyRenderWhitespace(input, lineContent, len, tokens) {\n    const continuesWithWrappedLine = input.continuesWithWrappedLine;\n    const fauxIndentLength = input.fauxIndentLength;\n    const tabSize = input.tabSize;\n    const startVisibleColumn = input.startVisibleColumn;\n    const useMonospaceOptimizations = input.useMonospaceOptimizations;\n    const selections = input.selectionsOnLine;\n    const onlyBoundary = (input.renderWhitespace === 1 /* RenderWhitespace.Boundary */);\n    const onlyTrailing = (input.renderWhitespace === 3 /* RenderWhitespace.Trailing */);\n    const generateLinePartForEachWhitespace = (input.renderSpaceWidth !== input.spaceWidth);\n    const result = [];\n    let resultLen = 0;\n    let tokenIndex = 0;\n    let tokenType = tokens[tokenIndex].type;\n    let tokenContainsRTL = tokens[tokenIndex].containsRTL;\n    let tokenEndIndex = tokens[tokenIndex].endIndex;\n    const tokensLength = tokens.length;\n    let lineIsEmptyOrWhitespace = false;\n    let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n    let lastNonWhitespaceIndex;\n    if (firstNonWhitespaceIndex === -1) {\n        lineIsEmptyOrWhitespace = true;\n        firstNonWhitespaceIndex = len;\n        lastNonWhitespaceIndex = len;\n    }\n    else {\n        lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n    }\n    let wasInWhitespace = false;\n    let currentSelectionIndex = 0;\n    let currentSelection = selections && selections[currentSelectionIndex];\n    let tmpIndent = startVisibleColumn % tabSize;\n    for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n        const chCode = lineContent.charCodeAt(charIndex);\n        if (currentSelection && charIndex >= currentSelection.endOffset) {\n            currentSelectionIndex++;\n            currentSelection = selections && selections[currentSelectionIndex];\n        }\n        let isInWhitespace;\n        if (charIndex < firstNonWhitespaceIndex || charIndex > lastNonWhitespaceIndex) {\n            // in leading or trailing whitespace\n            isInWhitespace = true;\n        }\n        else if (chCode === 9 /* CharCode.Tab */) {\n            // a tab character is rendered both in all and boundary cases\n            isInWhitespace = true;\n        }\n        else if (chCode === 32 /* CharCode.Space */) {\n            // hit a space character\n            if (onlyBoundary) {\n                // rendering only boundary whitespace\n                if (wasInWhitespace) {\n                    isInWhitespace = true;\n                }\n                else {\n                    const nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n                    isInWhitespace = (nextChCode === 32 /* CharCode.Space */ || nextChCode === 9 /* CharCode.Tab */);\n                }\n            }\n            else {\n                isInWhitespace = true;\n            }\n        }\n        else {\n            isInWhitespace = false;\n        }\n        // If rendering whitespace on selection, check that the charIndex falls within a selection\n        if (isInWhitespace && selections) {\n            isInWhitespace = !!currentSelection && currentSelection.startOffset <= charIndex && currentSelection.endOffset > charIndex;\n        }\n        // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n        if (isInWhitespace && onlyTrailing) {\n            isInWhitespace = lineIsEmptyOrWhitespace || charIndex > lastNonWhitespaceIndex;\n        }\n        if (isInWhitespace && tokenContainsRTL) {\n            // If the token contains RTL text, breaking it up into multiple line parts\n            // to render whitespace might affect the browser's bidi layout.\n            //\n            // We render whitespace in such tokens only if the whitespace\n            // is the leading or the trailing whitespace of the line,\n            // which doesn't affect the browser's bidi layout.\n            if (charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex) {\n                isInWhitespace = false;\n            }\n        }\n        if (wasInWhitespace) {\n            // was in whitespace token\n            if (!isInWhitespace || (!useMonospaceOptimizations && tmpIndent >= tabSize)) {\n                // leaving whitespace token or entering a new indent\n                if (generateLinePartForEachWhitespace) {\n                    const lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n                    for (let i = lastEndIndex + 1; i <= charIndex; i++) {\n                        result[resultLen++] = new LinePart(i, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n                    }\n                }\n                else {\n                    result[resultLen++] = new LinePart(charIndex, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n                }\n                tmpIndent = tmpIndent % tabSize;\n            }\n        }\n        else {\n            // was in regular token\n            if (charIndex === tokenEndIndex || (isInWhitespace && charIndex > fauxIndentLength)) {\n                result[resultLen++] = new LinePart(charIndex, tokenType, 0, tokenContainsRTL);\n                tmpIndent = tmpIndent % tabSize;\n            }\n        }\n        if (chCode === 9 /* CharCode.Tab */) {\n            tmpIndent = tabSize;\n        }\n        else if (strings.isFullWidthCharacter(chCode)) {\n            tmpIndent += 2;\n        }\n        else {\n            tmpIndent++;\n        }\n        wasInWhitespace = isInWhitespace;\n        while (charIndex === tokenEndIndex) {\n            tokenIndex++;\n            if (tokenIndex < tokensLength) {\n                tokenType = tokens[tokenIndex].type;\n                tokenContainsRTL = tokens[tokenIndex].containsRTL;\n                tokenEndIndex = tokens[tokenIndex].endIndex;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    let generateWhitespace = false;\n    if (wasInWhitespace) {\n        // was in whitespace token\n        if (continuesWithWrappedLine && onlyBoundary) {\n            const lastCharCode = (len > 0 ? lineContent.charCodeAt(len - 1) : 0 /* CharCode.Null */);\n            const prevCharCode = (len > 1 ? lineContent.charCodeAt(len - 2) : 0 /* CharCode.Null */);\n            const isSingleTrailingSpace = (lastCharCode === 32 /* CharCode.Space */ && (prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */));\n            if (!isSingleTrailingSpace) {\n                generateWhitespace = true;\n            }\n        }\n        else {\n            generateWhitespace = true;\n        }\n    }\n    if (generateWhitespace) {\n        if (generateLinePartForEachWhitespace) {\n            const lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n            for (let i = lastEndIndex + 1; i <= len; i++) {\n                result[resultLen++] = new LinePart(i, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n            }\n        }\n        else {\n            result[resultLen++] = new LinePart(len, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n        }\n    }\n    else {\n        result[resultLen++] = new LinePart(len, tokenType, 0, tokenContainsRTL);\n    }\n    return result;\n}\n/**\n * Inline decorations are \"merged\" on top of tokens.\n * Special care must be taken when multiple inline decorations are at play and they overlap.\n */\nfunction _applyInlineDecorations(lineContent, len, tokens, _lineDecorations) {\n    _lineDecorations.sort(LineDecoration.compare);\n    const lineDecorations = LineDecorationsNormalizer.normalize(lineContent, _lineDecorations);\n    const lineDecorationsLen = lineDecorations.length;\n    let lineDecorationIndex = 0;\n    const result = [];\n    let resultLen = 0;\n    let lastResultEndIndex = 0;\n    for (let tokenIndex = 0, len = tokens.length; tokenIndex < len; tokenIndex++) {\n        const token = tokens[tokenIndex];\n        const tokenEndIndex = token.endIndex;\n        const tokenType = token.type;\n        const tokenMetadata = token.metadata;\n        const tokenContainsRTL = token.containsRTL;\n        while (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset < tokenEndIndex) {\n            const lineDecoration = lineDecorations[lineDecorationIndex];\n            if (lineDecoration.startOffset > lastResultEndIndex) {\n                lastResultEndIndex = lineDecoration.startOffset;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n            }\n            if (lineDecoration.endOffset + 1 <= tokenEndIndex) {\n                // This line decoration ends before this token ends\n                lastResultEndIndex = lineDecoration.endOffset + 1;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata, tokenContainsRTL);\n                lineDecorationIndex++;\n            }\n            else {\n                // This line decoration continues on to the next token\n                lastResultEndIndex = tokenEndIndex;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata, tokenContainsRTL);\n                break;\n            }\n        }\n        if (tokenEndIndex > lastResultEndIndex) {\n            lastResultEndIndex = tokenEndIndex;\n            result[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n        }\n    }\n    const lastTokenEndIndex = tokens[tokens.length - 1].endIndex;\n    if (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n        while (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n            const lineDecoration = lineDecorations[lineDecorationIndex];\n            result[resultLen++] = new LinePart(lastResultEndIndex, lineDecoration.className, lineDecoration.metadata, false);\n            lineDecorationIndex++;\n        }\n    }\n    return result;\n}\n/**\n * This function is on purpose not split up into multiple functions to allow runtime type inference (i.e. performance reasons).\n * Notice how all the needed data is fully resolved and passed in (i.e. no other calls).\n */\nfunction _renderLine(input, sb) {\n    const fontIsMonospace = input.fontIsMonospace;\n    const canUseHalfwidthRightwardsArrow = input.canUseHalfwidthRightwardsArrow;\n    const containsForeignElements = input.containsForeignElements;\n    const lineContent = input.lineContent;\n    const len = input.len;\n    const isOverflowing = input.isOverflowing;\n    const overflowingCharCount = input.overflowingCharCount;\n    const parts = input.parts;\n    const fauxIndentLength = input.fauxIndentLength;\n    const tabSize = input.tabSize;\n    const startVisibleColumn = input.startVisibleColumn;\n    const containsRTL = input.containsRTL;\n    const spaceWidth = input.spaceWidth;\n    const renderSpaceCharCode = input.renderSpaceCharCode;\n    const renderWhitespace = input.renderWhitespace;\n    const renderControlCharacters = input.renderControlCharacters;\n    const characterMapping = new CharacterMapping(len + 1, parts.length);\n    let lastCharacterMappingDefined = false;\n    let charIndex = 0;\n    let visibleColumn = startVisibleColumn;\n    let charOffsetInPart = 0; // the character offset in the current part\n    let charHorizontalOffset = 0; // the character horizontal position in terms of chars relative to line start\n    let partDisplacement = 0;\n    if (containsRTL) {\n        sb.appendString('<span dir=\"ltr\">');\n    }\n    else {\n        sb.appendString('<span>');\n    }\n    for (let partIndex = 0, tokensLen = parts.length; partIndex < tokensLen; partIndex++) {\n        const part = parts[partIndex];\n        const partEndIndex = part.endIndex;\n        const partType = part.type;\n        const partContainsRTL = part.containsRTL;\n        const partRendersWhitespace = (renderWhitespace !== 0 /* RenderWhitespace.None */ && part.isWhitespace());\n        const partRendersWhitespaceWithWidth = partRendersWhitespace && !fontIsMonospace && (partType === 'mtkw' /*only whitespace*/ || !containsForeignElements);\n        const partIsEmptyAndHasPseudoAfter = (charIndex === partEndIndex && part.isPseudoAfter());\n        charOffsetInPart = 0;\n        sb.appendString('<span ');\n        if (partContainsRTL) {\n            sb.appendString('style=\"unicode-bidi:isolate\" ');\n        }\n        sb.appendString('class=\"');\n        sb.appendString(partRendersWhitespaceWithWidth ? 'mtkz' : partType);\n        sb.appendASCIICharCode(34 /* CharCode.DoubleQuote */);\n        if (partRendersWhitespace) {\n            let partWidth = 0;\n            {\n                let _charIndex = charIndex;\n                let _visibleColumn = visibleColumn;\n                for (; _charIndex < partEndIndex; _charIndex++) {\n                    const charCode = lineContent.charCodeAt(_charIndex);\n                    const charWidth = (charCode === 9 /* CharCode.Tab */ ? (tabSize - (_visibleColumn % tabSize)) : 1) | 0;\n                    partWidth += charWidth;\n                    if (_charIndex >= fauxIndentLength) {\n                        _visibleColumn += charWidth;\n                    }\n                }\n            }\n            if (partRendersWhitespaceWithWidth) {\n                sb.appendString(' style=\"width:');\n                sb.appendString(String(spaceWidth * partWidth));\n                sb.appendString('px\"');\n            }\n            sb.appendASCIICharCode(62 /* CharCode.GreaterThan */);\n            for (; charIndex < partEndIndex; charIndex++) {\n                characterMapping.setColumnInfo(charIndex + 1, partIndex - partDisplacement, charOffsetInPart, charHorizontalOffset);\n                partDisplacement = 0;\n                const charCode = lineContent.charCodeAt(charIndex);\n                let producedCharacters;\n                let charWidth;\n                if (charCode === 9 /* CharCode.Tab */) {\n                    producedCharacters = (tabSize - (visibleColumn % tabSize)) | 0;\n                    charWidth = producedCharacters;\n                    if (!canUseHalfwidthRightwardsArrow || charWidth > 1) {\n                        sb.appendCharCode(0x2192); // RIGHTWARDS ARROW\n                    }\n                    else {\n                        sb.appendCharCode(0xFFEB); // HALFWIDTH RIGHTWARDS ARROW\n                    }\n                    for (let space = 2; space <= charWidth; space++) {\n                        sb.appendCharCode(0xA0); // &nbsp;\n                    }\n                }\n                else { // must be CharCode.Space\n                    producedCharacters = 2;\n                    charWidth = 1;\n                    sb.appendCharCode(renderSpaceCharCode); // &middot; or word separator middle dot\n                    sb.appendCharCode(0x200C); // ZERO WIDTH NON-JOINER\n                }\n                charOffsetInPart += producedCharacters;\n                charHorizontalOffset += charWidth;\n                if (charIndex >= fauxIndentLength) {\n                    visibleColumn += charWidth;\n                }\n            }\n        }\n        else {\n            sb.appendASCIICharCode(62 /* CharCode.GreaterThan */);\n            for (; charIndex < partEndIndex; charIndex++) {\n                characterMapping.setColumnInfo(charIndex + 1, partIndex - partDisplacement, charOffsetInPart, charHorizontalOffset);\n                partDisplacement = 0;\n                const charCode = lineContent.charCodeAt(charIndex);\n                let producedCharacters = 1;\n                let charWidth = 1;\n                switch (charCode) {\n                    case 9 /* CharCode.Tab */:\n                        producedCharacters = (tabSize - (visibleColumn % tabSize));\n                        charWidth = producedCharacters;\n                        for (let space = 1; space <= producedCharacters; space++) {\n                            sb.appendCharCode(0xA0); // &nbsp;\n                        }\n                        break;\n                    case 32 /* CharCode.Space */:\n                        sb.appendCharCode(0xA0); // &nbsp;\n                        break;\n                    case 60 /* CharCode.LessThan */:\n                        sb.appendString('&lt;');\n                        break;\n                    case 62 /* CharCode.GreaterThan */:\n                        sb.appendString('&gt;');\n                        break;\n                    case 38 /* CharCode.Ampersand */:\n                        sb.appendString('&amp;');\n                        break;\n                    case 0 /* CharCode.Null */:\n                        if (renderControlCharacters) {\n                            // See https://unicode-table.com/en/blocks/control-pictures/\n                            sb.appendCharCode(9216);\n                        }\n                        else {\n                            sb.appendString('&#00;');\n                        }\n                        break;\n                    case 65279 /* CharCode.UTF8_BOM */:\n                    case 8232 /* CharCode.LINE_SEPARATOR */:\n                    case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n                    case 133 /* CharCode.NEXT_LINE */:\n                        sb.appendCharCode(0xFFFD);\n                        break;\n                    default:\n                        if (strings.isFullWidthCharacter(charCode)) {\n                            charWidth++;\n                        }\n                        // See https://unicode-table.com/en/blocks/control-pictures/\n                        if (renderControlCharacters && charCode < 32) {\n                            sb.appendCharCode(9216 + charCode);\n                        }\n                        else if (renderControlCharacters && charCode === 127) {\n                            // DEL\n                            sb.appendCharCode(9249);\n                        }\n                        else if (renderControlCharacters && isControlCharacter(charCode)) {\n                            sb.appendString('[U+');\n                            sb.appendString(to4CharHex(charCode));\n                            sb.appendString(']');\n                            producedCharacters = 8;\n                            charWidth = producedCharacters;\n                        }\n                        else {\n                            sb.appendCharCode(charCode);\n                        }\n                }\n                charOffsetInPart += producedCharacters;\n                charHorizontalOffset += charWidth;\n                if (charIndex >= fauxIndentLength) {\n                    visibleColumn += charWidth;\n                }\n            }\n        }\n        if (partIsEmptyAndHasPseudoAfter) {\n            partDisplacement++;\n        }\n        else {\n            partDisplacement = 0;\n        }\n        if (charIndex >= len && !lastCharacterMappingDefined && part.isPseudoAfter()) {\n            lastCharacterMappingDefined = true;\n            characterMapping.setColumnInfo(charIndex + 1, partIndex, charOffsetInPart, charHorizontalOffset);\n        }\n        sb.appendString('</span>');\n    }\n    if (!lastCharacterMappingDefined) {\n        // When getting client rects for the last character, we will position the\n        // text range at the end of the span, insteaf of at the beginning of next span\n        characterMapping.setColumnInfo(len + 1, parts.length - 1, charOffsetInPart, charHorizontalOffset);\n    }\n    if (isOverflowing) {\n        sb.appendString('<span class=\"mtkoverflow\">');\n        sb.appendString(nls.localize('showMore', \"Show more ({0})\", renderOverflowingCharCount(overflowingCharCount)));\n        sb.appendString('</span>');\n    }\n    sb.appendString('</span>');\n    return new RenderLineOutput(characterMapping, containsRTL, containsForeignElements);\n}\nfunction to4CharHex(n) {\n    return n.toString(16).toUpperCase().padStart(4, '0');\n}\nfunction renderOverflowingCharCount(n) {\n    if (n < 1024) {\n        return nls.localize('overflow.chars', \"{0} chars\", n);\n    }\n    if (n < 1024 * 1024) {\n        return `${(n / 1024).toFixed(1)} KB`;\n    }\n    return `${(n / 1024 / 1024).toFixed(1)} MB`;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\n/**\n * Contains all data needed to render at a specific viewport.\n */\nexport class ViewportData {\n    constructor(selections, partialData, whitespaceViewportData, model) {\n        this.selections = selections;\n        this.startLineNumber = partialData.startLineNumber | 0;\n        this.endLineNumber = partialData.endLineNumber | 0;\n        this.relativeVerticalOffset = partialData.relativeVerticalOffset;\n        this.bigNumbersDelta = partialData.bigNumbersDelta | 0;\n        this.whitespaceViewportData = whitespaceViewportData;\n        this._model = model;\n        this.visibleRange = new Range(partialData.startLineNumber, this._model.getLineMinColumn(partialData.startLineNumber), partialData.endLineNumber, this._model.getLineMaxColumn(partialData.endLineNumber));\n    }\n    getViewLineRenderingData(lineNumber) {\n        return this._model.getViewportViewLineRenderingData(this.visibleRange, lineNumber);\n    }\n    getDecorationsInViewport() {\n        return this._model.getDecorationsInViewport(this.visibleRange);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../base/common/strings.js';\nimport { Range } from './core/range.js';\nexport class Viewport {\n    constructor(top, left, width, height) {\n        this._viewportBrand = undefined;\n        this.top = top | 0;\n        this.left = left | 0;\n        this.width = width | 0;\n        this.height = height | 0;\n    }\n}\nexport class MinimapLinesRenderingData {\n    constructor(tabSize, data) {\n        this.tabSize = tabSize;\n        this.data = data;\n    }\n}\nexport class ViewLineData {\n    constructor(content, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens, inlineDecorations) {\n        this._viewLineDataBrand = undefined;\n        this.content = content;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.minColumn = minColumn;\n        this.maxColumn = maxColumn;\n        this.startVisibleColumn = startVisibleColumn;\n        this.tokens = tokens;\n        this.inlineDecorations = inlineDecorations;\n    }\n}\nexport class ViewLineRenderingData {\n    constructor(minColumn, maxColumn, content, continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, tokens, inlineDecorations, tabSize, startVisibleColumn) {\n        this.minColumn = minColumn;\n        this.maxColumn = maxColumn;\n        this.content = content;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\n        this.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\n        this.tokens = tokens;\n        this.inlineDecorations = inlineDecorations;\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n    }\n    static isBasicASCII(lineContent, mightContainNonBasicASCII) {\n        if (mightContainNonBasicASCII) {\n            return strings.isBasicASCII(lineContent);\n        }\n        return true;\n    }\n    static containsRTL(lineContent, isBasicASCII, mightContainRTL) {\n        if (!isBasicASCII && mightContainRTL) {\n            return strings.containsRTL(lineContent);\n        }\n        return false;\n    }\n}\nexport class InlineDecoration {\n    constructor(range, inlineClassName, type) {\n        this.range = range;\n        this.inlineClassName = inlineClassName;\n        this.type = type;\n    }\n}\nexport class SingleLineInlineDecoration {\n    constructor(startOffset, endOffset, inlineClassName, inlineClassNameAffectsLetterSpacing) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.inlineClassName = inlineClassName;\n        this.inlineClassNameAffectsLetterSpacing = inlineClassNameAffectsLetterSpacing;\n    }\n    toInlineDecoration(lineNumber) {\n        return new InlineDecoration(new Range(lineNumber, this.startOffset + 1, lineNumber, this.endOffset + 1), this.inlineClassName, this.inlineClassNameAffectsLetterSpacing ? 3 /* InlineDecorationType.RegularAffectingLetterSpacing */ : 0 /* InlineDecorationType.Regular */);\n    }\n}\nexport class ViewModelDecoration {\n    constructor(range, options) {\n        this._viewModelDecorationBrand = undefined;\n        this.range = range;\n        this.options = options;\n    }\n}\nexport class OverviewRulerDecorationsGroup {\n    constructor(color, zIndex, \n    /**\n     * Decorations are encoded in a number array using the following scheme:\n     *  - 3*i = lane\n     *  - 3*i+1 = startLineNumber\n     *  - 3*i+2 = endLineNumber\n     */\n    data) {\n        this.color = color;\n        this.zIndex = zIndex;\n        this.data = data;\n    }\n    static cmp(a, b) {\n        if (a.zIndex === b.zIndex) {\n            if (a.color < b.color) {\n                return -1;\n            }\n            if (a.color > b.color) {\n                return 1;\n            }\n            return 0;\n        }\n        return a.zIndex - b.zIndex;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, markAsSingleton } from '../../../base/common/lifecycle.js';\nimport { RGBA8 } from '../core/rgba.js';\nimport { TokenizationRegistry } from '../languages.js';\nclass MinimapTokensColorTracker extends Disposable {\n    static getInstance() {\n        if (!this._INSTANCE) {\n            this._INSTANCE = markAsSingleton(new MinimapTokensColorTracker());\n        }\n        return this._INSTANCE;\n    }\n    constructor() {\n        super();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._updateColorMap();\n        this._register(TokenizationRegistry.onDidChange(e => {\n            if (e.changedColorMap) {\n                this._updateColorMap();\n            }\n        }));\n    }\n    _updateColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        if (!colorMap) {\n            this._colors = [RGBA8.Empty];\n            this._backgroundIsLight = true;\n            return;\n        }\n        this._colors = [RGBA8.Empty];\n        for (let colorId = 1; colorId < colorMap.length; colorId++) {\n            const source = colorMap[colorId].rgba;\n            // Use a VM friendly data-type\n            this._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n        }\n        const backgroundLuminosity = colorMap[2 /* ColorId.DefaultBackground */].getRelativeLuminance();\n        this._backgroundIsLight = backgroundLuminosity >= 0.5;\n        this._onDidChange.fire(undefined);\n    }\n    getColor(colorId) {\n        if (colorId < 1 || colorId >= this._colors.length) {\n            // background color (basically invisible)\n            colorId = 2 /* ColorId.DefaultBackground */;\n        }\n        return this._colors[colorId];\n    }\n    backgroundIsLight() {\n        return this._backgroundIsLight;\n    }\n}\nMinimapTokensColorTracker._INSTANCE = null;\nexport { MinimapTokensColorTracker };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { ModelLineProjectionData } from '../modelLineProjectionData.js';\nexport class MonospaceLineBreaksComputerFactory {\n    static create(options) {\n        return new MonospaceLineBreaksComputerFactory(options.get(127 /* EditorOption.wordWrapBreakBeforeCharacters */), options.get(126 /* EditorOption.wordWrapBreakAfterCharacters */));\n    }\n    constructor(breakBeforeChars, breakAfterChars) {\n        this.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak) {\n        const requests = [];\n        const injectedTexts = [];\n        const previousBreakingData = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n                previousBreakingData.push(previousLineBreakData);\n            },\n            finalize: () => {\n                const columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth;\n                const result = [];\n                for (let i = 0, len = requests.length; i < len; i++) {\n                    const injectedText = injectedTexts[i];\n                    const previousLineBreakData = previousBreakingData[i];\n                    if (previousLineBreakData && !previousLineBreakData.injectionOptions && !injectedText) {\n                        result[i] = createLineBreaksFromPreviousLineBreaks(this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak);\n                    }\n                    else {\n                        result[i] = createLineBreaks(this.classifier, requests[i], injectedText, tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak);\n                    }\n                }\n                arrPool1.length = 0;\n                arrPool2.length = 0;\n                return result;\n            }\n        };\n    }\n}\nclass WrappingCharacterClassifier extends CharacterClassifier {\n    constructor(BREAK_BEFORE, BREAK_AFTER) {\n        super(0 /* CharacterClass.NONE */);\n        for (let i = 0; i < BREAK_BEFORE.length; i++) {\n            this.set(BREAK_BEFORE.charCodeAt(i), 1 /* CharacterClass.BREAK_BEFORE */);\n        }\n        for (let i = 0; i < BREAK_AFTER.length; i++) {\n            this.set(BREAK_AFTER.charCodeAt(i), 2 /* CharacterClass.BREAK_AFTER */);\n        }\n    }\n    get(charCode) {\n        if (charCode >= 0 && charCode < 256) {\n            return this._asciiMap[charCode];\n        }\n        else {\n            // Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\n            // 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\n            // 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\n            // 3. Hiragana and Katakana (0x3040 -- 0x30FF)\n            if ((charCode >= 0x3040 && charCode <= 0x30FF)\n                || (charCode >= 0x3400 && charCode <= 0x4DBF)\n                || (charCode >= 0x4E00 && charCode <= 0x9FFF)) {\n                return 3 /* CharacterClass.BREAK_IDEOGRAPHIC */;\n            }\n            return (this._map.get(charCode) || this._defaultValue);\n        }\n    }\n}\nlet arrPool1 = [];\nlet arrPool2 = [];\nfunction createLineBreaksFromPreviousLineBreaks(classifier, previousBreakingData, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent, wordBreak) {\n    if (firstLineBreakColumn === -1) {\n        return null;\n    }\n    const len = lineText.length;\n    if (len <= 1) {\n        return null;\n    }\n    const isKeepAll = (wordBreak === 'keepAll');\n    const prevBreakingOffsets = previousBreakingData.breakOffsets;\n    const prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n    const breakingOffsets = arrPool1;\n    const breakingOffsetsVisibleColumn = arrPool2;\n    let breakingOffsetsCount = 0;\n    let lastBreakingOffset = 0;\n    let lastBreakingOffsetVisibleColumn = 0;\n    let breakingColumn = firstLineBreakColumn;\n    const prevLen = prevBreakingOffsets.length;\n    let prevIndex = 0;\n    if (prevIndex >= 0) {\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n        while (prevIndex + 1 < prevLen) {\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n            if (distance >= bestDistance) {\n                break;\n            }\n            bestDistance = distance;\n            prevIndex++;\n        }\n    }\n    while (prevIndex < prevLen) {\n        // Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\n        let prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\n        let prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\n        if (lastBreakingOffset > prevBreakOffset) {\n            prevBreakOffset = lastBreakingOffset;\n            prevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\n        }\n        let breakOffset = 0;\n        let breakOffsetVisibleColumn = 0;\n        let forcedBreakOffset = 0;\n        let forcedBreakOffsetVisibleColumn = 0;\n        // initially, we search as much as possible to the right (if it fits)\n        if (prevBreakOffsetVisibleColumn <= breakingColumn) {\n            let visibleColumn = prevBreakOffsetVisibleColumn;\n            let prevCharCode = prevBreakOffset === 0 ? 0 /* CharCode.Null */ : lineText.charCodeAt(prevBreakOffset - 1);\n            let prevCharCodeClass = prevBreakOffset === 0 ? 0 /* CharacterClass.NONE */ : classifier.get(prevCharCode);\n            let entireLineFits = true;\n            for (let i = prevBreakOffset; i < len; i++) {\n                const charStartOffset = i;\n                const charCode = lineText.charCodeAt(i);\n                let charCodeClass;\n                let charWidth;\n                if (strings.isHighSurrogate(charCode)) {\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                    i++;\n                    charCodeClass = 0 /* CharacterClass.NONE */;\n                    charWidth = 2;\n                }\n                else {\n                    charCodeClass = classifier.get(charCode);\n                    charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n                }\n                if (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n                    breakOffset = charStartOffset;\n                    breakOffsetVisibleColumn = visibleColumn;\n                }\n                visibleColumn += charWidth;\n                // check if adding character at `i` will go over the breaking column\n                if (visibleColumn > breakingColumn) {\n                    // We need to break at least before character at `i`:\n                    if (charStartOffset > lastBreakingOffset) {\n                        forcedBreakOffset = charStartOffset;\n                        forcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\n                    }\n                    else {\n                        // we need to advance at least by one character\n                        forcedBreakOffset = i + 1;\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\n                    }\n                    if (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n                        // Cannot break at `breakOffset` => reset it if it was set\n                        breakOffset = 0;\n                    }\n                    entireLineFits = false;\n                    break;\n                }\n                prevCharCode = charCode;\n                prevCharCodeClass = charCodeClass;\n            }\n            if (entireLineFits) {\n                // there is no more need to break => stop the outer loop!\n                if (breakingOffsetsCount > 0) {\n                    // Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\n                    breakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\n                    breakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\n                    breakingOffsetsCount++;\n                }\n                break;\n            }\n        }\n        if (breakOffset === 0) {\n            // must search left\n            let visibleColumn = prevBreakOffsetVisibleColumn;\n            let charCode = lineText.charCodeAt(prevBreakOffset);\n            let charCodeClass = classifier.get(charCode);\n            let hitATabCharacter = false;\n            for (let i = prevBreakOffset - 1; i >= lastBreakingOffset; i--) {\n                const charStartOffset = i + 1;\n                const prevCharCode = lineText.charCodeAt(i);\n                if (prevCharCode === 9 /* CharCode.Tab */) {\n                    // cannot determine the width of a tab when going backwards, so we must go forwards\n                    hitATabCharacter = true;\n                    break;\n                }\n                let prevCharCodeClass;\n                let prevCharWidth;\n                if (strings.isLowSurrogate(prevCharCode)) {\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                    i--;\n                    prevCharCodeClass = 0 /* CharacterClass.NONE */;\n                    prevCharWidth = 2;\n                }\n                else {\n                    prevCharCodeClass = classifier.get(prevCharCode);\n                    prevCharWidth = (strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1);\n                }\n                if (visibleColumn <= breakingColumn) {\n                    if (forcedBreakOffset === 0) {\n                        forcedBreakOffset = charStartOffset;\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\n                    }\n                    if (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\n                        // went too far!\n                        break;\n                    }\n                    if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n                        breakOffset = charStartOffset;\n                        breakOffsetVisibleColumn = visibleColumn;\n                        break;\n                    }\n                }\n                visibleColumn -= prevCharWidth;\n                charCode = prevCharCode;\n                charCodeClass = prevCharCodeClass;\n            }\n            if (breakOffset !== 0) {\n                const remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\n                if (remainingWidthOfNextLine <= tabSize) {\n                    const charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\n                    let charWidth;\n                    if (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\n                        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                        charWidth = 2;\n                    }\n                    else {\n                        charWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n                    }\n                    if (remainingWidthOfNextLine - charWidth < 0) {\n                        // it is not worth it to break at breakOffset, it just introduces an extra needless line!\n                        breakOffset = 0;\n                    }\n                }\n            }\n            if (hitATabCharacter) {\n                // cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\n                prevIndex--;\n                continue;\n            }\n        }\n        if (breakOffset === 0) {\n            // Could not find a good breaking point\n            breakOffset = forcedBreakOffset;\n            breakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\n        }\n        if (breakOffset <= lastBreakingOffset) {\n            // Make sure that we are advancing (at least one character)\n            const charCode = lineText.charCodeAt(lastBreakingOffset);\n            if (strings.isHighSurrogate(charCode)) {\n                // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                breakOffset = lastBreakingOffset + 2;\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\n            }\n            else {\n                breakOffset = lastBreakingOffset + 1;\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(charCode, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n            }\n        }\n        lastBreakingOffset = breakOffset;\n        breakingOffsets[breakingOffsetsCount] = breakOffset;\n        lastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\n        breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n        breakingOffsetsCount++;\n        breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n        while (prevIndex < 0 || (prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn)) {\n            prevIndex++;\n        }\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n        while (prevIndex + 1 < prevLen) {\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n            if (distance >= bestDistance) {\n                break;\n            }\n            bestDistance = distance;\n            prevIndex++;\n        }\n    }\n    if (breakingOffsetsCount === 0) {\n        return null;\n    }\n    // Doing here some object reuse which ends up helping a huge deal with GC pauses!\n    breakingOffsets.length = breakingOffsetsCount;\n    breakingOffsetsVisibleColumn.length = breakingOffsetsCount;\n    arrPool1 = previousBreakingData.breakOffsets;\n    arrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\n    previousBreakingData.breakOffsets = breakingOffsets;\n    previousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\n    previousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\n    return previousBreakingData;\n}\nfunction createLineBreaks(classifier, _lineText, injectedTexts, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent, wordBreak) {\n    const lineText = LineInjectedText.applyInjectedText(_lineText, injectedTexts);\n    let injectionOptions;\n    let injectionOffsets;\n    if (injectedTexts && injectedTexts.length > 0) {\n        injectionOptions = injectedTexts.map(t => t.options);\n        injectionOffsets = injectedTexts.map(text => text.column - 1);\n    }\n    else {\n        injectionOptions = null;\n        injectionOffsets = null;\n    }\n    if (firstLineBreakColumn === -1) {\n        if (!injectionOptions) {\n            return null;\n        }\n        // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n        // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n        return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    }\n    const len = lineText.length;\n    if (len <= 1) {\n        if (!injectionOptions) {\n            return null;\n        }\n        // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n        // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n        return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    }\n    const isKeepAll = (wordBreak === 'keepAll');\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n    const breakingOffsets = [];\n    const breakingOffsetsVisibleColumn = [];\n    let breakingOffsetsCount = 0;\n    let breakOffset = 0;\n    let breakOffsetVisibleColumn = 0;\n    let breakingColumn = firstLineBreakColumn;\n    let prevCharCode = lineText.charCodeAt(0);\n    let prevCharCodeClass = classifier.get(prevCharCode);\n    let visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\n    let startOffset = 1;\n    if (strings.isHighSurrogate(prevCharCode)) {\n        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n        visibleColumn += 1;\n        prevCharCode = lineText.charCodeAt(1);\n        prevCharCodeClass = classifier.get(prevCharCode);\n        startOffset++;\n    }\n    for (let i = startOffset; i < len; i++) {\n        const charStartOffset = i;\n        const charCode = lineText.charCodeAt(i);\n        let charCodeClass;\n        let charWidth;\n        if (strings.isHighSurrogate(charCode)) {\n            // A surrogate pair must always be considered as a single unit, so it is never to be broken\n            i++;\n            charCodeClass = 0 /* CharacterClass.NONE */;\n            charWidth = 2;\n        }\n        else {\n            charCodeClass = classifier.get(charCode);\n            charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n        }\n        if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n            breakOffset = charStartOffset;\n            breakOffsetVisibleColumn = visibleColumn;\n        }\n        visibleColumn += charWidth;\n        // check if adding character at `i` will go over the breaking column\n        if (visibleColumn > breakingColumn) {\n            // We need to break at least before character at `i`:\n            if (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n                // Cannot break at `breakOffset`, must break at `i`\n                breakOffset = charStartOffset;\n                breakOffsetVisibleColumn = visibleColumn - charWidth;\n            }\n            breakingOffsets[breakingOffsetsCount] = breakOffset;\n            breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n            breakingOffsetsCount++;\n            breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n            breakOffset = 0;\n        }\n        prevCharCode = charCode;\n        prevCharCodeClass = charCodeClass;\n    }\n    if (breakingOffsetsCount === 0 && (!injectedTexts || injectedTexts.length === 0)) {\n        return null;\n    }\n    // Add last segment\n    breakingOffsets[breakingOffsetsCount] = len;\n    breakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\n    return new ModelLineProjectionData(injectionOffsets, injectionOptions, breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\n}\nfunction computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar) {\n    if (charCode === 9 /* CharCode.Tab */) {\n        return (tabSize - (visibleColumn % tabSize));\n    }\n    if (strings.isFullWidthCharacter(charCode)) {\n        return columnsForFullWidthChar;\n    }\n    if (charCode < 32) {\n        // when using `editor.renderControlCharacters`, the substitutions are often wide\n        return columnsForFullWidthChar;\n    }\n    return 1;\n}\nfunction tabCharacterWidth(visibleColumn, tabSize) {\n    return (tabSize - (visibleColumn % tabSize));\n}\n/**\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\n * Kinsoku Shori : Don't break before a trailing character, like a period\n */\nfunction canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll) {\n    return (charCode !== 32 /* CharCode.Space */\n        && ((prevCharCodeClass === 2 /* CharacterClass.BREAK_AFTER */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */) // break at the end of multiple BREAK_AFTER\n            || (prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */ && charCodeClass === 1 /* CharacterClass.BREAK_BEFORE */) // break at the start of multiple BREAK_BEFORE\n            || (!isKeepAll && prevCharCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */)\n            || (!isKeepAll && charCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */)));\n}\nfunction computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n    let wrappedTextIndentLength = 0;\n    if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n        const firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\n        if (firstNonWhitespaceIndex !== -1) {\n            // Track existing indent\n            for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                const charWidth = (lineText.charCodeAt(i) === 9 /* CharCode.Tab */ ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1);\n                wrappedTextIndentLength += charWidth;\n            }\n            // Increase indent of continuation lines, if desired\n            const numberOfAdditionalTabs = (wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0);\n            for (let i = 0; i < numberOfAdditionalTabs; i++) {\n                const charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\n                wrappedTextIndentLength += charWidth;\n            }\n            // Force sticking to beginning of line if no character would fit except for the indentation\n            if (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\n                wrappedTextIndentLength = 0;\n            }\n        }\n    }\n    return wrappedTextIndentLength;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ColorZone {\n    constructor(from, to, colorId) {\n        this._colorZoneBrand = undefined;\n        this.from = from | 0;\n        this.to = to | 0;\n        this.colorId = colorId | 0;\n    }\n    static compare(a, b) {\n        if (a.colorId === b.colorId) {\n            if (a.from === b.from) {\n                return a.to - b.to;\n            }\n            return a.from - b.from;\n        }\n        return a.colorId - b.colorId;\n    }\n}\n/**\n * A zone in the overview ruler\n */\nexport class OverviewRulerZone {\n    constructor(startLineNumber, endLineNumber, heightInLines, color) {\n        this._overviewRulerZoneBrand = undefined;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n        this.heightInLines = heightInLines;\n        this.color = color;\n        this._colorZone = null;\n    }\n    static compare(a, b) {\n        if (a.color === b.color) {\n            if (a.startLineNumber === b.startLineNumber) {\n                if (a.heightInLines === b.heightInLines) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.heightInLines - b.heightInLines;\n            }\n            return a.startLineNumber - b.startLineNumber;\n        }\n        return a.color < b.color ? -1 : 1;\n    }\n    setColorZone(colorZone) {\n        this._colorZone = colorZone;\n    }\n    getColorZones() {\n        return this._colorZone;\n    }\n}\nexport class OverviewZoneManager {\n    constructor(getVerticalOffsetForLine) {\n        this._getVerticalOffsetForLine = getVerticalOffsetForLine;\n        this._zones = [];\n        this._colorZonesInvalid = false;\n        this._lineHeight = 0;\n        this._domWidth = 0;\n        this._domHeight = 0;\n        this._outerHeight = 0;\n        this._pixelRatio = 1;\n        this._lastAssignedId = 0;\n        this._color2Id = Object.create(null);\n        this._id2Color = [];\n    }\n    getId2Color() {\n        return this._id2Color;\n    }\n    setZones(newZones) {\n        this._zones = newZones;\n        this._zones.sort(OverviewRulerZone.compare);\n    }\n    setLineHeight(lineHeight) {\n        if (this._lineHeight === lineHeight) {\n            return false;\n        }\n        this._lineHeight = lineHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    setPixelRatio(pixelRatio) {\n        this._pixelRatio = pixelRatio;\n        this._colorZonesInvalid = true;\n    }\n    getDOMWidth() {\n        return this._domWidth;\n    }\n    getCanvasWidth() {\n        return this._domWidth * this._pixelRatio;\n    }\n    setDOMWidth(width) {\n        if (this._domWidth === width) {\n            return false;\n        }\n        this._domWidth = width;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getDOMHeight() {\n        return this._domHeight;\n    }\n    getCanvasHeight() {\n        return this._domHeight * this._pixelRatio;\n    }\n    setDOMHeight(height) {\n        if (this._domHeight === height) {\n            return false;\n        }\n        this._domHeight = height;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getOuterHeight() {\n        return this._outerHeight;\n    }\n    setOuterHeight(outerHeight) {\n        if (this._outerHeight === outerHeight) {\n            return false;\n        }\n        this._outerHeight = outerHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    resolveColorZones() {\n        const colorZonesInvalid = this._colorZonesInvalid;\n        const lineHeight = Math.floor(this._lineHeight);\n        const totalHeight = Math.floor(this.getCanvasHeight());\n        const outerHeight = Math.floor(this._outerHeight);\n        const heightRatio = totalHeight / outerHeight;\n        const halfMinimumHeight = Math.floor(4 /* Constants.MINIMUM_HEIGHT */ * this._pixelRatio / 2);\n        const allColorZones = [];\n        for (let i = 0, len = this._zones.length; i < len; i++) {\n            const zone = this._zones[i];\n            if (!colorZonesInvalid) {\n                const colorZone = zone.getColorZones();\n                if (colorZone) {\n                    allColorZones.push(colorZone);\n                    continue;\n                }\n            }\n            const offset1 = this._getVerticalOffsetForLine(zone.startLineNumber);\n            const offset2 = (zone.heightInLines === 0\n                ? this._getVerticalOffsetForLine(zone.endLineNumber) + lineHeight\n                : offset1 + zone.heightInLines * lineHeight);\n            const y1 = Math.floor(heightRatio * offset1);\n            const y2 = Math.floor(heightRatio * offset2);\n            let ycenter = Math.floor((y1 + y2) / 2);\n            let halfHeight = (y2 - ycenter);\n            if (halfHeight < halfMinimumHeight) {\n                halfHeight = halfMinimumHeight;\n            }\n            if (ycenter - halfHeight < 0) {\n                ycenter = halfHeight;\n            }\n            if (ycenter + halfHeight > totalHeight) {\n                ycenter = totalHeight - halfHeight;\n            }\n            const color = zone.color;\n            let colorId = this._color2Id[color];\n            if (!colorId) {\n                colorId = (++this._lastAssignedId);\n                this._color2Id[color] = colorId;\n                this._id2Color[colorId] = color;\n            }\n            const colorZone = new ColorZone(ycenter - halfHeight, ycenter + halfHeight, colorId);\n            zone.setColorZone(colorZone);\n            allColorZones.push(colorZone);\n        }\n        this._colorZonesInvalid = false;\n        allColorZones.sort(ColorZone.compare);\n        return allColorZones;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorTheme } from '../editorTheme.js';\nexport class ViewContext {\n    constructor(configuration, theme, model) {\n        this.configuration = configuration;\n        this.theme = new EditorTheme(theme);\n        this.viewModel = model;\n        this.viewLayout = model.viewLayout;\n    }\n    addEventHandler(eventHandler) {\n        this.viewModel.addViewEventHandler(eventHandler);\n    }\n    removeEventHandler(eventHandler) {\n        this.viewModel.removeViewEventHandler(eventHandler);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { InlineDecoration, ViewModelDecoration } from '../viewModel.js';\nimport { filterValidationDecorations } from '../config/editorOptions.js';\nexport class ViewModelDecorations {\n    constructor(editorId, model, configuration, linesCollection, coordinatesConverter) {\n        this._cachedOnlyMinimapDecorations = null;\n        this.editorId = editorId;\n        this.model = model;\n        this.configuration = configuration;\n        this._linesCollection = linesCollection;\n        this._coordinatesConverter = coordinatesConverter;\n        this._decorationsCache = Object.create(null);\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    _clearCachedModelDecorationsResolver() {\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    dispose() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    reset() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onModelDecorationsChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onLineMappingChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    _getOrCreateViewModelDecoration(modelDecoration) {\n        const id = modelDecoration.id;\n        let r = this._decorationsCache[id];\n        if (!r) {\n            const modelRange = modelDecoration.range;\n            const options = modelDecoration.options;\n            let viewRange;\n            if (options.isWholeLine) {\n                const start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1), 0 /* PositionAffinity.Left */);\n                const end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)), 1 /* PositionAffinity.Right */);\n                viewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n            }\n            else {\n                // For backwards compatibility reasons, we want injected text before any decoration.\n                // Thus, move decorations to the right.\n                viewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange, 1 /* PositionAffinity.Right */);\n            }\n            r = new ViewModelDecoration(viewRange, options);\n            this._decorationsCache[id] = r;\n        }\n        return r;\n    }\n    getDecorationsViewportData(viewRange, onlyMinimapDecorations = false) {\n        let cacheIsValid = (this._cachedModelDecorationsResolver !== null);\n        cacheIsValid = cacheIsValid && (viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange));\n        cacheIsValid = cacheIsValid && (this._cachedOnlyMinimapDecorations === onlyMinimapDecorations);\n        if (!cacheIsValid) {\n            this._cachedModelDecorationsResolver = this._getDecorationsInRange(viewRange, onlyMinimapDecorations);\n            this._cachedModelDecorationsResolverViewRange = viewRange;\n            this._cachedOnlyMinimapDecorations = onlyMinimapDecorations;\n        }\n        return this._cachedModelDecorationsResolver;\n    }\n    getInlineDecorationsOnLine(lineNumber, onlyMinimapDecorations = false) {\n        const range = new Range(lineNumber, this._linesCollection.getViewLineMinColumn(lineNumber), lineNumber, this._linesCollection.getViewLineMaxColumn(lineNumber));\n        return this._getDecorationsInRange(range, onlyMinimapDecorations).inlineDecorations[0];\n    }\n    _getDecorationsInRange(viewRange, onlyMinimapDecorations) {\n        const modelDecorations = this._linesCollection.getDecorationsInRange(viewRange, this.editorId, filterValidationDecorations(this.configuration.options), onlyMinimapDecorations);\n        const startLineNumber = viewRange.startLineNumber;\n        const endLineNumber = viewRange.endLineNumber;\n        const decorationsInViewport = [];\n        let decorationsInViewportLen = 0;\n        const inlineDecorations = [];\n        for (let j = startLineNumber; j <= endLineNumber; j++) {\n            inlineDecorations[j - startLineNumber] = [];\n        }\n        for (let i = 0, len = modelDecorations.length; i < len; i++) {\n            const modelDecoration = modelDecorations[i];\n            const decorationOptions = modelDecoration.options;\n            if (!isModelDecorationVisible(this.model, modelDecoration)) {\n                continue;\n            }\n            const viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n            const viewRange = viewModelDecoration.range;\n            decorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n            if (decorationOptions.inlineClassName) {\n                const inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? 3 /* InlineDecorationType.RegularAffectingLetterSpacing */ : 0 /* InlineDecorationType.Regular */);\n                const intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n                const intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n                for (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n                    inlineDecorations[j - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.beforeContentClassName) {\n                if (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n                    const inlineDecoration = new InlineDecoration(new Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn), decorationOptions.beforeContentClassName, 1 /* InlineDecorationType.Before */);\n                    inlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.afterContentClassName) {\n                if (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n                    const inlineDecoration = new InlineDecoration(new Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn), decorationOptions.afterContentClassName, 2 /* InlineDecorationType.After */);\n                    inlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n        }\n        return {\n            decorations: decorationsInViewport,\n            inlineDecorations: inlineDecorations\n        };\n    }\n}\nexport function isModelDecorationVisible(model, decoration) {\n    if (decoration.options.hideInCommentTokens && isModelDecorationInComment(model, decoration)) {\n        return false;\n    }\n    if (decoration.options.hideInStringTokens && isModelDecorationInString(model, decoration)) {\n        return false;\n    }\n    return true;\n}\nexport function isModelDecorationInComment(model, decoration) {\n    return testTokensInRange(model, decoration.range, (tokenType) => tokenType === 1 /* StandardTokenType.Comment */);\n}\nexport function isModelDecorationInString(model, decoration) {\n    return testTokensInRange(model, decoration.range, (tokenType) => tokenType === 2 /* StandardTokenType.String */);\n}\n/**\n * Calls the callback for every token that intersects the range.\n * If the callback returns `false`, iteration stops and `false` is returned.\n * Otherwise, `true` is returned.\n */\nfunction testTokensInRange(model, range, callback) {\n    for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n        const lineTokens = model.tokenization.getLineTokens(lineNumber);\n        const isFirstLine = lineNumber === range.startLineNumber;\n        const isEndLine = lineNumber === range.endLineNumber;\n        let tokenIdx = isFirstLine ? lineTokens.findTokenIndexAtOffset(range.startColumn - 1) : 0;\n        while (tokenIdx < lineTokens.getCount()) {\n            if (isEndLine) {\n                const startOffset = lineTokens.getStartOffset(tokenIdx);\n                if (startOffset > range.endColumn - 1) {\n                    break;\n                }\n            }\n            const callbackResult = callback(lineTokens.getStandardTokenType(tokenIdx));\n            if (!callbackResult) {\n                return false;\n            }\n            tokenIdx++;\n        }\n    }\n    return true;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nclass PendingChanges {\n    constructor() {\n        this._hasPending = false;\n        this._inserts = [];\n        this._changes = [];\n        this._removes = [];\n    }\n    insert(x) {\n        this._hasPending = true;\n        this._inserts.push(x);\n    }\n    change(x) {\n        this._hasPending = true;\n        this._changes.push(x);\n    }\n    remove(x) {\n        this._hasPending = true;\n        this._removes.push(x);\n    }\n    mustCommit() {\n        return this._hasPending;\n    }\n    commit(linesLayout) {\n        if (!this._hasPending) {\n            return;\n        }\n        const inserts = this._inserts;\n        const changes = this._changes;\n        const removes = this._removes;\n        this._hasPending = false;\n        this._inserts = [];\n        this._changes = [];\n        this._removes = [];\n        linesLayout._commitPendingChanges(inserts, changes, removes);\n    }\n}\nexport class EditorWhitespace {\n    constructor(id, afterLineNumber, ordinal, height, minWidth) {\n        this.id = id;\n        this.afterLineNumber = afterLineNumber;\n        this.ordinal = ordinal;\n        this.height = height;\n        this.minWidth = minWidth;\n        this.prefixSum = 0;\n    }\n}\n/**\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\n *\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\n */\nclass LinesLayout {\n    constructor(lineCount, lineHeight, paddingTop, paddingBottom) {\n        this._instanceId = strings.singleLetterHash(++LinesLayout.INSTANCE_COUNT);\n        this._pendingChanges = new PendingChanges();\n        this._lastWhitespaceId = 0;\n        this._arr = [];\n        this._prefixSumValidIndex = -1;\n        this._minWidth = -1; /* marker for not being computed */\n        this._lineCount = lineCount;\n        this._lineHeight = lineHeight;\n        this._paddingTop = paddingTop;\n        this._paddingBottom = paddingBottom;\n    }\n    /**\n     * Find the insertion index for a new value inside a sorted array of values.\n     * If the value is already present in the sorted array, the insertion index will be after the already existing value.\n     */\n    static findInsertionIndex(arr, afterLineNumber, ordinal) {\n        let low = 0;\n        let high = arr.length;\n        while (low < high) {\n            const mid = ((low + high) >>> 1);\n            if (afterLineNumber === arr[mid].afterLineNumber) {\n                if (ordinal < arr[mid].ordinal) {\n                    high = mid;\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            else if (afterLineNumber < arr[mid].afterLineNumber) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    /**\n     * Change the height of a line in pixels.\n     */\n    setLineHeight(lineHeight) {\n        this._checkPendingChanges();\n        this._lineHeight = lineHeight;\n    }\n    /**\n     * Changes the padding used to calculate vertical offsets.\n     */\n    setPadding(paddingTop, paddingBottom) {\n        this._paddingTop = paddingTop;\n        this._paddingBottom = paddingBottom;\n    }\n    /**\n     * Set the number of lines.\n     *\n     * @param lineCount New number of lines.\n     */\n    onFlushed(lineCount) {\n        this._checkPendingChanges();\n        this._lineCount = lineCount;\n    }\n    changeWhitespace(callback) {\n        let hadAChange = false;\n        try {\n            const accessor = {\n                insertWhitespace: (afterLineNumber, ordinal, heightInPx, minWidth) => {\n                    hadAChange = true;\n                    afterLineNumber = afterLineNumber | 0;\n                    ordinal = ordinal | 0;\n                    heightInPx = heightInPx | 0;\n                    minWidth = minWidth | 0;\n                    const id = this._instanceId + (++this._lastWhitespaceId);\n                    this._pendingChanges.insert(new EditorWhitespace(id, afterLineNumber, ordinal, heightInPx, minWidth));\n                    return id;\n                },\n                changeOneWhitespace: (id, newAfterLineNumber, newHeight) => {\n                    hadAChange = true;\n                    newAfterLineNumber = newAfterLineNumber | 0;\n                    newHeight = newHeight | 0;\n                    this._pendingChanges.change({ id, newAfterLineNumber, newHeight });\n                },\n                removeWhitespace: (id) => {\n                    hadAChange = true;\n                    this._pendingChanges.remove({ id });\n                }\n            };\n            callback(accessor);\n        }\n        finally {\n            this._pendingChanges.commit(this);\n        }\n        return hadAChange;\n    }\n    _commitPendingChanges(inserts, changes, removes) {\n        if (inserts.length > 0 || removes.length > 0) {\n            this._minWidth = -1; /* marker for not being computed */\n        }\n        if (inserts.length + changes.length + removes.length <= 1) {\n            // when only one thing happened, handle it \"delicately\"\n            for (const insert of inserts) {\n                this._insertWhitespace(insert);\n            }\n            for (const change of changes) {\n                this._changeOneWhitespace(change.id, change.newAfterLineNumber, change.newHeight);\n            }\n            for (const remove of removes) {\n                const index = this._findWhitespaceIndex(remove.id);\n                if (index === -1) {\n                    continue;\n                }\n                this._removeWhitespace(index);\n            }\n            return;\n        }\n        // simply rebuild the entire datastructure\n        const toRemove = new Set();\n        for (const remove of removes) {\n            toRemove.add(remove.id);\n        }\n        const toChange = new Map();\n        for (const change of changes) {\n            toChange.set(change.id, change);\n        }\n        const applyRemoveAndChange = (whitespaces) => {\n            const result = [];\n            for (const whitespace of whitespaces) {\n                if (toRemove.has(whitespace.id)) {\n                    continue;\n                }\n                if (toChange.has(whitespace.id)) {\n                    const change = toChange.get(whitespace.id);\n                    whitespace.afterLineNumber = change.newAfterLineNumber;\n                    whitespace.height = change.newHeight;\n                }\n                result.push(whitespace);\n            }\n            return result;\n        };\n        const result = applyRemoveAndChange(this._arr).concat(applyRemoveAndChange(inserts));\n        result.sort((a, b) => {\n            if (a.afterLineNumber === b.afterLineNumber) {\n                return a.ordinal - b.ordinal;\n            }\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n        this._arr = result;\n        this._prefixSumValidIndex = -1;\n    }\n    _checkPendingChanges() {\n        if (this._pendingChanges.mustCommit()) {\n            this._pendingChanges.commit(this);\n        }\n    }\n    _insertWhitespace(whitespace) {\n        const insertIndex = LinesLayout.findInsertionIndex(this._arr, whitespace.afterLineNumber, whitespace.ordinal);\n        this._arr.splice(insertIndex, 0, whitespace);\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, insertIndex - 1);\n    }\n    _findWhitespaceIndex(id) {\n        const arr = this._arr;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            if (arr[i].id === id) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    _changeOneWhitespace(id, newAfterLineNumber, newHeight) {\n        const index = this._findWhitespaceIndex(id);\n        if (index === -1) {\n            return;\n        }\n        if (this._arr[index].height !== newHeight) {\n            this._arr[index].height = newHeight;\n            this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, index - 1);\n        }\n        if (this._arr[index].afterLineNumber !== newAfterLineNumber) {\n            // `afterLineNumber` changed for this whitespace\n            // Record old whitespace\n            const whitespace = this._arr[index];\n            // Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace\n            this._removeWhitespace(index);\n            whitespace.afterLineNumber = newAfterLineNumber;\n            // And add it again\n            this._insertWhitespace(whitespace);\n        }\n    }\n    _removeWhitespace(removeIndex) {\n        this._arr.splice(removeIndex, 1);\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, removeIndex - 1);\n    }\n    /**\n     * Notify the layouter that lines have been deleted (a continuous zone of lines).\n     *\n     * @param fromLineNumber The line number at which the deletion started, inclusive\n     * @param toLineNumber The line number at which the deletion ended, inclusive\n     */\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._checkPendingChanges();\n        fromLineNumber = fromLineNumber | 0;\n        toLineNumber = toLineNumber | 0;\n        this._lineCount -= (toLineNumber - fromLineNumber + 1);\n        for (let i = 0, len = this._arr.length; i < len; i++) {\n            const afterLineNumber = this._arr[i].afterLineNumber;\n            if (fromLineNumber <= afterLineNumber && afterLineNumber <= toLineNumber) {\n                // The line this whitespace was after has been deleted\n                //  => move whitespace to before first deleted line\n                this._arr[i].afterLineNumber = fromLineNumber - 1;\n            }\n            else if (afterLineNumber > toLineNumber) {\n                // The line this whitespace was after has been moved up\n                //  => move whitespace up\n                this._arr[i].afterLineNumber -= (toLineNumber - fromLineNumber + 1);\n            }\n        }\n    }\n    /**\n     * Notify the layouter that lines have been inserted (a continuous zone of lines).\n     *\n     * @param fromLineNumber The line number at which the insertion started, inclusive\n     * @param toLineNumber The line number at which the insertion ended, inclusive.\n     */\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._checkPendingChanges();\n        fromLineNumber = fromLineNumber | 0;\n        toLineNumber = toLineNumber | 0;\n        this._lineCount += (toLineNumber - fromLineNumber + 1);\n        for (let i = 0, len = this._arr.length; i < len; i++) {\n            const afterLineNumber = this._arr[i].afterLineNumber;\n            if (fromLineNumber <= afterLineNumber) {\n                this._arr[i].afterLineNumber += (toLineNumber - fromLineNumber + 1);\n            }\n        }\n    }\n    /**\n     * Get the sum of all the whitespaces.\n     */\n    getWhitespacesTotalHeight() {\n        this._checkPendingChanges();\n        if (this._arr.length === 0) {\n            return 0;\n        }\n        return this.getWhitespacesAccumulatedHeight(this._arr.length - 1);\n    }\n    /**\n     * Return the sum of the heights of the whitespaces at [0..index].\n     * This includes the whitespace at `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.\n     */\n    getWhitespacesAccumulatedHeight(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        let startIndex = Math.max(0, this._prefixSumValidIndex + 1);\n        if (startIndex === 0) {\n            this._arr[0].prefixSum = this._arr[0].height;\n            startIndex++;\n        }\n        for (let i = startIndex; i <= index; i++) {\n            this._arr[i].prefixSum = this._arr[i - 1].prefixSum + this._arr[i].height;\n        }\n        this._prefixSumValidIndex = Math.max(this._prefixSumValidIndex, index);\n        return this._arr[index].prefixSum;\n    }\n    /**\n     * Get the sum of heights for all objects.\n     *\n     * @return The sum of heights for all objects.\n     */\n    getLinesTotalHeight() {\n        this._checkPendingChanges();\n        const linesHeight = this._lineHeight * this._lineCount;\n        const whitespacesHeight = this.getWhitespacesTotalHeight();\n        return linesHeight + whitespacesHeight + this._paddingTop + this._paddingBottom;\n    }\n    /**\n     * Returns the accumulated height of whitespaces before the given line number.\n     *\n     * @param lineNumber The line number\n     */\n    getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        const lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n        if (lastWhitespaceBeforeLineNumber === -1) {\n            return 0;\n        }\n        return this.getWhitespacesAccumulatedHeight(lastWhitespaceBeforeLineNumber);\n    }\n    _findLastWhitespaceBeforeLineNumber(lineNumber) {\n        lineNumber = lineNumber | 0;\n        // Find the whitespace before line number\n        const arr = this._arr;\n        let low = 0;\n        let high = arr.length - 1;\n        while (low <= high) {\n            const delta = (high - low) | 0;\n            const halfDelta = (delta / 2) | 0;\n            const mid = (low + halfDelta) | 0;\n            if (arr[mid].afterLineNumber < lineNumber) {\n                if (mid + 1 >= arr.length || arr[mid + 1].afterLineNumber >= lineNumber) {\n                    return mid;\n                }\n                else {\n                    low = (mid + 1) | 0;\n                }\n            }\n            else {\n                high = (mid - 1) | 0;\n            }\n        }\n        return -1;\n    }\n    _findFirstWhitespaceAfterLineNumber(lineNumber) {\n        lineNumber = lineNumber | 0;\n        const lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n        const firstWhitespaceAfterLineNumber = lastWhitespaceBeforeLineNumber + 1;\n        if (firstWhitespaceAfterLineNumber < this._arr.length) {\n            return firstWhitespaceAfterLineNumber;\n        }\n        return -1;\n    }\n    /**\n     * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.\n     * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.\n     */\n    getFirstWhitespaceIndexAfterLineNumber(lineNumber) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        return this._findFirstWhitespaceAfterLineNumber(lineNumber);\n    }\n    /**\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n     *\n     * @param lineNumber The line number\n     * @return The sum of heights for all objects above `lineNumber`.\n     */\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        let previousLinesHeight;\n        if (lineNumber > 1) {\n            previousLinesHeight = this._lineHeight * (lineNumber - 1);\n        }\n        else {\n            previousLinesHeight = 0;\n        }\n        const previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber - (includeViewZones ? 1 : 0));\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    /**\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n     *\n     * @param lineNumber The line number\n     * @return The sum of heights for all objects above `lineNumber`.\n     */\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        const previousLinesHeight = this._lineHeight * lineNumber;\n        const previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber + (includeViewZones ? 1 : 0));\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    /**\n     * The maximum min width for all whitespaces.\n     */\n    getWhitespaceMinWidth() {\n        this._checkPendingChanges();\n        if (this._minWidth === -1) {\n            let minWidth = 0;\n            for (let i = 0, len = this._arr.length; i < len; i++) {\n                minWidth = Math.max(minWidth, this._arr[i].minWidth);\n            }\n            this._minWidth = minWidth;\n        }\n        return this._minWidth;\n    }\n    /**\n     * Check if `verticalOffset` is below all lines.\n     */\n    isAfterLines(verticalOffset) {\n        this._checkPendingChanges();\n        const totalHeight = this.getLinesTotalHeight();\n        return verticalOffset > totalHeight;\n    }\n    isInTopPadding(verticalOffset) {\n        if (this._paddingTop === 0) {\n            return false;\n        }\n        this._checkPendingChanges();\n        return (verticalOffset < this._paddingTop);\n    }\n    isInBottomPadding(verticalOffset) {\n        if (this._paddingBottom === 0) {\n            return false;\n        }\n        this._checkPendingChanges();\n        const totalHeight = this.getLinesTotalHeight();\n        return (verticalOffset >= totalHeight - this._paddingBottom);\n    }\n    /**\n     * Find the first line number that is at or after vertical offset `verticalOffset`.\n     * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\n     * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\n     *\n     * @param verticalOffset The vertical offset to search at.\n     * @return The line number at or after vertical offset `verticalOffset`.\n     */\n    getLineNumberAtOrAfterVerticalOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        if (verticalOffset < 0) {\n            return 1;\n        }\n        const linesCount = this._lineCount | 0;\n        const lineHeight = this._lineHeight;\n        let minLineNumber = 1;\n        let maxLineNumber = linesCount;\n        while (minLineNumber < maxLineNumber) {\n            const midLineNumber = ((minLineNumber + maxLineNumber) / 2) | 0;\n            const midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber) | 0;\n            if (verticalOffset >= midLineNumberVerticalOffset + lineHeight) {\n                // vertical offset is after mid line number\n                minLineNumber = midLineNumber + 1;\n            }\n            else if (verticalOffset >= midLineNumberVerticalOffset) {\n                // Hit\n                return midLineNumber;\n            }\n            else {\n                // vertical offset is before mid line number, but mid line number could still be what we're searching for\n                maxLineNumber = midLineNumber;\n            }\n        }\n        if (minLineNumber > linesCount) {\n            return linesCount;\n        }\n        return minLineNumber;\n    }\n    /**\n     * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\n     *\n     * @param verticalOffset1 The beginning of the viewport.\n     * @param verticalOffset2 The end of the viewport.\n     * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\n     */\n    getLinesViewportData(verticalOffset1, verticalOffset2) {\n        this._checkPendingChanges();\n        verticalOffset1 = verticalOffset1 | 0;\n        verticalOffset2 = verticalOffset2 | 0;\n        const lineHeight = this._lineHeight;\n        // Find first line number\n        // We don't live in a perfect world, so the line number might start before or after verticalOffset1\n        const startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1) | 0;\n        const startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber) | 0;\n        let endLineNumber = this._lineCount | 0;\n        // Also keep track of what whitespace we've got\n        let whitespaceIndex = this.getFirstWhitespaceIndexAfterLineNumber(startLineNumber) | 0;\n        const whitespaceCount = this.getWhitespacesCount() | 0;\n        let currentWhitespaceHeight;\n        let currentWhitespaceAfterLineNumber;\n        if (whitespaceIndex === -1) {\n            whitespaceIndex = whitespaceCount;\n            currentWhitespaceAfterLineNumber = endLineNumber + 1;\n            currentWhitespaceHeight = 0;\n        }\n        else {\n            currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n            currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n        }\n        let currentVerticalOffset = startLineNumberVerticalOffset;\n        let currentLineRelativeOffset = currentVerticalOffset;\n        // IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\n        const STEP_SIZE = 500000;\n        let bigNumbersDelta = 0;\n        if (startLineNumberVerticalOffset >= STEP_SIZE) {\n            // Compute a delta that guarantees that lines are positioned at `lineHeight` increments\n            bigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\n            bigNumbersDelta = Math.floor(bigNumbersDelta / lineHeight) * lineHeight;\n            currentLineRelativeOffset -= bigNumbersDelta;\n        }\n        const linesOffsets = [];\n        const verticalCenter = verticalOffset1 + (verticalOffset2 - verticalOffset1) / 2;\n        let centeredLineNumber = -1;\n        // Figure out how far the lines go\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            if (centeredLineNumber === -1) {\n                const currentLineTop = currentVerticalOffset;\n                const currentLineBottom = currentVerticalOffset + lineHeight;\n                if ((currentLineTop <= verticalCenter && verticalCenter < currentLineBottom) || currentLineTop > verticalCenter) {\n                    centeredLineNumber = lineNumber;\n                }\n            }\n            // Count current line height in the vertical offsets\n            currentVerticalOffset += lineHeight;\n            linesOffsets[lineNumber - startLineNumber] = currentLineRelativeOffset;\n            // Next line starts immediately after this one\n            currentLineRelativeOffset += lineHeight;\n            while (currentWhitespaceAfterLineNumber === lineNumber) {\n                // Push down next line with the height of the current whitespace\n                currentLineRelativeOffset += currentWhitespaceHeight;\n                // Count current whitespace in the vertical offsets\n                currentVerticalOffset += currentWhitespaceHeight;\n                whitespaceIndex++;\n                if (whitespaceIndex >= whitespaceCount) {\n                    currentWhitespaceAfterLineNumber = endLineNumber + 1;\n                }\n                else {\n                    currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n                    currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n                }\n            }\n            if (currentVerticalOffset >= verticalOffset2) {\n                // We have covered the entire viewport area, time to stop\n                endLineNumber = lineNumber;\n                break;\n            }\n        }\n        if (centeredLineNumber === -1) {\n            centeredLineNumber = endLineNumber;\n        }\n        const endLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(endLineNumber) | 0;\n        let completelyVisibleStartLineNumber = startLineNumber;\n        let completelyVisibleEndLineNumber = endLineNumber;\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n            if (startLineNumberVerticalOffset < verticalOffset1) {\n                completelyVisibleStartLineNumber++;\n            }\n        }\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n            if (endLineNumberVerticalOffset + lineHeight > verticalOffset2) {\n                completelyVisibleEndLineNumber--;\n            }\n        }\n        return {\n            bigNumbersDelta: bigNumbersDelta,\n            startLineNumber: startLineNumber,\n            endLineNumber: endLineNumber,\n            relativeVerticalOffset: linesOffsets,\n            centeredLineNumber: centeredLineNumber,\n            completelyVisibleStartLineNumber: completelyVisibleStartLineNumber,\n            completelyVisibleEndLineNumber: completelyVisibleEndLineNumber\n        };\n    }\n    getVerticalOffsetForWhitespaceIndex(whitespaceIndex) {\n        this._checkPendingChanges();\n        whitespaceIndex = whitespaceIndex | 0;\n        const afterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\n        let previousLinesHeight;\n        if (afterLineNumber >= 1) {\n            previousLinesHeight = this._lineHeight * afterLineNumber;\n        }\n        else {\n            previousLinesHeight = 0;\n        }\n        let previousWhitespacesHeight;\n        if (whitespaceIndex > 0) {\n            previousWhitespacesHeight = this.getWhitespacesAccumulatedHeight(whitespaceIndex - 1);\n        }\n        else {\n            previousWhitespacesHeight = 0;\n        }\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        let minWhitespaceIndex = 0;\n        let maxWhitespaceIndex = this.getWhitespacesCount() - 1;\n        if (maxWhitespaceIndex < 0) {\n            return -1;\n        }\n        // Special case: nothing to be found\n        const maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex);\n        const maxWhitespaceHeight = this.getHeightForWhitespaceIndex(maxWhitespaceIndex);\n        if (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\n            return -1;\n        }\n        while (minWhitespaceIndex < maxWhitespaceIndex) {\n            const midWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\n            const midWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex);\n            const midWhitespaceHeight = this.getHeightForWhitespaceIndex(midWhitespaceIndex);\n            if (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\n                // vertical offset is after whitespace\n                minWhitespaceIndex = midWhitespaceIndex + 1;\n            }\n            else if (verticalOffset >= midWhitespaceVerticalOffset) {\n                // Hit\n                return midWhitespaceIndex;\n            }\n            else {\n                // vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\n                maxWhitespaceIndex = midWhitespaceIndex;\n            }\n        }\n        return minWhitespaceIndex;\n    }\n    /**\n     * Get exactly the whitespace that is layouted at `verticalOffset`.\n     *\n     * @param verticalOffset The vertical offset.\n     * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\n     */\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        const candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);\n        if (candidateIndex < 0) {\n            return null;\n        }\n        if (candidateIndex >= this.getWhitespacesCount()) {\n            return null;\n        }\n        const candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex);\n        if (candidateTop > verticalOffset) {\n            return null;\n        }\n        const candidateHeight = this.getHeightForWhitespaceIndex(candidateIndex);\n        const candidateId = this.getIdForWhitespaceIndex(candidateIndex);\n        const candidateAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(candidateIndex);\n        return {\n            id: candidateId,\n            afterLineNumber: candidateAfterLineNumber,\n            verticalOffset: candidateTop,\n            height: candidateHeight\n        };\n    }\n    /**\n     * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\n     *\n     * @param verticalOffset1 The beginning of the viewport.\n     * @param verticalOffset2 The end of the viewport.\n     * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\n     */\n    getWhitespaceViewportData(verticalOffset1, verticalOffset2) {\n        this._checkPendingChanges();\n        verticalOffset1 = verticalOffset1 | 0;\n        verticalOffset2 = verticalOffset2 | 0;\n        const startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1);\n        const endIndex = this.getWhitespacesCount() - 1;\n        if (startIndex < 0) {\n            return [];\n        }\n        const result = [];\n        for (let i = startIndex; i <= endIndex; i++) {\n            const top = this.getVerticalOffsetForWhitespaceIndex(i);\n            const height = this.getHeightForWhitespaceIndex(i);\n            if (top >= verticalOffset2) {\n                break;\n            }\n            result.push({\n                id: this.getIdForWhitespaceIndex(i),\n                afterLineNumber: this.getAfterLineNumberForWhitespaceIndex(i),\n                verticalOffset: top,\n                height: height\n            });\n        }\n        return result;\n    }\n    /**\n     * Get all whitespaces.\n     */\n    getWhitespaces() {\n        this._checkPendingChanges();\n        return this._arr.slice(0);\n    }\n    /**\n     * The number of whitespaces.\n     */\n    getWhitespacesCount() {\n        this._checkPendingChanges();\n        return this._arr.length;\n    }\n    /**\n     * Get the `id` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `id` of whitespace at `index`.\n     */\n    getIdForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].id;\n    }\n    /**\n     * Get the `afterLineNumber` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `afterLineNumber` of whitespace at `index`.\n     */\n    getAfterLineNumberForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].afterLineNumber;\n    }\n    /**\n     * Get the `height` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `height` of whitespace at `index`.\n     */\n    getHeightForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].height;\n    }\n}\nLinesLayout.INSTANCE_COUNT = 0;\nexport { LinesLayout };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModelEventDispatcher.js';\nconst SMOOTH_SCROLLING_TIME = 125;\nclass EditorScrollDimensions {\n    constructor(width, contentWidth, height, contentHeight) {\n        width = width | 0;\n        contentWidth = contentWidth | 0;\n        height = height | 0;\n        contentHeight = contentHeight | 0;\n        if (width < 0) {\n            width = 0;\n        }\n        if (contentWidth < 0) {\n            contentWidth = 0;\n        }\n        if (height < 0) {\n            height = 0;\n        }\n        if (contentHeight < 0) {\n            contentHeight = 0;\n        }\n        this.width = width;\n        this.contentWidth = contentWidth;\n        this.scrollWidth = Math.max(width, contentWidth);\n        this.height = height;\n        this.contentHeight = contentHeight;\n        this.scrollHeight = Math.max(height, contentHeight);\n    }\n    equals(other) {\n        return (this.width === other.width\n            && this.contentWidth === other.contentWidth\n            && this.height === other.height\n            && this.contentHeight === other.contentHeight);\n    }\n}\nclass EditorScrollable extends Disposable {\n    constructor(smoothScrollDuration, scheduleAtNextAnimationFrame) {\n        super();\n        this._onDidContentSizeChange = this._register(new Emitter());\n        this.onDidContentSizeChange = this._onDidContentSizeChange.event;\n        this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n        this._scrollable = this._register(new Scrollable({\n            forceIntegerValues: true,\n            smoothScrollDuration,\n            scheduleAtNextAnimationFrame\n        }));\n        this.onDidScroll = this._scrollable.onScroll;\n    }\n    getScrollable() {\n        return this._scrollable;\n    }\n    setSmoothScrollDuration(smoothScrollDuration) {\n        this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    getScrollDimensions() {\n        return this._dimensions;\n    }\n    setScrollDimensions(dimensions) {\n        if (this._dimensions.equals(dimensions)) {\n            return;\n        }\n        const oldDimensions = this._dimensions;\n        this._dimensions = dimensions;\n        this._scrollable.setScrollDimensions({\n            width: dimensions.width,\n            scrollWidth: dimensions.scrollWidth,\n            height: dimensions.height,\n            scrollHeight: dimensions.scrollHeight\n        }, true);\n        const contentWidthChanged = (oldDimensions.contentWidth !== dimensions.contentWidth);\n        const contentHeightChanged = (oldDimensions.contentHeight !== dimensions.contentHeight);\n        if (contentWidthChanged || contentHeightChanged) {\n            this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\n        }\n    }\n    getFutureScrollPosition() {\n        return this._scrollable.getFutureScrollPosition();\n    }\n    getCurrentScrollPosition() {\n        return this._scrollable.getCurrentScrollPosition();\n    }\n    setScrollPositionNow(update) {\n        this._scrollable.setScrollPositionNow(update);\n    }\n    setScrollPositionSmooth(update) {\n        this._scrollable.setScrollPositionSmooth(update);\n    }\n}\nexport class ViewLayout extends Disposable {\n    constructor(configuration, lineCount, scheduleAtNextAnimationFrame) {\n        super();\n        this._configuration = configuration;\n        const options = this._configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        const padding = options.get(80 /* EditorOption.padding */);\n        this._linesLayout = new LinesLayout(lineCount, options.get(63 /* EditorOption.lineHeight */), padding.top, padding.bottom);\n        this._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n        this._configureSmoothScrollDuration();\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\n        this.onDidScroll = this._scrollable.onDidScroll;\n        this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\n        this._updateHeight();\n    }\n    dispose() {\n        super.dispose();\n    }\n    getScrollable() {\n        return this._scrollable.getScrollable();\n    }\n    onHeightMaybeChanged() {\n        this._updateHeight();\n    }\n    _configureSmoothScrollDuration() {\n        this._scrollable.setSmoothScrollDuration(this._configuration.options.get(108 /* EditorOption.smoothScrolling */) ? SMOOTH_SCROLLING_TIME : 0);\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._configuration.options;\n        if (e.hasChanged(63 /* EditorOption.lineHeight */)) {\n            this._linesLayout.setLineHeight(options.get(63 /* EditorOption.lineHeight */));\n        }\n        if (e.hasChanged(80 /* EditorOption.padding */)) {\n            const padding = options.get(80 /* EditorOption.padding */);\n            this._linesLayout.setPadding(padding.top, padding.bottom);\n        }\n        if (e.hasChanged(138 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n            const width = layoutInfo.contentWidth;\n            const height = layoutInfo.height;\n            const scrollDimensions = this._scrollable.getScrollDimensions();\n            const contentWidth = scrollDimensions.contentWidth;\n            this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n        }\n        else {\n            this._updateHeight();\n        }\n        if (e.hasChanged(108 /* EditorOption.smoothScrolling */)) {\n            this._configureSmoothScrollDuration();\n        }\n    }\n    onFlushed(lineCount) {\n        this._linesLayout.onFlushed(lineCount);\n    }\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n    }\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n    }\n    // ---- end view event handlers\n    _getHorizontalScrollbarHeight(width, scrollWidth) {\n        const options = this._configuration.options;\n        const scrollbar = options.get(97 /* EditorOption.scrollbar */);\n        if (scrollbar.horizontal === 2 /* ScrollbarVisibility.Hidden */) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        if (width >= scrollWidth) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        return scrollbar.horizontalScrollbarSize;\n    }\n    _getContentHeight(width, height, contentWidth) {\n        const options = this._configuration.options;\n        let result = this._linesLayout.getLinesTotalHeight();\n        if (options.get(99 /* EditorOption.scrollBeyondLastLine */)) {\n            result += Math.max(0, height - options.get(63 /* EditorOption.lineHeight */) - options.get(80 /* EditorOption.padding */).bottom);\n        }\n        else {\n            result += this._getHorizontalScrollbarHeight(width, contentWidth);\n        }\n        return result;\n    }\n    _updateHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const width = scrollDimensions.width;\n        const height = scrollDimensions.height;\n        const contentWidth = scrollDimensions.contentWidth;\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n    }\n    // ---- Layouting logic\n    getCurrentViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    getFutureViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    _computeContentWidth(maxLineWidth) {\n        const options = this._configuration.options;\n        const wrappingInfo = options.get(139 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        if (wrappingInfo.isViewportWrapping) {\n            const minimap = options.get(69 /* EditorOption.minimap */);\n            if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n                // This is a case where viewport wrapping is on, but the line extends above the viewport\n                if (minimap.enabled && minimap.side === 'right') {\n                    // We need to accomodate the scrollbar width\n                    return maxLineWidth + layoutInfo.verticalScrollbarWidth;\n                }\n            }\n            return maxLineWidth;\n        }\n        else {\n            const extraHorizontalSpace = options.get(98 /* EditorOption.scrollBeyondLastColumn */) * fontInfo.typicalHalfwidthCharacterWidth;\n            const whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n            return Math.max(maxLineWidth + extraHorizontalSpace + layoutInfo.verticalScrollbarWidth, whitespaceMinWidth);\n        }\n    }\n    setMaxLineWidth(maxLineWidth) {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        // const newScrollWidth = ;\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(maxLineWidth), scrollDimensions.height, scrollDimensions.contentHeight));\n        // The height might depend on the fact that there is a horizontal scrollbar or not\n        this._updateHeight();\n    }\n    // ---- view state\n    saveState() {\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        const scrollTop = currentScrollPosition.scrollTop;\n        const firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n        const whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n        return {\n            scrollTop: scrollTop,\n            scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n            scrollLeft: currentScrollPosition.scrollLeft\n        };\n    }\n    // ----\n    changeWhitespace(callback) {\n        const hadAChange = this._linesLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this.onHeightMaybeChanged();\n        }\n        return hadAChange;\n    }\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber, includeViewZones);\n    }\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones);\n    }\n    isAfterLines(verticalOffset) {\n        return this._linesLayout.isAfterLines(verticalOffset);\n    }\n    isInTopPadding(verticalOffset) {\n        return this._linesLayout.isInTopPadding(verticalOffset);\n    }\n    isInBottomPadding(verticalOffset) {\n        return this._linesLayout.isInBottomPadding(verticalOffset);\n    }\n    getLineNumberAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n    }\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n    }\n    getLinesViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getLinesViewportDataAtScrollTop(scrollTop) {\n        // do some minimal validations on scrollTop\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n            scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n        }\n        if (scrollTop < 0) {\n            scrollTop = 0;\n        }\n        return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n    }\n    getWhitespaceViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getWhitespaces() {\n        return this._linesLayout.getWhitespaces();\n    }\n    // ----\n    getContentWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentWidth;\n    }\n    getScrollWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollWidth;\n    }\n    getContentHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentHeight;\n    }\n    getScrollHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollHeight;\n    }\n    getCurrentScrollLeft() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollLeft;\n    }\n    getCurrentScrollTop() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollTop;\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    setScrollPosition(position, type) {\n        if (type === 1 /* ScrollType.Immediate */) {\n            this._scrollable.setScrollPositionNow(position);\n        }\n        else {\n            this._scrollable.setScrollPositionSmooth(position);\n        }\n    }\n    deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        this._scrollable.setScrollPositionNow({\n            scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n            scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n        });\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { Position } from '../core/position.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { SingleLineInlineDecoration, ViewLineData } from '../viewModel.js';\nexport function createModelLineProjection(lineBreakData, isVisible) {\n    if (lineBreakData === null) {\n        // No mapping needed\n        if (isVisible) {\n            return IdentityModelLineProjection.INSTANCE;\n        }\n        return HiddenModelLineProjection.INSTANCE;\n    }\n    else {\n        return new ModelLineProjection(lineBreakData, isVisible);\n    }\n}\n/**\n * This projection is used to\n * * wrap model lines\n * * inject text\n */\nclass ModelLineProjection {\n    constructor(lineBreakData, isVisible) {\n        this._projectionData = lineBreakData;\n        this._isVisible = isVisible;\n    }\n    isVisible() {\n        return this._isVisible;\n    }\n    setVisible(isVisible) {\n        this._isVisible = isVisible;\n        return this;\n    }\n    getProjectionData() {\n        return this._projectionData;\n    }\n    getViewLineCount() {\n        if (!this._isVisible) {\n            return 0;\n        }\n        return this._projectionData.getOutputLineCount();\n    }\n    getViewLineContent(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        const startOffsetInInputWithInjections = outputLineIndex > 0 ? this._projectionData.breakOffsets[outputLineIndex - 1] : 0;\n        const endOffsetInInputWithInjections = this._projectionData.breakOffsets[outputLineIndex];\n        let r;\n        if (this._projectionData.injectionOffsets !== null) {\n            const injectedTexts = this._projectionData.injectionOffsets.map((offset, idx) => new LineInjectedText(0, 0, offset + 1, this._projectionData.injectionOptions[idx], 0));\n            const lineWithInjections = LineInjectedText.applyInjectedText(model.getLineContent(modelLineNumber), injectedTexts);\n            r = lineWithInjections.substring(startOffsetInInputWithInjections, endOffsetInInputWithInjections);\n        }\n        else {\n            r = model.getValueInRange({\n                startLineNumber: modelLineNumber,\n                startColumn: startOffsetInInputWithInjections + 1,\n                endLineNumber: modelLineNumber,\n                endColumn: endOffsetInInputWithInjections + 1\n            });\n        }\n        if (outputLineIndex > 0) {\n            r = spaces(this._projectionData.wrappedTextIndentLength) + r;\n        }\n        return r;\n    }\n    getViewLineLength(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getLineLength(outputLineIndex);\n    }\n    getViewLineMinColumn(_model, _modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n    }\n    getViewLineMaxColumn(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getMaxOutputOffset(outputLineIndex) + 1;\n    }\n    /**\n     * Try using {@link getViewLinesData} instead.\n    */\n    getViewLineData(model, modelLineNumber, outputLineIndex) {\n        const arr = new Array();\n        this.getViewLinesData(model, modelLineNumber, outputLineIndex, 1, 0, [true], arr);\n        return arr[0];\n    }\n    getViewLinesData(model, modelLineNumber, outputLineIdx, lineCount, globalStartIndex, needed, result) {\n        this._assertVisible();\n        const lineBreakData = this._projectionData;\n        const injectionOffsets = lineBreakData.injectionOffsets;\n        const injectionOptions = lineBreakData.injectionOptions;\n        let inlineDecorationsPerOutputLine = null;\n        if (injectionOffsets) {\n            inlineDecorationsPerOutputLine = [];\n            let totalInjectedTextLengthBefore = 0;\n            let currentInjectedOffset = 0;\n            for (let outputLineIndex = 0; outputLineIndex < lineBreakData.getOutputLineCount(); outputLineIndex++) {\n                const inlineDecorations = new Array();\n                inlineDecorationsPerOutputLine[outputLineIndex] = inlineDecorations;\n                const lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n                const lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n                while (currentInjectedOffset < injectionOffsets.length) {\n                    const length = injectionOptions[currentInjectedOffset].content.length;\n                    const injectedTextStartOffsetInInputWithInjections = injectionOffsets[currentInjectedOffset] + totalInjectedTextLengthBefore;\n                    const injectedTextEndOffsetInInputWithInjections = injectedTextStartOffsetInInputWithInjections + length;\n                    if (injectedTextStartOffsetInInputWithInjections > lineEndOffsetInInputWithInjections) {\n                        // Injected text only starts in later wrapped lines.\n                        break;\n                    }\n                    if (lineStartOffsetInInputWithInjections < injectedTextEndOffsetInInputWithInjections) {\n                        // Injected text ends after or in this line (but also starts in or before this line).\n                        const options = injectionOptions[currentInjectedOffset];\n                        if (options.inlineClassName) {\n                            const offset = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n                            const start = offset + Math.max(injectedTextStartOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, 0);\n                            const end = offset + Math.min(injectedTextEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections);\n                            if (start !== end) {\n                                inlineDecorations.push(new SingleLineInlineDecoration(start, end, options.inlineClassName, options.inlineClassNameAffectsLetterSpacing));\n                            }\n                        }\n                    }\n                    if (injectedTextEndOffsetInInputWithInjections <= lineEndOffsetInInputWithInjections) {\n                        totalInjectedTextLengthBefore += length;\n                        currentInjectedOffset++;\n                    }\n                    else {\n                        // injected text breaks into next line, process it again\n                        break;\n                    }\n                }\n            }\n        }\n        let lineWithInjections;\n        if (injectionOffsets) {\n            lineWithInjections = model.tokenization.getLineTokens(modelLineNumber).withInserted(injectionOffsets.map((offset, idx) => ({\n                offset,\n                text: injectionOptions[idx].content,\n                tokenMetadata: LineTokens.defaultTokenMetadata\n            })));\n        }\n        else {\n            lineWithInjections = model.tokenization.getLineTokens(modelLineNumber);\n        }\n        for (let outputLineIndex = outputLineIdx; outputLineIndex < outputLineIdx + lineCount; outputLineIndex++) {\n            const globalIndex = globalStartIndex + outputLineIndex - outputLineIdx;\n            if (!needed[globalIndex]) {\n                result[globalIndex] = null;\n                continue;\n            }\n            result[globalIndex] = this._getViewLineData(lineWithInjections, inlineDecorationsPerOutputLine ? inlineDecorationsPerOutputLine[outputLineIndex] : null, outputLineIndex);\n        }\n    }\n    _getViewLineData(lineWithInjections, inlineDecorations, outputLineIndex) {\n        this._assertVisible();\n        const lineBreakData = this._projectionData;\n        const deltaStartIndex = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n        const lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n        const lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n        const tokens = lineWithInjections.sliceAndInflate(lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections, deltaStartIndex);\n        let lineContent = tokens.getLineContent();\n        if (outputLineIndex > 0) {\n            lineContent = spaces(lineBreakData.wrappedTextIndentLength) + lineContent;\n        }\n        const minColumn = this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n        const maxColumn = lineContent.length + 1;\n        const continuesWithWrappedLine = (outputLineIndex + 1 < this.getViewLineCount());\n        const startVisibleColumn = (outputLineIndex === 0 ? 0 : lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1]);\n        return new ViewLineData(lineContent, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens, inlineDecorations);\n    }\n    getModelColumnOfViewPosition(outputLineIndex, outputColumn) {\n        this._assertVisible();\n        return this._projectionData.translateToInputOffset(outputLineIndex, outputColumn - 1) + 1;\n    }\n    getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity = 2 /* PositionAffinity.None */) {\n        this._assertVisible();\n        const r = this._projectionData.translateToOutputPosition(inputColumn - 1, affinity);\n        return r.toPosition(deltaLineNumber);\n    }\n    getViewLineNumberOfModelPosition(deltaLineNumber, inputColumn) {\n        this._assertVisible();\n        const r = this._projectionData.translateToOutputPosition(inputColumn - 1);\n        return deltaLineNumber + r.outputLineIndex;\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        const baseViewLineNumber = outputPosition.lineNumber - outputLineIndex;\n        const normalizedOutputPosition = this._projectionData.normalizeOutputPosition(outputLineIndex, outputPosition.column - 1, affinity);\n        const result = normalizedOutputPosition.toPosition(baseViewLineNumber);\n        return result;\n    }\n    getInjectedTextAt(outputLineIndex, outputColumn) {\n        return this._projectionData.getInjectedText(outputLineIndex, outputColumn - 1);\n    }\n    _assertVisible() {\n        if (!this._isVisible) {\n            throw new Error('Not supported');\n        }\n    }\n}\n/**\n * This projection does not change the model line.\n*/\nclass IdentityModelLineProjection {\n    constructor() { }\n    isVisible() {\n        return true;\n    }\n    setVisible(isVisible) {\n        if (isVisible) {\n            return this;\n        }\n        return HiddenModelLineProjection.INSTANCE;\n    }\n    getProjectionData() {\n        return null;\n    }\n    getViewLineCount() {\n        return 1;\n    }\n    getViewLineContent(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineContent(modelLineNumber);\n    }\n    getViewLineLength(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineLength(modelLineNumber);\n    }\n    getViewLineMinColumn(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineMinColumn(modelLineNumber);\n    }\n    getViewLineMaxColumn(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineMaxColumn(modelLineNumber);\n    }\n    getViewLineData(model, modelLineNumber, _outputLineIndex) {\n        const lineTokens = model.tokenization.getLineTokens(modelLineNumber);\n        const lineContent = lineTokens.getLineContent();\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate(), null);\n    }\n    getViewLinesData(model, modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, globalStartIndex, needed, result) {\n        if (!needed[globalStartIndex]) {\n            result[globalStartIndex] = null;\n            return;\n        }\n        result[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\n    }\n    getModelColumnOfViewPosition(_outputLineIndex, outputColumn) {\n        return outputColumn;\n    }\n    getViewPositionOfModelPosition(deltaLineNumber, inputColumn) {\n        return new Position(deltaLineNumber, inputColumn);\n    }\n    getViewLineNumberOfModelPosition(deltaLineNumber, _inputColumn) {\n        return deltaLineNumber;\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        return outputPosition;\n    }\n    getInjectedTextAt(_outputLineIndex, _outputColumn) {\n        return null;\n    }\n}\nIdentityModelLineProjection.INSTANCE = new IdentityModelLineProjection();\n/**\n * This projection hides the model line.\n */\nclass HiddenModelLineProjection {\n    constructor() { }\n    isVisible() {\n        return false;\n    }\n    setVisible(isVisible) {\n        if (!isVisible) {\n            return this;\n        }\n        return IdentityModelLineProjection.INSTANCE;\n    }\n    getProjectionData() {\n        return null;\n    }\n    getViewLineCount() {\n        return 0;\n    }\n    getViewLineContent(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineLength(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineMinColumn(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineMaxColumn(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineData(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLinesData(_model, _modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, _globalStartIndex, _needed, _result) {\n        throw new Error('Not supported');\n    }\n    getModelColumnOfViewPosition(_outputLineIndex, _outputColumn) {\n        throw new Error('Not supported');\n    }\n    getViewPositionOfModelPosition(_deltaLineNumber, _inputColumn) {\n        throw new Error('Not supported');\n    }\n    getViewLineNumberOfModelPosition(_deltaLineNumber, _inputColumn) {\n        throw new Error('Not supported');\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        throw new Error('Not supported');\n    }\n    getInjectedTextAt(_outputLineIndex, _outputColumn) {\n        throw new Error('Not supported');\n    }\n}\nHiddenModelLineProjection.INSTANCE = new HiddenModelLineProjection();\nconst _spaces = [''];\nfunction spaces(count) {\n    if (count >= _spaces.length) {\n        for (let i = 1; i <= count; i++) {\n            _spaces[i] = _makeSpaces(i);\n        }\n    }\n    return _spaces[count];\n}\nfunction _makeSpaces(count) {\n    return new Array(count + 1).join(' ');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { IndentGuide, IndentGuideHorizontalLine } from '../textModelGuides.js';\nimport { ModelDecorationOptions } from '../model/textModel.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { createModelLineProjection } from './modelLineProjection.js';\nimport { ConstantTimePrefixSumComputer } from '../model/prefixSumComputer.js';\nimport { ViewLineData } from '../viewModel.js';\nexport class ViewModelLinesFromProjectedModel {\n    constructor(editorId, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, tabSize, wrappingStrategy, wrappingColumn, wrappingIndent, wordBreak) {\n        this._editorId = editorId;\n        this.model = model;\n        this._validModelVersionId = -1;\n        this._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\n        this._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\n        this.fontInfo = fontInfo;\n        this.tabSize = tabSize;\n        this.wrappingStrategy = wrappingStrategy;\n        this.wrappingColumn = wrappingColumn;\n        this.wrappingIndent = wrappingIndent;\n        this.wordBreak = wordBreak;\n        this._constructLines(/*resetHiddenAreas*/ true, null);\n    }\n    dispose() {\n        this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n    }\n    createCoordinatesConverter() {\n        return new CoordinatesConverter(this);\n    }\n    _constructLines(resetHiddenAreas, previousLineBreaks) {\n        this.modelLineProjections = [];\n        if (resetHiddenAreas) {\n            this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n        }\n        const linesContent = this.model.getLinesContent();\n        const injectedTextDecorations = this.model.getInjectedTextDecorations(this._editorId);\n        const lineCount = linesContent.length;\n        const lineBreaksComputer = this.createLineBreaksComputer();\n        const injectedTextQueue = new arrays.ArrayQueue(LineInjectedText.fromDecorations(injectedTextDecorations));\n        for (let i = 0; i < lineCount; i++) {\n            const lineInjectedText = injectedTextQueue.takeWhile(t => t.lineNumber === i + 1);\n            lineBreaksComputer.addRequest(linesContent[i], lineInjectedText, previousLineBreaks ? previousLineBreaks[i] : null);\n        }\n        const linesBreaks = lineBreaksComputer.finalize();\n        const values = [];\n        const hiddenAreas = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)).sort(Range.compareRangesUsingStarts);\n        let hiddenAreaStart = 1, hiddenAreaEnd = 0;\n        let hiddenAreaIdx = -1;\n        let nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n        for (let i = 0; i < lineCount; i++) {\n            const lineNumber = i + 1;\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n                hiddenAreaIdx++;\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n            }\n            const isInHiddenArea = (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd);\n            const line = createModelLineProjection(linesBreaks[i], !isInHiddenArea);\n            values[i] = line.getViewLineCount();\n            this.modelLineProjections[i] = line;\n        }\n        this._validModelVersionId = this.model.getVersionId();\n        this.projectedModelLineLineCounts = new ConstantTimePrefixSumComputer(values);\n    }\n    getHiddenAreas() {\n        return this.hiddenAreasDecorationIds.map((decId) => this.model.getDecorationRange(decId));\n    }\n    setHiddenAreas(_ranges) {\n        const validatedRanges = _ranges.map(r => this.model.validateRange(r));\n        const newRanges = normalizeLineRanges(validatedRanges);\n        // TODO@Martin: Please stop calling this method on each model change!\n        // This checks if there really was a change\n        const oldRanges = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)).sort(Range.compareRangesUsingStarts);\n        if (newRanges.length === oldRanges.length) {\n            let hasDifference = false;\n            for (let i = 0; i < newRanges.length; i++) {\n                if (!newRanges[i].equalsRange(oldRanges[i])) {\n                    hasDifference = true;\n                    break;\n                }\n            }\n            if (!hasDifference) {\n                return false;\n            }\n        }\n        const newDecorations = newRanges.map((r) => ({\n            range: r,\n            options: ModelDecorationOptions.EMPTY,\n        }));\n        this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, newDecorations);\n        const hiddenAreas = newRanges;\n        let hiddenAreaStart = 1, hiddenAreaEnd = 0;\n        let hiddenAreaIdx = -1;\n        let nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n        let hasVisibleLine = false;\n        for (let i = 0; i < this.modelLineProjections.length; i++) {\n            const lineNumber = i + 1;\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n                hiddenAreaIdx++;\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n            }\n            let lineChanged = false;\n            if (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\n                // Line should be hidden\n                if (this.modelLineProjections[i].isVisible()) {\n                    this.modelLineProjections[i] = this.modelLineProjections[i].setVisible(false);\n                    lineChanged = true;\n                }\n            }\n            else {\n                hasVisibleLine = true;\n                // Line should be visible\n                if (!this.modelLineProjections[i].isVisible()) {\n                    this.modelLineProjections[i] = this.modelLineProjections[i].setVisible(true);\n                    lineChanged = true;\n                }\n            }\n            if (lineChanged) {\n                const newOutputLineCount = this.modelLineProjections[i].getViewLineCount();\n                this.projectedModelLineLineCounts.setValue(i, newOutputLineCount);\n            }\n        }\n        if (!hasVisibleLine) {\n            // Cannot have everything be hidden => reveal everything!\n            this.setHiddenAreas([]);\n        }\n        return true;\n    }\n    modelPositionIsVisible(modelLineNumber, _modelColumn) {\n        if (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n            // invalid arguments\n            return false;\n        }\n        return this.modelLineProjections[modelLineNumber - 1].isVisible();\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        if (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n            // invalid arguments\n            return 1;\n        }\n        return this.modelLineProjections[modelLineNumber - 1].getViewLineCount();\n    }\n    setTabSize(newTabSize) {\n        if (this.tabSize === newTabSize) {\n            return false;\n        }\n        this.tabSize = newTabSize;\n        this._constructLines(/*resetHiddenAreas*/ false, null);\n        return true;\n    }\n    setWrappingSettings(fontInfo, wrappingStrategy, wrappingColumn, wrappingIndent, wordBreak) {\n        const equalFontInfo = this.fontInfo.equals(fontInfo);\n        const equalWrappingStrategy = (this.wrappingStrategy === wrappingStrategy);\n        const equalWrappingColumn = (this.wrappingColumn === wrappingColumn);\n        const equalWrappingIndent = (this.wrappingIndent === wrappingIndent);\n        const equalWordBreak = (this.wordBreak === wordBreak);\n        if (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent && equalWordBreak) {\n            return false;\n        }\n        const onlyWrappingColumnChanged = (equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent && equalWordBreak);\n        this.fontInfo = fontInfo;\n        this.wrappingStrategy = wrappingStrategy;\n        this.wrappingColumn = wrappingColumn;\n        this.wrappingIndent = wrappingIndent;\n        this.wordBreak = wordBreak;\n        let previousLineBreaks = null;\n        if (onlyWrappingColumnChanged) {\n            previousLineBreaks = [];\n            for (let i = 0, len = this.modelLineProjections.length; i < len; i++) {\n                previousLineBreaks[i] = this.modelLineProjections[i].getProjectionData();\n            }\n        }\n        this._constructLines(/*resetHiddenAreas*/ false, previousLineBreaks);\n        return true;\n    }\n    createLineBreaksComputer() {\n        const lineBreaksComputerFactory = (this.wrappingStrategy === 'advanced'\n            ? this._domLineBreaksComputerFactory\n            : this._monospaceLineBreaksComputerFactory);\n        return lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent, this.wordBreak);\n    }\n    onModelFlushed() {\n        this._constructLines(/*resetHiddenAreas*/ true, null);\n    }\n    onModelLinesDeleted(versionId, fromLineNumber, toLineNumber) {\n        if (!versionId || versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return null;\n        }\n        const outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n        const outputToLineNumber = this.projectedModelLineLineCounts.getPrefixSum(toLineNumber);\n        this.modelLineProjections.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n        this.projectedModelLineLineCounts.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n        return new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\n    }\n    onModelLinesInserted(versionId, fromLineNumber, _toLineNumber, lineBreaks) {\n        if (!versionId || versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return null;\n        }\n        // cannot use this.getHiddenAreas() because those decorations have already seen the effect of this model change\n        const isInHiddenArea = (fromLineNumber > 2 && !this.modelLineProjections[fromLineNumber - 2].isVisible());\n        const outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n        let totalOutputLineCount = 0;\n        const insertLines = [];\n        const insertPrefixSumValues = [];\n        for (let i = 0, len = lineBreaks.length; i < len; i++) {\n            const line = createModelLineProjection(lineBreaks[i], !isInHiddenArea);\n            insertLines.push(line);\n            const outputLineCount = line.getViewLineCount();\n            totalOutputLineCount += outputLineCount;\n            insertPrefixSumValues[i] = outputLineCount;\n        }\n        // TODO@Alex: use arrays.arrayInsert\n        this.modelLineProjections =\n            this.modelLineProjections.slice(0, fromLineNumber - 1)\n                .concat(insertLines)\n                .concat(this.modelLineProjections.slice(fromLineNumber - 1));\n        this.projectedModelLineLineCounts.insertValues(fromLineNumber - 1, insertPrefixSumValues);\n        return new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\n    }\n    onModelLineChanged(versionId, lineNumber, lineBreakData) {\n        if (versionId !== null && versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return [false, null, null, null];\n        }\n        const lineIndex = lineNumber - 1;\n        const oldOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n        const isVisible = this.modelLineProjections[lineIndex].isVisible();\n        const line = createModelLineProjection(lineBreakData, isVisible);\n        this.modelLineProjections[lineIndex] = line;\n        const newOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n        let lineMappingChanged = false;\n        let changeFrom = 0;\n        let changeTo = -1;\n        let insertFrom = 0;\n        let insertTo = -1;\n        let deleteFrom = 0;\n        let deleteTo = -1;\n        if (oldOutputLineCount > newOutputLineCount) {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + newOutputLineCount - 1;\n            deleteFrom = changeTo + 1;\n            deleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\n            lineMappingChanged = true;\n        }\n        else if (oldOutputLineCount < newOutputLineCount) {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + oldOutputLineCount - 1;\n            insertFrom = changeTo + 1;\n            insertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\n            lineMappingChanged = true;\n        }\n        else {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + newOutputLineCount - 1;\n        }\n        this.projectedModelLineLineCounts.setValue(lineIndex, newOutputLineCount);\n        const viewLinesChangedEvent = (changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo - changeFrom + 1) : null);\n        const viewLinesInsertedEvent = (insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null);\n        const viewLinesDeletedEvent = (deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null);\n        return [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\n    }\n    acceptVersionId(versionId) {\n        this._validModelVersionId = versionId;\n        if (this.modelLineProjections.length === 1 && !this.modelLineProjections[0].isVisible()) {\n            // At least one line must be visible => reset hidden areas\n            this.setHiddenAreas([]);\n        }\n    }\n    getViewLineCount() {\n        return this.projectedModelLineLineCounts.getTotalSum();\n    }\n    _toValidViewLineNumber(viewLineNumber) {\n        if (viewLineNumber < 1) {\n            return 1;\n        }\n        const viewLineCount = this.getViewLineCount();\n        if (viewLineNumber > viewLineCount) {\n            return viewLineCount;\n        }\n        return viewLineNumber | 0;\n    }\n    getActiveIndentGuide(viewLineNumber, minLineNumber, maxLineNumber) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        minLineNumber = this._toValidViewLineNumber(minLineNumber);\n        maxLineNumber = this._toValidViewLineNumber(maxLineNumber);\n        const modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\n        const modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\n        const modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\n        const result = this.model.guides.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\n        const viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\n        const viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\n        return {\n            startLineNumber: viewStartPosition.lineNumber,\n            endLineNumber: viewEndPosition.lineNumber,\n            indent: result.indent\n        };\n    }\n    // #region ViewLineInfo\n    getViewLineInfo(viewLineNumber) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        const r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n        const lineIndex = r.index;\n        const remainder = r.remainder;\n        return new ViewLineInfo(lineIndex + 1, remainder);\n    }\n    getMinColumnOfViewLine(viewLineInfo) {\n        return this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMinColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n    }\n    getMaxColumnOfViewLine(viewLineInfo) {\n        return this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMaxColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n    }\n    getModelStartPositionOfViewLine(viewLineInfo) {\n        const line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n        const minViewColumn = line.getViewLineMinColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n        const column = line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx, minViewColumn);\n        return new Position(viewLineInfo.modelLineNumber, column);\n    }\n    getModelEndPositionOfViewLine(viewLineInfo) {\n        const line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n        const maxViewColumn = line.getViewLineMaxColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n        const column = line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx, maxViewColumn);\n        return new Position(viewLineInfo.modelLineNumber, column);\n    }\n    getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber) {\n        const startViewLine = this.getViewLineInfo(viewStartLineNumber);\n        const endViewLine = this.getViewLineInfo(viewEndLineNumber);\n        const result = new Array();\n        let lastVisibleModelPos = this.getModelStartPositionOfViewLine(startViewLine);\n        let viewLines = new Array();\n        for (let curModelLine = startViewLine.modelLineNumber; curModelLine <= endViewLine.modelLineNumber; curModelLine++) {\n            const line = this.modelLineProjections[curModelLine - 1];\n            if (line.isVisible()) {\n                const startOffset = curModelLine === startViewLine.modelLineNumber\n                    ? startViewLine.modelLineWrappedLineIdx\n                    : 0;\n                const endOffset = curModelLine === endViewLine.modelLineNumber\n                    ? endViewLine.modelLineWrappedLineIdx + 1\n                    : line.getViewLineCount();\n                for (let i = startOffset; i < endOffset; i++) {\n                    viewLines.push(new ViewLineInfo(curModelLine, i));\n                }\n            }\n            if (!line.isVisible() && lastVisibleModelPos) {\n                const lastVisibleModelPos2 = new Position(curModelLine - 1, this.model.getLineMaxColumn(curModelLine - 1) + 1);\n                const modelRange = Range.fromPositions(lastVisibleModelPos, lastVisibleModelPos2);\n                result.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n                viewLines = [];\n                lastVisibleModelPos = null;\n            }\n            else if (line.isVisible() && !lastVisibleModelPos) {\n                lastVisibleModelPos = new Position(curModelLine, 1);\n            }\n        }\n        if (lastVisibleModelPos) {\n            const modelRange = Range.fromPositions(lastVisibleModelPos, this.getModelEndPositionOfViewLine(endViewLine));\n            result.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n        }\n        return result;\n    }\n    // #endregion\n    getViewLinesBracketGuides(viewStartLineNumber, viewEndLineNumber, activeViewPosition, options) {\n        const modelActivePosition = activeViewPosition ? this.convertViewPositionToModelPosition(activeViewPosition.lineNumber, activeViewPosition.column) : null;\n        const resultPerViewLine = [];\n        for (const group of this.getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber)) {\n            const modelRangeStartLineNumber = group.modelRange.startLineNumber;\n            const bracketGuidesPerModelLine = this.model.guides.getLinesBracketGuides(modelRangeStartLineNumber, group.modelRange.endLineNumber, modelActivePosition, options);\n            for (const viewLineInfo of group.viewLines) {\n                const bracketGuides = bracketGuidesPerModelLine[viewLineInfo.modelLineNumber - modelRangeStartLineNumber];\n                // visibleColumns stay as they are (this is a bug and needs to be fixed, but it is not a regression)\n                // model-columns must be converted to view-model columns.\n                const result = bracketGuides.map(g => {\n                    if (g.forWrappedLinesAfterColumn !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesAfterColumn);\n                        if (p.lineNumber >= viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    if (g.forWrappedLinesBeforeOrAtColumn !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesBeforeOrAtColumn);\n                        if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    if (!g.horizontalLine) {\n                        return g;\n                    }\n                    let column = -1;\n                    if (g.column !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.column);\n                        if (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n                            column = p.column;\n                        }\n                        else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                            column = this.getMinColumnOfViewLine(viewLineInfo);\n                        }\n                        else if (p.lineNumber > viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    const viewPosition = this.convertModelPositionToViewPosition(viewLineInfo.modelLineNumber, g.horizontalLine.endColumn);\n                    const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.horizontalLine.endColumn);\n                    if (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n                        return new IndentGuide(g.visibleColumn, column, g.className, new IndentGuideHorizontalLine(g.horizontalLine.top, viewPosition.column), -1, -1);\n                    }\n                    else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                        return undefined;\n                    }\n                    else {\n                        if (g.visibleColumn !== -1) {\n                            // Don't repeat horizontal lines that use visibleColumn for unrelated lines.\n                            return undefined;\n                        }\n                        return new IndentGuide(g.visibleColumn, column, g.className, new IndentGuideHorizontalLine(g.horizontalLine.top, this.getMaxColumnOfViewLine(viewLineInfo)), -1, -1);\n                    }\n                });\n                resultPerViewLine.push(result.filter((r) => !!r));\n            }\n        }\n        return resultPerViewLine;\n    }\n    getViewLinesIndentGuides(viewStartLineNumber, viewEndLineNumber) {\n        // TODO: Use the same code as in `getViewLinesBracketGuides`.\n        // Future TODO: Merge with `getViewLinesBracketGuides`.\n        // However, this requires more refactoring of indent guides.\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n        const modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\n        const modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\n        let result = [];\n        const resultRepeatCount = [];\n        const resultRepeatOption = [];\n        const modelStartLineIndex = modelStart.lineNumber - 1;\n        const modelEndLineIndex = modelEnd.lineNumber - 1;\n        let reqStart = null;\n        for (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (line.isVisible()) {\n                const viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n                const viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\n                const count = viewLineEndIndex - viewLineStartIndex + 1;\n                let option = 0 /* IndentGuideRepeatOption.BlockNone */;\n                if (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\n                    // wrapped lines should block indent guides\n                    option = (viewLineStartIndex === 0 ? 1 /* IndentGuideRepeatOption.BlockSubsequent */ : 2 /* IndentGuideRepeatOption.BlockAll */);\n                }\n                resultRepeatCount.push(count);\n                resultRepeatOption.push(option);\n                // merge into previous request\n                if (reqStart === null) {\n                    reqStart = new Position(modelLineIndex + 1, 0);\n                }\n            }\n            else {\n                // hit invisible line => flush request\n                if (reqStart !== null) {\n                    result = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\n                    reqStart = null;\n                }\n            }\n        }\n        if (reqStart !== null) {\n            result = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\n            reqStart = null;\n        }\n        const viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n        const viewIndents = new Array(viewLineCount);\n        let currIndex = 0;\n        for (let i = 0, len = result.length; i < len; i++) {\n            let value = result[i];\n            const count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\n            const option = resultRepeatOption[i];\n            let blockAtIndex;\n            if (option === 2 /* IndentGuideRepeatOption.BlockAll */) {\n                blockAtIndex = 0;\n            }\n            else if (option === 1 /* IndentGuideRepeatOption.BlockSubsequent */) {\n                blockAtIndex = 1;\n            }\n            else {\n                blockAtIndex = count;\n            }\n            for (let j = 0; j < count; j++) {\n                if (j === blockAtIndex) {\n                    value = 0;\n                }\n                viewIndents[currIndex++] = value;\n            }\n        }\n        return viewIndents;\n    }\n    getViewLineContent(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineContent(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineLength(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineLength(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineMinColumn(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineMinColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineMaxColumn(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineMaxColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineData(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineData(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLinesData(viewStartLineNumber, viewEndLineNumber, needed) {\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n        const start = this.projectedModelLineLineCounts.getIndexOf(viewStartLineNumber - 1);\n        let viewLineNumber = viewStartLineNumber;\n        const startModelLineIndex = start.index;\n        const startRemainder = start.remainder;\n        const result = [];\n        for (let modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (!line.isVisible()) {\n                continue;\n            }\n            const fromViewLineIndex = (modelLineIndex === startModelLineIndex ? startRemainder : 0);\n            let remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\n            let lastLine = false;\n            if (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\n                lastLine = true;\n                remainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\n            }\n            line.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, remainingViewLineCount, viewLineNumber - viewStartLineNumber, needed, result);\n            viewLineNumber += remainingViewLineCount;\n            if (lastLine) {\n                break;\n            }\n        }\n        return result;\n    }\n    validateViewPosition(viewLineNumber, viewColumn, expectedModelPosition) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        const r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n        const lineIndex = r.index;\n        const remainder = r.remainder;\n        const line = this.modelLineProjections[lineIndex];\n        const minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n        const maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n        if (viewColumn < minColumn) {\n            viewColumn = minColumn;\n        }\n        if (viewColumn > maxColumn) {\n            viewColumn = maxColumn;\n        }\n        const computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\n        const computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\n        if (computedModelPosition.equals(expectedModelPosition)) {\n            return new Position(viewLineNumber, viewColumn);\n        }\n        return this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\n    }\n    validateViewRange(viewRange, expectedModelRange) {\n        const validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\n        const validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\n        return new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\n    }\n    convertViewPositionToModelPosition(viewLineNumber, viewColumn) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        const inputColumn = this.modelLineProjections[info.modelLineNumber - 1].getModelColumnOfViewPosition(info.modelLineWrappedLineIdx, viewColumn);\n        // console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\n        return this.model.validatePosition(new Position(info.modelLineNumber, inputColumn));\n    }\n    convertViewRangeToModelRange(viewRange) {\n        const start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\n        const end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    convertModelPositionToViewPosition(_modelLineNumber, _modelColumn, affinity = 2 /* PositionAffinity.None */) {\n        const validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\n        const inputLineNumber = validPosition.lineNumber;\n        const inputColumn = validPosition.column;\n        let lineIndex = inputLineNumber - 1, lineIndexChanged = false;\n        while (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            lineIndex--;\n            lineIndexChanged = true;\n        }\n        if (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            // Could not reach a real line\n            // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\n            return new Position(1, 1);\n        }\n        const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n        let r;\n        if (lineIndexChanged) {\n            r = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1), affinity);\n        }\n        else {\n            r = this.modelLineProjections[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity);\n        }\n        // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\n        return r;\n    }\n    /**\n     * @param affinity The affinity in case of an empty range. Has no effect for non-empty ranges.\n    */\n    convertModelRangeToViewRange(modelRange, affinity = 0 /* PositionAffinity.Left */) {\n        if (modelRange.isEmpty()) {\n            const start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, affinity);\n            return Range.fromPositions(start);\n        }\n        else {\n            const start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, 1 /* PositionAffinity.Right */);\n            const end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn, 0 /* PositionAffinity.Left */);\n            return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n        }\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        let lineIndex = modelLineNumber - 1;\n        if (this.modelLineProjections[lineIndex].isVisible()) {\n            // this model line is visible\n            const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n            return this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, modelColumn);\n        }\n        // this model line is not visible\n        while (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            lineIndex--;\n        }\n        if (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            // Could not reach a real line\n            return 1;\n        }\n        const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n        return this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n    }\n    getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations) {\n        const modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\n        const modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\n        if (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\n            // most likely there are no hidden lines => fast path\n            // fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\n            return this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, onlyMinimapDecorations);\n        }\n        let result = [];\n        const modelStartLineIndex = modelStart.lineNumber - 1;\n        const modelEndLineIndex = modelEnd.lineNumber - 1;\n        let reqStart = null;\n        for (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (line.isVisible()) {\n                // merge into previous request\n                if (reqStart === null) {\n                    reqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n                }\n            }\n            else {\n                // hit invisible line => flush request\n                if (reqStart !== null) {\n                    const maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\n                    result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation, onlyMinimapDecorations));\n                    reqStart = null;\n                }\n            }\n        }\n        if (reqStart !== null) {\n            result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, onlyMinimapDecorations));\n            reqStart = null;\n        }\n        result.sort((a, b) => {\n            const res = Range.compareRangesUsingStarts(a.range, b.range);\n            if (res === 0) {\n                if (a.id < b.id) {\n                    return -1;\n                }\n                if (a.id > b.id) {\n                    return 1;\n                }\n                return 0;\n            }\n            return res;\n        });\n        // Eliminate duplicate decorations that might have intersected our visible ranges multiple times\n        const finalResult = [];\n        let finalResultLen = 0;\n        let prevDecId = null;\n        for (const dec of result) {\n            const decId = dec.id;\n            if (prevDecId === decId) {\n                // skip\n                continue;\n            }\n            prevDecId = decId;\n            finalResult[finalResultLen++] = dec;\n        }\n        return finalResult;\n    }\n    getInjectedTextAt(position) {\n        const info = this.getViewLineInfo(position.lineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getInjectedTextAt(info.modelLineWrappedLineIdx, position.column);\n    }\n    normalizePosition(position, affinity) {\n        const info = this.getViewLineInfo(position.lineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].normalizePosition(info.modelLineWrappedLineIdx, position, affinity);\n    }\n    getLineIndentColumn(lineNumber) {\n        const info = this.getViewLineInfo(lineNumber);\n        if (info.modelLineWrappedLineIdx === 0) {\n            return this.model.getLineIndentColumn(info.modelLineNumber);\n        }\n        // wrapped lines have no indentation.\n        // We deliberately don't handle the case that indentation is wrapped\n        // to avoid two view lines reporting indentation for the very same model line.\n        return 0;\n    }\n}\n/**\n * Overlapping unsorted ranges:\n * [   )      [ )       [  )\n *    [    )      [       )\n * ->\n * Non overlapping sorted ranges:\n * [       )  [ ) [        )\n *\n * Note: This function only considers line information! Columns are ignored.\n*/\nfunction normalizeLineRanges(ranges) {\n    if (ranges.length === 0) {\n        return [];\n    }\n    const sortedRanges = ranges.slice();\n    sortedRanges.sort(Range.compareRangesUsingStarts);\n    const result = [];\n    let currentRangeStart = sortedRanges[0].startLineNumber;\n    let currentRangeEnd = sortedRanges[0].endLineNumber;\n    for (let i = 1, len = sortedRanges.length; i < len; i++) {\n        const range = sortedRanges[i];\n        if (range.startLineNumber > currentRangeEnd + 1) {\n            result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n            currentRangeStart = range.startLineNumber;\n            currentRangeEnd = range.endLineNumber;\n        }\n        else if (range.endLineNumber > currentRangeEnd) {\n            currentRangeEnd = range.endLineNumber;\n        }\n    }\n    result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n    return result;\n}\n/**\n * Represents a view line. Can be used to efficiently query more information about it.\n */\nclass ViewLineInfo {\n    constructor(modelLineNumber, modelLineWrappedLineIdx) {\n        this.modelLineNumber = modelLineNumber;\n        this.modelLineWrappedLineIdx = modelLineWrappedLineIdx;\n    }\n}\n/**\n * A list of view lines that have a contiguous span in the model.\n*/\nclass ViewLineInfoGroupedByModelRange {\n    constructor(modelRange, viewLines) {\n        this.modelRange = modelRange;\n        this.viewLines = viewLines;\n    }\n}\nclass CoordinatesConverter {\n    constructor(lines) {\n        this._lines = lines;\n    }\n    // View -> Model conversion and related methods\n    convertViewPositionToModelPosition(viewPosition) {\n        return this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\n    }\n    convertViewRangeToModelRange(viewRange) {\n        return this._lines.convertViewRangeToModelRange(viewRange);\n    }\n    validateViewPosition(viewPosition, expectedModelPosition) {\n        return this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\n    }\n    validateViewRange(viewRange, expectedModelRange) {\n        return this._lines.validateViewRange(viewRange, expectedModelRange);\n    }\n    // Model -> View conversion and related methods\n    convertModelPositionToViewPosition(modelPosition, affinity) {\n        return this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column, affinity);\n    }\n    convertModelRangeToViewRange(modelRange, affinity) {\n        return this._lines.convertModelRangeToViewRange(modelRange, affinity);\n    }\n    modelPositionIsVisible(modelPosition) {\n        return this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        return this._lines.getModelLineViewLineCount(modelLineNumber);\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        return this._lines.getViewLineNumberOfModelPosition(modelLineNumber, modelColumn);\n    }\n}\nexport class ViewModelLinesFromModelAsIs {\n    constructor(model) {\n        this.model = model;\n    }\n    dispose() {\n    }\n    createCoordinatesConverter() {\n        return new IdentityCoordinatesConverter(this);\n    }\n    getHiddenAreas() {\n        return [];\n    }\n    setHiddenAreas(_ranges) {\n        return false;\n    }\n    setTabSize(_newTabSize) {\n        return false;\n    }\n    setWrappingSettings(_fontInfo, _wrappingStrategy, _wrappingColumn, _wrappingIndent) {\n        return false;\n    }\n    createLineBreaksComputer() {\n        const result = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                result.push(null);\n            },\n            finalize: () => {\n                return result;\n            }\n        };\n    }\n    onModelFlushed() {\n    }\n    onModelLinesDeleted(_versionId, fromLineNumber, toLineNumber) {\n        return new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\n    }\n    onModelLinesInserted(_versionId, fromLineNumber, toLineNumber, lineBreaks) {\n        return new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\n    }\n    onModelLineChanged(_versionId, lineNumber, lineBreakData) {\n        return [false, new viewEvents.ViewLinesChangedEvent(lineNumber, 1), null, null];\n    }\n    acceptVersionId(_versionId) {\n    }\n    getViewLineCount() {\n        return this.model.getLineCount();\n    }\n    getActiveIndentGuide(viewLineNumber, _minLineNumber, _maxLineNumber) {\n        return {\n            startLineNumber: viewLineNumber,\n            endLineNumber: viewLineNumber,\n            indent: 0\n        };\n    }\n    getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition) {\n        return new Array(endLineNumber - startLineNumber + 1).fill([]);\n    }\n    getViewLinesIndentGuides(viewStartLineNumber, viewEndLineNumber) {\n        const viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n        const result = new Array(viewLineCount);\n        for (let i = 0; i < viewLineCount; i++) {\n            result[i] = 0;\n        }\n        return result;\n    }\n    getViewLineContent(viewLineNumber) {\n        return this.model.getLineContent(viewLineNumber);\n    }\n    getViewLineLength(viewLineNumber) {\n        return this.model.getLineLength(viewLineNumber);\n    }\n    getViewLineMinColumn(viewLineNumber) {\n        return this.model.getLineMinColumn(viewLineNumber);\n    }\n    getViewLineMaxColumn(viewLineNumber) {\n        return this.model.getLineMaxColumn(viewLineNumber);\n    }\n    getViewLineData(viewLineNumber) {\n        const lineTokens = this.model.tokenization.getLineTokens(viewLineNumber);\n        const lineContent = lineTokens.getLineContent();\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate(), null);\n    }\n    getViewLinesData(viewStartLineNumber, viewEndLineNumber, needed) {\n        const lineCount = this.model.getLineCount();\n        viewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\n        viewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\n        const result = [];\n        for (let lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\n            const idx = lineNumber - viewStartLineNumber;\n            result[idx] = needed[idx] ? this.getViewLineData(lineNumber) : null;\n        }\n        return result;\n    }\n    getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations) {\n        return this.model.getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations);\n    }\n    normalizePosition(position, affinity) {\n        return this.model.normalizePosition(position, affinity);\n    }\n    getLineIndentColumn(lineNumber) {\n        return this.model.getLineIndentColumn(lineNumber);\n    }\n    getInjectedTextAt(position) {\n        // Identity lines collection does not support injected text.\n        return null;\n    }\n}\nclass IdentityCoordinatesConverter {\n    constructor(lines) {\n        this._lines = lines;\n    }\n    _validPosition(pos) {\n        return this._lines.model.validatePosition(pos);\n    }\n    _validRange(range) {\n        return this._lines.model.validateRange(range);\n    }\n    // View -> Model conversion and related methods\n    convertViewPositionToModelPosition(viewPosition) {\n        return this._validPosition(viewPosition);\n    }\n    convertViewRangeToModelRange(viewRange) {\n        return this._validRange(viewRange);\n    }\n    validateViewPosition(_viewPosition, expectedModelPosition) {\n        return this._validPosition(expectedModelPosition);\n    }\n    validateViewRange(_viewRange, expectedModelRange) {\n        return this._validRange(expectedModelRange);\n    }\n    // Model -> View conversion and related methods\n    convertModelPositionToViewPosition(modelPosition) {\n        return this._validPosition(modelPosition);\n    }\n    convertModelRangeToViewRange(modelRange) {\n        return this._validRange(modelRange);\n    }\n    modelPositionIsVisible(modelPosition) {\n        const lineCount = this._lines.model.getLineCount();\n        if (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\n            // invalid arguments\n            return false;\n        }\n        return true;\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        return 1;\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        return modelLineNumber;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayQueue } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { CursorsController } from '../cursor/cursor.js';\nimport { CursorConfiguration } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport * as textModelEvents from '../textModelEvents.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { tokenizeLineToHTML } from '../languages/textToHtmlTokenizer.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport { MinimapLinesRenderingData, OverviewRulerDecorationsGroup, ViewLineRenderingData } from '../viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { FocusChangedEvent, HiddenAreasChangedEvent, ModelContentChangedEvent, ModelDecorationsChangedEvent, ModelLanguageChangedEvent, ModelLanguageConfigurationChangedEvent, ModelOptionsChangedEvent, ModelTokensChangedEvent, ReadOnlyEditAttemptEvent, ScrollChangedEvent, ViewModelEventDispatcher, ViewZonesChangedEvent } from '../viewModelEventDispatcher.js';\nimport { ViewModelLinesFromModelAsIs, ViewModelLinesFromProjectedModel } from './viewModelLines.js';\nconst USE_IDENTITY_LINES_COLLECTION = true;\nexport class ViewModel extends Disposable {\n    constructor(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame, languageConfigurationService, _themeService) {\n        super();\n        this.languageConfigurationService = languageConfigurationService;\n        this._themeService = _themeService;\n        this.hiddenAreasModel = new HiddenAreasModel();\n        this.previousHiddenAreas = [];\n        this._editorId = editorId;\n        this._configuration = configuration;\n        this.model = model;\n        this._eventDispatcher = new ViewModelEventDispatcher();\n        this.onEvent = this._eventDispatcher.onEvent;\n        this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n        this._tokenizeViewportSoon = this._register(new RunOnceScheduler(() => this.tokenizeViewport(), 50));\n        this._updateConfigurationViewLineCount = this._register(new RunOnceScheduler(() => this._updateConfigurationViewLineCountNow(), 0));\n        this._hasFocus = false;\n        this._viewportStart = ViewportStart.create(this.model);\n        if (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\n            this._lines = new ViewModelLinesFromModelAsIs(this.model);\n        }\n        else {\n            const options = this._configuration.options;\n            const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n            const wrappingStrategy = options.get(132 /* EditorOption.wrappingStrategy */);\n            const wrappingInfo = options.get(139 /* EditorOption.wrappingInfo */);\n            const wrappingIndent = options.get(131 /* EditorOption.wrappingIndent */);\n            const wordBreak = options.get(123 /* EditorOption.wordBreak */);\n            this._lines = new ViewModelLinesFromProjectedModel(this._editorId, this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak);\n        }\n        this.coordinatesConverter = this._lines.createCoordinatesConverter();\n        this._cursor = this._register(new CursorsController(model, this, this.coordinatesConverter, this.cursorConfig));\n        this.viewLayout = this._register(new ViewLayout(this._configuration, this.getLineCount(), scheduleAtNextAnimationFrame));\n        this._register(this.viewLayout.onDidScroll((e) => {\n            if (e.scrollTopChanged) {\n                this._tokenizeViewportSoon.schedule();\n            }\n            if (e.scrollTopChanged) {\n                this._viewportStart.invalidate();\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(e.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop, e.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop));\n        }));\n        this._register(this.viewLayout.onDidContentSizeChange((e) => {\n            this._eventDispatcher.emitOutgoingEvent(e);\n        }));\n        this._decorations = new ViewModelDecorations(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter);\n        this._registerModelEvents();\n        this._register(this._configuration.onDidChangeFast((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                this._onConfigurationChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n        }));\n        this._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n        }));\n        this._register(this._themeService.onDidColorThemeChange((theme) => {\n            this._invalidateDecorationsColorCache();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme));\n        }));\n        this._updateConfigurationViewLineCountNow();\n    }\n    dispose() {\n        // First remove listeners, as disposing the lines might end up sending\n        // model decoration changed events ... and we no longer care about them ...\n        super.dispose();\n        this._decorations.dispose();\n        this._lines.dispose();\n        this._viewportStart.dispose();\n        this._eventDispatcher.dispose();\n    }\n    createLineBreaksComputer() {\n        return this._lines.createLineBreaksComputer();\n    }\n    addViewEventHandler(eventHandler) {\n        this._eventDispatcher.addViewEventHandler(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        this._eventDispatcher.removeViewEventHandler(eventHandler);\n    }\n    _updateConfigurationViewLineCountNow() {\n        this._configuration.setViewLineCount(this._lines.getViewLineCount());\n    }\n    tokenizeViewport() {\n        const linesViewportData = this.viewLayout.getLinesViewportData();\n        const viewVisibleRange = new Range(linesViewportData.startLineNumber, this.getLineMinColumn(linesViewportData.startLineNumber), linesViewportData.endLineNumber, this.getLineMaxColumn(linesViewportData.endLineNumber));\n        const modelVisibleRanges = this._toModelVisibleRanges(viewVisibleRange);\n        for (const modelVisibleRange of modelVisibleRanges) {\n            this.model.tokenization.tokenizeViewport(modelVisibleRange.startLineNumber, modelVisibleRange.endLineNumber);\n        }\n    }\n    setHasFocus(hasFocus) {\n        this._hasFocus = hasFocus;\n        this._cursor.setHasFocus(hasFocus);\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n        this._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n    }\n    onCompositionStart() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n    }\n    onCompositionEnd() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n    }\n    _captureStableViewport() {\n        // We might need to restore the current start view range, so save it (if available)\n        // But only if the scroll position is not at the top of the file\n        if (this._viewportStart.isValid && this.viewLayout.getCurrentScrollTop() > 0) {\n            const previousViewportStartViewPosition = new Position(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber));\n            const previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n            return new StableViewport(previousViewportStartModelPosition, this._viewportStart.startLineDelta);\n        }\n        return new StableViewport(null, 0);\n    }\n    _onConfigurationChanged(eventsCollector, e) {\n        const stableViewport = this._captureStableViewport();\n        const options = this._configuration.options;\n        const fontInfo = options.get(47 /* EditorOption.fontInfo */);\n        const wrappingStrategy = options.get(132 /* EditorOption.wrappingStrategy */);\n        const wrappingInfo = options.get(139 /* EditorOption.wrappingInfo */);\n        const wrappingIndent = options.get(131 /* EditorOption.wrappingIndent */);\n        const wordBreak = options.get(123 /* EditorOption.wordBreak */);\n        if (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak)) {\n            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n            this._cursor.onLineMappingChanged(eventsCollector);\n            this._decorations.onLineMappingChanged();\n            this.viewLayout.onFlushed(this.getLineCount());\n            this._updateConfigurationViewLineCount.schedule();\n        }\n        if (e.hasChanged(86 /* EditorOption.readOnly */)) {\n            // Must read again all decorations due to readOnly filtering\n            this._decorations.reset();\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        }\n        eventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n        this.viewLayout.onConfigurationChanged(e);\n        stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n        if (CursorConfiguration.shouldRecreate(e)) {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n        }\n    }\n    _registerModelEvents() {\n        this._register(this.model.onDidChangeContentOrInjectedText((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                let hadOtherModelChange = false;\n                let hadModelLineChangeThatChangedLineMapping = false;\n                const changes = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes);\n                const versionId = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.versionId : null);\n                // Do a first pass to compute line mappings, and a second pass to actually interpret them\n                const lineBreaksComputer = this._lines.createLineBreaksComputer();\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            for (let lineIdx = 0; lineIdx < change.detail.length; lineIdx++) {\n                                const line = change.detail[lineIdx];\n                                let injectedText = change.injectedTexts[lineIdx];\n                                if (injectedText) {\n                                    injectedText = injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                                }\n                                lineBreaksComputer.addRequest(line, injectedText, null);\n                            }\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            let injectedText = null;\n                            if (change.injectedText) {\n                                injectedText = change.injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                            }\n                            lineBreaksComputer.addRequest(change.detail, injectedText, null);\n                            break;\n                        }\n                    }\n                }\n                const lineBreaks = lineBreaksComputer.finalize();\n                const lineBreakQueue = new ArrayQueue(lineBreaks);\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 1 /* textModelEvents.RawContentChangedType.Flush */: {\n                            this._lines.onModelFlushed();\n                            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                            this._decorations.reset();\n                            this.viewLayout.onFlushed(this.getLineCount());\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 3 /* textModelEvents.RawContentChangedType.LinesDeleted */: {\n                            const linesDeletedEvent = this._lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n                            if (linesDeletedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            const insertedLineBreaks = lineBreakQueue.takeCount(change.detail.length);\n                            const linesInsertedEvent = this._lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n                            if (linesInsertedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            const changedLineBreakData = lineBreakQueue.dequeue();\n                            const [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] = this._lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData);\n                            hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n                            if (linesChangedEvent) {\n                                eventsCollector.emitViewEvent(linesChangedEvent);\n                            }\n                            if (linesInsertedEvent) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            if (linesDeletedEvent) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            break;\n                        }\n                        case 5 /* textModelEvents.RawContentChangedType.EOLChanged */: {\n                            // Nothing to do. The new version will be accepted below\n                            break;\n                        }\n                    }\n                }\n                if (versionId !== null) {\n                    this._lines.acceptVersionId(versionId);\n                }\n                this.viewLayout.onHeightMaybeChanged();\n                if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                }\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            // Update the configuration and reset the centered view line\n            const viewportStartWasValid = this._viewportStart.isValid;\n            this._viewportStart.invalidate();\n            this._configuration.setModelLineCount(this.model.getLineCount());\n            this._updateConfigurationViewLineCountNow();\n            // Recover viewport\n            if (!this._hasFocus && this.model.getAttachedEditorCount() >= 2 && viewportStartWasValid) {\n                const modelRange = this.model._getTrackedRange(this._viewportStart.modelTrackedRange);\n                if (modelRange) {\n                    const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n                    const viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n                    this.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStart.startLineDelta }, 1 /* ScrollType.Immediate */);\n                }\n            }\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                if (e instanceof textModelEvents.InternalModelContentChangeEvent) {\n                    eventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent));\n                }\n                this._cursor.onModelContentChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            this._tokenizeViewportSoon.schedule();\n        }));\n        this._register(this.model.onDidChangeTokens((e) => {\n            const viewRanges = [];\n            for (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n                const modelRange = e.ranges[j];\n                const viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n                const viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n                viewRanges[j] = {\n                    fromLineNumber: viewStartLineNumber,\n                    toLineNumber: viewEndLineNumber\n                };\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n            if (e.tokenizationSupportChanged) {\n                this._tokenizeViewportSoon.schedule();\n            }\n            this._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguageConfiguration((e) => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguage((e) => {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeOptions((e) => {\n            // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n            if (this._lines.setTabSize(this.model.getOptions().tabSize)) {\n                try {\n                    const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                    eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                    this.viewLayout.onFlushed(this.getLineCount());\n                }\n                finally {\n                    this._eventDispatcher.endEmitViewEvents();\n                }\n                this._updateConfigurationViewLineCount.schedule();\n            }\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeDecorations((e) => {\n            this._decorations.onModelDecorationsChanged();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e));\n        }));\n    }\n    setHiddenAreas(ranges, source) {\n        this.hiddenAreasModel.setHiddenAreas(source, ranges);\n        const mergedRanges = this.hiddenAreasModel.getMergedRanges();\n        if (mergedRanges === this.previousHiddenAreas) {\n            return;\n        }\n        this.previousHiddenAreas = mergedRanges;\n        const stableViewport = this._captureStableViewport();\n        let lineMappingChanged = false;\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            lineMappingChanged = this._lines.setHiddenAreas(mergedRanges);\n            if (lineMappingChanged) {\n                eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                this._cursor.onLineMappingChanged(eventsCollector);\n                this._decorations.onLineMappingChanged();\n                this.viewLayout.onFlushed(this.getLineCount());\n                this.viewLayout.onHeightMaybeChanged();\n            }\n            stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n        this._updateConfigurationViewLineCount.schedule();\n        if (lineMappingChanged) {\n            this._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent());\n        }\n    }\n    getVisibleRangesPlusViewportAboveBelow() {\n        const layoutInfo = this._configuration.options.get(138 /* EditorOption.layoutInfo */);\n        const lineHeight = this._configuration.options.get(63 /* EditorOption.lineHeight */);\n        const linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n        const endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n        return this._toModelVisibleRanges(new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber)));\n    }\n    getVisibleRanges() {\n        const visibleViewRange = this.getCompletelyVisibleViewRange();\n        return this._toModelVisibleRanges(visibleViewRange);\n    }\n    getHiddenAreas() {\n        return this._lines.getHiddenAreas();\n    }\n    _toModelVisibleRanges(visibleViewRange) {\n        const visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        const hiddenAreas = this._lines.getHiddenAreas();\n        if (hiddenAreas.length === 0) {\n            return [visibleRange];\n        }\n        const result = [];\n        let resultLen = 0;\n        let startLineNumber = visibleRange.startLineNumber;\n        let startColumn = visibleRange.startColumn;\n        const endLineNumber = visibleRange.endLineNumber;\n        const endColumn = visibleRange.endColumn;\n        for (let i = 0, len = hiddenAreas.length; i < len; i++) {\n            const hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n            const hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n            if (hiddenEndLineNumber < startLineNumber) {\n                continue;\n            }\n            if (hiddenStartLineNumber > endLineNumber) {\n                continue;\n            }\n            if (startLineNumber < hiddenStartLineNumber) {\n                result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n            }\n            startLineNumber = hiddenEndLineNumber + 1;\n            startColumn = 1;\n        }\n        if (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\n            result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return result;\n    }\n    getCompletelyVisibleViewRange() {\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    getCompletelyVisibleViewRangeAtScrollTop(scrollTop) {\n        const partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    saveState() {\n        const compatViewState = this.viewLayout.saveState();\n        const scrollTop = compatViewState.scrollTop;\n        const firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n        const firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n        const firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n        return {\n            scrollLeft: compatViewState.scrollLeft,\n            firstPosition: firstPosition,\n            firstPositionDeltaTop: firstPositionDeltaTop\n        };\n    }\n    reduceRestoreState(state) {\n        if (typeof state.firstPosition === 'undefined') {\n            // This is a view state serialized by an older version\n            return this._reduceRestoreStateCompatibility(state);\n        }\n        const modelPosition = this.model.validatePosition(state.firstPosition);\n        const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        const scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: scrollTop\n        };\n    }\n    _reduceRestoreStateCompatibility(state) {\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: state.scrollTopWithoutViewZones\n        };\n    }\n    getTabSize() {\n        return this.model.getOptions().tabSize;\n    }\n    getLineCount() {\n        return this._lines.getViewLineCount();\n    }\n    /**\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\n     */\n    setViewport(startLineNumber, endLineNumber, centeredLineNumber) {\n        this._viewportStart.update(this, startLineNumber);\n    }\n    getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n        return this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n    }\n    getLinesIndentGuides(startLineNumber, endLineNumber) {\n        return this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n    }\n    getBracketGuidesInRangeByLine(startLineNumber, endLineNumber, activePosition, options) {\n        return this._lines.getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options);\n    }\n    getLineContent(lineNumber) {\n        return this._lines.getViewLineContent(lineNumber);\n    }\n    getLineLength(lineNumber) {\n        return this._lines.getViewLineLength(lineNumber);\n    }\n    getLineMinColumn(lineNumber) {\n        return this._lines.getViewLineMinColumn(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        return this._lines.getViewLineMaxColumn(lineNumber);\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 1;\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 2;\n    }\n    getDecorationsInViewport(visibleRange, onlyMinimapDecorations = false) {\n        return this._decorations.getDecorationsViewportData(visibleRange, onlyMinimapDecorations).decorations;\n    }\n    getInjectedTextAt(viewPosition) {\n        return this._lines.getInjectedTextAt(viewPosition);\n    }\n    getViewportViewLineRenderingData(visibleRange, lineNumber) {\n        const allInlineDecorations = this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n        const inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    getViewLineRenderingData(lineNumber) {\n        const inlineDecorations = this._decorations.getInlineDecorationsOnLine(lineNumber);\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    _getViewLineRenderingData(lineNumber, inlineDecorations) {\n        const mightContainRTL = this.model.mightContainRTL();\n        const mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n        const tabSize = this.getTabSize();\n        const lineData = this._lines.getViewLineData(lineNumber);\n        if (lineData.inlineDecorations) {\n            inlineDecorations = [\n                ...inlineDecorations,\n                ...lineData.inlineDecorations.map(d => d.toInlineDecoration(lineNumber))\n            ];\n        }\n        return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\n    }\n    getViewLineData(lineNumber) {\n        return this._lines.getViewLineData(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        const result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n        return new MinimapLinesRenderingData(this.getTabSize(), result);\n    }\n    getAllOverviewRulerDecorations(theme) {\n        const decorations = this.model.getOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options));\n        const result = new OverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const decorationOptions = decoration.options;\n            const opts = decorationOptions.overviewRuler;\n            if (!opts) {\n                continue;\n            }\n            const lane = opts.position;\n            if (lane === 0) {\n                continue;\n            }\n            const color = opts.getColor(theme.value);\n            const viewStartLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n            const viewEndLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n            result.accept(color, decorationOptions.zIndex, viewStartLineNumber, viewEndLineNumber, lane);\n        }\n        return result.asArray;\n    }\n    _invalidateDecorationsColorCache() {\n        const decorations = this.model.getOverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const opts1 = decoration.options.overviewRuler;\n            opts1 === null || opts1 === void 0 ? void 0 : opts1.invalidateCachedColor();\n            const opts2 = decoration.options.minimap;\n            opts2 === null || opts2 === void 0 ? void 0 : opts2.invalidateCachedColor();\n        }\n    }\n    getValueInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueInRange(modelRange, eol);\n    }\n    getValueLengthInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueLengthInRange(modelRange, eol);\n    }\n    modifyPosition(position, offset) {\n        const modelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(position);\n        return this.model.modifyPosition(modelPosition, offset);\n    }\n    deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\n        const modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n        if (this.model.getEOL().length === 2) {\n            // This model uses CRLF, so the delta must take that into account\n            if (deltaOffset < 0) {\n                deltaOffset -= lineFeedCnt;\n            }\n            else {\n                deltaOffset += lineFeedCnt;\n            }\n        }\n        const modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n        const resultOffset = modelAnchorOffset + deltaOffset;\n        return this.model.getPositionAt(resultOffset);\n    }\n    getPlainTextToCopy(modelRanges, emptySelectionClipboard, forceCRLF) {\n        const newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n        modelRanges = modelRanges.slice(0);\n        modelRanges.sort(Range.compareRangesUsingStarts);\n        let hasEmptyRange = false;\n        let hasNonEmptyRange = false;\n        for (const range of modelRanges) {\n            if (range.isEmpty()) {\n                hasEmptyRange = true;\n            }\n            else {\n                hasNonEmptyRange = true;\n            }\n        }\n        if (!hasNonEmptyRange) {\n            // all ranges are empty\n            if (!emptySelectionClipboard) {\n                return '';\n            }\n            const modelLineNumbers = modelRanges.map((r) => r.startLineNumber);\n            let result = '';\n            for (let i = 0; i < modelLineNumbers.length; i++) {\n                if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n                    continue;\n                }\n                result += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n            }\n            return result;\n        }\n        if (hasEmptyRange && emptySelectionClipboard) {\n            // mixed empty selections and non-empty selections\n            const result = [];\n            let prevModelLineNumber = 0;\n            for (const modelRange of modelRanges) {\n                const modelLineNumber = modelRange.startLineNumber;\n                if (modelRange.isEmpty()) {\n                    if (modelLineNumber !== prevModelLineNumber) {\n                        result.push(this.model.getLineContent(modelLineNumber));\n                    }\n                }\n                else {\n                    result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n                }\n                prevModelLineNumber = modelLineNumber;\n            }\n            return result.length === 1 ? result[0] : result;\n        }\n        const result = [];\n        for (const modelRange of modelRanges) {\n            if (!modelRange.isEmpty()) {\n                result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n            }\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n    getRichTextToCopy(modelRanges, emptySelectionClipboard) {\n        const languageId = this.model.getLanguageId();\n        if (languageId === PLAINTEXT_LANGUAGE_ID) {\n            return null;\n        }\n        if (modelRanges.length !== 1) {\n            // no multiple selection support at this time\n            return null;\n        }\n        let range = modelRanges[0];\n        if (range.isEmpty()) {\n            if (!emptySelectionClipboard) {\n                // nothing to copy\n                return null;\n            }\n            const lineNumber = range.startLineNumber;\n            range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n        }\n        const fontInfo = this._configuration.options.get(47 /* EditorOption.fontInfo */);\n        const colorMap = this._getColorMap();\n        const hasBadChars = (/[:;\\\\\\/<>]/.test(fontInfo.fontFamily));\n        const useDefaultFontFamily = (hasBadChars || fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily);\n        let fontFamily;\n        if (useDefaultFontFamily) {\n            fontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n        }\n        else {\n            fontFamily = fontInfo.fontFamily;\n            fontFamily = fontFamily.replace(/\"/g, '\\'');\n            const hasQuotesOrIsList = /[,']/.test(fontFamily);\n            if (!hasQuotesOrIsList) {\n                const needsQuotes = /[+ ]/.test(fontFamily);\n                if (needsQuotes) {\n                    fontFamily = `'${fontFamily}'`;\n                }\n            }\n            fontFamily = `${fontFamily}, ${EDITOR_FONT_DEFAULTS.fontFamily}`;\n        }\n        return {\n            mode: languageId,\n            html: (`<div style=\"`\n                + `color: ${colorMap[1 /* ColorId.DefaultForeground */]};`\n                + `background-color: ${colorMap[2 /* ColorId.DefaultBackground */]};`\n                + `font-family: ${fontFamily};`\n                + `font-weight: ${fontInfo.fontWeight};`\n                + `font-size: ${fontInfo.fontSize}px;`\n                + `line-height: ${fontInfo.lineHeight}px;`\n                + `white-space: pre;`\n                + `\">`\n                + this._getHTMLToCopy(range, colorMap)\n                + '</div>')\n        };\n    }\n    _getHTMLToCopy(modelRange, colorMap) {\n        const startLineNumber = modelRange.startLineNumber;\n        const startColumn = modelRange.startColumn;\n        const endLineNumber = modelRange.endLineNumber;\n        const endColumn = modelRange.endColumn;\n        const tabSize = this.getTabSize();\n        let result = '';\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineTokens = this.model.tokenization.getLineTokens(lineNumber);\n            const lineContent = lineTokens.getLineContent();\n            const startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n            const endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n            if (lineContent === '') {\n                result += '<br>';\n            }\n            else {\n                result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n            }\n        }\n        return result;\n    }\n    _getColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        const result = ['#000000'];\n        if (colorMap) {\n            for (let i = 1, len = colorMap.length; i < len; i++) {\n                result[i] = Color.Format.CSS.formatHex(colorMap[i]);\n            }\n        }\n        return result;\n    }\n    //#region cursor operations\n    getPrimaryCursorState() {\n        return this._cursor.getPrimaryCursorState();\n    }\n    getLastAddedCursorIndex() {\n        return this._cursor.getLastAddedCursorIndex();\n    }\n    getCursorStates() {\n        return this._cursor.getCursorStates();\n    }\n    setCursorStates(source, reason, states) {\n        return this._withViewEventsCollector(eventsCollector => this._cursor.setStates(eventsCollector, source, reason, states));\n    }\n    getCursorColumnSelectData() {\n        return this._cursor.getCursorColumnSelectData();\n    }\n    getCursorAutoClosedCharacters() {\n        return this._cursor.getAutoClosedCharacters();\n    }\n    setCursorColumnSelectData(columnSelectData) {\n        this._cursor.setCursorColumnSelectData(columnSelectData);\n    }\n    getPrevEditOperationType() {\n        return this._cursor.getPrevEditOperationType();\n    }\n    setPrevEditOperationType(type) {\n        this._cursor.setPrevEditOperationType(type);\n    }\n    getSelection() {\n        return this._cursor.getSelection();\n    }\n    getSelections() {\n        return this._cursor.getSelections();\n    }\n    getPosition() {\n        return this._cursor.getPrimaryCursorState().modelState.position;\n    }\n    setSelections(source, selections, reason = 0 /* CursorChangeReason.NotSet */) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.setSelections(eventsCollector, source, selections, reason));\n    }\n    saveCursorState() {\n        return this._cursor.saveState();\n    }\n    restoreCursorState(states) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.restoreState(eventsCollector, states));\n    }\n    _executeCursorEdit(callback) {\n        if (this._cursor.context.cursorConfig.readOnly) {\n            // we cannot edit when read only...\n            this._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n            return;\n        }\n        this._withViewEventsCollector(callback);\n    }\n    executeEdits(source, edits, cursorStateComputer) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer));\n    }\n    startComposition() {\n        this._executeCursorEdit(eventsCollector => this._cursor.startComposition(eventsCollector));\n    }\n    endComposition(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.endComposition(eventsCollector, source));\n    }\n    type(text, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.type(eventsCollector, text, source));\n    }\n    compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source));\n    }\n    paste(text, pasteOnNewLine, multicursorText, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source));\n    }\n    cut(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.cut(eventsCollector, source));\n    }\n    executeCommand(command, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommand(eventsCollector, command, source));\n    }\n    executeCommands(commands, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommands(eventsCollector, commands, source));\n    }\n    revealPrimaryCursor(source, revealHorizontal, minimalReveal = false) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.revealPrimary(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */));\n    }\n    revealTopMostCursor(source) {\n        const viewPosition = this._cursor.getTopMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealBottomMostCursor(source) {\n        const viewPosition = this._cursor.getBottomMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealRange(source, revealHorizontal, viewRange, verticalType, scrollType) {\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, verticalType, revealHorizontal, scrollType)));\n    }\n    //#endregion\n    //#region viewLayout\n    changeWhitespace(callback) {\n        const hadAChange = this.viewLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n            this._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n        }\n    }\n    //#endregion\n    _withViewEventsCollector(callback) {\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            return callback(eventsCollector);\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n    }\n    normalizePosition(position, affinity) {\n        return this._lines.normalizePosition(position, affinity);\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n    getLineIndentColumn(lineNumber) {\n        return this._lines.getLineIndentColumn(lineNumber);\n    }\n}\nclass ViewportStart {\n    static create(model) {\n        const viewportStartLineTrackedRange = model._setTrackedRange(null, new Range(1, 1, 1, 1), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        return new ViewportStart(model, 1, false, viewportStartLineTrackedRange, 0);\n    }\n    get viewLineNumber() {\n        return this._viewLineNumber;\n    }\n    get isValid() {\n        return this._isValid;\n    }\n    get modelTrackedRange() {\n        return this._modelTrackedRange;\n    }\n    get startLineDelta() {\n        return this._startLineDelta;\n    }\n    constructor(_model, _viewLineNumber, _isValid, _modelTrackedRange, _startLineDelta) {\n        this._model = _model;\n        this._viewLineNumber = _viewLineNumber;\n        this._isValid = _isValid;\n        this._modelTrackedRange = _modelTrackedRange;\n        this._startLineDelta = _startLineDelta;\n    }\n    dispose() {\n        this._model._setTrackedRange(this._modelTrackedRange, null, 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n    }\n    update(viewModel, startLineNumber) {\n        const position = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, viewModel.getLineMinColumn(startLineNumber)));\n        const viewportStartLineTrackedRange = viewModel.model._setTrackedRange(this._modelTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        const viewportStartLineTop = viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n        const scrollTop = viewModel.viewLayout.getCurrentScrollTop();\n        this._viewLineNumber = startLineNumber;\n        this._isValid = true;\n        this._modelTrackedRange = viewportStartLineTrackedRange;\n        this._startLineDelta = scrollTop - viewportStartLineTop;\n    }\n    invalidate() {\n        this._isValid = false;\n    }\n}\nclass OverviewRulerDecorations {\n    constructor() {\n        this._asMap = Object.create(null);\n        this.asArray = [];\n    }\n    accept(color, zIndex, startLineNumber, endLineNumber, lane) {\n        const prevGroup = this._asMap[color];\n        if (prevGroup) {\n            const prevData = prevGroup.data;\n            const prevLane = prevData[prevData.length - 3];\n            const prevEndLineNumber = prevData[prevData.length - 1];\n            if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n                // merge into prev\n                if (endLineNumber > prevEndLineNumber) {\n                    prevData[prevData.length - 1] = endLineNumber;\n                }\n                return;\n            }\n            // push\n            prevData.push(lane, startLineNumber, endLineNumber);\n        }\n        else {\n            const group = new OverviewRulerDecorationsGroup(color, zIndex, [lane, startLineNumber, endLineNumber]);\n            this._asMap[color] = group;\n            this.asArray.push(group);\n        }\n    }\n}\nclass HiddenAreasModel {\n    constructor() {\n        this.hiddenAreas = new Map();\n        this.shouldRecompute = false;\n        this.ranges = [];\n    }\n    setHiddenAreas(source, ranges) {\n        const existing = this.hiddenAreas.get(source);\n        if (existing && rangeArraysEqual(existing, ranges)) {\n            return;\n        }\n        this.hiddenAreas.set(source, ranges);\n        this.shouldRecompute = true;\n    }\n    /**\n     * The returned array is immutable.\n    */\n    getMergedRanges() {\n        if (!this.shouldRecompute) {\n            return this.ranges;\n        }\n        this.shouldRecompute = false;\n        const newRanges = Array.from(this.hiddenAreas.values()).reduce((r, hiddenAreas) => mergeLineRangeArray(r, hiddenAreas), []);\n        if (rangeArraysEqual(this.ranges, newRanges)) {\n            return this.ranges;\n        }\n        this.ranges = newRanges;\n        return this.ranges;\n    }\n}\nfunction mergeLineRangeArray(arr1, arr2) {\n    const result = [];\n    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n        const item1 = arr1[i];\n        const item2 = arr2[j];\n        if (item1.endLineNumber < item2.startLineNumber - 1) {\n            result.push(arr1[i++]);\n        }\n        else if (item2.endLineNumber < item1.startLineNumber - 1) {\n            result.push(arr2[j++]);\n        }\n        else {\n            const startLineNumber = Math.min(item1.startLineNumber, item2.startLineNumber);\n            const endLineNumber = Math.max(item1.endLineNumber, item2.endLineNumber);\n            result.push(new Range(startLineNumber, 1, endLineNumber, 1));\n            i++;\n            j++;\n        }\n    }\n    while (i < arr1.length) {\n        result.push(arr1[i++]);\n    }\n    while (j < arr2.length) {\n        result.push(arr2[j++]);\n    }\n    return result;\n}\nfunction rangeArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!arr1[i].equalsRange(arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Maintain a stable viewport by trying to keep the first line in the viewport constant.\n */\nclass StableViewport {\n    constructor(viewportStartModelPosition, startLineDelta) {\n        this.viewportStartModelPosition = viewportStartModelPosition;\n        this.startLineDelta = startLineDelta;\n    }\n    recoverViewportStart(coordinatesConverter, viewLayout) {\n        if (!this.viewportStartModelPosition) {\n            return;\n        }\n        const viewPosition = coordinatesConverter.convertModelPositionToViewPosition(this.viewportStartModelPosition);\n        const viewPositionTop = viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n        viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this.startLineDelta }, 1 /* ScrollType.Immediate */);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable } from '../../base/common/lifecycle.js';\nexport class ViewModelEventDispatcher extends Disposable {\n    constructor() {\n        super();\n        this._onEvent = this._register(new Emitter());\n        this.onEvent = this._onEvent.event;\n        this._eventHandlers = [];\n        this._viewEventQueue = null;\n        this._isConsumingViewEventQueue = false;\n        this._collector = null;\n        this._collectorCnt = 0;\n        this._outgoingEvents = [];\n    }\n    emitOutgoingEvent(e) {\n        this._addOutgoingEvent(e);\n        this._emitOutgoingEvents();\n    }\n    _addOutgoingEvent(e) {\n        for (let i = 0, len = this._outgoingEvents.length; i < len; i++) {\n            const mergeResult = (this._outgoingEvents[i].kind === e.kind ? this._outgoingEvents[i].attemptToMerge(e) : null);\n            if (mergeResult) {\n                this._outgoingEvents[i] = mergeResult;\n                return;\n            }\n        }\n        // not merged\n        this._outgoingEvents.push(e);\n    }\n    _emitOutgoingEvents() {\n        while (this._outgoingEvents.length > 0) {\n            if (this._collector || this._isConsumingViewEventQueue) {\n                // right now collecting or emitting view events, so let's postpone emitting\n                return;\n            }\n            const event = this._outgoingEvents.shift();\n            if (event.isNoOp()) {\n                continue;\n            }\n            this._onEvent.fire(event);\n        }\n    }\n    addViewEventHandler(eventHandler) {\n        for (let i = 0, len = this._eventHandlers.length; i < len; i++) {\n            if (this._eventHandlers[i] === eventHandler) {\n                console.warn('Detected duplicate listener in ViewEventDispatcher', eventHandler);\n            }\n        }\n        this._eventHandlers.push(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        for (let i = 0; i < this._eventHandlers.length; i++) {\n            if (this._eventHandlers[i] === eventHandler) {\n                this._eventHandlers.splice(i, 1);\n                break;\n            }\n        }\n    }\n    beginEmitViewEvents() {\n        this._collectorCnt++;\n        if (this._collectorCnt === 1) {\n            this._collector = new ViewModelEventsCollector();\n        }\n        return this._collector;\n    }\n    endEmitViewEvents() {\n        this._collectorCnt--;\n        if (this._collectorCnt === 0) {\n            const outgoingEvents = this._collector.outgoingEvents;\n            const viewEvents = this._collector.viewEvents;\n            this._collector = null;\n            for (const outgoingEvent of outgoingEvents) {\n                this._addOutgoingEvent(outgoingEvent);\n            }\n            if (viewEvents.length > 0) {\n                this._emitMany(viewEvents);\n            }\n        }\n        this._emitOutgoingEvents();\n    }\n    emitSingleViewEvent(event) {\n        try {\n            const eventsCollector = this.beginEmitViewEvents();\n            eventsCollector.emitViewEvent(event);\n        }\n        finally {\n            this.endEmitViewEvents();\n        }\n    }\n    _emitMany(events) {\n        if (this._viewEventQueue) {\n            this._viewEventQueue = this._viewEventQueue.concat(events);\n        }\n        else {\n            this._viewEventQueue = events;\n        }\n        if (!this._isConsumingViewEventQueue) {\n            this._consumeViewEventQueue();\n        }\n    }\n    _consumeViewEventQueue() {\n        try {\n            this._isConsumingViewEventQueue = true;\n            this._doConsumeQueue();\n        }\n        finally {\n            this._isConsumingViewEventQueue = false;\n        }\n    }\n    _doConsumeQueue() {\n        while (this._viewEventQueue) {\n            // Empty event queue, as events might come in while sending these off\n            const events = this._viewEventQueue;\n            this._viewEventQueue = null;\n            // Use a clone of the event handlers list, as they might remove themselves\n            const eventHandlers = this._eventHandlers.slice(0);\n            for (const eventHandler of eventHandlers) {\n                eventHandler.handleEvents(events);\n            }\n        }\n    }\n}\nexport class ViewModelEventsCollector {\n    constructor() {\n        this.viewEvents = [];\n        this.outgoingEvents = [];\n    }\n    emitViewEvent(event) {\n        this.viewEvents.push(event);\n    }\n    emitOutgoingEvent(e) {\n        this.outgoingEvents.push(e);\n    }\n}\nexport class ContentSizeChangedEvent {\n    constructor(oldContentWidth, oldContentHeight, contentWidth, contentHeight) {\n        this.kind = 0 /* OutgoingViewModelEventKind.ContentSizeChanged */;\n        this._oldContentWidth = oldContentWidth;\n        this._oldContentHeight = oldContentHeight;\n        this.contentWidth = contentWidth;\n        this.contentHeight = contentHeight;\n        this.contentWidthChanged = (this._oldContentWidth !== this.contentWidth);\n        this.contentHeightChanged = (this._oldContentHeight !== this.contentHeight);\n    }\n    isNoOp() {\n        return (!this.contentWidthChanged && !this.contentHeightChanged);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new ContentSizeChangedEvent(this._oldContentWidth, this._oldContentHeight, other.contentWidth, other.contentHeight);\n    }\n}\nexport class FocusChangedEvent {\n    constructor(oldHasFocus, hasFocus) {\n        this.kind = 1 /* OutgoingViewModelEventKind.FocusChanged */;\n        this.oldHasFocus = oldHasFocus;\n        this.hasFocus = hasFocus;\n    }\n    isNoOp() {\n        return (this.oldHasFocus === this.hasFocus);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new FocusChangedEvent(this.oldHasFocus, other.hasFocus);\n    }\n}\nexport class ScrollChangedEvent {\n    constructor(oldScrollWidth, oldScrollLeft, oldScrollHeight, oldScrollTop, scrollWidth, scrollLeft, scrollHeight, scrollTop) {\n        this.kind = 2 /* OutgoingViewModelEventKind.ScrollChanged */;\n        this._oldScrollWidth = oldScrollWidth;\n        this._oldScrollLeft = oldScrollLeft;\n        this._oldScrollHeight = oldScrollHeight;\n        this._oldScrollTop = oldScrollTop;\n        this.scrollWidth = scrollWidth;\n        this.scrollLeft = scrollLeft;\n        this.scrollHeight = scrollHeight;\n        this.scrollTop = scrollTop;\n        this.scrollWidthChanged = (this._oldScrollWidth !== this.scrollWidth);\n        this.scrollLeftChanged = (this._oldScrollLeft !== this.scrollLeft);\n        this.scrollHeightChanged = (this._oldScrollHeight !== this.scrollHeight);\n        this.scrollTopChanged = (this._oldScrollTop !== this.scrollTop);\n    }\n    isNoOp() {\n        return (!this.scrollWidthChanged && !this.scrollLeftChanged && !this.scrollHeightChanged && !this.scrollTopChanged);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new ScrollChangedEvent(this._oldScrollWidth, this._oldScrollLeft, this._oldScrollHeight, this._oldScrollTop, other.scrollWidth, other.scrollLeft, other.scrollHeight, other.scrollTop);\n    }\n}\nexport class ViewZonesChangedEvent {\n    constructor() {\n        this.kind = 3 /* OutgoingViewModelEventKind.ViewZonesChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class HiddenAreasChangedEvent {\n    constructor() {\n        this.kind = 4 /* OutgoingViewModelEventKind.HiddenAreasChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class CursorStateChangedEvent {\n    constructor(oldSelections, selections, oldModelVersionId, modelVersionId, source, reason, reachedMaxCursorCount) {\n        this.kind = 6 /* OutgoingViewModelEventKind.CursorStateChanged */;\n        this.oldSelections = oldSelections;\n        this.selections = selections;\n        this.oldModelVersionId = oldModelVersionId;\n        this.modelVersionId = modelVersionId;\n        this.source = source;\n        this.reason = reason;\n        this.reachedMaxCursorCount = reachedMaxCursorCount;\n    }\n    static _selectionsAreEqual(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        const aLen = a.length;\n        const bLen = b.length;\n        if (aLen !== bLen) {\n            return false;\n        }\n        for (let i = 0; i < aLen; i++) {\n            if (!a[i].equalsSelection(b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    isNoOp() {\n        return (CursorStateChangedEvent._selectionsAreEqual(this.oldSelections, this.selections)\n            && this.oldModelVersionId === this.modelVersionId);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new CursorStateChangedEvent(this.oldSelections, other.selections, this.oldModelVersionId, other.modelVersionId, other.source, other.reason, this.reachedMaxCursorCount || other.reachedMaxCursorCount);\n    }\n}\nexport class ReadOnlyEditAttemptEvent {\n    constructor() {\n        this.kind = 5 /* OutgoingViewModelEventKind.ReadOnlyEditAttempt */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class ModelDecorationsChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 7 /* OutgoingViewModelEventKind.ModelDecorationsChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelLanguageChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 8 /* OutgoingViewModelEventKind.ModelLanguageChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelLanguageConfigurationChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 9 /* OutgoingViewModelEventKind.ModelLanguageConfigurationChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelContentChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 10 /* OutgoingViewModelEventKind.ModelContentChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelOptionsChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 11 /* OutgoingViewModelEventKind.ModelOptionsChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelTokensChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 12 /* OutgoingViewModelEventKind.ModelTokensChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\n"],"names":["BracketInfo","_createClass","range","nestingLevel","nestingLevelOfEqualBracketType","isInvalid","_classCallCheck","this","BracketPairWithMinIndentationInfo","_BracketPairInfo","_inherits","_super","_createSuper","openingBracketRange","closingBracketRange","bracketPairNode","minVisibleColumnIndentation","_this","call","BracketPairInfo","key","get","openingBracket","bracketInfo","ModelRawFlush","changeType","LineInjectedText","ownerId","lineNumber","column","options","order","value","lineText","injectedTexts","length","_step","result","lastOriginalOffset","_iterator","_createForOfIteratorHelper","s","n","done","injectedText","substring","content","err","e","f","decorations","_step2","_iterator2","decoration","before","push","startLineNumber","startColumn","after","endLineNumber","endColumn","sort","a","b","ModelRawLineChanged","detail","ModelRawLinesDeleted","fromLineNumber","toLineNumber","ModelRawLinesInserted","ModelRawEOLChanged","ModelRawContentChangedEvent","changes","versionId","isUndoing","isRedoing","resultingSelection","type","i","len","concat","ModelInjectedTextChangedEvent","InternalModelContentChangeEvent","rawContentChangedEvent","contentChangedEvent","other","merge","_mergeChangeEvents","eol","isFlush","HorizontalGuidesState","IndentGuide","visibleColumn","className","horizontalLine","forWrappedLinesAfterColumn","forWrappedLinesBeforeOrAtColumn","Error","IndentGuideHorizontalLine","top","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","then","apply","TokenizationRegistry","_map","Map","_factories","_onDidChange","Emitter","onDidChange","event","_colorMap","languages","fire","changedLanguages","changedColorMap","language","support","set","toDisposable","delete","languageId","factory","_a","_this2","dispose","myData","TokenizationSupportFactoryData","v","_regeneratorRuntime","mark","_callee","tokenizationSupport","wrap","_context","prev","abrupt","isResolved","stop","colorMap","Array","from","keys","_Disposable","_registry","_languageId","_factory","_this3","_isDisposed","_resolvePromise","_isResolved","_get","_getPrototypeOf","prototype","_callee2","_context2","_create","_callee3","_context3","createTokenizationSupport","sent","_register","register","Disposable","ContiguousMultilineTokens","tokens","_startLineNumber","_tokens","lineTokens","ContiguousMultilineTokensBuilder","last","appendLineTokens","EMPTY_LINE_TOKENS","Uint32Array","buffer","ContiguousTokensEditing","toChIndex","fromChIndex","toUint32Array","lineTextLength","tokensCount","dest","lastEnd","fromTokenIndex","LineTokens","findIndexInTokensArray","fromTokenStartOffset","delta","tokenIndex","tokenEndOffset","tmp","subarray","_otherTokens","myTokens","otherTokens","otherTokensCount","chIndex","textLength","arr","ContiguousTokensStore","languageIdCodec","_lineTokens","_len","_languageIdCodec","topLevelLanguageId","lineIndex","rawLineTokens","getDefaultMetadata","encodeLanguageId","start","deleteCount","splice","insertIndex","insertCount","arrays","checkEquality","_massageTokens","_ensureLine","oldTokens","_equals","eolCount","firstLineLength","_acceptDeleteRange","_acceptInsertText","Position","firstLineIndex","deleteEnding","lastLineIndex","lastLineTokens","deleteBeginning","append","_deleteLines","position","insert","_insertLines","hasDifferentLanguageId","TokenMetadata","getLanguageId","byteOffset","byteLength","_b","text","decoder","_lineTokensBrand","undefined","_tokensCount","_text","slicedEquals","sliceFromTokenIndex","sliceTokenCount","to","metadata","decodeLanguageId","getTokenType","getForeground","getClassNameFromMetadata","getInlineStyleFromMetadata","getPresentationFromMetadata","offset","startOffset","endOffset","deltaOffset","SliceLineTokens","insertTokens","nextOriginalTokenIdx","nextInsertTokenIdx","newTokens","originalEndOffset","nextOriginalTokenEndOffset","nextInsertToken","tokenMetadata","lineContent","defaultMetadata","defaultTokenMetadata","lastTokenIndex","desiredIndex","low","high","mid","Math","floor","source","_source","_startOffset","_endOffset","_deltaOffset","_firstTokenIndex","findTokenIndexAtOffset","getCount","getStartOffset","getMetadata","getLineContent","getEndOffset","min","getClassName","getInlineStyle","getPresentation","SparseMultilineTokens","_endLineNumber","getMaxDeltaLine","toString","isEmpty","getLineTokens","deltaRange","getRange","Range","startLineIndex","endLineIndex","removeTokens","_updateEndLineNumber","_this$_tokens$split","split","_this$_tokens$split2","_slicedToArray","bDeltaLine","_countEOL","countEOL","_countEOL2","lastLineLength","acceptEdit","charCodeAt","firstCharCode","deletedLinesCount","tokenMaxDeltaLine","clear","deletedBefore","acceptDeleteRange","acceptInsertText","SparseMultilineTokensStorage","_tokenCount","pieces","_getDeltaLine","_getStartCharacter","_getEndCharacter","join","tokenCount","_getTokenCount","startChar","maxDeltaLine","endChar","deltaLine","midDeltaLine","max","SparseLineTokens","startDeltaLine","endDeltaLine","newTokenCount","hasDeletedTokens","firstDeltaLine","srcOffset","tokenDeltaLine","tokenStartCharacter","tokenEndCharacter","destOffset","aTokens","bTokens","destTokens","destFirstDeltaLine","horizontalShiftForFirstLineTokens","startCharacter","endCharacter","deletedLineCount","character","isInsertingPreciselyOneWordCharacter","tokenLength","SparseTokensStore","_pieces","_isComplete","isComplete","_range","_firstRange","_lastRange","plusRange","insertPosition","piece","index","_piece$split","_piece$split2","_findFirstPieceWithLine","aLen","bLen","aIndex","resultLen","lastEndOffset","emitToken","bIndex","bStartCharacter","getStartCharacter","bEndCharacter","getEndCharacter","bMetadata","bMask","aMask","aMergeIndex","ViewEventHandler","_shouldRender","events","shouldRender","onCompositionStart","onCompositionEnd","onConfigurationChanged","onCursorStateChanged","onDecorationsChanged","onFlushed","onFocusChanged","onLanguageConfigurationChanged","onLineMappingChanged","onLinesChanged","onLinesDeleted","onLinesInserted","onRevealRangeRequest","onScrollChanged","onTokensChanged","onThemeChanged","onTokensColorsChanged","onZonesChanged","console","info","ViewCompositionStartEvent","ViewCompositionEndEvent","ViewConfigurationChangedEvent","id","hasChanged","ViewCursorStateChangedEvent","selections","modelSelections","reason","ViewDecorationsChangedEvent","affectsMinimap","affectsOverviewRuler","ViewFlushedEvent","ViewFocusChangedEvent","isFocused","ViewLanguageConfigurationEvent","ViewLineMappingChangedEvent","ViewLinesChangedEvent","count","ViewLinesDeletedEvent","ViewLinesInsertedEvent","ViewRevealRangeRequestEvent","minimalReveal","verticalType","revealHorizontal","scrollType","ViewScrollChangedEvent","scrollWidth","scrollLeft","scrollHeight","scrollTop","scrollWidthChanged","scrollLeftChanged","scrollHeightChanged","scrollTopChanged","ViewThemeChangedEvent","theme","ViewTokensChangedEvent","ranges","ViewTokensColorsChangedEvent","ViewZonesChangedEvent","LineDecoration","_lineDecorationBrand","lineLength","r","rLength","dec","lineDecorations","minLineColumn","maxLineColumn","d","inlineClassName","ORDER","typeCmp","_typeCompare","DecorationSegment","Stack","stopOffsets","classNames","maxStopOffset","nextStartOffset","_metadata","stopOffset","LineDecorationsNormalizer","stack","charCodeBefore","strings","currentStartOffset","currentEndOffset","consumeLowerThan","LinePart","endIndex","containsRTL","_linePartBrand","LineRange","startIndex","otherLineRange","RenderLineInput","useMonospaceOptimizations","canUseHalfwidthRightwardsArrow","continuesWithWrappedLine","isBasicASCII","fauxIndentLength","tabSize","startVisibleColumn","spaceWidth","middotWidth","wsmiddotWidth","stopRenderingLineAfter","renderWhitespace","renderControlCharacters","fontLigatures","selectionsOnLine","compare","abs","renderSpaceWidth","renderSpaceCharCode","otherSelections","equals","equalsArr","sameSelection","DomPosition","partIndex","charIndex","CharacterMapping","partCount","_data","_horizontalOffset","horizontalOffset","partData","charOffset","charOffsetToPartData","getPartIndex","getCharIndex","domPosition","partLength","partDataToCharOffset","searchEntry","midEntry","minEntry","maxEntry","minPartIndex","RenderLineOutput","characterMapping","containsForeignElements","_renderLineOutputBrand","renderViewLine","input","sb","appendString","beforeCount","afterCount","lineDecoration","setColumnInfo","fontIsMonospace","isOverflowing","overflowingCharCount","parts","lastCharacterMappingDefined","charOffsetInPart","charHorizontalOffset","partDisplacement","tokensLen","part","partEndIndex","partType","partContainsRTL","partRendersWhitespace","isWhitespace","partRendersWhitespaceWithWidth","partIsEmptyAndHasPseudoAfter","isPseudoAfter","appendASCIICharCode","partWidth","_charIndex","_visibleColumn","charWidth","String","producedCharacters","appendCharCode","space","charCode","isControlCharacter","to4CharHex","nls","toFixed","renderOverflowingCharCount","_renderLine","lineContainsRTL","tokenContainsRTL","transformAndRemoveOverflowing","lastLinePart","token","tokenEndIndex","extractControlCharacters","lastNonWhitespaceIndex","onlyBoundary","onlyTrailing","generateLinePartForEachWhitespace","tokenType","tokensLength","lineIsEmptyOrWhitespace","firstNonWhitespaceIndex","wasInWhitespace","currentSelectionIndex","currentSelection","tmpIndent","chCode","isInWhitespace","nextChCode","generateWhitespace","lastCharCode","prevCharCode","_applyRenderWhitespace","_lineDecorations","normalize","lineDecorationsLen","lineDecorationIndex","lastResultEndIndex","lastTokenEndIndex","_applyInlineDecorations","onlyAtSpaces","lastSpaceOffset","currTokenStart","j","diff","piecesCount","ceil","pieceEndIndex","splitLargeTokens","ResolvedRenderLineInput","resolveRenderLineInput","RenderLineOutput2","html","renderViewLine2","StringBuilder","out","build","toUpperCase","padStart","ViewportData","partialData","whitespaceViewportData","model","relativeVerticalOffset","bigNumbersDelta","_model","visibleRange","getLineMinColumn","getLineMaxColumn","getViewportViewLineRenderingData","getDecorationsInViewport","Viewport","left","width","height","_viewportBrand","MinimapLinesRenderingData","data","ViewLineData","minColumn","maxColumn","inlineDecorations","_viewLineDataBrand","ViewLineRenderingData","mightContainRTL","mightContainNonBasicASCII","InlineDecoration","SingleLineInlineDecoration","inlineClassNameAffectsLetterSpacing","ViewModelDecoration","_viewModelDecorationBrand","OverviewRulerDecorationsGroup","color","zIndex","MinimapTokensColorTracker","_updateColorMap","getColorMap","_colors","RGBA8","Empty","_backgroundIsLight","colorId","rgba","g","round","backgroundLuminosity","getRelativeLuminance","_INSTANCE","markAsSingleton","MonospaceLineBreaksComputerFactory","breakBeforeChars","breakAfterChars","classifier","WrappingCharacterClassifier","fontInfo","wrappingColumn","wrappingIndent","wordBreak","requests","previousBreakingData","addRequest","previousLineBreakData","finalize","columnsForFullWidthChar","typicalFullwidthCharacterWidth","typicalHalfwidthCharacterWidth","injectionOptions","createLineBreaks","createLineBreaksFromPreviousLineBreaks","arrPool1","arrPool2","_CharacterClassifier","BREAK_BEFORE","BREAK_AFTER","_asciiMap","_defaultValue","CharacterClassifier","firstLineBreakColumn","isKeepAll","prevBreakingOffsets","breakOffsets","prevBreakingOffsetsVisibleColumn","breakOffsetsVisibleColumn","wrappedTextIndentLength","computeWrappedTextIndentLength","wrappedLineBreakColumn","breakingOffsets","breakingOffsetsVisibleColumn","breakingOffsetsCount","lastBreakingOffset","lastBreakingOffsetVisibleColumn","breakingColumn","prevLen","prevIndex","bestDistance","distance","prevBreakOffset","prevBreakOffsetVisibleColumn","breakOffset","breakOffsetVisibleColumn","forcedBreakOffset","forcedBreakOffsetVisibleColumn","prevCharCodeClass","entireLineFits","charStartOffset","charCodeClass","computeCharWidth","canBreak","hitATabCharacter","prevCharWidth","remainingWidthOfNextLine","charCodeAtForcedBreakOffset","_lineText","injectionOffsets","applyInjectedText","map","t","ModelLineProjectionData","tabCharacterWidth","numberOfAdditionalTabs","ColorZone","_colorZoneBrand","OverviewRulerZone","heightInLines","_overviewRulerZoneBrand","_colorZone","colorZone","OverviewZoneManager","getVerticalOffsetForLine","_getVerticalOffsetForLine","_zones","_colorZonesInvalid","_lineHeight","_domWidth","_domHeight","_outerHeight","_pixelRatio","_lastAssignedId","_color2Id","Object","create","_id2Color","newZones","lineHeight","pixelRatio","outerHeight","colorZonesInvalid","totalHeight","getCanvasHeight","heightRatio","halfMinimumHeight","allColorZones","zone","getColorZones","offset1","offset2","y1","y2","ycenter","halfHeight","setColorZone","ViewContext","configuration","EditorTheme","viewModel","viewLayout","eventHandler","addViewEventHandler","removeViewEventHandler","ViewModelDecorations","editorId","linesCollection","coordinatesConverter","_cachedOnlyMinimapDecorations","_linesCollection","_coordinatesConverter","_decorationsCache","_cachedModelDecorationsResolver","_cachedModelDecorationsResolverViewRange","_clearCachedModelDecorationsResolver","modelDecoration","viewRange","modelRange","isWholeLine","convertModelPositionToViewPosition","end","convertModelRangeToViewRange","onlyMinimapDecorations","arguments","cacheIsValid","equalsRange","_getDecorationsInRange","getViewLineMinColumn","getViewLineMaxColumn","modelDecorations","getDecorationsInRange","filterValidationDecorations","decorationsInViewport","decorationsInViewportLen","decorationOptions","isModelDecorationVisible","viewModelDecoration","_getOrCreateViewModelDecoration","inlineDecoration","intersectedStartLineNumber","intersectedEndLineNumber","beforeContentClassName","afterContentClassName","hideInCommentTokens","isModelDecorationInComment","hideInStringTokens","isModelDecorationInString","testTokensInRange","callback","tokenization","isFirstLine","isEndLine","tokenIdx","getStandardTokenType","PendingChanges","_hasPending","_inserts","_changes","_removes","x","linesLayout","inserts","removes","_commitPendingChanges","EditorWhitespace","afterLineNumber","ordinal","minWidth","prefixSum","LinesLayout","lineCount","paddingTop","paddingBottom","_instanceId","INSTANCE_COUNT","_pendingChanges","_lastWhitespaceId","_arr","_prefixSumValidIndex","_minWidth","_lineCount","_paddingTop","_paddingBottom","_checkPendingChanges","hadAChange","insertWhitespace","heightInPx","changeOneWhitespace","newAfterLineNumber","newHeight","change","removeWhitespace","remove","commit","_insertWhitespace","_changeOneWhitespace","_step3","_iterator3","_findWhitespaceIndex","_removeWhitespace","_step4","toRemove","Set","_iterator4","add","_step5","toChange","_iterator5","applyRemoveAndChange","whitespaces","_step6","_iterator6","whitespace","has","mustCommit","findInsertionIndex","removeIndex","getWhitespacesAccumulatedHeight","getWhitespacesTotalHeight","lastWhitespaceBeforeLineNumber","_findLastWhitespaceBeforeLineNumber","firstWhitespaceAfterLineNumber","_findFirstWhitespaceAfterLineNumber","includeViewZones","getWhitespaceAccumulatedHeightBeforeLineNumber","verticalOffset","getLinesTotalHeight","linesCount","minLineNumber","maxLineNumber","midLineNumber","midLineNumberVerticalOffset","getVerticalOffsetForLineNumber","verticalOffset1","verticalOffset2","currentWhitespaceHeight","currentWhitespaceAfterLineNumber","getLineNumberAtOrAfterVerticalOffset","startLineNumberVerticalOffset","whitespaceIndex","getFirstWhitespaceIndexAfterLineNumber","whitespaceCount","getWhitespacesCount","getAfterLineNumberForWhitespaceIndex","getHeightForWhitespaceIndex","currentVerticalOffset","currentLineRelativeOffset","STEP_SIZE","linesOffsets","verticalCenter","centeredLineNumber","endLineNumberVerticalOffset","completelyVisibleStartLineNumber","completelyVisibleEndLineNumber","minWhitespaceIndex","maxWhitespaceIndex","getVerticalOffsetForWhitespaceIndex","midWhitespaceIndex","midWhitespaceVerticalOffset","candidateIndex","getWhitespaceIndexAtOrAfterVerticallOffset","candidateTop","candidateHeight","getIdForWhitespaceIndex","slice","EditorScrollDimensions","contentWidth","contentHeight","EditorScrollable","smoothScrollDuration","scheduleAtNextAnimationFrame","_onDidContentSizeChange","onDidContentSizeChange","_dimensions","_scrollable","Scrollable","forceIntegerValues","onDidScroll","onScroll","setSmoothScrollDuration","scrollPosition","validateScrollPosition","dimensions","oldDimensions","setScrollDimensions","contentWidthChanged","contentHeightChanged","ContentSizeChangedEvent","getFutureScrollPosition","getCurrentScrollPosition","update","setScrollPositionNow","setScrollPositionSmooth","ViewLayout","_Disposable2","_super2","_configuration","layoutInfo","padding","_linesLayout","bottom","_configureSmoothScrollDuration","_updateHeight","getScrollable","setLineHeight","setPadding","scrollDimensions","getScrollDimensions","_getContentHeight","scrollbar","horizontal","horizontalScrollbarSize","_getHorizontalScrollbarHeight","currentScrollPosition","maxLineWidth","wrappingInfo","isViewportWrapping","minimap","enabled","side","verticalScrollbarWidth","extraHorizontalSpace","whitespaceMinWidth","getWhitespaceMinWidth","_computeContentWidth","firstLineNumberInViewport","scrollTopWithoutViewZones","changeWhitespace","onHeightMaybeChanged","getVerticalOffsetAfterLineNumber","isAfterLines","isInTopPadding","isInBottomPadding","getWhitespaceAtVerticalOffset","visibleBox","getCurrentViewport","getLinesViewportData","getWhitespaceViewportData","getWhitespaces","deltaScrollLeft","deltaScrollTop","createModelLineProjection","lineBreakData","isVisible","IdentityModelLineProjection","INSTANCE","HiddenModelLineProjection","ModelLineProjection","_projectionData","_isVisible","getOutputLineCount","modelLineNumber","outputLineIndex","_assertVisible","startOffsetInInputWithInjections","endOffsetInInputWithInjections","idx","getValueInRange","spaces","getLineLength","_modelLineNumber","getMinOutputOffset","getMaxOutputOffset","getViewLinesData","outputLineIdx","globalStartIndex","needed","lineWithInjections","inlineDecorationsPerOutputLine","totalInjectedTextLengthBefore","currentInjectedOffset","lineStartOffsetInInputWithInjections","lineEndOffsetInInputWithInjections","injectedTextStartOffsetInInputWithInjections","injectedTextEndOffsetInInputWithInjections","withInserted","globalIndex","_getViewLineData","deltaStartIndex","sliceAndInflate","getViewLineCount","outputColumn","translateToInputOffset","deltaLineNumber","inputColumn","affinity","translateToOutputPosition","toPosition","outputPosition","baseViewLineNumber","normalizeOutputPosition","getInjectedText","_outputLineIndex","inflate","_fromOuputLineIndex","_toOutputLineIndex","getViewLineData","_inputColumn","_outputColumn","_globalStartIndex","_needed","_result","_deltaLineNumber","_spaces","_makeSpaces","ViewModelLinesFromProjectedModel","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","wrappingStrategy","_editorId","_validModelVersionId","_domLineBreaksComputerFactory","_monospaceLineBreaksComputerFactory","_constructLines","hiddenAreasDecorationIds","deltaDecorations","CoordinatesConverter","resetHiddenAreas","previousLineBreaks","modelLineProjections","linesContent","getLinesContent","injectedTextDecorations","getInjectedTextDecorations","lineBreaksComputer","createLineBreaksComputer","injectedTextQueue","fromDecorations","_loop","lineInjectedText","takeWhile","linesBreaks","values","hiddenAreas","areaId","getDecorationRange","compareRangesUsingStarts","hiddenAreaStart","hiddenAreaEnd","hiddenAreaIdx","nextLineNumberToUpdateHiddenArea","isInHiddenArea","line","getVersionId","projectedModelLineLineCounts","ConstantTimePrefixSumComputer","decId","_ranges","newRanges","sortedRanges","currentRangeStart","currentRangeEnd","normalizeLineRanges","validateRange","oldRanges","hasDifference","newDecorations","ModelDecorationOptions","EMPTY","hasVisibleLine","lineChanged","setVisible","newOutputLineCount","setValue","setHiddenAreas","_modelColumn","newTabSize","equalFontInfo","equalWrappingStrategy","equalWrappingColumn","equalWrappingIndent","equalWordBreak","onlyWrappingColumnChanged","getProjectionData","outputFromLineNumber","getPrefixSum","outputToLineNumber","removeValues","viewEvents","_toLineNumber","lineBreaks","totalOutputLineCount","insertLines","insertPrefixSumValues","outputLineCount","insertValues","oldOutputLineCount","lineMappingChanged","changeFrom","changeTo","insertFrom","insertTo","deleteFrom","deleteTo","getTotalSum","viewLineNumber","viewLineCount","_toValidViewLineNumber","modelPosition","convertViewPositionToModelPosition","modelMinPosition","modelMaxPosition","guides","getActiveIndentGuide","viewStartPosition","viewEndPosition","indent","getIndexOf","remainder","ViewLineInfo","viewLineInfo","modelLineWrappedLineIdx","minViewColumn","getModelColumnOfViewPosition","maxViewColumn","viewStartLineNumber","viewEndLineNumber","startViewLine","getViewLineInfo","endViewLine","lastVisibleModelPos","getModelStartPositionOfViewLine","viewLines","curModelLine","lastVisibleModelPos2","fromPositions","ViewLineInfoGroupedByModelRange","getModelEndPositionOfViewLine","activeViewPosition","_this4","modelActivePosition","resultPerViewLine","getViewLineInfosGroupedByModelRanges","group","modelRangeStartLineNumber","bracketGuidesPerModelLine","getLinesBracketGuides","_loop2","getViewPositionOfModelPosition","p","getMinColumnOfViewLine","viewPosition","getMaxColumnOfViewLine","filter","modelStart","modelEnd","resultRepeatCount","resultRepeatOption","modelStartLineIndex","modelEndLineIndex","reqStart","modelLineIndex","viewLineStartIndex","getViewLineNumberOfModelPosition","viewLineEndIndex","option","getLinesIndentGuides","viewIndents","currIndex","blockAtIndex","getViewLineContent","getViewLineLength","startModelLineIndex","startRemainder","getLineCount","fromViewLineIndex","remainingViewLineCount","lastLine","viewColumn","expectedModelPosition","computedModelColumn","validatePosition","expectedModelRange","validViewStart","validateViewPosition","getStartPosition","validViewEnd","getEndPosition","validPosition","inputLineNumber","lineIndexChanged","modelColumn","filterOutValidation","res","finalResult","finalResultLen","prevDecId","getInjectedTextAt","normalizePosition","getLineIndentColumn","lines","_lines","convertViewRangeToModelRange","validateViewRange","modelPositionIsVisible","getModelLineViewLineCount","ViewModelLinesFromModelAsIs","IdentityCoordinatesConverter","_newTabSize","_fontInfo","_wrappingStrategy","_wrappingColumn","_wrappingIndent","_versionId","_minLineNumber","_maxLineNumber","activePosition","fill","pos","_validPosition","_validRange","_viewPosition","_viewRange","ViewModel","languageConfigurationService","_themeService","hiddenAreasModel","HiddenAreasModel","previousHiddenAreas","_eventDispatcher","ViewModelEventDispatcher","onEvent","cursorConfig","CursorConfiguration","getOptions","_tokenizeViewportSoon","RunOnceScheduler","tokenizeViewport","_updateConfigurationViewLineCount","_updateConfigurationViewLineCountNow","_hasFocus","_viewportStart","ViewportStart","isTooLargeForTokenization","createCoordinatesConverter","_cursor","CursorsController","_assertThisInitialized","schedule","invalidate","emitSingleViewEvent","emitOutgoingEvent","ScrollChangedEvent","oldScrollWidth","oldScrollLeft","oldScrollHeight","oldScrollTop","_decorations","_registerModelEvents","onDidChangeFast","eventsCollector","beginEmitViewEvents","_onConfigurationChanged","endEmitViewEvents","getInstance","onDidColorThemeChange","_invalidateDecorationsColorCache","setViewLineCount","linesViewportData","viewVisibleRange","modelVisibleRanges","_toModelVisibleRanges","modelVisibleRange","hasFocus","setHasFocus","FocusChangedEvent","isValid","getCurrentScrollTop","previousViewportStartViewPosition","previousViewportStartModelPosition","StableViewport","startLineDelta","stableViewport","_captureStableViewport","setWrappingSettings","emitViewEvent","reset","recoverViewportStart","shouldRecreate","updateConfiguration","onDidChangeContentOrInjectedText","hadOtherModelChange","hadModelLineChangeThatChangedLineMapping","textModelEvents","lineIdx","element","lineBreakQueue","ArrayQueue","onModelFlushed","linesDeletedEvent","onModelLinesDeleted","insertedLineBreaks","takeCount","linesInsertedEvent","onModelLinesInserted","changedLineBreakData","dequeue","_this2$_lines$onModel","onModelLineChanged","_this2$_lines$onModel2","linesChangedEvent","acceptVersionId","viewportStartWasValid","setModelLineCount","getAttachedEditorCount","_getTrackedRange","modelTrackedRange","viewPositionTop","setScrollPosition","ModelContentChangedEvent","onModelContentChanged","onDidChangeTokens","viewRanges","lenJ","tokenizationSupportChanged","ModelTokensChangedEvent","onDidChangeLanguageConfiguration","ModelLanguageConfigurationChangedEvent","onDidChangeLanguage","ModelLanguageChangedEvent","onDidChangeOptions","setTabSize","ModelOptionsChangedEvent","onDidChangeDecorations","onModelDecorationsChanged","ModelDecorationsChangedEvent","mergedRanges","getMergedRanges","HiddenAreasChangedEvent","linesAround","startViewLineNumber","endViewLineNumber","visibleViewRange","getCompletelyVisibleViewRange","getHiddenAreas","hiddenStartLineNumber","hiddenEndLineNumber","getLinesViewportDataAtScrollTop","compatViewState","saveState","firstViewLineNumber","getLineNumberAtVerticalOffset","firstPosition","firstPositionDeltaTop","state","_reduceRestoreStateCompatibility","getViewLinesIndentGuides","getViewLinesBracketGuides","getDecorationsViewportData","_getViewLineRenderingData","getInlineDecorationsOnLine","getTabSize","lineData","_toConsumableArray","toInlineDecoration","getOverviewRulerDecorations","OverviewRulerDecorations","opts","overviewRuler","lane","getColor","accept","asArray","opts1","invalidateCachedColor","opts2","getValueLengthInRange","modifyPosition","viewAnchorPosition","lineFeedCnt","modelAnchor","getEOL","resultOffset","getOffsetAt","getPositionAt","modelRanges","emptySelectionClipboard","forceCRLF","newLineCharacter","hasEmptyRange","hasNonEmptyRange","modelLineNumbers","_step7","prevModelLineNumber","_iterator7","_step8","_iterator8","PLAINTEXT_LANGUAGE_ID","fontFamily","_getColorMap","test","EDITOR_FONT_DEFAULTS","replace","mode","fontWeight","fontSize","_getHTMLToCopy","tokenizeLineToHTML","platform","Color","Format","CSS","formatHex","getPrimaryCursorState","getLastAddedCursorIndex","getCursorStates","states","_withViewEventsCollector","setStates","getCursorColumnSelectData","getAutoClosedCharacters","columnSelectData","setCursorColumnSelectData","getPrevEditOperationType","setPrevEditOperationType","getSelection","getSelections","modelState","setSelections","_this5","restoreState","context","readOnly","ReadOnlyEditAttemptEvent","edits","cursorStateComputer","_this6","_executeCursorEdit","executeEdits","_this7","startComposition","_this8","endComposition","_this9","replacePrevCharCnt","replaceNextCharCnt","positionDelta","_this10","compositionType","pasteOnNewLine","multicursorText","_this11","paste","_this12","cut","command","_this13","executeCommand","commands","_this14","executeCommands","_this15","revealPrimary","getTopMostViewPosition","getBottomMostViewPosition","_viewLineNumber","_isValid","_modelTrackedRange","_startLineDelta","_setTrackedRange","viewportStartLineTrackedRange","viewportStartLineTop","_asMap","prevGroup","prevData","prevLane","prevEndLineNumber","shouldRecompute","existing","rangeArraysEqual","reduce","arr1","arr2","item1","item2","mergeLineRangeArray","viewportStartModelPosition","_onEvent","_eventHandlers","_viewEventQueue","_isConsumingViewEventQueue","_collector","_collectorCnt","_outgoingEvents","_addOutgoingEvent","_emitOutgoingEvents","mergeResult","kind","attemptToMerge","shift","isNoOp","warn","ViewModelEventsCollector","outgoingEvents","outgoingEvent","_emitMany","_consumeViewEventQueue","_doConsumeQueue","eventHandlers","handleEvents","oldContentWidth","oldContentHeight","_oldContentWidth","_oldContentHeight","oldHasFocus","_oldScrollWidth","_oldScrollLeft","_oldScrollHeight","_oldScrollTop","CursorStateChangedEvent","oldSelections","oldModelVersionId","modelVersionId","reachedMaxCursorCount","_selectionsAreEqual","equalsSelection"],"sourceRoot":""}