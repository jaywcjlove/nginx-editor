{"version":3,"file":"static/js/monaco-editor-vendor.c59762fa.a529fe74.js","mappings":"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","sources":["../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/textModelTokens.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/tokenizationTextModelPart.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/textModelPart.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/utils.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { splitLines } from '../../../base/common/strings.js';\nimport { Position } from '../core/position.js';\nimport { PrefixSumComputer } from './prefixSumComputer.js';\nexport class MirrorTextModel {\n    constructor(uri, lines, eol, versionId) {\n        this._uri = uri;\n        this._lines = lines;\n        this._eol = eol;\n        this._versionId = versionId;\n        this._lineStarts = null;\n        this._cachedTextValue = null;\n    }\n    dispose() {\n        this._lines.length = 0;\n    }\n    get version() {\n        return this._versionId;\n    }\n    getText() {\n        if (this._cachedTextValue === null) {\n            this._cachedTextValue = this._lines.join(this._eol);\n        }\n        return this._cachedTextValue;\n    }\n    onEvents(e) {\n        if (e.eol && e.eol !== this._eol) {\n            this._eol = e.eol;\n            this._lineStarts = null;\n        }\n        // Update my lines\n        const changes = e.changes;\n        for (const change of changes) {\n            this._acceptDeleteRange(change.range);\n            this._acceptInsertText(new Position(change.range.startLineNumber, change.range.startColumn), change.text);\n        }\n        this._versionId = e.versionId;\n        this._cachedTextValue = null;\n    }\n    _ensureLineStarts() {\n        if (!this._lineStarts) {\n            const eolLength = this._eol.length;\n            const linesLength = this._lines.length;\n            const lineStartValues = new Uint32Array(linesLength);\n            for (let i = 0; i < linesLength; i++) {\n                lineStartValues[i] = this._lines[i].length + eolLength;\n            }\n            this._lineStarts = new PrefixSumComputer(lineStartValues);\n        }\n    }\n    /**\n     * All changes to a line's text go through this method\n     */\n    _setLineText(lineIndex, newValue) {\n        this._lines[lineIndex] = newValue;\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.setValue(lineIndex, this._lines[lineIndex].length + this._eol.length);\n        }\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber) {\n            if (range.startColumn === range.endColumn) {\n                // Nothing to delete\n                return;\n            }\n            // Delete text on the affected line\n            this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n                + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));\n            return;\n        }\n        // Take remaining text on last line and append it to remaining text on first line\n        this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n            + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1));\n        // Delete middle lines\n        this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        }\n    }\n    _acceptInsertText(position, insertText) {\n        if (insertText.length === 0) {\n            // Nothing to insert\n            return;\n        }\n        const insertLines = splitLines(insertText);\n        if (insertLines.length === 1) {\n            // Inserting text on one line\n            this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n                + insertLines[0]\n                + this._lines[position.lineNumber - 1].substring(position.column - 1));\n            return;\n        }\n        // Append overflowing text from first line to the end of text to insert\n        insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1);\n        // Delete overflowing text from first line and insert text on first line\n        this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n            + insertLines[0]);\n        // Insert new lines & store lengths\n        const newLengths = new Uint32Array(insertLines.length - 1);\n        for (let i = 1; i < insertLines.length; i++) {\n            this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);\n            newLengths[i - 1] = insertLines[i].length + this._eol.length;\n        }\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.insertValues(position.lineNumber, newLengths);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { arrayInsert } from '../../../base/common/arrays.js';\nimport { toUint32 } from '../../../base/common/uint.js';\nexport class PrefixSumComputer {\n    constructor(values) {\n        this.values = values;\n        this.prefixSum = new Uint32Array(values.length);\n        this.prefixSumValidIndex = new Int32Array(1);\n        this.prefixSumValidIndex[0] = -1;\n    }\n    insertValues(insertIndex, insertValues) {\n        insertIndex = toUint32(insertIndex);\n        const oldValues = this.values;\n        const oldPrefixSum = this.prefixSum;\n        const insertValuesLen = insertValues.length;\n        if (insertValuesLen === 0) {\n            return false;\n        }\n        this.values = new Uint32Array(oldValues.length + insertValuesLen);\n        this.values.set(oldValues.subarray(0, insertIndex), 0);\n        this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\n        this.values.set(insertValues, insertIndex);\n        if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = insertIndex - 1;\n        }\n        this.prefixSum = new Uint32Array(this.values.length);\n        if (this.prefixSumValidIndex[0] >= 0) {\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n        }\n        return true;\n    }\n    setValue(index, value) {\n        index = toUint32(index);\n        value = toUint32(value);\n        if (this.values[index] === value) {\n            return false;\n        }\n        this.values[index] = value;\n        if (index - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = index - 1;\n        }\n        return true;\n    }\n    removeValues(startIndex, count) {\n        startIndex = toUint32(startIndex);\n        count = toUint32(count);\n        const oldValues = this.values;\n        const oldPrefixSum = this.prefixSum;\n        if (startIndex >= oldValues.length) {\n            return false;\n        }\n        const maxCount = oldValues.length - startIndex;\n        if (count >= maxCount) {\n            count = maxCount;\n        }\n        if (count === 0) {\n            return false;\n        }\n        this.values = new Uint32Array(oldValues.length - count);\n        this.values.set(oldValues.subarray(0, startIndex), 0);\n        this.values.set(oldValues.subarray(startIndex + count), startIndex);\n        this.prefixSum = new Uint32Array(this.values.length);\n        if (startIndex - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = startIndex - 1;\n        }\n        if (this.prefixSumValidIndex[0] >= 0) {\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n        }\n        return true;\n    }\n    getTotalSum() {\n        if (this.values.length === 0) {\n            return 0;\n        }\n        return this._getPrefixSum(this.values.length - 1);\n    }\n    /**\n     * Returns the sum of the first `index + 1` many items.\n     * @returns `SUM(0 <= j <= index, values[j])`.\n     */\n    getPrefixSum(index) {\n        if (index < 0) {\n            return 0;\n        }\n        index = toUint32(index);\n        return this._getPrefixSum(index);\n    }\n    _getPrefixSum(index) {\n        if (index <= this.prefixSumValidIndex[0]) {\n            return this.prefixSum[index];\n        }\n        let startIndex = this.prefixSumValidIndex[0] + 1;\n        if (startIndex === 0) {\n            this.prefixSum[0] = this.values[0];\n            startIndex++;\n        }\n        if (index >= this.values.length) {\n            index = this.values.length - 1;\n        }\n        for (let i = startIndex; i <= index; i++) {\n            this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n        }\n        this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\n        return this.prefixSum[index];\n    }\n    getIndexOf(sum) {\n        sum = Math.floor(sum);\n        // Compute all sums (to get a fully valid prefixSum)\n        this.getTotalSum();\n        let low = 0;\n        let high = this.values.length - 1;\n        let mid = 0;\n        let midStop = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            midStop = this.prefixSum[mid];\n            midStart = midStop - this.values[mid];\n            if (sum < midStart) {\n                high = mid - 1;\n            }\n            else if (sum >= midStop) {\n                low = mid + 1;\n            }\n            else {\n                break;\n            }\n        }\n        return new PrefixSumIndexOfResult(mid, sum - midStart);\n    }\n}\n/**\n * {@link getIndexOf} has an amortized runtime complexity of O(1).\n *\n * ({@link PrefixSumComputer.getIndexOf} is just  O(log n))\n*/\nexport class ConstantTimePrefixSumComputer {\n    constructor(values) {\n        this._values = values;\n        this._isValid = false;\n        this._validEndIndex = -1;\n        this._prefixSum = [];\n        this._indexBySum = [];\n    }\n    /**\n     * @returns SUM(0 <= j < values.length, values[j])\n     */\n    getTotalSum() {\n        this._ensureValid();\n        return this._indexBySum.length;\n    }\n    /**\n     * Returns the sum of the first `count` many items.\n     * @returns `SUM(0 <= j < count, values[j])`.\n     */\n    getPrefixSum(count) {\n        this._ensureValid();\n        if (count === 0) {\n            return 0;\n        }\n        return this._prefixSum[count - 1];\n    }\n    /**\n     * @returns `result`, such that `getPrefixSum(result.index) + result.remainder = sum`\n     */\n    getIndexOf(sum) {\n        this._ensureValid();\n        const idx = this._indexBySum[sum];\n        const viewLinesAbove = idx > 0 ? this._prefixSum[idx - 1] : 0;\n        return new PrefixSumIndexOfResult(idx, sum - viewLinesAbove);\n    }\n    removeValues(start, deleteCount) {\n        this._values.splice(start, deleteCount);\n        this._invalidate(start);\n    }\n    insertValues(insertIndex, insertArr) {\n        this._values = arrayInsert(this._values, insertIndex, insertArr);\n        this._invalidate(insertIndex);\n    }\n    _invalidate(index) {\n        this._isValid = false;\n        this._validEndIndex = Math.min(this._validEndIndex, index - 1);\n    }\n    _ensureValid() {\n        if (this._isValid) {\n            return;\n        }\n        for (let i = this._validEndIndex + 1, len = this._values.length; i < len; i++) {\n            const value = this._values[i];\n            const sumAbove = i > 0 ? this._prefixSum[i - 1] : 0;\n            this._prefixSum[i] = sumAbove + value;\n            for (let j = 0; j < value; j++) {\n                this._indexBySum[sumAbove + j] = i;\n            }\n        }\n        // trim things\n        this._prefixSum.length = this._values.length;\n        this._indexBySum.length = this._prefixSum[this._prefixSum.length - 1];\n        // mark as valid\n        this._isValid = true;\n        this._validEndIndex = this._values.length - 1;\n    }\n    setValue(index, value) {\n        if (this._values[index] === value) {\n            // no change\n            return;\n        }\n        this._values[index] = value;\n        this._invalidate(index);\n    }\n}\nexport class PrefixSumIndexOfResult {\n    constructor(index, remainder) {\n        this.index = index;\n        this.remainder = remainder;\n        this._prefixSumIndexOfResultBrand = undefined;\n        this.index = index;\n        this.remainder = remainder;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class TreeNode {\n    constructor(piece, color) {\n        this.piece = piece;\n        this.color = color;\n        this.size_left = 0;\n        this.lf_left = 0;\n        this.parent = this;\n        this.left = this;\n        this.right = this;\n    }\n    next() {\n        if (this.right !== SENTINEL) {\n            return leftest(this.right);\n        }\n        let node = this;\n        while (node.parent !== SENTINEL) {\n            if (node.parent.left === node) {\n                break;\n            }\n            node = node.parent;\n        }\n        if (node.parent === SENTINEL) {\n            return SENTINEL;\n        }\n        else {\n            return node.parent;\n        }\n    }\n    prev() {\n        if (this.left !== SENTINEL) {\n            return righttest(this.left);\n        }\n        let node = this;\n        while (node.parent !== SENTINEL) {\n            if (node.parent.right === node) {\n                break;\n            }\n            node = node.parent;\n        }\n        if (node.parent === SENTINEL) {\n            return SENTINEL;\n        }\n        else {\n            return node.parent;\n        }\n    }\n    detach() {\n        this.parent = null;\n        this.left = null;\n        this.right = null;\n    }\n}\nexport const SENTINEL = new TreeNode(null, 0 /* NodeColor.Black */);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nSENTINEL.color = 0 /* NodeColor.Black */;\nexport function leftest(node) {\n    while (node.left !== SENTINEL) {\n        node = node.left;\n    }\n    return node;\n}\nexport function righttest(node) {\n    while (node.right !== SENTINEL) {\n        node = node.right;\n    }\n    return node;\n}\nfunction calculateSize(node) {\n    if (node === SENTINEL) {\n        return 0;\n    }\n    return node.size_left + node.piece.length + calculateSize(node.right);\n}\nfunction calculateLF(node) {\n    if (node === SENTINEL) {\n        return 0;\n    }\n    return node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\n}\nfunction resetSentinel() {\n    SENTINEL.parent = SENTINEL;\n}\nexport function leftRotate(tree, x) {\n    const y = x.right;\n    // fix size_left\n    y.size_left += x.size_left + (x.piece ? x.piece.length : 0);\n    y.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n    x.right = y.left;\n    if (y.left !== SENTINEL) {\n        y.left.parent = x;\n    }\n    y.parent = x.parent;\n    if (x.parent === SENTINEL) {\n        tree.root = y;\n    }\n    else if (x.parent.left === x) {\n        x.parent.left = y;\n    }\n    else {\n        x.parent.right = y;\n    }\n    y.left = x;\n    x.parent = y;\n}\nexport function rightRotate(tree, y) {\n    const x = y.left;\n    y.left = x.right;\n    if (x.right !== SENTINEL) {\n        x.right.parent = y;\n    }\n    x.parent = y.parent;\n    // fix size_left\n    y.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\n    y.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n    if (y.parent === SENTINEL) {\n        tree.root = x;\n    }\n    else if (y === y.parent.right) {\n        y.parent.right = x;\n    }\n    else {\n        y.parent.left = x;\n    }\n    x.right = y;\n    y.parent = x;\n}\nexport function rbDelete(tree, z) {\n    let x;\n    let y;\n    if (z.left === SENTINEL) {\n        y = z;\n        x = y.right;\n    }\n    else if (z.right === SENTINEL) {\n        y = z;\n        x = y.left;\n    }\n    else {\n        y = leftest(z.right);\n        x = y.right;\n    }\n    if (y === tree.root) {\n        tree.root = x;\n        // if x is null, we are removing the only node\n        x.color = 0 /* NodeColor.Black */;\n        z.detach();\n        resetSentinel();\n        tree.root.parent = SENTINEL;\n        return;\n    }\n    const yWasRed = (y.color === 1 /* NodeColor.Red */);\n    if (y === y.parent.left) {\n        y.parent.left = x;\n    }\n    else {\n        y.parent.right = x;\n    }\n    if (y === z) {\n        x.parent = y.parent;\n        recomputeTreeMetadata(tree, x);\n    }\n    else {\n        if (y.parent === z) {\n            x.parent = y;\n        }\n        else {\n            x.parent = y.parent;\n        }\n        // as we make changes to x's hierarchy, update size_left of subtree first\n        recomputeTreeMetadata(tree, x);\n        y.left = z.left;\n        y.right = z.right;\n        y.parent = z.parent;\n        y.color = z.color;\n        if (z === tree.root) {\n            tree.root = y;\n        }\n        else {\n            if (z === z.parent.left) {\n                z.parent.left = y;\n            }\n            else {\n                z.parent.right = y;\n            }\n        }\n        if (y.left !== SENTINEL) {\n            y.left.parent = y;\n        }\n        if (y.right !== SENTINEL) {\n            y.right.parent = y;\n        }\n        // update metadata\n        // we replace z with y, so in this sub tree, the length change is z.item.length\n        y.size_left = z.size_left;\n        y.lf_left = z.lf_left;\n        recomputeTreeMetadata(tree, y);\n    }\n    z.detach();\n    if (x.parent.left === x) {\n        const newSizeLeft = calculateSize(x);\n        const newLFLeft = calculateLF(x);\n        if (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {\n            const delta = newSizeLeft - x.parent.size_left;\n            const lf_delta = newLFLeft - x.parent.lf_left;\n            x.parent.size_left = newSizeLeft;\n            x.parent.lf_left = newLFLeft;\n            updateTreeMetadata(tree, x.parent, delta, lf_delta);\n        }\n    }\n    recomputeTreeMetadata(tree, x.parent);\n    if (yWasRed) {\n        resetSentinel();\n        return;\n    }\n    // RB-DELETE-FIXUP\n    let w;\n    while (x !== tree.root && x.color === 0 /* NodeColor.Black */) {\n        if (x === x.parent.left) {\n            w = x.parent.right;\n            if (w.color === 1 /* NodeColor.Red */) {\n                w.color = 0 /* NodeColor.Black */;\n                x.parent.color = 1 /* NodeColor.Red */;\n                leftRotate(tree, x.parent);\n                w = x.parent.right;\n            }\n            if (w.left.color === 0 /* NodeColor.Black */ && w.right.color === 0 /* NodeColor.Black */) {\n                w.color = 1 /* NodeColor.Red */;\n                x = x.parent;\n            }\n            else {\n                if (w.right.color === 0 /* NodeColor.Black */) {\n                    w.left.color = 0 /* NodeColor.Black */;\n                    w.color = 1 /* NodeColor.Red */;\n                    rightRotate(tree, w);\n                    w = x.parent.right;\n                }\n                w.color = x.parent.color;\n                x.parent.color = 0 /* NodeColor.Black */;\n                w.right.color = 0 /* NodeColor.Black */;\n                leftRotate(tree, x.parent);\n                x = tree.root;\n            }\n        }\n        else {\n            w = x.parent.left;\n            if (w.color === 1 /* NodeColor.Red */) {\n                w.color = 0 /* NodeColor.Black */;\n                x.parent.color = 1 /* NodeColor.Red */;\n                rightRotate(tree, x.parent);\n                w = x.parent.left;\n            }\n            if (w.left.color === 0 /* NodeColor.Black */ && w.right.color === 0 /* NodeColor.Black */) {\n                w.color = 1 /* NodeColor.Red */;\n                x = x.parent;\n            }\n            else {\n                if (w.left.color === 0 /* NodeColor.Black */) {\n                    w.right.color = 0 /* NodeColor.Black */;\n                    w.color = 1 /* NodeColor.Red */;\n                    leftRotate(tree, w);\n                    w = x.parent.left;\n                }\n                w.color = x.parent.color;\n                x.parent.color = 0 /* NodeColor.Black */;\n                w.left.color = 0 /* NodeColor.Black */;\n                rightRotate(tree, x.parent);\n                x = tree.root;\n            }\n        }\n    }\n    x.color = 0 /* NodeColor.Black */;\n    resetSentinel();\n}\nexport function fixInsert(tree, x) {\n    recomputeTreeMetadata(tree, x);\n    while (x !== tree.root && x.parent.color === 1 /* NodeColor.Red */) {\n        if (x.parent === x.parent.parent.left) {\n            const y = x.parent.parent.right;\n            if (y.color === 1 /* NodeColor.Red */) {\n                x.parent.color = 0 /* NodeColor.Black */;\n                y.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.right) {\n                    x = x.parent;\n                    leftRotate(tree, x);\n                }\n                x.parent.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                rightRotate(tree, x.parent.parent);\n            }\n        }\n        else {\n            const y = x.parent.parent.left;\n            if (y.color === 1 /* NodeColor.Red */) {\n                x.parent.color = 0 /* NodeColor.Black */;\n                y.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.left) {\n                    x = x.parent;\n                    rightRotate(tree, x);\n                }\n                x.parent.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                leftRotate(tree, x.parent.parent);\n            }\n        }\n    }\n    tree.root.color = 0 /* NodeColor.Black */;\n}\nexport function updateTreeMetadata(tree, x, delta, lineFeedCntDelta) {\n    // node length change or line feed count change\n    while (x !== tree.root && x !== SENTINEL) {\n        if (x.parent.left === x) {\n            x.parent.size_left += delta;\n            x.parent.lf_left += lineFeedCntDelta;\n        }\n        x = x.parent;\n    }\n}\nexport function recomputeTreeMetadata(tree, x) {\n    let delta = 0;\n    let lf_delta = 0;\n    if (x === tree.root) {\n        return;\n    }\n    // go upwards till the node whose left subtree is changed.\n    while (x !== tree.root && x === x.parent.right) {\n        x = x.parent;\n    }\n    if (x === tree.root) {\n        // well, it means we add a node to the end (inorder)\n        return;\n    }\n    // x is the node whose right subtree is changed.\n    x = x.parent;\n    delta = calculateSize(x.left) - x.size_left;\n    lf_delta = calculateLF(x.left) - x.lf_left;\n    x.size_left += delta;\n    x.lf_left += lf_delta;\n    // go upwards till root. O(logN)\n    while (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\n        if (x.parent.left === x) {\n            x.parent.size_left += delta;\n            x.parent.lf_left += lf_delta;\n        }\n        x = x.parent;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../../core/position.js';\nimport { Range } from '../../core/range.js';\nimport { FindMatch } from '../../model.js';\nimport { SENTINEL, TreeNode, fixInsert, leftest, rbDelete, righttest, updateTreeMetadata } from './rbTreeBase.js';\nimport { Searcher, createFindMatch, isValidMatch } from '../textModelSearch.js';\n// const lfRegex = new RegExp(/\\r\\n|\\r|\\n/g);\nconst AverageBufferSize = 65535;\nfunction createUintArray(arr) {\n    let r;\n    if (arr[arr.length - 1] < 65536) {\n        r = new Uint16Array(arr.length);\n    }\n    else {\n        r = new Uint32Array(arr.length);\n    }\n    r.set(arr, 0);\n    return r;\n}\nclass LineStarts {\n    constructor(lineStarts, cr, lf, crlf, isBasicASCII) {\n        this.lineStarts = lineStarts;\n        this.cr = cr;\n        this.lf = lf;\n        this.crlf = crlf;\n        this.isBasicASCII = isBasicASCII;\n    }\n}\nexport function createLineStartsFast(str, readonly = true) {\n    const r = [0];\n    let rLength = 1;\n    for (let i = 0, len = str.length; i < len; i++) {\n        const chr = str.charCodeAt(i);\n        if (chr === 13 /* CharCode.CarriageReturn */) {\n            if (i + 1 < len && str.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                // \\r\\n... case\n                r[rLength++] = i + 2;\n                i++; // skip \\n\n            }\n            else {\n                // \\r... case\n                r[rLength++] = i + 1;\n            }\n        }\n        else if (chr === 10 /* CharCode.LineFeed */) {\n            r[rLength++] = i + 1;\n        }\n    }\n    if (readonly) {\n        return createUintArray(r);\n    }\n    else {\n        return r;\n    }\n}\nexport function createLineStarts(r, str) {\n    r.length = 0;\n    r[0] = 0;\n    let rLength = 1;\n    let cr = 0, lf = 0, crlf = 0;\n    let isBasicASCII = true;\n    for (let i = 0, len = str.length; i < len; i++) {\n        const chr = str.charCodeAt(i);\n        if (chr === 13 /* CharCode.CarriageReturn */) {\n            if (i + 1 < len && str.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                // \\r\\n... case\n                crlf++;\n                r[rLength++] = i + 2;\n                i++; // skip \\n\n            }\n            else {\n                cr++;\n                // \\r... case\n                r[rLength++] = i + 1;\n            }\n        }\n        else if (chr === 10 /* CharCode.LineFeed */) {\n            lf++;\n            r[rLength++] = i + 1;\n        }\n        else {\n            if (isBasicASCII) {\n                if (chr !== 9 /* CharCode.Tab */ && (chr < 32 || chr > 126)) {\n                    isBasicASCII = false;\n                }\n            }\n        }\n    }\n    const result = new LineStarts(createUintArray(r), cr, lf, crlf, isBasicASCII);\n    r.length = 0;\n    return result;\n}\nexport class Piece {\n    constructor(bufferIndex, start, end, lineFeedCnt, length) {\n        this.bufferIndex = bufferIndex;\n        this.start = start;\n        this.end = end;\n        this.lineFeedCnt = lineFeedCnt;\n        this.length = length;\n    }\n}\nexport class StringBuffer {\n    constructor(buffer, lineStarts) {\n        this.buffer = buffer;\n        this.lineStarts = lineStarts;\n    }\n}\n/**\n * Readonly snapshot for piece tree.\n * In a real multiple thread environment, to make snapshot reading always work correctly, we need to\n * 1. Make TreeNode.piece immutable, then reading and writing can run in parallel.\n * 2. TreeNode/Buffers normalization should not happen during snapshot reading.\n */\nclass PieceTreeSnapshot {\n    constructor(tree, BOM) {\n        this._pieces = [];\n        this._tree = tree;\n        this._BOM = BOM;\n        this._index = 0;\n        if (tree.root !== SENTINEL) {\n            tree.iterate(tree.root, node => {\n                if (node !== SENTINEL) {\n                    this._pieces.push(node.piece);\n                }\n                return true;\n            });\n        }\n    }\n    read() {\n        if (this._pieces.length === 0) {\n            if (this._index === 0) {\n                this._index++;\n                return this._BOM;\n            }\n            else {\n                return null;\n            }\n        }\n        if (this._index > this._pieces.length - 1) {\n            return null;\n        }\n        if (this._index === 0) {\n            return this._BOM + this._tree.getPieceContent(this._pieces[this._index++]);\n        }\n        return this._tree.getPieceContent(this._pieces[this._index++]);\n    }\n}\nclass PieceTreeSearchCache {\n    constructor(limit) {\n        this._limit = limit;\n        this._cache = [];\n    }\n    get(offset) {\n        for (let i = this._cache.length - 1; i >= 0; i--) {\n            const nodePos = this._cache[i];\n            if (nodePos.nodeStartOffset <= offset && nodePos.nodeStartOffset + nodePos.node.piece.length >= offset) {\n                return nodePos;\n            }\n        }\n        return null;\n    }\n    get2(lineNumber) {\n        for (let i = this._cache.length - 1; i >= 0; i--) {\n            const nodePos = this._cache[i];\n            if (nodePos.nodeStartLineNumber && nodePos.nodeStartLineNumber < lineNumber && nodePos.nodeStartLineNumber + nodePos.node.piece.lineFeedCnt >= lineNumber) {\n                return nodePos;\n            }\n        }\n        return null;\n    }\n    set(nodePosition) {\n        if (this._cache.length >= this._limit) {\n            this._cache.shift();\n        }\n        this._cache.push(nodePosition);\n    }\n    validate(offset) {\n        let hasInvalidVal = false;\n        const tmp = this._cache;\n        for (let i = 0; i < tmp.length; i++) {\n            const nodePos = tmp[i];\n            if (nodePos.node.parent === null || nodePos.nodeStartOffset >= offset) {\n                tmp[i] = null;\n                hasInvalidVal = true;\n                continue;\n            }\n        }\n        if (hasInvalidVal) {\n            const newArr = [];\n            for (const entry of tmp) {\n                if (entry !== null) {\n                    newArr.push(entry);\n                }\n            }\n            this._cache = newArr;\n        }\n    }\n}\nexport class PieceTreeBase {\n    constructor(chunks, eol, eolNormalized) {\n        this.create(chunks, eol, eolNormalized);\n    }\n    create(chunks, eol, eolNormalized) {\n        this._buffers = [\n            new StringBuffer('', [0])\n        ];\n        this._lastChangeBufferPos = { line: 0, column: 0 };\n        this.root = SENTINEL;\n        this._lineCnt = 1;\n        this._length = 0;\n        this._EOL = eol;\n        this._EOLLength = eol.length;\n        this._EOLNormalized = eolNormalized;\n        let lastNode = null;\n        for (let i = 0, len = chunks.length; i < len; i++) {\n            if (chunks[i].buffer.length > 0) {\n                if (!chunks[i].lineStarts) {\n                    chunks[i].lineStarts = createLineStartsFast(chunks[i].buffer);\n                }\n                const piece = new Piece(i + 1, { line: 0, column: 0 }, { line: chunks[i].lineStarts.length - 1, column: chunks[i].buffer.length - chunks[i].lineStarts[chunks[i].lineStarts.length - 1] }, chunks[i].lineStarts.length - 1, chunks[i].buffer.length);\n                this._buffers.push(chunks[i]);\n                lastNode = this.rbInsertRight(lastNode, piece);\n            }\n        }\n        this._searchCache = new PieceTreeSearchCache(1);\n        this._lastVisitedLine = { lineNumber: 0, value: '' };\n        this.computeBufferMetadata();\n    }\n    normalizeEOL(eol) {\n        const averageBufferSize = AverageBufferSize;\n        const min = averageBufferSize - Math.floor(averageBufferSize / 3);\n        const max = min * 2;\n        let tempChunk = '';\n        let tempChunkLen = 0;\n        const chunks = [];\n        this.iterate(this.root, node => {\n            const str = this.getNodeContent(node);\n            const len = str.length;\n            if (tempChunkLen <= min || tempChunkLen + len < max) {\n                tempChunk += str;\n                tempChunkLen += len;\n                return true;\n            }\n            // flush anyways\n            const text = tempChunk.replace(/\\r\\n|\\r|\\n/g, eol);\n            chunks.push(new StringBuffer(text, createLineStartsFast(text)));\n            tempChunk = str;\n            tempChunkLen = len;\n            return true;\n        });\n        if (tempChunkLen > 0) {\n            const text = tempChunk.replace(/\\r\\n|\\r|\\n/g, eol);\n            chunks.push(new StringBuffer(text, createLineStartsFast(text)));\n        }\n        this.create(chunks, eol, true);\n    }\n    // #region Buffer API\n    getEOL() {\n        return this._EOL;\n    }\n    setEOL(newEOL) {\n        this._EOL = newEOL;\n        this._EOLLength = this._EOL.length;\n        this.normalizeEOL(newEOL);\n    }\n    createSnapshot(BOM) {\n        return new PieceTreeSnapshot(this, BOM);\n    }\n    getOffsetAt(lineNumber, column) {\n        let leftLen = 0; // inorder\n        let x = this.root;\n        while (x !== SENTINEL) {\n            if (x.left !== SENTINEL && x.lf_left + 1 >= lineNumber) {\n                x = x.left;\n            }\n            else if (x.lf_left + x.piece.lineFeedCnt + 1 >= lineNumber) {\n                leftLen += x.size_left;\n                // lineNumber >= 2\n                const accumualtedValInCurrentIndex = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                return leftLen += accumualtedValInCurrentIndex + column - 1;\n            }\n            else {\n                lineNumber -= x.lf_left + x.piece.lineFeedCnt;\n                leftLen += x.size_left + x.piece.length;\n                x = x.right;\n            }\n        }\n        return leftLen;\n    }\n    getPositionAt(offset) {\n        offset = Math.floor(offset);\n        offset = Math.max(0, offset);\n        let x = this.root;\n        let lfCnt = 0;\n        const originalOffset = offset;\n        while (x !== SENTINEL) {\n            if (x.size_left !== 0 && x.size_left >= offset) {\n                x = x.left;\n            }\n            else if (x.size_left + x.piece.length >= offset) {\n                const out = this.getIndexOf(x, offset - x.size_left);\n                lfCnt += x.lf_left + out.index;\n                if (out.index === 0) {\n                    const lineStartOffset = this.getOffsetAt(lfCnt + 1, 1);\n                    const column = originalOffset - lineStartOffset;\n                    return new Position(lfCnt + 1, column + 1);\n                }\n                return new Position(lfCnt + 1, out.remainder + 1);\n            }\n            else {\n                offset -= x.size_left + x.piece.length;\n                lfCnt += x.lf_left + x.piece.lineFeedCnt;\n                if (x.right === SENTINEL) {\n                    // last node\n                    const lineStartOffset = this.getOffsetAt(lfCnt + 1, 1);\n                    const column = originalOffset - offset - lineStartOffset;\n                    return new Position(lfCnt + 1, column + 1);\n                }\n                else {\n                    x = x.right;\n                }\n            }\n        }\n        return new Position(1, 1);\n    }\n    getValueInRange(range, eol) {\n        if (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n            return '';\n        }\n        const startPosition = this.nodeAt2(range.startLineNumber, range.startColumn);\n        const endPosition = this.nodeAt2(range.endLineNumber, range.endColumn);\n        const value = this.getValueInRange2(startPosition, endPosition);\n        if (eol) {\n            if (eol !== this._EOL || !this._EOLNormalized) {\n                return value.replace(/\\r\\n|\\r|\\n/g, eol);\n            }\n            if (eol === this.getEOL() && this._EOLNormalized) {\n                if (eol === '\\r\\n') {\n                }\n                return value;\n            }\n            return value.replace(/\\r\\n|\\r|\\n/g, eol);\n        }\n        return value;\n    }\n    getValueInRange2(startPosition, endPosition) {\n        if (startPosition.node === endPosition.node) {\n            const node = startPosition.node;\n            const buffer = this._buffers[node.piece.bufferIndex].buffer;\n            const startOffset = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start);\n            return buffer.substring(startOffset + startPosition.remainder, startOffset + endPosition.remainder);\n        }\n        let x = startPosition.node;\n        const buffer = this._buffers[x.piece.bufferIndex].buffer;\n        const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n        let ret = buffer.substring(startOffset + startPosition.remainder, startOffset + x.piece.length);\n        x = x.next();\n        while (x !== SENTINEL) {\n            const buffer = this._buffers[x.piece.bufferIndex].buffer;\n            const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n            if (x === endPosition.node) {\n                ret += buffer.substring(startOffset, startOffset + endPosition.remainder);\n                break;\n            }\n            else {\n                ret += buffer.substr(startOffset, x.piece.length);\n            }\n            x = x.next();\n        }\n        return ret;\n    }\n    getLinesContent() {\n        const lines = [];\n        let linesLength = 0;\n        let currentLine = '';\n        let danglingCR = false;\n        this.iterate(this.root, node => {\n            if (node === SENTINEL) {\n                return true;\n            }\n            const piece = node.piece;\n            let pieceLength = piece.length;\n            if (pieceLength === 0) {\n                return true;\n            }\n            const buffer = this._buffers[piece.bufferIndex].buffer;\n            const lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n            const pieceStartLine = piece.start.line;\n            const pieceEndLine = piece.end.line;\n            let pieceStartOffset = lineStarts[pieceStartLine] + piece.start.column;\n            if (danglingCR) {\n                if (buffer.charCodeAt(pieceStartOffset) === 10 /* CharCode.LineFeed */) {\n                    // pretend the \\n was in the previous piece..\n                    pieceStartOffset++;\n                    pieceLength--;\n                }\n                lines[linesLength++] = currentLine;\n                currentLine = '';\n                danglingCR = false;\n                if (pieceLength === 0) {\n                    return true;\n                }\n            }\n            if (pieceStartLine === pieceEndLine) {\n                // this piece has no new lines\n                if (!this._EOLNormalized && buffer.charCodeAt(pieceStartOffset + pieceLength - 1) === 13 /* CharCode.CarriageReturn */) {\n                    danglingCR = true;\n                    currentLine += buffer.substr(pieceStartOffset, pieceLength - 1);\n                }\n                else {\n                    currentLine += buffer.substr(pieceStartOffset, pieceLength);\n                }\n                return true;\n            }\n            // add the text before the first line start in this piece\n            currentLine += (this._EOLNormalized\n                ? buffer.substring(pieceStartOffset, Math.max(pieceStartOffset, lineStarts[pieceStartLine + 1] - this._EOLLength))\n                : buffer.substring(pieceStartOffset, lineStarts[pieceStartLine + 1]).replace(/(\\r\\n|\\r|\\n)$/, ''));\n            lines[linesLength++] = currentLine;\n            for (let line = pieceStartLine + 1; line < pieceEndLine; line++) {\n                currentLine = (this._EOLNormalized\n                    ? buffer.substring(lineStarts[line], lineStarts[line + 1] - this._EOLLength)\n                    : buffer.substring(lineStarts[line], lineStarts[line + 1]).replace(/(\\r\\n|\\r|\\n)$/, ''));\n                lines[linesLength++] = currentLine;\n            }\n            if (!this._EOLNormalized && buffer.charCodeAt(lineStarts[pieceEndLine] + piece.end.column - 1) === 13 /* CharCode.CarriageReturn */) {\n                danglingCR = true;\n                if (piece.end.column === 0) {\n                    // The last line ended with a \\r, let's undo the push, it will be pushed by next iteration\n                    linesLength--;\n                }\n                else {\n                    currentLine = buffer.substr(lineStarts[pieceEndLine], piece.end.column - 1);\n                }\n            }\n            else {\n                currentLine = buffer.substr(lineStarts[pieceEndLine], piece.end.column);\n            }\n            return true;\n        });\n        if (danglingCR) {\n            lines[linesLength++] = currentLine;\n            currentLine = '';\n        }\n        lines[linesLength++] = currentLine;\n        return lines;\n    }\n    getLength() {\n        return this._length;\n    }\n    getLineCount() {\n        return this._lineCnt;\n    }\n    getLineContent(lineNumber) {\n        if (this._lastVisitedLine.lineNumber === lineNumber) {\n            return this._lastVisitedLine.value;\n        }\n        this._lastVisitedLine.lineNumber = lineNumber;\n        if (lineNumber === this._lineCnt) {\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber);\n        }\n        else if (this._EOLNormalized) {\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber, this._EOLLength);\n        }\n        else {\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber).replace(/(\\r\\n|\\r|\\n)$/, '');\n        }\n        return this._lastVisitedLine.value;\n    }\n    _getCharCode(nodePos) {\n        if (nodePos.remainder === nodePos.node.piece.length) {\n            // the char we want to fetch is at the head of next node.\n            const matchingNode = nodePos.node.next();\n            if (!matchingNode) {\n                return 0;\n            }\n            const buffer = this._buffers[matchingNode.piece.bufferIndex];\n            const startOffset = this.offsetInBuffer(matchingNode.piece.bufferIndex, matchingNode.piece.start);\n            return buffer.buffer.charCodeAt(startOffset);\n        }\n        else {\n            const buffer = this._buffers[nodePos.node.piece.bufferIndex];\n            const startOffset = this.offsetInBuffer(nodePos.node.piece.bufferIndex, nodePos.node.piece.start);\n            const targetOffset = startOffset + nodePos.remainder;\n            return buffer.buffer.charCodeAt(targetOffset);\n        }\n    }\n    getLineCharCode(lineNumber, index) {\n        const nodePos = this.nodeAt2(lineNumber, index + 1);\n        return this._getCharCode(nodePos);\n    }\n    getLineLength(lineNumber) {\n        if (lineNumber === this.getLineCount()) {\n            const startOffset = this.getOffsetAt(lineNumber, 1);\n            return this.getLength() - startOffset;\n        }\n        return this.getOffsetAt(lineNumber + 1, 1) - this.getOffsetAt(lineNumber, 1) - this._EOLLength;\n    }\n    findMatchesInNode(node, searcher, startLineNumber, startColumn, startCursor, endCursor, searchData, captureMatches, limitResultCount, resultLen, result) {\n        const buffer = this._buffers[node.piece.bufferIndex];\n        const startOffsetInBuffer = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start);\n        const start = this.offsetInBuffer(node.piece.bufferIndex, startCursor);\n        const end = this.offsetInBuffer(node.piece.bufferIndex, endCursor);\n        let m;\n        // Reset regex to search from the beginning\n        const ret = { line: 0, column: 0 };\n        let searchText;\n        let offsetInBuffer;\n        if (searcher._wordSeparators) {\n            searchText = buffer.buffer.substring(start, end);\n            offsetInBuffer = (offset) => offset + start;\n            searcher.reset(0);\n        }\n        else {\n            searchText = buffer.buffer;\n            offsetInBuffer = (offset) => offset;\n            searcher.reset(start);\n        }\n        do {\n            m = searcher.next(searchText);\n            if (m) {\n                if (offsetInBuffer(m.index) >= end) {\n                    return resultLen;\n                }\n                this.positionInBuffer(node, offsetInBuffer(m.index) - startOffsetInBuffer, ret);\n                const lineFeedCnt = this.getLineFeedCnt(node.piece.bufferIndex, startCursor, ret);\n                const retStartColumn = ret.line === startCursor.line ? ret.column - startCursor.column + startColumn : ret.column + 1;\n                const retEndColumn = retStartColumn + m[0].length;\n                result[resultLen++] = createFindMatch(new Range(startLineNumber + lineFeedCnt, retStartColumn, startLineNumber + lineFeedCnt, retEndColumn), m, captureMatches);\n                if (offsetInBuffer(m.index) + m[0].length >= end) {\n                    return resultLen;\n                }\n                if (resultLen >= limitResultCount) {\n                    return resultLen;\n                }\n            }\n        } while (m);\n        return resultLen;\n    }\n    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {\n        const result = [];\n        let resultLen = 0;\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        let startPosition = this.nodeAt2(searchRange.startLineNumber, searchRange.startColumn);\n        if (startPosition === null) {\n            return [];\n        }\n        const endPosition = this.nodeAt2(searchRange.endLineNumber, searchRange.endColumn);\n        if (endPosition === null) {\n            return [];\n        }\n        let start = this.positionInBuffer(startPosition.node, startPosition.remainder);\n        const end = this.positionInBuffer(endPosition.node, endPosition.remainder);\n        if (startPosition.node === endPosition.node) {\n            this.findMatchesInNode(startPosition.node, searcher, searchRange.startLineNumber, searchRange.startColumn, start, end, searchData, captureMatches, limitResultCount, resultLen, result);\n            return result;\n        }\n        let startLineNumber = searchRange.startLineNumber;\n        let currentNode = startPosition.node;\n        while (currentNode !== endPosition.node) {\n            const lineBreakCnt = this.getLineFeedCnt(currentNode.piece.bufferIndex, start, currentNode.piece.end);\n            if (lineBreakCnt >= 1) {\n                // last line break position\n                const lineStarts = this._buffers[currentNode.piece.bufferIndex].lineStarts;\n                const startOffsetInBuffer = this.offsetInBuffer(currentNode.piece.bufferIndex, currentNode.piece.start);\n                const nextLineStartOffset = lineStarts[start.line + lineBreakCnt];\n                const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn : 1;\n                resultLen = this.findMatchesInNode(currentNode, searcher, startLineNumber, startColumn, start, this.positionInBuffer(currentNode, nextLineStartOffset - startOffsetInBuffer), searchData, captureMatches, limitResultCount, resultLen, result);\n                if (resultLen >= limitResultCount) {\n                    return result;\n                }\n                startLineNumber += lineBreakCnt;\n            }\n            const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn - 1 : 0;\n            // search for the remaining content\n            if (startLineNumber === searchRange.endLineNumber) {\n                const text = this.getLineContent(startLineNumber).substring(startColumn, searchRange.endColumn - 1);\n                resultLen = this._findMatchesInLine(searchData, searcher, text, searchRange.endLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n                return result;\n            }\n            resultLen = this._findMatchesInLine(searchData, searcher, this.getLineContent(startLineNumber).substr(startColumn), startLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n            if (resultLen >= limitResultCount) {\n                return result;\n            }\n            startLineNumber++;\n            startPosition = this.nodeAt2(startLineNumber, 1);\n            currentNode = startPosition.node;\n            start = this.positionInBuffer(startPosition.node, startPosition.remainder);\n        }\n        if (startLineNumber === searchRange.endLineNumber) {\n            const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn - 1 : 0;\n            const text = this.getLineContent(startLineNumber).substring(startColumn, searchRange.endColumn - 1);\n            resultLen = this._findMatchesInLine(searchData, searcher, text, searchRange.endLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n            return result;\n        }\n        const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn : 1;\n        resultLen = this.findMatchesInNode(endPosition.node, searcher, startLineNumber, startColumn, start, end, searchData, captureMatches, limitResultCount, resultLen, result);\n        return result;\n    }\n    _findMatchesInLine(searchData, searcher, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {\n        const wordSeparators = searchData.wordSeparators;\n        if (!captureMatches && searchData.simpleSearch) {\n            const searchString = searchData.simpleSearch;\n            const searchStringLen = searchString.length;\n            const textLength = text.length;\n            let lastMatchIndex = -searchStringLen;\n            while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {\n                if (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {\n                    result[resultLen++] = new FindMatch(new Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);\n                    if (resultLen >= limitResultCount) {\n                        return resultLen;\n                    }\n                }\n            }\n            return resultLen;\n        }\n        let m;\n        // Reset regex to search from the beginning\n        searcher.reset(0);\n        do {\n            m = searcher.next(text);\n            if (m) {\n                result[resultLen++] = createFindMatch(new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);\n                if (resultLen >= limitResultCount) {\n                    return resultLen;\n                }\n            }\n        } while (m);\n        return resultLen;\n    }\n    // #endregion\n    // #region Piece Table\n    insert(offset, value, eolNormalized = false) {\n        this._EOLNormalized = this._EOLNormalized && eolNormalized;\n        this._lastVisitedLine.lineNumber = 0;\n        this._lastVisitedLine.value = '';\n        if (this.root !== SENTINEL) {\n            const { node, remainder, nodeStartOffset } = this.nodeAt(offset);\n            const piece = node.piece;\n            const bufferIndex = piece.bufferIndex;\n            const insertPosInBuffer = this.positionInBuffer(node, remainder);\n            if (node.piece.bufferIndex === 0 &&\n                piece.end.line === this._lastChangeBufferPos.line &&\n                piece.end.column === this._lastChangeBufferPos.column &&\n                (nodeStartOffset + piece.length === offset) &&\n                value.length < AverageBufferSize) {\n                // changed buffer\n                this.appendToNode(node, value);\n                this.computeBufferMetadata();\n                return;\n            }\n            if (nodeStartOffset === offset) {\n                this.insertContentToNodeLeft(value, node);\n                this._searchCache.validate(offset);\n            }\n            else if (nodeStartOffset + node.piece.length > offset) {\n                // we are inserting into the middle of a node.\n                const nodesToDel = [];\n                let newRightPiece = new Piece(piece.bufferIndex, insertPosInBuffer, piece.end, this.getLineFeedCnt(piece.bufferIndex, insertPosInBuffer, piece.end), this.offsetInBuffer(bufferIndex, piece.end) - this.offsetInBuffer(bufferIndex, insertPosInBuffer));\n                if (this.shouldCheckCRLF() && this.endWithCR(value)) {\n                    const headOfRight = this.nodeCharCodeAt(node, remainder);\n                    if (headOfRight === 10 /** \\n */) {\n                        const newStart = { line: newRightPiece.start.line + 1, column: 0 };\n                        newRightPiece = new Piece(newRightPiece.bufferIndex, newStart, newRightPiece.end, this.getLineFeedCnt(newRightPiece.bufferIndex, newStart, newRightPiece.end), newRightPiece.length - 1);\n                        value += '\\n';\n                    }\n                }\n                // reuse node for content before insertion point.\n                if (this.shouldCheckCRLF() && this.startWithLF(value)) {\n                    const tailOfLeft = this.nodeCharCodeAt(node, remainder - 1);\n                    if (tailOfLeft === 13 /** \\r */) {\n                        const previousPos = this.positionInBuffer(node, remainder - 1);\n                        this.deleteNodeTail(node, previousPos);\n                        value = '\\r' + value;\n                        if (node.piece.length === 0) {\n                            nodesToDel.push(node);\n                        }\n                    }\n                    else {\n                        this.deleteNodeTail(node, insertPosInBuffer);\n                    }\n                }\n                else {\n                    this.deleteNodeTail(node, insertPosInBuffer);\n                }\n                const newPieces = this.createNewPieces(value);\n                if (newRightPiece.length > 0) {\n                    this.rbInsertRight(node, newRightPiece);\n                }\n                let tmpNode = node;\n                for (let k = 0; k < newPieces.length; k++) {\n                    tmpNode = this.rbInsertRight(tmpNode, newPieces[k]);\n                }\n                this.deleteNodes(nodesToDel);\n            }\n            else {\n                this.insertContentToNodeRight(value, node);\n            }\n        }\n        else {\n            // insert new node\n            const pieces = this.createNewPieces(value);\n            let node = this.rbInsertLeft(null, pieces[0]);\n            for (let k = 1; k < pieces.length; k++) {\n                node = this.rbInsertRight(node, pieces[k]);\n            }\n        }\n        // todo, this is too brutal. Total line feed count should be updated the same way as lf_left.\n        this.computeBufferMetadata();\n    }\n    delete(offset, cnt) {\n        this._lastVisitedLine.lineNumber = 0;\n        this._lastVisitedLine.value = '';\n        if (cnt <= 0 || this.root === SENTINEL) {\n            return;\n        }\n        const startPosition = this.nodeAt(offset);\n        const endPosition = this.nodeAt(offset + cnt);\n        const startNode = startPosition.node;\n        const endNode = endPosition.node;\n        if (startNode === endNode) {\n            const startSplitPosInBuffer = this.positionInBuffer(startNode, startPosition.remainder);\n            const endSplitPosInBuffer = this.positionInBuffer(startNode, endPosition.remainder);\n            if (startPosition.nodeStartOffset === offset) {\n                if (cnt === startNode.piece.length) { // delete node\n                    const next = startNode.next();\n                    rbDelete(this, startNode);\n                    this.validateCRLFWithPrevNode(next);\n                    this.computeBufferMetadata();\n                    return;\n                }\n                this.deleteNodeHead(startNode, endSplitPosInBuffer);\n                this._searchCache.validate(offset);\n                this.validateCRLFWithPrevNode(startNode);\n                this.computeBufferMetadata();\n                return;\n            }\n            if (startPosition.nodeStartOffset + startNode.piece.length === offset + cnt) {\n                this.deleteNodeTail(startNode, startSplitPosInBuffer);\n                this.validateCRLFWithNextNode(startNode);\n                this.computeBufferMetadata();\n                return;\n            }\n            // delete content in the middle, this node will be splitted to nodes\n            this.shrinkNode(startNode, startSplitPosInBuffer, endSplitPosInBuffer);\n            this.computeBufferMetadata();\n            return;\n        }\n        const nodesToDel = [];\n        const startSplitPosInBuffer = this.positionInBuffer(startNode, startPosition.remainder);\n        this.deleteNodeTail(startNode, startSplitPosInBuffer);\n        this._searchCache.validate(offset);\n        if (startNode.piece.length === 0) {\n            nodesToDel.push(startNode);\n        }\n        // update last touched node\n        const endSplitPosInBuffer = this.positionInBuffer(endNode, endPosition.remainder);\n        this.deleteNodeHead(endNode, endSplitPosInBuffer);\n        if (endNode.piece.length === 0) {\n            nodesToDel.push(endNode);\n        }\n        // delete nodes in between\n        const secondNode = startNode.next();\n        for (let node = secondNode; node !== SENTINEL && node !== endNode; node = node.next()) {\n            nodesToDel.push(node);\n        }\n        const prev = startNode.piece.length === 0 ? startNode.prev() : startNode;\n        this.deleteNodes(nodesToDel);\n        this.validateCRLFWithNextNode(prev);\n        this.computeBufferMetadata();\n    }\n    insertContentToNodeLeft(value, node) {\n        // we are inserting content to the beginning of node\n        const nodesToDel = [];\n        if (this.shouldCheckCRLF() && this.endWithCR(value) && this.startWithLF(node)) {\n            // move `\\n` to new node.\n            const piece = node.piece;\n            const newStart = { line: piece.start.line + 1, column: 0 };\n            const nPiece = new Piece(piece.bufferIndex, newStart, piece.end, this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end), piece.length - 1);\n            node.piece = nPiece;\n            value += '\\n';\n            updateTreeMetadata(this, node, -1, -1);\n            if (node.piece.length === 0) {\n                nodesToDel.push(node);\n            }\n        }\n        const newPieces = this.createNewPieces(value);\n        let newNode = this.rbInsertLeft(node, newPieces[newPieces.length - 1]);\n        for (let k = newPieces.length - 2; k >= 0; k--) {\n            newNode = this.rbInsertLeft(newNode, newPieces[k]);\n        }\n        this.validateCRLFWithPrevNode(newNode);\n        this.deleteNodes(nodesToDel);\n    }\n    insertContentToNodeRight(value, node) {\n        // we are inserting to the right of this node.\n        if (this.adjustCarriageReturnFromNext(value, node)) {\n            // move \\n to the new node.\n            value += '\\n';\n        }\n        const newPieces = this.createNewPieces(value);\n        const newNode = this.rbInsertRight(node, newPieces[0]);\n        let tmpNode = newNode;\n        for (let k = 1; k < newPieces.length; k++) {\n            tmpNode = this.rbInsertRight(tmpNode, newPieces[k]);\n        }\n        this.validateCRLFWithPrevNode(newNode);\n    }\n    positionInBuffer(node, remainder, ret) {\n        const piece = node.piece;\n        const bufferIndex = node.piece.bufferIndex;\n        const lineStarts = this._buffers[bufferIndex].lineStarts;\n        const startOffset = lineStarts[piece.start.line] + piece.start.column;\n        const offset = startOffset + remainder;\n        // binary search offset between startOffset and endOffset\n        let low = piece.start.line;\n        let high = piece.end.line;\n        let mid = 0;\n        let midStop = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            midStart = lineStarts[mid];\n            if (mid === high) {\n                break;\n            }\n            midStop = lineStarts[mid + 1];\n            if (offset < midStart) {\n                high = mid - 1;\n            }\n            else if (offset >= midStop) {\n                low = mid + 1;\n            }\n            else {\n                break;\n            }\n        }\n        if (ret) {\n            ret.line = mid;\n            ret.column = offset - midStart;\n            return null;\n        }\n        return {\n            line: mid,\n            column: offset - midStart\n        };\n    }\n    getLineFeedCnt(bufferIndex, start, end) {\n        // we don't need to worry about start: abc\\r|\\n, or abc|\\r, or abc|\\n, or abc|\\r\\n doesn't change the fact that, there is one line break after start.\n        // now let's take care of end: abc\\r|\\n, if end is in between \\r and \\n, we need to add line feed count by 1\n        if (end.column === 0) {\n            return end.line - start.line;\n        }\n        const lineStarts = this._buffers[bufferIndex].lineStarts;\n        if (end.line === lineStarts.length - 1) { // it means, there is no \\n after end, otherwise, there will be one more lineStart.\n            return end.line - start.line;\n        }\n        const nextLineStartOffset = lineStarts[end.line + 1];\n        const endOffset = lineStarts[end.line] + end.column;\n        if (nextLineStartOffset > endOffset + 1) { // there are more than 1 character after end, which means it can't be \\n\n            return end.line - start.line;\n        }\n        // endOffset + 1 === nextLineStartOffset\n        // character at endOffset is \\n, so we check the character before first\n        // if character at endOffset is \\r, end.column is 0 and we can't get here.\n        const previousCharOffset = endOffset - 1; // end.column > 0 so it's okay.\n        const buffer = this._buffers[bufferIndex].buffer;\n        if (buffer.charCodeAt(previousCharOffset) === 13) {\n            return end.line - start.line + 1;\n        }\n        else {\n            return end.line - start.line;\n        }\n    }\n    offsetInBuffer(bufferIndex, cursor) {\n        const lineStarts = this._buffers[bufferIndex].lineStarts;\n        return lineStarts[cursor.line] + cursor.column;\n    }\n    deleteNodes(nodes) {\n        for (let i = 0; i < nodes.length; i++) {\n            rbDelete(this, nodes[i]);\n        }\n    }\n    createNewPieces(text) {\n        if (text.length > AverageBufferSize) {\n            // the content is large, operations like substring, charCode becomes slow\n            // so here we split it into smaller chunks, just like what we did for CR/LF normalization\n            const newPieces = [];\n            while (text.length > AverageBufferSize) {\n                const lastChar = text.charCodeAt(AverageBufferSize - 1);\n                let splitText;\n                if (lastChar === 13 /* CharCode.CarriageReturn */ || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {\n                    // last character is \\r or a high surrogate => keep it back\n                    splitText = text.substring(0, AverageBufferSize - 1);\n                    text = text.substring(AverageBufferSize - 1);\n                }\n                else {\n                    splitText = text.substring(0, AverageBufferSize);\n                    text = text.substring(AverageBufferSize);\n                }\n                const lineStarts = createLineStartsFast(splitText);\n                newPieces.push(new Piece(this._buffers.length, /* buffer index */ { line: 0, column: 0 }, { line: lineStarts.length - 1, column: splitText.length - lineStarts[lineStarts.length - 1] }, lineStarts.length - 1, splitText.length));\n                this._buffers.push(new StringBuffer(splitText, lineStarts));\n            }\n            const lineStarts = createLineStartsFast(text);\n            newPieces.push(new Piece(this._buffers.length, /* buffer index */ { line: 0, column: 0 }, { line: lineStarts.length - 1, column: text.length - lineStarts[lineStarts.length - 1] }, lineStarts.length - 1, text.length));\n            this._buffers.push(new StringBuffer(text, lineStarts));\n            return newPieces;\n        }\n        let startOffset = this._buffers[0].buffer.length;\n        const lineStarts = createLineStartsFast(text, false);\n        let start = this._lastChangeBufferPos;\n        if (this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 1] === startOffset\n            && startOffset !== 0\n            && this.startWithLF(text)\n            && this.endWithCR(this._buffers[0].buffer) // todo, we can check this._lastChangeBufferPos's column as it's the last one\n        ) {\n            this._lastChangeBufferPos = { line: this._lastChangeBufferPos.line, column: this._lastChangeBufferPos.column + 1 };\n            start = this._lastChangeBufferPos;\n            for (let i = 0; i < lineStarts.length; i++) {\n                lineStarts[i] += startOffset + 1;\n            }\n            this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\n            this._buffers[0].buffer += '_' + text;\n            startOffset += 1;\n        }\n        else {\n            if (startOffset !== 0) {\n                for (let i = 0; i < lineStarts.length; i++) {\n                    lineStarts[i] += startOffset;\n                }\n            }\n            this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\n            this._buffers[0].buffer += text;\n        }\n        const endOffset = this._buffers[0].buffer.length;\n        const endIndex = this._buffers[0].lineStarts.length - 1;\n        const endColumn = endOffset - this._buffers[0].lineStarts[endIndex];\n        const endPos = { line: endIndex, column: endColumn };\n        const newPiece = new Piece(0, /** todo@peng */ start, endPos, this.getLineFeedCnt(0, start, endPos), endOffset - startOffset);\n        this._lastChangeBufferPos = endPos;\n        return [newPiece];\n    }\n    getLineRawContent(lineNumber, endOffset = 0) {\n        let x = this.root;\n        let ret = '';\n        const cache = this._searchCache.get2(lineNumber);\n        if (cache) {\n            x = cache.node;\n            const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - cache.nodeStartLineNumber - 1);\n            const buffer = this._buffers[x.piece.bufferIndex].buffer;\n            const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n            if (cache.nodeStartLineNumber + x.piece.lineFeedCnt === lineNumber) {\n                ret = buffer.substring(startOffset + prevAccumulatedValue, startOffset + x.piece.length);\n            }\n            else {\n                const accumulatedValue = this.getAccumulatedValue(x, lineNumber - cache.nodeStartLineNumber);\n                return buffer.substring(startOffset + prevAccumulatedValue, startOffset + accumulatedValue - endOffset);\n            }\n        }\n        else {\n            let nodeStartOffset = 0;\n            const originalLineNumber = lineNumber;\n            while (x !== SENTINEL) {\n                if (x.left !== SENTINEL && x.lf_left >= lineNumber - 1) {\n                    x = x.left;\n                }\n                else if (x.lf_left + x.piece.lineFeedCnt > lineNumber - 1) {\n                    const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                    const accumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 1);\n                    const buffer = this._buffers[x.piece.bufferIndex].buffer;\n                    const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                    nodeStartOffset += x.size_left;\n                    this._searchCache.set({\n                        node: x,\n                        nodeStartOffset,\n                        nodeStartLineNumber: originalLineNumber - (lineNumber - 1 - x.lf_left)\n                    });\n                    return buffer.substring(startOffset + prevAccumulatedValue, startOffset + accumulatedValue - endOffset);\n                }\n                else if (x.lf_left + x.piece.lineFeedCnt === lineNumber - 1) {\n                    const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                    const buffer = this._buffers[x.piece.bufferIndex].buffer;\n                    const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                    ret = buffer.substring(startOffset + prevAccumulatedValue, startOffset + x.piece.length);\n                    break;\n                }\n                else {\n                    lineNumber -= x.lf_left + x.piece.lineFeedCnt;\n                    nodeStartOffset += x.size_left + x.piece.length;\n                    x = x.right;\n                }\n            }\n        }\n        // search in order, to find the node contains end column\n        x = x.next();\n        while (x !== SENTINEL) {\n            const buffer = this._buffers[x.piece.bufferIndex].buffer;\n            if (x.piece.lineFeedCnt > 0) {\n                const accumulatedValue = this.getAccumulatedValue(x, 0);\n                const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                ret += buffer.substring(startOffset, startOffset + accumulatedValue - endOffset);\n                return ret;\n            }\n            else {\n                const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                ret += buffer.substr(startOffset, x.piece.length);\n            }\n            x = x.next();\n        }\n        return ret;\n    }\n    computeBufferMetadata() {\n        let x = this.root;\n        let lfCnt = 1;\n        let len = 0;\n        while (x !== SENTINEL) {\n            lfCnt += x.lf_left + x.piece.lineFeedCnt;\n            len += x.size_left + x.piece.length;\n            x = x.right;\n        }\n        this._lineCnt = lfCnt;\n        this._length = len;\n        this._searchCache.validate(this._length);\n    }\n    // #region node operations\n    getIndexOf(node, accumulatedValue) {\n        const piece = node.piece;\n        const pos = this.positionInBuffer(node, accumulatedValue);\n        const lineCnt = pos.line - piece.start.line;\n        if (this.offsetInBuffer(piece.bufferIndex, piece.end) - this.offsetInBuffer(piece.bufferIndex, piece.start) === accumulatedValue) {\n            // we are checking the end of this node, so a CRLF check is necessary.\n            const realLineCnt = this.getLineFeedCnt(node.piece.bufferIndex, piece.start, pos);\n            if (realLineCnt !== lineCnt) {\n                // aha yes, CRLF\n                return { index: realLineCnt, remainder: 0 };\n            }\n        }\n        return { index: lineCnt, remainder: pos.column };\n    }\n    getAccumulatedValue(node, index) {\n        if (index < 0) {\n            return 0;\n        }\n        const piece = node.piece;\n        const lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n        const expectedLineStartIndex = piece.start.line + index + 1;\n        if (expectedLineStartIndex > piece.end.line) {\n            return lineStarts[piece.end.line] + piece.end.column - lineStarts[piece.start.line] - piece.start.column;\n        }\n        else {\n            return lineStarts[expectedLineStartIndex] - lineStarts[piece.start.line] - piece.start.column;\n        }\n    }\n    deleteNodeTail(node, pos) {\n        const piece = node.piece;\n        const originalLFCnt = piece.lineFeedCnt;\n        const originalEndOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n        const newEnd = pos;\n        const newEndOffset = this.offsetInBuffer(piece.bufferIndex, newEnd);\n        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, piece.start, newEnd);\n        const lf_delta = newLineFeedCnt - originalLFCnt;\n        const size_delta = newEndOffset - originalEndOffset;\n        const newLength = piece.length + size_delta;\n        node.piece = new Piece(piece.bufferIndex, piece.start, newEnd, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, node, size_delta, lf_delta);\n    }\n    deleteNodeHead(node, pos) {\n        const piece = node.piece;\n        const originalLFCnt = piece.lineFeedCnt;\n        const originalStartOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n        const newStart = pos;\n        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end);\n        const newStartOffset = this.offsetInBuffer(piece.bufferIndex, newStart);\n        const lf_delta = newLineFeedCnt - originalLFCnt;\n        const size_delta = originalStartOffset - newStartOffset;\n        const newLength = piece.length + size_delta;\n        node.piece = new Piece(piece.bufferIndex, newStart, piece.end, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, node, size_delta, lf_delta);\n    }\n    shrinkNode(node, start, end) {\n        const piece = node.piece;\n        const originalStartPos = piece.start;\n        const originalEndPos = piece.end;\n        // old piece, originalStartPos, start\n        const oldLength = piece.length;\n        const oldLFCnt = piece.lineFeedCnt;\n        const newEnd = start;\n        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, piece.start, newEnd);\n        const newLength = this.offsetInBuffer(piece.bufferIndex, start) - this.offsetInBuffer(piece.bufferIndex, originalStartPos);\n        node.piece = new Piece(piece.bufferIndex, piece.start, newEnd, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, node, newLength - oldLength, newLineFeedCnt - oldLFCnt);\n        // new right piece, end, originalEndPos\n        const newPiece = new Piece(piece.bufferIndex, end, originalEndPos, this.getLineFeedCnt(piece.bufferIndex, end, originalEndPos), this.offsetInBuffer(piece.bufferIndex, originalEndPos) - this.offsetInBuffer(piece.bufferIndex, end));\n        const newNode = this.rbInsertRight(node, newPiece);\n        this.validateCRLFWithPrevNode(newNode);\n    }\n    appendToNode(node, value) {\n        if (this.adjustCarriageReturnFromNext(value, node)) {\n            value += '\\n';\n        }\n        const hitCRLF = this.shouldCheckCRLF() && this.startWithLF(value) && this.endWithCR(node);\n        const startOffset = this._buffers[0].buffer.length;\n        this._buffers[0].buffer += value;\n        const lineStarts = createLineStartsFast(value, false);\n        for (let i = 0; i < lineStarts.length; i++) {\n            lineStarts[i] += startOffset;\n        }\n        if (hitCRLF) {\n            const prevStartOffset = this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 2];\n            this._buffers[0].lineStarts.pop();\n            // _lastChangeBufferPos is already wrong\n            this._lastChangeBufferPos = { line: this._lastChangeBufferPos.line - 1, column: startOffset - prevStartOffset };\n        }\n        this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\n        const endIndex = this._buffers[0].lineStarts.length - 1;\n        const endColumn = this._buffers[0].buffer.length - this._buffers[0].lineStarts[endIndex];\n        const newEnd = { line: endIndex, column: endColumn };\n        const newLength = node.piece.length + value.length;\n        const oldLineFeedCnt = node.piece.lineFeedCnt;\n        const newLineFeedCnt = this.getLineFeedCnt(0, node.piece.start, newEnd);\n        const lf_delta = newLineFeedCnt - oldLineFeedCnt;\n        node.piece = new Piece(node.piece.bufferIndex, node.piece.start, newEnd, newLineFeedCnt, newLength);\n        this._lastChangeBufferPos = newEnd;\n        updateTreeMetadata(this, node, value.length, lf_delta);\n    }\n    nodeAt(offset) {\n        let x = this.root;\n        const cache = this._searchCache.get(offset);\n        if (cache) {\n            return {\n                node: cache.node,\n                nodeStartOffset: cache.nodeStartOffset,\n                remainder: offset - cache.nodeStartOffset\n            };\n        }\n        let nodeStartOffset = 0;\n        while (x !== SENTINEL) {\n            if (x.size_left > offset) {\n                x = x.left;\n            }\n            else if (x.size_left + x.piece.length >= offset) {\n                nodeStartOffset += x.size_left;\n                const ret = {\n                    node: x,\n                    remainder: offset - x.size_left,\n                    nodeStartOffset\n                };\n                this._searchCache.set(ret);\n                return ret;\n            }\n            else {\n                offset -= x.size_left + x.piece.length;\n                nodeStartOffset += x.size_left + x.piece.length;\n                x = x.right;\n            }\n        }\n        return null;\n    }\n    nodeAt2(lineNumber, column) {\n        let x = this.root;\n        let nodeStartOffset = 0;\n        while (x !== SENTINEL) {\n            if (x.left !== SENTINEL && x.lf_left >= lineNumber - 1) {\n                x = x.left;\n            }\n            else if (x.lf_left + x.piece.lineFeedCnt > lineNumber - 1) {\n                const prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                const accumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 1);\n                nodeStartOffset += x.size_left;\n                return {\n                    node: x,\n                    remainder: Math.min(prevAccumualtedValue + column - 1, accumulatedValue),\n                    nodeStartOffset\n                };\n            }\n            else if (x.lf_left + x.piece.lineFeedCnt === lineNumber - 1) {\n                const prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                if (prevAccumualtedValue + column - 1 <= x.piece.length) {\n                    return {\n                        node: x,\n                        remainder: prevAccumualtedValue + column - 1,\n                        nodeStartOffset\n                    };\n                }\n                else {\n                    column -= x.piece.length - prevAccumualtedValue;\n                    break;\n                }\n            }\n            else {\n                lineNumber -= x.lf_left + x.piece.lineFeedCnt;\n                nodeStartOffset += x.size_left + x.piece.length;\n                x = x.right;\n            }\n        }\n        // search in order, to find the node contains position.column\n        x = x.next();\n        while (x !== SENTINEL) {\n            if (x.piece.lineFeedCnt > 0) {\n                const accumulatedValue = this.getAccumulatedValue(x, 0);\n                const nodeStartOffset = this.offsetOfNode(x);\n                return {\n                    node: x,\n                    remainder: Math.min(column - 1, accumulatedValue),\n                    nodeStartOffset\n                };\n            }\n            else {\n                if (x.piece.length >= column - 1) {\n                    const nodeStartOffset = this.offsetOfNode(x);\n                    return {\n                        node: x,\n                        remainder: column - 1,\n                        nodeStartOffset\n                    };\n                }\n                else {\n                    column -= x.piece.length;\n                }\n            }\n            x = x.next();\n        }\n        return null;\n    }\n    nodeCharCodeAt(node, offset) {\n        if (node.piece.lineFeedCnt < 1) {\n            return -1;\n        }\n        const buffer = this._buffers[node.piece.bufferIndex];\n        const newOffset = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start) + offset;\n        return buffer.buffer.charCodeAt(newOffset);\n    }\n    offsetOfNode(node) {\n        if (!node) {\n            return 0;\n        }\n        let pos = node.size_left;\n        while (node !== this.root) {\n            if (node.parent.right === node) {\n                pos += node.parent.size_left + node.parent.piece.length;\n            }\n            node = node.parent;\n        }\n        return pos;\n    }\n    // #endregion\n    // #region CRLF\n    shouldCheckCRLF() {\n        return !(this._EOLNormalized && this._EOL === '\\n');\n    }\n    startWithLF(val) {\n        if (typeof val === 'string') {\n            return val.charCodeAt(0) === 10;\n        }\n        if (val === SENTINEL || val.piece.lineFeedCnt === 0) {\n            return false;\n        }\n        const piece = val.piece;\n        const lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n        const line = piece.start.line;\n        const startOffset = lineStarts[line] + piece.start.column;\n        if (line === lineStarts.length - 1) {\n            // last line, so there is no line feed at the end of this line\n            return false;\n        }\n        const nextLineOffset = lineStarts[line + 1];\n        if (nextLineOffset > startOffset + 1) {\n            return false;\n        }\n        return this._buffers[piece.bufferIndex].buffer.charCodeAt(startOffset) === 10;\n    }\n    endWithCR(val) {\n        if (typeof val === 'string') {\n            return val.charCodeAt(val.length - 1) === 13;\n        }\n        if (val === SENTINEL || val.piece.lineFeedCnt === 0) {\n            return false;\n        }\n        return this.nodeCharCodeAt(val, val.piece.length - 1) === 13;\n    }\n    validateCRLFWithPrevNode(nextNode) {\n        if (this.shouldCheckCRLF() && this.startWithLF(nextNode)) {\n            const node = nextNode.prev();\n            if (this.endWithCR(node)) {\n                this.fixCRLF(node, nextNode);\n            }\n        }\n    }\n    validateCRLFWithNextNode(node) {\n        if (this.shouldCheckCRLF() && this.endWithCR(node)) {\n            const nextNode = node.next();\n            if (this.startWithLF(nextNode)) {\n                this.fixCRLF(node, nextNode);\n            }\n        }\n    }\n    fixCRLF(prev, next) {\n        const nodesToDel = [];\n        // update node\n        const lineStarts = this._buffers[prev.piece.bufferIndex].lineStarts;\n        let newEnd;\n        if (prev.piece.end.column === 0) {\n            // it means, last line ends with \\r, not \\r\\n\n            newEnd = { line: prev.piece.end.line - 1, column: lineStarts[prev.piece.end.line] - lineStarts[prev.piece.end.line - 1] - 1 };\n        }\n        else {\n            // \\r\\n\n            newEnd = { line: prev.piece.end.line, column: prev.piece.end.column - 1 };\n        }\n        const prevNewLength = prev.piece.length - 1;\n        const prevNewLFCnt = prev.piece.lineFeedCnt - 1;\n        prev.piece = new Piece(prev.piece.bufferIndex, prev.piece.start, newEnd, prevNewLFCnt, prevNewLength);\n        updateTreeMetadata(this, prev, -1, -1);\n        if (prev.piece.length === 0) {\n            nodesToDel.push(prev);\n        }\n        // update nextNode\n        const newStart = { line: next.piece.start.line + 1, column: 0 };\n        const newLength = next.piece.length - 1;\n        const newLineFeedCnt = this.getLineFeedCnt(next.piece.bufferIndex, newStart, next.piece.end);\n        next.piece = new Piece(next.piece.bufferIndex, newStart, next.piece.end, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, next, -1, -1);\n        if (next.piece.length === 0) {\n            nodesToDel.push(next);\n        }\n        // create new piece which contains \\r\\n\n        const pieces = this.createNewPieces('\\r\\n');\n        this.rbInsertRight(prev, pieces[0]);\n        // delete empty nodes\n        for (let i = 0; i < nodesToDel.length; i++) {\n            rbDelete(this, nodesToDel[i]);\n        }\n    }\n    adjustCarriageReturnFromNext(value, node) {\n        if (this.shouldCheckCRLF() && this.endWithCR(value)) {\n            const nextNode = node.next();\n            if (this.startWithLF(nextNode)) {\n                // move `\\n` forward\n                value += '\\n';\n                if (nextNode.piece.length === 1) {\n                    rbDelete(this, nextNode);\n                }\n                else {\n                    const piece = nextNode.piece;\n                    const newStart = { line: piece.start.line + 1, column: 0 };\n                    const newLength = piece.length - 1;\n                    const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end);\n                    nextNode.piece = new Piece(piece.bufferIndex, newStart, piece.end, newLineFeedCnt, newLength);\n                    updateTreeMetadata(this, nextNode, -1, -1);\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    // #endregion\n    // #endregion\n    // #region Tree operations\n    iterate(node, callback) {\n        if (node === SENTINEL) {\n            return callback(SENTINEL);\n        }\n        const leftRet = this.iterate(node.left, callback);\n        if (!leftRet) {\n            return leftRet;\n        }\n        return callback(node) && this.iterate(node.right, callback);\n    }\n    getNodeContent(node) {\n        if (node === SENTINEL) {\n            return '';\n        }\n        const buffer = this._buffers[node.piece.bufferIndex];\n        const piece = node.piece;\n        const startOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n        const endOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n        const currentContent = buffer.buffer.substring(startOffset, endOffset);\n        return currentContent;\n    }\n    getPieceContent(piece) {\n        const buffer = this._buffers[piece.bufferIndex];\n        const startOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n        const endOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n        const currentContent = buffer.buffer.substring(startOffset, endOffset);\n        return currentContent;\n    }\n    /**\n     *      node              node\n     *     /  \\              /  \\\n     *    a   b    <----   a    b\n     *                         /\n     *                        z\n     */\n    rbInsertRight(node, p) {\n        const z = new TreeNode(p, 1 /* NodeColor.Red */);\n        z.left = SENTINEL;\n        z.right = SENTINEL;\n        z.parent = SENTINEL;\n        z.size_left = 0;\n        z.lf_left = 0;\n        const x = this.root;\n        if (x === SENTINEL) {\n            this.root = z;\n            z.color = 0 /* NodeColor.Black */;\n        }\n        else if (node.right === SENTINEL) {\n            node.right = z;\n            z.parent = node;\n        }\n        else {\n            const nextNode = leftest(node.right);\n            nextNode.left = z;\n            z.parent = nextNode;\n        }\n        fixInsert(this, z);\n        return z;\n    }\n    /**\n     *      node              node\n     *     /  \\              /  \\\n     *    a   b     ---->   a    b\n     *                       \\\n     *                        z\n     */\n    rbInsertLeft(node, p) {\n        const z = new TreeNode(p, 1 /* NodeColor.Red */);\n        z.left = SENTINEL;\n        z.right = SENTINEL;\n        z.parent = SENTINEL;\n        z.size_left = 0;\n        z.lf_left = 0;\n        if (this.root === SENTINEL) {\n            this.root = z;\n            z.color = 0 /* NodeColor.Black */;\n        }\n        else if (node.left === SENTINEL) {\n            node.left = z;\n            z.parent = node;\n        }\n        else {\n            const prevNode = righttest(node.left); // a\n            prevNode.right = z;\n            z.parent = prevNode;\n        }\n        fixInsert(this, z);\n        return z;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { Range } from '../../core/range.js';\nimport { ApplyEditsResult } from '../../model.js';\nimport { PieceTreeBase } from './pieceTreeBase.js';\nimport { countEOL } from '../../core/eolCounter.js';\nimport { TextChange } from '../../core/textChange.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nexport class PieceTreeTextBuffer extends Disposable {\n    constructor(chunks, BOM, eol, containsRTL, containsUnusualLineTerminators, isBasicASCII, eolNormalized) {\n        super();\n        this._onDidChangeContent = this._register(new Emitter());\n        this._BOM = BOM;\n        this._mightContainNonBasicASCII = !isBasicASCII;\n        this._mightContainRTL = containsRTL;\n        this._mightContainUnusualLineTerminators = containsUnusualLineTerminators;\n        this._pieceTree = new PieceTreeBase(chunks, eol, eolNormalized);\n    }\n    mightContainRTL() {\n        return this._mightContainRTL;\n    }\n    mightContainUnusualLineTerminators() {\n        return this._mightContainUnusualLineTerminators;\n    }\n    resetMightContainUnusualLineTerminators() {\n        this._mightContainUnusualLineTerminators = false;\n    }\n    mightContainNonBasicASCII() {\n        return this._mightContainNonBasicASCII;\n    }\n    getBOM() {\n        return this._BOM;\n    }\n    getEOL() {\n        return this._pieceTree.getEOL();\n    }\n    createSnapshot(preserveBOM) {\n        return this._pieceTree.createSnapshot(preserveBOM ? this._BOM : '');\n    }\n    getOffsetAt(lineNumber, column) {\n        return this._pieceTree.getOffsetAt(lineNumber, column);\n    }\n    getPositionAt(offset) {\n        return this._pieceTree.getPositionAt(offset);\n    }\n    getRangeAt(start, length) {\n        const end = start + length;\n        const startPosition = this.getPositionAt(start);\n        const endPosition = this.getPositionAt(end);\n        return new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n    }\n    getValueInRange(range, eol = 0 /* EndOfLinePreference.TextDefined */) {\n        if (range.isEmpty()) {\n            return '';\n        }\n        const lineEnding = this._getEndOfLine(eol);\n        return this._pieceTree.getValueInRange(range, lineEnding);\n    }\n    getValueLengthInRange(range, eol = 0 /* EndOfLinePreference.TextDefined */) {\n        if (range.isEmpty()) {\n            return 0;\n        }\n        if (range.startLineNumber === range.endLineNumber) {\n            return (range.endColumn - range.startColumn);\n        }\n        const startOffset = this.getOffsetAt(range.startLineNumber, range.startColumn);\n        const endOffset = this.getOffsetAt(range.endLineNumber, range.endColumn);\n        // offsets use the text EOL, so we need to compensate for length differences\n        // if the requested EOL doesn't match the text EOL\n        let eolOffsetCompensation = 0;\n        const desiredEOL = this._getEndOfLine(eol);\n        const actualEOL = this.getEOL();\n        if (desiredEOL.length !== actualEOL.length) {\n            const delta = desiredEOL.length - actualEOL.length;\n            const eolCount = range.endLineNumber - range.startLineNumber;\n            eolOffsetCompensation = delta * eolCount;\n        }\n        return endOffset - startOffset + eolOffsetCompensation;\n    }\n    getCharacterCountInRange(range, eol = 0 /* EndOfLinePreference.TextDefined */) {\n        if (this._mightContainNonBasicASCII) {\n            // we must count by iterating\n            let result = 0;\n            const fromLineNumber = range.startLineNumber;\n            const toLineNumber = range.endLineNumber;\n            for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n                const lineContent = this.getLineContent(lineNumber);\n                const fromOffset = (lineNumber === fromLineNumber ? range.startColumn - 1 : 0);\n                const toOffset = (lineNumber === toLineNumber ? range.endColumn - 1 : lineContent.length);\n                for (let offset = fromOffset; offset < toOffset; offset++) {\n                    if (strings.isHighSurrogate(lineContent.charCodeAt(offset))) {\n                        result = result + 1;\n                        offset = offset + 1;\n                    }\n                    else {\n                        result = result + 1;\n                    }\n                }\n            }\n            result += this._getEndOfLine(eol).length * (toLineNumber - fromLineNumber);\n            return result;\n        }\n        return this.getValueLengthInRange(range, eol);\n    }\n    getLength() {\n        return this._pieceTree.getLength();\n    }\n    getLineCount() {\n        return this._pieceTree.getLineCount();\n    }\n    getLinesContent() {\n        return this._pieceTree.getLinesContent();\n    }\n    getLineContent(lineNumber) {\n        return this._pieceTree.getLineContent(lineNumber);\n    }\n    getLineCharCode(lineNumber, index) {\n        return this._pieceTree.getLineCharCode(lineNumber, index);\n    }\n    getLineLength(lineNumber) {\n        return this._pieceTree.getLineLength(lineNumber);\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 1;\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 2;\n    }\n    _getEndOfLine(eol) {\n        switch (eol) {\n            case 1 /* EndOfLinePreference.LF */:\n                return '\\n';\n            case 2 /* EndOfLinePreference.CRLF */:\n                return '\\r\\n';\n            case 0 /* EndOfLinePreference.TextDefined */:\n                return this.getEOL();\n            default:\n                throw new Error('Unknown EOL preference');\n        }\n    }\n    setEOL(newEOL) {\n        this._pieceTree.setEOL(newEOL);\n    }\n    applyEdits(rawOperations, recordTrimAutoWhitespace, computeUndoEdits) {\n        let mightContainRTL = this._mightContainRTL;\n        let mightContainUnusualLineTerminators = this._mightContainUnusualLineTerminators;\n        let mightContainNonBasicASCII = this._mightContainNonBasicASCII;\n        let canReduceOperations = true;\n        let operations = [];\n        for (let i = 0; i < rawOperations.length; i++) {\n            const op = rawOperations[i];\n            if (canReduceOperations && op._isTracked) {\n                canReduceOperations = false;\n            }\n            const validatedRange = op.range;\n            if (op.text) {\n                let textMightContainNonBasicASCII = true;\n                if (!mightContainNonBasicASCII) {\n                    textMightContainNonBasicASCII = !strings.isBasicASCII(op.text);\n                    mightContainNonBasicASCII = textMightContainNonBasicASCII;\n                }\n                if (!mightContainRTL && textMightContainNonBasicASCII) {\n                    // check if the new inserted text contains RTL\n                    mightContainRTL = strings.containsRTL(op.text);\n                }\n                if (!mightContainUnusualLineTerminators && textMightContainNonBasicASCII) {\n                    // check if the new inserted text contains unusual line terminators\n                    mightContainUnusualLineTerminators = strings.containsUnusualLineTerminators(op.text);\n                }\n            }\n            let validText = '';\n            let eolCount = 0;\n            let firstLineLength = 0;\n            let lastLineLength = 0;\n            if (op.text) {\n                let strEOL;\n                [eolCount, firstLineLength, lastLineLength, strEOL] = countEOL(op.text);\n                const bufferEOL = this.getEOL();\n                const expectedStrEOL = (bufferEOL === '\\r\\n' ? 2 /* StringEOL.CRLF */ : 1 /* StringEOL.LF */);\n                if (strEOL === 0 /* StringEOL.Unknown */ || strEOL === expectedStrEOL) {\n                    validText = op.text;\n                }\n                else {\n                    validText = op.text.replace(/\\r\\n|\\r|\\n/g, bufferEOL);\n                }\n            }\n            operations[i] = {\n                sortIndex: i,\n                identifier: op.identifier || null,\n                range: validatedRange,\n                rangeOffset: this.getOffsetAt(validatedRange.startLineNumber, validatedRange.startColumn),\n                rangeLength: this.getValueLengthInRange(validatedRange),\n                text: validText,\n                eolCount: eolCount,\n                firstLineLength: firstLineLength,\n                lastLineLength: lastLineLength,\n                forceMoveMarkers: Boolean(op.forceMoveMarkers),\n                isAutoWhitespaceEdit: op.isAutoWhitespaceEdit || false\n            };\n        }\n        // Sort operations ascending\n        operations.sort(PieceTreeTextBuffer._sortOpsAscending);\n        let hasTouchingRanges = false;\n        for (let i = 0, count = operations.length - 1; i < count; i++) {\n            const rangeEnd = operations[i].range.getEndPosition();\n            const nextRangeStart = operations[i + 1].range.getStartPosition();\n            if (nextRangeStart.isBeforeOrEqual(rangeEnd)) {\n                if (nextRangeStart.isBefore(rangeEnd)) {\n                    // overlapping ranges\n                    throw new Error('Overlapping ranges are not allowed!');\n                }\n                hasTouchingRanges = true;\n            }\n        }\n        if (canReduceOperations) {\n            operations = this._reduceOperations(operations);\n        }\n        // Delta encode operations\n        const reverseRanges = (computeUndoEdits || recordTrimAutoWhitespace ? PieceTreeTextBuffer._getInverseEditRanges(operations) : []);\n        const newTrimAutoWhitespaceCandidates = [];\n        if (recordTrimAutoWhitespace) {\n            for (let i = 0; i < operations.length; i++) {\n                const op = operations[i];\n                const reverseRange = reverseRanges[i];\n                if (op.isAutoWhitespaceEdit && op.range.isEmpty()) {\n                    // Record already the future line numbers that might be auto whitespace removal candidates on next edit\n                    for (let lineNumber = reverseRange.startLineNumber; lineNumber <= reverseRange.endLineNumber; lineNumber++) {\n                        let currentLineContent = '';\n                        if (lineNumber === reverseRange.startLineNumber) {\n                            currentLineContent = this.getLineContent(op.range.startLineNumber);\n                            if (strings.firstNonWhitespaceIndex(currentLineContent) !== -1) {\n                                continue;\n                            }\n                        }\n                        newTrimAutoWhitespaceCandidates.push({ lineNumber: lineNumber, oldContent: currentLineContent });\n                    }\n                }\n            }\n        }\n        let reverseOperations = null;\n        if (computeUndoEdits) {\n            let reverseRangeDeltaOffset = 0;\n            reverseOperations = [];\n            for (let i = 0; i < operations.length; i++) {\n                const op = operations[i];\n                const reverseRange = reverseRanges[i];\n                const bufferText = this.getValueInRange(op.range);\n                const reverseRangeOffset = op.rangeOffset + reverseRangeDeltaOffset;\n                reverseRangeDeltaOffset += (op.text.length - bufferText.length);\n                reverseOperations[i] = {\n                    sortIndex: op.sortIndex,\n                    identifier: op.identifier,\n                    range: reverseRange,\n                    text: bufferText,\n                    textChange: new TextChange(op.rangeOffset, bufferText, reverseRangeOffset, op.text)\n                };\n            }\n            // Can only sort reverse operations when the order is not significant\n            if (!hasTouchingRanges) {\n                reverseOperations.sort((a, b) => a.sortIndex - b.sortIndex);\n            }\n        }\n        this._mightContainRTL = mightContainRTL;\n        this._mightContainUnusualLineTerminators = mightContainUnusualLineTerminators;\n        this._mightContainNonBasicASCII = mightContainNonBasicASCII;\n        const contentChanges = this._doApplyEdits(operations);\n        let trimAutoWhitespaceLineNumbers = null;\n        if (recordTrimAutoWhitespace && newTrimAutoWhitespaceCandidates.length > 0) {\n            // sort line numbers auto whitespace removal candidates for next edit descending\n            newTrimAutoWhitespaceCandidates.sort((a, b) => b.lineNumber - a.lineNumber);\n            trimAutoWhitespaceLineNumbers = [];\n            for (let i = 0, len = newTrimAutoWhitespaceCandidates.length; i < len; i++) {\n                const lineNumber = newTrimAutoWhitespaceCandidates[i].lineNumber;\n                if (i > 0 && newTrimAutoWhitespaceCandidates[i - 1].lineNumber === lineNumber) {\n                    // Do not have the same line number twice\n                    continue;\n                }\n                const prevContent = newTrimAutoWhitespaceCandidates[i].oldContent;\n                const lineContent = this.getLineContent(lineNumber);\n                if (lineContent.length === 0 || lineContent === prevContent || strings.firstNonWhitespaceIndex(lineContent) !== -1) {\n                    continue;\n                }\n                trimAutoWhitespaceLineNumbers.push(lineNumber);\n            }\n        }\n        this._onDidChangeContent.fire();\n        return new ApplyEditsResult(reverseOperations, contentChanges, trimAutoWhitespaceLineNumbers);\n    }\n    /**\n     * Transform operations such that they represent the same logic edit,\n     * but that they also do not cause OOM crashes.\n     */\n    _reduceOperations(operations) {\n        if (operations.length < 1000) {\n            // We know from empirical testing that a thousand edits work fine regardless of their shape.\n            return operations;\n        }\n        // At one point, due to how events are emitted and how each operation is handled,\n        // some operations can trigger a high amount of temporary string allocations,\n        // that will immediately get edited again.\n        // e.g. a formatter inserting ridiculous ammounts of \\n on a model with a single line\n        // Therefore, the strategy is to collapse all the operations into a huge single edit operation\n        return [this._toSingleEditOperation(operations)];\n    }\n    _toSingleEditOperation(operations) {\n        let forceMoveMarkers = false;\n        const firstEditRange = operations[0].range;\n        const lastEditRange = operations[operations.length - 1].range;\n        const entireEditRange = new Range(firstEditRange.startLineNumber, firstEditRange.startColumn, lastEditRange.endLineNumber, lastEditRange.endColumn);\n        let lastEndLineNumber = firstEditRange.startLineNumber;\n        let lastEndColumn = firstEditRange.startColumn;\n        const result = [];\n        for (let i = 0, len = operations.length; i < len; i++) {\n            const operation = operations[i];\n            const range = operation.range;\n            forceMoveMarkers = forceMoveMarkers || operation.forceMoveMarkers;\n            // (1) -- Push old text\n            result.push(this.getValueInRange(new Range(lastEndLineNumber, lastEndColumn, range.startLineNumber, range.startColumn)));\n            // (2) -- Push new text\n            if (operation.text.length > 0) {\n                result.push(operation.text);\n            }\n            lastEndLineNumber = range.endLineNumber;\n            lastEndColumn = range.endColumn;\n        }\n        const text = result.join('');\n        const [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n        return {\n            sortIndex: 0,\n            identifier: operations[0].identifier,\n            range: entireEditRange,\n            rangeOffset: this.getOffsetAt(entireEditRange.startLineNumber, entireEditRange.startColumn),\n            rangeLength: this.getValueLengthInRange(entireEditRange, 0 /* EndOfLinePreference.TextDefined */),\n            text: text,\n            eolCount: eolCount,\n            firstLineLength: firstLineLength,\n            lastLineLength: lastLineLength,\n            forceMoveMarkers: forceMoveMarkers,\n            isAutoWhitespaceEdit: false\n        };\n    }\n    _doApplyEdits(operations) {\n        operations.sort(PieceTreeTextBuffer._sortOpsDescending);\n        const contentChanges = [];\n        // operations are from bottom to top\n        for (let i = 0; i < operations.length; i++) {\n            const op = operations[i];\n            const startLineNumber = op.range.startLineNumber;\n            const startColumn = op.range.startColumn;\n            const endLineNumber = op.range.endLineNumber;\n            const endColumn = op.range.endColumn;\n            if (startLineNumber === endLineNumber && startColumn === endColumn && op.text.length === 0) {\n                // no-op\n                continue;\n            }\n            if (op.text) {\n                // replacement\n                this._pieceTree.delete(op.rangeOffset, op.rangeLength);\n                this._pieceTree.insert(op.rangeOffset, op.text, true);\n            }\n            else {\n                // deletion\n                this._pieceTree.delete(op.rangeOffset, op.rangeLength);\n            }\n            const contentChangeRange = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            contentChanges.push({\n                range: contentChangeRange,\n                rangeLength: op.rangeLength,\n                text: op.text,\n                rangeOffset: op.rangeOffset,\n                forceMoveMarkers: op.forceMoveMarkers\n            });\n        }\n        return contentChanges;\n    }\n    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {\n        return this._pieceTree.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n    }\n    /**\n     * Assumes `operations` are validated and sorted ascending\n     */\n    static _getInverseEditRanges(operations) {\n        const result = [];\n        let prevOpEndLineNumber = 0;\n        let prevOpEndColumn = 0;\n        let prevOp = null;\n        for (let i = 0, len = operations.length; i < len; i++) {\n            const op = operations[i];\n            let startLineNumber;\n            let startColumn;\n            if (prevOp) {\n                if (prevOp.range.endLineNumber === op.range.startLineNumber) {\n                    startLineNumber = prevOpEndLineNumber;\n                    startColumn = prevOpEndColumn + (op.range.startColumn - prevOp.range.endColumn);\n                }\n                else {\n                    startLineNumber = prevOpEndLineNumber + (op.range.startLineNumber - prevOp.range.endLineNumber);\n                    startColumn = op.range.startColumn;\n                }\n            }\n            else {\n                startLineNumber = op.range.startLineNumber;\n                startColumn = op.range.startColumn;\n            }\n            let resultRange;\n            if (op.text.length > 0) {\n                // the operation inserts something\n                const lineCount = op.eolCount + 1;\n                if (lineCount === 1) {\n                    // single line insert\n                    resultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn + op.firstLineLength);\n                }\n                else {\n                    // multi line insert\n                    resultRange = new Range(startLineNumber, startColumn, startLineNumber + lineCount - 1, op.lastLineLength + 1);\n                }\n            }\n            else {\n                // There is nothing to insert\n                resultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn);\n            }\n            prevOpEndLineNumber = resultRange.endLineNumber;\n            prevOpEndColumn = resultRange.endColumn;\n            result.push(resultRange);\n            prevOp = op;\n        }\n        return result;\n    }\n    static _sortOpsAscending(a, b) {\n        const r = Range.compareRangesUsingEnds(a.range, b.range);\n        if (r === 0) {\n            return a.sortIndex - b.sortIndex;\n        }\n        return r;\n    }\n    static _sortOpsDescending(a, b) {\n        const r = Range.compareRangesUsingEnds(a.range, b.range);\n        if (r === 0) {\n            return b.sortIndex - a.sortIndex;\n        }\n        return -r;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport { StringBuffer, createLineStarts, createLineStartsFast } from './pieceTreeBase.js';\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer.js';\nclass PieceTreeTextBufferFactory {\n    constructor(_chunks, _bom, _cr, _lf, _crlf, _containsRTL, _containsUnusualLineTerminators, _isBasicASCII, _normalizeEOL) {\n        this._chunks = _chunks;\n        this._bom = _bom;\n        this._cr = _cr;\n        this._lf = _lf;\n        this._crlf = _crlf;\n        this._containsRTL = _containsRTL;\n        this._containsUnusualLineTerminators = _containsUnusualLineTerminators;\n        this._isBasicASCII = _isBasicASCII;\n        this._normalizeEOL = _normalizeEOL;\n    }\n    _getEOL(defaultEOL) {\n        const totalEOLCount = this._cr + this._lf + this._crlf;\n        const totalCRCount = this._cr + this._crlf;\n        if (totalEOLCount === 0) {\n            // This is an empty file or a file with precisely one line\n            return (defaultEOL === 1 /* DefaultEndOfLine.LF */ ? '\\n' : '\\r\\n');\n        }\n        if (totalCRCount > totalEOLCount / 2) {\n            // More than half of the file contains \\r\\n ending lines\n            return '\\r\\n';\n        }\n        // At least one line more ends in \\n\n        return '\\n';\n    }\n    create(defaultEOL) {\n        const eol = this._getEOL(defaultEOL);\n        const chunks = this._chunks;\n        if (this._normalizeEOL &&\n            ((eol === '\\r\\n' && (this._cr > 0 || this._lf > 0))\n                || (eol === '\\n' && (this._cr > 0 || this._crlf > 0)))) {\n            // Normalize pieces\n            for (let i = 0, len = chunks.length; i < len; i++) {\n                const str = chunks[i].buffer.replace(/\\r\\n|\\r|\\n/g, eol);\n                const newLineStart = createLineStartsFast(str);\n                chunks[i] = new StringBuffer(str, newLineStart);\n            }\n        }\n        const textBuffer = new PieceTreeTextBuffer(chunks, this._bom, eol, this._containsRTL, this._containsUnusualLineTerminators, this._isBasicASCII, this._normalizeEOL);\n        return { textBuffer: textBuffer, disposable: textBuffer };\n    }\n}\nexport class PieceTreeTextBufferBuilder {\n    constructor() {\n        this.chunks = [];\n        this.BOM = '';\n        this._hasPreviousChar = false;\n        this._previousChar = 0;\n        this._tmpLineStarts = [];\n        this.cr = 0;\n        this.lf = 0;\n        this.crlf = 0;\n        this.containsRTL = false;\n        this.containsUnusualLineTerminators = false;\n        this.isBasicASCII = true;\n    }\n    acceptChunk(chunk) {\n        if (chunk.length === 0) {\n            return;\n        }\n        if (this.chunks.length === 0) {\n            if (strings.startsWithUTF8BOM(chunk)) {\n                this.BOM = strings.UTF8_BOM_CHARACTER;\n                chunk = chunk.substr(1);\n            }\n        }\n        const lastChar = chunk.charCodeAt(chunk.length - 1);\n        if (lastChar === 13 /* CharCode.CarriageReturn */ || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {\n            // last character is \\r or a high surrogate => keep it back\n            this._acceptChunk1(chunk.substr(0, chunk.length - 1), false);\n            this._hasPreviousChar = true;\n            this._previousChar = lastChar;\n        }\n        else {\n            this._acceptChunk1(chunk, false);\n            this._hasPreviousChar = false;\n            this._previousChar = lastChar;\n        }\n    }\n    _acceptChunk1(chunk, allowEmptyStrings) {\n        if (!allowEmptyStrings && chunk.length === 0) {\n            // Nothing to do\n            return;\n        }\n        if (this._hasPreviousChar) {\n            this._acceptChunk2(String.fromCharCode(this._previousChar) + chunk);\n        }\n        else {\n            this._acceptChunk2(chunk);\n        }\n    }\n    _acceptChunk2(chunk) {\n        const lineStarts = createLineStarts(this._tmpLineStarts, chunk);\n        this.chunks.push(new StringBuffer(chunk, lineStarts.lineStarts));\n        this.cr += lineStarts.cr;\n        this.lf += lineStarts.lf;\n        this.crlf += lineStarts.crlf;\n        if (!lineStarts.isBasicASCII) {\n            // this chunk contains non basic ASCII characters\n            this.isBasicASCII = false;\n            if (!this.containsRTL) {\n                this.containsRTL = strings.containsRTL(chunk);\n            }\n            if (!this.containsUnusualLineTerminators) {\n                this.containsUnusualLineTerminators = strings.containsUnusualLineTerminators(chunk);\n            }\n        }\n    }\n    finish(normalizeEOL = true) {\n        this._finish();\n        return new PieceTreeTextBufferFactory(this.chunks, this.BOM, this.cr, this.lf, this.crlf, this.containsRTL, this.containsUnusualLineTerminators, this.isBasicASCII, normalizeEOL);\n    }\n    _finish() {\n        if (this.chunks.length === 0) {\n            this._acceptChunk1('', true);\n        }\n        if (this._hasPreviousChar) {\n            this._hasPreviousChar = false;\n            // recreate last chunk\n            const lastChunk = this.chunks[this.chunks.length - 1];\n            lastChunk.buffer += String.fromCharCode(this._previousChar);\n            const newLineStarts = createLineStartsFast(lastChunk.buffer);\n            lastChunk.lineStarts = newLineStarts;\n            if (this._previousChar === 13 /* CharCode.CarriageReturn */) {\n                this.cr++;\n            }\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { runWhenIdle } from '../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { setTimeout0 } from '../../../base/common/platform.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { LineRange } from '../core/lineRange.js';\nimport { OffsetRange } from '../core/offsetRange.js';\nimport { nullTokenizeEncoded } from '../languages/nullTokenize.js';\nimport { FixedArray } from './fixedArray.js';\nimport { ContiguousMultilineTokensBuilder } from '../tokens/contiguousMultilineTokensBuilder.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\nexport class TokenizerWithStateStore {\n    constructor(lineCount, tokenizationSupport) {\n        this.tokenizationSupport = tokenizationSupport;\n        this.initialState = this.tokenizationSupport.getInitialState();\n        this.store = new TrackingTokenizationStateStore(lineCount);\n    }\n    getStartState(lineNumber) {\n        if (lineNumber === 1) {\n            return this.initialState;\n        }\n        return this.store.getEndState(lineNumber - 1);\n    }\n}\nexport class TokenizerWithStateStoreAndTextModel extends TokenizerWithStateStore {\n    constructor(lineCount, tokenizationSupport, _textModel, _languageIdCodec) {\n        super(lineCount, tokenizationSupport);\n        this._textModel = _textModel;\n        this._languageIdCodec = _languageIdCodec;\n    }\n    updateTokensUntilLine(builder, lineNumber) {\n        const languageId = this._textModel.getLanguageId();\n        while (true) {\n            const nextLineNumber = this.store.getFirstInvalidEndStateLineNumber();\n            if (!nextLineNumber || nextLineNumber > lineNumber) {\n                break;\n            }\n            const text = this._textModel.getLineContent(nextLineNumber);\n            const lineStartState = this.getStartState(nextLineNumber);\n            const r = safeTokenize(this._languageIdCodec, languageId, this.tokenizationSupport, text, true, lineStartState);\n            builder.add(nextLineNumber, r.tokens);\n            this.store.setEndState(nextLineNumber, r.endState);\n        }\n    }\n    /** assumes state is up to date */\n    getTokenTypeIfInsertingCharacter(position, character) {\n        // TODO@hediet: use tokenizeLineWithEdit\n        const lineStartState = this.getStartState(position.lineNumber);\n        if (!lineStartState) {\n            return 0 /* StandardTokenType.Other */;\n        }\n        const languageId = this._textModel.getLanguageId();\n        const lineContent = this._textModel.getLineContent(position.lineNumber);\n        // Create the text as if `character` was inserted\n        const text = (lineContent.substring(0, position.column - 1)\n            + character\n            + lineContent.substring(position.column - 1));\n        const r = safeTokenize(this._languageIdCodec, languageId, this.tokenizationSupport, text, true, lineStartState);\n        const lineTokens = new LineTokens(r.tokens, text, this._languageIdCodec);\n        if (lineTokens.getCount() === 0) {\n            return 0 /* StandardTokenType.Other */;\n        }\n        const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        return lineTokens.getStandardTokenType(tokenIndex);\n    }\n    /** assumes state is up to date */\n    tokenizeLineWithEdit(position, length, newText) {\n        const lineNumber = position.lineNumber;\n        const column = position.column;\n        const lineStartState = this.getStartState(lineNumber);\n        if (!lineStartState) {\n            return null;\n        }\n        const curLineContent = this._textModel.getLineContent(lineNumber);\n        const newLineContent = curLineContent.substring(0, column - 1)\n            + newText + curLineContent.substring(column - 1 + length);\n        const languageId = this._textModel.getLanguageIdAtPosition(lineNumber, 0);\n        const result = safeTokenize(this._languageIdCodec, languageId, this.tokenizationSupport, newLineContent, true, lineStartState);\n        const lineTokens = new LineTokens(result.tokens, newLineContent, this._languageIdCodec);\n        return lineTokens;\n    }\n    isCheapToTokenize(lineNumber) {\n        const firstInvalidLineNumber = this.store.getFirstInvalidEndStateLineNumberOrMax();\n        if (lineNumber < firstInvalidLineNumber) {\n            return true;\n        }\n        if (lineNumber === firstInvalidLineNumber\n            && this._textModel.getLineLength(lineNumber) < 2048 /* Constants.CHEAP_TOKENIZATION_LENGTH_LIMIT */) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * The result is not cached.\n     */\n    tokenizeHeuristically(builder, startLineNumber, endLineNumber) {\n        if (endLineNumber <= this.store.getFirstInvalidEndStateLineNumberOrMax()) {\n            // nothing to do\n            return { heuristicTokens: false };\n        }\n        if (startLineNumber <= this.store.getFirstInvalidEndStateLineNumberOrMax()) {\n            // tokenization has reached the viewport start...\n            this.updateTokensUntilLine(builder, endLineNumber);\n            return { heuristicTokens: false };\n        }\n        let state = this.guessStartState(startLineNumber);\n        const languageId = this._textModel.getLanguageId();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const text = this._textModel.getLineContent(lineNumber);\n            const r = safeTokenize(this._languageIdCodec, languageId, this.tokenizationSupport, text, true, state);\n            builder.add(lineNumber, r.tokens);\n            state = r.endState;\n        }\n        return { heuristicTokens: true };\n    }\n    guessStartState(lineNumber) {\n        let nonWhitespaceColumn = this._textModel.getLineFirstNonWhitespaceColumn(lineNumber);\n        const likelyRelevantLines = [];\n        let initialState = null;\n        for (let i = lineNumber - 1; nonWhitespaceColumn > 1 && i >= 1; i--) {\n            const newNonWhitespaceIndex = this._textModel.getLineFirstNonWhitespaceColumn(i);\n            // Ignore lines full of whitespace\n            if (newNonWhitespaceIndex === 0) {\n                continue;\n            }\n            if (newNonWhitespaceIndex < nonWhitespaceColumn) {\n                likelyRelevantLines.push(this._textModel.getLineContent(i));\n                nonWhitespaceColumn = newNonWhitespaceIndex;\n                initialState = this.getStartState(i);\n                if (initialState) {\n                    break;\n                }\n            }\n        }\n        if (!initialState) {\n            initialState = this.tokenizationSupport.getInitialState();\n        }\n        likelyRelevantLines.reverse();\n        const languageId = this._textModel.getLanguageId();\n        let state = initialState;\n        for (const line of likelyRelevantLines) {\n            const r = safeTokenize(this._languageIdCodec, languageId, this.tokenizationSupport, line, false, state);\n            state = r.endState;\n        }\n        return state;\n    }\n}\nexport class TrackingTokenizationStateStore {\n    constructor(lineCount) {\n        this.lineCount = lineCount;\n        this.tokenizationStateStore = new TokenizationStateStore();\n        this._invalidEndStatesLineNumbers = new RangePriorityQueueImpl();\n        this._invalidEndStatesLineNumbers.addRange(new OffsetRange(1, lineCount + 1));\n    }\n    getEndState(lineNumber) {\n        return this.tokenizationStateStore.getEndState(lineNumber);\n    }\n    setEndState(lineNumber, state) {\n        while (true) {\n            const min = this._invalidEndStatesLineNumbers.min;\n            if (min !== null && min <= lineNumber) {\n                this._invalidEndStatesLineNumbers.removeMin();\n            }\n            else {\n                break;\n            }\n        }\n        const r = this.tokenizationStateStore.setEndState(lineNumber, state);\n        if (r && lineNumber < this.lineCount) {\n            // because the state changed, we cannot trust the next state anymore and have to invalidate it.\n            this._invalidEndStatesLineNumbers.addRange(new OffsetRange(lineNumber + 1, lineNumber + 2));\n        }\n        return r;\n    }\n    acceptChange(range, newLineCount) {\n        this.lineCount += newLineCount - range.length;\n        this.tokenizationStateStore.acceptChange(range, newLineCount);\n        this._invalidEndStatesLineNumbers.addRangeAndResize(new OffsetRange(range.startLineNumber, range.endLineNumberExclusive), newLineCount);\n    }\n    acceptChanges(changes) {\n        for (const c of changes) {\n            const [eolCount] = countEOL(c.text);\n            this.acceptChange(new LineRange(c.range.startLineNumber, c.range.endLineNumber + 1), eolCount + 1);\n        }\n    }\n    invalidateEndStateRange(range) {\n        this._invalidEndStatesLineNumbers.addRange(new OffsetRange(range.startLineNumber, range.endLineNumberExclusive));\n    }\n    getFirstInvalidEndStateLineNumber() {\n        return this._invalidEndStatesLineNumbers.min;\n    }\n    getFirstInvalidEndStateLineNumberOrMax() {\n        return this._invalidEndStatesLineNumbers.min || Number.MAX_SAFE_INTEGER;\n    }\n    isTokenizationComplete() {\n        return this._invalidEndStatesLineNumbers.min === null;\n    }\n}\nexport class TokenizationStateStore {\n    constructor() {\n        this._lineEndStates = new FixedArray(null);\n    }\n    getEndState(lineNumber) {\n        return this._lineEndStates.get(lineNumber);\n    }\n    setEndState(lineNumber, state) {\n        const oldState = this._lineEndStates.get(lineNumber);\n        if (oldState && oldState.equals(state)) {\n            return false;\n        }\n        this._lineEndStates.set(lineNumber, state);\n        return true;\n    }\n    acceptChange(range, newLineCount) {\n        let length = range.length;\n        if (newLineCount > 0 && length > 0) {\n            // Keep the last state, even though it is unrelated.\n            // But if the new state happens to agree with this last state, then we know we can stop tokenizing.\n            length--;\n            newLineCount--;\n        }\n        this._lineEndStates.replace(range.startLineNumber, length, newLineCount);\n    }\n}\nexport class RangePriorityQueueImpl {\n    constructor() {\n        this._ranges = [];\n    }\n    get min() {\n        if (this._ranges.length === 0) {\n            return null;\n        }\n        return this._ranges[0].start;\n    }\n    removeMin() {\n        if (this._ranges.length === 0) {\n            return null;\n        }\n        const range = this._ranges[0];\n        if (range.start + 1 === range.endExclusive) {\n            this._ranges.shift();\n        }\n        else {\n            this._ranges[0] = new OffsetRange(range.start + 1, range.endExclusive);\n        }\n        return range.start;\n    }\n    addRange(range) {\n        OffsetRange.addRange(range, this._ranges);\n    }\n    addRangeAndResize(range, newLength) {\n        let idxFirstMightBeIntersecting = 0;\n        while (!(idxFirstMightBeIntersecting >= this._ranges.length || range.start <= this._ranges[idxFirstMightBeIntersecting].endExclusive)) {\n            idxFirstMightBeIntersecting++;\n        }\n        let idxFirstIsAfter = idxFirstMightBeIntersecting;\n        while (!(idxFirstIsAfter >= this._ranges.length || range.endExclusive < this._ranges[idxFirstIsAfter].start)) {\n            idxFirstIsAfter++;\n        }\n        const delta = newLength - range.length;\n        for (let i = idxFirstIsAfter; i < this._ranges.length; i++) {\n            this._ranges[i] = this._ranges[i].delta(delta);\n        }\n        if (idxFirstMightBeIntersecting === idxFirstIsAfter) {\n            const newRange = new OffsetRange(range.start, range.start + newLength);\n            if (!newRange.isEmpty) {\n                this._ranges.splice(idxFirstMightBeIntersecting, 0, newRange);\n            }\n        }\n        else {\n            const start = Math.min(range.start, this._ranges[idxFirstMightBeIntersecting].start);\n            const endEx = Math.max(range.endExclusive, this._ranges[idxFirstIsAfter - 1].endExclusive);\n            const newRange = new OffsetRange(start, endEx + delta);\n            if (!newRange.isEmpty) {\n                this._ranges.splice(idxFirstMightBeIntersecting, idxFirstIsAfter - idxFirstMightBeIntersecting, newRange);\n            }\n            else {\n                this._ranges.splice(idxFirstMightBeIntersecting, idxFirstIsAfter - idxFirstMightBeIntersecting);\n            }\n        }\n    }\n    toString() {\n        return this._ranges.map(r => r.toString()).join(' + ');\n    }\n}\nfunction safeTokenize(languageIdCodec, languageId, tokenizationSupport, text, hasEOL, state) {\n    let r = null;\n    if (tokenizationSupport) {\n        try {\n            r = tokenizationSupport.tokenizeEncoded(text, hasEOL, state.clone());\n        }\n        catch (e) {\n            onUnexpectedError(e);\n        }\n    }\n    if (!r) {\n        r = nullTokenizeEncoded(languageIdCodec.encodeLanguageId(languageId), state);\n    }\n    LineTokens.convertToEndOffset(r.tokens, text.length);\n    return r;\n}\nexport class DefaultBackgroundTokenizer {\n    constructor(_tokenizerWithStateStore, _backgroundTokenStore) {\n        this._tokenizerWithStateStore = _tokenizerWithStateStore;\n        this._backgroundTokenStore = _backgroundTokenStore;\n        this._isDisposed = false;\n        this._isScheduled = false;\n    }\n    dispose() {\n        this._isDisposed = true;\n    }\n    handleChanges() {\n        this._beginBackgroundTokenization();\n    }\n    _beginBackgroundTokenization() {\n        if (this._isScheduled || !this._tokenizerWithStateStore._textModel.isAttachedToEditor() || !this._hasLinesToTokenize()) {\n            return;\n        }\n        this._isScheduled = true;\n        runWhenIdle((deadline) => {\n            this._isScheduled = false;\n            this._backgroundTokenizeWithDeadline(deadline);\n        });\n    }\n    /**\n     * Tokenize until the deadline occurs, but try to yield every 1-2ms.\n     */\n    _backgroundTokenizeWithDeadline(deadline) {\n        // Read the time remaining from the `deadline` immediately because it is unclear\n        // if the `deadline` object will be valid after execution leaves this function.\n        const endTime = Date.now() + deadline.timeRemaining();\n        const execute = () => {\n            if (this._isDisposed || !this._tokenizerWithStateStore._textModel.isAttachedToEditor() || !this._hasLinesToTokenize()) {\n                // disposed in the meantime or detached or finished\n                return;\n            }\n            this._backgroundTokenizeForAtLeast1ms();\n            if (Date.now() < endTime) {\n                // There is still time before reaching the deadline, so yield to the browser and then\n                // continue execution\n                setTimeout0(execute);\n            }\n            else {\n                // The deadline has been reached, so schedule a new idle callback if necessary\n                this._beginBackgroundTokenization();\n            }\n        };\n        execute();\n    }\n    /**\n     * Tokenize for at least 1ms.\n     */\n    _backgroundTokenizeForAtLeast1ms() {\n        const lineCount = this._tokenizerWithStateStore._textModel.getLineCount();\n        const builder = new ContiguousMultilineTokensBuilder();\n        const sw = StopWatch.create(false);\n        do {\n            if (sw.elapsed() > 1) {\n                // the comparison is intentionally > 1 and not >= 1 to ensure that\n                // a full millisecond has elapsed, given how microseconds are rounded\n                // to milliseconds\n                break;\n            }\n            const tokenizedLineNumber = this._tokenizeOneInvalidLine(builder);\n            if (tokenizedLineNumber >= lineCount) {\n                break;\n            }\n        } while (this._hasLinesToTokenize());\n        this._backgroundTokenStore.setTokens(builder.finalize());\n        this.checkFinished();\n    }\n    _hasLinesToTokenize() {\n        if (!this._tokenizerWithStateStore) {\n            return false;\n        }\n        return !this._tokenizerWithStateStore.store.isTokenizationComplete();\n    }\n    _tokenizeOneInvalidLine(builder) {\n        if (!this._tokenizerWithStateStore || !this._hasLinesToTokenize()) {\n            return this._tokenizerWithStateStore._textModel.getLineCount() + 1;\n        }\n        const lineNumber = this._tokenizerWithStateStore.store.getFirstInvalidEndStateLineNumber();\n        this._tokenizerWithStateStore.updateTokensUntilLine(builder, lineNumber);\n        return lineNumber;\n    }\n    checkFinished() {\n        if (this._isDisposed) {\n            return;\n        }\n        if (this._tokenizerWithStateStore.store.isTokenizationComplete()) {\n            this._backgroundTokenStore.backgroundTokenizationFinished();\n        }\n    }\n    requestTokens(startLineNumber, endLineNumberExclusive) {\n        this._tokenizerWithStateStore.store.invalidateEndStateRange(new LineRange(startLineNumber, endLineNumberExclusive));\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { BugIndicatingError, onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableMap, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { LineRange } from '../core/lineRange.js';\nimport { Position } from '../core/position.js';\nimport { getWordAtText } from '../core/wordHelper.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { TextModelPart } from './textModelPart.js';\nimport { DefaultBackgroundTokenizer, TokenizerWithStateStoreAndTextModel, TrackingTokenizationStateStore } from './textModelTokens.js';\nimport { ContiguousMultilineTokensBuilder } from '../tokens/contiguousMultilineTokensBuilder.js';\nimport { ContiguousTokensStore } from '../tokens/contiguousTokensStore.js';\nimport { SparseTokensStore } from '../tokens/sparseTokensStore.js';\nexport class TokenizationTextModelPart extends TextModelPart {\n    constructor(_languageService, _languageConfigurationService, _textModel, _bracketPairsTextModelPart, _languageId, _attachedViews) {\n        super();\n        this._languageService = _languageService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._textModel = _textModel;\n        this._bracketPairsTextModelPart = _bracketPairsTextModelPart;\n        this._languageId = _languageId;\n        this._attachedViews = _attachedViews;\n        this._semanticTokens = new SparseTokensStore(this._languageService.languageIdCodec);\n        this._onDidChangeLanguage = this._register(new Emitter());\n        this.onDidChangeLanguage = this._onDidChangeLanguage.event;\n        this._onDidChangeLanguageConfiguration = this._register(new Emitter());\n        this.onDidChangeLanguageConfiguration = this._onDidChangeLanguageConfiguration.event;\n        this._onDidChangeTokens = this._register(new Emitter());\n        this.onDidChangeTokens = this._onDidChangeTokens.event;\n        this.grammarTokens = this._register(new GrammarTokens(this._languageService.languageIdCodec, this._textModel, () => this._languageId, this._attachedViews));\n        this._register(this._languageConfigurationService.onDidChange(e => {\n            if (e.affects(this._languageId)) {\n                this._onDidChangeLanguageConfiguration.fire({});\n            }\n        }));\n        this._register(this.grammarTokens.onDidChangeTokens(e => {\n            this._emitModelTokensChangedEvent(e);\n        }));\n        this._register(this.grammarTokens.onDidChangeBackgroundTokenizationState(e => {\n            this._bracketPairsTextModelPart.handleDidChangeBackgroundTokenizationState();\n        }));\n    }\n    handleDidChangeContent(e) {\n        if (e.isFlush) {\n            this._semanticTokens.flush();\n        }\n        else if (!e.isEolChange) { // We don't have to do anything on an EOL change\n            for (const c of e.changes) {\n                const [eolCount, firstLineLength, lastLineLength] = countEOL(c.text);\n                this._semanticTokens.acceptEdit(c.range, eolCount, firstLineLength, lastLineLength, c.text.length > 0 ? c.text.charCodeAt(0) : 0 /* CharCode.Null */);\n            }\n        }\n        this.grammarTokens.handleDidChangeContent(e);\n    }\n    handleDidChangeAttached() {\n        this.grammarTokens.handleDidChangeAttached();\n    }\n    /**\n     * Includes grammar and semantic tokens.\n     */\n    getLineTokens(lineNumber) {\n        this.validateLineNumber(lineNumber);\n        const syntacticTokens = this.grammarTokens.getLineTokens(lineNumber);\n        return this._semanticTokens.addSparseTokens(lineNumber, syntacticTokens);\n    }\n    _emitModelTokensChangedEvent(e) {\n        if (!this._textModel._isDisposing()) {\n            this._bracketPairsTextModelPart.handleDidChangeTokens(e);\n            this._onDidChangeTokens.fire(e);\n        }\n    }\n    // #region Grammar Tokens\n    validateLineNumber(lineNumber) {\n        if (lineNumber < 1 || lineNumber > this._textModel.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n    }\n    get hasTokens() {\n        return this.grammarTokens.hasTokens;\n    }\n    resetTokenization() {\n        this.grammarTokens.resetTokenization();\n    }\n    get backgroundTokenizationState() {\n        return this.grammarTokens.backgroundTokenizationState;\n    }\n    forceTokenization(lineNumber) {\n        this.validateLineNumber(lineNumber);\n        this.grammarTokens.forceTokenization(lineNumber);\n    }\n    isCheapToTokenize(lineNumber) {\n        this.validateLineNumber(lineNumber);\n        return this.grammarTokens.isCheapToTokenize(lineNumber);\n    }\n    tokenizeIfCheap(lineNumber) {\n        this.validateLineNumber(lineNumber);\n        this.grammarTokens.tokenizeIfCheap(lineNumber);\n    }\n    getTokenTypeIfInsertingCharacter(lineNumber, column, character) {\n        return this.grammarTokens.getTokenTypeIfInsertingCharacter(lineNumber, column, character);\n    }\n    tokenizeLineWithEdit(position, length, newText) {\n        return this.grammarTokens.tokenizeLineWithEdit(position, length, newText);\n    }\n    // #endregion\n    // #region Semantic Tokens\n    setSemanticTokens(tokens, isComplete) {\n        this._semanticTokens.set(tokens, isComplete);\n        this._emitModelTokensChangedEvent({\n            semanticTokensApplied: tokens !== null,\n            ranges: [{ fromLineNumber: 1, toLineNumber: this._textModel.getLineCount() }],\n        });\n    }\n    hasCompleteSemanticTokens() {\n        return this._semanticTokens.isComplete();\n    }\n    hasSomeSemanticTokens() {\n        return !this._semanticTokens.isEmpty();\n    }\n    setPartialSemanticTokens(range, tokens) {\n        if (this.hasCompleteSemanticTokens()) {\n            return;\n        }\n        const changedRange = this._textModel.validateRange(this._semanticTokens.setPartial(range, tokens));\n        this._emitModelTokensChangedEvent({\n            semanticTokensApplied: true,\n            ranges: [\n                {\n                    fromLineNumber: changedRange.startLineNumber,\n                    toLineNumber: changedRange.endLineNumber,\n                },\n            ],\n        });\n    }\n    // #endregion\n    // #region Utility Methods\n    getWordAtPosition(_position) {\n        this.assertNotDisposed();\n        const position = this._textModel.validatePosition(_position);\n        const lineContent = this._textModel.getLineContent(position.lineNumber);\n        const lineTokens = this.getLineTokens(position.lineNumber);\n        const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        // (1). First try checking right biased word\n        const [rbStartOffset, rbEndOffset] = TokenizationTextModelPart._findLanguageBoundaries(lineTokens, tokenIndex);\n        const rightBiasedWord = getWordAtText(position.column, this.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).getWordDefinition(), lineContent.substring(rbStartOffset, rbEndOffset), rbStartOffset);\n        // Make sure the result touches the original passed in position\n        if (rightBiasedWord &&\n            rightBiasedWord.startColumn <= _position.column &&\n            _position.column <= rightBiasedWord.endColumn) {\n            return rightBiasedWord;\n        }\n        // (2). Else, if we were at a language boundary, check the left biased word\n        if (tokenIndex > 0 && rbStartOffset === position.column - 1) {\n            // edge case, where `position` sits between two tokens belonging to two different languages\n            const [lbStartOffset, lbEndOffset] = TokenizationTextModelPart._findLanguageBoundaries(lineTokens, tokenIndex - 1);\n            const leftBiasedWord = getWordAtText(position.column, this.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex - 1)).getWordDefinition(), lineContent.substring(lbStartOffset, lbEndOffset), lbStartOffset);\n            // Make sure the result touches the original passed in position\n            if (leftBiasedWord &&\n                leftBiasedWord.startColumn <= _position.column &&\n                _position.column <= leftBiasedWord.endColumn) {\n                return leftBiasedWord;\n            }\n        }\n        return null;\n    }\n    getLanguageConfiguration(languageId) {\n        return this._languageConfigurationService.getLanguageConfiguration(languageId);\n    }\n    static _findLanguageBoundaries(lineTokens, tokenIndex) {\n        const languageId = lineTokens.getLanguageId(tokenIndex);\n        // go left until a different language is hit\n        let startOffset = 0;\n        for (let i = tokenIndex; i >= 0 && lineTokens.getLanguageId(i) === languageId; i--) {\n            startOffset = lineTokens.getStartOffset(i);\n        }\n        // go right until a different language is hit\n        let endOffset = lineTokens.getLineContent().length;\n        for (let i = tokenIndex, tokenCount = lineTokens.getCount(); i < tokenCount && lineTokens.getLanguageId(i) === languageId; i++) {\n            endOffset = lineTokens.getEndOffset(i);\n        }\n        return [startOffset, endOffset];\n    }\n    getWordUntilPosition(position) {\n        const wordAtPosition = this.getWordAtPosition(position);\n        if (!wordAtPosition) {\n            return { word: '', startColumn: position.column, endColumn: position.column, };\n        }\n        return {\n            word: wordAtPosition.word.substr(0, position.column - wordAtPosition.startColumn),\n            startColumn: wordAtPosition.startColumn,\n            endColumn: position.column,\n        };\n    }\n    // #endregion\n    // #region Language Id handling\n    getLanguageId() {\n        return this._languageId;\n    }\n    getLanguageIdAtPosition(lineNumber, column) {\n        const position = this._textModel.validatePosition(new Position(lineNumber, column));\n        const lineTokens = this.getLineTokens(position.lineNumber);\n        return lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\n    }\n    setLanguageId(languageId, source = 'api') {\n        if (this._languageId === languageId) {\n            // There's nothing to do\n            return;\n        }\n        const e = {\n            oldLanguage: this._languageId,\n            newLanguage: languageId,\n            source\n        };\n        this._languageId = languageId;\n        this._bracketPairsTextModelPart.handleDidChangeLanguage(e);\n        this.grammarTokens.resetTokenization();\n        this._onDidChangeLanguage.fire(e);\n        this._onDidChangeLanguageConfiguration.fire({});\n    }\n}\nclass GrammarTokens extends Disposable {\n    get backgroundTokenizationState() {\n        return this._backgroundTokenizationState;\n    }\n    constructor(_languageIdCodec, _textModel, getLanguageId, attachedViews) {\n        super();\n        this._languageIdCodec = _languageIdCodec;\n        this._textModel = _textModel;\n        this.getLanguageId = getLanguageId;\n        this._tokenizer = null;\n        this._defaultBackgroundTokenizer = null;\n        this._backgroundTokenizer = this._register(new MutableDisposable());\n        this._tokens = new ContiguousTokensStore(this._languageIdCodec);\n        this._debugBackgroundTokenizer = this._register(new MutableDisposable());\n        this._backgroundTokenizationState = 1 /* BackgroundTokenizationState.InProgress */;\n        this._onDidChangeBackgroundTokenizationState = this._register(new Emitter());\n        /** @internal, should not be exposed by the text model! */\n        this.onDidChangeBackgroundTokenizationState = this._onDidChangeBackgroundTokenizationState.event;\n        this._onDidChangeTokens = this._register(new Emitter());\n        /** @internal, should not be exposed by the text model! */\n        this.onDidChangeTokens = this._onDidChangeTokens.event;\n        this._attachedViewStates = this._register(new DisposableMap());\n        this._register(TokenizationRegistry.onDidChange((e) => {\n            const languageId = this.getLanguageId();\n            if (e.changedLanguages.indexOf(languageId) === -1) {\n                return;\n            }\n            this.resetTokenization();\n        }));\n        this.resetTokenization();\n        this._register(attachedViews.onDidChangeVisibleRanges(({ view, state }) => {\n            if (state) {\n                let existing = this._attachedViewStates.get(view);\n                if (!existing) {\n                    existing = new AttachedViewHandler(() => this.refreshRanges(existing.lineRanges));\n                    this._attachedViewStates.set(view, existing);\n                }\n                existing.handleStateChange(state);\n            }\n            else {\n                this._attachedViewStates.deleteAndDispose(view);\n            }\n        }));\n    }\n    resetTokenization(fireTokenChangeEvent = true) {\n        var _a;\n        this._tokens.flush();\n        (_a = this._debugBackgroundTokens) === null || _a === void 0 ? void 0 : _a.flush();\n        if (this._debugBackgroundStates) {\n            this._debugBackgroundStates = new TrackingTokenizationStateStore(this._textModel.getLineCount());\n        }\n        if (fireTokenChangeEvent) {\n            this._onDidChangeTokens.fire({\n                semanticTokensApplied: false,\n                ranges: [\n                    {\n                        fromLineNumber: 1,\n                        toLineNumber: this._textModel.getLineCount(),\n                    },\n                ],\n            });\n        }\n        const initializeTokenization = () => {\n            if (this._textModel.isTooLargeForTokenization()) {\n                return [null, null];\n            }\n            const tokenizationSupport = TokenizationRegistry.get(this.getLanguageId());\n            if (!tokenizationSupport) {\n                return [null, null];\n            }\n            let initialState;\n            try {\n                initialState = tokenizationSupport.getInitialState();\n            }\n            catch (e) {\n                onUnexpectedError(e);\n                return [null, null];\n            }\n            return [tokenizationSupport, initialState];\n        };\n        const [tokenizationSupport, initialState] = initializeTokenization();\n        if (tokenizationSupport && initialState) {\n            this._tokenizer = new TokenizerWithStateStoreAndTextModel(this._textModel.getLineCount(), tokenizationSupport, this._textModel, this._languageIdCodec);\n        }\n        else {\n            this._tokenizer = null;\n        }\n        this._backgroundTokenizer.clear();\n        this._defaultBackgroundTokenizer = null;\n        if (this._tokenizer) {\n            const b = {\n                setTokens: (tokens) => {\n                    this.setTokens(tokens);\n                },\n                backgroundTokenizationFinished: () => {\n                    if (this._backgroundTokenizationState === 2 /* BackgroundTokenizationState.Completed */) {\n                        // We already did a full tokenization and don't go back to progressing.\n                        return;\n                    }\n                    const newState = 2 /* BackgroundTokenizationState.Completed */;\n                    this._backgroundTokenizationState = newState;\n                    this._onDidChangeBackgroundTokenizationState.fire();\n                },\n                setEndState: (lineNumber, state) => {\n                    var _a, _b, _c;\n                    if (!state) {\n                        throw new BugIndicatingError();\n                    }\n                    const firstInvalidEndStateLineNumber = (_b = (_a = this._tokenizer) === null || _a === void 0 ? void 0 : _a.store.getFirstInvalidEndStateLineNumber()) !== null && _b !== void 0 ? _b : undefined;\n                    if (firstInvalidEndStateLineNumber !== undefined && lineNumber >= firstInvalidEndStateLineNumber) {\n                        // Don't accept states for definitely valid states\n                        (_c = this._tokenizer) === null || _c === void 0 ? void 0 : _c.store.setEndState(lineNumber, state);\n                    }\n                },\n            };\n            if (tokenizationSupport && tokenizationSupport.createBackgroundTokenizer && !tokenizationSupport.backgroundTokenizerShouldOnlyVerifyTokens) {\n                this._backgroundTokenizer.value = tokenizationSupport.createBackgroundTokenizer(this._textModel, b);\n            }\n            if (!this._backgroundTokenizer.value) {\n                this._backgroundTokenizer.value = this._defaultBackgroundTokenizer =\n                    new DefaultBackgroundTokenizer(this._tokenizer, b);\n                this._defaultBackgroundTokenizer.handleChanges();\n            }\n            if ((tokenizationSupport === null || tokenizationSupport === void 0 ? void 0 : tokenizationSupport.backgroundTokenizerShouldOnlyVerifyTokens) && tokenizationSupport.createBackgroundTokenizer) {\n                this._debugBackgroundTokens = new ContiguousTokensStore(this._languageIdCodec);\n                this._debugBackgroundStates = new TrackingTokenizationStateStore(this._textModel.getLineCount());\n                this._debugBackgroundTokenizer.clear();\n                this._debugBackgroundTokenizer.value = tokenizationSupport.createBackgroundTokenizer(this._textModel, {\n                    setTokens: (tokens) => {\n                        var _a;\n                        (_a = this._debugBackgroundTokens) === null || _a === void 0 ? void 0 : _a.setMultilineTokens(tokens, this._textModel);\n                    },\n                    backgroundTokenizationFinished() {\n                        // NO OP\n                    },\n                    setEndState: (lineNumber, state) => {\n                        var _a;\n                        (_a = this._debugBackgroundStates) === null || _a === void 0 ? void 0 : _a.setEndState(lineNumber, state);\n                    },\n                });\n            }\n            else {\n                this._debugBackgroundTokens = undefined;\n                this._debugBackgroundStates = undefined;\n                this._debugBackgroundTokenizer.value = undefined;\n            }\n        }\n        this.refreshAllVisibleLineTokens();\n    }\n    handleDidChangeAttached() {\n        var _a;\n        (_a = this._defaultBackgroundTokenizer) === null || _a === void 0 ? void 0 : _a.handleChanges();\n    }\n    handleDidChangeContent(e) {\n        var _a, _b, _c;\n        if (e.isFlush) {\n            // Don't fire the event, as the view might not have got the text change event yet\n            this.resetTokenization(false);\n        }\n        else if (!e.isEolChange) { // We don't have to do anything on an EOL change\n            for (const c of e.changes) {\n                const [eolCount, firstLineLength] = countEOL(c.text);\n                this._tokens.acceptEdit(c.range, eolCount, firstLineLength);\n                (_a = this._debugBackgroundTokens) === null || _a === void 0 ? void 0 : _a.acceptEdit(c.range, eolCount, firstLineLength);\n            }\n            (_b = this._debugBackgroundStates) === null || _b === void 0 ? void 0 : _b.acceptChanges(e.changes);\n            if (this._tokenizer) {\n                this._tokenizer.store.acceptChanges(e.changes);\n            }\n            (_c = this._defaultBackgroundTokenizer) === null || _c === void 0 ? void 0 : _c.handleChanges();\n        }\n    }\n    setTokens(tokens) {\n        const { changes } = this._tokens.setMultilineTokens(tokens, this._textModel);\n        if (changes.length > 0) {\n            this._onDidChangeTokens.fire({ semanticTokensApplied: false, ranges: changes, });\n        }\n        return { changes: changes };\n    }\n    refreshAllVisibleLineTokens() {\n        const ranges = LineRange.joinMany([...this._attachedViewStates].map(([_, s]) => s.lineRanges));\n        this.refreshRanges(ranges);\n    }\n    refreshRanges(ranges) {\n        for (const range of ranges) {\n            this.refreshRange(range.startLineNumber, range.endLineNumberExclusive - 1);\n        }\n    }\n    refreshRange(startLineNumber, endLineNumber) {\n        var _a, _b;\n        if (!this._tokenizer) {\n            return;\n        }\n        startLineNumber = Math.max(1, Math.min(this._textModel.getLineCount(), startLineNumber));\n        endLineNumber = Math.min(this._textModel.getLineCount(), endLineNumber);\n        const builder = new ContiguousMultilineTokensBuilder();\n        const { heuristicTokens } = this._tokenizer.tokenizeHeuristically(builder, startLineNumber, endLineNumber);\n        const changedTokens = this.setTokens(builder.finalize());\n        if (heuristicTokens) {\n            // We overrode tokens with heuristically computed ones.\n            // Because old states might get reused (thus stopping invalidation),\n            // we have to explicitly request the tokens for the changed ranges again.\n            for (const c of changedTokens.changes) {\n                (_a = this._backgroundTokenizer.value) === null || _a === void 0 ? void 0 : _a.requestTokens(c.fromLineNumber, c.toLineNumber + 1);\n            }\n        }\n        (_b = this._defaultBackgroundTokenizer) === null || _b === void 0 ? void 0 : _b.checkFinished();\n    }\n    forceTokenization(lineNumber) {\n        var _a, _b;\n        const builder = new ContiguousMultilineTokensBuilder();\n        (_a = this._tokenizer) === null || _a === void 0 ? void 0 : _a.updateTokensUntilLine(builder, lineNumber);\n        this.setTokens(builder.finalize());\n        (_b = this._defaultBackgroundTokenizer) === null || _b === void 0 ? void 0 : _b.checkFinished();\n    }\n    isCheapToTokenize(lineNumber) {\n        if (!this._tokenizer) {\n            return true;\n        }\n        return this._tokenizer.isCheapToTokenize(lineNumber);\n    }\n    tokenizeIfCheap(lineNumber) {\n        if (this.isCheapToTokenize(lineNumber)) {\n            this.forceTokenization(lineNumber);\n        }\n    }\n    getLineTokens(lineNumber) {\n        var _a;\n        const lineText = this._textModel.getLineContent(lineNumber);\n        const result = this._tokens.getTokens(this._textModel.getLanguageId(), lineNumber - 1, lineText);\n        if (this._debugBackgroundTokens && this._debugBackgroundStates && this._tokenizer) {\n            if (this._debugBackgroundStates.getFirstInvalidEndStateLineNumberOrMax() > lineNumber && this._tokenizer.store.getFirstInvalidEndStateLineNumberOrMax() > lineNumber) {\n                const backgroundResult = this._debugBackgroundTokens.getTokens(this._textModel.getLanguageId(), lineNumber - 1, lineText);\n                if (!result.equals(backgroundResult) && ((_a = this._debugBackgroundTokenizer.value) === null || _a === void 0 ? void 0 : _a.reportMismatchingTokens)) {\n                    this._debugBackgroundTokenizer.value.reportMismatchingTokens(lineNumber);\n                }\n            }\n        }\n        return result;\n    }\n    getTokenTypeIfInsertingCharacter(lineNumber, column, character) {\n        if (!this._tokenizer) {\n            return 0 /* StandardTokenType.Other */;\n        }\n        const position = this._textModel.validatePosition(new Position(lineNumber, column));\n        this.forceTokenization(position.lineNumber);\n        return this._tokenizer.getTokenTypeIfInsertingCharacter(position, character);\n    }\n    tokenizeLineWithEdit(position, length, newText) {\n        if (!this._tokenizer) {\n            return null;\n        }\n        const validatedPosition = this._textModel.validatePosition(position);\n        this.forceTokenization(validatedPosition.lineNumber);\n        return this._tokenizer.tokenizeLineWithEdit(validatedPosition, length, newText);\n    }\n    get hasTokens() {\n        return this._tokens.hasTokens;\n    }\n}\nclass AttachedViewHandler extends Disposable {\n    get lineRanges() { return this._lineRanges; }\n    constructor(_refreshTokens) {\n        super();\n        this._refreshTokens = _refreshTokens;\n        this.runner = this._register(new RunOnceScheduler(() => this.update(), 50));\n        this._computedLineRanges = [];\n        this._lineRanges = [];\n    }\n    update() {\n        if (equals(this._computedLineRanges, this._lineRanges)) {\n            return;\n        }\n        this._computedLineRanges = this._lineRanges;\n        this._refreshTokens();\n    }\n    handleStateChange(state) {\n        this._lineRanges = state.visibleLineRanges;\n        if (state.stabilized) {\n            this.runner.cancel();\n            this.update();\n        }\n        else {\n            this.runner.schedule();\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { ArrayQueue, pushMany } from '../../../base/common/arrays.js';\nimport { Color } from '../../../base/common/color.js';\nimport { BugIndicatingError, illegalArgument, onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { combinedDisposable, Disposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { normalizeIndentation } from '../core/indentation.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nimport * as model from '../model.js';\nimport { BracketPairsTextModelPart } from './bracketPairsTextModelPart/bracketPairsImpl.js';\nimport { ColorizedBracketPairsDecorationProvider } from './bracketPairsTextModelPart/colorizedBracketPairsDecorationProvider.js';\nimport { EditStack } from './editStack.js';\nimport { GuidesTextModelPart } from './guidesTextModelPart.js';\nimport { guessIndentation } from './indentationGuesser.js';\nimport { IntervalNode, IntervalTree, recomputeMaxEnd } from './intervalTree.js';\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer/pieceTreeTextBuffer.js';\nimport { PieceTreeTextBufferBuilder } from './pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js';\nimport { SearchParams, TextModelSearch } from './textModelSearch.js';\nimport { TokenizationTextModelPart } from './tokenizationTextModelPart.js';\nimport { InternalModelContentChangeEvent, LineInjectedText, ModelInjectedTextChangedEvent, ModelRawContentChangedEvent, ModelRawEOLChanged, ModelRawFlush, ModelRawLineChanged, ModelRawLinesDeleted, ModelRawLinesInserted } from '../textModelEvents.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { LineRange } from '../core/lineRange.js';\nexport function createTextBufferFactory(text) {\n    const builder = new PieceTreeTextBufferBuilder();\n    builder.acceptChunk(text);\n    return builder.finish();\n}\nexport function createTextBufferFactoryFromSnapshot(snapshot) {\n    const builder = new PieceTreeTextBufferBuilder();\n    let chunk;\n    while (typeof (chunk = snapshot.read()) === 'string') {\n        builder.acceptChunk(chunk);\n    }\n    return builder.finish();\n}\nexport function createTextBuffer(value, defaultEOL) {\n    let factory;\n    if (typeof value === 'string') {\n        factory = createTextBufferFactory(value);\n    }\n    else if (model.isITextSnapshot(value)) {\n        factory = createTextBufferFactoryFromSnapshot(value);\n    }\n    else {\n        factory = value;\n    }\n    return factory.create(defaultEOL);\n}\nlet MODEL_ID = 0;\nconst LIMIT_FIND_COUNT = 999;\nconst LONG_LINE_BOUNDARY = 10000;\nclass TextModelSnapshot {\n    constructor(source) {\n        this._source = source;\n        this._eos = false;\n    }\n    read() {\n        if (this._eos) {\n            return null;\n        }\n        const result = [];\n        let resultCnt = 0;\n        let resultLength = 0;\n        do {\n            const tmp = this._source.read();\n            if (tmp === null) {\n                // end-of-stream\n                this._eos = true;\n                if (resultCnt === 0) {\n                    return null;\n                }\n                else {\n                    return result.join('');\n                }\n            }\n            if (tmp.length > 0) {\n                result[resultCnt++] = tmp;\n                resultLength += tmp.length;\n            }\n            if (resultLength >= 64 * 1024) {\n                return result.join('');\n            }\n        } while (true);\n    }\n}\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\nexport let TextModel = class TextModel extends Disposable {\n    static resolveOptions(textBuffer, options) {\n        if (options.detectIndentation) {\n            const guessedIndentation = guessIndentation(textBuffer, options.tabSize, options.insertSpaces);\n            return new model.TextModelResolvedOptions({\n                tabSize: guessedIndentation.tabSize,\n                indentSize: 'tabSize',\n                insertSpaces: guessedIndentation.insertSpaces,\n                trimAutoWhitespace: options.trimAutoWhitespace,\n                defaultEOL: options.defaultEOL,\n                bracketPairColorizationOptions: options.bracketPairColorizationOptions,\n            });\n        }\n        return new model.TextModelResolvedOptions(options);\n    }\n    get onDidChangeLanguage() { return this._tokenizationTextModelPart.onDidChangeLanguage; }\n    get onDidChangeLanguageConfiguration() { return this._tokenizationTextModelPart.onDidChangeLanguageConfiguration; }\n    get onDidChangeTokens() { return this._tokenizationTextModelPart.onDidChangeTokens; }\n    onDidChangeContent(listener) {\n        return this._eventEmitter.slowEvent((e) => listener(e.contentChangedEvent));\n    }\n    onDidChangeContentOrInjectedText(listener) {\n        return combinedDisposable(this._eventEmitter.fastEvent(e => listener(e)), this._onDidChangeInjectedText.event(e => listener(e)));\n    }\n    _isDisposing() { return this.__isDisposing; }\n    get tokenization() { return this._tokenizationTextModelPart; }\n    get bracketPairs() { return this._bracketPairs; }\n    get guides() { return this._guidesTextModelPart; }\n    constructor(source, languageIdOrSelection, creationOptions, associatedResource = null, _undoRedoService, _languageService, _languageConfigurationService) {\n        super();\n        this._undoRedoService = _undoRedoService;\n        this._languageService = _languageService;\n        this._languageConfigurationService = _languageConfigurationService;\n        //#region Events\n        this._onWillDispose = this._register(new Emitter());\n        this.onWillDispose = this._onWillDispose.event;\n        this._onDidChangeDecorations = this._register(new DidChangeDecorationsEmitter(affectedInjectedTextLines => this.handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines)));\n        this.onDidChangeDecorations = this._onDidChangeDecorations.event;\n        this._onDidChangeOptions = this._register(new Emitter());\n        this.onDidChangeOptions = this._onDidChangeOptions.event;\n        this._onDidChangeAttached = this._register(new Emitter());\n        this.onDidChangeAttached = this._onDidChangeAttached.event;\n        this._onDidChangeInjectedText = this._register(new Emitter());\n        this._eventEmitter = this._register(new DidChangeContentEmitter());\n        this._languageSelectionListener = this._register(new MutableDisposable());\n        this._deltaDecorationCallCnt = 0;\n        this._attachedViews = new AttachedViews();\n        // Generate a new unique model id\n        MODEL_ID++;\n        this.id = '$model' + MODEL_ID;\n        this.isForSimpleWidget = creationOptions.isForSimpleWidget;\n        if (typeof associatedResource === 'undefined' || associatedResource === null) {\n            this._associatedResource = URI.parse('inmemory://model/' + MODEL_ID);\n        }\n        else {\n            this._associatedResource = associatedResource;\n        }\n        this._attachedEditorCount = 0;\n        const { textBuffer, disposable } = createTextBuffer(source, creationOptions.defaultEOL);\n        this._buffer = textBuffer;\n        this._bufferDisposable = disposable;\n        this._options = TextModel.resolveOptions(this._buffer, creationOptions);\n        const languageId = (typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId);\n        if (typeof languageIdOrSelection !== 'string') {\n            this._languageSelectionListener.value = languageIdOrSelection.onDidChange(() => this._setLanguage(languageIdOrSelection.languageId));\n        }\n        this._bracketPairs = this._register(new BracketPairsTextModelPart(this, this._languageConfigurationService));\n        this._guidesTextModelPart = this._register(new GuidesTextModelPart(this, this._languageConfigurationService));\n        this._decorationProvider = this._register(new ColorizedBracketPairsDecorationProvider(this));\n        this._tokenizationTextModelPart = new TokenizationTextModelPart(this._languageService, this._languageConfigurationService, this, this._bracketPairs, languageId, this._attachedViews);\n        const bufferLineCount = this._buffer.getLineCount();\n        const bufferTextLength = this._buffer.getValueLengthInRange(new Range(1, 1, bufferLineCount, this._buffer.getLineLength(bufferLineCount) + 1), 0 /* model.EndOfLinePreference.TextDefined */);\n        // !!! Make a decision in the ctor and permanently respect this decision !!!\n        // If a model is too large at construction time, it will never get tokenized,\n        // under no circumstances.\n        if (creationOptions.largeFileOptimizations) {\n            this._isTooLargeForTokenization = ((bufferTextLength > TextModel.LARGE_FILE_SIZE_THRESHOLD)\n                || (bufferLineCount > TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD));\n        }\n        else {\n            this._isTooLargeForTokenization = false;\n        }\n        this._isTooLargeForSyncing = (bufferTextLength > TextModel._MODEL_SYNC_LIMIT);\n        this._versionId = 1;\n        this._alternativeVersionId = 1;\n        this._initialUndoRedoSnapshot = null;\n        this._isDisposed = false;\n        this.__isDisposing = false;\n        this._instanceId = strings.singleLetterHash(MODEL_ID);\n        this._lastDecorationId = 0;\n        this._decorations = Object.create(null);\n        this._decorationsTree = new DecorationsTrees();\n        this._commandManager = new EditStack(this, this._undoRedoService);\n        this._isUndoing = false;\n        this._isRedoing = false;\n        this._trimAutoWhitespaceLines = null;\n        this._register(this._decorationProvider.onDidChange(() => {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._onDidChangeDecorations.fire();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }));\n        this._languageService.requestRichLanguageFeatures(languageId);\n    }\n    dispose() {\n        this.__isDisposing = true;\n        this._onWillDispose.fire();\n        this._tokenizationTextModelPart.dispose();\n        this._isDisposed = true;\n        super.dispose();\n        this._bufferDisposable.dispose();\n        this.__isDisposing = false;\n        // Manually release reference to previous text buffer to avoid large leaks\n        // in case someone leaks a TextModel reference\n        const emptyDisposedTextBuffer = new PieceTreeTextBuffer([], '', '\\n', false, false, true, true);\n        emptyDisposedTextBuffer.dispose();\n        this._buffer = emptyDisposedTextBuffer;\n        this._bufferDisposable = Disposable.None;\n    }\n    _assertNotDisposed() {\n        if (this._isDisposed) {\n            throw new Error('Model is disposed!');\n        }\n    }\n    _emitContentChangedEvent(rawChange, change) {\n        if (this.__isDisposing) {\n            // Do not confuse listeners by emitting any event after disposing\n            return;\n        }\n        this._tokenizationTextModelPart.handleDidChangeContent(change);\n        this._bracketPairs.handleDidChangeContent(change);\n        this._eventEmitter.fire(new InternalModelContentChangeEvent(rawChange, change));\n    }\n    setValue(value) {\n        this._assertNotDisposed();\n        if (value === null || value === undefined) {\n            throw illegalArgument();\n        }\n        const { textBuffer, disposable } = createTextBuffer(value, this._options.defaultEOL);\n        this._setValueFromTextBuffer(textBuffer, disposable);\n    }\n    _createContentChanged2(range, rangeOffset, rangeLength, text, isUndoing, isRedoing, isFlush, isEolChange) {\n        return {\n            changes: [{\n                    range: range,\n                    rangeOffset: rangeOffset,\n                    rangeLength: rangeLength,\n                    text: text,\n                }],\n            eol: this._buffer.getEOL(),\n            isEolChange: isEolChange,\n            versionId: this.getVersionId(),\n            isUndoing: isUndoing,\n            isRedoing: isRedoing,\n            isFlush: isFlush\n        };\n    }\n    _setValueFromTextBuffer(textBuffer, textBufferDisposable) {\n        this._assertNotDisposed();\n        const oldFullModelRange = this.getFullModelRange();\n        const oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n        const endLineNumber = this.getLineCount();\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        this._buffer = textBuffer;\n        this._bufferDisposable.dispose();\n        this._bufferDisposable = textBufferDisposable;\n        this._increaseVersionId();\n        // Destroy all my decorations\n        this._decorations = Object.create(null);\n        this._decorationsTree = new DecorationsTrees();\n        // Destroy my edit history and settings\n        this._commandManager.clear();\n        this._trimAutoWhitespaceLines = null;\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent([\n            new ModelRawFlush()\n        ], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, true, false));\n    }\n    setEOL(eol) {\n        this._assertNotDisposed();\n        const newEOL = (eol === 1 /* model.EndOfLineSequence.CRLF */ ? '\\r\\n' : '\\n');\n        if (this._buffer.getEOL() === newEOL) {\n            // Nothing to do\n            return;\n        }\n        const oldFullModelRange = this.getFullModelRange();\n        const oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n        const endLineNumber = this.getLineCount();\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        this._onBeforeEOLChange();\n        this._buffer.setEOL(newEOL);\n        this._increaseVersionId();\n        this._onAfterEOLChange();\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent([\n            new ModelRawEOLChanged()\n        ], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, false, true));\n    }\n    _onBeforeEOLChange() {\n        // Ensure all decorations get their `range` set.\n        this._decorationsTree.ensureAllNodesHaveRanges(this);\n    }\n    _onAfterEOLChange() {\n        // Transform back `range` to offsets\n        const versionId = this.getVersionId();\n        const allDecorations = this._decorationsTree.collectNodesPostOrder();\n        for (let i = 0, len = allDecorations.length; i < len; i++) {\n            const node = allDecorations[i];\n            const range = node.range; // the range is defined due to `_onBeforeEOLChange`\n            const delta = node.cachedAbsoluteStart - node.start;\n            const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n            const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n            node.cachedAbsoluteStart = startOffset;\n            node.cachedAbsoluteEnd = endOffset;\n            node.cachedVersionId = versionId;\n            node.start = startOffset - delta;\n            node.end = endOffset - delta;\n            recomputeMaxEnd(node);\n        }\n    }\n    onBeforeAttached() {\n        this._attachedEditorCount++;\n        if (this._attachedEditorCount === 1) {\n            this._tokenizationTextModelPart.handleDidChangeAttached();\n            this._onDidChangeAttached.fire(undefined);\n        }\n        return this._attachedViews.attachView();\n    }\n    onBeforeDetached(view) {\n        this._attachedEditorCount--;\n        if (this._attachedEditorCount === 0) {\n            this._tokenizationTextModelPart.handleDidChangeAttached();\n            this._onDidChangeAttached.fire(undefined);\n        }\n        this._attachedViews.detachView(view);\n    }\n    isAttachedToEditor() {\n        return this._attachedEditorCount > 0;\n    }\n    getAttachedEditorCount() {\n        return this._attachedEditorCount;\n    }\n    isTooLargeForSyncing() {\n        return this._isTooLargeForSyncing;\n    }\n    isTooLargeForTokenization() {\n        return this._isTooLargeForTokenization;\n    }\n    isDisposed() {\n        return this._isDisposed;\n    }\n    isDominatedByLongLines() {\n        this._assertNotDisposed();\n        if (this.isTooLargeForTokenization()) {\n            // Cannot word wrap huge files anyways, so it doesn't really matter\n            return false;\n        }\n        let smallLineCharCount = 0;\n        let longLineCharCount = 0;\n        const lineCount = this._buffer.getLineCount();\n        for (let lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\n            const lineLength = this._buffer.getLineLength(lineNumber);\n            if (lineLength >= LONG_LINE_BOUNDARY) {\n                longLineCharCount += lineLength;\n            }\n            else {\n                smallLineCharCount += lineLength;\n            }\n        }\n        return (longLineCharCount > smallLineCharCount);\n    }\n    get uri() {\n        return this._associatedResource;\n    }\n    //#region Options\n    getOptions() {\n        this._assertNotDisposed();\n        return this._options;\n    }\n    getFormattingOptions() {\n        return {\n            tabSize: this._options.indentSize,\n            insertSpaces: this._options.insertSpaces\n        };\n    }\n    updateOptions(_newOpts) {\n        this._assertNotDisposed();\n        const tabSize = (typeof _newOpts.tabSize !== 'undefined') ? _newOpts.tabSize : this._options.tabSize;\n        const indentSize = (typeof _newOpts.indentSize !== 'undefined') ? _newOpts.indentSize : this._options.originalIndentSize;\n        const insertSpaces = (typeof _newOpts.insertSpaces !== 'undefined') ? _newOpts.insertSpaces : this._options.insertSpaces;\n        const trimAutoWhitespace = (typeof _newOpts.trimAutoWhitespace !== 'undefined') ? _newOpts.trimAutoWhitespace : this._options.trimAutoWhitespace;\n        const bracketPairColorizationOptions = (typeof _newOpts.bracketColorizationOptions !== 'undefined') ? _newOpts.bracketColorizationOptions : this._options.bracketPairColorizationOptions;\n        const newOpts = new model.TextModelResolvedOptions({\n            tabSize: tabSize,\n            indentSize: indentSize,\n            insertSpaces: insertSpaces,\n            defaultEOL: this._options.defaultEOL,\n            trimAutoWhitespace: trimAutoWhitespace,\n            bracketPairColorizationOptions,\n        });\n        if (this._options.equals(newOpts)) {\n            return;\n        }\n        const e = this._options.createChangeEvent(newOpts);\n        this._options = newOpts;\n        this._bracketPairs.handleDidChangeOptions(e);\n        this._decorationProvider.handleDidChangeOptions(e);\n        this._onDidChangeOptions.fire(e);\n    }\n    detectIndentation(defaultInsertSpaces, defaultTabSize) {\n        this._assertNotDisposed();\n        const guessedIndentation = guessIndentation(this._buffer, defaultTabSize, defaultInsertSpaces);\n        this.updateOptions({\n            insertSpaces: guessedIndentation.insertSpaces,\n            tabSize: guessedIndentation.tabSize,\n            indentSize: guessedIndentation.tabSize, // TODO@Alex: guess indentSize independent of tabSize\n        });\n    }\n    normalizeIndentation(str) {\n        this._assertNotDisposed();\n        return normalizeIndentation(str, this._options.indentSize, this._options.insertSpaces);\n    }\n    //#endregion\n    //#region Reading\n    getVersionId() {\n        this._assertNotDisposed();\n        return this._versionId;\n    }\n    mightContainRTL() {\n        return this._buffer.mightContainRTL();\n    }\n    mightContainUnusualLineTerminators() {\n        return this._buffer.mightContainUnusualLineTerminators();\n    }\n    removeUnusualLineTerminators(selections = null) {\n        const matches = this.findMatches(strings.UNUSUAL_LINE_TERMINATORS.source, false, true, false, null, false, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n        this._buffer.resetMightContainUnusualLineTerminators();\n        this.pushEditOperations(selections, matches.map(m => ({ range: m.range, text: null })), () => null);\n    }\n    mightContainNonBasicASCII() {\n        return this._buffer.mightContainNonBasicASCII();\n    }\n    getAlternativeVersionId() {\n        this._assertNotDisposed();\n        return this._alternativeVersionId;\n    }\n    getInitialUndoRedoSnapshot() {\n        this._assertNotDisposed();\n        return this._initialUndoRedoSnapshot;\n    }\n    getOffsetAt(rawPosition) {\n        this._assertNotDisposed();\n        const position = this._validatePosition(rawPosition.lineNumber, rawPosition.column, 0 /* StringOffsetValidationType.Relaxed */);\n        return this._buffer.getOffsetAt(position.lineNumber, position.column);\n    }\n    getPositionAt(rawOffset) {\n        this._assertNotDisposed();\n        const offset = (Math.min(this._buffer.getLength(), Math.max(0, rawOffset)));\n        return this._buffer.getPositionAt(offset);\n    }\n    _increaseVersionId() {\n        this._versionId = this._versionId + 1;\n        this._alternativeVersionId = this._versionId;\n    }\n    _overwriteVersionId(versionId) {\n        this._versionId = versionId;\n    }\n    _overwriteAlternativeVersionId(newAlternativeVersionId) {\n        this._alternativeVersionId = newAlternativeVersionId;\n    }\n    _overwriteInitialUndoRedoSnapshot(newInitialUndoRedoSnapshot) {\n        this._initialUndoRedoSnapshot = newInitialUndoRedoSnapshot;\n    }\n    getValue(eol, preserveBOM = false) {\n        this._assertNotDisposed();\n        const fullModelRange = this.getFullModelRange();\n        const fullModelValue = this.getValueInRange(fullModelRange, eol);\n        if (preserveBOM) {\n            return this._buffer.getBOM() + fullModelValue;\n        }\n        return fullModelValue;\n    }\n    createSnapshot(preserveBOM = false) {\n        return new TextModelSnapshot(this._buffer.createSnapshot(preserveBOM));\n    }\n    getValueLength(eol, preserveBOM = false) {\n        this._assertNotDisposed();\n        const fullModelRange = this.getFullModelRange();\n        const fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\n        if (preserveBOM) {\n            return this._buffer.getBOM().length + fullModelValue;\n        }\n        return fullModelValue;\n    }\n    getValueInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getValueInRange(this.validateRange(rawRange), eol);\n    }\n    getValueLengthInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getValueLengthInRange(this.validateRange(rawRange), eol);\n    }\n    getCharacterCountInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getCharacterCountInRange(this.validateRange(rawRange), eol);\n    }\n    getLineCount() {\n        this._assertNotDisposed();\n        return this._buffer.getLineCount();\n    }\n    getLineContent(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineContent(lineNumber);\n    }\n    getLineLength(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLength(lineNumber);\n    }\n    getLinesContent() {\n        this._assertNotDisposed();\n        return this._buffer.getLinesContent();\n    }\n    getEOL() {\n        this._assertNotDisposed();\n        return this._buffer.getEOL();\n    }\n    getEndOfLineSequence() {\n        this._assertNotDisposed();\n        return (this._buffer.getEOL() === '\\n'\n            ? 0 /* model.EndOfLineSequence.LF */\n            : 1 /* model.EndOfLineSequence.CRLF */);\n    }\n    getLineMinColumn(lineNumber) {\n        this._assertNotDisposed();\n        return 1;\n    }\n    getLineMaxColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLength(lineNumber) + 1;\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineFirstNonWhitespaceColumn(lineNumber);\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLastNonWhitespaceColumn(lineNumber);\n    }\n    /**\n     * Validates `range` is within buffer bounds, but allows it to sit in between surrogate pairs, etc.\n     * Will try to not allocate if possible.\n     */\n    _validateRangeRelaxedNoAllocations(range) {\n        const linesCount = this._buffer.getLineCount();\n        const initialStartLineNumber = range.startLineNumber;\n        const initialStartColumn = range.startColumn;\n        let startLineNumber = Math.floor((typeof initialStartLineNumber === 'number' && !isNaN(initialStartLineNumber)) ? initialStartLineNumber : 1);\n        let startColumn = Math.floor((typeof initialStartColumn === 'number' && !isNaN(initialStartColumn)) ? initialStartColumn : 1);\n        if (startLineNumber < 1) {\n            startLineNumber = 1;\n            startColumn = 1;\n        }\n        else if (startLineNumber > linesCount) {\n            startLineNumber = linesCount;\n            startColumn = this.getLineMaxColumn(startLineNumber);\n        }\n        else {\n            if (startColumn <= 1) {\n                startColumn = 1;\n            }\n            else {\n                const maxColumn = this.getLineMaxColumn(startLineNumber);\n                if (startColumn >= maxColumn) {\n                    startColumn = maxColumn;\n                }\n            }\n        }\n        const initialEndLineNumber = range.endLineNumber;\n        const initialEndColumn = range.endColumn;\n        let endLineNumber = Math.floor((typeof initialEndLineNumber === 'number' && !isNaN(initialEndLineNumber)) ? initialEndLineNumber : 1);\n        let endColumn = Math.floor((typeof initialEndColumn === 'number' && !isNaN(initialEndColumn)) ? initialEndColumn : 1);\n        if (endLineNumber < 1) {\n            endLineNumber = 1;\n            endColumn = 1;\n        }\n        else if (endLineNumber > linesCount) {\n            endLineNumber = linesCount;\n            endColumn = this.getLineMaxColumn(endLineNumber);\n        }\n        else {\n            if (endColumn <= 1) {\n                endColumn = 1;\n            }\n            else {\n                const maxColumn = this.getLineMaxColumn(endLineNumber);\n                if (endColumn >= maxColumn) {\n                    endColumn = maxColumn;\n                }\n            }\n        }\n        if (initialStartLineNumber === startLineNumber\n            && initialStartColumn === startColumn\n            && initialEndLineNumber === endLineNumber\n            && initialEndColumn === endColumn\n            && range instanceof Range\n            && !(range instanceof Selection)) {\n            return range;\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    _isValidPosition(lineNumber, column, validationType) {\n        if (typeof lineNumber !== 'number' || typeof column !== 'number') {\n            return false;\n        }\n        if (isNaN(lineNumber) || isNaN(column)) {\n            return false;\n        }\n        if (lineNumber < 1 || column < 1) {\n            return false;\n        }\n        if ((lineNumber | 0) !== lineNumber || (column | 0) !== column) {\n            return false;\n        }\n        const lineCount = this._buffer.getLineCount();\n        if (lineNumber > lineCount) {\n            return false;\n        }\n        if (column === 1) {\n            return true;\n        }\n        const maxColumn = this.getLineMaxColumn(lineNumber);\n        if (column > maxColumn) {\n            return false;\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            // !!At this point, column > 1\n            const charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n            if (strings.isHighSurrogate(charCodeBefore)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _validatePosition(_lineNumber, _column, validationType) {\n        const lineNumber = Math.floor((typeof _lineNumber === 'number' && !isNaN(_lineNumber)) ? _lineNumber : 1);\n        const column = Math.floor((typeof _column === 'number' && !isNaN(_column)) ? _column : 1);\n        const lineCount = this._buffer.getLineCount();\n        if (lineNumber < 1) {\n            return new Position(1, 1);\n        }\n        if (lineNumber > lineCount) {\n            return new Position(lineCount, this.getLineMaxColumn(lineCount));\n        }\n        if (column <= 1) {\n            return new Position(lineNumber, 1);\n        }\n        const maxColumn = this.getLineMaxColumn(lineNumber);\n        if (column >= maxColumn) {\n            return new Position(lineNumber, maxColumn);\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            // If the position would end up in the middle of a high-low surrogate pair,\n            // we move it to before the pair\n            // !!At this point, column > 1\n            const charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n            if (strings.isHighSurrogate(charCodeBefore)) {\n                return new Position(lineNumber, column - 1);\n            }\n        }\n        return new Position(lineNumber, column);\n    }\n    validatePosition(position) {\n        const validationType = 1 /* StringOffsetValidationType.SurrogatePairs */;\n        this._assertNotDisposed();\n        // Avoid object allocation and cover most likely case\n        if (position instanceof Position) {\n            if (this._isValidPosition(position.lineNumber, position.column, validationType)) {\n                return position;\n            }\n        }\n        return this._validatePosition(position.lineNumber, position.column, validationType);\n    }\n    _isValidRange(range, validationType) {\n        const startLineNumber = range.startLineNumber;\n        const startColumn = range.startColumn;\n        const endLineNumber = range.endLineNumber;\n        const endColumn = range.endColumn;\n        if (!this._isValidPosition(startLineNumber, startColumn, 0 /* StringOffsetValidationType.Relaxed */)) {\n            return false;\n        }\n        if (!this._isValidPosition(endLineNumber, endColumn, 0 /* StringOffsetValidationType.Relaxed */)) {\n            return false;\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            const charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\n            const charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\n            const startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n            const endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n            if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n                return true;\n            }\n            return false;\n        }\n        return true;\n    }\n    validateRange(_range) {\n        const validationType = 1 /* StringOffsetValidationType.SurrogatePairs */;\n        this._assertNotDisposed();\n        // Avoid object allocation and cover most likely case\n        if ((_range instanceof Range) && !(_range instanceof Selection)) {\n            if (this._isValidRange(_range, validationType)) {\n                return _range;\n            }\n        }\n        const start = this._validatePosition(_range.startLineNumber, _range.startColumn, 0 /* StringOffsetValidationType.Relaxed */);\n        const end = this._validatePosition(_range.endLineNumber, _range.endColumn, 0 /* StringOffsetValidationType.Relaxed */);\n        const startLineNumber = start.lineNumber;\n        const startColumn = start.column;\n        const endLineNumber = end.lineNumber;\n        const endColumn = end.column;\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            const charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\n            const charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\n            const startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n            const endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n            if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n                return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            }\n            if (startLineNumber === endLineNumber && startColumn === endColumn) {\n                // do not expand a collapsed range, simply move it to a valid location\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn - 1);\n            }\n            if (startInsideSurrogatePair && endInsideSurrogatePair) {\n                // expand range at both ends\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn + 1);\n            }\n            if (startInsideSurrogatePair) {\n                // only expand range at the start\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn);\n            }\n            // only expand range at the end\n            return new Range(startLineNumber, startColumn, endLineNumber, endColumn + 1);\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    modifyPosition(rawPosition, offset) {\n        this._assertNotDisposed();\n        const candidate = this.getOffsetAt(rawPosition) + offset;\n        return this.getPositionAt(Math.min(this._buffer.getLength(), Math.max(0, candidate)));\n    }\n    getFullModelRange() {\n        this._assertNotDisposed();\n        const lineCount = this.getLineCount();\n        return new Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\n    }\n    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {\n        return this._buffer.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n    }\n    findMatches(searchString, rawSearchScope, isRegex, matchCase, wordSeparators, captureMatches, limitResultCount = LIMIT_FIND_COUNT) {\n        this._assertNotDisposed();\n        let searchRanges = null;\n        if (rawSearchScope !== null) {\n            if (!Array.isArray(rawSearchScope)) {\n                rawSearchScope = [rawSearchScope];\n            }\n            if (rawSearchScope.every((searchScope) => Range.isIRange(searchScope))) {\n                searchRanges = rawSearchScope.map((searchScope) => this.validateRange(searchScope));\n            }\n        }\n        if (searchRanges === null) {\n            searchRanges = [this.getFullModelRange()];\n        }\n        searchRanges = searchRanges.sort((d1, d2) => d1.startLineNumber - d2.startLineNumber || d1.startColumn - d2.startColumn);\n        const uniqueSearchRanges = [];\n        uniqueSearchRanges.push(searchRanges.reduce((prev, curr) => {\n            if (Range.areIntersecting(prev, curr)) {\n                return prev.plusRange(curr);\n            }\n            uniqueSearchRanges.push(prev);\n            return curr;\n        }));\n        let matchMapper;\n        if (!isRegex && searchString.indexOf('\\n') < 0) {\n            // not regex, not multi line\n            const searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n            const searchData = searchParams.parseSearchRequest();\n            if (!searchData) {\n                return [];\n            }\n            matchMapper = (searchRange) => this.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n        }\n        else {\n            matchMapper = (searchRange) => TextModelSearch.findMatches(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchRange, captureMatches, limitResultCount);\n        }\n        return uniqueSearchRanges.map(matchMapper).reduce((arr, matches) => arr.concat(matches), []);\n    }\n    findNextMatch(searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n        this._assertNotDisposed();\n        const searchStart = this.validatePosition(rawSearchStart);\n        if (!isRegex && searchString.indexOf('\\n') < 0) {\n            const searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n            const searchData = searchParams.parseSearchRequest();\n            if (!searchData) {\n                return null;\n            }\n            const lineCount = this.getLineCount();\n            let searchRange = new Range(searchStart.lineNumber, searchStart.column, lineCount, this.getLineMaxColumn(lineCount));\n            let ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n            TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n            if (ret.length > 0) {\n                return ret[0];\n            }\n            searchRange = new Range(1, 1, searchStart.lineNumber, this.getLineMaxColumn(searchStart.lineNumber));\n            ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n            if (ret.length > 0) {\n                return ret[0];\n            }\n            return null;\n        }\n        return TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n    }\n    findPreviousMatch(searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n        this._assertNotDisposed();\n        const searchStart = this.validatePosition(rawSearchStart);\n        return TextModelSearch.findPreviousMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n    }\n    //#endregion\n    //#region Editing\n    pushStackElement() {\n        this._commandManager.pushStackElement();\n    }\n    popStackElement() {\n        this._commandManager.popStackElement();\n    }\n    pushEOL(eol) {\n        const currentEOL = (this.getEOL() === '\\n' ? 0 /* model.EndOfLineSequence.LF */ : 1 /* model.EndOfLineSequence.CRLF */);\n        if (currentEOL === eol) {\n            return;\n        }\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            if (this._initialUndoRedoSnapshot === null) {\n                this._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n            }\n            this._commandManager.pushEOL(eol);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _validateEditOperation(rawOperation) {\n        if (rawOperation instanceof model.ValidAnnotatedEditOperation) {\n            return rawOperation;\n        }\n        return new model.ValidAnnotatedEditOperation(rawOperation.identifier || null, this.validateRange(rawOperation.range), rawOperation.text, rawOperation.forceMoveMarkers || false, rawOperation.isAutoWhitespaceEdit || false, rawOperation._isTracked || false);\n    }\n    _validateEditOperations(rawOperations) {\n        const result = [];\n        for (let i = 0, len = rawOperations.length; i < len; i++) {\n            result[i] = this._validateEditOperation(rawOperations[i]);\n        }\n        return result;\n    }\n    pushEditOperations(beforeCursorState, editOperations, cursorStateComputer, group) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            return this._pushEditOperations(beforeCursorState, this._validateEditOperations(editOperations), cursorStateComputer, group);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _pushEditOperations(beforeCursorState, editOperations, cursorStateComputer, group) {\n        if (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {\n            // Go through each saved line number and insert a trim whitespace edit\n            // if it is safe to do so (no conflicts with other edits).\n            const incomingEdits = editOperations.map((op) => {\n                return {\n                    range: this.validateRange(op.range),\n                    text: op.text\n                };\n            });\n            // Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\n            // We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\n            let editsAreNearCursors = true;\n            if (beforeCursorState) {\n                for (let i = 0, len = beforeCursorState.length; i < len; i++) {\n                    const sel = beforeCursorState[i];\n                    let foundEditNearSel = false;\n                    for (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n                        const editRange = incomingEdits[j].range;\n                        const selIsAbove = editRange.startLineNumber > sel.endLineNumber;\n                        const selIsBelow = sel.startLineNumber > editRange.endLineNumber;\n                        if (!selIsAbove && !selIsBelow) {\n                            foundEditNearSel = true;\n                            break;\n                        }\n                    }\n                    if (!foundEditNearSel) {\n                        editsAreNearCursors = false;\n                        break;\n                    }\n                }\n            }\n            if (editsAreNearCursors) {\n                for (let i = 0, len = this._trimAutoWhitespaceLines.length; i < len; i++) {\n                    const trimLineNumber = this._trimAutoWhitespaceLines[i];\n                    const maxLineColumn = this.getLineMaxColumn(trimLineNumber);\n                    let allowTrimLine = true;\n                    for (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n                        const editRange = incomingEdits[j].range;\n                        const editText = incomingEdits[j].text;\n                        if (trimLineNumber < editRange.startLineNumber || trimLineNumber > editRange.endLineNumber) {\n                            // `trimLine` is completely outside this edit\n                            continue;\n                        }\n                        // At this point:\n                        //   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\n                        if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === maxLineColumn\n                            && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(0) === '\\n') {\n                            // This edit inserts a new line (and maybe other text) after `trimLine`\n                            continue;\n                        }\n                        if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === 1\n                            && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(editText.length - 1) === '\\n') {\n                            // This edit inserts a new line (and maybe other text) before `trimLine`\n                            continue;\n                        }\n                        // Looks like we can't trim this line as it would interfere with an incoming edit\n                        allowTrimLine = false;\n                        break;\n                    }\n                    if (allowTrimLine) {\n                        const trimRange = new Range(trimLineNumber, 1, trimLineNumber, maxLineColumn);\n                        editOperations.push(new model.ValidAnnotatedEditOperation(null, trimRange, null, false, false, false));\n                    }\n                }\n            }\n            this._trimAutoWhitespaceLines = null;\n        }\n        if (this._initialUndoRedoSnapshot === null) {\n            this._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n        }\n        return this._commandManager.pushEditOperation(beforeCursorState, editOperations, cursorStateComputer, group);\n    }\n    _applyUndo(changes, eol, resultingAlternativeVersionId, resultingSelection) {\n        const edits = changes.map((change) => {\n            const rangeStart = this.getPositionAt(change.newPosition);\n            const rangeEnd = this.getPositionAt(change.newEnd);\n            return {\n                range: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n                text: change.oldText\n            };\n        });\n        this._applyUndoRedoEdits(edits, eol, true, false, resultingAlternativeVersionId, resultingSelection);\n    }\n    _applyRedo(changes, eol, resultingAlternativeVersionId, resultingSelection) {\n        const edits = changes.map((change) => {\n            const rangeStart = this.getPositionAt(change.oldPosition);\n            const rangeEnd = this.getPositionAt(change.oldEnd);\n            return {\n                range: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n                text: change.newText\n            };\n        });\n        this._applyUndoRedoEdits(edits, eol, false, true, resultingAlternativeVersionId, resultingSelection);\n    }\n    _applyUndoRedoEdits(edits, eol, isUndoing, isRedoing, resultingAlternativeVersionId, resultingSelection) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            this._isUndoing = isUndoing;\n            this._isRedoing = isRedoing;\n            this.applyEdits(edits, false);\n            this.setEOL(eol);\n            this._overwriteAlternativeVersionId(resultingAlternativeVersionId);\n        }\n        finally {\n            this._isUndoing = false;\n            this._isRedoing = false;\n            this._eventEmitter.endDeferredEmit(resultingSelection);\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    applyEdits(rawOperations, computeUndoEdits = false) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            const operations = this._validateEditOperations(rawOperations);\n            return this._doApplyEdits(operations, computeUndoEdits);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _doApplyEdits(rawOperations, computeUndoEdits) {\n        const oldLineCount = this._buffer.getLineCount();\n        const result = this._buffer.applyEdits(rawOperations, this._options.trimAutoWhitespace, computeUndoEdits);\n        const newLineCount = this._buffer.getLineCount();\n        const contentChanges = result.changes;\n        this._trimAutoWhitespaceLines = result.trimAutoWhitespaceLineNumbers;\n        if (contentChanges.length !== 0) {\n            // We do a first pass to update decorations\n            // because we want to read decorations in the second pass\n            // where we will emit content change events\n            // and we want to read the final decorations\n            for (let i = 0, len = contentChanges.length; i < len; i++) {\n                const change = contentChanges[i];\n                this._decorationsTree.acceptReplace(change.rangeOffset, change.rangeLength, change.text.length, change.forceMoveMarkers);\n            }\n            const rawContentChanges = [];\n            this._increaseVersionId();\n            let lineCount = oldLineCount;\n            for (let i = 0, len = contentChanges.length; i < len; i++) {\n                const change = contentChanges[i];\n                const [eolCount] = countEOL(change.text);\n                this._onDidChangeDecorations.fire();\n                const startLineNumber = change.range.startLineNumber;\n                const endLineNumber = change.range.endLineNumber;\n                const deletingLinesCnt = endLineNumber - startLineNumber;\n                const insertingLinesCnt = eolCount;\n                const editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\n                const changeLineCountDelta = (insertingLinesCnt - deletingLinesCnt);\n                const currentEditStartLineNumber = newLineCount - lineCount - changeLineCountDelta + startLineNumber;\n                const firstEditLineNumber = currentEditStartLineNumber;\n                const lastInsertedLineNumber = currentEditStartLineNumber + insertingLinesCnt;\n                const decorationsWithInjectedTextInEditedRange = this._decorationsTree.getInjectedTextInInterval(this, this.getOffsetAt(new Position(firstEditLineNumber, 1)), this.getOffsetAt(new Position(lastInsertedLineNumber, this.getLineMaxColumn(lastInsertedLineNumber))), 0);\n                const injectedTextInEditedRange = LineInjectedText.fromDecorations(decorationsWithInjectedTextInEditedRange);\n                const injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n                for (let j = editingLinesCnt; j >= 0; j--) {\n                    const editLineNumber = startLineNumber + j;\n                    const currentEditLineNumber = currentEditStartLineNumber + j;\n                    injectedTextInEditedRangeQueue.takeFromEndWhile(r => r.lineNumber > currentEditLineNumber);\n                    const decorationsInCurrentLine = injectedTextInEditedRangeQueue.takeFromEndWhile(r => r.lineNumber === currentEditLineNumber);\n                    rawContentChanges.push(new ModelRawLineChanged(editLineNumber, this.getLineContent(currentEditLineNumber), decorationsInCurrentLine));\n                }\n                if (editingLinesCnt < deletingLinesCnt) {\n                    // Must delete some lines\n                    const spliceStartLineNumber = startLineNumber + editingLinesCnt;\n                    rawContentChanges.push(new ModelRawLinesDeleted(spliceStartLineNumber + 1, endLineNumber));\n                }\n                if (editingLinesCnt < insertingLinesCnt) {\n                    const injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n                    // Must insert some lines\n                    const spliceLineNumber = startLineNumber + editingLinesCnt;\n                    const cnt = insertingLinesCnt - editingLinesCnt;\n                    const fromLineNumber = newLineCount - lineCount - cnt + spliceLineNumber + 1;\n                    const injectedTexts = [];\n                    const newLines = [];\n                    for (let i = 0; i < cnt; i++) {\n                        const lineNumber = fromLineNumber + i;\n                        newLines[i] = this.getLineContent(lineNumber);\n                        injectedTextInEditedRangeQueue.takeWhile(r => r.lineNumber < lineNumber);\n                        injectedTexts[i] = injectedTextInEditedRangeQueue.takeWhile(r => r.lineNumber === lineNumber);\n                    }\n                    rawContentChanges.push(new ModelRawLinesInserted(spliceLineNumber + 1, startLineNumber + insertingLinesCnt, newLines, injectedTexts));\n                }\n                lineCount += changeLineCountDelta;\n            }\n            this._emitContentChangedEvent(new ModelRawContentChangedEvent(rawContentChanges, this.getVersionId(), this._isUndoing, this._isRedoing), {\n                changes: contentChanges,\n                eol: this._buffer.getEOL(),\n                isEolChange: false,\n                versionId: this.getVersionId(),\n                isUndoing: this._isUndoing,\n                isRedoing: this._isRedoing,\n                isFlush: false\n            });\n        }\n        return (result.reverseEdits === null ? undefined : result.reverseEdits);\n    }\n    undo() {\n        return this._undoRedoService.undo(this.uri);\n    }\n    canUndo() {\n        return this._undoRedoService.canUndo(this.uri);\n    }\n    redo() {\n        return this._undoRedoService.redo(this.uri);\n    }\n    canRedo() {\n        return this._undoRedoService.canRedo(this.uri);\n    }\n    //#endregion\n    //#region Decorations\n    handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines) {\n        // This is called before the decoration changed event is fired.\n        if (affectedInjectedTextLines === null || affectedInjectedTextLines.size === 0) {\n            return;\n        }\n        const affectedLines = Array.from(affectedInjectedTextLines);\n        const lineChangeEvents = affectedLines.map(lineNumber => new ModelRawLineChanged(lineNumber, this.getLineContent(lineNumber), this._getInjectedTextInLine(lineNumber)));\n        this._onDidChangeInjectedText.fire(new ModelInjectedTextChangedEvent(lineChangeEvents));\n    }\n    changeDecorations(callback, ownerId = 0) {\n        this._assertNotDisposed();\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            return this._changeDecorations(ownerId, callback);\n        }\n        finally {\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _changeDecorations(ownerId, callback) {\n        const changeAccessor = {\n            addDecoration: (range, options) => {\n                return this._deltaDecorationsImpl(ownerId, [], [{ range: range, options: options }])[0];\n            },\n            changeDecoration: (id, newRange) => {\n                this._changeDecorationImpl(id, newRange);\n            },\n            changeDecorationOptions: (id, options) => {\n                this._changeDecorationOptionsImpl(id, _normalizeOptions(options));\n            },\n            removeDecoration: (id) => {\n                this._deltaDecorationsImpl(ownerId, [id], []);\n            },\n            deltaDecorations: (oldDecorations, newDecorations) => {\n                if (oldDecorations.length === 0 && newDecorations.length === 0) {\n                    // nothing to do\n                    return [];\n                }\n                return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n            }\n        };\n        let result = null;\n        try {\n            result = callback(changeAccessor);\n        }\n        catch (e) {\n            onUnexpectedError(e);\n        }\n        // Invalidate change accessor\n        changeAccessor.addDecoration = invalidFunc;\n        changeAccessor.changeDecoration = invalidFunc;\n        changeAccessor.changeDecorationOptions = invalidFunc;\n        changeAccessor.removeDecoration = invalidFunc;\n        changeAccessor.deltaDecorations = invalidFunc;\n        return result;\n    }\n    deltaDecorations(oldDecorations, newDecorations, ownerId = 0) {\n        this._assertNotDisposed();\n        if (!oldDecorations) {\n            oldDecorations = [];\n        }\n        if (oldDecorations.length === 0 && newDecorations.length === 0) {\n            // nothing to do\n            return [];\n        }\n        try {\n            this._deltaDecorationCallCnt++;\n            if (this._deltaDecorationCallCnt > 1) {\n                console.warn(`Invoking deltaDecorations recursively could lead to leaking decorations.`);\n                onUnexpectedError(new Error(`Invoking deltaDecorations recursively could lead to leaking decorations.`));\n            }\n            this._onDidChangeDecorations.beginDeferredEmit();\n            return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n        }\n        finally {\n            this._onDidChangeDecorations.endDeferredEmit();\n            this._deltaDecorationCallCnt--;\n        }\n    }\n    _getTrackedRange(id) {\n        return this.getDecorationRange(id);\n    }\n    _setTrackedRange(id, newRange, newStickiness) {\n        const node = (id ? this._decorations[id] : null);\n        if (!node) {\n            if (!newRange) {\n                // node doesn't exist, the request is to delete => nothing to do\n                return null;\n            }\n            // node doesn't exist, the request is to set => add the tracked range\n            return this._deltaDecorationsImpl(0, [], [{ range: newRange, options: TRACKED_RANGE_OPTIONS[newStickiness] }], true)[0];\n        }\n        if (!newRange) {\n            // node exists, the request is to delete => delete node\n            this._decorationsTree.delete(node);\n            delete this._decorations[node.id];\n            return null;\n        }\n        // node exists, the request is to set => change the tracked range and its options\n        const range = this._validateRangeRelaxedNoAllocations(newRange);\n        const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n        const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n        this._decorationsTree.delete(node);\n        node.reset(this.getVersionId(), startOffset, endOffset, range);\n        node.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\n        this._decorationsTree.insert(node);\n        return node.id;\n    }\n    removeAllDecorationsWithOwnerId(ownerId) {\n        if (this._isDisposed) {\n            return;\n        }\n        const nodes = this._decorationsTree.collectNodesFromOwner(ownerId);\n        for (let i = 0, len = nodes.length; i < len; i++) {\n            const node = nodes[i];\n            this._decorationsTree.delete(node);\n            delete this._decorations[node.id];\n        }\n    }\n    getDecorationOptions(decorationId) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return null;\n        }\n        return node.options;\n    }\n    getDecorationRange(decorationId) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return null;\n        }\n        return this._decorationsTree.getNodeRange(this, node);\n    }\n    getLineDecorations(lineNumber, ownerId = 0, filterOutValidation = false) {\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            return [];\n        }\n        return this.getLinesDecorations(lineNumber, lineNumber, ownerId, filterOutValidation);\n    }\n    getLinesDecorations(_startLineNumber, _endLineNumber, ownerId = 0, filterOutValidation = false, onlyMarginDecorations = false) {\n        const lineCount = this.getLineCount();\n        const startLineNumber = Math.min(lineCount, Math.max(1, _startLineNumber));\n        const endLineNumber = Math.min(lineCount, Math.max(1, _endLineNumber));\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        const range = new Range(startLineNumber, 1, endLineNumber, endColumn);\n        const decorations = this._getDecorationsInRange(range, ownerId, filterOutValidation, onlyMarginDecorations);\n        pushMany(decorations, this._decorationProvider.getDecorationsInRange(range, ownerId, filterOutValidation));\n        return decorations;\n    }\n    getDecorationsInRange(range, ownerId = 0, filterOutValidation = false, onlyMinimapDecorations = false, onlyMarginDecorations = false) {\n        const validatedRange = this.validateRange(range);\n        const decorations = this._getDecorationsInRange(validatedRange, ownerId, filterOutValidation, onlyMarginDecorations);\n        pushMany(decorations, this._decorationProvider.getDecorationsInRange(validatedRange, ownerId, filterOutValidation, onlyMinimapDecorations));\n        return decorations;\n    }\n    getOverviewRulerDecorations(ownerId = 0, filterOutValidation = false) {\n        return this._decorationsTree.getAll(this, ownerId, filterOutValidation, true, false);\n    }\n    getInjectedTextDecorations(ownerId = 0) {\n        return this._decorationsTree.getAllInjectedText(this, ownerId);\n    }\n    _getInjectedTextInLine(lineNumber) {\n        const startOffset = this._buffer.getOffsetAt(lineNumber, 1);\n        const endOffset = startOffset + this._buffer.getLineLength(lineNumber);\n        const result = this._decorationsTree.getInjectedTextInInterval(this, startOffset, endOffset, 0);\n        return LineInjectedText.fromDecorations(result).filter(t => t.lineNumber === lineNumber);\n    }\n    getAllDecorations(ownerId = 0, filterOutValidation = false) {\n        let result = this._decorationsTree.getAll(this, ownerId, filterOutValidation, false, false);\n        result = result.concat(this._decorationProvider.getAllDecorations(ownerId, filterOutValidation));\n        return result;\n    }\n    getAllMarginDecorations(ownerId = 0) {\n        return this._decorationsTree.getAll(this, ownerId, false, false, true);\n    }\n    _getDecorationsInRange(filterRange, filterOwnerId, filterOutValidation, onlyMarginDecorations) {\n        const startOffset = this._buffer.getOffsetAt(filterRange.startLineNumber, filterRange.startColumn);\n        const endOffset = this._buffer.getOffsetAt(filterRange.endLineNumber, filterRange.endColumn);\n        return this._decorationsTree.getAllInInterval(this, startOffset, endOffset, filterOwnerId, filterOutValidation, onlyMarginDecorations);\n    }\n    getRangeAt(start, end) {\n        return this._buffer.getRangeAt(start, end - start);\n    }\n    _changeDecorationImpl(decorationId, _range) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return;\n        }\n        if (node.options.after) {\n            const oldRange = this.getDecorationRange(decorationId);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange.endLineNumber);\n        }\n        if (node.options.before) {\n            const oldRange = this.getDecorationRange(decorationId);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange.startLineNumber);\n        }\n        const range = this._validateRangeRelaxedNoAllocations(_range);\n        const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n        const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n        this._decorationsTree.delete(node);\n        node.reset(this.getVersionId(), startOffset, endOffset, range);\n        this._decorationsTree.insert(node);\n        this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n        if (node.options.after) {\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n        }\n        if (node.options.before) {\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n        }\n    }\n    _changeDecorationOptionsImpl(decorationId, options) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return;\n        }\n        const nodeWasInOverviewRuler = (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\n        const nodeIsInOverviewRuler = (options.overviewRuler && options.overviewRuler.color ? true : false);\n        this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n        this._onDidChangeDecorations.checkAffectedAndFire(options);\n        if (node.options.after || options.after) {\n            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n        }\n        if (node.options.before || options.before) {\n            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber);\n        }\n        if (nodeWasInOverviewRuler !== nodeIsInOverviewRuler) {\n            // Delete + Insert due to an overview ruler status change\n            this._decorationsTree.delete(node);\n            node.setOptions(options);\n            this._decorationsTree.insert(node);\n        }\n        else {\n            node.setOptions(options);\n        }\n    }\n    _deltaDecorationsImpl(ownerId, oldDecorationsIds, newDecorations, suppressEvents = false) {\n        const versionId = this.getVersionId();\n        const oldDecorationsLen = oldDecorationsIds.length;\n        let oldDecorationIndex = 0;\n        const newDecorationsLen = newDecorations.length;\n        let newDecorationIndex = 0;\n        this._onDidChangeDecorations.beginDeferredEmit();\n        try {\n            const result = new Array(newDecorationsLen);\n            while (oldDecorationIndex < oldDecorationsLen || newDecorationIndex < newDecorationsLen) {\n                let node = null;\n                if (oldDecorationIndex < oldDecorationsLen) {\n                    // (1) get ourselves an old node\n                    do {\n                        node = this._decorations[oldDecorationsIds[oldDecorationIndex++]];\n                    } while (!node && oldDecorationIndex < oldDecorationsLen);\n                    // (2) remove the node from the tree (if it exists)\n                    if (node) {\n                        if (node.options.after) {\n                            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n                            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n                        }\n                        if (node.options.before) {\n                            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n                            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber);\n                        }\n                        this._decorationsTree.delete(node);\n                        if (!suppressEvents) {\n                            this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n                        }\n                    }\n                }\n                if (newDecorationIndex < newDecorationsLen) {\n                    // (3) create a new node if necessary\n                    if (!node) {\n                        const internalDecorationId = (++this._lastDecorationId);\n                        const decorationId = `${this._instanceId};${internalDecorationId}`;\n                        node = new IntervalNode(decorationId, 0, 0);\n                        this._decorations[decorationId] = node;\n                    }\n                    // (4) initialize node\n                    const newDecoration = newDecorations[newDecorationIndex];\n                    const range = this._validateRangeRelaxedNoAllocations(newDecoration.range);\n                    const options = _normalizeOptions(newDecoration.options);\n                    const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n                    const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n                    node.ownerId = ownerId;\n                    node.reset(versionId, startOffset, endOffset, range);\n                    node.setOptions(options);\n                    if (node.options.after) {\n                        this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n                    }\n                    if (node.options.before) {\n                        this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n                    }\n                    if (!suppressEvents) {\n                        this._onDidChangeDecorations.checkAffectedAndFire(options);\n                    }\n                    this._decorationsTree.insert(node);\n                    result[newDecorationIndex] = node.id;\n                    newDecorationIndex++;\n                }\n                else {\n                    if (node) {\n                        delete this._decorations[node.id];\n                    }\n                }\n            }\n            return result;\n        }\n        finally {\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    //#endregion\n    //#region Tokenization\n    // TODO move them to the tokenization part.\n    getLanguageId() {\n        return this.tokenization.getLanguageId();\n    }\n    setLanguage(languageIdOrSelection, source) {\n        if (typeof languageIdOrSelection === 'string') {\n            this._languageSelectionListener.clear();\n            this._setLanguage(languageIdOrSelection, source);\n        }\n        else {\n            this._languageSelectionListener.value = languageIdOrSelection.onDidChange(() => this._setLanguage(languageIdOrSelection.languageId, source));\n            this._setLanguage(languageIdOrSelection.languageId, source);\n        }\n    }\n    _setLanguage(languageId, source) {\n        this.tokenization.setLanguageId(languageId, source);\n        this._languageService.requestRichLanguageFeatures(languageId);\n    }\n    getLanguageIdAtPosition(lineNumber, column) {\n        return this.tokenization.getLanguageIdAtPosition(lineNumber, column);\n    }\n    getWordAtPosition(position) {\n        return this._tokenizationTextModelPart.getWordAtPosition(position);\n    }\n    getWordUntilPosition(position) {\n        return this._tokenizationTextModelPart.getWordUntilPosition(position);\n    }\n    //#endregion\n    normalizePosition(position, affinity) {\n        return position;\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n    getLineIndentColumn(lineNumber) {\n        // Columns start with 1.\n        return indentOfLine(this.getLineContent(lineNumber)) + 1;\n    }\n};\nTextModel._MODEL_SYNC_LIMIT = 50 * 1024 * 1024; // 50 MB,  // used in tests\nTextModel.LARGE_FILE_SIZE_THRESHOLD = 20 * 1024 * 1024; // 20 MB;\nTextModel.LARGE_FILE_LINE_COUNT_THRESHOLD = 300 * 1000; // 300K lines\nTextModel.DEFAULT_CREATION_OPTIONS = {\n    isForSimpleWidget: false,\n    tabSize: EDITOR_MODEL_DEFAULTS.tabSize,\n    indentSize: EDITOR_MODEL_DEFAULTS.indentSize,\n    insertSpaces: EDITOR_MODEL_DEFAULTS.insertSpaces,\n    detectIndentation: false,\n    defaultEOL: 1 /* model.DefaultEndOfLine.LF */,\n    trimAutoWhitespace: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n    largeFileOptimizations: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n    bracketPairColorizationOptions: EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions,\n};\nTextModel = __decorate([\n    __param(4, IUndoRedoService),\n    __param(5, ILanguageService),\n    __param(6, ILanguageConfigurationService)\n], TextModel);\nfunction indentOfLine(line) {\n    let indent = 0;\n    for (const c of line) {\n        if (c === ' ' || c === '\\t') {\n            indent++;\n        }\n        else {\n            break;\n        }\n    }\n    return indent;\n}\n//#region Decorations\nfunction isNodeInOverviewRuler(node) {\n    return (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\n}\nfunction isNodeInjectedText(node) {\n    return !!node.options.after || !!node.options.before;\n}\nclass DecorationsTrees {\n    constructor() {\n        this._decorationsTree0 = new IntervalTree();\n        this._decorationsTree1 = new IntervalTree();\n        this._injectedTextDecorationsTree = new IntervalTree();\n    }\n    ensureAllNodesHaveRanges(host) {\n        this.getAll(host, 0, false, false, false);\n    }\n    _ensureNodesHaveRanges(host, nodes) {\n        for (const node of nodes) {\n            if (node.range === null) {\n                node.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n            }\n        }\n        return nodes;\n    }\n    getAllInInterval(host, start, end, filterOwnerId, filterOutValidation, onlyMarginDecorations) {\n        const versionId = host.getVersionId();\n        const result = this._intervalSearch(start, end, filterOwnerId, filterOutValidation, versionId, onlyMarginDecorations);\n        return this._ensureNodesHaveRanges(host, result);\n    }\n    _intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations) {\n        const r0 = this._decorationsTree0.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        const r1 = this._decorationsTree1.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        const r2 = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        return r0.concat(r1).concat(r2);\n    }\n    getInjectedTextInInterval(host, start, end, filterOwnerId) {\n        const versionId = host.getVersionId();\n        const result = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, false, versionId, false);\n        return this._ensureNodesHaveRanges(host, result).filter((i) => i.options.showIfCollapsed || !i.range.isEmpty());\n    }\n    getAllInjectedText(host, filterOwnerId) {\n        const versionId = host.getVersionId();\n        const result = this._injectedTextDecorationsTree.search(filterOwnerId, false, versionId, false);\n        return this._ensureNodesHaveRanges(host, result).filter((i) => i.options.showIfCollapsed || !i.range.isEmpty());\n    }\n    getAll(host, filterOwnerId, filterOutValidation, overviewRulerOnly, onlyMarginDecorations) {\n        const versionId = host.getVersionId();\n        const result = this._search(filterOwnerId, filterOutValidation, overviewRulerOnly, versionId, onlyMarginDecorations);\n        return this._ensureNodesHaveRanges(host, result);\n    }\n    _search(filterOwnerId, filterOutValidation, overviewRulerOnly, cachedVersionId, onlyMarginDecorations) {\n        if (overviewRulerOnly) {\n            return this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        }\n        else {\n            const r0 = this._decorationsTree0.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n            const r1 = this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n            const r2 = this._injectedTextDecorationsTree.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n            return r0.concat(r1).concat(r2);\n        }\n    }\n    collectNodesFromOwner(ownerId) {\n        const r0 = this._decorationsTree0.collectNodesFromOwner(ownerId);\n        const r1 = this._decorationsTree1.collectNodesFromOwner(ownerId);\n        const r2 = this._injectedTextDecorationsTree.collectNodesFromOwner(ownerId);\n        return r0.concat(r1).concat(r2);\n    }\n    collectNodesPostOrder() {\n        const r0 = this._decorationsTree0.collectNodesPostOrder();\n        const r1 = this._decorationsTree1.collectNodesPostOrder();\n        const r2 = this._injectedTextDecorationsTree.collectNodesPostOrder();\n        return r0.concat(r1).concat(r2);\n    }\n    insert(node) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.insert(node);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.insert(node);\n        }\n        else {\n            this._decorationsTree0.insert(node);\n        }\n    }\n    delete(node) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.delete(node);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.delete(node);\n        }\n        else {\n            this._decorationsTree0.delete(node);\n        }\n    }\n    getNodeRange(host, node) {\n        const versionId = host.getVersionId();\n        if (node.cachedVersionId !== versionId) {\n            this._resolveNode(node, versionId);\n        }\n        if (node.range === null) {\n            node.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n        }\n        return node.range;\n    }\n    _resolveNode(node, cachedVersionId) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.resolveNode(node, cachedVersionId);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.resolveNode(node, cachedVersionId);\n        }\n        else {\n            this._decorationsTree0.resolveNode(node, cachedVersionId);\n        }\n    }\n    acceptReplace(offset, length, textLength, forceMoveMarkers) {\n        this._decorationsTree0.acceptReplace(offset, length, textLength, forceMoveMarkers);\n        this._decorationsTree1.acceptReplace(offset, length, textLength, forceMoveMarkers);\n        this._injectedTextDecorationsTree.acceptReplace(offset, length, textLength, forceMoveMarkers);\n    }\n}\nfunction cleanClassName(className) {\n    return className.replace(/[^a-z0-9\\-_]/gi, ' ');\n}\nclass DecorationOptions {\n    constructor(options) {\n        this.color = options.color || '';\n        this.darkColor = options.darkColor || '';\n    }\n}\nexport class ModelDecorationOverviewRulerOptions extends DecorationOptions {\n    constructor(options) {\n        super(options);\n        this._resolvedColor = null;\n        this.position = (typeof options.position === 'number' ? options.position : model.OverviewRulerLane.Center);\n    }\n    getColor(theme) {\n        if (!this._resolvedColor) {\n            if (theme.type !== 'light' && this.darkColor) {\n                this._resolvedColor = this._resolveColor(this.darkColor, theme);\n            }\n            else {\n                this._resolvedColor = this._resolveColor(this.color, theme);\n            }\n        }\n        return this._resolvedColor;\n    }\n    invalidateCachedColor() {\n        this._resolvedColor = null;\n    }\n    _resolveColor(color, theme) {\n        if (typeof color === 'string') {\n            return color;\n        }\n        const c = color ? theme.getColor(color.id) : null;\n        if (!c) {\n            return '';\n        }\n        return c.toString();\n    }\n}\nexport class ModelDecorationGlyphMarginOptions {\n    constructor(options) {\n        var _a;\n        this.position = (_a = options === null || options === void 0 ? void 0 : options.position) !== null && _a !== void 0 ? _a : model.GlyphMarginLane.Left;\n    }\n}\nexport class ModelDecorationMinimapOptions extends DecorationOptions {\n    constructor(options) {\n        super(options);\n        this.position = options.position;\n    }\n    getColor(theme) {\n        if (!this._resolvedColor) {\n            if (theme.type !== 'light' && this.darkColor) {\n                this._resolvedColor = this._resolveColor(this.darkColor, theme);\n            }\n            else {\n                this._resolvedColor = this._resolveColor(this.color, theme);\n            }\n        }\n        return this._resolvedColor;\n    }\n    invalidateCachedColor() {\n        this._resolvedColor = undefined;\n    }\n    _resolveColor(color, theme) {\n        if (typeof color === 'string') {\n            return Color.fromHex(color);\n        }\n        return theme.getColor(color.id);\n    }\n}\nexport class ModelDecorationInjectedTextOptions {\n    static from(options) {\n        if (options instanceof ModelDecorationInjectedTextOptions) {\n            return options;\n        }\n        return new ModelDecorationInjectedTextOptions(options);\n    }\n    constructor(options) {\n        this.content = options.content || '';\n        this.inlineClassName = options.inlineClassName || null;\n        this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n        this.attachedData = options.attachedData || null;\n        this.cursorStops = options.cursorStops || null;\n    }\n}\nexport class ModelDecorationOptions {\n    static register(options) {\n        return new ModelDecorationOptions(options);\n    }\n    static createDynamic(options) {\n        return new ModelDecorationOptions(options);\n    }\n    constructor(options) {\n        var _a, _b, _c, _d, _e;\n        this.description = options.description;\n        this.blockClassName = options.blockClassName ? cleanClassName(options.blockClassName) : null;\n        this.blockDoesNotCollapse = (_a = options.blockDoesNotCollapse) !== null && _a !== void 0 ? _a : null;\n        this.blockIsAfterEnd = (_b = options.blockIsAfterEnd) !== null && _b !== void 0 ? _b : null;\n        this.blockPadding = (_c = options.blockPadding) !== null && _c !== void 0 ? _c : null;\n        this.stickiness = options.stickiness || 0 /* model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */;\n        this.zIndex = options.zIndex || 0;\n        this.className = options.className ? cleanClassName(options.className) : null;\n        this.hoverMessage = options.hoverMessage || null;\n        this.glyphMarginHoverMessage = options.glyphMarginHoverMessage || null;\n        this.isWholeLine = options.isWholeLine || false;\n        this.showIfCollapsed = options.showIfCollapsed || false;\n        this.collapseOnReplaceEdit = options.collapseOnReplaceEdit || false;\n        this.overviewRuler = options.overviewRuler ? new ModelDecorationOverviewRulerOptions(options.overviewRuler) : null;\n        this.minimap = options.minimap ? new ModelDecorationMinimapOptions(options.minimap) : null;\n        this.glyphMargin = options.glyphMarginClassName ? new ModelDecorationGlyphMarginOptions(options.glyphMargin) : null;\n        this.glyphMarginClassName = options.glyphMarginClassName ? cleanClassName(options.glyphMarginClassName) : null;\n        this.linesDecorationsClassName = options.linesDecorationsClassName ? cleanClassName(options.linesDecorationsClassName) : null;\n        this.firstLineDecorationClassName = options.firstLineDecorationClassName ? cleanClassName(options.firstLineDecorationClassName) : null;\n        this.marginClassName = options.marginClassName ? cleanClassName(options.marginClassName) : null;\n        this.inlineClassName = options.inlineClassName ? cleanClassName(options.inlineClassName) : null;\n        this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n        this.beforeContentClassName = options.beforeContentClassName ? cleanClassName(options.beforeContentClassName) : null;\n        this.afterContentClassName = options.afterContentClassName ? cleanClassName(options.afterContentClassName) : null;\n        this.after = options.after ? ModelDecorationInjectedTextOptions.from(options.after) : null;\n        this.before = options.before ? ModelDecorationInjectedTextOptions.from(options.before) : null;\n        this.hideInCommentTokens = (_d = options.hideInCommentTokens) !== null && _d !== void 0 ? _d : false;\n        this.hideInStringTokens = (_e = options.hideInStringTokens) !== null && _e !== void 0 ? _e : false;\n    }\n}\nModelDecorationOptions.EMPTY = ModelDecorationOptions.register({ description: 'empty' });\n/**\n * The order carefully matches the values of the enum.\n */\nconst TRACKED_RANGE_OPTIONS = [\n    ModelDecorationOptions.register({ description: 'tracked-range-always-grows-when-typing-at-edges', stickiness: 0 /* model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-never-grows-when-typing-at-edges', stickiness: 1 /* model.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-grows-only-when-typing-before', stickiness: 2 /* model.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-grows-only-when-typing-after', stickiness: 3 /* model.TrackedRangeStickiness.GrowsOnlyWhenTypingAfter */ }),\n];\nfunction _normalizeOptions(options) {\n    if (options instanceof ModelDecorationOptions) {\n        return options;\n    }\n    return ModelDecorationOptions.createDynamic(options);\n}\nclass DidChangeDecorationsEmitter extends Disposable {\n    constructor(handleBeforeFire) {\n        super();\n        this.handleBeforeFire = handleBeforeFire;\n        this._actual = this._register(new Emitter());\n        this.event = this._actual.event;\n        this._affectedInjectedTextLines = null;\n        this._deferredCnt = 0;\n        this._shouldFireDeferred = false;\n        this._affectsMinimap = false;\n        this._affectsOverviewRuler = false;\n        this._affectsGlyphMargin = false;\n    }\n    beginDeferredEmit() {\n        this._deferredCnt++;\n    }\n    endDeferredEmit() {\n        var _a;\n        this._deferredCnt--;\n        if (this._deferredCnt === 0) {\n            if (this._shouldFireDeferred) {\n                this.doFire();\n            }\n            (_a = this._affectedInjectedTextLines) === null || _a === void 0 ? void 0 : _a.clear();\n            this._affectedInjectedTextLines = null;\n        }\n    }\n    recordLineAffectedByInjectedText(lineNumber) {\n        if (!this._affectedInjectedTextLines) {\n            this._affectedInjectedTextLines = new Set();\n        }\n        this._affectedInjectedTextLines.add(lineNumber);\n    }\n    checkAffectedAndFire(options) {\n        if (!this._affectsMinimap) {\n            this._affectsMinimap = options.minimap && options.minimap.position ? true : false;\n        }\n        if (!this._affectsOverviewRuler) {\n            this._affectsOverviewRuler = options.overviewRuler && options.overviewRuler.color ? true : false;\n        }\n        if (!this._affectsGlyphMargin) {\n            this._affectsGlyphMargin = options.glyphMarginClassName ? true : false;\n        }\n        this.tryFire();\n    }\n    fire() {\n        this._affectsMinimap = true;\n        this._affectsOverviewRuler = true;\n        this._affectsGlyphMargin = true;\n        this.tryFire();\n    }\n    tryFire() {\n        if (this._deferredCnt === 0) {\n            this.doFire();\n        }\n        else {\n            this._shouldFireDeferred = true;\n        }\n    }\n    doFire() {\n        this.handleBeforeFire(this._affectedInjectedTextLines);\n        const event = {\n            affectsMinimap: this._affectsMinimap,\n            affectsOverviewRuler: this._affectsOverviewRuler,\n            affectsGlyphMargin: this._affectsGlyphMargin\n        };\n        this._shouldFireDeferred = false;\n        this._affectsMinimap = false;\n        this._affectsOverviewRuler = false;\n        this._affectsGlyphMargin = false;\n        this._actual.fire(event);\n    }\n}\n//#endregion\nclass DidChangeContentEmitter extends Disposable {\n    constructor() {\n        super();\n        /**\n         * Both `fastEvent` and `slowEvent` work the same way and contain the same events, but first we invoke `fastEvent` and then `slowEvent`.\n         */\n        this._fastEmitter = this._register(new Emitter());\n        this.fastEvent = this._fastEmitter.event;\n        this._slowEmitter = this._register(new Emitter());\n        this.slowEvent = this._slowEmitter.event;\n        this._deferredCnt = 0;\n        this._deferredEvent = null;\n    }\n    beginDeferredEmit() {\n        this._deferredCnt++;\n    }\n    endDeferredEmit(resultingSelection = null) {\n        this._deferredCnt--;\n        if (this._deferredCnt === 0) {\n            if (this._deferredEvent !== null) {\n                this._deferredEvent.rawContentChangedEvent.resultingSelection = resultingSelection;\n                const e = this._deferredEvent;\n                this._deferredEvent = null;\n                this._fastEmitter.fire(e);\n                this._slowEmitter.fire(e);\n            }\n        }\n    }\n    fire(e) {\n        if (this._deferredCnt > 0) {\n            if (this._deferredEvent) {\n                this._deferredEvent = this._deferredEvent.merge(e);\n            }\n            else {\n                this._deferredEvent = e;\n            }\n            return;\n        }\n        this._fastEmitter.fire(e);\n        this._slowEmitter.fire(e);\n    }\n}\n/**\n * @internal\n */\nexport class AttachedViews {\n    constructor() {\n        this._onDidChangeVisibleRanges = new Emitter();\n        this.onDidChangeVisibleRanges = this._onDidChangeVisibleRanges.event;\n        this._views = new Set();\n    }\n    attachView() {\n        const view = new AttachedViewImpl((state) => {\n            this._onDidChangeVisibleRanges.fire({ view, state });\n        });\n        this._views.add(view);\n        return view;\n    }\n    detachView(view) {\n        this._views.delete(view);\n        this._onDidChangeVisibleRanges.fire({ view, state: undefined });\n    }\n}\nclass AttachedViewImpl {\n    constructor(handleStateChange) {\n        this.handleStateChange = handleStateChange;\n    }\n    setVisibleLines(visibleLines, stabilized) {\n        const visibleLineRanges = visibleLines.map((line) => new LineRange(line.startLineNumber, line.endLineNumber + 1));\n        this.handleStateChange({ visibleLineRanges, stabilized });\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../base/common/lifecycle.js';\nexport class TextModelPart extends Disposable {\n    constructor() {\n        super(...arguments);\n        this._isDisposed = false;\n    }\n    dispose() {\n        super.dispose();\n        this._isDisposed = true;\n    }\n    assertNotDisposed() {\n        if (this._isDisposed) {\n            throw new Error('TextModelPart is disposed!');\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { getMapForWordSeparators } from '../core/wordCharacterClassifier.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { FindMatch, SearchData } from '../model.js';\nconst LIMIT_FIND_COUNT = 999;\nexport class SearchParams {\n    constructor(searchString, isRegex, matchCase, wordSeparators) {\n        this.searchString = searchString;\n        this.isRegex = isRegex;\n        this.matchCase = matchCase;\n        this.wordSeparators = wordSeparators;\n    }\n    parseSearchRequest() {\n        if (this.searchString === '') {\n            return null;\n        }\n        // Try to create a RegExp out of the params\n        let multiline;\n        if (this.isRegex) {\n            multiline = isMultilineRegexSource(this.searchString);\n        }\n        else {\n            multiline = (this.searchString.indexOf('\\n') >= 0);\n        }\n        let regex = null;\n        try {\n            regex = strings.createRegExp(this.searchString, this.isRegex, {\n                matchCase: this.matchCase,\n                wholeWord: false,\n                multiline: multiline,\n                global: true,\n                unicode: true\n            });\n        }\n        catch (err) {\n            return null;\n        }\n        if (!regex) {\n            return null;\n        }\n        let canUseSimpleSearch = (!this.isRegex && !multiline);\n        if (canUseSimpleSearch && this.searchString.toLowerCase() !== this.searchString.toUpperCase()) {\n            // casing might make a difference\n            canUseSimpleSearch = this.matchCase;\n        }\n        return new SearchData(regex, this.wordSeparators ? getMapForWordSeparators(this.wordSeparators) : null, canUseSimpleSearch ? this.searchString : null);\n    }\n}\nexport function isMultilineRegexSource(searchString) {\n    if (!searchString || searchString.length === 0) {\n        return false;\n    }\n    for (let i = 0, len = searchString.length; i < len; i++) {\n        const chCode = searchString.charCodeAt(i);\n        if (chCode === 10 /* CharCode.LineFeed */) {\n            return true;\n        }\n        if (chCode === 92 /* CharCode.Backslash */) {\n            // move to next char\n            i++;\n            if (i >= len) {\n                // string ends with a \\\n                break;\n            }\n            const nextChCode = searchString.charCodeAt(i);\n            if (nextChCode === 110 /* CharCode.n */ || nextChCode === 114 /* CharCode.r */ || nextChCode === 87 /* CharCode.W */) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport function createFindMatch(range, rawMatches, captureMatches) {\n    if (!captureMatches) {\n        return new FindMatch(range, null);\n    }\n    const matches = [];\n    for (let i = 0, len = rawMatches.length; i < len; i++) {\n        matches[i] = rawMatches[i];\n    }\n    return new FindMatch(range, matches);\n}\nclass LineFeedCounter {\n    constructor(text) {\n        const lineFeedsOffsets = [];\n        let lineFeedsOffsetsLen = 0;\n        for (let i = 0, textLen = text.length; i < textLen; i++) {\n            if (text.charCodeAt(i) === 10 /* CharCode.LineFeed */) {\n                lineFeedsOffsets[lineFeedsOffsetsLen++] = i;\n            }\n        }\n        this._lineFeedsOffsets = lineFeedsOffsets;\n    }\n    findLineFeedCountBeforeOffset(offset) {\n        const lineFeedsOffsets = this._lineFeedsOffsets;\n        let min = 0;\n        let max = lineFeedsOffsets.length - 1;\n        if (max === -1) {\n            // no line feeds\n            return 0;\n        }\n        if (offset <= lineFeedsOffsets[0]) {\n            // before first line feed\n            return 0;\n        }\n        while (min < max) {\n            const mid = min + ((max - min) / 2 >> 0);\n            if (lineFeedsOffsets[mid] >= offset) {\n                max = mid - 1;\n            }\n            else {\n                if (lineFeedsOffsets[mid + 1] >= offset) {\n                    // bingo!\n                    min = mid;\n                    max = mid;\n                }\n                else {\n                    min = mid + 1;\n                }\n            }\n        }\n        return min + 1;\n    }\n}\nexport class TextModelSearch {\n    static findMatches(model, searchParams, searchRange, captureMatches, limitResultCount) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return [];\n        }\n        if (searchData.regex.multiline) {\n            return this._doFindMatchesMultiline(model, searchRange, new Searcher(searchData.wordSeparators, searchData.regex), captureMatches, limitResultCount);\n        }\n        return this._doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount);\n    }\n    /**\n     * Multiline search always executes on the lines concatenated with \\n.\n     * We must therefore compensate for the count of \\n in case the model is CRLF\n     */\n    static _getMultilineMatchRange(model, deltaOffset, text, lfCounter, matchIndex, match0) {\n        let startOffset;\n        let lineFeedCountBeforeMatch = 0;\n        if (lfCounter) {\n            lineFeedCountBeforeMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex);\n            startOffset = deltaOffset + matchIndex + lineFeedCountBeforeMatch /* add as many \\r as there were \\n */;\n        }\n        else {\n            startOffset = deltaOffset + matchIndex;\n        }\n        let endOffset;\n        if (lfCounter) {\n            const lineFeedCountBeforeEndOfMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex + match0.length);\n            const lineFeedCountInMatch = lineFeedCountBeforeEndOfMatch - lineFeedCountBeforeMatch;\n            endOffset = startOffset + match0.length + lineFeedCountInMatch /* add as many \\r as there were \\n */;\n        }\n        else {\n            endOffset = startOffset + match0.length;\n        }\n        const startPosition = model.getPositionAt(startOffset);\n        const endPosition = model.getPositionAt(endOffset);\n        return new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n    }\n    static _doFindMatchesMultiline(model, searchRange, searcher, captureMatches, limitResultCount) {\n        const deltaOffset = model.getOffsetAt(searchRange.getStartPosition());\n        // We always execute multiline search over the lines joined with \\n\n        // This makes it that \\n will match the EOL for both CRLF and LF models\n        // We compensate for offset errors in `_getMultilineMatchRange`\n        const text = model.getValueInRange(searchRange, 1 /* EndOfLinePreference.LF */);\n        const lfCounter = (model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null);\n        const result = [];\n        let counter = 0;\n        let m;\n        searcher.reset(0);\n        while ((m = searcher.next(text))) {\n            result[counter++] = createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\n            if (counter >= limitResultCount) {\n                return result;\n            }\n        }\n        return result;\n    }\n    static _doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount) {\n        const result = [];\n        let resultLen = 0;\n        // Early case for a search range that starts & stops on the same line number\n        if (searchRange.startLineNumber === searchRange.endLineNumber) {\n            const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1, searchRange.endColumn - 1);\n            resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\n            return result;\n        }\n        // Collect results from first line\n        const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1);\n        resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\n        // Collect results from middle lines\n        for (let lineNumber = searchRange.startLineNumber + 1; lineNumber < searchRange.endLineNumber && resultLen < limitResultCount; lineNumber++) {\n            resultLen = this._findMatchesInLine(searchData, model.getLineContent(lineNumber), lineNumber, 0, resultLen, result, captureMatches, limitResultCount);\n        }\n        // Collect results from last line\n        if (resultLen < limitResultCount) {\n            const text = model.getLineContent(searchRange.endLineNumber).substring(0, searchRange.endColumn - 1);\n            resultLen = this._findMatchesInLine(searchData, text, searchRange.endLineNumber, 0, resultLen, result, captureMatches, limitResultCount);\n        }\n        return result;\n    }\n    static _findMatchesInLine(searchData, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {\n        const wordSeparators = searchData.wordSeparators;\n        if (!captureMatches && searchData.simpleSearch) {\n            const searchString = searchData.simpleSearch;\n            const searchStringLen = searchString.length;\n            const textLength = text.length;\n            let lastMatchIndex = -searchStringLen;\n            while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {\n                if (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {\n                    result[resultLen++] = new FindMatch(new Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);\n                    if (resultLen >= limitResultCount) {\n                        return resultLen;\n                    }\n                }\n            }\n            return resultLen;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        let m;\n        // Reset regex to search from the beginning\n        searcher.reset(0);\n        do {\n            m = searcher.next(text);\n            if (m) {\n                result[resultLen++] = createFindMatch(new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);\n                if (resultLen >= limitResultCount) {\n                    return resultLen;\n                }\n            }\n        } while (m);\n        return resultLen;\n    }\n    static findNextMatch(model, searchParams, searchStart, captureMatches) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return null;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        if (searchData.regex.multiline) {\n            return this._doFindNextMatchMultiline(model, searchStart, searcher, captureMatches);\n        }\n        return this._doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches);\n    }\n    static _doFindNextMatchMultiline(model, searchStart, searcher, captureMatches) {\n        const searchTextStart = new Position(searchStart.lineNumber, 1);\n        const deltaOffset = model.getOffsetAt(searchTextStart);\n        const lineCount = model.getLineCount();\n        // We always execute multiline search over the lines joined with \\n\n        // This makes it that \\n will match the EOL for both CRLF and LF models\n        // We compensate for offset errors in `_getMultilineMatchRange`\n        const text = model.getValueInRange(new Range(searchTextStart.lineNumber, searchTextStart.column, lineCount, model.getLineMaxColumn(lineCount)), 1 /* EndOfLinePreference.LF */);\n        const lfCounter = (model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null);\n        searcher.reset(searchStart.column - 1);\n        const m = searcher.next(text);\n        if (m) {\n            return createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\n        }\n        if (searchStart.lineNumber !== 1 || searchStart.column !== 1) {\n            // Try again from the top\n            return this._doFindNextMatchMultiline(model, new Position(1, 1), searcher, captureMatches);\n        }\n        return null;\n    }\n    static _doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches) {\n        const lineCount = model.getLineCount();\n        const startLineNumber = searchStart.lineNumber;\n        // Look in first line\n        const text = model.getLineContent(startLineNumber);\n        const r = this._findFirstMatchInLine(searcher, text, startLineNumber, searchStart.column, captureMatches);\n        if (r) {\n            return r;\n        }\n        for (let i = 1; i <= lineCount; i++) {\n            const lineIndex = (startLineNumber + i - 1) % lineCount;\n            const text = model.getLineContent(lineIndex + 1);\n            const r = this._findFirstMatchInLine(searcher, text, lineIndex + 1, 1, captureMatches);\n            if (r) {\n                return r;\n            }\n        }\n        return null;\n    }\n    static _findFirstMatchInLine(searcher, text, lineNumber, fromColumn, captureMatches) {\n        // Set regex to search from column\n        searcher.reset(fromColumn - 1);\n        const m = searcher.next(text);\n        if (m) {\n            return createFindMatch(new Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\n        }\n        return null;\n    }\n    static findPreviousMatch(model, searchParams, searchStart, captureMatches) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return null;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        if (searchData.regex.multiline) {\n            return this._doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches);\n        }\n        return this._doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches);\n    }\n    static _doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches) {\n        const matches = this._doFindMatchesMultiline(model, new Range(1, 1, searchStart.lineNumber, searchStart.column), searcher, captureMatches, 10 * LIMIT_FIND_COUNT);\n        if (matches.length > 0) {\n            return matches[matches.length - 1];\n        }\n        const lineCount = model.getLineCount();\n        if (searchStart.lineNumber !== lineCount || searchStart.column !== model.getLineMaxColumn(lineCount)) {\n            // Try again with all content\n            return this._doFindPreviousMatchMultiline(model, new Position(lineCount, model.getLineMaxColumn(lineCount)), searcher, captureMatches);\n        }\n        return null;\n    }\n    static _doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches) {\n        const lineCount = model.getLineCount();\n        const startLineNumber = searchStart.lineNumber;\n        // Look in first line\n        const text = model.getLineContent(startLineNumber).substring(0, searchStart.column - 1);\n        const r = this._findLastMatchInLine(searcher, text, startLineNumber, captureMatches);\n        if (r) {\n            return r;\n        }\n        for (let i = 1; i <= lineCount; i++) {\n            const lineIndex = (lineCount + startLineNumber - i - 1) % lineCount;\n            const text = model.getLineContent(lineIndex + 1);\n            const r = this._findLastMatchInLine(searcher, text, lineIndex + 1, captureMatches);\n            if (r) {\n                return r;\n            }\n        }\n        return null;\n    }\n    static _findLastMatchInLine(searcher, text, lineNumber, captureMatches) {\n        let bestResult = null;\n        let m;\n        searcher.reset(0);\n        while ((m = searcher.next(text))) {\n            bestResult = createFindMatch(new Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\n        }\n        return bestResult;\n    }\n}\nfunction leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    if (matchStartIndex === 0) {\n        // Match starts at start of string\n        return true;\n    }\n    const charBefore = text.charCodeAt(matchStartIndex - 1);\n    if (wordSeparators.get(charBefore) !== 0 /* WordCharacterClass.Regular */) {\n        // The character before the match is a word separator\n        return true;\n    }\n    if (charBefore === 13 /* CharCode.CarriageReturn */ || charBefore === 10 /* CharCode.LineFeed */) {\n        // The character before the match is line break or carriage return.\n        return true;\n    }\n    if (matchLength > 0) {\n        const firstCharInMatch = text.charCodeAt(matchStartIndex);\n        if (wordSeparators.get(firstCharInMatch) !== 0 /* WordCharacterClass.Regular */) {\n            // The first character inside the match is a word separator\n            return true;\n        }\n    }\n    return false;\n}\nfunction rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    if (matchStartIndex + matchLength === textLength) {\n        // Match ends at end of string\n        return true;\n    }\n    const charAfter = text.charCodeAt(matchStartIndex + matchLength);\n    if (wordSeparators.get(charAfter) !== 0 /* WordCharacterClass.Regular */) {\n        // The character after the match is a word separator\n        return true;\n    }\n    if (charAfter === 13 /* CharCode.CarriageReturn */ || charAfter === 10 /* CharCode.LineFeed */) {\n        // The character after the match is line break or carriage return.\n        return true;\n    }\n    if (matchLength > 0) {\n        const lastCharInMatch = text.charCodeAt(matchStartIndex + matchLength - 1);\n        if (wordSeparators.get(lastCharInMatch) !== 0 /* WordCharacterClass.Regular */) {\n            // The last character in the match is a word separator\n            return true;\n        }\n    }\n    return false;\n}\nexport function isValidMatch(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    return (leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength)\n        && rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength));\n}\nexport class Searcher {\n    constructor(wordSeparators, searchRegex) {\n        this._wordSeparators = wordSeparators;\n        this._searchRegex = searchRegex;\n        this._prevMatchStartIndex = -1;\n        this._prevMatchLength = 0;\n    }\n    reset(lastIndex) {\n        this._searchRegex.lastIndex = lastIndex;\n        this._prevMatchStartIndex = -1;\n        this._prevMatchLength = 0;\n    }\n    next(text) {\n        const textLength = text.length;\n        let m;\n        do {\n            if (this._prevMatchStartIndex + this._prevMatchLength === textLength) {\n                // Reached the end of the line\n                return null;\n            }\n            m = this._searchRegex.exec(text);\n            if (!m) {\n                return null;\n            }\n            const matchStartIndex = m.index;\n            const matchLength = m[0].length;\n            if (matchStartIndex === this._prevMatchStartIndex && matchLength === this._prevMatchLength) {\n                if (matchLength === 0) {\n                    // the search result is an empty string and won't advance `regex.lastIndex`, so `regex.exec` will stuck here\n                    // we attempt to recover from that by advancing by two if surrogate pair found and by one otherwise\n                    if (strings.getNextCodePoint(text, textLength, this._searchRegex.lastIndex) > 0xFFFF) {\n                        this._searchRegex.lastIndex += 2;\n                    }\n                    else {\n                        this._searchRegex.lastIndex += 1;\n                    }\n                    continue;\n                }\n                // Exit early if the regex matches the same range twice\n                return null;\n            }\n            this._prevMatchStartIndex = matchStartIndex;\n            this._prevMatchLength = matchLength;\n            if (!this._wordSeparators || isValidMatch(this._wordSeparators, text, textLength, matchStartIndex, matchLength)) {\n                return m;\n            }\n        } while (m);\n        return null;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Returns:\n *  - -1 => the line consists of whitespace\n *  - otherwise => the indent level is returned value\n */\nexport function computeIndentLevel(line, tabSize) {\n    let indent = 0;\n    let i = 0;\n    const len = line.length;\n    while (i < len) {\n        const chCode = line.charCodeAt(i);\n        if (chCode === 32 /* CharCode.Space */) {\n            indent++;\n        }\n        else if (chCode === 9 /* CharCode.Tab */) {\n            indent = indent - indent % tabSize + tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    if (i === len) {\n        return -1; // line only consists of whitespace\n    }\n    return indent;\n}\n"],"names":["MirrorTextModel","uri","lines","eol","versionId","_classCallCheck","this","_uri","_lines","_eol","_versionId","_lineStarts","_cachedTextValue","_createClass","key","value","length","get","join","e","_step","changes","_iterator","_createForOfIteratorHelper","s","n","done","change","_acceptDeleteRange","range","_acceptInsertText","Position","startLineNumber","startColumn","text","err","f","eolLength","linesLength","lineStartValues","Uint32Array","i","PrefixSumComputer","lineIndex","newValue","setValue","endLineNumber","_setLineText","substring","endColumn","splice","removeValues","position","insertText","insertLines","splitLines","lineNumber","column","newLengths","insertValues","values","prefixSum","prefixSumValidIndex","Int32Array","insertIndex","toUint32","oldValues","oldPrefixSum","insertValuesLen","set","subarray","index","startIndex","count","maxCount","_getPrefixSum","Math","max","sum","floor","getTotalSum","low","high","mid","midStop","midStart","PrefixSumIndexOfResult","ConstantTimePrefixSumComputer","_values","_isValid","_validEndIndex","_prefixSum","_indexBySum","_ensureValid","idx","viewLinesAbove","start","deleteCount","_invalidate","insertArr","arrayInsert","min","len","sumAbove","j","remainder","_prefixSumIndexOfResultBrand","undefined","TreeNode","piece","color","size_left","lf_left","parent","left","right","SENTINEL","leftest","node","righttest","calculateSize","calculateLF","lineFeedCnt","resetSentinel","leftRotate","tree","x","y","root","rightRotate","rbDelete","z","detach","yWasRed","recomputeTreeMetadata","newSizeLeft","newLFLeft","delta","lf_delta","updateTreeMetadata","w","fixInsert","lineFeedCntDelta","AverageBufferSize","createUintArray","arr","r","Uint16Array","LineStarts","lineStarts","cr","lf","crlf","isBasicASCII","createLineStartsFast","str","readonly","arguments","rLength","chr","charCodeAt","Piece","bufferIndex","end","StringBuffer","buffer","PieceTreeSnapshot","BOM","_this","_pieces","_tree","_BOM","_index","iterate","push","getPieceContent","PieceTreeSearchCache","limit","_limit","_cache","offset","nodePos","nodeStartOffset","nodeStartLineNumber","nodePosition","shift","hasInvalidVal","tmp","newArr","entry","PieceTreeBase","chunks","eolNormalized","create","_buffers","_lastChangeBufferPos","line","_lineCnt","_length","_EOL","_EOLLength","_EOLNormalized","lastNode","rbInsertRight","_searchCache","_lastVisitedLine","computeBufferMetadata","_this2","averageBufferSize","tempChunk","tempChunkLen","getNodeContent","replace","newEOL","normalizeEOL","leftLen","getAccumulatedValue","lfCnt","originalOffset","out","getIndexOf","getOffsetAt","startPosition","nodeAt2","endPosition","getValueInRange2","getEOL","startOffset","offsetInBuffer","ret","next","substr","_this3","currentLine","danglingCR","pieceLength","pieceStartLine","pieceEndLine","pieceStartOffset","getLineRawContent","matchingNode","targetOffset","_getCharCode","getLineCount","getLength","searcher","startCursor","endCursor","searchData","captureMatches","limitResultCount","resultLen","result","m","searchText","startOffsetInBuffer","_wordSeparators","reset","positionInBuffer","getLineFeedCnt","retStartColumn","retEndColumn","createFindMatch","Range","searchRange","Searcher","wordSeparators","regex","findMatchesInNode","currentNode","lineBreakCnt","nextLineStartOffset","getLineContent","_findMatchesInLine","deltaOffset","simpleSearch","searchString","searchStringLen","textLength","lastMatchIndex","indexOf","isValidMatch","FindMatch","_this$nodeAt","nodeAt","insertPosInBuffer","appendToNode","insertContentToNodeLeft","validate","nodesToDel","newRightPiece","shouldCheckCRLF","endWithCR","nodeCharCodeAt","newStart","startWithLF","previousPos","deleteNodeTail","newPieces","createNewPieces","tmpNode","k","deleteNodes","insertContentToNodeRight","pieces","rbInsertLeft","cnt","startNode","endNode","startSplitPosInBuffer","endSplitPosInBuffer","validateCRLFWithPrevNode","deleteNodeHead","validateCRLFWithNextNode","shrinkNode","prev","nPiece","newNode","adjustCarriageReturnFromNext","endOffset","previousCharOffset","cursor","nodes","lastChar","splitText","concat","slice","endIndex","endPos","newPiece","cache","get2","prevAccumulatedValue","accumulatedValue","originalLineNumber","pos","lineCnt","realLineCnt","expectedLineStartIndex","originalLFCnt","originalEndOffset","newEnd","newEndOffset","newLineFeedCnt","size_delta","newLength","originalStartOffset","originalStartPos","originalEndPos","oldLength","oldLFCnt","hitCRLF","prevStartOffset","pop","oldLineFeedCnt","prevAccumualtedValue","offsetOfNode","newOffset","val","nextNode","fixCRLF","prevNewLength","prevNewLFCnt","callback","leftRet","p","prevNode","PieceTreeTextBuffer","_Disposable","_inherits","_super","_createSuper","containsRTL","containsUnusualLineTerminators","call","_onDidChangeContent","_register","Emitter","_mightContainNonBasicASCII","_mightContainRTL","_mightContainUnusualLineTerminators","_pieceTree","preserveBOM","createSnapshot","getPositionAt","isEmpty","lineEnding","_getEndOfLine","getValueInRange","eolOffsetCompensation","desiredEOL","actualEOL","fromLineNumber","toLineNumber","lineContent","fromOffset","toOffset","strings","getValueLengthInRange","getLinesContent","getLineCharCode","getLineLength","Error","setEOL","rawOperations","recordTrimAutoWhitespace","computeUndoEdits","mightContainRTL","mightContainUnusualLineTerminators","mightContainNonBasicASCII","canReduceOperations","operations","op","_isTracked","validatedRange","textMightContainNonBasicASCII","validText","eolCount","firstLineLength","lastLineLength","strEOL","_countEOL","countEOL","_countEOL2","_slicedToArray","bufferEOL","sortIndex","identifier","rangeOffset","rangeLength","forceMoveMarkers","Boolean","isAutoWhitespaceEdit","sort","_sortOpsAscending","hasTouchingRanges","rangeEnd","getEndPosition","nextRangeStart","getStartPosition","isBeforeOrEqual","isBefore","_reduceOperations","reverseRanges","_getInverseEditRanges","newTrimAutoWhitespaceCandidates","reverseRange","currentLineContent","oldContent","reverseOperations","reverseRangeDeltaOffset","bufferText","reverseRangeOffset","textChange","TextChange","a","b","contentChanges","_doApplyEdits","trimAutoWhitespaceLineNumbers","prevContent","fire","ApplyEditsResult","_toSingleEditOperation","firstEditRange","lastEditRange","entireEditRange","lastEndLineNumber","lastEndColumn","operation","_countEOL3","_countEOL4","_sortOpsDescending","delete","insert","contentChangeRange","findMatchesLineByLine","prevOpEndLineNumber","prevOpEndColumn","prevOp","resultRange","lineCount","compareRangesUsingEnds","Disposable","PieceTreeTextBufferFactory","_chunks","_bom","_cr","_lf","_crlf","_containsRTL","_containsUnusualLineTerminators","_isBasicASCII","_normalizeEOL","defaultEOL","totalEOLCount","totalCRCount","_getEOL","newLineStart","textBuffer","disposable","PieceTreeTextBufferBuilder","_hasPreviousChar","_previousChar","_tmpLineStarts","chunk","_acceptChunk1","allowEmptyStrings","_acceptChunk2","String","fromCharCode","createLineStarts","_finish","lastChunk","newLineStarts","TokenizerWithStateStoreAndTextModel","_TokenizerWithStateSt","tokenizationSupport","_textModel","_languageIdCodec","builder","languageId","getLanguageId","nextLineNumber","store","getFirstInvalidEndStateLineNumber","lineStartState","getStartState","safeTokenize","add","tokens","setEndState","endState","character","lineTokens","LineTokens","getCount","tokenIndex","findTokenIndexAtOffset","getStandardTokenType","newText","curLineContent","newLineContent","getLanguageIdAtPosition","firstInvalidLineNumber","getFirstInvalidEndStateLineNumberOrMax","heuristicTokens","updateTokensUntilLine","state","guessStartState","nonWhitespaceColumn","getLineFirstNonWhitespaceColumn","likelyRelevantLines","initialState","newNonWhitespaceIndex","getInitialState","reverse","_i","_likelyRelevantLines","TokenizerWithStateStore","TrackingTokenizationStateStore","getEndState","tokenizationStateStore","TokenizationStateStore","_invalidEndStatesLineNumbers","RangePriorityQueueImpl","addRange","OffsetRange","removeMin","newLineCount","acceptChange","addRangeAndResize","endLineNumberExclusive","c","LineRange","Number","MAX_SAFE_INTEGER","_lineEndStates","FixedArray","oldState","equals","_ranges","endExclusive","idxFirstMightBeIntersecting","idxFirstIsAfter","newRange","endEx","map","toString","languageIdCodec","hasEOL","tokenizeEncoded","clone","onUnexpectedError","nullTokenizeEncoded","encodeLanguageId","convertToEndOffset","DefaultBackgroundTokenizer","_tokenizerWithStateStore","_backgroundTokenStore","_isDisposed","_isScheduled","_beginBackgroundTokenization","isAttachedToEditor","_hasLinesToTokenize","runWhenIdle","deadline","_backgroundTokenizeWithDeadline","endTime","Date","now","timeRemaining","execute","_backgroundTokenizeForAtLeast1ms","setTimeout0","ContiguousMultilineTokensBuilder","sw","StopWatch","elapsed","_tokenizeOneInvalidLine","setTokens","finalize","checkFinished","isTokenizationComplete","backgroundTokenizationFinished","invalidateEndStateRange","TokenizationTextModelPart","_TextModelPart","_languageService","_languageConfigurationService","_bracketPairsTextModelPart","_languageId","_attachedViews","_semanticTokens","SparseTokensStore","_onDidChangeLanguage","onDidChangeLanguage","event","_onDidChangeLanguageConfiguration","onDidChangeLanguageConfiguration","_onDidChangeTokens","onDidChangeTokens","grammarTokens","GrammarTokens","onDidChange","affects","_emitModelTokensChangedEvent","onDidChangeBackgroundTokenizationState","handleDidChangeBackgroundTokenizationState","isFlush","flush","isEolChange","acceptEdit","handleDidChangeContent","handleDidChangeAttached","validateLineNumber","syntacticTokens","getLineTokens","addSparseTokens","_isDisposing","handleDidChangeTokens","BugIndicatingError","hasTokens","resetTokenization","backgroundTokenizationState","forceTokenization","isCheapToTokenize","tokenizeIfCheap","getTokenTypeIfInsertingCharacter","tokenizeLineWithEdit","isComplete","semanticTokensApplied","ranges","hasCompleteSemanticTokens","changedRange","validateRange","setPartial","_position","assertNotDisposed","validatePosition","_TokenizationTextMode","_findLanguageBoundaries","_TokenizationTextMode2","rbStartOffset","rbEndOffset","rightBiasedWord","getWordAtText","getLanguageConfiguration","getWordDefinition","_TokenizationTextMode3","_TokenizationTextMode4","lbStartOffset","lbEndOffset","leftBiasedWord","wordAtPosition","getWordAtPosition","word","source","oldLanguage","newLanguage","handleDidChangeLanguage","getStartOffset","tokenCount","getEndOffset","TextModelPart","_super2","attachedViews","_tokenizer","_defaultBackgroundTokenizer","_backgroundTokenizer","MutableDisposable","_tokens","ContiguousTokensStore","_debugBackgroundTokenizer","_backgroundTokenizationState","_onDidChangeBackgroundTokenizationState","_attachedViewStates","DisposableMap","TokenizationRegistry","changedLanguages","onDidChangeVisibleRanges","_ref","view","existing","AttachedViewHandler","refreshRanges","lineRanges","handleStateChange","deleteAndDispose","_a","fireTokenChangeEvent","_debugBackgroundTokens","_debugBackgroundStates","_initializeTokenizati","isTooLargeForTokenization","initializeTokenization","_initializeTokenizati2","clear","_b","_c","firstInvalidEndStateLineNumber","createBackgroundTokenizer","backgroundTokenizerShouldOnlyVerifyTokens","handleChanges","setMultilineTokens","refreshAllVisibleLineTokens","_step2","_iterator2","acceptChanges","joinMany","_toConsumableArray","_ref2","_ref3","_step3","_iterator3","refreshRange","tokenizeHeuristically","changedTokens","_step4","_iterator4","requestTokens","lineText","getTokens","backgroundResult","reportMismatchingTokens","validatedPosition","_Disposable2","_super3","_refreshTokens","_this4","runner","RunOnceScheduler","update","_computedLineRanges","_lineRanges","visibleLineRanges","stabilized","cancel","schedule","__decorate","decorators","target","desc","d","Object","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","createTextBuffer","acceptChunk","finish","createTextBufferFactory","model","snapshot","read","createTextBufferFactoryFromSnapshot","MODEL_ID","TextModelSnapshot","_source","_eos","resultCnt","resultLength","invalidFunc","TextModel","languageIdOrSelection","creationOptions","associatedResource","_undoRedoService","_onWillDispose","onWillDispose","_onDidChangeDecorations","DidChangeDecorationsEmitter","affectedInjectedTextLines","handleBeforeFireDecorationsChangedEvent","onDidChangeDecorations","_onDidChangeOptions","onDidChangeOptions","_onDidChangeAttached","onDidChangeAttached","_onDidChangeInjectedText","_eventEmitter","DidChangeContentEmitter","_languageSelectionListener","_deltaDecorationCallCnt","AttachedViews","id","isForSimpleWidget","_associatedResource","URI","parse","_attachedEditorCount","_createTextBuffer","_buffer","_bufferDisposable","_options","resolveOptions","_setLanguage","_bracketPairs","BracketPairsTextModelPart","_assertThisInitialized","_guidesTextModelPart","GuidesTextModelPart","_decorationProvider","ColorizedBracketPairsDecorationProvider","_tokenizationTextModelPart","bufferLineCount","bufferTextLength","largeFileOptimizations","_isTooLargeForTokenization","LARGE_FILE_SIZE_THRESHOLD","LARGE_FILE_LINE_COUNT_THRESHOLD","_isTooLargeForSyncing","_MODEL_SYNC_LIMIT","_alternativeVersionId","_initialUndoRedoSnapshot","__isDisposing","_instanceId","_lastDecorationId","_decorations","_decorationsTree","DecorationsTrees","_commandManager","EditStack","_isUndoing","_isRedoing","_trimAutoWhitespaceLines","beginDeferredEmit","endDeferredEmit","requestRichLanguageFeatures","listener","slowEvent","contentChangedEvent","combinedDisposable","fastEvent","dispose","_get","_getPrototypeOf","prototype","emptyDisposedTextBuffer","None","rawChange","InternalModelContentChangeEvent","_assertNotDisposed","illegalArgument","_createTextBuffer2","_setValueFromTextBuffer","isUndoing","isRedoing","getVersionId","textBufferDisposable","oldFullModelRange","getFullModelRange","oldModelValueLength","getLineMaxColumn","_increaseVersionId","_emitContentChangedEvent","ModelRawContentChangedEvent","ModelRawFlush","_createContentChanged2","getValue","_onBeforeEOLChange","_onAfterEOLChange","ModelRawEOLChanged","ensureAllNodesHaveRanges","allDecorations","collectNodesPostOrder","cachedAbsoluteStart","cachedAbsoluteEnd","cachedVersionId","recomputeMaxEnd","attachView","detachView","smallLineCharCount","longLineCharCount","lineLength","tabSize","indentSize","insertSpaces","_newOpts","originalIndentSize","trimAutoWhitespace","bracketPairColorizationOptions","bracketColorizationOptions","newOpts","createChangeEvent","handleDidChangeOptions","defaultInsertSpaces","defaultTabSize","guessedIndentation","guessIndentation","updateOptions","normalizeIndentation","selections","matches","findMatches","resetMightContainUnusualLineTerminators","pushEditOperations","rawPosition","_validatePosition","rawOffset","newAlternativeVersionId","newInitialUndoRedoSnapshot","fullModelRange","fullModelValue","getBOM","rawRange","getCharacterCountInRange","getLineLastNonWhitespaceColumn","linesCount","initialStartLineNumber","initialStartColumn","isNaN","maxColumn","initialEndLineNumber","initialEndColumn","Selection","validationType","charCodeBefore","_lineNumber","_column","_isValidPosition","charCodeBeforeStart","charCodeBeforeEnd","startInsideSurrogatePair","endInsideSurrogatePair","_range","_isValidRange","candidate","rawSearchScope","isRegex","matchCase","searchRanges","Array","isArray","every","searchScope","isIRange","d1","d2","matchMapper","uniqueSearchRanges","reduce","curr","areIntersecting","plusRange","SearchParams","parseSearchRequest","TextModelSearch","rawSearchStart","searchStart","findNextMatch","findPreviousMatch","pushStackElement","popStackElement","pushEOL","rawOperation","_validateEditOperation","beforeCursorState","editOperations","cursorStateComputer","group","_pushEditOperations","_validateEditOperations","incomingEdits","editsAreNearCursors","sel","foundEditNearSel","lenJ","editRange","selIsAbove","selIsBelow","trimLineNumber","maxLineColumn","allowTrimLine","editText","charAt","trimRange","pushEditOperation","resultingAlternativeVersionId","resultingSelection","edits","rangeStart","newPosition","oldText","_applyUndoRedoEdits","_this5","oldPosition","oldEnd","applyEdits","_overwriteAlternativeVersionId","_this6","oldLineCount","acceptReplace","rawContentChanges","deletingLinesCnt","insertingLinesCnt","editingLinesCnt","changeLineCountDelta","currentEditStartLineNumber","firstEditLineNumber","lastInsertedLineNumber","decorationsWithInjectedTextInEditedRange","getInjectedTextInInterval","injectedTextInEditedRange","LineInjectedText","fromDecorations","injectedTextInEditedRangeQueue","ArrayQueue","_loop","editLineNumber","currentEditLineNumber","takeFromEndWhile","decorationsInCurrentLine","ModelRawLineChanged","spliceStartLineNumber","ModelRawLinesDeleted","spliceLineNumber","injectedTexts","newLines","_loop2","takeWhile","ModelRawLinesInserted","reverseEdits","undo","canUndo","redo","canRedo","_this7","size","lineChangeEvents","from","_getInjectedTextInLine","ModelInjectedTextChangedEvent","ownerId","_changeDecorations","_this8","changeAccessor","addDecoration","options","_deltaDecorationsImpl","changeDecoration","_changeDecorationImpl","changeDecorationOptions","_changeDecorationOptionsImpl","_normalizeOptions","removeDecoration","deltaDecorations","oldDecorations","newDecorations","console","warn","getDecorationRange","newStickiness","TRACKED_RANGE_OPTIONS","_validateRangeRelaxedNoAllocations","setOptions","collectNodesFromOwner","decorationId","getNodeRange","filterOutValidation","getLinesDecorations","_startLineNumber","_endLineNumber","onlyMarginDecorations","decorations","_getDecorationsInRange","pushMany","getDecorationsInRange","onlyMinimapDecorations","getAll","getAllInjectedText","filter","t","getAllDecorations","filterRange","filterOwnerId","getAllInInterval","getRangeAt","after","oldRange","recordLineAffectedByInjectedText","before","checkAffectedAndFire","nodeWasInOverviewRuler","overviewRuler","nodeIsInOverviewRuler","nodeRange","oldDecorationsIds","suppressEvents","oldDecorationsLen","oldDecorationIndex","newDecorationsLen","newDecorationIndex","internalDecorationId","IntervalNode","newDecoration","tokenization","_this9","setLanguageId","getWordUntilPosition","affinity","indent","indentOfLine","detectIndentation","isNodeInOverviewRuler","isNodeInjectedText","DEFAULT_CREATION_OPTIONS","EDITOR_MODEL_DEFAULTS","IUndoRedoService","ILanguageService","ILanguageConfigurationService","_decorationsTree0","IntervalTree","_decorationsTree1","_injectedTextDecorationsTree","host","_intervalSearch","_ensureNodesHaveRanges","r0","intervalSearch","r1","r2","showIfCollapsed","search","overviewRulerOnly","_search","_resolveNode","resolveNode","cleanClassName","className","DecorationOptions","darkColor","ModelDecorationOverviewRulerOptions","_DecorationOptions","_this10","_resolvedColor","Center","theme","type","_resolveColor","getColor","ModelDecorationGlyphMarginOptions","Left","ModelDecorationMinimapOptions","_DecorationOptions2","_this11","Color","fromHex","ModelDecorationInjectedTextOptions","content","inlineClassName","inlineClassNameAffectsLetterSpacing","attachedData","cursorStops","ModelDecorationOptions","_d","_e","description","blockClassName","blockDoesNotCollapse","blockIsAfterEnd","blockPadding","stickiness","zIndex","hoverMessage","glyphMarginHoverMessage","isWholeLine","collapseOnReplaceEdit","minimap","glyphMargin","glyphMarginClassName","linesDecorationsClassName","firstLineDecorationClassName","marginClassName","beforeContentClassName","afterContentClassName","hideInCommentTokens","hideInStringTokens","EMPTY","register","createDynamic","_super4","handleBeforeFire","_this12","_actual","_affectedInjectedTextLines","_deferredCnt","_shouldFireDeferred","_affectsMinimap","_affectsOverviewRuler","_affectsGlyphMargin","doFire","Set","tryFire","affectsMinimap","affectsOverviewRuler","affectsGlyphMargin","_Disposable3","_super5","_this13","_fastEmitter","_slowEmitter","_deferredEvent","rawContentChangedEvent","merge","_onDidChangeVisibleRanges","_views","_this14","AttachedViewImpl","visibleLines","apply","multiline","chCode","nextChCode","isMultilineRegexSource","wholeWord","global","unicode","canUseSimpleSearch","toLowerCase","toUpperCase","SearchData","getMapForWordSeparators","rawMatches","LineFeedCounter","lineFeedsOffsets","lineFeedsOffsetsLen","textLen","_lineFeedsOffsets","searchParams","_doFindMatchesMultiline","_doFindMatchesLineByLine","lfCounter","matchIndex","match0","lineFeedCountBeforeMatch","findLineFeedCountBeforeOffset","lineFeedCountInMatch","counter","_getMultilineMatchRange","_doFindNextMatchMultiline","_doFindNextMatchLineByLine","searchTextStart","_findFirstMatchInLine","fromColumn","_doFindPreviousMatchMultiline","_doFindPreviousMatchLineByLine","_findLastMatchInLine","bestResult","matchStartIndex","matchLength","charBefore","firstCharInMatch","leftIsWordBounday","charAfter","lastCharInMatch","rightIsWordBounday","searchRegex","_searchRegex","_prevMatchStartIndex","_prevMatchLength","lastIndex","exec","computeIndentLevel"],"sourceRoot":""}