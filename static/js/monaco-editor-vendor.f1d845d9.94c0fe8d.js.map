{"version":3,"file":"static/js/monaco-editor-vendor.f1d845d9.94c0fe8d.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/common/commands/replaceCommand.js","../node_modules/monaco-editor/esm/vs/editor/common/commands/shiftCommand.js","../node_modules/monaco-editor/esm/vs/editor/common/commands/surroundSelectionCommand.js","../node_modules/monaco-editor/esm/vs/editor/common/commands/trimTrailingWhitespaceCommand.js","../node_modules/monaco-editor/esm/vs/editor/common/config/editorConfigurationSchema.js","../node_modules/monaco-editor/esm/vs/editor/common/config/editorOptions.js","../node_modules/monaco-editor/esm/vs/editor/common/config/editorZoom.js","../node_modules/monaco-editor/esm/vs/editor/common/config/fontInfo.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Selection } from '../core/selection.js';\nexport class ReplaceCommand {\n    constructor(range, text, insertsAutoWhitespace = false) {\n        this._range = range;\n        this._text = text;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const srcRange = inverseEditOperations[0].range;\n        return Selection.fromPositions(srcRange.getEndPosition());\n    }\n}\nexport class ReplaceCommandThatSelectsText {\n    constructor(range, text) {\n        this._range = range;\n        this._text = text;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const srcRange = inverseEditOperations[0].range;\n        return Selection.fromRange(srcRange, 0 /* SelectionDirection.LTR */);\n    }\n}\nexport class ReplaceCommandWithoutChangingPosition {\n    constructor(range, text, insertsAutoWhitespace = false) {\n        this._range = range;\n        this._text = text;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const srcRange = inverseEditOperations[0].range;\n        return Selection.fromPositions(srcRange.getStartPosition());\n    }\n}\nexport class ReplaceCommandWithOffsetCursorState {\n    constructor(range, text, lineNumberDeltaOffset, columnDeltaOffset, insertsAutoWhitespace = false) {\n        this._range = range;\n        this._text = text;\n        this._columnDeltaOffset = columnDeltaOffset;\n        this._lineNumberDeltaOffset = lineNumberDeltaOffset;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const srcRange = inverseEditOperations[0].range;\n        return Selection.fromPositions(srcRange.getEndPosition().delta(this._lineNumberDeltaOffset, this._columnDeltaOffset));\n    }\n}\nexport class ReplaceCommandThatPreservesSelection {\n    constructor(editRange, text, initialSelection, forceMoveMarkers = false) {\n        this._range = editRange;\n        this._text = text;\n        this._initialSelection = initialSelection;\n        this._forceMoveMarkers = forceMoveMarkers;\n        this._selectionId = null;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text, this._forceMoveMarkers);\n        this._selectionId = builder.trackSelection(this._initialSelection);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this._selectionId);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { getEnterAction } from '../languages/enterAction.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nconst repeatCache = Object.create(null);\nexport function cachedStringRepeat(str, count) {\n    if (count <= 0) {\n        return '';\n    }\n    if (!repeatCache[str]) {\n        repeatCache[str] = ['', str];\n    }\n    const cache = repeatCache[str];\n    for (let i = cache.length; i <= count; i++) {\n        cache[i] = cache[i - 1] + str;\n    }\n    return cache[count];\n}\nlet ShiftCommand = class ShiftCommand {\n    constructor(range, opts, _languageConfigurationService) {\n        this._languageConfigurationService = _languageConfigurationService;\n        this._opts = opts;\n        this._selection = range;\n        this._selectionId = null;\n        this._useLastEditRangeForCursorEndPosition = false;\n        this._selectionStartColumnStaysPut = false;\n    }\n    static unshiftIndent(line, column, tabSize, indentSize, insertSpaces) {\n        // Determine the visible column where the content starts\n        const contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(line, column, tabSize);\n        if (insertSpaces) {\n            const indent = cachedStringRepeat(' ', indentSize);\n            const desiredTabStop = CursorColumns.prevIndentTabStop(contentStartVisibleColumn, indentSize);\n            const indentCount = desiredTabStop / indentSize; // will be an integer\n            return cachedStringRepeat(indent, indentCount);\n        }\n        else {\n            const indent = '\\t';\n            const desiredTabStop = CursorColumns.prevRenderTabStop(contentStartVisibleColumn, tabSize);\n            const indentCount = desiredTabStop / tabSize; // will be an integer\n            return cachedStringRepeat(indent, indentCount);\n        }\n    }\n    static shiftIndent(line, column, tabSize, indentSize, insertSpaces) {\n        // Determine the visible column where the content starts\n        const contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(line, column, tabSize);\n        if (insertSpaces) {\n            const indent = cachedStringRepeat(' ', indentSize);\n            const desiredTabStop = CursorColumns.nextIndentTabStop(contentStartVisibleColumn, indentSize);\n            const indentCount = desiredTabStop / indentSize; // will be an integer\n            return cachedStringRepeat(indent, indentCount);\n        }\n        else {\n            const indent = '\\t';\n            const desiredTabStop = CursorColumns.nextRenderTabStop(contentStartVisibleColumn, tabSize);\n            const indentCount = desiredTabStop / tabSize; // will be an integer\n            return cachedStringRepeat(indent, indentCount);\n        }\n    }\n    _addEditOperation(builder, range, text) {\n        if (this._useLastEditRangeForCursorEndPosition) {\n            builder.addTrackedEditOperation(range, text);\n        }\n        else {\n            builder.addEditOperation(range, text);\n        }\n    }\n    getEditOperations(model, builder) {\n        const startLine = this._selection.startLineNumber;\n        let endLine = this._selection.endLineNumber;\n        if (this._selection.endColumn === 1 && startLine !== endLine) {\n            endLine = endLine - 1;\n        }\n        const { tabSize, indentSize, insertSpaces } = this._opts;\n        const shouldIndentEmptyLines = (startLine === endLine);\n        if (this._opts.useTabStops) {\n            // if indenting or outdenting on a whitespace only line\n            if (this._selection.isEmpty()) {\n                if (/^\\s*$/.test(model.getLineContent(startLine))) {\n                    this._useLastEditRangeForCursorEndPosition = true;\n                }\n            }\n            // keep track of previous line's \"miss-alignment\"\n            let previousLineExtraSpaces = 0, extraSpaces = 0;\n            for (let lineNumber = startLine; lineNumber <= endLine; lineNumber++, previousLineExtraSpaces = extraSpaces) {\n                extraSpaces = 0;\n                const lineText = model.getLineContent(lineNumber);\n                let indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\n                if (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\n                    // empty line or line with no leading whitespace => nothing to do\n                    continue;\n                }\n                if (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\n                    // do not indent empty lines => nothing to do\n                    continue;\n                }\n                if (indentationEndIndex === -1) {\n                    // the entire line is whitespace\n                    indentationEndIndex = lineText.length;\n                }\n                if (lineNumber > 1) {\n                    const contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(lineText, indentationEndIndex + 1, tabSize);\n                    if (contentStartVisibleColumn % indentSize !== 0) {\n                        // The current line is \"miss-aligned\", so let's see if this is expected...\n                        // This can only happen when it has trailing commas in the indent\n                        if (model.tokenization.isCheapToTokenize(lineNumber - 1)) {\n                            const enterAction = getEnterAction(this._opts.autoIndent, model, new Range(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1), lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)), this._languageConfigurationService);\n                            if (enterAction) {\n                                extraSpaces = previousLineExtraSpaces;\n                                if (enterAction.appendText) {\n                                    for (let j = 0, lenJ = enterAction.appendText.length; j < lenJ && extraSpaces < indentSize; j++) {\n                                        if (enterAction.appendText.charCodeAt(j) === 32 /* CharCode.Space */) {\n                                            extraSpaces++;\n                                        }\n                                        else {\n                                            break;\n                                        }\n                                    }\n                                }\n                                if (enterAction.removeText) {\n                                    extraSpaces = Math.max(0, extraSpaces - enterAction.removeText);\n                                }\n                                // Act as if `prefixSpaces` is not part of the indentation\n                                for (let j = 0; j < extraSpaces; j++) {\n                                    if (indentationEndIndex === 0 || lineText.charCodeAt(indentationEndIndex - 1) !== 32 /* CharCode.Space */) {\n                                        break;\n                                    }\n                                    indentationEndIndex--;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (this._opts.isUnshift && indentationEndIndex === 0) {\n                    // line with no leading whitespace => nothing to do\n                    continue;\n                }\n                let desiredIndent;\n                if (this._opts.isUnshift) {\n                    desiredIndent = ShiftCommand.unshiftIndent(lineText, indentationEndIndex + 1, tabSize, indentSize, insertSpaces);\n                }\n                else {\n                    desiredIndent = ShiftCommand.shiftIndent(lineText, indentationEndIndex + 1, tabSize, indentSize, insertSpaces);\n                }\n                this._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), desiredIndent);\n                if (lineNumber === startLine && !this._selection.isEmpty()) {\n                    // Force the startColumn to stay put because we're inserting after it\n                    this._selectionStartColumnStaysPut = (this._selection.startColumn <= indentationEndIndex + 1);\n                }\n            }\n        }\n        else {\n            // if indenting or outdenting on a whitespace only line\n            if (!this._opts.isUnshift && this._selection.isEmpty() && model.getLineLength(startLine) === 0) {\n                this._useLastEditRangeForCursorEndPosition = true;\n            }\n            const oneIndent = (insertSpaces ? cachedStringRepeat(' ', indentSize) : '\\t');\n            for (let lineNumber = startLine; lineNumber <= endLine; lineNumber++) {\n                const lineText = model.getLineContent(lineNumber);\n                let indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\n                if (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\n                    // empty line or line with no leading whitespace => nothing to do\n                    continue;\n                }\n                if (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\n                    // do not indent empty lines => nothing to do\n                    continue;\n                }\n                if (indentationEndIndex === -1) {\n                    // the entire line is whitespace\n                    indentationEndIndex = lineText.length;\n                }\n                if (this._opts.isUnshift && indentationEndIndex === 0) {\n                    // line with no leading whitespace => nothing to do\n                    continue;\n                }\n                if (this._opts.isUnshift) {\n                    indentationEndIndex = Math.min(indentationEndIndex, indentSize);\n                    for (let i = 0; i < indentationEndIndex; i++) {\n                        const chr = lineText.charCodeAt(i);\n                        if (chr === 9 /* CharCode.Tab */) {\n                            indentationEndIndex = i + 1;\n                            break;\n                        }\n                    }\n                    this._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), '');\n                }\n                else {\n                    this._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, 1), oneIndent);\n                    if (lineNumber === startLine && !this._selection.isEmpty()) {\n                        // Force the startColumn to stay put because we're inserting after it\n                        this._selectionStartColumnStaysPut = (this._selection.startColumn === 1);\n                    }\n                }\n            }\n        }\n        this._selectionId = builder.trackSelection(this._selection);\n    }\n    computeCursorState(model, helper) {\n        if (this._useLastEditRangeForCursorEndPosition) {\n            const lastOp = helper.getInverseEditOperations()[0];\n            return new Selection(lastOp.range.endLineNumber, lastOp.range.endColumn, lastOp.range.endLineNumber, lastOp.range.endColumn);\n        }\n        const result = helper.getTrackedSelection(this._selectionId);\n        if (this._selectionStartColumnStaysPut) {\n            // The selection start should not move\n            const initialStartColumn = this._selection.startColumn;\n            const resultStartColumn = result.startColumn;\n            if (resultStartColumn <= initialStartColumn) {\n                return result;\n            }\n            if (result.getDirection() === 0 /* SelectionDirection.LTR */) {\n                return new Selection(result.startLineNumber, initialStartColumn, result.endLineNumber, result.endColumn);\n            }\n            return new Selection(result.endLineNumber, result.endColumn, result.startLineNumber, initialStartColumn);\n        }\n        return result;\n    }\n};\nShiftCommand = __decorate([\n    __param(2, ILanguageConfigurationService)\n], ShiftCommand);\nexport { ShiftCommand };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nexport class SurroundSelectionCommand {\n    constructor(range, charBeforeSelection, charAfterSelection) {\n        this._range = range;\n        this._charBeforeSelection = charBeforeSelection;\n        this._charAfterSelection = charAfterSelection;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(new Range(this._range.startLineNumber, this._range.startColumn, this._range.startLineNumber, this._range.startColumn), this._charBeforeSelection);\n        builder.addTrackedEditOperation(new Range(this._range.endLineNumber, this._range.endColumn, this._range.endLineNumber, this._range.endColumn), this._charAfterSelection);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const firstOperationRange = inverseEditOperations[0].range;\n        const secondOperationRange = inverseEditOperations[1].range;\n        return new Selection(firstOperationRange.endLineNumber, firstOperationRange.endColumn, secondOperationRange.endLineNumber, secondOperationRange.endColumn - this._charAfterSelection.length);\n    }\n}\n/**\n * A surround selection command that runs after composition finished.\n */\nexport class CompositionSurroundSelectionCommand {\n    constructor(_position, _text, _charAfter) {\n        this._position = _position;\n        this._text = _text;\n        this._charAfter = _charAfter;\n    }\n    getEditOperations(model, builder) {\n        builder.addTrackedEditOperation(new Range(this._position.lineNumber, this._position.column, this._position.lineNumber, this._position.column), this._text + this._charAfter);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const opRange = inverseEditOperations[0].range;\n        return new Selection(opRange.endLineNumber, opRange.startColumn, opRange.endLineNumber, opRange.endColumn - this._charAfter.length);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { EditOperation } from '../core/editOperation.js';\nimport { Range } from '../core/range.js';\nexport class TrimTrailingWhitespaceCommand {\n    constructor(selection, cursors) {\n        this._selection = selection;\n        this._cursors = cursors;\n        this._selectionId = null;\n    }\n    getEditOperations(model, builder) {\n        const ops = trimTrailingWhitespace(model, this._cursors);\n        for (let i = 0, len = ops.length; i < len; i++) {\n            const op = ops[i];\n            builder.addEditOperation(op.range, op.text);\n        }\n        this._selectionId = builder.trackSelection(this._selection);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this._selectionId);\n    }\n}\n/**\n * Generate commands for trimming trailing whitespace on a model and ignore lines on which cursors are sitting.\n */\nexport function trimTrailingWhitespace(model, cursors) {\n    // Sort cursors ascending\n    cursors.sort((a, b) => {\n        if (a.lineNumber === b.lineNumber) {\n            return a.column - b.column;\n        }\n        return a.lineNumber - b.lineNumber;\n    });\n    // Reduce multiple cursors on the same line and only keep the last one on the line\n    for (let i = cursors.length - 2; i >= 0; i--) {\n        if (cursors[i].lineNumber === cursors[i + 1].lineNumber) {\n            // Remove cursor at `i`\n            cursors.splice(i, 1);\n        }\n    }\n    const r = [];\n    let rLen = 0;\n    let cursorIndex = 0;\n    const cursorLen = cursors.length;\n    for (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n        const lineContent = model.getLineContent(lineNumber);\n        const maxLineColumn = lineContent.length + 1;\n        let minEditColumn = 0;\n        if (cursorIndex < cursorLen && cursors[cursorIndex].lineNumber === lineNumber) {\n            minEditColumn = cursors[cursorIndex].column;\n            cursorIndex++;\n            if (minEditColumn === maxLineColumn) {\n                // The cursor is at the end of the line => no edits for sure on this line\n                continue;\n            }\n        }\n        if (lineContent.length === 0) {\n            continue;\n        }\n        const lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n        let fromColumn = 0;\n        if (lastNonWhitespaceIndex === -1) {\n            // Entire line is whitespace\n            fromColumn = 1;\n        }\n        else if (lastNonWhitespaceIndex !== lineContent.length - 1) {\n            // There is trailing whitespace\n            fromColumn = lastNonWhitespaceIndex + 2;\n        }\n        else {\n            // There is no trailing whitespace\n            continue;\n        }\n        fromColumn = Math.max(minEditColumn, fromColumn);\n        r[rLen++] = EditOperation.delete(new Range(lineNumber, fromColumn, lineNumber, maxLineColumn));\n    }\n    return r;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { editorOptionsRegistry } from './editorOptions.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nexport const editorConfigurationBaseNode = Object.freeze({\n    id: 'editor',\n    order: 5,\n    type: 'object',\n    title: nls.localize('editorConfigurationTitle', \"Editor\"),\n    scope: 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */,\n});\nconst editorConfiguration = Object.assign(Object.assign({}, editorConfigurationBaseNode), { properties: {\n        'editor.tabSize': {\n            type: 'number',\n            default: EDITOR_MODEL_DEFAULTS.tabSize,\n            minimum: 1,\n            markdownDescription: nls.localize('tabSize', \"The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n        },\n        // 'editor.indentSize': {\n        // \t'anyOf': [\n        // \t\t{\n        // \t\t\ttype: 'string',\n        // \t\t\tenum: ['tabSize']\n        // \t\t},\n        // \t\t{\n        // \t\t\ttype: 'number',\n        // \t\t\tminimum: 1\n        // \t\t}\n        // \t],\n        // \tdefault: 'tabSize',\n        // \tmarkdownDescription: nls.localize('indentSize', \"The number of spaces used for indentation or 'tabSize' to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n        // },\n        'editor.insertSpaces': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.insertSpaces,\n            markdownDescription: nls.localize('insertSpaces', \"Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n        },\n        'editor.detectIndentation': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.detectIndentation,\n            markdownDescription: nls.localize('detectIndentation', \"Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents.\")\n        },\n        'editor.trimAutoWhitespace': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n            description: nls.localize('trimAutoWhitespace', \"Remove trailing auto inserted whitespace.\")\n        },\n        'editor.largeFileOptimizations': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n            description: nls.localize('largeFileOptimizations', \"Special handling for large files to disable certain memory intensive features.\")\n        },\n        'editor.wordBasedSuggestions': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('wordBasedSuggestions', \"Controls whether completions should be computed based on words in the document.\")\n        },\n        'editor.wordBasedSuggestionsMode': {\n            enum: ['currentDocument', 'matchingDocuments', 'allDocuments'],\n            default: 'matchingDocuments',\n            enumDescriptions: [\n                nls.localize('wordBasedSuggestionsMode.currentDocument', 'Only suggest words from the active document.'),\n                nls.localize('wordBasedSuggestionsMode.matchingDocuments', 'Suggest words from all open documents of the same language.'),\n                nls.localize('wordBasedSuggestionsMode.allDocuments', 'Suggest words from all open documents.')\n            ],\n            description: nls.localize('wordBasedSuggestionsMode', \"Controls from which documents word based completions are computed.\")\n        },\n        'editor.semanticHighlighting.enabled': {\n            enum: [true, false, 'configuredByTheme'],\n            enumDescriptions: [\n                nls.localize('semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'),\n                nls.localize('semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'),\n                nls.localize('semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\\'s `semanticHighlighting` setting.')\n            ],\n            default: 'configuredByTheme',\n            description: nls.localize('semanticHighlighting.enabled', \"Controls whether the semanticHighlighting is shown for the languages that support it.\")\n        },\n        'editor.stablePeek': {\n            type: 'boolean',\n            default: false,\n            markdownDescription: nls.localize('stablePeek', \"Keep peek editors open even when double clicking their content or when hitting `Escape`.\")\n        },\n        'editor.maxTokenizationLineLength': {\n            type: 'integer',\n            default: 20000,\n            description: nls.localize('maxTokenizationLineLength', \"Lines above this length will not be tokenized for performance reasons\")\n        },\n        'editor.language.brackets': {\n            type: ['array', 'null'],\n            default: null,\n            description: nls.localize('schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'),\n            items: {\n                type: 'array',\n                items: [\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n                    },\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n                    }\n                ]\n            }\n        },\n        'editor.language.colorizedBracketPairs': {\n            type: ['array', 'null'],\n            default: null,\n            description: nls.localize('schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'),\n            items: {\n                type: 'array',\n                items: [\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n                    },\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n                    }\n                ]\n            }\n        },\n        'diffEditor.maxComputationTime': {\n            type: 'number',\n            default: 5000,\n            description: nls.localize('maxComputationTime', \"Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.\")\n        },\n        'diffEditor.maxFileSize': {\n            type: 'number',\n            default: 50,\n            description: nls.localize('maxFileSize', \"Maximum file size in MB for which to compute diffs. Use 0 for no limit.\")\n        },\n        'diffEditor.renderSideBySide': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('sideBySide', \"Controls whether the diff editor shows the diff side by side or inline.\")\n        },\n        'diffEditor.renderMarginRevertIcon': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('renderMarginRevertIcon', \"When enabled, the diff editor shows arrows in its glyph margin to revert changes.\")\n        },\n        'diffEditor.ignoreTrimWhitespace': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('ignoreTrimWhitespace', \"When enabled, the diff editor ignores changes in leading or trailing whitespace.\")\n        },\n        'diffEditor.renderIndicators': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('renderIndicators', \"Controls whether the diff editor shows +/- indicators for added/removed changes.\")\n        },\n        'diffEditor.codeLens': {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\")\n        },\n        'diffEditor.wordWrap': {\n            type: 'string',\n            enum: ['off', 'on', 'inherit'],\n            default: 'inherit',\n            markdownEnumDescriptions: [\n                nls.localize('wordWrap.off', \"Lines will never wrap.\"),\n                nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"),\n                nls.localize('wordWrap.inherit', \"Lines will wrap according to the `#editor.wordWrap#` setting.\"),\n            ]\n        }\n    } });\nfunction isConfigurationPropertySchema(x) {\n    return (typeof x.type !== 'undefined' || typeof x.anyOf !== 'undefined');\n}\n// Add properties from the Editor Option Registry\nfor (const editorOption of editorOptionsRegistry) {\n    const schema = editorOption.schema;\n    if (typeof schema !== 'undefined') {\n        if (isConfigurationPropertySchema(schema)) {\n            // This is a single schema contribution\n            editorConfiguration.properties[`editor.${editorOption.name}`] = schema;\n        }\n        else {\n            for (const key in schema) {\n                if (Object.hasOwnProperty.call(schema, key)) {\n                    editorConfiguration.properties[key] = schema[key];\n                }\n            }\n        }\n    }\n}\nlet cachedEditorConfigurationKeys = null;\nfunction getEditorConfigurationKeys() {\n    if (cachedEditorConfigurationKeys === null) {\n        cachedEditorConfigurationKeys = Object.create(null);\n        Object.keys(editorConfiguration.properties).forEach((prop) => {\n            cachedEditorConfigurationKeys[prop] = true;\n        });\n    }\n    return cachedEditorConfigurationKeys;\n}\nexport function isEditorConfigurationKey(key) {\n    const editorConfigurationKeys = getEditorConfigurationKeys();\n    return (editorConfigurationKeys[`editor.${key}`] || false);\n}\nexport function isDiffEditorConfigurationKey(key) {\n    const editorConfigurationKeys = getEditorConfigurationKeys();\n    return (editorConfigurationKeys[`diffEditor.${key}`] || false);\n}\nconst configurationRegistry = Registry.as(Extensions.Configuration);\nconfigurationRegistry.registerConfiguration(editorConfiguration);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { USUAL_WORD_SEPARATORS } from '../core/wordHelper.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport * as objects from '../../../base/common/objects.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\n/**\n * @internal\n * The width of the minimap gutter, in pixels.\n */\nexport const MINIMAP_GUTTER_WIDTH = 8;\n//#endregion\n/**\n * An event describing that the configuration of the editor has changed.\n */\nexport class ConfigurationChangedEvent {\n    /**\n     * @internal\n     */\n    constructor(values) {\n        this._values = values;\n    }\n    hasChanged(id) {\n        return this._values[id];\n    }\n}\n/**\n * @internal\n */\nexport class ComputeOptionsMemory {\n    constructor() {\n        this.stableMinimapLayoutInput = null;\n        this.stableFitMaxMinimapScale = 0;\n        this.stableFitRemainingWidth = 0;\n    }\n}\n/**\n * @internal\n */\nclass BaseEditorOption {\n    constructor(id, name, defaultValue, schema) {\n        this.id = id;\n        this.name = name;\n        this.defaultValue = defaultValue;\n        this.schema = schema;\n    }\n    applyUpdate(value, update) {\n        return applyUpdate(value, update);\n    }\n    compute(env, options, value) {\n        return value;\n    }\n}\nexport class ApplyUpdateResult {\n    constructor(newValue, didChange) {\n        this.newValue = newValue;\n        this.didChange = didChange;\n    }\n}\nfunction applyUpdate(value, update) {\n    if (typeof value !== 'object' || typeof update !== 'object' || !value || !update) {\n        return new ApplyUpdateResult(update, value !== update);\n    }\n    if (Array.isArray(value) || Array.isArray(update)) {\n        const arrayEquals = Array.isArray(value) && Array.isArray(update) && arrays.equals(value, update);\n        return new ApplyUpdateResult(update, !arrayEquals);\n    }\n    let didChange = false;\n    for (const key in update) {\n        if (update.hasOwnProperty(key)) {\n            const result = applyUpdate(value[key], update[key]);\n            if (result.didChange) {\n                value[key] = result.newValue;\n                didChange = true;\n            }\n        }\n    }\n    return new ApplyUpdateResult(value, didChange);\n}\n/**\n * @internal\n */\nclass ComputedEditorOption {\n    constructor(id) {\n        this.schema = undefined;\n        this.id = id;\n        this.name = '_never_';\n        this.defaultValue = undefined;\n    }\n    applyUpdate(value, update) {\n        return applyUpdate(value, update);\n    }\n    validate(input) {\n        return this.defaultValue;\n    }\n}\nclass SimpleEditorOption {\n    constructor(id, name, defaultValue, schema) {\n        this.id = id;\n        this.name = name;\n        this.defaultValue = defaultValue;\n        this.schema = schema;\n    }\n    applyUpdate(value, update) {\n        return applyUpdate(value, update);\n    }\n    validate(input) {\n        if (typeof input === 'undefined') {\n            return this.defaultValue;\n        }\n        return input;\n    }\n    compute(env, options, value) {\n        return value;\n    }\n}\n/**\n * @internal\n */\nexport function boolean(value, defaultValue) {\n    if (typeof value === 'undefined') {\n        return defaultValue;\n    }\n    if (value === 'false') {\n        // treat the string 'false' as false\n        return false;\n    }\n    return Boolean(value);\n}\nclass EditorBooleanOption extends SimpleEditorOption {\n    constructor(id, name, defaultValue, schema = undefined) {\n        if (typeof schema !== 'undefined') {\n            schema.type = 'boolean';\n            schema.default = defaultValue;\n        }\n        super(id, name, defaultValue, schema);\n    }\n    validate(input) {\n        return boolean(input, this.defaultValue);\n    }\n}\n/**\n * @internal\n */\nexport function clampedInt(value, defaultValue, minimum, maximum) {\n    if (typeof value === 'undefined') {\n        return defaultValue;\n    }\n    let r = parseInt(value, 10);\n    if (isNaN(r)) {\n        return defaultValue;\n    }\n    r = Math.max(minimum, r);\n    r = Math.min(maximum, r);\n    return r | 0;\n}\nclass EditorIntOption extends SimpleEditorOption {\n    constructor(id, name, defaultValue, minimum, maximum, schema = undefined) {\n        if (typeof schema !== 'undefined') {\n            schema.type = 'integer';\n            schema.default = defaultValue;\n            schema.minimum = minimum;\n            schema.maximum = maximum;\n        }\n        super(id, name, defaultValue, schema);\n        this.minimum = minimum;\n        this.maximum = maximum;\n    }\n    static clampedInt(value, defaultValue, minimum, maximum) {\n        return clampedInt(value, defaultValue, minimum, maximum);\n    }\n    validate(input) {\n        return EditorIntOption.clampedInt(input, this.defaultValue, this.minimum, this.maximum);\n    }\n}\nclass EditorFloatOption extends SimpleEditorOption {\n    constructor(id, name, defaultValue, validationFn, schema) {\n        if (typeof schema !== 'undefined') {\n            schema.type = 'number';\n            schema.default = defaultValue;\n        }\n        super(id, name, defaultValue, schema);\n        this.validationFn = validationFn;\n    }\n    static clamp(n, min, max) {\n        if (n < min) {\n            return min;\n        }\n        if (n > max) {\n            return max;\n        }\n        return n;\n    }\n    static float(value, defaultValue) {\n        if (typeof value === 'number') {\n            return value;\n        }\n        if (typeof value === 'undefined') {\n            return defaultValue;\n        }\n        const r = parseFloat(value);\n        return (isNaN(r) ? defaultValue : r);\n    }\n    validate(input) {\n        return this.validationFn(EditorFloatOption.float(input, this.defaultValue));\n    }\n}\nclass EditorStringOption extends SimpleEditorOption {\n    static string(value, defaultValue) {\n        if (typeof value !== 'string') {\n            return defaultValue;\n        }\n        return value;\n    }\n    constructor(id, name, defaultValue, schema = undefined) {\n        if (typeof schema !== 'undefined') {\n            schema.type = 'string';\n            schema.default = defaultValue;\n        }\n        super(id, name, defaultValue, schema);\n    }\n    validate(input) {\n        return EditorStringOption.string(input, this.defaultValue);\n    }\n}\n/**\n * @internal\n */\nexport function stringSet(value, defaultValue, allowedValues) {\n    if (typeof value !== 'string') {\n        return defaultValue;\n    }\n    if (allowedValues.indexOf(value) === -1) {\n        return defaultValue;\n    }\n    return value;\n}\nclass EditorStringEnumOption extends SimpleEditorOption {\n    constructor(id, name, defaultValue, allowedValues, schema = undefined) {\n        if (typeof schema !== 'undefined') {\n            schema.type = 'string';\n            schema.enum = allowedValues;\n            schema.default = defaultValue;\n        }\n        super(id, name, defaultValue, schema);\n        this._allowedValues = allowedValues;\n    }\n    validate(input) {\n        return stringSet(input, this.defaultValue, this._allowedValues);\n    }\n}\nclass EditorEnumOption extends BaseEditorOption {\n    constructor(id, name, defaultValue, defaultStringValue, allowedValues, convert, schema = undefined) {\n        if (typeof schema !== 'undefined') {\n            schema.type = 'string';\n            schema.enum = allowedValues;\n            schema.default = defaultStringValue;\n        }\n        super(id, name, defaultValue, schema);\n        this._allowedValues = allowedValues;\n        this._convert = convert;\n    }\n    validate(input) {\n        if (typeof input !== 'string') {\n            return this.defaultValue;\n        }\n        if (this._allowedValues.indexOf(input) === -1) {\n            return this.defaultValue;\n        }\n        return this._convert(input);\n    }\n}\n//#endregion\n//#region autoIndent\nfunction _autoIndentFromString(autoIndent) {\n    switch (autoIndent) {\n        case 'none': return 0 /* EditorAutoIndentStrategy.None */;\n        case 'keep': return 1 /* EditorAutoIndentStrategy.Keep */;\n        case 'brackets': return 2 /* EditorAutoIndentStrategy.Brackets */;\n        case 'advanced': return 3 /* EditorAutoIndentStrategy.Advanced */;\n        case 'full': return 4 /* EditorAutoIndentStrategy.Full */;\n    }\n}\n//#endregion\n//#region accessibilitySupport\nclass EditorAccessibilitySupport extends BaseEditorOption {\n    constructor() {\n        super(2 /* EditorOption.accessibilitySupport */, 'accessibilitySupport', 0 /* AccessibilitySupport.Unknown */, {\n            type: 'string',\n            enum: ['auto', 'on', 'off'],\n            enumDescriptions: [\n                nls.localize('accessibilitySupport.auto', \"The editor will use platform APIs to detect when a Screen Reader is attached.\"),\n                nls.localize('accessibilitySupport.on', \"The editor will be permanently optimized for usage with a Screen Reader. Word wrapping will be disabled.\"),\n                nls.localize('accessibilitySupport.off', \"The editor will never be optimized for usage with a Screen Reader.\"),\n            ],\n            default: 'auto',\n            description: nls.localize('accessibilitySupport', \"Controls whether the editor should run in a mode where it is optimized for screen readers. Setting to on will disable word wrapping.\")\n        });\n    }\n    validate(input) {\n        switch (input) {\n            case 'auto': return 0 /* AccessibilitySupport.Unknown */;\n            case 'off': return 1 /* AccessibilitySupport.Disabled */;\n            case 'on': return 2 /* AccessibilitySupport.Enabled */;\n        }\n        return this.defaultValue;\n    }\n    compute(env, options, value) {\n        if (value === 0 /* AccessibilitySupport.Unknown */) {\n            // The editor reads the `accessibilitySupport` from the environment\n            return env.accessibilitySupport;\n        }\n        return value;\n    }\n}\nclass EditorComments extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            insertSpace: true,\n            ignoreEmptyLines: true,\n        };\n        super(19 /* EditorOption.comments */, 'comments', defaults, {\n            'editor.comments.insertSpace': {\n                type: 'boolean',\n                default: defaults.insertSpace,\n                description: nls.localize('comments.insertSpace', \"Controls whether a space character is inserted when commenting.\")\n            },\n            'editor.comments.ignoreEmptyLines': {\n                type: 'boolean',\n                default: defaults.ignoreEmptyLines,\n                description: nls.localize('comments.ignoreEmptyLines', 'Controls if empty lines should be ignored with toggle, add or remove actions for line comments.')\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            insertSpace: boolean(input.insertSpace, this.defaultValue.insertSpace),\n            ignoreEmptyLines: boolean(input.ignoreEmptyLines, this.defaultValue.ignoreEmptyLines),\n        };\n    }\n}\nfunction _cursorBlinkingStyleFromString(cursorBlinkingStyle) {\n    switch (cursorBlinkingStyle) {\n        case 'blink': return 1 /* TextEditorCursorBlinkingStyle.Blink */;\n        case 'smooth': return 2 /* TextEditorCursorBlinkingStyle.Smooth */;\n        case 'phase': return 3 /* TextEditorCursorBlinkingStyle.Phase */;\n        case 'expand': return 4 /* TextEditorCursorBlinkingStyle.Expand */;\n        case 'solid': return 5 /* TextEditorCursorBlinkingStyle.Solid */;\n    }\n}\n//#endregion\n//#region cursorStyle\n/**\n * The style in which the editor's cursor should be rendered.\n */\nexport var TextEditorCursorStyle;\n(function (TextEditorCursorStyle) {\n    /**\n     * As a vertical line (sitting between two characters).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Line\"] = 1] = \"Line\";\n    /**\n     * As a block (sitting on top of a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Block\"] = 2] = \"Block\";\n    /**\n     * As a horizontal line (sitting under a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Underline\"] = 3] = \"Underline\";\n    /**\n     * As a thin vertical line (sitting between two characters).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"LineThin\"] = 4] = \"LineThin\";\n    /**\n     * As an outlined block (sitting on top of a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"BlockOutline\"] = 5] = \"BlockOutline\";\n    /**\n     * As a thin horizontal line (sitting under a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"UnderlineThin\"] = 6] = \"UnderlineThin\";\n})(TextEditorCursorStyle || (TextEditorCursorStyle = {}));\nfunction _cursorStyleFromString(cursorStyle) {\n    switch (cursorStyle) {\n        case 'line': return TextEditorCursorStyle.Line;\n        case 'block': return TextEditorCursorStyle.Block;\n        case 'underline': return TextEditorCursorStyle.Underline;\n        case 'line-thin': return TextEditorCursorStyle.LineThin;\n        case 'block-outline': return TextEditorCursorStyle.BlockOutline;\n        case 'underline-thin': return TextEditorCursorStyle.UnderlineThin;\n    }\n}\n//#endregion\n//#region editorClassName\nclass EditorClassName extends ComputedEditorOption {\n    constructor() {\n        super(130 /* EditorOption.editorClassName */);\n    }\n    compute(env, options, _) {\n        const classNames = ['monaco-editor'];\n        if (options.get(35 /* EditorOption.extraEditorClassName */)) {\n            classNames.push(options.get(35 /* EditorOption.extraEditorClassName */));\n        }\n        if (env.extraEditorClassName) {\n            classNames.push(env.extraEditorClassName);\n        }\n        if (options.get(68 /* EditorOption.mouseStyle */) === 'default') {\n            classNames.push('mouse-default');\n        }\n        else if (options.get(68 /* EditorOption.mouseStyle */) === 'copy') {\n            classNames.push('mouse-copy');\n        }\n        if (options.get(102 /* EditorOption.showUnused */)) {\n            classNames.push('showUnused');\n        }\n        if (options.get(128 /* EditorOption.showDeprecated */)) {\n            classNames.push('showDeprecated');\n        }\n        return classNames.join(' ');\n    }\n}\n//#endregion\n//#region emptySelectionClipboard\nclass EditorEmptySelectionClipboard extends EditorBooleanOption {\n    constructor() {\n        super(33 /* EditorOption.emptySelectionClipboard */, 'emptySelectionClipboard', true, { description: nls.localize('emptySelectionClipboard', \"Controls whether copying without a selection copies the current line.\") });\n    }\n    compute(env, options, value) {\n        return value && env.emptySelectionClipboard;\n    }\n}\nclass EditorFind extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            cursorMoveOnType: true,\n            seedSearchStringFromSelection: 'always',\n            autoFindInSelection: 'never',\n            globalFindClipboard: false,\n            addExtraSpaceOnTop: true,\n            loop: true\n        };\n        super(37 /* EditorOption.find */, 'find', defaults, {\n            'editor.find.cursorMoveOnType': {\n                type: 'boolean',\n                default: defaults.cursorMoveOnType,\n                description: nls.localize('find.cursorMoveOnType', \"Controls whether the cursor should jump to find matches while typing.\")\n            },\n            'editor.find.seedSearchStringFromSelection': {\n                type: 'string',\n                enum: ['never', 'always', 'selection'],\n                default: defaults.seedSearchStringFromSelection,\n                enumDescriptions: [\n                    nls.localize('editor.find.seedSearchStringFromSelection.never', 'Never seed search string from the editor selection.'),\n                    nls.localize('editor.find.seedSearchStringFromSelection.always', 'Always seed search string from the editor selection, including word at cursor position.'),\n                    nls.localize('editor.find.seedSearchStringFromSelection.selection', 'Only seed search string from the editor selection.')\n                ],\n                description: nls.localize('find.seedSearchStringFromSelection', \"Controls whether the search string in the Find Widget is seeded from the editor selection.\")\n            },\n            'editor.find.autoFindInSelection': {\n                type: 'string',\n                enum: ['never', 'always', 'multiline'],\n                default: defaults.autoFindInSelection,\n                enumDescriptions: [\n                    nls.localize('editor.find.autoFindInSelection.never', 'Never turn on Find in Selection automatically (default).'),\n                    nls.localize('editor.find.autoFindInSelection.always', 'Always turn on Find in Selection automatically.'),\n                    nls.localize('editor.find.autoFindInSelection.multiline', 'Turn on Find in Selection automatically when multiple lines of content are selected.')\n                ],\n                description: nls.localize('find.autoFindInSelection', \"Controls the condition for turning on Find in Selection automatically.\")\n            },\n            'editor.find.globalFindClipboard': {\n                type: 'boolean',\n                default: defaults.globalFindClipboard,\n                description: nls.localize('find.globalFindClipboard', \"Controls whether the Find Widget should read or modify the shared find clipboard on macOS.\"),\n                included: platform.isMacintosh\n            },\n            'editor.find.addExtraSpaceOnTop': {\n                type: 'boolean',\n                default: defaults.addExtraSpaceOnTop,\n                description: nls.localize('find.addExtraSpaceOnTop', \"Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.\")\n            },\n            'editor.find.loop': {\n                type: 'boolean',\n                default: defaults.loop,\n                description: nls.localize('find.loop', \"Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.\")\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            cursorMoveOnType: boolean(input.cursorMoveOnType, this.defaultValue.cursorMoveOnType),\n            seedSearchStringFromSelection: typeof _input.seedSearchStringFromSelection === 'boolean'\n                ? (_input.seedSearchStringFromSelection ? 'always' : 'never')\n                : stringSet(input.seedSearchStringFromSelection, this.defaultValue.seedSearchStringFromSelection, ['never', 'always', 'selection']),\n            autoFindInSelection: typeof _input.autoFindInSelection === 'boolean'\n                ? (_input.autoFindInSelection ? 'always' : 'never')\n                : stringSet(input.autoFindInSelection, this.defaultValue.autoFindInSelection, ['never', 'always', 'multiline']),\n            globalFindClipboard: boolean(input.globalFindClipboard, this.defaultValue.globalFindClipboard),\n            addExtraSpaceOnTop: boolean(input.addExtraSpaceOnTop, this.defaultValue.addExtraSpaceOnTop),\n            loop: boolean(input.loop, this.defaultValue.loop),\n        };\n    }\n}\n//#endregion\n//#region fontLigatures\n/**\n * @internal\n */\nexport class EditorFontLigatures extends BaseEditorOption {\n    constructor() {\n        super(47 /* EditorOption.fontLigatures */, 'fontLigatures', EditorFontLigatures.OFF, {\n            anyOf: [\n                {\n                    type: 'boolean',\n                    description: nls.localize('fontLigatures', \"Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property.\"),\n                },\n                {\n                    type: 'string',\n                    description: nls.localize('fontFeatureSettings', \"Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures.\")\n                }\n            ],\n            description: nls.localize('fontLigaturesGeneral', \"Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.\"),\n            default: false\n        });\n    }\n    validate(input) {\n        if (typeof input === 'undefined') {\n            return this.defaultValue;\n        }\n        if (typeof input === 'string') {\n            if (input === 'false') {\n                return EditorFontLigatures.OFF;\n            }\n            if (input === 'true') {\n                return EditorFontLigatures.ON;\n            }\n            return input;\n        }\n        if (Boolean(input)) {\n            return EditorFontLigatures.ON;\n        }\n        return EditorFontLigatures.OFF;\n    }\n}\nEditorFontLigatures.OFF = '\"liga\" off, \"calt\" off';\nEditorFontLigatures.ON = '\"liga\" on, \"calt\" on';\n//#endregion\n//#region fontInfo\nclass EditorFontInfo extends ComputedEditorOption {\n    constructor() {\n        super(46 /* EditorOption.fontInfo */);\n    }\n    compute(env, options, _) {\n        return env.fontInfo;\n    }\n}\n//#endregion\n//#region fontSize\nclass EditorFontSize extends SimpleEditorOption {\n    constructor() {\n        super(48 /* EditorOption.fontSize */, 'fontSize', EDITOR_FONT_DEFAULTS.fontSize, {\n            type: 'number',\n            minimum: 6,\n            maximum: 100,\n            default: EDITOR_FONT_DEFAULTS.fontSize,\n            description: nls.localize('fontSize', \"Controls the font size in pixels.\")\n        });\n    }\n    validate(input) {\n        const r = EditorFloatOption.float(input, this.defaultValue);\n        if (r === 0) {\n            return EDITOR_FONT_DEFAULTS.fontSize;\n        }\n        return EditorFloatOption.clamp(r, 6, 100);\n    }\n    compute(env, options, value) {\n        // The final fontSize respects the editor zoom level.\n        // So take the result from env.fontInfo\n        return env.fontInfo.fontSize;\n    }\n}\n//#endregion\n//#region fontWeight\nclass EditorFontWeight extends BaseEditorOption {\n    constructor() {\n        super(49 /* EditorOption.fontWeight */, 'fontWeight', EDITOR_FONT_DEFAULTS.fontWeight, {\n            anyOf: [\n                {\n                    type: 'number',\n                    minimum: EditorFontWeight.MINIMUM_VALUE,\n                    maximum: EditorFontWeight.MAXIMUM_VALUE,\n                    errorMessage: nls.localize('fontWeightErrorMessage', \"Only \\\"normal\\\" and \\\"bold\\\" keywords or numbers between 1 and 1000 are allowed.\")\n                },\n                {\n                    type: 'string',\n                    pattern: '^(normal|bold|1000|[1-9][0-9]{0,2})$'\n                },\n                {\n                    enum: EditorFontWeight.SUGGESTION_VALUES\n                }\n            ],\n            default: EDITOR_FONT_DEFAULTS.fontWeight,\n            description: nls.localize('fontWeight', \"Controls the font weight. Accepts \\\"normal\\\" and \\\"bold\\\" keywords or numbers between 1 and 1000.\")\n        });\n    }\n    validate(input) {\n        if (input === 'normal' || input === 'bold') {\n            return input;\n        }\n        return String(EditorIntOption.clampedInt(input, EDITOR_FONT_DEFAULTS.fontWeight, EditorFontWeight.MINIMUM_VALUE, EditorFontWeight.MAXIMUM_VALUE));\n    }\n}\nEditorFontWeight.SUGGESTION_VALUES = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\nEditorFontWeight.MINIMUM_VALUE = 1;\nEditorFontWeight.MAXIMUM_VALUE = 1000;\nclass EditorGoToLocation extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            multiple: 'peek',\n            multipleDefinitions: 'peek',\n            multipleTypeDefinitions: 'peek',\n            multipleDeclarations: 'peek',\n            multipleImplementations: 'peek',\n            multipleReferences: 'peek',\n            alternativeDefinitionCommand: 'editor.action.goToReferences',\n            alternativeTypeDefinitionCommand: 'editor.action.goToReferences',\n            alternativeDeclarationCommand: 'editor.action.goToReferences',\n            alternativeImplementationCommand: '',\n            alternativeReferenceCommand: '',\n        };\n        const jsonSubset = {\n            type: 'string',\n            enum: ['peek', 'gotoAndPeek', 'goto'],\n            default: defaults.multiple,\n            enumDescriptions: [\n                nls.localize('editor.gotoLocation.multiple.peek', 'Show peek view of the results (default)'),\n                nls.localize('editor.gotoLocation.multiple.gotoAndPeek', 'Go to the primary result and show a peek view'),\n                nls.localize('editor.gotoLocation.multiple.goto', 'Go to the primary result and enable peek-less navigation to others')\n            ]\n        };\n        const alternativeCommandOptions = ['', 'editor.action.referenceSearch.trigger', 'editor.action.goToReferences', 'editor.action.peekImplementation', 'editor.action.goToImplementation', 'editor.action.peekTypeDefinition', 'editor.action.goToTypeDefinition', 'editor.action.peekDeclaration', 'editor.action.revealDeclaration', 'editor.action.peekDefinition', 'editor.action.revealDefinitionAside', 'editor.action.revealDefinition'];\n        super(53 /* EditorOption.gotoLocation */, 'gotoLocation', defaults, {\n            'editor.gotoLocation.multiple': {\n                deprecationMessage: nls.localize('editor.gotoLocation.multiple.deprecated', \"This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.\"),\n            },\n            'editor.gotoLocation.multipleDefinitions': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleDefinitions', \"Controls the behavior the 'Go to Definition'-command when multiple target locations exist.\") }, jsonSubset),\n            'editor.gotoLocation.multipleTypeDefinitions': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleTypeDefinitions', \"Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.\") }, jsonSubset),\n            'editor.gotoLocation.multipleDeclarations': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleDeclarations', \"Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.\") }, jsonSubset),\n            'editor.gotoLocation.multipleImplementations': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleImplemenattions', \"Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.\") }, jsonSubset),\n            'editor.gotoLocation.multipleReferences': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleReferences', \"Controls the behavior the 'Go to References'-command when multiple target locations exist.\") }, jsonSubset),\n            'editor.gotoLocation.alternativeDefinitionCommand': {\n                type: 'string',\n                default: defaults.alternativeDefinitionCommand,\n                enum: alternativeCommandOptions,\n                description: nls.localize('alternativeDefinitionCommand', \"Alternative command id that is being executed when the result of 'Go to Definition' is the current location.\")\n            },\n            'editor.gotoLocation.alternativeTypeDefinitionCommand': {\n                type: 'string',\n                default: defaults.alternativeTypeDefinitionCommand,\n                enum: alternativeCommandOptions,\n                description: nls.localize('alternativeTypeDefinitionCommand', \"Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.\")\n            },\n            'editor.gotoLocation.alternativeDeclarationCommand': {\n                type: 'string',\n                default: defaults.alternativeDeclarationCommand,\n                enum: alternativeCommandOptions,\n                description: nls.localize('alternativeDeclarationCommand', \"Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.\")\n            },\n            'editor.gotoLocation.alternativeImplementationCommand': {\n                type: 'string',\n                default: defaults.alternativeImplementationCommand,\n                enum: alternativeCommandOptions,\n                description: nls.localize('alternativeImplementationCommand', \"Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.\")\n            },\n            'editor.gotoLocation.alternativeReferenceCommand': {\n                type: 'string',\n                default: defaults.alternativeReferenceCommand,\n                enum: alternativeCommandOptions,\n                description: nls.localize('alternativeReferenceCommand', \"Alternative command id that is being executed when the result of 'Go to Reference' is the current location.\")\n            },\n        });\n    }\n    validate(_input) {\n        var _a, _b, _c, _d, _e;\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            multiple: stringSet(input.multiple, this.defaultValue.multiple, ['peek', 'gotoAndPeek', 'goto']),\n            multipleDefinitions: (_a = input.multipleDefinitions) !== null && _a !== void 0 ? _a : stringSet(input.multipleDefinitions, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n            multipleTypeDefinitions: (_b = input.multipleTypeDefinitions) !== null && _b !== void 0 ? _b : stringSet(input.multipleTypeDefinitions, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n            multipleDeclarations: (_c = input.multipleDeclarations) !== null && _c !== void 0 ? _c : stringSet(input.multipleDeclarations, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n            multipleImplementations: (_d = input.multipleImplementations) !== null && _d !== void 0 ? _d : stringSet(input.multipleImplementations, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n            multipleReferences: (_e = input.multipleReferences) !== null && _e !== void 0 ? _e : stringSet(input.multipleReferences, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n            alternativeDefinitionCommand: EditorStringOption.string(input.alternativeDefinitionCommand, this.defaultValue.alternativeDefinitionCommand),\n            alternativeTypeDefinitionCommand: EditorStringOption.string(input.alternativeTypeDefinitionCommand, this.defaultValue.alternativeTypeDefinitionCommand),\n            alternativeDeclarationCommand: EditorStringOption.string(input.alternativeDeclarationCommand, this.defaultValue.alternativeDeclarationCommand),\n            alternativeImplementationCommand: EditorStringOption.string(input.alternativeImplementationCommand, this.defaultValue.alternativeImplementationCommand),\n            alternativeReferenceCommand: EditorStringOption.string(input.alternativeReferenceCommand, this.defaultValue.alternativeReferenceCommand),\n        };\n    }\n}\nclass EditorHover extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            enabled: true,\n            delay: 300,\n            sticky: true,\n            above: true,\n        };\n        super(55 /* EditorOption.hover */, 'hover', defaults, {\n            'editor.hover.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                description: nls.localize('hover.enabled', \"Controls whether the hover is shown.\")\n            },\n            'editor.hover.delay': {\n                type: 'number',\n                default: defaults.delay,\n                minimum: 0,\n                maximum: 10000,\n                description: nls.localize('hover.delay', \"Controls the delay in milliseconds after which the hover is shown.\")\n            },\n            'editor.hover.sticky': {\n                type: 'boolean',\n                default: defaults.sticky,\n                description: nls.localize('hover.sticky', \"Controls whether the hover should remain visible when mouse is moved over it.\")\n            },\n            'editor.hover.above': {\n                type: 'boolean',\n                default: defaults.above,\n                description: nls.localize('hover.above', \"Prefer showing hovers above the line, if there's space.\")\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\n            delay: EditorIntOption.clampedInt(input.delay, this.defaultValue.delay, 0, 10000),\n            sticky: boolean(input.sticky, this.defaultValue.sticky),\n            above: boolean(input.above, this.defaultValue.above),\n        };\n    }\n}\n/**\n * @internal\n */\nexport class EditorLayoutInfoComputer extends ComputedEditorOption {\n    constructor() {\n        super(133 /* EditorOption.layoutInfo */);\n    }\n    compute(env, options, _) {\n        return EditorLayoutInfoComputer.computeLayout(options, {\n            memory: env.memory,\n            outerWidth: env.outerWidth,\n            outerHeight: env.outerHeight,\n            isDominatedByLongLines: env.isDominatedByLongLines,\n            lineHeight: env.fontInfo.lineHeight,\n            viewLineCount: env.viewLineCount,\n            lineNumbersDigitCount: env.lineNumbersDigitCount,\n            typicalHalfwidthCharacterWidth: env.fontInfo.typicalHalfwidthCharacterWidth,\n            maxDigitWidth: env.fontInfo.maxDigitWidth,\n            pixelRatio: env.pixelRatio\n        });\n    }\n    static computeContainedMinimapLineCount(input) {\n        const typicalViewportLineCount = input.height / input.lineHeight;\n        const extraLinesBeyondLastLine = input.scrollBeyondLastLine ? (typicalViewportLineCount - 1) : 0;\n        const desiredRatio = (input.viewLineCount + extraLinesBeyondLastLine) / (input.pixelRatio * input.height);\n        const minimapLineCount = Math.floor(input.viewLineCount / desiredRatio);\n        return { typicalViewportLineCount, extraLinesBeyondLastLine, desiredRatio, minimapLineCount };\n    }\n    static _computeMinimapLayout(input, memory) {\n        const outerWidth = input.outerWidth;\n        const outerHeight = input.outerHeight;\n        const pixelRatio = input.pixelRatio;\n        if (!input.minimap.enabled) {\n            return {\n                renderMinimap: 0 /* RenderMinimap.None */,\n                minimapLeft: 0,\n                minimapWidth: 0,\n                minimapHeightIsEditorHeight: false,\n                minimapIsSampling: false,\n                minimapScale: 1,\n                minimapLineHeight: 1,\n                minimapCanvasInnerWidth: 0,\n                minimapCanvasInnerHeight: Math.floor(pixelRatio * outerHeight),\n                minimapCanvasOuterWidth: 0,\n                minimapCanvasOuterHeight: outerHeight,\n            };\n        }\n        // Can use memory if only the `viewLineCount` and `remainingWidth` have changed\n        const stableMinimapLayoutInput = memory.stableMinimapLayoutInput;\n        const couldUseMemory = (stableMinimapLayoutInput\n            // && input.outerWidth === lastMinimapLayoutInput.outerWidth !!! INTENTIONAL OMITTED\n            && input.outerHeight === stableMinimapLayoutInput.outerHeight\n            && input.lineHeight === stableMinimapLayoutInput.lineHeight\n            && input.typicalHalfwidthCharacterWidth === stableMinimapLayoutInput.typicalHalfwidthCharacterWidth\n            && input.pixelRatio === stableMinimapLayoutInput.pixelRatio\n            && input.scrollBeyondLastLine === stableMinimapLayoutInput.scrollBeyondLastLine\n            && input.minimap.enabled === stableMinimapLayoutInput.minimap.enabled\n            && input.minimap.side === stableMinimapLayoutInput.minimap.side\n            && input.minimap.size === stableMinimapLayoutInput.minimap.size\n            && input.minimap.showSlider === stableMinimapLayoutInput.minimap.showSlider\n            && input.minimap.renderCharacters === stableMinimapLayoutInput.minimap.renderCharacters\n            && input.minimap.maxColumn === stableMinimapLayoutInput.minimap.maxColumn\n            && input.minimap.scale === stableMinimapLayoutInput.minimap.scale\n            && input.verticalScrollbarWidth === stableMinimapLayoutInput.verticalScrollbarWidth\n            // && input.viewLineCount === lastMinimapLayoutInput.viewLineCount !!! INTENTIONAL OMITTED\n            // && input.remainingWidth === lastMinimapLayoutInput.remainingWidth !!! INTENTIONAL OMITTED\n            && input.isViewportWrapping === stableMinimapLayoutInput.isViewportWrapping);\n        const lineHeight = input.lineHeight;\n        const typicalHalfwidthCharacterWidth = input.typicalHalfwidthCharacterWidth;\n        const scrollBeyondLastLine = input.scrollBeyondLastLine;\n        const minimapRenderCharacters = input.minimap.renderCharacters;\n        let minimapScale = (pixelRatio >= 2 ? Math.round(input.minimap.scale * 2) : input.minimap.scale);\n        const minimapMaxColumn = input.minimap.maxColumn;\n        const minimapSize = input.minimap.size;\n        const minimapSide = input.minimap.side;\n        const verticalScrollbarWidth = input.verticalScrollbarWidth;\n        const viewLineCount = input.viewLineCount;\n        const remainingWidth = input.remainingWidth;\n        const isViewportWrapping = input.isViewportWrapping;\n        const baseCharHeight = minimapRenderCharacters ? 2 : 3;\n        let minimapCanvasInnerHeight = Math.floor(pixelRatio * outerHeight);\n        const minimapCanvasOuterHeight = minimapCanvasInnerHeight / pixelRatio;\n        let minimapHeightIsEditorHeight = false;\n        let minimapIsSampling = false;\n        let minimapLineHeight = baseCharHeight * minimapScale;\n        let minimapCharWidth = minimapScale / pixelRatio;\n        let minimapWidthMultiplier = 1;\n        if (minimapSize === 'fill' || minimapSize === 'fit') {\n            const { typicalViewportLineCount, extraLinesBeyondLastLine, desiredRatio, minimapLineCount } = EditorLayoutInfoComputer.computeContainedMinimapLineCount({\n                viewLineCount: viewLineCount,\n                scrollBeyondLastLine: scrollBeyondLastLine,\n                height: outerHeight,\n                lineHeight: lineHeight,\n                pixelRatio: pixelRatio\n            });\n            // ratio is intentionally not part of the layout to avoid the layout changing all the time\n            // when doing sampling\n            const ratio = viewLineCount / minimapLineCount;\n            if (ratio > 1) {\n                minimapHeightIsEditorHeight = true;\n                minimapIsSampling = true;\n                minimapScale = 1;\n                minimapLineHeight = 1;\n                minimapCharWidth = minimapScale / pixelRatio;\n            }\n            else {\n                let fitBecomesFill = false;\n                let maxMinimapScale = minimapScale + 1;\n                if (minimapSize === 'fit') {\n                    const effectiveMinimapHeight = Math.ceil((viewLineCount + extraLinesBeyondLastLine) * minimapLineHeight);\n                    if (isViewportWrapping && couldUseMemory && remainingWidth <= memory.stableFitRemainingWidth) {\n                        // There is a loop when using `fit` and viewport wrapping:\n                        // - view line count impacts minimap layout\n                        // - minimap layout impacts viewport width\n                        // - viewport width impacts view line count\n                        // To break the loop, once we go to a smaller minimap scale, we try to stick with it.\n                        fitBecomesFill = true;\n                        maxMinimapScale = memory.stableFitMaxMinimapScale;\n                    }\n                    else {\n                        fitBecomesFill = (effectiveMinimapHeight > minimapCanvasInnerHeight);\n                    }\n                }\n                if (minimapSize === 'fill' || fitBecomesFill) {\n                    minimapHeightIsEditorHeight = true;\n                    const configuredMinimapScale = minimapScale;\n                    minimapLineHeight = Math.min(lineHeight * pixelRatio, Math.max(1, Math.floor(1 / desiredRatio)));\n                    if (isViewportWrapping && couldUseMemory && remainingWidth <= memory.stableFitRemainingWidth) {\n                        // There is a loop when using `fill` and viewport wrapping:\n                        // - view line count impacts minimap layout\n                        // - minimap layout impacts viewport width\n                        // - viewport width impacts view line count\n                        // To break the loop, once we go to a smaller minimap scale, we try to stick with it.\n                        maxMinimapScale = memory.stableFitMaxMinimapScale;\n                    }\n                    minimapScale = Math.min(maxMinimapScale, Math.max(1, Math.floor(minimapLineHeight / baseCharHeight)));\n                    if (minimapScale > configuredMinimapScale) {\n                        minimapWidthMultiplier = Math.min(2, minimapScale / configuredMinimapScale);\n                    }\n                    minimapCharWidth = minimapScale / pixelRatio / minimapWidthMultiplier;\n                    minimapCanvasInnerHeight = Math.ceil((Math.max(typicalViewportLineCount, viewLineCount + extraLinesBeyondLastLine)) * minimapLineHeight);\n                    if (isViewportWrapping) {\n                        // remember for next time\n                        memory.stableMinimapLayoutInput = input;\n                        memory.stableFitRemainingWidth = remainingWidth;\n                        memory.stableFitMaxMinimapScale = minimapScale;\n                    }\n                    else {\n                        memory.stableMinimapLayoutInput = null;\n                        memory.stableFitRemainingWidth = 0;\n                    }\n                }\n            }\n        }\n        // Given:\n        // (leaving 2px for the cursor to have space after the last character)\n        // viewportColumn = (contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth\n        // minimapWidth = viewportColumn * minimapCharWidth\n        // contentWidth = remainingWidth - minimapWidth\n        // What are good values for contentWidth and minimapWidth ?\n        // minimapWidth = ((contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth) * minimapCharWidth\n        // typicalHalfwidthCharacterWidth * minimapWidth = (contentWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n        // typicalHalfwidthCharacterWidth * minimapWidth = (remainingWidth - minimapWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n        // (typicalHalfwidthCharacterWidth + minimapCharWidth) * minimapWidth = (remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n        // minimapWidth = ((remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth) / (typicalHalfwidthCharacterWidth + minimapCharWidth)\n        const minimapMaxWidth = Math.floor(minimapMaxColumn * minimapCharWidth);\n        const minimapWidth = Math.min(minimapMaxWidth, Math.max(0, Math.floor(((remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth) / (typicalHalfwidthCharacterWidth + minimapCharWidth))) + MINIMAP_GUTTER_WIDTH);\n        let minimapCanvasInnerWidth = Math.floor(pixelRatio * minimapWidth);\n        const minimapCanvasOuterWidth = minimapCanvasInnerWidth / pixelRatio;\n        minimapCanvasInnerWidth = Math.floor(minimapCanvasInnerWidth * minimapWidthMultiplier);\n        const renderMinimap = (minimapRenderCharacters ? 1 /* RenderMinimap.Text */ : 2 /* RenderMinimap.Blocks */);\n        const minimapLeft = (minimapSide === 'left' ? 0 : (outerWidth - minimapWidth - verticalScrollbarWidth));\n        return {\n            renderMinimap,\n            minimapLeft,\n            minimapWidth,\n            minimapHeightIsEditorHeight,\n            minimapIsSampling,\n            minimapScale,\n            minimapLineHeight,\n            minimapCanvasInnerWidth,\n            minimapCanvasInnerHeight,\n            minimapCanvasOuterWidth,\n            minimapCanvasOuterHeight,\n        };\n    }\n    static computeLayout(options, env) {\n        const outerWidth = env.outerWidth | 0;\n        const outerHeight = env.outerHeight | 0;\n        const lineHeight = env.lineHeight | 0;\n        const lineNumbersDigitCount = env.lineNumbersDigitCount | 0;\n        const typicalHalfwidthCharacterWidth = env.typicalHalfwidthCharacterWidth;\n        const maxDigitWidth = env.maxDigitWidth;\n        const pixelRatio = env.pixelRatio;\n        const viewLineCount = env.viewLineCount;\n        const wordWrapOverride2 = options.get(125 /* EditorOption.wordWrapOverride2 */);\n        const wordWrapOverride1 = (wordWrapOverride2 === 'inherit' ? options.get(124 /* EditorOption.wordWrapOverride1 */) : wordWrapOverride2);\n        const wordWrap = (wordWrapOverride1 === 'inherit' ? options.get(120 /* EditorOption.wordWrap */) : wordWrapOverride1);\n        const wordWrapColumn = options.get(123 /* EditorOption.wordWrapColumn */);\n        const accessibilitySupport = options.get(2 /* EditorOption.accessibilitySupport */);\n        const isDominatedByLongLines = env.isDominatedByLongLines;\n        const showGlyphMargin = options.get(52 /* EditorOption.glyphMargin */);\n        const showLineNumbers = (options.get(62 /* EditorOption.lineNumbers */).renderType !== 0 /* RenderLineNumbersType.Off */);\n        const lineNumbersMinChars = options.get(63 /* EditorOption.lineNumbersMinChars */);\n        const scrollBeyondLastLine = options.get(96 /* EditorOption.scrollBeyondLastLine */);\n        const minimap = options.get(67 /* EditorOption.minimap */);\n        const scrollbar = options.get(94 /* EditorOption.scrollbar */);\n        const verticalScrollbarWidth = scrollbar.verticalScrollbarSize;\n        const verticalScrollbarHasArrows = scrollbar.verticalHasArrows;\n        const scrollbarArrowSize = scrollbar.arrowSize;\n        const horizontalScrollbarHeight = scrollbar.horizontalScrollbarSize;\n        const rawLineDecorationsWidth = options.get(60 /* EditorOption.lineDecorationsWidth */);\n        const folding = options.get(39 /* EditorOption.folding */);\n        const showFoldingDecoration = options.get(101 /* EditorOption.showFoldingControls */) !== 'never';\n        let lineDecorationsWidth;\n        if (typeof rawLineDecorationsWidth === 'string' && /^\\d+(\\.\\d+)?ch$/.test(rawLineDecorationsWidth)) {\n            const multiple = parseFloat(rawLineDecorationsWidth.substr(0, rawLineDecorationsWidth.length - 2));\n            lineDecorationsWidth = EditorIntOption.clampedInt(multiple * typicalHalfwidthCharacterWidth, 0, 0, 1000);\n        }\n        else {\n            lineDecorationsWidth = EditorIntOption.clampedInt(rawLineDecorationsWidth, 0, 0, 1000);\n        }\n        if (folding && showFoldingDecoration) {\n            lineDecorationsWidth += 16;\n        }\n        let lineNumbersWidth = 0;\n        if (showLineNumbers) {\n            const digitCount = Math.max(lineNumbersDigitCount, lineNumbersMinChars);\n            lineNumbersWidth = Math.round(digitCount * maxDigitWidth);\n        }\n        let glyphMarginWidth = 0;\n        if (showGlyphMargin) {\n            glyphMarginWidth = lineHeight;\n        }\n        let glyphMarginLeft = 0;\n        let lineNumbersLeft = glyphMarginLeft + glyphMarginWidth;\n        let decorationsLeft = lineNumbersLeft + lineNumbersWidth;\n        let contentLeft = decorationsLeft + lineDecorationsWidth;\n        const remainingWidth = outerWidth - glyphMarginWidth - lineNumbersWidth - lineDecorationsWidth;\n        let isWordWrapMinified = false;\n        let isViewportWrapping = false;\n        let wrappingColumn = -1;\n        if (accessibilitySupport !== 2 /* AccessibilitySupport.Enabled */) {\n            // See https://github.com/microsoft/vscode/issues/27766\n            // Never enable wrapping when a screen reader is attached\n            // because arrow down etc. will not move the cursor in the way\n            // a screen reader expects.\n            if (wordWrapOverride1 === 'inherit' && isDominatedByLongLines) {\n                // Force viewport width wrapping if model is dominated by long lines\n                isWordWrapMinified = true;\n                isViewportWrapping = true;\n            }\n            else if (wordWrap === 'on' || wordWrap === 'bounded') {\n                isViewportWrapping = true;\n            }\n            else if (wordWrap === 'wordWrapColumn') {\n                wrappingColumn = wordWrapColumn;\n            }\n        }\n        const minimapLayout = EditorLayoutInfoComputer._computeMinimapLayout({\n            outerWidth: outerWidth,\n            outerHeight: outerHeight,\n            lineHeight: lineHeight,\n            typicalHalfwidthCharacterWidth: typicalHalfwidthCharacterWidth,\n            pixelRatio: pixelRatio,\n            scrollBeyondLastLine: scrollBeyondLastLine,\n            minimap: minimap,\n            verticalScrollbarWidth: verticalScrollbarWidth,\n            viewLineCount: viewLineCount,\n            remainingWidth: remainingWidth,\n            isViewportWrapping: isViewportWrapping,\n        }, env.memory || new ComputeOptionsMemory());\n        if (minimapLayout.renderMinimap !== 0 /* RenderMinimap.None */ && minimapLayout.minimapLeft === 0) {\n            // the minimap is rendered to the left, so move everything to the right\n            glyphMarginLeft += minimapLayout.minimapWidth;\n            lineNumbersLeft += minimapLayout.minimapWidth;\n            decorationsLeft += minimapLayout.minimapWidth;\n            contentLeft += minimapLayout.minimapWidth;\n        }\n        const contentWidth = remainingWidth - minimapLayout.minimapWidth;\n        // (leaving 2px for the cursor to have space after the last character)\n        const viewportColumn = Math.max(1, Math.floor((contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth));\n        const verticalArrowSize = (verticalScrollbarHasArrows ? scrollbarArrowSize : 0);\n        if (isViewportWrapping) {\n            // compute the actual wrappingColumn\n            wrappingColumn = Math.max(1, viewportColumn);\n            if (wordWrap === 'bounded') {\n                wrappingColumn = Math.min(wrappingColumn, wordWrapColumn);\n            }\n        }\n        return {\n            width: outerWidth,\n            height: outerHeight,\n            glyphMarginLeft: glyphMarginLeft,\n            glyphMarginWidth: glyphMarginWidth,\n            lineNumbersLeft: lineNumbersLeft,\n            lineNumbersWidth: lineNumbersWidth,\n            decorationsLeft: decorationsLeft,\n            decorationsWidth: lineDecorationsWidth,\n            contentLeft: contentLeft,\n            contentWidth: contentWidth,\n            minimap: minimapLayout,\n            viewportColumn: viewportColumn,\n            isWordWrapMinified: isWordWrapMinified,\n            isViewportWrapping: isViewportWrapping,\n            wrappingColumn: wrappingColumn,\n            verticalScrollbarWidth: verticalScrollbarWidth,\n            horizontalScrollbarHeight: horizontalScrollbarHeight,\n            overviewRuler: {\n                top: verticalArrowSize,\n                width: verticalScrollbarWidth,\n                height: (outerHeight - 2 * verticalArrowSize),\n                right: 0\n            }\n        };\n    }\n}\nclass EditorLightbulb extends BaseEditorOption {\n    constructor() {\n        const defaults = { enabled: true };\n        super(59 /* EditorOption.lightbulb */, 'lightbulb', defaults, {\n            'editor.lightbulb.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                description: nls.localize('codeActions', \"Enables the code action lightbulb in the editor.\")\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled)\n        };\n    }\n}\nclass EditorExperimental extends BaseEditorOption {\n    constructor() {\n        const defaults = { stickyScroll: { enabled: false } };\n        super(34 /* EditorOption.experimental */, 'experimental', defaults, {\n            'editor.experimental.stickyScroll.enabled': {\n                type: 'boolean',\n                default: defaults.stickyScroll.enabled,\n                description: nls.localize('editor.experimental.stickyScroll', \"Shows the nested current scopes during the scroll at the top of the editor.\")\n            },\n        });\n    }\n    validate(_input) {\n        var _a;\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            stickyScroll: {\n                enabled: boolean((_a = input.stickyScroll) === null || _a === void 0 ? void 0 : _a.enabled, this.defaultValue.stickyScroll.enabled)\n            }\n        };\n    }\n}\nclass EditorInlayHints extends BaseEditorOption {\n    constructor() {\n        const defaults = { enabled: 'on', fontSize: 0, fontFamily: '', padding: false };\n        super(129 /* EditorOption.inlayHints */, 'inlayHints', defaults, {\n            'editor.inlayHints.enabled': {\n                type: 'string',\n                default: defaults.enabled,\n                description: nls.localize('inlayHints.enable', \"Enables the inlay hints in the editor.\"),\n                enum: ['on', 'onUnlessPressed', 'offUnlessPressed', 'off'],\n                markdownEnumDescriptions: [\n                    nls.localize('editor.inlayHints.on', \"Inlay hints are enabled\"),\n                    nls.localize('editor.inlayHints.onUnlessPressed', \"Inlay hints are showing by default and hide when holding `Ctrl+Alt`\"),\n                    nls.localize('editor.inlayHints.offUnlessPressed', \"Inlay hints are hidden by default and show when holding `Ctrl+Alt`\"),\n                    nls.localize('editor.inlayHints.off', \"Inlay hints are disabled\"),\n                ],\n            },\n            'editor.inlayHints.fontSize': {\n                type: 'number',\n                default: defaults.fontSize,\n                markdownDescription: nls.localize('inlayHints.fontSize', \"Controls font size of inlay hints in the editor. As default the {0} is used when the configured value is less than {1} or greater than the editor font size.\", '`#editor.fontSize#`', '`5`')\n            },\n            'editor.inlayHints.fontFamily': {\n                type: 'string',\n                default: defaults.fontFamily,\n                markdownDescription: nls.localize('inlayHints.fontFamily', \"Controls font family of inlay hints in the editor. When set to empty, the {0} is used.\", '`#editor.fontFamily#`')\n            },\n            'editor.inlayHints.padding': {\n                type: 'boolean',\n                default: defaults.padding,\n                description: nls.localize('inlayHints.padding', \"Enables the padding around the inlay hints in the editor.\")\n            }\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        if (typeof input.enabled === 'boolean') {\n            input.enabled = input.enabled ? 'on' : 'off';\n        }\n        return {\n            enabled: stringSet(input.enabled, this.defaultValue.enabled, ['on', 'off', 'offUnlessPressed', 'onUnlessPressed']),\n            fontSize: EditorIntOption.clampedInt(input.fontSize, this.defaultValue.fontSize, 0, 100),\n            fontFamily: EditorStringOption.string(input.fontFamily, this.defaultValue.fontFamily),\n            padding: boolean(input.padding, this.defaultValue.padding)\n        };\n    }\n}\n//#endregion\n//#region lineHeight\nclass EditorLineHeight extends EditorFloatOption {\n    constructor() {\n        super(61 /* EditorOption.lineHeight */, 'lineHeight', EDITOR_FONT_DEFAULTS.lineHeight, x => EditorFloatOption.clamp(x, 0, 150), { markdownDescription: nls.localize('lineHeight', \"Controls the line height. \\n - Use 0 to automatically compute the line height from the font size.\\n - Values between 0 and 8 will be used as a multiplier with the font size.\\n - Values greater than or equal to 8 will be used as effective values.\") });\n    }\n    compute(env, options, value) {\n        // The lineHeight is computed from the fontSize if it is 0.\n        // Moreover, the final lineHeight respects the editor zoom level.\n        // So take the result from env.fontInfo\n        return env.fontInfo.lineHeight;\n    }\n}\nclass EditorMinimap extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            enabled: true,\n            size: 'proportional',\n            side: 'right',\n            showSlider: 'mouseover',\n            autohide: false,\n            renderCharacters: true,\n            maxColumn: 120,\n            scale: 1,\n        };\n        super(67 /* EditorOption.minimap */, 'minimap', defaults, {\n            'editor.minimap.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                description: nls.localize('minimap.enabled', \"Controls whether the minimap is shown.\")\n            },\n            'editor.minimap.autohide': {\n                type: 'boolean',\n                default: defaults.autohide,\n                description: nls.localize('minimap.autohide', \"Controls whether the minimap is hidden automatically.\")\n            },\n            'editor.minimap.size': {\n                type: 'string',\n                enum: ['proportional', 'fill', 'fit'],\n                enumDescriptions: [\n                    nls.localize('minimap.size.proportional', \"The minimap has the same size as the editor contents (and might scroll).\"),\n                    nls.localize('minimap.size.fill', \"The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).\"),\n                    nls.localize('minimap.size.fit', \"The minimap will shrink as necessary to never be larger than the editor (no scrolling).\"),\n                ],\n                default: defaults.size,\n                description: nls.localize('minimap.size', \"Controls the size of the minimap.\")\n            },\n            'editor.minimap.side': {\n                type: 'string',\n                enum: ['left', 'right'],\n                default: defaults.side,\n                description: nls.localize('minimap.side', \"Controls the side where to render the minimap.\")\n            },\n            'editor.minimap.showSlider': {\n                type: 'string',\n                enum: ['always', 'mouseover'],\n                default: defaults.showSlider,\n                description: nls.localize('minimap.showSlider', \"Controls when the minimap slider is shown.\")\n            },\n            'editor.minimap.scale': {\n                type: 'number',\n                default: defaults.scale,\n                minimum: 1,\n                maximum: 3,\n                enum: [1, 2, 3],\n                description: nls.localize('minimap.scale', \"Scale of content drawn in the minimap: 1, 2 or 3.\")\n            },\n            'editor.minimap.renderCharacters': {\n                type: 'boolean',\n                default: defaults.renderCharacters,\n                description: nls.localize('minimap.renderCharacters', \"Render the actual characters on a line as opposed to color blocks.\")\n            },\n            'editor.minimap.maxColumn': {\n                type: 'number',\n                default: defaults.maxColumn,\n                description: nls.localize('minimap.maxColumn', \"Limit the width of the minimap to render at most a certain number of columns.\")\n            }\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\n            autohide: boolean(input.autohide, this.defaultValue.autohide),\n            size: stringSet(input.size, this.defaultValue.size, ['proportional', 'fill', 'fit']),\n            side: stringSet(input.side, this.defaultValue.side, ['right', 'left']),\n            showSlider: stringSet(input.showSlider, this.defaultValue.showSlider, ['always', 'mouseover']),\n            renderCharacters: boolean(input.renderCharacters, this.defaultValue.renderCharacters),\n            scale: EditorIntOption.clampedInt(input.scale, 1, 1, 3),\n            maxColumn: EditorIntOption.clampedInt(input.maxColumn, this.defaultValue.maxColumn, 1, 10000),\n        };\n    }\n}\n//#endregion\n//#region multiCursorModifier\nfunction _multiCursorModifierFromString(multiCursorModifier) {\n    if (multiCursorModifier === 'ctrlCmd') {\n        return (platform.isMacintosh ? 'metaKey' : 'ctrlKey');\n    }\n    return 'altKey';\n}\nclass EditorPadding extends BaseEditorOption {\n    constructor() {\n        super(77 /* EditorOption.padding */, 'padding', { top: 0, bottom: 0 }, {\n            'editor.padding.top': {\n                type: 'number',\n                default: 0,\n                minimum: 0,\n                maximum: 1000,\n                description: nls.localize('padding.top', \"Controls the amount of space between the top edge of the editor and the first line.\")\n            },\n            'editor.padding.bottom': {\n                type: 'number',\n                default: 0,\n                minimum: 0,\n                maximum: 1000,\n                description: nls.localize('padding.bottom', \"Controls the amount of space between the bottom edge of the editor and the last line.\")\n            }\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            top: EditorIntOption.clampedInt(input.top, 0, 0, 1000),\n            bottom: EditorIntOption.clampedInt(input.bottom, 0, 0, 1000)\n        };\n    }\n}\nclass EditorParameterHints extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            enabled: true,\n            cycle: false\n        };\n        super(78 /* EditorOption.parameterHints */, 'parameterHints', defaults, {\n            'editor.parameterHints.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                description: nls.localize('parameterHints.enabled', \"Enables a pop-up that shows parameter documentation and type information as you type.\")\n            },\n            'editor.parameterHints.cycle': {\n                type: 'boolean',\n                default: defaults.cycle,\n                description: nls.localize('parameterHints.cycle', \"Controls whether the parameter hints menu cycles or closes when reaching the end of the list.\")\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\n            cycle: boolean(input.cycle, this.defaultValue.cycle)\n        };\n    }\n}\n//#endregion\n//#region pixelRatio\nclass EditorPixelRatio extends ComputedEditorOption {\n    constructor() {\n        super(131 /* EditorOption.pixelRatio */);\n    }\n    compute(env, options, _) {\n        return env.pixelRatio;\n    }\n}\nclass EditorQuickSuggestions extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            other: 'on',\n            comments: 'off',\n            strings: 'off'\n        };\n        const types = [\n            { type: 'boolean' },\n            {\n                type: 'string',\n                enum: ['on', 'inline', 'off'],\n                enumDescriptions: [nls.localize('on', \"Quick suggestions show inside the suggest widget\"), nls.localize('inline', \"Quick suggestions show as ghost text\"), nls.localize('off', \"Quick suggestions are disabled\")]\n            }\n        ];\n        super(81 /* EditorOption.quickSuggestions */, 'quickSuggestions', defaults, {\n            type: 'object',\n            additionalProperties: false,\n            properties: {\n                strings: {\n                    anyOf: types,\n                    default: defaults.strings,\n                    description: nls.localize('quickSuggestions.strings', \"Enable quick suggestions inside strings.\")\n                },\n                comments: {\n                    anyOf: types,\n                    default: defaults.comments,\n                    description: nls.localize('quickSuggestions.comments', \"Enable quick suggestions inside comments.\")\n                },\n                other: {\n                    anyOf: types,\n                    default: defaults.other,\n                    description: nls.localize('quickSuggestions.other', \"Enable quick suggestions outside of strings and comments.\")\n                },\n            },\n            default: defaults,\n            markdownDescription: nls.localize('quickSuggestions', \"Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the '{0}'-setting which controls if suggestions are triggered by special characters.\", `#editor.suggestOnTriggerCharacters#`)\n        });\n        this.defaultValue = defaults;\n    }\n    validate(input) {\n        if (typeof input === 'boolean') {\n            // boolean -> all on/off\n            const value = input ? 'on' : 'off';\n            return { comments: value, strings: value, other: value };\n        }\n        if (!input || typeof input !== 'object') {\n            // invalid object\n            return this.defaultValue;\n        }\n        const { other, comments, strings } = input;\n        const allowedValues = ['on', 'inline', 'off'];\n        let validatedOther;\n        let validatedComments;\n        let validatedStrings;\n        if (typeof other === 'boolean') {\n            validatedOther = other ? 'on' : 'off';\n        }\n        else {\n            validatedOther = stringSet(other, this.defaultValue.other, allowedValues);\n        }\n        if (typeof comments === 'boolean') {\n            validatedComments = comments ? 'on' : 'off';\n        }\n        else {\n            validatedComments = stringSet(comments, this.defaultValue.comments, allowedValues);\n        }\n        if (typeof strings === 'boolean') {\n            validatedStrings = strings ? 'on' : 'off';\n        }\n        else {\n            validatedStrings = stringSet(strings, this.defaultValue.strings, allowedValues);\n        }\n        return {\n            other: validatedOther,\n            comments: validatedComments,\n            strings: validatedStrings\n        };\n    }\n}\nclass EditorRenderLineNumbersOption extends BaseEditorOption {\n    constructor() {\n        super(62 /* EditorOption.lineNumbers */, 'lineNumbers', { renderType: 1 /* RenderLineNumbersType.On */, renderFn: null }, {\n            type: 'string',\n            enum: ['off', 'on', 'relative', 'interval'],\n            enumDescriptions: [\n                nls.localize('lineNumbers.off', \"Line numbers are not rendered.\"),\n                nls.localize('lineNumbers.on', \"Line numbers are rendered as absolute number.\"),\n                nls.localize('lineNumbers.relative', \"Line numbers are rendered as distance in lines to cursor position.\"),\n                nls.localize('lineNumbers.interval', \"Line numbers are rendered every 10 lines.\")\n            ],\n            default: 'on',\n            description: nls.localize('lineNumbers', \"Controls the display of line numbers.\")\n        });\n    }\n    validate(lineNumbers) {\n        let renderType = this.defaultValue.renderType;\n        let renderFn = this.defaultValue.renderFn;\n        if (typeof lineNumbers !== 'undefined') {\n            if (typeof lineNumbers === 'function') {\n                renderType = 4 /* RenderLineNumbersType.Custom */;\n                renderFn = lineNumbers;\n            }\n            else if (lineNumbers === 'interval') {\n                renderType = 3 /* RenderLineNumbersType.Interval */;\n            }\n            else if (lineNumbers === 'relative') {\n                renderType = 2 /* RenderLineNumbersType.Relative */;\n            }\n            else if (lineNumbers === 'on') {\n                renderType = 1 /* RenderLineNumbersType.On */;\n            }\n            else {\n                renderType = 0 /* RenderLineNumbersType.Off */;\n            }\n        }\n        return {\n            renderType,\n            renderFn\n        };\n    }\n}\n//#endregion\n//#region renderValidationDecorations\n/**\n * @internal\n */\nexport function filterValidationDecorations(options) {\n    const renderValidationDecorations = options.get(89 /* EditorOption.renderValidationDecorations */);\n    if (renderValidationDecorations === 'editable') {\n        return options.get(83 /* EditorOption.readOnly */);\n    }\n    return renderValidationDecorations === 'on' ? false : true;\n}\nclass EditorRulers extends BaseEditorOption {\n    constructor() {\n        const defaults = [];\n        const columnSchema = { type: 'number', description: nls.localize('rulers.size', \"Number of monospace characters at which this editor ruler will render.\") };\n        super(93 /* EditorOption.rulers */, 'rulers', defaults, {\n            type: 'array',\n            items: {\n                anyOf: [\n                    columnSchema,\n                    {\n                        type: [\n                            'object'\n                        ],\n                        properties: {\n                            column: columnSchema,\n                            color: {\n                                type: 'string',\n                                description: nls.localize('rulers.color', \"Color of this editor ruler.\"),\n                                format: 'color-hex'\n                            }\n                        }\n                    }\n                ]\n            },\n            default: defaults,\n            description: nls.localize('rulers', \"Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.\")\n        });\n    }\n    validate(input) {\n        if (Array.isArray(input)) {\n            const rulers = [];\n            for (const _element of input) {\n                if (typeof _element === 'number') {\n                    rulers.push({\n                        column: EditorIntOption.clampedInt(_element, 0, 0, 10000),\n                        color: null\n                    });\n                }\n                else if (_element && typeof _element === 'object') {\n                    const element = _element;\n                    rulers.push({\n                        column: EditorIntOption.clampedInt(element.column, 0, 0, 10000),\n                        color: element.color\n                    });\n                }\n            }\n            rulers.sort((a, b) => a.column - b.column);\n            return rulers;\n        }\n        return this.defaultValue;\n    }\n}\nfunction _scrollbarVisibilityFromString(visibility, defaultValue) {\n    if (typeof visibility !== 'string') {\n        return defaultValue;\n    }\n    switch (visibility) {\n        case 'hidden': return 2 /* ScrollbarVisibility.Hidden */;\n        case 'visible': return 3 /* ScrollbarVisibility.Visible */;\n        default: return 1 /* ScrollbarVisibility.Auto */;\n    }\n}\nclass EditorScrollbar extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            vertical: 1 /* ScrollbarVisibility.Auto */,\n            horizontal: 1 /* ScrollbarVisibility.Auto */,\n            arrowSize: 11,\n            useShadows: true,\n            verticalHasArrows: false,\n            horizontalHasArrows: false,\n            horizontalScrollbarSize: 12,\n            horizontalSliderSize: 12,\n            verticalScrollbarSize: 14,\n            verticalSliderSize: 14,\n            handleMouseWheel: true,\n            alwaysConsumeMouseWheel: true,\n            scrollByPage: false\n        };\n        super(94 /* EditorOption.scrollbar */, 'scrollbar', defaults, {\n            'editor.scrollbar.vertical': {\n                type: 'string',\n                enum: ['auto', 'visible', 'hidden'],\n                enumDescriptions: [\n                    nls.localize('scrollbar.vertical.auto', \"The vertical scrollbar will be visible only when necessary.\"),\n                    nls.localize('scrollbar.vertical.visible', \"The vertical scrollbar will always be visible.\"),\n                    nls.localize('scrollbar.vertical.fit', \"The vertical scrollbar will always be hidden.\"),\n                ],\n                default: 'auto',\n                description: nls.localize('scrollbar.vertical', \"Controls the visibility of the vertical scrollbar.\")\n            },\n            'editor.scrollbar.horizontal': {\n                type: 'string',\n                enum: ['auto', 'visible', 'hidden'],\n                enumDescriptions: [\n                    nls.localize('scrollbar.horizontal.auto', \"The horizontal scrollbar will be visible only when necessary.\"),\n                    nls.localize('scrollbar.horizontal.visible', \"The horizontal scrollbar will always be visible.\"),\n                    nls.localize('scrollbar.horizontal.fit', \"The horizontal scrollbar will always be hidden.\"),\n                ],\n                default: 'auto',\n                description: nls.localize('scrollbar.horizontal', \"Controls the visibility of the horizontal scrollbar.\")\n            },\n            'editor.scrollbar.verticalScrollbarSize': {\n                type: 'number',\n                default: defaults.verticalScrollbarSize,\n                description: nls.localize('scrollbar.verticalScrollbarSize', \"The width of the vertical scrollbar.\")\n            },\n            'editor.scrollbar.horizontalScrollbarSize': {\n                type: 'number',\n                default: defaults.horizontalScrollbarSize,\n                description: nls.localize('scrollbar.horizontalScrollbarSize', \"The height of the horizontal scrollbar.\")\n            },\n            'editor.scrollbar.scrollByPage': {\n                type: 'boolean',\n                default: defaults.scrollByPage,\n                description: nls.localize('scrollbar.scrollByPage', \"Controls whether clicks scroll by page or jump to click position.\")\n            }\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        const horizontalScrollbarSize = EditorIntOption.clampedInt(input.horizontalScrollbarSize, this.defaultValue.horizontalScrollbarSize, 0, 1000);\n        const verticalScrollbarSize = EditorIntOption.clampedInt(input.verticalScrollbarSize, this.defaultValue.verticalScrollbarSize, 0, 1000);\n        return {\n            arrowSize: EditorIntOption.clampedInt(input.arrowSize, this.defaultValue.arrowSize, 0, 1000),\n            vertical: _scrollbarVisibilityFromString(input.vertical, this.defaultValue.vertical),\n            horizontal: _scrollbarVisibilityFromString(input.horizontal, this.defaultValue.horizontal),\n            useShadows: boolean(input.useShadows, this.defaultValue.useShadows),\n            verticalHasArrows: boolean(input.verticalHasArrows, this.defaultValue.verticalHasArrows),\n            horizontalHasArrows: boolean(input.horizontalHasArrows, this.defaultValue.horizontalHasArrows),\n            handleMouseWheel: boolean(input.handleMouseWheel, this.defaultValue.handleMouseWheel),\n            alwaysConsumeMouseWheel: boolean(input.alwaysConsumeMouseWheel, this.defaultValue.alwaysConsumeMouseWheel),\n            horizontalScrollbarSize: horizontalScrollbarSize,\n            horizontalSliderSize: EditorIntOption.clampedInt(input.horizontalSliderSize, horizontalScrollbarSize, 0, 1000),\n            verticalScrollbarSize: verticalScrollbarSize,\n            verticalSliderSize: EditorIntOption.clampedInt(input.verticalSliderSize, verticalScrollbarSize, 0, 1000),\n            scrollByPage: boolean(input.scrollByPage, this.defaultValue.scrollByPage),\n        };\n    }\n}\n/**\n * @internal\n*/\nexport const inUntrustedWorkspace = 'inUntrustedWorkspace';\n/**\n * @internal\n */\nexport const unicodeHighlightConfigKeys = {\n    allowedCharacters: 'editor.unicodeHighlight.allowedCharacters',\n    invisibleCharacters: 'editor.unicodeHighlight.invisibleCharacters',\n    nonBasicASCII: 'editor.unicodeHighlight.nonBasicASCII',\n    ambiguousCharacters: 'editor.unicodeHighlight.ambiguousCharacters',\n    includeComments: 'editor.unicodeHighlight.includeComments',\n    includeStrings: 'editor.unicodeHighlight.includeStrings',\n    allowedLocales: 'editor.unicodeHighlight.allowedLocales',\n};\nclass UnicodeHighlight extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            nonBasicASCII: inUntrustedWorkspace,\n            invisibleCharacters: true,\n            ambiguousCharacters: true,\n            includeComments: inUntrustedWorkspace,\n            includeStrings: true,\n            allowedCharacters: {},\n            allowedLocales: { _os: true, _vscode: true },\n        };\n        super(115 /* EditorOption.unicodeHighlighting */, 'unicodeHighlight', defaults, {\n            [unicodeHighlightConfigKeys.nonBasicASCII]: {\n                restricted: true,\n                type: ['boolean', 'string'],\n                enum: [true, false, inUntrustedWorkspace],\n                default: defaults.nonBasicASCII,\n                description: nls.localize('unicodeHighlight.nonBasicASCII', \"Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.\")\n            },\n            [unicodeHighlightConfigKeys.invisibleCharacters]: {\n                restricted: true,\n                type: 'boolean',\n                default: defaults.invisibleCharacters,\n                description: nls.localize('unicodeHighlight.invisibleCharacters', \"Controls whether characters that just reserve space or have no width at all are highlighted.\")\n            },\n            [unicodeHighlightConfigKeys.ambiguousCharacters]: {\n                restricted: true,\n                type: 'boolean',\n                default: defaults.ambiguousCharacters,\n                description: nls.localize('unicodeHighlight.ambiguousCharacters', \"Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.\")\n            },\n            [unicodeHighlightConfigKeys.includeComments]: {\n                restricted: true,\n                type: ['boolean', 'string'],\n                enum: [true, false, inUntrustedWorkspace],\n                default: defaults.includeComments,\n                description: nls.localize('unicodeHighlight.includeComments', \"Controls whether characters in comments should also be subject to unicode highlighting.\")\n            },\n            [unicodeHighlightConfigKeys.includeStrings]: {\n                restricted: true,\n                type: ['boolean', 'string'],\n                enum: [true, false, inUntrustedWorkspace],\n                default: defaults.includeStrings,\n                description: nls.localize('unicodeHighlight.includeStrings', \"Controls whether characters in strings should also be subject to unicode highlighting.\")\n            },\n            [unicodeHighlightConfigKeys.allowedCharacters]: {\n                restricted: true,\n                type: 'object',\n                default: defaults.allowedCharacters,\n                description: nls.localize('unicodeHighlight.allowedCharacters', \"Defines allowed characters that are not being highlighted.\"),\n                additionalProperties: {\n                    type: 'boolean'\n                }\n            },\n            [unicodeHighlightConfigKeys.allowedLocales]: {\n                restricted: true,\n                type: 'object',\n                additionalProperties: {\n                    type: 'boolean'\n                },\n                default: defaults.allowedLocales,\n                description: nls.localize('unicodeHighlight.allowedLocales', \"Unicode characters that are common in allowed locales are not being highlighted.\")\n            },\n        });\n    }\n    applyUpdate(value, update) {\n        let didChange = false;\n        if (update.allowedCharacters && value) {\n            // Treat allowedCharacters atomically\n            if (!objects.equals(value.allowedCharacters, update.allowedCharacters)) {\n                value = Object.assign(Object.assign({}, value), { allowedCharacters: update.allowedCharacters });\n                didChange = true;\n            }\n        }\n        if (update.allowedLocales && value) {\n            // Treat allowedLocales atomically\n            if (!objects.equals(value.allowedLocales, update.allowedLocales)) {\n                value = Object.assign(Object.assign({}, value), { allowedLocales: update.allowedLocales });\n                didChange = true;\n            }\n        }\n        const result = super.applyUpdate(value, update);\n        if (didChange) {\n            return new ApplyUpdateResult(result.newValue, true);\n        }\n        return result;\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            nonBasicASCII: primitiveSet(input.nonBasicASCII, inUntrustedWorkspace, [true, false, inUntrustedWorkspace]),\n            invisibleCharacters: boolean(input.invisibleCharacters, this.defaultValue.invisibleCharacters),\n            ambiguousCharacters: boolean(input.ambiguousCharacters, this.defaultValue.ambiguousCharacters),\n            includeComments: primitiveSet(input.includeComments, inUntrustedWorkspace, [true, false, inUntrustedWorkspace]),\n            includeStrings: primitiveSet(input.includeStrings, inUntrustedWorkspace, [true, false, inUntrustedWorkspace]),\n            allowedCharacters: this.validateBooleanMap(_input.allowedCharacters, this.defaultValue.allowedCharacters),\n            allowedLocales: this.validateBooleanMap(_input.allowedLocales, this.defaultValue.allowedLocales),\n        };\n    }\n    validateBooleanMap(map, defaultValue) {\n        if ((typeof map !== 'object') || !map) {\n            return defaultValue;\n        }\n        const result = {};\n        for (const [key, value] of Object.entries(map)) {\n            if (value === true) {\n                result[key] = true;\n            }\n        }\n        return result;\n    }\n}\n/**\n * Configuration options for inline suggestions\n */\nclass InlineEditorSuggest extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            enabled: true,\n            mode: 'subwordSmart'\n        };\n        super(57 /* EditorOption.inlineSuggest */, 'inlineSuggest', defaults, {\n            'editor.inlineSuggest.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                description: nls.localize('inlineSuggest.enabled', \"Controls whether to automatically show inline suggestions in the editor.\")\n            }\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\n            mode: stringSet(input.mode, this.defaultValue.mode, ['prefix', 'subword', 'subwordSmart']),\n        };\n    }\n}\n/**\n * Configuration options for inline suggestions\n */\nclass BracketPairColorization extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            enabled: EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions.enabled,\n            independentColorPoolPerBracketType: EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions.independentColorPoolPerBracketType,\n        };\n        super(12 /* EditorOption.bracketPairColorization */, 'bracketPairColorization', defaults, {\n            'editor.bracketPairColorization.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                markdownDescription: nls.localize('bracketPairColorization.enabled', \"Controls whether bracket pair colorization is enabled or not. Use {0} to override the bracket highlight colors.\", '`#workbench.colorCustomizations#`')\n            },\n            'editor.bracketPairColorization.independentColorPoolPerBracketType': {\n                type: 'boolean',\n                default: defaults.independentColorPoolPerBracketType,\n                description: nls.localize('bracketPairColorization.independentColorPoolPerBracketType', \"Controls whether each bracket type has its own independent color pool.\")\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\n            independentColorPoolPerBracketType: boolean(input.independentColorPoolPerBracketType, this.defaultValue.independentColorPoolPerBracketType),\n        };\n    }\n}\n/**\n * Configuration options for inline suggestions\n */\nclass GuideOptions extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            bracketPairs: false,\n            bracketPairsHorizontal: 'active',\n            highlightActiveBracketPair: true,\n            indentation: true,\n            highlightActiveIndentation: true\n        };\n        super(13 /* EditorOption.guides */, 'guides', defaults, {\n            'editor.guides.bracketPairs': {\n                type: ['boolean', 'string'],\n                enum: [true, 'active', false],\n                enumDescriptions: [\n                    nls.localize('editor.guides.bracketPairs.true', \"Enables bracket pair guides.\"),\n                    nls.localize('editor.guides.bracketPairs.active', \"Enables bracket pair guides only for the active bracket pair.\"),\n                    nls.localize('editor.guides.bracketPairs.false', \"Disables bracket pair guides.\"),\n                ],\n                default: defaults.bracketPairs,\n                description: nls.localize('editor.guides.bracketPairs', \"Controls whether bracket pair guides are enabled or not.\")\n            },\n            'editor.guides.bracketPairsHorizontal': {\n                type: ['boolean', 'string'],\n                enum: [true, 'active', false],\n                enumDescriptions: [\n                    nls.localize('editor.guides.bracketPairsHorizontal.true', \"Enables horizontal guides as addition to vertical bracket pair guides.\"),\n                    nls.localize('editor.guides.bracketPairsHorizontal.active', \"Enables horizontal guides only for the active bracket pair.\"),\n                    nls.localize('editor.guides.bracketPairsHorizontal.false', \"Disables horizontal bracket pair guides.\"),\n                ],\n                default: defaults.bracketPairsHorizontal,\n                description: nls.localize('editor.guides.bracketPairsHorizontal', \"Controls whether horizontal bracket pair guides are enabled or not.\")\n            },\n            'editor.guides.highlightActiveBracketPair': {\n                type: 'boolean',\n                default: defaults.highlightActiveBracketPair,\n                description: nls.localize('editor.guides.highlightActiveBracketPair', \"Controls whether the editor should highlight the active bracket pair.\")\n            },\n            'editor.guides.indentation': {\n                type: 'boolean',\n                default: defaults.indentation,\n                description: nls.localize('editor.guides.indentation', \"Controls whether the editor should render indent guides.\")\n            },\n            'editor.guides.highlightActiveIndentation': {\n                type: ['boolean', 'string'],\n                enum: [true, 'always', false],\n                enumDescriptions: [\n                    nls.localize('editor.guides.highlightActiveIndentation.true', \"Highlights the active indent guide.\"),\n                    nls.localize('editor.guides.highlightActiveIndentation.always', \"Highlights the active indent guide even if bracket guides are highlighted.\"),\n                    nls.localize('editor.guides.highlightActiveIndentation.false', \"Do not highlight the active indent guide.\"),\n                ],\n                default: defaults.highlightActiveIndentation,\n                description: nls.localize('editor.guides.highlightActiveIndentation', \"Controls whether the editor should highlight the active indent guide.\")\n            }\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            bracketPairs: primitiveSet(input.bracketPairs, this.defaultValue.bracketPairs, [true, false, 'active']),\n            bracketPairsHorizontal: primitiveSet(input.bracketPairsHorizontal, this.defaultValue.bracketPairsHorizontal, [true, false, 'active']),\n            highlightActiveBracketPair: boolean(input.highlightActiveBracketPair, this.defaultValue.highlightActiveBracketPair),\n            indentation: boolean(input.indentation, this.defaultValue.indentation),\n            highlightActiveIndentation: primitiveSet(input.highlightActiveIndentation, this.defaultValue.highlightActiveIndentation, [true, false, 'always']),\n        };\n    }\n}\nfunction primitiveSet(value, defaultValue, allowedValues) {\n    const idx = allowedValues.indexOf(value);\n    if (idx === -1) {\n        return defaultValue;\n    }\n    return allowedValues[idx];\n}\nclass EditorSuggest extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            insertMode: 'insert',\n            filterGraceful: true,\n            snippetsPreventQuickSuggestions: true,\n            localityBonus: false,\n            shareSuggestSelections: false,\n            showIcons: true,\n            showStatusBar: false,\n            preview: false,\n            previewMode: 'subwordSmart',\n            showInlineDetails: true,\n            showMethods: true,\n            showFunctions: true,\n            showConstructors: true,\n            showDeprecated: true,\n            showFields: true,\n            showVariables: true,\n            showClasses: true,\n            showStructs: true,\n            showInterfaces: true,\n            showModules: true,\n            showProperties: true,\n            showEvents: true,\n            showOperators: true,\n            showUnits: true,\n            showValues: true,\n            showConstants: true,\n            showEnums: true,\n            showEnumMembers: true,\n            showKeywords: true,\n            showWords: true,\n            showColors: true,\n            showFiles: true,\n            showReferences: true,\n            showFolders: true,\n            showTypeParameters: true,\n            showSnippets: true,\n            showUsers: true,\n            showIssues: true,\n        };\n        super(108 /* EditorOption.suggest */, 'suggest', defaults, {\n            'editor.suggest.insertMode': {\n                type: 'string',\n                enum: ['insert', 'replace'],\n                enumDescriptions: [\n                    nls.localize('suggest.insertMode.insert', \"Insert suggestion without overwriting text right of the cursor.\"),\n                    nls.localize('suggest.insertMode.replace', \"Insert suggestion and overwrite text right of the cursor.\"),\n                ],\n                default: defaults.insertMode,\n                description: nls.localize('suggest.insertMode', \"Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.\")\n            },\n            'editor.suggest.filterGraceful': {\n                type: 'boolean',\n                default: defaults.filterGraceful,\n                description: nls.localize('suggest.filterGraceful', \"Controls whether filtering and sorting suggestions accounts for small typos.\")\n            },\n            'editor.suggest.localityBonus': {\n                type: 'boolean',\n                default: defaults.localityBonus,\n                description: nls.localize('suggest.localityBonus', \"Controls whether sorting favors words that appear close to the cursor.\")\n            },\n            'editor.suggest.shareSuggestSelections': {\n                type: 'boolean',\n                default: defaults.shareSuggestSelections,\n                markdownDescription: nls.localize('suggest.shareSuggestSelections', \"Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).\")\n            },\n            'editor.suggest.snippetsPreventQuickSuggestions': {\n                type: 'boolean',\n                default: defaults.snippetsPreventQuickSuggestions,\n                description: nls.localize('suggest.snippetsPreventQuickSuggestions', \"Controls whether an active snippet prevents quick suggestions.\")\n            },\n            'editor.suggest.showIcons': {\n                type: 'boolean',\n                default: defaults.showIcons,\n                description: nls.localize('suggest.showIcons', \"Controls whether to show or hide icons in suggestions.\")\n            },\n            'editor.suggest.showStatusBar': {\n                type: 'boolean',\n                default: defaults.showStatusBar,\n                description: nls.localize('suggest.showStatusBar', \"Controls the visibility of the status bar at the bottom of the suggest widget.\")\n            },\n            'editor.suggest.preview': {\n                type: 'boolean',\n                default: defaults.preview,\n                description: nls.localize('suggest.preview', \"Controls whether to preview the suggestion outcome in the editor.\")\n            },\n            'editor.suggest.showInlineDetails': {\n                type: 'boolean',\n                default: defaults.showInlineDetails,\n                description: nls.localize('suggest.showInlineDetails', \"Controls whether suggest details show inline with the label or only in the details widget\")\n            },\n            'editor.suggest.maxVisibleSuggestions': {\n                type: 'number',\n                deprecationMessage: nls.localize('suggest.maxVisibleSuggestions.dep', \"This setting is deprecated. The suggest widget can now be resized.\"),\n            },\n            'editor.suggest.filteredTypes': {\n                type: 'object',\n                deprecationMessage: nls.localize('deprecated', \"This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.\")\n            },\n            'editor.suggest.showMethods': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showMethods', \"When enabled IntelliSense shows `method`-suggestions.\")\n            },\n            'editor.suggest.showFunctions': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showFunctions', \"When enabled IntelliSense shows `function`-suggestions.\")\n            },\n            'editor.suggest.showConstructors': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showConstructors', \"When enabled IntelliSense shows `constructor`-suggestions.\")\n            },\n            'editor.suggest.showDeprecated': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showDeprecated', \"When enabled IntelliSense shows `deprecated`-suggestions.\")\n            },\n            'editor.suggest.showFields': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showFields', \"When enabled IntelliSense shows `field`-suggestions.\")\n            },\n            'editor.suggest.showVariables': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showVariables', \"When enabled IntelliSense shows `variable`-suggestions.\")\n            },\n            'editor.suggest.showClasses': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showClasss', \"When enabled IntelliSense shows `class`-suggestions.\")\n            },\n            'editor.suggest.showStructs': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showStructs', \"When enabled IntelliSense shows `struct`-suggestions.\")\n            },\n            'editor.suggest.showInterfaces': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showInterfaces', \"When enabled IntelliSense shows `interface`-suggestions.\")\n            },\n            'editor.suggest.showModules': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showModules', \"When enabled IntelliSense shows `module`-suggestions.\")\n            },\n            'editor.suggest.showProperties': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showPropertys', \"When enabled IntelliSense shows `property`-suggestions.\")\n            },\n            'editor.suggest.showEvents': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showEvents', \"When enabled IntelliSense shows `event`-suggestions.\")\n            },\n            'editor.suggest.showOperators': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showOperators', \"When enabled IntelliSense shows `operator`-suggestions.\")\n            },\n            'editor.suggest.showUnits': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showUnits', \"When enabled IntelliSense shows `unit`-suggestions.\")\n            },\n            'editor.suggest.showValues': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showValues', \"When enabled IntelliSense shows `value`-suggestions.\")\n            },\n            'editor.suggest.showConstants': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showConstants', \"When enabled IntelliSense shows `constant`-suggestions.\")\n            },\n            'editor.suggest.showEnums': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showEnums', \"When enabled IntelliSense shows `enum`-suggestions.\")\n            },\n            'editor.suggest.showEnumMembers': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showEnumMembers', \"When enabled IntelliSense shows `enumMember`-suggestions.\")\n            },\n            'editor.suggest.showKeywords': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showKeywords', \"When enabled IntelliSense shows `keyword`-suggestions.\")\n            },\n            'editor.suggest.showWords': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showTexts', \"When enabled IntelliSense shows `text`-suggestions.\")\n            },\n            'editor.suggest.showColors': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showColors', \"When enabled IntelliSense shows `color`-suggestions.\")\n            },\n            'editor.suggest.showFiles': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showFiles', \"When enabled IntelliSense shows `file`-suggestions.\")\n            },\n            'editor.suggest.showReferences': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showReferences', \"When enabled IntelliSense shows `reference`-suggestions.\")\n            },\n            'editor.suggest.showCustomcolors': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showCustomcolors', \"When enabled IntelliSense shows `customcolor`-suggestions.\")\n            },\n            'editor.suggest.showFolders': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showFolders', \"When enabled IntelliSense shows `folder`-suggestions.\")\n            },\n            'editor.suggest.showTypeParameters': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showTypeParameters', \"When enabled IntelliSense shows `typeParameter`-suggestions.\")\n            },\n            'editor.suggest.showSnippets': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showSnippets', \"When enabled IntelliSense shows `snippet`-suggestions.\")\n            },\n            'editor.suggest.showUsers': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showUsers', \"When enabled IntelliSense shows `user`-suggestions.\")\n            },\n            'editor.suggest.showIssues': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showIssues', \"When enabled IntelliSense shows `issues`-suggestions.\")\n            }\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            insertMode: stringSet(input.insertMode, this.defaultValue.insertMode, ['insert', 'replace']),\n            filterGraceful: boolean(input.filterGraceful, this.defaultValue.filterGraceful),\n            snippetsPreventQuickSuggestions: boolean(input.snippetsPreventQuickSuggestions, this.defaultValue.filterGraceful),\n            localityBonus: boolean(input.localityBonus, this.defaultValue.localityBonus),\n            shareSuggestSelections: boolean(input.shareSuggestSelections, this.defaultValue.shareSuggestSelections),\n            showIcons: boolean(input.showIcons, this.defaultValue.showIcons),\n            showStatusBar: boolean(input.showStatusBar, this.defaultValue.showStatusBar),\n            preview: boolean(input.preview, this.defaultValue.preview),\n            previewMode: stringSet(input.previewMode, this.defaultValue.previewMode, ['prefix', 'subword', 'subwordSmart']),\n            showInlineDetails: boolean(input.showInlineDetails, this.defaultValue.showInlineDetails),\n            showMethods: boolean(input.showMethods, this.defaultValue.showMethods),\n            showFunctions: boolean(input.showFunctions, this.defaultValue.showFunctions),\n            showConstructors: boolean(input.showConstructors, this.defaultValue.showConstructors),\n            showDeprecated: boolean(input.showDeprecated, this.defaultValue.showDeprecated),\n            showFields: boolean(input.showFields, this.defaultValue.showFields),\n            showVariables: boolean(input.showVariables, this.defaultValue.showVariables),\n            showClasses: boolean(input.showClasses, this.defaultValue.showClasses),\n            showStructs: boolean(input.showStructs, this.defaultValue.showStructs),\n            showInterfaces: boolean(input.showInterfaces, this.defaultValue.showInterfaces),\n            showModules: boolean(input.showModules, this.defaultValue.showModules),\n            showProperties: boolean(input.showProperties, this.defaultValue.showProperties),\n            showEvents: boolean(input.showEvents, this.defaultValue.showEvents),\n            showOperators: boolean(input.showOperators, this.defaultValue.showOperators),\n            showUnits: boolean(input.showUnits, this.defaultValue.showUnits),\n            showValues: boolean(input.showValues, this.defaultValue.showValues),\n            showConstants: boolean(input.showConstants, this.defaultValue.showConstants),\n            showEnums: boolean(input.showEnums, this.defaultValue.showEnums),\n            showEnumMembers: boolean(input.showEnumMembers, this.defaultValue.showEnumMembers),\n            showKeywords: boolean(input.showKeywords, this.defaultValue.showKeywords),\n            showWords: boolean(input.showWords, this.defaultValue.showWords),\n            showColors: boolean(input.showColors, this.defaultValue.showColors),\n            showFiles: boolean(input.showFiles, this.defaultValue.showFiles),\n            showReferences: boolean(input.showReferences, this.defaultValue.showReferences),\n            showFolders: boolean(input.showFolders, this.defaultValue.showFolders),\n            showTypeParameters: boolean(input.showTypeParameters, this.defaultValue.showTypeParameters),\n            showSnippets: boolean(input.showSnippets, this.defaultValue.showSnippets),\n            showUsers: boolean(input.showUsers, this.defaultValue.showUsers),\n            showIssues: boolean(input.showIssues, this.defaultValue.showIssues),\n        };\n    }\n}\nclass SmartSelect extends BaseEditorOption {\n    constructor() {\n        super(104 /* EditorOption.smartSelect */, 'smartSelect', {\n            selectLeadingAndTrailingWhitespace: true\n        }, {\n            'editor.smartSelect.selectLeadingAndTrailingWhitespace': {\n                description: nls.localize('selectLeadingAndTrailingWhitespace', \"Whether leading and trailing whitespace should always be selected.\"),\n                default: true,\n                type: 'boolean'\n            }\n        });\n    }\n    validate(input) {\n        if (!input || typeof input !== 'object') {\n            return this.defaultValue;\n        }\n        return {\n            selectLeadingAndTrailingWhitespace: boolean(input.selectLeadingAndTrailingWhitespace, this.defaultValue.selectLeadingAndTrailingWhitespace)\n        };\n    }\n}\n//#endregion\n//#region tabFocusMode\nclass EditorTabFocusMode extends ComputedEditorOption {\n    constructor() {\n        super(132 /* EditorOption.tabFocusMode */);\n    }\n    compute(env, options, _) {\n        const readOnly = options.get(83 /* EditorOption.readOnly */);\n        return (readOnly ? true : env.tabFocusMode);\n    }\n}\nfunction _wrappingIndentFromString(wrappingIndent) {\n    switch (wrappingIndent) {\n        case 'none': return 0 /* WrappingIndent.None */;\n        case 'same': return 1 /* WrappingIndent.Same */;\n        case 'indent': return 2 /* WrappingIndent.Indent */;\n        case 'deepIndent': return 3 /* WrappingIndent.DeepIndent */;\n    }\n}\nclass EditorWrappingInfoComputer extends ComputedEditorOption {\n    constructor() {\n        super(134 /* EditorOption.wrappingInfo */);\n    }\n    compute(env, options, _) {\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        return {\n            isDominatedByLongLines: env.isDominatedByLongLines,\n            isWordWrapMinified: layoutInfo.isWordWrapMinified,\n            isViewportWrapping: layoutInfo.isViewportWrapping,\n            wrappingColumn: layoutInfo.wrappingColumn,\n        };\n    }\n}\nclass EditorDropIntoEditor extends BaseEditorOption {\n    constructor() {\n        const defaults = { enabled: true };\n        super(32 /* EditorOption.dropIntoEditor */, 'dropIntoEditor', defaults, {\n            'editor.dropIntoEditor.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                markdownDescription: nls.localize('dropIntoEditor.enabled', \"Controls whether you can drag and drop a file into a text editor by holding down `shift` (instead of opening the file in an editor).\"),\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled)\n        };\n    }\n}\n//#endregion\nconst DEFAULT_WINDOWS_FONT_FAMILY = 'Consolas, \\'Courier New\\', monospace';\nconst DEFAULT_MAC_FONT_FAMILY = 'Menlo, Monaco, \\'Courier New\\', monospace';\nconst DEFAULT_LINUX_FONT_FAMILY = '\\'Droid Sans Mono\\', \\'monospace\\', monospace';\n/**\n * @internal\n */\nexport const EDITOR_FONT_DEFAULTS = {\n    fontFamily: (platform.isMacintosh ? DEFAULT_MAC_FONT_FAMILY : (platform.isLinux ? DEFAULT_LINUX_FONT_FAMILY : DEFAULT_WINDOWS_FONT_FAMILY)),\n    fontWeight: 'normal',\n    fontSize: (platform.isMacintosh ? 12 : 14),\n    lineHeight: 0,\n    letterSpacing: 0,\n};\n/**\n * @internal\n */\nexport const editorOptionsRegistry = [];\nfunction register(option) {\n    editorOptionsRegistry[option.id] = option;\n    return option;\n}\nexport const EditorOptions = {\n    acceptSuggestionOnCommitCharacter: register(new EditorBooleanOption(0 /* EditorOption.acceptSuggestionOnCommitCharacter */, 'acceptSuggestionOnCommitCharacter', true, { markdownDescription: nls.localize('acceptSuggestionOnCommitCharacter', \"Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`; `) can be a commit character that accepts a suggestion and types that character.\") })),\n    acceptSuggestionOnEnter: register(new EditorStringEnumOption(1 /* EditorOption.acceptSuggestionOnEnter */, 'acceptSuggestionOnEnter', 'on', ['on', 'smart', 'off'], {\n        markdownEnumDescriptions: [\n            '',\n            nls.localize('acceptSuggestionOnEnterSmart', \"Only accept a suggestion with `Enter` when it makes a textual change.\"),\n            ''\n        ],\n        markdownDescription: nls.localize('acceptSuggestionOnEnter', \"Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.\")\n    })),\n    accessibilitySupport: register(new EditorAccessibilitySupport()),\n    accessibilityPageSize: register(new EditorIntOption(3 /* EditorOption.accessibilityPageSize */, 'accessibilityPageSize', 10, 1, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, {\n        description: nls.localize('accessibilityPageSize', \"Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.\")\n    })),\n    ariaLabel: register(new EditorStringOption(4 /* EditorOption.ariaLabel */, 'ariaLabel', nls.localize('editorViewAccessibleLabel', \"Editor content\"))),\n    autoClosingBrackets: register(new EditorStringEnumOption(5 /* EditorOption.autoClosingBrackets */, 'autoClosingBrackets', 'languageDefined', ['always', 'languageDefined', 'beforeWhitespace', 'never'], {\n        enumDescriptions: [\n            '',\n            nls.localize('editor.autoClosingBrackets.languageDefined', \"Use language configurations to determine when to autoclose brackets.\"),\n            nls.localize('editor.autoClosingBrackets.beforeWhitespace', \"Autoclose brackets only when the cursor is to the left of whitespace.\"),\n            '',\n        ],\n        description: nls.localize('autoClosingBrackets', \"Controls whether the editor should automatically close brackets after the user adds an opening bracket.\")\n    })),\n    autoClosingDelete: register(new EditorStringEnumOption(6 /* EditorOption.autoClosingDelete */, 'autoClosingDelete', 'auto', ['always', 'auto', 'never'], {\n        enumDescriptions: [\n            '',\n            nls.localize('editor.autoClosingDelete.auto', \"Remove adjacent closing quotes or brackets only if they were automatically inserted.\"),\n            '',\n        ],\n        description: nls.localize('autoClosingDelete', \"Controls whether the editor should remove adjacent closing quotes or brackets when deleting.\")\n    })),\n    autoClosingOvertype: register(new EditorStringEnumOption(7 /* EditorOption.autoClosingOvertype */, 'autoClosingOvertype', 'auto', ['always', 'auto', 'never'], {\n        enumDescriptions: [\n            '',\n            nls.localize('editor.autoClosingOvertype.auto', \"Type over closing quotes or brackets only if they were automatically inserted.\"),\n            '',\n        ],\n        description: nls.localize('autoClosingOvertype', \"Controls whether the editor should type over closing quotes or brackets.\")\n    })),\n    autoClosingQuotes: register(new EditorStringEnumOption(8 /* EditorOption.autoClosingQuotes */, 'autoClosingQuotes', 'languageDefined', ['always', 'languageDefined', 'beforeWhitespace', 'never'], {\n        enumDescriptions: [\n            '',\n            nls.localize('editor.autoClosingQuotes.languageDefined', \"Use language configurations to determine when to autoclose quotes.\"),\n            nls.localize('editor.autoClosingQuotes.beforeWhitespace', \"Autoclose quotes only when the cursor is to the left of whitespace.\"),\n            '',\n        ],\n        description: nls.localize('autoClosingQuotes', \"Controls whether the editor should automatically close quotes after the user adds an opening quote.\")\n    })),\n    autoIndent: register(new EditorEnumOption(9 /* EditorOption.autoIndent */, 'autoIndent', 4 /* EditorAutoIndentStrategy.Full */, 'full', ['none', 'keep', 'brackets', 'advanced', 'full'], _autoIndentFromString, {\n        enumDescriptions: [\n            nls.localize('editor.autoIndent.none', \"The editor will not insert indentation automatically.\"),\n            nls.localize('editor.autoIndent.keep', \"The editor will keep the current line's indentation.\"),\n            nls.localize('editor.autoIndent.brackets', \"The editor will keep the current line's indentation and honor language defined brackets.\"),\n            nls.localize('editor.autoIndent.advanced', \"The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.\"),\n            nls.localize('editor.autoIndent.full', \"The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.\"),\n        ],\n        description: nls.localize('autoIndent', \"Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.\")\n    })),\n    automaticLayout: register(new EditorBooleanOption(10 /* EditorOption.automaticLayout */, 'automaticLayout', false)),\n    autoSurround: register(new EditorStringEnumOption(11 /* EditorOption.autoSurround */, 'autoSurround', 'languageDefined', ['languageDefined', 'quotes', 'brackets', 'never'], {\n        enumDescriptions: [\n            nls.localize('editor.autoSurround.languageDefined', \"Use language configurations to determine when to automatically surround selections.\"),\n            nls.localize('editor.autoSurround.quotes', \"Surround with quotes but not brackets.\"),\n            nls.localize('editor.autoSurround.brackets', \"Surround with brackets but not quotes.\"),\n            ''\n        ],\n        description: nls.localize('autoSurround', \"Controls whether the editor should automatically surround selections when typing quotes or brackets.\")\n    })),\n    bracketPairColorization: register(new BracketPairColorization()),\n    bracketPairGuides: register(new GuideOptions()),\n    stickyTabStops: register(new EditorBooleanOption(106 /* EditorOption.stickyTabStops */, 'stickyTabStops', false, { description: nls.localize('stickyTabStops', \"Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.\") })),\n    codeLens: register(new EditorBooleanOption(14 /* EditorOption.codeLens */, 'codeLens', true, { description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\") })),\n    codeLensFontFamily: register(new EditorStringOption(15 /* EditorOption.codeLensFontFamily */, 'codeLensFontFamily', '', { description: nls.localize('codeLensFontFamily', \"Controls the font family for CodeLens.\") })),\n    codeLensFontSize: register(new EditorIntOption(16 /* EditorOption.codeLensFontSize */, 'codeLensFontSize', 0, 0, 100, {\n        type: 'number',\n        default: 0,\n        minimum: 0,\n        maximum: 100,\n        markdownDescription: nls.localize('codeLensFontSize', \"Controls the font size in pixels for CodeLens. When set to `0`, 90% of `#editor.fontSize#` is used.\")\n    })),\n    colorDecorators: register(new EditorBooleanOption(17 /* EditorOption.colorDecorators */, 'colorDecorators', true, { description: nls.localize('colorDecorators', \"Controls whether the editor should render the inline color decorators and color picker.\") })),\n    columnSelection: register(new EditorBooleanOption(18 /* EditorOption.columnSelection */, 'columnSelection', false, { description: nls.localize('columnSelection', \"Enable that the selection with the mouse and keys is doing column selection.\") })),\n    comments: register(new EditorComments()),\n    contextmenu: register(new EditorBooleanOption(20 /* EditorOption.contextmenu */, 'contextmenu', true)),\n    copyWithSyntaxHighlighting: register(new EditorBooleanOption(21 /* EditorOption.copyWithSyntaxHighlighting */, 'copyWithSyntaxHighlighting', true, { description: nls.localize('copyWithSyntaxHighlighting', \"Controls whether syntax highlighting should be copied into the clipboard.\") })),\n    cursorBlinking: register(new EditorEnumOption(22 /* EditorOption.cursorBlinking */, 'cursorBlinking', 1 /* TextEditorCursorBlinkingStyle.Blink */, 'blink', ['blink', 'smooth', 'phase', 'expand', 'solid'], _cursorBlinkingStyleFromString, { description: nls.localize('cursorBlinking', \"Control the cursor animation style.\") })),\n    cursorSmoothCaretAnimation: register(new EditorBooleanOption(23 /* EditorOption.cursorSmoothCaretAnimation */, 'cursorSmoothCaretAnimation', false, { description: nls.localize('cursorSmoothCaretAnimation', \"Controls whether the smooth caret animation should be enabled.\") })),\n    cursorStyle: register(new EditorEnumOption(24 /* EditorOption.cursorStyle */, 'cursorStyle', TextEditorCursorStyle.Line, 'line', ['line', 'block', 'underline', 'line-thin', 'block-outline', 'underline-thin'], _cursorStyleFromString, { description: nls.localize('cursorStyle', \"Controls the cursor style.\") })),\n    cursorSurroundingLines: register(new EditorIntOption(25 /* EditorOption.cursorSurroundingLines */, 'cursorSurroundingLines', 0, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('cursorSurroundingLines', \"Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.\") })),\n    cursorSurroundingLinesStyle: register(new EditorStringEnumOption(26 /* EditorOption.cursorSurroundingLinesStyle */, 'cursorSurroundingLinesStyle', 'default', ['default', 'all'], {\n        enumDescriptions: [\n            nls.localize('cursorSurroundingLinesStyle.default', \"`cursorSurroundingLines` is enforced only when triggered via the keyboard or API.\"),\n            nls.localize('cursorSurroundingLinesStyle.all', \"`cursorSurroundingLines` is enforced always.\")\n        ],\n        description: nls.localize('cursorSurroundingLinesStyle', \"Controls when `cursorSurroundingLines` should be enforced.\")\n    })),\n    cursorWidth: register(new EditorIntOption(27 /* EditorOption.cursorWidth */, 'cursorWidth', 0, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { markdownDescription: nls.localize('cursorWidth', \"Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.\") })),\n    disableLayerHinting: register(new EditorBooleanOption(28 /* EditorOption.disableLayerHinting */, 'disableLayerHinting', false)),\n    disableMonospaceOptimizations: register(new EditorBooleanOption(29 /* EditorOption.disableMonospaceOptimizations */, 'disableMonospaceOptimizations', false)),\n    domReadOnly: register(new EditorBooleanOption(30 /* EditorOption.domReadOnly */, 'domReadOnly', false)),\n    dragAndDrop: register(new EditorBooleanOption(31 /* EditorOption.dragAndDrop */, 'dragAndDrop', true, { description: nls.localize('dragAndDrop', \"Controls whether the editor should allow moving selections via drag and drop.\") })),\n    emptySelectionClipboard: register(new EditorEmptySelectionClipboard()),\n    dropIntoEditor: register(new EditorDropIntoEditor()),\n    experimental: register(new EditorExperimental()),\n    extraEditorClassName: register(new EditorStringOption(35 /* EditorOption.extraEditorClassName */, 'extraEditorClassName', '')),\n    fastScrollSensitivity: register(new EditorFloatOption(36 /* EditorOption.fastScrollSensitivity */, 'fastScrollSensitivity', 5, x => (x <= 0 ? 5 : x), { markdownDescription: nls.localize('fastScrollSensitivity', \"Scrolling speed multiplier when pressing `Alt`.\") })),\n    find: register(new EditorFind()),\n    fixedOverflowWidgets: register(new EditorBooleanOption(38 /* EditorOption.fixedOverflowWidgets */, 'fixedOverflowWidgets', false)),\n    folding: register(new EditorBooleanOption(39 /* EditorOption.folding */, 'folding', true, { description: nls.localize('folding', \"Controls whether the editor has code folding enabled.\") })),\n    foldingStrategy: register(new EditorStringEnumOption(40 /* EditorOption.foldingStrategy */, 'foldingStrategy', 'auto', ['auto', 'indentation'], {\n        enumDescriptions: [\n            nls.localize('foldingStrategy.auto', \"Use a language-specific folding strategy if available, else the indentation-based one.\"),\n            nls.localize('foldingStrategy.indentation', \"Use the indentation-based folding strategy.\"),\n        ],\n        description: nls.localize('foldingStrategy', \"Controls the strategy for computing folding ranges.\")\n    })),\n    foldingHighlight: register(new EditorBooleanOption(41 /* EditorOption.foldingHighlight */, 'foldingHighlight', true, { description: nls.localize('foldingHighlight', \"Controls whether the editor should highlight folded ranges.\") })),\n    foldingImportsByDefault: register(new EditorBooleanOption(42 /* EditorOption.foldingImportsByDefault */, 'foldingImportsByDefault', false, { description: nls.localize('foldingImportsByDefault', \"Controls whether the editor automatically collapses import ranges.\") })),\n    foldingMaximumRegions: register(new EditorIntOption(43 /* EditorOption.foldingMaximumRegions */, 'foldingMaximumRegions', 5000, 10, 65000, // limit must be less than foldingRanges MAX_FOLDING_REGIONS\n    { description: nls.localize('foldingMaximumRegions', \"The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.\") })),\n    unfoldOnClickAfterEndOfLine: register(new EditorBooleanOption(44 /* EditorOption.unfoldOnClickAfterEndOfLine */, 'unfoldOnClickAfterEndOfLine', false, { description: nls.localize('unfoldOnClickAfterEndOfLine', \"Controls whether clicking on the empty content after a folded line will unfold the line.\") })),\n    fontFamily: register(new EditorStringOption(45 /* EditorOption.fontFamily */, 'fontFamily', EDITOR_FONT_DEFAULTS.fontFamily, { description: nls.localize('fontFamily', \"Controls the font family.\") })),\n    fontInfo: register(new EditorFontInfo()),\n    fontLigatures2: register(new EditorFontLigatures()),\n    fontSize: register(new EditorFontSize()),\n    fontWeight: register(new EditorFontWeight()),\n    formatOnPaste: register(new EditorBooleanOption(50 /* EditorOption.formatOnPaste */, 'formatOnPaste', false, { description: nls.localize('formatOnPaste', \"Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.\") })),\n    formatOnType: register(new EditorBooleanOption(51 /* EditorOption.formatOnType */, 'formatOnType', false, { description: nls.localize('formatOnType', \"Controls whether the editor should automatically format the line after typing.\") })),\n    glyphMargin: register(new EditorBooleanOption(52 /* EditorOption.glyphMargin */, 'glyphMargin', true, { description: nls.localize('glyphMargin', \"Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.\") })),\n    gotoLocation: register(new EditorGoToLocation()),\n    hideCursorInOverviewRuler: register(new EditorBooleanOption(54 /* EditorOption.hideCursorInOverviewRuler */, 'hideCursorInOverviewRuler', false, { description: nls.localize('hideCursorInOverviewRuler', \"Controls whether the cursor should be hidden in the overview ruler.\") })),\n    hover: register(new EditorHover()),\n    inDiffEditor: register(new EditorBooleanOption(56 /* EditorOption.inDiffEditor */, 'inDiffEditor', false)),\n    letterSpacing: register(new EditorFloatOption(58 /* EditorOption.letterSpacing */, 'letterSpacing', EDITOR_FONT_DEFAULTS.letterSpacing, x => EditorFloatOption.clamp(x, -5, 20), { description: nls.localize('letterSpacing', \"Controls the letter spacing in pixels.\") })),\n    lightbulb: register(new EditorLightbulb()),\n    lineDecorationsWidth: register(new SimpleEditorOption(60 /* EditorOption.lineDecorationsWidth */, 'lineDecorationsWidth', 10)),\n    lineHeight: register(new EditorLineHeight()),\n    lineNumbers: register(new EditorRenderLineNumbersOption()),\n    lineNumbersMinChars: register(new EditorIntOption(63 /* EditorOption.lineNumbersMinChars */, 'lineNumbersMinChars', 5, 1, 300)),\n    linkedEditing: register(new EditorBooleanOption(64 /* EditorOption.linkedEditing */, 'linkedEditing', false, { description: nls.localize('linkedEditing', \"Controls whether the editor has linked editing enabled. Depending on the language, related symbols, e.g. HTML tags, are updated while editing.\") })),\n    links: register(new EditorBooleanOption(65 /* EditorOption.links */, 'links', true, { description: nls.localize('links', \"Controls whether the editor should detect links and make them clickable.\") })),\n    matchBrackets: register(new EditorStringEnumOption(66 /* EditorOption.matchBrackets */, 'matchBrackets', 'always', ['always', 'near', 'never'], { description: nls.localize('matchBrackets', \"Highlight matching brackets.\") })),\n    minimap: register(new EditorMinimap()),\n    mouseStyle: register(new EditorStringEnumOption(68 /* EditorOption.mouseStyle */, 'mouseStyle', 'text', ['text', 'default', 'copy'])),\n    mouseWheelScrollSensitivity: register(new EditorFloatOption(69 /* EditorOption.mouseWheelScrollSensitivity */, 'mouseWheelScrollSensitivity', 1, x => (x === 0 ? 1 : x), { markdownDescription: nls.localize('mouseWheelScrollSensitivity', \"A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.\") })),\n    mouseWheelZoom: register(new EditorBooleanOption(70 /* EditorOption.mouseWheelZoom */, 'mouseWheelZoom', false, { markdownDescription: nls.localize('mouseWheelZoom', \"Zoom the font of the editor when using mouse wheel and holding `Ctrl`.\") })),\n    multiCursorMergeOverlapping: register(new EditorBooleanOption(71 /* EditorOption.multiCursorMergeOverlapping */, 'multiCursorMergeOverlapping', true, { description: nls.localize('multiCursorMergeOverlapping', \"Merge multiple cursors when they are overlapping.\") })),\n    multiCursorModifier: register(new EditorEnumOption(72 /* EditorOption.multiCursorModifier */, 'multiCursorModifier', 'altKey', 'alt', ['ctrlCmd', 'alt'], _multiCursorModifierFromString, {\n        markdownEnumDescriptions: [\n            nls.localize('multiCursorModifier.ctrlCmd', \"Maps to `Control` on Windows and Linux and to `Command` on macOS.\"),\n            nls.localize('multiCursorModifier.alt', \"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\")\n        ],\n        markdownDescription: nls.localize({\n            key: 'multiCursorModifier',\n            comment: [\n                '- `ctrlCmd` refers to a value the setting can take and should not be localized.',\n                '- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.'\n            ]\n        }, \"The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).\")\n    })),\n    multiCursorPaste: register(new EditorStringEnumOption(73 /* EditorOption.multiCursorPaste */, 'multiCursorPaste', 'spread', ['spread', 'full'], {\n        markdownEnumDescriptions: [\n            nls.localize('multiCursorPaste.spread', \"Each cursor pastes a single line of the text.\"),\n            nls.localize('multiCursorPaste.full', \"Each cursor pastes the full text.\")\n        ],\n        markdownDescription: nls.localize('multiCursorPaste', \"Controls pasting when the line count of the pasted text matches the cursor count.\")\n    })),\n    occurrencesHighlight: register(new EditorBooleanOption(74 /* EditorOption.occurrencesHighlight */, 'occurrencesHighlight', true, { description: nls.localize('occurrencesHighlight', \"Controls whether the editor should highlight semantic symbol occurrences.\") })),\n    overviewRulerBorder: register(new EditorBooleanOption(75 /* EditorOption.overviewRulerBorder */, 'overviewRulerBorder', true, { description: nls.localize('overviewRulerBorder', \"Controls whether a border should be drawn around the overview ruler.\") })),\n    overviewRulerLanes: register(new EditorIntOption(76 /* EditorOption.overviewRulerLanes */, 'overviewRulerLanes', 3, 0, 3)),\n    padding: register(new EditorPadding()),\n    parameterHints: register(new EditorParameterHints()),\n    peekWidgetDefaultFocus: register(new EditorStringEnumOption(79 /* EditorOption.peekWidgetDefaultFocus */, 'peekWidgetDefaultFocus', 'tree', ['tree', 'editor'], {\n        enumDescriptions: [\n            nls.localize('peekWidgetDefaultFocus.tree', \"Focus the tree when opening peek\"),\n            nls.localize('peekWidgetDefaultFocus.editor', \"Focus the editor when opening peek\")\n        ],\n        description: nls.localize('peekWidgetDefaultFocus', \"Controls whether to focus the inline editor or the tree in the peek widget.\")\n    })),\n    definitionLinkOpensInPeek: register(new EditorBooleanOption(80 /* EditorOption.definitionLinkOpensInPeek */, 'definitionLinkOpensInPeek', false, { description: nls.localize('definitionLinkOpensInPeek', \"Controls whether the Go to Definition mouse gesture always opens the peek widget.\") })),\n    quickSuggestions: register(new EditorQuickSuggestions()),\n    quickSuggestionsDelay: register(new EditorIntOption(82 /* EditorOption.quickSuggestionsDelay */, 'quickSuggestionsDelay', 10, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('quickSuggestionsDelay', \"Controls the delay in milliseconds after which quick suggestions will show up.\") })),\n    readOnly: register(new EditorBooleanOption(83 /* EditorOption.readOnly */, 'readOnly', false)),\n    renameOnType: register(new EditorBooleanOption(84 /* EditorOption.renameOnType */, 'renameOnType', false, { description: nls.localize('renameOnType', \"Controls whether the editor auto renames on type.\"), markdownDeprecationMessage: nls.localize('renameOnTypeDeprecate', \"Deprecated, use `editor.linkedEditing` instead.\") })),\n    renderControlCharacters: register(new EditorBooleanOption(85 /* EditorOption.renderControlCharacters */, 'renderControlCharacters', true, { description: nls.localize('renderControlCharacters', \"Controls whether the editor should render control characters.\"), restricted: true })),\n    renderFinalNewline: register(new EditorBooleanOption(86 /* EditorOption.renderFinalNewline */, 'renderFinalNewline', true, { description: nls.localize('renderFinalNewline', \"Render last line number when the file ends with a newline.\") })),\n    renderLineHighlight: register(new EditorStringEnumOption(87 /* EditorOption.renderLineHighlight */, 'renderLineHighlight', 'line', ['none', 'gutter', 'line', 'all'], {\n        enumDescriptions: [\n            '',\n            '',\n            '',\n            nls.localize('renderLineHighlight.all', \"Highlights both the gutter and the current line.\"),\n        ],\n        description: nls.localize('renderLineHighlight', \"Controls how the editor should render the current line highlight.\")\n    })),\n    renderLineHighlightOnlyWhenFocus: register(new EditorBooleanOption(88 /* EditorOption.renderLineHighlightOnlyWhenFocus */, 'renderLineHighlightOnlyWhenFocus', false, { description: nls.localize('renderLineHighlightOnlyWhenFocus', \"Controls if the editor should render the current line highlight only when the editor is focused.\") })),\n    renderValidationDecorations: register(new EditorStringEnumOption(89 /* EditorOption.renderValidationDecorations */, 'renderValidationDecorations', 'editable', ['editable', 'on', 'off'])),\n    renderWhitespace: register(new EditorStringEnumOption(90 /* EditorOption.renderWhitespace */, 'renderWhitespace', 'selection', ['none', 'boundary', 'selection', 'trailing', 'all'], {\n        enumDescriptions: [\n            '',\n            nls.localize('renderWhitespace.boundary', \"Render whitespace characters except for single spaces between words.\"),\n            nls.localize('renderWhitespace.selection', \"Render whitespace characters only on selected text.\"),\n            nls.localize('renderWhitespace.trailing', \"Render only trailing whitespace characters.\"),\n            ''\n        ],\n        description: nls.localize('renderWhitespace', \"Controls how the editor should render whitespace characters.\")\n    })),\n    revealHorizontalRightPadding: register(new EditorIntOption(91 /* EditorOption.revealHorizontalRightPadding */, 'revealHorizontalRightPadding', 30, 0, 1000)),\n    roundedSelection: register(new EditorBooleanOption(92 /* EditorOption.roundedSelection */, 'roundedSelection', true, { description: nls.localize('roundedSelection', \"Controls whether selections should have rounded corners.\") })),\n    rulers: register(new EditorRulers()),\n    scrollbar: register(new EditorScrollbar()),\n    scrollBeyondLastColumn: register(new EditorIntOption(95 /* EditorOption.scrollBeyondLastColumn */, 'scrollBeyondLastColumn', 4, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('scrollBeyondLastColumn', \"Controls the number of extra characters beyond which the editor will scroll horizontally.\") })),\n    scrollBeyondLastLine: register(new EditorBooleanOption(96 /* EditorOption.scrollBeyondLastLine */, 'scrollBeyondLastLine', true, { description: nls.localize('scrollBeyondLastLine', \"Controls whether the editor will scroll beyond the last line.\") })),\n    scrollPredominantAxis: register(new EditorBooleanOption(97 /* EditorOption.scrollPredominantAxis */, 'scrollPredominantAxis', true, { description: nls.localize('scrollPredominantAxis', \"Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.\") })),\n    selectionClipboard: register(new EditorBooleanOption(98 /* EditorOption.selectionClipboard */, 'selectionClipboard', true, {\n        description: nls.localize('selectionClipboard', \"Controls whether the Linux primary clipboard should be supported.\"),\n        included: platform.isLinux\n    })),\n    selectionHighlight: register(new EditorBooleanOption(99 /* EditorOption.selectionHighlight */, 'selectionHighlight', true, { description: nls.localize('selectionHighlight', \"Controls whether the editor should highlight matches similar to the selection.\") })),\n    selectOnLineNumbers: register(new EditorBooleanOption(100 /* EditorOption.selectOnLineNumbers */, 'selectOnLineNumbers', true)),\n    showFoldingControls: register(new EditorStringEnumOption(101 /* EditorOption.showFoldingControls */, 'showFoldingControls', 'mouseover', ['always', 'never', 'mouseover'], {\n        enumDescriptions: [\n            nls.localize('showFoldingControls.always', \"Always show the folding controls.\"),\n            nls.localize('showFoldingControls.never', \"Never show the folding controls and reduce the gutter size.\"),\n            nls.localize('showFoldingControls.mouseover', \"Only show the folding controls when the mouse is over the gutter.\"),\n        ],\n        description: nls.localize('showFoldingControls', \"Controls when the folding controls on the gutter are shown.\")\n    })),\n    showUnused: register(new EditorBooleanOption(102 /* EditorOption.showUnused */, 'showUnused', true, { description: nls.localize('showUnused', \"Controls fading out of unused code.\") })),\n    showDeprecated: register(new EditorBooleanOption(128 /* EditorOption.showDeprecated */, 'showDeprecated', true, { description: nls.localize('showDeprecated', \"Controls strikethrough deprecated variables.\") })),\n    inlayHints: register(new EditorInlayHints()),\n    snippetSuggestions: register(new EditorStringEnumOption(103 /* EditorOption.snippetSuggestions */, 'snippetSuggestions', 'inline', ['top', 'bottom', 'inline', 'none'], {\n        enumDescriptions: [\n            nls.localize('snippetSuggestions.top', \"Show snippet suggestions on top of other suggestions.\"),\n            nls.localize('snippetSuggestions.bottom', \"Show snippet suggestions below other suggestions.\"),\n            nls.localize('snippetSuggestions.inline', \"Show snippets suggestions with other suggestions.\"),\n            nls.localize('snippetSuggestions.none', \"Do not show snippet suggestions.\"),\n        ],\n        description: nls.localize('snippetSuggestions', \"Controls whether snippets are shown with other suggestions and how they are sorted.\")\n    })),\n    smartSelect: register(new SmartSelect()),\n    smoothScrolling: register(new EditorBooleanOption(105 /* EditorOption.smoothScrolling */, 'smoothScrolling', false, { description: nls.localize('smoothScrolling', \"Controls whether the editor will scroll using an animation.\") })),\n    stopRenderingLineAfter: register(new EditorIntOption(107 /* EditorOption.stopRenderingLineAfter */, 'stopRenderingLineAfter', 10000, -1, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */)),\n    suggest: register(new EditorSuggest()),\n    inlineSuggest: register(new InlineEditorSuggest()),\n    suggestFontSize: register(new EditorIntOption(109 /* EditorOption.suggestFontSize */, 'suggestFontSize', 0, 0, 1000, { markdownDescription: nls.localize('suggestFontSize', \"Font size for the suggest widget. When set to {0}, the value of {1} is used.\", '`0`', '`#editor.fontSize#`') })),\n    suggestLineHeight: register(new EditorIntOption(110 /* EditorOption.suggestLineHeight */, 'suggestLineHeight', 0, 0, 1000, { markdownDescription: nls.localize('suggestLineHeight', \"Line height for the suggest widget. When set to {0}, the value of {1} is used. The minimum value is 8.\", '`0`', '`#editor.lineHeight#`') })),\n    suggestOnTriggerCharacters: register(new EditorBooleanOption(111 /* EditorOption.suggestOnTriggerCharacters */, 'suggestOnTriggerCharacters', true, { description: nls.localize('suggestOnTriggerCharacters', \"Controls whether suggestions should automatically show up when typing trigger characters.\") })),\n    suggestSelection: register(new EditorStringEnumOption(112 /* EditorOption.suggestSelection */, 'suggestSelection', 'first', ['first', 'recentlyUsed', 'recentlyUsedByPrefix'], {\n        markdownEnumDescriptions: [\n            nls.localize('suggestSelection.first', \"Always select the first suggestion.\"),\n            nls.localize('suggestSelection.recentlyUsed', \"Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.\"),\n            nls.localize('suggestSelection.recentlyUsedByPrefix', \"Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.\"),\n        ],\n        description: nls.localize('suggestSelection', \"Controls how suggestions are pre-selected when showing the suggest list.\")\n    })),\n    tabCompletion: register(new EditorStringEnumOption(113 /* EditorOption.tabCompletion */, 'tabCompletion', 'off', ['on', 'off', 'onlySnippets'], {\n        enumDescriptions: [\n            nls.localize('tabCompletion.on', \"Tab complete will insert the best matching suggestion when pressing tab.\"),\n            nls.localize('tabCompletion.off', \"Disable tab completions.\"),\n            nls.localize('tabCompletion.onlySnippets', \"Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.\"),\n        ],\n        description: nls.localize('tabCompletion', \"Enables tab completions.\")\n    })),\n    tabIndex: register(new EditorIntOption(114 /* EditorOption.tabIndex */, 'tabIndex', 0, -1, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */)),\n    unicodeHighlight: register(new UnicodeHighlight()),\n    unusualLineTerminators: register(new EditorStringEnumOption(116 /* EditorOption.unusualLineTerminators */, 'unusualLineTerminators', 'prompt', ['auto', 'off', 'prompt'], {\n        enumDescriptions: [\n            nls.localize('unusualLineTerminators.auto', \"Unusual line terminators are automatically removed.\"),\n            nls.localize('unusualLineTerminators.off', \"Unusual line terminators are ignored.\"),\n            nls.localize('unusualLineTerminators.prompt', \"Unusual line terminators prompt to be removed.\"),\n        ],\n        description: nls.localize('unusualLineTerminators', \"Remove unusual line terminators that might cause problems.\")\n    })),\n    useShadowDOM: register(new EditorBooleanOption(117 /* EditorOption.useShadowDOM */, 'useShadowDOM', true)),\n    useTabStops: register(new EditorBooleanOption(118 /* EditorOption.useTabStops */, 'useTabStops', true, { description: nls.localize('useTabStops', \"Inserting and deleting whitespace follows tab stops.\") })),\n    wordSeparators: register(new EditorStringOption(119 /* EditorOption.wordSeparators */, 'wordSeparators', USUAL_WORD_SEPARATORS, { description: nls.localize('wordSeparators', \"Characters that will be used as word separators when doing word related navigations or operations.\") })),\n    wordWrap: register(new EditorStringEnumOption(120 /* EditorOption.wordWrap */, 'wordWrap', 'off', ['off', 'on', 'wordWrapColumn', 'bounded'], {\n        markdownEnumDescriptions: [\n            nls.localize('wordWrap.off', \"Lines will never wrap.\"),\n            nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"),\n            nls.localize({\n                key: 'wordWrap.wordWrapColumn',\n                comment: [\n                    '- `editor.wordWrapColumn` refers to a different setting and should not be localized.'\n                ]\n            }, \"Lines will wrap at `#editor.wordWrapColumn#`.\"),\n            nls.localize({\n                key: 'wordWrap.bounded',\n                comment: [\n                    '- viewport means the edge of the visible window size.',\n                    '- `editor.wordWrapColumn` refers to a different setting and should not be localized.'\n                ]\n            }, \"Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`.\"),\n        ],\n        description: nls.localize({\n            key: 'wordWrap',\n            comment: [\n                '- \\'off\\', \\'on\\', \\'wordWrapColumn\\' and \\'bounded\\' refer to values the setting can take and should not be localized.',\n                '- `editor.wordWrapColumn` refers to a different setting and should not be localized.'\n            ]\n        }, \"Controls how lines should wrap.\")\n    })),\n    wordWrapBreakAfterCharacters: register(new EditorStringOption(121 /* EditorOption.wordWrapBreakAfterCharacters */, 'wordWrapBreakAfterCharacters', \n    // allow-any-unicode-next-line\n    ' \\t})]?|/&.,;¢°′″‰℃、。｡､￠，．：；？！％・･ゝゞヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻ｧｨｩｪｫｬｭｮｯｰ”〉》」』】〕）］｝｣')),\n    wordWrapBreakBeforeCharacters: register(new EditorStringOption(122 /* EditorOption.wordWrapBreakBeforeCharacters */, 'wordWrapBreakBeforeCharacters', \n    // allow-any-unicode-next-line\n    '([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋')),\n    wordWrapColumn: register(new EditorIntOption(123 /* EditorOption.wordWrapColumn */, 'wordWrapColumn', 80, 1, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, {\n        markdownDescription: nls.localize({\n            key: 'wordWrapColumn',\n            comment: [\n                '- `editor.wordWrap` refers to a different setting and should not be localized.',\n                '- \\'wordWrapColumn\\' and \\'bounded\\' refer to values the different setting can take and should not be localized.'\n            ]\n        }, \"Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`.\")\n    })),\n    wordWrapOverride1: register(new EditorStringEnumOption(124 /* EditorOption.wordWrapOverride1 */, 'wordWrapOverride1', 'inherit', ['off', 'on', 'inherit'])),\n    wordWrapOverride2: register(new EditorStringEnumOption(125 /* EditorOption.wordWrapOverride2 */, 'wordWrapOverride2', 'inherit', ['off', 'on', 'inherit'])),\n    wrappingIndent: register(new EditorEnumOption(126 /* EditorOption.wrappingIndent */, 'wrappingIndent', 1 /* WrappingIndent.Same */, 'same', ['none', 'same', 'indent', 'deepIndent'], _wrappingIndentFromString, {\n        enumDescriptions: [\n            nls.localize('wrappingIndent.none', \"No indentation. Wrapped lines begin at column 1.\"),\n            nls.localize('wrappingIndent.same', \"Wrapped lines get the same indentation as the parent.\"),\n            nls.localize('wrappingIndent.indent', \"Wrapped lines get +1 indentation toward the parent.\"),\n            nls.localize('wrappingIndent.deepIndent', \"Wrapped lines get +2 indentation toward the parent.\"),\n        ],\n        description: nls.localize('wrappingIndent', \"Controls the indentation of wrapped lines.\"),\n    })),\n    wrappingStrategy: register(new EditorStringEnumOption(127 /* EditorOption.wrappingStrategy */, 'wrappingStrategy', 'simple', ['simple', 'advanced'], {\n        enumDescriptions: [\n            nls.localize('wrappingStrategy.simple', \"Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.\"),\n            nls.localize('wrappingStrategy.advanced', \"Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.\")\n        ],\n        description: nls.localize('wrappingStrategy', \"Controls the algorithm that computes wrapping points.\")\n    })),\n    // Leave these at the end (because they have dependencies!)\n    editorClassName: register(new EditorClassName()),\n    pixelRatio: register(new EditorPixelRatio()),\n    tabFocusMode: register(new EditorTabFocusMode()),\n    layoutInfo: register(new EditorLayoutInfoComputer()),\n    wrappingInfo: register(new EditorWrappingInfoComputer())\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nexport const EditorZoom = new class {\n    constructor() {\n        this._zoomLevel = 0;\n        this._onDidChangeZoomLevel = new Emitter();\n        this.onDidChangeZoomLevel = this._onDidChangeZoomLevel.event;\n    }\n    getZoomLevel() {\n        return this._zoomLevel;\n    }\n    setZoomLevel(zoomLevel) {\n        zoomLevel = Math.min(Math.max(-5, zoomLevel), 20);\n        if (this._zoomLevel === zoomLevel) {\n            return;\n        }\n        this._zoomLevel = zoomLevel;\n        this._onDidChangeZoomLevel.fire(this._zoomLevel);\n    }\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as platform from '../../../base/common/platform.js';\nimport { EDITOR_FONT_DEFAULTS } from './editorOptions.js';\nimport { EditorZoom } from './editorZoom.js';\n/**\n * Determined from empirical observations.\n * @internal\n */\nconst GOLDEN_LINE_HEIGHT_RATIO = platform.isMacintosh ? 1.5 : 1.35;\n/**\n * @internal\n */\nconst MINIMUM_LINE_HEIGHT = 8;\nexport class BareFontInfo {\n    /**\n     * @internal\n     */\n    constructor(opts) {\n        this._bareFontInfoBrand = undefined;\n        this.pixelRatio = opts.pixelRatio;\n        this.fontFamily = String(opts.fontFamily);\n        this.fontWeight = String(opts.fontWeight);\n        this.fontSize = opts.fontSize;\n        this.fontFeatureSettings = opts.fontFeatureSettings;\n        this.lineHeight = opts.lineHeight | 0;\n        this.letterSpacing = opts.letterSpacing;\n    }\n    /**\n     * @internal\n     */\n    static createFromValidatedSettings(options, pixelRatio, ignoreEditorZoom) {\n        const fontFamily = options.get(45 /* EditorOption.fontFamily */);\n        const fontWeight = options.get(49 /* EditorOption.fontWeight */);\n        const fontSize = options.get(48 /* EditorOption.fontSize */);\n        const fontFeatureSettings = options.get(47 /* EditorOption.fontLigatures */);\n        const lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        const letterSpacing = options.get(58 /* EditorOption.letterSpacing */);\n        return BareFontInfo._create(fontFamily, fontWeight, fontSize, fontFeatureSettings, lineHeight, letterSpacing, pixelRatio, ignoreEditorZoom);\n    }\n    /**\n     * @internal\n     */\n    static _create(fontFamily, fontWeight, fontSize, fontFeatureSettings, lineHeight, letterSpacing, pixelRatio, ignoreEditorZoom) {\n        if (lineHeight === 0) {\n            lineHeight = GOLDEN_LINE_HEIGHT_RATIO * fontSize;\n        }\n        else if (lineHeight < MINIMUM_LINE_HEIGHT) {\n            // Values too small to be line heights in pixels are in ems.\n            lineHeight = lineHeight * fontSize;\n        }\n        // Enforce integer, minimum constraints\n        lineHeight = Math.round(lineHeight);\n        if (lineHeight < MINIMUM_LINE_HEIGHT) {\n            lineHeight = MINIMUM_LINE_HEIGHT;\n        }\n        const editorZoomLevelMultiplier = 1 + (ignoreEditorZoom ? 0 : EditorZoom.getZoomLevel() * 0.1);\n        fontSize *= editorZoomLevelMultiplier;\n        lineHeight *= editorZoomLevelMultiplier;\n        return new BareFontInfo({\n            pixelRatio: pixelRatio,\n            fontFamily: fontFamily,\n            fontWeight: fontWeight,\n            fontSize: fontSize,\n            fontFeatureSettings: fontFeatureSettings,\n            lineHeight: lineHeight,\n            letterSpacing: letterSpacing\n        });\n    }\n    /**\n     * @internal\n     */\n    getId() {\n        return `${this.pixelRatio}-${this.fontFamily}-${this.fontWeight}-${this.fontSize}-${this.fontFeatureSettings}-${this.lineHeight}-${this.letterSpacing}`;\n    }\n    /**\n     * @internal\n     */\n    getMassagedFontFamily() {\n        const fallbackFontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n        const fontFamily = BareFontInfo._wrapInQuotes(this.fontFamily);\n        if (fallbackFontFamily && this.fontFamily !== fallbackFontFamily) {\n            return `${fontFamily}, ${fallbackFontFamily}`;\n        }\n        return fontFamily;\n    }\n    static _wrapInQuotes(fontFamily) {\n        if (/[,\"']/.test(fontFamily)) {\n            // Looks like the font family might be already escaped\n            return fontFamily;\n        }\n        if (/[+ ]/.test(fontFamily)) {\n            // Wrap a font family using + or <space> with quotes\n            return `\"${fontFamily}\"`;\n        }\n        return fontFamily;\n    }\n}\n// change this whenever `FontInfo` members are changed\nexport const SERIALIZED_FONT_INFO_VERSION = 1;\nexport class FontInfo extends BareFontInfo {\n    /**\n     * @internal\n     */\n    constructor(opts, isTrusted) {\n        super(opts);\n        this._editorStylingBrand = undefined;\n        this.version = SERIALIZED_FONT_INFO_VERSION;\n        this.isTrusted = isTrusted;\n        this.isMonospace = opts.isMonospace;\n        this.typicalHalfwidthCharacterWidth = opts.typicalHalfwidthCharacterWidth;\n        this.typicalFullwidthCharacterWidth = opts.typicalFullwidthCharacterWidth;\n        this.canUseHalfwidthRightwardsArrow = opts.canUseHalfwidthRightwardsArrow;\n        this.spaceWidth = opts.spaceWidth;\n        this.middotWidth = opts.middotWidth;\n        this.wsmiddotWidth = opts.wsmiddotWidth;\n        this.maxDigitWidth = opts.maxDigitWidth;\n    }\n    /**\n     * @internal\n     */\n    equals(other) {\n        return (this.fontFamily === other.fontFamily\n            && this.fontWeight === other.fontWeight\n            && this.fontSize === other.fontSize\n            && this.fontFeatureSettings === other.fontFeatureSettings\n            && this.lineHeight === other.lineHeight\n            && this.letterSpacing === other.letterSpacing\n            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n            && this.typicalFullwidthCharacterWidth === other.typicalFullwidthCharacterWidth\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.maxDigitWidth === other.maxDigitWidth);\n    }\n}\n"],"names":["ReplaceCommand","range","text","insertsAutoWhitespace","this","_range","_text","model","builder","addTrackedEditOperation","helper","srcRange","getInverseEditOperations","Selection","getEndPosition","ReplaceCommandThatSelectsText","ReplaceCommandWithoutChangingPosition","getStartPosition","ReplaceCommandWithOffsetCursorState","lineNumberDeltaOffset","columnDeltaOffset","_columnDeltaOffset","_lineNumberDeltaOffset","delta","ReplaceCommandThatPreservesSelection","editRange","initialSelection","forceMoveMarkers","_initialSelection","_forceMoveMarkers","_selectionId","trackSelection","getTrackedSelection","__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","repeatCache","create","cachedStringRepeat","str","count","cache","ShiftCommand","opts","_languageConfigurationService","_opts","_selection","_useLastEditRangeForCursorEndPosition","_selectionStartColumnStaysPut","addEditOperation","startLine","startLineNumber","endLine","endLineNumber","endColumn","tabSize","indentSize","insertSpaces","shouldIndentEmptyLines","useTabStops","isEmpty","test","getLineContent","previousLineExtraSpaces","extraSpaces","lineNumber","lineText","indentationEndIndex","strings","isUnshift","CursorColumns","tokenization","isCheapToTokenize","enterAction","getEnterAction","autoIndent","Range","getLineMaxColumn","appendText","j","lenJ","charCodeAt","removeText","Math","max","desiredIndent","unshiftIndent","shiftIndent","_addEditOperation","startColumn","getLineLength","oneIndent","min","lastOp","result","initialStartColumn","getDirection","line","column","contentStartVisibleColumn","indent","ILanguageConfigurationService","SurroundSelectionCommand","charBeforeSelection","charAfterSelection","_charBeforeSelection","_charAfterSelection","inverseEditOperations","firstOperationRange","secondOperationRange","CompositionSurroundSelectionCommand","_position","_charAfter","opRange","TrimTrailingWhitespaceCommand","selection","cursors","_cursors","ops","sort","a","b","splice","rLen","cursorIndex","cursorLen","lineCount","getLineCount","lineContent","maxLineColumn","minEditColumn","lastNonWhitespaceIndex","fromColumn","EditOperation","trimTrailingWhitespace","len","op","editorConfigurationBaseNode","freeze","id","order","type","title","nls","scope","editorConfiguration","assign","properties","default","EDITOR_MODEL_DEFAULTS","minimum","markdownDescription","description","enum","enumDescriptions","items","markdownEnumDescriptions","x","editorOptionsRegistry","editorOption","schema","anyOf","name","hasOwnProperty","call","cachedEditorConfigurationKeys","getEditorConfigurationKeys","keys","forEach","prop","isEditorConfigurationKey","isDiffEditorConfigurationKey","Registry","Extensions","registerConfiguration","MINIMAP_GUTTER_WIDTH","ConfigurationChangedEvent","values","_values","ComputeOptionsMemory","stableMinimapLayoutInput","stableFitMaxMinimapScale","stableFitRemainingWidth","BaseEditorOption","defaultValue","value","update","applyUpdate","env","options","ApplyUpdateResult","newValue","didChange","Array","isArray","arrayEquals","arrays","ComputedEditorOption","undefined","input","SimpleEditorOption","boolean","Boolean","EditorBooleanOption","clampedInt","maximum","parseInt","isNaN","EditorIntOption","EditorFloatOption","validationFn","float","n","parseFloat","EditorStringOption","string","stringSet","allowedValues","indexOf","EditorStringEnumOption","_allowedValues","EditorEnumOption","defaultStringValue","convert","_convert","TextEditorCursorStyle","EditorAccessibilitySupport","accessibilitySupport","EditorComments","defaults","insertSpace","ignoreEmptyLines","_input","EditorClassName","_","classNames","get","push","extraEditorClassName","join","EditorEmptySelectionClipboard","emptySelectionClipboard","EditorFind","cursorMoveOnType","seedSearchStringFromSelection","autoFindInSelection","globalFindClipboard","addExtraSpaceOnTop","loop","included","platform","EditorFontLigatures","OFF","ON","EditorFontInfo","fontInfo","EditorFontSize","EDITOR_FONT_DEFAULTS","fontSize","clamp","EditorFontWeight","fontWeight","MINIMUM_VALUE","MAXIMUM_VALUE","errorMessage","pattern","SUGGESTION_VALUES","String","EditorGoToLocation","multiple","multipleDefinitions","multipleTypeDefinitions","multipleDeclarations","multipleImplementations","multipleReferences","alternativeDefinitionCommand","alternativeTypeDefinitionCommand","alternativeDeclarationCommand","alternativeImplementationCommand","alternativeReferenceCommand","jsonSubset","alternativeCommandOptions","deprecationMessage","_a","_b","_c","_d","_e","EditorHover","enabled","delay","sticky","above","EditorLayoutInfoComputer","computeLayout","memory","outerWidth","outerHeight","isDominatedByLongLines","lineHeight","viewLineCount","lineNumbersDigitCount","typicalHalfwidthCharacterWidth","maxDigitWidth","pixelRatio","typicalViewportLineCount","height","extraLinesBeyondLastLine","scrollBeyondLastLine","desiredRatio","minimapLineCount","floor","minimap","renderMinimap","minimapLeft","minimapWidth","minimapHeightIsEditorHeight","minimapIsSampling","minimapScale","minimapLineHeight","minimapCanvasInnerWidth","minimapCanvasInnerHeight","minimapCanvasOuterWidth","minimapCanvasOuterHeight","couldUseMemory","side","size","showSlider","renderCharacters","maxColumn","scale","verticalScrollbarWidth","isViewportWrapping","minimapRenderCharacters","round","minimapMaxColumn","minimapSize","minimapSide","remainingWidth","baseCharHeight","minimapCharWidth","minimapWidthMultiplier","computeContainedMinimapLineCount","fitBecomesFill","maxMinimapScale","effectiveMinimapHeight","ceil","configuredMinimapScale","minimapMaxWidth","lineDecorationsWidth","wordWrapOverride2","wordWrapOverride1","wordWrap","wordWrapColumn","showGlyphMargin","showLineNumbers","renderType","lineNumbersMinChars","scrollbar","verticalScrollbarSize","verticalScrollbarHasArrows","verticalHasArrows","scrollbarArrowSize","arrowSize","horizontalScrollbarHeight","horizontalScrollbarSize","rawLineDecorationsWidth","folding","showFoldingDecoration","substr","lineNumbersWidth","digitCount","glyphMarginWidth","glyphMarginLeft","lineNumbersLeft","decorationsLeft","contentLeft","isWordWrapMinified","wrappingColumn","minimapLayout","_computeMinimapLayout","contentWidth","viewportColumn","verticalArrowSize","width","decorationsWidth","overviewRuler","top","right","EditorLightbulb","EditorExperimental","stickyScroll","EditorInlayHints","fontFamily","padding","EditorLineHeight","EditorMinimap","autohide","EditorPadding","bottom","EditorParameterHints","cycle","EditorPixelRatio","EditorQuickSuggestions","other","comments","types","additionalProperties","EditorRenderLineNumbersOption","renderFn","lineNumbers","filterValidationDecorations","renderValidationDecorations","EditorRulers","columnSchema","color","format","rulers","_element","element","_scrollbarVisibilityFromString","visibility","EditorScrollbar","vertical","horizontal","useShadows","horizontalHasArrows","horizontalSliderSize","verticalSliderSize","handleMouseWheel","alwaysConsumeMouseWheel","scrollByPage","inUntrustedWorkspace","unicodeHighlightConfigKeys","allowedCharacters","invisibleCharacters","nonBasicASCII","ambiguousCharacters","includeComments","includeStrings","allowedLocales","UnicodeHighlight","_os","_vscode","restricted","objects","primitiveSet","validateBooleanMap","map","entries","InlineEditorSuggest","mode","BracketPairColorization","independentColorPoolPerBracketType","GuideOptions","bracketPairs","bracketPairsHorizontal","highlightActiveBracketPair","indentation","highlightActiveIndentation","idx","EditorSuggest","insertMode","filterGraceful","snippetsPreventQuickSuggestions","localityBonus","shareSuggestSelections","showIcons","showStatusBar","preview","previewMode","showInlineDetails","showMethods","showFunctions","showConstructors","showDeprecated","showFields","showVariables","showClasses","showStructs","showInterfaces","showModules","showProperties","showEvents","showOperators","showUnits","showValues","showConstants","showEnums","showEnumMembers","showKeywords","showWords","showColors","showFiles","showReferences","showFolders","showTypeParameters","showSnippets","showUsers","showIssues","SmartSelect","selectLeadingAndTrailingWhitespace","EditorTabFocusMode","tabFocusMode","EditorWrappingInfoComputer","layoutInfo","EditorDropIntoEditor","letterSpacing","register","option","EditorOptions","acceptSuggestionOnCommitCharacter","acceptSuggestionOnEnter","accessibilityPageSize","ariaLabel","autoClosingBrackets","autoClosingDelete","autoClosingOvertype","autoClosingQuotes","automaticLayout","autoSurround","bracketPairColorization","bracketPairGuides","stickyTabStops","codeLens","codeLensFontFamily","codeLensFontSize","colorDecorators","columnSelection","contextmenu","copyWithSyntaxHighlighting","cursorBlinking","cursorBlinkingStyle","cursorSmoothCaretAnimation","cursorStyle","Line","Block","Underline","LineThin","BlockOutline","UnderlineThin","cursorSurroundingLines","cursorSurroundingLinesStyle","cursorWidth","disableLayerHinting","disableMonospaceOptimizations","domReadOnly","dragAndDrop","dropIntoEditor","experimental","fastScrollSensitivity","find","fixedOverflowWidgets","foldingStrategy","foldingHighlight","foldingImportsByDefault","foldingMaximumRegions","unfoldOnClickAfterEndOfLine","fontLigatures2","formatOnPaste","formatOnType","glyphMargin","gotoLocation","hideCursorInOverviewRuler","hover","inDiffEditor","lightbulb","linkedEditing","links","matchBrackets","mouseStyle","mouseWheelScrollSensitivity","mouseWheelZoom","multiCursorMergeOverlapping","multiCursorModifier","comment","multiCursorPaste","occurrencesHighlight","overviewRulerBorder","overviewRulerLanes","parameterHints","peekWidgetDefaultFocus","definitionLinkOpensInPeek","quickSuggestions","quickSuggestionsDelay","readOnly","renameOnType","markdownDeprecationMessage","renderControlCharacters","renderFinalNewline","renderLineHighlight","renderLineHighlightOnlyWhenFocus","renderWhitespace","revealHorizontalRightPadding","roundedSelection","scrollBeyondLastColumn","scrollPredominantAxis","selectionClipboard","selectionHighlight","selectOnLineNumbers","showFoldingControls","showUnused","inlayHints","snippetSuggestions","smartSelect","smoothScrolling","stopRenderingLineAfter","suggest","inlineSuggest","suggestFontSize","suggestLineHeight","suggestOnTriggerCharacters","suggestSelection","tabCompletion","tabIndex","unicodeHighlight","unusualLineTerminators","useShadowDOM","wordSeparators","USUAL_WORD_SEPARATORS","wordWrapBreakAfterCharacters","wordWrapBreakBeforeCharacters","wrappingIndent","wrappingStrategy","editorClassName","wrappingInfo","EditorZoom","_zoomLevel","_onDidChangeZoomLevel","Emitter","onDidChangeZoomLevel","event","zoomLevel","fire","GOLDEN_LINE_HEIGHT_RATIO","BareFontInfo","_bareFontInfoBrand","fontFeatureSettings","fallbackFontFamily","_wrapInQuotes","ignoreEditorZoom","_create","editorZoomLevelMultiplier","FontInfo","isTrusted","_editorStylingBrand","version","isMonospace","typicalFullwidthCharacterWidth","canUseHalfwidthRightwardsArrow","spaceWidth","middotWidth","wsmiddotWidth"],"sourceRoot":""}