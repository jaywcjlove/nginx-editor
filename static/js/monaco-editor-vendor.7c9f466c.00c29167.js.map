{"version":3,"file":"static/js/monaco-editor-vendor.7c9f466c.00c29167.js","mappings":"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","sources":["../../node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/editorWorker.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/getIconClasses.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/languageFeatureDebounce.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/languageFeatures.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/languageFeaturesService.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/languagesAssociations.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/languagesRegistry.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/languageService.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/markerDecorations.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/markerDecorationsService.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/model.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/resolverService.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/semanticTokensDto.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokens/sparseMultilineTokens.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/semanticTokensProviderStyling.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/semanticTokensStyling.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/semanticTokensStylingService.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/textResourceConfiguration.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/treeViewsDnd.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/treeViewsDndService.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js","../../node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js","../../node_modules/monaco-editor/esm/vs/editor/common/standaloneStrings.js","../../node_modules/monaco-editor/esm/vs/editor/common/textModelBracketPairs.js","../../node_modules/monaco-editor/esm/vs/editor/common/textModelEvents.js","../../node_modules/monaco-editor/esm/vs/editor/common/textModelGuides.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousMultilineTokens.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousMultilineTokensBuilder.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousTokensEditing.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousTokensStore.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokens/lineTokens.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokens/sparseTokensStore.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewEventHandler.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewEvents.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/lineDecorations.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linePart.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLineRenderer.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLinesViewportData.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/minimapTokensColorTracker.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/monospaceLineBreaksComputer.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/overviewZoneManager.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewContext.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelDecorations.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linesLayout.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLayout.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/modelLineProjection.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelLines.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModelEventDispatcher.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { Token } from '../languages.js';\nimport * as standaloneEnums from '../standalone/standaloneEnums.js';\nexport class KeyMod {\n    static chord(firstPart, secondPart) {\n        return KeyChord(firstPart, secondPart);\n    }\n}\nKeyMod.CtrlCmd = 2048 /* ConstKeyMod.CtrlCmd */;\nKeyMod.Shift = 1024 /* ConstKeyMod.Shift */;\nKeyMod.Alt = 512 /* ConstKeyMod.Alt */;\nKeyMod.WinCtrl = 256 /* ConstKeyMod.WinCtrl */;\nexport function createMonacoBaseAPI() {\n    return {\n        editor: undefined, // undefined override expected here\n        languages: undefined, // undefined override expected here\n        CancellationTokenSource: CancellationTokenSource,\n        Emitter: Emitter,\n        KeyCode: standaloneEnums.KeyCode,\n        KeyMod: KeyMod,\n        Position: Position,\n        Range: Range,\n        Selection: Selection,\n        SelectionDirection: standaloneEnums.SelectionDirection,\n        MarkerSeverity: standaloneEnums.MarkerSeverity,\n        MarkerTag: standaloneEnums.MarkerTag,\n        Uri: URI,\n        Token: Token\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { stringDiff } from '../../../base/common/diff/diff.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { MirrorTextModel as BaseMirrorModel } from '../model/mirrorTextModel.js';\nimport { ensureValidWordDefinition, getWordAtText } from '../core/wordHelper.js';\nimport { computeLinks } from '../languages/linkComputer.js';\nimport { BasicInplaceReplace } from '../languages/supports/inplaceReplaceSupport.js';\nimport { createMonacoBaseAPI } from './editorBaseApi.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { UnicodeTextModelHighlighter } from './unicodeTextModelHighlighter.js';\nimport { linesDiffComputers } from '../diff/linesDiffComputers.js';\nimport { createProxyObject, getAllMethodNames } from '../../../base/common/objects.js';\nimport { computeDefaultDocumentColors } from '../languages/defaultDocumentColorsComputer.js';\n/**\n * @internal\n */\nclass MirrorModel extends BaseMirrorModel {\n    get uri() {\n        return this._uri;\n    }\n    get eol() {\n        return this._eol;\n    }\n    getValue() {\n        return this.getText();\n    }\n    findMatches(regex) {\n        const matches = [];\n        for (let i = 0; i < this._lines.length; i++) {\n            const line = this._lines[i];\n            const offsetToAdd = this.offsetAt(new Position(i + 1, 1));\n            const iteratorOverMatches = line.matchAll(regex);\n            for (const match of iteratorOverMatches) {\n                if (match.index || match.index === 0) {\n                    match.index = match.index + offsetToAdd;\n                }\n                matches.push(match);\n            }\n        }\n        return matches;\n    }\n    getLinesContent() {\n        return this._lines.slice(0);\n    }\n    getLineCount() {\n        return this._lines.length;\n    }\n    getLineContent(lineNumber) {\n        return this._lines[lineNumber - 1];\n    }\n    getWordAtPosition(position, wordDefinition) {\n        const wordAtText = getWordAtText(position.column, ensureValidWordDefinition(wordDefinition), this._lines[position.lineNumber - 1], 0);\n        if (wordAtText) {\n            return new Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);\n        }\n        return null;\n    }\n    words(wordDefinition) {\n        const lines = this._lines;\n        const wordenize = this._wordenize.bind(this);\n        let lineNumber = 0;\n        let lineText = '';\n        let wordRangesIdx = 0;\n        let wordRanges = [];\n        return {\n            *[Symbol.iterator]() {\n                while (true) {\n                    if (wordRangesIdx < wordRanges.length) {\n                        const value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);\n                        wordRangesIdx += 1;\n                        yield value;\n                    }\n                    else {\n                        if (lineNumber < lines.length) {\n                            lineText = lines[lineNumber];\n                            wordRanges = wordenize(lineText, wordDefinition);\n                            wordRangesIdx = 0;\n                            lineNumber += 1;\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n            }\n        };\n    }\n    getLineWords(lineNumber, wordDefinition) {\n        const content = this._lines[lineNumber - 1];\n        const ranges = this._wordenize(content, wordDefinition);\n        const words = [];\n        for (const range of ranges) {\n            words.push({\n                word: content.substring(range.start, range.end),\n                startColumn: range.start + 1,\n                endColumn: range.end + 1\n            });\n        }\n        return words;\n    }\n    _wordenize(content, wordDefinition) {\n        const result = [];\n        let match;\n        wordDefinition.lastIndex = 0; // reset lastIndex just to be sure\n        while (match = wordDefinition.exec(content)) {\n            if (match[0].length === 0) {\n                // it did match the empty string\n                break;\n            }\n            result.push({ start: match.index, end: match.index + match[0].length });\n        }\n        return result;\n    }\n    getValueInRange(range) {\n        range = this._validateRange(range);\n        if (range.startLineNumber === range.endLineNumber) {\n            return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\n        }\n        const lineEnding = this._eol;\n        const startLineIndex = range.startLineNumber - 1;\n        const endLineIndex = range.endLineNumber - 1;\n        const resultLines = [];\n        resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\n        for (let i = startLineIndex + 1; i < endLineIndex; i++) {\n            resultLines.push(this._lines[i]);\n        }\n        resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\n        return resultLines.join(lineEnding);\n    }\n    offsetAt(position) {\n        position = this._validatePosition(position);\n        this._ensureLineStarts();\n        return this._lineStarts.getPrefixSum(position.lineNumber - 2) + (position.column - 1);\n    }\n    positionAt(offset) {\n        offset = Math.floor(offset);\n        offset = Math.max(0, offset);\n        this._ensureLineStarts();\n        const out = this._lineStarts.getIndexOf(offset);\n        const lineLength = this._lines[out.index].length;\n        // Ensure we return a valid position\n        return {\n            lineNumber: 1 + out.index,\n            column: 1 + Math.min(out.remainder, lineLength)\n        };\n    }\n    _validateRange(range) {\n        const start = this._validatePosition({ lineNumber: range.startLineNumber, column: range.startColumn });\n        const end = this._validatePosition({ lineNumber: range.endLineNumber, column: range.endColumn });\n        if (start.lineNumber !== range.startLineNumber\n            || start.column !== range.startColumn\n            || end.lineNumber !== range.endLineNumber\n            || end.column !== range.endColumn) {\n            return {\n                startLineNumber: start.lineNumber,\n                startColumn: start.column,\n                endLineNumber: end.lineNumber,\n                endColumn: end.column\n            };\n        }\n        return range;\n    }\n    _validatePosition(position) {\n        if (!Position.isIPosition(position)) {\n            throw new Error('bad position');\n        }\n        let { lineNumber, column } = position;\n        let hasChanged = false;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            column = 1;\n            hasChanged = true;\n        }\n        else if (lineNumber > this._lines.length) {\n            lineNumber = this._lines.length;\n            column = this._lines[lineNumber - 1].length + 1;\n            hasChanged = true;\n        }\n        else {\n            const maxCharacter = this._lines[lineNumber - 1].length + 1;\n            if (column < 1) {\n                column = 1;\n                hasChanged = true;\n            }\n            else if (column > maxCharacter) {\n                column = maxCharacter;\n                hasChanged = true;\n            }\n        }\n        if (!hasChanged) {\n            return position;\n        }\n        else {\n            return { lineNumber, column };\n        }\n    }\n}\n/**\n * @internal\n */\nexport class EditorSimpleWorker {\n    constructor(host, foreignModuleFactory) {\n        this._host = host;\n        this._models = Object.create(null);\n        this._foreignModuleFactory = foreignModuleFactory;\n        this._foreignModule = null;\n    }\n    dispose() {\n        this._models = Object.create(null);\n    }\n    _getModel(uri) {\n        return this._models[uri];\n    }\n    _getModels() {\n        const all = [];\n        Object.keys(this._models).forEach((key) => all.push(this._models[key]));\n        return all;\n    }\n    acceptNewModel(data) {\n        this._models[data.url] = new MirrorModel(URI.parse(data.url), data.lines, data.EOL, data.versionId);\n    }\n    acceptModelChanged(strURL, e) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        const model = this._models[strURL];\n        model.onEvents(e);\n    }\n    acceptRemovedModel(strURL) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        delete this._models[strURL];\n    }\n    computeUnicodeHighlights(url, options, range) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(url);\n            if (!model) {\n                return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };\n            }\n            return UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n        });\n    }\n    // ---- BEGIN diff --------------------------------------------------------------------------\n    computeDiff(originalUrl, modifiedUrl, options, algorithm) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const original = this._getModel(originalUrl);\n            const modified = this._getModel(modifiedUrl);\n            if (!original || !modified) {\n                return null;\n            }\n            return EditorSimpleWorker.computeDiff(original, modified, options, algorithm);\n        });\n    }\n    static computeDiff(originalTextModel, modifiedTextModel, options, algorithm) {\n        const diffAlgorithm = algorithm === 'advanced' ? linesDiffComputers.getDefault() : linesDiffComputers.getLegacy();\n        const originalLines = originalTextModel.getLinesContent();\n        const modifiedLines = modifiedTextModel.getLinesContent();\n        const result = diffAlgorithm.computeDiff(originalLines, modifiedLines, options);\n        const identical = (result.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel));\n        function getLineChanges(changes) {\n            return changes.map(m => {\n                var _a;\n                return ([m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, (_a = m.innerChanges) === null || _a === void 0 ? void 0 : _a.map(m => [\n                        m.originalRange.startLineNumber,\n                        m.originalRange.startColumn,\n                        m.originalRange.endLineNumber,\n                        m.originalRange.endColumn,\n                        m.modifiedRange.startLineNumber,\n                        m.modifiedRange.startColumn,\n                        m.modifiedRange.endLineNumber,\n                        m.modifiedRange.endColumn,\n                    ])]);\n            });\n        }\n        return {\n            identical,\n            quitEarly: result.hitTimeout,\n            changes: getLineChanges(result.changes),\n            moves: result.moves.map(m => ([\n                m.lineRangeMapping.original.startLineNumber,\n                m.lineRangeMapping.original.endLineNumberExclusive,\n                m.lineRangeMapping.modified.startLineNumber,\n                m.lineRangeMapping.modified.endLineNumberExclusive,\n                getLineChanges(m.changes)\n            ])),\n        };\n    }\n    static _modelsAreIdentical(original, modified) {\n        const originalLineCount = original.getLineCount();\n        const modifiedLineCount = modified.getLineCount();\n        if (originalLineCount !== modifiedLineCount) {\n            return false;\n        }\n        for (let line = 1; line <= originalLineCount; line++) {\n            const originalLine = original.getLineContent(line);\n            const modifiedLine = modified.getLineContent(line);\n            if (originalLine !== modifiedLine) {\n                return false;\n            }\n        }\n        return true;\n    }\n    computeMoreMinimalEdits(modelUrl, edits, pretty) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return edits;\n            }\n            const result = [];\n            let lastEol = undefined;\n            edits = edits.slice(0).sort((a, b) => {\n                if (a.range && b.range) {\n                    return Range.compareRangesUsingStarts(a.range, b.range);\n                }\n                // eol only changes should go to the end\n                const aRng = a.range ? 0 : 1;\n                const bRng = b.range ? 0 : 1;\n                return aRng - bRng;\n            });\n            // merge adjacent edits\n            let writeIndex = 0;\n            for (let readIndex = 1; readIndex < edits.length; readIndex++) {\n                if (Range.getEndPosition(edits[writeIndex].range).equals(Range.getStartPosition(edits[readIndex].range))) {\n                    edits[writeIndex].range = Range.fromPositions(Range.getStartPosition(edits[writeIndex].range), Range.getEndPosition(edits[readIndex].range));\n                    edits[writeIndex].text += edits[readIndex].text;\n                }\n                else {\n                    writeIndex++;\n                    edits[writeIndex] = edits[readIndex];\n                }\n            }\n            edits.length = writeIndex + 1;\n            for (let { range, text, eol } of edits) {\n                if (typeof eol === 'number') {\n                    lastEol = eol;\n                }\n                if (Range.isEmpty(range) && !text) {\n                    // empty change\n                    continue;\n                }\n                const original = model.getValueInRange(range);\n                text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n                if (original === text) {\n                    // noop\n                    continue;\n                }\n                // make sure diff won't take too long\n                if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n                    result.push({ range, text });\n                    continue;\n                }\n                // compute diff between original and edit.text\n                const changes = stringDiff(original, text, pretty);\n                const editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n                for (const change of changes) {\n                    const start = model.positionAt(editOffset + change.originalStart);\n                    const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n                    const newEdit = {\n                        text: text.substr(change.modifiedStart, change.modifiedLength),\n                        range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\n                    };\n                    if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n                        result.push(newEdit);\n                    }\n                }\n            }\n            if (typeof lastEol === 'number') {\n                result.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n            }\n            return result;\n        });\n    }\n    // ---- END minimal edits ---------------------------------------------------------------\n    computeLinks(modelUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return null;\n            }\n            return computeLinks(model);\n        });\n    }\n    // --- BEGIN default document colors -----------------------------------------------------------\n    computeDefaultDocumentColors(modelUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return null;\n            }\n            return computeDefaultDocumentColors(model);\n        });\n    }\n    textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const sw = new StopWatch();\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            const seen = new Set();\n            outer: for (const url of modelUrls) {\n                const model = this._getModel(url);\n                if (!model) {\n                    continue;\n                }\n                for (const word of model.words(wordDefRegExp)) {\n                    if (word === leadingWord || !isNaN(Number(word))) {\n                        continue;\n                    }\n                    seen.add(word);\n                    if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n                        break outer;\n                    }\n                }\n            }\n            return { words: Array.from(seen), duration: sw.elapsed() };\n        });\n    }\n    // ---- END suggest --------------------------------------------------------------------------\n    //#region -- word ranges --\n    computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return Object.create(null);\n            }\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            const result = Object.create(null);\n            for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n                const words = model.getLineWords(line, wordDefRegExp);\n                for (const word of words) {\n                    if (!isNaN(Number(word.word))) {\n                        continue;\n                    }\n                    let array = result[word.word];\n                    if (!array) {\n                        array = [];\n                        result[word.word] = array;\n                    }\n                    array.push({\n                        startLineNumber: line,\n                        startColumn: word.startColumn,\n                        endLineNumber: line,\n                        endColumn: word.endColumn\n                    });\n                }\n            }\n            return result;\n        });\n    }\n    //#endregion\n    navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return null;\n            }\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            if (range.startColumn === range.endColumn) {\n                range = {\n                    startLineNumber: range.startLineNumber,\n                    startColumn: range.startColumn,\n                    endLineNumber: range.endLineNumber,\n                    endColumn: range.endColumn + 1\n                };\n            }\n            const selectionText = model.getValueInRange(range);\n            const wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\n            if (!wordRange) {\n                return null;\n            }\n            const word = model.getValueInRange(wordRange);\n            const result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n            return result;\n        });\n    }\n    // ---- BEGIN foreign module support --------------------------------------------------------------------------\n    loadForeignModule(moduleId, createData, foreignHostMethods) {\n        const proxyMethodRequest = (method, args) => {\n            return this._host.fhr(method, args);\n        };\n        const foreignHost = createProxyObject(foreignHostMethods, proxyMethodRequest);\n        const ctx = {\n            host: foreignHost,\n            getMirrorModels: () => {\n                return this._getModels();\n            }\n        };\n        if (this._foreignModuleFactory) {\n            this._foreignModule = this._foreignModuleFactory(ctx, createData);\n            // static foreing module\n            return Promise.resolve(getAllMethodNames(this._foreignModule));\n        }\n        // ESM-comment-begin\n        // \t\treturn new Promise<any>((resolve, reject) => {\n        // \t\t\trequire([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {\n        // \t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\n        // \n        // \t\t\t\tresolve(getAllMethodNames(this._foreignModule));\n        // \n        // \t\t\t}, reject);\n        // \t\t});\n        // ESM-comment-end\n        // ESM-uncomment-begin\n        return Promise.reject(new Error(`Unexpected usage`));\n        // ESM-uncomment-end\n    }\n    // foreign method request\n    fmr(method, args) {\n        if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n}\n// ---- END diff --------------------------------------------------------------------------\n// ---- BEGIN minimal edits ---------------------------------------------------------------\nEditorSimpleWorker._diffLimit = 100000;\n// ---- BEGIN suggest --------------------------------------------------------------------------\nEditorSimpleWorker._suggestionsLimit = 10000;\n/**\n * Called on the worker side\n * @internal\n */\nexport function create(host) {\n    return new EditorSimpleWorker(host, null);\n}\nif (typeof importScripts === 'function') {\n    // Running in a web worker\n    globalThis.monaco = createMonacoBaseAPI();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const IEditorWorkerService = createDecorator('editorWorkerService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Schemas } from '../../../base/common/network.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { FileKind } from '../../../platform/files/common/files.js';\nconst fileIconDirectoryRegex = /(?:\\/|^)(?:([^\\/]+)\\/)?([^\\/]+)$/;\nexport function getIconClasses(modelService, languageService, resource, fileKind) {\n    // we always set these base classes even if we do not have a path\n    const classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n    if (resource) {\n        // Get the path and name of the resource. For data-URIs, we need to parse specially\n        let name;\n        if (resource.scheme === Schemas.data) {\n            const metadata = DataUri.parseMetaData(resource);\n            name = metadata.get(DataUri.META_DATA_LABEL);\n        }\n        else {\n            const match = resource.path.match(fileIconDirectoryRegex);\n            if (match) {\n                name = cssEscape(match[2].toLowerCase());\n                if (match[1]) {\n                    classes.push(`${cssEscape(match[1].toLowerCase())}-name-dir-icon`); // parent directory\n                }\n            }\n            else {\n                name = cssEscape(resource.authority.toLowerCase());\n            }\n        }\n        // Folders\n        if (fileKind === FileKind.FOLDER) {\n            classes.push(`${name}-name-folder-icon`);\n        }\n        // Files\n        else {\n            // Name & Extension(s)\n            if (name) {\n                classes.push(`${name}-name-file-icon`);\n                classes.push(`name-file-icon`); // extra segment to increase file-name score\n                // Avoid doing an explosive combination of extensions for very long filenames\n                // (most file systems do not allow files > 255 length) with lots of `.` characters\n                // https://github.com/microsoft/vscode/issues/116199\n                if (name.length <= 255) {\n                    const dotSegments = name.split('.');\n                    for (let i = 1; i < dotSegments.length; i++) {\n                        classes.push(`${dotSegments.slice(i).join('.')}-ext-file-icon`); // add each combination of all found extensions if more than one\n                    }\n                }\n                classes.push(`ext-file-icon`); // extra segment to increase file-ext score\n            }\n            // Detected Mode\n            const detectedLanguageId = detectLanguageId(modelService, languageService, resource);\n            if (detectedLanguageId) {\n                classes.push(`${cssEscape(detectedLanguageId)}-lang-file-icon`);\n            }\n        }\n    }\n    return classes;\n}\nfunction detectLanguageId(modelService, languageService, resource) {\n    if (!resource) {\n        return null; // we need a resource at least\n    }\n    let languageId = null;\n    // Data URI: check for encoded metadata\n    if (resource.scheme === Schemas.data) {\n        const metadata = DataUri.parseMetaData(resource);\n        const mime = metadata.get(DataUri.META_DATA_MIME);\n        if (mime) {\n            languageId = languageService.getLanguageIdByMimeType(mime);\n        }\n    }\n    // Any other URI: check for model if existing\n    else {\n        const model = modelService.getModel(resource);\n        if (model) {\n            languageId = model.getLanguageId();\n        }\n    }\n    // only take if the language id is specific (aka no just plain text)\n    if (languageId && languageId !== PLAINTEXT_LANGUAGE_ID) {\n        return languageId;\n    }\n    // otherwise fallback to path based detection\n    return languageService.guessLanguageIdByFilepathOrFirstLine(resource);\n}\nfunction cssEscape(str) {\n    return str.replace(/[\\11\\12\\14\\15\\40]/g, '/'); // HTML class names can not contain certain whitespace characters, use / instead, which doesn't exist in file names.\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { doHash } from '../../../base/common/hash.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { clamp, MovingAverage, SlidingWindowAverage } from '../../../base/common/numbers.js';\nimport { IEnvironmentService } from '../../../platform/environment/common/environment.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { matchesScheme } from '../../../platform/opener/common/opener.js';\nexport const ILanguageFeatureDebounceService = createDecorator('ILanguageFeatureDebounceService');\nvar IdentityHash;\n(function (IdentityHash) {\n    const _hashes = new WeakMap();\n    let pool = 0;\n    function of(obj) {\n        let value = _hashes.get(obj);\n        if (value === undefined) {\n            value = ++pool;\n            _hashes.set(obj, value);\n        }\n        return value;\n    }\n    IdentityHash.of = of;\n})(IdentityHash || (IdentityHash = {}));\nclass NullDebounceInformation {\n    constructor(_default) {\n        this._default = _default;\n    }\n    get(_model) {\n        return this._default;\n    }\n    update(_model, _value) {\n        return this._default;\n    }\n    default() {\n        return this._default;\n    }\n}\nclass FeatureDebounceInformation {\n    constructor(_logService, _name, _registry, _default, _min, _max) {\n        this._logService = _logService;\n        this._name = _name;\n        this._registry = _registry;\n        this._default = _default;\n        this._min = _min;\n        this._max = _max;\n        this._cache = new LRUCache(50, 0.7);\n    }\n    _key(model) {\n        return model.id + this._registry.all(model).reduce((hashVal, obj) => doHash(IdentityHash.of(obj), hashVal), 0);\n    }\n    get(model) {\n        const key = this._key(model);\n        const avg = this._cache.get(key);\n        return avg\n            ? clamp(avg.value, this._min, this._max)\n            : this.default();\n    }\n    update(model, value) {\n        const key = this._key(model);\n        let avg = this._cache.get(key);\n        if (!avg) {\n            avg = new SlidingWindowAverage(6);\n            this._cache.set(key, avg);\n        }\n        const newValue = clamp(avg.update(value), this._min, this._max);\n        if (!matchesScheme(model.uri, 'output')) {\n            this._logService.trace(`[DEBOUNCE: ${this._name}] for ${model.uri.toString()} is ${newValue}ms`);\n        }\n        return newValue;\n    }\n    _overall() {\n        const result = new MovingAverage();\n        for (const [, avg] of this._cache) {\n            result.update(avg.value);\n        }\n        return result.value;\n    }\n    default() {\n        const value = (this._overall() | 0) || this._default;\n        return clamp(value, this._min, this._max);\n    }\n}\nlet LanguageFeatureDebounceService = class LanguageFeatureDebounceService {\n    constructor(_logService, envService) {\n        this._logService = _logService;\n        this._data = new Map();\n        this._isDev = envService.isExtensionDevelopment || !envService.isBuilt;\n    }\n    for(feature, name, config) {\n        var _a, _b, _c;\n        const min = (_a = config === null || config === void 0 ? void 0 : config.min) !== null && _a !== void 0 ? _a : 50;\n        const max = (_b = config === null || config === void 0 ? void 0 : config.max) !== null && _b !== void 0 ? _b : Math.pow(min, 2);\n        const extra = (_c = config === null || config === void 0 ? void 0 : config.key) !== null && _c !== void 0 ? _c : undefined;\n        const key = `${IdentityHash.of(feature)},${min}${extra ? ',' + extra : ''}`;\n        let info = this._data.get(key);\n        if (!info) {\n            if (!this._isDev) {\n                this._logService.debug(`[DEBOUNCE: ${name}] is disabled in developed mode`);\n                info = new NullDebounceInformation(min * 1.5);\n            }\n            else {\n                info = new FeatureDebounceInformation(this._logService, name, feature, (this._overallAverage() | 0) || (min * 1.5), // default is overall default or derived from min-value\n                min, max);\n            }\n            this._data.set(key, info);\n        }\n        return info;\n    }\n    _overallAverage() {\n        // Average of all language features. Not a great value but an approximation\n        const result = new MovingAverage();\n        for (const info of this._data.values()) {\n            result.update(info.default());\n        }\n        return result.value;\n    }\n};\nLanguageFeatureDebounceService = __decorate([\n    __param(0, ILogService),\n    __param(1, IEnvironmentService)\n], LanguageFeatureDebounceService);\nexport { LanguageFeatureDebounceService };\nregisterSingleton(ILanguageFeatureDebounceService, LanguageFeatureDebounceService, 1 /* InstantiationType.Delayed */);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const ILanguageFeaturesService = createDecorator('ILanguageFeaturesService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LanguageFeatureRegistry } from '../languageFeatureRegistry.js';\nimport { ILanguageFeaturesService } from './languageFeatures.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nexport class LanguageFeaturesService {\n    constructor() {\n        this.referenceProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.renameProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.codeActionProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.definitionProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.typeDefinitionProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.declarationProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.implementationProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentSymbolProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.inlayHintsProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.colorProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.codeLensProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentFormattingEditProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentRangeFormattingEditProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.onTypeFormattingEditProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.signatureHelpProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.hoverProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentHighlightProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.selectionRangeProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.foldingRangeProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.linkProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.inlineCompletionsProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.completionProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.linkedEditingRangeProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentRangeSemanticTokensProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentSemanticTokensProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentOnDropEditProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentPasteEditProvider = new LanguageFeatureRegistry(this._score.bind(this));\n    }\n    _score(uri) {\n        var _a;\n        return (_a = this._notebookTypeResolver) === null || _a === void 0 ? void 0 : _a.call(this, uri);\n    }\n}\nregisterSingleton(ILanguageFeaturesService, LanguageFeaturesService, 1 /* InstantiationType.Delayed */);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { parse } from '../../../base/common/glob.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, posix } from '../../../base/common/path.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { startsWithUTF8BOM } from '../../../base/common/strings.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nlet registeredAssociations = [];\nlet nonUserRegisteredAssociations = [];\nlet userRegisteredAssociations = [];\n/**\n * Associate a language to the registry (platform).\n * * **NOTE**: This association will lose over associations registered using `registerConfiguredLanguageAssociation`.\n * * **NOTE**: Use `clearPlatformLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerPlatformLanguageAssociation(association, warnOnOverwrite = false) {\n    _registerLanguageAssociation(association, false, warnOnOverwrite);\n}\nfunction _registerLanguageAssociation(association, userConfigured, warnOnOverwrite) {\n    // Register\n    const associationItem = toLanguageAssociationItem(association, userConfigured);\n    registeredAssociations.push(associationItem);\n    if (!associationItem.userConfigured) {\n        nonUserRegisteredAssociations.push(associationItem);\n    }\n    else {\n        userRegisteredAssociations.push(associationItem);\n    }\n    // Check for conflicts unless this is a user configured association\n    if (warnOnOverwrite && !associationItem.userConfigured) {\n        registeredAssociations.forEach(a => {\n            if (a.mime === associationItem.mime || a.userConfigured) {\n                return; // same mime or userConfigured is ok\n            }\n            if (associationItem.extension && a.extension === associationItem.extension) {\n                console.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filename && a.filename === associationItem.filename) {\n                console.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n                console.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\n                console.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n        });\n    }\n}\nfunction toLanguageAssociationItem(association, userConfigured) {\n    return {\n        id: association.id,\n        mime: association.mime,\n        filename: association.filename,\n        extension: association.extension,\n        filepattern: association.filepattern,\n        firstline: association.firstline,\n        userConfigured: userConfigured,\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n        filepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n    };\n}\n/**\n * Clear language associations from the registry (platform).\n */\nexport function clearPlatformLanguageAssociations() {\n    registeredAssociations = registeredAssociations.filter(a => a.userConfigured);\n    nonUserRegisteredAssociations = [];\n}\n/**\n * @see `getMimeTypes`\n */\nexport function getLanguageIds(resource, firstLine) {\n    return getAssociations(resource, firstLine).map(item => item.id);\n}\nfunction getAssociations(resource, firstLine) {\n    let path;\n    if (resource) {\n        switch (resource.scheme) {\n            case Schemas.file:\n                path = resource.fsPath;\n                break;\n            case Schemas.data: {\n                const metadata = DataUri.parseMetaData(resource);\n                path = metadata.get(DataUri.META_DATA_LABEL);\n                break;\n            }\n            case Schemas.vscodeNotebookCell:\n                // File path not relevant for language detection of cell\n                path = undefined;\n                break;\n            default:\n                path = resource.path;\n        }\n    }\n    if (!path) {\n        return [{ id: 'unknown', mime: Mimes.unknown }];\n    }\n    path = path.toLowerCase();\n    const filename = basename(path);\n    // 1.) User configured mappings have highest priority\n    const configuredLanguage = getAssociationByPath(path, filename, userRegisteredAssociations);\n    if (configuredLanguage) {\n        return [configuredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 2.) Registered mappings have middle priority\n    const registeredLanguage = getAssociationByPath(path, filename, nonUserRegisteredAssociations);\n    if (registeredLanguage) {\n        return [registeredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 3.) Firstline has lowest priority\n    if (firstLine) {\n        const firstlineLanguage = getAssociationByFirstline(firstLine);\n        if (firstlineLanguage) {\n            return [firstlineLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n        }\n    }\n    return [{ id: 'unknown', mime: Mimes.unknown }];\n}\nfunction getAssociationByPath(path, filename, associations) {\n    var _a;\n    let filenameMatch = undefined;\n    let patternMatch = undefined;\n    let extensionMatch = undefined;\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n    for (let i = associations.length - 1; i >= 0; i--) {\n        const association = associations[i];\n        // First exact name match\n        if (filename === association.filenameLowercase) {\n            filenameMatch = association;\n            break; // take it!\n        }\n        // Longest pattern match\n        if (association.filepattern) {\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n                const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n                if ((_a = association.filepatternLowercase) === null || _a === void 0 ? void 0 : _a.call(association, target)) {\n                    patternMatch = association;\n                }\n            }\n        }\n        // Longest extension match\n        if (association.extension) {\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n                if (filename.endsWith(association.extensionLowercase)) {\n                    extensionMatch = association;\n                }\n            }\n        }\n    }\n    // 1.) Exact name match has second highest priority\n    if (filenameMatch) {\n        return filenameMatch;\n    }\n    // 2.) Match on pattern\n    if (patternMatch) {\n        return patternMatch;\n    }\n    // 3.) Match on extension comes next\n    if (extensionMatch) {\n        return extensionMatch;\n    }\n    return undefined;\n}\nfunction getAssociationByFirstline(firstLine) {\n    if (startsWithUTF8BOM(firstLine)) {\n        firstLine = firstLine.substr(1);\n    }\n    if (firstLine.length > 0) {\n        // We want to prioritize associations based on the order they are registered so that the last registered\n        // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n        for (let i = registeredAssociations.length - 1; i >= 0; i--) {\n            const association = registeredAssociations[i];\n            if (!association.firstline) {\n                continue;\n            }\n            const matches = firstLine.match(association.firstline);\n            if (matches && matches.length > 0) {\n                return association;\n            }\n        }\n    }\n    return undefined;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { regExpLeadsToEndlessLoop } from '../../../base/common/strings.js';\nimport { clearPlatformLanguageAssociations, getLanguageIds, registerPlatformLanguageAssociation } from './languagesAssociations.js';\nimport { ModesRegistry, PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst NULL_LANGUAGE_ID = 'vs.editor.nullLanguage';\nexport class LanguageIdCodec {\n    constructor() {\n        this._languageIdToLanguage = [];\n        this._languageToLanguageId = new Map();\n        this._register(NULL_LANGUAGE_ID, 0 /* LanguageId.Null */);\n        this._register(PLAINTEXT_LANGUAGE_ID, 1 /* LanguageId.PlainText */);\n        this._nextLanguageId = 2;\n    }\n    _register(language, languageId) {\n        this._languageIdToLanguage[languageId] = language;\n        this._languageToLanguageId.set(language, languageId);\n    }\n    register(language) {\n        if (this._languageToLanguageId.has(language)) {\n            return;\n        }\n        const languageId = this._nextLanguageId++;\n        this._register(language, languageId);\n    }\n    encodeLanguageId(languageId) {\n        return this._languageToLanguageId.get(languageId) || 0 /* LanguageId.Null */;\n    }\n    decodeLanguageId(languageId) {\n        return this._languageIdToLanguage[languageId] || NULL_LANGUAGE_ID;\n    }\n}\nexport class LanguagesRegistry extends Disposable {\n    constructor(useModesRegistry = true, warnOnOverwrite = false) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        LanguagesRegistry.instanceCount++;\n        this._warnOnOverwrite = warnOnOverwrite;\n        this.languageIdCodec = new LanguageIdCodec();\n        this._dynamicLanguages = [];\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        if (useModesRegistry) {\n            this._initializeFromRegistry();\n            this._register(ModesRegistry.onDidChangeLanguages((m) => {\n                this._initializeFromRegistry();\n            }));\n        }\n    }\n    dispose() {\n        LanguagesRegistry.instanceCount--;\n        super.dispose();\n    }\n    _initializeFromRegistry() {\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        clearPlatformLanguageAssociations();\n        const desc = [].concat(ModesRegistry.getLanguages()).concat(this._dynamicLanguages);\n        this._registerLanguages(desc);\n    }\n    _registerLanguages(desc) {\n        for (const d of desc) {\n            this._registerLanguage(d);\n        }\n        // Rebuild fast path maps\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        Object.keys(this._languages).forEach((langId) => {\n            const language = this._languages[langId];\n            if (language.name) {\n                this._nameMap[language.name] = language.identifier;\n            }\n            language.aliases.forEach((alias) => {\n                this._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n            });\n            language.mimetypes.forEach((mimetype) => {\n                this._mimeTypesMap[mimetype] = language.identifier;\n            });\n        });\n        Registry.as(Extensions.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds());\n        this._onDidChange.fire();\n    }\n    _registerLanguage(lang) {\n        const langId = lang.id;\n        let resolvedLanguage;\n        if (hasOwnProperty.call(this._languages, langId)) {\n            resolvedLanguage = this._languages[langId];\n        }\n        else {\n            this.languageIdCodec.register(langId);\n            resolvedLanguage = {\n                identifier: langId,\n                name: null,\n                mimetypes: [],\n                aliases: [],\n                extensions: [],\n                filenames: [],\n                configurationFiles: [],\n                icons: []\n            };\n            this._languages[langId] = resolvedLanguage;\n        }\n        this._mergeLanguage(resolvedLanguage, lang);\n    }\n    _mergeLanguage(resolvedLanguage, lang) {\n        const langId = lang.id;\n        let primaryMime = null;\n        if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n            resolvedLanguage.mimetypes.push(...lang.mimetypes);\n            primaryMime = lang.mimetypes[0];\n        }\n        if (!primaryMime) {\n            primaryMime = `text/x-${langId}`;\n            resolvedLanguage.mimetypes.push(primaryMime);\n        }\n        if (Array.isArray(lang.extensions)) {\n            if (lang.configuration) {\n                // insert first as this appears to be the 'primary' language definition\n                resolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\n            }\n            else {\n                resolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\n            }\n            for (const extension of lang.extensions) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, extension: extension }, this._warnOnOverwrite);\n            }\n        }\n        if (Array.isArray(lang.filenames)) {\n            for (const filename of lang.filenames) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filename: filename }, this._warnOnOverwrite);\n                resolvedLanguage.filenames.push(filename);\n            }\n        }\n        if (Array.isArray(lang.filenamePatterns)) {\n            for (const filenamePattern of lang.filenamePatterns) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filepattern: filenamePattern }, this._warnOnOverwrite);\n            }\n        }\n        if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n            let firstLineRegexStr = lang.firstLine;\n            if (firstLineRegexStr.charAt(0) !== '^') {\n                firstLineRegexStr = '^' + firstLineRegexStr;\n            }\n            try {\n                const firstLineRegex = new RegExp(firstLineRegexStr);\n                if (!regExpLeadsToEndlessLoop(firstLineRegex)) {\n                    registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, firstline: firstLineRegex }, this._warnOnOverwrite);\n                }\n            }\n            catch (err) {\n                // Most likely, the regex was bad\n                console.warn(`[${lang.id}]: Invalid regular expression \\`${firstLineRegexStr}\\`: `, err);\n            }\n        }\n        resolvedLanguage.aliases.push(langId);\n        let langAliases = null;\n        if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n            if (lang.aliases.length === 0) {\n                // signal that this language should not get a name\n                langAliases = [null];\n            }\n            else {\n                langAliases = lang.aliases;\n            }\n        }\n        if (langAliases !== null) {\n            for (const langAlias of langAliases) {\n                if (!langAlias || langAlias.length === 0) {\n                    continue;\n                }\n                resolvedLanguage.aliases.push(langAlias);\n            }\n        }\n        const containsAliases = (langAliases !== null && langAliases.length > 0);\n        if (containsAliases && langAliases[0] === null) {\n            // signal that this language should not get a name\n        }\n        else {\n            const bestName = (containsAliases ? langAliases[0] : null) || langId;\n            if (containsAliases || !resolvedLanguage.name) {\n                resolvedLanguage.name = bestName;\n            }\n        }\n        if (lang.configuration) {\n            resolvedLanguage.configurationFiles.push(lang.configuration);\n        }\n        if (lang.icon) {\n            resolvedLanguage.icons.push(lang.icon);\n        }\n    }\n    isRegisteredLanguageId(languageId) {\n        if (!languageId) {\n            return false;\n        }\n        return hasOwnProperty.call(this._languages, languageId);\n    }\n    getRegisteredLanguageIds() {\n        return Object.keys(this._languages);\n    }\n    getLanguageIdByLanguageName(languageName) {\n        const languageNameLower = languageName.toLowerCase();\n        if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n            return null;\n        }\n        return this._lowercaseNameMap[languageNameLower];\n    }\n    getLanguageIdByMimeType(mimeType) {\n        if (!mimeType) {\n            return null;\n        }\n        if (hasOwnProperty.call(this._mimeTypesMap, mimeType)) {\n            return this._mimeTypesMap[mimeType];\n        }\n        return null;\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n        if (!resource && !firstLine) {\n            return [];\n        }\n        return getLanguageIds(resource, firstLine);\n    }\n}\nLanguagesRegistry.instanceCount = 0;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\nimport { firstOrDefault } from '../../../base/common/arrays.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nexport class LanguageService extends Disposable {\n    constructor(warnOnOverwrite = false) {\n        super();\n        this._onDidRequestBasicLanguageFeatures = this._register(new Emitter());\n        this.onDidRequestBasicLanguageFeatures = this._onDidRequestBasicLanguageFeatures.event;\n        this._onDidRequestRichLanguageFeatures = this._register(new Emitter());\n        this.onDidRequestRichLanguageFeatures = this._onDidRequestRichLanguageFeatures.event;\n        this._onDidChange = this._register(new Emitter({ leakWarningThreshold: 200 /* https://github.com/microsoft/vscode/issues/119968 */ }));\n        this.onDidChange = this._onDidChange.event;\n        this._requestedBasicLanguages = new Set();\n        this._requestedRichLanguages = new Set();\n        LanguageService.instanceCount++;\n        this._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\n        this.languageIdCodec = this._registry.languageIdCodec;\n        this._register(this._registry.onDidChange(() => this._onDidChange.fire()));\n    }\n    dispose() {\n        LanguageService.instanceCount--;\n        super.dispose();\n    }\n    isRegisteredLanguageId(languageId) {\n        return this._registry.isRegisteredLanguageId(languageId);\n    }\n    getLanguageIdByLanguageName(languageName) {\n        return this._registry.getLanguageIdByLanguageName(languageName);\n    }\n    getLanguageIdByMimeType(mimeType) {\n        return this._registry.getLanguageIdByMimeType(mimeType);\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n        const languageIds = this._registry.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n        return firstOrDefault(languageIds, null);\n    }\n    createById(languageId) {\n        return new LanguageSelection(this.onDidChange, () => {\n            return this._createAndGetLanguageIdentifier(languageId);\n        });\n    }\n    createByFilepathOrFirstLine(resource, firstLine) {\n        return new LanguageSelection(this.onDidChange, () => {\n            const languageId = this.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n            return this._createAndGetLanguageIdentifier(languageId);\n        });\n    }\n    _createAndGetLanguageIdentifier(languageId) {\n        if (!languageId || !this.isRegisteredLanguageId(languageId)) {\n            // Fall back to plain text if language is unknown\n            languageId = PLAINTEXT_LANGUAGE_ID;\n        }\n        return languageId;\n    }\n    requestBasicLanguageFeatures(languageId) {\n        if (!this._requestedBasicLanguages.has(languageId)) {\n            this._requestedBasicLanguages.add(languageId);\n            this._onDidRequestBasicLanguageFeatures.fire(languageId);\n        }\n    }\n    requestRichLanguageFeatures(languageId) {\n        if (!this._requestedRichLanguages.has(languageId)) {\n            this._requestedRichLanguages.add(languageId);\n            // Ensure basic features are requested\n            this.requestBasicLanguageFeatures(languageId);\n            // Ensure tokenizers are created\n            TokenizationRegistry.getOrCreate(languageId);\n            this._onDidRequestRichLanguageFeatures.fire(languageId);\n        }\n    }\n}\nLanguageService.instanceCount = 0;\nclass LanguageSelection {\n    constructor(_onDidChangeLanguages, _selector) {\n        this._onDidChangeLanguages = _onDidChangeLanguages;\n        this._selector = _selector;\n        this._listener = null;\n        this._emitter = null;\n        this.languageId = this._selector();\n    }\n    _dispose() {\n        if (this._listener) {\n            this._listener.dispose();\n            this._listener = null;\n        }\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = null;\n        }\n    }\n    get onDidChange() {\n        if (!this._listener) {\n            this._listener = this._onDidChangeLanguages(() => this._evaluate());\n        }\n        if (!this._emitter) {\n            this._emitter = new Emitter({\n                onDidRemoveLastListener: () => {\n                    this._dispose();\n                }\n            });\n        }\n        return this._emitter.event;\n    }\n    _evaluate() {\n        var _a;\n        const languageId = this._selector();\n        if (languageId === this.languageId) {\n            // no change\n            return;\n        }\n        this.languageId = languageId;\n        (_a = this._emitter) === null || _a === void 0 ? void 0 : _a.fire(this.languageId);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const IMarkerDecorationsService = createDecorator('markerDecorationsService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { IMarkerService, MarkerSeverity } from '../../../platform/markers/common/markers.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { OverviewRulerLane, MinimapPosition } from '../model.js';\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\nimport { overviewRulerWarning, overviewRulerInfo, overviewRulerError } from '../core/editorColorRegistry.js';\nimport { IModelService } from './model.js';\nimport { Range } from '../core/range.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { minimapInfo, minimapWarning, minimapError } from '../../../platform/theme/common/colorRegistry.js';\nimport { BidirectionalMap, ResourceMap } from '../../../base/common/map.js';\nimport { diffSets } from '../../../base/common/collections.js';\nlet MarkerDecorationsService = class MarkerDecorationsService extends Disposable {\n    constructor(modelService, _markerService) {\n        super();\n        this._markerService = _markerService;\n        this._onDidChangeMarker = this._register(new Emitter());\n        this._markerDecorations = new ResourceMap();\n        modelService.getModels().forEach(model => this._onModelAdded(model));\n        this._register(modelService.onModelAdded(this._onModelAdded, this));\n        this._register(modelService.onModelRemoved(this._onModelRemoved, this));\n        this._register(this._markerService.onMarkerChanged(this._handleMarkerChange, this));\n    }\n    dispose() {\n        super.dispose();\n        this._markerDecorations.forEach(value => value.dispose());\n        this._markerDecorations.clear();\n    }\n    getMarker(uri, decoration) {\n        const markerDecorations = this._markerDecorations.get(uri);\n        return markerDecorations ? (markerDecorations.getMarker(decoration) || null) : null;\n    }\n    _handleMarkerChange(changedResources) {\n        changedResources.forEach((resource) => {\n            const markerDecorations = this._markerDecorations.get(resource);\n            if (markerDecorations) {\n                this._updateDecorations(markerDecorations);\n            }\n        });\n    }\n    _onModelAdded(model) {\n        const markerDecorations = new MarkerDecorations(model);\n        this._markerDecorations.set(model.uri, markerDecorations);\n        this._updateDecorations(markerDecorations);\n    }\n    _onModelRemoved(model) {\n        var _a;\n        const markerDecorations = this._markerDecorations.get(model.uri);\n        if (markerDecorations) {\n            markerDecorations.dispose();\n            this._markerDecorations.delete(model.uri);\n        }\n        // clean up markers for internal, transient models\n        if (model.uri.scheme === Schemas.inMemory\n            || model.uri.scheme === Schemas.internal\n            || model.uri.scheme === Schemas.vscode) {\n            (_a = this._markerService) === null || _a === void 0 ? void 0 : _a.read({ resource: model.uri }).map(marker => marker.owner).forEach(owner => this._markerService.remove(owner, [model.uri]));\n        }\n    }\n    _updateDecorations(markerDecorations) {\n        // Limit to the first 500 errors/warnings\n        const markers = this._markerService.read({ resource: markerDecorations.model.uri, take: 500 });\n        if (markerDecorations.update(markers)) {\n            this._onDidChangeMarker.fire(markerDecorations.model);\n        }\n    }\n};\nMarkerDecorationsService = __decorate([\n    __param(0, IModelService),\n    __param(1, IMarkerService)\n], MarkerDecorationsService);\nexport { MarkerDecorationsService };\nclass MarkerDecorations extends Disposable {\n    constructor(model) {\n        super();\n        this.model = model;\n        this._map = new BidirectionalMap();\n        this._register(toDisposable(() => {\n            this.model.deltaDecorations([...this._map.values()], []);\n            this._map.clear();\n        }));\n    }\n    update(markers) {\n        // We use the fact that marker instances are not recreated when different owners\n        // update. So we can compare references to find out what changed since the last update.\n        const { added, removed } = diffSets(new Set(this._map.keys()), new Set(markers));\n        if (added.length === 0 && removed.length === 0) {\n            return false;\n        }\n        const oldIds = removed.map(marker => this._map.get(marker));\n        const newDecorations = added.map(marker => {\n            return {\n                range: this._createDecorationRange(this.model, marker),\n                options: this._createDecorationOption(marker)\n            };\n        });\n        const ids = this.model.deltaDecorations(oldIds, newDecorations);\n        for (const removedMarker of removed) {\n            this._map.delete(removedMarker);\n        }\n        for (let index = 0; index < ids.length; index++) {\n            this._map.set(added[index], ids[index]);\n        }\n        return true;\n    }\n    getMarker(decoration) {\n        return this._map.getKey(decoration.id);\n    }\n    _createDecorationRange(model, rawMarker) {\n        let ret = Range.lift(rawMarker);\n        if (rawMarker.severity === MarkerSeverity.Hint && !this._hasMarkerTag(rawMarker, 1 /* MarkerTag.Unnecessary */) && !this._hasMarkerTag(rawMarker, 2 /* MarkerTag.Deprecated */)) {\n            // * never render hints on multiple lines\n            // * make enough space for three dots\n            ret = ret.setEndPosition(ret.startLineNumber, ret.startColumn + 2);\n        }\n        ret = model.validateRange(ret);\n        if (ret.isEmpty()) {\n            const maxColumn = model.getLineLastNonWhitespaceColumn(ret.startLineNumber) ||\n                model.getLineMaxColumn(ret.startLineNumber);\n            if (maxColumn === 1 || ret.endColumn >= maxColumn) {\n                // empty line or behind eol\n                // keep the range as is, it will be rendered 1ch wide\n                return ret;\n            }\n            const word = model.getWordAtPosition(ret.getStartPosition());\n            if (word) {\n                ret = new Range(ret.startLineNumber, word.startColumn, ret.endLineNumber, word.endColumn);\n            }\n        }\n        else if (rawMarker.endColumn === Number.MAX_VALUE && rawMarker.startColumn === 1 && ret.startLineNumber === ret.endLineNumber) {\n            const minColumn = model.getLineFirstNonWhitespaceColumn(rawMarker.startLineNumber);\n            if (minColumn < ret.endColumn) {\n                ret = new Range(ret.startLineNumber, minColumn, ret.endLineNumber, ret.endColumn);\n                rawMarker.startColumn = minColumn;\n            }\n        }\n        return ret;\n    }\n    _createDecorationOption(marker) {\n        let className;\n        let color = undefined;\n        let zIndex;\n        let inlineClassName = undefined;\n        let minimap;\n        switch (marker.severity) {\n            case MarkerSeverity.Hint:\n                if (this._hasMarkerTag(marker, 2 /* MarkerTag.Deprecated */)) {\n                    className = undefined;\n                }\n                else if (this._hasMarkerTag(marker, 1 /* MarkerTag.Unnecessary */)) {\n                    className = \"squiggly-unnecessary\" /* ClassName.EditorUnnecessaryDecoration */;\n                }\n                else {\n                    className = \"squiggly-hint\" /* ClassName.EditorHintDecoration */;\n                }\n                zIndex = 0;\n                break;\n            case MarkerSeverity.Info:\n                className = \"squiggly-info\" /* ClassName.EditorInfoDecoration */;\n                color = themeColorFromId(overviewRulerInfo);\n                zIndex = 10;\n                minimap = {\n                    color: themeColorFromId(minimapInfo),\n                    position: MinimapPosition.Inline\n                };\n                break;\n            case MarkerSeverity.Warning:\n                className = \"squiggly-warning\" /* ClassName.EditorWarningDecoration */;\n                color = themeColorFromId(overviewRulerWarning);\n                zIndex = 20;\n                minimap = {\n                    color: themeColorFromId(minimapWarning),\n                    position: MinimapPosition.Inline\n                };\n                break;\n            case MarkerSeverity.Error:\n            default:\n                className = \"squiggly-error\" /* ClassName.EditorErrorDecoration */;\n                color = themeColorFromId(overviewRulerError);\n                zIndex = 30;\n                minimap = {\n                    color: themeColorFromId(minimapError),\n                    position: MinimapPosition.Inline\n                };\n                break;\n        }\n        if (marker.tags) {\n            if (marker.tags.indexOf(1 /* MarkerTag.Unnecessary */) !== -1) {\n                inlineClassName = \"squiggly-inline-unnecessary\" /* ClassName.EditorUnnecessaryInlineDecoration */;\n            }\n            if (marker.tags.indexOf(2 /* MarkerTag.Deprecated */) !== -1) {\n                inlineClassName = \"squiggly-inline-deprecated\" /* ClassName.EditorDeprecatedInlineDecoration */;\n            }\n        }\n        return {\n            description: 'marker-decoration',\n            stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */,\n            className,\n            showIfCollapsed: true,\n            overviewRuler: {\n                color,\n                position: OverviewRulerLane.Right\n            },\n            minimap,\n            zIndex,\n            inlineClassName,\n        };\n    }\n    _hasMarkerTag(marker, tag) {\n        if (marker.tags) {\n            return marker.tags.indexOf(tag) >= 0;\n        }\n        return false;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const IModelService = createDecorator('modelService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar ModelService_1;\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { TextModel } from '../model/textModel.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { ITextResourcePropertiesService } from './textResourceConfiguration.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { StringSHA1 } from '../../../base/common/hash.js';\nimport { isEditStackElement } from '../model/editStack.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { equals } from '../../../base/common/objects.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nfunction MODEL_ID(resource) {\n    return resource.toString();\n}\nclass ModelData {\n    constructor(model, onWillDispose, onDidChangeLanguage) {\n        this.model = model;\n        this._modelEventListeners = new DisposableStore();\n        this.model = model;\n        this._modelEventListeners.add(model.onWillDispose(() => onWillDispose(model)));\n        this._modelEventListeners.add(model.onDidChangeLanguage((e) => onDidChangeLanguage(model, e)));\n    }\n    dispose() {\n        this._modelEventListeners.dispose();\n    }\n}\nconst DEFAULT_EOL = (platform.isLinux || platform.isMacintosh) ? 1 /* DefaultEndOfLine.LF */ : 2 /* DefaultEndOfLine.CRLF */;\nclass DisposedModelInfo {\n    constructor(uri, initialUndoRedoSnapshot, time, sharesUndoRedoStack, heapSize, sha1, versionId, alternativeVersionId) {\n        this.uri = uri;\n        this.initialUndoRedoSnapshot = initialUndoRedoSnapshot;\n        this.time = time;\n        this.sharesUndoRedoStack = sharesUndoRedoStack;\n        this.heapSize = heapSize;\n        this.sha1 = sha1;\n        this.versionId = versionId;\n        this.alternativeVersionId = alternativeVersionId;\n    }\n}\nlet ModelService = ModelService_1 = class ModelService extends Disposable {\n    constructor(_configurationService, _resourcePropertiesService, _undoRedoService, _languageService, _languageConfigurationService) {\n        super();\n        this._configurationService = _configurationService;\n        this._resourcePropertiesService = _resourcePropertiesService;\n        this._undoRedoService = _undoRedoService;\n        this._languageService = _languageService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._onModelAdded = this._register(new Emitter());\n        this.onModelAdded = this._onModelAdded.event;\n        this._onModelRemoved = this._register(new Emitter());\n        this.onModelRemoved = this._onModelRemoved.event;\n        this._onModelModeChanged = this._register(new Emitter());\n        this.onModelLanguageChanged = this._onModelModeChanged.event;\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n        this._models = {};\n        this._disposedModels = new Map();\n        this._disposedModelsHeapSize = 0;\n        this._register(this._configurationService.onDidChangeConfiguration(e => this._updateModelOptions(e)));\n        this._updateModelOptions(undefined);\n    }\n    static _readModelOptions(config, isForSimpleWidget) {\n        var _a;\n        let tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n        if (config.editor && typeof config.editor.tabSize !== 'undefined') {\n            const parsedTabSize = parseInt(config.editor.tabSize, 10);\n            if (!isNaN(parsedTabSize)) {\n                tabSize = parsedTabSize;\n            }\n            if (tabSize < 1) {\n                tabSize = 1;\n            }\n        }\n        let indentSize = 'tabSize';\n        if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n            const parsedIndentSize = parseInt(config.editor.indentSize, 10);\n            if (!isNaN(parsedIndentSize)) {\n                indentSize = Math.max(parsedIndentSize, 1);\n            }\n        }\n        let insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n        if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n            insertSpaces = (config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces));\n        }\n        let newDefaultEOL = DEFAULT_EOL;\n        const eol = config.eol;\n        if (eol === '\\r\\n') {\n            newDefaultEOL = 2 /* DefaultEndOfLine.CRLF */;\n        }\n        else if (eol === '\\n') {\n            newDefaultEOL = 1 /* DefaultEndOfLine.LF */;\n        }\n        let trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n        if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n            trimAutoWhitespace = (config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace));\n        }\n        let detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n        if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n            detectIndentation = (config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation));\n        }\n        let largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n        if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n            largeFileOptimizations = (config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations));\n        }\n        let bracketPairColorizationOptions = EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions;\n        if (((_a = config.editor) === null || _a === void 0 ? void 0 : _a.bracketPairColorization) && typeof config.editor.bracketPairColorization === 'object') {\n            bracketPairColorizationOptions = {\n                enabled: !!config.editor.bracketPairColorization.enabled,\n                independentColorPoolPerBracketType: !!config.editor.bracketPairColorization.independentColorPoolPerBracketType\n            };\n        }\n        return {\n            isForSimpleWidget: isForSimpleWidget,\n            tabSize: tabSize,\n            indentSize: indentSize,\n            insertSpaces: insertSpaces,\n            detectIndentation: detectIndentation,\n            defaultEOL: newDefaultEOL,\n            trimAutoWhitespace: trimAutoWhitespace,\n            largeFileOptimizations: largeFileOptimizations,\n            bracketPairColorizationOptions\n        };\n    }\n    _getEOL(resource, language) {\n        if (resource) {\n            return this._resourcePropertiesService.getEOL(resource, language);\n        }\n        const eol = this._configurationService.getValue('files.eol', { overrideIdentifier: language });\n        if (eol && typeof eol === 'string' && eol !== 'auto') {\n            return eol;\n        }\n        return platform.OS === 3 /* platform.OperatingSystem.Linux */ || platform.OS === 2 /* platform.OperatingSystem.Macintosh */ ? '\\n' : '\\r\\n';\n    }\n    _shouldRestoreUndoStack() {\n        const result = this._configurationService.getValue('files.restoreUndoStack');\n        if (typeof result === 'boolean') {\n            return result;\n        }\n        return true;\n    }\n    getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget) {\n        const language = (typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId);\n        let creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n        if (!creationOptions) {\n            const editor = this._configurationService.getValue('editor', { overrideIdentifier: language, resource });\n            const eol = this._getEOL(resource, language);\n            creationOptions = ModelService_1._readModelOptions({ editor, eol }, isForSimpleWidget);\n            this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n        }\n        return creationOptions;\n    }\n    _updateModelOptions(e) {\n        const oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n        // Update options on all models\n        const keys = Object.keys(this._models);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const modelId = keys[i];\n            const modelData = this._models[modelId];\n            const language = modelData.model.getLanguageId();\n            const uri = modelData.model.uri;\n            if (e && !e.affectsConfiguration('editor', { overrideIdentifier: language, resource: uri }) && !e.affectsConfiguration('files.eol', { overrideIdentifier: language, resource: uri })) {\n                continue; // perf: skip if this model is not affected by configuration change\n            }\n            const oldOptions = oldOptionsByLanguageAndResource[language + uri];\n            const newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n            ModelService_1._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n        }\n    }\n    static _setModelOptionsForModel(model, newOptions, currentOptions) {\n        if (currentOptions && currentOptions.defaultEOL !== newOptions.defaultEOL && model.getLineCount() === 1) {\n            model.setEOL(newOptions.defaultEOL === 1 /* DefaultEndOfLine.LF */ ? 0 /* EndOfLineSequence.LF */ : 1 /* EndOfLineSequence.CRLF */);\n        }\n        if (currentOptions\n            && (currentOptions.detectIndentation === newOptions.detectIndentation)\n            && (currentOptions.insertSpaces === newOptions.insertSpaces)\n            && (currentOptions.tabSize === newOptions.tabSize)\n            && (currentOptions.indentSize === newOptions.indentSize)\n            && (currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace)\n            && equals(currentOptions.bracketPairColorizationOptions, newOptions.bracketPairColorizationOptions)) {\n            // Same indent opts, no need to touch the model\n            return;\n        }\n        if (newOptions.detectIndentation) {\n            model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n            model.updateOptions({\n                trimAutoWhitespace: newOptions.trimAutoWhitespace,\n                bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n            });\n        }\n        else {\n            model.updateOptions({\n                insertSpaces: newOptions.insertSpaces,\n                tabSize: newOptions.tabSize,\n                indentSize: newOptions.indentSize,\n                trimAutoWhitespace: newOptions.trimAutoWhitespace,\n                bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n            });\n        }\n    }\n    // --- begin IModelService\n    _insertDisposedModel(disposedModelData) {\n        this._disposedModels.set(MODEL_ID(disposedModelData.uri), disposedModelData);\n        this._disposedModelsHeapSize += disposedModelData.heapSize;\n    }\n    _removeDisposedModel(resource) {\n        const disposedModelData = this._disposedModels.get(MODEL_ID(resource));\n        if (disposedModelData) {\n            this._disposedModelsHeapSize -= disposedModelData.heapSize;\n        }\n        this._disposedModels.delete(MODEL_ID(resource));\n        return disposedModelData;\n    }\n    _ensureDisposedModelsHeapSize(maxModelsHeapSize) {\n        if (this._disposedModelsHeapSize > maxModelsHeapSize) {\n            // we must remove some old undo stack elements to free up some memory\n            const disposedModels = [];\n            this._disposedModels.forEach(entry => {\n                if (!entry.sharesUndoRedoStack) {\n                    disposedModels.push(entry);\n                }\n            });\n            disposedModels.sort((a, b) => a.time - b.time);\n            while (disposedModels.length > 0 && this._disposedModelsHeapSize > maxModelsHeapSize) {\n                const disposedModel = disposedModels.shift();\n                this._removeDisposedModel(disposedModel.uri);\n                if (disposedModel.initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(disposedModel.initialUndoRedoSnapshot);\n                }\n            }\n        }\n    }\n    _createModelData(value, languageIdOrSelection, resource, isForSimpleWidget) {\n        // create & save the model\n        const options = this.getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget);\n        const model = new TextModel(value, languageIdOrSelection, options, resource, this._undoRedoService, this._languageService, this._languageConfigurationService);\n        if (resource && this._disposedModels.has(MODEL_ID(resource))) {\n            const disposedModelData = this._removeDisposedModel(resource);\n            const elements = this._undoRedoService.getElements(resource);\n            const sha1Computer = this._getSHA1Computer();\n            const sha1IsEqual = (sha1Computer.canComputeSHA1(model)\n                ? sha1Computer.computeSHA1(model) === disposedModelData.sha1\n                : false);\n            if (sha1IsEqual || disposedModelData.sharesUndoRedoStack) {\n                for (const element of elements.past) {\n                    if (isEditStackElement(element) && element.matchesResource(resource)) {\n                        element.setModel(model);\n                    }\n                }\n                for (const element of elements.future) {\n                    if (isEditStackElement(element) && element.matchesResource(resource)) {\n                        element.setModel(model);\n                    }\n                }\n                this._undoRedoService.setElementsValidFlag(resource, true, (element) => (isEditStackElement(element) && element.matchesResource(resource)));\n                if (sha1IsEqual) {\n                    model._overwriteVersionId(disposedModelData.versionId);\n                    model._overwriteAlternativeVersionId(disposedModelData.alternativeVersionId);\n                    model._overwriteInitialUndoRedoSnapshot(disposedModelData.initialUndoRedoSnapshot);\n                }\n            }\n            else {\n                if (disposedModelData.initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(disposedModelData.initialUndoRedoSnapshot);\n                }\n            }\n        }\n        const modelId = MODEL_ID(model.uri);\n        if (this._models[modelId]) {\n            // There already exists a model with this id => this is a programmer error\n            throw new Error('ModelService: Cannot add model because it already exists!');\n        }\n        const modelData = new ModelData(model, (model) => this._onWillDispose(model), (model, e) => this._onDidChangeLanguage(model, e));\n        this._models[modelId] = modelData;\n        return modelData;\n    }\n    createModel(value, languageSelection, resource, isForSimpleWidget = false) {\n        let modelData;\n        if (languageSelection) {\n            modelData = this._createModelData(value, languageSelection, resource, isForSimpleWidget);\n        }\n        else {\n            modelData = this._createModelData(value, PLAINTEXT_LANGUAGE_ID, resource, isForSimpleWidget);\n        }\n        this._onModelAdded.fire(modelData.model);\n        return modelData.model;\n    }\n    getModels() {\n        const ret = [];\n        const keys = Object.keys(this._models);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const modelId = keys[i];\n            ret.push(this._models[modelId].model);\n        }\n        return ret;\n    }\n    getModel(resource) {\n        const modelId = MODEL_ID(resource);\n        const modelData = this._models[modelId];\n        if (!modelData) {\n            return null;\n        }\n        return modelData.model;\n    }\n    // --- end IModelService\n    _schemaShouldMaintainUndoRedoElements(resource) {\n        return (resource.scheme === Schemas.file\n            || resource.scheme === Schemas.vscodeRemote\n            || resource.scheme === Schemas.vscodeUserData\n            || resource.scheme === Schemas.vscodeNotebookCell\n            || resource.scheme === 'fake-fs' // for tests\n        );\n    }\n    _onWillDispose(model) {\n        const modelId = MODEL_ID(model.uri);\n        const modelData = this._models[modelId];\n        const sharesUndoRedoStack = (this._undoRedoService.getUriComparisonKey(model.uri) !== model.uri.toString());\n        let maintainUndoRedoStack = false;\n        let heapSize = 0;\n        if (sharesUndoRedoStack || (this._shouldRestoreUndoStack() && this._schemaShouldMaintainUndoRedoElements(model.uri))) {\n            const elements = this._undoRedoService.getElements(model.uri);\n            if (elements.past.length > 0 || elements.future.length > 0) {\n                for (const element of elements.past) {\n                    if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n                        maintainUndoRedoStack = true;\n                        heapSize += element.heapSize(model.uri);\n                        element.setModel(model.uri); // remove reference from text buffer instance\n                    }\n                }\n                for (const element of elements.future) {\n                    if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n                        maintainUndoRedoStack = true;\n                        heapSize += element.heapSize(model.uri);\n                        element.setModel(model.uri); // remove reference from text buffer instance\n                    }\n                }\n            }\n        }\n        const maxMemory = ModelService_1.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;\n        const sha1Computer = this._getSHA1Computer();\n        if (!maintainUndoRedoStack) {\n            if (!sharesUndoRedoStack) {\n                const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n                if (initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n                }\n            }\n        }\n        else if (!sharesUndoRedoStack && (heapSize > maxMemory || !sha1Computer.canComputeSHA1(model))) {\n            // the undo stack for this file would never fit in the configured memory or the file is very large, so don't bother with it.\n            const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n            if (initialUndoRedoSnapshot !== null) {\n                this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n            }\n        }\n        else {\n            this._ensureDisposedModelsHeapSize(maxMemory - heapSize);\n            // We only invalidate the elements, but they remain in the undo-redo service.\n            this._undoRedoService.setElementsValidFlag(model.uri, false, (element) => (isEditStackElement(element) && element.matchesResource(model.uri)));\n            this._insertDisposedModel(new DisposedModelInfo(model.uri, modelData.model.getInitialUndoRedoSnapshot(), Date.now(), sharesUndoRedoStack, heapSize, sha1Computer.computeSHA1(model), model.getVersionId(), model.getAlternativeVersionId()));\n        }\n        delete this._models[modelId];\n        modelData.dispose();\n        // clean up cache\n        delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageId() + model.uri];\n        this._onModelRemoved.fire(model);\n    }\n    _onDidChangeLanguage(model, e) {\n        const oldLanguageId = e.oldLanguage;\n        const newLanguageId = model.getLanguageId();\n        const oldOptions = this.getCreationOptions(oldLanguageId, model.uri, model.isForSimpleWidget);\n        const newOptions = this.getCreationOptions(newLanguageId, model.uri, model.isForSimpleWidget);\n        ModelService_1._setModelOptionsForModel(model, newOptions, oldOptions);\n        this._onModelModeChanged.fire({ model, oldLanguageId: oldLanguageId });\n    }\n    _getSHA1Computer() {\n        return new DefaultModelSHA1Computer();\n    }\n};\nModelService.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024;\nModelService = ModelService_1 = __decorate([\n    __param(0, IConfigurationService),\n    __param(1, ITextResourcePropertiesService),\n    __param(2, IUndoRedoService),\n    __param(3, ILanguageService),\n    __param(4, ILanguageConfigurationService)\n], ModelService);\nexport { ModelService };\nexport class DefaultModelSHA1Computer {\n    canComputeSHA1(model) {\n        return (model.getValueLength() <= DefaultModelSHA1Computer.MAX_MODEL_SIZE);\n    }\n    computeSHA1(model) {\n        // compute the sha1\n        const shaComputer = new StringSHA1();\n        const snapshot = model.createSnapshot();\n        let text;\n        while ((text = snapshot.read())) {\n            shaComputer.update(text);\n        }\n        return shaComputer.digest();\n    }\n}\nDefaultModelSHA1Computer.MAX_MODEL_SIZE = 10 * 1024 * 1024; // takes 200ms to compute a sha1 on a 10MB model on a new machine\n","import { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const ITextModelService = createDecorator('textModelService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport * as platform from '../../../base/common/platform.js';\nfunction reverseEndianness(arr) {\n    for (let i = 0, len = arr.length; i < len; i += 4) {\n        // flip bytes 0<->3 and 1<->2\n        const b0 = arr[i + 0];\n        const b1 = arr[i + 1];\n        const b2 = arr[i + 2];\n        const b3 = arr[i + 3];\n        arr[i + 0] = b3;\n        arr[i + 1] = b2;\n        arr[i + 2] = b1;\n        arr[i + 3] = b0;\n    }\n}\nfunction toLittleEndianBuffer(arr) {\n    const uint8Arr = new Uint8Array(arr.buffer, arr.byteOffset, arr.length * 4);\n    if (!platform.isLittleEndian()) {\n        // the byte order must be changed\n        reverseEndianness(uint8Arr);\n    }\n    return VSBuffer.wrap(uint8Arr);\n}\nexport function encodeSemanticTokensDto(semanticTokens) {\n    const dest = new Uint32Array(encodeSemanticTokensDtoSize(semanticTokens));\n    let offset = 0;\n    dest[offset++] = semanticTokens.id;\n    if (semanticTokens.type === 'full') {\n        dest[offset++] = 1 /* EncodedSemanticTokensType.Full */;\n        dest[offset++] = semanticTokens.data.length;\n        dest.set(semanticTokens.data, offset);\n        offset += semanticTokens.data.length;\n    }\n    else {\n        dest[offset++] = 2 /* EncodedSemanticTokensType.Delta */;\n        dest[offset++] = semanticTokens.deltas.length;\n        for (const delta of semanticTokens.deltas) {\n            dest[offset++] = delta.start;\n            dest[offset++] = delta.deleteCount;\n            if (delta.data) {\n                dest[offset++] = delta.data.length;\n                dest.set(delta.data, offset);\n                offset += delta.data.length;\n            }\n            else {\n                dest[offset++] = 0;\n            }\n        }\n    }\n    return toLittleEndianBuffer(dest);\n}\nfunction encodeSemanticTokensDtoSize(semanticTokens) {\n    let result = 0;\n    result += (+1 // id\n        + 1 // type\n    );\n    if (semanticTokens.type === 'full') {\n        result += (+1 // data length\n            + semanticTokens.data.length);\n    }\n    else {\n        result += (+1 // delta count\n        );\n        result += (+1 // start\n            + 1 // deleteCount\n            + 1 // data length\n        ) * semanticTokens.deltas.length;\n        for (const delta of semanticTokens.deltas) {\n            if (delta.data) {\n                result += delta.data.length;\n            }\n        }\n    }\n    return result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { countEOL } from '../core/eolCounter.js';\n/**\n * Represents sparse tokens over a contiguous range of lines.\n */\nexport class SparseMultilineTokens {\n    static create(startLineNumber, tokens) {\n        return new SparseMultilineTokens(startLineNumber, new SparseMultilineTokensStorage(tokens));\n    }\n    /**\n     * (Inclusive) start line number for these tokens.\n     */\n    get startLineNumber() {\n        return this._startLineNumber;\n    }\n    /**\n     * (Inclusive) end line number for these tokens.\n     */\n    get endLineNumber() {\n        return this._endLineNumber;\n    }\n    constructor(startLineNumber, tokens) {\n        this._startLineNumber = startLineNumber;\n        this._tokens = tokens;\n        this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n    }\n    toString() {\n        return this._tokens.toString(this._startLineNumber);\n    }\n    _updateEndLineNumber() {\n        this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n    }\n    isEmpty() {\n        return this._tokens.isEmpty();\n    }\n    getLineTokens(lineNumber) {\n        if (this._startLineNumber <= lineNumber && lineNumber <= this._endLineNumber) {\n            return this._tokens.getLineTokens(lineNumber - this._startLineNumber);\n        }\n        return null;\n    }\n    getRange() {\n        const deltaRange = this._tokens.getRange();\n        if (!deltaRange) {\n            return deltaRange;\n        }\n        return new Range(this._startLineNumber + deltaRange.startLineNumber, deltaRange.startColumn, this._startLineNumber + deltaRange.endLineNumber, deltaRange.endColumn);\n    }\n    removeTokens(range) {\n        const startLineIndex = range.startLineNumber - this._startLineNumber;\n        const endLineIndex = range.endLineNumber - this._startLineNumber;\n        this._startLineNumber += this._tokens.removeTokens(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n        this._updateEndLineNumber();\n    }\n    split(range) {\n        // split tokens to two:\n        // a) all the tokens before `range`\n        // b) all the tokens after `range`\n        const startLineIndex = range.startLineNumber - this._startLineNumber;\n        const endLineIndex = range.endLineNumber - this._startLineNumber;\n        const [a, b, bDeltaLine] = this._tokens.split(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n        return [new SparseMultilineTokens(this._startLineNumber, a), new SparseMultilineTokens(this._startLineNumber + bDeltaLine, b)];\n    }\n    applyEdit(range, text) {\n        const [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n        this.acceptEdit(range, eolCount, firstLineLength, lastLineLength, text.length > 0 ? text.charCodeAt(0) : 0 /* CharCode.Null */);\n    }\n    acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        this._acceptDeleteRange(range);\n        this._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength, lastLineLength, firstCharCode);\n        this._updateEndLineNumber();\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n            // Nothing to delete\n            return;\n        }\n        const firstLineIndex = range.startLineNumber - this._startLineNumber;\n        const lastLineIndex = range.endLineNumber - this._startLineNumber;\n        if (lastLineIndex < 0) {\n            // this deletion occurs entirely before this block, so we only need to adjust line numbers\n            const deletedLinesCount = lastLineIndex - firstLineIndex;\n            this._startLineNumber -= deletedLinesCount;\n            return;\n        }\n        const tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n        if (firstLineIndex >= tokenMaxDeltaLine + 1) {\n            // this deletion occurs entirely after this block, so there is nothing to do\n            return;\n        }\n        if (firstLineIndex < 0 && lastLineIndex >= tokenMaxDeltaLine + 1) {\n            // this deletion completely encompasses this block\n            this._startLineNumber = 0;\n            this._tokens.clear();\n            return;\n        }\n        if (firstLineIndex < 0) {\n            const deletedBefore = -firstLineIndex;\n            this._startLineNumber -= deletedBefore;\n            this._tokens.acceptDeleteRange(range.startColumn - 1, 0, 0, lastLineIndex, range.endColumn - 1);\n        }\n        else {\n            this._tokens.acceptDeleteRange(0, firstLineIndex, range.startColumn - 1, lastLineIndex, range.endColumn - 1);\n        }\n    }\n    _acceptInsertText(position, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        if (eolCount === 0 && firstLineLength === 0) {\n            // Nothing to insert\n            return;\n        }\n        const lineIndex = position.lineNumber - this._startLineNumber;\n        if (lineIndex < 0) {\n            // this insertion occurs before this block, so we only need to adjust line numbers\n            this._startLineNumber += eolCount;\n            return;\n        }\n        const tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n        if (lineIndex >= tokenMaxDeltaLine + 1) {\n            // this insertion occurs after this block, so there is nothing to do\n            return;\n        }\n        this._tokens.acceptInsertText(lineIndex, position.column - 1, eolCount, firstLineLength, lastLineLength, firstCharCode);\n    }\n}\nclass SparseMultilineTokensStorage {\n    constructor(tokens) {\n        this._tokens = tokens;\n        this._tokenCount = tokens.length / 4;\n    }\n    toString(startLineNumber) {\n        const pieces = [];\n        for (let i = 0; i < this._tokenCount; i++) {\n            pieces.push(`(${this._getDeltaLine(i) + startLineNumber},${this._getStartCharacter(i)}-${this._getEndCharacter(i)})`);\n        }\n        return `[${pieces.join(',')}]`;\n    }\n    getMaxDeltaLine() {\n        const tokenCount = this._getTokenCount();\n        if (tokenCount === 0) {\n            return -1;\n        }\n        return this._getDeltaLine(tokenCount - 1);\n    }\n    getRange() {\n        const tokenCount = this._getTokenCount();\n        if (tokenCount === 0) {\n            return null;\n        }\n        const startChar = this._getStartCharacter(0);\n        const maxDeltaLine = this._getDeltaLine(tokenCount - 1);\n        const endChar = this._getEndCharacter(tokenCount - 1);\n        return new Range(0, startChar + 1, maxDeltaLine, endChar + 1);\n    }\n    _getTokenCount() {\n        return this._tokenCount;\n    }\n    _getDeltaLine(tokenIndex) {\n        return this._tokens[4 * tokenIndex];\n    }\n    _getStartCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 1];\n    }\n    _getEndCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 2];\n    }\n    isEmpty() {\n        return (this._getTokenCount() === 0);\n    }\n    getLineTokens(deltaLine) {\n        let low = 0;\n        let high = this._getTokenCount() - 1;\n        while (low < high) {\n            const mid = low + Math.floor((high - low) / 2);\n            const midDeltaLine = this._getDeltaLine(mid);\n            if (midDeltaLine < deltaLine) {\n                low = mid + 1;\n            }\n            else if (midDeltaLine > deltaLine) {\n                high = mid - 1;\n            }\n            else {\n                let min = mid;\n                while (min > low && this._getDeltaLine(min - 1) === deltaLine) {\n                    min--;\n                }\n                let max = mid;\n                while (max < high && this._getDeltaLine(max + 1) === deltaLine) {\n                    max++;\n                }\n                return new SparseLineTokens(this._tokens.subarray(4 * min, 4 * max + 4));\n            }\n        }\n        if (this._getDeltaLine(low) === deltaLine) {\n            return new SparseLineTokens(this._tokens.subarray(4 * low, 4 * low + 4));\n        }\n        return null;\n    }\n    clear() {\n        this._tokenCount = 0;\n    }\n    removeTokens(startDeltaLine, startChar, endDeltaLine, endChar) {\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        let newTokenCount = 0;\n        let hasDeletedTokens = false;\n        let firstDeltaLine = 0;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            const tokenDeltaLine = tokens[srcOffset];\n            const tokenStartCharacter = tokens[srcOffset + 1];\n            const tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))\n                && (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n                hasDeletedTokens = true;\n            }\n            else {\n                if (newTokenCount === 0) {\n                    firstDeltaLine = tokenDeltaLine;\n                }\n                if (hasDeletedTokens) {\n                    // must move the token to the left\n                    const destOffset = 4 * newTokenCount;\n                    tokens[destOffset] = tokenDeltaLine - firstDeltaLine;\n                    tokens[destOffset + 1] = tokenStartCharacter;\n                    tokens[destOffset + 2] = tokenEndCharacter;\n                    tokens[destOffset + 3] = tokenMetadata;\n                }\n                newTokenCount++;\n            }\n        }\n        this._tokenCount = newTokenCount;\n        return firstDeltaLine;\n    }\n    split(startDeltaLine, startChar, endDeltaLine, endChar) {\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        const aTokens = [];\n        const bTokens = [];\n        let destTokens = aTokens;\n        let destOffset = 0;\n        let destFirstDeltaLine = 0;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            const tokenDeltaLine = tokens[srcOffset];\n            const tokenStartCharacter = tokens[srcOffset + 1];\n            const tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))) {\n                if ((tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n                    // this token is touching the range\n                    continue;\n                }\n                else {\n                    // this token is after the range\n                    if (destTokens !== bTokens) {\n                        // this token is the first token after the range\n                        destTokens = bTokens;\n                        destOffset = 0;\n                        destFirstDeltaLine = tokenDeltaLine;\n                    }\n                }\n            }\n            destTokens[destOffset++] = tokenDeltaLine - destFirstDeltaLine;\n            destTokens[destOffset++] = tokenStartCharacter;\n            destTokens[destOffset++] = tokenEndCharacter;\n            destTokens[destOffset++] = tokenMetadata;\n        }\n        return [new SparseMultilineTokensStorage(new Uint32Array(aTokens)), new SparseMultilineTokensStorage(new Uint32Array(bTokens)), destFirstDeltaLine];\n    }\n    acceptDeleteRange(horizontalShiftForFirstLineTokens, startDeltaLine, startCharacter, endDeltaLine, endCharacter) {\n        // This is a bit complex, here are the cases I used to think about this:\n        //\n        // 1. The token starts before the deletion range\n        // 1a. The token is completely before the deletion range\n        //               -----------\n        //                          xxxxxxxxxxx\n        // 1b. The token starts before, the deletion range ends after the token\n        //               -----------\n        //                      xxxxxxxxxxx\n        // 1c. The token starts before, the deletion range ends precisely with the token\n        //               ---------------\n        //                      xxxxxxxx\n        // 1d. The token starts before, the deletion range is inside the token\n        //               ---------------\n        //                    xxxxx\n        //\n        // 2. The token starts at the same position with the deletion range\n        // 2a. The token starts at the same position, and ends inside the deletion range\n        //               -------\n        //               xxxxxxxxxxx\n        // 2b. The token starts at the same position, and ends at the same position as the deletion range\n        //               ----------\n        //               xxxxxxxxxx\n        // 2c. The token starts at the same position, and ends after the deletion range\n        //               -------------\n        //               xxxxxxx\n        //\n        // 3. The token starts inside the deletion range\n        // 3a. The token is inside the deletion range\n        //                -------\n        //             xxxxxxxxxxxxx\n        // 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n        //                ----------\n        //             xxxxxxxxxxxxx\n        // 3c. The token starts inside the deletion range, and ends after the deletion range\n        //                ------------\n        //             xxxxxxxxxxx\n        //\n        // 4. The token starts after the deletion range\n        //                  -----------\n        //          xxxxxxxx\n        //\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        const deletedLineCount = (endDeltaLine - startDeltaLine);\n        let newTokenCount = 0;\n        let hasDeletedTokens = false;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            let tokenDeltaLine = tokens[srcOffset];\n            let tokenStartCharacter = tokens[srcOffset + 1];\n            let tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if (tokenDeltaLine < startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter <= startCharacter)) {\n                // 1a. The token is completely before the deletion range\n                // => nothing to do\n                newTokenCount++;\n                continue;\n            }\n            else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter < startCharacter) {\n                // 1b, 1c, 1d\n                // => the token survives, but it needs to shrink\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 1d. The token starts before, the deletion range is inside the token\n                    // => the token shrinks by the deletion character count\n                    tokenEndCharacter -= (endCharacter - startCharacter);\n                }\n                else {\n                    // 1b. The token starts before, the deletion range ends after the token\n                    // 1c. The token starts before, the deletion range ends precisely with the token\n                    // => the token shrinks its ending to the deletion start\n                    tokenEndCharacter = startCharacter;\n                }\n            }\n            else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter === startCharacter) {\n                // 2a, 2b, 2c\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 2c. The token starts at the same position, and ends after the deletion range\n                    // => the token shrinks by the deletion character count\n                    tokenEndCharacter -= (endCharacter - startCharacter);\n                }\n                else {\n                    // 2a. The token starts at the same position, and ends inside the deletion range\n                    // 2b. The token starts at the same position, and ends at the same position as the deletion range\n                    // => the token is deleted\n                    hasDeletedTokens = true;\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter < endCharacter)) {\n                // 3a, 3b, 3c\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 3c. The token starts inside the deletion range, and ends after the deletion range\n                    // => the token moves to continue right after the deletion\n                    tokenDeltaLine = startDeltaLine;\n                    tokenStartCharacter = startCharacter;\n                    tokenEndCharacter = tokenStartCharacter + (tokenEndCharacter - endCharacter);\n                }\n                else {\n                    // 3a. The token is inside the deletion range\n                    // 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n                    // => the token is deleted\n                    hasDeletedTokens = true;\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine > endDeltaLine) {\n                // 4. (partial) The token starts after the deletion range, on a line below...\n                if (deletedLineCount === 0 && !hasDeletedTokens) {\n                    // early stop, there is no need to walk all the tokens and do nothing...\n                    newTokenCount = tokenCount;\n                    break;\n                }\n                tokenDeltaLine -= deletedLineCount;\n            }\n            else if (tokenDeltaLine === endDeltaLine && tokenStartCharacter >= endCharacter) {\n                // 4. (continued) The token starts after the deletion range, on the last line where a deletion occurs\n                if (horizontalShiftForFirstLineTokens && tokenDeltaLine === 0) {\n                    tokenStartCharacter += horizontalShiftForFirstLineTokens;\n                    tokenEndCharacter += horizontalShiftForFirstLineTokens;\n                }\n                tokenDeltaLine -= deletedLineCount;\n                tokenStartCharacter -= (endCharacter - startCharacter);\n                tokenEndCharacter -= (endCharacter - startCharacter);\n            }\n            else {\n                throw new Error(`Not possible!`);\n            }\n            const destOffset = 4 * newTokenCount;\n            tokens[destOffset] = tokenDeltaLine;\n            tokens[destOffset + 1] = tokenStartCharacter;\n            tokens[destOffset + 2] = tokenEndCharacter;\n            tokens[destOffset + 3] = tokenMetadata;\n            newTokenCount++;\n        }\n        this._tokenCount = newTokenCount;\n    }\n    acceptInsertText(deltaLine, character, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        // Here are the cases I used to think about this:\n        //\n        // 1. The token is completely before the insertion point\n        //            -----------   |\n        // 2. The token ends precisely at the insertion point\n        //            -----------|\n        // 3. The token contains the insertion point\n        //            -----|------\n        // 4. The token starts precisely at the insertion point\n        //            |-----------\n        // 5. The token is completely after the insertion point\n        //            |   -----------\n        //\n        const isInsertingPreciselyOneWordCharacter = (eolCount === 0\n            && firstLineLength === 1\n            && ((firstCharCode >= 48 /* CharCode.Digit0 */ && firstCharCode <= 57 /* CharCode.Digit9 */)\n                || (firstCharCode >= 65 /* CharCode.A */ && firstCharCode <= 90 /* CharCode.Z */)\n                || (firstCharCode >= 97 /* CharCode.a */ && firstCharCode <= 122 /* CharCode.z */)));\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        for (let i = 0; i < tokenCount; i++) {\n            const offset = 4 * i;\n            let tokenDeltaLine = tokens[offset];\n            let tokenStartCharacter = tokens[offset + 1];\n            let tokenEndCharacter = tokens[offset + 2];\n            if (tokenDeltaLine < deltaLine || (tokenDeltaLine === deltaLine && tokenEndCharacter < character)) {\n                // 1. The token is completely before the insertion point\n                // => nothing to do\n                continue;\n            }\n            else if (tokenDeltaLine === deltaLine && tokenEndCharacter === character) {\n                // 2. The token ends precisely at the insertion point\n                // => expand the end character only if inserting precisely one character that is a word character\n                if (isInsertingPreciselyOneWordCharacter) {\n                    tokenEndCharacter += 1;\n                }\n                else {\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine === deltaLine && tokenStartCharacter < character && character < tokenEndCharacter) {\n                // 3. The token contains the insertion point\n                if (eolCount === 0) {\n                    // => just expand the end character\n                    tokenEndCharacter += firstLineLength;\n                }\n                else {\n                    // => cut off the token\n                    tokenEndCharacter = character;\n                }\n            }\n            else {\n                // 4. or 5.\n                if (tokenDeltaLine === deltaLine && tokenStartCharacter === character) {\n                    // 4. The token starts precisely at the insertion point\n                    // => grow the token (by keeping its start constant) only if inserting precisely one character that is a word character\n                    // => otherwise behave as in case 5.\n                    if (isInsertingPreciselyOneWordCharacter) {\n                        continue;\n                    }\n                }\n                // => the token must move and keep its size constant\n                if (tokenDeltaLine === deltaLine) {\n                    tokenDeltaLine += eolCount;\n                    // this token is on the line where the insertion is taking place\n                    if (eolCount === 0) {\n                        tokenStartCharacter += firstLineLength;\n                        tokenEndCharacter += firstLineLength;\n                    }\n                    else {\n                        const tokenLength = tokenEndCharacter - tokenStartCharacter;\n                        tokenStartCharacter = lastLineLength + (tokenStartCharacter - character);\n                        tokenEndCharacter = tokenStartCharacter + tokenLength;\n                    }\n                }\n                else {\n                    tokenDeltaLine += eolCount;\n                }\n            }\n            tokens[offset] = tokenDeltaLine;\n            tokens[offset + 1] = tokenStartCharacter;\n            tokens[offset + 2] = tokenEndCharacter;\n        }\n    }\n}\nexport class SparseLineTokens {\n    constructor(tokens) {\n        this._tokens = tokens;\n    }\n    getCount() {\n        return this._tokens.length / 4;\n    }\n    getStartCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 1];\n    }\n    getEndCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 2];\n    }\n    getMetadata(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 3];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nimport { ILogService, LogLevel } from '../../../platform/log/common/log.js';\nimport { SparseMultilineTokens } from '../tokens/sparseMultilineTokens.js';\nimport { ILanguageService } from '../languages/language.js';\nlet SemanticTokensProviderStyling = class SemanticTokensProviderStyling {\n    constructor(_legend, _themeService, _languageService, _logService) {\n        this._legend = _legend;\n        this._themeService = _themeService;\n        this._languageService = _languageService;\n        this._logService = _logService;\n        this._hasWarnedOverlappingTokens = false;\n        this._hasWarnedInvalidLengthTokens = false;\n        this._hasWarnedInvalidEditStart = false;\n        this._hashTable = new HashTable();\n    }\n    getMetadata(tokenTypeIndex, tokenModifierSet, languageId) {\n        const encodedLanguageId = this._languageService.languageIdCodec.encodeLanguageId(languageId);\n        const entry = this._hashTable.get(tokenTypeIndex, tokenModifierSet, encodedLanguageId);\n        let metadata;\n        if (entry) {\n            metadata = entry.metadata;\n            if (this._logService.getLevel() === LogLevel.Trace) {\n                this._logService.trace(`SemanticTokensProviderStyling [CACHED] ${tokenTypeIndex} / ${tokenModifierSet}: foreground ${TokenMetadata.getForeground(metadata)}, fontStyle ${TokenMetadata.getFontStyle(metadata).toString(2)}`);\n            }\n        }\n        else {\n            let tokenType = this._legend.tokenTypes[tokenTypeIndex];\n            const tokenModifiers = [];\n            if (tokenType) {\n                let modifierSet = tokenModifierSet;\n                for (let modifierIndex = 0; modifierSet > 0 && modifierIndex < this._legend.tokenModifiers.length; modifierIndex++) {\n                    if (modifierSet & 1) {\n                        tokenModifiers.push(this._legend.tokenModifiers[modifierIndex]);\n                    }\n                    modifierSet = modifierSet >> 1;\n                }\n                if (modifierSet > 0 && this._logService.getLevel() === LogLevel.Trace) {\n                    this._logService.trace(`SemanticTokensProviderStyling: unknown token modifier index: ${tokenModifierSet.toString(2)} for legend: ${JSON.stringify(this._legend.tokenModifiers)}`);\n                    tokenModifiers.push('not-in-legend');\n                }\n                const tokenStyle = this._themeService.getColorTheme().getTokenStyleMetadata(tokenType, tokenModifiers, languageId);\n                if (typeof tokenStyle === 'undefined') {\n                    metadata = 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */;\n                }\n                else {\n                    metadata = 0;\n                    if (typeof tokenStyle.italic !== 'undefined') {\n                        const italicBit = (tokenStyle.italic ? 1 /* FontStyle.Italic */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= italicBit | 1 /* MetadataConsts.SEMANTIC_USE_ITALIC */;\n                    }\n                    if (typeof tokenStyle.bold !== 'undefined') {\n                        const boldBit = (tokenStyle.bold ? 2 /* FontStyle.Bold */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= boldBit | 2 /* MetadataConsts.SEMANTIC_USE_BOLD */;\n                    }\n                    if (typeof tokenStyle.underline !== 'undefined') {\n                        const underlineBit = (tokenStyle.underline ? 4 /* FontStyle.Underline */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= underlineBit | 4 /* MetadataConsts.SEMANTIC_USE_UNDERLINE */;\n                    }\n                    if (typeof tokenStyle.strikethrough !== 'undefined') {\n                        const strikethroughBit = (tokenStyle.strikethrough ? 8 /* FontStyle.Strikethrough */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= strikethroughBit | 8 /* MetadataConsts.SEMANTIC_USE_STRIKETHROUGH */;\n                    }\n                    if (tokenStyle.foreground) {\n                        const foregroundBits = (tokenStyle.foreground) << 15 /* MetadataConsts.FOREGROUND_OFFSET */;\n                        metadata |= foregroundBits | 16 /* MetadataConsts.SEMANTIC_USE_FOREGROUND */;\n                    }\n                    if (metadata === 0) {\n                        // Nothing!\n                        metadata = 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */;\n                    }\n                }\n            }\n            else {\n                if (this._logService.getLevel() === LogLevel.Trace) {\n                    this._logService.trace(`SemanticTokensProviderStyling: unknown token type index: ${tokenTypeIndex} for legend: ${JSON.stringify(this._legend.tokenTypes)}`);\n                }\n                metadata = 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */;\n                tokenType = 'not-in-legend';\n            }\n            this._hashTable.add(tokenTypeIndex, tokenModifierSet, encodedLanguageId, metadata);\n            if (this._logService.getLevel() === LogLevel.Trace) {\n                this._logService.trace(`SemanticTokensProviderStyling ${tokenTypeIndex} (${tokenType}) / ${tokenModifierSet} (${tokenModifiers.join(' ')}): foreground ${TokenMetadata.getForeground(metadata)}, fontStyle ${TokenMetadata.getFontStyle(metadata).toString(2)}`);\n            }\n        }\n        return metadata;\n    }\n    warnOverlappingSemanticTokens(lineNumber, startColumn) {\n        if (!this._hasWarnedOverlappingTokens) {\n            this._hasWarnedOverlappingTokens = true;\n            console.warn(`Overlapping semantic tokens detected at lineNumber ${lineNumber}, column ${startColumn}`);\n        }\n    }\n    warnInvalidLengthSemanticTokens(lineNumber, startColumn) {\n        if (!this._hasWarnedInvalidLengthTokens) {\n            this._hasWarnedInvalidLengthTokens = true;\n            console.warn(`Semantic token with invalid length detected at lineNumber ${lineNumber}, column ${startColumn}`);\n        }\n    }\n    warnInvalidEditStart(previousResultId, resultId, editIndex, editStart, maxExpectedStart) {\n        if (!this._hasWarnedInvalidEditStart) {\n            this._hasWarnedInvalidEditStart = true;\n            console.warn(`Invalid semantic tokens edit detected (previousResultId: ${previousResultId}, resultId: ${resultId}) at edit #${editIndex}: The provided start offset ${editStart} is outside the previous data (length ${maxExpectedStart}).`);\n        }\n    }\n};\nSemanticTokensProviderStyling = __decorate([\n    __param(1, IThemeService),\n    __param(2, ILanguageService),\n    __param(3, ILogService)\n], SemanticTokensProviderStyling);\nexport { SemanticTokensProviderStyling };\nexport function toMultilineTokens2(tokens, styling, languageId) {\n    const srcData = tokens.data;\n    const tokenCount = (tokens.data.length / 5) | 0;\n    const tokensPerArea = Math.max(Math.ceil(tokenCount / 1024 /* SemanticColoringConstants.DesiredMaxAreas */), 400 /* SemanticColoringConstants.DesiredTokensPerArea */);\n    const result = [];\n    let tokenIndex = 0;\n    let lastLineNumber = 1;\n    let lastStartCharacter = 0;\n    while (tokenIndex < tokenCount) {\n        const tokenStartIndex = tokenIndex;\n        let tokenEndIndex = Math.min(tokenStartIndex + tokensPerArea, tokenCount);\n        // Keep tokens on the same line in the same area...\n        if (tokenEndIndex < tokenCount) {\n            let smallTokenEndIndex = tokenEndIndex;\n            while (smallTokenEndIndex - 1 > tokenStartIndex && srcData[5 * smallTokenEndIndex] === 0) {\n                smallTokenEndIndex--;\n            }\n            if (smallTokenEndIndex - 1 === tokenStartIndex) {\n                // there are so many tokens on this line that our area would be empty, we must now go right\n                let bigTokenEndIndex = tokenEndIndex;\n                while (bigTokenEndIndex + 1 < tokenCount && srcData[5 * bigTokenEndIndex] === 0) {\n                    bigTokenEndIndex++;\n                }\n                tokenEndIndex = bigTokenEndIndex;\n            }\n            else {\n                tokenEndIndex = smallTokenEndIndex;\n            }\n        }\n        let destData = new Uint32Array((tokenEndIndex - tokenStartIndex) * 4);\n        let destOffset = 0;\n        let areaLine = 0;\n        let prevLineNumber = 0;\n        let prevEndCharacter = 0;\n        while (tokenIndex < tokenEndIndex) {\n            const srcOffset = 5 * tokenIndex;\n            const deltaLine = srcData[srcOffset];\n            const deltaCharacter = srcData[srcOffset + 1];\n            // Casting both `lineNumber`, `startCharacter` and `endCharacter` here to uint32 using `|0`\n            // to validate below with the actual values that will be inserted in the Uint32Array result\n            const lineNumber = (lastLineNumber + deltaLine) | 0;\n            const startCharacter = (deltaLine === 0 ? (lastStartCharacter + deltaCharacter) | 0 : deltaCharacter);\n            const length = srcData[srcOffset + 2];\n            const endCharacter = (startCharacter + length) | 0;\n            const tokenTypeIndex = srcData[srcOffset + 3];\n            const tokenModifierSet = srcData[srcOffset + 4];\n            if (endCharacter <= startCharacter) {\n                // this token is invalid (most likely a negative length casted to uint32)\n                styling.warnInvalidLengthSemanticTokens(lineNumber, startCharacter + 1);\n            }\n            else if (prevLineNumber === lineNumber && prevEndCharacter > startCharacter) {\n                // this token overlaps with the previous token\n                styling.warnOverlappingSemanticTokens(lineNumber, startCharacter + 1);\n            }\n            else {\n                const metadata = styling.getMetadata(tokenTypeIndex, tokenModifierSet, languageId);\n                if (metadata !== 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */) {\n                    if (areaLine === 0) {\n                        areaLine = lineNumber;\n                    }\n                    destData[destOffset] = lineNumber - areaLine;\n                    destData[destOffset + 1] = startCharacter;\n                    destData[destOffset + 2] = endCharacter;\n                    destData[destOffset + 3] = metadata;\n                    destOffset += 4;\n                    prevLineNumber = lineNumber;\n                    prevEndCharacter = endCharacter;\n                }\n            }\n            lastLineNumber = lineNumber;\n            lastStartCharacter = startCharacter;\n            tokenIndex++;\n        }\n        if (destOffset !== destData.length) {\n            destData = destData.subarray(0, destOffset);\n        }\n        const tokens = SparseMultilineTokens.create(areaLine, destData);\n        result.push(tokens);\n    }\n    return result;\n}\nclass HashTableEntry {\n    constructor(tokenTypeIndex, tokenModifierSet, languageId, metadata) {\n        this.tokenTypeIndex = tokenTypeIndex;\n        this.tokenModifierSet = tokenModifierSet;\n        this.languageId = languageId;\n        this.metadata = metadata;\n        this.next = null;\n    }\n}\nclass HashTable {\n    constructor() {\n        this._elementsCount = 0;\n        this._currentLengthIndex = 0;\n        this._currentLength = HashTable._SIZES[this._currentLengthIndex];\n        this._growCount = Math.round(this._currentLengthIndex + 1 < HashTable._SIZES.length ? 2 / 3 * this._currentLength : 0);\n        this._elements = [];\n        HashTable._nullOutEntries(this._elements, this._currentLength);\n    }\n    static _nullOutEntries(entries, length) {\n        for (let i = 0; i < length; i++) {\n            entries[i] = null;\n        }\n    }\n    _hash2(n1, n2) {\n        return (((n1 << 5) - n1) + n2) | 0; // n1 * 31 + n2, keep as int32\n    }\n    _hashFunc(tokenTypeIndex, tokenModifierSet, languageId) {\n        return this._hash2(this._hash2(tokenTypeIndex, tokenModifierSet), languageId) % this._currentLength;\n    }\n    get(tokenTypeIndex, tokenModifierSet, languageId) {\n        const hash = this._hashFunc(tokenTypeIndex, tokenModifierSet, languageId);\n        let p = this._elements[hash];\n        while (p) {\n            if (p.tokenTypeIndex === tokenTypeIndex && p.tokenModifierSet === tokenModifierSet && p.languageId === languageId) {\n                return p;\n            }\n            p = p.next;\n        }\n        return null;\n    }\n    add(tokenTypeIndex, tokenModifierSet, languageId, metadata) {\n        this._elementsCount++;\n        if (this._growCount !== 0 && this._elementsCount >= this._growCount) {\n            // expand!\n            const oldElements = this._elements;\n            this._currentLengthIndex++;\n            this._currentLength = HashTable._SIZES[this._currentLengthIndex];\n            this._growCount = Math.round(this._currentLengthIndex + 1 < HashTable._SIZES.length ? 2 / 3 * this._currentLength : 0);\n            this._elements = [];\n            HashTable._nullOutEntries(this._elements, this._currentLength);\n            for (const first of oldElements) {\n                let p = first;\n                while (p) {\n                    const oldNext = p.next;\n                    p.next = null;\n                    this._add(p);\n                    p = oldNext;\n                }\n            }\n        }\n        this._add(new HashTableEntry(tokenTypeIndex, tokenModifierSet, languageId, metadata));\n    }\n    _add(element) {\n        const hash = this._hashFunc(element.tokenTypeIndex, element.tokenModifierSet, element.languageId);\n        element.next = this._elements[hash];\n        this._elements[hash] = element;\n    }\n}\nHashTable._SIZES = [3, 7, 13, 31, 61, 127, 251, 509, 1021, 2039, 4093, 8191, 16381, 32749, 65521, 131071, 262139, 524287, 1048573, 2097143];\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const ISemanticTokensStylingService = createDecorator('semanticTokensStylingService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { SemanticTokensProviderStyling } from './semanticTokensProviderStyling.js';\nimport { ISemanticTokensStylingService } from './semanticTokensStyling.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nlet SemanticTokensStylingService = class SemanticTokensStylingService extends Disposable {\n    constructor(_themeService, _logService, _languageService) {\n        super();\n        this._themeService = _themeService;\n        this._logService = _logService;\n        this._languageService = _languageService;\n        this._caches = new WeakMap();\n        this._register(this._themeService.onDidColorThemeChange(() => {\n            this._caches = new WeakMap();\n        }));\n    }\n    getStyling(provider) {\n        if (!this._caches.has(provider)) {\n            this._caches.set(provider, new SemanticTokensProviderStyling(provider.getLegend(), this._themeService, this._languageService, this._logService));\n        }\n        return this._caches.get(provider);\n    }\n};\nSemanticTokensStylingService = __decorate([\n    __param(0, IThemeService),\n    __param(1, ILogService),\n    __param(2, ILanguageService)\n], SemanticTokensStylingService);\nexport { SemanticTokensStylingService };\nregisterSingleton(ISemanticTokensStylingService, SemanticTokensStylingService, 1 /* InstantiationType.Delayed */);\n","import { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const ITextResourceConfigurationService = createDecorator('textResourceConfigurationService');\nexport const ITextResourcePropertiesService = createDecorator('textResourcePropertiesService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class TreeViewsDnDService {\n    constructor() {\n        this._dragOperations = new Map();\n    }\n    removeDragOperationTransfer(uuid) {\n        if ((uuid && this._dragOperations.has(uuid))) {\n            const operation = this._dragOperations.get(uuid);\n            this._dragOperations.delete(uuid);\n            return operation;\n        }\n        return undefined;\n    }\n}\nexport class DraggedTreeItemsIdentifier {\n    constructor(identifier) {\n        this.identifier = identifier;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { TreeViewsDnDService } from './treeViewsDnd.js';\nexport const ITreeViewsDnDService = createDecorator('treeViewsDndService');\nregisterSingleton(ITreeViewsDnDService, TreeViewsDnDService, 1 /* InstantiationType.Delayed */);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\nimport { Searcher } from '../model/textModelSearch.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { assertNever } from '../../../base/common/assert.js';\nimport { DEFAULT_WORD_REGEXP, getWordAtText } from '../core/wordHelper.js';\nexport class UnicodeTextModelHighlighter {\n    static computeUnicodeHighlights(model, options, range) {\n        const startLine = range ? range.startLineNumber : 1;\n        const endLine = range ? range.endLineNumber : model.getLineCount();\n        const codePointHighlighter = new CodePointHighlighter(options);\n        const candidates = codePointHighlighter.getCandidateCodePoints();\n        let regex;\n        if (candidates === 'allNonBasicAscii') {\n            regex = new RegExp('[^\\\\t\\\\n\\\\r\\\\x20-\\\\x7E]', 'g');\n        }\n        else {\n            regex = new RegExp(`${buildRegExpCharClassExpr(Array.from(candidates))}`, 'g');\n        }\n        const searcher = new Searcher(null, regex);\n        const ranges = [];\n        let hasMore = false;\n        let m;\n        let ambiguousCharacterCount = 0;\n        let invisibleCharacterCount = 0;\n        let nonBasicAsciiCharacterCount = 0;\n        forLoop: for (let lineNumber = startLine, lineCount = endLine; lineNumber <= lineCount; lineNumber++) {\n            const lineContent = model.getLineContent(lineNumber);\n            const lineLength = lineContent.length;\n            // Reset regex to search from the beginning\n            searcher.reset(0);\n            do {\n                m = searcher.next(lineContent);\n                if (m) {\n                    let startIndex = m.index;\n                    let endIndex = m.index + m[0].length;\n                    // Extend range to entire code point\n                    if (startIndex > 0) {\n                        const charCodeBefore = lineContent.charCodeAt(startIndex - 1);\n                        if (strings.isHighSurrogate(charCodeBefore)) {\n                            startIndex--;\n                        }\n                    }\n                    if (endIndex + 1 < lineLength) {\n                        const charCodeBefore = lineContent.charCodeAt(endIndex - 1);\n                        if (strings.isHighSurrogate(charCodeBefore)) {\n                            endIndex++;\n                        }\n                    }\n                    const str = lineContent.substring(startIndex, endIndex);\n                    let word = getWordAtText(startIndex + 1, DEFAULT_WORD_REGEXP, lineContent, 0);\n                    if (word && word.endColumn <= startIndex + 1) {\n                        // The word does not include the problematic character, ignore the word\n                        word = null;\n                    }\n                    const highlightReason = codePointHighlighter.shouldHighlightNonBasicASCII(str, word ? word.word : null);\n                    if (highlightReason !== 0 /* SimpleHighlightReason.None */) {\n                        if (highlightReason === 3 /* SimpleHighlightReason.Ambiguous */) {\n                            ambiguousCharacterCount++;\n                        }\n                        else if (highlightReason === 2 /* SimpleHighlightReason.Invisible */) {\n                            invisibleCharacterCount++;\n                        }\n                        else if (highlightReason === 1 /* SimpleHighlightReason.NonBasicASCII */) {\n                            nonBasicAsciiCharacterCount++;\n                        }\n                        else {\n                            assertNever(highlightReason);\n                        }\n                        const MAX_RESULT_LENGTH = 1000;\n                        if (ranges.length >= MAX_RESULT_LENGTH) {\n                            hasMore = true;\n                            break forLoop;\n                        }\n                        ranges.push(new Range(lineNumber, startIndex + 1, lineNumber, endIndex + 1));\n                    }\n                }\n            } while (m);\n        }\n        return {\n            ranges,\n            hasMore,\n            ambiguousCharacterCount,\n            invisibleCharacterCount,\n            nonBasicAsciiCharacterCount\n        };\n    }\n    static computeUnicodeHighlightReason(char, options) {\n        const codePointHighlighter = new CodePointHighlighter(options);\n        const reason = codePointHighlighter.shouldHighlightNonBasicASCII(char, null);\n        switch (reason) {\n            case 0 /* SimpleHighlightReason.None */:\n                return null;\n            case 2 /* SimpleHighlightReason.Invisible */:\n                return { kind: 1 /* UnicodeHighlighterReasonKind.Invisible */ };\n            case 3 /* SimpleHighlightReason.Ambiguous */: {\n                const codePoint = char.codePointAt(0);\n                const primaryConfusable = codePointHighlighter.ambiguousCharacters.getPrimaryConfusable(codePoint);\n                const notAmbiguousInLocales = strings.AmbiguousCharacters.getLocales().filter((l) => !strings.AmbiguousCharacters.getInstance(new Set([...options.allowedLocales, l])).isAmbiguous(codePoint));\n                return { kind: 0 /* UnicodeHighlighterReasonKind.Ambiguous */, confusableWith: String.fromCodePoint(primaryConfusable), notAmbiguousInLocales };\n            }\n            case 1 /* SimpleHighlightReason.NonBasicASCII */:\n                return { kind: 2 /* UnicodeHighlighterReasonKind.NonBasicAscii */ };\n        }\n    }\n}\nfunction buildRegExpCharClassExpr(codePoints, flags) {\n    const src = `[${strings.escapeRegExpCharacters(codePoints.map((i) => String.fromCodePoint(i)).join(''))}]`;\n    return src;\n}\nclass CodePointHighlighter {\n    constructor(options) {\n        this.options = options;\n        this.allowedCodePoints = new Set(options.allowedCodePoints);\n        this.ambiguousCharacters = strings.AmbiguousCharacters.getInstance(new Set(options.allowedLocales));\n    }\n    getCandidateCodePoints() {\n        if (this.options.nonBasicASCII) {\n            return 'allNonBasicAscii';\n        }\n        const set = new Set();\n        if (this.options.invisibleCharacters) {\n            for (const cp of strings.InvisibleCharacters.codePoints) {\n                if (!isAllowedInvisibleCharacter(String.fromCodePoint(cp))) {\n                    set.add(cp);\n                }\n            }\n        }\n        if (this.options.ambiguousCharacters) {\n            for (const cp of this.ambiguousCharacters.getConfusableCodePoints()) {\n                set.add(cp);\n            }\n        }\n        for (const cp of this.allowedCodePoints) {\n            set.delete(cp);\n        }\n        return set;\n    }\n    shouldHighlightNonBasicASCII(character, wordContext) {\n        const codePoint = character.codePointAt(0);\n        if (this.allowedCodePoints.has(codePoint)) {\n            return 0 /* SimpleHighlightReason.None */;\n        }\n        if (this.options.nonBasicASCII) {\n            return 1 /* SimpleHighlightReason.NonBasicASCII */;\n        }\n        let hasBasicASCIICharacters = false;\n        let hasNonConfusableNonBasicAsciiCharacter = false;\n        if (wordContext) {\n            for (const char of wordContext) {\n                const codePoint = char.codePointAt(0);\n                const isBasicASCII = strings.isBasicASCII(char);\n                hasBasicASCIICharacters = hasBasicASCIICharacters || isBasicASCII;\n                if (!isBasicASCII &&\n                    !this.ambiguousCharacters.isAmbiguous(codePoint) &&\n                    !strings.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n                    hasNonConfusableNonBasicAsciiCharacter = true;\n                }\n            }\n        }\n        if (\n        /* Don't allow mixing weird looking characters with ASCII */ !hasBasicASCIICharacters &&\n            /* Is there an obviously weird looking character? */ hasNonConfusableNonBasicAsciiCharacter) {\n            return 0 /* SimpleHighlightReason.None */;\n        }\n        if (this.options.invisibleCharacters) {\n            // TODO check for emojis\n            if (!isAllowedInvisibleCharacter(character) && strings.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n                return 2 /* SimpleHighlightReason.Invisible */;\n            }\n        }\n        if (this.options.ambiguousCharacters) {\n            if (this.ambiguousCharacters.isAmbiguous(codePoint)) {\n                return 3 /* SimpleHighlightReason.Ambiguous */;\n            }\n        }\n        return 0 /* SimpleHighlightReason.None */;\n    }\n}\nfunction isAllowedInvisibleCharacter(character) {\n    return character === ' ' || character === '\\n' || character === '\\t';\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY.\nexport var AccessibilitySupport;\n(function (AccessibilitySupport) {\n    /**\n     * This should be the browser case where it is not known if a screen reader is attached or no.\n     */\n    AccessibilitySupport[AccessibilitySupport[\"Unknown\"] = 0] = \"Unknown\";\n    AccessibilitySupport[AccessibilitySupport[\"Disabled\"] = 1] = \"Disabled\";\n    AccessibilitySupport[AccessibilitySupport[\"Enabled\"] = 2] = \"Enabled\";\n})(AccessibilitySupport || (AccessibilitySupport = {}));\nexport var CodeActionTriggerType;\n(function (CodeActionTriggerType) {\n    CodeActionTriggerType[CodeActionTriggerType[\"Invoke\"] = 1] = \"Invoke\";\n    CodeActionTriggerType[CodeActionTriggerType[\"Auto\"] = 2] = \"Auto\";\n})(CodeActionTriggerType || (CodeActionTriggerType = {}));\nexport var CompletionItemInsertTextRule;\n(function (CompletionItemInsertTextRule) {\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"None\"] = 0] = \"None\";\n    /**\n     * Adjust whitespace/indentation of multiline insert texts to\n     * match the current line indentation.\n     */\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"KeepWhitespace\"] = 1] = \"KeepWhitespace\";\n    /**\n     * `insertText` is a snippet.\n     */\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"InsertAsSnippet\"] = 4] = \"InsertAsSnippet\";\n})(CompletionItemInsertTextRule || (CompletionItemInsertTextRule = {}));\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind[CompletionItemKind[\"Method\"] = 0] = \"Method\";\n    CompletionItemKind[CompletionItemKind[\"Function\"] = 1] = \"Function\";\n    CompletionItemKind[CompletionItemKind[\"Constructor\"] = 2] = \"Constructor\";\n    CompletionItemKind[CompletionItemKind[\"Field\"] = 3] = \"Field\";\n    CompletionItemKind[CompletionItemKind[\"Variable\"] = 4] = \"Variable\";\n    CompletionItemKind[CompletionItemKind[\"Class\"] = 5] = \"Class\";\n    CompletionItemKind[CompletionItemKind[\"Struct\"] = 6] = \"Struct\";\n    CompletionItemKind[CompletionItemKind[\"Interface\"] = 7] = \"Interface\";\n    CompletionItemKind[CompletionItemKind[\"Module\"] = 8] = \"Module\";\n    CompletionItemKind[CompletionItemKind[\"Property\"] = 9] = \"Property\";\n    CompletionItemKind[CompletionItemKind[\"Event\"] = 10] = \"Event\";\n    CompletionItemKind[CompletionItemKind[\"Operator\"] = 11] = \"Operator\";\n    CompletionItemKind[CompletionItemKind[\"Unit\"] = 12] = \"Unit\";\n    CompletionItemKind[CompletionItemKind[\"Value\"] = 13] = \"Value\";\n    CompletionItemKind[CompletionItemKind[\"Constant\"] = 14] = \"Constant\";\n    CompletionItemKind[CompletionItemKind[\"Enum\"] = 15] = \"Enum\";\n    CompletionItemKind[CompletionItemKind[\"EnumMember\"] = 16] = \"EnumMember\";\n    CompletionItemKind[CompletionItemKind[\"Keyword\"] = 17] = \"Keyword\";\n    CompletionItemKind[CompletionItemKind[\"Text\"] = 18] = \"Text\";\n    CompletionItemKind[CompletionItemKind[\"Color\"] = 19] = \"Color\";\n    CompletionItemKind[CompletionItemKind[\"File\"] = 20] = \"File\";\n    CompletionItemKind[CompletionItemKind[\"Reference\"] = 21] = \"Reference\";\n    CompletionItemKind[CompletionItemKind[\"Customcolor\"] = 22] = \"Customcolor\";\n    CompletionItemKind[CompletionItemKind[\"Folder\"] = 23] = \"Folder\";\n    CompletionItemKind[CompletionItemKind[\"TypeParameter\"] = 24] = \"TypeParameter\";\n    CompletionItemKind[CompletionItemKind[\"User\"] = 25] = \"User\";\n    CompletionItemKind[CompletionItemKind[\"Issue\"] = 26] = \"Issue\";\n    CompletionItemKind[CompletionItemKind[\"Snippet\"] = 27] = \"Snippet\";\n})(CompletionItemKind || (CompletionItemKind = {}));\nexport var CompletionItemTag;\n(function (CompletionItemTag) {\n    CompletionItemTag[CompletionItemTag[\"Deprecated\"] = 1] = \"Deprecated\";\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * How a suggest provider was triggered.\n */\nexport var CompletionTriggerKind;\n(function (CompletionTriggerKind) {\n    CompletionTriggerKind[CompletionTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n    CompletionTriggerKind[CompletionTriggerKind[\"TriggerCharacter\"] = 1] = \"TriggerCharacter\";\n    CompletionTriggerKind[CompletionTriggerKind[\"TriggerForIncompleteCompletions\"] = 2] = \"TriggerForIncompleteCompletions\";\n})(CompletionTriggerKind || (CompletionTriggerKind = {}));\n/**\n * A positioning preference for rendering content widgets.\n */\nexport var ContentWidgetPositionPreference;\n(function (ContentWidgetPositionPreference) {\n    /**\n     * Place the content widget exactly at a position\n     */\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"EXACT\"] = 0] = \"EXACT\";\n    /**\n     * Place the content widget above a position\n     */\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"ABOVE\"] = 1] = \"ABOVE\";\n    /**\n     * Place the content widget below a position\n     */\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"BELOW\"] = 2] = \"BELOW\";\n})(ContentWidgetPositionPreference || (ContentWidgetPositionPreference = {}));\n/**\n * Describes the reason the cursor has changed its position.\n */\nexport var CursorChangeReason;\n(function (CursorChangeReason) {\n    /**\n     * Unknown or not set.\n     */\n    CursorChangeReason[CursorChangeReason[\"NotSet\"] = 0] = \"NotSet\";\n    /**\n     * A `model.setValue()` was called.\n     */\n    CursorChangeReason[CursorChangeReason[\"ContentFlush\"] = 1] = \"ContentFlush\";\n    /**\n     * The `model` has been changed outside of this cursor and the cursor recovers its position from associated markers.\n     */\n    CursorChangeReason[CursorChangeReason[\"RecoverFromMarkers\"] = 2] = \"RecoverFromMarkers\";\n    /**\n     * There was an explicit user gesture.\n     */\n    CursorChangeReason[CursorChangeReason[\"Explicit\"] = 3] = \"Explicit\";\n    /**\n     * There was a Paste.\n     */\n    CursorChangeReason[CursorChangeReason[\"Paste\"] = 4] = \"Paste\";\n    /**\n     * There was an Undo.\n     */\n    CursorChangeReason[CursorChangeReason[\"Undo\"] = 5] = \"Undo\";\n    /**\n     * There was a Redo.\n     */\n    CursorChangeReason[CursorChangeReason[\"Redo\"] = 6] = \"Redo\";\n})(CursorChangeReason || (CursorChangeReason = {}));\n/**\n * The default end of line to use when instantiating models.\n */\nexport var DefaultEndOfLine;\n(function (DefaultEndOfLine) {\n    /**\n     * Use line feed (\\n) as the end of line character.\n     */\n    DefaultEndOfLine[DefaultEndOfLine[\"LF\"] = 1] = \"LF\";\n    /**\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\n     */\n    DefaultEndOfLine[DefaultEndOfLine[\"CRLF\"] = 2] = \"CRLF\";\n})(DefaultEndOfLine || (DefaultEndOfLine = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Text\"] = 0] = \"Text\";\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Read\"] = 1] = \"Read\";\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Write\"] = 2] = \"Write\";\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * Configuration options for auto indentation in the editor\n */\nexport var EditorAutoIndentStrategy;\n(function (EditorAutoIndentStrategy) {\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"None\"] = 0] = \"None\";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Keep\"] = 1] = \"Keep\";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Brackets\"] = 2] = \"Brackets\";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Advanced\"] = 3] = \"Advanced\";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Full\"] = 4] = \"Full\";\n})(EditorAutoIndentStrategy || (EditorAutoIndentStrategy = {}));\nexport var EditorOption;\n(function (EditorOption) {\n    EditorOption[EditorOption[\"acceptSuggestionOnCommitCharacter\"] = 0] = \"acceptSuggestionOnCommitCharacter\";\n    EditorOption[EditorOption[\"acceptSuggestionOnEnter\"] = 1] = \"acceptSuggestionOnEnter\";\n    EditorOption[EditorOption[\"accessibilitySupport\"] = 2] = \"accessibilitySupport\";\n    EditorOption[EditorOption[\"accessibilityPageSize\"] = 3] = \"accessibilityPageSize\";\n    EditorOption[EditorOption[\"ariaLabel\"] = 4] = \"ariaLabel\";\n    EditorOption[EditorOption[\"ariaRequired\"] = 5] = \"ariaRequired\";\n    EditorOption[EditorOption[\"autoClosingBrackets\"] = 6] = \"autoClosingBrackets\";\n    EditorOption[EditorOption[\"autoClosingComments\"] = 7] = \"autoClosingComments\";\n    EditorOption[EditorOption[\"screenReaderAnnounceInlineSuggestion\"] = 8] = \"screenReaderAnnounceInlineSuggestion\";\n    EditorOption[EditorOption[\"autoClosingDelete\"] = 9] = \"autoClosingDelete\";\n    EditorOption[EditorOption[\"autoClosingOvertype\"] = 10] = \"autoClosingOvertype\";\n    EditorOption[EditorOption[\"autoClosingQuotes\"] = 11] = \"autoClosingQuotes\";\n    EditorOption[EditorOption[\"autoIndent\"] = 12] = \"autoIndent\";\n    EditorOption[EditorOption[\"automaticLayout\"] = 13] = \"automaticLayout\";\n    EditorOption[EditorOption[\"autoSurround\"] = 14] = \"autoSurround\";\n    EditorOption[EditorOption[\"bracketPairColorization\"] = 15] = \"bracketPairColorization\";\n    EditorOption[EditorOption[\"guides\"] = 16] = \"guides\";\n    EditorOption[EditorOption[\"codeLens\"] = 17] = \"codeLens\";\n    EditorOption[EditorOption[\"codeLensFontFamily\"] = 18] = \"codeLensFontFamily\";\n    EditorOption[EditorOption[\"codeLensFontSize\"] = 19] = \"codeLensFontSize\";\n    EditorOption[EditorOption[\"colorDecorators\"] = 20] = \"colorDecorators\";\n    EditorOption[EditorOption[\"colorDecoratorsLimit\"] = 21] = \"colorDecoratorsLimit\";\n    EditorOption[EditorOption[\"columnSelection\"] = 22] = \"columnSelection\";\n    EditorOption[EditorOption[\"comments\"] = 23] = \"comments\";\n    EditorOption[EditorOption[\"contextmenu\"] = 24] = \"contextmenu\";\n    EditorOption[EditorOption[\"copyWithSyntaxHighlighting\"] = 25] = \"copyWithSyntaxHighlighting\";\n    EditorOption[EditorOption[\"cursorBlinking\"] = 26] = \"cursorBlinking\";\n    EditorOption[EditorOption[\"cursorSmoothCaretAnimation\"] = 27] = \"cursorSmoothCaretAnimation\";\n    EditorOption[EditorOption[\"cursorStyle\"] = 28] = \"cursorStyle\";\n    EditorOption[EditorOption[\"cursorSurroundingLines\"] = 29] = \"cursorSurroundingLines\";\n    EditorOption[EditorOption[\"cursorSurroundingLinesStyle\"] = 30] = \"cursorSurroundingLinesStyle\";\n    EditorOption[EditorOption[\"cursorWidth\"] = 31] = \"cursorWidth\";\n    EditorOption[EditorOption[\"disableLayerHinting\"] = 32] = \"disableLayerHinting\";\n    EditorOption[EditorOption[\"disableMonospaceOptimizations\"] = 33] = \"disableMonospaceOptimizations\";\n    EditorOption[EditorOption[\"domReadOnly\"] = 34] = \"domReadOnly\";\n    EditorOption[EditorOption[\"dragAndDrop\"] = 35] = \"dragAndDrop\";\n    EditorOption[EditorOption[\"dropIntoEditor\"] = 36] = \"dropIntoEditor\";\n    EditorOption[EditorOption[\"emptySelectionClipboard\"] = 37] = \"emptySelectionClipboard\";\n    EditorOption[EditorOption[\"experimentalWhitespaceRendering\"] = 38] = \"experimentalWhitespaceRendering\";\n    EditorOption[EditorOption[\"extraEditorClassName\"] = 39] = \"extraEditorClassName\";\n    EditorOption[EditorOption[\"fastScrollSensitivity\"] = 40] = \"fastScrollSensitivity\";\n    EditorOption[EditorOption[\"find\"] = 41] = \"find\";\n    EditorOption[EditorOption[\"fixedOverflowWidgets\"] = 42] = \"fixedOverflowWidgets\";\n    EditorOption[EditorOption[\"folding\"] = 43] = \"folding\";\n    EditorOption[EditorOption[\"foldingStrategy\"] = 44] = \"foldingStrategy\";\n    EditorOption[EditorOption[\"foldingHighlight\"] = 45] = \"foldingHighlight\";\n    EditorOption[EditorOption[\"foldingImportsByDefault\"] = 46] = \"foldingImportsByDefault\";\n    EditorOption[EditorOption[\"foldingMaximumRegions\"] = 47] = \"foldingMaximumRegions\";\n    EditorOption[EditorOption[\"unfoldOnClickAfterEndOfLine\"] = 48] = \"unfoldOnClickAfterEndOfLine\";\n    EditorOption[EditorOption[\"fontFamily\"] = 49] = \"fontFamily\";\n    EditorOption[EditorOption[\"fontInfo\"] = 50] = \"fontInfo\";\n    EditorOption[EditorOption[\"fontLigatures\"] = 51] = \"fontLigatures\";\n    EditorOption[EditorOption[\"fontSize\"] = 52] = \"fontSize\";\n    EditorOption[EditorOption[\"fontWeight\"] = 53] = \"fontWeight\";\n    EditorOption[EditorOption[\"fontVariations\"] = 54] = \"fontVariations\";\n    EditorOption[EditorOption[\"formatOnPaste\"] = 55] = \"formatOnPaste\";\n    EditorOption[EditorOption[\"formatOnType\"] = 56] = \"formatOnType\";\n    EditorOption[EditorOption[\"glyphMargin\"] = 57] = \"glyphMargin\";\n    EditorOption[EditorOption[\"gotoLocation\"] = 58] = \"gotoLocation\";\n    EditorOption[EditorOption[\"hideCursorInOverviewRuler\"] = 59] = \"hideCursorInOverviewRuler\";\n    EditorOption[EditorOption[\"hover\"] = 60] = \"hover\";\n    EditorOption[EditorOption[\"inDiffEditor\"] = 61] = \"inDiffEditor\";\n    EditorOption[EditorOption[\"inlineSuggest\"] = 62] = \"inlineSuggest\";\n    EditorOption[EditorOption[\"letterSpacing\"] = 63] = \"letterSpacing\";\n    EditorOption[EditorOption[\"lightbulb\"] = 64] = \"lightbulb\";\n    EditorOption[EditorOption[\"lineDecorationsWidth\"] = 65] = \"lineDecorationsWidth\";\n    EditorOption[EditorOption[\"lineHeight\"] = 66] = \"lineHeight\";\n    EditorOption[EditorOption[\"lineNumbers\"] = 67] = \"lineNumbers\";\n    EditorOption[EditorOption[\"lineNumbersMinChars\"] = 68] = \"lineNumbersMinChars\";\n    EditorOption[EditorOption[\"linkedEditing\"] = 69] = \"linkedEditing\";\n    EditorOption[EditorOption[\"links\"] = 70] = \"links\";\n    EditorOption[EditorOption[\"matchBrackets\"] = 71] = \"matchBrackets\";\n    EditorOption[EditorOption[\"minimap\"] = 72] = \"minimap\";\n    EditorOption[EditorOption[\"mouseStyle\"] = 73] = \"mouseStyle\";\n    EditorOption[EditorOption[\"mouseWheelScrollSensitivity\"] = 74] = \"mouseWheelScrollSensitivity\";\n    EditorOption[EditorOption[\"mouseWheelZoom\"] = 75] = \"mouseWheelZoom\";\n    EditorOption[EditorOption[\"multiCursorMergeOverlapping\"] = 76] = \"multiCursorMergeOverlapping\";\n    EditorOption[EditorOption[\"multiCursorModifier\"] = 77] = \"multiCursorModifier\";\n    EditorOption[EditorOption[\"multiCursorPaste\"] = 78] = \"multiCursorPaste\";\n    EditorOption[EditorOption[\"multiCursorLimit\"] = 79] = \"multiCursorLimit\";\n    EditorOption[EditorOption[\"occurrencesHighlight\"] = 80] = \"occurrencesHighlight\";\n    EditorOption[EditorOption[\"overviewRulerBorder\"] = 81] = \"overviewRulerBorder\";\n    EditorOption[EditorOption[\"overviewRulerLanes\"] = 82] = \"overviewRulerLanes\";\n    EditorOption[EditorOption[\"padding\"] = 83] = \"padding\";\n    EditorOption[EditorOption[\"pasteAs\"] = 84] = \"pasteAs\";\n    EditorOption[EditorOption[\"parameterHints\"] = 85] = \"parameterHints\";\n    EditorOption[EditorOption[\"peekWidgetDefaultFocus\"] = 86] = \"peekWidgetDefaultFocus\";\n    EditorOption[EditorOption[\"definitionLinkOpensInPeek\"] = 87] = \"definitionLinkOpensInPeek\";\n    EditorOption[EditorOption[\"quickSuggestions\"] = 88] = \"quickSuggestions\";\n    EditorOption[EditorOption[\"quickSuggestionsDelay\"] = 89] = \"quickSuggestionsDelay\";\n    EditorOption[EditorOption[\"readOnly\"] = 90] = \"readOnly\";\n    EditorOption[EditorOption[\"readOnlyMessage\"] = 91] = \"readOnlyMessage\";\n    EditorOption[EditorOption[\"renameOnType\"] = 92] = \"renameOnType\";\n    EditorOption[EditorOption[\"renderControlCharacters\"] = 93] = \"renderControlCharacters\";\n    EditorOption[EditorOption[\"renderFinalNewline\"] = 94] = \"renderFinalNewline\";\n    EditorOption[EditorOption[\"renderLineHighlight\"] = 95] = \"renderLineHighlight\";\n    EditorOption[EditorOption[\"renderLineHighlightOnlyWhenFocus\"] = 96] = \"renderLineHighlightOnlyWhenFocus\";\n    EditorOption[EditorOption[\"renderValidationDecorations\"] = 97] = \"renderValidationDecorations\";\n    EditorOption[EditorOption[\"renderWhitespace\"] = 98] = \"renderWhitespace\";\n    EditorOption[EditorOption[\"revealHorizontalRightPadding\"] = 99] = \"revealHorizontalRightPadding\";\n    EditorOption[EditorOption[\"roundedSelection\"] = 100] = \"roundedSelection\";\n    EditorOption[EditorOption[\"rulers\"] = 101] = \"rulers\";\n    EditorOption[EditorOption[\"scrollbar\"] = 102] = \"scrollbar\";\n    EditorOption[EditorOption[\"scrollBeyondLastColumn\"] = 103] = \"scrollBeyondLastColumn\";\n    EditorOption[EditorOption[\"scrollBeyondLastLine\"] = 104] = \"scrollBeyondLastLine\";\n    EditorOption[EditorOption[\"scrollPredominantAxis\"] = 105] = \"scrollPredominantAxis\";\n    EditorOption[EditorOption[\"selectionClipboard\"] = 106] = \"selectionClipboard\";\n    EditorOption[EditorOption[\"selectionHighlight\"] = 107] = \"selectionHighlight\";\n    EditorOption[EditorOption[\"selectOnLineNumbers\"] = 108] = \"selectOnLineNumbers\";\n    EditorOption[EditorOption[\"showFoldingControls\"] = 109] = \"showFoldingControls\";\n    EditorOption[EditorOption[\"showUnused\"] = 110] = \"showUnused\";\n    EditorOption[EditorOption[\"snippetSuggestions\"] = 111] = \"snippetSuggestions\";\n    EditorOption[EditorOption[\"smartSelect\"] = 112] = \"smartSelect\";\n    EditorOption[EditorOption[\"smoothScrolling\"] = 113] = \"smoothScrolling\";\n    EditorOption[EditorOption[\"stickyScroll\"] = 114] = \"stickyScroll\";\n    EditorOption[EditorOption[\"stickyTabStops\"] = 115] = \"stickyTabStops\";\n    EditorOption[EditorOption[\"stopRenderingLineAfter\"] = 116] = \"stopRenderingLineAfter\";\n    EditorOption[EditorOption[\"suggest\"] = 117] = \"suggest\";\n    EditorOption[EditorOption[\"suggestFontSize\"] = 118] = \"suggestFontSize\";\n    EditorOption[EditorOption[\"suggestLineHeight\"] = 119] = \"suggestLineHeight\";\n    EditorOption[EditorOption[\"suggestOnTriggerCharacters\"] = 120] = \"suggestOnTriggerCharacters\";\n    EditorOption[EditorOption[\"suggestSelection\"] = 121] = \"suggestSelection\";\n    EditorOption[EditorOption[\"tabCompletion\"] = 122] = \"tabCompletion\";\n    EditorOption[EditorOption[\"tabIndex\"] = 123] = \"tabIndex\";\n    EditorOption[EditorOption[\"unicodeHighlighting\"] = 124] = \"unicodeHighlighting\";\n    EditorOption[EditorOption[\"unusualLineTerminators\"] = 125] = \"unusualLineTerminators\";\n    EditorOption[EditorOption[\"useShadowDOM\"] = 126] = \"useShadowDOM\";\n    EditorOption[EditorOption[\"useTabStops\"] = 127] = \"useTabStops\";\n    EditorOption[EditorOption[\"wordBreak\"] = 128] = \"wordBreak\";\n    EditorOption[EditorOption[\"wordSeparators\"] = 129] = \"wordSeparators\";\n    EditorOption[EditorOption[\"wordWrap\"] = 130] = \"wordWrap\";\n    EditorOption[EditorOption[\"wordWrapBreakAfterCharacters\"] = 131] = \"wordWrapBreakAfterCharacters\";\n    EditorOption[EditorOption[\"wordWrapBreakBeforeCharacters\"] = 132] = \"wordWrapBreakBeforeCharacters\";\n    EditorOption[EditorOption[\"wordWrapColumn\"] = 133] = \"wordWrapColumn\";\n    EditorOption[EditorOption[\"wordWrapOverride1\"] = 134] = \"wordWrapOverride1\";\n    EditorOption[EditorOption[\"wordWrapOverride2\"] = 135] = \"wordWrapOverride2\";\n    EditorOption[EditorOption[\"wrappingIndent\"] = 136] = \"wrappingIndent\";\n    EditorOption[EditorOption[\"wrappingStrategy\"] = 137] = \"wrappingStrategy\";\n    EditorOption[EditorOption[\"showDeprecated\"] = 138] = \"showDeprecated\";\n    EditorOption[EditorOption[\"inlayHints\"] = 139] = \"inlayHints\";\n    EditorOption[EditorOption[\"editorClassName\"] = 140] = \"editorClassName\";\n    EditorOption[EditorOption[\"pixelRatio\"] = 141] = \"pixelRatio\";\n    EditorOption[EditorOption[\"tabFocusMode\"] = 142] = \"tabFocusMode\";\n    EditorOption[EditorOption[\"layoutInfo\"] = 143] = \"layoutInfo\";\n    EditorOption[EditorOption[\"wrappingInfo\"] = 144] = \"wrappingInfo\";\n    EditorOption[EditorOption[\"defaultColorDecorators\"] = 145] = \"defaultColorDecorators\";\n    EditorOption[EditorOption[\"colorDecoratorsActivatedOn\"] = 146] = \"colorDecoratorsActivatedOn\";\n    EditorOption[EditorOption[\"inlineCompletionsAccessibilityVerbose\"] = 147] = \"inlineCompletionsAccessibilityVerbose\";\n})(EditorOption || (EditorOption = {}));\n/**\n * End of line character preference.\n */\nexport var EndOfLinePreference;\n(function (EndOfLinePreference) {\n    /**\n     * Use the end of line character identified in the text buffer.\n     */\n    EndOfLinePreference[EndOfLinePreference[\"TextDefined\"] = 0] = \"TextDefined\";\n    /**\n     * Use line feed (\\n) as the end of line character.\n     */\n    EndOfLinePreference[EndOfLinePreference[\"LF\"] = 1] = \"LF\";\n    /**\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\n     */\n    EndOfLinePreference[EndOfLinePreference[\"CRLF\"] = 2] = \"CRLF\";\n})(EndOfLinePreference || (EndOfLinePreference = {}));\n/**\n * End of line character preference.\n */\nexport var EndOfLineSequence;\n(function (EndOfLineSequence) {\n    /**\n     * Use line feed (\\n) as the end of line character.\n     */\n    EndOfLineSequence[EndOfLineSequence[\"LF\"] = 0] = \"LF\";\n    /**\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\n     */\n    EndOfLineSequence[EndOfLineSequence[\"CRLF\"] = 1] = \"CRLF\";\n})(EndOfLineSequence || (EndOfLineSequence = {}));\n/**\n * Vertical Lane in the glyph margin of the editor.\n */\nexport var GlyphMarginLane;\n(function (GlyphMarginLane) {\n    GlyphMarginLane[GlyphMarginLane[\"Left\"] = 1] = \"Left\";\n    GlyphMarginLane[GlyphMarginLane[\"Right\"] = 2] = \"Right\";\n})(GlyphMarginLane || (GlyphMarginLane = {}));\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nexport var IndentAction;\n(function (IndentAction) {\n    /**\n     * Insert new line and copy the previous line's indentation.\n     */\n    IndentAction[IndentAction[\"None\"] = 0] = \"None\";\n    /**\n     * Insert new line and indent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\n    /**\n     * Insert two new lines:\n     *  - the first one indented which will hold the cursor\n     *  - the second one at the same indentation level\n     */\n    IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\n    /**\n     * Insert new line and outdent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\n})(IndentAction || (IndentAction = {}));\nexport var InjectedTextCursorStops;\n(function (InjectedTextCursorStops) {\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Both\"] = 0] = \"Both\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Right\"] = 1] = \"Right\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Left\"] = 2] = \"Left\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"None\"] = 3] = \"None\";\n})(InjectedTextCursorStops || (InjectedTextCursorStops = {}));\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    InlayHintKind[InlayHintKind[\"Type\"] = 1] = \"Type\";\n    InlayHintKind[InlayHintKind[\"Parameter\"] = 2] = \"Parameter\";\n})(InlayHintKind || (InlayHintKind = {}));\n/**\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered automatically while editing.\n     * It is sufficient to return a single completion item in this case.\n     */\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Automatic\"] = 0] = \"Automatic\";\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     * Return multiple completion items to enable cycling through them.\n     */\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Explicit\"] = 1] = \"Explicit\";\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\n/**\n * Virtual Key Codes, the value does not hold any inherent meaning.\n * Inspired somewhat from https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n * But these are \"more general\", as they should work across browsers & OS`s.\n */\nexport var KeyCode;\n(function (KeyCode) {\n    KeyCode[KeyCode[\"DependsOnKbLayout\"] = -1] = \"DependsOnKbLayout\";\n    /**\n     * Placed first to cover the 0 value of the enum.\n     */\n    KeyCode[KeyCode[\"Unknown\"] = 0] = \"Unknown\";\n    KeyCode[KeyCode[\"Backspace\"] = 1] = \"Backspace\";\n    KeyCode[KeyCode[\"Tab\"] = 2] = \"Tab\";\n    KeyCode[KeyCode[\"Enter\"] = 3] = \"Enter\";\n    KeyCode[KeyCode[\"Shift\"] = 4] = \"Shift\";\n    KeyCode[KeyCode[\"Ctrl\"] = 5] = \"Ctrl\";\n    KeyCode[KeyCode[\"Alt\"] = 6] = \"Alt\";\n    KeyCode[KeyCode[\"PauseBreak\"] = 7] = \"PauseBreak\";\n    KeyCode[KeyCode[\"CapsLock\"] = 8] = \"CapsLock\";\n    KeyCode[KeyCode[\"Escape\"] = 9] = \"Escape\";\n    KeyCode[KeyCode[\"Space\"] = 10] = \"Space\";\n    KeyCode[KeyCode[\"PageUp\"] = 11] = \"PageUp\";\n    KeyCode[KeyCode[\"PageDown\"] = 12] = \"PageDown\";\n    KeyCode[KeyCode[\"End\"] = 13] = \"End\";\n    KeyCode[KeyCode[\"Home\"] = 14] = \"Home\";\n    KeyCode[KeyCode[\"LeftArrow\"] = 15] = \"LeftArrow\";\n    KeyCode[KeyCode[\"UpArrow\"] = 16] = \"UpArrow\";\n    KeyCode[KeyCode[\"RightArrow\"] = 17] = \"RightArrow\";\n    KeyCode[KeyCode[\"DownArrow\"] = 18] = \"DownArrow\";\n    KeyCode[KeyCode[\"Insert\"] = 19] = \"Insert\";\n    KeyCode[KeyCode[\"Delete\"] = 20] = \"Delete\";\n    KeyCode[KeyCode[\"Digit0\"] = 21] = \"Digit0\";\n    KeyCode[KeyCode[\"Digit1\"] = 22] = \"Digit1\";\n    KeyCode[KeyCode[\"Digit2\"] = 23] = \"Digit2\";\n    KeyCode[KeyCode[\"Digit3\"] = 24] = \"Digit3\";\n    KeyCode[KeyCode[\"Digit4\"] = 25] = \"Digit4\";\n    KeyCode[KeyCode[\"Digit5\"] = 26] = \"Digit5\";\n    KeyCode[KeyCode[\"Digit6\"] = 27] = \"Digit6\";\n    KeyCode[KeyCode[\"Digit7\"] = 28] = \"Digit7\";\n    KeyCode[KeyCode[\"Digit8\"] = 29] = \"Digit8\";\n    KeyCode[KeyCode[\"Digit9\"] = 30] = \"Digit9\";\n    KeyCode[KeyCode[\"KeyA\"] = 31] = \"KeyA\";\n    KeyCode[KeyCode[\"KeyB\"] = 32] = \"KeyB\";\n    KeyCode[KeyCode[\"KeyC\"] = 33] = \"KeyC\";\n    KeyCode[KeyCode[\"KeyD\"] = 34] = \"KeyD\";\n    KeyCode[KeyCode[\"KeyE\"] = 35] = \"KeyE\";\n    KeyCode[KeyCode[\"KeyF\"] = 36] = \"KeyF\";\n    KeyCode[KeyCode[\"KeyG\"] = 37] = \"KeyG\";\n    KeyCode[KeyCode[\"KeyH\"] = 38] = \"KeyH\";\n    KeyCode[KeyCode[\"KeyI\"] = 39] = \"KeyI\";\n    KeyCode[KeyCode[\"KeyJ\"] = 40] = \"KeyJ\";\n    KeyCode[KeyCode[\"KeyK\"] = 41] = \"KeyK\";\n    KeyCode[KeyCode[\"KeyL\"] = 42] = \"KeyL\";\n    KeyCode[KeyCode[\"KeyM\"] = 43] = \"KeyM\";\n    KeyCode[KeyCode[\"KeyN\"] = 44] = \"KeyN\";\n    KeyCode[KeyCode[\"KeyO\"] = 45] = \"KeyO\";\n    KeyCode[KeyCode[\"KeyP\"] = 46] = \"KeyP\";\n    KeyCode[KeyCode[\"KeyQ\"] = 47] = \"KeyQ\";\n    KeyCode[KeyCode[\"KeyR\"] = 48] = \"KeyR\";\n    KeyCode[KeyCode[\"KeyS\"] = 49] = \"KeyS\";\n    KeyCode[KeyCode[\"KeyT\"] = 50] = \"KeyT\";\n    KeyCode[KeyCode[\"KeyU\"] = 51] = \"KeyU\";\n    KeyCode[KeyCode[\"KeyV\"] = 52] = \"KeyV\";\n    KeyCode[KeyCode[\"KeyW\"] = 53] = \"KeyW\";\n    KeyCode[KeyCode[\"KeyX\"] = 54] = \"KeyX\";\n    KeyCode[KeyCode[\"KeyY\"] = 55] = \"KeyY\";\n    KeyCode[KeyCode[\"KeyZ\"] = 56] = \"KeyZ\";\n    KeyCode[KeyCode[\"Meta\"] = 57] = \"Meta\";\n    KeyCode[KeyCode[\"ContextMenu\"] = 58] = \"ContextMenu\";\n    KeyCode[KeyCode[\"F1\"] = 59] = \"F1\";\n    KeyCode[KeyCode[\"F2\"] = 60] = \"F2\";\n    KeyCode[KeyCode[\"F3\"] = 61] = \"F3\";\n    KeyCode[KeyCode[\"F4\"] = 62] = \"F4\";\n    KeyCode[KeyCode[\"F5\"] = 63] = \"F5\";\n    KeyCode[KeyCode[\"F6\"] = 64] = \"F6\";\n    KeyCode[KeyCode[\"F7\"] = 65] = \"F7\";\n    KeyCode[KeyCode[\"F8\"] = 66] = \"F8\";\n    KeyCode[KeyCode[\"F9\"] = 67] = \"F9\";\n    KeyCode[KeyCode[\"F10\"] = 68] = \"F10\";\n    KeyCode[KeyCode[\"F11\"] = 69] = \"F11\";\n    KeyCode[KeyCode[\"F12\"] = 70] = \"F12\";\n    KeyCode[KeyCode[\"F13\"] = 71] = \"F13\";\n    KeyCode[KeyCode[\"F14\"] = 72] = \"F14\";\n    KeyCode[KeyCode[\"F15\"] = 73] = \"F15\";\n    KeyCode[KeyCode[\"F16\"] = 74] = \"F16\";\n    KeyCode[KeyCode[\"F17\"] = 75] = \"F17\";\n    KeyCode[KeyCode[\"F18\"] = 76] = \"F18\";\n    KeyCode[KeyCode[\"F19\"] = 77] = \"F19\";\n    KeyCode[KeyCode[\"F20\"] = 78] = \"F20\";\n    KeyCode[KeyCode[\"F21\"] = 79] = \"F21\";\n    KeyCode[KeyCode[\"F22\"] = 80] = \"F22\";\n    KeyCode[KeyCode[\"F23\"] = 81] = \"F23\";\n    KeyCode[KeyCode[\"F24\"] = 82] = \"F24\";\n    KeyCode[KeyCode[\"NumLock\"] = 83] = \"NumLock\";\n    KeyCode[KeyCode[\"ScrollLock\"] = 84] = \"ScrollLock\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the ';:' key\n     */\n    KeyCode[KeyCode[\"Semicolon\"] = 85] = \"Semicolon\";\n    /**\n     * For any country/region, the '+' key\n     * For the US standard keyboard, the '=+' key\n     */\n    KeyCode[KeyCode[\"Equal\"] = 86] = \"Equal\";\n    /**\n     * For any country/region, the ',' key\n     * For the US standard keyboard, the ',<' key\n     */\n    KeyCode[KeyCode[\"Comma\"] = 87] = \"Comma\";\n    /**\n     * For any country/region, the '-' key\n     * For the US standard keyboard, the '-_' key\n     */\n    KeyCode[KeyCode[\"Minus\"] = 88] = \"Minus\";\n    /**\n     * For any country/region, the '.' key\n     * For the US standard keyboard, the '.>' key\n     */\n    KeyCode[KeyCode[\"Period\"] = 89] = \"Period\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the '/?' key\n     */\n    KeyCode[KeyCode[\"Slash\"] = 90] = \"Slash\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the '`~' key\n     */\n    KeyCode[KeyCode[\"Backquote\"] = 91] = \"Backquote\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the '[{' key\n     */\n    KeyCode[KeyCode[\"BracketLeft\"] = 92] = \"BracketLeft\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the '\\|' key\n     */\n    KeyCode[KeyCode[\"Backslash\"] = 93] = \"Backslash\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the ']}' key\n     */\n    KeyCode[KeyCode[\"BracketRight\"] = 94] = \"BracketRight\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the ''\"' key\n     */\n    KeyCode[KeyCode[\"Quote\"] = 95] = \"Quote\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     */\n    KeyCode[KeyCode[\"OEM_8\"] = 96] = \"OEM_8\";\n    /**\n     * Either the angle bracket key or the backslash key on the RT 102-key keyboard.\n     */\n    KeyCode[KeyCode[\"IntlBackslash\"] = 97] = \"IntlBackslash\";\n    KeyCode[KeyCode[\"Numpad0\"] = 98] = \"Numpad0\";\n    KeyCode[KeyCode[\"Numpad1\"] = 99] = \"Numpad1\";\n    KeyCode[KeyCode[\"Numpad2\"] = 100] = \"Numpad2\";\n    KeyCode[KeyCode[\"Numpad3\"] = 101] = \"Numpad3\";\n    KeyCode[KeyCode[\"Numpad4\"] = 102] = \"Numpad4\";\n    KeyCode[KeyCode[\"Numpad5\"] = 103] = \"Numpad5\";\n    KeyCode[KeyCode[\"Numpad6\"] = 104] = \"Numpad6\";\n    KeyCode[KeyCode[\"Numpad7\"] = 105] = \"Numpad7\";\n    KeyCode[KeyCode[\"Numpad8\"] = 106] = \"Numpad8\";\n    KeyCode[KeyCode[\"Numpad9\"] = 107] = \"Numpad9\";\n    KeyCode[KeyCode[\"NumpadMultiply\"] = 108] = \"NumpadMultiply\";\n    KeyCode[KeyCode[\"NumpadAdd\"] = 109] = \"NumpadAdd\";\n    KeyCode[KeyCode[\"NUMPAD_SEPARATOR\"] = 110] = \"NUMPAD_SEPARATOR\";\n    KeyCode[KeyCode[\"NumpadSubtract\"] = 111] = \"NumpadSubtract\";\n    KeyCode[KeyCode[\"NumpadDecimal\"] = 112] = \"NumpadDecimal\";\n    KeyCode[KeyCode[\"NumpadDivide\"] = 113] = \"NumpadDivide\";\n    /**\n     * Cover all key codes when IME is processing input.\n     */\n    KeyCode[KeyCode[\"KEY_IN_COMPOSITION\"] = 114] = \"KEY_IN_COMPOSITION\";\n    KeyCode[KeyCode[\"ABNT_C1\"] = 115] = \"ABNT_C1\";\n    KeyCode[KeyCode[\"ABNT_C2\"] = 116] = \"ABNT_C2\";\n    KeyCode[KeyCode[\"AudioVolumeMute\"] = 117] = \"AudioVolumeMute\";\n    KeyCode[KeyCode[\"AudioVolumeUp\"] = 118] = \"AudioVolumeUp\";\n    KeyCode[KeyCode[\"AudioVolumeDown\"] = 119] = \"AudioVolumeDown\";\n    KeyCode[KeyCode[\"BrowserSearch\"] = 120] = \"BrowserSearch\";\n    KeyCode[KeyCode[\"BrowserHome\"] = 121] = \"BrowserHome\";\n    KeyCode[KeyCode[\"BrowserBack\"] = 122] = \"BrowserBack\";\n    KeyCode[KeyCode[\"BrowserForward\"] = 123] = \"BrowserForward\";\n    KeyCode[KeyCode[\"MediaTrackNext\"] = 124] = \"MediaTrackNext\";\n    KeyCode[KeyCode[\"MediaTrackPrevious\"] = 125] = \"MediaTrackPrevious\";\n    KeyCode[KeyCode[\"MediaStop\"] = 126] = \"MediaStop\";\n    KeyCode[KeyCode[\"MediaPlayPause\"] = 127] = \"MediaPlayPause\";\n    KeyCode[KeyCode[\"LaunchMediaPlayer\"] = 128] = \"LaunchMediaPlayer\";\n    KeyCode[KeyCode[\"LaunchMail\"] = 129] = \"LaunchMail\";\n    KeyCode[KeyCode[\"LaunchApp2\"] = 130] = \"LaunchApp2\";\n    /**\n     * VK_CLEAR, 0x0C, CLEAR key\n     */\n    KeyCode[KeyCode[\"Clear\"] = 131] = \"Clear\";\n    /**\n     * Placed last to cover the length of the enum.\n     * Please do not depend on this value!\n     */\n    KeyCode[KeyCode[\"MAX_VALUE\"] = 132] = \"MAX_VALUE\";\n})(KeyCode || (KeyCode = {}));\nexport var MarkerSeverity;\n(function (MarkerSeverity) {\n    MarkerSeverity[MarkerSeverity[\"Hint\"] = 1] = \"Hint\";\n    MarkerSeverity[MarkerSeverity[\"Info\"] = 2] = \"Info\";\n    MarkerSeverity[MarkerSeverity[\"Warning\"] = 4] = \"Warning\";\n    MarkerSeverity[MarkerSeverity[\"Error\"] = 8] = \"Error\";\n})(MarkerSeverity || (MarkerSeverity = {}));\nexport var MarkerTag;\n(function (MarkerTag) {\n    MarkerTag[MarkerTag[\"Unnecessary\"] = 1] = \"Unnecessary\";\n    MarkerTag[MarkerTag[\"Deprecated\"] = 2] = \"Deprecated\";\n})(MarkerTag || (MarkerTag = {}));\n/**\n * Position in the minimap to render the decoration.\n */\nexport var MinimapPosition;\n(function (MinimapPosition) {\n    MinimapPosition[MinimapPosition[\"Inline\"] = 1] = \"Inline\";\n    MinimapPosition[MinimapPosition[\"Gutter\"] = 2] = \"Gutter\";\n})(MinimapPosition || (MinimapPosition = {}));\n/**\n * Type of hit element with the mouse in the editor.\n */\nexport var MouseTargetType;\n(function (MouseTargetType) {\n    /**\n     * Mouse is on top of an unknown element.\n     */\n    MouseTargetType[MouseTargetType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    /**\n     * Mouse is on top of the textarea used for input.\n     */\n    MouseTargetType[MouseTargetType[\"TEXTAREA\"] = 1] = \"TEXTAREA\";\n    /**\n     * Mouse is on top of the glyph margin\n     */\n    MouseTargetType[MouseTargetType[\"GUTTER_GLYPH_MARGIN\"] = 2] = \"GUTTER_GLYPH_MARGIN\";\n    /**\n     * Mouse is on top of the line numbers\n     */\n    MouseTargetType[MouseTargetType[\"GUTTER_LINE_NUMBERS\"] = 3] = \"GUTTER_LINE_NUMBERS\";\n    /**\n     * Mouse is on top of the line decorations\n     */\n    MouseTargetType[MouseTargetType[\"GUTTER_LINE_DECORATIONS\"] = 4] = \"GUTTER_LINE_DECORATIONS\";\n    /**\n     * Mouse is on top of the whitespace left in the gutter by a view zone.\n     */\n    MouseTargetType[MouseTargetType[\"GUTTER_VIEW_ZONE\"] = 5] = \"GUTTER_VIEW_ZONE\";\n    /**\n     * Mouse is on top of text in the content.\n     */\n    MouseTargetType[MouseTargetType[\"CONTENT_TEXT\"] = 6] = \"CONTENT_TEXT\";\n    /**\n     * Mouse is on top of empty space in the content (e.g. after line text or below last line)\n     */\n    MouseTargetType[MouseTargetType[\"CONTENT_EMPTY\"] = 7] = \"CONTENT_EMPTY\";\n    /**\n     * Mouse is on top of a view zone in the content.\n     */\n    MouseTargetType[MouseTargetType[\"CONTENT_VIEW_ZONE\"] = 8] = \"CONTENT_VIEW_ZONE\";\n    /**\n     * Mouse is on top of a content widget.\n     */\n    MouseTargetType[MouseTargetType[\"CONTENT_WIDGET\"] = 9] = \"CONTENT_WIDGET\";\n    /**\n     * Mouse is on top of the decorations overview ruler.\n     */\n    MouseTargetType[MouseTargetType[\"OVERVIEW_RULER\"] = 10] = \"OVERVIEW_RULER\";\n    /**\n     * Mouse is on top of a scrollbar.\n     */\n    MouseTargetType[MouseTargetType[\"SCROLLBAR\"] = 11] = \"SCROLLBAR\";\n    /**\n     * Mouse is on top of an overlay widget.\n     */\n    MouseTargetType[MouseTargetType[\"OVERLAY_WIDGET\"] = 12] = \"OVERLAY_WIDGET\";\n    /**\n     * Mouse is outside of the editor.\n     */\n    MouseTargetType[MouseTargetType[\"OUTSIDE_EDITOR\"] = 13] = \"OUTSIDE_EDITOR\";\n})(MouseTargetType || (MouseTargetType = {}));\n/**\n * A positioning preference for rendering overlay widgets.\n */\nexport var OverlayWidgetPositionPreference;\n(function (OverlayWidgetPositionPreference) {\n    /**\n     * Position the overlay widget in the top right corner\n     */\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"TOP_RIGHT_CORNER\"] = 0] = \"TOP_RIGHT_CORNER\";\n    /**\n     * Position the overlay widget in the bottom right corner\n     */\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"BOTTOM_RIGHT_CORNER\"] = 1] = \"BOTTOM_RIGHT_CORNER\";\n    /**\n     * Position the overlay widget in the top center\n     */\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"TOP_CENTER\"] = 2] = \"TOP_CENTER\";\n})(OverlayWidgetPositionPreference || (OverlayWidgetPositionPreference = {}));\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nexport var OverviewRulerLane;\n(function (OverviewRulerLane) {\n    OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\n    OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\n    OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\n    OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\n})(OverviewRulerLane || (OverviewRulerLane = {}));\nexport var PositionAffinity;\n(function (PositionAffinity) {\n    /**\n     * Prefers the left most position.\n    */\n    PositionAffinity[PositionAffinity[\"Left\"] = 0] = \"Left\";\n    /**\n     * Prefers the right most position.\n    */\n    PositionAffinity[PositionAffinity[\"Right\"] = 1] = \"Right\";\n    /**\n     * No preference.\n    */\n    PositionAffinity[PositionAffinity[\"None\"] = 2] = \"None\";\n    /**\n     * If the given position is on injected text, prefers the position left of it.\n    */\n    PositionAffinity[PositionAffinity[\"LeftOfInjectedText\"] = 3] = \"LeftOfInjectedText\";\n    /**\n     * If the given position is on injected text, prefers the position right of it.\n    */\n    PositionAffinity[PositionAffinity[\"RightOfInjectedText\"] = 4] = \"RightOfInjectedText\";\n})(PositionAffinity || (PositionAffinity = {}));\nexport var RenderLineNumbersType;\n(function (RenderLineNumbersType) {\n    RenderLineNumbersType[RenderLineNumbersType[\"Off\"] = 0] = \"Off\";\n    RenderLineNumbersType[RenderLineNumbersType[\"On\"] = 1] = \"On\";\n    RenderLineNumbersType[RenderLineNumbersType[\"Relative\"] = 2] = \"Relative\";\n    RenderLineNumbersType[RenderLineNumbersType[\"Interval\"] = 3] = \"Interval\";\n    RenderLineNumbersType[RenderLineNumbersType[\"Custom\"] = 4] = \"Custom\";\n})(RenderLineNumbersType || (RenderLineNumbersType = {}));\nexport var RenderMinimap;\n(function (RenderMinimap) {\n    RenderMinimap[RenderMinimap[\"None\"] = 0] = \"None\";\n    RenderMinimap[RenderMinimap[\"Text\"] = 1] = \"Text\";\n    RenderMinimap[RenderMinimap[\"Blocks\"] = 2] = \"Blocks\";\n})(RenderMinimap || (RenderMinimap = {}));\nexport var ScrollType;\n(function (ScrollType) {\n    ScrollType[ScrollType[\"Smooth\"] = 0] = \"Smooth\";\n    ScrollType[ScrollType[\"Immediate\"] = 1] = \"Immediate\";\n})(ScrollType || (ScrollType = {}));\nexport var ScrollbarVisibility;\n(function (ScrollbarVisibility) {\n    ScrollbarVisibility[ScrollbarVisibility[\"Auto\"] = 1] = \"Auto\";\n    ScrollbarVisibility[ScrollbarVisibility[\"Hidden\"] = 2] = \"Hidden\";\n    ScrollbarVisibility[ScrollbarVisibility[\"Visible\"] = 3] = \"Visible\";\n})(ScrollbarVisibility || (ScrollbarVisibility = {}));\n/**\n * The direction of a selection.\n */\nexport var SelectionDirection;\n(function (SelectionDirection) {\n    /**\n     * The selection starts above where it ends.\n     */\n    SelectionDirection[SelectionDirection[\"LTR\"] = 0] = \"LTR\";\n    /**\n     * The selection starts below where it ends.\n     */\n    SelectionDirection[SelectionDirection[\"RTL\"] = 1] = \"RTL\";\n})(SelectionDirection || (SelectionDirection = {}));\nexport var SignatureHelpTriggerKind;\n(function (SignatureHelpTriggerKind) {\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"Invoke\"] = 1] = \"Invoke\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"TriggerCharacter\"] = 2] = \"TriggerCharacter\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"ContentChange\"] = 3] = \"ContentChange\";\n})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind[SymbolKind[\"File\"] = 0] = \"File\";\n    SymbolKind[SymbolKind[\"Module\"] = 1] = \"Module\";\n    SymbolKind[SymbolKind[\"Namespace\"] = 2] = \"Namespace\";\n    SymbolKind[SymbolKind[\"Package\"] = 3] = \"Package\";\n    SymbolKind[SymbolKind[\"Class\"] = 4] = \"Class\";\n    SymbolKind[SymbolKind[\"Method\"] = 5] = \"Method\";\n    SymbolKind[SymbolKind[\"Property\"] = 6] = \"Property\";\n    SymbolKind[SymbolKind[\"Field\"] = 7] = \"Field\";\n    SymbolKind[SymbolKind[\"Constructor\"] = 8] = \"Constructor\";\n    SymbolKind[SymbolKind[\"Enum\"] = 9] = \"Enum\";\n    SymbolKind[SymbolKind[\"Interface\"] = 10] = \"Interface\";\n    SymbolKind[SymbolKind[\"Function\"] = 11] = \"Function\";\n    SymbolKind[SymbolKind[\"Variable\"] = 12] = \"Variable\";\n    SymbolKind[SymbolKind[\"Constant\"] = 13] = \"Constant\";\n    SymbolKind[SymbolKind[\"String\"] = 14] = \"String\";\n    SymbolKind[SymbolKind[\"Number\"] = 15] = \"Number\";\n    SymbolKind[SymbolKind[\"Boolean\"] = 16] = \"Boolean\";\n    SymbolKind[SymbolKind[\"Array\"] = 17] = \"Array\";\n    SymbolKind[SymbolKind[\"Object\"] = 18] = \"Object\";\n    SymbolKind[SymbolKind[\"Key\"] = 19] = \"Key\";\n    SymbolKind[SymbolKind[\"Null\"] = 20] = \"Null\";\n    SymbolKind[SymbolKind[\"EnumMember\"] = 21] = \"EnumMember\";\n    SymbolKind[SymbolKind[\"Struct\"] = 22] = \"Struct\";\n    SymbolKind[SymbolKind[\"Event\"] = 23] = \"Event\";\n    SymbolKind[SymbolKind[\"Operator\"] = 24] = \"Operator\";\n    SymbolKind[SymbolKind[\"TypeParameter\"] = 25] = \"TypeParameter\";\n})(SymbolKind || (SymbolKind = {}));\nexport var SymbolTag;\n(function (SymbolTag) {\n    SymbolTag[SymbolTag[\"Deprecated\"] = 1] = \"Deprecated\";\n})(SymbolTag || (SymbolTag = {}));\n/**\n * The kind of animation in which the editor's cursor should be rendered.\n */\nexport var TextEditorCursorBlinkingStyle;\n(function (TextEditorCursorBlinkingStyle) {\n    /**\n     * Hidden\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Hidden\"] = 0] = \"Hidden\";\n    /**\n     * Blinking\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Blink\"] = 1] = \"Blink\";\n    /**\n     * Blinking with smooth fading\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Smooth\"] = 2] = \"Smooth\";\n    /**\n     * Blinking with prolonged filled state and smooth fading\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Phase\"] = 3] = \"Phase\";\n    /**\n     * Expand collapse animation on the y axis\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Expand\"] = 4] = \"Expand\";\n    /**\n     * No-Blinking\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Solid\"] = 5] = \"Solid\";\n})(TextEditorCursorBlinkingStyle || (TextEditorCursorBlinkingStyle = {}));\n/**\n * The style in which the editor's cursor should be rendered.\n */\nexport var TextEditorCursorStyle;\n(function (TextEditorCursorStyle) {\n    /**\n     * As a vertical line (sitting between two characters).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Line\"] = 1] = \"Line\";\n    /**\n     * As a block (sitting on top of a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Block\"] = 2] = \"Block\";\n    /**\n     * As a horizontal line (sitting under a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Underline\"] = 3] = \"Underline\";\n    /**\n     * As a thin vertical line (sitting between two characters).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"LineThin\"] = 4] = \"LineThin\";\n    /**\n     * As an outlined block (sitting on top of a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"BlockOutline\"] = 5] = \"BlockOutline\";\n    /**\n     * As a thin horizontal line (sitting under a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"UnderlineThin\"] = 6] = \"UnderlineThin\";\n})(TextEditorCursorStyle || (TextEditorCursorStyle = {}));\n/**\n * Describes the behavior of decorations when typing/editing near their edges.\n * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`\n */\nexport var TrackedRangeStickiness;\n(function (TrackedRangeStickiness) {\n    TrackedRangeStickiness[TrackedRangeStickiness[\"AlwaysGrowsWhenTypingAtEdges\"] = 0] = \"AlwaysGrowsWhenTypingAtEdges\";\n    TrackedRangeStickiness[TrackedRangeStickiness[\"NeverGrowsWhenTypingAtEdges\"] = 1] = \"NeverGrowsWhenTypingAtEdges\";\n    TrackedRangeStickiness[TrackedRangeStickiness[\"GrowsOnlyWhenTypingBefore\"] = 2] = \"GrowsOnlyWhenTypingBefore\";\n    TrackedRangeStickiness[TrackedRangeStickiness[\"GrowsOnlyWhenTypingAfter\"] = 3] = \"GrowsOnlyWhenTypingAfter\";\n})(TrackedRangeStickiness || (TrackedRangeStickiness = {}));\n/**\n * Describes how to indent wrapped lines.\n */\nexport var WrappingIndent;\n(function (WrappingIndent) {\n    /**\n     * No indentation => wrapped lines begin at column 1.\n     */\n    WrappingIndent[WrappingIndent[\"None\"] = 0] = \"None\";\n    /**\n     * Same => wrapped lines get the same indentation as the parent.\n     */\n    WrappingIndent[WrappingIndent[\"Same\"] = 1] = \"Same\";\n    /**\n     * Indent => wrapped lines get +1 indentation toward the parent.\n     */\n    WrappingIndent[WrappingIndent[\"Indent\"] = 2] = \"Indent\";\n    /**\n     * DeepIndent => wrapped lines get +2 indentation toward the parent.\n     */\n    WrappingIndent[WrappingIndent[\"DeepIndent\"] = 3] = \"DeepIndent\";\n})(WrappingIndent || (WrappingIndent = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nexport var InspectTokensNLS;\n(function (InspectTokensNLS) {\n    InspectTokensNLS.inspectTokensAction = nls.localize('inspectTokens', \"Developer: Inspect Tokens\");\n})(InspectTokensNLS || (InspectTokensNLS = {}));\nexport var GoToLineNLS;\n(function (GoToLineNLS) {\n    GoToLineNLS.gotoLineActionLabel = nls.localize('gotoLineActionLabel', \"Go to Line/Column...\");\n})(GoToLineNLS || (GoToLineNLS = {}));\nexport var QuickHelpNLS;\n(function (QuickHelpNLS) {\n    QuickHelpNLS.helpQuickAccessActionLabel = nls.localize('helpQuickAccess', \"Show all Quick Access Providers\");\n})(QuickHelpNLS || (QuickHelpNLS = {}));\nexport var QuickCommandNLS;\n(function (QuickCommandNLS) {\n    QuickCommandNLS.quickCommandActionLabel = nls.localize('quickCommandActionLabel', \"Command Palette\");\n    QuickCommandNLS.quickCommandHelp = nls.localize('quickCommandActionHelp', \"Show And Run Commands\");\n})(QuickCommandNLS || (QuickCommandNLS = {}));\nexport var QuickOutlineNLS;\n(function (QuickOutlineNLS) {\n    QuickOutlineNLS.quickOutlineActionLabel = nls.localize('quickOutlineActionLabel', \"Go to Symbol...\");\n    QuickOutlineNLS.quickOutlineByCategoryActionLabel = nls.localize('quickOutlineByCategoryActionLabel', \"Go to Symbol by Category...\");\n})(QuickOutlineNLS || (QuickOutlineNLS = {}));\nexport var StandaloneCodeEditorNLS;\n(function (StandaloneCodeEditorNLS) {\n    StandaloneCodeEditorNLS.editorViewAccessibleLabel = nls.localize('editorViewAccessibleLabel', \"Editor content\");\n    StandaloneCodeEditorNLS.accessibilityHelpMessage = nls.localize('accessibilityHelpMessage', \"Press Alt+F1 for Accessibility Options.\");\n})(StandaloneCodeEditorNLS || (StandaloneCodeEditorNLS = {}));\nexport var ToggleHighContrastNLS;\n(function (ToggleHighContrastNLS) {\n    ToggleHighContrastNLS.toggleHighContrast = nls.localize('toggleHighContrast', \"Toggle High Contrast Theme\");\n})(ToggleHighContrastNLS || (ToggleHighContrastNLS = {}));\nexport var StandaloneServicesNLS;\n(function (StandaloneServicesNLS) {\n    StandaloneServicesNLS.bulkEditServiceSummary = nls.localize('bulkEditServiceSummary', \"Made {0} edits in {1} files\");\n})(StandaloneServicesNLS || (StandaloneServicesNLS = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class BracketInfo {\n    constructor(range, \n    /** 0-based level */\n    nestingLevel, nestingLevelOfEqualBracketType, isInvalid) {\n        this.range = range;\n        this.nestingLevel = nestingLevel;\n        this.nestingLevelOfEqualBracketType = nestingLevelOfEqualBracketType;\n        this.isInvalid = isInvalid;\n    }\n}\nexport class BracketPairInfo {\n    constructor(range, openingBracketRange, closingBracketRange, \n    /** 0-based */\n    nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode) {\n        this.range = range;\n        this.openingBracketRange = openingBracketRange;\n        this.closingBracketRange = closingBracketRange;\n        this.nestingLevel = nestingLevel;\n        this.nestingLevelOfEqualBracketType = nestingLevelOfEqualBracketType;\n        this.bracketPairNode = bracketPairNode;\n    }\n    get openingBracketInfo() {\n        return this.bracketPairNode.openingBracket.bracketInfo;\n    }\n}\nexport class BracketPairWithMinIndentationInfo extends BracketPairInfo {\n    constructor(range, openingBracketRange, closingBracketRange, \n    /**\n     * 0-based\n    */\n    nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode, \n    /**\n     * -1 if not requested, otherwise the size of the minimum indentation in the bracket pair in terms of visible columns.\n    */\n    minVisibleColumnIndentation) {\n        super(range, openingBracketRange, closingBracketRange, nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode);\n        this.minVisibleColumnIndentation = minVisibleColumnIndentation;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n    constructor() {\n        this.changeType = 1 /* RawContentChangedType.Flush */;\n    }\n}\n/**\n * Represents text injected on a line\n * @internal\n */\nexport class LineInjectedText {\n    static applyInjectedText(lineText, injectedTexts) {\n        if (!injectedTexts || injectedTexts.length === 0) {\n            return lineText;\n        }\n        let result = '';\n        let lastOriginalOffset = 0;\n        for (const injectedText of injectedTexts) {\n            result += lineText.substring(lastOriginalOffset, injectedText.column - 1);\n            lastOriginalOffset = injectedText.column - 1;\n            result += injectedText.options.content;\n        }\n        result += lineText.substring(lastOriginalOffset);\n        return result;\n    }\n    static fromDecorations(decorations) {\n        const result = [];\n        for (const decoration of decorations) {\n            if (decoration.options.before && decoration.options.before.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.startLineNumber, decoration.range.startColumn, decoration.options.before, 0));\n            }\n            if (decoration.options.after && decoration.options.after.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.endLineNumber, decoration.range.endColumn, decoration.options.after, 1));\n            }\n        }\n        result.sort((a, b) => {\n            if (a.lineNumber === b.lineNumber) {\n                if (a.column === b.column) {\n                    return a.order - b.order;\n                }\n                return a.column - b.column;\n            }\n            return a.lineNumber - b.lineNumber;\n        });\n        return result;\n    }\n    constructor(ownerId, lineNumber, column, options, order) {\n        this.ownerId = ownerId;\n        this.lineNumber = lineNumber;\n        this.column = column;\n        this.options = options;\n        this.order = order;\n    }\n}\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nexport class ModelRawLineChanged {\n    constructor(lineNumber, detail, injectedText) {\n        this.changeType = 2 /* RawContentChangedType.LineChanged */;\n        this.lineNumber = lineNumber;\n        this.detail = detail;\n        this.injectedText = injectedText;\n    }\n}\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nexport class ModelRawLinesDeleted {\n    constructor(fromLineNumber, toLineNumber) {\n        this.changeType = 3 /* RawContentChangedType.LinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nexport class ModelRawLinesInserted {\n    constructor(fromLineNumber, toLineNumber, detail, injectedTexts) {\n        this.changeType = 4 /* RawContentChangedType.LinesInserted */;\n        this.injectedTexts = injectedTexts;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n        this.detail = detail;\n    }\n}\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nexport class ModelRawEOLChanged {\n    constructor() {\n        this.changeType = 5 /* RawContentChangedType.EOLChanged */;\n    }\n}\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nexport class ModelRawContentChangedEvent {\n    constructor(changes, versionId, isUndoing, isRedoing) {\n        this.changes = changes;\n        this.versionId = versionId;\n        this.isUndoing = isUndoing;\n        this.isRedoing = isRedoing;\n        this.resultingSelection = null;\n    }\n    containsEvent(type) {\n        for (let i = 0, len = this.changes.length; i < len; i++) {\n            const change = this.changes[i];\n            if (change.changeType === type) {\n                return true;\n            }\n        }\n        return false;\n    }\n    static merge(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        return new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n    }\n}\n/**\n * An event describing a change in injected text.\n * @internal\n */\nexport class ModelInjectedTextChangedEvent {\n    constructor(changes) {\n        this.changes = changes;\n    }\n}\n/**\n * @internal\n */\nexport class InternalModelContentChangeEvent {\n    constructor(rawContentChangedEvent, contentChangedEvent) {\n        this.rawContentChangedEvent = rawContentChangedEvent;\n        this.contentChangedEvent = contentChangedEvent;\n    }\n    merge(other) {\n        const rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n        const contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n        return new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n    }\n    static _mergeChangeEvents(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const eol = b.eol;\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        const isFlush = (a.isFlush || b.isFlush);\n        const isEolChange = a.isEolChange && b.isEolChange; // both must be true to not confuse listeners who skip such edits\n        return {\n            changes: changes,\n            eol: eol,\n            isEolChange: isEolChange,\n            versionId: versionId,\n            isUndoing: isUndoing,\n            isRedoing: isRedoing,\n            isFlush: isFlush,\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var HorizontalGuidesState;\n(function (HorizontalGuidesState) {\n    HorizontalGuidesState[HorizontalGuidesState[\"Disabled\"] = 0] = \"Disabled\";\n    HorizontalGuidesState[HorizontalGuidesState[\"EnabledForActive\"] = 1] = \"EnabledForActive\";\n    HorizontalGuidesState[HorizontalGuidesState[\"Enabled\"] = 2] = \"Enabled\";\n})(HorizontalGuidesState || (HorizontalGuidesState = {}));\nexport class IndentGuide {\n    constructor(visibleColumn, column, className, \n    /**\n     * If set, this indent guide is a horizontal guide (no vertical part).\n     * It starts at visibleColumn and continues until endColumn.\n    */\n    horizontalLine, \n    /**\n     * If set (!= -1), only show this guide for wrapped lines that don't contain this model column, but are after it.\n    */\n    forWrappedLinesAfterColumn, forWrappedLinesBeforeOrAtColumn) {\n        this.visibleColumn = visibleColumn;\n        this.column = column;\n        this.className = className;\n        this.horizontalLine = horizontalLine;\n        this.forWrappedLinesAfterColumn = forWrappedLinesAfterColumn;\n        this.forWrappedLinesBeforeOrAtColumn = forWrappedLinesBeforeOrAtColumn;\n        if ((visibleColumn !== -1) === (column !== -1)) {\n            throw new Error();\n        }\n    }\n}\nexport class IndentGuideHorizontalLine {\n    constructor(top, endColumn) {\n        this.top = top;\n        this.endColumn = endColumn;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../base/common/lifecycle.js';\nexport class TokenizationRegistry {\n    constructor() {\n        this._tokenizationSupports = new Map();\n        this._factories = new Map();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._colorMap = null;\n    }\n    handleChange(languageIds) {\n        this._onDidChange.fire({\n            changedLanguages: languageIds,\n            changedColorMap: false\n        });\n    }\n    register(languageId, support) {\n        this._tokenizationSupports.set(languageId, support);\n        this.handleChange([languageId]);\n        return toDisposable(() => {\n            if (this._tokenizationSupports.get(languageId) !== support) {\n                return;\n            }\n            this._tokenizationSupports.delete(languageId);\n            this.handleChange([languageId]);\n        });\n    }\n    get(languageId) {\n        return this._tokenizationSupports.get(languageId) || null;\n    }\n    registerFactory(languageId, factory) {\n        var _a;\n        (_a = this._factories.get(languageId)) === null || _a === void 0 ? void 0 : _a.dispose();\n        const myData = new TokenizationSupportFactoryData(this, languageId, factory);\n        this._factories.set(languageId, myData);\n        return toDisposable(() => {\n            const v = this._factories.get(languageId);\n            if (!v || v !== myData) {\n                return;\n            }\n            this._factories.delete(languageId);\n            v.dispose();\n        });\n    }\n    getOrCreate(languageId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // check first if the support is already set\n            const tokenizationSupport = this.get(languageId);\n            if (tokenizationSupport) {\n                return tokenizationSupport;\n            }\n            const factory = this._factories.get(languageId);\n            if (!factory || factory.isResolved) {\n                // no factory or factory.resolve already finished\n                return null;\n            }\n            yield factory.resolve();\n            return this.get(languageId);\n        });\n    }\n    isResolved(languageId) {\n        const tokenizationSupport = this.get(languageId);\n        if (tokenizationSupport) {\n            return true;\n        }\n        const factory = this._factories.get(languageId);\n        if (!factory || factory.isResolved) {\n            return true;\n        }\n        return false;\n    }\n    setColorMap(colorMap) {\n        this._colorMap = colorMap;\n        this._onDidChange.fire({\n            changedLanguages: Array.from(this._tokenizationSupports.keys()),\n            changedColorMap: true\n        });\n    }\n    getColorMap() {\n        return this._colorMap;\n    }\n    getDefaultBackground() {\n        if (this._colorMap && this._colorMap.length > 2 /* ColorId.DefaultBackground */) {\n            return this._colorMap[2 /* ColorId.DefaultBackground */];\n        }\n        return null;\n    }\n}\nclass TokenizationSupportFactoryData extends Disposable {\n    get isResolved() {\n        return this._isResolved;\n    }\n    constructor(_registry, _languageId, _factory) {\n        super();\n        this._registry = _registry;\n        this._languageId = _languageId;\n        this._factory = _factory;\n        this._isDisposed = false;\n        this._resolvePromise = null;\n        this._isResolved = false;\n    }\n    dispose() {\n        this._isDisposed = true;\n        super.dispose();\n    }\n    resolve() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._resolvePromise) {\n                this._resolvePromise = this._create();\n            }\n            return this._resolvePromise;\n        });\n    }\n    _create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const value = yield this._factory.tokenizationSupport;\n            this._isResolved = true;\n            if (value && !this._isDisposed) {\n                this._register(this._registry.register(this._languageId, value));\n            }\n        });\n    }\n}\n","/**\n * Represents contiguous tokens over a contiguous range of lines.\n */\nexport class ContiguousMultilineTokens {\n    /**\n     * (Inclusive) start line number for these tokens.\n     */\n    get startLineNumber() {\n        return this._startLineNumber;\n    }\n    /**\n     * (Inclusive) end line number for these tokens.\n     */\n    get endLineNumber() {\n        return this._startLineNumber + this._tokens.length - 1;\n    }\n    constructor(startLineNumber, tokens) {\n        this._startLineNumber = startLineNumber;\n        this._tokens = tokens;\n    }\n    /**\n     * @see {@link _tokens}\n     */\n    getLineTokens(lineNumber) {\n        return this._tokens[lineNumber - this._startLineNumber];\n    }\n    appendLineTokens(lineTokens) {\n        this._tokens.push(lineTokens);\n    }\n}\n","import { ContiguousMultilineTokens } from './contiguousMultilineTokens.js';\nexport class ContiguousMultilineTokensBuilder {\n    constructor() {\n        this._tokens = [];\n    }\n    add(lineNumber, lineTokens) {\n        if (this._tokens.length > 0) {\n            const last = this._tokens[this._tokens.length - 1];\n            if (last.endLineNumber + 1 === lineNumber) {\n                // append\n                last.appendLineTokens(lineTokens);\n                return;\n            }\n        }\n        this._tokens.push(new ContiguousMultilineTokens(lineNumber, [lineTokens]));\n    }\n    finalize() {\n        return this._tokens;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineTokens } from './lineTokens.js';\nexport const EMPTY_LINE_TOKENS = (new Uint32Array(0)).buffer;\nexport class ContiguousTokensEditing {\n    static deleteBeginning(lineTokens, toChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        return ContiguousTokensEditing.delete(lineTokens, 0, toChIndex);\n    }\n    static deleteEnding(lineTokens, fromChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const lineTextLength = tokens[tokens.length - 2];\n        return ContiguousTokensEditing.delete(lineTokens, fromChIndex, lineTextLength);\n    }\n    static delete(lineTokens, fromChIndex, toChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS || fromChIndex === toChIndex) {\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const tokensCount = (tokens.length >>> 1);\n        // special case: deleting everything\n        if (fromChIndex === 0 && tokens[tokens.length - 2] === toChIndex) {\n            return EMPTY_LINE_TOKENS;\n        }\n        const fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, fromChIndex);\n        const fromTokenStartOffset = (fromTokenIndex > 0 ? tokens[(fromTokenIndex - 1) << 1] : 0);\n        const fromTokenEndOffset = tokens[fromTokenIndex << 1];\n        if (toChIndex < fromTokenEndOffset) {\n            // the delete range is inside a single token\n            const delta = (toChIndex - fromChIndex);\n            for (let i = fromTokenIndex; i < tokensCount; i++) {\n                tokens[i << 1] -= delta;\n            }\n            return lineTokens;\n        }\n        let dest;\n        let lastEnd;\n        if (fromTokenStartOffset !== fromChIndex) {\n            tokens[fromTokenIndex << 1] = fromChIndex;\n            dest = ((fromTokenIndex + 1) << 1);\n            lastEnd = fromChIndex;\n        }\n        else {\n            dest = (fromTokenIndex << 1);\n            lastEnd = fromTokenStartOffset;\n        }\n        const delta = (toChIndex - fromChIndex);\n        for (let tokenIndex = fromTokenIndex + 1; tokenIndex < tokensCount; tokenIndex++) {\n            const tokenEndOffset = tokens[tokenIndex << 1] - delta;\n            if (tokenEndOffset > lastEnd) {\n                tokens[dest++] = tokenEndOffset;\n                tokens[dest++] = tokens[(tokenIndex << 1) + 1];\n                lastEnd = tokenEndOffset;\n            }\n        }\n        if (dest === tokens.length) {\n            // nothing to trim\n            return lineTokens;\n        }\n        const tmp = new Uint32Array(dest);\n        tmp.set(tokens.subarray(0, dest), 0);\n        return tmp.buffer;\n    }\n    static append(lineTokens, _otherTokens) {\n        if (_otherTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        if (lineTokens === EMPTY_LINE_TOKENS) {\n            return _otherTokens;\n        }\n        if (lineTokens === null) {\n            return lineTokens;\n        }\n        if (_otherTokens === null) {\n            // cannot determine combined line length...\n            return null;\n        }\n        const myTokens = toUint32Array(lineTokens);\n        const otherTokens = toUint32Array(_otherTokens);\n        const otherTokensCount = (otherTokens.length >>> 1);\n        const result = new Uint32Array(myTokens.length + otherTokens.length);\n        result.set(myTokens, 0);\n        let dest = myTokens.length;\n        const delta = myTokens[myTokens.length - 2];\n        for (let i = 0; i < otherTokensCount; i++) {\n            result[dest++] = otherTokens[(i << 1)] + delta;\n            result[dest++] = otherTokens[(i << 1) + 1];\n        }\n        return result.buffer;\n    }\n    static insert(lineTokens, chIndex, textLength) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            // nothing to do\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const tokensCount = (tokens.length >>> 1);\n        let fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, chIndex);\n        if (fromTokenIndex > 0) {\n            const fromTokenStartOffset = tokens[(fromTokenIndex - 1) << 1];\n            if (fromTokenStartOffset === chIndex) {\n                fromTokenIndex--;\n            }\n        }\n        for (let tokenIndex = fromTokenIndex; tokenIndex < tokensCount; tokenIndex++) {\n            tokens[tokenIndex << 1] += textLength;\n        }\n        return lineTokens;\n    }\n}\nexport function toUint32Array(arr) {\n    if (arr instanceof Uint32Array) {\n        return arr;\n    }\n    else {\n        return new Uint32Array(arr);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { ContiguousTokensEditing, EMPTY_LINE_TOKENS, toUint32Array } from './contiguousTokensEditing.js';\nimport { LineTokens } from './lineTokens.js';\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\n/**\n * Represents contiguous tokens in a text model.\n */\nexport class ContiguousTokensStore {\n    constructor(languageIdCodec) {\n        this._lineTokens = [];\n        this._len = 0;\n        this._languageIdCodec = languageIdCodec;\n    }\n    flush() {\n        this._lineTokens = [];\n        this._len = 0;\n    }\n    get hasTokens() {\n        return this._lineTokens.length > 0;\n    }\n    getTokens(topLevelLanguageId, lineIndex, lineText) {\n        let rawLineTokens = null;\n        if (lineIndex < this._len) {\n            rawLineTokens = this._lineTokens[lineIndex];\n        }\n        if (rawLineTokens !== null && rawLineTokens !== EMPTY_LINE_TOKENS) {\n            return new LineTokens(toUint32Array(rawLineTokens), lineText, this._languageIdCodec);\n        }\n        const lineTokens = new Uint32Array(2);\n        lineTokens[0] = lineText.length;\n        lineTokens[1] = getDefaultMetadata(this._languageIdCodec.encodeLanguageId(topLevelLanguageId));\n        return new LineTokens(lineTokens, lineText, this._languageIdCodec);\n    }\n    static _massageTokens(topLevelLanguageId, lineTextLength, _tokens) {\n        const tokens = _tokens ? toUint32Array(_tokens) : null;\n        if (lineTextLength === 0) {\n            let hasDifferentLanguageId = false;\n            if (tokens && tokens.length > 1) {\n                hasDifferentLanguageId = (TokenMetadata.getLanguageId(tokens[1]) !== topLevelLanguageId);\n            }\n            if (!hasDifferentLanguageId) {\n                return EMPTY_LINE_TOKENS;\n            }\n        }\n        if (!tokens || tokens.length === 0) {\n            const tokens = new Uint32Array(2);\n            tokens[0] = lineTextLength;\n            tokens[1] = getDefaultMetadata(topLevelLanguageId);\n            return tokens.buffer;\n        }\n        // Ensure the last token covers the end of the text\n        tokens[tokens.length - 2] = lineTextLength;\n        if (tokens.byteOffset === 0 && tokens.byteLength === tokens.buffer.byteLength) {\n            // Store directly the ArrayBuffer pointer to save an object\n            return tokens.buffer;\n        }\n        return tokens;\n    }\n    _ensureLine(lineIndex) {\n        while (lineIndex >= this._len) {\n            this._lineTokens[this._len] = null;\n            this._len++;\n        }\n    }\n    _deleteLines(start, deleteCount) {\n        if (deleteCount === 0) {\n            return;\n        }\n        if (start + deleteCount > this._len) {\n            deleteCount = this._len - start;\n        }\n        this._lineTokens.splice(start, deleteCount);\n        this._len -= deleteCount;\n    }\n    _insertLines(insertIndex, insertCount) {\n        if (insertCount === 0) {\n            return;\n        }\n        const lineTokens = [];\n        for (let i = 0; i < insertCount; i++) {\n            lineTokens[i] = null;\n        }\n        this._lineTokens = arrays.arrayInsert(this._lineTokens, insertIndex, lineTokens);\n        this._len += insertCount;\n    }\n    setTokens(topLevelLanguageId, lineIndex, lineTextLength, _tokens, checkEquality) {\n        const tokens = ContiguousTokensStore._massageTokens(this._languageIdCodec.encodeLanguageId(topLevelLanguageId), lineTextLength, _tokens);\n        this._ensureLine(lineIndex);\n        const oldTokens = this._lineTokens[lineIndex];\n        this._lineTokens[lineIndex] = tokens;\n        if (checkEquality) {\n            return !ContiguousTokensStore._equals(oldTokens, tokens);\n        }\n        return false;\n    }\n    static _equals(_a, _b) {\n        if (!_a || !_b) {\n            return !_a && !_b;\n        }\n        const a = toUint32Array(_a);\n        const b = toUint32Array(_b);\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0, len = a.length; i < len; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //#region Editing\n    acceptEdit(range, eolCount, firstLineLength) {\n        this._acceptDeleteRange(range);\n        this._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength);\n    }\n    _acceptDeleteRange(range) {\n        const firstLineIndex = range.startLineNumber - 1;\n        if (firstLineIndex >= this._len) {\n            return;\n        }\n        if (range.startLineNumber === range.endLineNumber) {\n            if (range.startColumn === range.endColumn) {\n                // Nothing to delete\n                return;\n            }\n            this._lineTokens[firstLineIndex] = ContiguousTokensEditing.delete(this._lineTokens[firstLineIndex], range.startColumn - 1, range.endColumn - 1);\n            return;\n        }\n        this._lineTokens[firstLineIndex] = ContiguousTokensEditing.deleteEnding(this._lineTokens[firstLineIndex], range.startColumn - 1);\n        const lastLineIndex = range.endLineNumber - 1;\n        let lastLineTokens = null;\n        if (lastLineIndex < this._len) {\n            lastLineTokens = ContiguousTokensEditing.deleteBeginning(this._lineTokens[lastLineIndex], range.endColumn - 1);\n        }\n        // Take remaining text on last line and append it to remaining text on first line\n        this._lineTokens[firstLineIndex] = ContiguousTokensEditing.append(this._lineTokens[firstLineIndex], lastLineTokens);\n        // Delete middle lines\n        this._deleteLines(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n    }\n    _acceptInsertText(position, eolCount, firstLineLength) {\n        if (eolCount === 0 && firstLineLength === 0) {\n            // Nothing to insert\n            return;\n        }\n        const lineIndex = position.lineNumber - 1;\n        if (lineIndex >= this._len) {\n            return;\n        }\n        if (eolCount === 0) {\n            // Inserting text on one line\n            this._lineTokens[lineIndex] = ContiguousTokensEditing.insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n            return;\n        }\n        this._lineTokens[lineIndex] = ContiguousTokensEditing.deleteEnding(this._lineTokens[lineIndex], position.column - 1);\n        this._lineTokens[lineIndex] = ContiguousTokensEditing.insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n        this._insertLines(position.lineNumber, eolCount);\n    }\n    //#endregion\n    setMultilineTokens(tokens, textModel) {\n        if (tokens.length === 0) {\n            return { changes: [] };\n        }\n        const ranges = [];\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const element = tokens[i];\n            let minChangedLineNumber = 0;\n            let maxChangedLineNumber = 0;\n            let hasChange = false;\n            for (let lineNumber = element.startLineNumber; lineNumber <= element.endLineNumber; lineNumber++) {\n                if (hasChange) {\n                    this.setTokens(textModel.getLanguageId(), lineNumber - 1, textModel.getLineLength(lineNumber), element.getLineTokens(lineNumber), false);\n                    maxChangedLineNumber = lineNumber;\n                }\n                else {\n                    const lineHasChange = this.setTokens(textModel.getLanguageId(), lineNumber - 1, textModel.getLineLength(lineNumber), element.getLineTokens(lineNumber), true);\n                    if (lineHasChange) {\n                        hasChange = true;\n                        minChangedLineNumber = lineNumber;\n                        maxChangedLineNumber = lineNumber;\n                    }\n                }\n            }\n            if (hasChange) {\n                ranges.push({ fromLineNumber: minChangedLineNumber, toLineNumber: maxChangedLineNumber, });\n            }\n        }\n        return { changes: ranges };\n    }\n}\nfunction getDefaultMetadata(topLevelLanguageId) {\n    return ((topLevelLanguageId << 0 /* MetadataConsts.LANGUAGEID_OFFSET */)\n        | (0 /* StandardTokenType.Other */ << 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */)\n        | (0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n        | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n        | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)\n        // If there is no grammar, we just take a guess and try to match brackets.\n        | (1024 /* MetadataConsts.BALANCED_BRACKETS_MASK */)) >>> 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\nexport class LineTokens {\n    static createEmpty(lineContent, decoder) {\n        const defaultMetadata = LineTokens.defaultTokenMetadata;\n        const tokens = new Uint32Array(2);\n        tokens[0] = lineContent.length;\n        tokens[1] = defaultMetadata;\n        return new LineTokens(tokens, lineContent, decoder);\n    }\n    constructor(tokens, text, decoder) {\n        this._lineTokensBrand = undefined;\n        this._tokens = tokens;\n        this._tokensCount = (this._tokens.length >>> 1);\n        this._text = text;\n        this._languageIdCodec = decoder;\n    }\n    equals(other) {\n        if (other instanceof LineTokens) {\n            return this.slicedEquals(other, 0, this._tokensCount);\n        }\n        return false;\n    }\n    slicedEquals(other, sliceFromTokenIndex, sliceTokenCount) {\n        if (this._text !== other._text) {\n            return false;\n        }\n        if (this._tokensCount !== other._tokensCount) {\n            return false;\n        }\n        const from = (sliceFromTokenIndex << 1);\n        const to = from + (sliceTokenCount << 1);\n        for (let i = from; i < to; i++) {\n            if (this._tokens[i] !== other._tokens[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    getLineContent() {\n        return this._text;\n    }\n    getCount() {\n        return this._tokensCount;\n    }\n    getStartOffset(tokenIndex) {\n        if (tokenIndex > 0) {\n            return this._tokens[(tokenIndex - 1) << 1];\n        }\n        return 0;\n    }\n    getMetadata(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return metadata;\n    }\n    getLanguageId(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        const languageId = TokenMetadata.getLanguageId(metadata);\n        return this._languageIdCodec.decodeLanguageId(languageId);\n    }\n    getStandardTokenType(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getTokenType(metadata);\n    }\n    getForeground(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getForeground(metadata);\n    }\n    getClassName(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getClassNameFromMetadata(metadata);\n    }\n    getInlineStyle(tokenIndex, colorMap) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\n    }\n    getPresentation(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getPresentationFromMetadata(metadata);\n    }\n    getEndOffset(tokenIndex) {\n        return this._tokens[tokenIndex << 1];\n    }\n    /**\n     * Find the token containing offset `offset`.\n     * @param offset The search offset\n     * @return The index of the token containing the offset.\n     */\n    findTokenIndexAtOffset(offset) {\n        return LineTokens.findIndexInTokensArray(this._tokens, offset);\n    }\n    inflate() {\n        return this;\n    }\n    sliceAndInflate(startOffset, endOffset, deltaOffset) {\n        return new SliceLineTokens(this, startOffset, endOffset, deltaOffset);\n    }\n    static convertToEndOffset(tokens, lineTextLength) {\n        const tokenCount = (tokens.length >>> 1);\n        const lastTokenIndex = tokenCount - 1;\n        for (let tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\n            tokens[tokenIndex << 1] = tokens[(tokenIndex + 1) << 1];\n        }\n        tokens[lastTokenIndex << 1] = lineTextLength;\n    }\n    static findIndexInTokensArray(tokens, desiredIndex) {\n        if (tokens.length <= 2) {\n            return 0;\n        }\n        let low = 0;\n        let high = (tokens.length >>> 1) - 1;\n        while (low < high) {\n            const mid = low + Math.floor((high - low) / 2);\n            const endOffset = tokens[(mid << 1)];\n            if (endOffset === desiredIndex) {\n                return mid + 1;\n            }\n            else if (endOffset < desiredIndex) {\n                low = mid + 1;\n            }\n            else if (endOffset > desiredIndex) {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    /**\n     * @pure\n     * @param insertTokens Must be sorted by offset.\n    */\n    withInserted(insertTokens) {\n        if (insertTokens.length === 0) {\n            return this;\n        }\n        let nextOriginalTokenIdx = 0;\n        let nextInsertTokenIdx = 0;\n        let text = '';\n        const newTokens = new Array();\n        let originalEndOffset = 0;\n        while (true) {\n            const nextOriginalTokenEndOffset = nextOriginalTokenIdx < this._tokensCount ? this._tokens[nextOriginalTokenIdx << 1] : -1;\n            const nextInsertToken = nextInsertTokenIdx < insertTokens.length ? insertTokens[nextInsertTokenIdx] : null;\n            if (nextOriginalTokenEndOffset !== -1 && (nextInsertToken === null || nextOriginalTokenEndOffset <= nextInsertToken.offset)) {\n                // original token ends before next insert token\n                text += this._text.substring(originalEndOffset, nextOriginalTokenEndOffset);\n                const metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n                newTokens.push(text.length, metadata);\n                nextOriginalTokenIdx++;\n                originalEndOffset = nextOriginalTokenEndOffset;\n            }\n            else if (nextInsertToken) {\n                if (nextInsertToken.offset > originalEndOffset) {\n                    // insert token is in the middle of the next token.\n                    text += this._text.substring(originalEndOffset, nextInsertToken.offset);\n                    const metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n                    newTokens.push(text.length, metadata);\n                    originalEndOffset = nextInsertToken.offset;\n                }\n                text += nextInsertToken.text;\n                newTokens.push(text.length, nextInsertToken.tokenMetadata);\n                nextInsertTokenIdx++;\n            }\n            else {\n                break;\n            }\n        }\n        return new LineTokens(new Uint32Array(newTokens), text, this._languageIdCodec);\n    }\n}\nLineTokens.defaultTokenMetadata = ((0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n    | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n    | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\nclass SliceLineTokens {\n    constructor(source, startOffset, endOffset, deltaOffset) {\n        this._source = source;\n        this._startOffset = startOffset;\n        this._endOffset = endOffset;\n        this._deltaOffset = deltaOffset;\n        this._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\n        this._tokensCount = 0;\n        for (let i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\n            const tokenStartOffset = source.getStartOffset(i);\n            if (tokenStartOffset >= endOffset) {\n                break;\n            }\n            this._tokensCount++;\n        }\n    }\n    getMetadata(tokenIndex) {\n        return this._source.getMetadata(this._firstTokenIndex + tokenIndex);\n    }\n    getLanguageId(tokenIndex) {\n        return this._source.getLanguageId(this._firstTokenIndex + tokenIndex);\n    }\n    getLineContent() {\n        return this._source.getLineContent().substring(this._startOffset, this._endOffset);\n    }\n    equals(other) {\n        if (other instanceof SliceLineTokens) {\n            return (this._startOffset === other._startOffset\n                && this._endOffset === other._endOffset\n                && this._deltaOffset === other._deltaOffset\n                && this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount));\n        }\n        return false;\n    }\n    getCount() {\n        return this._tokensCount;\n    }\n    getForeground(tokenIndex) {\n        return this._source.getForeground(this._firstTokenIndex + tokenIndex);\n    }\n    getEndOffset(tokenIndex) {\n        const tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\n        return Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\n    }\n    getClassName(tokenIndex) {\n        return this._source.getClassName(this._firstTokenIndex + tokenIndex);\n    }\n    getInlineStyle(tokenIndex, colorMap) {\n        return this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\n    }\n    getPresentation(tokenIndex) {\n        return this._source.getPresentation(this._firstTokenIndex + tokenIndex);\n    }\n    findTokenIndexAtOffset(offset) {\n        return this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { LineTokens } from './lineTokens.js';\n/**\n * Represents sparse tokens in a text model.\n */\nexport class SparseTokensStore {\n    constructor(languageIdCodec) {\n        this._pieces = [];\n        this._isComplete = false;\n        this._languageIdCodec = languageIdCodec;\n    }\n    flush() {\n        this._pieces = [];\n        this._isComplete = false;\n    }\n    isEmpty() {\n        return (this._pieces.length === 0);\n    }\n    set(pieces, isComplete) {\n        this._pieces = pieces || [];\n        this._isComplete = isComplete;\n    }\n    setPartial(_range, pieces) {\n        // console.log(`setPartial ${_range} ${pieces.map(p => p.toString()).join(', ')}`);\n        let range = _range;\n        if (pieces.length > 0) {\n            const _firstRange = pieces[0].getRange();\n            const _lastRange = pieces[pieces.length - 1].getRange();\n            if (!_firstRange || !_lastRange) {\n                return _range;\n            }\n            range = _range.plusRange(_firstRange).plusRange(_lastRange);\n        }\n        let insertPosition = null;\n        for (let i = 0, len = this._pieces.length; i < len; i++) {\n            const piece = this._pieces[i];\n            if (piece.endLineNumber < range.startLineNumber) {\n                // this piece is before the range\n                continue;\n            }\n            if (piece.startLineNumber > range.endLineNumber) {\n                // this piece is after the range, so mark the spot before this piece\n                // as a good insertion position and stop looping\n                insertPosition = insertPosition || { index: i };\n                break;\n            }\n            // this piece might intersect with the range\n            piece.removeTokens(range);\n            if (piece.isEmpty()) {\n                // remove the piece if it became empty\n                this._pieces.splice(i, 1);\n                i--;\n                len--;\n                continue;\n            }\n            if (piece.endLineNumber < range.startLineNumber) {\n                // after removal, this piece is before the range\n                continue;\n            }\n            if (piece.startLineNumber > range.endLineNumber) {\n                // after removal, this piece is after the range\n                insertPosition = insertPosition || { index: i };\n                continue;\n            }\n            // after removal, this piece contains the range\n            const [a, b] = piece.split(range);\n            if (a.isEmpty()) {\n                // this piece is actually after the range\n                insertPosition = insertPosition || { index: i };\n                continue;\n            }\n            if (b.isEmpty()) {\n                // this piece is actually before the range\n                continue;\n            }\n            this._pieces.splice(i, 1, a, b);\n            i++;\n            len++;\n            insertPosition = insertPosition || { index: i };\n        }\n        insertPosition = insertPosition || { index: this._pieces.length };\n        if (pieces.length > 0) {\n            this._pieces = arrays.arrayInsert(this._pieces, insertPosition.index, pieces);\n        }\n        // console.log(`I HAVE ${this._pieces.length} pieces`);\n        // console.log(`${this._pieces.map(p => p.toString()).join('\\n')}`);\n        return range;\n    }\n    isComplete() {\n        return this._isComplete;\n    }\n    addSparseTokens(lineNumber, aTokens) {\n        if (aTokens.getLineContent().length === 0) {\n            // Don't do anything for empty lines\n            return aTokens;\n        }\n        const pieces = this._pieces;\n        if (pieces.length === 0) {\n            return aTokens;\n        }\n        const pieceIndex = SparseTokensStore._findFirstPieceWithLine(pieces, lineNumber);\n        const bTokens = pieces[pieceIndex].getLineTokens(lineNumber);\n        if (!bTokens) {\n            return aTokens;\n        }\n        const aLen = aTokens.getCount();\n        const bLen = bTokens.getCount();\n        let aIndex = 0;\n        const result = [];\n        let resultLen = 0;\n        let lastEndOffset = 0;\n        const emitToken = (endOffset, metadata) => {\n            if (endOffset === lastEndOffset) {\n                return;\n            }\n            lastEndOffset = endOffset;\n            result[resultLen++] = endOffset;\n            result[resultLen++] = metadata;\n        };\n        for (let bIndex = 0; bIndex < bLen; bIndex++) {\n            const bStartCharacter = bTokens.getStartCharacter(bIndex);\n            const bEndCharacter = bTokens.getEndCharacter(bIndex);\n            const bMetadata = bTokens.getMetadata(bIndex);\n            const bMask = (((bMetadata & 1 /* MetadataConsts.SEMANTIC_USE_ITALIC */) ? 2048 /* MetadataConsts.ITALIC_MASK */ : 0)\n                | ((bMetadata & 2 /* MetadataConsts.SEMANTIC_USE_BOLD */) ? 4096 /* MetadataConsts.BOLD_MASK */ : 0)\n                | ((bMetadata & 4 /* MetadataConsts.SEMANTIC_USE_UNDERLINE */) ? 8192 /* MetadataConsts.UNDERLINE_MASK */ : 0)\n                | ((bMetadata & 8 /* MetadataConsts.SEMANTIC_USE_STRIKETHROUGH */) ? 16384 /* MetadataConsts.STRIKETHROUGH_MASK */ : 0)\n                | ((bMetadata & 16 /* MetadataConsts.SEMANTIC_USE_FOREGROUND */) ? 16744448 /* MetadataConsts.FOREGROUND_MASK */ : 0)\n                | ((bMetadata & 32 /* MetadataConsts.SEMANTIC_USE_BACKGROUND */) ? 4278190080 /* MetadataConsts.BACKGROUND_MASK */ : 0)) >>> 0;\n            const aMask = (~bMask) >>> 0;\n            // push any token from `a` that is before `b`\n            while (aIndex < aLen && aTokens.getEndOffset(aIndex) <= bStartCharacter) {\n                emitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n                aIndex++;\n            }\n            // push the token from `a` if it intersects the token from `b`\n            if (aIndex < aLen && aTokens.getStartOffset(aIndex) < bStartCharacter) {\n                emitToken(bStartCharacter, aTokens.getMetadata(aIndex));\n            }\n            // skip any tokens from `a` that are contained inside `b`\n            while (aIndex < aLen && aTokens.getEndOffset(aIndex) < bEndCharacter) {\n                emitToken(aTokens.getEndOffset(aIndex), (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n                aIndex++;\n            }\n            if (aIndex < aLen) {\n                emitToken(bEndCharacter, (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n                if (aTokens.getEndOffset(aIndex) === bEndCharacter) {\n                    // `a` ends exactly at the same spot as `b`!\n                    aIndex++;\n                }\n            }\n            else {\n                const aMergeIndex = Math.min(Math.max(0, aIndex - 1), aLen - 1);\n                // push the token from `b`\n                emitToken(bEndCharacter, (aTokens.getMetadata(aMergeIndex) & aMask) | (bMetadata & bMask));\n            }\n        }\n        // push the remaining tokens from `a`\n        while (aIndex < aLen) {\n            emitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n            aIndex++;\n        }\n        return new LineTokens(new Uint32Array(result), aTokens.getLineContent(), this._languageIdCodec);\n    }\n    static _findFirstPieceWithLine(pieces, lineNumber) {\n        let low = 0;\n        let high = pieces.length - 1;\n        while (low < high) {\n            let mid = low + Math.floor((high - low) / 2);\n            if (pieces[mid].endLineNumber < lineNumber) {\n                low = mid + 1;\n            }\n            else if (pieces[mid].startLineNumber > lineNumber) {\n                high = mid - 1;\n            }\n            else {\n                while (mid > low && pieces[mid - 1].startLineNumber <= lineNumber && lineNumber <= pieces[mid - 1].endLineNumber) {\n                    mid--;\n                }\n                return mid;\n            }\n        }\n        return low;\n    }\n    acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        for (const piece of this._pieces) {\n            piece.acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../base/common/lifecycle.js';\nexport class ViewEventHandler extends Disposable {\n    constructor() {\n        super();\n        this._shouldRender = true;\n    }\n    shouldRender() {\n        return this._shouldRender;\n    }\n    forceShouldRender() {\n        this._shouldRender = true;\n    }\n    setShouldRender() {\n        this._shouldRender = true;\n    }\n    onDidRender() {\n        this._shouldRender = false;\n    }\n    // --- begin event handlers\n    onCompositionStart(e) {\n        return false;\n    }\n    onCompositionEnd(e) {\n        return false;\n    }\n    onConfigurationChanged(e) {\n        return false;\n    }\n    onCursorStateChanged(e) {\n        return false;\n    }\n    onDecorationsChanged(e) {\n        return false;\n    }\n    onFlushed(e) {\n        return false;\n    }\n    onFocusChanged(e) {\n        return false;\n    }\n    onLanguageConfigurationChanged(e) {\n        return false;\n    }\n    onLineMappingChanged(e) {\n        return false;\n    }\n    onLinesChanged(e) {\n        return false;\n    }\n    onLinesDeleted(e) {\n        return false;\n    }\n    onLinesInserted(e) {\n        return false;\n    }\n    onRevealRangeRequest(e) {\n        return false;\n    }\n    onScrollChanged(e) {\n        return false;\n    }\n    onThemeChanged(e) {\n        return false;\n    }\n    onTokensChanged(e) {\n        return false;\n    }\n    onTokensColorsChanged(e) {\n        return false;\n    }\n    onZonesChanged(e) {\n        return false;\n    }\n    // --- end event handlers\n    handleEvents(events) {\n        let shouldRender = false;\n        for (let i = 0, len = events.length; i < len; i++) {\n            const e = events[i];\n            switch (e.type) {\n                case 0 /* viewEvents.ViewEventType.ViewCompositionStart */:\n                    if (this.onCompositionStart(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 1 /* viewEvents.ViewEventType.ViewCompositionEnd */:\n                    if (this.onCompositionEnd(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 2 /* viewEvents.ViewEventType.ViewConfigurationChanged */:\n                    if (this.onConfigurationChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 3 /* viewEvents.ViewEventType.ViewCursorStateChanged */:\n                    if (this.onCursorStateChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 4 /* viewEvents.ViewEventType.ViewDecorationsChanged */:\n                    if (this.onDecorationsChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 5 /* viewEvents.ViewEventType.ViewFlushed */:\n                    if (this.onFlushed(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 6 /* viewEvents.ViewEventType.ViewFocusChanged */:\n                    if (this.onFocusChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 7 /* viewEvents.ViewEventType.ViewLanguageConfigurationChanged */:\n                    if (this.onLanguageConfigurationChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 8 /* viewEvents.ViewEventType.ViewLineMappingChanged */:\n                    if (this.onLineMappingChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 9 /* viewEvents.ViewEventType.ViewLinesChanged */:\n                    if (this.onLinesChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 10 /* viewEvents.ViewEventType.ViewLinesDeleted */:\n                    if (this.onLinesDeleted(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 11 /* viewEvents.ViewEventType.ViewLinesInserted */:\n                    if (this.onLinesInserted(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 12 /* viewEvents.ViewEventType.ViewRevealRangeRequest */:\n                    if (this.onRevealRangeRequest(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 13 /* viewEvents.ViewEventType.ViewScrollChanged */:\n                    if (this.onScrollChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 15 /* viewEvents.ViewEventType.ViewTokensChanged */:\n                    if (this.onTokensChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 14 /* viewEvents.ViewEventType.ViewThemeChanged */:\n                    if (this.onThemeChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 16 /* viewEvents.ViewEventType.ViewTokensColorsChanged */:\n                    if (this.onTokensColorsChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 17 /* viewEvents.ViewEventType.ViewZonesChanged */:\n                    if (this.onZonesChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                default:\n                    console.info('View received unknown event: ');\n                    console.info(e);\n            }\n        }\n        if (shouldRender) {\n            this._shouldRender = true;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ViewCompositionStartEvent {\n    constructor() {\n        this.type = 0 /* ViewEventType.ViewCompositionStart */;\n    }\n}\nexport class ViewCompositionEndEvent {\n    constructor() {\n        this.type = 1 /* ViewEventType.ViewCompositionEnd */;\n    }\n}\nexport class ViewConfigurationChangedEvent {\n    constructor(source) {\n        this.type = 2 /* ViewEventType.ViewConfigurationChanged */;\n        this._source = source;\n    }\n    hasChanged(id) {\n        return this._source.hasChanged(id);\n    }\n}\nexport class ViewCursorStateChangedEvent {\n    constructor(selections, modelSelections, reason) {\n        this.selections = selections;\n        this.modelSelections = modelSelections;\n        this.reason = reason;\n        this.type = 3 /* ViewEventType.ViewCursorStateChanged */;\n    }\n}\nexport class ViewDecorationsChangedEvent {\n    constructor(source) {\n        this.type = 4 /* ViewEventType.ViewDecorationsChanged */;\n        if (source) {\n            this.affectsMinimap = source.affectsMinimap;\n            this.affectsOverviewRuler = source.affectsOverviewRuler;\n            this.affectsGlyphMargin = source.affectsGlyphMargin;\n        }\n        else {\n            this.affectsMinimap = true;\n            this.affectsOverviewRuler = true;\n            this.affectsGlyphMargin = true;\n        }\n    }\n}\nexport class ViewFlushedEvent {\n    constructor() {\n        this.type = 5 /* ViewEventType.ViewFlushed */;\n        // Nothing to do\n    }\n}\nexport class ViewFocusChangedEvent {\n    constructor(isFocused) {\n        this.type = 6 /* ViewEventType.ViewFocusChanged */;\n        this.isFocused = isFocused;\n    }\n}\nexport class ViewLanguageConfigurationEvent {\n    constructor() {\n        this.type = 7 /* ViewEventType.ViewLanguageConfigurationChanged */;\n    }\n}\nexport class ViewLineMappingChangedEvent {\n    constructor() {\n        this.type = 8 /* ViewEventType.ViewLineMappingChanged */;\n        // Nothing to do\n    }\n}\nexport class ViewLinesChangedEvent {\n    constructor(\n    /**\n     * The first line that has changed.\n     */\n    fromLineNumber, \n    /**\n     * The number of lines that have changed.\n     */\n    count) {\n        this.fromLineNumber = fromLineNumber;\n        this.count = count;\n        this.type = 9 /* ViewEventType.ViewLinesChanged */;\n    }\n}\nexport class ViewLinesDeletedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 10 /* ViewEventType.ViewLinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewLinesInsertedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 11 /* ViewEventType.ViewLinesInserted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewRevealRangeRequestEvent {\n    constructor(\n    /**\n     * Source of the call that caused the event.\n     */\n    source, \n    /**\n     * Reduce the revealing to a minimum (e.g. avoid scrolling if the bounding box is visible and near the viewport edge).\n     */\n    minimalReveal, \n    /**\n     * Range to be reavealed.\n     */\n    range, \n    /**\n     * Selections to be revealed.\n     */\n    selections, \n    /**\n     * The vertical reveal strategy.\n     */\n    verticalType, \n    /**\n     * If true: there should be a horizontal & vertical revealing.\n     * If false: there should be just a vertical revealing.\n     */\n    revealHorizontal, \n    /**\n     * The scroll type.\n     */\n    scrollType) {\n        this.source = source;\n        this.minimalReveal = minimalReveal;\n        this.range = range;\n        this.selections = selections;\n        this.verticalType = verticalType;\n        this.revealHorizontal = revealHorizontal;\n        this.scrollType = scrollType;\n        this.type = 12 /* ViewEventType.ViewRevealRangeRequest */;\n    }\n}\nexport class ViewScrollChangedEvent {\n    constructor(source) {\n        this.type = 13 /* ViewEventType.ViewScrollChanged */;\n        this.scrollWidth = source.scrollWidth;\n        this.scrollLeft = source.scrollLeft;\n        this.scrollHeight = source.scrollHeight;\n        this.scrollTop = source.scrollTop;\n        this.scrollWidthChanged = source.scrollWidthChanged;\n        this.scrollLeftChanged = source.scrollLeftChanged;\n        this.scrollHeightChanged = source.scrollHeightChanged;\n        this.scrollTopChanged = source.scrollTopChanged;\n    }\n}\nexport class ViewThemeChangedEvent {\n    constructor(theme) {\n        this.theme = theme;\n        this.type = 14 /* ViewEventType.ViewThemeChanged */;\n    }\n}\nexport class ViewTokensChangedEvent {\n    constructor(ranges) {\n        this.type = 15 /* ViewEventType.ViewTokensChanged */;\n        this.ranges = ranges;\n    }\n}\nexport class ViewTokensColorsChangedEvent {\n    constructor() {\n        this.type = 16 /* ViewEventType.ViewTokensColorsChanged */;\n        // Nothing to do\n    }\n}\nexport class ViewZonesChangedEvent {\n    constructor() {\n        this.type = 17 /* ViewEventType.ViewZonesChanged */;\n        // Nothing to do\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nexport class LineDecoration {\n    constructor(startColumn, endColumn, className, type) {\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.className = className;\n        this.type = type;\n        this._lineDecorationBrand = undefined;\n    }\n    static _equals(a, b) {\n        return (a.startColumn === b.startColumn\n            && a.endColumn === b.endColumn\n            && a.className === b.className\n            && a.type === b.type);\n    }\n    static equalsArr(a, b) {\n        const aLen = a.length;\n        const bLen = b.length;\n        if (aLen !== bLen) {\n            return false;\n        }\n        for (let i = 0; i < aLen; i++) {\n            if (!LineDecoration._equals(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static extractWrapped(arr, startOffset, endOffset) {\n        if (arr.length === 0) {\n            return arr;\n        }\n        const startColumn = startOffset + 1;\n        const endColumn = endOffset + 1;\n        const lineLength = endOffset - startOffset;\n        const r = [];\n        let rLength = 0;\n        for (const dec of arr) {\n            if (dec.endColumn <= startColumn || dec.startColumn >= endColumn) {\n                continue;\n            }\n            r[rLength++] = new LineDecoration(Math.max(1, dec.startColumn - startColumn + 1), Math.min(lineLength + 1, dec.endColumn - startColumn + 1), dec.className, dec.type);\n        }\n        return r;\n    }\n    static filter(lineDecorations, lineNumber, minLineColumn, maxLineColumn) {\n        if (lineDecorations.length === 0) {\n            return [];\n        }\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = lineDecorations.length; i < len; i++) {\n            const d = lineDecorations[i];\n            const range = d.range;\n            if (range.endLineNumber < lineNumber || range.startLineNumber > lineNumber) {\n                // Ignore decorations that sit outside this line\n                continue;\n            }\n            if (range.isEmpty() && (d.type === 0 /* InlineDecorationType.Regular */ || d.type === 3 /* InlineDecorationType.RegularAffectingLetterSpacing */)) {\n                // Ignore empty range decorations\n                continue;\n            }\n            const startColumn = (range.startLineNumber === lineNumber ? range.startColumn : minLineColumn);\n            const endColumn = (range.endLineNumber === lineNumber ? range.endColumn : maxLineColumn);\n            result[resultLen++] = new LineDecoration(startColumn, endColumn, d.inlineClassName, d.type);\n        }\n        return result;\n    }\n    static _typeCompare(a, b) {\n        const ORDER = [2, 0, 1, 3];\n        return ORDER[a] - ORDER[b];\n    }\n    static compare(a, b) {\n        if (a.startColumn !== b.startColumn) {\n            return a.startColumn - b.startColumn;\n        }\n        if (a.endColumn !== b.endColumn) {\n            return a.endColumn - b.endColumn;\n        }\n        const typeCmp = LineDecoration._typeCompare(a.type, b.type);\n        if (typeCmp !== 0) {\n            return typeCmp;\n        }\n        if (a.className !== b.className) {\n            return a.className < b.className ? -1 : 1;\n        }\n        return 0;\n    }\n}\nexport class DecorationSegment {\n    constructor(startOffset, endOffset, className, metadata) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.className = className;\n        this.metadata = metadata;\n    }\n}\nclass Stack {\n    constructor() {\n        this.stopOffsets = [];\n        this.classNames = [];\n        this.metadata = [];\n        this.count = 0;\n    }\n    static _metadata(metadata) {\n        let result = 0;\n        for (let i = 0, len = metadata.length; i < len; i++) {\n            result |= metadata[i];\n        }\n        return result;\n    }\n    consumeLowerThan(maxStopOffset, nextStartOffset, result) {\n        while (this.count > 0 && this.stopOffsets[0] < maxStopOffset) {\n            let i = 0;\n            // Take all equal stopping offsets\n            while (i + 1 < this.count && this.stopOffsets[i] === this.stopOffsets[i + 1]) {\n                i++;\n            }\n            // Basically we are consuming the first i + 1 elements of the stack\n            result.push(new DecorationSegment(nextStartOffset, this.stopOffsets[i], this.classNames.join(' '), Stack._metadata(this.metadata)));\n            nextStartOffset = this.stopOffsets[i] + 1;\n            // Consume them\n            this.stopOffsets.splice(0, i + 1);\n            this.classNames.splice(0, i + 1);\n            this.metadata.splice(0, i + 1);\n            this.count -= (i + 1);\n        }\n        if (this.count > 0 && nextStartOffset < maxStopOffset) {\n            result.push(new DecorationSegment(nextStartOffset, maxStopOffset - 1, this.classNames.join(' '), Stack._metadata(this.metadata)));\n            nextStartOffset = maxStopOffset;\n        }\n        return nextStartOffset;\n    }\n    insert(stopOffset, className, metadata) {\n        if (this.count === 0 || this.stopOffsets[this.count - 1] <= stopOffset) {\n            // Insert at the end\n            this.stopOffsets.push(stopOffset);\n            this.classNames.push(className);\n            this.metadata.push(metadata);\n        }\n        else {\n            // Find the insertion position for `stopOffset`\n            for (let i = 0; i < this.count; i++) {\n                if (this.stopOffsets[i] >= stopOffset) {\n                    this.stopOffsets.splice(i, 0, stopOffset);\n                    this.classNames.splice(i, 0, className);\n                    this.metadata.splice(i, 0, metadata);\n                    break;\n                }\n            }\n        }\n        this.count++;\n        return;\n    }\n}\nexport class LineDecorationsNormalizer {\n    /**\n     * Normalize line decorations. Overlapping decorations will generate multiple segments\n     */\n    static normalize(lineContent, lineDecorations) {\n        if (lineDecorations.length === 0) {\n            return [];\n        }\n        const result = [];\n        const stack = new Stack();\n        let nextStartOffset = 0;\n        for (let i = 0, len = lineDecorations.length; i < len; i++) {\n            const d = lineDecorations[i];\n            let startColumn = d.startColumn;\n            let endColumn = d.endColumn;\n            const className = d.className;\n            const metadata = (d.type === 1 /* InlineDecorationType.Before */\n                ? 2 /* LinePartMetadata.PSEUDO_BEFORE */\n                : d.type === 2 /* InlineDecorationType.After */\n                    ? 4 /* LinePartMetadata.PSEUDO_AFTER */\n                    : 0);\n            // If the position would end up in the middle of a high-low surrogate pair, we move it to before the pair\n            if (startColumn > 1) {\n                const charCodeBefore = lineContent.charCodeAt(startColumn - 2);\n                if (strings.isHighSurrogate(charCodeBefore)) {\n                    startColumn--;\n                }\n            }\n            if (endColumn > 1) {\n                const charCodeBefore = lineContent.charCodeAt(endColumn - 2);\n                if (strings.isHighSurrogate(charCodeBefore)) {\n                    endColumn--;\n                }\n            }\n            const currentStartOffset = startColumn - 1;\n            const currentEndOffset = endColumn - 2;\n            nextStartOffset = stack.consumeLowerThan(currentStartOffset, nextStartOffset, result);\n            if (stack.count === 0) {\n                nextStartOffset = currentStartOffset;\n            }\n            stack.insert(currentEndOffset, className, metadata);\n        }\n        stack.consumeLowerThan(1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, nextStartOffset, result);\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class LinePart {\n    constructor(\n    /**\n     * last char index of this token (not inclusive).\n     */\n    endIndex, type, metadata, containsRTL) {\n        this.endIndex = endIndex;\n        this.type = type;\n        this.metadata = metadata;\n        this.containsRTL = containsRTL;\n        this._linePartBrand = undefined;\n    }\n    isWhitespace() {\n        return (this.metadata & 1 /* LinePartMetadata.IS_WHITESPACE_MASK */ ? true : false);\n    }\n    isPseudoAfter() {\n        return (this.metadata & 4 /* LinePartMetadata.PSEUDO_AFTER_MASK */ ? true : false);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { StringBuilder } from '../core/stringBuilder.js';\nimport { LineDecoration, LineDecorationsNormalizer } from './lineDecorations.js';\nimport { LinePart } from './linePart.js';\nexport class LineRange {\n    constructor(startIndex, endIndex) {\n        this.startOffset = startIndex;\n        this.endOffset = endIndex;\n    }\n    equals(otherLineRange) {\n        return this.startOffset === otherLineRange.startOffset\n            && this.endOffset === otherLineRange.endOffset;\n    }\n}\nexport class RenderLineInput {\n    constructor(useMonospaceOptimizations, canUseHalfwidthRightwardsArrow, lineContent, continuesWithWrappedLine, isBasicASCII, containsRTL, fauxIndentLength, lineTokens, lineDecorations, tabSize, startVisibleColumn, spaceWidth, middotWidth, wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, selectionsOnLine) {\n        this.useMonospaceOptimizations = useMonospaceOptimizations;\n        this.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n        this.lineContent = lineContent;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.isBasicASCII = isBasicASCII;\n        this.containsRTL = containsRTL;\n        this.fauxIndentLength = fauxIndentLength;\n        this.lineTokens = lineTokens;\n        this.lineDecorations = lineDecorations.sort(LineDecoration.compare);\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n        this.spaceWidth = spaceWidth;\n        this.stopRenderingLineAfter = stopRenderingLineAfter;\n        this.renderWhitespace = (renderWhitespace === 'all'\n            ? 4 /* RenderWhitespace.All */\n            : renderWhitespace === 'boundary'\n                ? 1 /* RenderWhitespace.Boundary */\n                : renderWhitespace === 'selection'\n                    ? 2 /* RenderWhitespace.Selection */\n                    : renderWhitespace === 'trailing'\n                        ? 3 /* RenderWhitespace.Trailing */\n                        : 0 /* RenderWhitespace.None */);\n        this.renderControlCharacters = renderControlCharacters;\n        this.fontLigatures = fontLigatures;\n        this.selectionsOnLine = selectionsOnLine && selectionsOnLine.sort((a, b) => a.startOffset < b.startOffset ? -1 : 1);\n        const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n        const middotDiff = Math.abs(middotWidth - spaceWidth);\n        if (wsmiddotDiff < middotDiff) {\n            this.renderSpaceWidth = wsmiddotWidth;\n            this.renderSpaceCharCode = 0x2E31; // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        }\n        else {\n            this.renderSpaceWidth = middotWidth;\n            this.renderSpaceCharCode = 0xB7; // U+00B7 - MIDDLE DOT\n        }\n    }\n    sameSelection(otherSelections) {\n        if (this.selectionsOnLine === null) {\n            return otherSelections === null;\n        }\n        if (otherSelections === null) {\n            return false;\n        }\n        if (otherSelections.length !== this.selectionsOnLine.length) {\n            return false;\n        }\n        for (let i = 0; i < this.selectionsOnLine.length; i++) {\n            if (!this.selectionsOnLine[i].equals(otherSelections[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    equals(other) {\n        return (this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineContent === other.lineContent\n            && this.continuesWithWrappedLine === other.continuesWithWrappedLine\n            && this.isBasicASCII === other.isBasicASCII\n            && this.containsRTL === other.containsRTL\n            && this.fauxIndentLength === other.fauxIndentLength\n            && this.tabSize === other.tabSize\n            && this.startVisibleColumn === other.startVisibleColumn\n            && this.spaceWidth === other.spaceWidth\n            && this.renderSpaceWidth === other.renderSpaceWidth\n            && this.renderSpaceCharCode === other.renderSpaceCharCode\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.fontLigatures === other.fontLigatures\n            && LineDecoration.equalsArr(this.lineDecorations, other.lineDecorations)\n            && this.lineTokens.equals(other.lineTokens)\n            && this.sameSelection(other.selectionsOnLine));\n    }\n}\nexport class DomPosition {\n    constructor(partIndex, charIndex) {\n        this.partIndex = partIndex;\n        this.charIndex = charIndex;\n    }\n}\n/**\n * Provides a both direction mapping between a line's character and its rendered position.\n */\nexport class CharacterMapping {\n    static getPartIndex(partData) {\n        return (partData & 4294901760 /* CharacterMappingConstants.PART_INDEX_MASK */) >>> 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */;\n    }\n    static getCharIndex(partData) {\n        return (partData & 65535 /* CharacterMappingConstants.CHAR_INDEX_MASK */) >>> 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */;\n    }\n    constructor(length, partCount) {\n        this.length = length;\n        this._data = new Uint32Array(this.length);\n        this._horizontalOffset = new Uint32Array(this.length);\n    }\n    setColumnInfo(column, partIndex, charIndex, horizontalOffset) {\n        const partData = ((partIndex << 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */)\n            | (charIndex << 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */)) >>> 0;\n        this._data[column - 1] = partData;\n        this._horizontalOffset[column - 1] = horizontalOffset;\n    }\n    getHorizontalOffset(column) {\n        if (this._horizontalOffset.length === 0) {\n            // No characters on this line\n            return 0;\n        }\n        return this._horizontalOffset[column - 1];\n    }\n    charOffsetToPartData(charOffset) {\n        if (this.length === 0) {\n            return 0;\n        }\n        if (charOffset < 0) {\n            return this._data[0];\n        }\n        if (charOffset >= this.length) {\n            return this._data[this.length - 1];\n        }\n        return this._data[charOffset];\n    }\n    getDomPosition(column) {\n        const partData = this.charOffsetToPartData(column - 1);\n        const partIndex = CharacterMapping.getPartIndex(partData);\n        const charIndex = CharacterMapping.getCharIndex(partData);\n        return new DomPosition(partIndex, charIndex);\n    }\n    getColumn(domPosition, partLength) {\n        const charOffset = this.partDataToCharOffset(domPosition.partIndex, partLength, domPosition.charIndex);\n        return charOffset + 1;\n    }\n    partDataToCharOffset(partIndex, partLength, charIndex) {\n        if (this.length === 0) {\n            return 0;\n        }\n        const searchEntry = ((partIndex << 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */)\n            | (charIndex << 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */)) >>> 0;\n        let min = 0;\n        let max = this.length - 1;\n        while (min + 1 < max) {\n            const mid = ((min + max) >>> 1);\n            const midEntry = this._data[mid];\n            if (midEntry === searchEntry) {\n                return mid;\n            }\n            else if (midEntry > searchEntry) {\n                max = mid;\n            }\n            else {\n                min = mid;\n            }\n        }\n        if (min === max) {\n            return min;\n        }\n        const minEntry = this._data[min];\n        const maxEntry = this._data[max];\n        if (minEntry === searchEntry) {\n            return min;\n        }\n        if (maxEntry === searchEntry) {\n            return max;\n        }\n        const minPartIndex = CharacterMapping.getPartIndex(minEntry);\n        const minCharIndex = CharacterMapping.getCharIndex(minEntry);\n        const maxPartIndex = CharacterMapping.getPartIndex(maxEntry);\n        let maxCharIndex;\n        if (minPartIndex !== maxPartIndex) {\n            // sitting between parts\n            maxCharIndex = partLength;\n        }\n        else {\n            maxCharIndex = CharacterMapping.getCharIndex(maxEntry);\n        }\n        const minEntryDistance = charIndex - minCharIndex;\n        const maxEntryDistance = maxCharIndex - charIndex;\n        if (minEntryDistance <= maxEntryDistance) {\n            return min;\n        }\n        return max;\n    }\n}\nexport class RenderLineOutput {\n    constructor(characterMapping, containsRTL, containsForeignElements) {\n        this._renderLineOutputBrand = undefined;\n        this.characterMapping = characterMapping;\n        this.containsRTL = containsRTL;\n        this.containsForeignElements = containsForeignElements;\n    }\n}\nexport function renderViewLine(input, sb) {\n    if (input.lineContent.length === 0) {\n        if (input.lineDecorations.length > 0) {\n            // This line is empty, but it contains inline decorations\n            sb.appendString(`<span>`);\n            let beforeCount = 0;\n            let afterCount = 0;\n            let containsForeignElements = 0 /* ForeignElementType.None */;\n            for (const lineDecoration of input.lineDecorations) {\n                if (lineDecoration.type === 1 /* InlineDecorationType.Before */ || lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                    sb.appendString(`<span class=\"`);\n                    sb.appendString(lineDecoration.className);\n                    sb.appendString(`\"></span>`);\n                    if (lineDecoration.type === 1 /* InlineDecorationType.Before */) {\n                        containsForeignElements |= 1 /* ForeignElementType.Before */;\n                        beforeCount++;\n                    }\n                    if (lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                        containsForeignElements |= 2 /* ForeignElementType.After */;\n                        afterCount++;\n                    }\n                }\n            }\n            sb.appendString(`</span>`);\n            const characterMapping = new CharacterMapping(1, beforeCount + afterCount);\n            characterMapping.setColumnInfo(1, beforeCount, 0, 0);\n            return new RenderLineOutput(characterMapping, false, containsForeignElements);\n        }\n        // completely empty line\n        sb.appendString('<span><span></span></span>');\n        return new RenderLineOutput(new CharacterMapping(0, 0), false, 0 /* ForeignElementType.None */);\n    }\n    return _renderLine(resolveRenderLineInput(input), sb);\n}\nexport class RenderLineOutput2 {\n    constructor(characterMapping, html, containsRTL, containsForeignElements) {\n        this.characterMapping = characterMapping;\n        this.html = html;\n        this.containsRTL = containsRTL;\n        this.containsForeignElements = containsForeignElements;\n    }\n}\nexport function renderViewLine2(input) {\n    const sb = new StringBuilder(10000);\n    const out = renderViewLine(input, sb);\n    return new RenderLineOutput2(out.characterMapping, sb.build(), out.containsRTL, out.containsForeignElements);\n}\nclass ResolvedRenderLineInput {\n    constructor(fontIsMonospace, canUseHalfwidthRightwardsArrow, lineContent, len, isOverflowing, overflowingCharCount, parts, containsForeignElements, fauxIndentLength, tabSize, startVisibleColumn, containsRTL, spaceWidth, renderSpaceCharCode, renderWhitespace, renderControlCharacters) {\n        this.fontIsMonospace = fontIsMonospace;\n        this.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n        this.lineContent = lineContent;\n        this.len = len;\n        this.isOverflowing = isOverflowing;\n        this.overflowingCharCount = overflowingCharCount;\n        this.parts = parts;\n        this.containsForeignElements = containsForeignElements;\n        this.fauxIndentLength = fauxIndentLength;\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n        this.containsRTL = containsRTL;\n        this.spaceWidth = spaceWidth;\n        this.renderSpaceCharCode = renderSpaceCharCode;\n        this.renderWhitespace = renderWhitespace;\n        this.renderControlCharacters = renderControlCharacters;\n        //\n    }\n}\nfunction resolveRenderLineInput(input) {\n    const lineContent = input.lineContent;\n    let isOverflowing;\n    let overflowingCharCount;\n    let len;\n    if (input.stopRenderingLineAfter !== -1 && input.stopRenderingLineAfter < lineContent.length) {\n        isOverflowing = true;\n        overflowingCharCount = lineContent.length - input.stopRenderingLineAfter;\n        len = input.stopRenderingLineAfter;\n    }\n    else {\n        isOverflowing = false;\n        overflowingCharCount = 0;\n        len = lineContent.length;\n    }\n    let tokens = transformAndRemoveOverflowing(lineContent, input.containsRTL, input.lineTokens, input.fauxIndentLength, len);\n    if (input.renderControlCharacters && !input.isBasicASCII) {\n        // Calling `extractControlCharacters` before adding (possibly empty) line parts\n        // for inline decorations. `extractControlCharacters` removes empty line parts.\n        tokens = extractControlCharacters(lineContent, tokens);\n    }\n    if (input.renderWhitespace === 4 /* RenderWhitespace.All */ ||\n        input.renderWhitespace === 1 /* RenderWhitespace.Boundary */ ||\n        (input.renderWhitespace === 2 /* RenderWhitespace.Selection */ && !!input.selectionsOnLine) ||\n        (input.renderWhitespace === 3 /* RenderWhitespace.Trailing */ && !input.continuesWithWrappedLine)) {\n        tokens = _applyRenderWhitespace(input, lineContent, len, tokens);\n    }\n    let containsForeignElements = 0 /* ForeignElementType.None */;\n    if (input.lineDecorations.length > 0) {\n        for (let i = 0, len = input.lineDecorations.length; i < len; i++) {\n            const lineDecoration = input.lineDecorations[i];\n            if (lineDecoration.type === 3 /* InlineDecorationType.RegularAffectingLetterSpacing */) {\n                // Pretend there are foreign elements... although not 100% accurate.\n                containsForeignElements |= 1 /* ForeignElementType.Before */;\n            }\n            else if (lineDecoration.type === 1 /* InlineDecorationType.Before */) {\n                containsForeignElements |= 1 /* ForeignElementType.Before */;\n            }\n            else if (lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                containsForeignElements |= 2 /* ForeignElementType.After */;\n            }\n        }\n        tokens = _applyInlineDecorations(lineContent, len, tokens, input.lineDecorations);\n    }\n    if (!input.containsRTL) {\n        // We can never split RTL text, as it ruins the rendering\n        tokens = splitLargeTokens(lineContent, tokens, !input.isBasicASCII || input.fontLigatures);\n    }\n    return new ResolvedRenderLineInput(input.useMonospaceOptimizations, input.canUseHalfwidthRightwardsArrow, lineContent, len, isOverflowing, overflowingCharCount, tokens, containsForeignElements, input.fauxIndentLength, input.tabSize, input.startVisibleColumn, input.containsRTL, input.spaceWidth, input.renderSpaceCharCode, input.renderWhitespace, input.renderControlCharacters);\n}\n/**\n * In the rendering phase, characters are always looped until token.endIndex.\n * Ensure that all tokens end before `len` and the last one ends precisely at `len`.\n */\nfunction transformAndRemoveOverflowing(lineContent, lineContainsRTL, tokens, fauxIndentLength, len) {\n    const result = [];\n    let resultLen = 0;\n    // The faux indent part of the line should have no token type\n    if (fauxIndentLength > 0) {\n        result[resultLen++] = new LinePart(fauxIndentLength, '', 0, false);\n    }\n    let startOffset = fauxIndentLength;\n    for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n        const endIndex = tokens.getEndOffset(tokenIndex);\n        if (endIndex <= fauxIndentLength) {\n            // The faux indent part of the line should have no token type\n            continue;\n        }\n        const type = tokens.getClassName(tokenIndex);\n        if (endIndex >= len) {\n            const tokenContainsRTL = (lineContainsRTL ? strings.containsRTL(lineContent.substring(startOffset, len)) : false);\n            result[resultLen++] = new LinePart(len, type, 0, tokenContainsRTL);\n            break;\n        }\n        const tokenContainsRTL = (lineContainsRTL ? strings.containsRTL(lineContent.substring(startOffset, endIndex)) : false);\n        result[resultLen++] = new LinePart(endIndex, type, 0, tokenContainsRTL);\n        startOffset = endIndex;\n    }\n    return result;\n}\n/**\n * See https://github.com/microsoft/vscode/issues/6885.\n * It appears that having very large spans causes very slow reading of character positions.\n * So here we try to avoid that.\n */\nfunction splitLargeTokens(lineContent, tokens, onlyAtSpaces) {\n    let lastTokenEndIndex = 0;\n    const result = [];\n    let resultLen = 0;\n    if (onlyAtSpaces) {\n        // Split only at spaces => we need to walk each character\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const token = tokens[i];\n            const tokenEndIndex = token.endIndex;\n            if (lastTokenEndIndex + 50 /* Constants.LongToken */ < tokenEndIndex) {\n                const tokenType = token.type;\n                const tokenMetadata = token.metadata;\n                const tokenContainsRTL = token.containsRTL;\n                let lastSpaceOffset = -1;\n                let currTokenStart = lastTokenEndIndex;\n                for (let j = lastTokenEndIndex; j < tokenEndIndex; j++) {\n                    if (lineContent.charCodeAt(j) === 32 /* CharCode.Space */) {\n                        lastSpaceOffset = j;\n                    }\n                    if (lastSpaceOffset !== -1 && j - currTokenStart >= 50 /* Constants.LongToken */) {\n                        // Split at `lastSpaceOffset` + 1\n                        result[resultLen++] = new LinePart(lastSpaceOffset + 1, tokenType, tokenMetadata, tokenContainsRTL);\n                        currTokenStart = lastSpaceOffset + 1;\n                        lastSpaceOffset = -1;\n                    }\n                }\n                if (currTokenStart !== tokenEndIndex) {\n                    result[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n                }\n            }\n            else {\n                result[resultLen++] = token;\n            }\n            lastTokenEndIndex = tokenEndIndex;\n        }\n    }\n    else {\n        // Split anywhere => we don't need to walk each character\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const token = tokens[i];\n            const tokenEndIndex = token.endIndex;\n            const diff = (tokenEndIndex - lastTokenEndIndex);\n            if (diff > 50 /* Constants.LongToken */) {\n                const tokenType = token.type;\n                const tokenMetadata = token.metadata;\n                const tokenContainsRTL = token.containsRTL;\n                const piecesCount = Math.ceil(diff / 50 /* Constants.LongToken */);\n                for (let j = 1; j < piecesCount; j++) {\n                    const pieceEndIndex = lastTokenEndIndex + (j * 50 /* Constants.LongToken */);\n                    result[resultLen++] = new LinePart(pieceEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n                }\n                result[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n            }\n            else {\n                result[resultLen++] = token;\n            }\n            lastTokenEndIndex = tokenEndIndex;\n        }\n    }\n    return result;\n}\nfunction isControlCharacter(charCode) {\n    if (charCode < 32) {\n        return (charCode !== 9 /* CharCode.Tab */);\n    }\n    if (charCode === 127) {\n        // DEL\n        return true;\n    }\n    if ((charCode >= 0x202A && charCode <= 0x202E)\n        || (charCode >= 0x2066 && charCode <= 0x2069)\n        || (charCode >= 0x200E && charCode <= 0x200F)\n        || charCode === 0x061C) {\n        // Unicode Directional Formatting Characters\n        // LRE\tU+202A\tLEFT-TO-RIGHT EMBEDDING\n        // RLE\tU+202B\tRIGHT-TO-LEFT EMBEDDING\n        // PDF\tU+202C\tPOP DIRECTIONAL FORMATTING\n        // LRO\tU+202D\tLEFT-TO-RIGHT OVERRIDE\n        // RLO\tU+202E\tRIGHT-TO-LEFT OVERRIDE\n        // LRI\tU+2066\tLEFT-TO-RIGHT ISOLATE\n        // RLI\tU+2067\tRIGHT-TO-LEFT ISOLATE\n        // FSI\tU+2068\tFIRST STRONG ISOLATE\n        // PDI\tU+2069\tPOP DIRECTIONAL ISOLATE\n        // LRM\tU+200E\tLEFT-TO-RIGHT MARK\n        // RLM\tU+200F\tRIGHT-TO-LEFT MARK\n        // ALM\tU+061C\tARABIC LETTER MARK\n        return true;\n    }\n    return false;\n}\nfunction extractControlCharacters(lineContent, tokens) {\n    const result = [];\n    let lastLinePart = new LinePart(0, '', 0, false);\n    let charOffset = 0;\n    for (const token of tokens) {\n        const tokenEndIndex = token.endIndex;\n        for (; charOffset < tokenEndIndex; charOffset++) {\n            const charCode = lineContent.charCodeAt(charOffset);\n            if (isControlCharacter(charCode)) {\n                if (charOffset > lastLinePart.endIndex) {\n                    // emit previous part if it has text\n                    lastLinePart = new LinePart(charOffset, token.type, token.metadata, token.containsRTL);\n                    result.push(lastLinePart);\n                }\n                lastLinePart = new LinePart(charOffset + 1, 'mtkcontrol', token.metadata, false);\n                result.push(lastLinePart);\n            }\n        }\n        if (charOffset > lastLinePart.endIndex) {\n            // emit previous part if it has text\n            lastLinePart = new LinePart(tokenEndIndex, token.type, token.metadata, token.containsRTL);\n            result.push(lastLinePart);\n        }\n    }\n    return result;\n}\n/**\n * Whitespace is rendered by \"replacing\" tokens with a special-purpose `mtkw` type that is later recognized in the rendering phase.\n * Moreover, a token is created for every visual indent because on some fonts the glyphs used for rendering whitespace (&rarr; or &middot;) do not have the same width as &nbsp;.\n * The rendering phase will generate `style=\"width:...\"` for these tokens.\n */\nfunction _applyRenderWhitespace(input, lineContent, len, tokens) {\n    const continuesWithWrappedLine = input.continuesWithWrappedLine;\n    const fauxIndentLength = input.fauxIndentLength;\n    const tabSize = input.tabSize;\n    const startVisibleColumn = input.startVisibleColumn;\n    const useMonospaceOptimizations = input.useMonospaceOptimizations;\n    const selections = input.selectionsOnLine;\n    const onlyBoundary = (input.renderWhitespace === 1 /* RenderWhitespace.Boundary */);\n    const onlyTrailing = (input.renderWhitespace === 3 /* RenderWhitespace.Trailing */);\n    const generateLinePartForEachWhitespace = (input.renderSpaceWidth !== input.spaceWidth);\n    const result = [];\n    let resultLen = 0;\n    let tokenIndex = 0;\n    let tokenType = tokens[tokenIndex].type;\n    let tokenContainsRTL = tokens[tokenIndex].containsRTL;\n    let tokenEndIndex = tokens[tokenIndex].endIndex;\n    const tokensLength = tokens.length;\n    let lineIsEmptyOrWhitespace = false;\n    let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n    let lastNonWhitespaceIndex;\n    if (firstNonWhitespaceIndex === -1) {\n        lineIsEmptyOrWhitespace = true;\n        firstNonWhitespaceIndex = len;\n        lastNonWhitespaceIndex = len;\n    }\n    else {\n        lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n    }\n    let wasInWhitespace = false;\n    let currentSelectionIndex = 0;\n    let currentSelection = selections && selections[currentSelectionIndex];\n    let tmpIndent = startVisibleColumn % tabSize;\n    for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n        const chCode = lineContent.charCodeAt(charIndex);\n        if (currentSelection && charIndex >= currentSelection.endOffset) {\n            currentSelectionIndex++;\n            currentSelection = selections && selections[currentSelectionIndex];\n        }\n        let isInWhitespace;\n        if (charIndex < firstNonWhitespaceIndex || charIndex > lastNonWhitespaceIndex) {\n            // in leading or trailing whitespace\n            isInWhitespace = true;\n        }\n        else if (chCode === 9 /* CharCode.Tab */) {\n            // a tab character is rendered both in all and boundary cases\n            isInWhitespace = true;\n        }\n        else if (chCode === 32 /* CharCode.Space */) {\n            // hit a space character\n            if (onlyBoundary) {\n                // rendering only boundary whitespace\n                if (wasInWhitespace) {\n                    isInWhitespace = true;\n                }\n                else {\n                    const nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n                    isInWhitespace = (nextChCode === 32 /* CharCode.Space */ || nextChCode === 9 /* CharCode.Tab */);\n                }\n            }\n            else {\n                isInWhitespace = true;\n            }\n        }\n        else {\n            isInWhitespace = false;\n        }\n        // If rendering whitespace on selection, check that the charIndex falls within a selection\n        if (isInWhitespace && selections) {\n            isInWhitespace = !!currentSelection && currentSelection.startOffset <= charIndex && currentSelection.endOffset > charIndex;\n        }\n        // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n        if (isInWhitespace && onlyTrailing) {\n            isInWhitespace = lineIsEmptyOrWhitespace || charIndex > lastNonWhitespaceIndex;\n        }\n        if (isInWhitespace && tokenContainsRTL) {\n            // If the token contains RTL text, breaking it up into multiple line parts\n            // to render whitespace might affect the browser's bidi layout.\n            //\n            // We render whitespace in such tokens only if the whitespace\n            // is the leading or the trailing whitespace of the line,\n            // which doesn't affect the browser's bidi layout.\n            if (charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex) {\n                isInWhitespace = false;\n            }\n        }\n        if (wasInWhitespace) {\n            // was in whitespace token\n            if (!isInWhitespace || (!useMonospaceOptimizations && tmpIndent >= tabSize)) {\n                // leaving whitespace token or entering a new indent\n                if (generateLinePartForEachWhitespace) {\n                    const lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n                    for (let i = lastEndIndex + 1; i <= charIndex; i++) {\n                        result[resultLen++] = new LinePart(i, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n                    }\n                }\n                else {\n                    result[resultLen++] = new LinePart(charIndex, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n                }\n                tmpIndent = tmpIndent % tabSize;\n            }\n        }\n        else {\n            // was in regular token\n            if (charIndex === tokenEndIndex || (isInWhitespace && charIndex > fauxIndentLength)) {\n                result[resultLen++] = new LinePart(charIndex, tokenType, 0, tokenContainsRTL);\n                tmpIndent = tmpIndent % tabSize;\n            }\n        }\n        if (chCode === 9 /* CharCode.Tab */) {\n            tmpIndent = tabSize;\n        }\n        else if (strings.isFullWidthCharacter(chCode)) {\n            tmpIndent += 2;\n        }\n        else {\n            tmpIndent++;\n        }\n        wasInWhitespace = isInWhitespace;\n        while (charIndex === tokenEndIndex) {\n            tokenIndex++;\n            if (tokenIndex < tokensLength) {\n                tokenType = tokens[tokenIndex].type;\n                tokenContainsRTL = tokens[tokenIndex].containsRTL;\n                tokenEndIndex = tokens[tokenIndex].endIndex;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    let generateWhitespace = false;\n    if (wasInWhitespace) {\n        // was in whitespace token\n        if (continuesWithWrappedLine && onlyBoundary) {\n            const lastCharCode = (len > 0 ? lineContent.charCodeAt(len - 1) : 0 /* CharCode.Null */);\n            const prevCharCode = (len > 1 ? lineContent.charCodeAt(len - 2) : 0 /* CharCode.Null */);\n            const isSingleTrailingSpace = (lastCharCode === 32 /* CharCode.Space */ && (prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */));\n            if (!isSingleTrailingSpace) {\n                generateWhitespace = true;\n            }\n        }\n        else {\n            generateWhitespace = true;\n        }\n    }\n    if (generateWhitespace) {\n        if (generateLinePartForEachWhitespace) {\n            const lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n            for (let i = lastEndIndex + 1; i <= len; i++) {\n                result[resultLen++] = new LinePart(i, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n            }\n        }\n        else {\n            result[resultLen++] = new LinePart(len, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n        }\n    }\n    else {\n        result[resultLen++] = new LinePart(len, tokenType, 0, tokenContainsRTL);\n    }\n    return result;\n}\n/**\n * Inline decorations are \"merged\" on top of tokens.\n * Special care must be taken when multiple inline decorations are at play and they overlap.\n */\nfunction _applyInlineDecorations(lineContent, len, tokens, _lineDecorations) {\n    _lineDecorations.sort(LineDecoration.compare);\n    const lineDecorations = LineDecorationsNormalizer.normalize(lineContent, _lineDecorations);\n    const lineDecorationsLen = lineDecorations.length;\n    let lineDecorationIndex = 0;\n    const result = [];\n    let resultLen = 0;\n    let lastResultEndIndex = 0;\n    for (let tokenIndex = 0, len = tokens.length; tokenIndex < len; tokenIndex++) {\n        const token = tokens[tokenIndex];\n        const tokenEndIndex = token.endIndex;\n        const tokenType = token.type;\n        const tokenMetadata = token.metadata;\n        const tokenContainsRTL = token.containsRTL;\n        while (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset < tokenEndIndex) {\n            const lineDecoration = lineDecorations[lineDecorationIndex];\n            if (lineDecoration.startOffset > lastResultEndIndex) {\n                lastResultEndIndex = lineDecoration.startOffset;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n            }\n            if (lineDecoration.endOffset + 1 <= tokenEndIndex) {\n                // This line decoration ends before this token ends\n                lastResultEndIndex = lineDecoration.endOffset + 1;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata, tokenContainsRTL);\n                lineDecorationIndex++;\n            }\n            else {\n                // This line decoration continues on to the next token\n                lastResultEndIndex = tokenEndIndex;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata, tokenContainsRTL);\n                break;\n            }\n        }\n        if (tokenEndIndex > lastResultEndIndex) {\n            lastResultEndIndex = tokenEndIndex;\n            result[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n        }\n    }\n    const lastTokenEndIndex = tokens[tokens.length - 1].endIndex;\n    if (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n        while (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n            const lineDecoration = lineDecorations[lineDecorationIndex];\n            result[resultLen++] = new LinePart(lastResultEndIndex, lineDecoration.className, lineDecoration.metadata, false);\n            lineDecorationIndex++;\n        }\n    }\n    return result;\n}\n/**\n * This function is on purpose not split up into multiple functions to allow runtime type inference (i.e. performance reasons).\n * Notice how all the needed data is fully resolved and passed in (i.e. no other calls).\n */\nfunction _renderLine(input, sb) {\n    const fontIsMonospace = input.fontIsMonospace;\n    const canUseHalfwidthRightwardsArrow = input.canUseHalfwidthRightwardsArrow;\n    const containsForeignElements = input.containsForeignElements;\n    const lineContent = input.lineContent;\n    const len = input.len;\n    const isOverflowing = input.isOverflowing;\n    const overflowingCharCount = input.overflowingCharCount;\n    const parts = input.parts;\n    const fauxIndentLength = input.fauxIndentLength;\n    const tabSize = input.tabSize;\n    const startVisibleColumn = input.startVisibleColumn;\n    const containsRTL = input.containsRTL;\n    const spaceWidth = input.spaceWidth;\n    const renderSpaceCharCode = input.renderSpaceCharCode;\n    const renderWhitespace = input.renderWhitespace;\n    const renderControlCharacters = input.renderControlCharacters;\n    const characterMapping = new CharacterMapping(len + 1, parts.length);\n    let lastCharacterMappingDefined = false;\n    let charIndex = 0;\n    let visibleColumn = startVisibleColumn;\n    let charOffsetInPart = 0; // the character offset in the current part\n    let charHorizontalOffset = 0; // the character horizontal position in terms of chars relative to line start\n    let partDisplacement = 0;\n    if (containsRTL) {\n        sb.appendString('<span dir=\"ltr\">');\n    }\n    else {\n        sb.appendString('<span>');\n    }\n    for (let partIndex = 0, tokensLen = parts.length; partIndex < tokensLen; partIndex++) {\n        const part = parts[partIndex];\n        const partEndIndex = part.endIndex;\n        const partType = part.type;\n        const partContainsRTL = part.containsRTL;\n        const partRendersWhitespace = (renderWhitespace !== 0 /* RenderWhitespace.None */ && part.isWhitespace());\n        const partRendersWhitespaceWithWidth = partRendersWhitespace && !fontIsMonospace && (partType === 'mtkw' /*only whitespace*/ || !containsForeignElements);\n        const partIsEmptyAndHasPseudoAfter = (charIndex === partEndIndex && part.isPseudoAfter());\n        charOffsetInPart = 0;\n        sb.appendString('<span ');\n        if (partContainsRTL) {\n            sb.appendString('style=\"unicode-bidi:isolate\" ');\n        }\n        sb.appendString('class=\"');\n        sb.appendString(partRendersWhitespaceWithWidth ? 'mtkz' : partType);\n        sb.appendASCIICharCode(34 /* CharCode.DoubleQuote */);\n        if (partRendersWhitespace) {\n            let partWidth = 0;\n            {\n                let _charIndex = charIndex;\n                let _visibleColumn = visibleColumn;\n                for (; _charIndex < partEndIndex; _charIndex++) {\n                    const charCode = lineContent.charCodeAt(_charIndex);\n                    const charWidth = (charCode === 9 /* CharCode.Tab */ ? (tabSize - (_visibleColumn % tabSize)) : 1) | 0;\n                    partWidth += charWidth;\n                    if (_charIndex >= fauxIndentLength) {\n                        _visibleColumn += charWidth;\n                    }\n                }\n            }\n            if (partRendersWhitespaceWithWidth) {\n                sb.appendString(' style=\"width:');\n                sb.appendString(String(spaceWidth * partWidth));\n                sb.appendString('px\"');\n            }\n            sb.appendASCIICharCode(62 /* CharCode.GreaterThan */);\n            for (; charIndex < partEndIndex; charIndex++) {\n                characterMapping.setColumnInfo(charIndex + 1, partIndex - partDisplacement, charOffsetInPart, charHorizontalOffset);\n                partDisplacement = 0;\n                const charCode = lineContent.charCodeAt(charIndex);\n                let producedCharacters;\n                let charWidth;\n                if (charCode === 9 /* CharCode.Tab */) {\n                    producedCharacters = (tabSize - (visibleColumn % tabSize)) | 0;\n                    charWidth = producedCharacters;\n                    if (!canUseHalfwidthRightwardsArrow || charWidth > 1) {\n                        sb.appendCharCode(0x2192); // RIGHTWARDS ARROW\n                    }\n                    else {\n                        sb.appendCharCode(0xFFEB); // HALFWIDTH RIGHTWARDS ARROW\n                    }\n                    for (let space = 2; space <= charWidth; space++) {\n                        sb.appendCharCode(0xA0); // &nbsp;\n                    }\n                }\n                else { // must be CharCode.Space\n                    producedCharacters = 2;\n                    charWidth = 1;\n                    sb.appendCharCode(renderSpaceCharCode); // &middot; or word separator middle dot\n                    sb.appendCharCode(0x200C); // ZERO WIDTH NON-JOINER\n                }\n                charOffsetInPart += producedCharacters;\n                charHorizontalOffset += charWidth;\n                if (charIndex >= fauxIndentLength) {\n                    visibleColumn += charWidth;\n                }\n            }\n        }\n        else {\n            sb.appendASCIICharCode(62 /* CharCode.GreaterThan */);\n            for (; charIndex < partEndIndex; charIndex++) {\n                characterMapping.setColumnInfo(charIndex + 1, partIndex - partDisplacement, charOffsetInPart, charHorizontalOffset);\n                partDisplacement = 0;\n                const charCode = lineContent.charCodeAt(charIndex);\n                let producedCharacters = 1;\n                let charWidth = 1;\n                switch (charCode) {\n                    case 9 /* CharCode.Tab */:\n                        producedCharacters = (tabSize - (visibleColumn % tabSize));\n                        charWidth = producedCharacters;\n                        for (let space = 1; space <= producedCharacters; space++) {\n                            sb.appendCharCode(0xA0); // &nbsp;\n                        }\n                        break;\n                    case 32 /* CharCode.Space */:\n                        sb.appendCharCode(0xA0); // &nbsp;\n                        break;\n                    case 60 /* CharCode.LessThan */:\n                        sb.appendString('&lt;');\n                        break;\n                    case 62 /* CharCode.GreaterThan */:\n                        sb.appendString('&gt;');\n                        break;\n                    case 38 /* CharCode.Ampersand */:\n                        sb.appendString('&amp;');\n                        break;\n                    case 0 /* CharCode.Null */:\n                        if (renderControlCharacters) {\n                            // See https://unicode-table.com/en/blocks/control-pictures/\n                            sb.appendCharCode(9216);\n                        }\n                        else {\n                            sb.appendString('&#00;');\n                        }\n                        break;\n                    case 65279 /* CharCode.UTF8_BOM */:\n                    case 8232 /* CharCode.LINE_SEPARATOR */:\n                    case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n                    case 133 /* CharCode.NEXT_LINE */:\n                        sb.appendCharCode(0xFFFD);\n                        break;\n                    default:\n                        if (strings.isFullWidthCharacter(charCode)) {\n                            charWidth++;\n                        }\n                        // See https://unicode-table.com/en/blocks/control-pictures/\n                        if (renderControlCharacters && charCode < 32) {\n                            sb.appendCharCode(9216 + charCode);\n                        }\n                        else if (renderControlCharacters && charCode === 127) {\n                            // DEL\n                            sb.appendCharCode(9249);\n                        }\n                        else if (renderControlCharacters && isControlCharacter(charCode)) {\n                            sb.appendString('[U+');\n                            sb.appendString(to4CharHex(charCode));\n                            sb.appendString(']');\n                            producedCharacters = 8;\n                            charWidth = producedCharacters;\n                        }\n                        else {\n                            sb.appendCharCode(charCode);\n                        }\n                }\n                charOffsetInPart += producedCharacters;\n                charHorizontalOffset += charWidth;\n                if (charIndex >= fauxIndentLength) {\n                    visibleColumn += charWidth;\n                }\n            }\n        }\n        if (partIsEmptyAndHasPseudoAfter) {\n            partDisplacement++;\n        }\n        else {\n            partDisplacement = 0;\n        }\n        if (charIndex >= len && !lastCharacterMappingDefined && part.isPseudoAfter()) {\n            lastCharacterMappingDefined = true;\n            characterMapping.setColumnInfo(charIndex + 1, partIndex, charOffsetInPart, charHorizontalOffset);\n        }\n        sb.appendString('</span>');\n    }\n    if (!lastCharacterMappingDefined) {\n        // When getting client rects for the last character, we will position the\n        // text range at the end of the span, insteaf of at the beginning of next span\n        characterMapping.setColumnInfo(len + 1, parts.length - 1, charOffsetInPart, charHorizontalOffset);\n    }\n    if (isOverflowing) {\n        sb.appendString('<span class=\"mtkoverflow\">');\n        sb.appendString(nls.localize('showMore', \"Show more ({0})\", renderOverflowingCharCount(overflowingCharCount)));\n        sb.appendString('</span>');\n    }\n    sb.appendString('</span>');\n    return new RenderLineOutput(characterMapping, containsRTL, containsForeignElements);\n}\nfunction to4CharHex(n) {\n    return n.toString(16).toUpperCase().padStart(4, '0');\n}\nfunction renderOverflowingCharCount(n) {\n    if (n < 1024) {\n        return nls.localize('overflow.chars', \"{0} chars\", n);\n    }\n    if (n < 1024 * 1024) {\n        return `${(n / 1024).toFixed(1)} KB`;\n    }\n    return `${(n / 1024 / 1024).toFixed(1)} MB`;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\n/**\n * Contains all data needed to render at a specific viewport.\n */\nexport class ViewportData {\n    constructor(selections, partialData, whitespaceViewportData, model) {\n        this.selections = selections;\n        this.startLineNumber = partialData.startLineNumber | 0;\n        this.endLineNumber = partialData.endLineNumber | 0;\n        this.relativeVerticalOffset = partialData.relativeVerticalOffset;\n        this.bigNumbersDelta = partialData.bigNumbersDelta | 0;\n        this.whitespaceViewportData = whitespaceViewportData;\n        this._model = model;\n        this.visibleRange = new Range(partialData.startLineNumber, this._model.getLineMinColumn(partialData.startLineNumber), partialData.endLineNumber, this._model.getLineMaxColumn(partialData.endLineNumber));\n    }\n    getViewLineRenderingData(lineNumber) {\n        return this._model.getViewportViewLineRenderingData(this.visibleRange, lineNumber);\n    }\n    getDecorationsInViewport() {\n        return this._model.getDecorationsInViewport(this.visibleRange);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../base/common/arrays.js';\nimport * as strings from '../../base/common/strings.js';\nimport { Range } from './core/range.js';\nexport class Viewport {\n    constructor(top, left, width, height) {\n        this._viewportBrand = undefined;\n        this.top = top | 0;\n        this.left = left | 0;\n        this.width = width | 0;\n        this.height = height | 0;\n    }\n}\nexport class MinimapLinesRenderingData {\n    constructor(tabSize, data) {\n        this.tabSize = tabSize;\n        this.data = data;\n    }\n}\nexport class ViewLineData {\n    constructor(content, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens, inlineDecorations) {\n        this._viewLineDataBrand = undefined;\n        this.content = content;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.minColumn = minColumn;\n        this.maxColumn = maxColumn;\n        this.startVisibleColumn = startVisibleColumn;\n        this.tokens = tokens;\n        this.inlineDecorations = inlineDecorations;\n    }\n}\nexport class ViewLineRenderingData {\n    constructor(minColumn, maxColumn, content, continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, tokens, inlineDecorations, tabSize, startVisibleColumn) {\n        this.minColumn = minColumn;\n        this.maxColumn = maxColumn;\n        this.content = content;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\n        this.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\n        this.tokens = tokens;\n        this.inlineDecorations = inlineDecorations;\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n    }\n    static isBasicASCII(lineContent, mightContainNonBasicASCII) {\n        if (mightContainNonBasicASCII) {\n            return strings.isBasicASCII(lineContent);\n        }\n        return true;\n    }\n    static containsRTL(lineContent, isBasicASCII, mightContainRTL) {\n        if (!isBasicASCII && mightContainRTL) {\n            return strings.containsRTL(lineContent);\n        }\n        return false;\n    }\n}\nexport class InlineDecoration {\n    constructor(range, inlineClassName, type) {\n        this.range = range;\n        this.inlineClassName = inlineClassName;\n        this.type = type;\n    }\n}\nexport class SingleLineInlineDecoration {\n    constructor(startOffset, endOffset, inlineClassName, inlineClassNameAffectsLetterSpacing) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.inlineClassName = inlineClassName;\n        this.inlineClassNameAffectsLetterSpacing = inlineClassNameAffectsLetterSpacing;\n    }\n    toInlineDecoration(lineNumber) {\n        return new InlineDecoration(new Range(lineNumber, this.startOffset + 1, lineNumber, this.endOffset + 1), this.inlineClassName, this.inlineClassNameAffectsLetterSpacing ? 3 /* InlineDecorationType.RegularAffectingLetterSpacing */ : 0 /* InlineDecorationType.Regular */);\n    }\n}\nexport class ViewModelDecoration {\n    constructor(range, options) {\n        this._viewModelDecorationBrand = undefined;\n        this.range = range;\n        this.options = options;\n    }\n}\nexport class OverviewRulerDecorationsGroup {\n    constructor(color, zIndex, \n    /**\n     * Decorations are encoded in a number array using the following scheme:\n     *  - 3*i = lane\n     *  - 3*i+1 = startLineNumber\n     *  - 3*i+2 = endLineNumber\n     */\n    data) {\n        this.color = color;\n        this.zIndex = zIndex;\n        this.data = data;\n    }\n    static compareByRenderingProps(a, b) {\n        if (a.zIndex === b.zIndex) {\n            if (a.color < b.color) {\n                return -1;\n            }\n            if (a.color > b.color) {\n                return 1;\n            }\n            return 0;\n        }\n        return a.zIndex - b.zIndex;\n    }\n    static equals(a, b) {\n        return (a.color === b.color\n            && a.zIndex === b.zIndex\n            && arrays.equals(a.data, b.data));\n    }\n    static equalsArr(a, b) {\n        return arrays.equals(a, b, OverviewRulerDecorationsGroup.equals);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, markAsSingleton } from '../../../base/common/lifecycle.js';\nimport { RGBA8 } from '../core/rgba.js';\nimport { TokenizationRegistry } from '../languages.js';\nexport class MinimapTokensColorTracker extends Disposable {\n    static getInstance() {\n        if (!this._INSTANCE) {\n            this._INSTANCE = markAsSingleton(new MinimapTokensColorTracker());\n        }\n        return this._INSTANCE;\n    }\n    constructor() {\n        super();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._updateColorMap();\n        this._register(TokenizationRegistry.onDidChange(e => {\n            if (e.changedColorMap) {\n                this._updateColorMap();\n            }\n        }));\n    }\n    _updateColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        if (!colorMap) {\n            this._colors = [RGBA8.Empty];\n            this._backgroundIsLight = true;\n            return;\n        }\n        this._colors = [RGBA8.Empty];\n        for (let colorId = 1; colorId < colorMap.length; colorId++) {\n            const source = colorMap[colorId].rgba;\n            // Use a VM friendly data-type\n            this._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n        }\n        const backgroundLuminosity = colorMap[2 /* ColorId.DefaultBackground */].getRelativeLuminance();\n        this._backgroundIsLight = backgroundLuminosity >= 0.5;\n        this._onDidChange.fire(undefined);\n    }\n    getColor(colorId) {\n        if (colorId < 1 || colorId >= this._colors.length) {\n            // background color (basically invisible)\n            colorId = 2 /* ColorId.DefaultBackground */;\n        }\n        return this._colors[colorId];\n    }\n    backgroundIsLight() {\n        return this._backgroundIsLight;\n    }\n}\nMinimapTokensColorTracker._INSTANCE = null;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { ModelLineProjectionData } from '../modelLineProjectionData.js';\nexport class MonospaceLineBreaksComputerFactory {\n    static create(options) {\n        return new MonospaceLineBreaksComputerFactory(options.get(132 /* EditorOption.wordWrapBreakBeforeCharacters */), options.get(131 /* EditorOption.wordWrapBreakAfterCharacters */));\n    }\n    constructor(breakBeforeChars, breakAfterChars) {\n        this.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak) {\n        const requests = [];\n        const injectedTexts = [];\n        const previousBreakingData = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n                previousBreakingData.push(previousLineBreakData);\n            },\n            finalize: () => {\n                const columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth;\n                const result = [];\n                for (let i = 0, len = requests.length; i < len; i++) {\n                    const injectedText = injectedTexts[i];\n                    const previousLineBreakData = previousBreakingData[i];\n                    if (previousLineBreakData && !previousLineBreakData.injectionOptions && !injectedText) {\n                        result[i] = createLineBreaksFromPreviousLineBreaks(this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak);\n                    }\n                    else {\n                        result[i] = createLineBreaks(this.classifier, requests[i], injectedText, tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak);\n                    }\n                }\n                arrPool1.length = 0;\n                arrPool2.length = 0;\n                return result;\n            }\n        };\n    }\n}\nclass WrappingCharacterClassifier extends CharacterClassifier {\n    constructor(BREAK_BEFORE, BREAK_AFTER) {\n        super(0 /* CharacterClass.NONE */);\n        for (let i = 0; i < BREAK_BEFORE.length; i++) {\n            this.set(BREAK_BEFORE.charCodeAt(i), 1 /* CharacterClass.BREAK_BEFORE */);\n        }\n        for (let i = 0; i < BREAK_AFTER.length; i++) {\n            this.set(BREAK_AFTER.charCodeAt(i), 2 /* CharacterClass.BREAK_AFTER */);\n        }\n    }\n    get(charCode) {\n        if (charCode >= 0 && charCode < 256) {\n            return this._asciiMap[charCode];\n        }\n        else {\n            // Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\n            // 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\n            // 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\n            // 3. Hiragana and Katakana (0x3040 -- 0x30FF)\n            if ((charCode >= 0x3040 && charCode <= 0x30FF)\n                || (charCode >= 0x3400 && charCode <= 0x4DBF)\n                || (charCode >= 0x4E00 && charCode <= 0x9FFF)) {\n                return 3 /* CharacterClass.BREAK_IDEOGRAPHIC */;\n            }\n            return (this._map.get(charCode) || this._defaultValue);\n        }\n    }\n}\nlet arrPool1 = [];\nlet arrPool2 = [];\nfunction createLineBreaksFromPreviousLineBreaks(classifier, previousBreakingData, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent, wordBreak) {\n    if (firstLineBreakColumn === -1) {\n        return null;\n    }\n    const len = lineText.length;\n    if (len <= 1) {\n        return null;\n    }\n    const isKeepAll = (wordBreak === 'keepAll');\n    const prevBreakingOffsets = previousBreakingData.breakOffsets;\n    const prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n    const breakingOffsets = arrPool1;\n    const breakingOffsetsVisibleColumn = arrPool2;\n    let breakingOffsetsCount = 0;\n    let lastBreakingOffset = 0;\n    let lastBreakingOffsetVisibleColumn = 0;\n    let breakingColumn = firstLineBreakColumn;\n    const prevLen = prevBreakingOffsets.length;\n    let prevIndex = 0;\n    if (prevIndex >= 0) {\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n        while (prevIndex + 1 < prevLen) {\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n            if (distance >= bestDistance) {\n                break;\n            }\n            bestDistance = distance;\n            prevIndex++;\n        }\n    }\n    while (prevIndex < prevLen) {\n        // Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\n        let prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\n        let prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\n        if (lastBreakingOffset > prevBreakOffset) {\n            prevBreakOffset = lastBreakingOffset;\n            prevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\n        }\n        let breakOffset = 0;\n        let breakOffsetVisibleColumn = 0;\n        let forcedBreakOffset = 0;\n        let forcedBreakOffsetVisibleColumn = 0;\n        // initially, we search as much as possible to the right (if it fits)\n        if (prevBreakOffsetVisibleColumn <= breakingColumn) {\n            let visibleColumn = prevBreakOffsetVisibleColumn;\n            let prevCharCode = prevBreakOffset === 0 ? 0 /* CharCode.Null */ : lineText.charCodeAt(prevBreakOffset - 1);\n            let prevCharCodeClass = prevBreakOffset === 0 ? 0 /* CharacterClass.NONE */ : classifier.get(prevCharCode);\n            let entireLineFits = true;\n            for (let i = prevBreakOffset; i < len; i++) {\n                const charStartOffset = i;\n                const charCode = lineText.charCodeAt(i);\n                let charCodeClass;\n                let charWidth;\n                if (strings.isHighSurrogate(charCode)) {\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                    i++;\n                    charCodeClass = 0 /* CharacterClass.NONE */;\n                    charWidth = 2;\n                }\n                else {\n                    charCodeClass = classifier.get(charCode);\n                    charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n                }\n                if (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n                    breakOffset = charStartOffset;\n                    breakOffsetVisibleColumn = visibleColumn;\n                }\n                visibleColumn += charWidth;\n                // check if adding character at `i` will go over the breaking column\n                if (visibleColumn > breakingColumn) {\n                    // We need to break at least before character at `i`:\n                    if (charStartOffset > lastBreakingOffset) {\n                        forcedBreakOffset = charStartOffset;\n                        forcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\n                    }\n                    else {\n                        // we need to advance at least by one character\n                        forcedBreakOffset = i + 1;\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\n                    }\n                    if (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n                        // Cannot break at `breakOffset` => reset it if it was set\n                        breakOffset = 0;\n                    }\n                    entireLineFits = false;\n                    break;\n                }\n                prevCharCode = charCode;\n                prevCharCodeClass = charCodeClass;\n            }\n            if (entireLineFits) {\n                // there is no more need to break => stop the outer loop!\n                if (breakingOffsetsCount > 0) {\n                    // Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\n                    breakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\n                    breakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\n                    breakingOffsetsCount++;\n                }\n                break;\n            }\n        }\n        if (breakOffset === 0) {\n            // must search left\n            let visibleColumn = prevBreakOffsetVisibleColumn;\n            let charCode = lineText.charCodeAt(prevBreakOffset);\n            let charCodeClass = classifier.get(charCode);\n            let hitATabCharacter = false;\n            for (let i = prevBreakOffset - 1; i >= lastBreakingOffset; i--) {\n                const charStartOffset = i + 1;\n                const prevCharCode = lineText.charCodeAt(i);\n                if (prevCharCode === 9 /* CharCode.Tab */) {\n                    // cannot determine the width of a tab when going backwards, so we must go forwards\n                    hitATabCharacter = true;\n                    break;\n                }\n                let prevCharCodeClass;\n                let prevCharWidth;\n                if (strings.isLowSurrogate(prevCharCode)) {\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                    i--;\n                    prevCharCodeClass = 0 /* CharacterClass.NONE */;\n                    prevCharWidth = 2;\n                }\n                else {\n                    prevCharCodeClass = classifier.get(prevCharCode);\n                    prevCharWidth = (strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1);\n                }\n                if (visibleColumn <= breakingColumn) {\n                    if (forcedBreakOffset === 0) {\n                        forcedBreakOffset = charStartOffset;\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\n                    }\n                    if (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\n                        // went too far!\n                        break;\n                    }\n                    if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n                        breakOffset = charStartOffset;\n                        breakOffsetVisibleColumn = visibleColumn;\n                        break;\n                    }\n                }\n                visibleColumn -= prevCharWidth;\n                charCode = prevCharCode;\n                charCodeClass = prevCharCodeClass;\n            }\n            if (breakOffset !== 0) {\n                const remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\n                if (remainingWidthOfNextLine <= tabSize) {\n                    const charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\n                    let charWidth;\n                    if (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\n                        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                        charWidth = 2;\n                    }\n                    else {\n                        charWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n                    }\n                    if (remainingWidthOfNextLine - charWidth < 0) {\n                        // it is not worth it to break at breakOffset, it just introduces an extra needless line!\n                        breakOffset = 0;\n                    }\n                }\n            }\n            if (hitATabCharacter) {\n                // cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\n                prevIndex--;\n                continue;\n            }\n        }\n        if (breakOffset === 0) {\n            // Could not find a good breaking point\n            breakOffset = forcedBreakOffset;\n            breakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\n        }\n        if (breakOffset <= lastBreakingOffset) {\n            // Make sure that we are advancing (at least one character)\n            const charCode = lineText.charCodeAt(lastBreakingOffset);\n            if (strings.isHighSurrogate(charCode)) {\n                // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                breakOffset = lastBreakingOffset + 2;\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\n            }\n            else {\n                breakOffset = lastBreakingOffset + 1;\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(charCode, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n            }\n        }\n        lastBreakingOffset = breakOffset;\n        breakingOffsets[breakingOffsetsCount] = breakOffset;\n        lastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\n        breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n        breakingOffsetsCount++;\n        breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n        while (prevIndex < 0 || (prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn)) {\n            prevIndex++;\n        }\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n        while (prevIndex + 1 < prevLen) {\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n            if (distance >= bestDistance) {\n                break;\n            }\n            bestDistance = distance;\n            prevIndex++;\n        }\n    }\n    if (breakingOffsetsCount === 0) {\n        return null;\n    }\n    // Doing here some object reuse which ends up helping a huge deal with GC pauses!\n    breakingOffsets.length = breakingOffsetsCount;\n    breakingOffsetsVisibleColumn.length = breakingOffsetsCount;\n    arrPool1 = previousBreakingData.breakOffsets;\n    arrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\n    previousBreakingData.breakOffsets = breakingOffsets;\n    previousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\n    previousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\n    return previousBreakingData;\n}\nfunction createLineBreaks(classifier, _lineText, injectedTexts, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent, wordBreak) {\n    const lineText = LineInjectedText.applyInjectedText(_lineText, injectedTexts);\n    let injectionOptions;\n    let injectionOffsets;\n    if (injectedTexts && injectedTexts.length > 0) {\n        injectionOptions = injectedTexts.map(t => t.options);\n        injectionOffsets = injectedTexts.map(text => text.column - 1);\n    }\n    else {\n        injectionOptions = null;\n        injectionOffsets = null;\n    }\n    if (firstLineBreakColumn === -1) {\n        if (!injectionOptions) {\n            return null;\n        }\n        // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n        // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n        return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    }\n    const len = lineText.length;\n    if (len <= 1) {\n        if (!injectionOptions) {\n            return null;\n        }\n        // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n        // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n        return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    }\n    const isKeepAll = (wordBreak === 'keepAll');\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n    const breakingOffsets = [];\n    const breakingOffsetsVisibleColumn = [];\n    let breakingOffsetsCount = 0;\n    let breakOffset = 0;\n    let breakOffsetVisibleColumn = 0;\n    let breakingColumn = firstLineBreakColumn;\n    let prevCharCode = lineText.charCodeAt(0);\n    let prevCharCodeClass = classifier.get(prevCharCode);\n    let visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\n    let startOffset = 1;\n    if (strings.isHighSurrogate(prevCharCode)) {\n        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n        visibleColumn += 1;\n        prevCharCode = lineText.charCodeAt(1);\n        prevCharCodeClass = classifier.get(prevCharCode);\n        startOffset++;\n    }\n    for (let i = startOffset; i < len; i++) {\n        const charStartOffset = i;\n        const charCode = lineText.charCodeAt(i);\n        let charCodeClass;\n        let charWidth;\n        if (strings.isHighSurrogate(charCode)) {\n            // A surrogate pair must always be considered as a single unit, so it is never to be broken\n            i++;\n            charCodeClass = 0 /* CharacterClass.NONE */;\n            charWidth = 2;\n        }\n        else {\n            charCodeClass = classifier.get(charCode);\n            charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n        }\n        if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n            breakOffset = charStartOffset;\n            breakOffsetVisibleColumn = visibleColumn;\n        }\n        visibleColumn += charWidth;\n        // check if adding character at `i` will go over the breaking column\n        if (visibleColumn > breakingColumn) {\n            // We need to break at least before character at `i`:\n            if (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n                // Cannot break at `breakOffset`, must break at `i`\n                breakOffset = charStartOffset;\n                breakOffsetVisibleColumn = visibleColumn - charWidth;\n            }\n            breakingOffsets[breakingOffsetsCount] = breakOffset;\n            breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n            breakingOffsetsCount++;\n            breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n            breakOffset = 0;\n        }\n        prevCharCode = charCode;\n        prevCharCodeClass = charCodeClass;\n    }\n    if (breakingOffsetsCount === 0 && (!injectedTexts || injectedTexts.length === 0)) {\n        return null;\n    }\n    // Add last segment\n    breakingOffsets[breakingOffsetsCount] = len;\n    breakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\n    return new ModelLineProjectionData(injectionOffsets, injectionOptions, breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\n}\nfunction computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar) {\n    if (charCode === 9 /* CharCode.Tab */) {\n        return (tabSize - (visibleColumn % tabSize));\n    }\n    if (strings.isFullWidthCharacter(charCode)) {\n        return columnsForFullWidthChar;\n    }\n    if (charCode < 32) {\n        // when using `editor.renderControlCharacters`, the substitutions are often wide\n        return columnsForFullWidthChar;\n    }\n    return 1;\n}\nfunction tabCharacterWidth(visibleColumn, tabSize) {\n    return (tabSize - (visibleColumn % tabSize));\n}\n/**\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\n * Kinsoku Shori : Don't break before a trailing character, like a period\n */\nfunction canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll) {\n    return (charCode !== 32 /* CharCode.Space */\n        && ((prevCharCodeClass === 2 /* CharacterClass.BREAK_AFTER */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */) // break at the end of multiple BREAK_AFTER\n            || (prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */ && charCodeClass === 1 /* CharacterClass.BREAK_BEFORE */) // break at the start of multiple BREAK_BEFORE\n            || (!isKeepAll && prevCharCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */)\n            || (!isKeepAll && charCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */)));\n}\nfunction computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n    let wrappedTextIndentLength = 0;\n    if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n        const firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\n        if (firstNonWhitespaceIndex !== -1) {\n            // Track existing indent\n            for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                const charWidth = (lineText.charCodeAt(i) === 9 /* CharCode.Tab */ ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1);\n                wrappedTextIndentLength += charWidth;\n            }\n            // Increase indent of continuation lines, if desired\n            const numberOfAdditionalTabs = (wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0);\n            for (let i = 0; i < numberOfAdditionalTabs; i++) {\n                const charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\n                wrappedTextIndentLength += charWidth;\n            }\n            // Force sticking to beginning of line if no character would fit except for the indentation\n            if (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\n                wrappedTextIndentLength = 0;\n            }\n        }\n    }\n    return wrappedTextIndentLength;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ColorZone {\n    constructor(from, to, colorId) {\n        this._colorZoneBrand = undefined;\n        this.from = from | 0;\n        this.to = to | 0;\n        this.colorId = colorId | 0;\n    }\n    static compare(a, b) {\n        if (a.colorId === b.colorId) {\n            if (a.from === b.from) {\n                return a.to - b.to;\n            }\n            return a.from - b.from;\n        }\n        return a.colorId - b.colorId;\n    }\n}\n/**\n * A zone in the overview ruler\n */\nexport class OverviewRulerZone {\n    constructor(startLineNumber, endLineNumber, heightInLines, color) {\n        this._overviewRulerZoneBrand = undefined;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n        this.heightInLines = heightInLines;\n        this.color = color;\n        this._colorZone = null;\n    }\n    static compare(a, b) {\n        if (a.color === b.color) {\n            if (a.startLineNumber === b.startLineNumber) {\n                if (a.heightInLines === b.heightInLines) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.heightInLines - b.heightInLines;\n            }\n            return a.startLineNumber - b.startLineNumber;\n        }\n        return a.color < b.color ? -1 : 1;\n    }\n    setColorZone(colorZone) {\n        this._colorZone = colorZone;\n    }\n    getColorZones() {\n        return this._colorZone;\n    }\n}\nexport class OverviewZoneManager {\n    constructor(getVerticalOffsetForLine) {\n        this._getVerticalOffsetForLine = getVerticalOffsetForLine;\n        this._zones = [];\n        this._colorZonesInvalid = false;\n        this._lineHeight = 0;\n        this._domWidth = 0;\n        this._domHeight = 0;\n        this._outerHeight = 0;\n        this._pixelRatio = 1;\n        this._lastAssignedId = 0;\n        this._color2Id = Object.create(null);\n        this._id2Color = [];\n    }\n    getId2Color() {\n        return this._id2Color;\n    }\n    setZones(newZones) {\n        this._zones = newZones;\n        this._zones.sort(OverviewRulerZone.compare);\n    }\n    setLineHeight(lineHeight) {\n        if (this._lineHeight === lineHeight) {\n            return false;\n        }\n        this._lineHeight = lineHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    setPixelRatio(pixelRatio) {\n        this._pixelRatio = pixelRatio;\n        this._colorZonesInvalid = true;\n    }\n    getDOMWidth() {\n        return this._domWidth;\n    }\n    getCanvasWidth() {\n        return this._domWidth * this._pixelRatio;\n    }\n    setDOMWidth(width) {\n        if (this._domWidth === width) {\n            return false;\n        }\n        this._domWidth = width;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getDOMHeight() {\n        return this._domHeight;\n    }\n    getCanvasHeight() {\n        return this._domHeight * this._pixelRatio;\n    }\n    setDOMHeight(height) {\n        if (this._domHeight === height) {\n            return false;\n        }\n        this._domHeight = height;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getOuterHeight() {\n        return this._outerHeight;\n    }\n    setOuterHeight(outerHeight) {\n        if (this._outerHeight === outerHeight) {\n            return false;\n        }\n        this._outerHeight = outerHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    resolveColorZones() {\n        const colorZonesInvalid = this._colorZonesInvalid;\n        const lineHeight = Math.floor(this._lineHeight);\n        const totalHeight = Math.floor(this.getCanvasHeight());\n        const outerHeight = Math.floor(this._outerHeight);\n        const heightRatio = totalHeight / outerHeight;\n        const halfMinimumHeight = Math.floor(4 /* Constants.MINIMUM_HEIGHT */ * this._pixelRatio / 2);\n        const allColorZones = [];\n        for (let i = 0, len = this._zones.length; i < len; i++) {\n            const zone = this._zones[i];\n            if (!colorZonesInvalid) {\n                const colorZone = zone.getColorZones();\n                if (colorZone) {\n                    allColorZones.push(colorZone);\n                    continue;\n                }\n            }\n            const offset1 = this._getVerticalOffsetForLine(zone.startLineNumber);\n            const offset2 = (zone.heightInLines === 0\n                ? this._getVerticalOffsetForLine(zone.endLineNumber) + lineHeight\n                : offset1 + zone.heightInLines * lineHeight);\n            const y1 = Math.floor(heightRatio * offset1);\n            const y2 = Math.floor(heightRatio * offset2);\n            let ycenter = Math.floor((y1 + y2) / 2);\n            let halfHeight = (y2 - ycenter);\n            if (halfHeight < halfMinimumHeight) {\n                halfHeight = halfMinimumHeight;\n            }\n            if (ycenter - halfHeight < 0) {\n                ycenter = halfHeight;\n            }\n            if (ycenter + halfHeight > totalHeight) {\n                ycenter = totalHeight - halfHeight;\n            }\n            const color = zone.color;\n            let colorId = this._color2Id[color];\n            if (!colorId) {\n                colorId = (++this._lastAssignedId);\n                this._color2Id[color] = colorId;\n                this._id2Color[colorId] = color;\n            }\n            const colorZone = new ColorZone(ycenter - halfHeight, ycenter + halfHeight, colorId);\n            zone.setColorZone(colorZone);\n            allColorZones.push(colorZone);\n        }\n        this._colorZonesInvalid = false;\n        allColorZones.sort(ColorZone.compare);\n        return allColorZones;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorTheme } from '../editorTheme.js';\nexport class ViewContext {\n    constructor(configuration, theme, model) {\n        this.configuration = configuration;\n        this.theme = new EditorTheme(theme);\n        this.viewModel = model;\n        this.viewLayout = model.viewLayout;\n    }\n    addEventHandler(eventHandler) {\n        this.viewModel.addViewEventHandler(eventHandler);\n    }\n    removeEventHandler(eventHandler) {\n        this.viewModel.removeViewEventHandler(eventHandler);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { InlineDecoration, ViewModelDecoration } from '../viewModel.js';\nimport { filterValidationDecorations } from '../config/editorOptions.js';\nexport class ViewModelDecorations {\n    constructor(editorId, model, configuration, linesCollection, coordinatesConverter) {\n        this.editorId = editorId;\n        this.model = model;\n        this.configuration = configuration;\n        this._linesCollection = linesCollection;\n        this._coordinatesConverter = coordinatesConverter;\n        this._decorationsCache = Object.create(null);\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    _clearCachedModelDecorationsResolver() {\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    dispose() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    reset() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onModelDecorationsChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onLineMappingChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    _getOrCreateViewModelDecoration(modelDecoration) {\n        const id = modelDecoration.id;\n        let r = this._decorationsCache[id];\n        if (!r) {\n            const modelRange = modelDecoration.range;\n            const options = modelDecoration.options;\n            let viewRange;\n            if (options.isWholeLine) {\n                const start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1), 0 /* PositionAffinity.Left */, false, true);\n                const end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)), 1 /* PositionAffinity.Right */);\n                viewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n            }\n            else {\n                // For backwards compatibility reasons, we want injected text before any decoration.\n                // Thus, move decorations to the right.\n                viewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange, 1 /* PositionAffinity.Right */);\n            }\n            r = new ViewModelDecoration(viewRange, options);\n            this._decorationsCache[id] = r;\n        }\n        return r;\n    }\n    getMinimapDecorationsInRange(range) {\n        return this._getDecorationsInRange(range, true, false).decorations;\n    }\n    getDecorationsViewportData(viewRange) {\n        let cacheIsValid = (this._cachedModelDecorationsResolver !== null);\n        cacheIsValid = cacheIsValid && (viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange));\n        if (!cacheIsValid) {\n            this._cachedModelDecorationsResolver = this._getDecorationsInRange(viewRange, false, false);\n            this._cachedModelDecorationsResolverViewRange = viewRange;\n        }\n        return this._cachedModelDecorationsResolver;\n    }\n    getInlineDecorationsOnLine(lineNumber, onlyMinimapDecorations = false, onlyMarginDecorations = false) {\n        const range = new Range(lineNumber, this._linesCollection.getViewLineMinColumn(lineNumber), lineNumber, this._linesCollection.getViewLineMaxColumn(lineNumber));\n        return this._getDecorationsInRange(range, onlyMinimapDecorations, onlyMarginDecorations).inlineDecorations[0];\n    }\n    _getDecorationsInRange(viewRange, onlyMinimapDecorations, onlyMarginDecorations) {\n        const modelDecorations = this._linesCollection.getDecorationsInRange(viewRange, this.editorId, filterValidationDecorations(this.configuration.options), onlyMinimapDecorations, onlyMarginDecorations);\n        const startLineNumber = viewRange.startLineNumber;\n        const endLineNumber = viewRange.endLineNumber;\n        const decorationsInViewport = [];\n        let decorationsInViewportLen = 0;\n        const inlineDecorations = [];\n        for (let j = startLineNumber; j <= endLineNumber; j++) {\n            inlineDecorations[j - startLineNumber] = [];\n        }\n        for (let i = 0, len = modelDecorations.length; i < len; i++) {\n            const modelDecoration = modelDecorations[i];\n            const decorationOptions = modelDecoration.options;\n            if (!isModelDecorationVisible(this.model, modelDecoration)) {\n                continue;\n            }\n            const viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n            const viewRange = viewModelDecoration.range;\n            decorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n            if (decorationOptions.inlineClassName) {\n                const inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? 3 /* InlineDecorationType.RegularAffectingLetterSpacing */ : 0 /* InlineDecorationType.Regular */);\n                const intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n                const intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n                for (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n                    inlineDecorations[j - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.beforeContentClassName) {\n                if (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n                    const inlineDecoration = new InlineDecoration(new Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn), decorationOptions.beforeContentClassName, 1 /* InlineDecorationType.Before */);\n                    inlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.afterContentClassName) {\n                if (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n                    const inlineDecoration = new InlineDecoration(new Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn), decorationOptions.afterContentClassName, 2 /* InlineDecorationType.After */);\n                    inlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n        }\n        return {\n            decorations: decorationsInViewport,\n            inlineDecorations: inlineDecorations\n        };\n    }\n}\nexport function isModelDecorationVisible(model, decoration) {\n    if (decoration.options.hideInCommentTokens && isModelDecorationInComment(model, decoration)) {\n        return false;\n    }\n    if (decoration.options.hideInStringTokens && isModelDecorationInString(model, decoration)) {\n        return false;\n    }\n    return true;\n}\nexport function isModelDecorationInComment(model, decoration) {\n    return testTokensInRange(model, decoration.range, (tokenType) => tokenType === 1 /* StandardTokenType.Comment */);\n}\nexport function isModelDecorationInString(model, decoration) {\n    return testTokensInRange(model, decoration.range, (tokenType) => tokenType === 2 /* StandardTokenType.String */);\n}\n/**\n * Calls the callback for every token that intersects the range.\n * If the callback returns `false`, iteration stops and `false` is returned.\n * Otherwise, `true` is returned.\n */\nfunction testTokensInRange(model, range, callback) {\n    for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n        const lineTokens = model.tokenization.getLineTokens(lineNumber);\n        const isFirstLine = lineNumber === range.startLineNumber;\n        const isEndLine = lineNumber === range.endLineNumber;\n        let tokenIdx = isFirstLine ? lineTokens.findTokenIndexAtOffset(range.startColumn - 1) : 0;\n        while (tokenIdx < lineTokens.getCount()) {\n            if (isEndLine) {\n                const startOffset = lineTokens.getStartOffset(tokenIdx);\n                if (startOffset > range.endColumn - 1) {\n                    break;\n                }\n            }\n            const callbackResult = callback(lineTokens.getStandardTokenType(tokenIdx));\n            if (!callbackResult) {\n                return false;\n            }\n            tokenIdx++;\n        }\n    }\n    return true;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nclass PendingChanges {\n    constructor() {\n        this._hasPending = false;\n        this._inserts = [];\n        this._changes = [];\n        this._removes = [];\n    }\n    insert(x) {\n        this._hasPending = true;\n        this._inserts.push(x);\n    }\n    change(x) {\n        this._hasPending = true;\n        this._changes.push(x);\n    }\n    remove(x) {\n        this._hasPending = true;\n        this._removes.push(x);\n    }\n    mustCommit() {\n        return this._hasPending;\n    }\n    commit(linesLayout) {\n        if (!this._hasPending) {\n            return;\n        }\n        const inserts = this._inserts;\n        const changes = this._changes;\n        const removes = this._removes;\n        this._hasPending = false;\n        this._inserts = [];\n        this._changes = [];\n        this._removes = [];\n        linesLayout._commitPendingChanges(inserts, changes, removes);\n    }\n}\nexport class EditorWhitespace {\n    constructor(id, afterLineNumber, ordinal, height, minWidth) {\n        this.id = id;\n        this.afterLineNumber = afterLineNumber;\n        this.ordinal = ordinal;\n        this.height = height;\n        this.minWidth = minWidth;\n        this.prefixSum = 0;\n    }\n}\n/**\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\n *\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\n */\nexport class LinesLayout {\n    constructor(lineCount, lineHeight, paddingTop, paddingBottom) {\n        this._instanceId = strings.singleLetterHash(++LinesLayout.INSTANCE_COUNT);\n        this._pendingChanges = new PendingChanges();\n        this._lastWhitespaceId = 0;\n        this._arr = [];\n        this._prefixSumValidIndex = -1;\n        this._minWidth = -1; /* marker for not being computed */\n        this._lineCount = lineCount;\n        this._lineHeight = lineHeight;\n        this._paddingTop = paddingTop;\n        this._paddingBottom = paddingBottom;\n    }\n    /**\n     * Find the insertion index for a new value inside a sorted array of values.\n     * If the value is already present in the sorted array, the insertion index will be after the already existing value.\n     */\n    static findInsertionIndex(arr, afterLineNumber, ordinal) {\n        let low = 0;\n        let high = arr.length;\n        while (low < high) {\n            const mid = ((low + high) >>> 1);\n            if (afterLineNumber === arr[mid].afterLineNumber) {\n                if (ordinal < arr[mid].ordinal) {\n                    high = mid;\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            else if (afterLineNumber < arr[mid].afterLineNumber) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    /**\n     * Change the height of a line in pixels.\n     */\n    setLineHeight(lineHeight) {\n        this._checkPendingChanges();\n        this._lineHeight = lineHeight;\n    }\n    /**\n     * Changes the padding used to calculate vertical offsets.\n     */\n    setPadding(paddingTop, paddingBottom) {\n        this._paddingTop = paddingTop;\n        this._paddingBottom = paddingBottom;\n    }\n    /**\n     * Set the number of lines.\n     *\n     * @param lineCount New number of lines.\n     */\n    onFlushed(lineCount) {\n        this._checkPendingChanges();\n        this._lineCount = lineCount;\n    }\n    changeWhitespace(callback) {\n        let hadAChange = false;\n        try {\n            const accessor = {\n                insertWhitespace: (afterLineNumber, ordinal, heightInPx, minWidth) => {\n                    hadAChange = true;\n                    afterLineNumber = afterLineNumber | 0;\n                    ordinal = ordinal | 0;\n                    heightInPx = heightInPx | 0;\n                    minWidth = minWidth | 0;\n                    const id = this._instanceId + (++this._lastWhitespaceId);\n                    this._pendingChanges.insert(new EditorWhitespace(id, afterLineNumber, ordinal, heightInPx, minWidth));\n                    return id;\n                },\n                changeOneWhitespace: (id, newAfterLineNumber, newHeight) => {\n                    hadAChange = true;\n                    newAfterLineNumber = newAfterLineNumber | 0;\n                    newHeight = newHeight | 0;\n                    this._pendingChanges.change({ id, newAfterLineNumber, newHeight });\n                },\n                removeWhitespace: (id) => {\n                    hadAChange = true;\n                    this._pendingChanges.remove({ id });\n                }\n            };\n            callback(accessor);\n        }\n        finally {\n            this._pendingChanges.commit(this);\n        }\n        return hadAChange;\n    }\n    _commitPendingChanges(inserts, changes, removes) {\n        if (inserts.length > 0 || removes.length > 0) {\n            this._minWidth = -1; /* marker for not being computed */\n        }\n        if (inserts.length + changes.length + removes.length <= 1) {\n            // when only one thing happened, handle it \"delicately\"\n            for (const insert of inserts) {\n                this._insertWhitespace(insert);\n            }\n            for (const change of changes) {\n                this._changeOneWhitespace(change.id, change.newAfterLineNumber, change.newHeight);\n            }\n            for (const remove of removes) {\n                const index = this._findWhitespaceIndex(remove.id);\n                if (index === -1) {\n                    continue;\n                }\n                this._removeWhitespace(index);\n            }\n            return;\n        }\n        // simply rebuild the entire datastructure\n        const toRemove = new Set();\n        for (const remove of removes) {\n            toRemove.add(remove.id);\n        }\n        const toChange = new Map();\n        for (const change of changes) {\n            toChange.set(change.id, change);\n        }\n        const applyRemoveAndChange = (whitespaces) => {\n            const result = [];\n            for (const whitespace of whitespaces) {\n                if (toRemove.has(whitespace.id)) {\n                    continue;\n                }\n                if (toChange.has(whitespace.id)) {\n                    const change = toChange.get(whitespace.id);\n                    whitespace.afterLineNumber = change.newAfterLineNumber;\n                    whitespace.height = change.newHeight;\n                }\n                result.push(whitespace);\n            }\n            return result;\n        };\n        const result = applyRemoveAndChange(this._arr).concat(applyRemoveAndChange(inserts));\n        result.sort((a, b) => {\n            if (a.afterLineNumber === b.afterLineNumber) {\n                return a.ordinal - b.ordinal;\n            }\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n        this._arr = result;\n        this._prefixSumValidIndex = -1;\n    }\n    _checkPendingChanges() {\n        if (this._pendingChanges.mustCommit()) {\n            this._pendingChanges.commit(this);\n        }\n    }\n    _insertWhitespace(whitespace) {\n        const insertIndex = LinesLayout.findInsertionIndex(this._arr, whitespace.afterLineNumber, whitespace.ordinal);\n        this._arr.splice(insertIndex, 0, whitespace);\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, insertIndex - 1);\n    }\n    _findWhitespaceIndex(id) {\n        const arr = this._arr;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            if (arr[i].id === id) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    _changeOneWhitespace(id, newAfterLineNumber, newHeight) {\n        const index = this._findWhitespaceIndex(id);\n        if (index === -1) {\n            return;\n        }\n        if (this._arr[index].height !== newHeight) {\n            this._arr[index].height = newHeight;\n            this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, index - 1);\n        }\n        if (this._arr[index].afterLineNumber !== newAfterLineNumber) {\n            // `afterLineNumber` changed for this whitespace\n            // Record old whitespace\n            const whitespace = this._arr[index];\n            // Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace\n            this._removeWhitespace(index);\n            whitespace.afterLineNumber = newAfterLineNumber;\n            // And add it again\n            this._insertWhitespace(whitespace);\n        }\n    }\n    _removeWhitespace(removeIndex) {\n        this._arr.splice(removeIndex, 1);\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, removeIndex - 1);\n    }\n    /**\n     * Notify the layouter that lines have been deleted (a continuous zone of lines).\n     *\n     * @param fromLineNumber The line number at which the deletion started, inclusive\n     * @param toLineNumber The line number at which the deletion ended, inclusive\n     */\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._checkPendingChanges();\n        fromLineNumber = fromLineNumber | 0;\n        toLineNumber = toLineNumber | 0;\n        this._lineCount -= (toLineNumber - fromLineNumber + 1);\n        for (let i = 0, len = this._arr.length; i < len; i++) {\n            const afterLineNumber = this._arr[i].afterLineNumber;\n            if (fromLineNumber <= afterLineNumber && afterLineNumber <= toLineNumber) {\n                // The line this whitespace was after has been deleted\n                //  => move whitespace to before first deleted line\n                this._arr[i].afterLineNumber = fromLineNumber - 1;\n            }\n            else if (afterLineNumber > toLineNumber) {\n                // The line this whitespace was after has been moved up\n                //  => move whitespace up\n                this._arr[i].afterLineNumber -= (toLineNumber - fromLineNumber + 1);\n            }\n        }\n    }\n    /**\n     * Notify the layouter that lines have been inserted (a continuous zone of lines).\n     *\n     * @param fromLineNumber The line number at which the insertion started, inclusive\n     * @param toLineNumber The line number at which the insertion ended, inclusive.\n     */\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._checkPendingChanges();\n        fromLineNumber = fromLineNumber | 0;\n        toLineNumber = toLineNumber | 0;\n        this._lineCount += (toLineNumber - fromLineNumber + 1);\n        for (let i = 0, len = this._arr.length; i < len; i++) {\n            const afterLineNumber = this._arr[i].afterLineNumber;\n            if (fromLineNumber <= afterLineNumber) {\n                this._arr[i].afterLineNumber += (toLineNumber - fromLineNumber + 1);\n            }\n        }\n    }\n    /**\n     * Get the sum of all the whitespaces.\n     */\n    getWhitespacesTotalHeight() {\n        this._checkPendingChanges();\n        if (this._arr.length === 0) {\n            return 0;\n        }\n        return this.getWhitespacesAccumulatedHeight(this._arr.length - 1);\n    }\n    /**\n     * Return the sum of the heights of the whitespaces at [0..index].\n     * This includes the whitespace at `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.\n     */\n    getWhitespacesAccumulatedHeight(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        let startIndex = Math.max(0, this._prefixSumValidIndex + 1);\n        if (startIndex === 0) {\n            this._arr[0].prefixSum = this._arr[0].height;\n            startIndex++;\n        }\n        for (let i = startIndex; i <= index; i++) {\n            this._arr[i].prefixSum = this._arr[i - 1].prefixSum + this._arr[i].height;\n        }\n        this._prefixSumValidIndex = Math.max(this._prefixSumValidIndex, index);\n        return this._arr[index].prefixSum;\n    }\n    /**\n     * Get the sum of heights for all objects.\n     *\n     * @return The sum of heights for all objects.\n     */\n    getLinesTotalHeight() {\n        this._checkPendingChanges();\n        const linesHeight = this._lineHeight * this._lineCount;\n        const whitespacesHeight = this.getWhitespacesTotalHeight();\n        return linesHeight + whitespacesHeight + this._paddingTop + this._paddingBottom;\n    }\n    /**\n     * Returns the accumulated height of whitespaces before the given line number.\n     *\n     * @param lineNumber The line number\n     */\n    getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        const lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n        if (lastWhitespaceBeforeLineNumber === -1) {\n            return 0;\n        }\n        return this.getWhitespacesAccumulatedHeight(lastWhitespaceBeforeLineNumber);\n    }\n    _findLastWhitespaceBeforeLineNumber(lineNumber) {\n        lineNumber = lineNumber | 0;\n        // Find the whitespace before line number\n        const arr = this._arr;\n        let low = 0;\n        let high = arr.length - 1;\n        while (low <= high) {\n            const delta = (high - low) | 0;\n            const halfDelta = (delta / 2) | 0;\n            const mid = (low + halfDelta) | 0;\n            if (arr[mid].afterLineNumber < lineNumber) {\n                if (mid + 1 >= arr.length || arr[mid + 1].afterLineNumber >= lineNumber) {\n                    return mid;\n                }\n                else {\n                    low = (mid + 1) | 0;\n                }\n            }\n            else {\n                high = (mid - 1) | 0;\n            }\n        }\n        return -1;\n    }\n    _findFirstWhitespaceAfterLineNumber(lineNumber) {\n        lineNumber = lineNumber | 0;\n        const lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n        const firstWhitespaceAfterLineNumber = lastWhitespaceBeforeLineNumber + 1;\n        if (firstWhitespaceAfterLineNumber < this._arr.length) {\n            return firstWhitespaceAfterLineNumber;\n        }\n        return -1;\n    }\n    /**\n     * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.\n     * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.\n     */\n    getFirstWhitespaceIndexAfterLineNumber(lineNumber) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        return this._findFirstWhitespaceAfterLineNumber(lineNumber);\n    }\n    /**\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n     *\n     * @param lineNumber The line number\n     * @return The sum of heights for all objects above `lineNumber`.\n     */\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        let previousLinesHeight;\n        if (lineNumber > 1) {\n            previousLinesHeight = this._lineHeight * (lineNumber - 1);\n        }\n        else {\n            previousLinesHeight = 0;\n        }\n        const previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber - (includeViewZones ? 1 : 0));\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    /**\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n     *\n     * @param lineNumber The line number\n     * @return The sum of heights for all objects above `lineNumber`.\n     */\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        const previousLinesHeight = this._lineHeight * lineNumber;\n        const previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber + (includeViewZones ? 1 : 0));\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    /**\n     * The maximum min width for all whitespaces.\n     */\n    getWhitespaceMinWidth() {\n        this._checkPendingChanges();\n        if (this._minWidth === -1) {\n            let minWidth = 0;\n            for (let i = 0, len = this._arr.length; i < len; i++) {\n                minWidth = Math.max(minWidth, this._arr[i].minWidth);\n            }\n            this._minWidth = minWidth;\n        }\n        return this._minWidth;\n    }\n    /**\n     * Check if `verticalOffset` is below all lines.\n     */\n    isAfterLines(verticalOffset) {\n        this._checkPendingChanges();\n        const totalHeight = this.getLinesTotalHeight();\n        return verticalOffset > totalHeight;\n    }\n    isInTopPadding(verticalOffset) {\n        if (this._paddingTop === 0) {\n            return false;\n        }\n        this._checkPendingChanges();\n        return (verticalOffset < this._paddingTop);\n    }\n    isInBottomPadding(verticalOffset) {\n        if (this._paddingBottom === 0) {\n            return false;\n        }\n        this._checkPendingChanges();\n        const totalHeight = this.getLinesTotalHeight();\n        return (verticalOffset >= totalHeight - this._paddingBottom);\n    }\n    /**\n     * Find the first line number that is at or after vertical offset `verticalOffset`.\n     * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\n     * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\n     *\n     * @param verticalOffset The vertical offset to search at.\n     * @return The line number at or after vertical offset `verticalOffset`.\n     */\n    getLineNumberAtOrAfterVerticalOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        if (verticalOffset < 0) {\n            return 1;\n        }\n        const linesCount = this._lineCount | 0;\n        const lineHeight = this._lineHeight;\n        let minLineNumber = 1;\n        let maxLineNumber = linesCount;\n        while (minLineNumber < maxLineNumber) {\n            const midLineNumber = ((minLineNumber + maxLineNumber) / 2) | 0;\n            const midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber) | 0;\n            if (verticalOffset >= midLineNumberVerticalOffset + lineHeight) {\n                // vertical offset is after mid line number\n                minLineNumber = midLineNumber + 1;\n            }\n            else if (verticalOffset >= midLineNumberVerticalOffset) {\n                // Hit\n                return midLineNumber;\n            }\n            else {\n                // vertical offset is before mid line number, but mid line number could still be what we're searching for\n                maxLineNumber = midLineNumber;\n            }\n        }\n        if (minLineNumber > linesCount) {\n            return linesCount;\n        }\n        return minLineNumber;\n    }\n    /**\n     * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\n     *\n     * @param verticalOffset1 The beginning of the viewport.\n     * @param verticalOffset2 The end of the viewport.\n     * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\n     */\n    getLinesViewportData(verticalOffset1, verticalOffset2) {\n        this._checkPendingChanges();\n        verticalOffset1 = verticalOffset1 | 0;\n        verticalOffset2 = verticalOffset2 | 0;\n        const lineHeight = this._lineHeight;\n        // Find first line number\n        // We don't live in a perfect world, so the line number might start before or after verticalOffset1\n        const startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1) | 0;\n        const startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber) | 0;\n        let endLineNumber = this._lineCount | 0;\n        // Also keep track of what whitespace we've got\n        let whitespaceIndex = this.getFirstWhitespaceIndexAfterLineNumber(startLineNumber) | 0;\n        const whitespaceCount = this.getWhitespacesCount() | 0;\n        let currentWhitespaceHeight;\n        let currentWhitespaceAfterLineNumber;\n        if (whitespaceIndex === -1) {\n            whitespaceIndex = whitespaceCount;\n            currentWhitespaceAfterLineNumber = endLineNumber + 1;\n            currentWhitespaceHeight = 0;\n        }\n        else {\n            currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n            currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n        }\n        let currentVerticalOffset = startLineNumberVerticalOffset;\n        let currentLineRelativeOffset = currentVerticalOffset;\n        // IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\n        const STEP_SIZE = 500000;\n        let bigNumbersDelta = 0;\n        if (startLineNumberVerticalOffset >= STEP_SIZE) {\n            // Compute a delta that guarantees that lines are positioned at `lineHeight` increments\n            bigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\n            bigNumbersDelta = Math.floor(bigNumbersDelta / lineHeight) * lineHeight;\n            currentLineRelativeOffset -= bigNumbersDelta;\n        }\n        const linesOffsets = [];\n        const verticalCenter = verticalOffset1 + (verticalOffset2 - verticalOffset1) / 2;\n        let centeredLineNumber = -1;\n        // Figure out how far the lines go\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            if (centeredLineNumber === -1) {\n                const currentLineTop = currentVerticalOffset;\n                const currentLineBottom = currentVerticalOffset + lineHeight;\n                if ((currentLineTop <= verticalCenter && verticalCenter < currentLineBottom) || currentLineTop > verticalCenter) {\n                    centeredLineNumber = lineNumber;\n                }\n            }\n            // Count current line height in the vertical offsets\n            currentVerticalOffset += lineHeight;\n            linesOffsets[lineNumber - startLineNumber] = currentLineRelativeOffset;\n            // Next line starts immediately after this one\n            currentLineRelativeOffset += lineHeight;\n            while (currentWhitespaceAfterLineNumber === lineNumber) {\n                // Push down next line with the height of the current whitespace\n                currentLineRelativeOffset += currentWhitespaceHeight;\n                // Count current whitespace in the vertical offsets\n                currentVerticalOffset += currentWhitespaceHeight;\n                whitespaceIndex++;\n                if (whitespaceIndex >= whitespaceCount) {\n                    currentWhitespaceAfterLineNumber = endLineNumber + 1;\n                }\n                else {\n                    currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n                    currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n                }\n            }\n            if (currentVerticalOffset >= verticalOffset2) {\n                // We have covered the entire viewport area, time to stop\n                endLineNumber = lineNumber;\n                break;\n            }\n        }\n        if (centeredLineNumber === -1) {\n            centeredLineNumber = endLineNumber;\n        }\n        const endLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(endLineNumber) | 0;\n        let completelyVisibleStartLineNumber = startLineNumber;\n        let completelyVisibleEndLineNumber = endLineNumber;\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n            if (startLineNumberVerticalOffset < verticalOffset1) {\n                completelyVisibleStartLineNumber++;\n            }\n        }\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n            if (endLineNumberVerticalOffset + lineHeight > verticalOffset2) {\n                completelyVisibleEndLineNumber--;\n            }\n        }\n        return {\n            bigNumbersDelta: bigNumbersDelta,\n            startLineNumber: startLineNumber,\n            endLineNumber: endLineNumber,\n            relativeVerticalOffset: linesOffsets,\n            centeredLineNumber: centeredLineNumber,\n            completelyVisibleStartLineNumber: completelyVisibleStartLineNumber,\n            completelyVisibleEndLineNumber: completelyVisibleEndLineNumber\n        };\n    }\n    getVerticalOffsetForWhitespaceIndex(whitespaceIndex) {\n        this._checkPendingChanges();\n        whitespaceIndex = whitespaceIndex | 0;\n        const afterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\n        let previousLinesHeight;\n        if (afterLineNumber >= 1) {\n            previousLinesHeight = this._lineHeight * afterLineNumber;\n        }\n        else {\n            previousLinesHeight = 0;\n        }\n        let previousWhitespacesHeight;\n        if (whitespaceIndex > 0) {\n            previousWhitespacesHeight = this.getWhitespacesAccumulatedHeight(whitespaceIndex - 1);\n        }\n        else {\n            previousWhitespacesHeight = 0;\n        }\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        let minWhitespaceIndex = 0;\n        let maxWhitespaceIndex = this.getWhitespacesCount() - 1;\n        if (maxWhitespaceIndex < 0) {\n            return -1;\n        }\n        // Special case: nothing to be found\n        const maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex);\n        const maxWhitespaceHeight = this.getHeightForWhitespaceIndex(maxWhitespaceIndex);\n        if (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\n            return -1;\n        }\n        while (minWhitespaceIndex < maxWhitespaceIndex) {\n            const midWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\n            const midWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex);\n            const midWhitespaceHeight = this.getHeightForWhitespaceIndex(midWhitespaceIndex);\n            if (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\n                // vertical offset is after whitespace\n                minWhitespaceIndex = midWhitespaceIndex + 1;\n            }\n            else if (verticalOffset >= midWhitespaceVerticalOffset) {\n                // Hit\n                return midWhitespaceIndex;\n            }\n            else {\n                // vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\n                maxWhitespaceIndex = midWhitespaceIndex;\n            }\n        }\n        return minWhitespaceIndex;\n    }\n    /**\n     * Get exactly the whitespace that is layouted at `verticalOffset`.\n     *\n     * @param verticalOffset The vertical offset.\n     * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\n     */\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        const candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);\n        if (candidateIndex < 0) {\n            return null;\n        }\n        if (candidateIndex >= this.getWhitespacesCount()) {\n            return null;\n        }\n        const candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex);\n        if (candidateTop > verticalOffset) {\n            return null;\n        }\n        const candidateHeight = this.getHeightForWhitespaceIndex(candidateIndex);\n        const candidateId = this.getIdForWhitespaceIndex(candidateIndex);\n        const candidateAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(candidateIndex);\n        return {\n            id: candidateId,\n            afterLineNumber: candidateAfterLineNumber,\n            verticalOffset: candidateTop,\n            height: candidateHeight\n        };\n    }\n    /**\n     * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\n     *\n     * @param verticalOffset1 The beginning of the viewport.\n     * @param verticalOffset2 The end of the viewport.\n     * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\n     */\n    getWhitespaceViewportData(verticalOffset1, verticalOffset2) {\n        this._checkPendingChanges();\n        verticalOffset1 = verticalOffset1 | 0;\n        verticalOffset2 = verticalOffset2 | 0;\n        const startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1);\n        const endIndex = this.getWhitespacesCount() - 1;\n        if (startIndex < 0) {\n            return [];\n        }\n        const result = [];\n        for (let i = startIndex; i <= endIndex; i++) {\n            const top = this.getVerticalOffsetForWhitespaceIndex(i);\n            const height = this.getHeightForWhitespaceIndex(i);\n            if (top >= verticalOffset2) {\n                break;\n            }\n            result.push({\n                id: this.getIdForWhitespaceIndex(i),\n                afterLineNumber: this.getAfterLineNumberForWhitespaceIndex(i),\n                verticalOffset: top,\n                height: height\n            });\n        }\n        return result;\n    }\n    /**\n     * Get all whitespaces.\n     */\n    getWhitespaces() {\n        this._checkPendingChanges();\n        return this._arr.slice(0);\n    }\n    /**\n     * The number of whitespaces.\n     */\n    getWhitespacesCount() {\n        this._checkPendingChanges();\n        return this._arr.length;\n    }\n    /**\n     * Get the `id` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `id` of whitespace at `index`.\n     */\n    getIdForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].id;\n    }\n    /**\n     * Get the `afterLineNumber` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `afterLineNumber` of whitespace at `index`.\n     */\n    getAfterLineNumberForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].afterLineNumber;\n    }\n    /**\n     * Get the `height` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `height` of whitespace at `index`.\n     */\n    getHeightForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].height;\n    }\n}\nLinesLayout.INSTANCE_COUNT = 0;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModelEventDispatcher.js';\nconst SMOOTH_SCROLLING_TIME = 125;\nclass EditorScrollDimensions {\n    constructor(width, contentWidth, height, contentHeight) {\n        width = width | 0;\n        contentWidth = contentWidth | 0;\n        height = height | 0;\n        contentHeight = contentHeight | 0;\n        if (width < 0) {\n            width = 0;\n        }\n        if (contentWidth < 0) {\n            contentWidth = 0;\n        }\n        if (height < 0) {\n            height = 0;\n        }\n        if (contentHeight < 0) {\n            contentHeight = 0;\n        }\n        this.width = width;\n        this.contentWidth = contentWidth;\n        this.scrollWidth = Math.max(width, contentWidth);\n        this.height = height;\n        this.contentHeight = contentHeight;\n        this.scrollHeight = Math.max(height, contentHeight);\n    }\n    equals(other) {\n        return (this.width === other.width\n            && this.contentWidth === other.contentWidth\n            && this.height === other.height\n            && this.contentHeight === other.contentHeight);\n    }\n}\nclass EditorScrollable extends Disposable {\n    constructor(smoothScrollDuration, scheduleAtNextAnimationFrame) {\n        super();\n        this._onDidContentSizeChange = this._register(new Emitter());\n        this.onDidContentSizeChange = this._onDidContentSizeChange.event;\n        this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n        this._scrollable = this._register(new Scrollable({\n            forceIntegerValues: true,\n            smoothScrollDuration,\n            scheduleAtNextAnimationFrame\n        }));\n        this.onDidScroll = this._scrollable.onScroll;\n    }\n    getScrollable() {\n        return this._scrollable;\n    }\n    setSmoothScrollDuration(smoothScrollDuration) {\n        this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    getScrollDimensions() {\n        return this._dimensions;\n    }\n    setScrollDimensions(dimensions) {\n        if (this._dimensions.equals(dimensions)) {\n            return;\n        }\n        const oldDimensions = this._dimensions;\n        this._dimensions = dimensions;\n        this._scrollable.setScrollDimensions({\n            width: dimensions.width,\n            scrollWidth: dimensions.scrollWidth,\n            height: dimensions.height,\n            scrollHeight: dimensions.scrollHeight\n        }, true);\n        const contentWidthChanged = (oldDimensions.contentWidth !== dimensions.contentWidth);\n        const contentHeightChanged = (oldDimensions.contentHeight !== dimensions.contentHeight);\n        if (contentWidthChanged || contentHeightChanged) {\n            this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\n        }\n    }\n    getFutureScrollPosition() {\n        return this._scrollable.getFutureScrollPosition();\n    }\n    getCurrentScrollPosition() {\n        return this._scrollable.getCurrentScrollPosition();\n    }\n    setScrollPositionNow(update) {\n        this._scrollable.setScrollPositionNow(update);\n    }\n    setScrollPositionSmooth(update) {\n        this._scrollable.setScrollPositionSmooth(update);\n    }\n    hasPendingScrollAnimation() {\n        return this._scrollable.hasPendingScrollAnimation();\n    }\n}\nexport class ViewLayout extends Disposable {\n    constructor(configuration, lineCount, scheduleAtNextAnimationFrame) {\n        super();\n        this._configuration = configuration;\n        const options = this._configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        const padding = options.get(83 /* EditorOption.padding */);\n        this._linesLayout = new LinesLayout(lineCount, options.get(66 /* EditorOption.lineHeight */), padding.top, padding.bottom);\n        this._maxLineWidth = 0;\n        this._overlayWidgetsMinWidth = 0;\n        this._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n        this._configureSmoothScrollDuration();\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\n        this.onDidScroll = this._scrollable.onDidScroll;\n        this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\n        this._updateHeight();\n    }\n    dispose() {\n        super.dispose();\n    }\n    getScrollable() {\n        return this._scrollable.getScrollable();\n    }\n    onHeightMaybeChanged() {\n        this._updateHeight();\n    }\n    _configureSmoothScrollDuration() {\n        this._scrollable.setSmoothScrollDuration(this._configuration.options.get(113 /* EditorOption.smoothScrolling */) ? SMOOTH_SCROLLING_TIME : 0);\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._configuration.options;\n        if (e.hasChanged(66 /* EditorOption.lineHeight */)) {\n            this._linesLayout.setLineHeight(options.get(66 /* EditorOption.lineHeight */));\n        }\n        if (e.hasChanged(83 /* EditorOption.padding */)) {\n            const padding = options.get(83 /* EditorOption.padding */);\n            this._linesLayout.setPadding(padding.top, padding.bottom);\n        }\n        if (e.hasChanged(143 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n            const width = layoutInfo.contentWidth;\n            const height = layoutInfo.height;\n            const scrollDimensions = this._scrollable.getScrollDimensions();\n            const contentWidth = scrollDimensions.contentWidth;\n            this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n        }\n        else {\n            this._updateHeight();\n        }\n        if (e.hasChanged(113 /* EditorOption.smoothScrolling */)) {\n            this._configureSmoothScrollDuration();\n        }\n    }\n    onFlushed(lineCount) {\n        this._linesLayout.onFlushed(lineCount);\n    }\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n    }\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n    }\n    // ---- end view event handlers\n    _getHorizontalScrollbarHeight(width, scrollWidth) {\n        const options = this._configuration.options;\n        const scrollbar = options.get(102 /* EditorOption.scrollbar */);\n        if (scrollbar.horizontal === 2 /* ScrollbarVisibility.Hidden */) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        if (width >= scrollWidth) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        return scrollbar.horizontalScrollbarSize;\n    }\n    _getContentHeight(width, height, contentWidth) {\n        const options = this._configuration.options;\n        let result = this._linesLayout.getLinesTotalHeight();\n        if (options.get(104 /* EditorOption.scrollBeyondLastLine */)) {\n            result += Math.max(0, height - options.get(66 /* EditorOption.lineHeight */) - options.get(83 /* EditorOption.padding */).bottom);\n        }\n        else {\n            result += this._getHorizontalScrollbarHeight(width, contentWidth);\n        }\n        return result;\n    }\n    _updateHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const width = scrollDimensions.width;\n        const height = scrollDimensions.height;\n        const contentWidth = scrollDimensions.contentWidth;\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n    }\n    // ---- Layouting logic\n    getCurrentViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    getFutureViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    _computeContentWidth() {\n        const options = this._configuration.options;\n        const maxLineWidth = this._maxLineWidth;\n        const wrappingInfo = options.get(144 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        if (wrappingInfo.isViewportWrapping) {\n            const minimap = options.get(72 /* EditorOption.minimap */);\n            if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n                // This is a case where viewport wrapping is on, but the line extends above the viewport\n                if (minimap.enabled && minimap.side === 'right') {\n                    // We need to accomodate the scrollbar width\n                    return maxLineWidth + layoutInfo.verticalScrollbarWidth;\n                }\n            }\n            return maxLineWidth;\n        }\n        else {\n            const extraHorizontalSpace = options.get(103 /* EditorOption.scrollBeyondLastColumn */) * fontInfo.typicalHalfwidthCharacterWidth;\n            const whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n            return Math.max(maxLineWidth + extraHorizontalSpace + layoutInfo.verticalScrollbarWidth, whitespaceMinWidth, this._overlayWidgetsMinWidth);\n        }\n    }\n    setMaxLineWidth(maxLineWidth) {\n        this._maxLineWidth = maxLineWidth;\n        this._updateContentWidth();\n    }\n    setOverlayWidgetsMinWidth(maxMinWidth) {\n        this._overlayWidgetsMinWidth = maxMinWidth;\n        this._updateContentWidth();\n    }\n    _updateContentWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(), scrollDimensions.height, scrollDimensions.contentHeight));\n        // The height might depend on the fact that there is a horizontal scrollbar or not\n        this._updateHeight();\n    }\n    // ---- view state\n    saveState() {\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        const scrollTop = currentScrollPosition.scrollTop;\n        const firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n        const whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n        return {\n            scrollTop: scrollTop,\n            scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n            scrollLeft: currentScrollPosition.scrollLeft\n        };\n    }\n    // ----\n    changeWhitespace(callback) {\n        const hadAChange = this._linesLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this.onHeightMaybeChanged();\n        }\n        return hadAChange;\n    }\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber, includeViewZones);\n    }\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones);\n    }\n    isAfterLines(verticalOffset) {\n        return this._linesLayout.isAfterLines(verticalOffset);\n    }\n    isInTopPadding(verticalOffset) {\n        return this._linesLayout.isInTopPadding(verticalOffset);\n    }\n    isInBottomPadding(verticalOffset) {\n        return this._linesLayout.isInBottomPadding(verticalOffset);\n    }\n    getLineNumberAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n    }\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n    }\n    getLinesViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getLinesViewportDataAtScrollTop(scrollTop) {\n        // do some minimal validations on scrollTop\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n            scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n        }\n        if (scrollTop < 0) {\n            scrollTop = 0;\n        }\n        return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n    }\n    getWhitespaceViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getWhitespaces() {\n        return this._linesLayout.getWhitespaces();\n    }\n    // ----\n    getContentWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentWidth;\n    }\n    getScrollWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollWidth;\n    }\n    getContentHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentHeight;\n    }\n    getScrollHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollHeight;\n    }\n    getCurrentScrollLeft() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollLeft;\n    }\n    getCurrentScrollTop() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollTop;\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    setScrollPosition(position, type) {\n        if (type === 1 /* ScrollType.Immediate */) {\n            this._scrollable.setScrollPositionNow(position);\n        }\n        else {\n            this._scrollable.setScrollPositionSmooth(position);\n        }\n    }\n    hasPendingScrollAnimation() {\n        return this._scrollable.hasPendingScrollAnimation();\n    }\n    deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        this._scrollable.setScrollPositionNow({\n            scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n            scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n        });\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { Position } from '../core/position.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { SingleLineInlineDecoration, ViewLineData } from '../viewModel.js';\nexport function createModelLineProjection(lineBreakData, isVisible) {\n    if (lineBreakData === null) {\n        // No mapping needed\n        if (isVisible) {\n            return IdentityModelLineProjection.INSTANCE;\n        }\n        return HiddenModelLineProjection.INSTANCE;\n    }\n    else {\n        return new ModelLineProjection(lineBreakData, isVisible);\n    }\n}\n/**\n * This projection is used to\n * * wrap model lines\n * * inject text\n */\nclass ModelLineProjection {\n    constructor(lineBreakData, isVisible) {\n        this._projectionData = lineBreakData;\n        this._isVisible = isVisible;\n    }\n    isVisible() {\n        return this._isVisible;\n    }\n    setVisible(isVisible) {\n        this._isVisible = isVisible;\n        return this;\n    }\n    getProjectionData() {\n        return this._projectionData;\n    }\n    getViewLineCount() {\n        if (!this._isVisible) {\n            return 0;\n        }\n        return this._projectionData.getOutputLineCount();\n    }\n    getViewLineContent(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        const startOffsetInInputWithInjections = outputLineIndex > 0 ? this._projectionData.breakOffsets[outputLineIndex - 1] : 0;\n        const endOffsetInInputWithInjections = this._projectionData.breakOffsets[outputLineIndex];\n        let r;\n        if (this._projectionData.injectionOffsets !== null) {\n            const injectedTexts = this._projectionData.injectionOffsets.map((offset, idx) => new LineInjectedText(0, 0, offset + 1, this._projectionData.injectionOptions[idx], 0));\n            const lineWithInjections = LineInjectedText.applyInjectedText(model.getLineContent(modelLineNumber), injectedTexts);\n            r = lineWithInjections.substring(startOffsetInInputWithInjections, endOffsetInInputWithInjections);\n        }\n        else {\n            r = model.getValueInRange({\n                startLineNumber: modelLineNumber,\n                startColumn: startOffsetInInputWithInjections + 1,\n                endLineNumber: modelLineNumber,\n                endColumn: endOffsetInInputWithInjections + 1\n            });\n        }\n        if (outputLineIndex > 0) {\n            r = spaces(this._projectionData.wrappedTextIndentLength) + r;\n        }\n        return r;\n    }\n    getViewLineLength(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getLineLength(outputLineIndex);\n    }\n    getViewLineMinColumn(_model, _modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n    }\n    getViewLineMaxColumn(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getMaxOutputOffset(outputLineIndex) + 1;\n    }\n    /**\n     * Try using {@link getViewLinesData} instead.\n    */\n    getViewLineData(model, modelLineNumber, outputLineIndex) {\n        const arr = new Array();\n        this.getViewLinesData(model, modelLineNumber, outputLineIndex, 1, 0, [true], arr);\n        return arr[0];\n    }\n    getViewLinesData(model, modelLineNumber, outputLineIdx, lineCount, globalStartIndex, needed, result) {\n        this._assertVisible();\n        const lineBreakData = this._projectionData;\n        const injectionOffsets = lineBreakData.injectionOffsets;\n        const injectionOptions = lineBreakData.injectionOptions;\n        let inlineDecorationsPerOutputLine = null;\n        if (injectionOffsets) {\n            inlineDecorationsPerOutputLine = [];\n            let totalInjectedTextLengthBefore = 0;\n            let currentInjectedOffset = 0;\n            for (let outputLineIndex = 0; outputLineIndex < lineBreakData.getOutputLineCount(); outputLineIndex++) {\n                const inlineDecorations = new Array();\n                inlineDecorationsPerOutputLine[outputLineIndex] = inlineDecorations;\n                const lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n                const lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n                while (currentInjectedOffset < injectionOffsets.length) {\n                    const length = injectionOptions[currentInjectedOffset].content.length;\n                    const injectedTextStartOffsetInInputWithInjections = injectionOffsets[currentInjectedOffset] + totalInjectedTextLengthBefore;\n                    const injectedTextEndOffsetInInputWithInjections = injectedTextStartOffsetInInputWithInjections + length;\n                    if (injectedTextStartOffsetInInputWithInjections > lineEndOffsetInInputWithInjections) {\n                        // Injected text only starts in later wrapped lines.\n                        break;\n                    }\n                    if (lineStartOffsetInInputWithInjections < injectedTextEndOffsetInInputWithInjections) {\n                        // Injected text ends after or in this line (but also starts in or before this line).\n                        const options = injectionOptions[currentInjectedOffset];\n                        if (options.inlineClassName) {\n                            const offset = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n                            const start = offset + Math.max(injectedTextStartOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, 0);\n                            const end = offset + Math.min(injectedTextEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections);\n                            if (start !== end) {\n                                inlineDecorations.push(new SingleLineInlineDecoration(start, end, options.inlineClassName, options.inlineClassNameAffectsLetterSpacing));\n                            }\n                        }\n                    }\n                    if (injectedTextEndOffsetInInputWithInjections <= lineEndOffsetInInputWithInjections) {\n                        totalInjectedTextLengthBefore += length;\n                        currentInjectedOffset++;\n                    }\n                    else {\n                        // injected text breaks into next line, process it again\n                        break;\n                    }\n                }\n            }\n        }\n        let lineWithInjections;\n        if (injectionOffsets) {\n            lineWithInjections = model.tokenization.getLineTokens(modelLineNumber).withInserted(injectionOffsets.map((offset, idx) => ({\n                offset,\n                text: injectionOptions[idx].content,\n                tokenMetadata: LineTokens.defaultTokenMetadata\n            })));\n        }\n        else {\n            lineWithInjections = model.tokenization.getLineTokens(modelLineNumber);\n        }\n        for (let outputLineIndex = outputLineIdx; outputLineIndex < outputLineIdx + lineCount; outputLineIndex++) {\n            const globalIndex = globalStartIndex + outputLineIndex - outputLineIdx;\n            if (!needed[globalIndex]) {\n                result[globalIndex] = null;\n                continue;\n            }\n            result[globalIndex] = this._getViewLineData(lineWithInjections, inlineDecorationsPerOutputLine ? inlineDecorationsPerOutputLine[outputLineIndex] : null, outputLineIndex);\n        }\n    }\n    _getViewLineData(lineWithInjections, inlineDecorations, outputLineIndex) {\n        this._assertVisible();\n        const lineBreakData = this._projectionData;\n        const deltaStartIndex = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n        const lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n        const lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n        const tokens = lineWithInjections.sliceAndInflate(lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections, deltaStartIndex);\n        let lineContent = tokens.getLineContent();\n        if (outputLineIndex > 0) {\n            lineContent = spaces(lineBreakData.wrappedTextIndentLength) + lineContent;\n        }\n        const minColumn = this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n        const maxColumn = lineContent.length + 1;\n        const continuesWithWrappedLine = (outputLineIndex + 1 < this.getViewLineCount());\n        const startVisibleColumn = (outputLineIndex === 0 ? 0 : lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1]);\n        return new ViewLineData(lineContent, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens, inlineDecorations);\n    }\n    getModelColumnOfViewPosition(outputLineIndex, outputColumn) {\n        this._assertVisible();\n        return this._projectionData.translateToInputOffset(outputLineIndex, outputColumn - 1) + 1;\n    }\n    getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity = 2 /* PositionAffinity.None */) {\n        this._assertVisible();\n        const r = this._projectionData.translateToOutputPosition(inputColumn - 1, affinity);\n        return r.toPosition(deltaLineNumber);\n    }\n    getViewLineNumberOfModelPosition(deltaLineNumber, inputColumn) {\n        this._assertVisible();\n        const r = this._projectionData.translateToOutputPosition(inputColumn - 1);\n        return deltaLineNumber + r.outputLineIndex;\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        const baseViewLineNumber = outputPosition.lineNumber - outputLineIndex;\n        const normalizedOutputPosition = this._projectionData.normalizeOutputPosition(outputLineIndex, outputPosition.column - 1, affinity);\n        const result = normalizedOutputPosition.toPosition(baseViewLineNumber);\n        return result;\n    }\n    getInjectedTextAt(outputLineIndex, outputColumn) {\n        return this._projectionData.getInjectedText(outputLineIndex, outputColumn - 1);\n    }\n    _assertVisible() {\n        if (!this._isVisible) {\n            throw new Error('Not supported');\n        }\n    }\n}\n/**\n * This projection does not change the model line.\n*/\nclass IdentityModelLineProjection {\n    constructor() { }\n    isVisible() {\n        return true;\n    }\n    setVisible(isVisible) {\n        if (isVisible) {\n            return this;\n        }\n        return HiddenModelLineProjection.INSTANCE;\n    }\n    getProjectionData() {\n        return null;\n    }\n    getViewLineCount() {\n        return 1;\n    }\n    getViewLineContent(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineContent(modelLineNumber);\n    }\n    getViewLineLength(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineLength(modelLineNumber);\n    }\n    getViewLineMinColumn(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineMinColumn(modelLineNumber);\n    }\n    getViewLineMaxColumn(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineMaxColumn(modelLineNumber);\n    }\n    getViewLineData(model, modelLineNumber, _outputLineIndex) {\n        const lineTokens = model.tokenization.getLineTokens(modelLineNumber);\n        const lineContent = lineTokens.getLineContent();\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate(), null);\n    }\n    getViewLinesData(model, modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, globalStartIndex, needed, result) {\n        if (!needed[globalStartIndex]) {\n            result[globalStartIndex] = null;\n            return;\n        }\n        result[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\n    }\n    getModelColumnOfViewPosition(_outputLineIndex, outputColumn) {\n        return outputColumn;\n    }\n    getViewPositionOfModelPosition(deltaLineNumber, inputColumn) {\n        return new Position(deltaLineNumber, inputColumn);\n    }\n    getViewLineNumberOfModelPosition(deltaLineNumber, _inputColumn) {\n        return deltaLineNumber;\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        return outputPosition;\n    }\n    getInjectedTextAt(_outputLineIndex, _outputColumn) {\n        return null;\n    }\n}\nIdentityModelLineProjection.INSTANCE = new IdentityModelLineProjection();\n/**\n * This projection hides the model line.\n */\nclass HiddenModelLineProjection {\n    constructor() { }\n    isVisible() {\n        return false;\n    }\n    setVisible(isVisible) {\n        if (!isVisible) {\n            return this;\n        }\n        return IdentityModelLineProjection.INSTANCE;\n    }\n    getProjectionData() {\n        return null;\n    }\n    getViewLineCount() {\n        return 0;\n    }\n    getViewLineContent(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineLength(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineMinColumn(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineMaxColumn(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineData(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLinesData(_model, _modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, _globalStartIndex, _needed, _result) {\n        throw new Error('Not supported');\n    }\n    getModelColumnOfViewPosition(_outputLineIndex, _outputColumn) {\n        throw new Error('Not supported');\n    }\n    getViewPositionOfModelPosition(_deltaLineNumber, _inputColumn) {\n        throw new Error('Not supported');\n    }\n    getViewLineNumberOfModelPosition(_deltaLineNumber, _inputColumn) {\n        throw new Error('Not supported');\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        throw new Error('Not supported');\n    }\n    getInjectedTextAt(_outputLineIndex, _outputColumn) {\n        throw new Error('Not supported');\n    }\n}\nHiddenModelLineProjection.INSTANCE = new HiddenModelLineProjection();\nconst _spaces = [''];\nfunction spaces(count) {\n    if (count >= _spaces.length) {\n        for (let i = 1; i <= count; i++) {\n            _spaces[i] = _makeSpaces(i);\n        }\n    }\n    return _spaces[count];\n}\nfunction _makeSpaces(count) {\n    return new Array(count + 1).join(' ');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { IndentGuide, IndentGuideHorizontalLine } from '../textModelGuides.js';\nimport { ModelDecorationOptions } from '../model/textModel.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { createModelLineProjection } from './modelLineProjection.js';\nimport { ConstantTimePrefixSumComputer } from '../model/prefixSumComputer.js';\nimport { ViewLineData } from '../viewModel.js';\nexport class ViewModelLinesFromProjectedModel {\n    constructor(editorId, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, tabSize, wrappingStrategy, wrappingColumn, wrappingIndent, wordBreak) {\n        this._editorId = editorId;\n        this.model = model;\n        this._validModelVersionId = -1;\n        this._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\n        this._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\n        this.fontInfo = fontInfo;\n        this.tabSize = tabSize;\n        this.wrappingStrategy = wrappingStrategy;\n        this.wrappingColumn = wrappingColumn;\n        this.wrappingIndent = wrappingIndent;\n        this.wordBreak = wordBreak;\n        this._constructLines(/*resetHiddenAreas*/ true, null);\n    }\n    dispose() {\n        this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n    }\n    createCoordinatesConverter() {\n        return new CoordinatesConverter(this);\n    }\n    _constructLines(resetHiddenAreas, previousLineBreaks) {\n        this.modelLineProjections = [];\n        if (resetHiddenAreas) {\n            this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n        }\n        const linesContent = this.model.getLinesContent();\n        const injectedTextDecorations = this.model.getInjectedTextDecorations(this._editorId);\n        const lineCount = linesContent.length;\n        const lineBreaksComputer = this.createLineBreaksComputer();\n        const injectedTextQueue = new arrays.ArrayQueue(LineInjectedText.fromDecorations(injectedTextDecorations));\n        for (let i = 0; i < lineCount; i++) {\n            const lineInjectedText = injectedTextQueue.takeWhile(t => t.lineNumber === i + 1);\n            lineBreaksComputer.addRequest(linesContent[i], lineInjectedText, previousLineBreaks ? previousLineBreaks[i] : null);\n        }\n        const linesBreaks = lineBreaksComputer.finalize();\n        const values = [];\n        const hiddenAreas = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)).sort(Range.compareRangesUsingStarts);\n        let hiddenAreaStart = 1, hiddenAreaEnd = 0;\n        let hiddenAreaIdx = -1;\n        let nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n        for (let i = 0; i < lineCount; i++) {\n            const lineNumber = i + 1;\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n                hiddenAreaIdx++;\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n            }\n            const isInHiddenArea = (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd);\n            const line = createModelLineProjection(linesBreaks[i], !isInHiddenArea);\n            values[i] = line.getViewLineCount();\n            this.modelLineProjections[i] = line;\n        }\n        this._validModelVersionId = this.model.getVersionId();\n        this.projectedModelLineLineCounts = new ConstantTimePrefixSumComputer(values);\n    }\n    getHiddenAreas() {\n        return this.hiddenAreasDecorationIds.map((decId) => this.model.getDecorationRange(decId));\n    }\n    setHiddenAreas(_ranges) {\n        const validatedRanges = _ranges.map(r => this.model.validateRange(r));\n        const newRanges = normalizeLineRanges(validatedRanges);\n        // TODO@Martin: Please stop calling this method on each model change!\n        // This checks if there really was a change\n        const oldRanges = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)).sort(Range.compareRangesUsingStarts);\n        if (newRanges.length === oldRanges.length) {\n            let hasDifference = false;\n            for (let i = 0; i < newRanges.length; i++) {\n                if (!newRanges[i].equalsRange(oldRanges[i])) {\n                    hasDifference = true;\n                    break;\n                }\n            }\n            if (!hasDifference) {\n                return false;\n            }\n        }\n        const newDecorations = newRanges.map((r) => ({\n            range: r,\n            options: ModelDecorationOptions.EMPTY,\n        }));\n        this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, newDecorations);\n        const hiddenAreas = newRanges;\n        let hiddenAreaStart = 1, hiddenAreaEnd = 0;\n        let hiddenAreaIdx = -1;\n        let nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n        let hasVisibleLine = false;\n        for (let i = 0; i < this.modelLineProjections.length; i++) {\n            const lineNumber = i + 1;\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n                hiddenAreaIdx++;\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n            }\n            let lineChanged = false;\n            if (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\n                // Line should be hidden\n                if (this.modelLineProjections[i].isVisible()) {\n                    this.modelLineProjections[i] = this.modelLineProjections[i].setVisible(false);\n                    lineChanged = true;\n                }\n            }\n            else {\n                hasVisibleLine = true;\n                // Line should be visible\n                if (!this.modelLineProjections[i].isVisible()) {\n                    this.modelLineProjections[i] = this.modelLineProjections[i].setVisible(true);\n                    lineChanged = true;\n                }\n            }\n            if (lineChanged) {\n                const newOutputLineCount = this.modelLineProjections[i].getViewLineCount();\n                this.projectedModelLineLineCounts.setValue(i, newOutputLineCount);\n            }\n        }\n        if (!hasVisibleLine) {\n            // Cannot have everything be hidden => reveal everything!\n            this.setHiddenAreas([]);\n        }\n        return true;\n    }\n    modelPositionIsVisible(modelLineNumber, _modelColumn) {\n        if (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n            // invalid arguments\n            return false;\n        }\n        return this.modelLineProjections[modelLineNumber - 1].isVisible();\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        if (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n            // invalid arguments\n            return 1;\n        }\n        return this.modelLineProjections[modelLineNumber - 1].getViewLineCount();\n    }\n    setTabSize(newTabSize) {\n        if (this.tabSize === newTabSize) {\n            return false;\n        }\n        this.tabSize = newTabSize;\n        this._constructLines(/*resetHiddenAreas*/ false, null);\n        return true;\n    }\n    setWrappingSettings(fontInfo, wrappingStrategy, wrappingColumn, wrappingIndent, wordBreak) {\n        const equalFontInfo = this.fontInfo.equals(fontInfo);\n        const equalWrappingStrategy = (this.wrappingStrategy === wrappingStrategy);\n        const equalWrappingColumn = (this.wrappingColumn === wrappingColumn);\n        const equalWrappingIndent = (this.wrappingIndent === wrappingIndent);\n        const equalWordBreak = (this.wordBreak === wordBreak);\n        if (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent && equalWordBreak) {\n            return false;\n        }\n        const onlyWrappingColumnChanged = (equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent && equalWordBreak);\n        this.fontInfo = fontInfo;\n        this.wrappingStrategy = wrappingStrategy;\n        this.wrappingColumn = wrappingColumn;\n        this.wrappingIndent = wrappingIndent;\n        this.wordBreak = wordBreak;\n        let previousLineBreaks = null;\n        if (onlyWrappingColumnChanged) {\n            previousLineBreaks = [];\n            for (let i = 0, len = this.modelLineProjections.length; i < len; i++) {\n                previousLineBreaks[i] = this.modelLineProjections[i].getProjectionData();\n            }\n        }\n        this._constructLines(/*resetHiddenAreas*/ false, previousLineBreaks);\n        return true;\n    }\n    createLineBreaksComputer() {\n        const lineBreaksComputerFactory = (this.wrappingStrategy === 'advanced'\n            ? this._domLineBreaksComputerFactory\n            : this._monospaceLineBreaksComputerFactory);\n        return lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent, this.wordBreak);\n    }\n    onModelFlushed() {\n        this._constructLines(/*resetHiddenAreas*/ true, null);\n    }\n    onModelLinesDeleted(versionId, fromLineNumber, toLineNumber) {\n        if (!versionId || versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return null;\n        }\n        const outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n        const outputToLineNumber = this.projectedModelLineLineCounts.getPrefixSum(toLineNumber);\n        this.modelLineProjections.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n        this.projectedModelLineLineCounts.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n        return new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\n    }\n    onModelLinesInserted(versionId, fromLineNumber, _toLineNumber, lineBreaks) {\n        if (!versionId || versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return null;\n        }\n        // cannot use this.getHiddenAreas() because those decorations have already seen the effect of this model change\n        const isInHiddenArea = (fromLineNumber > 2 && !this.modelLineProjections[fromLineNumber - 2].isVisible());\n        const outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n        let totalOutputLineCount = 0;\n        const insertLines = [];\n        const insertPrefixSumValues = [];\n        for (let i = 0, len = lineBreaks.length; i < len; i++) {\n            const line = createModelLineProjection(lineBreaks[i], !isInHiddenArea);\n            insertLines.push(line);\n            const outputLineCount = line.getViewLineCount();\n            totalOutputLineCount += outputLineCount;\n            insertPrefixSumValues[i] = outputLineCount;\n        }\n        // TODO@Alex: use arrays.arrayInsert\n        this.modelLineProjections =\n            this.modelLineProjections.slice(0, fromLineNumber - 1)\n                .concat(insertLines)\n                .concat(this.modelLineProjections.slice(fromLineNumber - 1));\n        this.projectedModelLineLineCounts.insertValues(fromLineNumber - 1, insertPrefixSumValues);\n        return new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\n    }\n    onModelLineChanged(versionId, lineNumber, lineBreakData) {\n        if (versionId !== null && versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return [false, null, null, null];\n        }\n        const lineIndex = lineNumber - 1;\n        const oldOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n        const isVisible = this.modelLineProjections[lineIndex].isVisible();\n        const line = createModelLineProjection(lineBreakData, isVisible);\n        this.modelLineProjections[lineIndex] = line;\n        const newOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n        let lineMappingChanged = false;\n        let changeFrom = 0;\n        let changeTo = -1;\n        let insertFrom = 0;\n        let insertTo = -1;\n        let deleteFrom = 0;\n        let deleteTo = -1;\n        if (oldOutputLineCount > newOutputLineCount) {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + newOutputLineCount - 1;\n            deleteFrom = changeTo + 1;\n            deleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\n            lineMappingChanged = true;\n        }\n        else if (oldOutputLineCount < newOutputLineCount) {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + oldOutputLineCount - 1;\n            insertFrom = changeTo + 1;\n            insertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\n            lineMappingChanged = true;\n        }\n        else {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + newOutputLineCount - 1;\n        }\n        this.projectedModelLineLineCounts.setValue(lineIndex, newOutputLineCount);\n        const viewLinesChangedEvent = (changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo - changeFrom + 1) : null);\n        const viewLinesInsertedEvent = (insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null);\n        const viewLinesDeletedEvent = (deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null);\n        return [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\n    }\n    acceptVersionId(versionId) {\n        this._validModelVersionId = versionId;\n        if (this.modelLineProjections.length === 1 && !this.modelLineProjections[0].isVisible()) {\n            // At least one line must be visible => reset hidden areas\n            this.setHiddenAreas([]);\n        }\n    }\n    getViewLineCount() {\n        return this.projectedModelLineLineCounts.getTotalSum();\n    }\n    _toValidViewLineNumber(viewLineNumber) {\n        if (viewLineNumber < 1) {\n            return 1;\n        }\n        const viewLineCount = this.getViewLineCount();\n        if (viewLineNumber > viewLineCount) {\n            return viewLineCount;\n        }\n        return viewLineNumber | 0;\n    }\n    getActiveIndentGuide(viewLineNumber, minLineNumber, maxLineNumber) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        minLineNumber = this._toValidViewLineNumber(minLineNumber);\n        maxLineNumber = this._toValidViewLineNumber(maxLineNumber);\n        const modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\n        const modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\n        const modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\n        const result = this.model.guides.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\n        const viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\n        const viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\n        return {\n            startLineNumber: viewStartPosition.lineNumber,\n            endLineNumber: viewEndPosition.lineNumber,\n            indent: result.indent\n        };\n    }\n    // #region ViewLineInfo\n    getViewLineInfo(viewLineNumber) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        const r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n        const lineIndex = r.index;\n        const remainder = r.remainder;\n        return new ViewLineInfo(lineIndex + 1, remainder);\n    }\n    getMinColumnOfViewLine(viewLineInfo) {\n        return this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMinColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n    }\n    getMaxColumnOfViewLine(viewLineInfo) {\n        return this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMaxColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n    }\n    getModelStartPositionOfViewLine(viewLineInfo) {\n        const line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n        const minViewColumn = line.getViewLineMinColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n        const column = line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx, minViewColumn);\n        return new Position(viewLineInfo.modelLineNumber, column);\n    }\n    getModelEndPositionOfViewLine(viewLineInfo) {\n        const line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n        const maxViewColumn = line.getViewLineMaxColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n        const column = line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx, maxViewColumn);\n        return new Position(viewLineInfo.modelLineNumber, column);\n    }\n    getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber) {\n        const startViewLine = this.getViewLineInfo(viewStartLineNumber);\n        const endViewLine = this.getViewLineInfo(viewEndLineNumber);\n        const result = new Array();\n        let lastVisibleModelPos = this.getModelStartPositionOfViewLine(startViewLine);\n        let viewLines = new Array();\n        for (let curModelLine = startViewLine.modelLineNumber; curModelLine <= endViewLine.modelLineNumber; curModelLine++) {\n            const line = this.modelLineProjections[curModelLine - 1];\n            if (line.isVisible()) {\n                const startOffset = curModelLine === startViewLine.modelLineNumber\n                    ? startViewLine.modelLineWrappedLineIdx\n                    : 0;\n                const endOffset = curModelLine === endViewLine.modelLineNumber\n                    ? endViewLine.modelLineWrappedLineIdx + 1\n                    : line.getViewLineCount();\n                for (let i = startOffset; i < endOffset; i++) {\n                    viewLines.push(new ViewLineInfo(curModelLine, i));\n                }\n            }\n            if (!line.isVisible() && lastVisibleModelPos) {\n                const lastVisibleModelPos2 = new Position(curModelLine - 1, this.model.getLineMaxColumn(curModelLine - 1) + 1);\n                const modelRange = Range.fromPositions(lastVisibleModelPos, lastVisibleModelPos2);\n                result.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n                viewLines = [];\n                lastVisibleModelPos = null;\n            }\n            else if (line.isVisible() && !lastVisibleModelPos) {\n                lastVisibleModelPos = new Position(curModelLine, 1);\n            }\n        }\n        if (lastVisibleModelPos) {\n            const modelRange = Range.fromPositions(lastVisibleModelPos, this.getModelEndPositionOfViewLine(endViewLine));\n            result.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n        }\n        return result;\n    }\n    // #endregion\n    getViewLinesBracketGuides(viewStartLineNumber, viewEndLineNumber, activeViewPosition, options) {\n        const modelActivePosition = activeViewPosition ? this.convertViewPositionToModelPosition(activeViewPosition.lineNumber, activeViewPosition.column) : null;\n        const resultPerViewLine = [];\n        for (const group of this.getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber)) {\n            const modelRangeStartLineNumber = group.modelRange.startLineNumber;\n            const bracketGuidesPerModelLine = this.model.guides.getLinesBracketGuides(modelRangeStartLineNumber, group.modelRange.endLineNumber, modelActivePosition, options);\n            for (const viewLineInfo of group.viewLines) {\n                const bracketGuides = bracketGuidesPerModelLine[viewLineInfo.modelLineNumber - modelRangeStartLineNumber];\n                // visibleColumns stay as they are (this is a bug and needs to be fixed, but it is not a regression)\n                // model-columns must be converted to view-model columns.\n                const result = bracketGuides.map(g => {\n                    if (g.forWrappedLinesAfterColumn !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesAfterColumn);\n                        if (p.lineNumber >= viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    if (g.forWrappedLinesBeforeOrAtColumn !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesBeforeOrAtColumn);\n                        if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    if (!g.horizontalLine) {\n                        return g;\n                    }\n                    let column = -1;\n                    if (g.column !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.column);\n                        if (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n                            column = p.column;\n                        }\n                        else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                            column = this.getMinColumnOfViewLine(viewLineInfo);\n                        }\n                        else if (p.lineNumber > viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    const viewPosition = this.convertModelPositionToViewPosition(viewLineInfo.modelLineNumber, g.horizontalLine.endColumn);\n                    const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.horizontalLine.endColumn);\n                    if (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n                        return new IndentGuide(g.visibleColumn, column, g.className, new IndentGuideHorizontalLine(g.horizontalLine.top, viewPosition.column), -1, -1);\n                    }\n                    else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                        return undefined;\n                    }\n                    else {\n                        if (g.visibleColumn !== -1) {\n                            // Don't repeat horizontal lines that use visibleColumn for unrelated lines.\n                            return undefined;\n                        }\n                        return new IndentGuide(g.visibleColumn, column, g.className, new IndentGuideHorizontalLine(g.horizontalLine.top, this.getMaxColumnOfViewLine(viewLineInfo)), -1, -1);\n                    }\n                });\n                resultPerViewLine.push(result.filter((r) => !!r));\n            }\n        }\n        return resultPerViewLine;\n    }\n    getViewLinesIndentGuides(viewStartLineNumber, viewEndLineNumber) {\n        // TODO: Use the same code as in `getViewLinesBracketGuides`.\n        // Future TODO: Merge with `getViewLinesBracketGuides`.\n        // However, this requires more refactoring of indent guides.\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n        const modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\n        const modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\n        let result = [];\n        const resultRepeatCount = [];\n        const resultRepeatOption = [];\n        const modelStartLineIndex = modelStart.lineNumber - 1;\n        const modelEndLineIndex = modelEnd.lineNumber - 1;\n        let reqStart = null;\n        for (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (line.isVisible()) {\n                const viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n                const viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\n                const count = viewLineEndIndex - viewLineStartIndex + 1;\n                let option = 0 /* IndentGuideRepeatOption.BlockNone */;\n                if (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\n                    // wrapped lines should block indent guides\n                    option = (viewLineStartIndex === 0 ? 1 /* IndentGuideRepeatOption.BlockSubsequent */ : 2 /* IndentGuideRepeatOption.BlockAll */);\n                }\n                resultRepeatCount.push(count);\n                resultRepeatOption.push(option);\n                // merge into previous request\n                if (reqStart === null) {\n                    reqStart = new Position(modelLineIndex + 1, 0);\n                }\n            }\n            else {\n                // hit invisible line => flush request\n                if (reqStart !== null) {\n                    result = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\n                    reqStart = null;\n                }\n            }\n        }\n        if (reqStart !== null) {\n            result = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\n            reqStart = null;\n        }\n        const viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n        const viewIndents = new Array(viewLineCount);\n        let currIndex = 0;\n        for (let i = 0, len = result.length; i < len; i++) {\n            let value = result[i];\n            const count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\n            const option = resultRepeatOption[i];\n            let blockAtIndex;\n            if (option === 2 /* IndentGuideRepeatOption.BlockAll */) {\n                blockAtIndex = 0;\n            }\n            else if (option === 1 /* IndentGuideRepeatOption.BlockSubsequent */) {\n                blockAtIndex = 1;\n            }\n            else {\n                blockAtIndex = count;\n            }\n            for (let j = 0; j < count; j++) {\n                if (j === blockAtIndex) {\n                    value = 0;\n                }\n                viewIndents[currIndex++] = value;\n            }\n        }\n        return viewIndents;\n    }\n    getViewLineContent(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineContent(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineLength(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineLength(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineMinColumn(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineMinColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineMaxColumn(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineMaxColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineData(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineData(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLinesData(viewStartLineNumber, viewEndLineNumber, needed) {\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n        const start = this.projectedModelLineLineCounts.getIndexOf(viewStartLineNumber - 1);\n        let viewLineNumber = viewStartLineNumber;\n        const startModelLineIndex = start.index;\n        const startRemainder = start.remainder;\n        const result = [];\n        for (let modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (!line.isVisible()) {\n                continue;\n            }\n            const fromViewLineIndex = (modelLineIndex === startModelLineIndex ? startRemainder : 0);\n            let remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\n            let lastLine = false;\n            if (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\n                lastLine = true;\n                remainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\n            }\n            line.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, remainingViewLineCount, viewLineNumber - viewStartLineNumber, needed, result);\n            viewLineNumber += remainingViewLineCount;\n            if (lastLine) {\n                break;\n            }\n        }\n        return result;\n    }\n    validateViewPosition(viewLineNumber, viewColumn, expectedModelPosition) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        const r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n        const lineIndex = r.index;\n        const remainder = r.remainder;\n        const line = this.modelLineProjections[lineIndex];\n        const minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n        const maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n        if (viewColumn < minColumn) {\n            viewColumn = minColumn;\n        }\n        if (viewColumn > maxColumn) {\n            viewColumn = maxColumn;\n        }\n        const computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\n        const computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\n        if (computedModelPosition.equals(expectedModelPosition)) {\n            return new Position(viewLineNumber, viewColumn);\n        }\n        return this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\n    }\n    validateViewRange(viewRange, expectedModelRange) {\n        const validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\n        const validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\n        return new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\n    }\n    convertViewPositionToModelPosition(viewLineNumber, viewColumn) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        const inputColumn = this.modelLineProjections[info.modelLineNumber - 1].getModelColumnOfViewPosition(info.modelLineWrappedLineIdx, viewColumn);\n        // console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\n        return this.model.validatePosition(new Position(info.modelLineNumber, inputColumn));\n    }\n    convertViewRangeToModelRange(viewRange) {\n        const start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\n        const end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    convertModelPositionToViewPosition(_modelLineNumber, _modelColumn, affinity = 2 /* PositionAffinity.None */, allowZeroLineNumber = false, belowHiddenRanges = false) {\n        const validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\n        const inputLineNumber = validPosition.lineNumber;\n        const inputColumn = validPosition.column;\n        let lineIndex = inputLineNumber - 1, lineIndexChanged = false;\n        if (belowHiddenRanges) {\n            while (lineIndex < this.modelLineProjections.length && !this.modelLineProjections[lineIndex].isVisible()) {\n                lineIndex++;\n                lineIndexChanged = true;\n            }\n        }\n        else {\n            while (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n                lineIndex--;\n                lineIndexChanged = true;\n            }\n        }\n        if (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            // Could not reach a real line\n            // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\n            // TODO@alexdima@hediet this isn't soo pretty\n            return new Position(allowZeroLineNumber ? 0 : 1, 1);\n        }\n        const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n        let r;\n        if (lineIndexChanged) {\n            if (belowHiddenRanges) {\n                r = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, 1, affinity);\n            }\n            else {\n                r = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1), affinity);\n            }\n        }\n        else {\n            r = this.modelLineProjections[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity);\n        }\n        // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\n        return r;\n    }\n    /**\n     * @param affinity The affinity in case of an empty range. Has no effect for non-empty ranges.\n    */\n    convertModelRangeToViewRange(modelRange, affinity = 0 /* PositionAffinity.Left */) {\n        if (modelRange.isEmpty()) {\n            const start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, affinity);\n            return Range.fromPositions(start);\n        }\n        else {\n            const start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, 1 /* PositionAffinity.Right */);\n            const end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn, 0 /* PositionAffinity.Left */);\n            return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n        }\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        let lineIndex = modelLineNumber - 1;\n        if (this.modelLineProjections[lineIndex].isVisible()) {\n            // this model line is visible\n            const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n            return this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, modelColumn);\n        }\n        // this model line is not visible\n        while (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            lineIndex--;\n        }\n        if (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            // Could not reach a real line\n            return 1;\n        }\n        const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n        return this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n    }\n    getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations) {\n        const modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\n        const modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\n        if (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\n            // most likely there are no hidden lines => fast path\n            // fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\n            return this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations);\n        }\n        let result = [];\n        const modelStartLineIndex = modelStart.lineNumber - 1;\n        const modelEndLineIndex = modelEnd.lineNumber - 1;\n        let reqStart = null;\n        for (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (line.isVisible()) {\n                // merge into previous request\n                if (reqStart === null) {\n                    reqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n                }\n            }\n            else {\n                // hit invisible line => flush request\n                if (reqStart !== null) {\n                    const maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\n                    result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation, onlyMinimapDecorations));\n                    reqStart = null;\n                }\n            }\n        }\n        if (reqStart !== null) {\n            result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, onlyMinimapDecorations));\n            reqStart = null;\n        }\n        result.sort((a, b) => {\n            const res = Range.compareRangesUsingStarts(a.range, b.range);\n            if (res === 0) {\n                if (a.id < b.id) {\n                    return -1;\n                }\n                if (a.id > b.id) {\n                    return 1;\n                }\n                return 0;\n            }\n            return res;\n        });\n        // Eliminate duplicate decorations that might have intersected our visible ranges multiple times\n        const finalResult = [];\n        let finalResultLen = 0;\n        let prevDecId = null;\n        for (const dec of result) {\n            const decId = dec.id;\n            if (prevDecId === decId) {\n                // skip\n                continue;\n            }\n            prevDecId = decId;\n            finalResult[finalResultLen++] = dec;\n        }\n        return finalResult;\n    }\n    getInjectedTextAt(position) {\n        const info = this.getViewLineInfo(position.lineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getInjectedTextAt(info.modelLineWrappedLineIdx, position.column);\n    }\n    normalizePosition(position, affinity) {\n        const info = this.getViewLineInfo(position.lineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].normalizePosition(info.modelLineWrappedLineIdx, position, affinity);\n    }\n    getLineIndentColumn(lineNumber) {\n        const info = this.getViewLineInfo(lineNumber);\n        if (info.modelLineWrappedLineIdx === 0) {\n            return this.model.getLineIndentColumn(info.modelLineNumber);\n        }\n        // wrapped lines have no indentation.\n        // We deliberately don't handle the case that indentation is wrapped\n        // to avoid two view lines reporting indentation for the very same model line.\n        return 0;\n    }\n}\n/**\n * Overlapping unsorted ranges:\n * [   )      [ )       [  )\n *    [    )      [       )\n * ->\n * Non overlapping sorted ranges:\n * [       )  [ ) [        )\n *\n * Note: This function only considers line information! Columns are ignored.\n*/\nfunction normalizeLineRanges(ranges) {\n    if (ranges.length === 0) {\n        return [];\n    }\n    const sortedRanges = ranges.slice();\n    sortedRanges.sort(Range.compareRangesUsingStarts);\n    const result = [];\n    let currentRangeStart = sortedRanges[0].startLineNumber;\n    let currentRangeEnd = sortedRanges[0].endLineNumber;\n    for (let i = 1, len = sortedRanges.length; i < len; i++) {\n        const range = sortedRanges[i];\n        if (range.startLineNumber > currentRangeEnd + 1) {\n            result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n            currentRangeStart = range.startLineNumber;\n            currentRangeEnd = range.endLineNumber;\n        }\n        else if (range.endLineNumber > currentRangeEnd) {\n            currentRangeEnd = range.endLineNumber;\n        }\n    }\n    result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n    return result;\n}\n/**\n * Represents a view line. Can be used to efficiently query more information about it.\n */\nclass ViewLineInfo {\n    constructor(modelLineNumber, modelLineWrappedLineIdx) {\n        this.modelLineNumber = modelLineNumber;\n        this.modelLineWrappedLineIdx = modelLineWrappedLineIdx;\n    }\n}\n/**\n * A list of view lines that have a contiguous span in the model.\n*/\nclass ViewLineInfoGroupedByModelRange {\n    constructor(modelRange, viewLines) {\n        this.modelRange = modelRange;\n        this.viewLines = viewLines;\n    }\n}\nclass CoordinatesConverter {\n    constructor(lines) {\n        this._lines = lines;\n    }\n    // View -> Model conversion and related methods\n    convertViewPositionToModelPosition(viewPosition) {\n        return this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\n    }\n    convertViewRangeToModelRange(viewRange) {\n        return this._lines.convertViewRangeToModelRange(viewRange);\n    }\n    validateViewPosition(viewPosition, expectedModelPosition) {\n        return this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\n    }\n    validateViewRange(viewRange, expectedModelRange) {\n        return this._lines.validateViewRange(viewRange, expectedModelRange);\n    }\n    // Model -> View conversion and related methods\n    convertModelPositionToViewPosition(modelPosition, affinity, allowZero, belowHiddenRanges) {\n        return this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column, affinity, allowZero, belowHiddenRanges);\n    }\n    convertModelRangeToViewRange(modelRange, affinity) {\n        return this._lines.convertModelRangeToViewRange(modelRange, affinity);\n    }\n    modelPositionIsVisible(modelPosition) {\n        return this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        return this._lines.getModelLineViewLineCount(modelLineNumber);\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        return this._lines.getViewLineNumberOfModelPosition(modelLineNumber, modelColumn);\n    }\n}\nexport class ViewModelLinesFromModelAsIs {\n    constructor(model) {\n        this.model = model;\n    }\n    dispose() {\n    }\n    createCoordinatesConverter() {\n        return new IdentityCoordinatesConverter(this);\n    }\n    getHiddenAreas() {\n        return [];\n    }\n    setHiddenAreas(_ranges) {\n        return false;\n    }\n    setTabSize(_newTabSize) {\n        return false;\n    }\n    setWrappingSettings(_fontInfo, _wrappingStrategy, _wrappingColumn, _wrappingIndent) {\n        return false;\n    }\n    createLineBreaksComputer() {\n        const result = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                result.push(null);\n            },\n            finalize: () => {\n                return result;\n            }\n        };\n    }\n    onModelFlushed() {\n    }\n    onModelLinesDeleted(_versionId, fromLineNumber, toLineNumber) {\n        return new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\n    }\n    onModelLinesInserted(_versionId, fromLineNumber, toLineNumber, lineBreaks) {\n        return new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\n    }\n    onModelLineChanged(_versionId, lineNumber, lineBreakData) {\n        return [false, new viewEvents.ViewLinesChangedEvent(lineNumber, 1), null, null];\n    }\n    acceptVersionId(_versionId) {\n    }\n    getViewLineCount() {\n        return this.model.getLineCount();\n    }\n    getActiveIndentGuide(viewLineNumber, _minLineNumber, _maxLineNumber) {\n        return {\n            startLineNumber: viewLineNumber,\n            endLineNumber: viewLineNumber,\n            indent: 0\n        };\n    }\n    getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition) {\n        return new Array(endLineNumber - startLineNumber + 1).fill([]);\n    }\n    getViewLinesIndentGuides(viewStartLineNumber, viewEndLineNumber) {\n        const viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n        const result = new Array(viewLineCount);\n        for (let i = 0; i < viewLineCount; i++) {\n            result[i] = 0;\n        }\n        return result;\n    }\n    getViewLineContent(viewLineNumber) {\n        return this.model.getLineContent(viewLineNumber);\n    }\n    getViewLineLength(viewLineNumber) {\n        return this.model.getLineLength(viewLineNumber);\n    }\n    getViewLineMinColumn(viewLineNumber) {\n        return this.model.getLineMinColumn(viewLineNumber);\n    }\n    getViewLineMaxColumn(viewLineNumber) {\n        return this.model.getLineMaxColumn(viewLineNumber);\n    }\n    getViewLineData(viewLineNumber) {\n        const lineTokens = this.model.tokenization.getLineTokens(viewLineNumber);\n        const lineContent = lineTokens.getLineContent();\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate(), null);\n    }\n    getViewLinesData(viewStartLineNumber, viewEndLineNumber, needed) {\n        const lineCount = this.model.getLineCount();\n        viewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\n        viewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\n        const result = [];\n        for (let lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\n            const idx = lineNumber - viewStartLineNumber;\n            result[idx] = needed[idx] ? this.getViewLineData(lineNumber) : null;\n        }\n        return result;\n    }\n    getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations) {\n        return this.model.getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations);\n    }\n    normalizePosition(position, affinity) {\n        return this.model.normalizePosition(position, affinity);\n    }\n    getLineIndentColumn(lineNumber) {\n        return this.model.getLineIndentColumn(lineNumber);\n    }\n    getInjectedTextAt(position) {\n        // Identity lines collection does not support injected text.\n        return null;\n    }\n}\nclass IdentityCoordinatesConverter {\n    constructor(lines) {\n        this._lines = lines;\n    }\n    _validPosition(pos) {\n        return this._lines.model.validatePosition(pos);\n    }\n    _validRange(range) {\n        return this._lines.model.validateRange(range);\n    }\n    // View -> Model conversion and related methods\n    convertViewPositionToModelPosition(viewPosition) {\n        return this._validPosition(viewPosition);\n    }\n    convertViewRangeToModelRange(viewRange) {\n        return this._validRange(viewRange);\n    }\n    validateViewPosition(_viewPosition, expectedModelPosition) {\n        return this._validPosition(expectedModelPosition);\n    }\n    validateViewRange(_viewRange, expectedModelRange) {\n        return this._validRange(expectedModelRange);\n    }\n    // Model -> View conversion and related methods\n    convertModelPositionToViewPosition(modelPosition) {\n        return this._validPosition(modelPosition);\n    }\n    convertModelRangeToViewRange(modelRange) {\n        return this._validRange(modelRange);\n    }\n    modelPositionIsVisible(modelPosition) {\n        const lineCount = this._lines.model.getLineCount();\n        if (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\n            // invalid arguments\n            return false;\n        }\n        return true;\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        return 1;\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        return modelLineNumber;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayQueue } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { CursorsController } from '../cursor/cursor.js';\nimport { CursorConfiguration } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport * as textModelEvents from '../textModelEvents.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { tokenizeLineToHTML } from '../languages/textToHtmlTokenizer.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport { MinimapLinesRenderingData, OverviewRulerDecorationsGroup, ViewLineRenderingData } from '../viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { FocusChangedEvent, HiddenAreasChangedEvent, ModelContentChangedEvent, ModelDecorationsChangedEvent, ModelLanguageChangedEvent, ModelLanguageConfigurationChangedEvent, ModelOptionsChangedEvent, ModelTokensChangedEvent, ReadOnlyEditAttemptEvent, ScrollChangedEvent, ViewModelEventDispatcher, ViewZonesChangedEvent } from '../viewModelEventDispatcher.js';\nimport { ViewModelLinesFromModelAsIs, ViewModelLinesFromProjectedModel } from './viewModelLines.js';\nconst USE_IDENTITY_LINES_COLLECTION = true;\nexport class ViewModel extends Disposable {\n    constructor(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame, languageConfigurationService, _themeService, _attachedView) {\n        super();\n        this.languageConfigurationService = languageConfigurationService;\n        this._themeService = _themeService;\n        this._attachedView = _attachedView;\n        this.hiddenAreasModel = new HiddenAreasModel();\n        this.previousHiddenAreas = [];\n        this._editorId = editorId;\n        this._configuration = configuration;\n        this.model = model;\n        this._eventDispatcher = new ViewModelEventDispatcher();\n        this.onEvent = this._eventDispatcher.onEvent;\n        this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n        this._updateConfigurationViewLineCount = this._register(new RunOnceScheduler(() => this._updateConfigurationViewLineCountNow(), 0));\n        this._hasFocus = false;\n        this._viewportStart = ViewportStart.create(this.model);\n        if (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\n            this._lines = new ViewModelLinesFromModelAsIs(this.model);\n        }\n        else {\n            const options = this._configuration.options;\n            const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n            const wrappingStrategy = options.get(137 /* EditorOption.wrappingStrategy */);\n            const wrappingInfo = options.get(144 /* EditorOption.wrappingInfo */);\n            const wrappingIndent = options.get(136 /* EditorOption.wrappingIndent */);\n            const wordBreak = options.get(128 /* EditorOption.wordBreak */);\n            this._lines = new ViewModelLinesFromProjectedModel(this._editorId, this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak);\n        }\n        this.coordinatesConverter = this._lines.createCoordinatesConverter();\n        this._cursor = this._register(new CursorsController(model, this, this.coordinatesConverter, this.cursorConfig));\n        this.viewLayout = this._register(new ViewLayout(this._configuration, this.getLineCount(), scheduleAtNextAnimationFrame));\n        this._register(this.viewLayout.onDidScroll((e) => {\n            if (e.scrollTopChanged) {\n                this._handleVisibleLinesChanged();\n            }\n            if (e.scrollTopChanged) {\n                this._viewportStart.invalidate();\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(e.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop, e.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop));\n        }));\n        this._register(this.viewLayout.onDidContentSizeChange((e) => {\n            this._eventDispatcher.emitOutgoingEvent(e);\n        }));\n        this._decorations = new ViewModelDecorations(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter);\n        this._registerModelEvents();\n        this._register(this._configuration.onDidChangeFast((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                this._onConfigurationChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n        }));\n        this._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n        }));\n        this._register(this._themeService.onDidColorThemeChange((theme) => {\n            this._invalidateDecorationsColorCache();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme));\n        }));\n        this._updateConfigurationViewLineCountNow();\n    }\n    dispose() {\n        // First remove listeners, as disposing the lines might end up sending\n        // model decoration changed events ... and we no longer care about them ...\n        super.dispose();\n        this._decorations.dispose();\n        this._lines.dispose();\n        this._viewportStart.dispose();\n        this._eventDispatcher.dispose();\n    }\n    createLineBreaksComputer() {\n        return this._lines.createLineBreaksComputer();\n    }\n    addViewEventHandler(eventHandler) {\n        this._eventDispatcher.addViewEventHandler(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        this._eventDispatcher.removeViewEventHandler(eventHandler);\n    }\n    _updateConfigurationViewLineCountNow() {\n        this._configuration.setViewLineCount(this._lines.getViewLineCount());\n    }\n    getModelVisibleRanges() {\n        const linesViewportData = this.viewLayout.getLinesViewportData();\n        const viewVisibleRange = new Range(linesViewportData.startLineNumber, this.getLineMinColumn(linesViewportData.startLineNumber), linesViewportData.endLineNumber, this.getLineMaxColumn(linesViewportData.endLineNumber));\n        const modelVisibleRanges = this._toModelVisibleRanges(viewVisibleRange);\n        return modelVisibleRanges;\n    }\n    visibleLinesStabilized() {\n        const modelVisibleRanges = this.getModelVisibleRanges();\n        this._attachedView.setVisibleLines(modelVisibleRanges, true);\n    }\n    _handleVisibleLinesChanged() {\n        const modelVisibleRanges = this.getModelVisibleRanges();\n        this._attachedView.setVisibleLines(modelVisibleRanges, false);\n    }\n    setHasFocus(hasFocus) {\n        this._hasFocus = hasFocus;\n        this._cursor.setHasFocus(hasFocus);\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n        this._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n    }\n    onCompositionStart() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n    }\n    onCompositionEnd() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n    }\n    _captureStableViewport() {\n        // We might need to restore the current start view range, so save it (if available)\n        // But only if the scroll position is not at the top of the file\n        if (this._viewportStart.isValid && this.viewLayout.getCurrentScrollTop() > 0) {\n            const previousViewportStartViewPosition = new Position(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber));\n            const previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n            return new StableViewport(previousViewportStartModelPosition, this._viewportStart.startLineDelta);\n        }\n        return new StableViewport(null, 0);\n    }\n    _onConfigurationChanged(eventsCollector, e) {\n        const stableViewport = this._captureStableViewport();\n        const options = this._configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingStrategy = options.get(137 /* EditorOption.wrappingStrategy */);\n        const wrappingInfo = options.get(144 /* EditorOption.wrappingInfo */);\n        const wrappingIndent = options.get(136 /* EditorOption.wrappingIndent */);\n        const wordBreak = options.get(128 /* EditorOption.wordBreak */);\n        if (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak)) {\n            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n            this._cursor.onLineMappingChanged(eventsCollector);\n            this._decorations.onLineMappingChanged();\n            this.viewLayout.onFlushed(this.getLineCount());\n            this._updateConfigurationViewLineCount.schedule();\n        }\n        if (e.hasChanged(90 /* EditorOption.readOnly */)) {\n            // Must read again all decorations due to readOnly filtering\n            this._decorations.reset();\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        }\n        eventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n        this.viewLayout.onConfigurationChanged(e);\n        stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n        if (CursorConfiguration.shouldRecreate(e)) {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n        }\n    }\n    _registerModelEvents() {\n        this._register(this.model.onDidChangeContentOrInjectedText((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                let hadOtherModelChange = false;\n                let hadModelLineChangeThatChangedLineMapping = false;\n                const changes = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes);\n                const versionId = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.versionId : null);\n                // Do a first pass to compute line mappings, and a second pass to actually interpret them\n                const lineBreaksComputer = this._lines.createLineBreaksComputer();\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            for (let lineIdx = 0; lineIdx < change.detail.length; lineIdx++) {\n                                const line = change.detail[lineIdx];\n                                let injectedText = change.injectedTexts[lineIdx];\n                                if (injectedText) {\n                                    injectedText = injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                                }\n                                lineBreaksComputer.addRequest(line, injectedText, null);\n                            }\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            let injectedText = null;\n                            if (change.injectedText) {\n                                injectedText = change.injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                            }\n                            lineBreaksComputer.addRequest(change.detail, injectedText, null);\n                            break;\n                        }\n                    }\n                }\n                const lineBreaks = lineBreaksComputer.finalize();\n                const lineBreakQueue = new ArrayQueue(lineBreaks);\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 1 /* textModelEvents.RawContentChangedType.Flush */: {\n                            this._lines.onModelFlushed();\n                            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                            this._decorations.reset();\n                            this.viewLayout.onFlushed(this.getLineCount());\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 3 /* textModelEvents.RawContentChangedType.LinesDeleted */: {\n                            const linesDeletedEvent = this._lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n                            if (linesDeletedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            const insertedLineBreaks = lineBreakQueue.takeCount(change.detail.length);\n                            const linesInsertedEvent = this._lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n                            if (linesInsertedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            const changedLineBreakData = lineBreakQueue.dequeue();\n                            const [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] = this._lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData);\n                            hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n                            if (linesChangedEvent) {\n                                eventsCollector.emitViewEvent(linesChangedEvent);\n                            }\n                            if (linesInsertedEvent) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            if (linesDeletedEvent) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            break;\n                        }\n                        case 5 /* textModelEvents.RawContentChangedType.EOLChanged */: {\n                            // Nothing to do. The new version will be accepted below\n                            break;\n                        }\n                    }\n                }\n                if (versionId !== null) {\n                    this._lines.acceptVersionId(versionId);\n                }\n                this.viewLayout.onHeightMaybeChanged();\n                if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                }\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            // Update the configuration and reset the centered view line\n            const viewportStartWasValid = this._viewportStart.isValid;\n            this._viewportStart.invalidate();\n            this._configuration.setModelLineCount(this.model.getLineCount());\n            this._updateConfigurationViewLineCountNow();\n            // Recover viewport\n            if (!this._hasFocus && this.model.getAttachedEditorCount() >= 2 && viewportStartWasValid) {\n                const modelRange = this.model._getTrackedRange(this._viewportStart.modelTrackedRange);\n                if (modelRange) {\n                    const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n                    const viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n                    this.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStart.startLineDelta }, 1 /* ScrollType.Immediate */);\n                }\n            }\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                if (e instanceof textModelEvents.InternalModelContentChangeEvent) {\n                    eventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent));\n                }\n                this._cursor.onModelContentChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            this._handleVisibleLinesChanged();\n        }));\n        this._register(this.model.onDidChangeTokens((e) => {\n            const viewRanges = [];\n            for (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n                const modelRange = e.ranges[j];\n                const viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n                const viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n                viewRanges[j] = {\n                    fromLineNumber: viewStartLineNumber,\n                    toLineNumber: viewEndLineNumber\n                };\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n            this._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguageConfiguration((e) => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguage((e) => {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeOptions((e) => {\n            // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n            if (this._lines.setTabSize(this.model.getOptions().tabSize)) {\n                try {\n                    const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                    eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                    this.viewLayout.onFlushed(this.getLineCount());\n                }\n                finally {\n                    this._eventDispatcher.endEmitViewEvents();\n                }\n                this._updateConfigurationViewLineCount.schedule();\n            }\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeDecorations((e) => {\n            this._decorations.onModelDecorationsChanged();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e));\n        }));\n    }\n    setHiddenAreas(ranges, source) {\n        this.hiddenAreasModel.setHiddenAreas(source, ranges);\n        const mergedRanges = this.hiddenAreasModel.getMergedRanges();\n        if (mergedRanges === this.previousHiddenAreas) {\n            return;\n        }\n        this.previousHiddenAreas = mergedRanges;\n        const stableViewport = this._captureStableViewport();\n        let lineMappingChanged = false;\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            lineMappingChanged = this._lines.setHiddenAreas(mergedRanges);\n            if (lineMappingChanged) {\n                eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                this._cursor.onLineMappingChanged(eventsCollector);\n                this._decorations.onLineMappingChanged();\n                this.viewLayout.onFlushed(this.getLineCount());\n                this.viewLayout.onHeightMaybeChanged();\n            }\n            stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n        this._updateConfigurationViewLineCount.schedule();\n        if (lineMappingChanged) {\n            this._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent());\n        }\n    }\n    getVisibleRangesPlusViewportAboveBelow() {\n        const layoutInfo = this._configuration.options.get(143 /* EditorOption.layoutInfo */);\n        const lineHeight = this._configuration.options.get(66 /* EditorOption.lineHeight */);\n        const linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n        const endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n        return this._toModelVisibleRanges(new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber)));\n    }\n    getVisibleRanges() {\n        const visibleViewRange = this.getCompletelyVisibleViewRange();\n        return this._toModelVisibleRanges(visibleViewRange);\n    }\n    getHiddenAreas() {\n        return this._lines.getHiddenAreas();\n    }\n    _toModelVisibleRanges(visibleViewRange) {\n        const visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        const hiddenAreas = this._lines.getHiddenAreas();\n        if (hiddenAreas.length === 0) {\n            return [visibleRange];\n        }\n        const result = [];\n        let resultLen = 0;\n        let startLineNumber = visibleRange.startLineNumber;\n        let startColumn = visibleRange.startColumn;\n        const endLineNumber = visibleRange.endLineNumber;\n        const endColumn = visibleRange.endColumn;\n        for (let i = 0, len = hiddenAreas.length; i < len; i++) {\n            const hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n            const hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n            if (hiddenEndLineNumber < startLineNumber) {\n                continue;\n            }\n            if (hiddenStartLineNumber > endLineNumber) {\n                continue;\n            }\n            if (startLineNumber < hiddenStartLineNumber) {\n                result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n            }\n            startLineNumber = hiddenEndLineNumber + 1;\n            startColumn = 1;\n        }\n        if (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\n            result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return result;\n    }\n    getCompletelyVisibleViewRange() {\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    getCompletelyVisibleViewRangeAtScrollTop(scrollTop) {\n        const partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    saveState() {\n        const compatViewState = this.viewLayout.saveState();\n        const scrollTop = compatViewState.scrollTop;\n        const firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n        const firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n        const firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n        return {\n            scrollLeft: compatViewState.scrollLeft,\n            firstPosition: firstPosition,\n            firstPositionDeltaTop: firstPositionDeltaTop\n        };\n    }\n    reduceRestoreState(state) {\n        if (typeof state.firstPosition === 'undefined') {\n            // This is a view state serialized by an older version\n            return this._reduceRestoreStateCompatibility(state);\n        }\n        const modelPosition = this.model.validatePosition(state.firstPosition);\n        const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        const scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: scrollTop\n        };\n    }\n    _reduceRestoreStateCompatibility(state) {\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: state.scrollTopWithoutViewZones\n        };\n    }\n    getTabSize() {\n        return this.model.getOptions().tabSize;\n    }\n    getLineCount() {\n        return this._lines.getViewLineCount();\n    }\n    /**\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\n     */\n    setViewport(startLineNumber, endLineNumber, centeredLineNumber) {\n        this._viewportStart.update(this, startLineNumber);\n    }\n    getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n        return this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n    }\n    getLinesIndentGuides(startLineNumber, endLineNumber) {\n        return this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n    }\n    getBracketGuidesInRangeByLine(startLineNumber, endLineNumber, activePosition, options) {\n        return this._lines.getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options);\n    }\n    getLineContent(lineNumber) {\n        return this._lines.getViewLineContent(lineNumber);\n    }\n    getLineLength(lineNumber) {\n        return this._lines.getViewLineLength(lineNumber);\n    }\n    getLineMinColumn(lineNumber) {\n        return this._lines.getViewLineMinColumn(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        return this._lines.getViewLineMaxColumn(lineNumber);\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 1;\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 2;\n    }\n    getMinimapDecorationsInRange(range) {\n        return this._decorations.getMinimapDecorationsInRange(range);\n    }\n    getDecorationsInViewport(visibleRange) {\n        return this._decorations.getDecorationsViewportData(visibleRange).decorations;\n    }\n    getInjectedTextAt(viewPosition) {\n        return this._lines.getInjectedTextAt(viewPosition);\n    }\n    getViewportViewLineRenderingData(visibleRange, lineNumber) {\n        const allInlineDecorations = this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n        const inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    getViewLineRenderingData(lineNumber) {\n        const inlineDecorations = this._decorations.getInlineDecorationsOnLine(lineNumber);\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    _getViewLineRenderingData(lineNumber, inlineDecorations) {\n        const mightContainRTL = this.model.mightContainRTL();\n        const mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n        const tabSize = this.getTabSize();\n        const lineData = this._lines.getViewLineData(lineNumber);\n        if (lineData.inlineDecorations) {\n            inlineDecorations = [\n                ...inlineDecorations,\n                ...lineData.inlineDecorations.map(d => d.toInlineDecoration(lineNumber))\n            ];\n        }\n        return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\n    }\n    getViewLineData(lineNumber) {\n        return this._lines.getViewLineData(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        const result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n        return new MinimapLinesRenderingData(this.getTabSize(), result);\n    }\n    getAllOverviewRulerDecorations(theme) {\n        const decorations = this.model.getOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options));\n        const result = new OverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const decorationOptions = decoration.options;\n            const opts = decorationOptions.overviewRuler;\n            if (!opts) {\n                continue;\n            }\n            const lane = opts.position;\n            if (lane === 0) {\n                continue;\n            }\n            const color = opts.getColor(theme.value);\n            const viewStartLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n            const viewEndLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n            result.accept(color, decorationOptions.zIndex, viewStartLineNumber, viewEndLineNumber, lane);\n        }\n        return result.asArray;\n    }\n    _invalidateDecorationsColorCache() {\n        const decorations = this.model.getOverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const opts1 = decoration.options.overviewRuler;\n            opts1 === null || opts1 === void 0 ? void 0 : opts1.invalidateCachedColor();\n            const opts2 = decoration.options.minimap;\n            opts2 === null || opts2 === void 0 ? void 0 : opts2.invalidateCachedColor();\n        }\n    }\n    getValueInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueInRange(modelRange, eol);\n    }\n    getValueLengthInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueLengthInRange(modelRange, eol);\n    }\n    modifyPosition(position, offset) {\n        const modelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(position);\n        return this.model.modifyPosition(modelPosition, offset);\n    }\n    deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\n        const modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n        if (this.model.getEOL().length === 2) {\n            // This model uses CRLF, so the delta must take that into account\n            if (deltaOffset < 0) {\n                deltaOffset -= lineFeedCnt;\n            }\n            else {\n                deltaOffset += lineFeedCnt;\n            }\n        }\n        const modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n        const resultOffset = modelAnchorOffset + deltaOffset;\n        return this.model.getPositionAt(resultOffset);\n    }\n    getPlainTextToCopy(modelRanges, emptySelectionClipboard, forceCRLF) {\n        const newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n        modelRanges = modelRanges.slice(0);\n        modelRanges.sort(Range.compareRangesUsingStarts);\n        let hasEmptyRange = false;\n        let hasNonEmptyRange = false;\n        for (const range of modelRanges) {\n            if (range.isEmpty()) {\n                hasEmptyRange = true;\n            }\n            else {\n                hasNonEmptyRange = true;\n            }\n        }\n        if (!hasNonEmptyRange) {\n            // all ranges are empty\n            if (!emptySelectionClipboard) {\n                return '';\n            }\n            const modelLineNumbers = modelRanges.map((r) => r.startLineNumber);\n            let result = '';\n            for (let i = 0; i < modelLineNumbers.length; i++) {\n                if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n                    continue;\n                }\n                result += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n            }\n            return result;\n        }\n        if (hasEmptyRange && emptySelectionClipboard) {\n            // mixed empty selections and non-empty selections\n            const result = [];\n            let prevModelLineNumber = 0;\n            for (const modelRange of modelRanges) {\n                const modelLineNumber = modelRange.startLineNumber;\n                if (modelRange.isEmpty()) {\n                    if (modelLineNumber !== prevModelLineNumber) {\n                        result.push(this.model.getLineContent(modelLineNumber));\n                    }\n                }\n                else {\n                    result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n                }\n                prevModelLineNumber = modelLineNumber;\n            }\n            return result.length === 1 ? result[0] : result;\n        }\n        const result = [];\n        for (const modelRange of modelRanges) {\n            if (!modelRange.isEmpty()) {\n                result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n            }\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n    getRichTextToCopy(modelRanges, emptySelectionClipboard) {\n        const languageId = this.model.getLanguageId();\n        if (languageId === PLAINTEXT_LANGUAGE_ID) {\n            return null;\n        }\n        if (modelRanges.length !== 1) {\n            // no multiple selection support at this time\n            return null;\n        }\n        let range = modelRanges[0];\n        if (range.isEmpty()) {\n            if (!emptySelectionClipboard) {\n                // nothing to copy\n                return null;\n            }\n            const lineNumber = range.startLineNumber;\n            range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n        }\n        const fontInfo = this._configuration.options.get(50 /* EditorOption.fontInfo */);\n        const colorMap = this._getColorMap();\n        const hasBadChars = (/[:;\\\\\\/<>]/.test(fontInfo.fontFamily));\n        const useDefaultFontFamily = (hasBadChars || fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily);\n        let fontFamily;\n        if (useDefaultFontFamily) {\n            fontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n        }\n        else {\n            fontFamily = fontInfo.fontFamily;\n            fontFamily = fontFamily.replace(/\"/g, '\\'');\n            const hasQuotesOrIsList = /[,']/.test(fontFamily);\n            if (!hasQuotesOrIsList) {\n                const needsQuotes = /[+ ]/.test(fontFamily);\n                if (needsQuotes) {\n                    fontFamily = `'${fontFamily}'`;\n                }\n            }\n            fontFamily = `${fontFamily}, ${EDITOR_FONT_DEFAULTS.fontFamily}`;\n        }\n        return {\n            mode: languageId,\n            html: (`<div style=\"`\n                + `color: ${colorMap[1 /* ColorId.DefaultForeground */]};`\n                + `background-color: ${colorMap[2 /* ColorId.DefaultBackground */]};`\n                + `font-family: ${fontFamily};`\n                + `font-weight: ${fontInfo.fontWeight};`\n                + `font-size: ${fontInfo.fontSize}px;`\n                + `line-height: ${fontInfo.lineHeight}px;`\n                + `white-space: pre;`\n                + `\">`\n                + this._getHTMLToCopy(range, colorMap)\n                + '</div>')\n        };\n    }\n    _getHTMLToCopy(modelRange, colorMap) {\n        const startLineNumber = modelRange.startLineNumber;\n        const startColumn = modelRange.startColumn;\n        const endLineNumber = modelRange.endLineNumber;\n        const endColumn = modelRange.endColumn;\n        const tabSize = this.getTabSize();\n        let result = '';\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineTokens = this.model.tokenization.getLineTokens(lineNumber);\n            const lineContent = lineTokens.getLineContent();\n            const startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n            const endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n            if (lineContent === '') {\n                result += '<br>';\n            }\n            else {\n                result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n            }\n        }\n        return result;\n    }\n    _getColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        const result = ['#000000'];\n        if (colorMap) {\n            for (let i = 1, len = colorMap.length; i < len; i++) {\n                result[i] = Color.Format.CSS.formatHex(colorMap[i]);\n            }\n        }\n        return result;\n    }\n    //#region cursor operations\n    getPrimaryCursorState() {\n        return this._cursor.getPrimaryCursorState();\n    }\n    getLastAddedCursorIndex() {\n        return this._cursor.getLastAddedCursorIndex();\n    }\n    getCursorStates() {\n        return this._cursor.getCursorStates();\n    }\n    setCursorStates(source, reason, states) {\n        return this._withViewEventsCollector(eventsCollector => this._cursor.setStates(eventsCollector, source, reason, states));\n    }\n    getCursorColumnSelectData() {\n        return this._cursor.getCursorColumnSelectData();\n    }\n    getCursorAutoClosedCharacters() {\n        return this._cursor.getAutoClosedCharacters();\n    }\n    setCursorColumnSelectData(columnSelectData) {\n        this._cursor.setCursorColumnSelectData(columnSelectData);\n    }\n    getPrevEditOperationType() {\n        return this._cursor.getPrevEditOperationType();\n    }\n    setPrevEditOperationType(type) {\n        this._cursor.setPrevEditOperationType(type);\n    }\n    getSelection() {\n        return this._cursor.getSelection();\n    }\n    getSelections() {\n        return this._cursor.getSelections();\n    }\n    getPosition() {\n        return this._cursor.getPrimaryCursorState().modelState.position;\n    }\n    setSelections(source, selections, reason = 0 /* CursorChangeReason.NotSet */) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.setSelections(eventsCollector, source, selections, reason));\n    }\n    saveCursorState() {\n        return this._cursor.saveState();\n    }\n    restoreCursorState(states) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.restoreState(eventsCollector, states));\n    }\n    _executeCursorEdit(callback) {\n        if (this._cursor.context.cursorConfig.readOnly) {\n            // we cannot edit when read only...\n            this._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n            return;\n        }\n        this._withViewEventsCollector(callback);\n    }\n    executeEdits(source, edits, cursorStateComputer) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer));\n    }\n    startComposition() {\n        this._executeCursorEdit(eventsCollector => this._cursor.startComposition(eventsCollector));\n    }\n    endComposition(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.endComposition(eventsCollector, source));\n    }\n    type(text, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.type(eventsCollector, text, source));\n    }\n    compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source));\n    }\n    paste(text, pasteOnNewLine, multicursorText, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source));\n    }\n    cut(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.cut(eventsCollector, source));\n    }\n    executeCommand(command, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommand(eventsCollector, command, source));\n    }\n    executeCommands(commands, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommands(eventsCollector, commands, source));\n    }\n    revealPrimaryCursor(source, revealHorizontal, minimalReveal = false) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.revealPrimary(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */));\n    }\n    revealTopMostCursor(source) {\n        const viewPosition = this._cursor.getTopMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealBottomMostCursor(source) {\n        const viewPosition = this._cursor.getBottomMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealRange(source, revealHorizontal, viewRange, verticalType, scrollType) {\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, verticalType, revealHorizontal, scrollType)));\n    }\n    //#endregion\n    //#region viewLayout\n    changeWhitespace(callback) {\n        const hadAChange = this.viewLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n            this._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n        }\n    }\n    //#endregion\n    _withViewEventsCollector(callback) {\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            return callback(eventsCollector);\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n    }\n    normalizePosition(position, affinity) {\n        return this._lines.normalizePosition(position, affinity);\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n    getLineIndentColumn(lineNumber) {\n        return this._lines.getLineIndentColumn(lineNumber);\n    }\n}\nclass ViewportStart {\n    static create(model) {\n        const viewportStartLineTrackedRange = model._setTrackedRange(null, new Range(1, 1, 1, 1), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        return new ViewportStart(model, 1, false, viewportStartLineTrackedRange, 0);\n    }\n    get viewLineNumber() {\n        return this._viewLineNumber;\n    }\n    get isValid() {\n        return this._isValid;\n    }\n    get modelTrackedRange() {\n        return this._modelTrackedRange;\n    }\n    get startLineDelta() {\n        return this._startLineDelta;\n    }\n    constructor(_model, _viewLineNumber, _isValid, _modelTrackedRange, _startLineDelta) {\n        this._model = _model;\n        this._viewLineNumber = _viewLineNumber;\n        this._isValid = _isValid;\n        this._modelTrackedRange = _modelTrackedRange;\n        this._startLineDelta = _startLineDelta;\n    }\n    dispose() {\n        this._model._setTrackedRange(this._modelTrackedRange, null, 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n    }\n    update(viewModel, startLineNumber) {\n        const position = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, viewModel.getLineMinColumn(startLineNumber)));\n        const viewportStartLineTrackedRange = viewModel.model._setTrackedRange(this._modelTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        const viewportStartLineTop = viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n        const scrollTop = viewModel.viewLayout.getCurrentScrollTop();\n        this._viewLineNumber = startLineNumber;\n        this._isValid = true;\n        this._modelTrackedRange = viewportStartLineTrackedRange;\n        this._startLineDelta = scrollTop - viewportStartLineTop;\n    }\n    invalidate() {\n        this._isValid = false;\n    }\n}\nclass OverviewRulerDecorations {\n    constructor() {\n        this._asMap = Object.create(null);\n        this.asArray = [];\n    }\n    accept(color, zIndex, startLineNumber, endLineNumber, lane) {\n        const prevGroup = this._asMap[color];\n        if (prevGroup) {\n            const prevData = prevGroup.data;\n            const prevLane = prevData[prevData.length - 3];\n            const prevEndLineNumber = prevData[prevData.length - 1];\n            if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n                // merge into prev\n                if (endLineNumber > prevEndLineNumber) {\n                    prevData[prevData.length - 1] = endLineNumber;\n                }\n                return;\n            }\n            // push\n            prevData.push(lane, startLineNumber, endLineNumber);\n        }\n        else {\n            const group = new OverviewRulerDecorationsGroup(color, zIndex, [lane, startLineNumber, endLineNumber]);\n            this._asMap[color] = group;\n            this.asArray.push(group);\n        }\n    }\n}\nclass HiddenAreasModel {\n    constructor() {\n        this.hiddenAreas = new Map();\n        this.shouldRecompute = false;\n        this.ranges = [];\n    }\n    setHiddenAreas(source, ranges) {\n        const existing = this.hiddenAreas.get(source);\n        if (existing && rangeArraysEqual(existing, ranges)) {\n            return;\n        }\n        this.hiddenAreas.set(source, ranges);\n        this.shouldRecompute = true;\n    }\n    /**\n     * The returned array is immutable.\n    */\n    getMergedRanges() {\n        if (!this.shouldRecompute) {\n            return this.ranges;\n        }\n        this.shouldRecompute = false;\n        const newRanges = Array.from(this.hiddenAreas.values()).reduce((r, hiddenAreas) => mergeLineRangeArray(r, hiddenAreas), []);\n        if (rangeArraysEqual(this.ranges, newRanges)) {\n            return this.ranges;\n        }\n        this.ranges = newRanges;\n        return this.ranges;\n    }\n}\nfunction mergeLineRangeArray(arr1, arr2) {\n    const result = [];\n    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n        const item1 = arr1[i];\n        const item2 = arr2[j];\n        if (item1.endLineNumber < item2.startLineNumber - 1) {\n            result.push(arr1[i++]);\n        }\n        else if (item2.endLineNumber < item1.startLineNumber - 1) {\n            result.push(arr2[j++]);\n        }\n        else {\n            const startLineNumber = Math.min(item1.startLineNumber, item2.startLineNumber);\n            const endLineNumber = Math.max(item1.endLineNumber, item2.endLineNumber);\n            result.push(new Range(startLineNumber, 1, endLineNumber, 1));\n            i++;\n            j++;\n        }\n    }\n    while (i < arr1.length) {\n        result.push(arr1[i++]);\n    }\n    while (j < arr2.length) {\n        result.push(arr2[j++]);\n    }\n    return result;\n}\nfunction rangeArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!arr1[i].equalsRange(arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Maintain a stable viewport by trying to keep the first line in the viewport constant.\n */\nclass StableViewport {\n    constructor(viewportStartModelPosition, startLineDelta) {\n        this.viewportStartModelPosition = viewportStartModelPosition;\n        this.startLineDelta = startLineDelta;\n    }\n    recoverViewportStart(coordinatesConverter, viewLayout) {\n        if (!this.viewportStartModelPosition) {\n            return;\n        }\n        const viewPosition = coordinatesConverter.convertModelPositionToViewPosition(this.viewportStartModelPosition);\n        const viewPositionTop = viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n        viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this.startLineDelta }, 1 /* ScrollType.Immediate */);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable } from '../../base/common/lifecycle.js';\nexport class ViewModelEventDispatcher extends Disposable {\n    constructor() {\n        super();\n        this._onEvent = this._register(new Emitter());\n        this.onEvent = this._onEvent.event;\n        this._eventHandlers = [];\n        this._viewEventQueue = null;\n        this._isConsumingViewEventQueue = false;\n        this._collector = null;\n        this._collectorCnt = 0;\n        this._outgoingEvents = [];\n    }\n    emitOutgoingEvent(e) {\n        this._addOutgoingEvent(e);\n        this._emitOutgoingEvents();\n    }\n    _addOutgoingEvent(e) {\n        for (let i = 0, len = this._outgoingEvents.length; i < len; i++) {\n            const mergeResult = (this._outgoingEvents[i].kind === e.kind ? this._outgoingEvents[i].attemptToMerge(e) : null);\n            if (mergeResult) {\n                this._outgoingEvents[i] = mergeResult;\n                return;\n            }\n        }\n        // not merged\n        this._outgoingEvents.push(e);\n    }\n    _emitOutgoingEvents() {\n        while (this._outgoingEvents.length > 0) {\n            if (this._collector || this._isConsumingViewEventQueue) {\n                // right now collecting or emitting view events, so let's postpone emitting\n                return;\n            }\n            const event = this._outgoingEvents.shift();\n            if (event.isNoOp()) {\n                continue;\n            }\n            this._onEvent.fire(event);\n        }\n    }\n    addViewEventHandler(eventHandler) {\n        for (let i = 0, len = this._eventHandlers.length; i < len; i++) {\n            if (this._eventHandlers[i] === eventHandler) {\n                console.warn('Detected duplicate listener in ViewEventDispatcher', eventHandler);\n            }\n        }\n        this._eventHandlers.push(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        for (let i = 0; i < this._eventHandlers.length; i++) {\n            if (this._eventHandlers[i] === eventHandler) {\n                this._eventHandlers.splice(i, 1);\n                break;\n            }\n        }\n    }\n    beginEmitViewEvents() {\n        this._collectorCnt++;\n        if (this._collectorCnt === 1) {\n            this._collector = new ViewModelEventsCollector();\n        }\n        return this._collector;\n    }\n    endEmitViewEvents() {\n        this._collectorCnt--;\n        if (this._collectorCnt === 0) {\n            const outgoingEvents = this._collector.outgoingEvents;\n            const viewEvents = this._collector.viewEvents;\n            this._collector = null;\n            for (const outgoingEvent of outgoingEvents) {\n                this._addOutgoingEvent(outgoingEvent);\n            }\n            if (viewEvents.length > 0) {\n                this._emitMany(viewEvents);\n            }\n        }\n        this._emitOutgoingEvents();\n    }\n    emitSingleViewEvent(event) {\n        try {\n            const eventsCollector = this.beginEmitViewEvents();\n            eventsCollector.emitViewEvent(event);\n        }\n        finally {\n            this.endEmitViewEvents();\n        }\n    }\n    _emitMany(events) {\n        if (this._viewEventQueue) {\n            this._viewEventQueue = this._viewEventQueue.concat(events);\n        }\n        else {\n            this._viewEventQueue = events;\n        }\n        if (!this._isConsumingViewEventQueue) {\n            this._consumeViewEventQueue();\n        }\n    }\n    _consumeViewEventQueue() {\n        try {\n            this._isConsumingViewEventQueue = true;\n            this._doConsumeQueue();\n        }\n        finally {\n            this._isConsumingViewEventQueue = false;\n        }\n    }\n    _doConsumeQueue() {\n        while (this._viewEventQueue) {\n            // Empty event queue, as events might come in while sending these off\n            const events = this._viewEventQueue;\n            this._viewEventQueue = null;\n            // Use a clone of the event handlers list, as they might remove themselves\n            const eventHandlers = this._eventHandlers.slice(0);\n            for (const eventHandler of eventHandlers) {\n                eventHandler.handleEvents(events);\n            }\n        }\n    }\n}\nexport class ViewModelEventsCollector {\n    constructor() {\n        this.viewEvents = [];\n        this.outgoingEvents = [];\n    }\n    emitViewEvent(event) {\n        this.viewEvents.push(event);\n    }\n    emitOutgoingEvent(e) {\n        this.outgoingEvents.push(e);\n    }\n}\nexport class ContentSizeChangedEvent {\n    constructor(oldContentWidth, oldContentHeight, contentWidth, contentHeight) {\n        this.kind = 0 /* OutgoingViewModelEventKind.ContentSizeChanged */;\n        this._oldContentWidth = oldContentWidth;\n        this._oldContentHeight = oldContentHeight;\n        this.contentWidth = contentWidth;\n        this.contentHeight = contentHeight;\n        this.contentWidthChanged = (this._oldContentWidth !== this.contentWidth);\n        this.contentHeightChanged = (this._oldContentHeight !== this.contentHeight);\n    }\n    isNoOp() {\n        return (!this.contentWidthChanged && !this.contentHeightChanged);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new ContentSizeChangedEvent(this._oldContentWidth, this._oldContentHeight, other.contentWidth, other.contentHeight);\n    }\n}\nexport class FocusChangedEvent {\n    constructor(oldHasFocus, hasFocus) {\n        this.kind = 1 /* OutgoingViewModelEventKind.FocusChanged */;\n        this.oldHasFocus = oldHasFocus;\n        this.hasFocus = hasFocus;\n    }\n    isNoOp() {\n        return (this.oldHasFocus === this.hasFocus);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new FocusChangedEvent(this.oldHasFocus, other.hasFocus);\n    }\n}\nexport class ScrollChangedEvent {\n    constructor(oldScrollWidth, oldScrollLeft, oldScrollHeight, oldScrollTop, scrollWidth, scrollLeft, scrollHeight, scrollTop) {\n        this.kind = 2 /* OutgoingViewModelEventKind.ScrollChanged */;\n        this._oldScrollWidth = oldScrollWidth;\n        this._oldScrollLeft = oldScrollLeft;\n        this._oldScrollHeight = oldScrollHeight;\n        this._oldScrollTop = oldScrollTop;\n        this.scrollWidth = scrollWidth;\n        this.scrollLeft = scrollLeft;\n        this.scrollHeight = scrollHeight;\n        this.scrollTop = scrollTop;\n        this.scrollWidthChanged = (this._oldScrollWidth !== this.scrollWidth);\n        this.scrollLeftChanged = (this._oldScrollLeft !== this.scrollLeft);\n        this.scrollHeightChanged = (this._oldScrollHeight !== this.scrollHeight);\n        this.scrollTopChanged = (this._oldScrollTop !== this.scrollTop);\n    }\n    isNoOp() {\n        return (!this.scrollWidthChanged && !this.scrollLeftChanged && !this.scrollHeightChanged && !this.scrollTopChanged);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new ScrollChangedEvent(this._oldScrollWidth, this._oldScrollLeft, this._oldScrollHeight, this._oldScrollTop, other.scrollWidth, other.scrollLeft, other.scrollHeight, other.scrollTop);\n    }\n}\nexport class ViewZonesChangedEvent {\n    constructor() {\n        this.kind = 3 /* OutgoingViewModelEventKind.ViewZonesChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class HiddenAreasChangedEvent {\n    constructor() {\n        this.kind = 4 /* OutgoingViewModelEventKind.HiddenAreasChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class CursorStateChangedEvent {\n    constructor(oldSelections, selections, oldModelVersionId, modelVersionId, source, reason, reachedMaxCursorCount) {\n        this.kind = 6 /* OutgoingViewModelEventKind.CursorStateChanged */;\n        this.oldSelections = oldSelections;\n        this.selections = selections;\n        this.oldModelVersionId = oldModelVersionId;\n        this.modelVersionId = modelVersionId;\n        this.source = source;\n        this.reason = reason;\n        this.reachedMaxCursorCount = reachedMaxCursorCount;\n    }\n    static _selectionsAreEqual(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        const aLen = a.length;\n        const bLen = b.length;\n        if (aLen !== bLen) {\n            return false;\n        }\n        for (let i = 0; i < aLen; i++) {\n            if (!a[i].equalsSelection(b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    isNoOp() {\n        return (CursorStateChangedEvent._selectionsAreEqual(this.oldSelections, this.selections)\n            && this.oldModelVersionId === this.modelVersionId);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new CursorStateChangedEvent(this.oldSelections, other.selections, this.oldModelVersionId, other.modelVersionId, other.source, other.reason, this.reachedMaxCursorCount || other.reachedMaxCursorCount);\n    }\n}\nexport class ReadOnlyEditAttemptEvent {\n    constructor() {\n        this.kind = 5 /* OutgoingViewModelEventKind.ReadOnlyEditAttempt */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class ModelDecorationsChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 7 /* OutgoingViewModelEventKind.ModelDecorationsChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelLanguageChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 8 /* OutgoingViewModelEventKind.ModelLanguageChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelLanguageConfigurationChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 9 /* OutgoingViewModelEventKind.ModelLanguageConfigurationChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelContentChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 10 /* OutgoingViewModelEventKind.ModelContentChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelOptionsChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 11 /* OutgoingViewModelEventKind.ModelOptionsChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelTokensChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 12 /* OutgoingViewModelEventKind.ModelTokensChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\n"],"names":["KeyMod","chord","firstPart","secondPart","KeyChord","createMonacoBaseAPI","editor","undefined","languages","CancellationTokenSource","Emitter","KeyCode","standaloneEnums","Position","Range","Selection","SelectionDirection","MarkerSeverity","MarkerTag","Uri","URI","Token","CtrlCmd","Shift","Alt","WinCtrl","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","MirrorModel","BaseMirrorModel","uri","this","_uri","eol","_eol","getValue","getText","findMatches","regex","matches","i","_lines","length","line","offsetToAdd","offsetAt","iteratorOverMatches","matchAll","match","index","push","getLinesContent","slice","getLineCount","getLineContent","lineNumber","getWordAtPosition","position","wordDefinition","wordAtText","getWordAtText","column","ensureValidWordDefinition","startColumn","endColumn","words","lines","wordenize","_wordenize","bind","lineText","wordRangesIdx","wordRanges","Symbol","iterator","substring","start","end","getLineWords","content","ranges","range","word","lastIndex","exec","getValueInRange","_validateRange","startLineNumber","endLineNumber","lineEnding","startLineIndex","endLineIndex","resultLines","join","_validatePosition","_ensureLineStarts","_lineStarts","getPrefixSum","positionAt","offset","Math","floor","max","out","getIndexOf","lineLength","min","remainder","isIPosition","Error","hasChanged","maxCharacter","EditorSimpleWorker","constructor","host","foreignModuleFactory","_host","_models","Object","create","_foreignModuleFactory","_foreignModule","dispose","_getModel","_getModels","all","keys","forEach","key","acceptNewModel","data","url","parse","EOL","versionId","acceptModelChanged","strURL","onEvents","acceptRemovedModel","computeUnicodeHighlights","options","model","UnicodeTextModelHighlighter","hasMore","ambiguousCharacterCount","invisibleCharacterCount","nonBasicAsciiCharacterCount","computeDiff","originalUrl","modifiedUrl","algorithm","original","modified","originalTextModel","modifiedTextModel","diffAlgorithm","linesDiffComputers","getDefault","getLegacy","originalLines","modifiedLines","getLineChanges","changes","map","m","_a","endLineNumberExclusive","innerChanges","originalRange","modifiedRange","identical","_modelsAreIdentical","quitEarly","hitTimeout","moves","lineRangeMapping","originalLineCount","computeMoreMinimalEdits","modelUrl","edits","pretty","lastEol","sort","a","b","compareRangesUsingStarts","writeIndex","readIndex","getEndPosition","equals","getStartPosition","fromPositions","text","isEmpty","replace","_diffLimit","stringDiff","editOffset","lift","change","originalStart","originalLength","newEdit","substr","modifiedStart","modifiedLength","computeLinks","computeDefaultDocumentColors","textualSuggest","modelUrls","leadingWord","wordDef","wordDefFlags","sw","StopWatch","wordDefRegExp","RegExp","seen","Set","outer","isNaN","Number","add","size","_suggestionsLimit","Array","from","duration","elapsed","computeWordRanges","array","navigateValueSet","up","selectionText","wordRange","BasicInplaceReplace","INSTANCE","loadForeignModule","moduleId","createData","foreignHostMethods","ctx","createProxyObject","proxyMethodRequest","method","args","fhr","getMirrorModels","getAllMethodNames","fmr","importScripts","globalThis","monaco","IEditorWorkerService","createDecorator","fileIconDirectoryRegex","getIconClasses","modelService","languageService","resource","fileKind","classes","FileKind","ROOT_FOLDER","FOLDER","name","scheme","Schemas","DataUri","parseMetaData","get","META_DATA_LABEL","path","cssEscape","toLowerCase","concat","authority","dotSegments","split","detectedLanguageId","languageId","mime","META_DATA_MIME","getLanguageIdByMimeType","getModel","getLanguageId","PLAINTEXT_LANGUAGE_ID","guessLanguageIdByFilepathOrFirstLine","detectLanguageId","str","__decorate","decorators","target","desc","d","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","ILanguageFeatureDebounceService","IdentityHash","_hashes","WeakMap","pool","of","obj","set","NullDebounceInformation","_default","_model","update","_value","default","FeatureDebounceInformation","_logService","_name","_registry","_min","_max","_cache","LRUCache","_key","id","reduce","hashVal","doHash","avg","clamp","SlidingWindowAverage","newValue","matchesScheme","trace","toString","_overall","MovingAverage","LanguageFeatureDebounceService","envService","_data","Map","_isDev","isExtensionDevelopment","isBuilt","for","feature","config","_b","_c","pow","extra","info","_overallAverage","debug","values","ILogService","IEnvironmentService","registerSingleton","ILanguageFeaturesService","referenceProvider","LanguageFeatureRegistry","_score","renameProvider","codeActionProvider","definitionProvider","typeDefinitionProvider","declarationProvider","implementationProvider","documentSymbolProvider","inlayHintsProvider","colorProvider","codeLensProvider","documentFormattingEditProvider","documentRangeFormattingEditProvider","onTypeFormattingEditProvider","signatureHelpProvider","hoverProvider","documentHighlightProvider","selectionRangeProvider","foldingRangeProvider","linkProvider","inlineCompletionsProvider","completionProvider","linkedEditingRangeProvider","documentRangeSemanticTokensProvider","documentSemanticTokensProvider","documentOnDropEditProvider","documentPasteEditProvider","_notebookTypeResolver","call","registeredAssociations","nonUserRegisteredAssociations","userRegisteredAssociations","registerPlatformLanguageAssociation","association","userConfigured","warnOnOverwrite","associationItem","filename","extension","filepattern","firstline","filenameLowercase","extensionLowercase","filepatternLowercase","filepatternOnPath","indexOf","posix","sep","toLanguageAssociationItem","console","warn","_registerLanguageAssociation","getLanguageIds","firstLine","file","fsPath","vscodeNotebookCell","Mimes","unknown","basename","configuredLanguage","getAssociationByPath","registeredLanguage","firstlineLanguage","startsWithUTF8BOM","getAssociationByFirstline","getAssociations","item","associations","filenameMatch","patternMatch","extensionMatch","endsWith","hasOwnProperty","prototype","NULL_LANGUAGE_ID","LanguageIdCodec","_languageIdToLanguage","_languageToLanguageId","_register","_nextLanguageId","language","register","has","encodeLanguageId","decodeLanguageId","LanguagesRegistry","Disposable","useModesRegistry","super","_onDidChange","onDidChange","event","instanceCount","_warnOnOverwrite","languageIdCodec","_dynamicLanguages","_languages","_mimeTypesMap","_nameMap","_lowercaseNameMap","_initializeFromRegistry","ModesRegistry","onDidChangeLanguages","filter","getLanguages","_registerLanguages","_registerLanguage","langId","identifier","aliases","alias","mimetypes","mimetype","Registry","as","Extensions","Configuration","registerOverrideIdentifiers","getRegisteredLanguageIds","fire","lang","resolvedLanguage","extensions","filenames","configurationFiles","icons","_mergeLanguage","primaryMime","isArray","configuration","filenamePatterns","filenamePattern","firstLineRegexStr","charAt","firstLineRegex","regExpLeadsToEndlessLoop","err","langAliases","langAlias","containsAliases","bestName","icon","isRegisteredLanguageId","getLanguageIdByLanguageName","languageName","languageNameLower","mimeType","LanguageService","_onDidRequestBasicLanguageFeatures","onDidRequestBasicLanguageFeatures","_onDidRequestRichLanguageFeatures","onDidRequestRichLanguageFeatures","leakWarningThreshold","_requestedBasicLanguages","_requestedRichLanguages","languageIds","firstOrDefault","createById","LanguageSelection","_createAndGetLanguageIdentifier","createByFilepathOrFirstLine","requestBasicLanguageFeatures","requestRichLanguageFeatures","TokenizationRegistry","getOrCreate","_onDidChangeLanguages","_selector","_listener","_emitter","_dispose","_evaluate","onDidRemoveLastListener","IMarkerDecorationsService","MarkerDecorationsService","_markerService","_onDidChangeMarker","_markerDecorations","ResourceMap","getModels","_onModelAdded","onModelAdded","onModelRemoved","_onModelRemoved","onMarkerChanged","_handleMarkerChange","clear","getMarker","decoration","markerDecorations","changedResources","_updateDecorations","MarkerDecorations","delete","inMemory","internal","vscode","read","marker","owner","remove","markers","take","IModelService","IMarkerService","_map","BidirectionalMap","toDisposable","deltaDecorations","added","removed","diffSets","oldIds","newDecorations","_createDecorationRange","_createDecorationOption","ids","removedMarker","getKey","rawMarker","ret","severity","Hint","_hasMarkerTag","setEndPosition","validateRange","maxColumn","getLineLastNonWhitespaceColumn","getLineMaxColumn","MAX_VALUE","minColumn","getLineFirstNonWhitespaceColumn","className","color","zIndex","inlineClassName","minimap","Info","themeColorFromId","overviewRulerInfo","minimapInfo","MinimapPosition","Inline","Warning","overviewRulerWarning","minimapWarning","overviewRulerError","minimapError","tags","description","stickiness","showIfCollapsed","overviewRuler","OverviewRulerLane","Right","tag","ModelService_1","MODEL_ID","ModelData","onWillDispose","onDidChangeLanguage","_modelEventListeners","DisposableStore","DEFAULT_EOL","platform","DisposedModelInfo","initialUndoRedoSnapshot","time","sharesUndoRedoStack","heapSize","sha1","alternativeVersionId","ModelService","_configurationService","_resourcePropertiesService","_undoRedoService","_languageService","_languageConfigurationService","_onModelModeChanged","onModelLanguageChanged","_modelCreationOptionsByLanguageAndResource","_disposedModels","_disposedModelsHeapSize","onDidChangeConfiguration","_updateModelOptions","_readModelOptions","isForSimpleWidget","tabSize","EDITOR_MODEL_DEFAULTS","parsedTabSize","parseInt","indentSize","parsedIndentSize","insertSpaces","Boolean","newDefaultEOL","trimAutoWhitespace","detectIndentation","largeFileOptimizations","bracketPairColorizationOptions","bracketPairColorization","enabled","independentColorPoolPerBracketType","defaultEOL","_getEOL","getEOL","overrideIdentifier","_shouldRestoreUndoStack","getCreationOptions","languageIdOrSelection","creationOptions","oldOptionsByLanguageAndResource","len","modelId","modelData","affectsConfiguration","oldOptions","newOptions","_setModelOptionsForModel","currentOptions","setEOL","updateOptions","bracketColorizationOptions","_insertDisposedModel","disposedModelData","_removeDisposedModel","_ensureDisposedModelsHeapSize","maxModelsHeapSize","disposedModels","entry","disposedModel","shift","restoreSnapshot","_createModelData","TextModel","elements","getElements","sha1Computer","_getSHA1Computer","sha1IsEqual","canComputeSHA1","computeSHA1","element","past","isEditStackElement","matchesResource","setModel","future","setElementsValidFlag","_overwriteVersionId","_overwriteAlternativeVersionId","_overwriteInitialUndoRedoSnapshot","_onWillDispose","_onDidChangeLanguage","createModel","languageSelection","_schemaShouldMaintainUndoRedoElements","vscodeRemote","vscodeUserData","getUriComparisonKey","maintainUndoRedoStack","maxMemory","MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK","getInitialUndoRedoSnapshot","Date","now","getVersionId","getAlternativeVersionId","oldLanguageId","oldLanguage","newLanguageId","DefaultModelSHA1Computer","IConfigurationService","ITextResourcePropertiesService","IUndoRedoService","ILanguageService","ILanguageConfigurationService","getValueLength","MAX_MODEL_SIZE","shaComputer","StringSHA1","snapshot","createSnapshot","digest","ITextModelService","encodeSemanticTokensDto","semanticTokens","dest","Uint32Array","type","deltas","delta","encodeSemanticTokensDtoSize","deleteCount","arr","uint8Arr","Uint8Array","buffer","byteOffset","b0","b1","b2","b3","reverseEndianness","VSBuffer","wrap","toLittleEndianBuffer","SparseMultilineTokens","tokens","SparseMultilineTokensStorage","_startLineNumber","_endLineNumber","_tokens","getMaxDeltaLine","_updateEndLineNumber","getLineTokens","getRange","deltaRange","removeTokens","bDeltaLine","applyEdit","eolCount","firstLineLength","lastLineLength","countEOL","acceptEdit","charCodeAt","firstCharCode","_acceptDeleteRange","_acceptInsertText","firstLineIndex","lastLineIndex","deletedLinesCount","tokenMaxDeltaLine","deletedBefore","acceptDeleteRange","lineIndex","acceptInsertText","_tokenCount","pieces","_getDeltaLine","_getStartCharacter","_getEndCharacter","tokenCount","_getTokenCount","startChar","maxDeltaLine","endChar","tokenIndex","deltaLine","low","high","mid","midDeltaLine","SparseLineTokens","subarray","startDeltaLine","endDeltaLine","newTokenCount","hasDeletedTokens","firstDeltaLine","srcOffset","tokenDeltaLine","tokenStartCharacter","tokenEndCharacter","tokenMetadata","destOffset","aTokens","bTokens","destTokens","destFirstDeltaLine","horizontalShiftForFirstLineTokens","startCharacter","endCharacter","deletedLineCount","character","isInsertingPreciselyOneWordCharacter","tokenLength","getCount","getStartCharacter","getEndCharacter","getMetadata","SemanticTokensProviderStyling","_legend","_themeService","_hasWarnedOverlappingTokens","_hasWarnedInvalidLengthTokens","_hasWarnedInvalidEditStart","_hashTable","HashTable","tokenTypeIndex","tokenModifierSet","encodedLanguageId","metadata","getLevel","LogLevel","Trace","TokenMetadata","getForeground","getFontStyle","tokenType","tokenTypes","tokenModifiers","modifierSet","modifierIndex","JSON","stringify","tokenStyle","getColorTheme","getTokenStyleMetadata","italic","bold","underline","strikethrough","foreground","warnOverlappingSemanticTokens","warnInvalidLengthSemanticTokens","warnInvalidEditStart","previousResultId","resultId","editIndex","editStart","maxExpectedStart","toMultilineTokens2","styling","srcData","tokensPerArea","ceil","lastLineNumber","lastStartCharacter","tokenStartIndex","tokenEndIndex","smallTokenEndIndex","bigTokenEndIndex","destData","areaLine","prevLineNumber","prevEndCharacter","deltaCharacter","IThemeService","HashTableEntry","_elementsCount","_currentLengthIndex","_currentLength","_SIZES","_growCount","round","_elements","_nullOutEntries","entries","_hash2","n1","n2","_hashFunc","hash","p","oldElements","first","oldNext","_add","ISemanticTokensStylingService","SemanticTokensStylingService","_caches","onDidColorThemeChange","getStyling","provider","getLegend","ITextResourceConfigurationService","TreeViewsDnDService","_dragOperations","removeDragOperationTransfer","uuid","operation","DraggedTreeItemsIdentifier","ITreeViewsDnDService","startLine","endLine","codePointHighlighter","CodePointHighlighter","candidates","getCandidateCodePoints","codePoints","strings","String","fromCodePoint","searcher","Searcher","forLoop","lineCount","lineContent","reset","startIndex","endIndex","charCodeBefore","DEFAULT_WORD_REGEXP","highlightReason","shouldHighlightNonBasicASCII","assertNever","MAX_RESULT_LENGTH","computeUnicodeHighlightReason","char","kind","codePoint","codePointAt","primaryConfusable","ambiguousCharacters","getPrimaryConfusable","notAmbiguousInLocales","getLocales","l","getInstance","allowedLocales","isAmbiguous","confusableWith","allowedCodePoints","nonBasicASCII","invisibleCharacters","cp","isAllowedInvisibleCharacter","getConfusableCodePoints","wordContext","hasBasicASCIICharacters","hasNonConfusableNonBasicAsciiCharacter","isBasicASCII","isInvisibleCharacter","AccessibilitySupport","CodeActionTriggerType","CompletionItemInsertTextRule","CompletionItemKind","CompletionItemTag","CompletionTriggerKind","ContentWidgetPositionPreference","CursorChangeReason","DefaultEndOfLine","DocumentHighlightKind","EditorAutoIndentStrategy","EditorOption","EndOfLinePreference","EndOfLineSequence","GlyphMarginLane","IndentAction","InjectedTextCursorStops","InlayHintKind","InlineCompletionTriggerKind","MouseTargetType","OverlayWidgetPositionPreference","PositionAffinity","RenderLineNumbersType","RenderMinimap","ScrollType","ScrollbarVisibility","SignatureHelpTriggerKind","SymbolKind","SymbolTag","TextEditorCursorBlinkingStyle","TextEditorCursorStyle","TrackedRangeStickiness","WrappingIndent","InspectTokensNLS","GoToLineNLS","QuickHelpNLS","QuickCommandNLS","QuickOutlineNLS","StandaloneCodeEditorNLS","ToggleHighContrastNLS","StandaloneServicesNLS","inspectTokensAction","nls","gotoLineActionLabel","helpQuickAccessActionLabel","quickCommandActionLabel","quickCommandHelp","quickOutlineActionLabel","quickOutlineByCategoryActionLabel","editorViewAccessibleLabel","accessibilityHelpMessage","toggleHighContrast","bulkEditServiceSummary","BracketInfo","nestingLevel","nestingLevelOfEqualBracketType","isInvalid","BracketPairInfo","openingBracketRange","closingBracketRange","bracketPairNode","openingBracketInfo","openingBracket","bracketInfo","BracketPairWithMinIndentationInfo","minVisibleColumnIndentation","ModelRawFlush","changeType","LineInjectedText","applyInjectedText","injectedTexts","lastOriginalOffset","injectedText","fromDecorations","decorations","before","ownerId","after","order","ModelRawLineChanged","detail","ModelRawLinesDeleted","fromLineNumber","toLineNumber","ModelRawLinesInserted","ModelRawEOLChanged","ModelRawContentChangedEvent","isUndoing","isRedoing","resultingSelection","containsEvent","merge","ModelInjectedTextChangedEvent","InternalModelContentChangeEvent","rawContentChangedEvent","contentChangedEvent","other","_mergeChangeEvents","isFlush","isEolChange","HorizontalGuidesState","IndentGuide","visibleColumn","horizontalLine","forWrappedLinesAfterColumn","forWrappedLinesBeforeOrAtColumn","IndentGuideHorizontalLine","top","_tokenizationSupports","_factories","_colorMap","handleChange","changedLanguages","changedColorMap","support","registerFactory","factory","myData","TokenizationSupportFactoryData","v","tokenizationSupport","isResolved","setColorMap","colorMap","getColorMap","getDefaultBackground","_isResolved","_languageId","_factory","_isDisposed","_resolvePromise","_create","ContiguousMultilineTokens","appendLineTokens","lineTokens","ContiguousMultilineTokensBuilder","last","finalize","EMPTY_LINE_TOKENS","ContiguousTokensEditing","deleteBeginning","toChIndex","deleteEnding","fromChIndex","toUint32Array","lineTextLength","tokensCount","fromTokenIndex","LineTokens","findIndexInTokensArray","fromTokenStartOffset","lastEnd","tokenEndOffset","tmp","append","_otherTokens","myTokens","otherTokens","otherTokensCount","insert","chIndex","textLength","ContiguousTokensStore","_lineTokens","_len","_languageIdCodec","flush","hasTokens","getTokens","topLevelLanguageId","rawLineTokens","getDefaultMetadata","_massageTokens","hasDifferentLanguageId","byteLength","_ensureLine","_deleteLines","splice","_insertLines","insertIndex","insertCount","arrays","setTokens","checkEquality","oldTokens","_equals","lastLineTokens","setMultilineTokens","textModel","minChangedLineNumber","maxChangedLineNumber","hasChange","getLineLength","createEmpty","decoder","defaultMetadata","defaultTokenMetadata","_lineTokensBrand","_tokensCount","_text","slicedEquals","sliceFromTokenIndex","sliceTokenCount","to","getStartOffset","getStandardTokenType","getTokenType","getClassName","getClassNameFromMetadata","getInlineStyle","getInlineStyleFromMetadata","getPresentation","getPresentationFromMetadata","getEndOffset","findTokenIndexAtOffset","inflate","sliceAndInflate","startOffset","endOffset","deltaOffset","SliceLineTokens","convertToEndOffset","lastTokenIndex","desiredIndex","withInserted","insertTokens","nextOriginalTokenIdx","nextInsertTokenIdx","newTokens","originalEndOffset","nextOriginalTokenEndOffset","nextInsertToken","source","_source","_startOffset","_endOffset","_deltaOffset","_firstTokenIndex","SparseTokensStore","_pieces","_isComplete","isComplete","setPartial","_range","_firstRange","_lastRange","plusRange","insertPosition","piece","addSparseTokens","_findFirstPieceWithLine","aLen","bLen","aIndex","resultLen","lastEndOffset","emitToken","bIndex","bStartCharacter","bEndCharacter","bMetadata","bMask","aMask","aMergeIndex","ViewEventHandler","_shouldRender","shouldRender","forceShouldRender","setShouldRender","onDidRender","onCompositionStart","onCompositionEnd","onConfigurationChanged","onCursorStateChanged","onDecorationsChanged","onFlushed","onFocusChanged","onLanguageConfigurationChanged","onLineMappingChanged","onLinesChanged","onLinesDeleted","onLinesInserted","onRevealRangeRequest","onScrollChanged","onThemeChanged","onTokensChanged","onTokensColorsChanged","onZonesChanged","handleEvents","events","ViewCompositionStartEvent","ViewCompositionEndEvent","ViewConfigurationChangedEvent","ViewCursorStateChangedEvent","selections","modelSelections","reason","ViewDecorationsChangedEvent","affectsMinimap","affectsOverviewRuler","affectsGlyphMargin","ViewFlushedEvent","ViewFocusChangedEvent","isFocused","ViewLanguageConfigurationEvent","ViewLineMappingChangedEvent","ViewLinesChangedEvent","count","ViewLinesDeletedEvent","ViewLinesInsertedEvent","ViewRevealRangeRequestEvent","minimalReveal","verticalType","revealHorizontal","scrollType","ViewScrollChangedEvent","scrollWidth","scrollLeft","scrollHeight","scrollTop","scrollWidthChanged","scrollLeftChanged","scrollHeightChanged","scrollTopChanged","ViewThemeChangedEvent","theme","ViewTokensChangedEvent","ViewTokensColorsChangedEvent","ViewZonesChangedEvent","LineDecoration","_lineDecorationBrand","equalsArr","extractWrapped","rLength","dec","lineDecorations","minLineColumn","maxLineColumn","_typeCompare","ORDER","compare","typeCmp","DecorationSegment","Stack","stopOffsets","classNames","_metadata","consumeLowerThan","maxStopOffset","nextStartOffset","stopOffset","LineDecorationsNormalizer","normalize","stack","currentStartOffset","currentEndOffset","LinePart","containsRTL","_linePartBrand","isWhitespace","isPseudoAfter","LineRange","otherLineRange","RenderLineInput","useMonospaceOptimizations","canUseHalfwidthRightwardsArrow","continuesWithWrappedLine","fauxIndentLength","startVisibleColumn","spaceWidth","middotWidth","wsmiddotWidth","stopRenderingLineAfter","renderWhitespace","renderControlCharacters","fontLigatures","selectionsOnLine","abs","renderSpaceWidth","renderSpaceCharCode","sameSelection","otherSelections","DomPosition","partIndex","charIndex","CharacterMapping","getPartIndex","partData","getCharIndex","partCount","_horizontalOffset","setColumnInfo","horizontalOffset","getHorizontalOffset","charOffsetToPartData","charOffset","getDomPosition","getColumn","domPosition","partLength","partDataToCharOffset","searchEntry","midEntry","minEntry","maxEntry","minPartIndex","minCharIndex","maxCharIndex","RenderLineOutput","characterMapping","containsForeignElements","_renderLineOutputBrand","renderViewLine","input","sb","appendString","beforeCount","afterCount","lineDecoration","fontIsMonospace","isOverflowing","overflowingCharCount","parts","lastCharacterMappingDefined","charOffsetInPart","charHorizontalOffset","partDisplacement","tokensLen","part","partEndIndex","partType","partContainsRTL","partRendersWhitespace","partRendersWhitespaceWithWidth","partIsEmptyAndHasPseudoAfter","appendASCIICharCode","partWidth","_charIndex","_visibleColumn","charWidth","producedCharacters","appendCharCode","space","charCode","isControlCharacter","to4CharHex","n","toFixed","renderOverflowingCharCount","_renderLine","lineContainsRTL","tokenContainsRTL","transformAndRemoveOverflowing","lastLinePart","token","extractControlCharacters","onlyBoundary","onlyTrailing","generateLinePartForEachWhitespace","tokensLength","lastNonWhitespaceIndex","lineIsEmptyOrWhitespace","firstNonWhitespaceIndex","wasInWhitespace","currentSelectionIndex","currentSelection","tmpIndent","chCode","isInWhitespace","nextChCode","generateWhitespace","lastCharCode","prevCharCode","_applyRenderWhitespace","_lineDecorations","lineDecorationsLen","lineDecorationIndex","lastResultEndIndex","lastTokenEndIndex","_applyInlineDecorations","onlyAtSpaces","lastSpaceOffset","currTokenStart","j","diff","piecesCount","pieceEndIndex","splitLargeTokens","ResolvedRenderLineInput","resolveRenderLineInput","RenderLineOutput2","html","renderViewLine2","StringBuilder","build","toUpperCase","padStart","ViewportData","partialData","whitespaceViewportData","relativeVerticalOffset","bigNumbersDelta","visibleRange","getLineMinColumn","getViewLineRenderingData","getViewportViewLineRenderingData","getDecorationsInViewport","Viewport","left","width","height","_viewportBrand","MinimapLinesRenderingData","ViewLineData","inlineDecorations","_viewLineDataBrand","ViewLineRenderingData","mightContainRTL","mightContainNonBasicASCII","InlineDecoration","SingleLineInlineDecoration","inlineClassNameAffectsLetterSpacing","toInlineDecoration","ViewModelDecoration","_viewModelDecorationBrand","OverviewRulerDecorationsGroup","compareByRenderingProps","MinimapTokensColorTracker","_INSTANCE","markAsSingleton","_updateColorMap","_colors","RGBA8","Empty","_backgroundIsLight","colorId","rgba","g","backgroundLuminosity","getRelativeLuminance","getColor","backgroundIsLight","MonospaceLineBreaksComputerFactory","breakBeforeChars","breakAfterChars","classifier","WrappingCharacterClassifier","createLineBreaksComputer","fontInfo","wrappingColumn","wrappingIndent","wordBreak","requests","previousBreakingData","addRequest","previousLineBreakData","columnsForFullWidthChar","typicalFullwidthCharacterWidth","typicalHalfwidthCharacterWidth","injectionOptions","createLineBreaks","createLineBreaksFromPreviousLineBreaks","arrPool1","arrPool2","CharacterClassifier","BREAK_BEFORE","BREAK_AFTER","_asciiMap","_defaultValue","firstLineBreakColumn","isKeepAll","prevBreakingOffsets","breakOffsets","prevBreakingOffsetsVisibleColumn","breakOffsetsVisibleColumn","wrappedTextIndentLength","computeWrappedTextIndentLength","wrappedLineBreakColumn","breakingOffsets","breakingOffsetsVisibleColumn","breakingOffsetsCount","lastBreakingOffset","lastBreakingOffsetVisibleColumn","breakingColumn","prevLen","prevIndex","bestDistance","distance","prevBreakOffset","prevBreakOffsetVisibleColumn","breakOffset","breakOffsetVisibleColumn","forcedBreakOffset","forcedBreakOffsetVisibleColumn","prevCharCodeClass","entireLineFits","charStartOffset","charCodeClass","computeCharWidth","canBreak","hitATabCharacter","prevCharWidth","remainingWidthOfNextLine","charCodeAtForcedBreakOffset","_lineText","injectionOffsets","t","ModelLineProjectionData","tabCharacterWidth","numberOfAdditionalTabs","ColorZone","_colorZoneBrand","OverviewRulerZone","heightInLines","_overviewRulerZoneBrand","_colorZone","setColorZone","colorZone","getColorZones","OverviewZoneManager","getVerticalOffsetForLine","_getVerticalOffsetForLine","_zones","_colorZonesInvalid","_lineHeight","_domWidth","_domHeight","_outerHeight","_pixelRatio","_lastAssignedId","_color2Id","_id2Color","getId2Color","setZones","newZones","setLineHeight","lineHeight","setPixelRatio","pixelRatio","getDOMWidth","getCanvasWidth","setDOMWidth","getDOMHeight","getCanvasHeight","setDOMHeight","getOuterHeight","setOuterHeight","outerHeight","resolveColorZones","colorZonesInvalid","totalHeight","heightRatio","halfMinimumHeight","allColorZones","zone","offset1","offset2","y1","y2","ycenter","halfHeight","ViewContext","EditorTheme","viewModel","viewLayout","addEventHandler","eventHandler","addViewEventHandler","removeEventHandler","removeViewEventHandler","ViewModelDecorations","editorId","linesCollection","coordinatesConverter","_linesCollection","_coordinatesConverter","_decorationsCache","_cachedModelDecorationsResolver","_cachedModelDecorationsResolverViewRange","_clearCachedModelDecorationsResolver","onModelDecorationsChanged","_getOrCreateViewModelDecoration","modelDecoration","modelRange","viewRange","isWholeLine","convertModelPositionToViewPosition","convertModelRangeToViewRange","getMinimapDecorationsInRange","_getDecorationsInRange","getDecorationsViewportData","cacheIsValid","equalsRange","getInlineDecorationsOnLine","onlyMinimapDecorations","onlyMarginDecorations","getViewLineMinColumn","getViewLineMaxColumn","modelDecorations","getDecorationsInRange","filterValidationDecorations","decorationsInViewport","decorationsInViewportLen","decorationOptions","isModelDecorationVisible","viewModelDecoration","inlineDecoration","intersectedStartLineNumber","intersectedEndLineNumber","beforeContentClassName","afterContentClassName","hideInCommentTokens","isModelDecorationInComment","hideInStringTokens","isModelDecorationInString","testTokensInRange","callback","tokenization","isFirstLine","isEndLine","tokenIdx","PendingChanges","_hasPending","_inserts","_changes","_removes","x","mustCommit","commit","linesLayout","inserts","removes","_commitPendingChanges","EditorWhitespace","afterLineNumber","ordinal","minWidth","prefixSum","LinesLayout","paddingTop","paddingBottom","_instanceId","INSTANCE_COUNT","_pendingChanges","_lastWhitespaceId","_arr","_prefixSumValidIndex","_minWidth","_lineCount","_paddingTop","_paddingBottom","findInsertionIndex","_checkPendingChanges","setPadding","changeWhitespace","hadAChange","insertWhitespace","heightInPx","changeOneWhitespace","newAfterLineNumber","newHeight","removeWhitespace","_insertWhitespace","_changeOneWhitespace","_findWhitespaceIndex","_removeWhitespace","toRemove","toChange","applyRemoveAndChange","whitespaces","whitespace","removeIndex","getWhitespacesTotalHeight","getWhitespacesAccumulatedHeight","getLinesTotalHeight","getWhitespaceAccumulatedHeightBeforeLineNumber","lastWhitespaceBeforeLineNumber","_findLastWhitespaceBeforeLineNumber","_findFirstWhitespaceAfterLineNumber","firstWhitespaceAfterLineNumber","getFirstWhitespaceIndexAfterLineNumber","getVerticalOffsetForLineNumber","previousLinesHeight","includeViewZones","getVerticalOffsetAfterLineNumber","getWhitespaceMinWidth","isAfterLines","verticalOffset","isInTopPadding","isInBottomPadding","getLineNumberAtOrAfterVerticalOffset","linesCount","minLineNumber","maxLineNumber","midLineNumber","midLineNumberVerticalOffset","getLinesViewportData","verticalOffset1","verticalOffset2","startLineNumberVerticalOffset","whitespaceIndex","whitespaceCount","getWhitespacesCount","currentWhitespaceHeight","currentWhitespaceAfterLineNumber","getAfterLineNumberForWhitespaceIndex","getHeightForWhitespaceIndex","currentVerticalOffset","currentLineRelativeOffset","STEP_SIZE","linesOffsets","verticalCenter","centeredLineNumber","endLineNumberVerticalOffset","completelyVisibleStartLineNumber","completelyVisibleEndLineNumber","getVerticalOffsetForWhitespaceIndex","previousWhitespacesHeight","getWhitespaceIndexAtOrAfterVerticallOffset","minWhitespaceIndex","maxWhitespaceIndex","midWhitespaceIndex","midWhitespaceVerticalOffset","getWhitespaceAtVerticalOffset","candidateIndex","candidateTop","candidateHeight","getIdForWhitespaceIndex","getWhitespaceViewportData","getWhitespaces","EditorScrollDimensions","contentWidth","contentHeight","EditorScrollable","smoothScrollDuration","scheduleAtNextAnimationFrame","_onDidContentSizeChange","onDidContentSizeChange","_dimensions","_scrollable","Scrollable","forceIntegerValues","onDidScroll","onScroll","getScrollable","setSmoothScrollDuration","validateScrollPosition","scrollPosition","getScrollDimensions","setScrollDimensions","dimensions","oldDimensions","contentWidthChanged","contentHeightChanged","ContentSizeChangedEvent","getFutureScrollPosition","getCurrentScrollPosition","setScrollPositionNow","setScrollPositionSmooth","hasPendingScrollAnimation","ViewLayout","_configuration","layoutInfo","padding","_linesLayout","bottom","_maxLineWidth","_overlayWidgetsMinWidth","_configureSmoothScrollDuration","_updateHeight","onHeightMaybeChanged","scrollDimensions","_getContentHeight","_getHorizontalScrollbarHeight","scrollbar","horizontal","horizontalScrollbarSize","getCurrentViewport","currentScrollPosition","getFutureViewport","_computeContentWidth","maxLineWidth","wrappingInfo","isViewportWrapping","side","verticalScrollbarWidth","extraHorizontalSpace","whitespaceMinWidth","setMaxLineWidth","_updateContentWidth","setOverlayWidgetsMinWidth","maxMinWidth","saveState","firstLineNumberInViewport","scrollTopWithoutViewZones","getLineNumberAtVerticalOffset","visibleBox","getLinesViewportDataAtScrollTop","getContentWidth","getScrollWidth","getContentHeight","getScrollHeight","getCurrentScrollLeft","getCurrentScrollTop","setScrollPosition","deltaScrollNow","deltaScrollLeft","deltaScrollTop","createModelLineProjection","lineBreakData","isVisible","IdentityModelLineProjection","HiddenModelLineProjection","ModelLineProjection","_projectionData","_isVisible","setVisible","getProjectionData","getViewLineCount","getOutputLineCount","getViewLineContent","modelLineNumber","outputLineIndex","_assertVisible","startOffsetInInputWithInjections","endOffsetInInputWithInjections","idx","spaces","getViewLineLength","_modelLineNumber","getMinOutputOffset","getMaxOutputOffset","getViewLineData","getViewLinesData","outputLineIdx","globalStartIndex","needed","lineWithInjections","inlineDecorationsPerOutputLine","totalInjectedTextLengthBefore","currentInjectedOffset","lineStartOffsetInInputWithInjections","lineEndOffsetInInputWithInjections","injectedTextStartOffsetInInputWithInjections","injectedTextEndOffsetInInputWithInjections","globalIndex","_getViewLineData","deltaStartIndex","getModelColumnOfViewPosition","outputColumn","translateToInputOffset","getViewPositionOfModelPosition","deltaLineNumber","inputColumn","affinity","translateToOutputPosition","toPosition","getViewLineNumberOfModelPosition","normalizePosition","outputPosition","baseViewLineNumber","normalizeOutputPosition","getInjectedTextAt","getInjectedText","_outputLineIndex","_fromOuputLineIndex","_toOutputLineIndex","_inputColumn","_outputColumn","_globalStartIndex","_needed","_result","_deltaLineNumber","_spaces","_makeSpaces","ViewModelLinesFromProjectedModel","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","wrappingStrategy","_editorId","_validModelVersionId","_domLineBreaksComputerFactory","_monospaceLineBreaksComputerFactory","_constructLines","hiddenAreasDecorationIds","createCoordinatesConverter","CoordinatesConverter","resetHiddenAreas","previousLineBreaks","modelLineProjections","linesContent","injectedTextDecorations","getInjectedTextDecorations","lineBreaksComputer","injectedTextQueue","lineInjectedText","takeWhile","linesBreaks","hiddenAreas","areaId","getDecorationRange","hiddenAreaStart","hiddenAreaEnd","hiddenAreaIdx","nextLineNumberToUpdateHiddenArea","isInHiddenArea","projectedModelLineLineCounts","ConstantTimePrefixSumComputer","getHiddenAreas","decId","setHiddenAreas","_ranges","newRanges","sortedRanges","currentRangeStart","currentRangeEnd","normalizeLineRanges","oldRanges","hasDifference","ModelDecorationOptions","EMPTY","hasVisibleLine","lineChanged","newOutputLineCount","setValue","modelPositionIsVisible","_modelColumn","getModelLineViewLineCount","setTabSize","newTabSize","setWrappingSettings","equalFontInfo","equalWrappingStrategy","equalWrappingColumn","equalWrappingIndent","equalWordBreak","onlyWrappingColumnChanged","onModelFlushed","onModelLinesDeleted","outputFromLineNumber","outputToLineNumber","removeValues","viewEvents","onModelLinesInserted","_toLineNumber","lineBreaks","totalOutputLineCount","insertLines","insertPrefixSumValues","outputLineCount","insertValues","onModelLineChanged","oldOutputLineCount","lineMappingChanged","changeFrom","changeTo","insertFrom","insertTo","deleteFrom","deleteTo","acceptVersionId","getTotalSum","_toValidViewLineNumber","viewLineNumber","viewLineCount","getActiveIndentGuide","modelPosition","convertViewPositionToModelPosition","modelMinPosition","modelMaxPosition","guides","viewStartPosition","viewEndPosition","indent","getViewLineInfo","ViewLineInfo","getMinColumnOfViewLine","viewLineInfo","modelLineWrappedLineIdx","getMaxColumnOfViewLine","getModelStartPositionOfViewLine","minViewColumn","getModelEndPositionOfViewLine","maxViewColumn","getViewLineInfosGroupedByModelRanges","viewStartLineNumber","viewEndLineNumber","startViewLine","endViewLine","lastVisibleModelPos","viewLines","curModelLine","lastVisibleModelPos2","ViewLineInfoGroupedByModelRange","getViewLinesBracketGuides","activeViewPosition","modelActivePosition","resultPerViewLine","group","modelRangeStartLineNumber","bracketGuidesPerModelLine","getLinesBracketGuides","viewPosition","getViewLinesIndentGuides","modelStart","modelEnd","resultRepeatCount","resultRepeatOption","modelStartLineIndex","modelEndLineIndex","reqStart","modelLineIndex","viewLineStartIndex","viewLineEndIndex","option","getLinesIndentGuides","viewIndents","currIndex","blockAtIndex","startModelLineIndex","startRemainder","fromViewLineIndex","remainingViewLineCount","lastLine","validateViewPosition","viewColumn","expectedModelPosition","computedModelColumn","validatePosition","validateViewRange","expectedModelRange","validViewStart","validViewEnd","convertViewRangeToModelRange","allowZeroLineNumber","belowHiddenRanges","validPosition","inputLineNumber","lineIndexChanged","modelColumn","filterOutValidation","res","finalResult","finalResultLen","prevDecId","getLineIndentColumn","allowZero","ViewModelLinesFromModelAsIs","IdentityCoordinatesConverter","_newTabSize","_fontInfo","_wrappingStrategy","_wrappingColumn","_wrappingIndent","_versionId","_minLineNumber","_maxLineNumber","activePosition","fill","_validPosition","pos","_validRange","_viewPosition","_viewRange","ViewModel","languageConfigurationService","_attachedView","hiddenAreasModel","HiddenAreasModel","previousHiddenAreas","_eventDispatcher","ViewModelEventDispatcher","onEvent","cursorConfig","CursorConfiguration","getOptions","_updateConfigurationViewLineCount","RunOnceScheduler","_updateConfigurationViewLineCountNow","_hasFocus","_viewportStart","ViewportStart","isTooLargeForTokenization","_cursor","CursorsController","_handleVisibleLinesChanged","invalidate","emitSingleViewEvent","emitOutgoingEvent","ScrollChangedEvent","oldScrollWidth","oldScrollLeft","oldScrollHeight","oldScrollTop","_decorations","_registerModelEvents","onDidChangeFast","eventsCollector","beginEmitViewEvents","_onConfigurationChanged","endEmitViewEvents","_invalidateDecorationsColorCache","setViewLineCount","getModelVisibleRanges","linesViewportData","viewVisibleRange","_toModelVisibleRanges","visibleLinesStabilized","modelVisibleRanges","setVisibleLines","setHasFocus","hasFocus","FocusChangedEvent","_captureStableViewport","isValid","previousViewportStartViewPosition","previousViewportStartModelPosition","StableViewport","startLineDelta","stableViewport","emitViewEvent","schedule","recoverViewportStart","shouldRecreate","updateConfiguration","onDidChangeContentOrInjectedText","hadOtherModelChange","hadModelLineChangeThatChangedLineMapping","textModelEvents","lineIdx","lineBreakQueue","ArrayQueue","linesDeletedEvent","insertedLineBreaks","takeCount","linesInsertedEvent","changedLineBreakData","dequeue","linesChangedEvent","viewportStartWasValid","setModelLineCount","getAttachedEditorCount","_getTrackedRange","modelTrackedRange","viewPositionTop","ModelContentChangedEvent","onModelContentChanged","onDidChangeTokens","viewRanges","lenJ","ModelTokensChangedEvent","onDidChangeLanguageConfiguration","ModelLanguageConfigurationChangedEvent","ModelLanguageChangedEvent","onDidChangeOptions","ModelOptionsChangedEvent","onDidChangeDecorations","ModelDecorationsChangedEvent","mergedRanges","getMergedRanges","HiddenAreasChangedEvent","getVisibleRangesPlusViewportAboveBelow","linesAround","startViewLineNumber","endViewLineNumber","getVisibleRanges","visibleViewRange","getCompletelyVisibleViewRange","hiddenStartLineNumber","hiddenEndLineNumber","getCompletelyVisibleViewRangeAtScrollTop","compatViewState","firstViewLineNumber","firstPosition","firstPositionDeltaTop","reduceRestoreState","state","_reduceRestoreStateCompatibility","getTabSize","setViewport","getBracketGuidesInRangeByLine","_getViewLineRenderingData","lineData","getMinimapLinesRenderingData","getAllOverviewRulerDecorations","getOverviewRulerDecorations","OverviewRulerDecorations","opts","lane","accept","asArray","opts1","invalidateCachedColor","opts2","getValueLengthInRange","modifyPosition","deduceModelPositionRelativeToViewPosition","viewAnchorPosition","lineFeedCnt","modelAnchor","resultOffset","getOffsetAt","getPositionAt","getPlainTextToCopy","modelRanges","emptySelectionClipboard","forceCRLF","newLineCharacter","hasEmptyRange","hasNonEmptyRange","modelLineNumbers","prevModelLineNumber","getRichTextToCopy","_getColorMap","fontFamily","test","EDITOR_FONT_DEFAULTS","mode","fontWeight","fontSize","_getHTMLToCopy","tokenizeLineToHTML","Color","Format","CSS","formatHex","getPrimaryCursorState","getLastAddedCursorIndex","getCursorStates","setCursorStates","states","_withViewEventsCollector","setStates","getCursorColumnSelectData","getCursorAutoClosedCharacters","getAutoClosedCharacters","setCursorColumnSelectData","columnSelectData","getPrevEditOperationType","setPrevEditOperationType","getSelection","getSelections","getPosition","modelState","setSelections","saveCursorState","restoreCursorState","restoreState","_executeCursorEdit","context","readOnly","ReadOnlyEditAttemptEvent","executeEdits","cursorStateComputer","startComposition","endComposition","compositionType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","paste","pasteOnNewLine","multicursorText","cut","executeCommand","command","executeCommands","commands","revealPrimaryCursor","revealPrimary","revealTopMostCursor","getTopMostViewPosition","revealBottomMostCursor","getBottomMostViewPosition","revealRange","viewportStartLineTrackedRange","_setTrackedRange","_viewLineNumber","_isValid","_modelTrackedRange","_startLineDelta","viewportStartLineTop","_asMap","prevGroup","prevData","prevLane","prevEndLineNumber","shouldRecompute","existing","rangeArraysEqual","arr1","arr2","item1","item2","mergeLineRangeArray","viewportStartModelPosition","_onEvent","_eventHandlers","_viewEventQueue","_isConsumingViewEventQueue","_collector","_collectorCnt","_outgoingEvents","_addOutgoingEvent","_emitOutgoingEvents","mergeResult","attemptToMerge","isNoOp","ViewModelEventsCollector","outgoingEvents","outgoingEvent","_emitMany","_consumeViewEventQueue","_doConsumeQueue","eventHandlers","oldContentWidth","oldContentHeight","_oldContentWidth","_oldContentHeight","oldHasFocus","_oldScrollWidth","_oldScrollLeft","_oldScrollHeight","_oldScrollTop","CursorStateChangedEvent","oldSelections","oldModelVersionId","modelVersionId","reachedMaxCursorCount","_selectionsAreEqual","equalsSelection"],"sourceRoot":""}