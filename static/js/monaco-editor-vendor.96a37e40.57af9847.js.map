{"version":3,"file":"static/js/monaco-editor-vendor.96a37e40.57af9847.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/contentWidgets/contentWidgets.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/currentLineHighlight/currentLineHighlight.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/decorations/decorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/editorScrollbar/editorScrollbar.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/glyphMargin/glyphMargin.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/indentGuides/indentGuides.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLines.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/linesDecorations/linesDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/marginDecorations/marginDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharSheet.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRenderer.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapPreBaked.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimap.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/overviewRuler.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/rulers/rulers.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/scrollDecoration/scrollDecoration.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/selections/selections.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursor.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursors.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewZones/viewZones.js","../node_modules/monaco-editor/esm/vs/editor/browser/view.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/domLineBreaksComputer.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/dynamicViewOverlay.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lineNumbers/lineNumbers.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/rangeUtil.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLine.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/margin/margin.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nclass Coordinate {\n    constructor(top, left) {\n        this._coordinateBrand = undefined;\n        this.top = top;\n        this.left = left;\n    }\n}\nexport class ViewContentWidgets extends ViewPart {\n    constructor(context, viewDomNode) {\n        super(context);\n        this._viewDomNode = viewDomNode;\n        this._widgets = {};\n        this.domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.domNode, 1 /* ContentWidgets */);\n        this.domNode.setClassName('contentWidgets');\n        this.domNode.setPosition('absolute');\n        this.domNode.setTop(0);\n        this.overflowingContentWidgetsDomNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.overflowingContentWidgetsDomNode, 2 /* OverflowingContentWidgets */);\n        this.overflowingContentWidgetsDomNode.setClassName('overflowingContentWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLineMappingChanged(e) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onLineMappingChanged(e);\n        }\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    addWidget(_widget) {\n        const myWidget = new Widget(this._context, this._viewDomNode, _widget);\n        this._widgets[myWidget.id] = myWidget;\n        if (myWidget.allowEditorOverflow) {\n            this.overflowingContentWidgetsDomNode.appendChild(myWidget.domNode);\n        }\n        else {\n            this.domNode.appendChild(myWidget.domNode);\n        }\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, range, preference) {\n        const myWidget = this._widgets[widget.getId()];\n        myWidget.setPosition(range, preference);\n        this.setShouldRender();\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const myWidget = this._widgets[widgetId];\n            delete this._widgets[widgetId];\n            const domNode = myWidget.domNode.domNode;\n            domNode.parentNode.removeChild(domNode);\n            domNode.removeAttribute('monaco-visible-content-widget');\n            this.setShouldRender();\n        }\n    }\n    shouldSuppressMouseDownOnWidget(widgetId) {\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            return this._widgets[widgetId].suppressMouseDown;\n        }\n        return false;\n    }\n    onBeforeRender(viewportData) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onBeforeRender(viewportData);\n        }\n    }\n    prepareRender(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].render(ctx);\n        }\n    }\n}\nclass Widget {\n    constructor(context, viewDomNode, actual) {\n        this._context = context;\n        this._viewDomNode = viewDomNode;\n        this._actual = actual;\n        this.domNode = createFastDomNode(this._actual.getDomNode());\n        this.id = this._actual.getId();\n        this.allowEditorOverflow = this._actual.allowEditorOverflow || false;\n        this.suppressMouseDown = this._actual.suppressMouseDown || false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._fixedOverflowWidgets = options.get(36 /* fixedOverflowWidgets */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._range = null;\n        this._viewRange = null;\n        this._preference = [];\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n        this._maxWidth = this._getMaxWidth();\n        this._isVisible = false;\n        this._renderData = null;\n        this.domNode.setPosition((this._fixedOverflowWidgets && this.allowEditorOverflow) ? 'fixed' : 'absolute');\n        this.domNode.setDisplay('none');\n        this.domNode.setVisibility('hidden');\n        this.domNode.setAttribute('widgetId', this.id);\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        if (e.hasChanged(131 /* layoutInfo */)) {\n            const layoutInfo = options.get(131 /* layoutInfo */);\n            this._contentLeft = layoutInfo.contentLeft;\n            this._contentWidth = layoutInfo.contentWidth;\n            this._maxWidth = this._getMaxWidth();\n        }\n    }\n    onLineMappingChanged(e) {\n        this._setPosition(this._range);\n    }\n    _setPosition(range) {\n        this._range = range;\n        this._viewRange = null;\n        if (this._range) {\n            // Do not trust that widgets give a valid position\n            const validModelRange = this._context.viewModel.model.validateRange(this._range);\n            if (this._context.viewModel.coordinatesConverter.modelPositionIsVisible(validModelRange.getStartPosition()) || this._context.viewModel.coordinatesConverter.modelPositionIsVisible(validModelRange.getEndPosition())) {\n                this._viewRange = this._context.viewModel.coordinatesConverter.convertModelRangeToViewRange(validModelRange);\n            }\n        }\n    }\n    _getMaxWidth() {\n        return (this.allowEditorOverflow\n            ? window.innerWidth || document.documentElement.offsetWidth || document.body.offsetWidth\n            : this._contentWidth);\n    }\n    setPosition(range, preference) {\n        this._setPosition(range);\n        this._preference = preference;\n        if (this._viewRange && this._preference && this._preference.length > 0) {\n            // this content widget would like to be visible if possible\n            // we change it from `display:none` to `display:block` even if it\n            // might be outside the viewport such that we can measure its size\n            // in `prepareRender`\n            this.domNode.setDisplay('block');\n        }\n        else {\n            this.domNode.setDisplay('none');\n        }\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n    }\n    _layoutBoxInViewport(topLeft, bottomLeft, width, height, ctx) {\n        // Our visible box is split horizontally by the current line => 2 boxes\n        // a) the box above the line\n        const aboveLineTop = topLeft.top;\n        const heightAboveLine = aboveLineTop;\n        // b) the box under the line\n        const underLineTop = bottomLeft.top + this._lineHeight;\n        const heightUnderLine = ctx.viewportHeight - underLineTop;\n        const aboveTop = aboveLineTop - height;\n        const fitsAbove = (heightAboveLine >= height);\n        const belowTop = underLineTop;\n        const fitsBelow = (heightUnderLine >= height);\n        // And its left\n        let actualAboveLeft = topLeft.left;\n        let actualBelowLeft = bottomLeft.left;\n        if (actualAboveLeft + width > ctx.scrollLeft + ctx.viewportWidth) {\n            actualAboveLeft = ctx.scrollLeft + ctx.viewportWidth - width;\n        }\n        if (actualBelowLeft + width > ctx.scrollLeft + ctx.viewportWidth) {\n            actualBelowLeft = ctx.scrollLeft + ctx.viewportWidth - width;\n        }\n        if (actualAboveLeft < ctx.scrollLeft) {\n            actualAboveLeft = ctx.scrollLeft;\n        }\n        if (actualBelowLeft < ctx.scrollLeft) {\n            actualBelowLeft = ctx.scrollLeft;\n        }\n        return {\n            fitsAbove: fitsAbove,\n            aboveTop: aboveTop,\n            aboveLeft: actualAboveLeft,\n            fitsBelow: fitsBelow,\n            belowTop: belowTop,\n            belowLeft: actualBelowLeft,\n        };\n    }\n    _layoutHorizontalSegmentInPage(windowSize, domNodePosition, left, width) {\n        // Initially, the limits are defined as the dom node limits\n        const MIN_LIMIT = Math.max(0, domNodePosition.left - width);\n        const MAX_LIMIT = Math.min(domNodePosition.left + domNodePosition.width + width, windowSize.width);\n        let absoluteLeft = domNodePosition.left + left - dom.StandardWindow.scrollX;\n        if (absoluteLeft + width > MAX_LIMIT) {\n            const delta = absoluteLeft - (MAX_LIMIT - width);\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        if (absoluteLeft < MIN_LIMIT) {\n            const delta = absoluteLeft - MIN_LIMIT;\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        return [left, absoluteLeft];\n    }\n    _layoutBoxInPage(topLeft, bottomLeft, width, height, ctx) {\n        const aboveTop = topLeft.top - height;\n        const belowTop = bottomLeft.top + this._lineHeight;\n        const domNodePosition = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n        const absoluteAboveTop = domNodePosition.top + aboveTop - dom.StandardWindow.scrollY;\n        const absoluteBelowTop = domNodePosition.top + belowTop - dom.StandardWindow.scrollY;\n        const windowSize = dom.getClientArea(document.body);\n        const [aboveLeft, absoluteAboveLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, topLeft.left - ctx.scrollLeft + this._contentLeft, width);\n        const [belowLeft, absoluteBelowLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, bottomLeft.left - ctx.scrollLeft + this._contentLeft, width);\n        // Leave some clearance to the top/bottom\n        const TOP_PADDING = 22;\n        const BOTTOM_PADDING = 22;\n        const fitsAbove = (absoluteAboveTop >= TOP_PADDING);\n        const fitsBelow = (absoluteBelowTop + height <= windowSize.height - BOTTOM_PADDING);\n        if (this._fixedOverflowWidgets) {\n            return {\n                fitsAbove,\n                aboveTop: Math.max(absoluteAboveTop, TOP_PADDING),\n                aboveLeft: absoluteAboveLeft,\n                fitsBelow,\n                belowTop: absoluteBelowTop,\n                belowLeft: absoluteBelowLeft\n            };\n        }\n        return {\n            fitsAbove,\n            aboveTop: aboveTop,\n            aboveLeft,\n            fitsBelow,\n            belowTop,\n            belowLeft\n        };\n    }\n    _prepareRenderWidgetAtExactPositionOverflowing(topLeft) {\n        return new Coordinate(topLeft.top, topLeft.left + this._contentLeft);\n    }\n    /**\n     * Compute `this._topLeft`\n     */\n    _getTopAndBottomLeft(ctx) {\n        if (!this._viewRange) {\n            return [null, null];\n        }\n        const visibleRangesForRange = ctx.linesVisibleRangesForRange(this._viewRange, false);\n        if (!visibleRangesForRange || visibleRangesForRange.length === 0) {\n            return [null, null];\n        }\n        let firstLine = visibleRangesForRange[0];\n        let lastLine = visibleRangesForRange[0];\n        for (const visibleRangesForLine of visibleRangesForRange) {\n            if (visibleRangesForLine.lineNumber < firstLine.lineNumber) {\n                firstLine = visibleRangesForLine;\n            }\n            if (visibleRangesForLine.lineNumber > lastLine.lineNumber) {\n                lastLine = visibleRangesForLine;\n            }\n        }\n        let firstLineMinLeft = 1073741824 /* MAX_SAFE_SMALL_INTEGER */; //firstLine.Constants.MAX_SAFE_SMALL_INTEGER;\n        for (const visibleRange of firstLine.ranges) {\n            if (visibleRange.left < firstLineMinLeft) {\n                firstLineMinLeft = visibleRange.left;\n            }\n        }\n        let lastLineMinLeft = 1073741824 /* MAX_SAFE_SMALL_INTEGER */; //lastLine.Constants.MAX_SAFE_SMALL_INTEGER;\n        for (const visibleRange of lastLine.ranges) {\n            if (visibleRange.left < lastLineMinLeft) {\n                lastLineMinLeft = visibleRange.left;\n            }\n        }\n        const topForPosition = ctx.getVerticalOffsetForLineNumber(firstLine.lineNumber) - ctx.scrollTop;\n        const topLeft = new Coordinate(topForPosition, firstLineMinLeft);\n        const topForBottomLine = ctx.getVerticalOffsetForLineNumber(lastLine.lineNumber) - ctx.scrollTop;\n        const bottomLeft = new Coordinate(topForBottomLine, lastLineMinLeft);\n        return [topLeft, bottomLeft];\n    }\n    _prepareRenderWidget(ctx) {\n        if (!this._preference || this._preference.length === 0) {\n            return null;\n        }\n        const [topLeft, bottomLeft] = this._getTopAndBottomLeft(ctx);\n        if (!topLeft || !bottomLeft) {\n            return null;\n        }\n        if (this._cachedDomNodeOffsetWidth === -1 || this._cachedDomNodeOffsetHeight === -1) {\n            let preferredDimensions = null;\n            if (typeof this._actual.beforeRender === 'function') {\n                preferredDimensions = safeInvoke(this._actual.beforeRender, this._actual);\n            }\n            if (preferredDimensions) {\n                this._cachedDomNodeOffsetWidth = preferredDimensions.width;\n                this._cachedDomNodeOffsetHeight = preferredDimensions.height;\n            }\n            else {\n                const domNode = this.domNode.domNode;\n                this._cachedDomNodeOffsetWidth = domNode.offsetWidth;\n                this._cachedDomNodeOffsetHeight = domNode.offsetHeight;\n            }\n        }\n        let placement;\n        if (this.allowEditorOverflow) {\n            placement = this._layoutBoxInPage(topLeft, bottomLeft, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        else {\n            placement = this._layoutBoxInViewport(topLeft, bottomLeft, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        // Do two passes, first for perfect fit, second picks first option\n        for (let pass = 1; pass <= 2; pass++) {\n            for (const pref of this._preference) {\n                // placement\n                if (pref === 1 /* ABOVE */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsAbove) {\n                        return { coordinate: new Coordinate(placement.aboveTop, placement.aboveLeft), position: 1 /* ABOVE */ };\n                    }\n                }\n                else if (pref === 2 /* BELOW */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsBelow) {\n                        return { coordinate: new Coordinate(placement.belowTop, placement.belowLeft), position: 2 /* BELOW */ };\n                    }\n                }\n                else {\n                    if (this.allowEditorOverflow) {\n                        return { coordinate: this._prepareRenderWidgetAtExactPositionOverflowing(topLeft), position: 0 /* EXACT */ };\n                    }\n                    else {\n                        return { coordinate: topLeft, position: 0 /* EXACT */ };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * On this first pass, we ensure that the content widget (if it is in the viewport) has the max width set correctly.\n     */\n    onBeforeRender(viewportData) {\n        if (!this._viewRange || !this._preference) {\n            return;\n        }\n        if (this._viewRange.endLineNumber < viewportData.startLineNumber || this._viewRange.startLineNumber > viewportData.endLineNumber) {\n            // Outside of viewport\n            return;\n        }\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRenderWidget(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            // This widget should be invisible\n            if (this._isVisible) {\n                this.domNode.removeAttribute('monaco-visible-content-widget');\n                this._isVisible = false;\n                this.domNode.setVisibility('hidden');\n            }\n            if (typeof this._actual.afterRender === 'function') {\n                safeInvoke(this._actual.afterRender, this._actual, null);\n            }\n            return;\n        }\n        // This widget should be visible\n        if (this.allowEditorOverflow) {\n            this.domNode.setTop(this._renderData.coordinate.top);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        else {\n            this.domNode.setTop(this._renderData.coordinate.top + ctx.scrollTop - ctx.bigNumbersDelta);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        if (!this._isVisible) {\n            this.domNode.setVisibility('inherit');\n            this.domNode.setAttribute('monaco-visible-content-widget', 'true');\n            this._isVisible = true;\n        }\n        if (typeof this._actual.afterRender === 'function') {\n            safeInvoke(this._actual.afterRender, this._actual, this._renderData.position);\n        }\n    }\n}\nfunction safeInvoke(fn, thisArg, ...args) {\n    try {\n        return fn.call(thisArg, ...args);\n    }\n    catch (_a) {\n        // ignore\n        return null;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nexport class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._renderLineHighlight = options.get(85 /* renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(86 /* renderLineHighlightOnlyWhenFocus */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._selectionIsEmpty = true;\n        this._focused = false;\n        this._cursorLineNumbers = [1];\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderData = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    _readFromSelections() {\n        let hasChanged = false;\n        const cursorsLineNumbers = this._selections.map(s => s.positionLineNumber);\n        cursorsLineNumbers.sort((a, b) => a - b);\n        if (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n            this._cursorLineNumbers = cursorsLineNumbers;\n            hasChanged = true;\n        }\n        const selectionIsEmpty = this._selections.every(s => s.isEmpty());\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            hasChanged = true;\n        }\n        return hasChanged;\n    }\n    // --- begin event handlers\n    onThemeChanged(e) {\n        return this._readFromSelections();\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._renderLineHighlight = options.get(85 /* renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(86 /* renderLineHighlightOnlyWhenFocus */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return this._readFromSelections();\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollWidthChanged || e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        if (!this._renderLineHighlightOnlyWhenFocus) {\n            return false;\n        }\n        this._focused = e.isFocused;\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (!this._shouldRenderThis()) {\n            this._renderData = null;\n            return;\n        }\n        const renderedLine = this._renderOne(ctx);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const len = this._cursorLineNumbers.length;\n        let index = 0;\n        const renderData = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            while (index < len && this._cursorLineNumbers[index] < lineNumber) {\n                index++;\n            }\n            if (index < len && this._cursorLineNumbers[index] === lineNumber) {\n                renderData[lineIndex] = renderedLine;\n            }\n            else {\n                renderData[lineIndex] = '';\n            }\n        }\n        this._renderData = renderData;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderData) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex >= this._renderData.length) {\n            return '';\n        }\n        return this._renderData[lineIndex];\n    }\n    _shouldRenderInMargin() {\n        return ((this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n    _shouldRenderInContent() {\n        return ((this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n            && this._selectionIsEmpty\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n}\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx) {\n        const className = 'current-line' + (this._shouldRenderOther() ? ' current-line-both' : '');\n        return `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return this._shouldRenderInContent();\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInMargin();\n    }\n}\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx) {\n        const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '');\n        return `<div class=\"${className}\" style=\"width:${this._contentLeft}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return true;\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInContent();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const lineHighlight = theme.getColor(editorLineHighlight);\n    if (lineHighlight) {\n        collector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n        collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n    }\n    if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n        const lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n        if (lineHighlightBorder) {\n            collector.addRule(`.monaco-editor .view-overlays .current-line { border: 2px solid ${lineHighlightBorder}; }`);\n            collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border: 2px solid ${lineHighlightBorder}; }`);\n            if (theme.type === 'hc') {\n                collector.addRule(`.monaco-editor .view-overlays .current-line { border-width: 1px; }`);\n                collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border-width: 1px; }`);\n            }\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Range } from '../../../common/core/range.js';\nimport { HorizontalRange } from '../../view/renderingContext.js';\nexport class DecorationsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(44 /* fontInfo */).typicalHalfwidthCharacterWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(44 /* fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        const _decorations = ctx.getDecorationsInViewport();\n        // Keep only decorations with `className`\n        let decorations = [];\n        let decorationsLen = 0;\n        for (let i = 0, len = _decorations.length; i < len; i++) {\n            const d = _decorations[i];\n            if (d.options.className) {\n                decorations[decorationsLen++] = d;\n            }\n        }\n        // Sort decorations for consistent render output\n        decorations = decorations.sort((a, b) => {\n            if (a.options.zIndex < b.options.zIndex) {\n                return -1;\n            }\n            if (a.options.zIndex > b.options.zIndex) {\n                return 1;\n            }\n            const aClassName = a.options.className;\n            const bClassName = b.options.className;\n            if (aClassName < bClassName) {\n                return -1;\n            }\n            if (aClassName > bClassName) {\n                return 1;\n            }\n            return Range.compareRangesUsingStarts(a.range, b.range);\n        });\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = '';\n        }\n        // Render first whole line decorations and then regular decorations\n        this._renderWholeLineDecorations(ctx, decorations, output);\n        this._renderNormalDecorations(ctx, decorations, output);\n        this._renderResult = output;\n    }\n    _renderWholeLineDecorations(ctx, decorations, output) {\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (!d.options.isWholeLine) {\n                continue;\n            }\n            const decorationOutput = ('<div class=\"cdr '\n                + d.options.className\n                + '\" style=\"left:0;width:100%;height:'\n                + lineHeight\n                + 'px;\"></div>');\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            for (let j = startLineNumber; j <= endLineNumber; j++) {\n                const lineIndex = j - visibleStartLineNumber;\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    _renderNormalDecorations(ctx, decorations, output) {\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        let prevClassName = null;\n        let prevShowIfCollapsed = false;\n        let prevRange = null;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (d.options.isWholeLine) {\n                continue;\n            }\n            const className = d.options.className;\n            const showIfCollapsed = Boolean(d.options.showIfCollapsed);\n            let range = d.range;\n            if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n                range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.viewModel.getLineMaxColumn(range.endLineNumber - 1));\n            }\n            if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n                // merge into previous decoration\n                prevRange = Range.plusRange(prevRange, range);\n                continue;\n            }\n            // flush previous decoration\n            if (prevClassName !== null) {\n                this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n            }\n            prevClassName = className;\n            prevShowIfCollapsed = showIfCollapsed;\n            prevRange = range;\n        }\n        if (prevClassName !== null) {\n            this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n        }\n    }\n    _renderNormalDecoration(ctx, range, className, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\n        const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/ className === 'findMatch');\n        if (!linesVisibleRanges) {\n            return;\n        }\n        for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n            const lineVisibleRanges = linesVisibleRanges[j];\n            if (lineVisibleRanges.outsideRenderedLine) {\n                continue;\n            }\n            const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n            if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n                const singleVisibleRange = lineVisibleRanges.ranges[0];\n                if (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n                    // collapsed/very small range case => make the decoration visible by expanding its width\n                    // expand its size on both sides (both to the left and to the right, keeping it centered)\n                    const center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n                    const left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n                    lineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n                }\n            }\n            for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n                const visibleRange = lineVisibleRanges.ranges[k];\n                const decorationOutput = ('<div class=\"cdr '\n                    + className\n                    + '\" style=\"left:'\n                    + String(visibleRange.left)\n                    + 'px;width:'\n                    + String(visibleRange.width)\n                    + 'px;height:'\n                    + lineHeight\n                    + 'px;\"></div>');\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { SmoothScrollableElement } from '../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { registerThemingParticipant, getThemeTypeSelector } from '../../../../platform/theme/common/themeService.js';\nimport { scrollbarShadow, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground } from '../../../../platform/theme/common/colorRegistry.js';\nexport class EditorScrollbar extends ViewPart {\n    constructor(context, linesContent, viewDomNode, overflowGuardDomNode) {\n        super(context);\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(92 /* scrollbar */);\n        const mouseWheelScrollSensitivity = options.get(67 /* mouseWheelScrollSensitivity */);\n        const fastScrollSensitivity = options.get(34 /* fastScrollSensitivity */);\n        const scrollPredominantAxis = options.get(95 /* scrollPredominantAxis */);\n        const scrollbarOptions = {\n            listenOnDomNode: viewDomNode.domNode,\n            className: 'editor-scrollable' + ' ' + getThemeTypeSelector(context.theme.type),\n            useShadows: false,\n            lazyRender: true,\n            vertical: scrollbar.vertical,\n            horizontal: scrollbar.horizontal,\n            verticalHasArrows: scrollbar.verticalHasArrows,\n            horizontalHasArrows: scrollbar.horizontalHasArrows,\n            verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n            verticalSliderSize: scrollbar.verticalSliderSize,\n            horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n            horizontalSliderSize: scrollbar.horizontalSliderSize,\n            handleMouseWheel: scrollbar.handleMouseWheel,\n            alwaysConsumeMouseWheel: scrollbar.alwaysConsumeMouseWheel,\n            arrowSize: scrollbar.arrowSize,\n            mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n            fastScrollSensitivity: fastScrollSensitivity,\n            scrollPredominantAxis: scrollPredominantAxis,\n            scrollByPage: scrollbar.scrollByPage,\n        };\n        this.scrollbar = this._register(new SmoothScrollableElement(linesContent.domNode, scrollbarOptions, this._context.viewLayout.getScrollable()));\n        PartFingerprints.write(this.scrollbar.getDomNode(), 5 /* ScrollableElement */);\n        this.scrollbarDomNode = createFastDomNode(this.scrollbar.getDomNode());\n        this.scrollbarDomNode.setPosition('absolute');\n        this._setLayout();\n        // When having a zone widget that calls .focus() on one of its dom elements,\n        // the browser will try desperately to reveal that dom node, unexpectedly\n        // changing the .scrollTop of this.linesContent\n        const onBrowserDesperateReveal = (domNode, lookAtScrollTop, lookAtScrollLeft) => {\n            const newScrollPosition = {};\n            if (lookAtScrollTop) {\n                const deltaTop = domNode.scrollTop;\n                if (deltaTop) {\n                    newScrollPosition.scrollTop = this._context.viewLayout.getCurrentScrollTop() + deltaTop;\n                    domNode.scrollTop = 0;\n                }\n            }\n            if (lookAtScrollLeft) {\n                const deltaLeft = domNode.scrollLeft;\n                if (deltaLeft) {\n                    newScrollPosition.scrollLeft = this._context.viewLayout.getCurrentScrollLeft() + deltaLeft;\n                    domNode.scrollLeft = 0;\n                }\n            }\n            this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, 1 /* Immediate */);\n        };\n        // I've seen this happen both on the view dom node & on the lines content dom node.\n        this._register(dom.addDisposableListener(viewDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(viewDomNode.domNode, true, true)));\n        this._register(dom.addDisposableListener(linesContent.domNode, 'scroll', (e) => onBrowserDesperateReveal(linesContent.domNode, true, false)));\n        this._register(dom.addDisposableListener(overflowGuardDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(overflowGuardDomNode.domNode, true, false)));\n        this._register(dom.addDisposableListener(this.scrollbarDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(this.scrollbarDomNode.domNode, true, false)));\n    }\n    dispose() {\n        super.dispose();\n    }\n    _setLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this.scrollbarDomNode.setLeft(layoutInfo.contentLeft);\n        const minimap = options.get(65 /* minimap */);\n        const side = minimap.side;\n        if (side === 'right') {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth + layoutInfo.minimap.minimapWidth);\n        }\n        else {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth);\n        }\n        this.scrollbarDomNode.setHeight(layoutInfo.height);\n    }\n    getOverviewRulerLayoutInfo() {\n        return this.scrollbar.getOverviewRulerLayoutInfo();\n    }\n    getDomNode() {\n        return this.scrollbarDomNode;\n    }\n    delegateVerticalScrollbarMouseDown(browserEvent) {\n        this.scrollbar.delegateVerticalScrollbarMouseDown(browserEvent);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(92 /* scrollbar */)\n            || e.hasChanged(67 /* mouseWheelScrollSensitivity */)\n            || e.hasChanged(34 /* fastScrollSensitivity */)) {\n            const options = this._context.configuration.options;\n            const scrollbar = options.get(92 /* scrollbar */);\n            const mouseWheelScrollSensitivity = options.get(67 /* mouseWheelScrollSensitivity */);\n            const fastScrollSensitivity = options.get(34 /* fastScrollSensitivity */);\n            const scrollPredominantAxis = options.get(95 /* scrollPredominantAxis */);\n            const newOpts = {\n                vertical: scrollbar.vertical,\n                horizontal: scrollbar.horizontal,\n                verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n                horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n                scrollByPage: scrollbar.scrollByPage,\n                handleMouseWheel: scrollbar.handleMouseWheel,\n                mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n                fastScrollSensitivity: fastScrollSensitivity,\n                scrollPredominantAxis: scrollPredominantAxis\n            };\n            this.scrollbar.updateOptions(newOpts);\n        }\n        if (e.hasChanged(131 /* layoutInfo */)) {\n            this._setLayout();\n        }\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        this.scrollbar.updateClassName('editor-scrollable' + ' ' + getThemeTypeSelector(this._context.theme.type));\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to do\n    }\n    render(ctx) {\n        this.scrollbar.renderNow();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    // Scrollbars\n    const scrollbarShadowColor = theme.getColor(scrollbarShadow);\n    if (scrollbarShadowColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .shadow.top {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 0 6px 6px -6px inset;\n\t\t\t}\n\n\t\t\t.monaco-scrollable-element > .shadow.left {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 6px 0 6px -6px inset;\n\t\t\t}\n\n\t\t\t.monaco-scrollable-element > .shadow.top.left {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 6px 6px 6px -6px inset;\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderBackgroundColor = theme.getColor(scrollbarSliderBackground);\n    if (scrollbarSliderBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider {\n\t\t\t\tbackground: ${scrollbarSliderBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderHoverBackgroundColor = theme.getColor(scrollbarSliderHoverBackground);\n    if (scrollbarSliderHoverBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider:hover {\n\t\t\t\tbackground: ${scrollbarSliderHoverBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderActiveBackgroundColor = theme.getColor(scrollbarSliderActiveBackground);\n    if (scrollbarSliderActiveBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider.active {\n\t\t\t\tbackground: ${scrollbarSliderActiveBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nexport class DecorationToRender {\n    constructor(startLineNumber, endLineNumber, className) {\n        this._decorationToRenderBrand = undefined;\n        this.startLineNumber = +startLineNumber;\n        this.endLineNumber = +endLineNumber;\n        this.className = String(className);\n    }\n}\nexport class DedupOverlay extends DynamicViewOverlay {\n    _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = [];\n        }\n        if (decorations.length === 0) {\n            return output;\n        }\n        decorations.sort((a, b) => {\n            if (a.className === b.className) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return (a.className < b.className ? -1 : 1);\n        });\n        let prevClassName = null;\n        let prevEndLineIndex = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const className = d.className;\n            let startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n            const endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n            if (prevClassName === className) {\n                startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n                prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n            }\n            else {\n                prevClassName = className;\n                prevEndLineIndex = endLineIndex;\n            }\n            for (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n                output[i].push(prevClassName);\n            }\n        }\n        return output;\n    }\n}\nexport class GlyphMarginOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._glyphMargin = options.get(50 /* glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._glyphMargin = options.get(50 /* glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const glyphMarginClassName = d.options.glyphMarginClassName;\n            if (glyphMarginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, glyphMarginClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        if (!this._glyphMargin) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const lineHeight = this._lineHeight.toString();\n        const left = this._glyphMarginLeft.toString();\n        const width = this._glyphMarginWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px' + ';height:' + lineHeight + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            if (classNames.length === 0) {\n                output[lineIndex] = '';\n            }\n            else {\n                output[lineIndex] = ('<div class=\"cgmr codicon '\n                    + classNames.join(' ')\n                    + common);\n            }\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './indentGuides.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorActiveIndentGuides, editorBracketHighlightingForeground1, editorBracketHighlightingForeground2, editorBracketHighlightingForeground3, editorBracketHighlightingForeground4, editorBracketHighlightingForeground5, editorBracketHighlightingForeground6, editorBracketPairGuideActiveBackground1, editorBracketPairGuideActiveBackground2, editorBracketPairGuideActiveBackground3, editorBracketPairGuideActiveBackground4, editorBracketPairGuideActiveBackground5, editorBracketPairGuideActiveBackground6, editorBracketPairGuideBackground1, editorBracketPairGuideBackground2, editorBracketPairGuideBackground3, editorBracketPairGuideBackground4, editorBracketPairGuideBackground5, editorBracketPairGuideBackground6, editorIndentGuides } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Position } from '../../../common/core/position.js';\nimport { ArrayQueue } from '../../../../base/common/arrays.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { BracketPairGuidesClassNames } from '../../../common/model/guidesTextModelPart.js';\nimport { IndentGuide, HorizontalGuidesState } from '../../../common/textModelGuides.js';\nexport class IndentGuidesOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._primaryPosition = null;\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(132 /* wrappingInfo */);\n        const fontInfo = options.get(44 /* fontInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(13 /* guides */);\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(132 /* wrappingInfo */);\n        const fontInfo = options.get(44 /* fontInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(13 /* guides */);\n        return true;\n    }\n    onCursorStateChanged(e) {\n        var _a;\n        const selection = e.selections[0];\n        const newPosition = selection.getPosition();\n        if (!((_a = this._primaryPosition) === null || _a === void 0 ? void 0 : _a.equals(newPosition))) {\n            this._primaryPosition = newPosition;\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged; // || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLanguageConfigurationChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        var _a, _b, _c, _d;\n        if (!this._bracketPairGuideOptions.indentation && this._bracketPairGuideOptions.bracketPairs === false) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const scrollWidth = ctx.scrollWidth;\n        const lineHeight = this._lineHeight;\n        const activeCursorPosition = this._primaryPosition;\n        const indents = this.getGuidesByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition);\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const indent = indents[lineIndex];\n            let result = '';\n            const leftOffset = (_b = (_a = ctx.visibleRangeForPosition(new Position(lineNumber, 1))) === null || _a === void 0 ? void 0 : _a.left) !== null && _b !== void 0 ? _b : 0;\n            for (const guide of indent) {\n                const left = leftOffset + (guide.visibleColumn - 1) * this._spaceWidth;\n                if (left > scrollWidth || (this._maxIndentLeft > 0 && left > this._maxIndentLeft)) {\n                    break;\n                }\n                const className = guide.horizontalLine ? (guide.horizontalLine.top ? 'horizontal-top' : 'horizontal-bottom') : 'vertical';\n                const width = guide.horizontalLine\n                    ? ((_d = (_c = ctx.visibleRangeForPosition(new Position(lineNumber, guide.horizontalLine.endColumn))) === null || _c === void 0 ? void 0 : _c.left) !== null && _d !== void 0 ? _d : (left + this._spaceWidth)) - left\n                    : this._spaceWidth;\n                result += `<div class=\"core-guide ${guide.className} ${className}\" style=\"left:${left}px;height:${lineHeight}px;width:${width}px\"></div>`;\n            }\n            output[lineIndex] = result;\n        }\n        this._renderResult = output;\n    }\n    getGuidesByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition) {\n        const bracketGuides = this._bracketPairGuideOptions.bracketPairs !== false\n            ? this._context.viewModel.getBracketGuidesInRangeByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition, {\n                highlightActive: this._bracketPairGuideOptions.highlightActiveBracketPair,\n                horizontalGuides: this._bracketPairGuideOptions.bracketPairsHorizontal === true\n                    ? HorizontalGuidesState.Enabled\n                    : this._bracketPairGuideOptions.bracketPairsHorizontal === 'active'\n                        ? HorizontalGuidesState.EnabledForActive\n                        : HorizontalGuidesState.Disabled,\n                includeInactive: this._bracketPairGuideOptions.bracketPairs === true,\n            })\n            : null;\n        const indentGuides = this._bracketPairGuideOptions.indentation\n            ? this._context.viewModel.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber)\n            : null;\n        let activeIndentStartLineNumber = 0;\n        let activeIndentEndLineNumber = 0;\n        let activeIndentLevel = 0;\n        if (this._bracketPairGuideOptions.highlightActiveIndentation && activeCursorPosition) {\n            const activeIndentInfo = this._context.viewModel.getActiveIndentGuide(activeCursorPosition.lineNumber, visibleStartLineNumber, visibleEndLineNumber);\n            activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\n            activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\n            activeIndentLevel = activeIndentInfo.indent;\n        }\n        const { indentSize } = this._context.viewModel.model.getOptions();\n        const result = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineGuides = new Array();\n            result.push(lineGuides);\n            const bracketGuidesInLine = bracketGuides ? bracketGuides[lineNumber - visibleStartLineNumber] : [];\n            const bracketGuidesInLineQueue = new ArrayQueue(bracketGuidesInLine);\n            const indentGuidesInLine = indentGuides ? indentGuides[lineNumber - visibleStartLineNumber] : [];\n            for (let indentLvl = 1; indentLvl <= indentGuidesInLine; indentLvl++) {\n                const indentGuide = (indentLvl - 1) * indentSize + 1;\n                const isActive = \n                // Disable active indent guide if there are bracket guides.\n                bracketGuidesInLine.length === 0 &&\n                    activeIndentStartLineNumber <= lineNumber &&\n                    lineNumber <= activeIndentEndLineNumber &&\n                    indentLvl === activeIndentLevel;\n                lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => g.visibleColumn < indentGuide) || []);\n                const peeked = bracketGuidesInLineQueue.peek();\n                if (!peeked || peeked.visibleColumn !== indentGuide || peeked.horizontalLine) {\n                    lineGuides.push(new IndentGuide(indentGuide, isActive ? 'core-guide-indent-active' : 'core-guide-indent', null));\n                }\n            }\n            lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => true) || []);\n        }\n        return result;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nfunction transparentToUndefined(color) {\n    if (color && color.isTransparent()) {\n        return undefined;\n    }\n    return color;\n}\nregisterThemingParticipant((theme, collector) => {\n    const editorIndentGuidesColor = theme.getColor(editorIndentGuides);\n    if (editorIndentGuidesColor) {\n        collector.addRule(`.monaco-editor .lines-content .core-guide-indent { box-shadow: 1px 0 0 0 ${editorIndentGuidesColor} inset; }`);\n    }\n    const editorActiveIndentGuidesColor = theme.getColor(editorActiveIndentGuides) || editorIndentGuidesColor;\n    if (editorActiveIndentGuidesColor) {\n        collector.addRule(`.monaco-editor .lines-content .core-guide-indent-active { box-shadow: 1px 0 0 0 ${editorActiveIndentGuidesColor} inset; }`);\n    }\n    const colors = [\n        { bracketColor: editorBracketHighlightingForeground1, guideColor: editorBracketPairGuideBackground1, guideColorActive: editorBracketPairGuideActiveBackground1 },\n        { bracketColor: editorBracketHighlightingForeground2, guideColor: editorBracketPairGuideBackground2, guideColorActive: editorBracketPairGuideActiveBackground2 },\n        { bracketColor: editorBracketHighlightingForeground3, guideColor: editorBracketPairGuideBackground3, guideColorActive: editorBracketPairGuideActiveBackground3 },\n        { bracketColor: editorBracketHighlightingForeground4, guideColor: editorBracketPairGuideBackground4, guideColorActive: editorBracketPairGuideActiveBackground4 },\n        { bracketColor: editorBracketHighlightingForeground5, guideColor: editorBracketPairGuideBackground5, guideColorActive: editorBracketPairGuideActiveBackground5 },\n        { bracketColor: editorBracketHighlightingForeground6, guideColor: editorBracketPairGuideBackground6, guideColorActive: editorBracketPairGuideActiveBackground6 }\n    ];\n    const colorProvider = new BracketPairGuidesClassNames();\n    const colorValues = colors\n        .map(c => {\n        var _a, _b;\n        const bracketColor = theme.getColor(c.bracketColor);\n        const guideColor = theme.getColor(c.guideColor);\n        const guideColorActive = theme.getColor(c.guideColorActive);\n        const effectiveGuideColor = transparentToUndefined((_a = transparentToUndefined(guideColor)) !== null && _a !== void 0 ? _a : bracketColor === null || bracketColor === void 0 ? void 0 : bracketColor.transparent(0.3));\n        const effectiveGuideColorActive = transparentToUndefined((_b = transparentToUndefined(guideColorActive)) !== null && _b !== void 0 ? _b : bracketColor);\n        if (!effectiveGuideColor || !effectiveGuideColorActive) {\n            return undefined;\n        }\n        return {\n            guideColor: effectiveGuideColor,\n            guideColorActive: effectiveGuideColorActive,\n        };\n    })\n        .filter(isDefined);\n    if (colorValues.length > 0) {\n        for (let level = 0; level < 30; level++) {\n            const colors = colorValues[level % colorValues.length];\n            collector.addRule(`.monaco-editor .${colorProvider.getInlineClassNameOfLevel(level).replace(/ /g, '.')} { --guide-color: ${colors.guideColor}; --guide-color-active: ${colors.guideColorActive}; }`);\n        }\n        collector.addRule(`.monaco-editor .vertical { box-shadow: 1px 0 0 0 var(--guide-color) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top { border-top: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom { border-bottom: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .vertical.${colorProvider.activeClassName} { box-shadow: 1px 0 0 0 var(--guide-color-active) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top.${colorProvider.activeClassName} { border-top: 1px solid var(--guide-color-active); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom.${colorProvider.activeClassName} { border-bottom: 1px solid var(--guide-color-active); }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './viewLines.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { DomReadingContext, ViewLine, ViewLineOptions } from './viewLine.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { LineVisibleRanges, HorizontalPosition, HorizontalRange } from '../../view/renderingContext.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass LastRenderedData {\n    constructor() {\n        this._currentVisibleRange = new Range(1, 1, 1, 1);\n    }\n    getCurrentVisibleRange() {\n        return this._currentVisibleRange;\n    }\n    setCurrentVisibleRange(currentVisibleRange) {\n        this._currentVisibleRange = currentVisibleRange;\n    }\n}\nclass HorizontalRevealRangeRequest {\n    constructor(minimalReveal, lineNumber, startColumn, endColumn, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.lineNumber = lineNumber;\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'range';\n        this.minLineNumber = lineNumber;\n        this.maxLineNumber = lineNumber;\n    }\n}\nclass HorizontalRevealSelectionsRequest {\n    constructor(minimalReveal, selections, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.selections = selections;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'selections';\n        let minLineNumber = selections[0].startLineNumber;\n        let maxLineNumber = selections[0].endLineNumber;\n        for (let i = 1, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n            maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n        }\n        this.minLineNumber = minLineNumber;\n        this.maxLineNumber = maxLineNumber;\n    }\n}\nexport class ViewLines extends ViewPart {\n    constructor(context, linesContent) {\n        super(context);\n        this._linesContent = linesContent;\n        this._textRangeRestingSpot = document.createElement('div');\n        this._visibleLines = new VisibleLinesCollection(this);\n        this.domNode = this._visibleLines.domNode;\n        const conf = this._context.configuration;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(44 /* fontInfo */);\n        const wrappingInfo = options.get(132 /* wrappingInfo */);\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(89 /* revealHorizontalRightPadding */);\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._cursorSurroundingLines = options.get(25 /* cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(26 /* cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(28 /* disableLayerHinting */);\n        this._viewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        PartFingerprints.write(this.domNode, 7 /* ViewLines */);\n        this.domNode.setClassName(`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        applyFontInfo(this.domNode, fontInfo);\n        // --- width & height\n        this._maxLineWidth = 0;\n        this._asyncUpdateLineWidths = new RunOnceScheduler(() => {\n            this._updateLineWidthsSlow();\n        }, 200);\n        this._asyncCheckMonospaceFontAssumptions = new RunOnceScheduler(() => {\n            this._checkMonospaceFontAssumptions();\n        }, 2000);\n        this._lastRenderedData = new LastRenderedData();\n        this._horizontalRevealRequest = null;\n    }\n    dispose() {\n        this._asyncUpdateLineWidths.dispose();\n        this._asyncCheckMonospaceFontAssumptions.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    // ---- begin IVisibleLinesHost\n    createVisibleLine() {\n        return new ViewLine(this._viewLineOptions);\n    }\n    // ---- end IVisibleLinesHost\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        if (e.hasChanged(132 /* wrappingInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(44 /* fontInfo */);\n        const wrappingInfo = options.get(132 /* wrappingInfo */);\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(89 /* revealHorizontalRightPadding */);\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._cursorSurroundingLines = options.get(25 /* cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(26 /* cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(28 /* disableLayerHinting */);\n        applyFontInfo(this.domNode, fontInfo);\n        this._onOptionsMaybeChanged();\n        if (e.hasChanged(131 /* layoutInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        return true;\n    }\n    _onOptionsMaybeChanged() {\n        const conf = this._context.configuration;\n        const newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        if (!this._viewLineOptions.equals(newViewLineOptions)) {\n            this._viewLineOptions = newViewLineOptions;\n            const startLineNumber = this._visibleLines.getStartLineNumber();\n            const endLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n                const line = this._visibleLines.getVisibleLine(lineNumber);\n                line.onOptionsChanged(this._viewLineOptions);\n            }\n            return true;\n        }\n        return false;\n    }\n    onCursorStateChanged(e) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let r = false;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            r = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\n        }\n        return r;\n    }\n    onDecorationsChanged(e) {\n        if (true /*e.inlineDecorationsChanged*/) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\n            }\n        }\n        return true;\n    }\n    onFlushed(e) {\n        const shouldRender = this._visibleLines.onFlushed(e);\n        this._maxLineWidth = 0;\n        return shouldRender;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onRevealRangeRequest(e) {\n        // Using the future viewport here in order to handle multiple\n        // incoming reveal range requests that might all desire to be animated\n        const desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.minimalReveal, e.range, e.selections, e.verticalType);\n        if (desiredScrollTop === -1) {\n            // marker to abort the reveal range request\n            return false;\n        }\n        // validate the new desired scroll top\n        let newScrollPosition = this._context.viewLayout.validateScrollPosition({ scrollTop: desiredScrollTop });\n        if (e.revealHorizontal) {\n            if (e.range && e.range.startLineNumber !== e.range.endLineNumber) {\n                // Two or more lines? => scroll to base (That's how you see most of the two lines)\n                newScrollPosition = {\n                    scrollTop: newScrollPosition.scrollTop,\n                    scrollLeft: 0\n                };\n            }\n            else if (e.range) {\n                // We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n                this._horizontalRevealRequest = new HorizontalRevealRangeRequest(e.minimalReveal, e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n            else if (e.selections && e.selections.length > 0) {\n                this._horizontalRevealRequest = new HorizontalRevealSelectionsRequest(e.minimalReveal, e.selections, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n        }\n        else {\n            this._horizontalRevealRequest = null;\n        }\n        const scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\n        const scrollType = (scrollTopDelta <= this._lineHeight ? 1 /* Immediate */ : e.scrollType);\n        this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, scrollType);\n        return true;\n    }\n    onScrollChanged(e) {\n        if (this._horizontalRevealRequest && e.scrollLeftChanged) {\n            // cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n            this._horizontalRevealRequest = null;\n        }\n        if (this._horizontalRevealRequest && e.scrollTopChanged) {\n            const min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            const max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            if (e.scrollTop < min || e.scrollTop > max) {\n                // cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n                this._horizontalRevealRequest = null;\n            }\n        }\n        this.domNode.setWidth(e.scrollWidth);\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        return this._visibleLines.onZonesChanged(e);\n    }\n    onThemeChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    // ---- end view event handlers\n    // ----------- HELPERS FOR OTHERS\n    getPositionFromDOMInfo(spanNode, offset) {\n        const viewLineDomNode = this._getViewLineDomNode(spanNode);\n        if (viewLineDomNode === null) {\n            // Couldn't find view line node\n            return null;\n        }\n        const lineNumber = this._getLineNumberFor(viewLineDomNode);\n        if (lineNumber === -1) {\n            // Couldn't find view line node\n            return null;\n        }\n        if (lineNumber < 1 || lineNumber > this._context.viewModel.getLineCount()) {\n            // lineNumber is outside range\n            return null;\n        }\n        if (this._context.viewModel.getLineMaxColumn(lineNumber) === 1) {\n            // Line is empty\n            return new Position(lineNumber, 1);\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return null;\n        }\n        let column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(lineNumber, spanNode, offset);\n        const minColumn = this._context.viewModel.getLineMinColumn(lineNumber);\n        if (column < minColumn) {\n            column = minColumn;\n        }\n        return new Position(lineNumber, column);\n    }\n    _getViewLineDomNode(node) {\n        while (node && node.nodeType === 1) {\n            if (node.className === ViewLine.CLASS_NAME) {\n                return node;\n            }\n            node = node.parentElement;\n        }\n        return null;\n    }\n    /**\n     * @returns the line number of this view line dom node.\n     */\n    _getLineNumberFor(domNode) {\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const line = this._visibleLines.getVisibleLine(lineNumber);\n            if (domNode === line.getDomNode()) {\n                return lineNumber;\n            }\n        }\n        return -1;\n    }\n    getLineWidth(lineNumber) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return -1;\n        }\n        return this._visibleLines.getVisibleLine(lineNumber).getWidth();\n    }\n    linesVisibleRangesForRange(_range, includeNewLines) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        const originalEndLineNumber = _range.endLineNumber;\n        const range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\n        if (!range) {\n            return null;\n        }\n        let visibleRanges = [], visibleRangesLen = 0;\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        let nextLineModelLineNumber = 0;\n        if (includeNewLines) {\n            nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n            if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n                continue;\n            }\n            const startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\n            const endColumn = lineNumber === range.endLineNumber ? range.endColumn : this._context.viewModel.getLineMaxColumn(lineNumber);\n            const visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n            if (!visibleRangesForLine) {\n                continue;\n            }\n            if (includeNewLines && lineNumber < originalEndLineNumber) {\n                const currentLineModelLineNumber = nextLineModelLineNumber;\n                nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\n                if (currentLineModelLineNumber !== nextLineModelLineNumber) {\n                    visibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\n                }\n            }\n            visibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, HorizontalRange.from(visibleRangesForLine.ranges));\n        }\n        if (visibleRangesLen === 0) {\n            return null;\n        }\n        return visibleRanges;\n    }\n    _visibleRangesForLineRange(lineNumber, startColumn, endColumn) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        if (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\n            return null;\n        }\n        return this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot));\n    }\n    visibleRangeForPosition(position) {\n        const visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\n        if (!visibleRanges) {\n            return null;\n        }\n        return new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\n    }\n    // --- implementation\n    updateLineWidths() {\n        this._updateLineWidths(false);\n    }\n    /**\n     * Updates the max line width if it is fast to compute.\n     * Returns true if all lines were taken into account.\n     * Returns false if some lines need to be reevaluated (in a slow fashion).\n     */\n    _updateLineWidthsFast() {\n        return this._updateLineWidths(true);\n    }\n    _updateLineWidthsSlow() {\n        this._updateLineWidths(false);\n    }\n    _updateLineWidths(fast) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let localMaxLineWidth = 1;\n        let allWidthsComputed = true;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (fast && !visibleLine.getWidthIsFast()) {\n                // Cannot compute width in a fast way for this line\n                allWidthsComputed = false;\n                continue;\n            }\n            localMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth());\n        }\n        if (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.viewModel.getLineCount()) {\n            // we know the max line width for all the lines\n            this._maxLineWidth = 0;\n        }\n        this._ensureMaxLineWidth(localMaxLineWidth);\n        return allWidthsComputed;\n    }\n    _checkMonospaceFontAssumptions() {\n        // Problems with monospace assumptions are more apparent for longer lines,\n        // as small rounding errors start to sum up, so we will select the longest\n        // line for a closer inspection\n        let longestLineNumber = -1;\n        let longestWidth = -1;\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (visibleLine.needsMonospaceFontCheck()) {\n                const lineWidth = visibleLine.getWidth();\n                if (lineWidth > longestWidth) {\n                    longestWidth = lineWidth;\n                    longestLineNumber = lineNumber;\n                }\n            }\n        }\n        if (longestLineNumber === -1) {\n            return;\n        }\n        if (!this._visibleLines.getVisibleLine(longestLineNumber).monospaceAssumptionsAreValid()) {\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                visibleLine.onMonospaceAssumptionsInvalidated();\n            }\n        }\n    }\n    prepareRender() {\n        throw new Error('Not supported');\n    }\n    render() {\n        throw new Error('Not supported');\n    }\n    renderText(viewportData) {\n        // (1) render lines - ensures lines are in the DOM\n        this._visibleLines.renderLines(viewportData);\n        this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\n        this.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n        this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000));\n        // (2) compute horizontal scroll position:\n        //  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n        //  - it might change `scrollWidth` and `scrollLeft`\n        if (this._horizontalRevealRequest) {\n            const horizontalRevealRequest = this._horizontalRevealRequest;\n            // Check that we have the line that contains the horizontal range in the viewport\n            if (viewportData.startLineNumber <= horizontalRevealRequest.minLineNumber && horizontalRevealRequest.maxLineNumber <= viewportData.endLineNumber) {\n                this._horizontalRevealRequest = null;\n                // allow `visibleRangesForRange2` to work\n                this.onDidRender();\n                // compute new scroll position\n                const newScrollLeft = this._computeScrollLeftToReveal(horizontalRevealRequest);\n                if (newScrollLeft) {\n                    if (!this._isViewportWrapping) {\n                        // ensure `scrollWidth` is large enough\n                        this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\n                    }\n                    // set `scrollLeft`\n                    this._context.viewModel.viewLayout.setScrollPosition({\n                        scrollLeft: newScrollLeft.scrollLeft\n                    }, horizontalRevealRequest.scrollType);\n                }\n            }\n        }\n        // Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n        if (!this._updateLineWidthsFast()) {\n            // Computing the width of some lines would be slow => delay it\n            this._asyncUpdateLineWidths.schedule();\n        }\n        if (platform.isLinux && !this._asyncCheckMonospaceFontAssumptions.isScheduled()) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                if (visibleLine.needsMonospaceFontCheck()) {\n                    this._asyncCheckMonospaceFontAssumptions.schedule();\n                    break;\n                }\n            }\n        }\n        // (3) handle scrolling\n        this._linesContent.setLayerHinting(this._canUseLayerHinting);\n        this._linesContent.setContain('strict');\n        const adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\n        this._linesContent.setTop(-adjustedScrollTop);\n        this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\n    }\n    // --- width\n    _ensureMaxLineWidth(lineWidth) {\n        const iLineWidth = Math.ceil(lineWidth);\n        if (this._maxLineWidth < iLineWidth) {\n            this._maxLineWidth = iLineWidth;\n            this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        }\n    }\n    _computeScrollTopToRevealRange(viewport, source, minimalReveal, range, selections, verticalType) {\n        const viewportStartY = viewport.top;\n        const viewportHeight = viewport.height;\n        const viewportEndY = viewportStartY + viewportHeight;\n        let boxIsSingleRange;\n        let boxStartY;\n        let boxEndY;\n        if (selections && selections.length > 0) {\n            let minLineNumber = selections[0].startLineNumber;\n            let maxLineNumber = selections[0].endLineNumber;\n            for (let i = 1, len = selections.length; i < len; i++) {\n                const selection = selections[i];\n                minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n                maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n            }\n            boxIsSingleRange = false;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(minLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(maxLineNumber) + this._lineHeight;\n        }\n        else if (range) {\n            boxIsSingleRange = true;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\n        }\n        else {\n            return -1;\n        }\n        const shouldIgnoreScrollOff = (source === 'mouse' || minimalReveal) && this._cursorSurroundingLinesStyle === 'default';\n        if (!shouldIgnoreScrollOff) {\n            const context = Math.min((viewportHeight / this._lineHeight) / 2, this._cursorSurroundingLines);\n            boxStartY -= context * this._lineHeight;\n            boxEndY += Math.max(0, (context - 1)) * this._lineHeight;\n        }\n        else {\n            if (!minimalReveal) {\n                // Reveal one more line above (this case is hit when dragging)\n                boxStartY -= this._lineHeight;\n            }\n        }\n        if (verticalType === 0 /* Simple */ || verticalType === 4 /* Bottom */) {\n            // Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n            boxEndY += (minimalReveal ? this._horizontalScrollbarHeight : this._lineHeight);\n        }\n        let newScrollTop;\n        if (boxEndY - boxStartY > viewportHeight) {\n            // the box is larger than the viewport ... scroll to its top\n            if (!boxIsSingleRange) {\n                // do not reveal multiple cursors if there are more than fit the viewport\n                return -1;\n            }\n            newScrollTop = boxStartY;\n        }\n        else if (verticalType === 5 /* NearTop */ || verticalType === 6 /* NearTopIfOutsideViewport */) {\n            if (verticalType === 6 /* NearTopIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // We want a gap that is 20% of the viewport, but with a minimum of 5 lines\n                const desiredGapAbove = Math.max(5 * this._lineHeight, viewportHeight * 0.2);\n                // Try to scroll just above the box with the desired gap\n                const desiredScrollTop = boxStartY - desiredGapAbove;\n                // But ensure that the box is not pushed out of viewport\n                const minScrollTop = boxEndY - viewportHeight;\n                newScrollTop = Math.max(minScrollTop, desiredScrollTop);\n            }\n        }\n        else if (verticalType === 1 /* Center */ || verticalType === 2 /* CenterIfOutsideViewport */) {\n            if (verticalType === 2 /* CenterIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // Box is outside the viewport... center it\n                const boxMiddleY = (boxStartY + boxEndY) / 2;\n                newScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n            }\n        }\n        else {\n            newScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === 3 /* Top */, verticalType === 4 /* Bottom */);\n        }\n        return newScrollTop;\n    }\n    _computeScrollLeftToReveal(horizontalRevealRequest) {\n        const viewport = this._context.viewLayout.getCurrentViewport();\n        const viewportStartX = viewport.left;\n        const viewportEndX = viewportStartX + viewport.width;\n        let boxStartX = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n        let boxEndX = 0;\n        if (horizontalRevealRequest.type === 'range') {\n            const visibleRanges = this._visibleRangesForLineRange(horizontalRevealRequest.lineNumber, horizontalRevealRequest.startColumn, horizontalRevealRequest.endColumn);\n            if (!visibleRanges) {\n                return null;\n            }\n            for (const visibleRange of visibleRanges.ranges) {\n                boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n            }\n        }\n        else {\n            for (const selection of horizontalRevealRequest.selections) {\n                if (selection.startLineNumber !== selection.endLineNumber) {\n                    return null;\n                }\n                const visibleRanges = this._visibleRangesForLineRange(selection.startLineNumber, selection.startColumn, selection.endColumn);\n                if (!visibleRanges) {\n                    return null;\n                }\n                for (const visibleRange of visibleRanges.ranges) {\n                    boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                    boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n                }\n            }\n        }\n        if (!horizontalRevealRequest.minimalReveal) {\n            boxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n            boxEndX += this._revealHorizontalRightPadding;\n        }\n        if (horizontalRevealRequest.type === 'selections' && boxEndX - boxStartX > viewport.width) {\n            return null;\n        }\n        const newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\n        return {\n            scrollLeft: newScrollLeft,\n            maxHorizontalOffset: boxEndX\n        };\n    }\n    _computeMinimumScrolling(viewportStart, viewportEnd, boxStart, boxEnd, revealAtStart, revealAtEnd) {\n        viewportStart = viewportStart | 0;\n        viewportEnd = viewportEnd | 0;\n        boxStart = boxStart | 0;\n        boxEnd = boxEnd | 0;\n        revealAtStart = !!revealAtStart;\n        revealAtEnd = !!revealAtEnd;\n        const viewportLength = viewportEnd - viewportStart;\n        const boxLength = boxEnd - boxStart;\n        if (boxLength < viewportLength) {\n            // The box would fit in the viewport\n            if (revealAtStart) {\n                return boxStart;\n            }\n            if (revealAtEnd) {\n                return Math.max(0, boxEnd - viewportLength);\n            }\n            if (boxStart < viewportStart) {\n                // The box is above the viewport\n                return boxStart;\n            }\n            else if (boxEnd > viewportEnd) {\n                // The box is below the viewport\n                return Math.max(0, boxEnd - viewportLength);\n            }\n        }\n        else {\n            // The box would not fit in the viewport\n            // Reveal the beginning of the box\n            return boxStart;\n        }\n        return viewportStart;\n    }\n}\n/**\n * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\n */\nViewLines.HORIZONTAL_EXTRA_PX = 30;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './linesDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class LinesDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const linesDecorationsClassName = d.options.linesDecorationsClassName;\n            if (linesDecorationsClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName);\n            }\n            const firstLineDecorationClassName = d.options.firstLineDecorationClassName;\n            if (firstLineDecorationClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.startLineNumber, firstLineDecorationClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const left = this._decorationsLeft.toString();\n        const width = this._decorationsWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            let lineOutput = '';\n            for (let i = 0, len = classNames.length; i < len; i++) {\n                lineOutput += '<div class=\"cldr ' + classNames[i] + common;\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './marginDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class MarginViewLineDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const marginClassName = d.options.marginClassName;\n            if (marginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, marginClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            let lineOutput = '';\n            for (let i = 0, len = classNames.length; i < len; i++) {\n                lineOutput += '<div class=\"cmdr ' + classNames[i] + '\" style=\"\"></div>';\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const allCharCodes = (() => {\n    const v = [];\n    for (let i = 32 /* START_CH_CODE */; i <= 126 /* END_CH_CODE */; i++) {\n        v.push(i);\n    }\n    v.push(65533 /* UNKNOWN_CODE */);\n    return v;\n})();\nexport const getCharIndex = (chCode, fontScale) => {\n    chCode -= 32 /* START_CH_CODE */;\n    if (chCode < 0 || chCode > 96 /* CHAR_COUNT */) {\n        if (fontScale <= 2) {\n            // for smaller scales, we can get away with using any ASCII character...\n            return (chCode + 96 /* CHAR_COUNT */) % 96 /* CHAR_COUNT */;\n        }\n        return 96 /* CHAR_COUNT */ - 1; // unknown symbol\n    }\n    return chCode;\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getCharIndex } from './minimapCharSheet.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\nexport class MinimapCharRenderer {\n    constructor(charData, scale) {\n        this.scale = scale;\n        this._minimapCharRendererBrand = undefined;\n        this.charDataNormal = MinimapCharRenderer.soften(charData, 12 / 15);\n        this.charDataLight = MinimapCharRenderer.soften(charData, 50 / 60);\n    }\n    static soften(input, ratio) {\n        const result = new Uint8ClampedArray(input.length);\n        for (let i = 0, len = input.length; i < len; i++) {\n            result[i] = toUint8(input[i] * ratio);\n        }\n        return result;\n    }\n    renderChar(target, dx, dy, chCode, color, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight) {\n        const charWidth = 1 /* BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const charData = useLighterFont ? this.charDataLight : this.charDataNormal;\n        const charIndex = getCharIndex(chCode, fontScale);\n        const destWidth = target.width * 4 /* RGBA_CHANNELS_CNT */;\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let sourceOffset = charIndex * charWidth * charHeight;\n        let row = dy * destWidth + dx * 4 /* RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                const c = (charData[sourceOffset++] / 255) * (foregroundAlpha / 255);\n                dest[column++] = backgroundR + deltaR * c;\n                dest[column++] = backgroundG + deltaG * c;\n                dest[column++] = backgroundB + deltaB * c;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n    blockRenderChar(target, dx, dy, color, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight) {\n        const charWidth = 1 /* BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const destWidth = target.width * 4 /* RGBA_CHANNELS_CNT */;\n        const c = 0.5 * (foregroundAlpha / 255);\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const colorR = backgroundR + deltaR * c;\n        const colorG = backgroundG + deltaG * c;\n        const colorB = backgroundB + deltaB * c;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let row = dy * destWidth + dx * 4 /* RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                dest[column++] = colorR;\n                dest[column++] = colorG;\n                dest[column++] = colorB;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { once } from '../../../../base/common/functional.js';\nconst charTable = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15\n};\nconst decodeData = (str) => {\n    const output = new Uint8ClampedArray(str.length / 2);\n    for (let i = 0; i < str.length; i += 2) {\n        output[i >> 1] = (charTable[str[i]] << 4) | (charTable[str[i + 1]] & 0xF);\n    }\n    return output;\n};\n/*\nconst encodeData = (data: Uint8ClampedArray, length: string) => {\n    const chars = '0123456789ABCDEF';\n    let output = '';\n    for (let i = 0; i < data.length; i++) {\n        output += chars[data[i] >> 4] + chars[data[i] & 0xf];\n    }\n    return output;\n};\n*/\n/**\n * Map of minimap scales to prebaked sample data at those scales. We don't\n * sample much larger data, because then font family becomes visible, which\n * is use-configurable.\n */\nexport const prebakedMiniMaps = {\n    1: once(() => decodeData('0000511D6300CF609C709645A78432005642574171487021003C451900274D35D762755E8B629C5BA856AF57BA649530C167D1512A272A3F6038604460398526BCA2A968DB6F8957C768BE5FBE2FB467CF5D8D5B795DC7625B5DFF50DE64C466DB2FC47CD860A65E9A2EB96CB54CE06DA763AB2EA26860524D3763536601005116008177A8705E53AB738E6A982F88BAA35B5F5B626D9C636B449B737E5B7B678598869A662F6B5B8542706C704C80736A607578685B70594A49715A4522E792')),\n    2: once(() => decodeDatan};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MinimapCharRenderer } from './minimapCharRenderer.js';\nimport { allCharCodes } from './minimapCharSheet.js';\nimport { prebakedMiniMaps } from './minimapPreBaked.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\n/**\n * Creates character renderers. It takes a 'scale' that determines how large\n * characters should be drawn. Using this, it draws data into a canvas and\n * then downsamples the characters as necessary for the current display.\n * This makes rendering more efficient, rather than drawing a full (tiny)\n * font, or downsampling in real-time.\n */\nexport class MinimapCharRendererFactory {\n    /**\n     * Creates a new character renderer factory with the given scale.\n     */\n    static create(scale, fontFamily) {\n        // renderers are immutable. By default we'll 'create' a new minimap\n        // character renderer whenever we switch editors, no need to do extra work.\n        if (this.lastCreated && scale === this.lastCreated.scale && fontFamily === this.lastFontFamily) {\n            return this.lastCreated;\n        }\n        let factory;\n        if (prebakedMiniMaps[scale]) {\n            factory = new MinimapCharRenderer(prebakedMiniMaps[scale](), scale);\n        }\n        else {\n            factory = MinimapCharRendererFactory.createFromSampleData(MinimapCharRendererFactory.createSampleData(fontFamily).data, scale);\n        }\n        this.lastFontFamily = fontFamily;\n        this.lastCreated = factory;\n        return factory;\n    }\n    /**\n     * Creates the font sample data, writing to a canvas.\n     */\n    static createSampleData(fontFamily) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.style.height = `${16 /* SAMPLED_CHAR_HEIGHT */}px`;\n        canvas.height = 16 /* SAMPLED_CHAR_HEIGHT */;\n        canvas.width = 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */;\n        canvas.style.width = 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */ + 'px';\n        ctx.fillStyle = '#ffffff';\n        ctx.font = `bold ${16 /* SAMPLED_CHAR_HEIGHT */}px ${fontFamily}`;\n        ctx.textBaseline = 'middle';\n        let x = 0;\n        for (const code of allCharCodes) {\n            ctx.fillText(String.fromCharCode(code), x, 16 /* SAMPLED_CHAR_HEIGHT */ / 2);\n            x += 10 /* SAMPLED_CHAR_WIDTH */;\n        }\n        return ctx.getImageData(0, 0, 96 /* CHAR_COUNT */ * 10 /* SAMPLED_CHAR_WIDTH */, 16 /* SAMPLED_CHAR_HEIGHT */);\n    }\n    /**\n     * Creates a character renderer from the canvas sample data.\n     */\n    static createFromSampleData(source, scale) {\n        const expectedLength = 16 /* SAMPLED_CHAR_HEIGHT */ * 10 /* SAMPLED_CHAR_WIDTH */ * 4 /* RGBA_CHANNELS_CNT */ * 96 /* CHAR_COUNT */;\n        if (source.length !== expectedLength) {\n            throw new Error('Unexpected source in MinimapCharRenderer');\n        }\n        const charData = MinimapCharRendererFactory._downsample(source, scale);\n        return new MinimapCharRenderer(charData, scale);\n    }\n    static _downsampleChar(source, sourceOffset, dest, destOffset, scale) {\n        const width = 1 /* BASE_CHAR_WIDTH */ * scale;\n        const height = 2 /* BASE_CHAR_HEIGHT */ * scale;\n        let targetIndex = destOffset;\n        let brightest = 0;\n        // This is essentially an ad-hoc rescaling algorithm. Standard approaches\n        // like bicubic interpolation are awesome for scaling between image sizes,\n        // but don't work so well when scaling to very small pixel values, we end\n        // up with blurry, indistinct forms.\n        //\n        // The approach taken here is simply mapping each source pixel to the target\n        // pixels, and taking the weighted values for all pixels in each, and then\n        // averaging them out. Finally we apply an intensity boost in _downsample,\n        // since when scaling to the smallest pixel sizes there's more black space\n        // which causes characters to be much less distinct.\n        for (let y = 0; y < height; y++) {\n            // 1. For this destination pixel, get the source pixels we're sampling\n            // from (x1, y1) to the next pixel (x2, y2)\n            const sourceY1 = (y / height) * 16 /* SAMPLED_CHAR_HEIGHT */;\n            const sourceY2 = ((y + 1) / height) * 16 /* SAMPLED_CHAR_HEIGHT */;\n            for (let x = 0; x < width; x++) {\n                const sourceX1 = (x / width) * 10 /* SAMPLED_CHAR_WIDTH */;\n                const sourceX2 = ((x + 1) / width) * 10 /* SAMPLED_CHAR_WIDTH */;\n                // 2. Sample all of them, summing them up and weighting them. Similar\n                // to bilinear interpolation.\n                let value = 0;\n                let samples = 0;\n                for (let sy = sourceY1; sy < sourceY2; sy++) {\n                    const sourceRow = sourceOffset + Math.floor(sy) * 3840 /* RGBA_SAMPLED_ROW_WIDTH */;\n                    const yBalance = 1 - (sy - Math.floor(sy));\n                    for (let sx = sourceX1; sx < sourceX2; sx++) {\n                        const xBalance = 1 - (sx - Math.floor(sx));\n                        const sourceIndex = sourceRow + Math.floor(sx) * 4 /* RGBA_CHANNELS_CNT */;\n                        const weight = xBalance * yBalance;\n                        samples += weight;\n                        value += ((source[sourceIndex] * source[sourceIndex + 3]) / 255) * weight;\n                    }\n                }\n                const final = value / samples;\n                brightest = Math.max(brightest, final);\n                dest[targetIndex++] = toUint8(final);\n            }\n        }\n        return brightest;\n    }\n    static _downsample(data, scale) {\n        const pixelsPerCharacter = 2 /* BASE_CHAR_HEIGHT */ * scale * 1 /* BASE_CHAR_WIDTH */ * scale;\n        const resultLen = pixelsPerCharacter * 96 /* CHAR_COUNT */;\n        const result = new Uint8ClampedArray(resultLen);\n        let resultOffset = 0;\n        let sourceOffset = 0;\n        let brightest = 0;\n        for (let charIndex = 0; charIndex < 96 /* CHAR_COUNT */; charIndex++) {\n            brightest = Math.max(brightest, this._downsampleChar(data, sourceOffset, result, resultOffset, scale));\n            resultOffset += pixelsPerCharacter;\n            sourceOffset += 10 /* SAMPLED_CHAR_WIDTH */ * 4 /* RGBA_CHANNELS_CNT */;\n        }\n        if (brightest > 0) {\n            const adjust = 255 / brightest;\n            for (let i = 0; i < resultLen; i++) {\n                result[i] *= adjust;\n            }\n        }\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './minimap.css';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { GlobalMouseMoveMonitor, standardMouseMoveMerger } from '../../../../base/browser/globalMouseMoveMonitor.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { RenderedLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { MINIMAP_GUTTER_WIDTH, EditorLayoutInfoComputer } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { RGBA8 } from '../../../common/core/rgba.js';\nimport { MinimapTokensColorTracker } from '../../../common/viewModel/minimapTokensColorTracker.js';\nimport { ViewModelDecoration } from '../../../common/viewModel.js';\nimport { minimapSelection, scrollbarShadow, minimapBackground, minimapSliderBackground, minimapSliderHoverBackground, minimapSliderActiveBackground, minimapForegroundOpacity } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EventType, Gesture } from '../../../../base/browser/touch.js';\nimport { MinimapCharRendererFactory } from './minimapCharRendererFactory.js';\nimport { MinimapPosition } from '../../../common/model.js';\nimport { once } from '../../../../base/common/functional.js';\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nconst MOUSE_DRAG_RESET_DISTANCE = 140;\nconst GUTTER_DECORATION_WIDTH = 2;\nclass MinimapOptions {\n    constructor(configuration, theme, tokensColorTracker) {\n        const options = configuration.options;\n        const pixelRatio = options.get(129 /* pixelRatio */);\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        const minimapLayout = layoutInfo.minimap;\n        const fontInfo = options.get(44 /* fontInfo */);\n        const minimapOpts = options.get(65 /* minimap */);\n        this.renderMinimap = minimapLayout.renderMinimap;\n        this.size = minimapOpts.size;\n        this.minimapHeightIsEditorHeight = minimapLayout.minimapHeightIsEditorHeight;\n        this.scrollBeyondLastLine = options.get(94 /* scrollBeyondLastLine */);\n        this.showSlider = minimapOpts.showSlider;\n        this.pixelRatio = pixelRatio;\n        this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this.lineHeight = options.get(59 /* lineHeight */);\n        this.minimapLeft = minimapLayout.minimapLeft;\n        this.minimapWidth = minimapLayout.minimapWidth;\n        this.minimapHeight = layoutInfo.height;\n        this.canvasInnerWidth = minimapLayout.minimapCanvasInnerWidth;\n        this.canvasInnerHeight = minimapLayout.minimapCanvasInnerHeight;\n        this.canvasOuterWidth = minimapLayout.minimapCanvasOuterWidth;\n        this.canvasOuterHeight = minimapLayout.minimapCanvasOuterHeight;\n        this.isSampling = minimapLayout.minimapIsSampling;\n        this.editorHeight = layoutInfo.height;\n        this.fontScale = minimapLayout.minimapScale;\n        this.minimapLineHeight = minimapLayout.minimapLineHeight;\n        this.minimapCharWidth = 1 /* BASE_CHAR_WIDTH */ * this.fontScale;\n        this.charRenderer = once(() => MinimapCharRendererFactory.create(this.fontScale, fontInfo.fontFamily));\n        this.defaultBackgroundColor = tokensColorTracker.getColor(2 /* DefaultBackground */);\n        this.backgroundColor = MinimapOptions._getMinimapBackground(theme, this.defaultBackgroundColor);\n        this.foregroundAlpha = MinimapOptions._getMinimapForegroundOpacity(theme);\n    }\n    static _getMinimapBackground(theme, defaultBackgroundColor) {\n        const themeColor = theme.getColor(minimapBackground);\n        if (themeColor) {\n            return new RGBA8(themeColor.rgba.r, themeColor.rgba.g, themeColor.rgba.b, Math.round(255 * themeColor.rgba.a));\n        }\n        return defaultBackgroundColor;\n    }\n    static _getMinimapForegroundOpacity(theme) {\n        const themeColor = theme.getColor(minimapForegroundOpacity);\n        if (themeColor) {\n            return RGBA8._clamp(Math.round(255 * themeColor.rgba.a));\n        }\n        return 255;\n    }\n    equals(other) {\n        return (this.renderMinimap === other.renderMinimap\n            && this.size === other.size\n            && this.minimapHeightIsEditorHeight === other.minimapHeightIsEditorHeight\n            && this.scrollBeyondLastLine === other.scrollBeyondLastLine\n            && this.showSlider === other.showSlider\n            && this.pixelRatio === other.pixelRatio\n            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n            && this.lineHeight === other.lineHeight\n            && this.minimapLeft === other.minimapLeft\n            && this.minimapWidth === other.minimapWidth\n            && this.minimapHeight === other.minimapHeight\n            && this.canvasInnerWidth === other.canvasInnerWidth\n            && this.canvasInnerHeight === other.canvasInnerHeight\n            && this.canvasOuterWidth === other.canvasOuterWidth\n            && this.canvasOuterHeight === other.canvasOuterHeight\n            && this.isSampling === other.isSampling\n            && this.editorHeight === other.editorHeight\n            && this.fontScale === other.fontScale\n            && this.minimapLineHeight === other.minimapLineHeight\n            && this.minimapCharWidth === other.minimapCharWidth\n            && this.defaultBackgroundColor && this.defaultBackgroundColor.equals(other.defaultBackgroundColor)\n            && this.backgroundColor && this.backgroundColor.equals(other.backgroundColor)\n            && this.foregroundAlpha === other.foregroundAlpha);\n    }\n}\nclass MinimapLayout {\n    constructor(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, startLineNumber, endLineNumber) {\n        this.scrollTop = scrollTop;\n        this.scrollHeight = scrollHeight;\n        this.sliderNeeded = sliderNeeded;\n        this._computedSliderRatio = computedSliderRatio;\n        this.sliderTop = sliderTop;\n        this.sliderHeight = sliderHeight;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n    }\n    /**\n     * Compute a desired `scrollPosition` such that the slider moves by `delta`.\n     */\n    getDesiredScrollTopFromDelta(delta) {\n        return Math.round(this.scrollTop + delta / this._computedSliderRatio);\n    }\n    getDesiredScrollTopFromTouchLocation(pageY) {\n        return Math.round((pageY - this.sliderHeight / 2) / this._computedSliderRatio);\n    }\n    static create(options, viewportStartLineNumber, viewportEndLineNumber, viewportStartLineNumberVerticalOffset, viewportHeight, viewportContainsWhitespaceGaps, lineCount, realLineCount, scrollTop, scrollHeight, previousLayout) {\n        const pixelRatio = options.pixelRatio;\n        const minimapLineHeight = options.minimapLineHeight;\n        const minimapLinesFitting = Math.floor(options.canvasInnerHeight / minimapLineHeight);\n        const lineHeight = options.lineHeight;\n        if (options.minimapHeightIsEditorHeight) {\n            const logicalScrollHeight = (realLineCount * options.lineHeight\n                + (options.scrollBeyondLastLine ? viewportHeight - options.lineHeight : 0));\n            const sliderHeight = Math.max(1, Math.floor(viewportHeight * viewportHeight / logicalScrollHeight));\n            const maxMinimapSliderTop = Math.max(0, options.minimapHeight - sliderHeight);\n            // The slider can move from 0 to `maxMinimapSliderTop`\n            // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n            const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n            const sliderTop = (scrollTop * computedSliderRatio);\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            const maxLinesFitting = Math.floor(options.canvasInnerHeight / options.minimapLineHeight);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, 1, Math.min(lineCount, maxLinesFitting));\n        }\n        // The visible line count in a viewport can change due to a number of reasons:\n        //  a) with the same viewport width, different scroll positions can result in partial lines being visible:\n        //    e.g. for a line height of 20, and a viewport height of 600\n        //          * scrollTop = 0  => visible lines are [1, 30]\n        //          * scrollTop = 10 => visible lines are [1, 31] (with lines 1 and 31 partially visible)\n        //          * scrollTop = 20 => visible lines are [2, 31]\n        //  b) whitespace gaps might make their way in the viewport (which results in a decrease in the visible line count)\n        //  c) we could be in the scroll beyond last line case (which also results in a decrease in the visible line count, down to possibly only one line being visible)\n        // We must first establish a desirable slider height.\n        let sliderHeight;\n        if (viewportContainsWhitespaceGaps && viewportEndLineNumber !== lineCount) {\n            // case b) from above: there are whitespace gaps in the viewport.\n            // In this case, the height of the slider directly reflects the visible line count.\n            const viewportLineCount = viewportEndLineNumber - viewportStartLineNumber + 1;\n            sliderHeight = Math.floor(viewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        else {\n            // The slider has a stable height\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            sliderHeight = Math.floor(expectedViewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        let maxMinimapSliderTop;\n        if (options.scrollBeyondLastLine) {\n            // The minimap slider, when dragged all the way down, will contain the last line at its top\n            maxMinimapSliderTop = (lineCount - 1) * minimapLineHeight / pixelRatio;\n        }\n        else {\n            // The minimap slider, when dragged all the way down, will contain the last line at its bottom\n            maxMinimapSliderTop = Math.max(0, lineCount * minimapLineHeight / pixelRatio - sliderHeight);\n        }\n        maxMinimapSliderTop = Math.min(options.minimapHeight - sliderHeight, maxMinimapSliderTop);\n        // The slider can move from 0 to `maxMinimapSliderTop`\n        // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n        const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n        const sliderTop = (scrollTop * computedSliderRatio);\n        let extraLinesAtTheBottom = 0;\n        if (options.scrollBeyondLastLine) {\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            extraLinesAtTheBottom = expectedViewportLineCount - 1;\n        }\n        if (minimapLinesFitting >= lineCount + extraLinesAtTheBottom) {\n            // All lines fit in the minimap\n            const startLineNumber = 1;\n            const endLineNumber = lineCount;\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, startLineNumber, endLineNumber);\n        }\n        else {\n            let startLineNumber = Math.max(1, Math.floor(viewportStartLineNumber - sliderTop * pixelRatio / minimapLineHeight));\n            // Avoid flickering caused by a partial viewport start line\n            // by being consistent w.r.t. the previous layout decision\n            if (previousLayout && previousLayout.scrollHeight === scrollHeight) {\n                if (previousLayout.scrollTop > scrollTop) {\n                    // Scrolling up => never increase `startLineNumber`\n                    startLineNumber = Math.min(startLineNumber, previousLayout.startLineNumber);\n                }\n                if (previousLayout.scrollTop < scrollTop) {\n                    // Scrolling down => never decrease `startLineNumber`\n                    startLineNumber = Math.max(startLineNumber, previousLayout.startLineNumber);\n                }\n            }\n            const endLineNumber = Math.min(lineCount, startLineNumber + minimapLinesFitting - 1);\n            const partialLine = (scrollTop - viewportStartLineNumberVerticalOffset) / lineHeight;\n            const sliderTopAligned = (viewportStartLineNumber - startLineNumber + partialLine) * minimapLineHeight / pixelRatio;\n            return new MinimapLayout(scrollTop, scrollHeight, true, computedSliderRatio, sliderTopAligned, sliderHeight, startLineNumber, endLineNumber);\n        }\n    }\n}\nclass MinimapLine {\n    constructor(dy) {\n        this.dy = dy;\n    }\n    onContentChanged() {\n        this.dy = -1;\n    }\n    onTokensChanged() {\n        this.dy = -1;\n    }\n}\nMinimapLine.INVALID = new MinimapLine(-1);\nclass RenderData {\n    constructor(renderedLayout, imageData, lines) {\n        this.renderedLayout = renderedLayout;\n        this._imageData = imageData;\n        this._renderedLines = new RenderedLinesCollection(() => MinimapLine.INVALID);\n        this._renderedLines._set(renderedLayout.startLineNumber, lines);\n    }\n    /**\n     * Check if the current RenderData matches accurately the new desired layout and no painting is needed.\n     */\n    linesEquals(layout) {\n        if (!this.scrollEquals(layout)) {\n            return false;\n        }\n        const tmp = this._renderedLines._get();\n        const lines = tmp.lines;\n        for (let i = 0, len = lines.length; i < len; i++) {\n            if (lines[i].dy === -1) {\n                // This line is invalid\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Check if the current RenderData matches the new layout's scroll position\n     */\n    scrollEquals(layout) {\n        return this.renderedLayout.startLineNumber === layout.startLineNumber\n            && this.renderedLayout.endLineNumber === layout.endLineNumber;\n    }\n    _get() {\n        const tmp = this._renderedLines._get();\n        return {\n            imageData: this._imageData,\n            rendLineNumberStart: tmp.rendLineNumberStart,\n            lines: tmp.lines\n        };\n    }\n    onLinesChanged(changeFromLineNumber, changeToLineNumber) {\n        return this._renderedLines.onLinesChanged(changeFromLineNumber, changeToLineNumber);\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        this._renderedLines.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        this._renderedLines.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n    }\n    onTokensChanged(ranges) {\n        return this._renderedLines.onTokensChanged(ranges);\n    }\n}\n/**\n * Some sort of double buffering.\n *\n * Keeps two buffers around that will be rotated for painting.\n * Always gives a buffer that is filled with the background color.\n */\nclass MinimapBuffers {\n    constructor(ctx, WIDTH, HEIGHT, background) {\n        this._backgroundFillData = MinimapBuffers._createBackgroundFillData(WIDTH, HEIGHT, background);\n        this._buffers = [\n            ctx.createImageData(WIDTH, HEIGHT),\n            ctx.createImageData(WIDTH, HEIGHT)\n        ];\n        this._lastUsedBuffer = 0;\n    }\n    getBuffer() {\n        // rotate buffers\n        this._lastUsedBuffer = 1 - this._lastUsedBuffer;\n        const result = this._buffers[this._lastUsedBuffer];\n        // fill with background color\n        result.data.set(this._backgroundFillData);\n        return result;\n    }\n    static _createBackgroundFillData(WIDTH, HEIGHT, background) {\n        const backgroundR = background.r;\n        const backgroundG = background.g;\n        const backgroundB = background.b;\n        const backgroundA = background.a;\n        const result = new Uint8ClampedArray(WIDTH * HEIGHT * 4);\n        let offset = 0;\n        for (let i = 0; i < HEIGHT; i++) {\n            for (let j = 0; j < WIDTH; j++) {\n                result[offset] = backgroundR;\n                result[offset + 1] = backgroundG;\n                result[offset + 2] = backgroundB;\n                result[offset + 3] = backgroundA;\n                offset += 4;\n            }\n        }\n        return result;\n    }\n}\nclass MinimapSamplingState {\n    constructor(samplingRatio, minimapLines) {\n        this.samplingRatio = samplingRatio;\n        this.minimapLines = minimapLines;\n    }\n    static compute(options, viewLineCount, oldSamplingState) {\n        if (options.renderMinimap === 0 /* None */ || !options.isSampling) {\n            return [null, []];\n        }\n        // ratio is intentionally not part of the layout to avoid the layout changing all the time\n        // so we need to recompute it again...\n        const pixelRatio = options.pixelRatio;\n        const lineHeight = options.lineHeight;\n        const scrollBeyondLastLine = options.scrollBeyondLastLine;\n        const { minimapLineCount } = EditorLayoutInfoComputer.computeContainedMinimapLineCount({\n            viewLineCount: viewLineCount,\n            scrollBeyondLastLine: scrollBeyondLastLine,\n            height: options.editorHeight,\n            lineHeight: lineHeight,\n            pixelRatio: pixelRatio\n        });\n        const ratio = viewLineCount / minimapLineCount;\n        const halfRatio = ratio / 2;\n        if (!oldSamplingState || oldSamplingState.minimapLines.length === 0) {\n            const result = [];\n            result[0] = 1;\n            if (minimapLineCount > 1) {\n                for (let i = 0, lastIndex = minimapLineCount - 1; i < lastIndex; i++) {\n                    result[i] = Math.round(i * ratio + halfRatio);\n                }\n                result[minimapLineCount - 1] = viewLineCount;\n            }\n            return [new MinimapSamplingState(ratio, result), []];\n        }\n        const oldMinimapLines = oldSamplingState.minimapLines;\n        const oldLength = oldMinimapLines.length;\n        const result = [];\n        let oldIndex = 0;\n        let oldDeltaLineCount = 0;\n        let minViewLineNumber = 1;\n        const MAX_EVENT_COUNT = 10; // generate at most 10 events, if there are more than 10 changes, just flush all previous data\n        let events = [];\n        let lastEvent = null;\n        for (let i = 0; i < minimapLineCount; i++) {\n            const fromViewLineNumber = Math.max(minViewLineNumber, Math.round(i * ratio));\n            const toViewLineNumber = Math.max(fromViewLineNumber, Math.round((i + 1) * ratio));\n            while (oldIndex < oldLength && oldMinimapLines[oldIndex] < fromViewLineNumber) {\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                        lastEvent.deleteToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount--;\n                }\n                oldIndex++;\n            }\n            let selectedViewLineNumber;\n            if (oldIndex < oldLength && oldMinimapLines[oldIndex] <= toViewLineNumber) {\n                // reuse the old sampled line\n                selectedViewLineNumber = oldMinimapLines[oldIndex];\n                oldIndex++;\n            }\n            else {\n                if (i === 0) {\n                    selectedViewLineNumber = 1;\n                }\n                else if (i + 1 === minimapLineCount) {\n                    selectedViewLineNumber = viewLineCount;\n                }\n                else {\n                    selectedViewLineNumber = Math.round(i * ratio + halfRatio);\n                }\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'inserted' && lastEvent._i === i - 1) {\n                        lastEvent.insertToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'inserted', _i: i, insertFromLineNumber: oldMinimapLineNumber, insertToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount++;\n                }\n            }\n            result[i] = selectedViewLineNumber;\n            minViewLineNumber = selectedViewLineNumber;\n        }\n        if (events.length < MAX_EVENT_COUNT) {\n            while (oldIndex < oldLength) {\n                const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                    lastEvent.deleteToLineNumber++;\n                }\n                else {\n                    lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                    events.push(lastEvent);\n                }\n                oldDeltaLineCount--;\n                oldIndex++;\n            }\n        }\n        else {\n            // too many events, just give up\n            events = [{ type: 'flush' }];\n        }\n        return [new MinimapSamplingState(ratio, result), events];\n    }\n    modelLineToMinimapLine(lineNumber) {\n        return Math.min(this.minimapLines.length, Math.max(1, Math.round(lineNumber / this.samplingRatio)));\n    }\n    /**\n     * Will return null if the model line ranges are not intersecting with a sampled model line.\n     */\n    modelLineRangeToMinimapLineRange(fromLineNumber, toLineNumber) {\n        let fromLineIndex = this.modelLineToMinimapLine(fromLineNumber) - 1;\n        while (fromLineIndex > 0 && this.minimapLines[fromLineIndex - 1] >= fromLineNumber) {\n            fromLineIndex--;\n        }\n        let toLineIndex = this.modelLineToMinimapLine(toLineNumber) - 1;\n        while (toLineIndex + 1 < this.minimapLines.length && this.minimapLines[toLineIndex + 1] <= toLineNumber) {\n            toLineIndex++;\n        }\n        if (fromLineIndex === toLineIndex) {\n            const sampledLineNumber = this.minimapLines[fromLineIndex];\n            if (sampledLineNumber < fromLineNumber || sampledLineNumber > toLineNumber) {\n                // This line is not part of the sampled lines ==> nothing to do\n                return null;\n            }\n        }\n        return [fromLineIndex + 1, toLineIndex + 1];\n    }\n    /**\n     * Will always return a range, even if it is not intersecting with a sampled model line.\n     */\n    decorationLineRangeToMinimapLineRange(startLineNumber, endLineNumber) {\n        let minimapLineStart = this.modelLineToMinimapLine(startLineNumber);\n        let minimapLineEnd = this.modelLineToMinimapLine(endLineNumber);\n        if (startLineNumber !== endLineNumber && minimapLineEnd === minimapLineStart) {\n            if (minimapLineEnd === this.minimapLines.length) {\n                if (minimapLineStart > 1) {\n                    minimapLineStart--;\n                }\n            }\n            else {\n                minimapLineEnd++;\n            }\n        }\n        return [minimapLineStart, minimapLineEnd];\n    }\n    onLinesDeleted(e) {\n        // have the mapping be sticky\n        const deletedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        let changeStartIndex = this.minimapLines.length;\n        let changeEndIndex = 0;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            if (this.minimapLines[i] <= e.toLineNumber) {\n                // this line got deleted => move to previous available\n                this.minimapLines[i] = Math.max(1, e.fromLineNumber - 1);\n                changeStartIndex = Math.min(changeStartIndex, i);\n                changeEndIndex = Math.max(changeEndIndex, i);\n            }\n            else {\n                this.minimapLines[i] -= deletedLineCount;\n            }\n        }\n        return [changeStartIndex, changeEndIndex];\n    }\n    onLinesInserted(e) {\n        // have the mapping be sticky\n        const insertedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            this.minimapLines[i] += insertedLineCount;\n        }\n    }\n}\nexport class Minimap extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.tokensColorTracker = MinimapTokensColorTracker.getInstance();\n        this._selections = [];\n        this._minimapSelections = null;\n        this.options = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        const [samplingState,] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), null);\n        this._samplingState = samplingState;\n        this._shouldCheckSampling = false;\n        this._actual = new InnerMinimap(context.theme, this);\n    }\n    dispose() {\n        this._actual.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this._actual.getDomNode();\n    }\n    _onOptionsMaybeChanged() {\n        const opts = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        if (this.options.equals(opts)) {\n            return false;\n        }\n        this.options = opts;\n        this._recreateLineSampling();\n        this._actual.onDidChangeOptions();\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        this._minimapSelections = null;\n        return this._actual.onSelectionChanged();\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsMinimap) {\n            return this._actual.onDecorationsChanged();\n        }\n        return false;\n    }\n    onFlushed(e) {\n        if (this._samplingState) {\n            this._shouldCheckSampling = true;\n        }\n        return this._actual.onFlushed();\n    }\n    onLinesChanged(e) {\n        if (this._samplingState) {\n            const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(e.fromLineNumber, e.toLineNumber);\n            if (minimapLineRange) {\n                return this._actual.onLinesChanged(minimapLineRange[0], minimapLineRange[1]);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onLinesChanged(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onLinesDeleted(e) {\n        if (this._samplingState) {\n            const [changeStartIndex, changeEndIndex] = this._samplingState.onLinesDeleted(e);\n            if (changeStartIndex <= changeEndIndex) {\n                this._actual.onLinesChanged(changeStartIndex + 1, changeEndIndex + 1);\n            }\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onLinesInserted(e) {\n        if (this._samplingState) {\n            this._samplingState.onLinesInserted(e);\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onScrollChanged(e) {\n        return this._actual.onScrollChanged();\n    }\n    onThemeChanged(e) {\n        this._actual.onThemeChanged();\n        this._onOptionsMaybeChanged();\n        return true;\n    }\n    onTokensChanged(e) {\n        if (this._samplingState) {\n            const ranges = [];\n            for (const range of e.ranges) {\n                const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(range.fromLineNumber, range.toLineNumber);\n                if (minimapLineRange) {\n                    ranges.push({ fromLineNumber: minimapLineRange[0], toLineNumber: minimapLineRange[1] });\n                }\n            }\n            if (ranges.length) {\n                return this._actual.onTokensChanged(ranges);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onTokensChanged(e.ranges);\n        }\n    }\n    onTokensColorsChanged(e) {\n        this._onOptionsMaybeChanged();\n        return this._actual.onTokensColorsChanged();\n    }\n    onZonesChanged(e) {\n        return this._actual.onZonesChanged();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._shouldCheckSampling) {\n            this._shouldCheckSampling = false;\n            this._recreateLineSampling();\n        }\n    }\n    render(ctx) {\n        let viewportStartLineNumber = ctx.visibleRange.startLineNumber;\n        let viewportEndLineNumber = ctx.visibleRange.endLineNumber;\n        if (this._samplingState) {\n            viewportStartLineNumber = this._samplingState.modelLineToMinimapLine(viewportStartLineNumber);\n            viewportEndLineNumber = this._samplingState.modelLineToMinimapLine(viewportEndLineNumber);\n        }\n        const minimapCtx = {\n            viewportContainsWhitespaceGaps: (ctx.viewportData.whitespaceViewportData.length > 0),\n            scrollWidth: ctx.scrollWidth,\n            scrollHeight: ctx.scrollHeight,\n            viewportStartLineNumber: viewportStartLineNumber,\n            viewportEndLineNumber: viewportEndLineNumber,\n            viewportStartLineNumberVerticalOffset: ctx.getVerticalOffsetForLineNumber(viewportStartLineNumber),\n            scrollTop: ctx.scrollTop,\n            scrollLeft: ctx.scrollLeft,\n            viewportWidth: ctx.viewportWidth,\n            viewportHeight: ctx.viewportHeight,\n        };\n        this._actual.render(minimapCtx);\n    }\n    //#region IMinimapModel\n    _recreateLineSampling() {\n        this._minimapSelections = null;\n        const wasSampling = Boolean(this._samplingState);\n        const [samplingState, events] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), this._samplingState);\n        this._samplingState = samplingState;\n        if (wasSampling && this._samplingState) {\n            // was sampling, is sampling\n            for (const event of events) {\n                switch (event.type) {\n                    case 'deleted':\n                        this._actual.onLinesDeleted(event.deleteFromLineNumber, event.deleteToLineNumber);\n                        break;\n                    case 'inserted':\n                        this._actual.onLinesInserted(event.insertFromLineNumber, event.insertToLineNumber);\n                        break;\n                    case 'flush':\n                        this._actual.onFlushed();\n                        break;\n                }\n            }\n        }\n    }\n    getLineCount() {\n        if (this._samplingState) {\n            return this._samplingState.minimapLines.length;\n        }\n        return this._context.viewModel.getLineCount();\n    }\n    getRealLineCount() {\n        return this._context.viewModel.getLineCount();\n    }\n    getLineContent(lineNumber) {\n        if (this._samplingState) {\n            return this._context.viewModel.getLineContent(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.viewModel.getLineContent(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        if (this._samplingState) {\n            return this._context.viewModel.getLineMaxColumn(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.viewModel.getLineMaxColumn(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        if (this._samplingState) {\n            const result = [];\n            for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n                if (needed[lineIndex]) {\n                    result[lineIndex] = this._context.viewModel.getViewLineData(this._samplingState.minimapLines[startLineNumber + lineIndex - 1]);\n                }\n                else {\n                    result[lineIndex] = null;\n                }\n            }\n            return result;\n        }\n        return this._context.viewModel.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed).data;\n    }\n    getSelections() {\n        if (this._minimapSelections === null) {\n            if (this._samplingState) {\n                this._minimapSelections = [];\n                for (const selection of this._selections) {\n                    const [minimapLineStart, minimapLineEnd] = this._samplingState.decorationLineRangeToMinimapLineRange(selection.startLineNumber, selection.endLineNumber);\n                    this._minimapSelections.push(new Selection(minimapLineStart, selection.startColumn, minimapLineEnd, selection.endColumn));\n                }\n            }\n            else {\n                this._minimapSelections = this._selections;\n            }\n        }\n        return this._minimapSelections;\n    }\n    getMinimapDecorationsInViewport(startLineNumber, endLineNumber) {\n        let visibleRange;\n        if (this._samplingState) {\n            const modelStartLineNumber = this._samplingState.minimapLines[startLineNumber - 1];\n            const modelEndLineNumber = this._samplingState.minimapLines[endLineNumber - 1];\n            visibleRange = new Range(modelStartLineNumber, 1, modelEndLineNumber, this._context.viewModel.getLineMaxColumn(modelEndLineNumber));\n        }\n        else {\n            visibleRange = new Range(startLineNumber, 1, endLineNumber, this._context.viewModel.getLineMaxColumn(endLineNumber));\n        }\n        const decorations = this._context.viewModel.getDecorationsInViewport(visibleRange);\n        if (this._samplingState) {\n            const result = [];\n            for (const decoration of decorations) {\n                if (!decoration.options.minimap) {\n                    continue;\n                }\n                const range = decoration.range;\n                const minimapStartLineNumber = this._samplingState.modelLineToMinimapLine(range.startLineNumber);\n                const minimapEndLineNumber = this._samplingState.modelLineToMinimapLine(range.endLineNumber);\n                result.push(new ViewModelDecoration(new Range(minimapStartLineNumber, range.startColumn, minimapEndLineNumber, range.endColumn), decoration.options));\n            }\n            return result;\n        }\n        return decorations;\n    }\n    getOptions() {\n        return this._context.viewModel.model.getOptions();\n    }\n    revealLineNumber(lineNumber) {\n        if (this._samplingState) {\n            lineNumber = this._samplingState.minimapLines[lineNumber - 1];\n        }\n        this._context.viewModel.revealRange('mouse', false, new Range(lineNumber, 1, lineNumber, 1), 1 /* Center */, 0 /* Smooth */);\n    }\n    setScrollTop(scrollTop) {\n        this._context.viewModel.viewLayout.setScrollPosition({\n            scrollTop: scrollTop\n        }, 1 /* Immediate */);\n    }\n}\nclass InnerMinimap extends Disposable {\n    constructor(theme, model) {\n        super();\n        this._renderDecorations = false;\n        this._gestureInProgress = false;\n        this._theme = theme;\n        this._model = model;\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 8 /* Minimap */);\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._shadow = createFastDomNode(document.createElement('div'));\n        this._shadow.setClassName('minimap-shadow-hidden');\n        this._domNode.appendChild(this._shadow);\n        this._canvas = createFastDomNode(document.createElement('canvas'));\n        this._canvas.setPosition('absolute');\n        this._canvas.setLeft(0);\n        this._domNode.appendChild(this._canvas);\n        this._decorationsCanvas = createFastDomNode(document.createElement('canvas'));\n        this._decorationsCanvas.setPosition('absolute');\n        this._decorationsCanvas.setClassName('minimap-decorations-layer');\n        this._decorationsCanvas.setLeft(0);\n        this._domNode.appendChild(this._decorationsCanvas);\n        this._slider = createFastDomNode(document.createElement('div'));\n        this._slider.setPosition('absolute');\n        this._slider.setClassName('minimap-slider');\n        this._slider.setLayerHinting(true);\n        this._slider.setContain('strict');\n        this._domNode.appendChild(this._slider);\n        this._sliderHorizontal = createFastDomNode(document.createElement('div'));\n        this._sliderHorizontal.setPosition('absolute');\n        this._sliderHorizontal.setClassName('minimap-slider-horizontal');\n        this._slider.appendChild(this._sliderHorizontal);\n        this._applyLayout();\n        this._mouseDownListener = dom.addStandardDisposableListener(this._domNode.domNode, 'mousedown', (e) => {\n            e.preventDefault();\n            const renderMinimap = this._model.options.renderMinimap;\n            if (renderMinimap === 0 /* None */) {\n                return;\n            }\n            if (!this._lastRenderData) {\n                return;\n            }\n            if (this._model.options.size !== 'proportional') {\n                if (e.leftButton && this._lastRenderData) {\n                    // pretend the click occurred in the center of the slider\n                    const position = dom.getDomNodePagePosition(this._slider.domNode);\n                    const initialPosY = position.top + position.height / 2;\n                    this._startSliderDragging(e.buttons, e.posx, initialPosY, e.posy, this._lastRenderData.renderedLayout);\n                }\n                return;\n            }\n            const minimapLineHeight = this._model.options.minimapLineHeight;\n            const internalOffsetY = (this._model.options.canvasInnerHeight / this._model.options.canvasOuterHeight) * e.browserEvent.offsetY;\n            const lineIndex = Math.floor(internalOffsetY / minimapLineHeight);\n            let lineNumber = lineIndex + this._lastRenderData.renderedLayout.startLineNumber;\n            lineNumber = Math.min(lineNumber, this._model.getLineCount());\n            this._model.revealLineNumber(lineNumber);\n        });\n        this._sliderMouseMoveMonitor = new GlobalMouseMoveMonitor();\n        this._sliderMouseDownListener = dom.addStandardDisposableListener(this._slider.domNode, 'mousedown', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (e.leftButton && this._lastRenderData) {\n                this._startSliderDragging(e.buttons, e.posx, e.posy, e.posy, this._lastRenderData.renderedLayout);\n            }\n        });\n        this._gestureDisposable = Gesture.addTarget(this._domNode.domNode);\n        this._sliderTouchStartListener = dom.addDisposableListener(this._domNode.domNode, EventType.Start, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData) {\n                this._slider.toggleClassName('active', true);\n                this._gestureInProgress = true;\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchMoveListener = dom.addDisposableListener(this._domNode.domNode, EventType.Change, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData && this._gestureInProgress) {\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchEndListener = dom.addStandardDisposableListener(this._domNode.domNode, EventType.End, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            this._gestureInProgress = false;\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    _startSliderDragging(initialButtons, initialPosX, initialPosY, posy, initialSliderState) {\n        this._slider.toggleClassName('active', true);\n        const handleMouseMove = (posy, posx) => {\n            const mouseOrthogonalDelta = Math.abs(posx - initialPosX);\n            if (platform.isWindows && mouseOrthogonalDelta > MOUSE_DRAG_RESET_DISTANCE) {\n                // The mouse has wondered away from the scrollbar => reset dragging\n                this._model.setScrollTop(initialSliderState.scrollTop);\n                return;\n            }\n            const mouseDelta = posy - initialPosY;\n            this._model.setScrollTop(initialSliderState.getDesiredScrollTopFromDelta(mouseDelta));\n        };\n        if (posy !== initialPosY) {\n            handleMouseMove(posy, initialPosX);\n        }\n        this._sliderMouseMoveMonitor.startMonitoring(this._slider.domNode, initialButtons, standardMouseMoveMerger, (mouseMoveData) => handleMouseMove(mouseMoveData.posy, mouseMoveData.posx), () => {\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    scrollDueToTouchEvent(touch) {\n        const startY = this._domNode.domNode.getBoundingClientRect().top;\n        const scrollTop = this._lastRenderData.renderedLayout.getDesiredScrollTopFromTouchLocation(touch.pageY - startY);\n        this._model.setScrollTop(scrollTop);\n    }\n    dispose() {\n        this._mouseDownListener.dispose();\n        this._sliderMouseMoveMonitor.dispose();\n        this._sliderMouseDownListener.dispose();\n        this._gestureDisposable.dispose();\n        this._sliderTouchStartListener.dispose();\n        this._sliderTouchMoveListener.dispose();\n        this._sliderTouchEndListener.dispose();\n        super.dispose();\n    }\n    _getMinimapDomNodeClassName() {\n        if (this._model.options.showSlider === 'always') {\n            return 'minimap slider-always';\n        }\n        return 'minimap slider-mouseover';\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _applyLayout() {\n        this._domNode.setLeft(this._model.options.minimapLeft);\n        this._domNode.setWidth(this._model.options.minimapWidth);\n        this._domNode.setHeight(this._model.options.minimapHeight);\n        this._shadow.setHeight(this._model.options.minimapHeight);\n        this._canvas.setWidth(this._model.options.canvasOuterWidth);\n        this._canvas.setHeight(this._model.options.canvasOuterHeight);\n        this._canvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._canvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._decorationsCanvas.setWidth(this._model.options.canvasOuterWidth);\n        this._decorationsCanvas.setHeight(this._model.options.canvasOuterHeight);\n        this._decorationsCanvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._decorationsCanvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._slider.setWidth(this._model.options.minimapWidth);\n    }\n    _getBuffer() {\n        if (!this._buffers) {\n            if (this._model.options.canvasInnerWidth > 0 && this._model.options.canvasInnerHeight > 0) {\n                this._buffers = new MinimapBuffers(this._canvas.domNode.getContext('2d'), this._model.options.canvasInnerWidth, this._model.options.canvasInnerHeight, this._model.options.backgroundColor);\n            }\n        }\n        return this._buffers ? this._buffers.getBuffer() : null;\n    }\n    // ---- begin view event handlers\n    onDidChangeOptions() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._applyLayout();\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n    }\n    onSelectionChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onDecorationsChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onFlushed() {\n        this._lastRenderData = null;\n        return true;\n    }\n    onLinesChanged(changeFromLineNumber, changeToLineNumber) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onLinesChanged(changeFromLineNumber, changeToLineNumber);\n        }\n        return false;\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        if (this._lastRenderData) {\n            this._lastRenderData.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n        }\n        return true;\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        if (this._lastRenderData) {\n            this._lastRenderData.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n        }\n        return true;\n    }\n    onScrollChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onThemeChanged() {\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._renderDecorations = true;\n        return true;\n    }\n    onTokensChanged(ranges) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onTokensChanged(ranges);\n        }\n        return false;\n    }\n    onTokensColorsChanged() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        return true;\n    }\n    onZonesChanged() {\n        this._lastRenderData = null;\n        return true;\n    }\n    // --- end event handlers\n    render(renderingCtx) {\n        const renderMinimap = this._model.options.renderMinimap;\n        if (renderMinimap === 0 /* None */) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n            this._sliderHorizontal.setWidth(0);\n            this._sliderHorizontal.setHeight(0);\n            return;\n        }\n        if (renderingCtx.scrollLeft + renderingCtx.viewportWidth >= renderingCtx.scrollWidth) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n        }\n        else {\n            this._shadow.setClassName('minimap-shadow-visible');\n        }\n        const layout = MinimapLayout.create(this._model.options, renderingCtx.viewportStartLineNumber, renderingCtx.viewportEndLineNumber, renderingCtx.viewportStartLineNumberVerticalOffset, renderingCtx.viewportHeight, renderingCtx.viewportContainsWhitespaceGaps, this._model.getLineCount(), this._model.getRealLineCount(), renderingCtx.scrollTop, renderingCtx.scrollHeight, this._lastRenderData ? this._lastRenderData.renderedLayout : null);\n        this._slider.setDisplay(layout.sliderNeeded ? 'block' : 'none');\n        this._slider.setTop(layout.sliderTop);\n        this._slider.setHeight(layout.sliderHeight);\n        // Compute horizontal slider coordinates\n        this._sliderHorizontal.setLeft(0);\n        this._sliderHorizontal.setWidth(this._model.options.minimapWidth);\n        this._sliderHorizontal.setTop(0);\n        this._sliderHorizontal.setHeight(layout.sliderHeight);\n        this.renderDecorations(layout);\n        this._lastRenderData = this.renderLines(layout);\n    }\n    renderDecorations(layout) {\n        if (this._renderDecorations) {\n            this._renderDecorations = false;\n            const selections = this._model.getSelections();\n            selections.sort(Range.compareRangesUsingStarts);\n            const decorations = this._model.getMinimapDecorationsInViewport(layout.startLineNumber, layout.endLineNumber);\n            decorations.sort((a, b) => (a.options.zIndex || 0) - (b.options.zIndex || 0));\n            const { canvasInnerWidth, canvasInnerHeight } = this._model.options;\n            const lineHeight = this._model.options.minimapLineHeight;\n            const characterWidth = this._model.options.minimapCharWidth;\n            const tabSize = this._model.getOptions().tabSize;\n            const canvasContext = this._decorationsCanvas.domNode.getContext('2d');\n            canvasContext.clearRect(0, 0, canvasInnerWidth, canvasInnerHeight);\n            // We first need to render line highlights and then render decorations on top of those.\n            // But we need to pick a single color for each line, and use that as a line highlight.\n            // This needs to be the color of the decoration with the highest `zIndex`, but priority\n            // is given to the selection.\n            const highlightedLines = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, false);\n            this._renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, lineHeight);\n            this._renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, lineHeight);\n            const lineOffsetMap = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, null);\n            this._renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n            this._renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n        }\n    }\n    _renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, lineHeight) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        canvasContext.fillStyle = this._selectionColor.transparent(0.5).toString();\n        let y1 = 0;\n        let y2 = 0;\n        for (const selection of selections) {\n            const startLineNumber = Math.max(layout.startLineNumber, selection.startLineNumber);\n            const endLineNumber = Math.min(layout.endLineNumber, selection.endLineNumber);\n            if (startLineNumber > endLineNumber) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                highlightedLines.set(line, true);\n            }\n            const yy1 = (startLineNumber - layout.startLineNumber) * lineHeight;\n            const yy2 = (endLineNumber - layout.startLineNumber) * lineHeight + lineHeight;\n            if (y2 >= yy1) {\n                // merge into previous\n                y2 = yy2;\n            }\n            else {\n                if (y2 > y1) {\n                    // flush\n                    canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n                }\n                y1 = yy1;\n                y2 = yy2;\n            }\n        }\n        if (y2 > y1) {\n            // flush\n            canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n        }\n    }\n    _renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, lineHeight) {\n        const highlightColors = new Map();\n        // Loop backwards to hit first decorations with higher `zIndex`\n        for (let i = decorations.length - 1; i >= 0; i--) {\n            const decoration = decorations[i];\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions || minimapOptions.position !== MinimapPosition.Inline) {\n                continue;\n            }\n            const startLineNumber = Math.max(layout.startLineNumber, decoration.range.startLineNumber);\n            const endLineNumber = Math.min(layout.endLineNumber, decoration.range.endLineNumber);\n            if (startLineNumber > endLineNumber) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            let highlightColor = highlightColors.get(decorationColor.toString());\n            if (!highlightColor) {\n                highlightColor = decorationColor.transparent(0.5).toString();\n                highlightColors.set(decorationColor.toString(), highlightColor);\n            }\n            canvasContext.fillStyle = highlightColor;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                if (highlightedLines.has(line)) {\n                    continue;\n                }\n                highlightedLines.set(line, true);\n                const y = (startLineNumber - layout.startLineNumber) * lineHeight;\n                canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y, canvasContext.canvas.width, lineHeight);\n            }\n        }\n    }\n    _renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        for (const selection of selections) {\n            const startLineNumber = Math.max(layout.startLineNumber, selection.startLineNumber);\n            const endLineNumber = Math.min(layout.endLineNumber, selection.endLineNumber);\n            if (startLineNumber > endLineNumber) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                this.renderDecorationOnLine(canvasContext, lineOffsetMap, selection, this._selectionColor, layout, line, lineHeight, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n            }\n        }\n    }\n    _renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        // Loop forwards to hit first decorations with lower `zIndex`\n        for (const decoration of decorations) {\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions) {\n                continue;\n            }\n            const startLineNumber = Math.max(layout.startLineNumber, decoration.range.startLineNumber);\n            const endLineNumber = Math.min(layout.endLineNumber, decoration.range.endLineNumber);\n            if (startLineNumber > endLineNumber) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                switch (minimapOptions.position) {\n                    case MinimapPosition.Inline:\n                        this.renderDecorationOnLine(canvasContext, lineOffsetMap, decoration.range, decorationColor, layout, line, lineHeight, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n                        continue;\n                    case MinimapPosition.Gutter: {\n                        const y = (line - layout.startLineNumber) * lineHeight;\n                        const x = 2;\n                        this.renderDecoration(canvasContext, decorationColor, x, y, GUTTER_DECORATION_WIDTH, lineHeight);\n                        continue;\n                    }\n                }\n            }\n        }\n    }\n    renderDecorationOnLine(canvasContext, lineOffsetMap, decorationRange, decorationColor, layout, lineNumber, height, lineHeight, tabSize, charWidth, canvasInnerWidth) {\n        const y = (lineNumber - layout.startLineNumber) * lineHeight;\n        // Skip rendering the line if it's vertically outside our viewport\n        if (y + height < 0 || y > this._model.options.canvasInnerHeight) {\n            return;\n        }\n        const { startLineNumber, endLineNumber } = decorationRange;\n        const startColumn = (startLineNumber === lineNumber ? decorationRange.startColumn : 1);\n        const endColumn = (endLineNumber === lineNumber ? decorationRange.endColumn : this._model.getLineMaxColumn(lineNumber));\n        const x1 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, startColumn, tabSize, charWidth, canvasInnerWidth);\n        const x2 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, endColumn, tabSize, charWidth, canvasInnerWidth);\n        this.renderDecoration(canvasContext, decorationColor, x1, y, x2 - x1, height);\n    }\n    getXOffsetForPosition(lineOffsetMap, lineNumber, column, tabSize, charWidth, canvasInnerWidth) {\n        if (column === 1) {\n            return MINIMAP_GUTTER_WIDTH;\n        }\n        const minimumXOffset = (column - 1) * charWidth;\n        if (minimumXOffset >= canvasInnerWidth) {\n            // there is no need to look at actual characters,\n            // as this column is certainly after the minimap width\n            return canvasInnerWidth;\n        }\n        // Cache line offset data so that it is only read once per line\n        let lineIndexToXOffset = lineOffsetMap.get(lineNumber);\n        if (!lineIndexToXOffset) {\n            const lineData = this._model.getLineContent(lineNumber);\n            lineIndexToXOffset = [MINIMAP_GUTTER_WIDTH];\n            let prevx = MINIMAP_GUTTER_WIDTH;\n            for (let i = 1; i < lineData.length + 1; i++) {\n                const charCode = lineData.charCodeAt(i - 1);\n                const dx = charCode === 9 /* Tab */\n                    ? tabSize * charWidth\n                    : strings.isFullWidthCharacter(charCode)\n                        ? 2 * charWidth\n                        : charWidth;\n                const x = prevx + dx;\n                if (x >= canvasInnerWidth) {\n                    // no need to keep on going, as we've hit the canvas width\n                    lineIndexToXOffset[i] = canvasInnerWidth;\n                    break;\n                }\n                lineIndexToXOffset[i] = x;\n                prevx = x;\n            }\n            lineOffsetMap.set(lineNumber, lineIndexToXOffset);\n        }\n        if (column - 1 < lineIndexToXOffset.length) {\n            return lineIndexToXOffset[column - 1];\n        }\n        // goes over the canvas width\n        return canvasInnerWidth;\n    }\n    renderDecoration(canvasContext, decorationColor, x, y, width, height) {\n        canvasContext.fillStyle = decorationColor && decorationColor.toString() || '';\n        canvasContext.fillRect(x, y, width, height);\n    }\n    renderLines(layout) {\n        const startLineNumber = layout.startLineNumber;\n        const endLineNumber = layout.endLineNumber;\n        const minimapLineHeight = this._model.options.minimapLineHeight;\n        // Check if nothing changed w.r.t. lines from last frame\n        if (this._lastRenderData && this._lastRenderData.linesEquals(layout)) {\n            const _lastData = this._lastRenderData._get();\n            // Nice!! Nothing changed from last frame\n            return new RenderData(layout, _lastData.imageData, _lastData.lines);\n        }\n        // Oh well!! We need to repaint some lines...\n        const imageData = this._getBuffer();\n        if (!imageData) {\n            // 0 width or 0 height canvas, nothing to do\n            return null;\n        }\n        // Render untouched lines by using last rendered data.\n        const [_dirtyY1, _dirtyY2, needed] = InnerMinimap._renderUntouchedLines(imageData, startLineNumber, endLineNumber, minimapLineHeight, this._lastRenderData);\n        // Fetch rendering info from view model for rest of lines that need rendering.\n        const lineInfo = this._model.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed);\n        const tabSize = this._model.getOptions().tabSize;\n        const defaultBackground = this._model.options.defaultBackgroundColor;\n        const background = this._model.options.backgroundColor;\n        const foregroundAlpha = this._model.options.foregroundAlpha;\n        const tokensColorTracker = this._model.tokensColorTracker;\n        const useLighterFont = tokensColorTracker.backgroundIsLight();\n        const renderMinimap = this._model.options.renderMinimap;\n        const charRenderer = this._model.options.charRenderer();\n        const fontScale = this._model.options.fontScale;\n        const minimapCharWidth = this._model.options.minimapCharWidth;\n        const baseCharHeight = (renderMinimap === 1 /* Text */ ? 2 /* BASE_CHAR_HEIGHT */ : 2 /* BASE_CHAR_HEIGHT */ + 1);\n        const renderMinimapLineHeight = baseCharHeight * fontScale;\n        const innerLinePadding = (minimapLineHeight > renderMinimapLineHeight ? Math.floor((minimapLineHeight - renderMinimapLineHeight) / 2) : 0);\n        // Render the rest of lines\n        const backgroundA = background.a / 255;\n        const renderBackground = new RGBA8(Math.round((background.r - defaultBackground.r) * backgroundA + defaultBackground.r), Math.round((background.g - defaultBackground.g) * backgroundA + defaultBackground.g), Math.round((background.b - defaultBackground.b) * backgroundA + defaultBackground.b), 255);\n        let dy = 0;\n        const renderedLines = [];\n        for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n            if (needed[lineIndex]) {\n                InnerMinimap._renderLine(imageData, renderBackground, background.a, useLighterFont, renderMinimap, minimapCharWidth, tokensColorTracker, foregroundAlpha, charRenderer, dy, innerLinePadding, tabSize, lineInfo[lineIndex], fontScale, minimapLineHeight);\n            }\n            renderedLines[lineIndex] = new MinimapLine(dy);\n            dy += minimapLineHeight;\n        }\n        const dirtyY1 = (_dirtyY1 === -1 ? 0 : _dirtyY1);\n        const dirtyY2 = (_dirtyY2 === -1 ? imageData.height : _dirtyY2);\n        const dirtyHeight = dirtyY2 - dirtyY1;\n        // Finally, paint to the canvas\n        const ctx = this._canvas.domNode.getContext('2d');\n        ctx.putImageData(imageData, 0, 0, 0, dirtyY1, imageData.width, dirtyHeight);\n        // Save rendered data for reuse on next frame if possible\n        return new RenderData(layout, imageData, renderedLines);\n    }\n    static _renderUntouchedLines(target, startLineNumber, endLineNumber, minimapLineHeight, lastRenderData) {\n        const needed = [];\n        if (!lastRenderData) {\n            for (let i = 0, len = endLineNumber - startLineNumber + 1; i < len; i++) {\n                needed[i] = true;\n            }\n            return [-1, -1, needed];\n        }\n        const _lastData = lastRenderData._get();\n        const lastTargetData = _lastData.imageData.data;\n        const lastStartLineNumber = _lastData.rendLineNumberStart;\n        const lastLines = _lastData.lines;\n        const lastLinesLength = lastLines.length;\n        const WIDTH = target.width;\n        const targetData = target.data;\n        const maxDestPixel = (endLineNumber - startLineNumber + 1) * minimapLineHeight * WIDTH * 4;\n        let dirtyPixel1 = -1; // the pixel offset up to which all the data is equal to the prev frame\n        let dirtyPixel2 = -1; // the pixel offset after which all the data is equal to the prev frame\n        let copySourceStart = -1;\n        let copySourceEnd = -1;\n        let copyDestStart = -1;\n        let copyDestEnd = -1;\n        let dest_dy = 0;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - startLineNumber;\n            const lastLineIndex = lineNumber - lastStartLineNumber;\n            const source_dy = (lastLineIndex >= 0 && lastLineIndex < lastLinesLength ? lastLines[lastLineIndex].dy : -1);\n            if (source_dy === -1) {\n                needed[lineIndex] = true;\n                dest_dy += minimapLineHeight;\n                continue;\n            }\n            const sourceStart = source_dy * WIDTH * 4;\n            const sourceEnd = (source_dy + minimapLineHeight) * WIDTH * 4;\n            const destStart = dest_dy * WIDTH * 4;\n            const destEnd = (dest_dy + minimapLineHeight) * WIDTH * 4;\n            if (copySourceEnd === sourceStart && copyDestEnd === destStart) {\n                // contiguous zone => extend copy request\n                copySourceEnd = sourceEnd;\n                copyDestEnd = destEnd;\n            }\n            else {\n                if (copySourceStart !== -1) {\n                    // flush existing copy request\n                    targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n                    if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                        dirtyPixel1 = copySourceEnd;\n                    }\n                    if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                        dirtyPixel2 = copySourceStart;\n                    }\n                }\n                copySourceStart = sourceStart;\n                copySourceEnd = sourceEnd;\n                copyDestStart = destStart;\n                copyDestEnd = destEnd;\n            }\n            needed[lineIndex] = false;\n            dest_dy += minimapLineHeight;\n        }\n        if (copySourceStart !== -1) {\n            // flush existing copy request\n            targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n            if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                dirtyPixel1 = copySourceEnd;\n            }\n            if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                dirtyPixel2 = copySourceStart;\n            }\n        }\n        const dirtyY1 = (dirtyPixel1 === -1 ? -1 : dirtyPixel1 / (WIDTH * 4));\n        const dirtyY2 = (dirtyPixel2 === -1 ? -1 : dirtyPixel2 / (WIDTH * 4));\n        return [dirtyY1, dirtyY2, needed];\n    }\n    static _renderLine(target, backgroundColor, backgroundAlpha, useLighterFont, renderMinimap, charWidth, colorTracker, foregroundAlpha, minimapCharRenderer, dy, innerLinePadding, tabSize, lineData, fontScale, minimapLineHeight) {\n        const content = lineData.content;\n        const tokens = lineData.tokens;\n        const maxDx = target.width - charWidth;\n        const force1pxHeight = (minimapLineHeight === 1);\n        let dx = MINIMAP_GUTTER_WIDTH;\n        let charIndex = 0;\n        let tabsCharDelta = 0;\n        for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n            const tokenEndIndex = tokens.getEndOffset(tokenIndex);\n            const tokenColorId = tokens.getForeground(tokenIndex);\n            const tokenColor = colorTracker.getColor(tokenColorId);\n            for (; charIndex < tokenEndIndex; charIndex++) {\n                if (dx > maxDx) {\n                    // hit edge of minimap\n                    return;\n                }\n                const charCode = content.charCodeAt(charIndex);\n                if (charCode === 9 /* Tab */) {\n                    const insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n                    tabsCharDelta += insertSpacesCount - 1;\n                    // No need to render anything since tab is invisible\n                    dx += insertSpacesCount * charWidth;\n                }\n                else if (charCode === 32 /* Space */) {\n                    // No need to render anything since space is invisible\n                    dx += charWidth;\n                }\n                else {\n                    // Render twice for a full width character\n                    const count = strings.isFullWidthCharacter(charCode) ? 2 : 1;\n                    for (let i = 0; i < count; i++) {\n                        if (renderMinimap === 2 /* Blocks */) {\n                            minimapCharRenderer.blockRenderChar(target, dx, dy + innerLinePadding, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight);\n                        }\n                        else { // RenderMinimap.Text\n                            minimapCharRenderer.renderChar(target, dx, dy + innerLinePadding, charCode, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight);\n                        }\n                        dx += charWidth;\n                        if (dx > maxDx) {\n                            // hit edge of minimap\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nclass ContiguousLineMap {\n    constructor(startLineNumber, endLineNumber, defaultValue) {\n        this._startLineNumber = startLineNumber;\n        this._endLineNumber = endLineNumber;\n        this._defaultValue = defaultValue;\n        this._values = [];\n        for (let i = 0, count = this._endLineNumber - this._startLineNumber + 1; i < count; i++) {\n            this._values[i] = defaultValue;\n        }\n    }\n    has(lineNumber) {\n        return (this.get(lineNumber) !== this._defaultValue);\n    }\n    set(lineNumber, value) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return;\n        }\n        this._values[lineNumber - this._startLineNumber] = value;\n    }\n    get(lineNumber) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return this._defaultValue;\n        }\n        return this._values[lineNumber - this._startLineNumber];\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const sliderBackground = theme.getColor(minimapSliderBackground);\n    if (sliderBackground) {\n        collector.addRule(`.monaco-editor .minimap-slider .minimap-slider-horizontal { background: ${sliderBackground}; }`);\n    }\n    const sliderHoverBackground = theme.getColor(minimapSliderHoverBackground);\n    if (sliderHoverBackground) {\n        collector.addRule(`.monaco-editor .minimap-slider:hover .minimap-slider-horizontal { background: ${sliderHoverBackground}; }`);\n    }\n    const sliderActiveBackground = theme.getColor(minimapSliderActiveBackground);\n    if (sliderActiveBackground) {\n        collector.addRule(`.monaco-editor .minimap-slider.active .minimap-slider-horizontal { background: ${sliderActiveBackground}; }`);\n    }\n    const shadow = theme.getColor(scrollbarShadow);\n    if (shadow) {\n        collector.addRule(`.monaco-editor .minimap-shadow-visible { box-shadow: ${shadow} -6px 0 6px -6px inset; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './overlayWidgets.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewOverlayWidgets extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._widgets = {};\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 4 /* OverlayWidgets */);\n        this._domNode.setClassName('overlayWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        return true;\n    }\n    // ---- end view event handlers\n    addWidget(widget) {\n        const domNode = createFastDomNode(widget.getDomNode());\n        this._widgets[widget.getId()] = {\n            widget: widget,\n            preference: null,\n            domNode: domNode\n        };\n        // This is sync because a widget wants to be in the dom\n        domNode.setPosition('absolute');\n        domNode.setAttribute('widgetId', widget.getId());\n        this._domNode.appendChild(domNode);\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, preference) {\n        const widgetData = this._widgets[widget.getId()];\n        if (widgetData.preference === preference) {\n            return false;\n        }\n        widgetData.preference = preference;\n        this.setShouldRender();\n        return true;\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._widgets[widgetId];\n            const domNode = widgetData.domNode.domNode;\n            delete this._widgets[widgetId];\n            domNode.parentNode.removeChild(domNode);\n            this.setShouldRender();\n        }\n    }\n    _renderWidget(widgetData) {\n        const domNode = widgetData.domNode;\n        if (widgetData.preference === null) {\n            domNode.unsetTop();\n            return;\n        }\n        if (widgetData.preference === 0 /* TOP_RIGHT_CORNER */) {\n            domNode.setTop(0);\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 1 /* BOTTOM_RIGHT_CORNER */) {\n            const widgetHeight = domNode.domNode.clientHeight;\n            domNode.setTop((this._editorHeight - widgetHeight - 2 * this._horizontalScrollbarHeight));\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 2 /* TOP_CENTER */) {\n            domNode.setTop(0);\n            domNode.domNode.style.right = '50%';\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._editorWidth);\n        const keys = Object.keys(this._widgets);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const widgetId = keys[i];\n            this._renderWidget(this._widgets[widgetId]);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';\nclass Settings {\n    constructor(config, theme) {\n        const options = config.options;\n        this.lineHeight = options.get(59 /* lineHeight */);\n        this.pixelRatio = options.get(129 /* pixelRatio */);\n        this.overviewRulerLanes = options.get(74 /* overviewRulerLanes */);\n        this.renderBorder = options.get(73 /* overviewRulerBorder */);\n        const borderColor = theme.getColor(editorOverviewRulerBorder);\n        this.borderColor = borderColor ? borderColor.toString() : null;\n        this.hideCursor = options.get(52 /* hideCursorInOverviewRuler */);\n        const cursorColor = theme.getColor(editorCursorForeground);\n        this.cursorColor = cursorColor ? cursorColor.transparent(0.7).toString() : null;\n        this.themeType = theme.type;\n        const minimapOpts = options.get(65 /* minimap */);\n        const minimapEnabled = minimapOpts.enabled;\n        const minimapSide = minimapOpts.side;\n        const backgroundColor = minimapEnabled\n            ? theme.getColor(editorOverviewRulerBackground) || TokenizationRegistry.getDefaultBackground()\n            : null;\n        if (backgroundColor === null || minimapSide === 'left') {\n            this.backgroundColor = null;\n        }\n        else {\n            this.backgroundColor = Color.Format.CSS.formatHex(backgroundColor);\n        }\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        const position = layoutInfo.overviewRuler;\n        this.top = position.top;\n        this.right = position.right;\n        this.domWidth = position.width;\n        this.domHeight = position.height;\n        if (this.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this.canvasWidth = 0;\n            this.canvasHeight = 0;\n        }\n        else {\n            this.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n            this.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n        }\n        const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n        this.x = x;\n        this.w = w;\n    }\n    _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n        const remainingWidth = canvasWidth - canvasLeftOffset;\n        if (laneCount >= 3) {\n            const leftWidth = Math.floor(remainingWidth / 3);\n            const rightWidth = Math.floor(remainingWidth / 3);\n            const centerWidth = remainingWidth - leftWidth - rightWidth;\n            const leftOffset = canvasLeftOffset;\n            const centerOffset = leftOffset + leftWidth;\n            const rightOffset = leftOffset + leftWidth + centerWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth,\n                    centerWidth,\n                    leftWidth + centerWidth,\n                    rightWidth,\n                    leftWidth + centerWidth + rightWidth,\n                    centerWidth + rightWidth,\n                    leftWidth + centerWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else if (laneCount === 2) {\n            const leftWidth = Math.floor(remainingWidth / 2);\n            const rightWidth = remainingWidth - leftWidth;\n            const leftOffset = canvasLeftOffset;\n            const rightOffset = leftOffset + leftWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth,\n                    leftWidth,\n                    leftWidth,\n                    rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else {\n            const offset = canvasLeftOffset;\n            const width = remainingWidth;\n            return [\n                [\n                    0,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset, // Left | Center | Right\n                ], [\n                    0,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width, // Left | Center | Right\n                ]\n            ];\n        }\n    }\n    equals(other) {\n        return (this.lineHeight === other.lineHeight\n            && this.pixelRatio === other.pixelRatio\n            && this.overviewRulerLanes === other.overviewRulerLanes\n            && this.renderBorder === other.renderBorder\n            && this.borderColor === other.borderColor\n            && this.hideCursor === other.hideCursor\n            && this.cursorColor === other.cursorColor\n            && this.themeType === other.themeType\n            && this.backgroundColor === other.backgroundColor\n            && this.top === other.top\n            && this.right === other.right\n            && this.domWidth === other.domWidth\n            && this.domHeight === other.domHeight\n            && this.canvasWidth === other.canvasWidth\n            && this.canvasHeight === other.canvasHeight);\n    }\n}\nexport class DecorationsOverviewRuler extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName('decorationsOverviewRuler');\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateSettings(false);\n        this._tokensColorTrackerListener = TokenizationRegistry.onDidChange((e) => {\n            if (e.changedColorMap) {\n                this._updateSettings(true);\n            }\n        });\n        this._cursorPositions = [];\n    }\n    dispose() {\n        super.dispose();\n        this._tokensColorTrackerListener.dispose();\n    }\n    _updateSettings(renderNow) {\n        const newSettings = new Settings(this._context.configuration, this._context.theme);\n        if (this._settings && this._settings.equals(newSettings)) {\n            // nothing to do\n            return false;\n        }\n        this._settings = newSettings;\n        this._domNode.setTop(this._settings.top);\n        this._domNode.setRight(this._settings.right);\n        this._domNode.setWidth(this._settings.domWidth);\n        this._domNode.setHeight(this._settings.domHeight);\n        this._domNode.domNode.width = this._settings.canvasWidth;\n        this._domNode.domNode.height = this._settings.canvasHeight;\n        if (renderNow) {\n            this._render();\n        }\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._updateSettings(false);\n    }\n    onCursorStateChanged(e) {\n        this._cursorPositions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            this._cursorPositions[i] = e.selections[i].getPosition();\n        }\n        this._cursorPositions.sort(Position.compare);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsOverviewRuler) {\n            return true;\n        }\n        return false;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        return this._updateSettings(false);\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(editorCtx) {\n        this._render();\n    }\n    _render() {\n        if (this._settings.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this._domNode.setBackgroundColor(this._settings.backgroundColor ? this._settings.backgroundColor : '');\n            this._domNode.setDisplay('none');\n            return;\n        }\n        this._domNode.setDisplay('block');\n        const canvasWidth = this._settings.canvasWidth;\n        const canvasHeight = this._settings.canvasHeight;\n        const lineHeight = this._settings.lineHeight;\n        const viewLayout = this._context.viewLayout;\n        const outerHeight = this._context.viewLayout.getScrollHeight();\n        const heightRatio = canvasHeight / outerHeight;\n        const decorations = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);\n        const minDecorationHeight = (6 /* MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio) | 0;\n        const halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n        const canvasCtx = this._domNode.domNode.getContext('2d');\n        if (this._settings.backgroundColor === null) {\n            canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        }\n        else {\n            canvasCtx.fillStyle = this._settings.backgroundColor;\n            canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n        }\n        const x = this._settings.x;\n        const w = this._settings.w;\n        decorations.sort(OverviewRulerDecorationsGroup.cmp);\n        for (const decorationGroup of decorations) {\n            const color = decorationGroup.color;\n            const decorationGroupData = decorationGroup.data;\n            canvasCtx.fillStyle = color;\n            let prevLane = 0;\n            let prevY1 = 0;\n            let prevY2 = 0;\n            for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n                const lane = decorationGroupData[3 * i];\n                const startLineNumber = decorationGroupData[3 * i + 1];\n                const endLineNumber = decorationGroupData[3 * i + 2];\n                let y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n                let y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n                const height = y2 - y1;\n                if (height < minDecorationHeight) {\n                    let yCenter = ((y1 + y2) / 2) | 0;\n                    if (yCenter < halfMinDecorationHeight) {\n                        yCenter = halfMinDecorationHeight;\n                    }\n                    else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n                        yCenter = canvasHeight - halfMinDecorationHeight;\n                    }\n                    y1 = yCenter - halfMinDecorationHeight;\n                    y2 = yCenter + halfMinDecorationHeight;\n                }\n                if (y1 > prevY2 + 1 || lane !== prevLane) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n                    }\n                    prevLane = lane;\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n        }\n        // Draw cursors\n        if (!this._settings.hideCursor && this._settings.cursorColor) {\n            const cursorHeight = (2 * this._settings.pixelRatio) | 0;\n            const halfCursorHeight = (cursorHeight / 2) | 0;\n            const cursorX = this._settings.x[7 /* Full */];\n            const cursorW = this._settings.w[7 /* Full */];\n            canvasCtx.fillStyle = this._settings.cursorColor;\n            let prevY1 = -100;\n            let prevY2 = -100;\n            for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n                const cursor = this._cursorPositions[i];\n                let yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n                if (yCenter < halfCursorHeight) {\n                    yCenter = halfCursorHeight;\n                }\n                else if (yCenter + halfCursorHeight > canvasHeight) {\n                    yCenter = canvasHeight - halfCursorHeight;\n                }\n                const y1 = yCenter - halfCursorHeight;\n                const y2 = y1 + cursorHeight;\n                if (y1 > prevY2 + 1) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n                    }\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n        }\n        if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n            canvasCtx.beginPath();\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = this._settings.borderColor;\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(0, canvasHeight);\n            canvasCtx.stroke();\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(canvasWidth, 0);\n            canvasCtx.stroke();\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { OverviewZoneManager } from '../../../common/viewModel/overviewZoneManager.js';\nimport { ViewEventHandler } from '../../../common/viewEventHandler.js';\nexport class OverviewRuler extends ViewEventHandler {\n    constructor(context, cssClassName) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName(cssClassName);\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._zoneManager = new OverviewZoneManager((lineNumber) => this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber));\n        this._zoneManager.setDOMWidth(0);\n        this._zoneManager.setDOMHeight(0);\n        this._zoneManager.setOuterHeight(this._context.viewLayout.getScrollHeight());\n        this._zoneManager.setLineHeight(options.get(59 /* lineHeight */));\n        this._zoneManager.setPixelRatio(options.get(129 /* pixelRatio */));\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        if (e.hasChanged(59 /* lineHeight */)) {\n            this._zoneManager.setLineHeight(options.get(59 /* lineHeight */));\n            this._render();\n        }\n        if (e.hasChanged(129 /* pixelRatio */)) {\n            this._zoneManager.setPixelRatio(options.get(129 /* pixelRatio */));\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n        return true;\n    }\n    onFlushed(e) {\n        this._render();\n        return true;\n    }\n    onScrollChanged(e) {\n        if (e.scrollHeightChanged) {\n            this._zoneManager.setOuterHeight(e.scrollHeight);\n            this._render();\n        }\n        return true;\n    }\n    onZonesChanged(e) {\n        this._render();\n        return true;\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    setLayout(position) {\n        this._domNode.setTop(position.top);\n        this._domNode.setRight(position.right);\n        let hasChanged = false;\n        hasChanged = this._zoneManager.setDOMWidth(position.width) || hasChanged;\n        hasChanged = this._zoneManager.setDOMHeight(position.height) || hasChanged;\n        if (hasChanged) {\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n    }\n    setZones(zones) {\n        this._zoneManager.setZones(zones);\n        this._render();\n    }\n    _render() {\n        if (this._zoneManager.getOuterHeight() === 0) {\n            return false;\n        }\n        const width = this._zoneManager.getCanvasWidth();\n        const height = this._zoneManager.getCanvasHeight();\n        const colorZones = this._zoneManager.resolveColorZones();\n        const id2Color = this._zoneManager.getId2Color();\n        const ctx = this._domNode.domNode.getContext('2d');\n        ctx.clearRect(0, 0, width, height);\n        if (colorZones.length > 0) {\n            this._renderOneLane(ctx, colorZones, id2Color, width);\n        }\n        return true;\n    }\n    _renderOneLane(ctx, colorZones, id2Color, width) {\n        let currentColorId = 0;\n        let currentFrom = 0;\n        let currentTo = 0;\n        for (const zone of colorZones) {\n            const zoneColorId = zone.colorId;\n            const zoneFrom = zone.from;\n            const zoneTo = zone.to;\n            if (zoneColorId !== currentColorId) {\n                ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                currentColorId = zoneColorId;\n                ctx.fillStyle = id2Color[currentColorId];\n                currentFrom = zoneFrom;\n                currentTo = zoneTo;\n            }\n            else {\n                if (currentTo >= zoneFrom) {\n                    currentTo = Math.max(currentTo, zoneTo);\n                }\n                else {\n                    ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                    currentFrom = zoneFrom;\n                    currentTo = zoneTo;\n                }\n            }\n        }\n        ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './rulers.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { editorRuler } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class Rulers extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.domNode.setClassName('view-rulers');\n        this._renderedRulers = [];\n        const options = this._context.configuration.options;\n        this._rulers = options.get(91 /* rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(44 /* fontInfo */).typicalHalfwidthCharacterWidth;\n    }\n    dispose() {\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._rulers = options.get(91 /* rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(44 /* fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    _ensureRulersCount() {\n        const currentCount = this._renderedRulers.length;\n        const desiredCount = this._rulers.length;\n        if (currentCount === desiredCount) {\n            // Nothing to do\n            return;\n        }\n        if (currentCount < desiredCount) {\n            const { tabSize } = this._context.viewModel.model.getOptions();\n            const rulerWidth = tabSize;\n            let addCount = desiredCount - currentCount;\n            while (addCount > 0) {\n                const node = createFastDomNode(document.createElement('div'));\n                node.setClassName('view-ruler');\n                node.setWidth(rulerWidth);\n                this.domNode.appendChild(node);\n                this._renderedRulers.push(node);\n                addCount--;\n            }\n            return;\n        }\n        let removeCount = currentCount - desiredCount;\n        while (removeCount > 0) {\n            const node = this._renderedRulers.pop();\n            this.domNode.removeChild(node);\n            removeCount--;\n        }\n    }\n    render(ctx) {\n        this._ensureRulersCount();\n        for (let i = 0, len = this._rulers.length; i < len; i++) {\n            const node = this._renderedRulers[i];\n            const ruler = this._rulers[i];\n            node.setBoxShadow(ruler.color ? `1px 0 0 0 ${ruler.color} inset` : ``);\n            node.setHeight(Math.min(ctx.scrollHeight, 1000000));\n            node.setLeft(ruler.column * this._typicalHalfwidthCharacterWidth);\n        }\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const rulerColor = theme.getColor(editorRuler);\n    if (rulerColor) {\n        collector.addRule(`.monaco-editor .view-ruler { box-shadow: 1px 0 0 0 ${rulerColor} inset; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './scrollDecoration.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { scrollbarShadow } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class ScrollDecorationViewPart extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._scrollTop = 0;\n        this._width = 0;\n        this._updateWidth();\n        this._shouldShow = false;\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(92 /* scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n    }\n    dispose() {\n        super.dispose();\n    }\n    _updateShouldShow() {\n        const newShouldShow = (this._useShadows && this._scrollTop > 0);\n        if (this._shouldShow !== newShouldShow) {\n            this._shouldShow = newShouldShow;\n            return true;\n        }\n        return false;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _updateWidth() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        if (layoutInfo.minimap.renderMinimap === 0 || (layoutInfo.minimap.minimapWidth > 0 && layoutInfo.minimap.minimapLeft === 0)) {\n            this._width = layoutInfo.width;\n        }\n        else {\n            this._width = layoutInfo.width - layoutInfo.minimap.minimapWidth - layoutInfo.verticalScrollbarWidth;\n        }\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(92 /* scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._updateWidth();\n        this._updateShouldShow();\n        return true;\n    }\n    onScrollChanged(e) {\n        this._scrollTop = e.scrollTop;\n        return this._updateShouldShow();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._width);\n        this._domNode.setClassName(this._shouldShow ? 'scroll-decoration' : '');\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const shadow = theme.getColor(scrollbarShadow);\n    if (shadow) {\n        collector.addRule(`.monaco-editor .scroll-decoration { box-shadow: ${shadow} 0 6px 6px -6px inset; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './selections.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorInactiveSelection, editorSelectionBackground, editorSelectionForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nclass HorizontalRangeWithStyle {\n    constructor(other) {\n        this.left = other.left;\n        this.width = other.width;\n        this.startStyle = null;\n        this.endStyle = null;\n    }\n}\nclass LineVisibleRangesWithStyle {\n    constructor(lineNumber, ranges) {\n        this.lineNumber = lineNumber;\n        this.ranges = ranges;\n    }\n}\nfunction toStyledRange(item) {\n    return new HorizontalRangeWithStyle(item);\n}\nfunction toStyled(item) {\n    return new LineVisibleRangesWithStyle(item.lineNumber, item.ranges.map(toStyledRange));\n}\nexport class SelectionsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._previousFrameVisibleRangesWithStyle = [];\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._roundedSelection = options.get(90 /* roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(44 /* fontInfo */).typicalHalfwidthCharacterWidth;\n        this._selections = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._roundedSelection = options.get(90 /* roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(44 /* fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections.slice(0);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true; //e.inlineDecorationsChanged;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _visibleRangesHaveGaps(linesVisibleRanges) {\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = linesVisibleRanges[i];\n            if (lineVisibleRanges.ranges.length > 1) {\n                // There are two ranges on the same line\n                return true;\n            }\n        }\n        return false;\n    }\n    _enrichVisibleRangesWithStyle(viewport, linesVisibleRanges, previousFrame) {\n        const epsilon = this._typicalHalfwidthCharacterWidth / 4;\n        let previousFrameTop = null;\n        let previousFrameBottom = null;\n        if (previousFrame && previousFrame.length > 0 && linesVisibleRanges.length > 0) {\n            const topLineNumber = linesVisibleRanges[0].lineNumber;\n            if (topLineNumber === viewport.startLineNumber) {\n                for (let i = 0; !previousFrameTop && i < previousFrame.length; i++) {\n                    if (previousFrame[i].lineNumber === topLineNumber) {\n                        previousFrameTop = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            const bottomLineNumber = linesVisibleRanges[linesVisibleRanges.length - 1].lineNumber;\n            if (bottomLineNumber === viewport.endLineNumber) {\n                for (let i = previousFrame.length - 1; !previousFrameBottom && i >= 0; i--) {\n                    if (previousFrame[i].lineNumber === bottomLineNumber) {\n                        previousFrameBottom = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            if (previousFrameTop && !previousFrameTop.startStyle) {\n                previousFrameTop = null;\n            }\n            if (previousFrameBottom && !previousFrameBottom.startStyle) {\n                previousFrameBottom = null;\n            }\n        }\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            // We know for a fact that there is precisely one range on each line\n            const curLineRange = linesVisibleRanges[i].ranges[0];\n            const curLeft = curLineRange.left;\n            const curRight = curLineRange.left + curLineRange.width;\n            const startStyle = {\n                top: 0 /* EXTERN */,\n                bottom: 0 /* EXTERN */\n            };\n            const endStyle = {\n                top: 0 /* EXTERN */,\n                bottom: 0 /* EXTERN */\n            };\n            if (i > 0) {\n                // Look above\n                const prevLeft = linesVisibleRanges[i - 1].ranges[0].left;\n                const prevRight = linesVisibleRanges[i - 1].ranges[0].left + linesVisibleRanges[i - 1].ranges[0].width;\n                if (abs(curLeft - prevLeft) < epsilon) {\n                    startStyle.top = 2 /* FLAT */;\n                }\n                else if (curLeft > prevLeft) {\n                    startStyle.top = 1 /* INTERN */;\n                }\n                if (abs(curRight - prevRight) < epsilon) {\n                    endStyle.top = 2 /* FLAT */;\n                }\n                else if (prevLeft < curRight && curRight < prevRight) {\n                    endStyle.top = 1 /* INTERN */;\n                }\n            }\n            else if (previousFrameTop) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.top = previousFrameTop.startStyle.top;\n                endStyle.top = previousFrameTop.endStyle.top;\n            }\n            if (i + 1 < len) {\n                // Look below\n                const nextLeft = linesVisibleRanges[i + 1].ranges[0].left;\n                const nextRight = linesVisibleRanges[i + 1].ranges[0].left + linesVisibleRanges[i + 1].ranges[0].width;\n                if (abs(curLeft - nextLeft) < epsilon) {\n                    startStyle.bottom = 2 /* FLAT */;\n                }\n                else if (nextLeft < curLeft && curLeft < nextRight) {\n                    startStyle.bottom = 1 /* INTERN */;\n                }\n                if (abs(curRight - nextRight) < epsilon) {\n                    endStyle.bottom = 2 /* FLAT */;\n                }\n                else if (curRight < nextRight) {\n                    endStyle.bottom = 1 /* INTERN */;\n                }\n            }\n            else if (previousFrameBottom) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.bottom = previousFrameBottom.startStyle.bottom;\n                endStyle.bottom = previousFrameBottom.endStyle.bottom;\n            }\n            curLineRange.startStyle = startStyle;\n            curLineRange.endStyle = endStyle;\n        }\n    }\n    _getVisibleRangesWithStyle(selection, ctx, previousFrame) {\n        const _linesVisibleRanges = ctx.linesVisibleRangesForRange(selection, true) || [];\n        const linesVisibleRanges = _linesVisibleRanges.map(toStyled);\n        const visibleRangesHaveGaps = this._visibleRangesHaveGaps(linesVisibleRanges);\n        if (!visibleRangesHaveGaps && this._roundedSelection) {\n            this._enrichVisibleRangesWithStyle(ctx.visibleRange, linesVisibleRanges, previousFrame);\n        }\n        // The visible ranges are sorted TOP-BOTTOM and LEFT-RIGHT\n        return linesVisibleRanges;\n    }\n    _createSelectionPiece(top, height, className, left, width) {\n        return ('<div class=\"cslr '\n            + className\n            + '\" style=\"top:'\n            + top.toString()\n            + 'px;left:'\n            + left.toString()\n            + 'px;width:'\n            + width.toString()\n            + 'px;height:'\n            + height\n            + 'px;\"></div>');\n    }\n    _actualRenderOneSelection(output2, visibleStartLineNumber, hasMultipleSelections, visibleRanges) {\n        if (visibleRanges.length === 0) {\n            return;\n        }\n        const visibleRangesHaveStyle = !!visibleRanges[0].ranges[0].startStyle;\n        const fullLineHeight = (this._lineHeight).toString();\n        const reducedLineHeight = (this._lineHeight - 1).toString();\n        const firstLineNumber = visibleRanges[0].lineNumber;\n        const lastLineNumber = visibleRanges[visibleRanges.length - 1].lineNumber;\n        for (let i = 0, len = visibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = visibleRanges[i];\n            const lineNumber = lineVisibleRanges.lineNumber;\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const lineHeight = hasMultipleSelections ? (lineNumber === lastLineNumber || lineNumber === firstLineNumber ? reducedLineHeight : fullLineHeight) : fullLineHeight;\n            const top = hasMultipleSelections ? (lineNumber === firstLineNumber ? 1 : 0) : 0;\n            let innerCornerOutput = '';\n            let restOfSelectionOutput = '';\n            for (let j = 0, lenJ = lineVisibleRanges.ranges.length; j < lenJ; j++) {\n                const visibleRange = lineVisibleRanges.ranges[j];\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 1 /* INTERN */ || startStyle.bottom === 1 /* INTERN */) {\n                        // Reverse rounded corner to the left\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (startStyle.top === 1 /* INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                        }\n                        if (startStyle.bottom === 1 /* INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                    if (endStyle.top === 1 /* INTERN */ || endStyle.bottom === 1 /* INTERN */) {\n                        // Reverse rounded corner to the right\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (endStyle.top === 1 /* INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                        }\n                        if (endStyle.bottom === 1 /* INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                }\n                let className = SelectionsOverlay.SELECTION_CLASS_NAME;\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 0 /* EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                    }\n                    if (startStyle.bottom === 0 /* EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                    }\n                    if (endStyle.top === 0 /* EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                    }\n                    if (endStyle.bottom === 0 /* EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                    }\n                }\n                restOfSelectionOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left, visibleRange.width);\n            }\n            output2[lineIndex][0] += innerCornerOutput;\n            output2[lineIndex][1] += restOfSelectionOutput;\n        }\n    }\n    prepareRender(ctx) {\n        // Build HTML for inner corners separate from HTML for the rest of selections,\n        // as the inner corner HTML can interfere with that of other selections.\n        // In final render, make sure to place the inner corner HTML before the rest of selection HTML. See issue #77777.\n        const output = [];\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = ['', ''];\n        }\n        const thisFrameVisibleRangesWithStyle = [];\n        for (let i = 0, len = this._selections.length; i < len; i++) {\n            const selection = this._selections[i];\n            if (selection.isEmpty()) {\n                thisFrameVisibleRangesWithStyle[i] = null;\n                continue;\n            }\n            const visibleRangesWithStyle = this._getVisibleRangesWithStyle(selection, ctx, this._previousFrameVisibleRangesWithStyle[i]);\n            thisFrameVisibleRangesWithStyle[i] = visibleRangesWithStyle;\n            this._actualRenderOneSelection(output, visibleStartLineNumber, this._selections.length > 1, visibleRangesWithStyle);\n        }\n        this._previousFrameVisibleRangesWithStyle = thisFrameVisibleRangesWithStyle;\n        this._renderResult = output.map(([internalCorners, restOfSelection]) => internalCorners + restOfSelection);\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nSelectionsOverlay.SELECTION_CLASS_NAME = 'selected-text';\nSelectionsOverlay.SELECTION_TOP_LEFT = 'top-left-radius';\nSelectionsOverlay.SELECTION_BOTTOM_LEFT = 'bottom-left-radius';\nSelectionsOverlay.SELECTION_TOP_RIGHT = 'top-right-radius';\nSelectionsOverlay.SELECTION_BOTTOM_RIGHT = 'bottom-right-radius';\nSelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME = 'monaco-editor-background';\nSelectionsOverlay.ROUNDED_PIECE_WIDTH = 10;\nregisterThemingParticipant((theme, collector) => {\n    const editorSelectionColor = theme.getColor(editorSelectionBackground);\n    if (editorSelectionColor) {\n        collector.addRule(`.monaco-editor .focused .selected-text { background-color: ${editorSelectionColor}; }`);\n    }\n    const editorInactiveSelectionColor = theme.getColor(editorInactiveSelection);\n    if (editorInactiveSelectionColor) {\n        collector.addRule(`.monaco-editor .selected-text { background-color: ${editorInactiveSelectionColor}; }`);\n    }\n    const editorSelectionForegroundColor = theme.getColor(editorSelectionForeground);\n    if (editorSelectionForegroundColor && !editorSelectionForegroundColor.isTransparent()) {\n        collector.addRule(`.monaco-editor .view-line span.inline-selected-text { color: ${editorSelectionForegroundColor}; }`);\n    }\n});\nfunction abs(n) {\n    return n < 0 ? -n : n;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass ViewCursorRenderData {\n    constructor(top, left, width, height, textContent, textContentClassName) {\n        this.top = top;\n        this.left = left;\n        this.width = width;\n        this.height = height;\n        this.textContent = textContent;\n        this.textContentClassName = textContentClassName;\n    }\n}\nexport class ViewCursor {\n    constructor(context) {\n        this._context = context;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(44 /* fontInfo */);\n        this._cursorStyle = options.get(24 /* cursorStyle */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(27 /* cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        this._isVisible = true;\n        // Create the dom node\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this._domNode.setHeight(this._lineHeight);\n        this._domNode.setTop(0);\n        this._domNode.setLeft(0);\n        applyFontInfo(this._domNode, fontInfo);\n        this._domNode.setDisplay('none');\n        this._position = new Position(1, 1);\n        this._lastRenderedContent = '';\n        this._renderData = null;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return this._position;\n    }\n    show() {\n        if (!this._isVisible) {\n            this._domNode.setVisibility('inherit');\n            this._isVisible = true;\n        }\n    }\n    hide() {\n        if (this._isVisible) {\n            this._domNode.setVisibility('hidden');\n            this._isVisible = false;\n        }\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(44 /* fontInfo */);\n        this._cursorStyle = options.get(24 /* cursorStyle */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(27 /* cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        applyFontInfo(this._domNode, fontInfo);\n        return true;\n    }\n    onCursorPositionChanged(position) {\n        this._position = position;\n        return true;\n    }\n    /**\n     * If `this._position` is inside a grapheme, returns the position where the grapheme starts.\n     * Also returns the next grapheme.\n     */\n    _getGraphemeAwarePosition() {\n        const { lineNumber, column } = this._position;\n        const lineContent = this._context.viewModel.getLineContent(lineNumber);\n        const [startOffset, endOffset] = strings.getCharContainingOffset(lineContent, column - 1);\n        return [new Position(lineNumber, startOffset + 1), lineContent.substring(startOffset, endOffset)];\n    }\n    _prepareRender(ctx) {\n        let textContent = '';\n        const [position, nextGrapheme] = this._getGraphemeAwarePosition();\n        if (this._cursorStyle === TextEditorCursorStyle.Line || this._cursorStyle === TextEditorCursorStyle.LineThin) {\n            const visibleRange = ctx.visibleRangeForPosition(position);\n            if (!visibleRange || visibleRange.outsideRenderedLine) {\n                // Outside viewport\n                return null;\n            }\n            let width;\n            if (this._cursorStyle === TextEditorCursorStyle.Line) {\n                width = dom.computeScreenAwareSize(this._lineCursorWidth > 0 ? this._lineCursorWidth : 2);\n                if (width > 2) {\n                    textContent = nextGrapheme;\n                }\n            }\n            else {\n                width = dom.computeScreenAwareSize(1);\n            }\n            let left = visibleRange.left;\n            if (width >= 2 && left >= 1) {\n                // try to center cursor\n                left -= 1;\n            }\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n            return new ViewCursorRenderData(top, left, width, this._lineHeight, textContent, '');\n        }\n        const visibleRangeForCharacter = ctx.linesVisibleRangesForRange(new Range(position.lineNumber, position.column, position.lineNumber, position.column + nextGrapheme.length), false);\n        if (!visibleRangeForCharacter || visibleRangeForCharacter.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const firstVisibleRangeForCharacter = visibleRangeForCharacter[0];\n        if (firstVisibleRangeForCharacter.outsideRenderedLine || firstVisibleRangeForCharacter.ranges.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const range = firstVisibleRangeForCharacter.ranges[0];\n        const width = range.width < 1 ? this._typicalHalfwidthCharacterWidth : range.width;\n        let textContentClassName = '';\n        if (this._cursorStyle === TextEditorCursorStyle.Block) {\n            const lineData = this._context.viewModel.getViewLineData(position.lineNumber);\n            textContent = nextGrapheme;\n            const tokenIndex = lineData.tokens.findTokenIndexAtOffset(position.column - 1);\n            textContentClassName = lineData.tokens.getClassName(tokenIndex);\n        }\n        let top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n        let height = this._lineHeight;\n        // Underline might interfere with clicking\n        if (this._cursorStyle === TextEditorCursorStyle.Underline || this._cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n            top += this._lineHeight - 2;\n            height = 2;\n        }\n        return new ViewCursorRenderData(top, range.left, width, height, textContent, textContentClassName);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRender(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            this._domNode.setDisplay('none');\n            return null;\n        }\n        if (this._lastRenderedContent !== this._renderData.textContent) {\n            this._lastRenderedContent = this._renderData.textContent;\n            this._domNode.domNode.textContent = this._lastRenderedContent;\n        }\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ${this._renderData.textContentClassName}`);\n        this._domNode.setDisplay('block');\n        this._domNode.setTop(this._renderData.top);\n        this._domNode.setLeft(this._renderData.left);\n        this._domNode.setWidth(this._renderData.width);\n        this._domNode.setLineHeight(this._renderData.height);\n        this._domNode.setHeight(this._renderData.height);\n        return {\n            domNode: this._domNode.domNode,\n            position: this._position,\n            contentLeft: this._renderData.left,\n            height: this._renderData.height,\n            width: 2\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './viewCursors.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { IntervalTimer, TimeoutTimer } from '../../../../base/common/async.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { ViewCursor } from './viewCursor.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { editorCursorBackground, editorCursorForeground } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class ViewCursors extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(81 /* readOnly */);\n        this._cursorBlinking = options.get(22 /* cursorBlinking */);\n        this._cursorStyle = options.get(24 /* cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(23 /* cursorSmoothCaretAnimation */);\n        this._selectionIsEmpty = true;\n        this._isComposingInput = false;\n        this._isVisible = false;\n        this._primaryCursor = new ViewCursor(this._context);\n        this._secondaryCursors = [];\n        this._renderData = [];\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateDomClassName();\n        this._domNode.appendChild(this._primaryCursor.getDomNode());\n        this._startCursorBlinkAnimation = new TimeoutTimer();\n        this._cursorFlatBlinkInterval = new IntervalTimer();\n        this._blinkingEnabled = false;\n        this._editorHasFocus = false;\n        this._updateBlinking();\n    }\n    dispose() {\n        super.dispose();\n        this._startCursorBlinkAnimation.dispose();\n        this._cursorFlatBlinkInterval.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onCompositionStart(e) {\n        this._isComposingInput = true;\n        this._updateBlinking();\n        return true;\n    }\n    onCompositionEnd(e) {\n        this._isComposingInput = false;\n        this._updateBlinking();\n        return true;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(81 /* readOnly */);\n        this._cursorBlinking = options.get(22 /* cursorBlinking */);\n        this._cursorStyle = options.get(24 /* cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(23 /* cursorSmoothCaretAnimation */);\n        this._updateBlinking();\n        this._updateDomClassName();\n        this._primaryCursor.onConfigurationChanged(e);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    _onCursorPositionChanged(position, secondaryPositions) {\n        this._primaryCursor.onCursorPositionChanged(position);\n        this._updateBlinking();\n        if (this._secondaryCursors.length < secondaryPositions.length) {\n            // Create new cursors\n            const addCnt = secondaryPositions.length - this._secondaryCursors.length;\n            for (let i = 0; i < addCnt; i++) {\n                const newCursor = new ViewCursor(this._context);\n                this._domNode.domNode.insertBefore(newCursor.getDomNode().domNode, this._primaryCursor.getDomNode().domNode.nextSibling);\n                this._secondaryCursors.push(newCursor);\n            }\n        }\n        else if (this._secondaryCursors.length > secondaryPositions.length) {\n            // Remove some cursors\n            const removeCnt = this._secondaryCursors.length - secondaryPositions.length;\n            for (let i = 0; i < removeCnt; i++) {\n                this._domNode.removeChild(this._secondaryCursors[0].getDomNode());\n                this._secondaryCursors.splice(0, 1);\n            }\n        }\n        for (let i = 0; i < secondaryPositions.length; i++) {\n            this._secondaryCursors[i].onCursorPositionChanged(secondaryPositions[i]);\n        }\n    }\n    onCursorStateChanged(e) {\n        const positions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            positions[i] = e.selections[i].getPosition();\n        }\n        this._onCursorPositionChanged(positions[0], positions.slice(1));\n        const selectionIsEmpty = e.selections[0].isEmpty();\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            this._updateDomClassName();\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        this._editorHasFocus = e.isFocused;\n        this._updateBlinking();\n        return false;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onTokensChanged(e) {\n        const shouldRender = (position) => {\n            for (let i = 0, len = e.ranges.length; i < len; i++) {\n                if (e.ranges[i].fromLineNumber <= position.lineNumber && position.lineNumber <= e.ranges[i].toLineNumber) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        if (shouldRender(this._primaryCursor.getPosition())) {\n            return true;\n        }\n        for (const secondaryCursor of this._secondaryCursors) {\n            if (shouldRender(secondaryCursor.getPosition())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // ---- blinking logic\n    _getCursorBlinking() {\n        if (this._isComposingInput) {\n            // avoid double cursors\n            return 0 /* Hidden */;\n        }\n        if (!this._editorHasFocus) {\n            return 0 /* Hidden */;\n        }\n        if (this._readOnly) {\n            return 5 /* Solid */;\n        }\n        return this._cursorBlinking;\n    }\n    _updateBlinking() {\n        this._startCursorBlinkAnimation.cancel();\n        this._cursorFlatBlinkInterval.cancel();\n        const blinkingStyle = this._getCursorBlinking();\n        // hidden and solid are special as they involve no animations\n        const isHidden = (blinkingStyle === 0 /* Hidden */);\n        const isSolid = (blinkingStyle === 5 /* Solid */);\n        if (isHidden) {\n            this._hide();\n        }\n        else {\n            this._show();\n        }\n        this._blinkingEnabled = false;\n        this._updateDomClassName();\n        if (!isHidden && !isSolid) {\n            if (blinkingStyle === 1 /* Blink */) {\n                // flat blinking is handled by JavaScript to save battery life due to Chromium step timing issue https://bugs.chromium.org/p/chromium/issues/detail?id=361587\n                this._cursorFlatBlinkInterval.cancelAndSet(() => {\n                    if (this._isVisible) {\n                        this._hide();\n                    }\n                    else {\n                        this._show();\n                    }\n                }, ViewCursors.BLINK_INTERVAL);\n            }\n            else {\n                this._startCursorBlinkAnimation.setIfNotSet(() => {\n                    this._blinkingEnabled = true;\n                    this._updateDomClassName();\n                }, ViewCursors.BLINK_INTERVAL);\n            }\n        }\n    }\n    // --- end blinking logic\n    _updateDomClassName() {\n        this._domNode.setClassName(this._getClassName());\n    }\n    _getClassName() {\n        let result = 'cursors-layer';\n        if (!this._selectionIsEmpty) {\n            result += ' has-selection';\n        }\n        switch (this._cursorStyle) {\n            case TextEditorCursorStyle.Line:\n                result += ' cursor-line-style';\n                break;\n            case TextEditorCursorStyle.Block:\n                result += ' cursor-block-style';\n                break;\n            case TextEditorCursorStyle.Underline:\n                result += ' cursor-underline-style';\n                break;\n            case TextEditorCursorStyle.LineThin:\n                result += ' cursor-line-thin-style';\n                break;\n            case TextEditorCursorStyle.BlockOutline:\n                result += ' cursor-block-outline-style';\n                break;\n            case TextEditorCursorStyle.UnderlineThin:\n                result += ' cursor-underline-thin-style';\n                break;\n            default:\n                result += ' cursor-line-style';\n        }\n        if (this._blinkingEnabled) {\n            switch (this._getCursorBlinking()) {\n                case 1 /* Blink */:\n                    result += ' cursor-blink';\n                    break;\n                case 2 /* Smooth */:\n                    result += ' cursor-smooth';\n                    break;\n                case 3 /* Phase */:\n                    result += ' cursor-phase';\n                    break;\n                case 4 /* Expand */:\n                    result += ' cursor-expand';\n                    break;\n                case 5 /* Solid */:\n                    result += ' cursor-solid';\n                    break;\n                default:\n                    result += ' cursor-solid';\n            }\n        }\n        else {\n            result += ' cursor-solid';\n        }\n        if (this._cursorSmoothCaretAnimation) {\n            result += ' cursor-smooth-caret-animation';\n        }\n        return result;\n    }\n    _show() {\n        this._primaryCursor.show();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].show();\n        }\n        this._isVisible = true;\n    }\n    _hide() {\n        this._primaryCursor.hide();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].hide();\n        }\n        this._isVisible = false;\n    }\n    // ---- IViewPart implementation\n    prepareRender(ctx) {\n        this._primaryCursor.prepareRender(ctx);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const renderData = [];\n        let renderDataLen = 0;\n        const primaryRenderData = this._primaryCursor.render(ctx);\n        if (primaryRenderData) {\n            renderData[renderDataLen++] = primaryRenderData;\n        }\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            const secondaryRenderData = this._secondaryCursors[i].render(ctx);\n            if (secondaryRenderData) {\n                renderData[renderDataLen++] = secondaryRenderData;\n            }\n        }\n        this._renderData = renderData;\n    }\n    getLastRenderData() {\n        return this._renderData;\n    }\n}\nViewCursors.BLINK_INTERVAL = 500;\nregisterThemingParticipant((theme, collector) => {\n    const caret = theme.getColor(editorCursorForeground);\n    if (caret) {\n        let caretBackground = theme.getColor(editorCursorBackground);\n        if (!caretBackground) {\n            caretBackground = caret.opposite();\n        }\n        collector.addRule(`.monaco-editor .inputarea.ime-input { caret-color: ${caret}; }`);\n        collector.addRule(`.monaco-editor .cursors-layer .cursor { background-color: ${caret}; border-color: ${caret}; color: ${caretBackground}; }`);\n        if (theme.type === 'hc') {\n            collector.addRule(`.monaco-editor .cursors-layer.has-selection .cursor { border-left: 1px solid ${caretBackground}; border-right: 1px solid ${caretBackground}; }`);\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\nexport class ViewZones extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName('view-zones');\n        this.domNode.setPosition('absolute');\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.marginDomNode = createFastDomNode(document.createElement('div'));\n        this.marginDomNode.setClassName('margin-view-zones');\n        this.marginDomNode.setPosition('absolute');\n        this.marginDomNode.setAttribute('role', 'presentation');\n        this.marginDomNode.setAttribute('aria-hidden', 'true');\n        this._zones = {};\n    }\n    dispose() {\n        super.dispose();\n        this._zones = {};\n    }\n    // ---- begin view event handlers\n    _recomputeWhitespacesProps() {\n        const whitespaces = this._context.viewLayout.getWhitespaces();\n        const oldWhitespaces = new Map();\n        for (const whitespace of whitespaces) {\n            oldWhitespaces.set(whitespace.id, whitespace);\n        }\n        let hadAChange = false;\n        this._context.viewModel.changeWhitespace((whitespaceAccessor) => {\n            const keys = Object.keys(this._zones);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const id = keys[i];\n                const zone = this._zones[id];\n                const props = this._computeWhitespaceProps(zone.delegate);\n                zone.isInHiddenArea = props.isInHiddenArea;\n                const oldWhitespace = oldWhitespaces.get(id);\n                if (oldWhitespace && (oldWhitespace.afterLineNumber !== props.afterViewLineNumber || oldWhitespace.height !== props.heightInPx)) {\n                    whitespaceAccessor.changeOneWhitespace(id, props.afterViewLineNumber, props.heightInPx);\n                    this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n                    hadAChange = true;\n                }\n            }\n        });\n        return hadAChange;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineHeight = options.get(59 /* lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        if (e.hasChanged(59 /* lineHeight */)) {\n            this._recomputeWhitespacesProps();\n        }\n        return true;\n    }\n    onLineMappingChanged(e) {\n        return this._recomputeWhitespacesProps();\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    _getZoneOrdinal(zone) {\n        if (typeof zone.afterColumn !== 'undefined') {\n            return zone.afterColumn;\n        }\n        return 10000;\n    }\n    _computeWhitespaceProps(zone) {\n        if (zone.afterLineNumber === 0) {\n            return {\n                isInHiddenArea: false,\n                afterViewLineNumber: 0,\n                heightInPx: this._heightInPixels(zone),\n                minWidthInPx: this._minWidthInPixels(zone)\n            };\n        }\n        let zoneAfterModelPosition;\n        if (typeof zone.afterColumn !== 'undefined') {\n            zoneAfterModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zone.afterLineNumber,\n                column: zone.afterColumn\n            });\n        }\n        else {\n            const validAfterLineNumber = this._context.viewModel.model.validatePosition({\n                lineNumber: zone.afterLineNumber,\n                column: 1\n            }).lineNumber;\n            zoneAfterModelPosition = new Position(validAfterLineNumber, this._context.viewModel.model.getLineMaxColumn(validAfterLineNumber));\n        }\n        let zoneBeforeModelPosition;\n        if (zoneAfterModelPosition.column === this._context.viewModel.model.getLineMaxColumn(zoneAfterModelPosition.lineNumber)) {\n            zoneBeforeModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zoneAfterModelPosition.lineNumber + 1,\n                column: 1\n            });\n        }\n        else {\n            zoneBeforeModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zoneAfterModelPosition.lineNumber,\n                column: zoneAfterModelPosition.column + 1\n            });\n        }\n        const viewPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(zoneAfterModelPosition, zone.afterColumnAffinity);\n        const isVisible = this._context.viewModel.coordinatesConverter.modelPositionIsVisible(zoneBeforeModelPosition);\n        return {\n            isInHiddenArea: !isVisible,\n            afterViewLineNumber: viewPosition.lineNumber,\n            heightInPx: (isVisible ? this._heightInPixels(zone) : 0),\n            minWidthInPx: this._minWidthInPixels(zone)\n        };\n    }\n    changeViewZones(callback) {\n        let zonesHaveChanged = false;\n        this._context.viewModel.changeWhitespace((whitespaceAccessor) => {\n            const changeAccessor = {\n                addZone: (zone) => {\n                    zonesHaveChanged = true;\n                    return this._addZone(whitespaceAccessor, zone);\n                },\n                removeZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._removeZone(whitespaceAccessor, id) || zonesHaveChanged;\n                },\n                layoutZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._layoutZone(whitespaceAccessor, id) || zonesHaveChanged;\n                }\n            };\n            safeInvoke1Arg(callback, changeAccessor);\n            // Invalidate changeAccessor\n            changeAccessor.addZone = invalidFunc;\n            changeAccessor.removeZone = invalidFunc;\n            changeAccessor.layoutZone = invalidFunc;\n        });\n        return zonesHaveChanged;\n    }\n    _addZone(whitespaceAccessor, zone) {\n        const props = this._computeWhitespaceProps(zone);\n        const whitespaceId = whitespaceAccessor.insertWhitespace(props.afterViewLineNumber, this._getZoneOrdinal(zone), props.heightInPx, props.minWidthInPx);\n        const myZone = {\n            whitespaceId: whitespaceId,\n            delegate: zone,\n            isInHiddenArea: props.isInHiddenArea,\n            isVisible: false,\n            domNode: createFastDomNode(zone.domNode),\n            marginDomNode: zone.marginDomNode ? createFastDomNode(zone.marginDomNode) : null\n        };\n        this._safeCallOnComputedHeight(myZone.delegate, props.heightInPx);\n        myZone.domNode.setPosition('absolute');\n        myZone.domNode.domNode.style.width = '100%';\n        myZone.domNode.setDisplay('none');\n        myZone.domNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n        this.domNode.appendChild(myZone.domNode);\n        if (myZone.marginDomNode) {\n            myZone.marginDomNode.setPosition('absolute');\n            myZone.marginDomNode.domNode.style.width = '100%';\n            myZone.marginDomNode.setDisplay('none');\n            myZone.marginDomNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n            this.marginDomNode.appendChild(myZone.marginDomNode);\n        }\n        this._zones[myZone.whitespaceId] = myZone;\n        this.setShouldRender();\n        return myZone.whitespaceId;\n    }\n    _removeZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            delete this._zones[id];\n            whitespaceAccessor.removeWhitespace(zone.whitespaceId);\n            zone.domNode.removeAttribute('monaco-visible-view-zone');\n            zone.domNode.removeAttribute('monaco-view-zone');\n            zone.domNode.domNode.parentNode.removeChild(zone.domNode.domNode);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.removeAttribute('monaco-visible-view-zone');\n                zone.marginDomNode.removeAttribute('monaco-view-zone');\n                zone.marginDomNode.domNode.parentNode.removeChild(zone.marginDomNode.domNode);\n            }\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    _layoutZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            const props = this._computeWhitespaceProps(zone.delegate);\n            zone.isInHiddenArea = props.isInHiddenArea;\n            // const newOrdinal = this._getZoneOrdinal(zone.delegate);\n            whitespaceAccessor.changeOneWhitespace(zone.whitespaceId, props.afterViewLineNumber, props.heightInPx);\n            // TODO@Alex: change `newOrdinal` too\n            this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    shouldSuppressMouseDownOnViewZone(id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            return Boolean(zone.delegate.suppressMouseDown);\n        }\n        return false;\n    }\n    _heightInPixels(zone) {\n        if (typeof zone.heightInPx === 'number') {\n            return zone.heightInPx;\n        }\n        if (typeof zone.heightInLines === 'number') {\n            return this._lineHeight * zone.heightInLines;\n        }\n        return this._lineHeight;\n    }\n    _minWidthInPixels(zone) {\n        if (typeof zone.minWidthInPx === 'number') {\n            return zone.minWidthInPx;\n        }\n        return 0;\n    }\n    _safeCallOnComputedHeight(zone, height) {\n        if (typeof zone.onComputedHeight === 'function') {\n            try {\n                zone.onComputedHeight(height);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    _safeCallOnDomNodeTop(zone, top) {\n        if (typeof zone.onDomNodeTop === 'function') {\n            try {\n                zone.onDomNodeTop(top);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        const visibleWhitespaces = ctx.viewportData.whitespaceViewportData;\n        const visibleZones = {};\n        let hasVisibleZone = false;\n        for (const visibleWhitespace of visibleWhitespaces) {\n            if (this._zones[visibleWhitespace.id].isInHiddenArea) {\n                continue;\n            }\n            visibleZones[visibleWhitespace.id] = visibleWhitespace;\n            hasVisibleZone = true;\n        }\n        const keys = Object.keys(this._zones);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const id = keys[i];\n            const zone = this._zones[id];\n            let newTop = 0;\n            let newHeight = 0;\n            let newDisplay = 'none';\n            if (visibleZones.hasOwnProperty(id)) {\n                newTop = visibleZones[id].verticalOffset - ctx.bigNumbersDelta;\n                newHeight = visibleZones[id].height;\n                newDisplay = 'block';\n                // zone is visible\n                if (!zone.isVisible) {\n                    zone.domNode.setAttribute('monaco-visible-view-zone', 'true');\n                    zone.isVisible = true;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(visibleZones[id].verticalOffset));\n            }\n            else {\n                if (zone.isVisible) {\n                    zone.domNode.removeAttribute('monaco-visible-view-zone');\n                    zone.isVisible = false;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(-1000000));\n            }\n            zone.domNode.setTop(newTop);\n            zone.domNode.setHeight(newHeight);\n            zone.domNode.setDisplay(newDisplay);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.setTop(newTop);\n                zone.marginDomNode.setHeight(newHeight);\n                zone.marginDomNode.setDisplay(newDisplay);\n            }\n        }\n        if (hasVisibleZone) {\n            this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n            this.marginDomNode.setWidth(this._contentLeft);\n        }\n    }\n}\nfunction safeInvoke1Arg(func, arg1) {\n    try {\n        return func(arg1);\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../base/browser/dom.js';\nimport { Selection } from '../common/core/selection.js';\nimport { createFastDomNode } from '../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../base/common/errors.js';\nimport { PointerHandler } from './controller/pointerHandler.js';\nimport { TextAreaHandler } from './controller/textAreaHandler.js';\nimport { ViewController } from './view/viewController.js';\nimport { ViewUserInputEvents } from './view/viewUserInputEvents.js';\nimport { ContentViewOverlays, MarginViewOverlays } from './view/viewOverlays.js';\nimport { PartFingerprints } from './view/viewPart.js';\nimport { ViewContentWidgets } from './viewParts/contentWidgets/contentWidgets.js';\nimport { CurrentLineHighlightOverlay, CurrentLineMarginHighlightOverlay } from './viewParts/currentLineHighlight/currentLineHighlight.js';\nimport { DecorationsOverlay } from './viewParts/decorations/decorations.js';\nimport { EditorScrollbar } from './viewParts/editorScrollbar/editorScrollbar.js';\nimport { GlyphMarginOverlay } from './viewParts/glyphMargin/glyphMargin.js';\nimport { IndentGuidesOverlay } from './viewParts/indentGuides/indentGuides.js';\nimport { LineNumbersOverlay } from './viewParts/lineNumbers/lineNumbers.js';\nimport { ViewLines } from './viewParts/lines/viewLines.js';\nimport { LinesDecorationsOverlay } from './viewParts/linesDecorations/linesDecorations.js';\nimport { Margin } from './viewParts/margin/margin.js';\nimport { MarginViewLineDecorationsOverlay } from './viewParts/marginDecorations/marginDecorations.js';\nimport { Minimap } from './viewParts/minimap/minimap.js';\nimport { ViewOverlayWidgets } from './viewParts/overlayWidgets/overlayWidgets.js';\nimport { DecorationsOverviewRuler } from './viewParts/overviewRuler/decorationsOverviewRuler.js';\nimport { OverviewRuler } from './viewParts/overviewRuler/overviewRuler.js';\nimport { Rulers } from './viewParts/rulers/rulers.js';\nimport { ScrollDecorationViewPart } from './viewParts/scrollDecoration/scrollDecoration.js';\nimport { SelectionsOverlay } from './viewParts/selections/selections.js';\nimport { ViewCursors } from './viewParts/viewCursors/viewCursors.js';\nimport { ViewZones } from './viewParts/viewZones/viewZones.js';\nimport { Position } from '../common/core/position.js';\nimport { Range } from '../common/core/range.js';\nimport { RenderingContext } from './view/renderingContext.js';\nimport { ViewContext } from '../common/viewModel/viewContext.js';\nimport { ViewportData } from '../common/viewLayout/viewLinesViewportData.js';\nimport { ViewEventHandler } from '../common/viewEventHandler.js';\nimport { getThemeTypeSelector } from '../../platform/theme/common/themeService.js';\nimport { PointerHandlerLastRenderData } from './controller/mouseTarget.js';\nexport class View extends ViewEventHandler {\n    constructor(commandDelegate, configuration, colorTheme, model, userInputEvents, overflowWidgetsDomNode) {\n        super();\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderAnimationFrame = null;\n        const viewController = new ViewController(configuration, model, userInputEvents, commandDelegate);\n        // The view context is passed on to most classes (basically to reduce param. counts in ctors)\n        this._context = new ViewContext(configuration, colorTheme, model);\n        // Ensure the view is the first event handler in order to update the layout\n        this._context.addEventHandler(this);\n        this._viewParts = [];\n        // Keyboard handler\n        this._textAreaHandler = new TextAreaHandler(this._context, viewController, this._createTextAreaHandlerHelper());\n        this._viewParts.push(this._textAreaHandler);\n        // These two dom nodes must be constructed up front, since references are needed in the layout provider (scrolling & co.)\n        this._linesContent = createFastDomNode(document.createElement('div'));\n        this._linesContent.setClassName('lines-content' + ' monaco-editor-background');\n        this._linesContent.setPosition('absolute');\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName(this._getEditorClassName());\n        // Set role 'code' for better screen reader support https://github.com/microsoft/vscode/issues/93438\n        this.domNode.setAttribute('role', 'code');\n        this._overflowGuardContainer = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._overflowGuardContainer, 3 /* OverflowGuard */);\n        this._overflowGuardContainer.setClassName('overflow-guard');\n        this._scrollbar = new EditorScrollbar(this._context, this._linesContent, this.domNode, this._overflowGuardContainer);\n        this._viewParts.push(this._scrollbar);\n        // View Lines\n        this._viewLines = new ViewLines(this._context, this._linesContent);\n        // View Zones\n        this._viewZones = new ViewZones(this._context);\n        this._viewParts.push(this._viewZones);\n        // Decorations overview ruler\n        const decorationsOverviewRuler = new DecorationsOverviewRuler(this._context);\n        this._viewParts.push(decorationsOverviewRuler);\n        const scrollDecoration = new ScrollDecorationViewPart(this._context);\n        this._viewParts.push(scrollDecoration);\n        const contentViewOverlays = new ContentViewOverlays(this._context);\n        this._viewParts.push(contentViewOverlays);\n        contentViewOverlays.addDynamicOverlay(new CurrentLineHighlightOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new SelectionsOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new IndentGuidesOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new DecorationsOverlay(this._context));\n        const marginViewOverlays = new MarginViewOverlays(this._context);\n        this._viewParts.push(marginViewOverlays);\n        marginViewOverlays.addDynamicOverlay(new CurrentLineMarginHighlightOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new GlyphMarginOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new MarginViewLineDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LinesDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LineNumbersOverlay(this._context));\n        const margin = new Margin(this._context);\n        margin.getDomNode().appendChild(this._viewZones.marginDomNode);\n        margin.getDomNode().appendChild(marginViewOverlays.getDomNode());\n        this._viewParts.push(margin);\n        // Content widgets\n        this._contentWidgets = new ViewContentWidgets(this._context, this.domNode);\n        this._viewParts.push(this._contentWidgets);\n        this._viewCursors = new ViewCursors(this._context);\n        this._viewParts.push(this._viewCursors);\n        // Overlay widgets\n        this._overlayWidgets = new ViewOverlayWidgets(this._context);\n        this._viewParts.push(this._overlayWidgets);\n        const rulers = new Rulers(this._context);\n        this._viewParts.push(rulers);\n        const minimap = new Minimap(this._context);\n        this._viewParts.push(minimap);\n        // -------------- Wire dom nodes up\n        if (decorationsOverviewRuler) {\n            const overviewRulerData = this._scrollbar.getOverviewRulerLayoutInfo();\n            overviewRulerData.parent.insertBefore(decorationsOverviewRuler.getDomNode(), overviewRulerData.insertBefore);\n        }\n        this._linesContent.appendChild(contentViewOverlays.getDomNode());\n        this._linesContent.appendChild(rulers.domNode);\n        this._linesContent.appendChild(this._viewZones.domNode);\n        this._linesContent.appendChild(this._viewLines.getDomNode());\n        this._linesContent.appendChild(this._contentWidgets.domNode);\n        this._linesContent.appendChild(this._viewCursors.getDomNode());\n        this._overflowGuardContainer.appendChild(margin.getDomNode());\n        this._overflowGuardContainer.appendChild(this._scrollbar.getDomNode());\n        this._overflowGuardContainer.appendChild(scrollDecoration.getDomNode());\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textArea);\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textAreaCover);\n        this._overflowGuardContainer.appendChild(this._overlayWidgets.getDomNode());\n        this._overflowGuardContainer.appendChild(minimap.getDomNode());\n        this.domNode.appendChild(this._overflowGuardContainer);\n        if (overflowWidgetsDomNode) {\n            overflowWidgetsDomNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode.domNode);\n        }\n        else {\n            this.domNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode);\n        }\n        this._applyLayout();\n        // Pointer handler\n        this._pointerHandler = this._register(new PointerHandler(this._context, viewController, this._createPointerHandlerHelper()));\n    }\n    _flushAccumulatedAndRenderNow() {\n        this._renderNow();\n    }\n    _createPointerHandlerHelper() {\n        return {\n            viewDomNode: this.domNode.domNode,\n            linesContentDomNode: this._linesContent.domNode,\n            focusTextArea: () => {\n                this.focus();\n            },\n            dispatchTextAreaEvent: (event) => {\n                this._textAreaHandler.textArea.domNode.dispatchEvent(event);\n            },\n            getLastRenderData: () => {\n                const lastViewCursorsRenderData = this._viewCursors.getLastRenderData() || [];\n                const lastTextareaPosition = this._textAreaHandler.getLastRenderData();\n                return new PointerHandlerLastRenderData(lastViewCursorsRenderData, lastTextareaPosition);\n            },\n            shouldSuppressMouseDownOnViewZone: (viewZoneId) => {\n                return this._viewZones.shouldSuppressMouseDownOnViewZone(viewZoneId);\n            },\n            shouldSuppressMouseDownOnWidget: (widgetId) => {\n                return this._contentWidgets.shouldSuppressMouseDownOnWidget(widgetId);\n            },\n            getPositionFromDOMInfo: (spanNode, offset) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getPositionFromDOMInfo(spanNode, offset);\n            },\n            visibleRangeForPosition: (lineNumber, column) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(new Position(lineNumber, column));\n            },\n            getLineWidth: (lineNumber) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getLineWidth(lineNumber);\n            }\n        };\n    }\n    _createTextAreaHandlerHelper() {\n        return {\n            visibleRangeForPosition: (position) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(position);\n            }\n        };\n    }\n    _applyLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this.domNode.setWidth(layoutInfo.width);\n        this.domNode.setHeight(layoutInfo.height);\n        this._overflowGuardContainer.setWidth(layoutInfo.width);\n        this._overflowGuardContainer.setHeight(layoutInfo.height);\n        this._linesContent.setWidth(1000000);\n        this._linesContent.setHeight(1000000);\n    }\n    _getEditorClassName() {\n        const focused = this._textAreaHandler.isFocused() ? ' focused' : '';\n        return this._context.configuration.options.get(128 /* editorClassName */) + ' ' + getThemeTypeSelector(this._context.theme.type) + focused;\n    }\n    // --- begin event handlers\n    handleEvents(events) {\n        super.handleEvents(events);\n        this._scheduleRender();\n    }\n    onConfigurationChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        this._applyLayout();\n        return false;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return false;\n    }\n    onFocusChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    onThemeChanged(e) {\n        this._context.theme.update(e.theme);\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    // --- end event handlers\n    dispose() {\n        if (this._renderAnimationFrame !== null) {\n            this._renderAnimationFrame.dispose();\n            this._renderAnimationFrame = null;\n        }\n        this._contentWidgets.overflowingContentWidgetsDomNode.domNode.remove();\n        this._context.removeEventHandler(this);\n        this._viewLines.dispose();\n        // Destroy view parts\n        for (const viewPart of this._viewParts) {\n            viewPart.dispose();\n        }\n        super.dispose();\n    }\n    _scheduleRender() {\n        if (this._renderAnimationFrame === null) {\n            this._renderAnimationFrame = dom.runAtThisOrScheduleAtNextAnimationFrame(this._onRenderScheduled.bind(this), 100);\n        }\n    }\n    _onRenderScheduled() {\n        this._renderAnimationFrame = null;\n        this._flushAccumulatedAndRenderNow();\n    }\n    _renderNow() {\n        safeInvokeNoArg(() => this._actualRender());\n    }\n    _getViewPartsToRender() {\n        const result = [];\n        let resultLen = 0;\n        for (const viewPart of this._viewParts) {\n            if (viewPart.shouldRender()) {\n                result[resultLen++] = viewPart;\n            }\n        }\n        return result;\n    }\n    _actualRender() {\n        if (!dom.isInDOM(this.domNode.domNode)) {\n            return;\n        }\n        let viewPartsToRender = this._getViewPartsToRender();\n        if (!this._viewLines.shouldRender() && viewPartsToRender.length === 0) {\n            // Nothing to render\n            return;\n        }\n        const partialViewportData = this._context.viewLayout.getLinesViewportData();\n        this._context.viewModel.setViewport(partialViewportData.startLineNumber, partialViewportData.endLineNumber, partialViewportData.centeredLineNumber);\n        const viewportData = new ViewportData(this._selections, partialViewportData, this._context.viewLayout.getWhitespaceViewportData(), this._context.viewModel);\n        if (this._contentWidgets.shouldRender()) {\n            // Give the content widgets a chance to set their max width before a possible synchronous layout\n            this._contentWidgets.onBeforeRender(viewportData);\n        }\n        if (this._viewLines.shouldRender()) {\n            this._viewLines.renderText(viewportData);\n            this._viewLines.onDidRender();\n            // Rendering of viewLines might cause scroll events to occur, so collect view parts to render again\n            viewPartsToRender = this._getViewPartsToRender();\n        }\n        const renderingContext = new RenderingContext(this._context.viewLayout, viewportData, this._viewLines);\n        // Render the rest of the parts\n        for (const viewPart of viewPartsToRender) {\n            viewPart.prepareRender(renderingContext);\n        }\n        for (const viewPart of viewPartsToRender) {\n            viewPart.render(renderingContext);\n            viewPart.onDidRender();\n        }\n    }\n    // --- BEGIN CodeEditor helpers\n    delegateVerticalScrollbarMouseDown(browserEvent) {\n        this._scrollbar.delegateVerticalScrollbarMouseDown(browserEvent);\n    }\n    restoreState(scrollPosition) {\n        this._context.viewModel.viewLayout.setScrollPosition({ scrollTop: scrollPosition.scrollTop }, 1 /* Immediate */);\n        this._context.viewModel.tokenizeViewport();\n        this._renderNow();\n        this._viewLines.updateLineWidths();\n        this._context.viewModel.viewLayout.setScrollPosition({ scrollLeft: scrollPosition.scrollLeft }, 1 /* Immediate */);\n    }\n    getOffsetForColumn(modelLineNumber, modelColumn) {\n        const modelPosition = this._context.viewModel.model.validatePosition({\n            lineNumber: modelLineNumber,\n            column: modelColumn\n        });\n        const viewPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        this._flushAccumulatedAndRenderNow();\n        const visibleRange = this._viewLines.visibleRangeForPosition(new Position(viewPosition.lineNumber, viewPosition.column));\n        if (!visibleRange) {\n            return -1;\n        }\n        return visibleRange.left;\n    }\n    getTargetAtClientPoint(clientX, clientY) {\n        const mouseTarget = this._pointerHandler.getTargetAtClientPoint(clientX, clientY);\n        if (!mouseTarget) {\n            return null;\n        }\n        return ViewUserInputEvents.convertViewToModelMouseTarget(mouseTarget, this._context.viewModel.coordinatesConverter);\n    }\n    createOverviewRuler(cssClassName) {\n        return new OverviewRuler(this._context, cssClassName);\n    }\n    change(callback) {\n        this._viewZones.changeViewZones(callback);\n        this._scheduleRender();\n    }\n    render(now, everything) {\n        if (everything) {\n            // Force everything to render...\n            this._viewLines.forceShouldRender();\n            for (const viewPart of this._viewParts) {\n                viewPart.forceShouldRender();\n            }\n        }\n        if (now) {\n            this._flushAccumulatedAndRenderNow();\n        }\n        else {\n            this._scheduleRender();\n        }\n    }\n    focus() {\n        this._textAreaHandler.focusTextArea();\n    }\n    isFocused() {\n        return this._textAreaHandler.isFocused();\n    }\n    setAriaOptions(options) {\n        this._textAreaHandler.setAriaOptions(options);\n    }\n    addContentWidget(widgetData) {\n        this._contentWidgets.addWidget(widgetData.widget);\n        this.layoutContentWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutContentWidget(widgetData) {\n        let newRange = widgetData.position ? widgetData.position.range || null : null;\n        if (newRange === null) {\n            const newPosition = widgetData.position ? widgetData.position.position : null;\n            if (newPosition !== null) {\n                newRange = new Range(newPosition.lineNumber, newPosition.column, newPosition.lineNumber, newPosition.column);\n            }\n        }\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\n        this._contentWidgets.setWidgetPosition(widgetData.widget, newRange, newPreference);\n        this._scheduleRender();\n    }\n    removeContentWidget(widgetData) {\n        this._contentWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n    addOverlayWidget(widgetData) {\n        this._overlayWidgets.addWidget(widgetData.widget);\n        this.layoutOverlayWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutOverlayWidget(widgetData) {\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\n        const shouldRender = this._overlayWidgets.setWidgetPosition(widgetData.widget, newPreference);\n        if (shouldRender) {\n            this._scheduleRender();\n        }\n    }\n    removeOverlayWidget(widgetData) {\n        this._overlayWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n}\nfunction safeInvokeNoArg(func) {\n    try {\n        return func();\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { LineInjectedText } from '../../common/textModelEvents.js';\nimport { ModelLineProjectionData } from '../../common/modelLineProjectionData.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('domLineBreaksComputer', { createHTML: value => value });\nexport class DOMLineBreaksComputerFactory {\n    static create() {\n        return new DOMLineBreaksComputerFactory();\n    }\n    constructor() {\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent) {\n        const requests = [];\n        const injectedTexts = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n            },\n            finalize: () => {\n                return createLineBreaks(requests, fontInfo, tabSize, wrappingColumn, wrappingIndent, injectedTexts);\n            }\n        };\n    }\n}\nfunction createLineBreaks(requests, fontInfo, tabSize, firstLineBreakColumn, wrappingIndent, injectedTextsPerLine) {\n    var _a;\n    function createEmptyLineBreakWithPossiblyInjectedText(requestIdx) {\n        const injectedTexts = injectedTextsPerLine[requestIdx];\n        if (injectedTexts) {\n            const lineText = LineInjectedText.applyInjectedText(requests[requestIdx], injectedTexts);\n            const injectionOptions = injectedTexts.map(t => t.options);\n            const injectionOffsets = injectedTexts.map(text => text.column - 1);\n            // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n            // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n            return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n        }\n        else {\n            return null;\n        }\n    }\n    if (firstLineBreakColumn === -1) {\n        const result = [];\n        for (let i = 0, len = requests.length; i < len; i++) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n        }\n        return result;\n    }\n    const overallWidth = Math.round(firstLineBreakColumn * fontInfo.typicalHalfwidthCharacterWidth);\n    const additionalIndent = (wrappingIndent === 3 /* DeepIndent */ ? 2 : wrappingIndent === 2 /* Indent */ ? 1 : 0);\n    const additionalIndentSize = Math.round(tabSize * additionalIndent);\n    const additionalIndentLength = Math.ceil(fontInfo.spaceWidth * additionalIndentSize);\n    const containerDomNode = document.createElement('div');\n    applyFontInfo(containerDomNode, fontInfo);\n    const sb = createStringBuilder(10000);\n    const firstNonWhitespaceIndices = [];\n    const wrappedTextIndentLengths = [];\n    const renderLineContents = [];\n    const allCharOffsets = [];\n    const allVisibleColumns = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineContent = LineInjectedText.applyInjectedText(requests[i], injectedTextsPerLine[i]);\n        let firstNonWhitespaceIndex = 0;\n        let wrappedTextIndentLength = 0;\n        let width = overallWidth;\n        if (wrappingIndent !== 0 /* None */) {\n            firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n            if (firstNonWhitespaceIndex === -1) {\n                // all whitespace line\n                firstNonWhitespaceIndex = 0;\n            }\n            else {\n                // Track existing indent\n                for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                    const charWidth = (lineContent.charCodeAt(i) === 9 /* Tab */\n                        ? (tabSize - (wrappedTextIndentLength % tabSize))\n                        : 1);\n                    wrappedTextIndentLength += charWidth;\n                }\n                const indentWidth = Math.ceil(fontInfo.spaceWidth * wrappedTextIndentLength);\n                // Force sticking to beginning of line if no character would fit except for the indentation\n                if (indentWidth + fontInfo.typicalFullwidthCharacterWidth > overallWidth) {\n                    firstNonWhitespaceIndex = 0;\n                    wrappedTextIndentLength = 0;\n                }\n                else {\n                    width = overallWidth - indentWidth;\n                }\n            }\n        }\n        const renderLineContent = lineContent.substr(firstNonWhitespaceIndex);\n        const tmp = renderLine(renderLineContent, wrappedTextIndentLength, tabSize, width, sb, additionalIndentLength);\n        firstNonWhitespaceIndices[i] = firstNonWhitespaceIndex;\n        wrappedTextIndentLengths[i] = wrappedTextIndentLength;\n        renderLineContents[i] = renderLineContent;\n        allCharOffsets[i] = tmp[0];\n        allVisibleColumns[i] = tmp[1];\n    }\n    const html = sb.build();\n    const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(html)) !== null && _a !== void 0 ? _a : html;\n    containerDomNode.innerHTML = trustedhtml;\n    containerDomNode.style.position = 'absolute';\n    containerDomNode.style.top = '10000';\n    containerDomNode.style.wordWrap = 'break-word';\n    document.body.appendChild(containerDomNode);\n    const range = document.createRange();\n    const lineDomNodes = Array.prototype.slice.call(containerDomNode.children, 0);\n    const result = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineDomNode = lineDomNodes[i];\n        const breakOffsets = readLineBreaks(range, lineDomNode, renderLineContents[i], allCharOffsets[i]);\n        if (breakOffsets === null) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n            continue;\n        }\n        const firstNonWhitespaceIndex = firstNonWhitespaceIndices[i];\n        const wrappedTextIndentLength = wrappedTextIndentLengths[i] + additionalIndentSize;\n        const visibleColumns = allVisibleColumns[i];\n        const breakOffsetsVisibleColumn = [];\n        for (let j = 0, len = breakOffsets.length; j < len; j++) {\n            breakOffsetsVisibleColumn[j] = visibleColumns[breakOffsets[j]];\n        }\n        if (firstNonWhitespaceIndex !== 0) {\n            // All break offsets are relative to the renderLineContent, make them absolute again\n            for (let j = 0, len = breakOffsets.length; j < len; j++) {\n                breakOffsets[j] += firstNonWhitespaceIndex;\n            }\n        }\n        let injectionOptions;\n        let injectionOffsets;\n        const curInjectedTexts = injectedTextsPerLine[i];\n        if (curInjectedTexts) {\n            injectionOptions = curInjectedTexts.map(t => t.options);\n            injectionOffsets = curInjectedTexts.map(text => text.column - 1);\n        }\n        else {\n            injectionOptions = null;\n            injectionOffsets = null;\n        }\n        result[i] = new ModelLineProjectionData(injectionOffsets, injectionOptions, breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength);\n    }\n    document.body.removeChild(containerDomNode);\n    return result;\n}\nfunction renderLine(lineContent, initialVisibleColumn, tabSize, width, sb, wrappingIndentLength) {\n    if (wrappingIndentLength !== 0) {\n        const hangingOffset = String(wrappingIndentLength);\n        sb.appendASCIIString('<div style=\"text-indent: -');\n        sb.appendASCIIString(hangingOffset);\n        sb.appendASCIIString('px; padding-left: ');\n        sb.appendASCIIString(hangingOffset);\n        sb.appendASCIIString('px; box-sizing: border-box; width:');\n    }\n    else {\n        sb.appendASCIIString('<div style=\"width:');\n    }\n    sb.appendASCIIString(String(width));\n    sb.appendASCIIString('px;\">');\n    // if (containsRTL) {\n    // \tsb.appendASCIIString('\" dir=\"ltr');\n    // }\n    const len = lineContent.length;\n    let visibleColumn = initialVisibleColumn;\n    let charOffset = 0;\n    const charOffsets = [];\n    const visibleColumns = [];\n    let nextCharCode = (0 < len ? lineContent.charCodeAt(0) : 0 /* Null */);\n    sb.appendASCIIString('<span>');\n    for (let charIndex = 0; charIndex < len; charIndex++) {\n        if (charIndex !== 0 && charIndex % 16384 /* SPAN_MODULO_LIMIT */ === 0) {\n            sb.appendASCIIString('</span><span>');\n        }\n        charOffsets[charIndex] = charOffset;\n        visibleColumns[charIndex] = visibleColumn;\n        const charCode = nextCharCode;\n        nextCharCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* Null */);\n        let producedCharacters = 1;\n        let charWidth = 1;\n        switch (charCode) {\n            case 9 /* Tab */:\n                producedCharacters = (tabSize - (visibleColumn % tabSize));\n                charWidth = producedCharacters;\n                for (let space = 1; space <= producedCharacters; space++) {\n                    if (space < producedCharacters) {\n                        sb.write1(0xA0); // &nbsp;\n                    }\n                    else {\n                        sb.appendASCII(32 /* Space */);\n                    }\n                }\n                break;\n            case 32 /* Space */:\n                if (nextCharCode === 32 /* Space */) {\n                    sb.write1(0xA0); // &nbsp;\n                }\n                else {\n                    sb.appendASCII(32 /* Space */);\n                }\n                break;\n            case 60 /* LessThan */:\n                sb.appendASCIIString('&lt;');\n                break;\n            case 62 /* GreaterThan */:\n                sb.appendASCIIString('&gt;');\n                break;\n            case 38 /* Ampersand */:\n                sb.appendASCIIString('&amp;');\n                break;\n            case 0 /* Null */:\n                sb.appendASCIIString('&#00;');\n                break;\n            case 65279 /* UTF8_BOM */:\n            case 8232 /* LINE_SEPARATOR */:\n            case 8233 /* PARAGRAPH_SEPARATOR */:\n            case 133 /* NEXT_LINE */:\n                sb.write1(0xFFFD);\n                break;\n            default:\n                if (strings.isFullWidthCharacter(charCode)) {\n                    charWidth++;\n                }\n                if (charCode < 32) {\n                    sb.write1(9216 + charCode);\n                }\n                else {\n                    sb.write1(charCode);\n                }\n        }\n        charOffset += producedCharacters;\n        visibleColumn += charWidth;\n    }\n    sb.appendASCIIString('</span>');\n    charOffsets[lineContent.length] = charOffset;\n    visibleColumns[lineContent.length] = visibleColumn;\n    sb.appendASCIIString('</div>');\n    return [charOffsets, visibleColumns];\n}\nfunction readLineBreaks(range, lineDomNode, lineContent, charOffsets) {\n    if (lineContent.length <= 1) {\n        return null;\n    }\n    const spans = Array.prototype.slice.call(lineDomNode.children, 0);\n    const breakOffsets = [];\n    try {\n        discoverBreaks(range, spans, charOffsets, 0, null, lineContent.length - 1, null, breakOffsets);\n    }\n    catch (err) {\n        console.log(err);\n        return null;\n    }\n    if (breakOffsets.length === 0) {\n        return null;\n    }\n    breakOffsets.push(lineContent.length);\n    return breakOffsets;\n}\nfunction discoverBreaks(range, spans, charOffsets, low, lowRects, high, highRects, result) {\n    if (low === high) {\n        return;\n    }\n    lowRects = lowRects || readClientRect(range, spans, charOffsets[low], charOffsets[low + 1]);\n    highRects = highRects || readClientRect(range, spans, charOffsets[high], charOffsets[high + 1]);\n    if (Math.abs(lowRects[0].top - highRects[0].top) <= 0.1) {\n        // same line\n        return;\n    }\n    // there is at least one line break between these two offsets\n    if (low + 1 === high) {\n        // the two characters are adjacent, so the line break must be exactly between them\n        result.push(high);\n        return;\n    }\n    const mid = low + ((high - low) / 2) | 0;\n    const midRects = readClientRect(range, spans, charOffsets[mid], charOffsets[mid + 1]);\n    discoverBreaks(range, spans, charOffsets, low, lowRects, mid, midRects, result);\n    discoverBreaks(range, spans, charOffsets, mid, midRects, high, highRects, result);\n}\nfunction readClientRect(range, spans, startOffset, endOffset) {\n    range.setStart(spans[(startOffset / 16384 /* SPAN_MODULO_LIMIT */) | 0].firstChild, startOffset % 16384 /* SPAN_MODULO_LIMIT */);\n    range.setEnd(spans[(endOffset / 16384 /* SPAN_MODULO_LIMIT */) | 0].firstChild, endOffset % 16384 /* SPAN_MODULO_LIMIT */);\n    return range.getClientRects();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ViewEventHandler } from '../../common/viewEventHandler.js';\nexport class DynamicViewOverlay extends ViewEventHandler {\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorActiveLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._readConfig();\n        this._lastCursorModelPosition = new Position(1, 1);\n        this._renderResult = null;\n        this._activeLineNumber = 1;\n        this._context.addEventHandler(this);\n    }\n    _readConfig() {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(59 /* lineHeight */);\n        const lineNumbers = options.get(60 /* lineNumbers */);\n        this._renderLineNumbers = lineNumbers.renderType;\n        this._renderCustomLineNumbers = lineNumbers.renderFn;\n        this._renderFinalNewline = options.get(84 /* renderFinalNewline */);\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n        this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        this._readConfig();\n        return true;\n    }\n    onCursorStateChanged(e) {\n        const primaryViewPosition = e.selections[0].getPosition();\n        this._lastCursorModelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n        let shouldRender = false;\n        if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n            this._activeLineNumber = primaryViewPosition.lineNumber;\n            shouldRender = true;\n        }\n        if (this._renderLineNumbers === 2 /* Relative */ || this._renderLineNumbers === 3 /* Interval */) {\n            shouldRender = true;\n        }\n        return shouldRender;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getLineRenderLineNumber(viewLineNumber) {\n        const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n        if (modelPosition.column !== 1) {\n            return '';\n        }\n        const modelLineNumber = modelPosition.lineNumber;\n        if (this._renderCustomLineNumbers) {\n            return this._renderCustomLineNumbers(modelLineNumber);\n        }\n        if (this._renderLineNumbers === 2 /* Relative */) {\n            const diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n            if (diff === 0) {\n                return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n            }\n            return String(diff);\n        }\n        if (this._renderLineNumbers === 3 /* Interval */) {\n            if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n                return String(modelLineNumber);\n            }\n            if (modelLineNumber % 10 === 0) {\n                return String(modelLineNumber);\n            }\n            return '';\n        }\n        return String(modelLineNumber);\n    }\n    prepareRender(ctx) {\n        if (this._renderLineNumbers === 0 /* Off */) {\n            this._renderResult = null;\n            return;\n        }\n        const lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const common = '<div class=\"' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft + 'px;width:' + this._lineNumbersWidth + 'px;\">';\n        const lineCount = this._context.viewModel.getLineCount();\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            if (!this._renderFinalNewline) {\n                if (lineNumber === lineCount && this._context.viewModel.getLineLength(lineNumber) === 0) {\n                    // Do not render last (empty) line\n                    output[lineIndex] = '';\n                    continue;\n                }\n            }\n            const renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n            if (renderLineNumber) {\n                if (lineNumber === this._activeLineNumber) {\n                    output[lineIndex] = ('<div class=\"active-line-number ' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft + 'px;width:' + this._lineNumbersWidth + 'px;\">'\n                        + renderLineNumber\n                        + '</div>');\n                }\n                else {\n                    output[lineIndex] = (common\n                        + renderLineNumber\n                        + '</div>');\n                }\n            }\n            else {\n                output[lineIndex] = '';\n            }\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nLineNumbersOverlay.CLASS_NAME = 'line-numbers';\n// theming\nregisterThemingParticipant((theme, collector) => {\n    const lineNumbers = theme.getColor(editorLineNumbers);\n    if (lineNumbers) {\n        collector.addRule(`.monaco-editor .line-numbers { color: ${lineNumbers}; }`);\n    }\n    const activeLineNumber = theme.getColor(editorActiveLineNumber);\n    if (activeLineNumber) {\n        collector.addRule(`.monaco-editor .line-numbers.active-line-number { color: ${activeLineNumber}; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { FloatHorizontalRange } from '../../view/renderingContext.js';\nexport class RangeUtil {\n    static _createRange() {\n        if (!this._handyReadyRange) {\n            this._handyReadyRange = document.createRange();\n        }\n        return this._handyReadyRange;\n    }\n    static _detachRange(range, endNode) {\n        // Move range out of the span node, IE doesn't like having many ranges in\n        // the same spot and will act badly for lines containing dashes ('-')\n        range.selectNodeContents(endNode);\n    }\n    static _readClientRects(startElement, startOffset, endElement, endOffset, endNode) {\n        const range = this._createRange();\n        try {\n            range.setStart(startElement, startOffset);\n            range.setEnd(endElement, endOffset);\n            return range.getClientRects();\n        }\n        catch (e) {\n            // This is life ...\n            return null;\n        }\n        finally {\n            this._detachRange(range, endNode);\n        }\n    }\n    static _mergeAdjacentRanges(ranges) {\n        if (ranges.length === 1) {\n            // There is nothing to merge\n            return ranges;\n        }\n        ranges.sort(FloatHorizontalRange.compare);\n        const result = [];\n        let resultLen = 0;\n        let prev = ranges[0];\n        for (let i = 1, len = ranges.length; i < len; i++) {\n            const range = ranges[i];\n            if (prev.left + prev.width + 0.9 /* account for browser's rounding errors*/ >= range.left) {\n                prev.width = Math.max(prev.width, range.left + range.width - prev.left);\n            }\n            else {\n                result[resultLen++] = prev;\n                prev = range;\n            }\n        }\n        result[resultLen++] = prev;\n        return result;\n    }\n    static _createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale) {\n        if (!clientRects || clientRects.length === 0) {\n            return null;\n        }\n        // We go through FloatHorizontalRange because it has been observed in bi-di text\n        // that the clientRects are not coming in sorted from the browser\n        const result = [];\n        for (let i = 0, len = clientRects.length; i < len; i++) {\n            const clientRect = clientRects[i];\n            result[i] = new FloatHorizontalRange(Math.max(0, (clientRect.left - clientRectDeltaLeft) / clientRectScale), clientRect.width / clientRectScale);\n        }\n        return this._mergeAdjacentRanges(result);\n    }\n    static readHorizontalRanges(domNode, startChildIndex, startOffset, endChildIndex, endOffset, clientRectDeltaLeft, clientRectScale, endNode) {\n        // Panic check\n        const min = 0;\n        const max = domNode.children.length - 1;\n        if (min > max) {\n            return null;\n        }\n        startChildIndex = Math.min(max, Math.max(min, startChildIndex));\n        endChildIndex = Math.min(max, Math.max(min, endChildIndex));\n        if (startChildIndex === endChildIndex && startOffset === endOffset && startOffset === 0 && !domNode.children[startChildIndex].firstChild) {\n            // We must find the position at the beginning of a <span>\n            // To cover cases of empty <span>s, avoid using a range and use the <span>'s bounding box\n            const clientRects = domNode.children[startChildIndex].getClientRects();\n            return this._createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale);\n        }\n        // If crossing over to a span only to select offset 0, then use the previous span's maximum offset\n        // Chrome is buggy and doesn't handle 0 offsets well sometimes.\n        if (startChildIndex !== endChildIndex) {\n            if (endChildIndex > 0 && endOffset === 0) {\n                endChildIndex--;\n                endOffset = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        let startElement = domNode.children[startChildIndex].firstChild;\n        let endElement = domNode.children[endChildIndex].firstChild;\n        if (!startElement || !endElement) {\n            // When having an empty <span> (without any text content), try to move to the previous <span>\n            if (!startElement && startOffset === 0 && startChildIndex > 0) {\n                startElement = domNode.children[startChildIndex - 1].firstChild;\n                startOffset = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n            }\n            if (!endElement && endOffset === 0 && endChildIndex > 0) {\n                endElement = domNode.children[endChildIndex - 1].firstChild;\n                endOffset = 1073741824 /* MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        if (!startElement || !endElement) {\n            return null;\n        }\n        startOffset = Math.min(startElement.textContent.length, Math.max(0, startOffset));\n        endOffset = Math.min(endElement.textContent.length, Math.max(0, endOffset));\n        const clientRects = this._readClientRects(startElement, startOffset, endElement, endOffset, endNode);\n        return this._createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RangeUtil } from './rangeUtil.js';\nimport { FloatHorizontalRange, VisibleRanges } from '../../view/renderingContext.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine, LineRange, DomPosition } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { ColorScheme } from '../../../../platform/theme/common/theme.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nconst canUseFastRenderedViewLine = (function () {\n    if (platform.isNative) {\n        // In VSCode we know very well when the zoom level changes\n        return true;\n    }\n    if (platform.isLinux || browser.isFirefox || browser.isSafari) {\n        // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n        // --\n        // Even though we read character widths correctly, having read them at a specific zoom level\n        // does not mean they are the same at the current zoom level.\n        // --\n        // This could be improved if we ever figure out how to get an event when browsers zoom,\n        // but until then we have to stick with reading client rects.\n        // --\n        // The same has been observed with Firefox on Windows7\n        // --\n        // The same has been oversved with Safari\n        return false;\n    }\n    return true;\n})();\nlet monospaceAssumptionsAreValid = true;\nexport class DomReadingContext {\n    constructor(domNode, endNode) {\n        this._domNode = domNode;\n        this._clientRectDeltaLeft = 0;\n        this._clientRectScale = 1;\n        this._clientRectRead = false;\n        this.endNode = endNode;\n    }\n    readClientRect() {\n        if (!this._clientRectRead) {\n            this._clientRectRead = true;\n            const rect = this._domNode.getBoundingClientRect();\n            this._clientRectDeltaLeft = rect.left;\n            this._clientRectScale = rect.width / this._domNode.offsetWidth;\n        }\n    }\n    get clientRectDeltaLeft() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectDeltaLeft;\n    }\n    get clientRectScale() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectScale;\n    }\n}\nexport class ViewLineOptions {\n    constructor(config, themeType) {\n        this.themeType = themeType;\n        const options = config.options;\n        const fontInfo = options.get(44 /* fontInfo */);\n        this.renderWhitespace = options.get(88 /* renderWhitespace */);\n        this.renderControlCharacters = options.get(83 /* renderControlCharacters */);\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.useMonospaceOptimizations = (fontInfo.isMonospace\n            && !options.get(29 /* disableMonospaceOptimizations */));\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(59 /* lineHeight */);\n        this.stopRenderingLineAfter = options.get(105 /* stopRenderingLineAfter */);\n        this.fontLigatures = options.get(45 /* fontLigatures */);\n    }\n    equals(other) {\n        return (this.themeType === other.themeType\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.fontLigatures === other.fontLigatures);\n    }\n}\nexport class ViewLine {\n    constructor(options) {\n        this._options = options;\n        this._isMaybeInvalid = true;\n        this._renderedViewLine = null;\n    }\n    // --- begin IVisibleLineData\n    getDomNode() {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            return this._renderedViewLine.domNode.domNode;\n        }\n        return null;\n    }\n    setDomNode(domNode) {\n        if (this._renderedViewLine) {\n            this._renderedViewLine.domNode = createFastDomNode(domNode);\n        }\n        else {\n            throw new Error('I have no rendered view line to set the dom node to...');\n        }\n    }\n    onContentChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onTokensChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onDecorationsChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onOptionsChanged(newOptions) {\n        this._isMaybeInvalid = true;\n        this._options = newOptions;\n    }\n    onSelectionChanged() {\n        if (this._options.themeType === ColorScheme.HIGH_CONTRAST || this._options.renderWhitespace === 'selection') {\n            this._isMaybeInvalid = true;\n            return true;\n        }\n        return false;\n    }\n    renderLine(lineNumber, deltaTop, viewportData, sb) {\n        if (this._isMaybeInvalid === false) {\n            // it appears that nothing relevant has changed\n            return false;\n        }\n        this._isMaybeInvalid = false;\n        const lineData = viewportData.getViewLineRenderingData(lineNumber);\n        const options = this._options;\n        const actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\n        // Only send selection information when needed for rendering whitespace\n        let selectionsOnLine = null;\n        if (options.themeType === ColorScheme.HIGH_CONTRAST || this._options.renderWhitespace === 'selection') {\n            const selections = viewportData.selections;\n            for (const selection of selections) {\n                if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                    // Selection does not intersect line\n                    continue;\n                }\n                const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                if (startColumn < endColumn) {\n                    if (options.themeType === ColorScheme.HIGH_CONTRAST || this._options.renderWhitespace !== 'selection') {\n                        actualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', 0 /* Regular */));\n                    }\n                    else {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n        }\n        const renderLineInput = new RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, lineData.startVisibleColumn, options.spaceWidth, options.middotWidth, options.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, selectionsOnLine);\n        if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n            // no need to do anything, we have the same render input\n            return false;\n        }\n        sb.appendASCIIString('<div style=\"top:');\n        sb.appendASCIIString(String(deltaTop));\n        sb.appendASCIIString('px;height:');\n        sb.appendASCIIString(String(this._options.lineHeight));\n        sb.appendASCIIString('px;\" class=\"');\n        sb.appendASCIIString(ViewLine.CLASS_NAME);\n        sb.appendASCIIString('\">');\n        const output = renderViewLine(renderLineInput, sb);\n        sb.appendASCIIString('</div>');\n        let renderedViewLine = null;\n        if (monospaceAssumptionsAreValid && canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === 0 /* None */) {\n            if (lineData.content.length < 300 && renderLineInput.lineTokens.getCount() < 100) {\n                // Browser rounding errors have been observed in Chrome and IE, so using the fast\n                // view line only for short lines. Please test before removing the length check...\n                // ---\n                // Another rounding error has been observed on Linux in VSCode, where <span> width\n                // rounding errors add up to an observable large number...\n                // ---\n                // Also see another example of rounding errors on Windows in\n                // https://github.com/microsoft/vscode/issues/33178\n                renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\n            }\n        }\n        if (!renderedViewLine) {\n            renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\n        }\n        this._renderedViewLine = renderedViewLine;\n        return true;\n    }\n    layoutLine(lineNumber, deltaTop) {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            this._renderedViewLine.domNode.setTop(deltaTop);\n            this._renderedViewLine.domNode.setHeight(this._options.lineHeight);\n        }\n    }\n    // --- end IVisibleLineData\n    getWidth() {\n        if (!this._renderedViewLine) {\n            return 0;\n        }\n        return this._renderedViewLine.getWidth();\n    }\n    getWidthIsFast() {\n        if (!this._renderedViewLine) {\n            return true;\n        }\n        return this._renderedViewLine.getWidthIsFast();\n    }\n    needsMonospaceFontCheck() {\n        if (!this._renderedViewLine) {\n            return false;\n        }\n        return (this._renderedViewLine instanceof FastRenderedViewLine);\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this._renderedViewLine) {\n            return monospaceAssumptionsAreValid;\n        }\n        if (this._renderedViewLine instanceof FastRenderedViewLine) {\n            return this._renderedViewLine.monospaceAssumptionsAreValid();\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    onMonospaceAssumptionsInvalidated() {\n        if (this._renderedViewLine && this._renderedViewLine instanceof FastRenderedViewLine) {\n            this._renderedViewLine = this._renderedViewLine.toSlowRenderedLine();\n        }\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this._renderedViewLine) {\n            return null;\n        }\n        startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n        endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n        const stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter;\n        let outsideRenderedLine = false;\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\n            // This range is obviously not visible\n            outsideRenderedLine = true;\n        }\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\n            startColumn = stopRenderingLineAfter + 1;\n        }\n        if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\n            endColumn = stopRenderingLineAfter + 1;\n        }\n        const horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(lineNumber, startColumn, endColumn, context);\n        if (horizontalRanges && horizontalRanges.length > 0) {\n            return new VisibleRanges(outsideRenderedLine, horizontalRanges);\n        }\n        return null;\n    }\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        if (!this._renderedViewLine) {\n            return 1;\n        }\n        return this._renderedViewLine.getColumnOfNodeOffset(lineNumber, spanNode, offset);\n    }\n}\nViewLine.CLASS_NAME = 'view-line';\n/**\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\n */\nclass FastRenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._charWidth = renderLineInput.spaceWidth;\n    }\n    getWidth() {\n        return Math.round(this._getCharPosition(this._characterMapping.length));\n    }\n    getWidthIsFast() {\n        return true;\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this.domNode) {\n            return monospaceAssumptionsAreValid;\n        }\n        const expectedWidth = this.getWidth();\n        const actualWidth = this.domNode.domNode.firstChild.offsetWidth;\n        if (Math.abs(expectedWidth - actualWidth) >= 2) {\n            // more than 2px off\n            console.warn(`monospace assumptions have been violated, therefore disabling monospace optimizations!`);\n            monospaceAssumptionsAreValid = false;\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    toSlowRenderedLine() {\n        return createRenderedLine(this.domNode, this.input, this._characterMapping, false, 0 /* None */);\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        const startPosition = this._getCharPosition(startColumn);\n        const endPosition = this._getCharPosition(endColumn);\n        return [new FloatHorizontalRange(startPosition, endPosition - startPosition)];\n    }\n    _getCharPosition(column) {\n        const charOffset = this._characterMapping.getAbsoluteOffset(column);\n        return this._charWidth * charOffset;\n    }\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        const spanNodeTextContentLength = spanNode.textContent.length;\n        let spanIndex = -1;\n        while (spanNode) {\n            spanNode = spanNode.previousSibling;\n            spanIndex++;\n        }\n        return this._characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n    }\n}\n/**\n * Every time we render a line, we save what we have rendered in an instance of this class.\n */\nclass RenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n        this._containsForeignElements = containsForeignElements;\n        this._cachedWidth = -1;\n        this._pixelOffsetCache = null;\n        if (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\n            this._pixelOffsetCache = new Float32Array(Math.max(2, this._characterMapping.length + 1));\n            for (let column = 0, len = this._characterMapping.length; column <= len; column++) {\n                this._pixelOffsetCache[column] = -1;\n            }\n        }\n    }\n    // --- Reading from the DOM methods\n    _getReadingTarget(myDomNode) {\n        return myDomNode.domNode.firstChild;\n    }\n    /**\n     * Width of the line in pixels\n     */\n    getWidth() {\n        if (!this.domNode) {\n            return 0;\n        }\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n        }\n        return this._cachedWidth;\n    }\n    getWidthIsFast() {\n        if (this._cachedWidth === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Visible ranges for a model range\n     */\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this.domNode) {\n            return null;\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const startOffset = this._readPixelOffset(this.domNode, lineNumber, startColumn, context);\n            if (startOffset === -1) {\n                return null;\n            }\n            const endOffset = this._readPixelOffset(this.domNode, lineNumber, endColumn, context);\n            if (endOffset === -1) {\n                return null;\n            }\n            return [new FloatHorizontalRange(startOffset, endOffset - startOffset)];\n        }\n        return this._readVisibleRangesForRange(this.domNode, lineNumber, startColumn, endColumn, context);\n    }\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        if (startColumn === endColumn) {\n            const pixelOffset = this._readPixelOffset(domNode, lineNumber, startColumn, context);\n            if (pixelOffset === -1) {\n                return null;\n            }\n            else {\n                return [new FloatHorizontalRange(pixelOffset, 0)];\n            }\n        }\n        else {\n            return this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\n        }\n    }\n    _readPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            if (this._containsForeignElements === 0 /* None */) {\n                // We can assume the line is really empty\n                return 0;\n            }\n            if (this._containsForeignElements === 2 /* After */) {\n                // We have foreign elements after the (empty) line\n                return 0;\n            }\n            if (this._containsForeignElements === 1 /* Before */) {\n                // We have foreign elements before the (empty) line\n                return this.getWidth();\n            }\n            // We have foreign elements before & after the (empty) line\n            const readingTarget = this._getReadingTarget(domNode);\n            if (readingTarget.firstChild) {\n                return readingTarget.firstChild.offsetWidth;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const cachedPixelOffset = this._pixelOffsetCache[column];\n            if (cachedPixelOffset !== -1) {\n                return cachedPixelOffset;\n            }\n            const result = this._actualReadPixelOffset(domNode, lineNumber, column, context);\n            this._pixelOffsetCache[column] = result;\n            return result;\n        }\n        return this._actualReadPixelOffset(domNode, lineNumber, column, context);\n    }\n    _actualReadPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n            if (!r || r.length === 0) {\n                return -1;\n            }\n            return r[0].left;\n        }\n        if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0 /* None */) {\n            // This branch helps in the case of whitespace only lines which have a width set\n            return this.getWidth();\n        }\n        const domPosition = this._characterMapping.getDomPosition(column);\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        const result = r[0].left;\n        if (this.input.isBasicASCII) {\n            const charOffset = this._characterMapping.getAbsoluteOffset(column);\n            const expectedResult = Math.round(this.input.spaceWidth * charOffset);\n            if (Math.abs(expectedResult - result) <= 1) {\n                return expectedResult;\n            }\n        }\n        return result;\n    }\n    _readRawVisibleRangesForRange(domNode, startColumn, endColumn, context) {\n        if (startColumn === 1 && endColumn === this._characterMapping.length) {\n            // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n            return [new FloatHorizontalRange(0, this.getWidth())];\n        }\n        const startDomPosition = this._characterMapping.getDomPosition(startColumn);\n        const endDomPosition = this._characterMapping.getDomPosition(endColumn);\n        return RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startDomPosition.partIndex, startDomPosition.charIndex, endDomPosition.partIndex, endDomPosition.charIndex, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n    }\n    /**\n     * Returns the column for the text found at a specific offset inside a rendered dom node\n     */\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        const spanNodeTextContentLength = spanNode.textContent.length;\n        let spanIndex = -1;\n        while (spanNode) {\n            spanNode = spanNode.previousSibling;\n            spanIndex++;\n        }\n        return this._characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n    }\n}\nclass WebKitRenderedViewLine extends RenderedViewLine {\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        const output = super._readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context);\n        if (!output || output.length === 0 || startColumn === endColumn || (startColumn === 1 && endColumn === this._characterMapping.length)) {\n            return output;\n        }\n        // WebKit is buggy and returns an expanded range (to contain words in some cases)\n        // The last client rect is enlarged (I think)\n        if (!this.input.containsRTL) {\n            // This is an attempt to patch things up\n            // Find position of last column\n            const endPixelOffset = this._readPixelOffset(domNode, lineNumber, endColumn, context);\n            if (endPixelOffset !== -1) {\n                const lastRange = output[output.length - 1];\n                if (lastRange.left < endPixelOffset) {\n                    // Trim down the width of the last visible range to not go after the last column's position\n                    lastRange.width = endPixelOffset - lastRange.left;\n                }\n            }\n        }\n        return output;\n    }\n}\nconst createRenderedLine = (function () {\n    if (browser.isWebKit) {\n        return createWebKitRenderedLine;\n    }\n    return createNormalRenderedLine;\n})();\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class Margin extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._canUseLayerHinting = !options.get(28 /* disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(Margin.OUTER_CLASS_NAME);\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._glyphMarginBackgroundDomNode = createFastDomNode(document.createElement('div'));\n        this._glyphMarginBackgroundDomNode.setClassName(Margin.CLASS_NAME);\n        this._domNode.appendChild(this._glyphMarginBackgroundDomNode);\n    }\n    dispose() {\n        super.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(131 /* layoutInfo */);\n        this._canUseLayerHinting = !options.get(28 /* disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollTopChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setLayerHinting(this._canUseLayerHinting);\n        this._domNode.setContain('strict');\n        const adjustedScrollTop = ctx.scrollTop - ctx.bigNumbersDelta;\n        this._domNode.setTop(-adjustedScrollTop);\n        const height = Math.min(ctx.scrollHeight, 1000000);\n        this._domNode.setHeight(height);\n        this._domNode.setWidth(this._contentLeft);\n        this._glyphMarginBackgroundDomNode.setLeft(this._glyphMarginLeft);\n        this._glyphMarginBackgroundDomNode.setWidth(this._glyphMarginWidth);\n        this._glyphMarginBackgroundDomNode.setHeight(height);\n    }\n}\nMargin.CLASS_NAME = 'glyph-margin';\nMargin.OUTER_CLASS_NAME = 'margin';\n"],"names":["Coordinate","top","left","this","_coordinateBrand","undefined","ViewContentWidgets","context","viewDomNode","_viewDomNode","_widgets","domNode","createFastDomNode","document","createElement","PartFingerprints","setClassName","setPosition","setTop","overflowingContentWidgetsDomNode","e","Object","keys","widgetId","onConfigurationChanged","onLineMappingChanged","_widget","myWidget","Widget","_context","id","allowEditorOverflow","appendChild","setShouldRender","widget","range","preference","getId","hasOwnProperty","parentNode","removeChild","removeAttribute","suppressMouseDown","viewportData","onBeforeRender","ctx","prepareRender","render","ViewPart","actual","_actual","getDomNode","options","configuration","layoutInfo","get","_fixedOverflowWidgets","_contentWidth","contentWidth","_contentLeft","contentLeft","_lineHeight","_range","_viewRange","_preference","_cachedDomNodeOffsetWidth","_cachedDomNodeOffsetHeight","_maxWidth","_getMaxWidth","_isVisible","_renderData","setDisplay","setVisibility","setAttribute","setMaxWidth","hasChanged","_setPosition","validModelRange","viewModel","model","validateRange","coordinatesConverter","modelPositionIsVisible","getStartPosition","getEndPosition","convertModelRangeToViewRange","window","innerWidth","documentElement","offsetWidth","body","length","topLeft","bottomLeft","width","height","aboveLineTop","heightAboveLine","underLineTop","aboveTop","fitsAbove","belowTop","fitsBelow","viewportHeight","actualAboveLeft","actualBelowLeft","scrollLeft","viewportWidth","aboveLeft","belowLeft","windowSize","domNodePosition","MIN_LIMIT","Math","max","MAX_LIMIT","min","absoluteLeft","dom","StandardWindow","scrollX","delta","getDomNodePagePosition","absoluteAboveTop","scrollY","absoluteBelowTop","getClientArea","_layoutHorizontalSegmentInPage","absoluteAboveLeft","absoluteBelowLeft","visibleRangesForRange","linesVisibleRangesForRange","firstLine","lastLine","visibleRangesForLine","lineNumber","firstLineMinLeft","ranges","visibleRange","lastLineMinLeft","topForPosition","getVerticalOffsetForLineNumber","scrollTop","topForBottomLine","placement","_getTopAndBottomLeft","preferredDimensions","beforeRender","safeInvoke","offsetHeight","_layoutBoxInPage","_layoutBoxInViewport","pass","pref","coordinate","position","_prepareRenderWidgetAtExactPositionOverflowing","endLineNumber","startLineNumber","_prepareRenderWidget","afterRender","setLeft","bigNumbersDelta","fn","thisArg","args","call","_a","AbstractLineHighlightOverlay","_renderLineHighlight","_renderLineHighlightOnlyWhenFocus","_selectionIsEmpty","_focused","_cursorLineNumbers","_selections","Selection","addEventHandler","removeEventHandler","cursorsLineNumbers","map","s","positionLineNumber","sort","a","b","arrays","selectionIsEmpty","every","isEmpty","_readFromSelections","selections","scrollWidthChanged","scrollTopChanged","isFocused","_shouldRenderThis","renderedLine","_renderOne","visibleStartLineNumber","visibleEndLineNumber","len","index","renderData","lineIndex","DynamicViewOverlay","CurrentLineHighlightOverlay","className","_shouldRenderOther","scrollWidth","_shouldRenderInContent","_shouldRenderInMargin","CurrentLineMarginHighlightOverlay","registerThemingParticipant","theme","collector","lineHighlight","getColor","editorLineHighlight","addRule","isTransparent","defines","editorLineHighlightBorder","lineHighlightBorder","type","DecorationsOverlay","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_renderResult","_decorations","getDecorationsInViewport","decorations","decorationsLen","i","d","zIndex","aClassName","bClassName","Range","output","_renderWholeLineDecorations","_renderNormalDecorations","lineHeight","String","lenI","isWholeLine","decorationOutput","j","prevClassName","prevShowIfCollapsed","prevRange","showIfCollapsed","Boolean","endColumn","startColumn","getLineMaxColumn","_renderNormalDecoration","linesVisibleRanges","lenJ","lineVisibleRanges","outsideRenderedLine","singleVisibleRange","center","round","HorizontalRange","k","lenK","EditorScrollbar","linesContent","overflowGuardDomNode","scrollbar","mouseWheelScrollSensitivity","fastScrollSensitivity","scrollPredominantAxis","scrollbarOptions","listenOnDomNode","getThemeTypeSelector","useShadows","lazyRender","vertical","horizontal","verticalHasArrows","horizontalHasArrows","verticalScrollbarSize","verticalSliderSize","horizontalScrollbarSize","horizontalSliderSize","handleMouseWheel","alwaysConsumeMouseWheel","arrowSize","scrollByPage","_register","SmoothScrollableElement","viewLayout","getScrollable","scrollbarDomNode","_setLayout","onBrowserDesperateReveal","lookAtScrollTop","lookAtScrollLeft","newScrollPosition","deltaTop","getCurrentScrollTop","deltaLeft","getCurrentScrollLeft","setScrollPosition","addDisposableListener","side","setWidth","minimap","minimapWidth","setHeight","getOverviewRulerLayoutInfo","browserEvent","delegateVerticalScrollbarMouseDown","newOpts","updateOptions","updateClassName","renderNow","scrollbarShadowColor","scrollbarShadow","scrollbarSliderBackgroundColor","scrollbarSliderBackground","scrollbarSliderHoverBackgroundColor","scrollbarSliderHoverBackground","scrollbarSliderActiveBackgroundColor","scrollbarSliderActiveBackground","DecorationToRender","_decorationToRenderBrand","DedupOverlay","prevEndLineIndex","startLineIndex","endLineIndex","push","GlyphMarginOverlay","_glyphMargin","_glyphMarginLeft","glyphMarginLeft","_glyphMarginWidth","glyphMarginWidth","r","rLen","glyphMarginClassName","toRender","_render","_getDecorations","toString","common","classNames","join","IndentGuidesOverlay","_primaryPosition","wrappingInfo","fontInfo","_spaceWidth","spaceWidth","_maxIndentLeft","wrappingColumn","_bracketPairGuideOptions","newPosition","getPosition","equals","_b","_c","_d","indentation","bracketPairs","activeCursorPosition","indents","getGuidesByLine","indent","result","leftOffset","visibleRangeForPosition","Position","guide","visibleColumn","horizontalLine","bracketGuides","getBracketGuidesInRangeByLine","highlightActive","highlightActiveBracketPair","horizontalGuides","bracketPairsHorizontal","HorizontalGuidesState","includeInactive","indentGuides","getLinesIndentGuides","activeIndentStartLineNumber","activeIndentEndLineNumber","activeIndentLevel","highlightActiveIndentation","activeIndentInfo","getActiveIndentGuide","indentSize","getOptions","lineGuides","Array","bracketGuidesInLine","bracketGuidesInLineQueue","ArrayQueue","indentGuidesInLine","indentLvl","indentGuide","isActive","takeWhile","g","peeked","peek","IndentGuide","transparentToUndefined","color","editorIndentGuidesColor","editorIndentGuides","editorActiveIndentGuidesColor","editorActiveIndentGuides","colors","bracketColor","editorBracketHighlightingForeground1","guideColor","editorBracketPairGuideBackground1","guideColorActive","editorBracketPairGuideActiveBackground1","editorBracketHighlightingForeground2","editorBracketPairGuideBackground2","editorBracketPairGuideActiveBackground2","editorBracketHighlightingForeground3","editorBracketPairGuideBackground3","editorBracketPairGuideActiveBackground3","editorBracketHighlightingForeground4","editorBracketPairGuideBackground4","editorBracketPairGuideActiveBackground4","editorBracketHighlightingForeground5","editorBracketPairGuideBackground5","editorBracketPairGuideActiveBackground5","editorBracketHighlightingForeground6","editorBracketPairGuideBackground6","editorBracketPairGuideActiveBackground6","colorProvider","BracketPairGuidesClassNames","colorValues","c","effectiveGuideColor","transparent","effectiveGuideColorActive","filter","isDefined","level","getInlineClassNameOfLevel","replace","activeClassName","LastRenderedData","_currentVisibleRange","currentVisibleRange","HorizontalRevealRangeRequest","minimalReveal","startScrollTop","stopScrollTop","scrollType","minLineNumber","maxLineNumber","HorizontalRevealSelectionsRequest","selection","ViewLines","_linesContent","_textRangeRestingSpot","_visibleLines","VisibleLinesCollection","conf","_isViewportWrapping","isViewportWrapping","_revealHorizontalRightPadding","_horizontalScrollbarHeight","horizontalScrollbarHeight","_cursorSurroundingLines","_cursorSurroundingLinesStyle","_canUseLayerHinting","_viewLineOptions","ViewLineOptions","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","applyFontInfo","_maxLineWidth","_asyncUpdateLineWidths","RunOnceScheduler","_updateLineWidthsSlow","_asyncCheckMonospaceFontAssumptions","_checkMonospaceFontAssumptions","_lastRenderedData","_horizontalRevealRequest","dispose","ViewLine","_onOptionsMaybeChanged","newViewLineOptions","getStartLineNumber","getEndLineNumber","getVisibleLine","onOptionsChanged","rendStartLineNumber","rendEndLineNumber","onSelectionChanged","onDecorationsChanged","shouldRender","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","desiredScrollTop","_computeScrollTopToRevealRange","getFutureViewport","source","verticalType","validateScrollPosition","revealHorizontal","abs","scrollLeftChanged","onScrollChanged","onTokensChanged","setMaxLineWidth","onZonesChanged","spanNode","offset","viewLineDomNode","_getViewLineDomNode","_getLineNumberFor","getLineCount","column","getColumnOfNodeOffset","minColumn","getLineMinColumn","node","nodeType","parentElement","getWidth","includeNewLines","originalEndLineNumber","getCurrentVisibleRange","visibleRanges","visibleRangesLen","domReadingContext","DomReadingContext","nextLineModelLineNumber","convertViewPositionToModelPosition","getVisibleRangesForRange","LineVisibleRanges","_visibleRangesForLineRange","HorizontalPosition","_updateLineWidths","fast","localMaxLineWidth","allWidthsComputed","visibleLine","getWidthIsFast","_ensureMaxLineWidth","longestLineNumber","longestWidth","needsMonospaceFontCheck","lineWidth","monospaceAssumptionsAreValid","onMonospaceAssumptionsInvalidated","Error","renderLines","setCurrentVisibleRange","getScrollWidth","getScrollHeight","horizontalRevealRequest","onDidRender","newScrollLeft","_computeScrollLeftToReveal","maxHorizontalOffset","_updateLineWidthsFast","schedule","platform","isScheduled","setLayerHinting","setContain","adjustedScrollTop","iLineWidth","ceil","viewport","boxIsSingleRange","boxStartY","boxEndY","newScrollTop","viewportStartY","viewportEndY","minScrollTop","boxMiddleY","_computeMinimumScrolling","getCurrentViewport","viewportStartX","viewportEndX","boxStartX","boxEndX","HORIZONTAL_EXTRA_PX","viewportStart","viewportEnd","boxStart","boxEnd","revealAtStart","revealAtEnd","viewportLength","LinesDecorationsOverlay","_decorationsLeft","decorationsLeft","_decorationsWidth","decorationsWidth","linesDecorationsClassName","firstLineDecorationClassName","lineOutput","MarginViewLineDecorationsOverlay","marginClassName","allCharCodes","v","MinimapCharRenderer","charData","scale","_minimapCharRendererBrand","charDataNormal","soften","charDataLight","target","dx","dy","chCode","foregroundAlpha","backgroundColor","backgroundAlpha","fontScale","useLighterFont","force1pxHeight","charWidth","charHeight","renderHeight","console","warn","charIndex","getCharIndex","destWidth","backgroundR","backgroundG","backgroundB","deltaR","deltaG","deltaB","destAlpha","dest","data","sourceOffset","row","y","x","colorR","colorG","colorB","input","ratio","Uint8ClampedArray","toUint8","charTable","A","B","C","D","E","F","decodeData","str","prebakedMiniMaps","once","MinimapCharRendererFactory","fontFamily","lastCreated","lastFontFamily","factory","createFromSampleData","createSampleData","canvas","getContext","style","fillStyle","font","textBaseline","code","fillText","fromCharCode","getImageData","_downsample","destOffset","targetIndex","brightest","sourceY1","sourceY2","sourceX1","sourceX2","value","samples","sy","sourceRow","floor","yBalance","sx","xBalance","sourceIndex","weight","final","pixelsPerCharacter","resultLen","resultOffset","_downsampleChar","adjust","MinimapOptions","tokensColorTracker","pixelRatio","minimapLayout","minimapOpts","renderMinimap","size","minimapHeightIsEditorHeight","scrollBeyondLastLine","showSlider","minimapLeft","minimapHeight","canvasInnerWidth","minimapCanvasInnerWidth","canvasInnerHeight","minimapCanvasInnerHeight","canvasOuterWidth","minimapCanvasOuterWidth","canvasOuterHeight","minimapCanvasOuterHeight","isSampling","minimapIsSampling","editorHeight","minimapScale","minimapLineHeight","minimapCharWidth","charRenderer","create","defaultBackgroundColor","_getMinimapBackground","_getMinimapForegroundOpacity","other","themeColor","minimapBackground","RGBA8","rgba","minimapForegroundOpacity","MinimapLayout","scrollHeight","sliderNeeded","computedSliderRatio","sliderTop","sliderHeight","_computedSliderRatio","pageY","viewportStartLineNumber","viewportEndLineNumber","viewportStartLineNumberVerticalOffset","viewportContainsWhitespaceGaps","lineCount","realLineCount","previousLayout","maxMinimapSliderTop","minimapLinesFitting","logicalScrollHeight","maxLinesFitting","viewportLineCount","expectedViewportLineCount","extraLinesAtTheBottom","MinimapLine","INVALID","RenderData","renderedLayout","imageData","lines","_imageData","_renderedLines","RenderedLinesCollection","_set","layout","scrollEquals","_get","tmp","rendLineNumberStart","changeFromLineNumber","changeToLineNumber","deleteFromLineNumber","deleteToLineNumber","insertFromLineNumber","insertToLineNumber","MinimapBuffers","WIDTH","HEIGHT","background","_backgroundFillData","_createBackgroundFillData","_buffers","createImageData","_lastUsedBuffer","set","backgroundA","MinimapSamplingState","samplingRatio","minimapLines","fromLineNumber","toLineNumber","fromLineIndex","modelLineToMinimapLine","toLineIndex","sampledLineNumber","minimapLineStart","minimapLineEnd","deletedLineCount","changeStartIndex","changeEndIndex","insertedLineCount","viewLineCount","oldSamplingState","minimapLineCount","EditorLayoutInfoComputer","halfRatio","lastIndex","oldMinimapLines","oldLength","oldIndex","oldDeltaLineCount","minViewLineNumber","events","lastEvent","fromViewLineNumber","toViewLineNumber","oldMinimapLineNumber","_oldIndex","selectedViewLineNumber","_i","Minimap","MinimapTokensColorTracker","_minimapSelections","compute","samplingState","_samplingState","_shouldCheckSampling","InnerMinimap","opts","_recreateLineSampling","onDidChangeOptions","affectsMinimap","minimapLineRange","modelLineRangeToMinimapLineRange","onThemeChanged","onTokensColorsChanged","minimapCtx","whitespaceViewportData","wasSampling","event","getLineContent","needed","getViewLineData","getMinimapLinesRenderingData","decorationLineRangeToMinimapLineRange","modelStartLineNumber","modelEndLineNumber","decoration","minimapStartLineNumber","minimapEndLineNumber","ViewModelDecoration","revealRange","_renderDecorations","_gestureInProgress","_theme","_model","_lastRenderData","_selectionColor","minimapSelection","_domNode","_getMinimapDomNodeClassName","_shadow","_canvas","_decorationsCanvas","_slider","_sliderHorizontal","_applyLayout","_mouseDownListener","addStandardDisposableListener","preventDefault","internalOffsetY","offsetY","revealLineNumber","leftButton","initialPosY","_startSliderDragging","buttons","posx","posy","_sliderMouseMoveMonitor","GlobalMouseMoveMonitor","_sliderMouseDownListener","stopPropagation","_gestureDisposable","Gesture","_sliderTouchStartListener","EventType","toggleClassName","scrollDueToTouchEvent","passive","_sliderTouchMoveListener","_sliderTouchEndListener","initialButtons","initialPosX","initialSliderState","handleMouseMove","mouseOrthogonalDelta","setScrollTop","mouseDelta","getDesiredScrollTopFromDelta","startMonitoring","standardMouseMoveMerger","mouseMoveData","touch","startY","getBoundingClientRect","getDesiredScrollTopFromTouchLocation","getBuffer","renderingCtx","getRealLineCount","renderDecorations","getSelections","getMinimapDecorationsInViewport","characterWidth","tabSize","canvasContext","clearRect","highlightedLines","ContiguousLineMap","_renderSelectionLineHighlights","_renderDecorationsLineHighlights","lineOffsetMap","_renderSelectionsHighlights","_renderDecorationsHighlights","y1","y2","line","yy1","yy2","fillRect","MINIMAP_GUTTER_WIDTH","highlightColors","Map","minimapOptions","MinimapPosition","decorationColor","highlightColor","has","renderDecorationOnLine","renderDecoration","decorationRange","x1","getXOffsetForPosition","x2","lineIndexToXOffset","lineData","prevx","charCode","charCodeAt","strings","linesEquals","_lastData","_getBuffer","_renderUntouchedLines","_dirtyY1","_dirtyY2","lineInfo","defaultBackground","backgroundIsLight","renderMinimapLineHeight","innerLinePadding","renderBackground","renderedLines","_renderLine","dirtyY1","dirtyHeight","putImageData","lastRenderData","lastTargetData","lastStartLineNumber","lastLines","lastLinesLength","targetData","maxDestPixel","dirtyPixel1","dirtyPixel2","copySourceStart","copySourceEnd","copyDestStart","copyDestEnd","dest_dy","lastLineIndex","source_dy","sourceStart","sourceEnd","destStart","destEnd","subarray","colorTracker","minimapCharRenderer","content","tokens","maxDx","tabsCharDelta","tokenIndex","tokensLen","getCount","tokenEndIndex","getEndOffset","tokenColorId","getForeground","tokenColor","insertSpacesCount","count","blockRenderChar","renderChar","Disposable","defaultValue","_startLineNumber","_endLineNumber","_defaultValue","_values","sliderBackground","minimapSliderBackground","sliderHoverBackground","minimapSliderHoverBackground","sliderActiveBackground","minimapSliderActiveBackground","shadow","ViewOverlayWidgets","_verticalScrollbarWidth","verticalScrollbarWidth","_minimapWidth","_editorHeight","_editorWidth","widgetData","setRight","widgetHeight","clientHeight","right","unsetTop","_renderWidget","Settings","config","overviewRulerLanes","renderBorder","borderColor","editorOverviewRulerBorder","hideCursor","cursorColor","editorCursorForeground","themeType","minimapEnabled","enabled","minimapSide","editorOverviewRulerBackground","TokenizationRegistry","Color","overviewRuler","domWidth","domHeight","canvasWidth","canvasHeight","_initLanes","w","canvasLeftOffset","laneCount","remainingWidth","leftWidth","rightWidth","centerWidth","centerOffset","DecorationsOverviewRuler","_updateSettings","_tokensColorTrackerListener","changedColorMap","_cursorPositions","newSettings","_settings","affectsOverviewRuler","scrollHeightChanged","editorCtx","setBackgroundColor","heightRatio","getAllOverviewRulerDecorations","minDecorationHeight","halfMinDecorationHeight","canvasCtx","OverviewRulerDecorationsGroup","decorationGroup","decorationGroupData","prevLane","prevY1","prevY2","lane","yCenter","cursorHeight","halfCursorHeight","cursorX","cursorW","cursor","beginPath","strokeStyle","moveTo","lineTo","stroke","OverviewRuler","cssClassName","_zoneManager","OverviewZoneManager","setDOMWidth","setDOMHeight","setOuterHeight","setLineHeight","setPixelRatio","getDOMWidth","getDOMHeight","getCanvasWidth","getCanvasHeight","zones","setZones","getOuterHeight","colorZones","resolveColorZones","id2Color","getId2Color","_renderOneLane","currentColorId","currentFrom","currentTo","zone","zoneColorId","colorId","zoneFrom","from","zoneTo","to","ViewEventHandler","Rulers","_renderedRulers","_rulers","currentCount","desiredCount","rulerWidth","addCount","removeCount","pop","_ensureRulersCount","ruler","setBoxShadow","rulerColor","editorRuler","ScrollDecorationViewPart","_scrollTop","_width","_updateWidth","_shouldShow","_useShadows","newShouldShow","_updateShouldShow","HorizontalRangeWithStyle","startStyle","endStyle","LineVisibleRangesWithStyle","toStyledRange","item","toStyled","SelectionsOverlay","_previousFrameVisibleRangesWithStyle","_roundedSelection","slice","previousFrame","epsilon","previousFrameTop","previousFrameBottom","topLineNumber","bottomLineNumber","curLineRange","curLeft","curRight","bottom","prevLeft","prevRight","nextLeft","nextRight","_visibleRangesHaveGaps","_enrichVisibleRangesWithStyle","output2","hasMultipleSelections","visibleRangesHaveStyle","fullLineHeight","reducedLineHeight","firstLineNumber","lastLineNumber","innerCornerOutput","restOfSelectionOutput","_createSelectionPiece","SELECTION_CLASS_NAME","ROUNDED_PIECE_WIDTH","EDITOR_BACKGROUND_CLASS_NAME","SELECTION_TOP_RIGHT","SELECTION_BOTTOM_RIGHT","SELECTION_TOP_LEFT","SELECTION_BOTTOM_LEFT","thisFrameVisibleRangesWithStyle","visibleRangesWithStyle","_getVisibleRangesWithStyle","_actualRenderOneSelection","n","editorSelectionColor","editorSelectionBackground","editorInactiveSelectionColor","editorInactiveSelection","editorSelectionForegroundColor","editorSelectionForeground","ViewCursorRenderData","textContent","textContentClassName","ViewCursor","_cursorStyle","_lineCursorWidth","_position","_lastRenderedContent","lineContent","startOffset","endOffset","substring","_getGraphemeAwarePosition","nextGrapheme","TextEditorCursorStyle","computeScreenAwareSize","visibleRangeForCharacter","firstVisibleRangeForCharacter","findTokenIndexAtOffset","getClassName","_prepareRender","ViewCursors","_readOnly","_cursorBlinking","_cursorSmoothCaretAnimation","_isComposingInput","_primaryCursor","_secondaryCursors","_updateDomClassName","_startCursorBlinkAnimation","TimeoutTimer","_cursorFlatBlinkInterval","IntervalTimer","_blinkingEnabled","_editorHasFocus","_updateBlinking","secondaryPositions","onCursorPositionChanged","addCnt","newCursor","insertBefore","nextSibling","removeCnt","splice","positions","_onCursorPositionChanged","cancel","blinkingStyle","_getCursorBlinking","isHidden","isSolid","_hide","_show","cancelAndSet","BLINK_INTERVAL","setIfNotSet","_getClassName","show","hide","renderDataLen","primaryRenderData","secondaryRenderData","caret","caretBackground","editorCursorBackground","opposite","invalidFunc","ViewZones","marginDomNode","_zones","whitespaces","getWhitespaces","oldWhitespaces","whitespace","hadAChange","changeWhitespace","whitespaceAccessor","props","_computeWhitespaceProps","delegate","isInHiddenArea","oldWhitespace","afterLineNumber","afterViewLineNumber","heightInPx","changeOneWhitespace","_safeCallOnComputedHeight","_recomputeWhitespacesProps","afterColumn","_heightInPixels","minWidthInPx","_minWidthInPixels","zoneAfterModelPosition","zoneBeforeModelPosition","validatePosition","validAfterLineNumber","viewPosition","convertModelPositionToViewPosition","afterColumnAffinity","isVisible","callback","zonesHaveChanged","changeAccessor","addZone","_addZone","removeZone","_removeZone","layoutZone","_layoutZone","func","arg1","onUnexpectedError","safeInvoke1Arg","myZone","whitespaceId","insertWhitespace","_getZoneOrdinal","removeWhitespace","heightInLines","onComputedHeight","onDomNodeTop","visibleWhitespaces","visibleZones","hasVisibleZone","visibleWhitespace","newTop","newHeight","newDisplay","verticalOffset","_safeCallOnDomNodeTop","getScrolledTopFromAbsoluteTop","View","commandDelegate","colorTheme","userInputEvents","overflowWidgetsDomNode","_renderAnimationFrame","viewController","ViewController","ViewContext","_viewParts","_textAreaHandler","TextAreaHandler","_createTextAreaHandlerHelper","_getEditorClassName","_overflowGuardContainer","_scrollbar","_viewLines","_viewZones","decorationsOverviewRuler","scrollDecoration","contentViewOverlays","ContentViewOverlays","addDynamicOverlay","marginViewOverlays","MarginViewOverlays","LineNumbersOverlay","margin","Margin","_contentWidgets","_viewCursors","_overlayWidgets","rulers","overviewRulerData","parent","textArea","textAreaCover","_pointerHandler","PointerHandler","_createPointerHandlerHelper","_renderNow","linesContentDomNode","focusTextArea","focus","dispatchTextAreaEvent","dispatchEvent","getLastRenderData","lastViewCursorsRenderData","lastTextareaPosition","PointerHandlerLastRenderData","shouldSuppressMouseDownOnViewZone","viewZoneId","shouldSuppressMouseDownOnWidget","getPositionFromDOMInfo","_flushAccumulatedAndRenderNow","getLineWidth","focused","_scheduleRender","update","remove","runAtThisOrScheduleAtNextAnimationFrame","_onRenderScheduled","bind","safeInvokeNoArg","_actualRender","viewPart","isInDOM","viewPartsToRender","_getViewPartsToRender","partialViewportData","getLinesViewportData","setViewport","centeredLineNumber","ViewportData","getWhitespaceViewportData","renderText","renderingContext","RenderingContext","scrollPosition","tokenizeViewport","updateLineWidths","modelLineNumber","modelColumn","modelPosition","clientX","clientY","mouseTarget","getTargetAtClientPoint","ViewUserInputEvents","changeViewZones","now","everything","forceShouldRender","setAriaOptions","addWidget","layoutContentWidget","newRange","newPreference","setWidgetPosition","removeWidget","layoutOverlayWidget","ttPolicy","trustedTypes","createPolicy","createHTML","DOMLineBreaksComputerFactory","wrappingIndent","requests","injectedTexts","addRequest","lineText","injectedText","previousLineBreakData","finalize","firstLineBreakColumn","injectedTextsPerLine","createEmptyLineBreakWithPossiblyInjectedText","requestIdx","LineInjectedText","injectionOptions","t","injectionOffsets","text","ModelLineProjectionData","overallWidth","additionalIndent","additionalIndentSize","additionalIndentLength","containerDomNode","sb","createStringBuilder","firstNonWhitespaceIndices","wrappedTextIndentLengths","renderLineContents","allCharOffsets","allVisibleColumns","firstNonWhitespaceIndex","wrappedTextIndentLength","indentWidth","typicalFullwidthCharacterWidth","renderLineContent","substr","renderLine","html","build","trustedhtml","innerHTML","wordWrap","createRange","lineDomNodes","prototype","children","breakOffsets","readLineBreaks","visibleColumns","breakOffsetsVisibleColumn","curInjectedTexts","createLineBreaks","initialVisibleColumn","wrappingIndentLength","hangingOffset","appendASCIIString","charOffset","charOffsets","nextCharCode","producedCharacters","space","write1","appendASCII","lineDomNode","spans","discoverBreaks","err","log","low","lowRects","high","highRects","readClientRect","mid","midRects","setStart","firstChild","setEnd","getClientRects","_readConfig","_lastCursorModelPosition","_activeLineNumber","lineNumbers","_renderLineNumbers","renderType","_renderCustomLineNumbers","renderFn","_renderFinalNewline","_lineNumbersLeft","lineNumbersLeft","_lineNumbersWidth","lineNumbersWidth","primaryViewPosition","viewLineNumber","diff","lineHeightClassName","CLASS_NAME","getLineLength","renderLineNumber","_getLineRenderLineNumber","editorLineNumbers","activeLineNumber","editorActiveLineNumber","RangeUtil","_handyReadyRange","endNode","selectNodeContents","startElement","endElement","_createRange","_detachRange","FloatHorizontalRange","prev","clientRects","clientRectDeltaLeft","clientRectScale","clientRect","_mergeAdjacentRanges","startChildIndex","endChildIndex","_createHorizontalRangesFromClientRects","_readClientRects","canUseFastRenderedViewLine","browser","isFirefox","isSafari","_clientRectDeltaLeft","_clientRectScale","_clientRectRead","rect","renderWhitespace","renderControlCharacters","middotWidth","wsmiddotWidth","useMonospaceOptimizations","isMonospace","canUseHalfwidthRightwardsArrow","stopRenderingLineAfter","fontLigatures","_options","_isMaybeInvalid","_renderedViewLine","newOptions","ColorScheme","getViewLineRenderingData","actualInlineDecorations","LineDecoration","inlineDecorations","maxColumn","selectionsOnLine","LineRange","renderLineInput","RenderLineInput","continuesWithWrappedLine","isBasicASCII","containsRTL","startVisibleColumn","EditorFontLigatures","renderViewLine","renderedViewLine","containsForeignElements","lineTokens","FastRenderedViewLine","characterMapping","createRenderedLine","toSlowRenderedLine","horizontalRanges","VisibleRanges","_characterMapping","_charWidth","_getCharPosition","expectedWidth","actualWidth","startPosition","endPosition","getAbsoluteOffset","spanNodeTextContentLength","spanIndex","previousSibling","getColumn","DomPosition","RenderedViewLine","_isWhitespaceOnly","test","_containsForeignElements","_cachedWidth","_pixelOffsetCache","Float32Array","myDomNode","_getReadingTarget","_readPixelOffset","_readVisibleRangesForRange","pixelOffset","_readRawVisibleRangesForRange","readingTarget","cachedPixelOffset","_actualReadPixelOffset","readHorizontalRanges","domPosition","getDomPosition","partIndex","expectedResult","startDomPosition","endDomPosition","WebKitRenderedViewLine","endPixelOffset","lastRange","isWebKit","createWebKitRenderedLine","createNormalRenderedLine","OUTER_CLASS_NAME","_glyphMarginBackgroundDomNode"],"sourceRoot":""}