{"version":3,"file":"static/js/monaco-editor-vendor.96a37e40.e81a645f.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/contentWidgets/contentWidgets.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/currentLineHighlight/currentLineHighlight.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/decorations/decorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/editorScrollbar/editorScrollbar.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/glyphMargin/glyphMargin.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/indentGuides/indentGuides.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLines.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/linesDecorations/linesDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/marginDecorations/marginDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharSheet.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRenderer.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapPreBaked.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimap.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/overviewRuler.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/rulers/rulers.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/scrollDecoration/scrollDecoration.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/selections/selections.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursor.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursors.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewZones/viewZones.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/blockDecorations/blockDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/view.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/domLineBreaksComputer.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/dynamicViewOverlay.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lineNumbers/lineNumbers.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/rangeUtil.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLine.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/margin/margin.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nclass Coordinate {\n    constructor(top, left) {\n        this._coordinateBrand = undefined;\n        this.top = top;\n        this.left = left;\n    }\n}\nexport class ViewContentWidgets extends ViewPart {\n    constructor(context, viewDomNode) {\n        super(context);\n        this._viewDomNode = viewDomNode;\n        this._widgets = {};\n        this.domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.domNode, 1 /* PartFingerprint.ContentWidgets */);\n        this.domNode.setClassName('contentWidgets');\n        this.domNode.setPosition('absolute');\n        this.domNode.setTop(0);\n        this.overflowingContentWidgetsDomNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.overflowingContentWidgetsDomNode, 2 /* PartFingerprint.OverflowingContentWidgets */);\n        this.overflowingContentWidgetsDomNode.setClassName('overflowingContentWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLineMappingChanged(e) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onLineMappingChanged(e);\n        }\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    addWidget(_widget) {\n        const myWidget = new Widget(this._context, this._viewDomNode, _widget);\n        this._widgets[myWidget.id] = myWidget;\n        if (myWidget.allowEditorOverflow) {\n            this.overflowingContentWidgetsDomNode.appendChild(myWidget.domNode);\n        }\n        else {\n            this.domNode.appendChild(myWidget.domNode);\n        }\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, range, preference, affinity) {\n        const myWidget = this._widgets[widget.getId()];\n        myWidget.setPosition(range, preference, affinity);\n        this.setShouldRender();\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const myWidget = this._widgets[widgetId];\n            delete this._widgets[widgetId];\n            const domNode = myWidget.domNode.domNode;\n            domNode.parentNode.removeChild(domNode);\n            domNode.removeAttribute('monaco-visible-content-widget');\n            this.setShouldRender();\n        }\n    }\n    shouldSuppressMouseDownOnWidget(widgetId) {\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            return this._widgets[widgetId].suppressMouseDown;\n        }\n        return false;\n    }\n    onBeforeRender(viewportData) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onBeforeRender(viewportData);\n        }\n    }\n    prepareRender(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].render(ctx);\n        }\n    }\n}\nclass Widget {\n    constructor(context, viewDomNode, actual) {\n        this._context = context;\n        this._viewDomNode = viewDomNode;\n        this._actual = actual;\n        this.domNode = createFastDomNode(this._actual.getDomNode());\n        this.id = this._actual.getId();\n        this.allowEditorOverflow = this._actual.allowEditorOverflow || false;\n        this.suppressMouseDown = this._actual.suppressMouseDown || false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._fixedOverflowWidgets = options.get(38 /* EditorOption.fixedOverflowWidgets */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._range = null;\n        this._viewRange = null;\n        this._affinity = null;\n        this._preference = [];\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n        this._maxWidth = this._getMaxWidth();\n        this._isVisible = false;\n        this._renderData = null;\n        this.domNode.setPosition((this._fixedOverflowWidgets && this.allowEditorOverflow) ? 'fixed' : 'absolute');\n        this.domNode.setDisplay('none');\n        this.domNode.setVisibility('hidden');\n        this.domNode.setAttribute('widgetId', this.id);\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        if (e.hasChanged(133 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n            this._contentLeft = layoutInfo.contentLeft;\n            this._contentWidth = layoutInfo.contentWidth;\n            this._maxWidth = this._getMaxWidth();\n        }\n    }\n    onLineMappingChanged(e) {\n        this._setPosition(this._range, this._affinity);\n    }\n    _setPosition(range, affinity) {\n        var _a;\n        this._range = range;\n        this._viewRange = null;\n        this._affinity = affinity;\n        if (this._range) {\n            // Do not trust that widgets give a valid position\n            const validModelRange = this._context.viewModel.model.validateRange(this._range);\n            if (this._context.viewModel.coordinatesConverter.modelPositionIsVisible(validModelRange.getStartPosition()) || this._context.viewModel.coordinatesConverter.modelPositionIsVisible(validModelRange.getEndPosition())) {\n                this._viewRange = this._context.viewModel.coordinatesConverter.convertModelRangeToViewRange(validModelRange, (_a = this._affinity) !== null && _a !== void 0 ? _a : undefined);\n            }\n        }\n    }\n    _getMaxWidth() {\n        return (this.allowEditorOverflow\n            ? window.innerWidth || document.documentElement.offsetWidth || document.body.offsetWidth\n            : this._contentWidth);\n    }\n    setPosition(range, preference, affinity) {\n        this._setPosition(range, affinity);\n        this._preference = preference;\n        if (this._viewRange && this._preference && this._preference.length > 0) {\n            // this content widget would like to be visible if possible\n            // we change it from `display:none` to `display:block` even if it\n            // might be outside the viewport such that we can measure its size\n            // in `prepareRender`\n            this.domNode.setDisplay('block');\n        }\n        else {\n            this.domNode.setDisplay('none');\n        }\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n    }\n    _layoutBoxInViewport(topLeft, bottomLeft, width, height, ctx) {\n        // Our visible box is split horizontally by the current line => 2 boxes\n        // a) the box above the line\n        const aboveLineTop = topLeft.top;\n        const heightAboveLine = aboveLineTop;\n        // b) the box under the line\n        const underLineTop = bottomLeft.top + this._lineHeight;\n        const heightUnderLine = ctx.viewportHeight - underLineTop;\n        const aboveTop = aboveLineTop - height;\n        const fitsAbove = (heightAboveLine >= height);\n        const belowTop = underLineTop;\n        const fitsBelow = (heightUnderLine >= height);\n        // And its left\n        let actualAboveLeft = topLeft.left;\n        let actualBelowLeft = bottomLeft.left;\n        if (actualAboveLeft + width > ctx.scrollLeft + ctx.viewportWidth) {\n            actualAboveLeft = ctx.scrollLeft + ctx.viewportWidth - width;\n        }\n        if (actualBelowLeft + width > ctx.scrollLeft + ctx.viewportWidth) {\n            actualBelowLeft = ctx.scrollLeft + ctx.viewportWidth - width;\n        }\n        if (actualAboveLeft < ctx.scrollLeft) {\n            actualAboveLeft = ctx.scrollLeft;\n        }\n        if (actualBelowLeft < ctx.scrollLeft) {\n            actualBelowLeft = ctx.scrollLeft;\n        }\n        return {\n            fitsAbove: fitsAbove,\n            aboveTop: aboveTop,\n            aboveLeft: actualAboveLeft,\n            fitsBelow: fitsBelow,\n            belowTop: belowTop,\n            belowLeft: actualBelowLeft,\n        };\n    }\n    _layoutHorizontalSegmentInPage(windowSize, domNodePosition, left, width) {\n        // Initially, the limits are defined as the dom node limits\n        const MIN_LIMIT = Math.max(0, domNodePosition.left - width);\n        const MAX_LIMIT = Math.min(domNodePosition.left + domNodePosition.width + width, windowSize.width);\n        let absoluteLeft = domNodePosition.left + left - dom.StandardWindow.scrollX;\n        if (absoluteLeft + width > MAX_LIMIT) {\n            const delta = absoluteLeft - (MAX_LIMIT - width);\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        if (absoluteLeft < MIN_LIMIT) {\n            const delta = absoluteLeft - MIN_LIMIT;\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        return [left, absoluteLeft];\n    }\n    _layoutBoxInPage(topLeft, bottomLeft, width, height, ctx) {\n        const aboveTop = topLeft.top - height;\n        const belowTop = bottomLeft.top + this._lineHeight;\n        const domNodePosition = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n        const absoluteAboveTop = domNodePosition.top + aboveTop - dom.StandardWindow.scrollY;\n        const absoluteBelowTop = domNodePosition.top + belowTop - dom.StandardWindow.scrollY;\n        const windowSize = dom.getClientArea(document.body);\n        const [aboveLeft, absoluteAboveLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, topLeft.left - ctx.scrollLeft + this._contentLeft, width);\n        const [belowLeft, absoluteBelowLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, bottomLeft.left - ctx.scrollLeft + this._contentLeft, width);\n        // Leave some clearance to the top/bottom\n        const TOP_PADDING = 22;\n        const BOTTOM_PADDING = 22;\n        const fitsAbove = (absoluteAboveTop >= TOP_PADDING);\n        const fitsBelow = (absoluteBelowTop + height <= windowSize.height - BOTTOM_PADDING);\n        if (this._fixedOverflowWidgets) {\n            return {\n                fitsAbove,\n                aboveTop: Math.max(absoluteAboveTop, TOP_PADDING),\n                aboveLeft: absoluteAboveLeft,\n                fitsBelow,\n                belowTop: absoluteBelowTop,\n                belowLeft: absoluteBelowLeft\n            };\n        }\n        return {\n            fitsAbove,\n            aboveTop: aboveTop,\n            aboveLeft,\n            fitsBelow,\n            belowTop,\n            belowLeft\n        };\n    }\n    _prepareRenderWidgetAtExactPositionOverflowing(topLeft) {\n        return new Coordinate(topLeft.top, topLeft.left + this._contentLeft);\n    }\n    /**\n     * Compute `this._topLeft`\n     */\n    _getTopAndBottomLeft(ctx) {\n        if (!this._viewRange) {\n            return [null, null];\n        }\n        const visibleRangesForRange = ctx.linesVisibleRangesForRange(this._viewRange, false);\n        if (!visibleRangesForRange || visibleRangesForRange.length === 0) {\n            return [null, null];\n        }\n        let firstLine = visibleRangesForRange[0];\n        let lastLine = visibleRangesForRange[0];\n        for (const visibleRangesForLine of visibleRangesForRange) {\n            if (visibleRangesForLine.lineNumber < firstLine.lineNumber) {\n                firstLine = visibleRangesForLine;\n            }\n            if (visibleRangesForLine.lineNumber > lastLine.lineNumber) {\n                lastLine = visibleRangesForLine;\n            }\n        }\n        let firstLineMinLeft = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */; //firstLine.Constants.MAX_SAFE_SMALL_INTEGER;\n        for (const visibleRange of firstLine.ranges) {\n            if (visibleRange.left < firstLineMinLeft) {\n                firstLineMinLeft = visibleRange.left;\n            }\n        }\n        let lastLineMinLeft = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */; //lastLine.Constants.MAX_SAFE_SMALL_INTEGER;\n        for (const visibleRange of lastLine.ranges) {\n            if (visibleRange.left < lastLineMinLeft) {\n                lastLineMinLeft = visibleRange.left;\n            }\n        }\n        const topForPosition = ctx.getVerticalOffsetForLineNumber(firstLine.lineNumber) - ctx.scrollTop;\n        const topLeft = new Coordinate(topForPosition, firstLineMinLeft);\n        const topForBottomLine = ctx.getVerticalOffsetForLineNumber(lastLine.lineNumber) - ctx.scrollTop;\n        const bottomLeft = new Coordinate(topForBottomLine, lastLineMinLeft);\n        return [topLeft, bottomLeft];\n    }\n    _prepareRenderWidget(ctx) {\n        if (!this._preference || this._preference.length === 0) {\n            return null;\n        }\n        const [topLeft, bottomLeft] = this._getTopAndBottomLeft(ctx);\n        if (!topLeft || !bottomLeft) {\n            return null;\n        }\n        if (this._cachedDomNodeOffsetWidth === -1 || this._cachedDomNodeOffsetHeight === -1) {\n            let preferredDimensions = null;\n            if (typeof this._actual.beforeRender === 'function') {\n                preferredDimensions = safeInvoke(this._actual.beforeRender, this._actual);\n            }\n            if (preferredDimensions) {\n                this._cachedDomNodeOffsetWidth = preferredDimensions.width;\n                this._cachedDomNodeOffsetHeight = preferredDimensions.height;\n            }\n            else {\n                const domNode = this.domNode.domNode;\n                const clientRect = domNode.getBoundingClientRect();\n                this._cachedDomNodeOffsetWidth = Math.round(clientRect.width);\n                this._cachedDomNodeOffsetHeight = Math.round(clientRect.height);\n            }\n        }\n        let placement;\n        if (this.allowEditorOverflow) {\n            placement = this._layoutBoxInPage(topLeft, bottomLeft, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        else {\n            placement = this._layoutBoxInViewport(topLeft, bottomLeft, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        // Do two passes, first for perfect fit, second picks first option\n        for (let pass = 1; pass <= 2; pass++) {\n            for (const pref of this._preference) {\n                // placement\n                if (pref === 1 /* ContentWidgetPositionPreference.ABOVE */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsAbove) {\n                        return { coordinate: new Coordinate(placement.aboveTop, placement.aboveLeft), position: 1 /* ContentWidgetPositionPreference.ABOVE */ };\n                    }\n                }\n                else if (pref === 2 /* ContentWidgetPositionPreference.BELOW */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsBelow) {\n                        return { coordinate: new Coordinate(placement.belowTop, placement.belowLeft), position: 2 /* ContentWidgetPositionPreference.BELOW */ };\n                    }\n                }\n                else {\n                    if (this.allowEditorOverflow) {\n                        return { coordinate: this._prepareRenderWidgetAtExactPositionOverflowing(topLeft), position: 0 /* ContentWidgetPositionPreference.EXACT */ };\n                    }\n                    else {\n                        return { coordinate: topLeft, position: 0 /* ContentWidgetPositionPreference.EXACT */ };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * On this first pass, we ensure that the content widget (if it is in the viewport) has the max width set correctly.\n     */\n    onBeforeRender(viewportData) {\n        if (!this._viewRange || !this._preference) {\n            return;\n        }\n        if (this._viewRange.endLineNumber < viewportData.startLineNumber || this._viewRange.startLineNumber > viewportData.endLineNumber) {\n            // Outside of viewport\n            return;\n        }\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRenderWidget(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            // This widget should be invisible\n            if (this._isVisible) {\n                this.domNode.removeAttribute('monaco-visible-content-widget');\n                this._isVisible = false;\n                this.domNode.setVisibility('hidden');\n            }\n            if (typeof this._actual.afterRender === 'function') {\n                safeInvoke(this._actual.afterRender, this._actual, null);\n            }\n            return;\n        }\n        // This widget should be visible\n        if (this.allowEditorOverflow) {\n            this.domNode.setTop(this._renderData.coordinate.top);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        else {\n            this.domNode.setTop(this._renderData.coordinate.top + ctx.scrollTop - ctx.bigNumbersDelta);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        if (!this._isVisible) {\n            this.domNode.setVisibility('inherit');\n            this.domNode.setAttribute('monaco-visible-content-widget', 'true');\n            this._isVisible = true;\n        }\n        if (typeof this._actual.afterRender === 'function') {\n            safeInvoke(this._actual.afterRender, this._actual, this._renderData.position);\n        }\n    }\n}\nfunction safeInvoke(fn, thisArg, ...args) {\n    try {\n        return fn.call(thisArg, ...args);\n    }\n    catch (_a) {\n        // ignore\n        return null;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nexport class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._renderLineHighlight = options.get(87 /* EditorOption.renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(88 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._selectionIsEmpty = true;\n        this._focused = false;\n        this._cursorLineNumbers = [1];\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderData = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    _readFromSelections() {\n        let hasChanged = false;\n        const cursorsLineNumbers = this._selections.map(s => s.positionLineNumber);\n        cursorsLineNumbers.sort((a, b) => a - b);\n        if (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n            this._cursorLineNumbers = cursorsLineNumbers;\n            hasChanged = true;\n        }\n        const selectionIsEmpty = this._selections.every(s => s.isEmpty());\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            hasChanged = true;\n        }\n        return hasChanged;\n    }\n    // --- begin event handlers\n    onThemeChanged(e) {\n        return this._readFromSelections();\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._renderLineHighlight = options.get(87 /* EditorOption.renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(88 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return this._readFromSelections();\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollWidthChanged || e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        if (!this._renderLineHighlightOnlyWhenFocus) {\n            return false;\n        }\n        this._focused = e.isFocused;\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (!this._shouldRenderThis()) {\n            this._renderData = null;\n            return;\n        }\n        const renderedLine = this._renderOne(ctx);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const len = this._cursorLineNumbers.length;\n        let index = 0;\n        const renderData = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            while (index < len && this._cursorLineNumbers[index] < lineNumber) {\n                index++;\n            }\n            if (index < len && this._cursorLineNumbers[index] === lineNumber) {\n                renderData[lineIndex] = renderedLine;\n            }\n            else {\n                renderData[lineIndex] = '';\n            }\n        }\n        this._renderData = renderData;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderData) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex >= this._renderData.length) {\n            return '';\n        }\n        return this._renderData[lineIndex];\n    }\n    _shouldRenderInMargin() {\n        return ((this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n    _shouldRenderInContent() {\n        return ((this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n            && this._selectionIsEmpty\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n}\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx) {\n        const className = 'current-line' + (this._shouldRenderOther() ? ' current-line-both' : '');\n        return `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return this._shouldRenderInContent();\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInMargin();\n    }\n}\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx) {\n        const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '');\n        return `<div class=\"${className}\" style=\"width:${this._contentLeft}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return true;\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInContent();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const lineHighlight = theme.getColor(editorLineHighlight);\n    if (lineHighlight) {\n        collector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n        collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n    }\n    if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n        const lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n        if (lineHighlightBorder) {\n            collector.addRule(`.monaco-editor .view-overlays .current-line { border: 2px solid ${lineHighlightBorder}; }`);\n            collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border: 2px solid ${lineHighlightBorder}; }`);\n            if (isHighContrast(theme.type)) {\n                collector.addRule(`.monaco-editor .view-overlays .current-line { border-width: 1px; }`);\n                collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border-width: 1px; }`);\n            }\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Range } from '../../../common/core/range.js';\nimport { HorizontalRange } from '../../view/renderingContext.js';\nexport class DecorationsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(46 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(46 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        const _decorations = ctx.getDecorationsInViewport();\n        // Keep only decorations with `className`\n        let decorations = [];\n        let decorationsLen = 0;\n        for (let i = 0, len = _decorations.length; i < len; i++) {\n            const d = _decorations[i];\n            if (d.options.className) {\n                decorations[decorationsLen++] = d;\n            }\n        }\n        // Sort decorations for consistent render output\n        decorations = decorations.sort((a, b) => {\n            if (a.options.zIndex < b.options.zIndex) {\n                return -1;\n            }\n            if (a.options.zIndex > b.options.zIndex) {\n                return 1;\n            }\n            const aClassName = a.options.className;\n            const bClassName = b.options.className;\n            if (aClassName < bClassName) {\n                return -1;\n            }\n            if (aClassName > bClassName) {\n                return 1;\n            }\n            return Range.compareRangesUsingStarts(a.range, b.range);\n        });\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = '';\n        }\n        // Render first whole line decorations and then regular decorations\n        this._renderWholeLineDecorations(ctx, decorations, output);\n        this._renderNormalDecorations(ctx, decorations, output);\n        this._renderResult = output;\n    }\n    _renderWholeLineDecorations(ctx, decorations, output) {\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (!d.options.isWholeLine) {\n                continue;\n            }\n            const decorationOutput = ('<div class=\"cdr '\n                + d.options.className\n                + '\" style=\"left:0;width:100%;height:'\n                + lineHeight\n                + 'px;\"></div>');\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            for (let j = startLineNumber; j <= endLineNumber; j++) {\n                const lineIndex = j - visibleStartLineNumber;\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    _renderNormalDecorations(ctx, decorations, output) {\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        let prevClassName = null;\n        let prevShowIfCollapsed = false;\n        let prevRange = null;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (d.options.isWholeLine) {\n                continue;\n            }\n            const className = d.options.className;\n            const showIfCollapsed = Boolean(d.options.showIfCollapsed);\n            let range = d.range;\n            if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n                range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.viewModel.getLineMaxColumn(range.endLineNumber - 1));\n            }\n            if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n                // merge into previous decoration\n                prevRange = Range.plusRange(prevRange, range);\n                continue;\n            }\n            // flush previous decoration\n            if (prevClassName !== null) {\n                this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n            }\n            prevClassName = className;\n            prevShowIfCollapsed = showIfCollapsed;\n            prevRange = range;\n        }\n        if (prevClassName !== null) {\n            this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n        }\n    }\n    _renderNormalDecoration(ctx, range, className, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\n        const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/ className === 'findMatch');\n        if (!linesVisibleRanges) {\n            return;\n        }\n        for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n            const lineVisibleRanges = linesVisibleRanges[j];\n            if (lineVisibleRanges.outsideRenderedLine) {\n                continue;\n            }\n            const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n            if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n                const singleVisibleRange = lineVisibleRanges.ranges[0];\n                if (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n                    // collapsed/very small range case => make the decoration visible by expanding its width\n                    // expand its size on both sides (both to the left and to the right, keeping it centered)\n                    const center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n                    const left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n                    lineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n                }\n            }\n            for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n                const visibleRange = lineVisibleRanges.ranges[k];\n                const decorationOutput = ('<div class=\"cdr '\n                    + className\n                    + '\" style=\"left:'\n                    + String(visibleRange.left)\n                    + 'px;width:'\n                    + String(visibleRange.width)\n                    + 'px;height:'\n                    + lineHeight\n                    + 'px;\"></div>');\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { SmoothScrollableElement } from '../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { registerThemingParticipant, getThemeTypeSelector } from '../../../../platform/theme/common/themeService.js';\nimport { scrollbarShadow, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground } from '../../../../platform/theme/common/colorRegistry.js';\nexport class EditorScrollbar extends ViewPart {\n    constructor(context, linesContent, viewDomNode, overflowGuardDomNode) {\n        super(context);\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(94 /* EditorOption.scrollbar */);\n        const mouseWheelScrollSensitivity = options.get(69 /* EditorOption.mouseWheelScrollSensitivity */);\n        const fastScrollSensitivity = options.get(36 /* EditorOption.fastScrollSensitivity */);\n        const scrollPredominantAxis = options.get(97 /* EditorOption.scrollPredominantAxis */);\n        const scrollbarOptions = {\n            listenOnDomNode: viewDomNode.domNode,\n            className: 'editor-scrollable' + ' ' + getThemeTypeSelector(context.theme.type),\n            useShadows: false,\n            lazyRender: true,\n            vertical: scrollbar.vertical,\n            horizontal: scrollbar.horizontal,\n            verticalHasArrows: scrollbar.verticalHasArrows,\n            horizontalHasArrows: scrollbar.horizontalHasArrows,\n            verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n            verticalSliderSize: scrollbar.verticalSliderSize,\n            horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n            horizontalSliderSize: scrollbar.horizontalSliderSize,\n            handleMouseWheel: scrollbar.handleMouseWheel,\n            alwaysConsumeMouseWheel: scrollbar.alwaysConsumeMouseWheel,\n            arrowSize: scrollbar.arrowSize,\n            mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n            fastScrollSensitivity: fastScrollSensitivity,\n            scrollPredominantAxis: scrollPredominantAxis,\n            scrollByPage: scrollbar.scrollByPage,\n        };\n        this.scrollbar = this._register(new SmoothScrollableElement(linesContent.domNode, scrollbarOptions, this._context.viewLayout.getScrollable()));\n        PartFingerprints.write(this.scrollbar.getDomNode(), 5 /* PartFingerprint.ScrollableElement */);\n        this.scrollbarDomNode = createFastDomNode(this.scrollbar.getDomNode());\n        this.scrollbarDomNode.setPosition('absolute');\n        this._setLayout();\n        // When having a zone widget that calls .focus() on one of its dom elements,\n        // the browser will try desperately to reveal that dom node, unexpectedly\n        // changing the .scrollTop of this.linesContent\n        const onBrowserDesperateReveal = (domNode, lookAtScrollTop, lookAtScrollLeft) => {\n            const newScrollPosition = {};\n            if (lookAtScrollTop) {\n                const deltaTop = domNode.scrollTop;\n                if (deltaTop) {\n                    newScrollPosition.scrollTop = this._context.viewLayout.getCurrentScrollTop() + deltaTop;\n                    domNode.scrollTop = 0;\n                }\n            }\n            if (lookAtScrollLeft) {\n                const deltaLeft = domNode.scrollLeft;\n                if (deltaLeft) {\n                    newScrollPosition.scrollLeft = this._context.viewLayout.getCurrentScrollLeft() + deltaLeft;\n                    domNode.scrollLeft = 0;\n                }\n            }\n            this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, 1 /* ScrollType.Immediate */);\n        };\n        // I've seen this happen both on the view dom node & on the lines content dom node.\n        this._register(dom.addDisposableListener(viewDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(viewDomNode.domNode, true, true)));\n        this._register(dom.addDisposableListener(linesContent.domNode, 'scroll', (e) => onBrowserDesperateReveal(linesContent.domNode, true, false)));\n        this._register(dom.addDisposableListener(overflowGuardDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(overflowGuardDomNode.domNode, true, false)));\n        this._register(dom.addDisposableListener(this.scrollbarDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(this.scrollbarDomNode.domNode, true, false)));\n    }\n    dispose() {\n        super.dispose();\n    }\n    _setLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this.scrollbarDomNode.setLeft(layoutInfo.contentLeft);\n        const minimap = options.get(67 /* EditorOption.minimap */);\n        const side = minimap.side;\n        if (side === 'right') {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth + layoutInfo.minimap.minimapWidth);\n        }\n        else {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth);\n        }\n        this.scrollbarDomNode.setHeight(layoutInfo.height);\n    }\n    getOverviewRulerLayoutInfo() {\n        return this.scrollbar.getOverviewRulerLayoutInfo();\n    }\n    getDomNode() {\n        return this.scrollbarDomNode;\n    }\n    delegateVerticalScrollbarPointerDown(browserEvent) {\n        this.scrollbar.delegateVerticalScrollbarPointerDown(browserEvent);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(94 /* EditorOption.scrollbar */)\n            || e.hasChanged(69 /* EditorOption.mouseWheelScrollSensitivity */)\n            || e.hasChanged(36 /* EditorOption.fastScrollSensitivity */)) {\n            const options = this._context.configuration.options;\n            const scrollbar = options.get(94 /* EditorOption.scrollbar */);\n            const mouseWheelScrollSensitivity = options.get(69 /* EditorOption.mouseWheelScrollSensitivity */);\n            const fastScrollSensitivity = options.get(36 /* EditorOption.fastScrollSensitivity */);\n            const scrollPredominantAxis = options.get(97 /* EditorOption.scrollPredominantAxis */);\n            const newOpts = {\n                vertical: scrollbar.vertical,\n                horizontal: scrollbar.horizontal,\n                verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n                horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n                scrollByPage: scrollbar.scrollByPage,\n                handleMouseWheel: scrollbar.handleMouseWheel,\n                mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n                fastScrollSensitivity: fastScrollSensitivity,\n                scrollPredominantAxis: scrollPredominantAxis\n            };\n            this.scrollbar.updateOptions(newOpts);\n        }\n        if (e.hasChanged(133 /* EditorOption.layoutInfo */)) {\n            this._setLayout();\n        }\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        this.scrollbar.updateClassName('editor-scrollable' + ' ' + getThemeTypeSelector(this._context.theme.type));\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to do\n    }\n    render(ctx) {\n        this.scrollbar.renderNow();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    // Scrollbars\n    const scrollbarShadowColor = theme.getColor(scrollbarShadow);\n    if (scrollbarShadowColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .shadow.top {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 0 6px 6px -6px inset;\n\t\t\t}\n\n\t\t\t.monaco-scrollable-element > .shadow.left {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 6px 0 6px -6px inset;\n\t\t\t}\n\n\t\t\t.monaco-scrollable-element > .shadow.top.left {\n\t\t\t\tbox-shadow: ${scrollbarShadowColor} 6px 6px 6px -6px inset;\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderBackgroundColor = theme.getColor(scrollbarSliderBackground);\n    if (scrollbarSliderBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider {\n\t\t\t\tbackground: ${scrollbarSliderBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderHoverBackgroundColor = theme.getColor(scrollbarSliderHoverBackground);\n    if (scrollbarSliderHoverBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider:hover {\n\t\t\t\tbackground: ${scrollbarSliderHoverBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n    const scrollbarSliderActiveBackgroundColor = theme.getColor(scrollbarSliderActiveBackground);\n    if (scrollbarSliderActiveBackgroundColor) {\n        collector.addRule(`\n\t\t\t.monaco-scrollable-element > .scrollbar > .slider.active {\n\t\t\t\tbackground: ${scrollbarSliderActiveBackgroundColor};\n\t\t\t}\n\t\t`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nexport class DecorationToRender {\n    constructor(startLineNumber, endLineNumber, className) {\n        this._decorationToRenderBrand = undefined;\n        this.startLineNumber = +startLineNumber;\n        this.endLineNumber = +endLineNumber;\n        this.className = String(className);\n    }\n}\nexport class DedupOverlay extends DynamicViewOverlay {\n    _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = [];\n        }\n        if (decorations.length === 0) {\n            return output;\n        }\n        decorations.sort((a, b) => {\n            if (a.className === b.className) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return (a.className < b.className ? -1 : 1);\n        });\n        let prevClassName = null;\n        let prevEndLineIndex = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const className = d.className;\n            let startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n            const endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n            if (prevClassName === className) {\n                startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n                prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n            }\n            else {\n                prevClassName = className;\n                prevEndLineIndex = endLineIndex;\n            }\n            for (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n                output[i].push(prevClassName);\n            }\n        }\n        return output;\n    }\n}\nexport class GlyphMarginOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(52 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(52 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const glyphMarginClassName = d.options.glyphMarginClassName;\n            if (glyphMarginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, glyphMarginClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        if (!this._glyphMargin) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const lineHeight = this._lineHeight.toString();\n        const left = this._glyphMarginLeft.toString();\n        const width = this._glyphMarginWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px' + ';height:' + lineHeight + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            if (classNames.length === 0) {\n                output[lineIndex] = '';\n            }\n            else {\n                output[lineIndex] = ('<div class=\"cgmr codicon '\n                    + classNames.join(' ')\n                    + common);\n            }\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './indentGuides.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorActiveIndentGuides, editorBracketHighlightingForeground1, editorBracketHighlightingForeground2, editorBracketHighlightingForeground3, editorBracketHighlightingForeground4, editorBracketHighlightingForeground5, editorBracketHighlightingForeground6, editorBracketPairGuideActiveBackground1, editorBracketPairGuideActiveBackground2, editorBracketPairGuideActiveBackground3, editorBracketPairGuideActiveBackground4, editorBracketPairGuideActiveBackground5, editorBracketPairGuideActiveBackground6, editorBracketPairGuideBackground1, editorBracketPairGuideBackground2, editorBracketPairGuideBackground3, editorBracketPairGuideBackground4, editorBracketPairGuideBackground5, editorBracketPairGuideBackground6, editorIndentGuides } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Position } from '../../../common/core/position.js';\nimport { ArrayQueue } from '../../../../base/common/arrays.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { BracketPairGuidesClassNames } from '../../../common/model/guidesTextModelPart.js';\nimport { IndentGuide, HorizontalGuidesState } from '../../../common/textModelGuides.js';\nexport class IndentGuidesOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._primaryPosition = null;\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(134 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(46 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(13 /* EditorOption.guides */);\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(134 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(46 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(13 /* EditorOption.guides */);\n        return true;\n    }\n    onCursorStateChanged(e) {\n        var _a;\n        const selection = e.selections[0];\n        const newPosition = selection.getPosition();\n        if (!((_a = this._primaryPosition) === null || _a === void 0 ? void 0 : _a.equals(newPosition))) {\n            this._primaryPosition = newPosition;\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged; // || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLanguageConfigurationChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        var _a, _b, _c, _d;\n        if (!this._bracketPairGuideOptions.indentation && this._bracketPairGuideOptions.bracketPairs === false) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const scrollWidth = ctx.scrollWidth;\n        const lineHeight = this._lineHeight;\n        const activeCursorPosition = this._primaryPosition;\n        const indents = this.getGuidesByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition);\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const indent = indents[lineIndex];\n            let result = '';\n            const leftOffset = (_b = (_a = ctx.visibleRangeForPosition(new Position(lineNumber, 1))) === null || _a === void 0 ? void 0 : _a.left) !== null && _b !== void 0 ? _b : 0;\n            for (const guide of indent) {\n                const left = guide.column === -1\n                    ? leftOffset + (guide.visibleColumn - 1) * this._spaceWidth\n                    : ctx.visibleRangeForPosition(new Position(lineNumber, guide.column)).left;\n                if (left > scrollWidth || (this._maxIndentLeft > 0 && left > this._maxIndentLeft)) {\n                    break;\n                }\n                const className = guide.horizontalLine ? (guide.horizontalLine.top ? 'horizontal-top' : 'horizontal-bottom') : 'vertical';\n                const width = guide.horizontalLine\n                    ? ((_d = (_c = ctx.visibleRangeForPosition(new Position(lineNumber, guide.horizontalLine.endColumn))) === null || _c === void 0 ? void 0 : _c.left) !== null && _d !== void 0 ? _d : (left + this._spaceWidth)) - left\n                    : this._spaceWidth;\n                result += `<div class=\"core-guide ${guide.className} ${className}\" style=\"left:${left}px;height:${lineHeight}px;width:${width}px\"></div>`;\n            }\n            output[lineIndex] = result;\n        }\n        this._renderResult = output;\n    }\n    getGuidesByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition) {\n        const bracketGuides = this._bracketPairGuideOptions.bracketPairs !== false\n            ? this._context.viewModel.getBracketGuidesInRangeByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition, {\n                highlightActive: this._bracketPairGuideOptions.highlightActiveBracketPair,\n                horizontalGuides: this._bracketPairGuideOptions.bracketPairsHorizontal === true\n                    ? HorizontalGuidesState.Enabled\n                    : this._bracketPairGuideOptions.bracketPairsHorizontal === 'active'\n                        ? HorizontalGuidesState.EnabledForActive\n                        : HorizontalGuidesState.Disabled,\n                includeInactive: this._bracketPairGuideOptions.bracketPairs === true,\n            })\n            : null;\n        const indentGuides = this._bracketPairGuideOptions.indentation\n            ? this._context.viewModel.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber)\n            : null;\n        let activeIndentStartLineNumber = 0;\n        let activeIndentEndLineNumber = 0;\n        let activeIndentLevel = 0;\n        if (this._bracketPairGuideOptions.highlightActiveIndentation !== false && activeCursorPosition) {\n            const activeIndentInfo = this._context.viewModel.getActiveIndentGuide(activeCursorPosition.lineNumber, visibleStartLineNumber, visibleEndLineNumber);\n            activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\n            activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\n            activeIndentLevel = activeIndentInfo.indent;\n        }\n        const { indentSize } = this._context.viewModel.model.getOptions();\n        const result = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineGuides = new Array();\n            result.push(lineGuides);\n            const bracketGuidesInLine = bracketGuides ? bracketGuides[lineNumber - visibleStartLineNumber] : [];\n            const bracketGuidesInLineQueue = new ArrayQueue(bracketGuidesInLine);\n            const indentGuidesInLine = indentGuides ? indentGuides[lineNumber - visibleStartLineNumber] : [];\n            for (let indentLvl = 1; indentLvl <= indentGuidesInLine; indentLvl++) {\n                const indentGuide = (indentLvl - 1) * indentSize + 1;\n                const isActive = \n                // Disable active indent guide if there are bracket guides.\n                (this._bracketPairGuideOptions.highlightActiveIndentation === 'always' || bracketGuidesInLine.length === 0) &&\n                    activeIndentStartLineNumber <= lineNumber &&\n                    lineNumber <= activeIndentEndLineNumber &&\n                    indentLvl === activeIndentLevel;\n                lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => g.visibleColumn < indentGuide) || []);\n                const peeked = bracketGuidesInLineQueue.peek();\n                if (!peeked || peeked.visibleColumn !== indentGuide || peeked.horizontalLine) {\n                    lineGuides.push(new IndentGuide(indentGuide, -1, isActive ? 'core-guide-indent-active' : 'core-guide-indent', null, -1, -1));\n                }\n            }\n            lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => true) || []);\n        }\n        return result;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nfunction transparentToUndefined(color) {\n    if (color && color.isTransparent()) {\n        return undefined;\n    }\n    return color;\n}\nregisterThemingParticipant((theme, collector) => {\n    const editorIndentGuidesColor = theme.getColor(editorIndentGuides);\n    if (editorIndentGuidesColor) {\n        collector.addRule(`.monaco-editor .lines-content .core-guide-indent { box-shadow: 1px 0 0 0 ${editorIndentGuidesColor} inset; }`);\n    }\n    const editorActiveIndentGuidesColor = theme.getColor(editorActiveIndentGuides) || editorIndentGuidesColor;\n    if (editorActiveIndentGuidesColor) {\n        collector.addRule(`.monaco-editor .lines-content .core-guide-indent-active { box-shadow: 1px 0 0 0 ${editorActiveIndentGuidesColor} inset; }`);\n    }\n    const colors = [\n        { bracketColor: editorBracketHighlightingForeground1, guideColor: editorBracketPairGuideBackground1, guideColorActive: editorBracketPairGuideActiveBackground1 },\n        { bracketColor: editorBracketHighlightingForeground2, guideColor: editorBracketPairGuideBackground2, guideColorActive: editorBracketPairGuideActiveBackground2 },\n        { bracketColor: editorBracketHighlightingForeground3, guideColor: editorBracketPairGuideBackground3, guideColorActive: editorBracketPairGuideActiveBackground3 },\n        { bracketColor: editorBracketHighlightingForeground4, guideColor: editorBracketPairGuideBackground4, guideColorActive: editorBracketPairGuideActiveBackground4 },\n        { bracketColor: editorBracketHighlightingForeground5, guideColor: editorBracketPairGuideBackground5, guideColorActive: editorBracketPairGuideActiveBackground5 },\n        { bracketColor: editorBracketHighlightingForeground6, guideColor: editorBracketPairGuideBackground6, guideColorActive: editorBracketPairGuideActiveBackground6 }\n    ];\n    const colorProvider = new BracketPairGuidesClassNames();\n    const colorValues = colors\n        .map(c => {\n        var _a, _b;\n        const bracketColor = theme.getColor(c.bracketColor);\n        const guideColor = theme.getColor(c.guideColor);\n        const guideColorActive = theme.getColor(c.guideColorActive);\n        const effectiveGuideColor = transparentToUndefined((_a = transparentToUndefined(guideColor)) !== null && _a !== void 0 ? _a : bracketColor === null || bracketColor === void 0 ? void 0 : bracketColor.transparent(0.3));\n        const effectiveGuideColorActive = transparentToUndefined((_b = transparentToUndefined(guideColorActive)) !== null && _b !== void 0 ? _b : bracketColor);\n        if (!effectiveGuideColor || !effectiveGuideColorActive) {\n            return undefined;\n        }\n        return {\n            guideColor: effectiveGuideColor,\n            guideColorActive: effectiveGuideColorActive,\n        };\n    })\n        .filter(isDefined);\n    if (colorValues.length > 0) {\n        for (let level = 0; level < 30; level++) {\n            const colors = colorValues[level % colorValues.length];\n            collector.addRule(`.monaco-editor .${colorProvider.getInlineClassNameOfLevel(level).replace(/ /g, '.')} { --guide-color: ${colors.guideColor}; --guide-color-active: ${colors.guideColorActive}; }`);\n        }\n        collector.addRule(`.monaco-editor .vertical { box-shadow: 1px 0 0 0 var(--guide-color) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top { border-top: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom { border-bottom: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .vertical.${colorProvider.activeClassName} { box-shadow: 1px 0 0 0 var(--guide-color-active) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top.${colorProvider.activeClassName} { border-top: 1px solid var(--guide-color-active); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom.${colorProvider.activeClassName} { border-bottom: 1px solid var(--guide-color-active); }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './viewLines.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { DomReadingContext, ViewLine, ViewLineOptions } from './viewLine.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { LineVisibleRanges, HorizontalPosition, HorizontalRange } from '../../view/renderingContext.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass LastRenderedData {\n    constructor() {\n        this._currentVisibleRange = new Range(1, 1, 1, 1);\n    }\n    getCurrentVisibleRange() {\n        return this._currentVisibleRange;\n    }\n    setCurrentVisibleRange(currentVisibleRange) {\n        this._currentVisibleRange = currentVisibleRange;\n    }\n}\nclass HorizontalRevealRangeRequest {\n    constructor(minimalReveal, lineNumber, startColumn, endColumn, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.lineNumber = lineNumber;\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'range';\n        this.minLineNumber = lineNumber;\n        this.maxLineNumber = lineNumber;\n    }\n}\nclass HorizontalRevealSelectionsRequest {\n    constructor(minimalReveal, selections, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.selections = selections;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'selections';\n        let minLineNumber = selections[0].startLineNumber;\n        let maxLineNumber = selections[0].endLineNumber;\n        for (let i = 1, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n            maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n        }\n        this.minLineNumber = minLineNumber;\n        this.maxLineNumber = maxLineNumber;\n    }\n}\nexport class ViewLines extends ViewPart {\n    constructor(context, linesContent) {\n        super(context);\n        this._linesContent = linesContent;\n        this._textRangeRestingSpot = document.createElement('div');\n        this._visibleLines = new VisibleLinesCollection(this);\n        this.domNode = this._visibleLines.domNode;\n        const conf = this._context.configuration;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(46 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(134 /* EditorOption.wrappingInfo */);\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(91 /* EditorOption.revealHorizontalRightPadding */);\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._cursorSurroundingLines = options.get(25 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(26 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(28 /* EditorOption.disableLayerHinting */);\n        this._viewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        PartFingerprints.write(this.domNode, 7 /* PartFingerprint.ViewLines */);\n        this.domNode.setClassName(`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        applyFontInfo(this.domNode, fontInfo);\n        // --- width & height\n        this._maxLineWidth = 0;\n        this._asyncUpdateLineWidths = new RunOnceScheduler(() => {\n            this._updateLineWidthsSlow();\n        }, 200);\n        this._asyncCheckMonospaceFontAssumptions = new RunOnceScheduler(() => {\n            this._checkMonospaceFontAssumptions();\n        }, 2000);\n        this._lastRenderedData = new LastRenderedData();\n        this._horizontalRevealRequest = null;\n    }\n    dispose() {\n        this._asyncUpdateLineWidths.dispose();\n        this._asyncCheckMonospaceFontAssumptions.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    // ---- begin IVisibleLinesHost\n    createVisibleLine() {\n        return new ViewLine(this._viewLineOptions);\n    }\n    // ---- end IVisibleLinesHost\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        if (e.hasChanged(134 /* EditorOption.wrappingInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(46 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(134 /* EditorOption.wrappingInfo */);\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(91 /* EditorOption.revealHorizontalRightPadding */);\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._cursorSurroundingLines = options.get(25 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(26 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(28 /* EditorOption.disableLayerHinting */);\n        applyFontInfo(this.domNode, fontInfo);\n        this._onOptionsMaybeChanged();\n        if (e.hasChanged(133 /* EditorOption.layoutInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        return true;\n    }\n    _onOptionsMaybeChanged() {\n        const conf = this._context.configuration;\n        const newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        if (!this._viewLineOptions.equals(newViewLineOptions)) {\n            this._viewLineOptions = newViewLineOptions;\n            const startLineNumber = this._visibleLines.getStartLineNumber();\n            const endLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n                const line = this._visibleLines.getVisibleLine(lineNumber);\n                line.onOptionsChanged(this._viewLineOptions);\n            }\n            return true;\n        }\n        return false;\n    }\n    onCursorStateChanged(e) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let r = false;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            r = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\n        }\n        return r;\n    }\n    onDecorationsChanged(e) {\n        if (true /*e.inlineDecorationsChanged*/) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\n            }\n        }\n        return true;\n    }\n    onFlushed(e) {\n        const shouldRender = this._visibleLines.onFlushed(e);\n        this._maxLineWidth = 0;\n        return shouldRender;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onRevealRangeRequest(e) {\n        // Using the future viewport here in order to handle multiple\n        // incoming reveal range requests that might all desire to be animated\n        const desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.minimalReveal, e.range, e.selections, e.verticalType);\n        if (desiredScrollTop === -1) {\n            // marker to abort the reveal range request\n            return false;\n        }\n        // validate the new desired scroll top\n        let newScrollPosition = this._context.viewLayout.validateScrollPosition({ scrollTop: desiredScrollTop });\n        if (e.revealHorizontal) {\n            if (e.range && e.range.startLineNumber !== e.range.endLineNumber) {\n                // Two or more lines? => scroll to base (That's how you see most of the two lines)\n                newScrollPosition = {\n                    scrollTop: newScrollPosition.scrollTop,\n                    scrollLeft: 0\n                };\n            }\n            else if (e.range) {\n                // We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n                this._horizontalRevealRequest = new HorizontalRevealRangeRequest(e.minimalReveal, e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n            else if (e.selections && e.selections.length > 0) {\n                this._horizontalRevealRequest = new HorizontalRevealSelectionsRequest(e.minimalReveal, e.selections, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n        }\n        else {\n            this._horizontalRevealRequest = null;\n        }\n        const scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\n        const scrollType = (scrollTopDelta <= this._lineHeight ? 1 /* ScrollType.Immediate */ : e.scrollType);\n        this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, scrollType);\n        return true;\n    }\n    onScrollChanged(e) {\n        if (this._horizontalRevealRequest && e.scrollLeftChanged) {\n            // cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n            this._horizontalRevealRequest = null;\n        }\n        if (this._horizontalRevealRequest && e.scrollTopChanged) {\n            const min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            const max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            if (e.scrollTop < min || e.scrollTop > max) {\n                // cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n                this._horizontalRevealRequest = null;\n            }\n        }\n        this.domNode.setWidth(e.scrollWidth);\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        return this._visibleLines.onZonesChanged(e);\n    }\n    onThemeChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    // ---- end view event handlers\n    // ----------- HELPERS FOR OTHERS\n    getPositionFromDOMInfo(spanNode, offset) {\n        const viewLineDomNode = this._getViewLineDomNode(spanNode);\n        if (viewLineDomNode === null) {\n            // Couldn't find view line node\n            return null;\n        }\n        const lineNumber = this._getLineNumberFor(viewLineDomNode);\n        if (lineNumber === -1) {\n            // Couldn't find view line node\n            return null;\n        }\n        if (lineNumber < 1 || lineNumber > this._context.viewModel.getLineCount()) {\n            // lineNumber is outside range\n            return null;\n        }\n        if (this._context.viewModel.getLineMaxColumn(lineNumber) === 1) {\n            // Line is empty\n            return new Position(lineNumber, 1);\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return null;\n        }\n        let column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(lineNumber, spanNode, offset);\n        const minColumn = this._context.viewModel.getLineMinColumn(lineNumber);\n        if (column < minColumn) {\n            column = minColumn;\n        }\n        return new Position(lineNumber, column);\n    }\n    _getViewLineDomNode(node) {\n        while (node && node.nodeType === 1) {\n            if (node.className === ViewLine.CLASS_NAME) {\n                return node;\n            }\n            node = node.parentElement;\n        }\n        return null;\n    }\n    /**\n     * @returns the line number of this view line dom node.\n     */\n    _getLineNumberFor(domNode) {\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const line = this._visibleLines.getVisibleLine(lineNumber);\n            if (domNode === line.getDomNode()) {\n                return lineNumber;\n            }\n        }\n        return -1;\n    }\n    getLineWidth(lineNumber) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return -1;\n        }\n        return this._visibleLines.getVisibleLine(lineNumber).getWidth();\n    }\n    linesVisibleRangesForRange(_range, includeNewLines) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        const originalEndLineNumber = _range.endLineNumber;\n        const range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\n        if (!range) {\n            return null;\n        }\n        const visibleRanges = [];\n        let visibleRangesLen = 0;\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        let nextLineModelLineNumber = 0;\n        if (includeNewLines) {\n            nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n            if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n                continue;\n            }\n            const startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\n            const endColumn = lineNumber === range.endLineNumber ? range.endColumn : this._context.viewModel.getLineMaxColumn(lineNumber);\n            const visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n            if (!visibleRangesForLine) {\n                continue;\n            }\n            if (includeNewLines && lineNumber < originalEndLineNumber) {\n                const currentLineModelLineNumber = nextLineModelLineNumber;\n                nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\n                if (currentLineModelLineNumber !== nextLineModelLineNumber) {\n                    visibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\n                }\n            }\n            visibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, HorizontalRange.from(visibleRangesForLine.ranges));\n        }\n        if (visibleRangesLen === 0) {\n            return null;\n        }\n        return visibleRanges;\n    }\n    _visibleRangesForLineRange(lineNumber, startColumn, endColumn) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        if (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\n            return null;\n        }\n        return this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot));\n    }\n    visibleRangeForPosition(position) {\n        const visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\n        if (!visibleRanges) {\n            return null;\n        }\n        return new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\n    }\n    // --- implementation\n    updateLineWidths() {\n        this._updateLineWidths(false);\n    }\n    /**\n     * Updates the max line width if it is fast to compute.\n     * Returns true if all lines were taken into account.\n     * Returns false if some lines need to be reevaluated (in a slow fashion).\n     */\n    _updateLineWidthsFast() {\n        return this._updateLineWidths(true);\n    }\n    _updateLineWidthsSlow() {\n        this._updateLineWidths(false);\n    }\n    _updateLineWidths(fast) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let localMaxLineWidth = 1;\n        let allWidthsComputed = true;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (fast && !visibleLine.getWidthIsFast()) {\n                // Cannot compute width in a fast way for this line\n                allWidthsComputed = false;\n                continue;\n            }\n            localMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth());\n        }\n        if (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.viewModel.getLineCount()) {\n            // we know the max line width for all the lines\n            this._maxLineWidth = 0;\n        }\n        this._ensureMaxLineWidth(localMaxLineWidth);\n        return allWidthsComputed;\n    }\n    _checkMonospaceFontAssumptions() {\n        // Problems with monospace assumptions are more apparent for longer lines,\n        // as small rounding errors start to sum up, so we will select the longest\n        // line for a closer inspection\n        let longestLineNumber = -1;\n        let longestWidth = -1;\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (visibleLine.needsMonospaceFontCheck()) {\n                const lineWidth = visibleLine.getWidth();\n                if (lineWidth > longestWidth) {\n                    longestWidth = lineWidth;\n                    longestLineNumber = lineNumber;\n                }\n            }\n        }\n        if (longestLineNumber === -1) {\n            return;\n        }\n        if (!this._visibleLines.getVisibleLine(longestLineNumber).monospaceAssumptionsAreValid()) {\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                visibleLine.onMonospaceAssumptionsInvalidated();\n            }\n        }\n    }\n    prepareRender() {\n        throw new Error('Not supported');\n    }\n    render() {\n        throw new Error('Not supported');\n    }\n    renderText(viewportData) {\n        // (1) render lines - ensures lines are in the DOM\n        this._visibleLines.renderLines(viewportData);\n        this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\n        this.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n        this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000));\n        // (2) compute horizontal scroll position:\n        //  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n        //  - it might change `scrollWidth` and `scrollLeft`\n        if (this._horizontalRevealRequest) {\n            const horizontalRevealRequest = this._horizontalRevealRequest;\n            // Check that we have the line that contains the horizontal range in the viewport\n            if (viewportData.startLineNumber <= horizontalRevealRequest.minLineNumber && horizontalRevealRequest.maxLineNumber <= viewportData.endLineNumber) {\n                this._horizontalRevealRequest = null;\n                // allow `visibleRangesForRange2` to work\n                this.onDidRender();\n                // compute new scroll position\n                const newScrollLeft = this._computeScrollLeftToReveal(horizontalRevealRequest);\n                if (newScrollLeft) {\n                    if (!this._isViewportWrapping) {\n                        // ensure `scrollWidth` is large enough\n                        this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\n                    }\n                    // set `scrollLeft`\n                    this._context.viewModel.viewLayout.setScrollPosition({\n                        scrollLeft: newScrollLeft.scrollLeft\n                    }, horizontalRevealRequest.scrollType);\n                }\n            }\n        }\n        // Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n        if (!this._updateLineWidthsFast()) {\n            // Computing the width of some lines would be slow => delay it\n            this._asyncUpdateLineWidths.schedule();\n        }\n        if (platform.isLinux && !this._asyncCheckMonospaceFontAssumptions.isScheduled()) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                if (visibleLine.needsMonospaceFontCheck()) {\n                    this._asyncCheckMonospaceFontAssumptions.schedule();\n                    break;\n                }\n            }\n        }\n        // (3) handle scrolling\n        this._linesContent.setLayerHinting(this._canUseLayerHinting);\n        this._linesContent.setContain('strict');\n        const adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\n        this._linesContent.setTop(-adjustedScrollTop);\n        this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\n    }\n    // --- width\n    _ensureMaxLineWidth(lineWidth) {\n        const iLineWidth = Math.ceil(lineWidth);\n        if (this._maxLineWidth < iLineWidth) {\n            this._maxLineWidth = iLineWidth;\n            this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        }\n    }\n    _computeScrollTopToRevealRange(viewport, source, minimalReveal, range, selections, verticalType) {\n        const viewportStartY = viewport.top;\n        const viewportHeight = viewport.height;\n        const viewportEndY = viewportStartY + viewportHeight;\n        let boxIsSingleRange;\n        let boxStartY;\n        let boxEndY;\n        if (selections && selections.length > 0) {\n            let minLineNumber = selections[0].startLineNumber;\n            let maxLineNumber = selections[0].endLineNumber;\n            for (let i = 1, len = selections.length; i < len; i++) {\n                const selection = selections[i];\n                minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n                maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n            }\n            boxIsSingleRange = false;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(minLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(maxLineNumber) + this._lineHeight;\n        }\n        else if (range) {\n            boxIsSingleRange = true;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\n        }\n        else {\n            return -1;\n        }\n        const shouldIgnoreScrollOff = (source === 'mouse' || minimalReveal) && this._cursorSurroundingLinesStyle === 'default';\n        if (!shouldIgnoreScrollOff) {\n            const context = Math.min((viewportHeight / this._lineHeight) / 2, this._cursorSurroundingLines);\n            boxStartY -= context * this._lineHeight;\n            boxEndY += Math.max(0, (context - 1)) * this._lineHeight;\n        }\n        else {\n            if (!minimalReveal) {\n                // Reveal one more line above (this case is hit when dragging)\n                boxStartY -= this._lineHeight;\n            }\n        }\n        if (verticalType === 0 /* viewEvents.VerticalRevealType.Simple */ || verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */) {\n            // Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n            boxEndY += (minimalReveal ? this._horizontalScrollbarHeight : this._lineHeight);\n        }\n        let newScrollTop;\n        if (boxEndY - boxStartY > viewportHeight) {\n            // the box is larger than the viewport ... scroll to its top\n            if (!boxIsSingleRange) {\n                // do not reveal multiple cursors if there are more than fit the viewport\n                return -1;\n            }\n            newScrollTop = boxStartY;\n        }\n        else if (verticalType === 5 /* viewEvents.VerticalRevealType.NearTop */ || verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */) {\n            if (verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // We want a gap that is 20% of the viewport, but with a minimum of 5 lines\n                const desiredGapAbove = Math.max(5 * this._lineHeight, viewportHeight * 0.2);\n                // Try to scroll just above the box with the desired gap\n                const desiredScrollTop = boxStartY - desiredGapAbove;\n                // But ensure that the box is not pushed out of viewport\n                const minScrollTop = boxEndY - viewportHeight;\n                newScrollTop = Math.max(minScrollTop, desiredScrollTop);\n            }\n        }\n        else if (verticalType === 1 /* viewEvents.VerticalRevealType.Center */ || verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */) {\n            if (verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // Box is outside the viewport... center it\n                const boxMiddleY = (boxStartY + boxEndY) / 2;\n                newScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n            }\n        }\n        else {\n            newScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === 3 /* viewEvents.VerticalRevealType.Top */, verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */);\n        }\n        return newScrollTop;\n    }\n    _computeScrollLeftToReveal(horizontalRevealRequest) {\n        const viewport = this._context.viewLayout.getCurrentViewport();\n        const viewportStartX = viewport.left;\n        const viewportEndX = viewportStartX + viewport.width;\n        let boxStartX = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n        let boxEndX = 0;\n        if (horizontalRevealRequest.type === 'range') {\n            const visibleRanges = this._visibleRangesForLineRange(horizontalRevealRequest.lineNumber, horizontalRevealRequest.startColumn, horizontalRevealRequest.endColumn);\n            if (!visibleRanges) {\n                return null;\n            }\n            for (const visibleRange of visibleRanges.ranges) {\n                boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n            }\n        }\n        else {\n            for (const selection of horizontalRevealRequest.selections) {\n                if (selection.startLineNumber !== selection.endLineNumber) {\n                    return null;\n                }\n                const visibleRanges = this._visibleRangesForLineRange(selection.startLineNumber, selection.startColumn, selection.endColumn);\n                if (!visibleRanges) {\n                    return null;\n                }\n                for (const visibleRange of visibleRanges.ranges) {\n                    boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                    boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n                }\n            }\n        }\n        if (!horizontalRevealRequest.minimalReveal) {\n            boxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n            boxEndX += this._revealHorizontalRightPadding;\n        }\n        if (horizontalRevealRequest.type === 'selections' && boxEndX - boxStartX > viewport.width) {\n            return null;\n        }\n        const newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\n        return {\n            scrollLeft: newScrollLeft,\n            maxHorizontalOffset: boxEndX\n        };\n    }\n    _computeMinimumScrolling(viewportStart, viewportEnd, boxStart, boxEnd, revealAtStart, revealAtEnd) {\n        viewportStart = viewportStart | 0;\n        viewportEnd = viewportEnd | 0;\n        boxStart = boxStart | 0;\n        boxEnd = boxEnd | 0;\n        revealAtStart = !!revealAtStart;\n        revealAtEnd = !!revealAtEnd;\n        const viewportLength = viewportEnd - viewportStart;\n        const boxLength = boxEnd - boxStart;\n        if (boxLength < viewportLength) {\n            // The box would fit in the viewport\n            if (revealAtStart) {\n                return boxStart;\n            }\n            if (revealAtEnd) {\n                return Math.max(0, boxEnd - viewportLength);\n            }\n            if (boxStart < viewportStart) {\n                // The box is above the viewport\n                return boxStart;\n            }\n            else if (boxEnd > viewportEnd) {\n                // The box is below the viewport\n                return Math.max(0, boxEnd - viewportLength);\n            }\n        }\n        else {\n            // The box would not fit in the viewport\n            // Reveal the beginning of the box\n            return boxStart;\n        }\n        return viewportStart;\n    }\n}\n/**\n * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\n */\nViewLines.HORIZONTAL_EXTRA_PX = 30;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './linesDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class LinesDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const linesDecorationsClassName = d.options.linesDecorationsClassName;\n            if (linesDecorationsClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName);\n            }\n            const firstLineDecorationClassName = d.options.firstLineDecorationClassName;\n            if (firstLineDecorationClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.startLineNumber, firstLineDecorationClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const left = this._decorationsLeft.toString();\n        const width = this._decorationsWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            let lineOutput = '';\n            for (let i = 0, len = classNames.length; i < len; i++) {\n                lineOutput += '<div class=\"cldr ' + classNames[i] + common;\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './marginDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class MarginViewLineDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const marginClassName = d.options.marginClassName;\n            if (marginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, marginClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            let lineOutput = '';\n            for (let i = 0, len = classNames.length; i < len; i++) {\n                lineOutput += '<div class=\"cmdr ' + classNames[i] + '\" style=\"\"></div>';\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const allCharCodes = (() => {\n    const v = [];\n    for (let i = 32 /* Constants.START_CH_CODE */; i <= 126 /* Constants.END_CH_CODE */; i++) {\n        v.push(i);\n    }\n    v.push(65533 /* Constants.UNKNOWN_CODE */);\n    return v;\n})();\nexport const getCharIndex = (chCode, fontScale) => {\n    chCode -= 32 /* Constants.START_CH_CODE */;\n    if (chCode < 0 || chCode > 96 /* Constants.CHAR_COUNT */) {\n        if (fontScale <= 2) {\n            // for smaller scales, we can get away with using any ASCII character...\n            return (chCode + 96 /* Constants.CHAR_COUNT */) % 96 /* Constants.CHAR_COUNT */;\n        }\n        return 96 /* Constants.CHAR_COUNT */ - 1; // unknown symbol\n    }\n    return chCode;\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getCharIndex } from './minimapCharSheet.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\nexport class MinimapCharRenderer {\n    constructor(charData, scale) {\n        this.scale = scale;\n        this._minimapCharRendererBrand = undefined;\n        this.charDataNormal = MinimapCharRenderer.soften(charData, 12 / 15);\n        this.charDataLight = MinimapCharRenderer.soften(charData, 50 / 60);\n    }\n    static soften(input, ratio) {\n        const result = new Uint8ClampedArray(input.length);\n        for (let i = 0, len = input.length; i < len; i++) {\n            result[i] = toUint8(input[i] * ratio);\n        }\n        return result;\n    }\n    renderChar(target, dx, dy, chCode, color, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight) {\n        const charWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* Constants.BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const charData = useLighterFont ? this.charDataLight : this.charDataNormal;\n        const charIndex = getCharIndex(chCode, fontScale);\n        const destWidth = target.width * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let sourceOffset = charIndex * charWidth * charHeight;\n        let row = dy * destWidth + dx * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                const c = (charData[sourceOffset++] / 255) * (foregroundAlpha / 255);\n                dest[column++] = backgroundR + deltaR * c;\n                dest[column++] = backgroundG + deltaG * c;\n                dest[column++] = backgroundB + deltaB * c;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n    blockRenderChar(target, dx, dy, color, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight) {\n        const charWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* Constants.BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const destWidth = target.width * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        const c = 0.5 * (foregroundAlpha / 255);\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const colorR = backgroundR + deltaR * c;\n        const colorG = backgroundG + deltaG * c;\n        const colorB = backgroundB + deltaB * c;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let row = dy * destWidth + dx * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                dest[column++] = colorR;\n                dest[column++] = colorG;\n                dest[column++] = colorB;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { once } from '../../../../base/common/functional.js';\nconst charTable = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15\n};\nconst decodeData = (str) => {\n    const output = new Uint8ClampedArray(str.length / 2);\n    for (let i = 0; i < str.length; i += 2) {\n        output[i >> 1] = (charTable[str[i]] << 4) | (charTable[str[i + 1]] & 0xF);\n    }\n    return output;\n};\n/*\nconst encodeData = (data: Uint8ClampedArray, length: string) => {\n    const chars = '0123456789ABCDEF';\n    let output = '';\n    for (let i = 0; i < data.length; i++) {\n        output += chars[data[i] >> 4] + chars[data[i] & 0xf];\n    }\n    return output;\n};\n*/\n/**\n * Map of minimap scales to prebaked sample data at those scales. We don't\n * sample much larger data, because then font family becomes visible, which\n * is use-configurable.\n */\nexport const prebakedMiniMaps = {\n    1: once(() => decodeData('0000511D6300CF609C709645A78432005642574171487021003C451900274D35D762755E8B629C5BA856AF57BA649530C167D1512A272A3F6038604460398526BCA2A968DB6F8957C768BE5FBE2FB467CF5D8D5B795DC7625B5DFF50DE64C466DB2FC47CD860A65E9A2EB96CB54CE06DA763AB2EA26860524D3763536601005116008177A8705E53AB738E6A982F88BAA35B5F5B626D9C636B449B737E5B7B678598869A662F6B5B8542706C704C80736A607578685B70594A49715A4522E792')),\n    2: once(() => decodeDatan};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MinimapCharRenderer } from './minimapCharRenderer.js';\nimport { allCharCodes } from './minimapCharSheet.js';\nimport { prebakedMiniMaps } from './minimapPreBaked.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\n/**\n * Creates character renderers. It takes a 'scale' that determines how large\n * characters should be drawn. Using this, it draws data into a canvas and\n * then downsamples the characters as necessary for the current display.\n * This makes rendering more efficient, rather than drawing a full (tiny)\n * font, or downsampling in real-time.\n */\nexport class MinimapCharRendererFactory {\n    /**\n     * Creates a new character renderer factory with the given scale.\n     */\n    static create(scale, fontFamily) {\n        // renderers are immutable. By default we'll 'create' a new minimap\n        // character renderer whenever we switch editors, no need to do extra work.\n        if (this.lastCreated && scale === this.lastCreated.scale && fontFamily === this.lastFontFamily) {\n            return this.lastCreated;\n        }\n        let factory;\n        if (prebakedMiniMaps[scale]) {\n            factory = new MinimapCharRenderer(prebakedMiniMaps[scale](), scale);\n        }\n        else {\n            factory = MinimapCharRendererFactory.createFromSampleData(MinimapCharRendererFactory.createSampleData(fontFamily).data, scale);\n        }\n        this.lastFontFamily = fontFamily;\n        this.lastCreated = factory;\n        return factory;\n    }\n    /**\n     * Creates the font sample data, writing to a canvas.\n     */\n    static createSampleData(fontFamily) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.style.height = `${16 /* Constants.SAMPLED_CHAR_HEIGHT */}px`;\n        canvas.height = 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n        canvas.width = 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n        canvas.style.width = 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */ + 'px';\n        ctx.fillStyle = '#ffffff';\n        ctx.font = `bold ${16 /* Constants.SAMPLED_CHAR_HEIGHT */}px ${fontFamily}`;\n        ctx.textBaseline = 'middle';\n        let x = 0;\n        for (const code of allCharCodes) {\n            ctx.fillText(String.fromCharCode(code), x, 16 /* Constants.SAMPLED_CHAR_HEIGHT */ / 2);\n            x += 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n        }\n        return ctx.getImageData(0, 0, 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */, 16 /* Constants.SAMPLED_CHAR_HEIGHT */);\n    }\n    /**\n     * Creates a character renderer from the canvas sample data.\n     */\n    static createFromSampleData(source, scale) {\n        const expectedLength = 16 /* Constants.SAMPLED_CHAR_HEIGHT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */ * 4 /* Constants.RGBA_CHANNELS_CNT */ * 96 /* Constants.CHAR_COUNT */;\n        if (source.length !== expectedLength) {\n            throw new Error('Unexpected source in MinimapCharRenderer');\n        }\n        const charData = MinimapCharRendererFactory._downsample(source, scale);\n        return new MinimapCharRenderer(charData, scale);\n    }\n    static _downsampleChar(source, sourceOffset, dest, destOffset, scale) {\n        const width = 1 /* Constants.BASE_CHAR_WIDTH */ * scale;\n        const height = 2 /* Constants.BASE_CHAR_HEIGHT */ * scale;\n        let targetIndex = destOffset;\n        let brightest = 0;\n        // This is essentially an ad-hoc rescaling algorithm. Standard approaches\n        // like bicubic interpolation are awesome for scaling between image sizes,\n        // but don't work so well when scaling to very small pixel values, we end\n        // up with blurry, indistinct forms.\n        //\n        // The approach taken here is simply mapping each source pixel to the target\n        // pixels, and taking the weighted values for all pixels in each, and then\n        // averaging them out. Finally we apply an intensity boost in _downsample,\n        // since when scaling to the smallest pixel sizes there's more black space\n        // which causes characters to be much less distinct.\n        for (let y = 0; y < height; y++) {\n            // 1. For this destination pixel, get the source pixels we're sampling\n            // from (x1, y1) to the next pixel (x2, y2)\n            const sourceY1 = (y / height) * 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n            const sourceY2 = ((y + 1) / height) * 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n            for (let x = 0; x < width; x++) {\n                const sourceX1 = (x / width) * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n                const sourceX2 = ((x + 1) / width) * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n                // 2. Sample all of them, summing them up and weighting them. Similar\n                // to bilinear interpolation.\n                let value = 0;\n                let samples = 0;\n                for (let sy = sourceY1; sy < sourceY2; sy++) {\n                    const sourceRow = sourceOffset + Math.floor(sy) * 3840 /* Constants.RGBA_SAMPLED_ROW_WIDTH */;\n                    const yBalance = 1 - (sy - Math.floor(sy));\n                    for (let sx = sourceX1; sx < sourceX2; sx++) {\n                        const xBalance = 1 - (sx - Math.floor(sx));\n                        const sourceIndex = sourceRow + Math.floor(sx) * 4 /* Constants.RGBA_CHANNELS_CNT */;\n                        const weight = xBalance * yBalance;\n                        samples += weight;\n                        value += ((source[sourceIndex] * source[sourceIndex + 3]) / 255) * weight;\n                    }\n                }\n                const final = value / samples;\n                brightest = Math.max(brightest, final);\n                dest[targetIndex++] = toUint8(final);\n            }\n        }\n        return brightest;\n    }\n    static _downsample(data, scale) {\n        const pixelsPerCharacter = 2 /* Constants.BASE_CHAR_HEIGHT */ * scale * 1 /* Constants.BASE_CHAR_WIDTH */ * scale;\n        const resultLen = pixelsPerCharacter * 96 /* Constants.CHAR_COUNT */;\n        const result = new Uint8ClampedArray(resultLen);\n        let resultOffset = 0;\n        let sourceOffset = 0;\n        let brightest = 0;\n        for (let charIndex = 0; charIndex < 96 /* Constants.CHAR_COUNT */; charIndex++) {\n            brightest = Math.max(brightest, this._downsampleChar(data, sourceOffset, result, resultOffset, scale));\n            resultOffset += pixelsPerCharacter;\n            sourceOffset += 10 /* Constants.SAMPLED_CHAR_WIDTH */ * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        }\n        if (brightest > 0) {\n            const adjust = 255 / brightest;\n            for (let i = 0; i < resultLen; i++) {\n                result[i] *= adjust;\n            }\n        }\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './minimap.css';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { GlobalPointerMoveMonitor } from '../../../../base/browser/globalPointerMoveMonitor.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { RenderedLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { MINIMAP_GUTTER_WIDTH, EditorLayoutInfoComputer } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { RGBA8 } from '../../../common/core/rgba.js';\nimport { MinimapTokensColorTracker } from '../../../common/viewModel/minimapTokensColorTracker.js';\nimport { ViewModelDecoration } from '../../../common/viewModel.js';\nimport { minimapSelection, scrollbarShadow, minimapBackground, minimapSliderBackground, minimapSliderHoverBackground, minimapSliderActiveBackground, minimapForegroundOpacity } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EventType, Gesture } from '../../../../base/browser/touch.js';\nimport { MinimapCharRendererFactory } from './minimapCharRendererFactory.js';\nimport { MinimapPosition } from '../../../common/model.js';\nimport { once } from '../../../../base/common/functional.js';\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nconst POINTER_DRAG_RESET_DISTANCE = 140;\nconst GUTTER_DECORATION_WIDTH = 2;\nclass MinimapOptions {\n    constructor(configuration, theme, tokensColorTracker) {\n        const options = configuration.options;\n        const pixelRatio = options.get(131 /* EditorOption.pixelRatio */);\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        const minimapLayout = layoutInfo.minimap;\n        const fontInfo = options.get(46 /* EditorOption.fontInfo */);\n        const minimapOpts = options.get(67 /* EditorOption.minimap */);\n        this.renderMinimap = minimapLayout.renderMinimap;\n        this.size = minimapOpts.size;\n        this.minimapHeightIsEditorHeight = minimapLayout.minimapHeightIsEditorHeight;\n        this.scrollBeyondLastLine = options.get(96 /* EditorOption.scrollBeyondLastLine */);\n        this.showSlider = minimapOpts.showSlider;\n        this.autohide = minimapOpts.autohide;\n        this.pixelRatio = pixelRatio;\n        this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this.lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this.minimapLeft = minimapLayout.minimapLeft;\n        this.minimapWidth = minimapLayout.minimapWidth;\n        this.minimapHeight = layoutInfo.height;\n        this.canvasInnerWidth = minimapLayout.minimapCanvasInnerWidth;\n        this.canvasInnerHeight = minimapLayout.minimapCanvasInnerHeight;\n        this.canvasOuterWidth = minimapLayout.minimapCanvasOuterWidth;\n        this.canvasOuterHeight = minimapLayout.minimapCanvasOuterHeight;\n        this.isSampling = minimapLayout.minimapIsSampling;\n        this.editorHeight = layoutInfo.height;\n        this.fontScale = minimapLayout.minimapScale;\n        this.minimapLineHeight = minimapLayout.minimapLineHeight;\n        this.minimapCharWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.fontScale;\n        this.charRenderer = once(() => MinimapCharRendererFactory.create(this.fontScale, fontInfo.fontFamily));\n        this.defaultBackgroundColor = tokensColorTracker.getColor(2 /* ColorId.DefaultBackground */);\n        this.backgroundColor = MinimapOptions._getMinimapBackground(theme, this.defaultBackgroundColor);\n        this.foregroundAlpha = MinimapOptions._getMinimapForegroundOpacity(theme);\n    }\n    static _getMinimapBackground(theme, defaultBackgroundColor) {\n        const themeColor = theme.getColor(minimapBackground);\n        if (themeColor) {\n            return new RGBA8(themeColor.rgba.r, themeColor.rgba.g, themeColor.rgba.b, Math.round(255 * themeColor.rgba.a));\n        }\n        return defaultBackgroundColor;\n    }\n    static _getMinimapForegroundOpacity(theme) {\n        const themeColor = theme.getColor(minimapForegroundOpacity);\n        if (themeColor) {\n            return RGBA8._clamp(Math.round(255 * themeColor.rgba.a));\n        }\n        return 255;\n    }\n    equals(other) {\n        return (this.renderMinimap === other.renderMinimap\n            && this.size === other.size\n            && this.minimapHeightIsEditorHeight === other.minimapHeightIsEditorHeight\n            && this.scrollBeyondLastLine === other.scrollBeyondLastLine\n            && this.showSlider === other.showSlider\n            && this.autohide === other.autohide\n            && this.pixelRatio === other.pixelRatio\n            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n            && this.lineHeight === other.lineHeight\n            && this.minimapLeft === other.minimapLeft\n            && this.minimapWidth === other.minimapWidth\n            && this.minimapHeight === other.minimapHeight\n            && this.canvasInnerWidth === other.canvasInnerWidth\n            && this.canvasInnerHeight === other.canvasInnerHeight\n            && this.canvasOuterWidth === other.canvasOuterWidth\n            && this.canvasOuterHeight === other.canvasOuterHeight\n            && this.isSampling === other.isSampling\n            && this.editorHeight === other.editorHeight\n            && this.fontScale === other.fontScale\n            && this.minimapLineHeight === other.minimapLineHeight\n            && this.minimapCharWidth === other.minimapCharWidth\n            && this.defaultBackgroundColor && this.defaultBackgroundColor.equals(other.defaultBackgroundColor)\n            && this.backgroundColor && this.backgroundColor.equals(other.backgroundColor)\n            && this.foregroundAlpha === other.foregroundAlpha);\n    }\n}\nclass MinimapLayout {\n    constructor(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, startLineNumber, endLineNumber) {\n        this.scrollTop = scrollTop;\n        this.scrollHeight = scrollHeight;\n        this.sliderNeeded = sliderNeeded;\n        this._computedSliderRatio = computedSliderRatio;\n        this.sliderTop = sliderTop;\n        this.sliderHeight = sliderHeight;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n    }\n    /**\n     * Compute a desired `scrollPosition` such that the slider moves by `delta`.\n     */\n    getDesiredScrollTopFromDelta(delta) {\n        return Math.round(this.scrollTop + delta / this._computedSliderRatio);\n    }\n    getDesiredScrollTopFromTouchLocation(pageY) {\n        return Math.round((pageY - this.sliderHeight / 2) / this._computedSliderRatio);\n    }\n    static create(options, viewportStartLineNumber, viewportEndLineNumber, viewportStartLineNumberVerticalOffset, viewportHeight, viewportContainsWhitespaceGaps, lineCount, realLineCount, scrollTop, scrollHeight, previousLayout) {\n        const pixelRatio = options.pixelRatio;\n        const minimapLineHeight = options.minimapLineHeight;\n        const minimapLinesFitting = Math.floor(options.canvasInnerHeight / minimapLineHeight);\n        const lineHeight = options.lineHeight;\n        if (options.minimapHeightIsEditorHeight) {\n            const logicalScrollHeight = (realLineCount * options.lineHeight\n                + (options.scrollBeyondLastLine ? viewportHeight - options.lineHeight : 0));\n            const sliderHeight = Math.max(1, Math.floor(viewportHeight * viewportHeight / logicalScrollHeight));\n            const maxMinimapSliderTop = Math.max(0, options.minimapHeight - sliderHeight);\n            // The slider can move from 0 to `maxMinimapSliderTop`\n            // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n            const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n            const sliderTop = (scrollTop * computedSliderRatio);\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            const maxLinesFitting = Math.floor(options.canvasInnerHeight / options.minimapLineHeight);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, 1, Math.min(lineCount, maxLinesFitting));\n        }\n        // The visible line count in a viewport can change due to a number of reasons:\n        //  a) with the same viewport width, different scroll positions can result in partial lines being visible:\n        //    e.g. for a line height of 20, and a viewport height of 600\n        //          * scrollTop = 0  => visible lines are [1, 30]\n        //          * scrollTop = 10 => visible lines are [1, 31] (with lines 1 and 31 partially visible)\n        //          * scrollTop = 20 => visible lines are [2, 31]\n        //  b) whitespace gaps might make their way in the viewport (which results in a decrease in the visible line count)\n        //  c) we could be in the scroll beyond last line case (which also results in a decrease in the visible line count, down to possibly only one line being visible)\n        // We must first establish a desirable slider height.\n        let sliderHeight;\n        if (viewportContainsWhitespaceGaps && viewportEndLineNumber !== lineCount) {\n            // case b) from above: there are whitespace gaps in the viewport.\n            // In this case, the height of the slider directly reflects the visible line count.\n            const viewportLineCount = viewportEndLineNumber - viewportStartLineNumber + 1;\n            sliderHeight = Math.floor(viewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        else {\n            // The slider has a stable height\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            sliderHeight = Math.floor(expectedViewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        let maxMinimapSliderTop;\n        if (options.scrollBeyondLastLine) {\n            // The minimap slider, when dragged all the way down, will contain the last line at its top\n            maxMinimapSliderTop = (lineCount - 1) * minimapLineHeight / pixelRatio;\n        }\n        else {\n            // The minimap slider, when dragged all the way down, will contain the last line at its bottom\n            maxMinimapSliderTop = Math.max(0, lineCount * minimapLineHeight / pixelRatio - sliderHeight);\n        }\n        maxMinimapSliderTop = Math.min(options.minimapHeight - sliderHeight, maxMinimapSliderTop);\n        // The slider can move from 0 to `maxMinimapSliderTop`\n        // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n        const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n        const sliderTop = (scrollTop * computedSliderRatio);\n        let extraLinesAtTheBottom = 0;\n        if (options.scrollBeyondLastLine) {\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            extraLinesAtTheBottom = expectedViewportLineCount - 1;\n        }\n        if (minimapLinesFitting >= lineCount + extraLinesAtTheBottom) {\n            // All lines fit in the minimap\n            const startLineNumber = 1;\n            const endLineNumber = lineCount;\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, startLineNumber, endLineNumber);\n        }\n        else {\n            let startLineNumber = Math.max(1, Math.floor(viewportStartLineNumber - sliderTop * pixelRatio / minimapLineHeight));\n            // Avoid flickering caused by a partial viewport start line\n            // by being consistent w.r.t. the previous layout decision\n            if (previousLayout && previousLayout.scrollHeight === scrollHeight) {\n                if (previousLayout.scrollTop > scrollTop) {\n                    // Scrolling up => never increase `startLineNumber`\n                    startLineNumber = Math.min(startLineNumber, previousLayout.startLineNumber);\n                }\n                if (previousLayout.scrollTop < scrollTop) {\n                    // Scrolling down => never decrease `startLineNumber`\n                    startLineNumber = Math.max(startLineNumber, previousLayout.startLineNumber);\n                }\n            }\n            const endLineNumber = Math.min(lineCount, startLineNumber + minimapLinesFitting - 1);\n            const partialLine = (scrollTop - viewportStartLineNumberVerticalOffset) / lineHeight;\n            const sliderTopAligned = (viewportStartLineNumber - startLineNumber + partialLine) * minimapLineHeight / pixelRatio;\n            return new MinimapLayout(scrollTop, scrollHeight, true, computedSliderRatio, sliderTopAligned, sliderHeight, startLineNumber, endLineNumber);\n        }\n    }\n}\nclass MinimapLine {\n    constructor(dy) {\n        this.dy = dy;\n    }\n    onContentChanged() {\n        this.dy = -1;\n    }\n    onTokensChanged() {\n        this.dy = -1;\n    }\n}\nMinimapLine.INVALID = new MinimapLine(-1);\nclass RenderData {\n    constructor(renderedLayout, imageData, lines) {\n        this.renderedLayout = renderedLayout;\n        this._imageData = imageData;\n        this._renderedLines = new RenderedLinesCollection(() => MinimapLine.INVALID);\n        this._renderedLines._set(renderedLayout.startLineNumber, lines);\n    }\n    /**\n     * Check if the current RenderData matches accurately the new desired layout and no painting is needed.\n     */\n    linesEquals(layout) {\n        if (!this.scrollEquals(layout)) {\n            return false;\n        }\n        const tmp = this._renderedLines._get();\n        const lines = tmp.lines;\n        for (let i = 0, len = lines.length; i < len; i++) {\n            if (lines[i].dy === -1) {\n                // This line is invalid\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Check if the current RenderData matches the new layout's scroll position\n     */\n    scrollEquals(layout) {\n        return this.renderedLayout.startLineNumber === layout.startLineNumber\n            && this.renderedLayout.endLineNumber === layout.endLineNumber;\n    }\n    _get() {\n        const tmp = this._renderedLines._get();\n        return {\n            imageData: this._imageData,\n            rendLineNumberStart: tmp.rendLineNumberStart,\n            lines: tmp.lines\n        };\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        return this._renderedLines.onLinesChanged(changeFromLineNumber, changeCount);\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        this._renderedLines.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        this._renderedLines.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n    }\n    onTokensChanged(ranges) {\n        return this._renderedLines.onTokensChanged(ranges);\n    }\n}\n/**\n * Some sort of double buffering.\n *\n * Keeps two buffers around that will be rotated for painting.\n * Always gives a buffer that is filled with the background color.\n */\nclass MinimapBuffers {\n    constructor(ctx, WIDTH, HEIGHT, background) {\n        this._backgroundFillData = MinimapBuffers._createBackgroundFillData(WIDTH, HEIGHT, background);\n        this._buffers = [\n            ctx.createImageData(WIDTH, HEIGHT),\n            ctx.createImageData(WIDTH, HEIGHT)\n        ];\n        this._lastUsedBuffer = 0;\n    }\n    getBuffer() {\n        // rotate buffers\n        this._lastUsedBuffer = 1 - this._lastUsedBuffer;\n        const result = this._buffers[this._lastUsedBuffer];\n        // fill with background color\n        result.data.set(this._backgroundFillData);\n        return result;\n    }\n    static _createBackgroundFillData(WIDTH, HEIGHT, background) {\n        const backgroundR = background.r;\n        const backgroundG = background.g;\n        const backgroundB = background.b;\n        const backgroundA = background.a;\n        const result = new Uint8ClampedArray(WIDTH * HEIGHT * 4);\n        let offset = 0;\n        for (let i = 0; i < HEIGHT; i++) {\n            for (let j = 0; j < WIDTH; j++) {\n                result[offset] = backgroundR;\n                result[offset + 1] = backgroundG;\n                result[offset + 2] = backgroundB;\n                result[offset + 3] = backgroundA;\n                offset += 4;\n            }\n        }\n        return result;\n    }\n}\nclass MinimapSamplingState {\n    constructor(samplingRatio, minimapLines) {\n        this.samplingRatio = samplingRatio;\n        this.minimapLines = minimapLines;\n    }\n    static compute(options, viewLineCount, oldSamplingState) {\n        if (options.renderMinimap === 0 /* RenderMinimap.None */ || !options.isSampling) {\n            return [null, []];\n        }\n        // ratio is intentionally not part of the layout to avoid the layout changing all the time\n        // so we need to recompute it again...\n        const pixelRatio = options.pixelRatio;\n        const lineHeight = options.lineHeight;\n        const scrollBeyondLastLine = options.scrollBeyondLastLine;\n        const { minimapLineCount } = EditorLayoutInfoComputer.computeContainedMinimapLineCount({\n            viewLineCount: viewLineCount,\n            scrollBeyondLastLine: scrollBeyondLastLine,\n            height: options.editorHeight,\n            lineHeight: lineHeight,\n            pixelRatio: pixelRatio\n        });\n        const ratio = viewLineCount / minimapLineCount;\n        const halfRatio = ratio / 2;\n        if (!oldSamplingState || oldSamplingState.minimapLines.length === 0) {\n            const result = [];\n            result[0] = 1;\n            if (minimapLineCount > 1) {\n                for (let i = 0, lastIndex = minimapLineCount - 1; i < lastIndex; i++) {\n                    result[i] = Math.round(i * ratio + halfRatio);\n                }\n                result[minimapLineCount - 1] = viewLineCount;\n            }\n            return [new MinimapSamplingState(ratio, result), []];\n        }\n        const oldMinimapLines = oldSamplingState.minimapLines;\n        const oldLength = oldMinimapLines.length;\n        const result = [];\n        let oldIndex = 0;\n        let oldDeltaLineCount = 0;\n        let minViewLineNumber = 1;\n        const MAX_EVENT_COUNT = 10; // generate at most 10 events, if there are more than 10 changes, just flush all previous data\n        let events = [];\n        let lastEvent = null;\n        for (let i = 0; i < minimapLineCount; i++) {\n            const fromViewLineNumber = Math.max(minViewLineNumber, Math.round(i * ratio));\n            const toViewLineNumber = Math.max(fromViewLineNumber, Math.round((i + 1) * ratio));\n            while (oldIndex < oldLength && oldMinimapLines[oldIndex] < fromViewLineNumber) {\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                        lastEvent.deleteToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount--;\n                }\n                oldIndex++;\n            }\n            let selectedViewLineNumber;\n            if (oldIndex < oldLength && oldMinimapLines[oldIndex] <= toViewLineNumber) {\n                // reuse the old sampled line\n                selectedViewLineNumber = oldMinimapLines[oldIndex];\n                oldIndex++;\n            }\n            else {\n                if (i === 0) {\n                    selectedViewLineNumber = 1;\n                }\n                else if (i + 1 === minimapLineCount) {\n                    selectedViewLineNumber = viewLineCount;\n                }\n                else {\n                    selectedViewLineNumber = Math.round(i * ratio + halfRatio);\n                }\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'inserted' && lastEvent._i === i - 1) {\n                        lastEvent.insertToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'inserted', _i: i, insertFromLineNumber: oldMinimapLineNumber, insertToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount++;\n                }\n            }\n            result[i] = selectedViewLineNumber;\n            minViewLineNumber = selectedViewLineNumber;\n        }\n        if (events.length < MAX_EVENT_COUNT) {\n            while (oldIndex < oldLength) {\n                const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                    lastEvent.deleteToLineNumber++;\n                }\n                else {\n                    lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                    events.push(lastEvent);\n                }\n                oldDeltaLineCount--;\n                oldIndex++;\n            }\n        }\n        else {\n            // too many events, just give up\n            events = [{ type: 'flush' }];\n        }\n        return [new MinimapSamplingState(ratio, result), events];\n    }\n    modelLineToMinimapLine(lineNumber) {\n        return Math.min(this.minimapLines.length, Math.max(1, Math.round(lineNumber / this.samplingRatio)));\n    }\n    /**\n     * Will return null if the model line ranges are not intersecting with a sampled model line.\n     */\n    modelLineRangeToMinimapLineRange(fromLineNumber, toLineNumber) {\n        let fromLineIndex = this.modelLineToMinimapLine(fromLineNumber) - 1;\n        while (fromLineIndex > 0 && this.minimapLines[fromLineIndex - 1] >= fromLineNumber) {\n            fromLineIndex--;\n        }\n        let toLineIndex = this.modelLineToMinimapLine(toLineNumber) - 1;\n        while (toLineIndex + 1 < this.minimapLines.length && this.minimapLines[toLineIndex + 1] <= toLineNumber) {\n            toLineIndex++;\n        }\n        if (fromLineIndex === toLineIndex) {\n            const sampledLineNumber = this.minimapLines[fromLineIndex];\n            if (sampledLineNumber < fromLineNumber || sampledLineNumber > toLineNumber) {\n                // This line is not part of the sampled lines ==> nothing to do\n                return null;\n            }\n        }\n        return [fromLineIndex + 1, toLineIndex + 1];\n    }\n    /**\n     * Will always return a range, even if it is not intersecting with a sampled model line.\n     */\n    decorationLineRangeToMinimapLineRange(startLineNumber, endLineNumber) {\n        let minimapLineStart = this.modelLineToMinimapLine(startLineNumber);\n        let minimapLineEnd = this.modelLineToMinimapLine(endLineNumber);\n        if (startLineNumber !== endLineNumber && minimapLineEnd === minimapLineStart) {\n            if (minimapLineEnd === this.minimapLines.length) {\n                if (minimapLineStart > 1) {\n                    minimapLineStart--;\n                }\n            }\n            else {\n                minimapLineEnd++;\n            }\n        }\n        return [minimapLineStart, minimapLineEnd];\n    }\n    onLinesDeleted(e) {\n        // have the mapping be sticky\n        const deletedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        let changeStartIndex = this.minimapLines.length;\n        let changeEndIndex = 0;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            if (this.minimapLines[i] <= e.toLineNumber) {\n                // this line got deleted => move to previous available\n                this.minimapLines[i] = Math.max(1, e.fromLineNumber - 1);\n                changeStartIndex = Math.min(changeStartIndex, i);\n                changeEndIndex = Math.max(changeEndIndex, i);\n            }\n            else {\n                this.minimapLines[i] -= deletedLineCount;\n            }\n        }\n        return [changeStartIndex, changeEndIndex];\n    }\n    onLinesInserted(e) {\n        // have the mapping be sticky\n        const insertedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            this.minimapLines[i] += insertedLineCount;\n        }\n    }\n}\nexport class Minimap extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.tokensColorTracker = MinimapTokensColorTracker.getInstance();\n        this._selections = [];\n        this._minimapSelections = null;\n        this.options = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        const [samplingState,] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), null);\n        this._samplingState = samplingState;\n        this._shouldCheckSampling = false;\n        this._actual = new InnerMinimap(context.theme, this);\n    }\n    dispose() {\n        this._actual.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this._actual.getDomNode();\n    }\n    _onOptionsMaybeChanged() {\n        const opts = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        if (this.options.equals(opts)) {\n            return false;\n        }\n        this.options = opts;\n        this._recreateLineSampling();\n        this._actual.onDidChangeOptions();\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        this._minimapSelections = null;\n        return this._actual.onSelectionChanged();\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsMinimap) {\n            return this._actual.onDecorationsChanged();\n        }\n        return false;\n    }\n    onFlushed(e) {\n        if (this._samplingState) {\n            this._shouldCheckSampling = true;\n        }\n        return this._actual.onFlushed();\n    }\n    onLinesChanged(e) {\n        if (this._samplingState) {\n            const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(e.fromLineNumber, e.fromLineNumber + e.count - 1);\n            if (minimapLineRange) {\n                return this._actual.onLinesChanged(minimapLineRange[0], minimapLineRange[1] - minimapLineRange[0] + 1);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onLinesChanged(e.fromLineNumber, e.count);\n        }\n    }\n    onLinesDeleted(e) {\n        if (this._samplingState) {\n            const [changeStartIndex, changeEndIndex] = this._samplingState.onLinesDeleted(e);\n            if (changeStartIndex <= changeEndIndex) {\n                this._actual.onLinesChanged(changeStartIndex + 1, changeEndIndex - changeStartIndex + 1);\n            }\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onLinesInserted(e) {\n        if (this._samplingState) {\n            this._samplingState.onLinesInserted(e);\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onScrollChanged(e) {\n        return this._actual.onScrollChanged();\n    }\n    onThemeChanged(e) {\n        this._actual.onThemeChanged();\n        this._onOptionsMaybeChanged();\n        return true;\n    }\n    onTokensChanged(e) {\n        if (this._samplingState) {\n            const ranges = [];\n            for (const range of e.ranges) {\n                const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(range.fromLineNumber, range.toLineNumber);\n                if (minimapLineRange) {\n                    ranges.push({ fromLineNumber: minimapLineRange[0], toLineNumber: minimapLineRange[1] });\n                }\n            }\n            if (ranges.length) {\n                return this._actual.onTokensChanged(ranges);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onTokensChanged(e.ranges);\n        }\n    }\n    onTokensColorsChanged(e) {\n        this._onOptionsMaybeChanged();\n        return this._actual.onTokensColorsChanged();\n    }\n    onZonesChanged(e) {\n        return this._actual.onZonesChanged();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._shouldCheckSampling) {\n            this._shouldCheckSampling = false;\n            this._recreateLineSampling();\n        }\n    }\n    render(ctx) {\n        let viewportStartLineNumber = ctx.visibleRange.startLineNumber;\n        let viewportEndLineNumber = ctx.visibleRange.endLineNumber;\n        if (this._samplingState) {\n            viewportStartLineNumber = this._samplingState.modelLineToMinimapLine(viewportStartLineNumber);\n            viewportEndLineNumber = this._samplingState.modelLineToMinimapLine(viewportEndLineNumber);\n        }\n        const minimapCtx = {\n            viewportContainsWhitespaceGaps: (ctx.viewportData.whitespaceViewportData.length > 0),\n            scrollWidth: ctx.scrollWidth,\n            scrollHeight: ctx.scrollHeight,\n            viewportStartLineNumber: viewportStartLineNumber,\n            viewportEndLineNumber: viewportEndLineNumber,\n            viewportStartLineNumberVerticalOffset: ctx.getVerticalOffsetForLineNumber(viewportStartLineNumber),\n            scrollTop: ctx.scrollTop,\n            scrollLeft: ctx.scrollLeft,\n            viewportWidth: ctx.viewportWidth,\n            viewportHeight: ctx.viewportHeight,\n        };\n        this._actual.render(minimapCtx);\n    }\n    //#region IMinimapModel\n    _recreateLineSampling() {\n        this._minimapSelections = null;\n        const wasSampling = Boolean(this._samplingState);\n        const [samplingState, events] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), this._samplingState);\n        this._samplingState = samplingState;\n        if (wasSampling && this._samplingState) {\n            // was sampling, is sampling\n            for (const event of events) {\n                switch (event.type) {\n                    case 'deleted':\n                        this._actual.onLinesDeleted(event.deleteFromLineNumber, event.deleteToLineNumber);\n                        break;\n                    case 'inserted':\n                        this._actual.onLinesInserted(event.insertFromLineNumber, event.insertToLineNumber);\n                        break;\n                    case 'flush':\n                        this._actual.onFlushed();\n                        break;\n                }\n            }\n        }\n    }\n    getLineCount() {\n        if (this._samplingState) {\n            return this._samplingState.minimapLines.length;\n        }\n        return this._context.viewModel.getLineCount();\n    }\n    getRealLineCount() {\n        return this._context.viewModel.getLineCount();\n    }\n    getLineContent(lineNumber) {\n        if (this._samplingState) {\n            return this._context.viewModel.getLineContent(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.viewModel.getLineContent(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        if (this._samplingState) {\n            return this._context.viewModel.getLineMaxColumn(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.viewModel.getLineMaxColumn(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        if (this._samplingState) {\n            const result = [];\n            for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n                if (needed[lineIndex]) {\n                    result[lineIndex] = this._context.viewModel.getViewLineData(this._samplingState.minimapLines[startLineNumber + lineIndex - 1]);\n                }\n                else {\n                    result[lineIndex] = null;\n                }\n            }\n            return result;\n        }\n        return this._context.viewModel.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed).data;\n    }\n    getSelections() {\n        if (this._minimapSelections === null) {\n            if (this._samplingState) {\n                this._minimapSelections = [];\n                for (const selection of this._selections) {\n                    const [minimapLineStart, minimapLineEnd] = this._samplingState.decorationLineRangeToMinimapLineRange(selection.startLineNumber, selection.endLineNumber);\n                    this._minimapSelections.push(new Selection(minimapLineStart, selection.startColumn, minimapLineEnd, selection.endColumn));\n                }\n            }\n            else {\n                this._minimapSelections = this._selections;\n            }\n        }\n        return this._minimapSelections;\n    }\n    getMinimapDecorationsInViewport(startLineNumber, endLineNumber) {\n        let visibleRange;\n        if (this._samplingState) {\n            const modelStartLineNumber = this._samplingState.minimapLines[startLineNumber - 1];\n            const modelEndLineNumber = this._samplingState.minimapLines[endLineNumber - 1];\n            visibleRange = new Range(modelStartLineNumber, 1, modelEndLineNumber, this._context.viewModel.getLineMaxColumn(modelEndLineNumber));\n        }\n        else {\n            visibleRange = new Range(startLineNumber, 1, endLineNumber, this._context.viewModel.getLineMaxColumn(endLineNumber));\n        }\n        const decorations = this._context.viewModel.getDecorationsInViewport(visibleRange);\n        if (this._samplingState) {\n            const result = [];\n            for (const decoration of decorations) {\n                if (!decoration.options.minimap) {\n                    continue;\n                }\n                const range = decoration.range;\n                const minimapStartLineNumber = this._samplingState.modelLineToMinimapLine(range.startLineNumber);\n                const minimapEndLineNumber = this._samplingState.modelLineToMinimapLine(range.endLineNumber);\n                result.push(new ViewModelDecoration(new Range(minimapStartLineNumber, range.startColumn, minimapEndLineNumber, range.endColumn), decoration.options));\n            }\n            return result;\n        }\n        return decorations;\n    }\n    getOptions() {\n        return this._context.viewModel.model.getOptions();\n    }\n    revealLineNumber(lineNumber) {\n        if (this._samplingState) {\n            lineNumber = this._samplingState.minimapLines[lineNumber - 1];\n        }\n        this._context.viewModel.revealRange('mouse', false, new Range(lineNumber, 1, lineNumber, 1), 1 /* viewEvents.VerticalRevealType.Center */, 0 /* ScrollType.Smooth */);\n    }\n    setScrollTop(scrollTop) {\n        this._context.viewModel.viewLayout.setScrollPosition({\n            scrollTop: scrollTop\n        }, 1 /* ScrollType.Immediate */);\n    }\n}\nclass InnerMinimap extends Disposable {\n    constructor(theme, model) {\n        super();\n        this._renderDecorations = false;\n        this._gestureInProgress = false;\n        this._theme = theme;\n        this._model = model;\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 8 /* PartFingerprint.Minimap */);\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._shadow = createFastDomNode(document.createElement('div'));\n        this._shadow.setClassName('minimap-shadow-hidden');\n        this._domNode.appendChild(this._shadow);\n        this._canvas = createFastDomNode(document.createElement('canvas'));\n        this._canvas.setPosition('absolute');\n        this._canvas.setLeft(0);\n        this._domNode.appendChild(this._canvas);\n        this._decorationsCanvas = createFastDomNode(document.createElement('canvas'));\n        this._decorationsCanvas.setPosition('absolute');\n        this._decorationsCanvas.setClassName('minimap-decorations-layer');\n        this._decorationsCanvas.setLeft(0);\n        this._domNode.appendChild(this._decorationsCanvas);\n        this._slider = createFastDomNode(document.createElement('div'));\n        this._slider.setPosition('absolute');\n        this._slider.setClassName('minimap-slider');\n        this._slider.setLayerHinting(true);\n        this._slider.setContain('strict');\n        this._domNode.appendChild(this._slider);\n        this._sliderHorizontal = createFastDomNode(document.createElement('div'));\n        this._sliderHorizontal.setPosition('absolute');\n        this._sliderHorizontal.setClassName('minimap-slider-horizontal');\n        this._slider.appendChild(this._sliderHorizontal);\n        this._applyLayout();\n        this._pointerDownListener = dom.addStandardDisposableListener(this._domNode.domNode, dom.EventType.POINTER_DOWN, (e) => {\n            e.preventDefault();\n            const renderMinimap = this._model.options.renderMinimap;\n            if (renderMinimap === 0 /* RenderMinimap.None */) {\n                return;\n            }\n            if (!this._lastRenderData) {\n                return;\n            }\n            if (this._model.options.size !== 'proportional') {\n                if (e.button === 0 && this._lastRenderData) {\n                    // pretend the click occurred in the center of the slider\n                    const position = dom.getDomNodePagePosition(this._slider.domNode);\n                    const initialPosY = position.top + position.height / 2;\n                    this._startSliderDragging(e, initialPosY, this._lastRenderData.renderedLayout);\n                }\n                return;\n            }\n            const minimapLineHeight = this._model.options.minimapLineHeight;\n            const internalOffsetY = (this._model.options.canvasInnerHeight / this._model.options.canvasOuterHeight) * e.offsetY;\n            const lineIndex = Math.floor(internalOffsetY / minimapLineHeight);\n            let lineNumber = lineIndex + this._lastRenderData.renderedLayout.startLineNumber;\n            lineNumber = Math.min(lineNumber, this._model.getLineCount());\n            this._model.revealLineNumber(lineNumber);\n        });\n        this._sliderPointerMoveMonitor = new GlobalPointerMoveMonitor();\n        this._sliderPointerDownListener = dom.addStandardDisposableListener(this._slider.domNode, dom.EventType.POINTER_DOWN, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (e.button === 0 && this._lastRenderData) {\n                this._startSliderDragging(e, e.pageY, this._lastRenderData.renderedLayout);\n            }\n        });\n        this._gestureDisposable = Gesture.addTarget(this._domNode.domNode);\n        this._sliderTouchStartListener = dom.addDisposableListener(this._domNode.domNode, EventType.Start, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData) {\n                this._slider.toggleClassName('active', true);\n                this._gestureInProgress = true;\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchMoveListener = dom.addDisposableListener(this._domNode.domNode, EventType.Change, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData && this._gestureInProgress) {\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchEndListener = dom.addStandardDisposableListener(this._domNode.domNode, EventType.End, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            this._gestureInProgress = false;\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    _startSliderDragging(e, initialPosY, initialSliderState) {\n        if (!e.target || !(e.target instanceof Element)) {\n            return;\n        }\n        const initialPosX = e.pageX;\n        this._slider.toggleClassName('active', true);\n        const handlePointerMove = (posy, posx) => {\n            const pointerOrthogonalDelta = Math.abs(posx - initialPosX);\n            if (platform.isWindows && pointerOrthogonalDelta > POINTER_DRAG_RESET_DISTANCE) {\n                // The pointer has wondered away from the scrollbar => reset dragging\n                this._model.setScrollTop(initialSliderState.scrollTop);\n                return;\n            }\n            const pointerDelta = posy - initialPosY;\n            this._model.setScrollTop(initialSliderState.getDesiredScrollTopFromDelta(pointerDelta));\n        };\n        if (e.pageY !== initialPosY) {\n            handlePointerMove(e.pageY, initialPosX);\n        }\n        this._sliderPointerMoveMonitor.startMonitoring(e.target, e.pointerId, e.buttons, pointerMoveData => handlePointerMove(pointerMoveData.pageY, pointerMoveData.pageX), () => {\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    scrollDueToTouchEvent(touch) {\n        const startY = this._domNode.domNode.getBoundingClientRect().top;\n        const scrollTop = this._lastRenderData.renderedLayout.getDesiredScrollTopFromTouchLocation(touch.pageY - startY);\n        this._model.setScrollTop(scrollTop);\n    }\n    dispose() {\n        this._pointerDownListener.dispose();\n        this._sliderPointerMoveMonitor.dispose();\n        this._sliderPointerDownListener.dispose();\n        this._gestureDisposable.dispose();\n        this._sliderTouchStartListener.dispose();\n        this._sliderTouchMoveListener.dispose();\n        this._sliderTouchEndListener.dispose();\n        super.dispose();\n    }\n    _getMinimapDomNodeClassName() {\n        const class_ = ['minimap'];\n        if (this._model.options.showSlider === 'always') {\n            class_.push('slider-always');\n        }\n        else {\n            class_.push('slider-mouseover');\n        }\n        if (this._model.options.autohide) {\n            class_.push('autohide');\n        }\n        return class_.join(' ');\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _applyLayout() {\n        this._domNode.setLeft(this._model.options.minimapLeft);\n        this._domNode.setWidth(this._model.options.minimapWidth);\n        this._domNode.setHeight(this._model.options.minimapHeight);\n        this._shadow.setHeight(this._model.options.minimapHeight);\n        this._canvas.setWidth(this._model.options.canvasOuterWidth);\n        this._canvas.setHeight(this._model.options.canvasOuterHeight);\n        this._canvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._canvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._decorationsCanvas.setWidth(this._model.options.canvasOuterWidth);\n        this._decorationsCanvas.setHeight(this._model.options.canvasOuterHeight);\n        this._decorationsCanvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._decorationsCanvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._slider.setWidth(this._model.options.minimapWidth);\n    }\n    _getBuffer() {\n        if (!this._buffers) {\n            if (this._model.options.canvasInnerWidth > 0 && this._model.options.canvasInnerHeight > 0) {\n                this._buffers = new MinimapBuffers(this._canvas.domNode.getContext('2d'), this._model.options.canvasInnerWidth, this._model.options.canvasInnerHeight, this._model.options.backgroundColor);\n            }\n        }\n        return this._buffers ? this._buffers.getBuffer() : null;\n    }\n    // ---- begin view event handlers\n    onDidChangeOptions() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._applyLayout();\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n    }\n    onSelectionChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onDecorationsChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onFlushed() {\n        this._lastRenderData = null;\n        return true;\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onLinesChanged(changeFromLineNumber, changeCount);\n        }\n        return false;\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        var _a;\n        (_a = this._lastRenderData) === null || _a === void 0 ? void 0 : _a.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n        return true;\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        var _a;\n        (_a = this._lastRenderData) === null || _a === void 0 ? void 0 : _a.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n        return true;\n    }\n    onScrollChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onThemeChanged() {\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._renderDecorations = true;\n        return true;\n    }\n    onTokensChanged(ranges) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onTokensChanged(ranges);\n        }\n        return false;\n    }\n    onTokensColorsChanged() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        return true;\n    }\n    onZonesChanged() {\n        this._lastRenderData = null;\n        return true;\n    }\n    // --- end event handlers\n    render(renderingCtx) {\n        const renderMinimap = this._model.options.renderMinimap;\n        if (renderMinimap === 0 /* RenderMinimap.None */) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n            this._sliderHorizontal.setWidth(0);\n            this._sliderHorizontal.setHeight(0);\n            return;\n        }\n        if (renderingCtx.scrollLeft + renderingCtx.viewportWidth >= renderingCtx.scrollWidth) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n        }\n        else {\n            this._shadow.setClassName('minimap-shadow-visible');\n        }\n        const layout = MinimapLayout.create(this._model.options, renderingCtx.viewportStartLineNumber, renderingCtx.viewportEndLineNumber, renderingCtx.viewportStartLineNumberVerticalOffset, renderingCtx.viewportHeight, renderingCtx.viewportContainsWhitespaceGaps, this._model.getLineCount(), this._model.getRealLineCount(), renderingCtx.scrollTop, renderingCtx.scrollHeight, this._lastRenderData ? this._lastRenderData.renderedLayout : null);\n        this._slider.setDisplay(layout.sliderNeeded ? 'block' : 'none');\n        this._slider.setTop(layout.sliderTop);\n        this._slider.setHeight(layout.sliderHeight);\n        // Compute horizontal slider coordinates\n        this._sliderHorizontal.setLeft(0);\n        this._sliderHorizontal.setWidth(this._model.options.minimapWidth);\n        this._sliderHorizontal.setTop(0);\n        this._sliderHorizontal.setHeight(layout.sliderHeight);\n        this.renderDecorations(layout);\n        this._lastRenderData = this.renderLines(layout);\n    }\n    renderDecorations(layout) {\n        if (this._renderDecorations) {\n            this._renderDecorations = false;\n            const selections = this._model.getSelections();\n            selections.sort(Range.compareRangesUsingStarts);\n            const decorations = this._model.getMinimapDecorationsInViewport(layout.startLineNumber, layout.endLineNumber);\n            decorations.sort((a, b) => (a.options.zIndex || 0) - (b.options.zIndex || 0));\n            const { canvasInnerWidth, canvasInnerHeight } = this._model.options;\n            const lineHeight = this._model.options.minimapLineHeight;\n            const characterWidth = this._model.options.minimapCharWidth;\n            const tabSize = this._model.getOptions().tabSize;\n            const canvasContext = this._decorationsCanvas.domNode.getContext('2d');\n            canvasContext.clearRect(0, 0, canvasInnerWidth, canvasInnerHeight);\n            // We first need to render line highlights and then render decorations on top of those.\n            // But we need to pick a single color for each line, and use that as a line highlight.\n            // This needs to be the color of the decoration with the highest `zIndex`, but priority\n            // is given to the selection.\n            const highlightedLines = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, false);\n            this._renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, lineHeight);\n            this._renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, lineHeight);\n            const lineOffsetMap = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, null);\n            this._renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n            this._renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n        }\n    }\n    _renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, lineHeight) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        canvasContext.fillStyle = this._selectionColor.transparent(0.5).toString();\n        let y1 = 0;\n        let y2 = 0;\n        for (const selection of selections) {\n            const startLineNumber = Math.max(layout.startLineNumber, selection.startLineNumber);\n            const endLineNumber = Math.min(layout.endLineNumber, selection.endLineNumber);\n            if (startLineNumber > endLineNumber) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                highlightedLines.set(line, true);\n            }\n            const yy1 = (startLineNumber - layout.startLineNumber) * lineHeight;\n            const yy2 = (endLineNumber - layout.startLineNumber) * lineHeight + lineHeight;\n            if (y2 >= yy1) {\n                // merge into previous\n                y2 = yy2;\n            }\n            else {\n                if (y2 > y1) {\n                    // flush\n                    canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n                }\n                y1 = yy1;\n                y2 = yy2;\n            }\n        }\n        if (y2 > y1) {\n            // flush\n            canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n        }\n    }\n    _renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, lineHeight) {\n        const highlightColors = new Map();\n        // Loop backwards to hit first decorations with higher `zIndex`\n        for (let i = decorations.length - 1; i >= 0; i--) {\n            const decoration = decorations[i];\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions || minimapOptions.position !== MinimapPosition.Inline) {\n                continue;\n            }\n            const startLineNumber = Math.max(layout.startLineNumber, decoration.range.startLineNumber);\n            const endLineNumber = Math.min(layout.endLineNumber, decoration.range.endLineNumber);\n            if (startLineNumber > endLineNumber) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            let highlightColor = highlightColors.get(decorationColor.toString());\n            if (!highlightColor) {\n                highlightColor = decorationColor.transparent(0.5).toString();\n                highlightColors.set(decorationColor.toString(), highlightColor);\n            }\n            canvasContext.fillStyle = highlightColor;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                if (highlightedLines.has(line)) {\n                    continue;\n                }\n                highlightedLines.set(line, true);\n                const y = (startLineNumber - layout.startLineNumber) * lineHeight;\n                canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y, canvasContext.canvas.width, lineHeight);\n            }\n        }\n    }\n    _renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        for (const selection of selections) {\n            const startLineNumber = Math.max(layout.startLineNumber, selection.startLineNumber);\n            const endLineNumber = Math.min(layout.endLineNumber, selection.endLineNumber);\n            if (startLineNumber > endLineNumber) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                this.renderDecorationOnLine(canvasContext, lineOffsetMap, selection, this._selectionColor, layout, line, lineHeight, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n            }\n        }\n    }\n    _renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        // Loop forwards to hit first decorations with lower `zIndex`\n        for (const decoration of decorations) {\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions) {\n                continue;\n            }\n            const startLineNumber = Math.max(layout.startLineNumber, decoration.range.startLineNumber);\n            const endLineNumber = Math.min(layout.endLineNumber, decoration.range.endLineNumber);\n            if (startLineNumber > endLineNumber) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                switch (minimapOptions.position) {\n                    case MinimapPosition.Inline:\n                        this.renderDecorationOnLine(canvasContext, lineOffsetMap, decoration.range, decorationColor, layout, line, lineHeight, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n                        continue;\n                    case MinimapPosition.Gutter: {\n                        const y = (line - layout.startLineNumber) * lineHeight;\n                        const x = 2;\n                        this.renderDecoration(canvasContext, decorationColor, x, y, GUTTER_DECORATION_WIDTH, lineHeight);\n                        continue;\n                    }\n                }\n            }\n        }\n    }\n    renderDecorationOnLine(canvasContext, lineOffsetMap, decorationRange, decorationColor, layout, lineNumber, height, lineHeight, tabSize, charWidth, canvasInnerWidth) {\n        const y = (lineNumber - layout.startLineNumber) * lineHeight;\n        // Skip rendering the line if it's vertically outside our viewport\n        if (y + height < 0 || y > this._model.options.canvasInnerHeight) {\n            return;\n        }\n        const { startLineNumber, endLineNumber } = decorationRange;\n        const startColumn = (startLineNumber === lineNumber ? decorationRange.startColumn : 1);\n        const endColumn = (endLineNumber === lineNumber ? decorationRange.endColumn : this._model.getLineMaxColumn(lineNumber));\n        const x1 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, startColumn, tabSize, charWidth, canvasInnerWidth);\n        const x2 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, endColumn, tabSize, charWidth, canvasInnerWidth);\n        this.renderDecoration(canvasContext, decorationColor, x1, y, x2 - x1, height);\n    }\n    getXOffsetForPosition(lineOffsetMap, lineNumber, column, tabSize, charWidth, canvasInnerWidth) {\n        if (column === 1) {\n            return MINIMAP_GUTTER_WIDTH;\n        }\n        const minimumXOffset = (column - 1) * charWidth;\n        if (minimumXOffset >= canvasInnerWidth) {\n            // there is no need to look at actual characters,\n            // as this column is certainly after the minimap width\n            return canvasInnerWidth;\n        }\n        // Cache line offset data so that it is only read once per line\n        let lineIndexToXOffset = lineOffsetMap.get(lineNumber);\n        if (!lineIndexToXOffset) {\n            const lineData = this._model.getLineContent(lineNumber);\n            lineIndexToXOffset = [MINIMAP_GUTTER_WIDTH];\n            let prevx = MINIMAP_GUTTER_WIDTH;\n            for (let i = 1; i < lineData.length + 1; i++) {\n                const charCode = lineData.charCodeAt(i - 1);\n                const dx = charCode === 9 /* CharCode.Tab */\n                    ? tabSize * charWidth\n                    : strings.isFullWidthCharacter(charCode)\n                        ? 2 * charWidth\n                        : charWidth;\n                const x = prevx + dx;\n                if (x >= canvasInnerWidth) {\n                    // no need to keep on going, as we've hit the canvas width\n                    lineIndexToXOffset[i] = canvasInnerWidth;\n                    break;\n                }\n                lineIndexToXOffset[i] = x;\n                prevx = x;\n            }\n            lineOffsetMap.set(lineNumber, lineIndexToXOffset);\n        }\n        if (column - 1 < lineIndexToXOffset.length) {\n            return lineIndexToXOffset[column - 1];\n        }\n        // goes over the canvas width\n        return canvasInnerWidth;\n    }\n    renderDecoration(canvasContext, decorationColor, x, y, width, height) {\n        canvasContext.fillStyle = decorationColor && decorationColor.toString() || '';\n        canvasContext.fillRect(x, y, width, height);\n    }\n    renderLines(layout) {\n        const startLineNumber = layout.startLineNumber;\n        const endLineNumber = layout.endLineNumber;\n        const minimapLineHeight = this._model.options.minimapLineHeight;\n        // Check if nothing changed w.r.t. lines from last frame\n        if (this._lastRenderData && this._lastRenderData.linesEquals(layout)) {\n            const _lastData = this._lastRenderData._get();\n            // Nice!! Nothing changed from last frame\n            return new RenderData(layout, _lastData.imageData, _lastData.lines);\n        }\n        // Oh well!! We need to repaint some lines...\n        const imageData = this._getBuffer();\n        if (!imageData) {\n            // 0 width or 0 height canvas, nothing to do\n            return null;\n        }\n        // Render untouched lines by using last rendered data.\n        const [_dirtyY1, _dirtyY2, needed] = InnerMinimap._renderUntouchedLines(imageData, startLineNumber, endLineNumber, minimapLineHeight, this._lastRenderData);\n        // Fetch rendering info from view model for rest of lines that need rendering.\n        const lineInfo = this._model.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed);\n        const tabSize = this._model.getOptions().tabSize;\n        const defaultBackground = this._model.options.defaultBackgroundColor;\n        const background = this._model.options.backgroundColor;\n        const foregroundAlpha = this._model.options.foregroundAlpha;\n        const tokensColorTracker = this._model.tokensColorTracker;\n        const useLighterFont = tokensColorTracker.backgroundIsLight();\n        const renderMinimap = this._model.options.renderMinimap;\n        const charRenderer = this._model.options.charRenderer();\n        const fontScale = this._model.options.fontScale;\n        const minimapCharWidth = this._model.options.minimapCharWidth;\n        const baseCharHeight = (renderMinimap === 1 /* RenderMinimap.Text */ ? 2 /* Constants.BASE_CHAR_HEIGHT */ : 2 /* Constants.BASE_CHAR_HEIGHT */ + 1);\n        const renderMinimapLineHeight = baseCharHeight * fontScale;\n        const innerLinePadding = (minimapLineHeight > renderMinimapLineHeight ? Math.floor((minimapLineHeight - renderMinimapLineHeight) / 2) : 0);\n        // Render the rest of lines\n        const backgroundA = background.a / 255;\n        const renderBackground = new RGBA8(Math.round((background.r - defaultBackground.r) * backgroundA + defaultBackground.r), Math.round((background.g - defaultBackground.g) * backgroundA + defaultBackground.g), Math.round((background.b - defaultBackground.b) * backgroundA + defaultBackground.b), 255);\n        let dy = 0;\n        const renderedLines = [];\n        for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n            if (needed[lineIndex]) {\n                InnerMinimap._renderLine(imageData, renderBackground, background.a, useLighterFont, renderMinimap, minimapCharWidth, tokensColorTracker, foregroundAlpha, charRenderer, dy, innerLinePadding, tabSize, lineInfo[lineIndex], fontScale, minimapLineHeight);\n            }\n            renderedLines[lineIndex] = new MinimapLine(dy);\n            dy += minimapLineHeight;\n        }\n        const dirtyY1 = (_dirtyY1 === -1 ? 0 : _dirtyY1);\n        const dirtyY2 = (_dirtyY2 === -1 ? imageData.height : _dirtyY2);\n        const dirtyHeight = dirtyY2 - dirtyY1;\n        // Finally, paint to the canvas\n        const ctx = this._canvas.domNode.getContext('2d');\n        ctx.putImageData(imageData, 0, 0, 0, dirtyY1, imageData.width, dirtyHeight);\n        // Save rendered data for reuse on next frame if possible\n        return new RenderData(layout, imageData, renderedLines);\n    }\n    static _renderUntouchedLines(target, startLineNumber, endLineNumber, minimapLineHeight, lastRenderData) {\n        const needed = [];\n        if (!lastRenderData) {\n            for (let i = 0, len = endLineNumber - startLineNumber + 1; i < len; i++) {\n                needed[i] = true;\n            }\n            return [-1, -1, needed];\n        }\n        const _lastData = lastRenderData._get();\n        const lastTargetData = _lastData.imageData.data;\n        const lastStartLineNumber = _lastData.rendLineNumberStart;\n        const lastLines = _lastData.lines;\n        const lastLinesLength = lastLines.length;\n        const WIDTH = target.width;\n        const targetData = target.data;\n        const maxDestPixel = (endLineNumber - startLineNumber + 1) * minimapLineHeight * WIDTH * 4;\n        let dirtyPixel1 = -1; // the pixel offset up to which all the data is equal to the prev frame\n        let dirtyPixel2 = -1; // the pixel offset after which all the data is equal to the prev frame\n        let copySourceStart = -1;\n        let copySourceEnd = -1;\n        let copyDestStart = -1;\n        let copyDestEnd = -1;\n        let dest_dy = 0;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - startLineNumber;\n            const lastLineIndex = lineNumber - lastStartLineNumber;\n            const source_dy = (lastLineIndex >= 0 && lastLineIndex < lastLinesLength ? lastLines[lastLineIndex].dy : -1);\n            if (source_dy === -1) {\n                needed[lineIndex] = true;\n                dest_dy += minimapLineHeight;\n                continue;\n            }\n            const sourceStart = source_dy * WIDTH * 4;\n            const sourceEnd = (source_dy + minimapLineHeight) * WIDTH * 4;\n            const destStart = dest_dy * WIDTH * 4;\n            const destEnd = (dest_dy + minimapLineHeight) * WIDTH * 4;\n            if (copySourceEnd === sourceStart && copyDestEnd === destStart) {\n                // contiguous zone => extend copy request\n                copySourceEnd = sourceEnd;\n                copyDestEnd = destEnd;\n            }\n            else {\n                if (copySourceStart !== -1) {\n                    // flush existing copy request\n                    targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n                    if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                        dirtyPixel1 = copySourceEnd;\n                    }\n                    if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                        dirtyPixel2 = copySourceStart;\n                    }\n                }\n                copySourceStart = sourceStart;\n                copySourceEnd = sourceEnd;\n                copyDestStart = destStart;\n                copyDestEnd = destEnd;\n            }\n            needed[lineIndex] = false;\n            dest_dy += minimapLineHeight;\n        }\n        if (copySourceStart !== -1) {\n            // flush existing copy request\n            targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n            if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                dirtyPixel1 = copySourceEnd;\n            }\n            if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                dirtyPixel2 = copySourceStart;\n            }\n        }\n        const dirtyY1 = (dirtyPixel1 === -1 ? -1 : dirtyPixel1 / (WIDTH * 4));\n        const dirtyY2 = (dirtyPixel2 === -1 ? -1 : dirtyPixel2 / (WIDTH * 4));\n        return [dirtyY1, dirtyY2, needed];\n    }\n    static _renderLine(target, backgroundColor, backgroundAlpha, useLighterFont, renderMinimap, charWidth, colorTracker, foregroundAlpha, minimapCharRenderer, dy, innerLinePadding, tabSize, lineData, fontScale, minimapLineHeight) {\n        const content = lineData.content;\n        const tokens = lineData.tokens;\n        const maxDx = target.width - charWidth;\n        const force1pxHeight = (minimapLineHeight === 1);\n        let dx = MINIMAP_GUTTER_WIDTH;\n        let charIndex = 0;\n        let tabsCharDelta = 0;\n        for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n            const tokenEndIndex = tokens.getEndOffset(tokenIndex);\n            const tokenColorId = tokens.getForeground(tokenIndex);\n            const tokenColor = colorTracker.getColor(tokenColorId);\n            for (; charIndex < tokenEndIndex; charIndex++) {\n                if (dx > maxDx) {\n                    // hit edge of minimap\n                    return;\n                }\n                const charCode = content.charCodeAt(charIndex);\n                if (charCode === 9 /* CharCode.Tab */) {\n                    const insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n                    tabsCharDelta += insertSpacesCount - 1;\n                    // No need to render anything since tab is invisible\n                    dx += insertSpacesCount * charWidth;\n                }\n                else if (charCode === 32 /* CharCode.Space */) {\n                    // No need to render anything since space is invisible\n                    dx += charWidth;\n                }\n                else {\n                    // Render twice for a full width character\n                    const count = strings.isFullWidthCharacter(charCode) ? 2 : 1;\n                    for (let i = 0; i < count; i++) {\n                        if (renderMinimap === 2 /* RenderMinimap.Blocks */) {\n                            minimapCharRenderer.blockRenderChar(target, dx, dy + innerLinePadding, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight);\n                        }\n                        else { // RenderMinimap.Text\n                            minimapCharRenderer.renderChar(target, dx, dy + innerLinePadding, charCode, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight);\n                        }\n                        dx += charWidth;\n                        if (dx > maxDx) {\n                            // hit edge of minimap\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nclass ContiguousLineMap {\n    constructor(startLineNumber, endLineNumber, defaultValue) {\n        this._startLineNumber = startLineNumber;\n        this._endLineNumber = endLineNumber;\n        this._defaultValue = defaultValue;\n        this._values = [];\n        for (let i = 0, count = this._endLineNumber - this._startLineNumber + 1; i < count; i++) {\n            this._values[i] = defaultValue;\n        }\n    }\n    has(lineNumber) {\n        return (this.get(lineNumber) !== this._defaultValue);\n    }\n    set(lineNumber, value) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return;\n        }\n        this._values[lineNumber - this._startLineNumber] = value;\n    }\n    get(lineNumber) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return this._defaultValue;\n        }\n        return this._values[lineNumber - this._startLineNumber];\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const sliderBackground = theme.getColor(minimapSliderBackground);\n    if (sliderBackground) {\n        collector.addRule(`.monaco-editor .minimap-slider .minimap-slider-horizontal { background: ${sliderBackground}; }`);\n    }\n    const sliderHoverBackground = theme.getColor(minimapSliderHoverBackground);\n    if (sliderHoverBackground) {\n        collector.addRule(`.monaco-editor .minimap-slider:hover .minimap-slider-horizontal { background: ${sliderHoverBackground}; }`);\n    }\n    const sliderActiveBackground = theme.getColor(minimapSliderActiveBackground);\n    if (sliderActiveBackground) {\n        collector.addRule(`.monaco-editor .minimap-slider.active .minimap-slider-horizontal { background: ${sliderActiveBackground}; }`);\n    }\n    const shadow = theme.getColor(scrollbarShadow);\n    if (shadow) {\n        collector.addRule(`.monaco-editor .minimap-shadow-visible { box-shadow: ${shadow} -6px 0 6px -6px inset; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './overlayWidgets.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewOverlayWidgets extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._widgets = {};\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 4 /* PartFingerprint.OverlayWidgets */);\n        this._domNode.setClassName('overlayWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        return true;\n    }\n    // ---- end view event handlers\n    addWidget(widget) {\n        const domNode = createFastDomNode(widget.getDomNode());\n        this._widgets[widget.getId()] = {\n            widget: widget,\n            preference: null,\n            domNode: domNode\n        };\n        // This is sync because a widget wants to be in the dom\n        domNode.setPosition('absolute');\n        domNode.setAttribute('widgetId', widget.getId());\n        this._domNode.appendChild(domNode);\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, preference) {\n        const widgetData = this._widgets[widget.getId()];\n        if (widgetData.preference === preference) {\n            return false;\n        }\n        widgetData.preference = preference;\n        this.setShouldRender();\n        return true;\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._widgets[widgetId];\n            const domNode = widgetData.domNode.domNode;\n            delete this._widgets[widgetId];\n            domNode.parentNode.removeChild(domNode);\n            this.setShouldRender();\n        }\n    }\n    _renderWidget(widgetData) {\n        const domNode = widgetData.domNode;\n        if (widgetData.preference === null) {\n            domNode.setTop('');\n            return;\n        }\n        if (widgetData.preference === 0 /* OverlayWidgetPositionPreference.TOP_RIGHT_CORNER */) {\n            domNode.setTop(0);\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 1 /* OverlayWidgetPositionPreference.BOTTOM_RIGHT_CORNER */) {\n            const widgetHeight = domNode.domNode.clientHeight;\n            domNode.setTop((this._editorHeight - widgetHeight - 2 * this._horizontalScrollbarHeight));\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 2 /* OverlayWidgetPositionPreference.TOP_CENTER */) {\n            domNode.setTop(0);\n            domNode.domNode.style.right = '50%';\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._editorWidth);\n        const keys = Object.keys(this._widgets);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const widgetId = keys[i];\n            this._renderWidget(this._widgets[widgetId]);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';\nclass Settings {\n    constructor(config, theme) {\n        const options = config.options;\n        this.lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this.pixelRatio = options.get(131 /* EditorOption.pixelRatio */);\n        this.overviewRulerLanes = options.get(76 /* EditorOption.overviewRulerLanes */);\n        this.renderBorder = options.get(75 /* EditorOption.overviewRulerBorder */);\n        const borderColor = theme.getColor(editorOverviewRulerBorder);\n        this.borderColor = borderColor ? borderColor.toString() : null;\n        this.hideCursor = options.get(54 /* EditorOption.hideCursorInOverviewRuler */);\n        const cursorColor = theme.getColor(editorCursorForeground);\n        this.cursorColor = cursorColor ? cursorColor.transparent(0.7).toString() : null;\n        this.themeType = theme.type;\n        const minimapOpts = options.get(67 /* EditorOption.minimap */);\n        const minimapEnabled = minimapOpts.enabled;\n        const minimapSide = minimapOpts.side;\n        const themeColor = theme.getColor(editorOverviewRulerBackground);\n        const defaultBackground = TokenizationRegistry.getDefaultBackground();\n        let backgroundColor = null;\n        if (themeColor !== undefined) {\n            backgroundColor = themeColor;\n        }\n        else if (minimapEnabled) {\n            backgroundColor = defaultBackground;\n        }\n        if (backgroundColor === null || minimapSide === 'left') {\n            this.backgroundColor = null;\n        }\n        else {\n            this.backgroundColor = Color.Format.CSS.formatHex(backgroundColor);\n        }\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        const position = layoutInfo.overviewRuler;\n        this.top = position.top;\n        this.right = position.right;\n        this.domWidth = position.width;\n        this.domHeight = position.height;\n        if (this.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this.canvasWidth = 0;\n            this.canvasHeight = 0;\n        }\n        else {\n            this.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n            this.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n        }\n        const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n        this.x = x;\n        this.w = w;\n    }\n    _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n        const remainingWidth = canvasWidth - canvasLeftOffset;\n        if (laneCount >= 3) {\n            const leftWidth = Math.floor(remainingWidth / 3);\n            const rightWidth = Math.floor(remainingWidth / 3);\n            const centerWidth = remainingWidth - leftWidth - rightWidth;\n            const leftOffset = canvasLeftOffset;\n            const centerOffset = leftOffset + leftWidth;\n            const rightOffset = leftOffset + leftWidth + centerWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    centerOffset,\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth,\n                    centerWidth,\n                    leftWidth + centerWidth,\n                    rightWidth,\n                    leftWidth + centerWidth + rightWidth,\n                    centerWidth + rightWidth,\n                    leftWidth + centerWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else if (laneCount === 2) {\n            const leftWidth = Math.floor(remainingWidth / 2);\n            const rightWidth = remainingWidth - leftWidth;\n            const leftOffset = canvasLeftOffset;\n            const rightOffset = leftOffset + leftWidth;\n            return [\n                [\n                    0,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset,\n                    rightOffset,\n                    leftOffset,\n                    leftOffset,\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth,\n                    leftWidth,\n                    leftWidth,\n                    rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth,\n                    leftWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else {\n            const offset = canvasLeftOffset;\n            const width = remainingWidth;\n            return [\n                [\n                    0,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset,\n                    offset, // Left | Center | Right\n                ], [\n                    0,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width,\n                    width, // Left | Center | Right\n                ]\n            ];\n        }\n    }\n    equals(other) {\n        return (this.lineHeight === other.lineHeight\n            && this.pixelRatio === other.pixelRatio\n            && this.overviewRulerLanes === other.overviewRulerLanes\n            && this.renderBorder === other.renderBorder\n            && this.borderColor === other.borderColor\n            && this.hideCursor === other.hideCursor\n            && this.cursorColor === other.cursorColor\n            && this.themeType === other.themeType\n            && this.backgroundColor === other.backgroundColor\n            && this.top === other.top\n            && this.right === other.right\n            && this.domWidth === other.domWidth\n            && this.domHeight === other.domHeight\n            && this.canvasWidth === other.canvasWidth\n            && this.canvasHeight === other.canvasHeight);\n    }\n}\nexport class DecorationsOverviewRuler extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName('decorationsOverviewRuler');\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateSettings(false);\n        this._tokensColorTrackerListener = TokenizationRegistry.onDidChange((e) => {\n            if (e.changedColorMap) {\n                this._updateSettings(true);\n            }\n        });\n        this._cursorPositions = [];\n    }\n    dispose() {\n        super.dispose();\n        this._tokensColorTrackerListener.dispose();\n    }\n    _updateSettings(renderNow) {\n        const newSettings = new Settings(this._context.configuration, this._context.theme);\n        if (this._settings && this._settings.equals(newSettings)) {\n            // nothing to do\n            return false;\n        }\n        this._settings = newSettings;\n        this._domNode.setTop(this._settings.top);\n        this._domNode.setRight(this._settings.right);\n        this._domNode.setWidth(this._settings.domWidth);\n        this._domNode.setHeight(this._settings.domHeight);\n        this._domNode.domNode.width = this._settings.canvasWidth;\n        this._domNode.domNode.height = this._settings.canvasHeight;\n        if (renderNow) {\n            this._render();\n        }\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._updateSettings(false);\n    }\n    onCursorStateChanged(e) {\n        this._cursorPositions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            this._cursorPositions[i] = e.selections[i].getPosition();\n        }\n        this._cursorPositions.sort(Position.compare);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsOverviewRuler) {\n            return true;\n        }\n        return false;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        return this._updateSettings(false);\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(editorCtx) {\n        this._render();\n    }\n    _render() {\n        if (this._settings.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this._domNode.setBackgroundColor(this._settings.backgroundColor ? this._settings.backgroundColor : '');\n            this._domNode.setDisplay('none');\n            return;\n        }\n        this._domNode.setDisplay('block');\n        const canvasWidth = this._settings.canvasWidth;\n        const canvasHeight = this._settings.canvasHeight;\n        const lineHeight = this._settings.lineHeight;\n        const viewLayout = this._context.viewLayout;\n        const outerHeight = this._context.viewLayout.getScrollHeight();\n        const heightRatio = canvasHeight / outerHeight;\n        const decorations = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);\n        const minDecorationHeight = (6 /* Constants.MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio) | 0;\n        const halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n        const canvasCtx = this._domNode.domNode.getContext('2d');\n        if (this._settings.backgroundColor === null) {\n            canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        }\n        else {\n            canvasCtx.fillStyle = this._settings.backgroundColor;\n            canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n        }\n        const x = this._settings.x;\n        const w = this._settings.w;\n        decorations.sort(OverviewRulerDecorationsGroup.cmp);\n        for (const decorationGroup of decorations) {\n            const color = decorationGroup.color;\n            const decorationGroupData = decorationGroup.data;\n            canvasCtx.fillStyle = color;\n            let prevLane = 0;\n            let prevY1 = 0;\n            let prevY2 = 0;\n            for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n                const lane = decorationGroupData[3 * i];\n                const startLineNumber = decorationGroupData[3 * i + 1];\n                const endLineNumber = decorationGroupData[3 * i + 2];\n                let y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n                let y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n                const height = y2 - y1;\n                if (height < minDecorationHeight) {\n                    let yCenter = ((y1 + y2) / 2) | 0;\n                    if (yCenter < halfMinDecorationHeight) {\n                        yCenter = halfMinDecorationHeight;\n                    }\n                    else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n                        yCenter = canvasHeight - halfMinDecorationHeight;\n                    }\n                    y1 = yCenter - halfMinDecorationHeight;\n                    y2 = yCenter + halfMinDecorationHeight;\n                }\n                if (y1 > prevY2 + 1 || lane !== prevLane) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n                    }\n                    prevLane = lane;\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n        }\n        // Draw cursors\n        if (!this._settings.hideCursor && this._settings.cursorColor) {\n            const cursorHeight = (2 * this._settings.pixelRatio) | 0;\n            const halfCursorHeight = (cursorHeight / 2) | 0;\n            const cursorX = this._settings.x[7 /* OverviewRulerLane.Full */];\n            const cursorW = this._settings.w[7 /* OverviewRulerLane.Full */];\n            canvasCtx.fillStyle = this._settings.cursorColor;\n            let prevY1 = -100;\n            let prevY2 = -100;\n            for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n                const cursor = this._cursorPositions[i];\n                let yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n                if (yCenter < halfCursorHeight) {\n                    yCenter = halfCursorHeight;\n                }\n                else if (yCenter + halfCursorHeight > canvasHeight) {\n                    yCenter = canvasHeight - halfCursorHeight;\n                }\n                const y1 = yCenter - halfCursorHeight;\n                const y2 = y1 + cursorHeight;\n                if (y1 > prevY2 + 1) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n                    }\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n        }\n        if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n            canvasCtx.beginPath();\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = this._settings.borderColor;\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(0, canvasHeight);\n            canvasCtx.stroke();\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(canvasWidth, 0);\n            canvasCtx.stroke();\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { OverviewZoneManager } from '../../../common/viewModel/overviewZoneManager.js';\nimport { ViewEventHandler } from '../../../common/viewEventHandler.js';\nexport class OverviewRuler extends ViewEventHandler {\n    constructor(context, cssClassName) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName(cssClassName);\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._zoneManager = new OverviewZoneManager((lineNumber) => this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber));\n        this._zoneManager.setDOMWidth(0);\n        this._zoneManager.setDOMHeight(0);\n        this._zoneManager.setOuterHeight(this._context.viewLayout.getScrollHeight());\n        this._zoneManager.setLineHeight(options.get(61 /* EditorOption.lineHeight */));\n        this._zoneManager.setPixelRatio(options.get(131 /* EditorOption.pixelRatio */));\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        if (e.hasChanged(61 /* EditorOption.lineHeight */)) {\n            this._zoneManager.setLineHeight(options.get(61 /* EditorOption.lineHeight */));\n            this._render();\n        }\n        if (e.hasChanged(131 /* EditorOption.pixelRatio */)) {\n            this._zoneManager.setPixelRatio(options.get(131 /* EditorOption.pixelRatio */));\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n        return true;\n    }\n    onFlushed(e) {\n        this._render();\n        return true;\n    }\n    onScrollChanged(e) {\n        if (e.scrollHeightChanged) {\n            this._zoneManager.setOuterHeight(e.scrollHeight);\n            this._render();\n        }\n        return true;\n    }\n    onZonesChanged(e) {\n        this._render();\n        return true;\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    setLayout(position) {\n        this._domNode.setTop(position.top);\n        this._domNode.setRight(position.right);\n        let hasChanged = false;\n        hasChanged = this._zoneManager.setDOMWidth(position.width) || hasChanged;\n        hasChanged = this._zoneManager.setDOMHeight(position.height) || hasChanged;\n        if (hasChanged) {\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n    }\n    setZones(zones) {\n        this._zoneManager.setZones(zones);\n        this._render();\n    }\n    _render() {\n        if (this._zoneManager.getOuterHeight() === 0) {\n            return false;\n        }\n        const width = this._zoneManager.getCanvasWidth();\n        const height = this._zoneManager.getCanvasHeight();\n        const colorZones = this._zoneManager.resolveColorZones();\n        const id2Color = this._zoneManager.getId2Color();\n        const ctx = this._domNode.domNode.getContext('2d');\n        ctx.clearRect(0, 0, width, height);\n        if (colorZones.length > 0) {\n            this._renderOneLane(ctx, colorZones, id2Color, width);\n        }\n        return true;\n    }\n    _renderOneLane(ctx, colorZones, id2Color, width) {\n        let currentColorId = 0;\n        let currentFrom = 0;\n        let currentTo = 0;\n        for (const zone of colorZones) {\n            const zoneColorId = zone.colorId;\n            const zoneFrom = zone.from;\n            const zoneTo = zone.to;\n            if (zoneColorId !== currentColorId) {\n                ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                currentColorId = zoneColorId;\n                ctx.fillStyle = id2Color[currentColorId];\n                currentFrom = zoneFrom;\n                currentTo = zoneTo;\n            }\n            else {\n                if (currentTo >= zoneFrom) {\n                    currentTo = Math.max(currentTo, zoneTo);\n                }\n                else {\n                    ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                    currentFrom = zoneFrom;\n                    currentTo = zoneTo;\n                }\n            }\n        }\n        ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './rulers.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { editorRuler } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class Rulers extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.domNode.setClassName('view-rulers');\n        this._renderedRulers = [];\n        const options = this._context.configuration.options;\n        this._rulers = options.get(93 /* EditorOption.rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(46 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n    }\n    dispose() {\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._rulers = options.get(93 /* EditorOption.rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(46 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    _ensureRulersCount() {\n        const currentCount = this._renderedRulers.length;\n        const desiredCount = this._rulers.length;\n        if (currentCount === desiredCount) {\n            // Nothing to do\n            return;\n        }\n        if (currentCount < desiredCount) {\n            const { tabSize } = this._context.viewModel.model.getOptions();\n            const rulerWidth = tabSize;\n            let addCount = desiredCount - currentCount;\n            while (addCount > 0) {\n                const node = createFastDomNode(document.createElement('div'));\n                node.setClassName('view-ruler');\n                node.setWidth(rulerWidth);\n                this.domNode.appendChild(node);\n                this._renderedRulers.push(node);\n                addCount--;\n            }\n            return;\n        }\n        let removeCount = currentCount - desiredCount;\n        while (removeCount > 0) {\n            const node = this._renderedRulers.pop();\n            this.domNode.removeChild(node);\n            removeCount--;\n        }\n    }\n    render(ctx) {\n        this._ensureRulersCount();\n        for (let i = 0, len = this._rulers.length; i < len; i++) {\n            const node = this._renderedRulers[i];\n            const ruler = this._rulers[i];\n            node.setBoxShadow(ruler.color ? `1px 0 0 0 ${ruler.color} inset` : ``);\n            node.setHeight(Math.min(ctx.scrollHeight, 1000000));\n            node.setLeft(ruler.column * this._typicalHalfwidthCharacterWidth);\n        }\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const rulerColor = theme.getColor(editorRuler);\n    if (rulerColor) {\n        collector.addRule(`.monaco-editor .view-ruler { box-shadow: 1px 0 0 0 ${rulerColor} inset; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './scrollDecoration.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { scrollbarShadow } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class ScrollDecorationViewPart extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._scrollTop = 0;\n        this._width = 0;\n        this._updateWidth();\n        this._shouldShow = false;\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(94 /* EditorOption.scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n    }\n    dispose() {\n        super.dispose();\n    }\n    _updateShouldShow() {\n        const newShouldShow = (this._useShadows && this._scrollTop > 0);\n        if (this._shouldShow !== newShouldShow) {\n            this._shouldShow = newShouldShow;\n            return true;\n        }\n        return false;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _updateWidth() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        if (layoutInfo.minimap.renderMinimap === 0 || (layoutInfo.minimap.minimapWidth > 0 && layoutInfo.minimap.minimapLeft === 0)) {\n            this._width = layoutInfo.width;\n        }\n        else {\n            this._width = layoutInfo.width - layoutInfo.verticalScrollbarWidth;\n        }\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(94 /* EditorOption.scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._updateWidth();\n        this._updateShouldShow();\n        return true;\n    }\n    onScrollChanged(e) {\n        this._scrollTop = e.scrollTop;\n        return this._updateShouldShow();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._width);\n        this._domNode.setClassName(this._shouldShow ? 'scroll-decoration' : '');\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const shadow = theme.getColor(scrollbarShadow);\n    if (shadow) {\n        collector.addRule(`.monaco-editor .scroll-decoration { box-shadow: ${shadow} 0 6px 6px -6px inset; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './selections.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorInactiveSelection, editorSelectionBackground, editorSelectionForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nclass HorizontalRangeWithStyle {\n    constructor(other) {\n        this.left = other.left;\n        this.width = other.width;\n        this.startStyle = null;\n        this.endStyle = null;\n    }\n}\nclass LineVisibleRangesWithStyle {\n    constructor(lineNumber, ranges) {\n        this.lineNumber = lineNumber;\n        this.ranges = ranges;\n    }\n}\nfunction toStyledRange(item) {\n    return new HorizontalRangeWithStyle(item);\n}\nfunction toStyled(item) {\n    return new LineVisibleRangesWithStyle(item.lineNumber, item.ranges.map(toStyledRange));\n}\nexport class SelectionsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._previousFrameVisibleRangesWithStyle = [];\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._roundedSelection = options.get(92 /* EditorOption.roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(46 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._selections = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._roundedSelection = options.get(92 /* EditorOption.roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(46 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections.slice(0);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true; //e.inlineDecorationsChanged;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _visibleRangesHaveGaps(linesVisibleRanges) {\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = linesVisibleRanges[i];\n            if (lineVisibleRanges.ranges.length > 1) {\n                // There are two ranges on the same line\n                return true;\n            }\n        }\n        return false;\n    }\n    _enrichVisibleRangesWithStyle(viewport, linesVisibleRanges, previousFrame) {\n        const epsilon = this._typicalHalfwidthCharacterWidth / 4;\n        let previousFrameTop = null;\n        let previousFrameBottom = null;\n        if (previousFrame && previousFrame.length > 0 && linesVisibleRanges.length > 0) {\n            const topLineNumber = linesVisibleRanges[0].lineNumber;\n            if (topLineNumber === viewport.startLineNumber) {\n                for (let i = 0; !previousFrameTop && i < previousFrame.length; i++) {\n                    if (previousFrame[i].lineNumber === topLineNumber) {\n                        previousFrameTop = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            const bottomLineNumber = linesVisibleRanges[linesVisibleRanges.length - 1].lineNumber;\n            if (bottomLineNumber === viewport.endLineNumber) {\n                for (let i = previousFrame.length - 1; !previousFrameBottom && i >= 0; i--) {\n                    if (previousFrame[i].lineNumber === bottomLineNumber) {\n                        previousFrameBottom = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            if (previousFrameTop && !previousFrameTop.startStyle) {\n                previousFrameTop = null;\n            }\n            if (previousFrameBottom && !previousFrameBottom.startStyle) {\n                previousFrameBottom = null;\n            }\n        }\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            // We know for a fact that there is precisely one range on each line\n            const curLineRange = linesVisibleRanges[i].ranges[0];\n            const curLeft = curLineRange.left;\n            const curRight = curLineRange.left + curLineRange.width;\n            const startStyle = {\n                top: 0 /* CornerStyle.EXTERN */,\n                bottom: 0 /* CornerStyle.EXTERN */\n            };\n            const endStyle = {\n                top: 0 /* CornerStyle.EXTERN */,\n                bottom: 0 /* CornerStyle.EXTERN */\n            };\n            if (i > 0) {\n                // Look above\n                const prevLeft = linesVisibleRanges[i - 1].ranges[0].left;\n                const prevRight = linesVisibleRanges[i - 1].ranges[0].left + linesVisibleRanges[i - 1].ranges[0].width;\n                if (abs(curLeft - prevLeft) < epsilon) {\n                    startStyle.top = 2 /* CornerStyle.FLAT */;\n                }\n                else if (curLeft > prevLeft) {\n                    startStyle.top = 1 /* CornerStyle.INTERN */;\n                }\n                if (abs(curRight - prevRight) < epsilon) {\n                    endStyle.top = 2 /* CornerStyle.FLAT */;\n                }\n                else if (prevLeft < curRight && curRight < prevRight) {\n                    endStyle.top = 1 /* CornerStyle.INTERN */;\n                }\n            }\n            else if (previousFrameTop) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.top = previousFrameTop.startStyle.top;\n                endStyle.top = previousFrameTop.endStyle.top;\n            }\n            if (i + 1 < len) {\n                // Look below\n                const nextLeft = linesVisibleRanges[i + 1].ranges[0].left;\n                const nextRight = linesVisibleRanges[i + 1].ranges[0].left + linesVisibleRanges[i + 1].ranges[0].width;\n                if (abs(curLeft - nextLeft) < epsilon) {\n                    startStyle.bottom = 2 /* CornerStyle.FLAT */;\n                }\n                else if (nextLeft < curLeft && curLeft < nextRight) {\n                    startStyle.bottom = 1 /* CornerStyle.INTERN */;\n                }\n                if (abs(curRight - nextRight) < epsilon) {\n                    endStyle.bottom = 2 /* CornerStyle.FLAT */;\n                }\n                else if (curRight < nextRight) {\n                    endStyle.bottom = 1 /* CornerStyle.INTERN */;\n                }\n            }\n            else if (previousFrameBottom) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.bottom = previousFrameBottom.startStyle.bottom;\n                endStyle.bottom = previousFrameBottom.endStyle.bottom;\n            }\n            curLineRange.startStyle = startStyle;\n            curLineRange.endStyle = endStyle;\n        }\n    }\n    _getVisibleRangesWithStyle(selection, ctx, previousFrame) {\n        const _linesVisibleRanges = ctx.linesVisibleRangesForRange(selection, true) || [];\n        const linesVisibleRanges = _linesVisibleRanges.map(toStyled);\n        const visibleRangesHaveGaps = this._visibleRangesHaveGaps(linesVisibleRanges);\n        if (!visibleRangesHaveGaps && this._roundedSelection) {\n            this._enrichVisibleRangesWithStyle(ctx.visibleRange, linesVisibleRanges, previousFrame);\n        }\n        // The visible ranges are sorted TOP-BOTTOM and LEFT-RIGHT\n        return linesVisibleRanges;\n    }\n    _createSelectionPiece(top, height, className, left, width) {\n        return ('<div class=\"cslr '\n            + className\n            + '\" style=\"top:'\n            + top.toString()\n            + 'px;left:'\n            + left.toString()\n            + 'px;width:'\n            + width.toString()\n            + 'px;height:'\n            + height\n            + 'px;\"></div>');\n    }\n    _actualRenderOneSelection(output2, visibleStartLineNumber, hasMultipleSelections, visibleRanges) {\n        if (visibleRanges.length === 0) {\n            return;\n        }\n        const visibleRangesHaveStyle = !!visibleRanges[0].ranges[0].startStyle;\n        const fullLineHeight = (this._lineHeight).toString();\n        const reducedLineHeight = (this._lineHeight - 1).toString();\n        const firstLineNumber = visibleRanges[0].lineNumber;\n        const lastLineNumber = visibleRanges[visibleRanges.length - 1].lineNumber;\n        for (let i = 0, len = visibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = visibleRanges[i];\n            const lineNumber = lineVisibleRanges.lineNumber;\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const lineHeight = hasMultipleSelections ? (lineNumber === lastLineNumber || lineNumber === firstLineNumber ? reducedLineHeight : fullLineHeight) : fullLineHeight;\n            const top = hasMultipleSelections ? (lineNumber === firstLineNumber ? 1 : 0) : 0;\n            let innerCornerOutput = '';\n            let restOfSelectionOutput = '';\n            for (let j = 0, lenJ = lineVisibleRanges.ranges.length; j < lenJ; j++) {\n                const visibleRange = lineVisibleRanges.ranges[j];\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 1 /* CornerStyle.INTERN */ || startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                        // Reverse rounded corner to the left\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (startStyle.top === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                        }\n                        if (startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                    if (endStyle.top === 1 /* CornerStyle.INTERN */ || endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                        // Reverse rounded corner to the right\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (endStyle.top === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                        }\n                        if (endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                }\n                let className = SelectionsOverlay.SELECTION_CLASS_NAME;\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                    }\n                    if (startStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                    }\n                    if (endStyle.top === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                    }\n                    if (endStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                    }\n                }\n                restOfSelectionOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left, visibleRange.width);\n            }\n            output2[lineIndex][0] += innerCornerOutput;\n            output2[lineIndex][1] += restOfSelectionOutput;\n        }\n    }\n    prepareRender(ctx) {\n        // Build HTML for inner corners separate from HTML for the rest of selections,\n        // as the inner corner HTML can interfere with that of other selections.\n        // In final render, make sure to place the inner corner HTML before the rest of selection HTML. See issue #77777.\n        const output = [];\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = ['', ''];\n        }\n        const thisFrameVisibleRangesWithStyle = [];\n        for (let i = 0, len = this._selections.length; i < len; i++) {\n            const selection = this._selections[i];\n            if (selection.isEmpty()) {\n                thisFrameVisibleRangesWithStyle[i] = null;\n                continue;\n            }\n            const visibleRangesWithStyle = this._getVisibleRangesWithStyle(selection, ctx, this._previousFrameVisibleRangesWithStyle[i]);\n            thisFrameVisibleRangesWithStyle[i] = visibleRangesWithStyle;\n            this._actualRenderOneSelection(output, visibleStartLineNumber, this._selections.length > 1, visibleRangesWithStyle);\n        }\n        this._previousFrameVisibleRangesWithStyle = thisFrameVisibleRangesWithStyle;\n        this._renderResult = output.map(([internalCorners, restOfSelection]) => internalCorners + restOfSelection);\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nSelectionsOverlay.SELECTION_CLASS_NAME = 'selected-text';\nSelectionsOverlay.SELECTION_TOP_LEFT = 'top-left-radius';\nSelectionsOverlay.SELECTION_BOTTOM_LEFT = 'bottom-left-radius';\nSelectionsOverlay.SELECTION_TOP_RIGHT = 'top-right-radius';\nSelectionsOverlay.SELECTION_BOTTOM_RIGHT = 'bottom-right-radius';\nSelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME = 'monaco-editor-background';\nSelectionsOverlay.ROUNDED_PIECE_WIDTH = 10;\nregisterThemingParticipant((theme, collector) => {\n    const editorSelectionColor = theme.getColor(editorSelectionBackground);\n    if (editorSelectionColor) {\n        collector.addRule(`.monaco-editor .focused .selected-text { background-color: ${editorSelectionColor}; }`);\n    }\n    const editorInactiveSelectionColor = theme.getColor(editorInactiveSelection);\n    if (editorInactiveSelectionColor) {\n        collector.addRule(`.monaco-editor .selected-text { background-color: ${editorInactiveSelectionColor}; }`);\n    }\n    const editorSelectionForegroundColor = theme.getColor(editorSelectionForeground);\n    if (editorSelectionForegroundColor && !editorSelectionForegroundColor.isTransparent()) {\n        collector.addRule(`.monaco-editor .view-line span.inline-selected-text { color: ${editorSelectionForegroundColor}; }`);\n    }\n});\nfunction abs(n) {\n    return n < 0 ? -n : n;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass ViewCursorRenderData {\n    constructor(top, left, width, height, textContent, textContentClassName) {\n        this.top = top;\n        this.left = left;\n        this.width = width;\n        this.height = height;\n        this.textContent = textContent;\n        this.textContentClassName = textContentClassName;\n    }\n}\nexport class ViewCursor {\n    constructor(context) {\n        this._context = context;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(46 /* EditorOption.fontInfo */);\n        this._cursorStyle = options.get(24 /* EditorOption.cursorStyle */);\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(27 /* EditorOption.cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        this._isVisible = true;\n        // Create the dom node\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this._domNode.setHeight(this._lineHeight);\n        this._domNode.setTop(0);\n        this._domNode.setLeft(0);\n        applyFontInfo(this._domNode, fontInfo);\n        this._domNode.setDisplay('none');\n        this._position = new Position(1, 1);\n        this._lastRenderedContent = '';\n        this._renderData = null;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return this._position;\n    }\n    show() {\n        if (!this._isVisible) {\n            this._domNode.setVisibility('inherit');\n            this._isVisible = true;\n        }\n    }\n    hide() {\n        if (this._isVisible) {\n            this._domNode.setVisibility('hidden');\n            this._isVisible = false;\n        }\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(46 /* EditorOption.fontInfo */);\n        this._cursorStyle = options.get(24 /* EditorOption.cursorStyle */);\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(27 /* EditorOption.cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        applyFontInfo(this._domNode, fontInfo);\n        return true;\n    }\n    onCursorPositionChanged(position) {\n        this._position = position;\n        return true;\n    }\n    /**\n     * If `this._position` is inside a grapheme, returns the position where the grapheme starts.\n     * Also returns the next grapheme.\n     */\n    _getGraphemeAwarePosition() {\n        const { lineNumber, column } = this._position;\n        const lineContent = this._context.viewModel.getLineContent(lineNumber);\n        const [startOffset, endOffset] = strings.getCharContainingOffset(lineContent, column - 1);\n        return [new Position(lineNumber, startOffset + 1), lineContent.substring(startOffset, endOffset)];\n    }\n    _prepareRender(ctx) {\n        let textContent = '';\n        const [position, nextGrapheme] = this._getGraphemeAwarePosition();\n        if (this._cursorStyle === TextEditorCursorStyle.Line || this._cursorStyle === TextEditorCursorStyle.LineThin) {\n            const visibleRange = ctx.visibleRangeForPosition(position);\n            if (!visibleRange || visibleRange.outsideRenderedLine) {\n                // Outside viewport\n                return null;\n            }\n            let width;\n            if (this._cursorStyle === TextEditorCursorStyle.Line) {\n                width = dom.computeScreenAwareSize(this._lineCursorWidth > 0 ? this._lineCursorWidth : 2);\n                if (width > 2) {\n                    textContent = nextGrapheme;\n                }\n            }\n            else {\n                width = dom.computeScreenAwareSize(1);\n            }\n            let left = visibleRange.left;\n            if (width >= 2 && left >= 1) {\n                // try to center cursor\n                left -= 1;\n            }\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n            return new ViewCursorRenderData(top, left, width, this._lineHeight, textContent, '');\n        }\n        const visibleRangeForCharacter = ctx.linesVisibleRangesForRange(new Range(position.lineNumber, position.column, position.lineNumber, position.column + nextGrapheme.length), false);\n        if (!visibleRangeForCharacter || visibleRangeForCharacter.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const firstVisibleRangeForCharacter = visibleRangeForCharacter[0];\n        if (firstVisibleRangeForCharacter.outsideRenderedLine || firstVisibleRangeForCharacter.ranges.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const range = firstVisibleRangeForCharacter.ranges[0];\n        const width = (nextGrapheme === '\\t'\n            ? this._typicalHalfwidthCharacterWidth\n            : (range.width < 1\n                ? this._typicalHalfwidthCharacterWidth\n                : range.width));\n        let textContentClassName = '';\n        if (this._cursorStyle === TextEditorCursorStyle.Block) {\n            const lineData = this._context.viewModel.getViewLineData(position.lineNumber);\n            textContent = nextGrapheme;\n            const tokenIndex = lineData.tokens.findTokenIndexAtOffset(position.column - 1);\n            textContentClassName = lineData.tokens.getClassName(tokenIndex);\n        }\n        let top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n        let height = this._lineHeight;\n        // Underline might interfere with clicking\n        if (this._cursorStyle === TextEditorCursorStyle.Underline || this._cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n            top += this._lineHeight - 2;\n            height = 2;\n        }\n        return new ViewCursorRenderData(top, range.left, width, height, textContent, textContentClassName);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRender(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            this._domNode.setDisplay('none');\n            return null;\n        }\n        if (this._lastRenderedContent !== this._renderData.textContent) {\n            this._lastRenderedContent = this._renderData.textContent;\n            this._domNode.domNode.textContent = this._lastRenderedContent;\n        }\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ${this._renderData.textContentClassName}`);\n        this._domNode.setDisplay('block');\n        this._domNode.setTop(this._renderData.top);\n        this._domNode.setLeft(this._renderData.left);\n        this._domNode.setWidth(this._renderData.width);\n        this._domNode.setLineHeight(this._renderData.height);\n        this._domNode.setHeight(this._renderData.height);\n        return {\n            domNode: this._domNode.domNode,\n            position: this._position,\n            contentLeft: this._renderData.left,\n            height: this._renderData.height,\n            width: 2\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './viewCursors.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { IntervalTimer, TimeoutTimer } from '../../../../base/common/async.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { ViewCursor } from './viewCursor.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { editorCursorBackground, editorCursorForeground } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nexport class ViewCursors extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(83 /* EditorOption.readOnly */);\n        this._cursorBlinking = options.get(22 /* EditorOption.cursorBlinking */);\n        this._cursorStyle = options.get(24 /* EditorOption.cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(23 /* EditorOption.cursorSmoothCaretAnimation */);\n        this._selectionIsEmpty = true;\n        this._isComposingInput = false;\n        this._isVisible = false;\n        this._primaryCursor = new ViewCursor(this._context);\n        this._secondaryCursors = [];\n        this._renderData = [];\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateDomClassName();\n        this._domNode.appendChild(this._primaryCursor.getDomNode());\n        this._startCursorBlinkAnimation = new TimeoutTimer();\n        this._cursorFlatBlinkInterval = new IntervalTimer();\n        this._blinkingEnabled = false;\n        this._editorHasFocus = false;\n        this._updateBlinking();\n    }\n    dispose() {\n        super.dispose();\n        this._startCursorBlinkAnimation.dispose();\n        this._cursorFlatBlinkInterval.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onCompositionStart(e) {\n        this._isComposingInput = true;\n        this._updateBlinking();\n        return true;\n    }\n    onCompositionEnd(e) {\n        this._isComposingInput = false;\n        this._updateBlinking();\n        return true;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(83 /* EditorOption.readOnly */);\n        this._cursorBlinking = options.get(22 /* EditorOption.cursorBlinking */);\n        this._cursorStyle = options.get(24 /* EditorOption.cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(23 /* EditorOption.cursorSmoothCaretAnimation */);\n        this._updateBlinking();\n        this._updateDomClassName();\n        this._primaryCursor.onConfigurationChanged(e);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    _onCursorPositionChanged(position, secondaryPositions) {\n        this._primaryCursor.onCursorPositionChanged(position);\n        this._updateBlinking();\n        if (this._secondaryCursors.length < secondaryPositions.length) {\n            // Create new cursors\n            const addCnt = secondaryPositions.length - this._secondaryCursors.length;\n            for (let i = 0; i < addCnt; i++) {\n                const newCursor = new ViewCursor(this._context);\n                this._domNode.domNode.insertBefore(newCursor.getDomNode().domNode, this._primaryCursor.getDomNode().domNode.nextSibling);\n                this._secondaryCursors.push(newCursor);\n            }\n        }\n        else if (this._secondaryCursors.length > secondaryPositions.length) {\n            // Remove some cursors\n            const removeCnt = this._secondaryCursors.length - secondaryPositions.length;\n            for (let i = 0; i < removeCnt; i++) {\n                this._domNode.removeChild(this._secondaryCursors[0].getDomNode());\n                this._secondaryCursors.splice(0, 1);\n            }\n        }\n        for (let i = 0; i < secondaryPositions.length; i++) {\n            this._secondaryCursors[i].onCursorPositionChanged(secondaryPositions[i]);\n        }\n    }\n    onCursorStateChanged(e) {\n        const positions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            positions[i] = e.selections[i].getPosition();\n        }\n        this._onCursorPositionChanged(positions[0], positions.slice(1));\n        const selectionIsEmpty = e.selections[0].isEmpty();\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            this._updateDomClassName();\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        this._editorHasFocus = e.isFocused;\n        this._updateBlinking();\n        return false;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onTokensChanged(e) {\n        const shouldRender = (position) => {\n            for (let i = 0, len = e.ranges.length; i < len; i++) {\n                if (e.ranges[i].fromLineNumber <= position.lineNumber && position.lineNumber <= e.ranges[i].toLineNumber) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        if (shouldRender(this._primaryCursor.getPosition())) {\n            return true;\n        }\n        for (const secondaryCursor of this._secondaryCursors) {\n            if (shouldRender(secondaryCursor.getPosition())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // ---- blinking logic\n    _getCursorBlinking() {\n        if (this._isComposingInput) {\n            // avoid double cursors\n            return 0 /* TextEditorCursorBlinkingStyle.Hidden */;\n        }\n        if (!this._editorHasFocus) {\n            return 0 /* TextEditorCursorBlinkingStyle.Hidden */;\n        }\n        if (this._readOnly) {\n            return 5 /* TextEditorCursorBlinkingStyle.Solid */;\n        }\n        return this._cursorBlinking;\n    }\n    _updateBlinking() {\n        this._startCursorBlinkAnimation.cancel();\n        this._cursorFlatBlinkInterval.cancel();\n        const blinkingStyle = this._getCursorBlinking();\n        // hidden and solid are special as they involve no animations\n        const isHidden = (blinkingStyle === 0 /* TextEditorCursorBlinkingStyle.Hidden */);\n        const isSolid = (blinkingStyle === 5 /* TextEditorCursorBlinkingStyle.Solid */);\n        if (isHidden) {\n            this._hide();\n        }\n        else {\n            this._show();\n        }\n        this._blinkingEnabled = false;\n        this._updateDomClassName();\n        if (!isHidden && !isSolid) {\n            if (blinkingStyle === 1 /* TextEditorCursorBlinkingStyle.Blink */) {\n                // flat blinking is handled by JavaScript to save battery life due to Chromium step timing issue https://bugs.chromium.org/p/chromium/issues/detail?id=361587\n                this._cursorFlatBlinkInterval.cancelAndSet(() => {\n                    if (this._isVisible) {\n                        this._hide();\n                    }\n                    else {\n                        this._show();\n                    }\n                }, ViewCursors.BLINK_INTERVAL);\n            }\n            else {\n                this._startCursorBlinkAnimation.setIfNotSet(() => {\n                    this._blinkingEnabled = true;\n                    this._updateDomClassName();\n                }, ViewCursors.BLINK_INTERVAL);\n            }\n        }\n    }\n    // --- end blinking logic\n    _updateDomClassName() {\n        this._domNode.setClassName(this._getClassName());\n    }\n    _getClassName() {\n        let result = 'cursors-layer';\n        if (!this._selectionIsEmpty) {\n            result += ' has-selection';\n        }\n        switch (this._cursorStyle) {\n            case TextEditorCursorStyle.Line:\n                result += ' cursor-line-style';\n                break;\n            case TextEditorCursorStyle.Block:\n                result += ' cursor-block-style';\n                break;\n            case TextEditorCursorStyle.Underline:\n                result += ' cursor-underline-style';\n                break;\n            case TextEditorCursorStyle.LineThin:\n                result += ' cursor-line-thin-style';\n                break;\n            case TextEditorCursorStyle.BlockOutline:\n                result += ' cursor-block-outline-style';\n                break;\n            case TextEditorCursorStyle.UnderlineThin:\n                result += ' cursor-underline-thin-style';\n                break;\n            default:\n                result += ' cursor-line-style';\n        }\n        if (this._blinkingEnabled) {\n            switch (this._getCursorBlinking()) {\n                case 1 /* TextEditorCursorBlinkingStyle.Blink */:\n                    result += ' cursor-blink';\n                    break;\n                case 2 /* TextEditorCursorBlinkingStyle.Smooth */:\n                    result += ' cursor-smooth';\n                    break;\n                case 3 /* TextEditorCursorBlinkingStyle.Phase */:\n                    result += ' cursor-phase';\n                    break;\n                case 4 /* TextEditorCursorBlinkingStyle.Expand */:\n                    result += ' cursor-expand';\n                    break;\n                case 5 /* TextEditorCursorBlinkingStyle.Solid */:\n                    result += ' cursor-solid';\n                    break;\n                default:\n                    result += ' cursor-solid';\n            }\n        }\n        else {\n            result += ' cursor-solid';\n        }\n        if (this._cursorSmoothCaretAnimation) {\n            result += ' cursor-smooth-caret-animation';\n        }\n        return result;\n    }\n    _show() {\n        this._primaryCursor.show();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].show();\n        }\n        this._isVisible = true;\n    }\n    _hide() {\n        this._primaryCursor.hide();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].hide();\n        }\n        this._isVisible = false;\n    }\n    // ---- IViewPart implementation\n    prepareRender(ctx) {\n        this._primaryCursor.prepareRender(ctx);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const renderData = [];\n        let renderDataLen = 0;\n        const primaryRenderData = this._primaryCursor.render(ctx);\n        if (primaryRenderData) {\n            renderData[renderDataLen++] = primaryRenderData;\n        }\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            const secondaryRenderData = this._secondaryCursors[i].render(ctx);\n            if (secondaryRenderData) {\n                renderData[renderDataLen++] = secondaryRenderData;\n            }\n        }\n        this._renderData = renderData;\n    }\n    getLastRenderData() {\n        return this._renderData;\n    }\n}\nViewCursors.BLINK_INTERVAL = 500;\nregisterThemingParticipant((theme, collector) => {\n    const caret = theme.getColor(editorCursorForeground);\n    if (caret) {\n        let caretBackground = theme.getColor(editorCursorBackground);\n        if (!caretBackground) {\n            caretBackground = caret.opposite();\n        }\n        collector.addRule(`.monaco-editor .inputarea.ime-input { caret-color: ${caret}; }`);\n        collector.addRule(`.monaco-editor .cursors-layer .cursor { background-color: ${caret}; border-color: ${caret}; color: ${caretBackground}; }`);\n        if (isHighContrast(theme.type)) {\n            collector.addRule(`.monaco-editor .cursors-layer.has-selection .cursor { border-left: 1px solid ${caretBackground}; border-right: 1px solid ${caretBackground}; }`);\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\nexport class ViewZones extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName('view-zones');\n        this.domNode.setPosition('absolute');\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.marginDomNode = createFastDomNode(document.createElement('div'));\n        this.marginDomNode.setClassName('margin-view-zones');\n        this.marginDomNode.setPosition('absolute');\n        this.marginDomNode.setAttribute('role', 'presentation');\n        this.marginDomNode.setAttribute('aria-hidden', 'true');\n        this._zones = {};\n    }\n    dispose() {\n        super.dispose();\n        this._zones = {};\n    }\n    // ---- begin view event handlers\n    _recomputeWhitespacesProps() {\n        const whitespaces = this._context.viewLayout.getWhitespaces();\n        const oldWhitespaces = new Map();\n        for (const whitespace of whitespaces) {\n            oldWhitespaces.set(whitespace.id, whitespace);\n        }\n        let hadAChange = false;\n        this._context.viewModel.changeWhitespace((whitespaceAccessor) => {\n            const keys = Object.keys(this._zones);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const id = keys[i];\n                const zone = this._zones[id];\n                const props = this._computeWhitespaceProps(zone.delegate);\n                zone.isInHiddenArea = props.isInHiddenArea;\n                const oldWhitespace = oldWhitespaces.get(id);\n                if (oldWhitespace && (oldWhitespace.afterLineNumber !== props.afterViewLineNumber || oldWhitespace.height !== props.heightInPx)) {\n                    whitespaceAccessor.changeOneWhitespace(id, props.afterViewLineNumber, props.heightInPx);\n                    this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n                    hadAChange = true;\n                }\n            }\n        });\n        return hadAChange;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        if (e.hasChanged(61 /* EditorOption.lineHeight */)) {\n            this._recomputeWhitespacesProps();\n        }\n        return true;\n    }\n    onLineMappingChanged(e) {\n        return this._recomputeWhitespacesProps();\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    _getZoneOrdinal(zone) {\n        if (typeof zone.afterColumn !== 'undefined') {\n            return zone.afterColumn;\n        }\n        return 10000;\n    }\n    _computeWhitespaceProps(zone) {\n        if (zone.afterLineNumber === 0) {\n            return {\n                isInHiddenArea: false,\n                afterViewLineNumber: 0,\n                heightInPx: this._heightInPixels(zone),\n                minWidthInPx: this._minWidthInPixels(zone)\n            };\n        }\n        let zoneAfterModelPosition;\n        if (typeof zone.afterColumn !== 'undefined') {\n            zoneAfterModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zone.afterLineNumber,\n                column: zone.afterColumn\n            });\n        }\n        else {\n            const validAfterLineNumber = this._context.viewModel.model.validatePosition({\n                lineNumber: zone.afterLineNumber,\n                column: 1\n            }).lineNumber;\n            zoneAfterModelPosition = new Position(validAfterLineNumber, this._context.viewModel.model.getLineMaxColumn(validAfterLineNumber));\n        }\n        let zoneBeforeModelPosition;\n        if (zoneAfterModelPosition.column === this._context.viewModel.model.getLineMaxColumn(zoneAfterModelPosition.lineNumber)) {\n            zoneBeforeModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zoneAfterModelPosition.lineNumber + 1,\n                column: 1\n            });\n        }\n        else {\n            zoneBeforeModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zoneAfterModelPosition.lineNumber,\n                column: zoneAfterModelPosition.column + 1\n            });\n        }\n        const viewPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(zoneAfterModelPosition, zone.afterColumnAffinity);\n        const isVisible = this._context.viewModel.coordinatesConverter.modelPositionIsVisible(zoneBeforeModelPosition);\n        return {\n            isInHiddenArea: !isVisible,\n            afterViewLineNumber: viewPosition.lineNumber,\n            heightInPx: (isVisible ? this._heightInPixels(zone) : 0),\n            minWidthInPx: this._minWidthInPixels(zone)\n        };\n    }\n    changeViewZones(callback) {\n        let zonesHaveChanged = false;\n        this._context.viewModel.changeWhitespace((whitespaceAccessor) => {\n            const changeAccessor = {\n                addZone: (zone) => {\n                    zonesHaveChanged = true;\n                    return this._addZone(whitespaceAccessor, zone);\n                },\n                removeZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._removeZone(whitespaceAccessor, id) || zonesHaveChanged;\n                },\n                layoutZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._layoutZone(whitespaceAccessor, id) || zonesHaveChanged;\n                }\n            };\n            safeInvoke1Arg(callback, changeAccessor);\n            // Invalidate changeAccessor\n            changeAccessor.addZone = invalidFunc;\n            changeAccessor.removeZone = invalidFunc;\n            changeAccessor.layoutZone = invalidFunc;\n        });\n        return zonesHaveChanged;\n    }\n    _addZone(whitespaceAccessor, zone) {\n        const props = this._computeWhitespaceProps(zone);\n        const whitespaceId = whitespaceAccessor.insertWhitespace(props.afterViewLineNumber, this._getZoneOrdinal(zone), props.heightInPx, props.minWidthInPx);\n        const myZone = {\n            whitespaceId: whitespaceId,\n            delegate: zone,\n            isInHiddenArea: props.isInHiddenArea,\n            isVisible: false,\n            domNode: createFastDomNode(zone.domNode),\n            marginDomNode: zone.marginDomNode ? createFastDomNode(zone.marginDomNode) : null\n        };\n        this._safeCallOnComputedHeight(myZone.delegate, props.heightInPx);\n        myZone.domNode.setPosition('absolute');\n        myZone.domNode.domNode.style.width = '100%';\n        myZone.domNode.setDisplay('none');\n        myZone.domNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n        this.domNode.appendChild(myZone.domNode);\n        if (myZone.marginDomNode) {\n            myZone.marginDomNode.setPosition('absolute');\n            myZone.marginDomNode.domNode.style.width = '100%';\n            myZone.marginDomNode.setDisplay('none');\n            myZone.marginDomNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n            this.marginDomNode.appendChild(myZone.marginDomNode);\n        }\n        this._zones[myZone.whitespaceId] = myZone;\n        this.setShouldRender();\n        return myZone.whitespaceId;\n    }\n    _removeZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            delete this._zones[id];\n            whitespaceAccessor.removeWhitespace(zone.whitespaceId);\n            zone.domNode.removeAttribute('monaco-visible-view-zone');\n            zone.domNode.removeAttribute('monaco-view-zone');\n            zone.domNode.domNode.parentNode.removeChild(zone.domNode.domNode);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.removeAttribute('monaco-visible-view-zone');\n                zone.marginDomNode.removeAttribute('monaco-view-zone');\n                zone.marginDomNode.domNode.parentNode.removeChild(zone.marginDomNode.domNode);\n            }\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    _layoutZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            const props = this._computeWhitespaceProps(zone.delegate);\n            zone.isInHiddenArea = props.isInHiddenArea;\n            // const newOrdinal = this._getZoneOrdinal(zone.delegate);\n            whitespaceAccessor.changeOneWhitespace(zone.whitespaceId, props.afterViewLineNumber, props.heightInPx);\n            // TODO@Alex: change `newOrdinal` too\n            this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    shouldSuppressMouseDownOnViewZone(id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            return Boolean(zone.delegate.suppressMouseDown);\n        }\n        return false;\n    }\n    _heightInPixels(zone) {\n        if (typeof zone.heightInPx === 'number') {\n            return zone.heightInPx;\n        }\n        if (typeof zone.heightInLines === 'number') {\n            return this._lineHeight * zone.heightInLines;\n        }\n        return this._lineHeight;\n    }\n    _minWidthInPixels(zone) {\n        if (typeof zone.minWidthInPx === 'number') {\n            return zone.minWidthInPx;\n        }\n        return 0;\n    }\n    _safeCallOnComputedHeight(zone, height) {\n        if (typeof zone.onComputedHeight === 'function') {\n            try {\n                zone.onComputedHeight(height);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    _safeCallOnDomNodeTop(zone, top) {\n        if (typeof zone.onDomNodeTop === 'function') {\n            try {\n                zone.onDomNodeTop(top);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        const visibleWhitespaces = ctx.viewportData.whitespaceViewportData;\n        const visibleZones = {};\n        let hasVisibleZone = false;\n        for (const visibleWhitespace of visibleWhitespaces) {\n            if (this._zones[visibleWhitespace.id].isInHiddenArea) {\n                continue;\n            }\n            visibleZones[visibleWhitespace.id] = visibleWhitespace;\n            hasVisibleZone = true;\n        }\n        const keys = Object.keys(this._zones);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const id = keys[i];\n            const zone = this._zones[id];\n            let newTop = 0;\n            let newHeight = 0;\n            let newDisplay = 'none';\n            if (visibleZones.hasOwnProperty(id)) {\n                newTop = visibleZones[id].verticalOffset - ctx.bigNumbersDelta;\n                newHeight = visibleZones[id].height;\n                newDisplay = 'block';\n                // zone is visible\n                if (!zone.isVisible) {\n                    zone.domNode.setAttribute('monaco-visible-view-zone', 'true');\n                    zone.isVisible = true;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(visibleZones[id].verticalOffset));\n            }\n            else {\n                if (zone.isVisible) {\n                    zone.domNode.removeAttribute('monaco-visible-view-zone');\n                    zone.isVisible = false;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(-1000000));\n            }\n            zone.domNode.setTop(newTop);\n            zone.domNode.setHeight(newHeight);\n            zone.domNode.setDisplay(newDisplay);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.setTop(newTop);\n                zone.marginDomNode.setHeight(newHeight);\n                zone.marginDomNode.setDisplay(newDisplay);\n            }\n        }\n        if (hasVisibleZone) {\n            this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n            this.marginDomNode.setWidth(this._contentLeft);\n        }\n    }\n}\nfunction safeInvoke1Arg(func, arg1) {\n    try {\n        return func(arg1);\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport './blockDecorations.css';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class BlockDecorations extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.blocks = [];\n        this.contentWidth = -1;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.domNode.setClassName('blockDecorations-container');\n        this.update();\n    }\n    update() {\n        let didChange = false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        const newContentWidth = layoutInfo.contentWidth - layoutInfo.verticalScrollbarWidth;\n        if (this.contentWidth !== newContentWidth) {\n            this.contentWidth = newContentWidth;\n            didChange = true;\n        }\n        return didChange;\n    }\n    dispose() {\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return this.update();\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollLeftChanged;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        let count = 0;\n        const decorations = ctx.getDecorationsInViewport();\n        for (const decoration of decorations) {\n            if (!decoration.options.blockClassName) {\n                continue;\n            }\n            let block = this.blocks[count];\n            if (!block) {\n                block = this.blocks[count] = createFastDomNode(document.createElement('div'));\n                this.domNode.appendChild(block);\n            }\n            const top = ctx.getVerticalOffsetForLineNumber(decoration.range.startLineNumber);\n            // See https://github.com/microsoft/vscode/pull/152740#discussion_r902661546\n            const bottom = ctx.getVerticalOffsetForLineNumber(decoration.range.endLineNumber + 1);\n            block.setClassName('blockDecorations-block ' + decoration.options.blockClassName);\n            block.setLeft(ctx.scrollLeft);\n            block.setWidth(this.contentWidth);\n            block.setTop(top);\n            block.setHeight(bottom - top);\n            count++;\n        }\n        for (let i = count; i < this.blocks.length; i++) {\n            this.blocks[i].domNode.remove();\n        }\n        this.blocks.length = count;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../base/browser/dom.js';\nimport { Selection } from '../common/core/selection.js';\nimport { createFastDomNode } from '../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../base/common/errors.js';\nimport { PointerHandler } from './controller/pointerHandler.js';\nimport { TextAreaHandler } from './controller/textAreaHandler.js';\nimport { ViewController } from './view/viewController.js';\nimport { ViewUserInputEvents } from './view/viewUserInputEvents.js';\nimport { ContentViewOverlays, MarginViewOverlays } from './view/viewOverlays.js';\nimport { PartFingerprints } from './view/viewPart.js';\nimport { ViewContentWidgets } from './viewParts/contentWidgets/contentWidgets.js';\nimport { CurrentLineHighlightOverlay, CurrentLineMarginHighlightOverlay } from './viewParts/currentLineHighlight/currentLineHighlight.js';\nimport { DecorationsOverlay } from './viewParts/decorations/decorations.js';\nimport { EditorScrollbar } from './viewParts/editorScrollbar/editorScrollbar.js';\nimport { GlyphMarginOverlay } from './viewParts/glyphMargin/glyphMargin.js';\nimport { IndentGuidesOverlay } from './viewParts/indentGuides/indentGuides.js';\nimport { LineNumbersOverlay } from './viewParts/lineNumbers/lineNumbers.js';\nimport { ViewLines } from './viewParts/lines/viewLines.js';\nimport { LinesDecorationsOverlay } from './viewParts/linesDecorations/linesDecorations.js';\nimport { Margin } from './viewParts/margin/margin.js';\nimport { MarginViewLineDecorationsOverlay } from './viewParts/marginDecorations/marginDecorations.js';\nimport { Minimap } from './viewParts/minimap/minimap.js';\nimport { ViewOverlayWidgets } from './viewParts/overlayWidgets/overlayWidgets.js';\nimport { DecorationsOverviewRuler } from './viewParts/overviewRuler/decorationsOverviewRuler.js';\nimport { OverviewRuler } from './viewParts/overviewRuler/overviewRuler.js';\nimport { Rulers } from './viewParts/rulers/rulers.js';\nimport { ScrollDecorationViewPart } from './viewParts/scrollDecoration/scrollDecoration.js';\nimport { SelectionsOverlay } from './viewParts/selections/selections.js';\nimport { ViewCursors } from './viewParts/viewCursors/viewCursors.js';\nimport { ViewZones } from './viewParts/viewZones/viewZones.js';\nimport { Position } from '../common/core/position.js';\nimport { Range } from '../common/core/range.js';\nimport { RenderingContext } from './view/renderingContext.js';\nimport { ViewContext } from '../common/viewModel/viewContext.js';\nimport { ViewportData } from '../common/viewLayout/viewLinesViewportData.js';\nimport { ViewEventHandler } from '../common/viewEventHandler.js';\nimport { getThemeTypeSelector } from '../../platform/theme/common/themeService.js';\nimport { PointerHandlerLastRenderData } from './controller/mouseTarget.js';\nimport { BlockDecorations } from './viewParts/blockDecorations/blockDecorations.js';\nexport class View extends ViewEventHandler {\n    constructor(commandDelegate, configuration, colorTheme, model, userInputEvents, overflowWidgetsDomNode) {\n        super();\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderAnimationFrame = null;\n        const viewController = new ViewController(configuration, model, userInputEvents, commandDelegate);\n        // The view context is passed on to most classes (basically to reduce param. counts in ctors)\n        this._context = new ViewContext(configuration, colorTheme, model);\n        // Ensure the view is the first event handler in order to update the layout\n        this._context.addEventHandler(this);\n        this._viewParts = [];\n        // Keyboard handler\n        this._textAreaHandler = new TextAreaHandler(this._context, viewController, this._createTextAreaHandlerHelper());\n        this._viewParts.push(this._textAreaHandler);\n        // These two dom nodes must be constructed up front, since references are needed in the layout provider (scrolling & co.)\n        this._linesContent = createFastDomNode(document.createElement('div'));\n        this._linesContent.setClassName('lines-content' + ' monaco-editor-background');\n        this._linesContent.setPosition('absolute');\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName(this._getEditorClassName());\n        // Set role 'code' for better screen reader support https://github.com/microsoft/vscode/issues/93438\n        this.domNode.setAttribute('role', 'code');\n        this._overflowGuardContainer = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._overflowGuardContainer, 3 /* PartFingerprint.OverflowGuard */);\n        this._overflowGuardContainer.setClassName('overflow-guard');\n        this._scrollbar = new EditorScrollbar(this._context, this._linesContent, this.domNode, this._overflowGuardContainer);\n        this._viewParts.push(this._scrollbar);\n        // View Lines\n        this._viewLines = new ViewLines(this._context, this._linesContent);\n        // View Zones\n        this._viewZones = new ViewZones(this._context);\n        this._viewParts.push(this._viewZones);\n        // Decorations overview ruler\n        const decorationsOverviewRuler = new DecorationsOverviewRuler(this._context);\n        this._viewParts.push(decorationsOverviewRuler);\n        const scrollDecoration = new ScrollDecorationViewPart(this._context);\n        this._viewParts.push(scrollDecoration);\n        const contentViewOverlays = new ContentViewOverlays(this._context);\n        this._viewParts.push(contentViewOverlays);\n        contentViewOverlays.addDynamicOverlay(new CurrentLineHighlightOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new SelectionsOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new IndentGuidesOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new DecorationsOverlay(this._context));\n        const marginViewOverlays = new MarginViewOverlays(this._context);\n        this._viewParts.push(marginViewOverlays);\n        marginViewOverlays.addDynamicOverlay(new CurrentLineMarginHighlightOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new GlyphMarginOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new MarginViewLineDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LinesDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LineNumbersOverlay(this._context));\n        const margin = new Margin(this._context);\n        margin.getDomNode().appendChild(this._viewZones.marginDomNode);\n        margin.getDomNode().appendChild(marginViewOverlays.getDomNode());\n        this._viewParts.push(margin);\n        // Content widgets\n        this._contentWidgets = new ViewContentWidgets(this._context, this.domNode);\n        this._viewParts.push(this._contentWidgets);\n        this._viewCursors = new ViewCursors(this._context);\n        this._viewParts.push(this._viewCursors);\n        // Overlay widgets\n        this._overlayWidgets = new ViewOverlayWidgets(this._context);\n        this._viewParts.push(this._overlayWidgets);\n        const rulers = new Rulers(this._context);\n        this._viewParts.push(rulers);\n        const blockOutline = new BlockDecorations(this._context);\n        this._viewParts.push(blockOutline);\n        const minimap = new Minimap(this._context);\n        this._viewParts.push(minimap);\n        // -------------- Wire dom nodes up\n        if (decorationsOverviewRuler) {\n            const overviewRulerData = this._scrollbar.getOverviewRulerLayoutInfo();\n            overviewRulerData.parent.insertBefore(decorationsOverviewRuler.getDomNode(), overviewRulerData.insertBefore);\n        }\n        this._linesContent.appendChild(contentViewOverlays.getDomNode());\n        this._linesContent.appendChild(rulers.domNode);\n        this._linesContent.appendChild(blockOutline.domNode);\n        this._linesContent.appendChild(this._viewZones.domNode);\n        this._linesContent.appendChild(this._viewLines.getDomNode());\n        this._linesContent.appendChild(this._contentWidgets.domNode);\n        this._linesContent.appendChild(this._viewCursors.getDomNode());\n        this._overflowGuardContainer.appendChild(margin.getDomNode());\n        this._overflowGuardContainer.appendChild(this._scrollbar.getDomNode());\n        this._overflowGuardContainer.appendChild(scrollDecoration.getDomNode());\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textArea);\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textAreaCover);\n        this._overflowGuardContainer.appendChild(this._overlayWidgets.getDomNode());\n        this._overflowGuardContainer.appendChild(minimap.getDomNode());\n        this.domNode.appendChild(this._overflowGuardContainer);\n        if (overflowWidgetsDomNode) {\n            overflowWidgetsDomNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode.domNode);\n        }\n        else {\n            this.domNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode);\n        }\n        this._applyLayout();\n        // Pointer handler\n        this._pointerHandler = this._register(new PointerHandler(this._context, viewController, this._createPointerHandlerHelper()));\n    }\n    _flushAccumulatedAndRenderNow() {\n        this._renderNow();\n    }\n    _createPointerHandlerHelper() {\n        return {\n            viewDomNode: this.domNode.domNode,\n            linesContentDomNode: this._linesContent.domNode,\n            viewLinesDomNode: this._viewLines.getDomNode().domNode,\n            focusTextArea: () => {\n                this.focus();\n            },\n            dispatchTextAreaEvent: (event) => {\n                this._textAreaHandler.textArea.domNode.dispatchEvent(event);\n            },\n            getLastRenderData: () => {\n                const lastViewCursorsRenderData = this._viewCursors.getLastRenderData() || [];\n                const lastTextareaPosition = this._textAreaHandler.getLastRenderData();\n                return new PointerHandlerLastRenderData(lastViewCursorsRenderData, lastTextareaPosition);\n            },\n            shouldSuppressMouseDownOnViewZone: (viewZoneId) => {\n                return this._viewZones.shouldSuppressMouseDownOnViewZone(viewZoneId);\n            },\n            shouldSuppressMouseDownOnWidget: (widgetId) => {\n                return this._contentWidgets.shouldSuppressMouseDownOnWidget(widgetId);\n            },\n            getPositionFromDOMInfo: (spanNode, offset) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getPositionFromDOMInfo(spanNode, offset);\n            },\n            visibleRangeForPosition: (lineNumber, column) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(new Position(lineNumber, column));\n            },\n            getLineWidth: (lineNumber) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getLineWidth(lineNumber);\n            }\n        };\n    }\n    _createTextAreaHandlerHelper() {\n        return {\n            visibleRangeForPosition: (position) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(position);\n            }\n        };\n    }\n    _applyLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this.domNode.setWidth(layoutInfo.width);\n        this.domNode.setHeight(layoutInfo.height);\n        this._overflowGuardContainer.setWidth(layoutInfo.width);\n        this._overflowGuardContainer.setHeight(layoutInfo.height);\n        this._linesContent.setWidth(1000000);\n        this._linesContent.setHeight(1000000);\n    }\n    _getEditorClassName() {\n        const focused = this._textAreaHandler.isFocused() ? ' focused' : '';\n        return this._context.configuration.options.get(130 /* EditorOption.editorClassName */) + ' ' + getThemeTypeSelector(this._context.theme.type) + focused;\n    }\n    // --- begin event handlers\n    handleEvents(events) {\n        super.handleEvents(events);\n        this._scheduleRender();\n    }\n    onConfigurationChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        this._applyLayout();\n        return false;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return false;\n    }\n    onFocusChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    onThemeChanged(e) {\n        this._context.theme.update(e.theme);\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    // --- end event handlers\n    dispose() {\n        if (this._renderAnimationFrame !== null) {\n            this._renderAnimationFrame.dispose();\n            this._renderAnimationFrame = null;\n        }\n        this._contentWidgets.overflowingContentWidgetsDomNode.domNode.remove();\n        this._context.removeEventHandler(this);\n        this._viewLines.dispose();\n        // Destroy view parts\n        for (const viewPart of this._viewParts) {\n            viewPart.dispose();\n        }\n        super.dispose();\n    }\n    _scheduleRender() {\n        if (this._renderAnimationFrame === null) {\n            this._renderAnimationFrame = dom.runAtThisOrScheduleAtNextAnimationFrame(this._onRenderScheduled.bind(this), 100);\n        }\n    }\n    _onRenderScheduled() {\n        this._renderAnimationFrame = null;\n        this._flushAccumulatedAndRenderNow();\n    }\n    _renderNow() {\n        safeInvokeNoArg(() => this._actualRender());\n    }\n    _getViewPartsToRender() {\n        const result = [];\n        let resultLen = 0;\n        for (const viewPart of this._viewParts) {\n            if (viewPart.shouldRender()) {\n                result[resultLen++] = viewPart;\n            }\n        }\n        return result;\n    }\n    _actualRender() {\n        if (!dom.isInDOM(this.domNode.domNode)) {\n            return;\n        }\n        let viewPartsToRender = this._getViewPartsToRender();\n        if (!this._viewLines.shouldRender() && viewPartsToRender.length === 0) {\n            // Nothing to render\n            return;\n        }\n        const partialViewportData = this._context.viewLayout.getLinesViewportData();\n        this._context.viewModel.setViewport(partialViewportData.startLineNumber, partialViewportData.endLineNumber, partialViewportData.centeredLineNumber);\n        const viewportData = new ViewportData(this._selections, partialViewportData, this._context.viewLayout.getWhitespaceViewportData(), this._context.viewModel);\n        if (this._contentWidgets.shouldRender()) {\n            // Give the content widgets a chance to set their max width before a possible synchronous layout\n            this._contentWidgets.onBeforeRender(viewportData);\n        }\n        if (this._viewLines.shouldRender()) {\n            this._viewLines.renderText(viewportData);\n            this._viewLines.onDidRender();\n            // Rendering of viewLines might cause scroll events to occur, so collect view parts to render again\n            viewPartsToRender = this._getViewPartsToRender();\n        }\n        const renderingContext = new RenderingContext(this._context.viewLayout, viewportData, this._viewLines);\n        // Render the rest of the parts\n        for (const viewPart of viewPartsToRender) {\n            viewPart.prepareRender(renderingContext);\n        }\n        for (const viewPart of viewPartsToRender) {\n            viewPart.render(renderingContext);\n            viewPart.onDidRender();\n        }\n    }\n    // --- BEGIN CodeEditor helpers\n    delegateVerticalScrollbarPointerDown(browserEvent) {\n        this._scrollbar.delegateVerticalScrollbarPointerDown(browserEvent);\n    }\n    restoreState(scrollPosition) {\n        this._context.viewModel.viewLayout.setScrollPosition({ scrollTop: scrollPosition.scrollTop }, 1 /* ScrollType.Immediate */);\n        this._context.viewModel.tokenizeViewport();\n        this._renderNow();\n        this._viewLines.updateLineWidths();\n        this._context.viewModel.viewLayout.setScrollPosition({ scrollLeft: scrollPosition.scrollLeft }, 1 /* ScrollType.Immediate */);\n    }\n    getOffsetForColumn(modelLineNumber, modelColumn) {\n        const modelPosition = this._context.viewModel.model.validatePosition({\n            lineNumber: modelLineNumber,\n            column: modelColumn\n        });\n        const viewPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        this._flushAccumulatedAndRenderNow();\n        const visibleRange = this._viewLines.visibleRangeForPosition(new Position(viewPosition.lineNumber, viewPosition.column));\n        if (!visibleRange) {\n            return -1;\n        }\n        return visibleRange.left;\n    }\n    getTargetAtClientPoint(clientX, clientY) {\n        const mouseTarget = this._pointerHandler.getTargetAtClientPoint(clientX, clientY);\n        if (!mouseTarget) {\n            return null;\n        }\n        return ViewUserInputEvents.convertViewToModelMouseTarget(mouseTarget, this._context.viewModel.coordinatesConverter);\n    }\n    createOverviewRuler(cssClassName) {\n        return new OverviewRuler(this._context, cssClassName);\n    }\n    change(callback) {\n        this._viewZones.changeViewZones(callback);\n        this._scheduleRender();\n    }\n    render(now, everything) {\n        if (everything) {\n            // Force everything to render...\n            this._viewLines.forceShouldRender();\n            for (const viewPart of this._viewParts) {\n                viewPart.forceShouldRender();\n            }\n        }\n        if (now) {\n            this._flushAccumulatedAndRenderNow();\n        }\n        else {\n            this._scheduleRender();\n        }\n    }\n    focus() {\n        this._textAreaHandler.focusTextArea();\n    }\n    isFocused() {\n        return this._textAreaHandler.isFocused();\n    }\n    setAriaOptions(options) {\n        this._textAreaHandler.setAriaOptions(options);\n    }\n    addContentWidget(widgetData) {\n        this._contentWidgets.addWidget(widgetData.widget);\n        this.layoutContentWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutContentWidget(widgetData) {\n        var _a, _b;\n        let newRange = widgetData.position ? widgetData.position.range || null : null;\n        if (newRange === null) {\n            const newPosition = widgetData.position ? widgetData.position.position : null;\n            if (newPosition !== null) {\n                newRange = new Range(newPosition.lineNumber, newPosition.column, newPosition.lineNumber, newPosition.column);\n            }\n        }\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\n        this._contentWidgets.setWidgetPosition(widgetData.widget, newRange, newPreference, (_b = (_a = widgetData.position) === null || _a === void 0 ? void 0 : _a.positionAffinity) !== null && _b !== void 0 ? _b : null);\n        this._scheduleRender();\n    }\n    removeContentWidget(widgetData) {\n        this._contentWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n    addOverlayWidget(widgetData) {\n        this._overlayWidgets.addWidget(widgetData.widget);\n        this.layoutOverlayWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutOverlayWidget(widgetData) {\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\n        const shouldRender = this._overlayWidgets.setWidgetPosition(widgetData.widget, newPreference);\n        if (shouldRender) {\n            this._scheduleRender();\n        }\n    }\n    removeOverlayWidget(widgetData) {\n        this._overlayWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n}\nfunction safeInvokeNoArg(func) {\n    try {\n        return func();\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { LineInjectedText } from '../../common/textModelEvents.js';\nimport { ModelLineProjectionData } from '../../common/modelLineProjectionData.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('domLineBreaksComputer', { createHTML: value => value });\nexport class DOMLineBreaksComputerFactory {\n    static create() {\n        return new DOMLineBreaksComputerFactory();\n    }\n    constructor() {\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent) {\n        const requests = [];\n        const injectedTexts = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n            },\n            finalize: () => {\n                return createLineBreaks(requests, fontInfo, tabSize, wrappingColumn, wrappingIndent, injectedTexts);\n            }\n        };\n    }\n}\nfunction createLineBreaks(requests, fontInfo, tabSize, firstLineBreakColumn, wrappingIndent, injectedTextsPerLine) {\n    var _a;\n    function createEmptyLineBreakWithPossiblyInjectedText(requestIdx) {\n        const injectedTexts = injectedTextsPerLine[requestIdx];\n        if (injectedTexts) {\n            const lineText = LineInjectedText.applyInjectedText(requests[requestIdx], injectedTexts);\n            const injectionOptions = injectedTexts.map(t => t.options);\n            const injectionOffsets = injectedTexts.map(text => text.column - 1);\n            // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n            // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n            return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n        }\n        else {\n            return null;\n        }\n    }\n    if (firstLineBreakColumn === -1) {\n        const result = [];\n        for (let i = 0, len = requests.length; i < len; i++) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n        }\n        return result;\n    }\n    const overallWidth = Math.round(firstLineBreakColumn * fontInfo.typicalHalfwidthCharacterWidth);\n    const additionalIndent = (wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0);\n    const additionalIndentSize = Math.round(tabSize * additionalIndent);\n    const additionalIndentLength = Math.ceil(fontInfo.spaceWidth * additionalIndentSize);\n    const containerDomNode = document.createElement('div');\n    applyFontInfo(containerDomNode, fontInfo);\n    const sb = createStringBuilder(10000);\n    const firstNonWhitespaceIndices = [];\n    const wrappedTextIndentLengths = [];\n    const renderLineContents = [];\n    const allCharOffsets = [];\n    const allVisibleColumns = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineContent = LineInjectedText.applyInjectedText(requests[i], injectedTextsPerLine[i]);\n        let firstNonWhitespaceIndex = 0;\n        let wrappedTextIndentLength = 0;\n        let width = overallWidth;\n        if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n            firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n            if (firstNonWhitespaceIndex === -1) {\n                // all whitespace line\n                firstNonWhitespaceIndex = 0;\n            }\n            else {\n                // Track existing indent\n                for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                    const charWidth = (lineContent.charCodeAt(i) === 9 /* CharCode.Tab */\n                        ? (tabSize - (wrappedTextIndentLength % tabSize))\n                        : 1);\n                    wrappedTextIndentLength += charWidth;\n                }\n                const indentWidth = Math.ceil(fontInfo.spaceWidth * wrappedTextIndentLength);\n                // Force sticking to beginning of line if no character would fit except for the indentation\n                if (indentWidth + fontInfo.typicalFullwidthCharacterWidth > overallWidth) {\n                    firstNonWhitespaceIndex = 0;\n                    wrappedTextIndentLength = 0;\n                }\n                else {\n                    width = overallWidth - indentWidth;\n                }\n            }\n        }\n        const renderLineContent = lineContent.substr(firstNonWhitespaceIndex);\n        const tmp = renderLine(renderLineContent, wrappedTextIndentLength, tabSize, width, sb, additionalIndentLength);\n        firstNonWhitespaceIndices[i] = firstNonWhitespaceIndex;\n        wrappedTextIndentLengths[i] = wrappedTextIndentLength;\n        renderLineContents[i] = renderLineContent;\n        allCharOffsets[i] = tmp[0];\n        allVisibleColumns[i] = tmp[1];\n    }\n    const html = sb.build();\n    const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(html)) !== null && _a !== void 0 ? _a : html;\n    containerDomNode.innerHTML = trustedhtml;\n    containerDomNode.style.position = 'absolute';\n    containerDomNode.style.top = '10000';\n    containerDomNode.style.wordWrap = 'break-word';\n    document.body.appendChild(containerDomNode);\n    const range = document.createRange();\n    const lineDomNodes = Array.prototype.slice.call(containerDomNode.children, 0);\n    const result = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineDomNode = lineDomNodes[i];\n        const breakOffsets = readLineBreaks(range, lineDomNode, renderLineContents[i], allCharOffsets[i]);\n        if (breakOffsets === null) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n            continue;\n        }\n        const firstNonWhitespaceIndex = firstNonWhitespaceIndices[i];\n        const wrappedTextIndentLength = wrappedTextIndentLengths[i] + additionalIndentSize;\n        const visibleColumns = allVisibleColumns[i];\n        const breakOffsetsVisibleColumn = [];\n        for (let j = 0, len = breakOffsets.length; j < len; j++) {\n            breakOffsetsVisibleColumn[j] = visibleColumns[breakOffsets[j]];\n        }\n        if (firstNonWhitespaceIndex !== 0) {\n            // All break offsets are relative to the renderLineContent, make them absolute again\n            for (let j = 0, len = breakOffsets.length; j < len; j++) {\n                breakOffsets[j] += firstNonWhitespaceIndex;\n            }\n        }\n        let injectionOptions;\n        let injectionOffsets;\n        const curInjectedTexts = injectedTextsPerLine[i];\n        if (curInjectedTexts) {\n            injectionOptions = curInjectedTexts.map(t => t.options);\n            injectionOffsets = curInjectedTexts.map(text => text.column - 1);\n        }\n        else {\n            injectionOptions = null;\n            injectionOffsets = null;\n        }\n        result[i] = new ModelLineProjectionData(injectionOffsets, injectionOptions, breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength);\n    }\n    document.body.removeChild(containerDomNode);\n    return result;\n}\nfunction renderLine(lineContent, initialVisibleColumn, tabSize, width, sb, wrappingIndentLength) {\n    if (wrappingIndentLength !== 0) {\n        const hangingOffset = String(wrappingIndentLength);\n        sb.appendASCIIString('<div style=\"text-indent: -');\n        sb.appendASCIIString(hangingOffset);\n        sb.appendASCIIString('px; padding-left: ');\n        sb.appendASCIIString(hangingOffset);\n        sb.appendASCIIString('px; box-sizing: border-box; width:');\n    }\n    else {\n        sb.appendASCIIString('<div style=\"width:');\n    }\n    sb.appendASCIIString(String(width));\n    sb.appendASCIIString('px;\">');\n    // if (containsRTL) {\n    // \tsb.appendASCIIString('\" dir=\"ltr');\n    // }\n    const len = lineContent.length;\n    let visibleColumn = initialVisibleColumn;\n    let charOffset = 0;\n    const charOffsets = [];\n    const visibleColumns = [];\n    let nextCharCode = (0 < len ? lineContent.charCodeAt(0) : 0 /* CharCode.Null */);\n    sb.appendASCIIString('<span>');\n    for (let charIndex = 0; charIndex < len; charIndex++) {\n        if (charIndex !== 0 && charIndex % 16384 /* Constants.SPAN_MODULO_LIMIT */ === 0) {\n            sb.appendASCIIString('</span><span>');\n        }\n        charOffsets[charIndex] = charOffset;\n        visibleColumns[charIndex] = visibleColumn;\n        const charCode = nextCharCode;\n        nextCharCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n        let producedCharacters = 1;\n        let charWidth = 1;\n        switch (charCode) {\n            case 9 /* CharCode.Tab */:\n                producedCharacters = (tabSize - (visibleColumn % tabSize));\n                charWidth = producedCharacters;\n                for (let space = 1; space <= producedCharacters; space++) {\n                    if (space < producedCharacters) {\n                        sb.write1(0xA0); // &nbsp;\n                    }\n                    else {\n                        sb.appendASCII(32 /* CharCode.Space */);\n                    }\n                }\n                break;\n            case 32 /* CharCode.Space */:\n                if (nextCharCode === 32 /* CharCode.Space */) {\n                    sb.write1(0xA0); // &nbsp;\n                }\n                else {\n                    sb.appendASCII(32 /* CharCode.Space */);\n                }\n                break;\n            case 60 /* CharCode.LessThan */:\n                sb.appendASCIIString('&lt;');\n                break;\n            case 62 /* CharCode.GreaterThan */:\n                sb.appendASCIIString('&gt;');\n                break;\n            case 38 /* CharCode.Ampersand */:\n                sb.appendASCIIString('&amp;');\n                break;\n            case 0 /* CharCode.Null */:\n                sb.appendASCIIString('&#00;');\n                break;\n            case 65279 /* CharCode.UTF8_BOM */:\n            case 8232 /* CharCode.LINE_SEPARATOR */:\n            case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n            case 133 /* CharCode.NEXT_LINE */:\n                sb.write1(0xFFFD);\n                break;\n            default:\n                if (strings.isFullWidthCharacter(charCode)) {\n                    charWidth++;\n                }\n                if (charCode < 32) {\n                    sb.write1(9216 + charCode);\n                }\n                else {\n                    sb.write1(charCode);\n                }\n        }\n        charOffset += producedCharacters;\n        visibleColumn += charWidth;\n    }\n    sb.appendASCIIString('</span>');\n    charOffsets[lineContent.length] = charOffset;\n    visibleColumns[lineContent.length] = visibleColumn;\n    sb.appendASCIIString('</div>');\n    return [charOffsets, visibleColumns];\n}\nfunction readLineBreaks(range, lineDomNode, lineContent, charOffsets) {\n    if (lineContent.length <= 1) {\n        return null;\n    }\n    const spans = Array.prototype.slice.call(lineDomNode.children, 0);\n    const breakOffsets = [];\n    try {\n        discoverBreaks(range, spans, charOffsets, 0, null, lineContent.length - 1, null, breakOffsets);\n    }\n    catch (err) {\n        console.log(err);\n        return null;\n    }\n    if (breakOffsets.length === 0) {\n        return null;\n    }\n    breakOffsets.push(lineContent.length);\n    return breakOffsets;\n}\nfunction discoverBreaks(range, spans, charOffsets, low, lowRects, high, highRects, result) {\n    if (low === high) {\n        return;\n    }\n    lowRects = lowRects || readClientRect(range, spans, charOffsets[low], charOffsets[low + 1]);\n    highRects = highRects || readClientRect(range, spans, charOffsets[high], charOffsets[high + 1]);\n    if (Math.abs(lowRects[0].top - highRects[0].top) <= 0.1) {\n        // same line\n        return;\n    }\n    // there is at least one line break between these two offsets\n    if (low + 1 === high) {\n        // the two characters are adjacent, so the line break must be exactly between them\n        result.push(high);\n        return;\n    }\n    const mid = low + ((high - low) / 2) | 0;\n    const midRects = readClientRect(range, spans, charOffsets[mid], charOffsets[mid + 1]);\n    discoverBreaks(range, spans, charOffsets, low, lowRects, mid, midRects, result);\n    discoverBreaks(range, spans, charOffsets, mid, midRects, high, highRects, result);\n}\nfunction readClientRect(range, spans, startOffset, endOffset) {\n    range.setStart(spans[(startOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */) | 0].firstChild, startOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n    range.setEnd(spans[(endOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */) | 0].firstChild, endOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n    return range.getClientRects();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ViewEventHandler } from '../../common/viewEventHandler.js';\nexport class DynamicViewOverlay extends ViewEventHandler {\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorActiveLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._readConfig();\n        this._lastCursorModelPosition = new Position(1, 1);\n        this._lastCursorViewPosition = new Position(1, 1);\n        this._renderResult = null;\n        this._activeLineNumber = 1;\n        this._context.addEventHandler(this);\n    }\n    _readConfig() {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        const lineNumbers = options.get(62 /* EditorOption.lineNumbers */);\n        this._renderLineNumbers = lineNumbers.renderType;\n        this._renderCustomLineNumbers = lineNumbers.renderFn;\n        this._renderFinalNewline = options.get(86 /* EditorOption.renderFinalNewline */);\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n        this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        this._readConfig();\n        return true;\n    }\n    onCursorStateChanged(e) {\n        const primaryViewPosition = e.selections[0].getPosition();\n        this._lastCursorViewPosition = primaryViewPosition;\n        this._lastCursorModelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n        let shouldRender = false;\n        if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n            this._activeLineNumber = primaryViewPosition.lineNumber;\n            shouldRender = true;\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */ || this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            shouldRender = true;\n        }\n        return shouldRender;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getLineRenderLineNumber(viewLineNumber) {\n        const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n        if (modelPosition.column !== 1) {\n            return '';\n        }\n        const modelLineNumber = modelPosition.lineNumber;\n        if (this._renderCustomLineNumbers) {\n            return this._renderCustomLineNumbers(modelLineNumber);\n        }\n        if (this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n                return String(modelLineNumber);\n            }\n            if (modelLineNumber % 10 === 0) {\n                return String(modelLineNumber);\n            }\n            return '';\n        }\n        return String(modelLineNumber);\n    }\n    prepareRender(ctx) {\n        if (this._renderLineNumbers === 0 /* RenderLineNumbersType.Off */) {\n            this._renderResult = null;\n            return;\n        }\n        const lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const common = '<div class=\"' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft + 'px;width:' + this._lineNumbersWidth + 'px;\">';\n        let relativeLineNumbers = null;\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */) {\n            relativeLineNumbers = new Array(visibleEndLineNumber - visibleStartLineNumber + 1);\n            if (this._lastCursorViewPosition.lineNumber >= visibleStartLineNumber && this._lastCursorViewPosition.lineNumber <= visibleEndLineNumber) {\n                relativeLineNumbers[this._lastCursorViewPosition.lineNumber - visibleStartLineNumber] = this._lastCursorModelPosition.lineNumber;\n            }\n            // Iterate up to compute relative line numbers\n            {\n                let value = 0;\n                for (let lineNumber = this._lastCursorViewPosition.lineNumber + 1; lineNumber <= visibleEndLineNumber; lineNumber++) {\n                    const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, 1));\n                    const isWrappedLine = (modelPosition.column !== 1);\n                    if (!isWrappedLine) {\n                        value++;\n                    }\n                    if (lineNumber >= visibleStartLineNumber) {\n                        relativeLineNumbers[lineNumber - visibleStartLineNumber] = isWrappedLine ? 0 : value;\n                    }\n                }\n            }\n            // Iterate down to compute relative line numbers\n            {\n                let value = 0;\n                for (let lineNumber = this._lastCursorViewPosition.lineNumber - 1; lineNumber >= visibleStartLineNumber; lineNumber--) {\n                    const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, 1));\n                    const isWrappedLine = (modelPosition.column !== 1);\n                    if (!isWrappedLine) {\n                        value++;\n                    }\n                    if (lineNumber <= visibleEndLineNumber) {\n                        relativeLineNumbers[lineNumber - visibleStartLineNumber] = isWrappedLine ? 0 : value;\n                    }\n                }\n            }\n        }\n        const lineCount = this._context.viewModel.getLineCount();\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            if (!this._renderFinalNewline) {\n                if (lineNumber === lineCount && this._context.viewModel.getLineLength(lineNumber) === 0) {\n                    // Do not render last (empty) line\n                    output[lineIndex] = '';\n                    continue;\n                }\n            }\n            let renderLineNumber;\n            if (relativeLineNumbers) {\n                const relativeLineNumber = relativeLineNumbers[lineIndex];\n                if (this._lastCursorViewPosition.lineNumber === lineNumber) {\n                    // current line!\n                    renderLineNumber = `<span class=\"relative-current-line-number\">${relativeLineNumber}</span>`;\n                }\n                else if (relativeLineNumber) {\n                    renderLineNumber = String(relativeLineNumber);\n                }\n                else {\n                    renderLineNumber = '';\n                }\n            }\n            else {\n                renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n            }\n            if (renderLineNumber) {\n                if (lineNumber === this._activeLineNumber) {\n                    output[lineIndex] = ('<div class=\"active-line-number ' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft + 'px;width:' + this._lineNumbersWidth + 'px;\">'\n                        + renderLineNumber\n                        + '</div>');\n                }\n                else {\n                    output[lineIndex] = (common\n                        + renderLineNumber\n                        + '</div>');\n                }\n            }\n            else {\n                output[lineIndex] = '';\n            }\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nLineNumbersOverlay.CLASS_NAME = 'line-numbers';\n// theming\nregisterThemingParticipant((theme, collector) => {\n    const lineNumbers = theme.getColor(editorLineNumbers);\n    if (lineNumbers) {\n        collector.addRule(`.monaco-editor .line-numbers { color: ${lineNumbers}; }`);\n    }\n    const activeLineNumber = theme.getColor(editorActiveLineNumber);\n    if (activeLineNumber) {\n        collector.addRule(`.monaco-editor .line-numbers.active-line-number { color: ${activeLineNumber}; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { FloatHorizontalRange } from '../../view/renderingContext.js';\nexport class RangeUtil {\n    static _createRange() {\n        if (!this._handyReadyRange) {\n            this._handyReadyRange = document.createRange();\n        }\n        return this._handyReadyRange;\n    }\n    static _detachRange(range, endNode) {\n        // Move range out of the span node, IE doesn't like having many ranges in\n        // the same spot and will act badly for lines containing dashes ('-')\n        range.selectNodeContents(endNode);\n    }\n    static _readClientRects(startElement, startOffset, endElement, endOffset, endNode) {\n        const range = this._createRange();\n        try {\n            range.setStart(startElement, startOffset);\n            range.setEnd(endElement, endOffset);\n            return range.getClientRects();\n        }\n        catch (e) {\n            // This is life ...\n            return null;\n        }\n        finally {\n            this._detachRange(range, endNode);\n        }\n    }\n    static _mergeAdjacentRanges(ranges) {\n        if (ranges.length === 1) {\n            // There is nothing to merge\n            return ranges;\n        }\n        ranges.sort(FloatHorizontalRange.compare);\n        const result = [];\n        let resultLen = 0;\n        let prev = ranges[0];\n        for (let i = 1, len = ranges.length; i < len; i++) {\n            const range = ranges[i];\n            if (prev.left + prev.width + 0.9 /* account for browser's rounding errors*/ >= range.left) {\n                prev.width = Math.max(prev.width, range.left + range.width - prev.left);\n            }\n            else {\n                result[resultLen++] = prev;\n                prev = range;\n            }\n        }\n        result[resultLen++] = prev;\n        return result;\n    }\n    static _createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale) {\n        if (!clientRects || clientRects.length === 0) {\n            return null;\n        }\n        // We go through FloatHorizontalRange because it has been observed in bi-di text\n        // that the clientRects are not coming in sorted from the browser\n        const result = [];\n        for (let i = 0, len = clientRects.length; i < len; i++) {\n            const clientRect = clientRects[i];\n            result[i] = new FloatHorizontalRange(Math.max(0, (clientRect.left - clientRectDeltaLeft) / clientRectScale), clientRect.width / clientRectScale);\n        }\n        return this._mergeAdjacentRanges(result);\n    }\n    static readHorizontalRanges(domNode, startChildIndex, startOffset, endChildIndex, endOffset, clientRectDeltaLeft, clientRectScale, endNode) {\n        // Panic check\n        const min = 0;\n        const max = domNode.children.length - 1;\n        if (min > max) {\n            return null;\n        }\n        startChildIndex = Math.min(max, Math.max(min, startChildIndex));\n        endChildIndex = Math.min(max, Math.max(min, endChildIndex));\n        if (startChildIndex === endChildIndex && startOffset === endOffset && startOffset === 0 && !domNode.children[startChildIndex].firstChild) {\n            // We must find the position at the beginning of a <span>\n            // To cover cases of empty <span>s, avoid using a range and use the <span>'s bounding box\n            const clientRects = domNode.children[startChildIndex].getClientRects();\n            return this._createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale);\n        }\n        // If crossing over to a span only to select offset 0, then use the previous span's maximum offset\n        // Chrome is buggy and doesn't handle 0 offsets well sometimes.\n        if (startChildIndex !== endChildIndex) {\n            if (endChildIndex > 0 && endOffset === 0) {\n                endChildIndex--;\n                endOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        let startElement = domNode.children[startChildIndex].firstChild;\n        let endElement = domNode.children[endChildIndex].firstChild;\n        if (!startElement || !endElement) {\n            // When having an empty <span> (without any text content), try to move to the previous <span>\n            if (!startElement && startOffset === 0 && startChildIndex > 0) {\n                startElement = domNode.children[startChildIndex - 1].firstChild;\n                startOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n            if (!endElement && endOffset === 0 && endChildIndex > 0) {\n                endElement = domNode.children[endChildIndex - 1].firstChild;\n                endOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        if (!startElement || !endElement) {\n            return null;\n        }\n        startOffset = Math.min(startElement.textContent.length, Math.max(0, startOffset));\n        endOffset = Math.min(endElement.textContent.length, Math.max(0, endOffset));\n        const clientRects = this._readClientRects(startElement, startOffset, endElement, endOffset, endNode);\n        return this._createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RangeUtil } from './rangeUtil.js';\nimport { FloatHorizontalRange, VisibleRanges } from '../../view/renderingContext.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine, LineRange, DomPosition } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nconst canUseFastRenderedViewLine = (function () {\n    if (platform.isNative) {\n        // In VSCode we know very well when the zoom level changes\n        return true;\n    }\n    if (platform.isLinux || browser.isFirefox || browser.isSafari) {\n        // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n        // --\n        // Even though we read character widths correctly, having read them at a specific zoom level\n        // does not mean they are the same at the current zoom level.\n        // --\n        // This could be improved if we ever figure out how to get an event when browsers zoom,\n        // but until then we have to stick with reading client rects.\n        // --\n        // The same has been observed with Firefox on Windows7\n        // --\n        // The same has been oversved with Safari\n        return false;\n    }\n    return true;\n})();\nlet monospaceAssumptionsAreValid = true;\nexport class DomReadingContext {\n    constructor(domNode, endNode) {\n        this._domNode = domNode;\n        this._clientRectDeltaLeft = 0;\n        this._clientRectScale = 1;\n        this._clientRectRead = false;\n        this.endNode = endNode;\n    }\n    readClientRect() {\n        if (!this._clientRectRead) {\n            this._clientRectRead = true;\n            const rect = this._domNode.getBoundingClientRect();\n            this._clientRectDeltaLeft = rect.left;\n            this._clientRectScale = rect.width / this._domNode.offsetWidth;\n        }\n    }\n    get clientRectDeltaLeft() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectDeltaLeft;\n    }\n    get clientRectScale() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectScale;\n    }\n}\nexport class ViewLineOptions {\n    constructor(config, themeType) {\n        this.themeType = themeType;\n        const options = config.options;\n        const fontInfo = options.get(46 /* EditorOption.fontInfo */);\n        this.renderWhitespace = options.get(90 /* EditorOption.renderWhitespace */);\n        this.renderControlCharacters = options.get(85 /* EditorOption.renderControlCharacters */);\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.useMonospaceOptimizations = (fontInfo.isMonospace\n            && !options.get(29 /* EditorOption.disableMonospaceOptimizations */));\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this.stopRenderingLineAfter = options.get(107 /* EditorOption.stopRenderingLineAfter */);\n        this.fontLigatures = options.get(47 /* EditorOption.fontLigatures */);\n    }\n    equals(other) {\n        return (this.themeType === other.themeType\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.fontLigatures === other.fontLigatures);\n    }\n}\nexport class ViewLine {\n    constructor(options) {\n        this._options = options;\n        this._isMaybeInvalid = true;\n        this._renderedViewLine = null;\n    }\n    // --- begin IVisibleLineData\n    getDomNode() {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            return this._renderedViewLine.domNode.domNode;\n        }\n        return null;\n    }\n    setDomNode(domNode) {\n        if (this._renderedViewLine) {\n            this._renderedViewLine.domNode = createFastDomNode(domNode);\n        }\n        else {\n            throw new Error('I have no rendered view line to set the dom node to...');\n        }\n    }\n    onContentChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onTokensChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onDecorationsChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onOptionsChanged(newOptions) {\n        this._isMaybeInvalid = true;\n        this._options = newOptions;\n    }\n    onSelectionChanged() {\n        if (isHighContrast(this._options.themeType) || this._options.renderWhitespace === 'selection') {\n            this._isMaybeInvalid = true;\n            return true;\n        }\n        return false;\n    }\n    renderLine(lineNumber, deltaTop, viewportData, sb) {\n        if (this._isMaybeInvalid === false) {\n            // it appears that nothing relevant has changed\n            return false;\n        }\n        this._isMaybeInvalid = false;\n        const lineData = viewportData.getViewLineRenderingData(lineNumber);\n        const options = this._options;\n        const actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\n        // Only send selection information when needed for rendering whitespace\n        let selectionsOnLine = null;\n        if (isHighContrast(options.themeType) || this._options.renderWhitespace === 'selection') {\n            const selections = viewportData.selections;\n            for (const selection of selections) {\n                if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                    // Selection does not intersect line\n                    continue;\n                }\n                const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                if (startColumn < endColumn) {\n                    if (isHighContrast(options.themeType) || this._options.renderWhitespace !== 'selection') {\n                        actualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', 0 /* InlineDecorationType.Regular */));\n                    }\n                    else {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n        }\n        const renderLineInput = new RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, lineData.startVisibleColumn, options.spaceWidth, options.middotWidth, options.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, selectionsOnLine);\n        if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n            // no need to do anything, we have the same render input\n            return false;\n        }\n        sb.appendASCIIString('<div style=\"top:');\n        sb.appendASCIIString(String(deltaTop));\n        sb.appendASCIIString('px;height:');\n        sb.appendASCIIString(String(this._options.lineHeight));\n        sb.appendASCIIString('px;\" class=\"');\n        sb.appendASCIIString(ViewLine.CLASS_NAME);\n        sb.appendASCIIString('\">');\n        const output = renderViewLine(renderLineInput, sb);\n        sb.appendASCIIString('</div>');\n        let renderedViewLine = null;\n        if (monospaceAssumptionsAreValid && canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === 0 /* ForeignElementType.None */) {\n            if (lineData.content.length < 300 && renderLineInput.lineTokens.getCount() < 100) {\n                // Browser rounding errors have been observed in Chrome and IE, so using the fast\n                // view line only for short lines. Please test before removing the length check...\n                // ---\n                // Another rounding error has been observed on Linux in VSCode, where <span> width\n                // rounding errors add up to an observable large number...\n                // ---\n                // Also see another example of rounding errors on Windows in\n                // https://github.com/microsoft/vscode/issues/33178\n                renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\n            }\n        }\n        if (!renderedViewLine) {\n            renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\n        }\n        this._renderedViewLine = renderedViewLine;\n        return true;\n    }\n    layoutLine(lineNumber, deltaTop) {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            this._renderedViewLine.domNode.setTop(deltaTop);\n            this._renderedViewLine.domNode.setHeight(this._options.lineHeight);\n        }\n    }\n    // --- end IVisibleLineData\n    getWidth() {\n        if (!this._renderedViewLine) {\n            return 0;\n        }\n        return this._renderedViewLine.getWidth();\n    }\n    getWidthIsFast() {\n        if (!this._renderedViewLine) {\n            return true;\n        }\n        return this._renderedViewLine.getWidthIsFast();\n    }\n    needsMonospaceFontCheck() {\n        if (!this._renderedViewLine) {\n            return false;\n        }\n        return (this._renderedViewLine instanceof FastRenderedViewLine);\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this._renderedViewLine) {\n            return monospaceAssumptionsAreValid;\n        }\n        if (this._renderedViewLine instanceof FastRenderedViewLine) {\n            return this._renderedViewLine.monospaceAssumptionsAreValid();\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    onMonospaceAssumptionsInvalidated() {\n        if (this._renderedViewLine && this._renderedViewLine instanceof FastRenderedViewLine) {\n            this._renderedViewLine = this._renderedViewLine.toSlowRenderedLine();\n        }\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this._renderedViewLine) {\n            return null;\n        }\n        startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n        endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n        const stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter;\n        let outsideRenderedLine = false;\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\n            // This range is obviously not visible\n            outsideRenderedLine = true;\n        }\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\n            startColumn = stopRenderingLineAfter + 1;\n        }\n        if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\n            endColumn = stopRenderingLineAfter + 1;\n        }\n        const horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(lineNumber, startColumn, endColumn, context);\n        if (horizontalRanges && horizontalRanges.length > 0) {\n            return new VisibleRanges(outsideRenderedLine, horizontalRanges);\n        }\n        return null;\n    }\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        if (!this._renderedViewLine) {\n            return 1;\n        }\n        return this._renderedViewLine.getColumnOfNodeOffset(lineNumber, spanNode, offset);\n    }\n}\nViewLine.CLASS_NAME = 'view-line';\n/**\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\n */\nclass FastRenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._charWidth = renderLineInput.spaceWidth;\n    }\n    getWidth() {\n        return Math.round(this._getCharPosition(this._characterMapping.length));\n    }\n    getWidthIsFast() {\n        return true;\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this.domNode) {\n            return monospaceAssumptionsAreValid;\n        }\n        const expectedWidth = this.getWidth();\n        const actualWidth = this.domNode.domNode.firstChild.offsetWidth;\n        if (Math.abs(expectedWidth - actualWidth) >= 2) {\n            // more than 2px off\n            console.warn(`monospace assumptions have been violated, therefore disabling monospace optimizations!`);\n            monospaceAssumptionsAreValid = false;\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    toSlowRenderedLine() {\n        return createRenderedLine(this.domNode, this.input, this._characterMapping, false, 0 /* ForeignElementType.None */);\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        const startPosition = this._getCharPosition(startColumn);\n        const endPosition = this._getCharPosition(endColumn);\n        return [new FloatHorizontalRange(startPosition, endPosition - startPosition)];\n    }\n    _getCharPosition(column) {\n        const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n        return this._charWidth * horizontalOffset;\n    }\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        const spanNodeTextContentLength = spanNode.textContent.length;\n        let spanIndex = -1;\n        while (spanNode) {\n            spanNode = spanNode.previousSibling;\n            spanIndex++;\n        }\n        return this._characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n    }\n}\n/**\n * Every time we render a line, we save what we have rendered in an instance of this class.\n */\nclass RenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n        this._containsForeignElements = containsForeignElements;\n        this._cachedWidth = -1;\n        this._pixelOffsetCache = null;\n        if (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\n            this._pixelOffsetCache = new Float32Array(Math.max(2, this._characterMapping.length + 1));\n            for (let column = 0, len = this._characterMapping.length; column <= len; column++) {\n                this._pixelOffsetCache[column] = -1;\n            }\n        }\n    }\n    // --- Reading from the DOM methods\n    _getReadingTarget(myDomNode) {\n        return myDomNode.domNode.firstChild;\n    }\n    /**\n     * Width of the line in pixels\n     */\n    getWidth() {\n        if (!this.domNode) {\n            return 0;\n        }\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n        }\n        return this._cachedWidth;\n    }\n    getWidthIsFast() {\n        if (this._cachedWidth === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Visible ranges for a model range\n     */\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this.domNode) {\n            return null;\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const startOffset = this._readPixelOffset(this.domNode, lineNumber, startColumn, context);\n            if (startOffset === -1) {\n                return null;\n            }\n            const endOffset = this._readPixelOffset(this.domNode, lineNumber, endColumn, context);\n            if (endOffset === -1) {\n                return null;\n            }\n            return [new FloatHorizontalRange(startOffset, endOffset - startOffset)];\n        }\n        return this._readVisibleRangesForRange(this.domNode, lineNumber, startColumn, endColumn, context);\n    }\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        if (startColumn === endColumn) {\n            const pixelOffset = this._readPixelOffset(domNode, lineNumber, startColumn, context);\n            if (pixelOffset === -1) {\n                return null;\n            }\n            else {\n                return [new FloatHorizontalRange(pixelOffset, 0)];\n            }\n        }\n        else {\n            return this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\n        }\n    }\n    _readPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            if (this._containsForeignElements === 0 /* ForeignElementType.None */) {\n                // We can assume the line is really empty\n                return 0;\n            }\n            if (this._containsForeignElements === 2 /* ForeignElementType.After */) {\n                // We have foreign elements after the (empty) line\n                return 0;\n            }\n            if (this._containsForeignElements === 1 /* ForeignElementType.Before */) {\n                // We have foreign elements before the (empty) line\n                return this.getWidth();\n            }\n            // We have foreign elements before & after the (empty) line\n            const readingTarget = this._getReadingTarget(domNode);\n            if (readingTarget.firstChild) {\n                return readingTarget.firstChild.offsetWidth;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const cachedPixelOffset = this._pixelOffsetCache[column];\n            if (cachedPixelOffset !== -1) {\n                return cachedPixelOffset;\n            }\n            const result = this._actualReadPixelOffset(domNode, lineNumber, column, context);\n            this._pixelOffsetCache[column] = result;\n            return result;\n        }\n        return this._actualReadPixelOffset(domNode, lineNumber, column, context);\n    }\n    _actualReadPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n            if (!r || r.length === 0) {\n                return -1;\n            }\n            return r[0].left;\n        }\n        if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0 /* ForeignElementType.None */) {\n            // This branch helps in the case of whitespace only lines which have a width set\n            return this.getWidth();\n        }\n        const domPosition = this._characterMapping.getDomPosition(column);\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        const result = r[0].left;\n        if (this.input.isBasicASCII) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            const expectedResult = Math.round(this.input.spaceWidth * horizontalOffset);\n            if (Math.abs(expectedResult - result) <= 1) {\n                return expectedResult;\n            }\n        }\n        return result;\n    }\n    _readRawVisibleRangesForRange(domNode, startColumn, endColumn, context) {\n        if (startColumn === 1 && endColumn === this._characterMapping.length) {\n            // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n            return [new FloatHorizontalRange(0, this.getWidth())];\n        }\n        const startDomPosition = this._characterMapping.getDomPosition(startColumn);\n        const endDomPosition = this._characterMapping.getDomPosition(endColumn);\n        return RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startDomPosition.partIndex, startDomPosition.charIndex, endDomPosition.partIndex, endDomPosition.charIndex, context.clientRectDeltaLeft, context.clientRectScale, context.endNode);\n    }\n    /**\n     * Returns the column for the text found at a specific offset inside a rendered dom node\n     */\n    getColumnOfNodeOffset(lineNumber, spanNode, offset) {\n        const spanNodeTextContentLength = spanNode.textContent.length;\n        let spanIndex = -1;\n        while (spanNode) {\n            spanNode = spanNode.previousSibling;\n            spanIndex++;\n        }\n        return this._characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n    }\n}\nclass WebKitRenderedViewLine extends RenderedViewLine {\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        const output = super._readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context);\n        if (!output || output.length === 0 || startColumn === endColumn || (startColumn === 1 && endColumn === this._characterMapping.length)) {\n            return output;\n        }\n        // WebKit is buggy and returns an expanded range (to contain words in some cases)\n        // The last client rect is enlarged (I think)\n        if (!this.input.containsRTL) {\n            // This is an attempt to patch things up\n            // Find position of last column\n            const endPixelOffset = this._readPixelOffset(domNode, lineNumber, endColumn, context);\n            if (endPixelOffset !== -1) {\n                const lastRange = output[output.length - 1];\n                if (lastRange.left < endPixelOffset) {\n                    // Trim down the width of the last visible range to not go after the last column's position\n                    lastRange.width = endPixelOffset - lastRange.left;\n                }\n            }\n        }\n        return output;\n    }\n}\nconst createRenderedLine = (function () {\n    if (browser.isWebKit) {\n        return createWebKitRenderedLine;\n    }\n    return createNormalRenderedLine;\n})();\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class Margin extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._canUseLayerHinting = !options.get(28 /* EditorOption.disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(Margin.OUTER_CLASS_NAME);\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._glyphMarginBackgroundDomNode = createFastDomNode(document.createElement('div'));\n        this._glyphMarginBackgroundDomNode.setClassName(Margin.CLASS_NAME);\n        this._domNode.appendChild(this._glyphMarginBackgroundDomNode);\n    }\n    dispose() {\n        super.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._canUseLayerHinting = !options.get(28 /* EditorOption.disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollTopChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setLayerHinting(this._canUseLayerHinting);\n        this._domNode.setContain('strict');\n        const adjustedScrollTop = ctx.scrollTop - ctx.bigNumbersDelta;\n        this._domNode.setTop(-adjustedScrollTop);\n        const height = Math.min(ctx.scrollHeight, 1000000);\n        this._domNode.setHeight(height);\n        this._domNode.setWidth(this._contentLeft);\n        this._glyphMarginBackgroundDomNode.setLeft(this._glyphMarginLeft);\n        this._glyphMarginBackgroundDomNode.setWidth(this._glyphMarginWidth);\n        this._glyphMarginBackgroundDomNode.setHeight(height);\n    }\n}\nMargin.CLASS_NAME = 'glyph-margin';\nMargin.OUTER_CLASS_NAME = 'margin';\n"],"names":["Coordinate","top","left","this","_coordinateBrand","undefined","ViewContentWidgets","context","viewDomNode","_viewDomNode","_widgets","domNode","createFastDomNode","document","createElement","PartFingerprints","setClassName","setPosition","setTop","overflowingContentWidgetsDomNode","e","Object","keys","widgetId","onConfigurationChanged","onLineMappingChanged","_widget","myWidget","Widget","_context","id","allowEditorOverflow","appendChild","setShouldRender","widget","range","preference","affinity","getId","hasOwnProperty","parentNode","removeChild","removeAttribute","suppressMouseDown","viewportData","onBeforeRender","ctx","prepareRender","render","ViewPart","actual","_actual","getDomNode","options","configuration","layoutInfo","get","_fixedOverflowWidgets","_contentWidth","contentWidth","_contentLeft","contentLeft","_lineHeight","_range","_viewRange","_affinity","_preference","_cachedDomNodeOffsetWidth","_cachedDomNodeOffsetHeight","_maxWidth","_getMaxWidth","_isVisible","_renderData","setDisplay","setVisibility","setAttribute","setMaxWidth","hasChanged","_setPosition","_a","validModelRange","viewModel","model","validateRange","coordinatesConverter","modelPositionIsVisible","getStartPosition","getEndPosition","convertModelRangeToViewRange","window","innerWidth","documentElement","offsetWidth","body","length","topLeft","bottomLeft","width","height","aboveLineTop","heightAboveLine","underLineTop","aboveTop","fitsAbove","belowTop","fitsBelow","viewportHeight","actualAboveLeft","actualBelowLeft","scrollLeft","viewportWidth","aboveLeft","belowLeft","windowSize","domNodePosition","MIN_LIMIT","Math","max","MAX_LIMIT","min","absoluteLeft","dom","StandardWindow","scrollX","delta","getDomNodePagePosition","absoluteAboveTop","scrollY","absoluteBelowTop","getClientArea","_layoutHorizontalSegmentInPage","absoluteAboveLeft","absoluteBelowLeft","visibleRangesForRange","linesVisibleRangesForRange","firstLine","lastLine","visibleRangesForLine","lineNumber","firstLineMinLeft","ranges","visibleRange","lastLineMinLeft","topForPosition","getVerticalOffsetForLineNumber","scrollTop","topForBottomLine","placement","_getTopAndBottomLeft","preferredDimensions","beforeRender","safeInvoke","clientRect","getBoundingClientRect","round","_layoutBoxInPage","_layoutBoxInViewport","pass","pref","coordinate","position","_prepareRenderWidgetAtExactPositionOverflowing","endLineNumber","startLineNumber","_prepareRenderWidget","afterRender","setLeft","bigNumbersDelta","fn","thisArg","args","call","AbstractLineHighlightOverlay","_renderLineHighlight","_renderLineHighlightOnlyWhenFocus","_selectionIsEmpty","_focused","_cursorLineNumbers","_selections","Selection","addEventHandler","removeEventHandler","cursorsLineNumbers","map","s","positionLineNumber","sort","a","b","arrays","selectionIsEmpty","every","isEmpty","_readFromSelections","selections","scrollWidthChanged","scrollTopChanged","isFocused","_shouldRenderThis","renderedLine","_renderOne","visibleStartLineNumber","visibleEndLineNumber","len","index","renderData","lineIndex","DynamicViewOverlay","CurrentLineHighlightOverlay","className","_shouldRenderOther","scrollWidth","_shouldRenderInContent","_shouldRenderInMargin","CurrentLineMarginHighlightOverlay","registerThemingParticipant","theme","collector","lineHighlight","getColor","editorLineHighlight","addRule","isTransparent","defines","editorLineHighlightBorder","lineHighlightBorder","isHighContrast","type","DecorationsOverlay","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_renderResult","_decorations","getDecorationsInViewport","decorations","decorationsLen","i","d","zIndex","aClassName","bClassName","Range","output","_renderWholeLineDecorations","_renderNormalDecorations","lineHeight","String","lenI","isWholeLine","decorationOutput","j","prevClassName","prevShowIfCollapsed","prevRange","showIfCollapsed","Boolean","endColumn","startColumn","getLineMaxColumn","_renderNormalDecoration","linesVisibleRanges","lenJ","lineVisibleRanges","outsideRenderedLine","singleVisibleRange","center","HorizontalRange","k","lenK","EditorScrollbar","linesContent","overflowGuardDomNode","scrollbar","mouseWheelScrollSensitivity","fastScrollSensitivity","scrollPredominantAxis","scrollbarOptions","listenOnDomNode","getThemeTypeSelector","useShadows","lazyRender","vertical","horizontal","verticalHasArrows","horizontalHasArrows","verticalScrollbarSize","verticalSliderSize","horizontalScrollbarSize","horizontalSliderSize","handleMouseWheel","alwaysConsumeMouseWheel","arrowSize","scrollByPage","_register","SmoothScrollableElement","viewLayout","getScrollable","scrollbarDomNode","_setLayout","onBrowserDesperateReveal","lookAtScrollTop","lookAtScrollLeft","newScrollPosition","deltaTop","getCurrentScrollTop","deltaLeft","getCurrentScrollLeft","setScrollPosition","addDisposableListener","side","setWidth","minimap","minimapWidth","setHeight","getOverviewRulerLayoutInfo","browserEvent","delegateVerticalScrollbarPointerDown","newOpts","updateOptions","updateClassName","renderNow","scrollbarShadowColor","scrollbarShadow","scrollbarSliderBackgroundColor","scrollbarSliderBackground","scrollbarSliderHoverBackgroundColor","scrollbarSliderHoverBackground","scrollbarSliderActiveBackgroundColor","scrollbarSliderActiveBackground","DecorationToRender","_decorationToRenderBrand","DedupOverlay","prevEndLineIndex","startLineIndex","endLineIndex","push","GlyphMarginOverlay","_glyphMargin","_glyphMarginLeft","glyphMarginLeft","_glyphMarginWidth","glyphMarginWidth","r","rLen","glyphMarginClassName","toRender","_render","_getDecorations","toString","common","classNames","join","IndentGuidesOverlay","_primaryPosition","wrappingInfo","fontInfo","_spaceWidth","spaceWidth","_maxIndentLeft","wrappingColumn","_bracketPairGuideOptions","newPosition","getPosition","equals","_b","_c","_d","indentation","bracketPairs","activeCursorPosition","indents","getGuidesByLine","indent","result","leftOffset","visibleRangeForPosition","Position","guide","column","visibleColumn","horizontalLine","bracketGuides","getBracketGuidesInRangeByLine","highlightActive","highlightActiveBracketPair","horizontalGuides","bracketPairsHorizontal","HorizontalGuidesState","includeInactive","indentGuides","getLinesIndentGuides","activeIndentStartLineNumber","activeIndentEndLineNumber","activeIndentLevel","highlightActiveIndentation","activeIndentInfo","getActiveIndentGuide","indentSize","getOptions","lineGuides","Array","bracketGuidesInLine","bracketGuidesInLineQueue","ArrayQueue","indentGuidesInLine","indentLvl","indentGuide","isActive","takeWhile","g","peeked","peek","IndentGuide","transparentToUndefined","color","editorIndentGuidesColor","editorIndentGuides","editorActiveIndentGuidesColor","editorActiveIndentGuides","colors","bracketColor","editorBracketHighlightingForeground1","guideColor","editorBracketPairGuideBackground1","guideColorActive","editorBracketPairGuideActiveBackground1","editorBracketHighlightingForeground2","editorBracketPairGuideBackground2","editorBracketPairGuideActiveBackground2","editorBracketHighlightingForeground3","editorBracketPairGuideBackground3","editorBracketPairGuideActiveBackground3","editorBracketHighlightingForeground4","editorBracketPairGuideBackground4","editorBracketPairGuideActiveBackground4","editorBracketHighlightingForeground5","editorBracketPairGuideBackground5","editorBracketPairGuideActiveBackground5","editorBracketHighlightingForeground6","editorBracketPairGuideBackground6","editorBracketPairGuideActiveBackground6","colorProvider","BracketPairGuidesClassNames","colorValues","c","effectiveGuideColor","transparent","effectiveGuideColorActive","filter","isDefined","level","getInlineClassNameOfLevel","replace","activeClassName","LastRenderedData","_currentVisibleRange","currentVisibleRange","HorizontalRevealRangeRequest","minimalReveal","startScrollTop","stopScrollTop","scrollType","minLineNumber","maxLineNumber","HorizontalRevealSelectionsRequest","selection","ViewLines","_linesContent","_textRangeRestingSpot","_visibleLines","VisibleLinesCollection","conf","_isViewportWrapping","isViewportWrapping","_revealHorizontalRightPadding","_horizontalScrollbarHeight","horizontalScrollbarHeight","_cursorSurroundingLines","_cursorSurroundingLinesStyle","_canUseLayerHinting","_viewLineOptions","ViewLineOptions","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","applyFontInfo","_maxLineWidth","_asyncUpdateLineWidths","RunOnceScheduler","_updateLineWidthsSlow","_asyncCheckMonospaceFontAssumptions","_checkMonospaceFontAssumptions","_lastRenderedData","_horizontalRevealRequest","dispose","ViewLine","_onOptionsMaybeChanged","newViewLineOptions","getStartLineNumber","getEndLineNumber","getVisibleLine","onOptionsChanged","rendStartLineNumber","rendEndLineNumber","onSelectionChanged","onDecorationsChanged","shouldRender","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","desiredScrollTop","_computeScrollTopToRevealRange","getFutureViewport","source","verticalType","validateScrollPosition","revealHorizontal","abs","scrollLeftChanged","onScrollChanged","onTokensChanged","setMaxLineWidth","onZonesChanged","spanNode","offset","viewLineDomNode","_getViewLineDomNode","_getLineNumberFor","getLineCount","getColumnOfNodeOffset","minColumn","getLineMinColumn","node","nodeType","parentElement","getWidth","includeNewLines","originalEndLineNumber","getCurrentVisibleRange","visibleRanges","visibleRangesLen","domReadingContext","DomReadingContext","nextLineModelLineNumber","convertViewPositionToModelPosition","getVisibleRangesForRange","LineVisibleRanges","_visibleRangesForLineRange","HorizontalPosition","_updateLineWidths","fast","localMaxLineWidth","allWidthsComputed","visibleLine","getWidthIsFast","_ensureMaxLineWidth","longestLineNumber","longestWidth","needsMonospaceFontCheck","lineWidth","monospaceAssumptionsAreValid","onMonospaceAssumptionsInvalidated","Error","renderLines","setCurrentVisibleRange","getScrollWidth","getScrollHeight","horizontalRevealRequest","onDidRender","newScrollLeft","_computeScrollLeftToReveal","maxHorizontalOffset","_updateLineWidthsFast","schedule","platform","isScheduled","setLayerHinting","setContain","adjustedScrollTop","iLineWidth","ceil","viewport","boxIsSingleRange","boxStartY","boxEndY","newScrollTop","viewportStartY","viewportEndY","minScrollTop","boxMiddleY","_computeMinimumScrolling","getCurrentViewport","viewportStartX","viewportEndX","boxStartX","boxEndX","HORIZONTAL_EXTRA_PX","viewportStart","viewportEnd","boxStart","boxEnd","revealAtStart","revealAtEnd","viewportLength","LinesDecorationsOverlay","_decorationsLeft","decorationsLeft","_decorationsWidth","decorationsWidth","linesDecorationsClassName","firstLineDecorationClassName","lineOutput","MarginViewLineDecorationsOverlay","marginClassName","allCharCodes","v","MinimapCharRenderer","charData","scale","_minimapCharRendererBrand","charDataNormal","soften","charDataLight","target","dx","dy","chCode","foregroundAlpha","backgroundColor","backgroundAlpha","fontScale","useLighterFont","force1pxHeight","charWidth","charHeight","renderHeight","console","warn","charIndex","getCharIndex","destWidth","backgroundR","backgroundG","backgroundB","deltaR","deltaG","deltaB","destAlpha","dest","data","sourceOffset","row","y","x","colorR","colorG","colorB","input","ratio","Uint8ClampedArray","toUint8","charTable","A","B","C","D","E","F","decodeData","str","prebakedMiniMaps","once","MinimapCharRendererFactory","fontFamily","lastCreated","lastFontFamily","factory","createFromSampleData","createSampleData","canvas","getContext","style","fillStyle","font","textBaseline","code","fillText","fromCharCode","getImageData","_downsample","destOffset","targetIndex","brightest","sourceY1","sourceY2","sourceX1","sourceX2","value","samples","sy","sourceRow","floor","yBalance","sx","xBalance","sourceIndex","weight","final","pixelsPerCharacter","resultLen","resultOffset","_downsampleChar","adjust","MinimapOptions","tokensColorTracker","pixelRatio","minimapLayout","minimapOpts","renderMinimap","size","minimapHeightIsEditorHeight","scrollBeyondLastLine","showSlider","autohide","minimapLeft","minimapHeight","canvasInnerWidth","minimapCanvasInnerWidth","canvasInnerHeight","minimapCanvasInnerHeight","canvasOuterWidth","minimapCanvasOuterWidth","canvasOuterHeight","minimapCanvasOuterHeight","isSampling","minimapIsSampling","editorHeight","minimapScale","minimapLineHeight","minimapCharWidth","charRenderer","create","defaultBackgroundColor","_getMinimapBackground","_getMinimapForegroundOpacity","other","themeColor","minimapBackground","RGBA8","rgba","minimapForegroundOpacity","MinimapLayout","scrollHeight","sliderNeeded","computedSliderRatio","sliderTop","sliderHeight","_computedSliderRatio","pageY","viewportStartLineNumber","viewportEndLineNumber","viewportStartLineNumberVerticalOffset","viewportContainsWhitespaceGaps","lineCount","realLineCount","previousLayout","maxMinimapSliderTop","minimapLinesFitting","logicalScrollHeight","maxLinesFitting","viewportLineCount","expectedViewportLineCount","extraLinesAtTheBottom","MinimapLine","INVALID","RenderData","renderedLayout","imageData","lines","_imageData","_renderedLines","RenderedLinesCollection","_set","layout","scrollEquals","_get","tmp","rendLineNumberStart","changeFromLineNumber","changeCount","deleteFromLineNumber","deleteToLineNumber","insertFromLineNumber","insertToLineNumber","MinimapBuffers","WIDTH","HEIGHT","background","_backgroundFillData","_createBackgroundFillData","_buffers","createImageData","_lastUsedBuffer","set","backgroundA","MinimapSamplingState","samplingRatio","minimapLines","fromLineNumber","toLineNumber","fromLineIndex","modelLineToMinimapLine","toLineIndex","sampledLineNumber","minimapLineStart","minimapLineEnd","deletedLineCount","changeStartIndex","changeEndIndex","insertedLineCount","viewLineCount","oldSamplingState","minimapLineCount","EditorLayoutInfoComputer","halfRatio","lastIndex","oldMinimapLines","oldLength","oldIndex","oldDeltaLineCount","minViewLineNumber","events","lastEvent","fromViewLineNumber","toViewLineNumber","oldMinimapLineNumber","_oldIndex","selectedViewLineNumber","_i","Minimap","MinimapTokensColorTracker","_minimapSelections","compute","samplingState","_samplingState","_shouldCheckSampling","InnerMinimap","opts","_recreateLineSampling","onDidChangeOptions","affectsMinimap","minimapLineRange","modelLineRangeToMinimapLineRange","count","onThemeChanged","onTokensColorsChanged","minimapCtx","whitespaceViewportData","wasSampling","event","getLineContent","needed","getViewLineData","getMinimapLinesRenderingData","decorationLineRangeToMinimapLineRange","modelStartLineNumber","modelEndLineNumber","decoration","minimapStartLineNumber","minimapEndLineNumber","ViewModelDecoration","revealRange","_renderDecorations","_gestureInProgress","_theme","_model","_lastRenderData","_selectionColor","minimapSelection","_domNode","_getMinimapDomNodeClassName","_shadow","_canvas","_decorationsCanvas","_slider","_sliderHorizontal","_applyLayout","_pointerDownListener","addStandardDisposableListener","EventType","POINTER_DOWN","preventDefault","internalOffsetY","offsetY","revealLineNumber","button","initialPosY","_startSliderDragging","_sliderPointerMoveMonitor","GlobalPointerMoveMonitor","_sliderPointerDownListener","stopPropagation","_gestureDisposable","Gesture","_sliderTouchStartListener","toggleClassName","scrollDueToTouchEvent","passive","_sliderTouchMoveListener","_sliderTouchEndListener","initialSliderState","Element","initialPosX","pageX","handlePointerMove","posy","posx","pointerOrthogonalDelta","setScrollTop","pointerDelta","getDesiredScrollTopFromDelta","startMonitoring","pointerId","buttons","pointerMoveData","touch","startY","getDesiredScrollTopFromTouchLocation","class_","getBuffer","renderingCtx","getRealLineCount","renderDecorations","getSelections","getMinimapDecorationsInViewport","characterWidth","tabSize","canvasContext","clearRect","highlightedLines","ContiguousLineMap","_renderSelectionLineHighlights","_renderDecorationsLineHighlights","lineOffsetMap","_renderSelectionsHighlights","_renderDecorationsHighlights","y1","y2","line","yy1","yy2","fillRect","MINIMAP_GUTTER_WIDTH","highlightColors","Map","minimapOptions","MinimapPosition","decorationColor","highlightColor","has","renderDecorationOnLine","renderDecoration","decorationRange","x1","getXOffsetForPosition","x2","lineIndexToXOffset","lineData","prevx","charCode","charCodeAt","strings","linesEquals","_lastData","_getBuffer","_renderUntouchedLines","_dirtyY1","_dirtyY2","lineInfo","defaultBackground","backgroundIsLight","renderMinimapLineHeight","innerLinePadding","renderBackground","renderedLines","_renderLine","dirtyY1","dirtyHeight","putImageData","lastRenderData","lastTargetData","lastStartLineNumber","lastLines","lastLinesLength","targetData","maxDestPixel","dirtyPixel1","dirtyPixel2","copySourceStart","copySourceEnd","copyDestStart","copyDestEnd","dest_dy","lastLineIndex","source_dy","sourceStart","sourceEnd","destStart","destEnd","subarray","colorTracker","minimapCharRenderer","content","tokens","maxDx","tabsCharDelta","tokenIndex","tokensLen","getCount","tokenEndIndex","getEndOffset","tokenColorId","getForeground","tokenColor","insertSpacesCount","blockRenderChar","renderChar","Disposable","defaultValue","_startLineNumber","_endLineNumber","_defaultValue","_values","sliderBackground","minimapSliderBackground","sliderHoverBackground","minimapSliderHoverBackground","sliderActiveBackground","minimapSliderActiveBackground","shadow","ViewOverlayWidgets","_verticalScrollbarWidth","verticalScrollbarWidth","_minimapWidth","_editorHeight","_editorWidth","widgetData","setRight","widgetHeight","clientHeight","right","_renderWidget","Settings","config","overviewRulerLanes","renderBorder","borderColor","editorOverviewRulerBorder","hideCursor","cursorColor","editorCursorForeground","themeType","minimapEnabled","enabled","minimapSide","editorOverviewRulerBackground","TokenizationRegistry","Color","overviewRuler","domWidth","domHeight","canvasWidth","canvasHeight","_initLanes","w","canvasLeftOffset","laneCount","remainingWidth","leftWidth","rightWidth","centerWidth","centerOffset","DecorationsOverviewRuler","_updateSettings","_tokensColorTrackerListener","changedColorMap","_cursorPositions","newSettings","_settings","affectsOverviewRuler","scrollHeightChanged","editorCtx","setBackgroundColor","heightRatio","getAllOverviewRulerDecorations","minDecorationHeight","halfMinDecorationHeight","canvasCtx","OverviewRulerDecorationsGroup","decorationGroup","decorationGroupData","prevLane","prevY1","prevY2","lane","yCenter","cursorHeight","halfCursorHeight","cursorX","cursorW","cursor","beginPath","strokeStyle","moveTo","lineTo","stroke","OverviewRuler","cssClassName","_zoneManager","OverviewZoneManager","setDOMWidth","setDOMHeight","setOuterHeight","setLineHeight","setPixelRatio","getDOMWidth","getDOMHeight","getCanvasWidth","getCanvasHeight","zones","setZones","getOuterHeight","colorZones","resolveColorZones","id2Color","getId2Color","_renderOneLane","currentColorId","currentFrom","currentTo","zone","zoneColorId","colorId","zoneFrom","from","zoneTo","to","ViewEventHandler","Rulers","_renderedRulers","_rulers","currentCount","desiredCount","rulerWidth","addCount","removeCount","pop","_ensureRulersCount","ruler","setBoxShadow","rulerColor","editorRuler","ScrollDecorationViewPart","_scrollTop","_width","_updateWidth","_shouldShow","_useShadows","newShouldShow","_updateShouldShow","HorizontalRangeWithStyle","startStyle","endStyle","LineVisibleRangesWithStyle","toStyledRange","item","toStyled","SelectionsOverlay","_previousFrameVisibleRangesWithStyle","_roundedSelection","slice","previousFrame","epsilon","previousFrameTop","previousFrameBottom","topLineNumber","bottomLineNumber","curLineRange","curLeft","curRight","bottom","prevLeft","prevRight","nextLeft","nextRight","_visibleRangesHaveGaps","_enrichVisibleRangesWithStyle","output2","hasMultipleSelections","visibleRangesHaveStyle","fullLineHeight","reducedLineHeight","firstLineNumber","lastLineNumber","innerCornerOutput","restOfSelectionOutput","_createSelectionPiece","SELECTION_CLASS_NAME","ROUNDED_PIECE_WIDTH","EDITOR_BACKGROUND_CLASS_NAME","SELECTION_TOP_RIGHT","SELECTION_BOTTOM_RIGHT","SELECTION_TOP_LEFT","SELECTION_BOTTOM_LEFT","thisFrameVisibleRangesWithStyle","visibleRangesWithStyle","_getVisibleRangesWithStyle","_actualRenderOneSelection","n","editorSelectionColor","editorSelectionBackground","editorInactiveSelectionColor","editorInactiveSelection","editorSelectionForegroundColor","editorSelectionForeground","ViewCursorRenderData","textContent","textContentClassName","ViewCursor","_cursorStyle","_lineCursorWidth","_position","_lastRenderedContent","lineContent","startOffset","endOffset","substring","_getGraphemeAwarePosition","nextGrapheme","TextEditorCursorStyle","computeScreenAwareSize","visibleRangeForCharacter","firstVisibleRangeForCharacter","findTokenIndexAtOffset","getClassName","_prepareRender","ViewCursors","_readOnly","_cursorBlinking","_cursorSmoothCaretAnimation","_isComposingInput","_primaryCursor","_secondaryCursors","_updateDomClassName","_startCursorBlinkAnimation","TimeoutTimer","_cursorFlatBlinkInterval","IntervalTimer","_blinkingEnabled","_editorHasFocus","_updateBlinking","secondaryPositions","onCursorPositionChanged","addCnt","newCursor","insertBefore","nextSibling","removeCnt","splice","positions","_onCursorPositionChanged","cancel","blinkingStyle","_getCursorBlinking","isHidden","isSolid","_hide","_show","cancelAndSet","BLINK_INTERVAL","setIfNotSet","_getClassName","show","hide","renderDataLen","primaryRenderData","secondaryRenderData","caret","caretBackground","editorCursorBackground","opposite","invalidFunc","ViewZones","marginDomNode","_zones","whitespaces","getWhitespaces","oldWhitespaces","whitespace","hadAChange","changeWhitespace","whitespaceAccessor","props","_computeWhitespaceProps","delegate","isInHiddenArea","oldWhitespace","afterLineNumber","afterViewLineNumber","heightInPx","changeOneWhitespace","_safeCallOnComputedHeight","_recomputeWhitespacesProps","afterColumn","_heightInPixels","minWidthInPx","_minWidthInPixels","zoneAfterModelPosition","zoneBeforeModelPosition","validatePosition","validAfterLineNumber","viewPosition","convertModelPositionToViewPosition","afterColumnAffinity","isVisible","callback","zonesHaveChanged","changeAccessor","addZone","_addZone","removeZone","_removeZone","layoutZone","_layoutZone","func","arg1","onUnexpectedError","safeInvoke1Arg","myZone","whitespaceId","insertWhitespace","_getZoneOrdinal","removeWhitespace","heightInLines","onComputedHeight","onDomNodeTop","visibleWhitespaces","visibleZones","hasVisibleZone","visibleWhitespace","newTop","newHeight","newDisplay","verticalOffset","_safeCallOnDomNodeTop","getScrolledTopFromAbsoluteTop","BlockDecorations","blocks","update","didChange","newContentWidth","blockClassName","block","remove","View","commandDelegate","colorTheme","userInputEvents","overflowWidgetsDomNode","_renderAnimationFrame","viewController","ViewController","ViewContext","_viewParts","_textAreaHandler","TextAreaHandler","_createTextAreaHandlerHelper","_getEditorClassName","_overflowGuardContainer","_scrollbar","_viewLines","_viewZones","decorationsOverviewRuler","scrollDecoration","contentViewOverlays","ContentViewOverlays","addDynamicOverlay","marginViewOverlays","MarginViewOverlays","LineNumbersOverlay","margin","Margin","_contentWidgets","_viewCursors","_overlayWidgets","rulers","blockOutline","overviewRulerData","parent","textArea","textAreaCover","_pointerHandler","PointerHandler","_createPointerHandlerHelper","_renderNow","linesContentDomNode","viewLinesDomNode","focusTextArea","focus","dispatchTextAreaEvent","dispatchEvent","getLastRenderData","lastViewCursorsRenderData","lastTextareaPosition","PointerHandlerLastRenderData","shouldSuppressMouseDownOnViewZone","viewZoneId","shouldSuppressMouseDownOnWidget","getPositionFromDOMInfo","_flushAccumulatedAndRenderNow","getLineWidth","focused","_scheduleRender","runAtThisOrScheduleAtNextAnimationFrame","_onRenderScheduled","bind","safeInvokeNoArg","_actualRender","viewPart","isInDOM","viewPartsToRender","_getViewPartsToRender","partialViewportData","getLinesViewportData","setViewport","centeredLineNumber","ViewportData","getWhitespaceViewportData","renderText","renderingContext","RenderingContext","scrollPosition","tokenizeViewport","updateLineWidths","modelLineNumber","modelColumn","modelPosition","clientX","clientY","mouseTarget","getTargetAtClientPoint","ViewUserInputEvents","changeViewZones","now","everything","forceShouldRender","setAriaOptions","addWidget","layoutContentWidget","newRange","newPreference","setWidgetPosition","positionAffinity","removeWidget","layoutOverlayWidget","ttPolicy","trustedTypes","createPolicy","createHTML","DOMLineBreaksComputerFactory","wrappingIndent","requests","injectedTexts","addRequest","lineText","injectedText","previousLineBreakData","finalize","firstLineBreakColumn","injectedTextsPerLine","createEmptyLineBreakWithPossiblyInjectedText","requestIdx","LineInjectedText","injectionOptions","t","injectionOffsets","text","ModelLineProjectionData","overallWidth","additionalIndent","additionalIndentSize","additionalIndentLength","containerDomNode","sb","createStringBuilder","firstNonWhitespaceIndices","wrappedTextIndentLengths","renderLineContents","allCharOffsets","allVisibleColumns","firstNonWhitespaceIndex","wrappedTextIndentLength","indentWidth","typicalFullwidthCharacterWidth","renderLineContent","substr","renderLine","html","build","trustedhtml","innerHTML","wordWrap","createRange","lineDomNodes","prototype","children","breakOffsets","readLineBreaks","visibleColumns","breakOffsetsVisibleColumn","curInjectedTexts","createLineBreaks","initialVisibleColumn","wrappingIndentLength","hangingOffset","appendASCIIString","charOffset","charOffsets","nextCharCode","producedCharacters","space","write1","appendASCII","lineDomNode","spans","discoverBreaks","err","log","low","lowRects","high","highRects","readClientRect","mid","midRects","setStart","firstChild","setEnd","getClientRects","_readConfig","_lastCursorModelPosition","_lastCursorViewPosition","_activeLineNumber","lineNumbers","_renderLineNumbers","renderType","_renderCustomLineNumbers","renderFn","_renderFinalNewline","_lineNumbersLeft","lineNumbersLeft","_lineNumbersWidth","lineNumbersWidth","primaryViewPosition","viewLineNumber","lineHeightClassName","CLASS_NAME","relativeLineNumbers","isWrappedLine","getLineLength","renderLineNumber","relativeLineNumber","_getLineRenderLineNumber","editorLineNumbers","activeLineNumber","editorActiveLineNumber","RangeUtil","_handyReadyRange","endNode","selectNodeContents","startElement","endElement","_createRange","_detachRange","FloatHorizontalRange","prev","clientRects","clientRectDeltaLeft","clientRectScale","_mergeAdjacentRanges","startChildIndex","endChildIndex","_createHorizontalRangesFromClientRects","_readClientRects","canUseFastRenderedViewLine","browser","isFirefox","isSafari","_clientRectDeltaLeft","_clientRectScale","_clientRectRead","rect","renderWhitespace","renderControlCharacters","middotWidth","wsmiddotWidth","useMonospaceOptimizations","isMonospace","canUseHalfwidthRightwardsArrow","stopRenderingLineAfter","fontLigatures","_options","_isMaybeInvalid","_renderedViewLine","newOptions","getViewLineRenderingData","actualInlineDecorations","LineDecoration","inlineDecorations","maxColumn","selectionsOnLine","LineRange","renderLineInput","RenderLineInput","continuesWithWrappedLine","isBasicASCII","containsRTL","startVisibleColumn","EditorFontLigatures","renderViewLine","renderedViewLine","containsForeignElements","lineTokens","FastRenderedViewLine","characterMapping","createRenderedLine","toSlowRenderedLine","horizontalRanges","VisibleRanges","_characterMapping","_charWidth","_getCharPosition","expectedWidth","actualWidth","startPosition","endPosition","horizontalOffset","getHorizontalOffset","spanNodeTextContentLength","spanIndex","previousSibling","getColumn","DomPosition","RenderedViewLine","_isWhitespaceOnly","test","_containsForeignElements","_cachedWidth","_pixelOffsetCache","Float32Array","myDomNode","_getReadingTarget","_readPixelOffset","_readVisibleRangesForRange","pixelOffset","_readRawVisibleRangesForRange","readingTarget","cachedPixelOffset","_actualReadPixelOffset","readHorizontalRanges","domPosition","getDomPosition","partIndex","expectedResult","startDomPosition","endDomPosition","WebKitRenderedViewLine","endPixelOffset","lastRange","isWebKit","createWebKitRenderedLine","createNormalRenderedLine","OUTER_CLASS_NAME","_glyphMarginBackgroundDomNode"],"sourceRoot":""}