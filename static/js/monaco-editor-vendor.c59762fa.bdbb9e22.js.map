{"version":3,"file":"static/js/monaco-editor-vendor.c59762fa.bdbb9e22.js","mappings":"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","sources":["../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/prefixSumComputer.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/textModelTokens.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/tokenizationTextModelPart.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/textModelPart.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/textModelSearch.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/editor/common/model/utils.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { splitLines } from '../../../base/common/strings.js';\nimport { Position } from '../core/position.js';\nimport { PrefixSumComputer } from './prefixSumComputer.js';\nexport class MirrorTextModel {\n    constructor(uri, lines, eol, versionId) {\n        this._uri = uri;\n        this._lines = lines;\n        this._eol = eol;\n        this._versionId = versionId;\n        this._lineStarts = null;\n        this._cachedTextValue = null;\n    }\n    dispose() {\n        this._lines.length = 0;\n    }\n    get version() {\n        return this._versionId;\n    }\n    getText() {\n        if (this._cachedTextValue === null) {\n            this._cachedTextValue = this._lines.join(this._eol);\n        }\n        return this._cachedTextValue;\n    }\n    onEvents(e) {\n        if (e.eol && e.eol !== this._eol) {\n            this._eol = e.eol;\n            this._lineStarts = null;\n        }\n        // Update my lines\n        const changes = e.changes;\n        for (const change of changes) {\n            this._acceptDeleteRange(change.range);\n            this._acceptInsertText(new Position(change.range.startLineNumber, change.range.startColumn), change.text);\n        }\n        this._versionId = e.versionId;\n        this._cachedTextValue = null;\n    }\n    _ensureLineStarts() {\n        if (!this._lineStarts) {\n            const eolLength = this._eol.length;\n            const linesLength = this._lines.length;\n            const lineStartValues = new Uint32Array(linesLength);\n            for (let i = 0; i < linesLength; i++) {\n                lineStartValues[i] = this._lines[i].length + eolLength;\n            }\n            this._lineStarts = new PrefixSumComputer(lineStartValues);\n        }\n    }\n    /**\n     * All changes to a line's text go through this method\n     */\n    _setLineText(lineIndex, newValue) {\n        this._lines[lineIndex] = newValue;\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.setValue(lineIndex, this._lines[lineIndex].length + this._eol.length);\n        }\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber) {\n            if (range.startColumn === range.endColumn) {\n                // Nothing to delete\n                return;\n            }\n            // Delete text on the affected line\n            this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n                + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));\n            return;\n        }\n        // Take remaining text on last line and append it to remaining text on first line\n        this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n            + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1));\n        // Delete middle lines\n        this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        }\n    }\n    _acceptInsertText(position, insertText) {\n        if (insertText.length === 0) {\n            // Nothing to insert\n            return;\n        }\n        const insertLines = splitLines(insertText);\n        if (insertLines.length === 1) {\n            // Inserting text on one line\n            this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n                + insertLines[0]\n                + this._lines[position.lineNumber - 1].substring(position.column - 1));\n            return;\n        }\n        // Append overflowing text from first line to the end of text to insert\n        insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1);\n        // Delete overflowing text from first line and insert text on first line\n        this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n            + insertLines[0]);\n        // Insert new lines & store lengths\n        const newLengths = new Uint32Array(insertLines.length - 1);\n        for (let i = 1; i < insertLines.length; i++) {\n            this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);\n            newLengths[i - 1] = insertLines[i].length + this._eol.length;\n        }\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.insertValues(position.lineNumber, newLengths);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { arrayInsert } from '../../../base/common/arrays.js';\nimport { toUint32 } from '../../../base/common/uint.js';\nexport class PrefixSumComputer {\n    constructor(values) {\n        this.values = values;\n        this.prefixSum = new Uint32Array(values.length);\n        this.prefixSumValidIndex = new Int32Array(1);\n        this.prefixSumValidIndex[0] = -1;\n    }\n    insertValues(insertIndex, insertValues) {\n        insertIndex = toUint32(insertIndex);\n        const oldValues = this.values;\n        const oldPrefixSum = this.prefixSum;\n        const insertValuesLen = insertValues.length;\n        if (insertValuesLen === 0) {\n            return false;\n        }\n        this.values = new Uint32Array(oldValues.length + insertValuesLen);\n        this.values.set(oldValues.subarray(0, insertIndex), 0);\n        this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\n        this.values.set(insertValues, insertIndex);\n        if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = insertIndex - 1;\n        }\n        this.prefixSum = new Uint32Array(this.values.length);\n        if (this.prefixSumValidIndex[0] >= 0) {\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n        }\n        return true;\n    }\n    setValue(index, value) {\n        index = toUint32(index);\n        value = toUint32(value);\n        if (this.values[index] === value) {\n            return false;\n        }\n        this.values[index] = value;\n        if (index - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = index - 1;\n        }\n        return true;\n    }\n    removeValues(startIndex, count) {\n        startIndex = toUint32(startIndex);\n        count = toUint32(count);\n        const oldValues = this.values;\n        const oldPrefixSum = this.prefixSum;\n        if (startIndex >= oldValues.length) {\n            return false;\n        }\n        const maxCount = oldValues.length - startIndex;\n        if (count >= maxCount) {\n            count = maxCount;\n        }\n        if (count === 0) {\n            return false;\n        }\n        this.values = new Uint32Array(oldValues.length - count);\n        this.values.set(oldValues.subarray(0, startIndex), 0);\n        this.values.set(oldValues.subarray(startIndex + count), startIndex);\n        this.prefixSum = new Uint32Array(this.values.length);\n        if (startIndex - 1 < this.prefixSumValidIndex[0]) {\n            this.prefixSumValidIndex[0] = startIndex - 1;\n        }\n        if (this.prefixSumValidIndex[0] >= 0) {\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\n        }\n        return true;\n    }\n    getTotalSum() {\n        if (this.values.length === 0) {\n            return 0;\n        }\n        return this._getPrefixSum(this.values.length - 1);\n    }\n    /**\n     * Returns the sum of the first `index + 1` many items.\n     * @returns `SUM(0 <= j <= index, values[j])`.\n     */\n    getPrefixSum(index) {\n        if (index < 0) {\n            return 0;\n        }\n        index = toUint32(index);\n        return this._getPrefixSum(index);\n    }\n    _getPrefixSum(index) {\n        if (index <= this.prefixSumValidIndex[0]) {\n            return this.prefixSum[index];\n        }\n        let startIndex = this.prefixSumValidIndex[0] + 1;\n        if (startIndex === 0) {\n            this.prefixSum[0] = this.values[0];\n            startIndex++;\n        }\n        if (index >= this.values.length) {\n            index = this.values.length - 1;\n        }\n        for (let i = startIndex; i <= index; i++) {\n            this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\n        }\n        this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\n        return this.prefixSum[index];\n    }\n    getIndexOf(sum) {\n        sum = Math.floor(sum);\n        // Compute all sums (to get a fully valid prefixSum)\n        this.getTotalSum();\n        let low = 0;\n        let high = this.values.length - 1;\n        let mid = 0;\n        let midStop = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            midStop = this.prefixSum[mid];\n            midStart = midStop - this.values[mid];\n            if (sum < midStart) {\n                high = mid - 1;\n            }\n            else if (sum >= midStop) {\n                low = mid + 1;\n            }\n            else {\n                break;\n            }\n        }\n        return new PrefixSumIndexOfResult(mid, sum - midStart);\n    }\n}\n/**\n * {@link getIndexOf} has an amortized runtime complexity of O(1).\n *\n * ({@link PrefixSumComputer.getIndexOf} is just  O(log n))\n*/\nexport class ConstantTimePrefixSumComputer {\n    constructor(values) {\n        this._values = values;\n        this._isValid = false;\n        this._validEndIndex = -1;\n        this._prefixSum = [];\n        this._indexBySum = [];\n    }\n    /**\n     * @returns SUM(0 <= j < values.length, values[j])\n     */\n    getTotalSum() {\n        this._ensureValid();\n        return this._indexBySum.length;\n    }\n    /**\n     * Returns the sum of the first `count` many items.\n     * @returns `SUM(0 <= j < count, values[j])`.\n     */\n    getPrefixSum(count) {\n        this._ensureValid();\n        if (count === 0) {\n            return 0;\n        }\n        return this._prefixSum[count - 1];\n    }\n    /**\n     * @returns `result`, such that `getPrefixSum(result.index) + result.remainder = sum`\n     */\n    getIndexOf(sum) {\n        this._ensureValid();\n        const idx = this._indexBySum[sum];\n        const viewLinesAbove = idx > 0 ? this._prefixSum[idx - 1] : 0;\n        return new PrefixSumIndexOfResult(idx, sum - viewLinesAbove);\n    }\n    removeValues(start, deleteCount) {\n        this._values.splice(start, deleteCount);\n        this._invalidate(start);\n    }\n    insertValues(insertIndex, insertArr) {\n        this._values = arrayInsert(this._values, insertIndex, insertArr);\n        this._invalidate(insertIndex);\n    }\n    _invalidate(index) {\n        this._isValid = false;\n        this._validEndIndex = Math.min(this._validEndIndex, index - 1);\n    }\n    _ensureValid() {\n        if (this._isValid) {\n            return;\n        }\n        for (let i = this._validEndIndex + 1, len = this._values.length; i < len; i++) {\n            const value = this._values[i];\n            const sumAbove = i > 0 ? this._prefixSum[i - 1] : 0;\n            this._prefixSum[i] = sumAbove + value;\n            for (let j = 0; j < value; j++) {\n                this._indexBySum[sumAbove + j] = i;\n            }\n        }\n        // trim things\n        this._prefixSum.length = this._values.length;\n        this._indexBySum.length = this._prefixSum[this._prefixSum.length - 1];\n        // mark as valid\n        this._isValid = true;\n        this._validEndIndex = this._values.length - 1;\n    }\n    setValue(index, value) {\n        if (this._values[index] === value) {\n            // no change\n            return;\n        }\n        this._values[index] = value;\n        this._invalidate(index);\n    }\n}\nexport class PrefixSumIndexOfResult {\n    constructor(index, remainder) {\n        this.index = index;\n        this.remainder = remainder;\n        this._prefixSumIndexOfResultBrand = undefined;\n        this.index = index;\n        this.remainder = remainder;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class TreeNode {\n    constructor(piece, color) {\n        this.piece = piece;\n        this.color = color;\n        this.size_left = 0;\n        this.lf_left = 0;\n        this.parent = this;\n        this.left = this;\n        this.right = this;\n    }\n    next() {\n        if (this.right !== SENTINEL) {\n            return leftest(this.right);\n        }\n        let node = this;\n        while (node.parent !== SENTINEL) {\n            if (node.parent.left === node) {\n                break;\n            }\n            node = node.parent;\n        }\n        if (node.parent === SENTINEL) {\n            return SENTINEL;\n        }\n        else {\n            return node.parent;\n        }\n    }\n    prev() {\n        if (this.left !== SENTINEL) {\n            return righttest(this.left);\n        }\n        let node = this;\n        while (node.parent !== SENTINEL) {\n            if (node.parent.right === node) {\n                break;\n            }\n            node = node.parent;\n        }\n        if (node.parent === SENTINEL) {\n            return SENTINEL;\n        }\n        else {\n            return node.parent;\n        }\n    }\n    detach() {\n        this.parent = null;\n        this.left = null;\n        this.right = null;\n    }\n}\nexport const SENTINEL = new TreeNode(null, 0 /* NodeColor.Black */);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nSENTINEL.color = 0 /* NodeColor.Black */;\nexport function leftest(node) {\n    while (node.left !== SENTINEL) {\n        node = node.left;\n    }\n    return node;\n}\nexport function righttest(node) {\n    while (node.right !== SENTINEL) {\n        node = node.right;\n    }\n    return node;\n}\nfunction calculateSize(node) {\n    if (node === SENTINEL) {\n        return 0;\n    }\n    return node.size_left + node.piece.length + calculateSize(node.right);\n}\nfunction calculateLF(node) {\n    if (node === SENTINEL) {\n        return 0;\n    }\n    return node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\n}\nfunction resetSentinel() {\n    SENTINEL.parent = SENTINEL;\n}\nexport function leftRotate(tree, x) {\n    const y = x.right;\n    // fix size_left\n    y.size_left += x.size_left + (x.piece ? x.piece.length : 0);\n    y.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n    x.right = y.left;\n    if (y.left !== SENTINEL) {\n        y.left.parent = x;\n    }\n    y.parent = x.parent;\n    if (x.parent === SENTINEL) {\n        tree.root = y;\n    }\n    else if (x.parent.left === x) {\n        x.parent.left = y;\n    }\n    else {\n        x.parent.right = y;\n    }\n    y.left = x;\n    x.parent = y;\n}\nexport function rightRotate(tree, y) {\n    const x = y.left;\n    y.left = x.right;\n    if (x.right !== SENTINEL) {\n        x.right.parent = y;\n    }\n    x.parent = y.parent;\n    // fix size_left\n    y.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\n    y.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n    if (y.parent === SENTINEL) {\n        tree.root = x;\n    }\n    else if (y === y.parent.right) {\n        y.parent.right = x;\n    }\n    else {\n        y.parent.left = x;\n    }\n    x.right = y;\n    y.parent = x;\n}\nexport function rbDelete(tree, z) {\n    let x;\n    let y;\n    if (z.left === SENTINEL) {\n        y = z;\n        x = y.right;\n    }\n    else if (z.right === SENTINEL) {\n        y = z;\n        x = y.left;\n    }\n    else {\n        y = leftest(z.right);\n        x = y.right;\n    }\n    if (y === tree.root) {\n        tree.root = x;\n        // if x is null, we are removing the only node\n        x.color = 0 /* NodeColor.Black */;\n        z.detach();\n        resetSentinel();\n        tree.root.parent = SENTINEL;\n        return;\n    }\n    const yWasRed = (y.color === 1 /* NodeColor.Red */);\n    if (y === y.parent.left) {\n        y.parent.left = x;\n    }\n    else {\n        y.parent.right = x;\n    }\n    if (y === z) {\n        x.parent = y.parent;\n        recomputeTreeMetadata(tree, x);\n    }\n    else {\n        if (y.parent === z) {\n            x.parent = y;\n        }\n        else {\n            x.parent = y.parent;\n        }\n        // as we make changes to x's hierarchy, update size_left of subtree first\n        recomputeTreeMetadata(tree, x);\n        y.left = z.left;\n        y.right = z.right;\n        y.parent = z.parent;\n        y.color = z.color;\n        if (z === tree.root) {\n            tree.root = y;\n        }\n        else {\n            if (z === z.parent.left) {\n                z.parent.left = y;\n            }\n            else {\n                z.parent.right = y;\n            }\n        }\n        if (y.left !== SENTINEL) {\n            y.left.parent = y;\n        }\n        if (y.right !== SENTINEL) {\n            y.right.parent = y;\n        }\n        // update metadata\n        // we replace z with y, so in this sub tree, the length change is z.item.length\n        y.size_left = z.size_left;\n        y.lf_left = z.lf_left;\n        recomputeTreeMetadata(tree, y);\n    }\n    z.detach();\n    if (x.parent.left === x) {\n        const newSizeLeft = calculateSize(x);\n        const newLFLeft = calculateLF(x);\n        if (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {\n            const delta = newSizeLeft - x.parent.size_left;\n            const lf_delta = newLFLeft - x.parent.lf_left;\n            x.parent.size_left = newSizeLeft;\n            x.parent.lf_left = newLFLeft;\n            updateTreeMetadata(tree, x.parent, delta, lf_delta);\n        }\n    }\n    recomputeTreeMetadata(tree, x.parent);\n    if (yWasRed) {\n        resetSentinel();\n        return;\n    }\n    // RB-DELETE-FIXUP\n    let w;\n    while (x !== tree.root && x.color === 0 /* NodeColor.Black */) {\n        if (x === x.parent.left) {\n            w = x.parent.right;\n            if (w.color === 1 /* NodeColor.Red */) {\n                w.color = 0 /* NodeColor.Black */;\n                x.parent.color = 1 /* NodeColor.Red */;\n                leftRotate(tree, x.parent);\n                w = x.parent.right;\n            }\n            if (w.left.color === 0 /* NodeColor.Black */ && w.right.color === 0 /* NodeColor.Black */) {\n                w.color = 1 /* NodeColor.Red */;\n                x = x.parent;\n            }\n            else {\n                if (w.right.color === 0 /* NodeColor.Black */) {\n                    w.left.color = 0 /* NodeColor.Black */;\n                    w.color = 1 /* NodeColor.Red */;\n                    rightRotate(tree, w);\n                    w = x.parent.right;\n                }\n                w.color = x.parent.color;\n                x.parent.color = 0 /* NodeColor.Black */;\n                w.right.color = 0 /* NodeColor.Black */;\n                leftRotate(tree, x.parent);\n                x = tree.root;\n            }\n        }\n        else {\n            w = x.parent.left;\n            if (w.color === 1 /* NodeColor.Red */) {\n                w.color = 0 /* NodeColor.Black */;\n                x.parent.color = 1 /* NodeColor.Red */;\n                rightRotate(tree, x.parent);\n                w = x.parent.left;\n            }\n            if (w.left.color === 0 /* NodeColor.Black */ && w.right.color === 0 /* NodeColor.Black */) {\n                w.color = 1 /* NodeColor.Red */;\n                x = x.parent;\n            }\n            else {\n                if (w.left.color === 0 /* NodeColor.Black */) {\n                    w.right.color = 0 /* NodeColor.Black */;\n                    w.color = 1 /* NodeColor.Red */;\n                    leftRotate(tree, w);\n                    w = x.parent.left;\n                }\n                w.color = x.parent.color;\n                x.parent.color = 0 /* NodeColor.Black */;\n                w.left.color = 0 /* NodeColor.Black */;\n                rightRotate(tree, x.parent);\n                x = tree.root;\n            }\n        }\n    }\n    x.color = 0 /* NodeColor.Black */;\n    resetSentinel();\n}\nexport function fixInsert(tree, x) {\n    recomputeTreeMetadata(tree, x);\n    while (x !== tree.root && x.parent.color === 1 /* NodeColor.Red */) {\n        if (x.parent === x.parent.parent.left) {\n            const y = x.parent.parent.right;\n            if (y.color === 1 /* NodeColor.Red */) {\n                x.parent.color = 0 /* NodeColor.Black */;\n                y.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.right) {\n                    x = x.parent;\n                    leftRotate(tree, x);\n                }\n                x.parent.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                rightRotate(tree, x.parent.parent);\n            }\n        }\n        else {\n            const y = x.parent.parent.left;\n            if (y.color === 1 /* NodeColor.Red */) {\n                x.parent.color = 0 /* NodeColor.Black */;\n                y.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.left) {\n                    x = x.parent;\n                    rightRotate(tree, x);\n                }\n                x.parent.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                leftRotate(tree, x.parent.parent);\n            }\n        }\n    }\n    tree.root.color = 0 /* NodeColor.Black */;\n}\nexport function updateTreeMetadata(tree, x, delta, lineFeedCntDelta) {\n    // node length change or line feed count change\n    while (x !== tree.root && x !== SENTINEL) {\n        if (x.parent.left === x) {\n            x.parent.size_left += delta;\n            x.parent.lf_left += lineFeedCntDelta;\n        }\n        x = x.parent;\n    }\n}\nexport function recomputeTreeMetadata(tree, x) {\n    let delta = 0;\n    let lf_delta = 0;\n    if (x === tree.root) {\n        return;\n    }\n    // go upwards till the node whose left subtree is changed.\n    while (x !== tree.root && x === x.parent.right) {\n        x = x.parent;\n    }\n    if (x === tree.root) {\n        // well, it means we add a node to the end (inorder)\n        return;\n    }\n    // x is the node whose right subtree is changed.\n    x = x.parent;\n    delta = calculateSize(x.left) - x.size_left;\n    lf_delta = calculateLF(x.left) - x.lf_left;\n    x.size_left += delta;\n    x.lf_left += lf_delta;\n    // go upwards till root. O(logN)\n    while (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\n        if (x.parent.left === x) {\n            x.parent.size_left += delta;\n            x.parent.lf_left += lf_delta;\n        }\n        x = x.parent;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../../core/position.js';\nimport { Range } from '../../core/range.js';\nimport { FindMatch } from '../../model.js';\nimport { SENTINEL, TreeNode, fixInsert, leftest, rbDelete, righttest, updateTreeMetadata } from './rbTreeBase.js';\nimport { Searcher, createFindMatch, isValidMatch } from '../textModelSearch.js';\n// const lfRegex = new RegExp(/\\r\\n|\\r|\\n/g);\nconst AverageBufferSize = 65535;\nfunction createUintArray(arr) {\n    let r;\n    if (arr[arr.length - 1] < 65536) {\n        r = new Uint16Array(arr.length);\n    }\n    else {\n        r = new Uint32Array(arr.length);\n    }\n    r.set(arr, 0);\n    return r;\n}\nclass LineStarts {\n    constructor(lineStarts, cr, lf, crlf, isBasicASCII) {\n        this.lineStarts = lineStarts;\n        this.cr = cr;\n        this.lf = lf;\n        this.crlf = crlf;\n        this.isBasicASCII = isBasicASCII;\n    }\n}\nexport function createLineStartsFast(str, readonly = true) {\n    const r = [0];\n    let rLength = 1;\n    for (let i = 0, len = str.length; i < len; i++) {\n        const chr = str.charCodeAt(i);\n        if (chr === 13 /* CharCode.CarriageReturn */) {\n            if (i + 1 < len && str.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                // \\r\\n... case\n                r[rLength++] = i + 2;\n                i++; // skip \\n\n            }\n            else {\n                // \\r... case\n                r[rLength++] = i + 1;\n            }\n        }\n        else if (chr === 10 /* CharCode.LineFeed */) {\n            r[rLength++] = i + 1;\n        }\n    }\n    if (readonly) {\n        return createUintArray(r);\n    }\n    else {\n        return r;\n    }\n}\nexport function createLineStarts(r, str) {\n    r.length = 0;\n    r[0] = 0;\n    let rLength = 1;\n    let cr = 0, lf = 0, crlf = 0;\n    let isBasicASCII = true;\n    for (let i = 0, len = str.length; i < len; i++) {\n        const chr = str.charCodeAt(i);\n        if (chr === 13 /* CharCode.CarriageReturn */) {\n            if (i + 1 < len && str.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                // \\r\\n... case\n                crlf++;\n                r[rLength++] = i + 2;\n                i++; // skip \\n\n            }\n            else {\n                cr++;\n                // \\r... case\n                r[rLength++] = i + 1;\n            }\n        }\n        else if (chr === 10 /* CharCode.LineFeed */) {\n            lf++;\n            r[rLength++] = i + 1;\n        }\n        else {\n            if (isBasicASCII) {\n                if (chr !== 9 /* CharCode.Tab */ && (chr < 32 || chr > 126)) {\n                    isBasicASCII = false;\n                }\n            }\n        }\n    }\n    const result = new LineStarts(createUintArray(r), cr, lf, crlf, isBasicASCII);\n    r.length = 0;\n    return result;\n}\nexport class Piece {\n    constructor(bufferIndex, start, end, lineFeedCnt, length) {\n        this.bufferIndex = bufferIndex;\n        this.start = start;\n        this.end = end;\n        this.lineFeedCnt = lineFeedCnt;\n        this.length = length;\n    }\n}\nexport class StringBuffer {\n    constructor(buffer, lineStarts) {\n        this.buffer = buffer;\n        this.lineStarts = lineStarts;\n    }\n}\n/**\n * Readonly snapshot for piece tree.\n * In a real multiple thread environment, to make snapshot reading always work correctly, we need to\n * 1. Make TreeNode.piece immutable, then reading and writing can run in parallel.\n * 2. TreeNode/Buffers normalization should not happen during snapshot reading.\n */\nclass PieceTreeSnapshot {\n    constructor(tree, BOM) {\n        this._pieces = [];\n        this._tree = tree;\n        this._BOM = BOM;\n        this._index = 0;\n        if (tree.root !== SENTINEL) {\n            tree.iterate(tree.root, node => {\n                if (node !== SENTINEL) {\n                    this._pieces.push(node.piece);\n                }\n                return true;\n            });\n        }\n    }\n    read() {\n        if (this._pieces.length === 0) {\n            if (this._index === 0) {\n                this._index++;\n                return this._BOM;\n            }\n            else {\n                return null;\n            }\n        }\n        if (this._index > this._pieces.length - 1) {\n            return null;\n        }\n        if (this._index === 0) {\n            return this._BOM + this._tree.getPieceContent(this._pieces[this._index++]);\n        }\n        return this._tree.getPieceContent(this._pieces[this._index++]);\n    }\n}\nclass PieceTreeSearchCache {\n    constructor(limit) {\n        this._limit = limit;\n        this._cache = [];\n    }\n    get(offset) {\n        for (let i = this._cache.length - 1; i >= 0; i--) {\n            const nodePos = this._cache[i];\n            if (nodePos.nodeStartOffset <= offset && nodePos.nodeStartOffset + nodePos.node.piece.length >= offset) {\n                return nodePos;\n            }\n        }\n        return null;\n    }\n    get2(lineNumber) {\n        for (let i = this._cache.length - 1; i >= 0; i--) {\n            const nodePos = this._cache[i];\n            if (nodePos.nodeStartLineNumber && nodePos.nodeStartLineNumber < lineNumber && nodePos.nodeStartLineNumber + nodePos.node.piece.lineFeedCnt >= lineNumber) {\n                return nodePos;\n            }\n        }\n        return null;\n    }\n    set(nodePosition) {\n        if (this._cache.length >= this._limit) {\n            this._cache.shift();\n        }\n        this._cache.push(nodePosition);\n    }\n    validate(offset) {\n        let hasInvalidVal = false;\n        const tmp = this._cache;\n        for (let i = 0; i < tmp.length; i++) {\n            const nodePos = tmp[i];\n            if (nodePos.node.parent === null || nodePos.nodeStartOffset >= offset) {\n                tmp[i] = null;\n                hasInvalidVal = true;\n                continue;\n            }\n        }\n        if (hasInvalidVal) {\n            const newArr = [];\n            for (const entry of tmp) {\n                if (entry !== null) {\n                    newArr.push(entry);\n                }\n            }\n            this._cache = newArr;\n        }\n    }\n}\nexport class PieceTreeBase {\n    constructor(chunks, eol, eolNormalized) {\n        this.create(chunks, eol, eolNormalized);\n    }\n    create(chunks, eol, eolNormalized) {\n        this._buffers = [\n            new StringBuffer('', [0])\n        ];\n        this._lastChangeBufferPos = { line: 0, column: 0 };\n        this.root = SENTINEL;\n        this._lineCnt = 1;\n        this._length = 0;\n        this._EOL = eol;\n        this._EOLLength = eol.length;\n        this._EOLNormalized = eolNormalized;\n        let lastNode = null;\n        for (let i = 0, len = chunks.length; i < len; i++) {\n            if (chunks[i].buffer.length > 0) {\n                if (!chunks[i].lineStarts) {\n                    chunks[i].lineStarts = createLineStartsFast(chunks[i].buffer);\n                }\n                const piece = new Piece(i + 1, { line: 0, column: 0 }, { line: chunks[i].lineStarts.length - 1, column: chunks[i].buffer.length - chunks[i].lineStarts[chunks[i].lineStarts.length - 1] }, chunks[i].lineStarts.length - 1, chunks[i].buffer.length);\n                this._buffers.push(chunks[i]);\n                lastNode = this.rbInsertRight(lastNode, piece);\n            }\n        }\n        this._searchCache = new PieceTreeSearchCache(1);\n        this._lastVisitedLine = { lineNumber: 0, value: '' };\n        this.computeBufferMetadata();\n    }\n    normalizeEOL(eol) {\n        const averageBufferSize = AverageBufferSize;\n        const min = averageBufferSize - Math.floor(averageBufferSize / 3);\n        const max = min * 2;\n        let tempChunk = '';\n        let tempChunkLen = 0;\n        const chunks = [];\n        this.iterate(this.root, node => {\n            const str = this.getNodeContent(node);\n            const len = str.length;\n            if (tempChunkLen <= min || tempChunkLen + len < max) {\n                tempChunk += str;\n                tempChunkLen += len;\n                return true;\n            }\n            // flush anyways\n            const text = tempChunk.replace(/\\r\\n|\\r|\\n/g, eol);\n            chunks.push(new StringBuffer(text, createLineStartsFast(text)));\n            tempChunk = str;\n            tempChunkLen = len;\n            return true;\n        });\n        if (tempChunkLen > 0) {\n            const text = tempChunk.replace(/\\r\\n|\\r|\\n/g, eol);\n            chunks.push(new StringBuffer(text, createLineStartsFast(text)));\n        }\n        this.create(chunks, eol, true);\n    }\n    // #region Buffer API\n    getEOL() {\n        return this._EOL;\n    }\n    setEOL(newEOL) {\n        this._EOL = newEOL;\n        this._EOLLength = this._EOL.length;\n        this.normalizeEOL(newEOL);\n    }\n    createSnapshot(BOM) {\n        return new PieceTreeSnapshot(this, BOM);\n    }\n    getOffsetAt(lineNumber, column) {\n        let leftLen = 0; // inorder\n        let x = this.root;\n        while (x !== SENTINEL) {\n            if (x.left !== SENTINEL && x.lf_left + 1 >= lineNumber) {\n                x = x.left;\n            }\n            else if (x.lf_left + x.piece.lineFeedCnt + 1 >= lineNumber) {\n                leftLen += x.size_left;\n                // lineNumber >= 2\n                const accumualtedValInCurrentIndex = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                return leftLen += accumualtedValInCurrentIndex + column - 1;\n            }\n            else {\n                lineNumber -= x.lf_left + x.piece.lineFeedCnt;\n                leftLen += x.size_left + x.piece.length;\n                x = x.right;\n            }\n        }\n        return leftLen;\n    }\n    getPositionAt(offset) {\n        offset = Math.floor(offset);\n        offset = Math.max(0, offset);\n        let x = this.root;\n        let lfCnt = 0;\n        const originalOffset = offset;\n        while (x !== SENTINEL) {\n            if (x.size_left !== 0 && x.size_left >= offset) {\n                x = x.left;\n            }\n            else if (x.size_left + x.piece.length >= offset) {\n                const out = this.getIndexOf(x, offset - x.size_left);\n                lfCnt += x.lf_left + out.index;\n                if (out.index === 0) {\n                    const lineStartOffset = this.getOffsetAt(lfCnt + 1, 1);\n                    const column = originalOffset - lineStartOffset;\n                    return new Position(lfCnt + 1, column + 1);\n                }\n                return new Position(lfCnt + 1, out.remainder + 1);\n            }\n            else {\n                offset -= x.size_left + x.piece.length;\n                lfCnt += x.lf_left + x.piece.lineFeedCnt;\n                if (x.right === SENTINEL) {\n                    // last node\n                    const lineStartOffset = this.getOffsetAt(lfCnt + 1, 1);\n                    const column = originalOffset - offset - lineStartOffset;\n                    return new Position(lfCnt + 1, column + 1);\n                }\n                else {\n                    x = x.right;\n                }\n            }\n        }\n        return new Position(1, 1);\n    }\n    getValueInRange(range, eol) {\n        if (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n            return '';\n        }\n        const startPosition = this.nodeAt2(range.startLineNumber, range.startColumn);\n        const endPosition = this.nodeAt2(range.endLineNumber, range.endColumn);\n        const value = this.getValueInRange2(startPosition, endPosition);\n        if (eol) {\n            if (eol !== this._EOL || !this._EOLNormalized) {\n                return value.replace(/\\r\\n|\\r|\\n/g, eol);\n            }\n            if (eol === this.getEOL() && this._EOLNormalized) {\n                if (eol === '\\r\\n') {\n                }\n                return value;\n            }\n            return value.replace(/\\r\\n|\\r|\\n/g, eol);\n        }\n        return value;\n    }\n    getValueInRange2(startPosition, endPosition) {\n        if (startPosition.node === endPosition.node) {\n            const node = startPosition.node;\n            const buffer = this._buffers[node.piece.bufferIndex].buffer;\n            const startOffset = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start);\n            return buffer.substring(startOffset + startPosition.remainder, startOffset + endPosition.remainder);\n        }\n        let x = startPosition.node;\n        const buffer = this._buffers[x.piece.bufferIndex].buffer;\n        const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n        let ret = buffer.substring(startOffset + startPosition.remainder, startOffset + x.piece.length);\n        x = x.next();\n        while (x !== SENTINEL) {\n            const buffer = this._buffers[x.piece.bufferIndex].buffer;\n            const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n            if (x === endPosition.node) {\n                ret += buffer.substring(startOffset, startOffset + endPosition.remainder);\n                break;\n            }\n            else {\n                ret += buffer.substr(startOffset, x.piece.length);\n            }\n            x = x.next();\n        }\n        return ret;\n    }\n    getLinesContent() {\n        const lines = [];\n        let linesLength = 0;\n        let currentLine = '';\n        let danglingCR = false;\n        this.iterate(this.root, node => {\n            if (node === SENTINEL) {\n                return true;\n            }\n            const piece = node.piece;\n            let pieceLength = piece.length;\n            if (pieceLength === 0) {\n                return true;\n            }\n            const buffer = this._buffers[piece.bufferIndex].buffer;\n            const lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n            const pieceStartLine = piece.start.line;\n            const pieceEndLine = piece.end.line;\n            let pieceStartOffset = lineStarts[pieceStartLine] + piece.start.column;\n            if (danglingCR) {\n                if (buffer.charCodeAt(pieceStartOffset) === 10 /* CharCode.LineFeed */) {\n                    // pretend the \\n was in the previous piece..\n                    pieceStartOffset++;\n                    pieceLength--;\n                }\n                lines[linesLength++] = currentLine;\n                currentLine = '';\n                danglingCR = false;\n                if (pieceLength === 0) {\n                    return true;\n                }\n            }\n            if (pieceStartLine === pieceEndLine) {\n                // this piece has no new lines\n                if (!this._EOLNormalized && buffer.charCodeAt(pieceStartOffset + pieceLength - 1) === 13 /* CharCode.CarriageReturn */) {\n                    danglingCR = true;\n                    currentLine += buffer.substr(pieceStartOffset, pieceLength - 1);\n                }\n                else {\n                    currentLine += buffer.substr(pieceStartOffset, pieceLength);\n                }\n                return true;\n            }\n            // add the text before the first line start in this piece\n            currentLine += (this._EOLNormalized\n                ? buffer.substring(pieceStartOffset, Math.max(pieceStartOffset, lineStarts[pieceStartLine + 1] - this._EOLLength))\n                : buffer.substring(pieceStartOffset, lineStarts[pieceStartLine + 1]).replace(/(\\r\\n|\\r|\\n)$/, ''));\n            lines[linesLength++] = currentLine;\n            for (let line = pieceStartLine + 1; line < pieceEndLine; line++) {\n                currentLine = (this._EOLNormalized\n                    ? buffer.substring(lineStarts[line], lineStarts[line + 1] - this._EOLLength)\n                    : buffer.substring(lineStarts[line], lineStarts[line + 1]).replace(/(\\r\\n|\\r|\\n)$/, ''));\n                lines[linesLength++] = currentLine;\n            }\n            if (!this._EOLNormalized && buffer.charCodeAt(lineStarts[pieceEndLine] + piece.end.column - 1) === 13 /* CharCode.CarriageReturn */) {\n                danglingCR = true;\n                if (piece.end.column === 0) {\n                    // The last line ended with a \\r, let's undo the push, it will be pushed by next iteration\n                    linesLength--;\n                }\n                else {\n                    currentLine = buffer.substr(lineStarts[pieceEndLine], piece.end.column - 1);\n                }\n            }\n            else {\n                currentLine = buffer.substr(lineStarts[pieceEndLine], piece.end.column);\n            }\n            return true;\n        });\n        if (danglingCR) {\n            lines[linesLength++] = currentLine;\n            currentLine = '';\n        }\n        lines[linesLength++] = currentLine;\n        return lines;\n    }\n    getLength() {\n        return this._length;\n    }\n    getLineCount() {\n        return this._lineCnt;\n    }\n    getLineContent(lineNumber) {\n        if (this._lastVisitedLine.lineNumber === lineNumber) {\n            return this._lastVisitedLine.value;\n        }\n        this._lastVisitedLine.lineNumber = lineNumber;\n        if (lineNumber === this._lineCnt) {\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber);\n        }\n        else if (this._EOLNormalized) {\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber, this._EOLLength);\n        }\n        else {\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber).replace(/(\\r\\n|\\r|\\n)$/, '');\n        }\n        return this._lastVisitedLine.value;\n    }\n    _getCharCode(nodePos) {\n        if (nodePos.remainder === nodePos.node.piece.length) {\n            // the char we want to fetch is at the head of next node.\n            const matchingNode = nodePos.node.next();\n            if (!matchingNode) {\n                return 0;\n            }\n            const buffer = this._buffers[matchingNode.piece.bufferIndex];\n            const startOffset = this.offsetInBuffer(matchingNode.piece.bufferIndex, matchingNode.piece.start);\n            return buffer.buffer.charCodeAt(startOffset);\n        }\n        else {\n            const buffer = this._buffers[nodePos.node.piece.bufferIndex];\n            const startOffset = this.offsetInBuffer(nodePos.node.piece.bufferIndex, nodePos.node.piece.start);\n            const targetOffset = startOffset + nodePos.remainder;\n            return buffer.buffer.charCodeAt(targetOffset);\n        }\n    }\n    getLineCharCode(lineNumber, index) {\n        const nodePos = this.nodeAt2(lineNumber, index + 1);\n        return this._getCharCode(nodePos);\n    }\n    getLineLength(lineNumber) {\n        if (lineNumber === this.getLineCount()) {\n            const startOffset = this.getOffsetAt(lineNumber, 1);\n            return this.getLength() - startOffset;\n        }\n        return this.getOffsetAt(lineNumber + 1, 1) - this.getOffsetAt(lineNumber, 1) - this._EOLLength;\n    }\n    findMatchesInNode(node, searcher, startLineNumber, startColumn, startCursor, endCursor, searchData, captureMatches, limitResultCount, resultLen, result) {\n        const buffer = this._buffers[node.piece.bufferIndex];\n        const startOffsetInBuffer = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start);\n        const start = this.offsetInBuffer(node.piece.bufferIndex, startCursor);\n        const end = this.offsetInBuffer(node.piece.bufferIndex, endCursor);\n        let m;\n        // Reset regex to search from the beginning\n        const ret = { line: 0, column: 0 };\n        let searchText;\n        let offsetInBuffer;\n        if (searcher._wordSeparators) {\n            searchText = buffer.buffer.substring(start, end);\n            offsetInBuffer = (offset) => offset + start;\n            searcher.reset(0);\n        }\n        else {\n            searchText = buffer.buffer;\n            offsetInBuffer = (offset) => offset;\n            searcher.reset(start);\n        }\n        do {\n            m = searcher.next(searchText);\n            if (m) {\n                if (offsetInBuffer(m.index) >= end) {\n                    return resultLen;\n                }\n                this.positionInBuffer(node, offsetInBuffer(m.index) - startOffsetInBuffer, ret);\n                const lineFeedCnt = this.getLineFeedCnt(node.piece.bufferIndex, startCursor, ret);\n                const retStartColumn = ret.line === startCursor.line ? ret.column - startCursor.column + startColumn : ret.column + 1;\n                const retEndColumn = retStartColumn + m[0].length;\n                result[resultLen++] = createFindMatch(new Range(startLineNumber + lineFeedCnt, retStartColumn, startLineNumber + lineFeedCnt, retEndColumn), m, captureMatches);\n                if (offsetInBuffer(m.index) + m[0].length >= end) {\n                    return resultLen;\n                }\n                if (resultLen >= limitResultCount) {\n                    return resultLen;\n                }\n            }\n        } while (m);\n        return resultLen;\n    }\n    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {\n        const result = [];\n        let resultLen = 0;\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        let startPosition = this.nodeAt2(searchRange.startLineNumber, searchRange.startColumn);\n        if (startPosition === null) {\n            return [];\n        }\n        const endPosition = this.nodeAt2(searchRange.endLineNumber, searchRange.endColumn);\n        if (endPosition === null) {\n            return [];\n        }\n        let start = this.positionInBuffer(startPosition.node, startPosition.remainder);\n        const end = this.positionInBuffer(endPosition.node, endPosition.remainder);\n        if (startPosition.node === endPosition.node) {\n            this.findMatchesInNode(startPosition.node, searcher, searchRange.startLineNumber, searchRange.startColumn, start, end, searchData, captureMatches, limitResultCount, resultLen, result);\n            return result;\n        }\n        let startLineNumber = searchRange.startLineNumber;\n        let currentNode = startPosition.node;\n        while (currentNode !== endPosition.node) {\n            const lineBreakCnt = this.getLineFeedCnt(currentNode.piece.bufferIndex, start, currentNode.piece.end);\n            if (lineBreakCnt >= 1) {\n                // last line break position\n                const lineStarts = this._buffers[currentNode.piece.bufferIndex].lineStarts;\n                const startOffsetInBuffer = this.offsetInBuffer(currentNode.piece.bufferIndex, currentNode.piece.start);\n                const nextLineStartOffset = lineStarts[start.line + lineBreakCnt];\n                const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn : 1;\n                resultLen = this.findMatchesInNode(currentNode, searcher, startLineNumber, startColumn, start, this.positionInBuffer(currentNode, nextLineStartOffset - startOffsetInBuffer), searchData, captureMatches, limitResultCount, resultLen, result);\n                if (resultLen >= limitResultCount) {\n                    return result;\n                }\n                startLineNumber += lineBreakCnt;\n            }\n            const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn - 1 : 0;\n            // search for the remaining content\n            if (startLineNumber === searchRange.endLineNumber) {\n                const text = this.getLineContent(startLineNumber).substring(startColumn, searchRange.endColumn - 1);\n                resultLen = this._findMatchesInLine(searchData, searcher, text, searchRange.endLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n                return result;\n            }\n            resultLen = this._findMatchesInLine(searchData, searcher, this.getLineContent(startLineNumber).substr(startColumn), startLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n            if (resultLen >= limitResultCount) {\n                return result;\n            }\n            startLineNumber++;\n            startPosition = this.nodeAt2(startLineNumber, 1);\n            currentNode = startPosition.node;\n            start = this.positionInBuffer(startPosition.node, startPosition.remainder);\n        }\n        if (startLineNumber === searchRange.endLineNumber) {\n            const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn - 1 : 0;\n            const text = this.getLineContent(startLineNumber).substring(startColumn, searchRange.endColumn - 1);\n            resultLen = this._findMatchesInLine(searchData, searcher, text, searchRange.endLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);\n            return result;\n        }\n        const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn : 1;\n        resultLen = this.findMatchesInNode(endPosition.node, searcher, startLineNumber, startColumn, start, end, searchData, captureMatches, limitResultCount, resultLen, result);\n        return result;\n    }\n    _findMatchesInLine(searchData, searcher, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {\n        const wordSeparators = searchData.wordSeparators;\n        if (!captureMatches && searchData.simpleSearch) {\n            const searchString = searchData.simpleSearch;\n            const searchStringLen = searchString.length;\n            const textLength = text.length;\n            let lastMatchIndex = -searchStringLen;\n            while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {\n                if (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {\n                    result[resultLen++] = new FindMatch(new Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);\n                    if (resultLen >= limitResultCount) {\n                        return resultLen;\n                    }\n                }\n            }\n            return resultLen;\n        }\n        let m;\n        // Reset regex to search from the beginning\n        searcher.reset(0);\n        do {\n            m = searcher.next(text);\n            if (m) {\n                result[resultLen++] = createFindMatch(new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);\n                if (resultLen >= limitResultCount) {\n                    return resultLen;\n                }\n            }\n        } while (m);\n        return resultLen;\n    }\n    // #endregion\n    // #region Piece Table\n    insert(offset, value, eolNormalized = false) {\n        this._EOLNormalized = this._EOLNormalized && eolNormalized;\n        this._lastVisitedLine.lineNumber = 0;\n        this._lastVisitedLine.value = '';\n        if (this.root !== SENTINEL) {\n            const { node, remainder, nodeStartOffset } = this.nodeAt(offset);\n            const piece = node.piece;\n            const bufferIndex = piece.bufferIndex;\n            const insertPosInBuffer = this.positionInBuffer(node, remainder);\n            if (node.piece.bufferIndex === 0 &&\n                piece.end.line === this._lastChangeBufferPos.line &&\n                piece.end.column === this._lastChangeBufferPos.column &&\n                (nodeStartOffset + piece.length === offset) &&\n                value.length < AverageBufferSize) {\n                // changed buffer\n                this.appendToNode(node, value);\n                this.computeBufferMetadata();\n                return;\n            }\n            if (nodeStartOffset === offset) {\n                this.insertContentToNodeLeft(value, node);\n                this._searchCache.validate(offset);\n            }\n            else if (nodeStartOffset + node.piece.length > offset) {\n                // we are inserting into the middle of a node.\n                const nodesToDel = [];\n                let newRightPiece = new Piece(piece.bufferIndex, insertPosInBuffer, piece.end, this.getLineFeedCnt(piece.bufferIndex, insertPosInBuffer, piece.end), this.offsetInBuffer(bufferIndex, piece.end) - this.offsetInBuffer(bufferIndex, insertPosInBuffer));\n                if (this.shouldCheckCRLF() && this.endWithCR(value)) {\n                    const headOfRight = this.nodeCharCodeAt(node, remainder);\n                    if (headOfRight === 10 /** \\n */) {\n                        const newStart = { line: newRightPiece.start.line + 1, column: 0 };\n                        newRightPiece = new Piece(newRightPiece.bufferIndex, newStart, newRightPiece.end, this.getLineFeedCnt(newRightPiece.bufferIndex, newStart, newRightPiece.end), newRightPiece.length - 1);\n                        value += '\\n';\n                    }\n                }\n                // reuse node for content before insertion point.\n                if (this.shouldCheckCRLF() && this.startWithLF(value)) {\n                    const tailOfLeft = this.nodeCharCodeAt(node, remainder - 1);\n                    if (tailOfLeft === 13 /** \\r */) {\n                        const previousPos = this.positionInBuffer(node, remainder - 1);\n                        this.deleteNodeTail(node, previousPos);\n                        value = '\\r' + value;\n                        if (node.piece.length === 0) {\n                            nodesToDel.push(node);\n                        }\n                    }\n                    else {\n                        this.deleteNodeTail(node, insertPosInBuffer);\n                    }\n                }\n                else {\n                    this.deleteNodeTail(node, insertPosInBuffer);\n                }\n                const newPieces = this.createNewPieces(value);\n                if (newRightPiece.length > 0) {\n                    this.rbInsertRight(node, newRightPiece);\n                }\n                let tmpNode = node;\n                for (let k = 0; k < newPieces.length; k++) {\n                    tmpNode = this.rbInsertRight(tmpNode, newPieces[k]);\n                }\n                this.deleteNodes(nodesToDel);\n            }\n            else {\n                this.insertContentToNodeRight(value, node);\n            }\n        }\n        else {\n            // insert new node\n            const pieces = this.createNewPieces(value);\n            let node = this.rbInsertLeft(null, pieces[0]);\n            for (let k = 1; k < pieces.length; k++) {\n                node = this.rbInsertRight(node, pieces[k]);\n            }\n        }\n        // todo, this is too brutal. Total line feed count should be updated the same way as lf_left.\n        this.computeBufferMetadata();\n    }\n    delete(offset, cnt) {\n        this._lastVisitedLine.lineNumber = 0;\n        this._lastVisitedLine.value = '';\n        if (cnt <= 0 || this.root === SENTINEL) {\n            return;\n        }\n        const startPosition = this.nodeAt(offset);\n        const endPosition = this.nodeAt(offset + cnt);\n        const startNode = startPosition.node;\n        const endNode = endPosition.node;\n        if (startNode === endNode) {\n            const startSplitPosInBuffer = this.positionInBuffer(startNode, startPosition.remainder);\n            const endSplitPosInBuffer = this.positionInBuffer(startNode, endPosition.remainder);\n            if (startPosition.nodeStartOffset === offset) {\n                if (cnt === startNode.piece.length) { // delete node\n                    const next = startNode.next();\n                    rbDelete(this, startNode);\n                    this.validateCRLFWithPrevNode(next);\n                    this.computeBufferMetadata();\n                    return;\n                }\n                this.deleteNodeHead(startNode, endSplitPosInBuffer);\n                this._searchCache.validate(offset);\n                this.validateCRLFWithPrevNode(startNode);\n                this.computeBufferMetadata();\n                return;\n            }\n            if (startPosition.nodeStartOffset + startNode.piece.length === offset + cnt) {\n                this.deleteNodeTail(startNode, startSplitPosInBuffer);\n                this.validateCRLFWithNextNode(startNode);\n                this.computeBufferMetadata();\n                return;\n            }\n            // delete content in the middle, this node will be splitted to nodes\n            this.shrinkNode(startNode, startSplitPosInBuffer, endSplitPosInBuffer);\n            this.computeBufferMetadata();\n            return;\n        }\n        const nodesToDel = [];\n        const startSplitPosInBuffer = this.positionInBuffer(startNode, startPosition.remainder);\n        this.deleteNodeTail(startNode, startSplitPosInBuffer);\n        this._searchCache.validate(offset);\n        if (startNode.piece.length === 0) {\n            nodesToDel.push(startNode);\n        }\n        // update last touched node\n        const endSplitPosInBuffer = this.positionInBuffer(endNode, endPosition.remainder);\n        this.deleteNodeHead(endNode, endSplitPosInBuffer);\n        if (endNode.piece.length === 0) {\n            nodesToDel.push(endNode);\n        }\n        // delete nodes in between\n        const secondNode = startNode.next();\n        for (let node = secondNode; node !== SENTINEL && node !== endNode; node = node.next()) {\n            nodesToDel.push(node);\n        }\n        const prev = startNode.piece.length === 0 ? startNode.prev() : startNode;\n        this.deleteNodes(nodesToDel);\n        this.validateCRLFWithNextNode(prev);\n        this.computeBufferMetadata();\n    }\n    insertContentToNodeLeft(value, node) {\n        // we are inserting content to the beginning of node\n        const nodesToDel = [];\n        if (this.shouldCheckCRLF() && this.endWithCR(value) && this.startWithLF(node)) {\n            // move `\\n` to new node.\n            const piece = node.piece;\n            const newStart = { line: piece.start.line + 1, column: 0 };\n            const nPiece = new Piece(piece.bufferIndex, newStart, piece.end, this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end), piece.length - 1);\n            node.piece = nPiece;\n            value += '\\n';\n            updateTreeMetadata(this, node, -1, -1);\n            if (node.piece.length === 0) {\n                nodesToDel.push(node);\n            }\n        }\n        const newPieces = this.createNewPieces(value);\n        let newNode = this.rbInsertLeft(node, newPieces[newPieces.length - 1]);\n        for (let k = newPieces.length - 2; k >= 0; k--) {\n            newNode = this.rbInsertLeft(newNode, newPieces[k]);\n        }\n        this.validateCRLFWithPrevNode(newNode);\n        this.deleteNodes(nodesToDel);\n    }\n    insertContentToNodeRight(value, node) {\n        // we are inserting to the right of this node.\n        if (this.adjustCarriageReturnFromNext(value, node)) {\n            // move \\n to the new node.\n            value += '\\n';\n        }\n        const newPieces = this.createNewPieces(value);\n        const newNode = this.rbInsertRight(node, newPieces[0]);\n        let tmpNode = newNode;\n        for (let k = 1; k < newPieces.length; k++) {\n            tmpNode = this.rbInsertRight(tmpNode, newPieces[k]);\n        }\n        this.validateCRLFWithPrevNode(newNode);\n    }\n    positionInBuffer(node, remainder, ret) {\n        const piece = node.piece;\n        const bufferIndex = node.piece.bufferIndex;\n        const lineStarts = this._buffers[bufferIndex].lineStarts;\n        const startOffset = lineStarts[piece.start.line] + piece.start.column;\n        const offset = startOffset + remainder;\n        // binary search offset between startOffset and endOffset\n        let low = piece.start.line;\n        let high = piece.end.line;\n        let mid = 0;\n        let midStop = 0;\n        let midStart = 0;\n        while (low <= high) {\n            mid = low + ((high - low) / 2) | 0;\n            midStart = lineStarts[mid];\n            if (mid === high) {\n                break;\n            }\n            midStop = lineStarts[mid + 1];\n            if (offset < midStart) {\n                high = mid - 1;\n            }\n            else if (offset >= midStop) {\n                low = mid + 1;\n            }\n            else {\n                break;\n            }\n        }\n        if (ret) {\n            ret.line = mid;\n            ret.column = offset - midStart;\n            return null;\n        }\n        return {\n            line: mid,\n            column: offset - midStart\n        };\n    }\n    getLineFeedCnt(bufferIndex, start, end) {\n        // we don't need to worry about start: abc\\r|\\n, or abc|\\r, or abc|\\n, or abc|\\r\\n doesn't change the fact that, there is one line break after start.\n        // now let's take care of end: abc\\r|\\n, if end is in between \\r and \\n, we need to add line feed count by 1\n        if (end.column === 0) {\n            return end.line - start.line;\n        }\n        const lineStarts = this._buffers[bufferIndex].lineStarts;\n        if (end.line === lineStarts.length - 1) { // it means, there is no \\n after end, otherwise, there will be one more lineStart.\n            return end.line - start.line;\n        }\n        const nextLineStartOffset = lineStarts[end.line + 1];\n        const endOffset = lineStarts[end.line] + end.column;\n        if (nextLineStartOffset > endOffset + 1) { // there are more than 1 character after end, which means it can't be \\n\n            return end.line - start.line;\n        }\n        // endOffset + 1 === nextLineStartOffset\n        // character at endOffset is \\n, so we check the character before first\n        // if character at endOffset is \\r, end.column is 0 and we can't get here.\n        const previousCharOffset = endOffset - 1; // end.column > 0 so it's okay.\n        const buffer = this._buffers[bufferIndex].buffer;\n        if (buffer.charCodeAt(previousCharOffset) === 13) {\n            return end.line - start.line + 1;\n        }\n        else {\n            return end.line - start.line;\n        }\n    }\n    offsetInBuffer(bufferIndex, cursor) {\n        const lineStarts = this._buffers[bufferIndex].lineStarts;\n        return lineStarts[cursor.line] + cursor.column;\n    }\n    deleteNodes(nodes) {\n        for (let i = 0; i < nodes.length; i++) {\n            rbDelete(this, nodes[i]);\n        }\n    }\n    createNewPieces(text) {\n        if (text.length > AverageBufferSize) {\n            // the content is large, operations like substring, charCode becomes slow\n            // so here we split it into smaller chunks, just like what we did for CR/LF normalization\n            const newPieces = [];\n            while (text.length > AverageBufferSize) {\n                const lastChar = text.charCodeAt(AverageBufferSize - 1);\n                let splitText;\n                if (lastChar === 13 /* CharCode.CarriageReturn */ || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {\n                    // last character is \\r or a high surrogate => keep it back\n                    splitText = text.substring(0, AverageBufferSize - 1);\n                    text = text.substring(AverageBufferSize - 1);\n                }\n                else {\n                    splitText = text.substring(0, AverageBufferSize);\n                    text = text.substring(AverageBufferSize);\n                }\n                const lineStarts = createLineStartsFast(splitText);\n                newPieces.push(new Piece(this._buffers.length, /* buffer index */ { line: 0, column: 0 }, { line: lineStarts.length - 1, column: splitText.length - lineStarts[lineStarts.length - 1] }, lineStarts.length - 1, splitText.length));\n                this._buffers.push(new StringBuffer(splitText, lineStarts));\n            }\n            const lineStarts = createLineStartsFast(text);\n            newPieces.push(new Piece(this._buffers.length, /* buffer index */ { line: 0, column: 0 }, { line: lineStarts.length - 1, column: text.length - lineStarts[lineStarts.length - 1] }, lineStarts.length - 1, text.length));\n            this._buffers.push(new StringBuffer(text, lineStarts));\n            return newPieces;\n        }\n        let startOffset = this._buffers[0].buffer.length;\n        const lineStarts = createLineStartsFast(text, false);\n        let start = this._lastChangeBufferPos;\n        if (this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 1] === startOffset\n            && startOffset !== 0\n            && this.startWithLF(text)\n            && this.endWithCR(this._buffers[0].buffer) // todo, we can check this._lastChangeBufferPos's column as it's the last one\n        ) {\n            this._lastChangeBufferPos = { line: this._lastChangeBufferPos.line, column: this._lastChangeBufferPos.column + 1 };\n            start = this._lastChangeBufferPos;\n            for (let i = 0; i < lineStarts.length; i++) {\n                lineStarts[i] += startOffset + 1;\n            }\n            this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\n            this._buffers[0].buffer += '_' + text;\n            startOffset += 1;\n        }\n        else {\n            if (startOffset !== 0) {\n                for (let i = 0; i < lineStarts.length; i++) {\n                    lineStarts[i] += startOffset;\n                }\n            }\n            this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\n            this._buffers[0].buffer += text;\n        }\n        const endOffset = this._buffers[0].buffer.length;\n        const endIndex = this._buffers[0].lineStarts.length - 1;\n        const endColumn = endOffset - this._buffers[0].lineStarts[endIndex];\n        const endPos = { line: endIndex, column: endColumn };\n        const newPiece = new Piece(0, /** todo@peng */ start, endPos, this.getLineFeedCnt(0, start, endPos), endOffset - startOffset);\n        this._lastChangeBufferPos = endPos;\n        return [newPiece];\n    }\n    getLineRawContent(lineNumber, endOffset = 0) {\n        let x = this.root;\n        let ret = '';\n        const cache = this._searchCache.get2(lineNumber);\n        if (cache) {\n            x = cache.node;\n            const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - cache.nodeStartLineNumber - 1);\n            const buffer = this._buffers[x.piece.bufferIndex].buffer;\n            const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n            if (cache.nodeStartLineNumber + x.piece.lineFeedCnt === lineNumber) {\n                ret = buffer.substring(startOffset + prevAccumulatedValue, startOffset + x.piece.length);\n            }\n            else {\n                const accumulatedValue = this.getAccumulatedValue(x, lineNumber - cache.nodeStartLineNumber);\n                return buffer.substring(startOffset + prevAccumulatedValue, startOffset + accumulatedValue - endOffset);\n            }\n        }\n        else {\n            let nodeStartOffset = 0;\n            const originalLineNumber = lineNumber;\n            while (x !== SENTINEL) {\n                if (x.left !== SENTINEL && x.lf_left >= lineNumber - 1) {\n                    x = x.left;\n                }\n                else if (x.lf_left + x.piece.lineFeedCnt > lineNumber - 1) {\n                    const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                    const accumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 1);\n                    const buffer = this._buffers[x.piece.bufferIndex].buffer;\n                    const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                    nodeStartOffset += x.size_left;\n                    this._searchCache.set({\n                        node: x,\n                        nodeStartOffset,\n                        nodeStartLineNumber: originalLineNumber - (lineNumber - 1 - x.lf_left)\n                    });\n                    return buffer.substring(startOffset + prevAccumulatedValue, startOffset + accumulatedValue - endOffset);\n                }\n                else if (x.lf_left + x.piece.lineFeedCnt === lineNumber - 1) {\n                    const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                    const buffer = this._buffers[x.piece.bufferIndex].buffer;\n                    const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                    ret = buffer.substring(startOffset + prevAccumulatedValue, startOffset + x.piece.length);\n                    break;\n                }\n                else {\n                    lineNumber -= x.lf_left + x.piece.lineFeedCnt;\n                    nodeStartOffset += x.size_left + x.piece.length;\n                    x = x.right;\n                }\n            }\n        }\n        // search in order, to find the node contains end column\n        x = x.next();\n        while (x !== SENTINEL) {\n            const buffer = this._buffers[x.piece.bufferIndex].buffer;\n            if (x.piece.lineFeedCnt > 0) {\n                const accumulatedValue = this.getAccumulatedValue(x, 0);\n                const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                ret += buffer.substring(startOffset, startOffset + accumulatedValue - endOffset);\n                return ret;\n            }\n            else {\n                const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\n                ret += buffer.substr(startOffset, x.piece.length);\n            }\n            x = x.next();\n        }\n        return ret;\n    }\n    computeBufferMetadata() {\n        let x = this.root;\n        let lfCnt = 1;\n        let len = 0;\n        while (x !== SENTINEL) {\n            lfCnt += x.lf_left + x.piece.lineFeedCnt;\n            len += x.size_left + x.piece.length;\n            x = x.right;\n        }\n        this._lineCnt = lfCnt;\n        this._length = len;\n        this._searchCache.validate(this._length);\n    }\n    // #region node operations\n    getIndexOf(node, accumulatedValue) {\n        const piece = node.piece;\n        const pos = this.positionInBuffer(node, accumulatedValue);\n        const lineCnt = pos.line - piece.start.line;\n        if (this.offsetInBuffer(piece.bufferIndex, piece.end) - this.offsetInBuffer(piece.bufferIndex, piece.start) === accumulatedValue) {\n            // we are checking the end of this node, so a CRLF check is necessary.\n            const realLineCnt = this.getLineFeedCnt(node.piece.bufferIndex, piece.start, pos);\n            if (realLineCnt !== lineCnt) {\n                // aha yes, CRLF\n                return { index: realLineCnt, remainder: 0 };\n            }\n        }\n        return { index: lineCnt, remainder: pos.column };\n    }\n    getAccumulatedValue(node, index) {\n        if (index < 0) {\n            return 0;\n        }\n        const piece = node.piece;\n        const lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n        const expectedLineStartIndex = piece.start.line + index + 1;\n        if (expectedLineStartIndex > piece.end.line) {\n            return lineStarts[piece.end.line] + piece.end.column - lineStarts[piece.start.line] - piece.start.column;\n        }\n        else {\n            return lineStarts[expectedLineStartIndex] - lineStarts[piece.start.line] - piece.start.column;\n        }\n    }\n    deleteNodeTail(node, pos) {\n        const piece = node.piece;\n        const originalLFCnt = piece.lineFeedCnt;\n        const originalEndOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n        const newEnd = pos;\n        const newEndOffset = this.offsetInBuffer(piece.bufferIndex, newEnd);\n        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, piece.start, newEnd);\n        const lf_delta = newLineFeedCnt - originalLFCnt;\n        const size_delta = newEndOffset - originalEndOffset;\n        const newLength = piece.length + size_delta;\n        node.piece = new Piece(piece.bufferIndex, piece.start, newEnd, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, node, size_delta, lf_delta);\n    }\n    deleteNodeHead(node, pos) {\n        const piece = node.piece;\n        const originalLFCnt = piece.lineFeedCnt;\n        const originalStartOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n        const newStart = pos;\n        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end);\n        const newStartOffset = this.offsetInBuffer(piece.bufferIndex, newStart);\n        const lf_delta = newLineFeedCnt - originalLFCnt;\n        const size_delta = originalStartOffset - newStartOffset;\n        const newLength = piece.length + size_delta;\n        node.piece = new Piece(piece.bufferIndex, newStart, piece.end, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, node, size_delta, lf_delta);\n    }\n    shrinkNode(node, start, end) {\n        const piece = node.piece;\n        const originalStartPos = piece.start;\n        const originalEndPos = piece.end;\n        // old piece, originalStartPos, start\n        const oldLength = piece.length;\n        const oldLFCnt = piece.lineFeedCnt;\n        const newEnd = start;\n        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, piece.start, newEnd);\n        const newLength = this.offsetInBuffer(piece.bufferIndex, start) - this.offsetInBuffer(piece.bufferIndex, originalStartPos);\n        node.piece = new Piece(piece.bufferIndex, piece.start, newEnd, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, node, newLength - oldLength, newLineFeedCnt - oldLFCnt);\n        // new right piece, end, originalEndPos\n        const newPiece = new Piece(piece.bufferIndex, end, originalEndPos, this.getLineFeedCnt(piece.bufferIndex, end, originalEndPos), this.offsetInBuffer(piece.bufferIndex, originalEndPos) - this.offsetInBuffer(piece.bufferIndex, end));\n        const newNode = this.rbInsertRight(node, newPiece);\n        this.validateCRLFWithPrevNode(newNode);\n    }\n    appendToNode(node, value) {\n        if (this.adjustCarriageReturnFromNext(value, node)) {\n            value += '\\n';\n        }\n        const hitCRLF = this.shouldCheckCRLF() && this.startWithLF(value) && this.endWithCR(node);\n        const startOffset = this._buffers[0].buffer.length;\n        this._buffers[0].buffer += value;\n        const lineStarts = createLineStartsFast(value, false);\n        for (let i = 0; i < lineStarts.length; i++) {\n            lineStarts[i] += startOffset;\n        }\n        if (hitCRLF) {\n            const prevStartOffset = this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 2];\n            this._buffers[0].lineStarts.pop();\n            // _lastChangeBufferPos is already wrong\n            this._lastChangeBufferPos = { line: this._lastChangeBufferPos.line - 1, column: startOffset - prevStartOffset };\n        }\n        this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\n        const endIndex = this._buffers[0].lineStarts.length - 1;\n        const endColumn = this._buffers[0].buffer.length - this._buffers[0].lineStarts[endIndex];\n        const newEnd = { line: endIndex, column: endColumn };\n        const newLength = node.piece.length + value.length;\n        const oldLineFeedCnt = node.piece.lineFeedCnt;\n        const newLineFeedCnt = this.getLineFeedCnt(0, node.piece.start, newEnd);\n        const lf_delta = newLineFeedCnt - oldLineFeedCnt;\n        node.piece = new Piece(node.piece.bufferIndex, node.piece.start, newEnd, newLineFeedCnt, newLength);\n        this._lastChangeBufferPos = newEnd;\n        updateTreeMetadata(this, node, value.length, lf_delta);\n    }\n    nodeAt(offset) {\n        let x = this.root;\n        const cache = this._searchCache.get(offset);\n        if (cache) {\n            return {\n                node: cache.node,\n                nodeStartOffset: cache.nodeStartOffset,\n                remainder: offset - cache.nodeStartOffset\n            };\n        }\n        let nodeStartOffset = 0;\n        while (x !== SENTINEL) {\n            if (x.size_left > offset) {\n                x = x.left;\n            }\n            else if (x.size_left + x.piece.length >= offset) {\n                nodeStartOffset += x.size_left;\n                const ret = {\n                    node: x,\n                    remainder: offset - x.size_left,\n                    nodeStartOffset\n                };\n                this._searchCache.set(ret);\n                return ret;\n            }\n            else {\n                offset -= x.size_left + x.piece.length;\n                nodeStartOffset += x.size_left + x.piece.length;\n                x = x.right;\n            }\n        }\n        return null;\n    }\n    nodeAt2(lineNumber, column) {\n        let x = this.root;\n        let nodeStartOffset = 0;\n        while (x !== SENTINEL) {\n            if (x.left !== SENTINEL && x.lf_left >= lineNumber - 1) {\n                x = x.left;\n            }\n            else if (x.lf_left + x.piece.lineFeedCnt > lineNumber - 1) {\n                const prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                const accumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 1);\n                nodeStartOffset += x.size_left;\n                return {\n                    node: x,\n                    remainder: Math.min(prevAccumualtedValue + column - 1, accumulatedValue),\n                    nodeStartOffset\n                };\n            }\n            else if (x.lf_left + x.piece.lineFeedCnt === lineNumber - 1) {\n                const prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\n                if (prevAccumualtedValue + column - 1 <= x.piece.length) {\n                    return {\n                        node: x,\n                        remainder: prevAccumualtedValue + column - 1,\n                        nodeStartOffset\n                    };\n                }\n                else {\n                    column -= x.piece.length - prevAccumualtedValue;\n                    break;\n                }\n            }\n            else {\n                lineNumber -= x.lf_left + x.piece.lineFeedCnt;\n                nodeStartOffset += x.size_left + x.piece.length;\n                x = x.right;\n            }\n        }\n        // search in order, to find the node contains position.column\n        x = x.next();\n        while (x !== SENTINEL) {\n            if (x.piece.lineFeedCnt > 0) {\n                const accumulatedValue = this.getAccumulatedValue(x, 0);\n                const nodeStartOffset = this.offsetOfNode(x);\n                return {\n                    node: x,\n                    remainder: Math.min(column - 1, accumulatedValue),\n                    nodeStartOffset\n                };\n            }\n            else {\n                if (x.piece.length >= column - 1) {\n                    const nodeStartOffset = this.offsetOfNode(x);\n                    return {\n                        node: x,\n                        remainder: column - 1,\n                        nodeStartOffset\n                    };\n                }\n                else {\n                    column -= x.piece.length;\n                }\n            }\n            x = x.next();\n        }\n        return null;\n    }\n    nodeCharCodeAt(node, offset) {\n        if (node.piece.lineFeedCnt < 1) {\n            return -1;\n        }\n        const buffer = this._buffers[node.piece.bufferIndex];\n        const newOffset = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start) + offset;\n        return buffer.buffer.charCodeAt(newOffset);\n    }\n    offsetOfNode(node) {\n        if (!node) {\n            return 0;\n        }\n        let pos = node.size_left;\n        while (node !== this.root) {\n            if (node.parent.right === node) {\n                pos += node.parent.size_left + node.parent.piece.length;\n            }\n            node = node.parent;\n        }\n        return pos;\n    }\n    // #endregion\n    // #region CRLF\n    shouldCheckCRLF() {\n        return !(this._EOLNormalized && this._EOL === '\\n');\n    }\n    startWithLF(val) {\n        if (typeof val === 'string') {\n            return val.charCodeAt(0) === 10;\n        }\n        if (val === SENTINEL || val.piece.lineFeedCnt === 0) {\n            return false;\n        }\n        const piece = val.piece;\n        const lineStarts = this._buffers[piece.bufferIndex].lineStarts;\n        const line = piece.start.line;\n        const startOffset = lineStarts[line] + piece.start.column;\n        if (line === lineStarts.length - 1) {\n            // last line, so there is no line feed at the end of this line\n            return false;\n        }\n        const nextLineOffset = lineStarts[line + 1];\n        if (nextLineOffset > startOffset + 1) {\n            return false;\n        }\n        return this._buffers[piece.bufferIndex].buffer.charCodeAt(startOffset) === 10;\n    }\n    endWithCR(val) {\n        if (typeof val === 'string') {\n            return val.charCodeAt(val.length - 1) === 13;\n        }\n        if (val === SENTINEL || val.piece.lineFeedCnt === 0) {\n            return false;\n        }\n        return this.nodeCharCodeAt(val, val.piece.length - 1) === 13;\n    }\n    validateCRLFWithPrevNode(nextNode) {\n        if (this.shouldCheckCRLF() && this.startWithLF(nextNode)) {\n            const node = nextNode.prev();\n            if (this.endWithCR(node)) {\n                this.fixCRLF(node, nextNode);\n            }\n        }\n    }\n    validateCRLFWithNextNode(node) {\n        if (this.shouldCheckCRLF() && this.endWithCR(node)) {\n            const nextNode = node.next();\n            if (this.startWithLF(nextNode)) {\n                this.fixCRLF(node, nextNode);\n            }\n        }\n    }\n    fixCRLF(prev, next) {\n        const nodesToDel = [];\n        // update node\n        const lineStarts = this._buffers[prev.piece.bufferIndex].lineStarts;\n        let newEnd;\n        if (prev.piece.end.column === 0) {\n            // it means, last line ends with \\r, not \\r\\n\n            newEnd = { line: prev.piece.end.line - 1, column: lineStarts[prev.piece.end.line] - lineStarts[prev.piece.end.line - 1] - 1 };\n        }\n        else {\n            // \\r\\n\n            newEnd = { line: prev.piece.end.line, column: prev.piece.end.column - 1 };\n        }\n        const prevNewLength = prev.piece.length - 1;\n        const prevNewLFCnt = prev.piece.lineFeedCnt - 1;\n        prev.piece = new Piece(prev.piece.bufferIndex, prev.piece.start, newEnd, prevNewLFCnt, prevNewLength);\n        updateTreeMetadata(this, prev, -1, -1);\n        if (prev.piece.length === 0) {\n            nodesToDel.push(prev);\n        }\n        // update nextNode\n        const newStart = { line: next.piece.start.line + 1, column: 0 };\n        const newLength = next.piece.length - 1;\n        const newLineFeedCnt = this.getLineFeedCnt(next.piece.bufferIndex, newStart, next.piece.end);\n        next.piece = new Piece(next.piece.bufferIndex, newStart, next.piece.end, newLineFeedCnt, newLength);\n        updateTreeMetadata(this, next, -1, -1);\n        if (next.piece.length === 0) {\n            nodesToDel.push(next);\n        }\n        // create new piece which contains \\r\\n\n        const pieces = this.createNewPieces('\\r\\n');\n        this.rbInsertRight(prev, pieces[0]);\n        // delete empty nodes\n        for (let i = 0; i < nodesToDel.length; i++) {\n            rbDelete(this, nodesToDel[i]);\n        }\n    }\n    adjustCarriageReturnFromNext(value, node) {\n        if (this.shouldCheckCRLF() && this.endWithCR(value)) {\n            const nextNode = node.next();\n            if (this.startWithLF(nextNode)) {\n                // move `\\n` forward\n                value += '\\n';\n                if (nextNode.piece.length === 1) {\n                    rbDelete(this, nextNode);\n                }\n                else {\n                    const piece = nextNode.piece;\n                    const newStart = { line: piece.start.line + 1, column: 0 };\n                    const newLength = piece.length - 1;\n                    const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end);\n                    nextNode.piece = new Piece(piece.bufferIndex, newStart, piece.end, newLineFeedCnt, newLength);\n                    updateTreeMetadata(this, nextNode, -1, -1);\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    // #endregion\n    // #endregion\n    // #region Tree operations\n    iterate(node, callback) {\n        if (node === SENTINEL) {\n            return callback(SENTINEL);\n        }\n        const leftRet = this.iterate(node.left, callback);\n        if (!leftRet) {\n            return leftRet;\n        }\n        return callback(node) && this.iterate(node.right, callback);\n    }\n    getNodeContent(node) {\n        if (node === SENTINEL) {\n            return '';\n        }\n        const buffer = this._buffers[node.piece.bufferIndex];\n        const piece = node.piece;\n        const startOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n        const endOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n        const currentContent = buffer.buffer.substring(startOffset, endOffset);\n        return currentContent;\n    }\n    getPieceContent(piece) {\n        const buffer = this._buffers[piece.bufferIndex];\n        const startOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\n        const endOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\n        const currentContent = buffer.buffer.substring(startOffset, endOffset);\n        return currentContent;\n    }\n    /**\n     *      node              node\n     *     /  \\              /  \\\n     *    a   b    <----   a    b\n     *                         /\n     *                        z\n     */\n    rbInsertRight(node, p) {\n        const z = new TreeNode(p, 1 /* NodeColor.Red */);\n        z.left = SENTINEL;\n        z.right = SENTINEL;\n        z.parent = SENTINEL;\n        z.size_left = 0;\n        z.lf_left = 0;\n        const x = this.root;\n        if (x === SENTINEL) {\n            this.root = z;\n            z.color = 0 /* NodeColor.Black */;\n        }\n        else if (node.right === SENTINEL) {\n            node.right = z;\n            z.parent = node;\n        }\n        else {\n            const nextNode = leftest(node.right);\n            nextNode.left = z;\n            z.parent = nextNode;\n        }\n        fixInsert(this, z);\n        return z;\n    }\n    /**\n     *      node              node\n     *     /  \\              /  \\\n     *    a   b     ---->   a    b\n     *                       \\\n     *                        z\n     */\n    rbInsertLeft(node, p) {\n        const z = new TreeNode(p, 1 /* NodeColor.Red */);\n        z.left = SENTINEL;\n        z.right = SENTINEL;\n        z.parent = SENTINEL;\n        z.size_left = 0;\n        z.lf_left = 0;\n        if (this.root === SENTINEL) {\n            this.root = z;\n            z.color = 0 /* NodeColor.Black */;\n        }\n        else if (node.left === SENTINEL) {\n            node.left = z;\n            z.parent = node;\n        }\n        else {\n            const prevNode = righttest(node.left); // a\n            prevNode.right = z;\n            z.parent = prevNode;\n        }\n        fixInsert(this, z);\n        return z;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../../base/common/event.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { Range } from '../../core/range.js';\nimport { ApplyEditsResult } from '../../model.js';\nimport { PieceTreeBase } from './pieceTreeBase.js';\nimport { countEOL } from '../../core/eolCounter.js';\nimport { TextChange } from '../../core/textChange.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nexport class PieceTreeTextBuffer extends Disposable {\n    constructor(chunks, BOM, eol, containsRTL, containsUnusualLineTerminators, isBasicASCII, eolNormalized) {\n        super();\n        this._onDidChangeContent = this._register(new Emitter());\n        this._BOM = BOM;\n        this._mightContainNonBasicASCII = !isBasicASCII;\n        this._mightContainRTL = containsRTL;\n        this._mightContainUnusualLineTerminators = containsUnusualLineTerminators;\n        this._pieceTree = new PieceTreeBase(chunks, eol, eolNormalized);\n    }\n    mightContainRTL() {\n        return this._mightContainRTL;\n    }\n    mightContainUnusualLineTerminators() {\n        return this._mightContainUnusualLineTerminators;\n    }\n    resetMightContainUnusualLineTerminators() {\n        this._mightContainUnusualLineTerminators = false;\n    }\n    mightContainNonBasicASCII() {\n        return this._mightContainNonBasicASCII;\n    }\n    getBOM() {\n        return this._BOM;\n    }\n    getEOL() {\n        return this._pieceTree.getEOL();\n    }\n    createSnapshot(preserveBOM) {\n        return this._pieceTree.createSnapshot(preserveBOM ? this._BOM : '');\n    }\n    getOffsetAt(lineNumber, column) {\n        return this._pieceTree.getOffsetAt(lineNumber, column);\n    }\n    getPositionAt(offset) {\n        return this._pieceTree.getPositionAt(offset);\n    }\n    getRangeAt(start, length) {\n        const end = start + length;\n        const startPosition = this.getPositionAt(start);\n        const endPosition = this.getPositionAt(end);\n        return new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n    }\n    getValueInRange(range, eol = 0 /* EndOfLinePreference.TextDefined */) {\n        if (range.isEmpty()) {\n            return '';\n        }\n        const lineEnding = this._getEndOfLine(eol);\n        return this._pieceTree.getValueInRange(range, lineEnding);\n    }\n    getValueLengthInRange(range, eol = 0 /* EndOfLinePreference.TextDefined */) {\n        if (range.isEmpty()) {\n            return 0;\n        }\n        if (range.startLineNumber === range.endLineNumber) {\n            return (range.endColumn - range.startColumn);\n        }\n        const startOffset = this.getOffsetAt(range.startLineNumber, range.startColumn);\n        const endOffset = this.getOffsetAt(range.endLineNumber, range.endColumn);\n        // offsets use the text EOL, so we need to compensate for length differences\n        // if the requested EOL doesn't match the text EOL\n        let eolOffsetCompensation = 0;\n        const desiredEOL = this._getEndOfLine(eol);\n        const actualEOL = this.getEOL();\n        if (desiredEOL.length !== actualEOL.length) {\n            const delta = desiredEOL.length - actualEOL.length;\n            const eolCount = range.endLineNumber - range.startLineNumber;\n            eolOffsetCompensation = delta * eolCount;\n        }\n        return endOffset - startOffset + eolOffsetCompensation;\n    }\n    getCharacterCountInRange(range, eol = 0 /* EndOfLinePreference.TextDefined */) {\n        if (this._mightContainNonBasicASCII) {\n            // we must count by iterating\n            let result = 0;\n            const fromLineNumber = range.startLineNumber;\n            const toLineNumber = range.endLineNumber;\n            for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n                const lineContent = this.getLineContent(lineNumber);\n                const fromOffset = (lineNumber === fromLineNumber ? range.startColumn - 1 : 0);\n                const toOffset = (lineNumber === toLineNumber ? range.endColumn - 1 : lineContent.length);\n                for (let offset = fromOffset; offset < toOffset; offset++) {\n                    if (strings.isHighSurrogate(lineContent.charCodeAt(offset))) {\n                        result = result + 1;\n                        offset = offset + 1;\n                    }\n                    else {\n                        result = result + 1;\n                    }\n                }\n            }\n            result += this._getEndOfLine(eol).length * (toLineNumber - fromLineNumber);\n            return result;\n        }\n        return this.getValueLengthInRange(range, eol);\n    }\n    getLength() {\n        return this._pieceTree.getLength();\n    }\n    getLineCount() {\n        return this._pieceTree.getLineCount();\n    }\n    getLinesContent() {\n        return this._pieceTree.getLinesContent();\n    }\n    getLineContent(lineNumber) {\n        return this._pieceTree.getLineContent(lineNumber);\n    }\n    getLineCharCode(lineNumber, index) {\n        return this._pieceTree.getLineCharCode(lineNumber, index);\n    }\n    getLineLength(lineNumber) {\n        return this._pieceTree.getLineLength(lineNumber);\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 1;\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 2;\n    }\n    _getEndOfLine(eol) {\n        switch (eol) {\n            case 1 /* EndOfLinePreference.LF */:\n                return '\\n';\n            case 2 /* EndOfLinePreference.CRLF */:\n                return '\\r\\n';\n            case 0 /* EndOfLinePreference.TextDefined */:\n                return this.getEOL();\n            default:\n                throw new Error('Unknown EOL preference');\n        }\n    }\n    setEOL(newEOL) {\n        this._pieceTree.setEOL(newEOL);\n    }\n    applyEdits(rawOperations, recordTrimAutoWhitespace, computeUndoEdits) {\n        let mightContainRTL = this._mightContainRTL;\n        let mightContainUnusualLineTerminators = this._mightContainUnusualLineTerminators;\n        let mightContainNonBasicASCII = this._mightContainNonBasicASCII;\n        let canReduceOperations = true;\n        let operations = [];\n        for (let i = 0; i < rawOperations.length; i++) {\n            const op = rawOperations[i];\n            if (canReduceOperations && op._isTracked) {\n                canReduceOperations = false;\n            }\n            const validatedRange = op.range;\n            if (op.text) {\n                let textMightContainNonBasicASCII = true;\n                if (!mightContainNonBasicASCII) {\n                    textMightContainNonBasicASCII = !strings.isBasicASCII(op.text);\n                    mightContainNonBasicASCII = textMightContainNonBasicASCII;\n                }\n                if (!mightContainRTL && textMightContainNonBasicASCII) {\n                    // check if the new inserted text contains RTL\n                    mightContainRTL = strings.containsRTL(op.text);\n                }\n                if (!mightContainUnusualLineTerminators && textMightContainNonBasicASCII) {\n                    // check if the new inserted text contains unusual line terminators\n                    mightContainUnusualLineTerminators = strings.containsUnusualLineTerminators(op.text);\n                }\n            }\n            let validText = '';\n            let eolCount = 0;\n            let firstLineLength = 0;\n            let lastLineLength = 0;\n            if (op.text) {\n                let strEOL;\n                [eolCount, firstLineLength, lastLineLength, strEOL] = countEOL(op.text);\n                const bufferEOL = this.getEOL();\n                const expectedStrEOL = (bufferEOL === '\\r\\n' ? 2 /* StringEOL.CRLF */ : 1 /* StringEOL.LF */);\n                if (strEOL === 0 /* StringEOL.Unknown */ || strEOL === expectedStrEOL) {\n                    validText = op.text;\n                }\n                else {\n                    validText = op.text.replace(/\\r\\n|\\r|\\n/g, bufferEOL);\n                }\n            }\n            operations[i] = {\n                sortIndex: i,\n                identifier: op.identifier || null,\n                range: validatedRange,\n                rangeOffset: this.getOffsetAt(validatedRange.startLineNumber, validatedRange.startColumn),\n                rangeLength: this.getValueLengthInRange(validatedRange),\n                text: validText,\n                eolCount: eolCount,\n                firstLineLength: firstLineLength,\n                lastLineLength: lastLineLength,\n                forceMoveMarkers: Boolean(op.forceMoveMarkers),\n                isAutoWhitespaceEdit: op.isAutoWhitespaceEdit || false\n            };\n        }\n        // Sort operations ascending\n        operations.sort(PieceTreeTextBuffer._sortOpsAscending);\n        let hasTouchingRanges = false;\n        for (let i = 0, count = operations.length - 1; i < count; i++) {\n            const rangeEnd = operations[i].range.getEndPosition();\n            const nextRangeStart = operations[i + 1].range.getStartPosition();\n            if (nextRangeStart.isBeforeOrEqual(rangeEnd)) {\n                if (nextRangeStart.isBefore(rangeEnd)) {\n                    // overlapping ranges\n                    throw new Error('Overlapping ranges are not allowed!');\n                }\n                hasTouchingRanges = true;\n            }\n        }\n        if (canReduceOperations) {\n            operations = this._reduceOperations(operations);\n        }\n        // Delta encode operations\n        const reverseRanges = (computeUndoEdits || recordTrimAutoWhitespace ? PieceTreeTextBuffer._getInverseEditRanges(operations) : []);\n        const newTrimAutoWhitespaceCandidates = [];\n        if (recordTrimAutoWhitespace) {\n            for (let i = 0; i < operations.length; i++) {\n                const op = operations[i];\n                const reverseRange = reverseRanges[i];\n                if (op.isAutoWhitespaceEdit && op.range.isEmpty()) {\n                    // Record already the future line numbers that might be auto whitespace removal candidates on next edit\n                    for (let lineNumber = reverseRange.startLineNumber; lineNumber <= reverseRange.endLineNumber; lineNumber++) {\n                        let currentLineContent = '';\n                        if (lineNumber === reverseRange.startLineNumber) {\n                            currentLineContent = this.getLineContent(op.range.startLineNumber);\n                            if (strings.firstNonWhitespaceIndex(currentLineContent) !== -1) {\n                                continue;\n                            }\n                        }\n                        newTrimAutoWhitespaceCandidates.push({ lineNumber: lineNumber, oldContent: currentLineContent });\n                    }\n                }\n            }\n        }\n        let reverseOperations = null;\n        if (computeUndoEdits) {\n            let reverseRangeDeltaOffset = 0;\n            reverseOperations = [];\n            for (let i = 0; i < operations.length; i++) {\n                const op = operations[i];\n                const reverseRange = reverseRanges[i];\n                const bufferText = this.getValueInRange(op.range);\n                const reverseRangeOffset = op.rangeOffset + reverseRangeDeltaOffset;\n                reverseRangeDeltaOffset += (op.text.length - bufferText.length);\n                reverseOperations[i] = {\n                    sortIndex: op.sortIndex,\n                    identifier: op.identifier,\n                    range: reverseRange,\n                    text: bufferText,\n                    textChange: new TextChange(op.rangeOffset, bufferText, reverseRangeOffset, op.text)\n                };\n            }\n            // Can only sort reverse operations when the order is not significant\n            if (!hasTouchingRanges) {\n                reverseOperations.sort((a, b) => a.sortIndex - b.sortIndex);\n            }\n        }\n        this._mightContainRTL = mightContainRTL;\n        this._mightContainUnusualLineTerminators = mightContainUnusualLineTerminators;\n        this._mightContainNonBasicASCII = mightContainNonBasicASCII;\n        const contentChanges = this._doApplyEdits(operations);\n        let trimAutoWhitespaceLineNumbers = null;\n        if (recordTrimAutoWhitespace && newTrimAutoWhitespaceCandidates.length > 0) {\n            // sort line numbers auto whitespace removal candidates for next edit descending\n            newTrimAutoWhitespaceCandidates.sort((a, b) => b.lineNumber - a.lineNumber);\n            trimAutoWhitespaceLineNumbers = [];\n            for (let i = 0, len = newTrimAutoWhitespaceCandidates.length; i < len; i++) {\n                const lineNumber = newTrimAutoWhitespaceCandidates[i].lineNumber;\n                if (i > 0 && newTrimAutoWhitespaceCandidates[i - 1].lineNumber === lineNumber) {\n                    // Do not have the same line number twice\n                    continue;\n                }\n                const prevContent = newTrimAutoWhitespaceCandidates[i].oldContent;\n                const lineContent = this.getLineContent(lineNumber);\n                if (lineContent.length === 0 || lineContent === prevContent || strings.firstNonWhitespaceIndex(lineContent) !== -1) {\n                    continue;\n                }\n                trimAutoWhitespaceLineNumbers.push(lineNumber);\n            }\n        }\n        this._onDidChangeContent.fire();\n        return new ApplyEditsResult(reverseOperations, contentChanges, trimAutoWhitespaceLineNumbers);\n    }\n    /**\n     * Transform operations such that they represent the same logic edit,\n     * but that they also do not cause OOM crashes.\n     */\n    _reduceOperations(operations) {\n        if (operations.length < 1000) {\n            // We know from empirical testing that a thousand edits work fine regardless of their shape.\n            return operations;\n        }\n        // At one point, due to how events are emitted and how each operation is handled,\n        // some operations can trigger a high amount of temporary string allocations,\n        // that will immediately get edited again.\n        // e.g. a formatter inserting ridiculous ammounts of \\n on a model with a single line\n        // Therefore, the strategy is to collapse all the operations into a huge single edit operation\n        return [this._toSingleEditOperation(operations)];\n    }\n    _toSingleEditOperation(operations) {\n        let forceMoveMarkers = false;\n        const firstEditRange = operations[0].range;\n        const lastEditRange = operations[operations.length - 1].range;\n        const entireEditRange = new Range(firstEditRange.startLineNumber, firstEditRange.startColumn, lastEditRange.endLineNumber, lastEditRange.endColumn);\n        let lastEndLineNumber = firstEditRange.startLineNumber;\n        let lastEndColumn = firstEditRange.startColumn;\n        const result = [];\n        for (let i = 0, len = operations.length; i < len; i++) {\n            const operation = operations[i];\n            const range = operation.range;\n            forceMoveMarkers = forceMoveMarkers || operation.forceMoveMarkers;\n            // (1) -- Push old text\n            result.push(this.getValueInRange(new Range(lastEndLineNumber, lastEndColumn, range.startLineNumber, range.startColumn)));\n            // (2) -- Push new text\n            if (operation.text.length > 0) {\n                result.push(operation.text);\n            }\n            lastEndLineNumber = range.endLineNumber;\n            lastEndColumn = range.endColumn;\n        }\n        const text = result.join('');\n        const [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n        return {\n            sortIndex: 0,\n            identifier: operations[0].identifier,\n            range: entireEditRange,\n            rangeOffset: this.getOffsetAt(entireEditRange.startLineNumber, entireEditRange.startColumn),\n            rangeLength: this.getValueLengthInRange(entireEditRange, 0 /* EndOfLinePreference.TextDefined */),\n            text: text,\n            eolCount: eolCount,\n            firstLineLength: firstLineLength,\n            lastLineLength: lastLineLength,\n            forceMoveMarkers: forceMoveMarkers,\n            isAutoWhitespaceEdit: false\n        };\n    }\n    _doApplyEdits(operations) {\n        operations.sort(PieceTreeTextBuffer._sortOpsDescending);\n        const contentChanges = [];\n        // operations are from bottom to top\n        for (let i = 0; i < operations.length; i++) {\n            const op = operations[i];\n            const startLineNumber = op.range.startLineNumber;\n            const startColumn = op.range.startColumn;\n            const endLineNumber = op.range.endLineNumber;\n            const endColumn = op.range.endColumn;\n            if (startLineNumber === endLineNumber && startColumn === endColumn && op.text.length === 0) {\n                // no-op\n                continue;\n            }\n            if (op.text) {\n                // replacement\n                this._pieceTree.delete(op.rangeOffset, op.rangeLength);\n                this._pieceTree.insert(op.rangeOffset, op.text, true);\n            }\n            else {\n                // deletion\n                this._pieceTree.delete(op.rangeOffset, op.rangeLength);\n            }\n            const contentChangeRange = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            contentChanges.push({\n                range: contentChangeRange,\n                rangeLength: op.rangeLength,\n                text: op.text,\n                rangeOffset: op.rangeOffset,\n                forceMoveMarkers: op.forceMoveMarkers\n            });\n        }\n        return contentChanges;\n    }\n    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {\n        return this._pieceTree.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n    }\n    /**\n     * Assumes `operations` are validated and sorted ascending\n     */\n    static _getInverseEditRanges(operations) {\n        const result = [];\n        let prevOpEndLineNumber = 0;\n        let prevOpEndColumn = 0;\n        let prevOp = null;\n        for (let i = 0, len = operations.length; i < len; i++) {\n            const op = operations[i];\n            let startLineNumber;\n            let startColumn;\n            if (prevOp) {\n                if (prevOp.range.endLineNumber === op.range.startLineNumber) {\n                    startLineNumber = prevOpEndLineNumber;\n                    startColumn = prevOpEndColumn + (op.range.startColumn - prevOp.range.endColumn);\n                }\n                else {\n                    startLineNumber = prevOpEndLineNumber + (op.range.startLineNumber - prevOp.range.endLineNumber);\n                    startColumn = op.range.startColumn;\n                }\n            }\n            else {\n                startLineNumber = op.range.startLineNumber;\n                startColumn = op.range.startColumn;\n            }\n            let resultRange;\n            if (op.text.length > 0) {\n                // the operation inserts something\n                const lineCount = op.eolCount + 1;\n                if (lineCount === 1) {\n                    // single line insert\n                    resultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn + op.firstLineLength);\n                }\n                else {\n                    // multi line insert\n                    resultRange = new Range(startLineNumber, startColumn, startLineNumber + lineCount - 1, op.lastLineLength + 1);\n                }\n            }\n            else {\n                // There is nothing to insert\n                resultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn);\n            }\n            prevOpEndLineNumber = resultRange.endLineNumber;\n            prevOpEndColumn = resultRange.endColumn;\n            result.push(resultRange);\n            prevOp = op;\n        }\n        return result;\n    }\n    static _sortOpsAscending(a, b) {\n        const r = Range.compareRangesUsingEnds(a.range, b.range);\n        if (r === 0) {\n            return a.sortIndex - b.sortIndex;\n        }\n        return r;\n    }\n    static _sortOpsDescending(a, b) {\n        const r = Range.compareRangesUsingEnds(a.range, b.range);\n        if (r === 0) {\n            return b.sortIndex - a.sortIndex;\n        }\n        return -r;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport { StringBuffer, createLineStarts, createLineStartsFast } from './pieceTreeBase.js';\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer.js';\nclass PieceTreeTextBufferFactory {\n    constructor(_chunks, _bom, _cr, _lf, _crlf, _containsRTL, _containsUnusualLineTerminators, _isBasicASCII, _normalizeEOL) {\n        this._chunks = _chunks;\n        this._bom = _bom;\n        this._cr = _cr;\n        this._lf = _lf;\n        this._crlf = _crlf;\n        this._containsRTL = _containsRTL;\n        this._containsUnusualLineTerminators = _containsUnusualLineTerminators;\n        this._isBasicASCII = _isBasicASCII;\n        this._normalizeEOL = _normalizeEOL;\n    }\n    _getEOL(defaultEOL) {\n        const totalEOLCount = this._cr + this._lf + this._crlf;\n        const totalCRCount = this._cr + this._crlf;\n        if (totalEOLCount === 0) {\n            // This is an empty file or a file with precisely one line\n            return (defaultEOL === 1 /* DefaultEndOfLine.LF */ ? '\\n' : '\\r\\n');\n        }\n        if (totalCRCount > totalEOLCount / 2) {\n            // More than half of the file contains \\r\\n ending lines\n            return '\\r\\n';\n        }\n        // At least one line more ends in \\n\n        return '\\n';\n    }\n    create(defaultEOL) {\n        const eol = this._getEOL(defaultEOL);\n        const chunks = this._chunks;\n        if (this._normalizeEOL &&\n            ((eol === '\\r\\n' && (this._cr > 0 || this._lf > 0))\n                || (eol === '\\n' && (this._cr > 0 || this._crlf > 0)))) {\n            // Normalize pieces\n            for (let i = 0, len = chunks.length; i < len; i++) {\n                const str = chunks[i].buffer.replace(/\\r\\n|\\r|\\n/g, eol);\n                const newLineStart = createLineStartsFast(str);\n                chunks[i] = new StringBuffer(str, newLineStart);\n            }\n        }\n        const textBuffer = new PieceTreeTextBuffer(chunks, this._bom, eol, this._containsRTL, this._containsUnusualLineTerminators, this._isBasicASCII, this._normalizeEOL);\n        return { textBuffer: textBuffer, disposable: textBuffer };\n    }\n}\nexport class PieceTreeTextBufferBuilder {\n    constructor() {\n        this.chunks = [];\n        this.BOM = '';\n        this._hasPreviousChar = false;\n        this._previousChar = 0;\n        this._tmpLineStarts = [];\n        this.cr = 0;\n        this.lf = 0;\n        this.crlf = 0;\n        this.containsRTL = false;\n        this.containsUnusualLineTerminators = false;\n        this.isBasicASCII = true;\n    }\n    acceptChunk(chunk) {\n        if (chunk.length === 0) {\n            return;\n        }\n        if (this.chunks.length === 0) {\n            if (strings.startsWithUTF8BOM(chunk)) {\n                this.BOM = strings.UTF8_BOM_CHARACTER;\n                chunk = chunk.substr(1);\n            }\n        }\n        const lastChar = chunk.charCodeAt(chunk.length - 1);\n        if (lastChar === 13 /* CharCode.CarriageReturn */ || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {\n            // last character is \\r or a high surrogate => keep it back\n            this._acceptChunk1(chunk.substr(0, chunk.length - 1), false);\n            this._hasPreviousChar = true;\n            this._previousChar = lastChar;\n        }\n        else {\n            this._acceptChunk1(chunk, false);\n            this._hasPreviousChar = false;\n            this._previousChar = lastChar;\n        }\n    }\n    _acceptChunk1(chunk, allowEmptyStrings) {\n        if (!allowEmptyStrings && chunk.length === 0) {\n            // Nothing to do\n            return;\n        }\n        if (this._hasPreviousChar) {\n            this._acceptChunk2(String.fromCharCode(this._previousChar) + chunk);\n        }\n        else {\n            this._acceptChunk2(chunk);\n        }\n    }\n    _acceptChunk2(chunk) {\n        const lineStarts = createLineStarts(this._tmpLineStarts, chunk);\n        this.chunks.push(new StringBuffer(chunk, lineStarts.lineStarts));\n        this.cr += lineStarts.cr;\n        this.lf += lineStarts.lf;\n        this.crlf += lineStarts.crlf;\n        if (!lineStarts.isBasicASCII) {\n            // this chunk contains non basic ASCII characters\n            this.isBasicASCII = false;\n            if (!this.containsRTL) {\n                this.containsRTL = strings.containsRTL(chunk);\n            }\n            if (!this.containsUnusualLineTerminators) {\n                this.containsUnusualLineTerminators = strings.containsUnusualLineTerminators(chunk);\n            }\n        }\n    }\n    finish(normalizeEOL = true) {\n        this._finish();\n        return new PieceTreeTextBufferFactory(this.chunks, this.BOM, this.cr, this.lf, this.crlf, this.containsRTL, this.containsUnusualLineTerminators, this.isBasicASCII, normalizeEOL);\n    }\n    _finish() {\n        if (this.chunks.length === 0) {\n            this._acceptChunk1('', true);\n        }\n        if (this._hasPreviousChar) {\n            this._hasPreviousChar = false;\n            // recreate last chunk\n            const lastChunk = this.chunks[this.chunks.length - 1];\n            lastChunk.buffer += String.fromCharCode(this._previousChar);\n            const newLineStarts = createLineStartsFast(lastChunk.buffer);\n            lastChunk.lineStarts = newLineStarts;\n            if (this._previousChar === 13 /* CharCode.CarriageReturn */) {\n                this.cr++;\n            }\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { runWhenIdle } from '../../../base/common/async.js';\nimport { BugIndicatingError, onUnexpectedError } from '../../../base/common/errors.js';\nimport { Disposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { setTimeout0 } from '../../../base/common/platform.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { nullTokenizeEncoded } from '../languages/nullTokenize.js';\nimport { ContiguousMultilineTokensBuilder } from '../tokens/contiguousMultilineTokensBuilder.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\n/**\n * An array that avoids being sparse by always\n * filling up unused indices with a default value.\n */\nexport class ContiguousGrowingArray {\n    constructor(_default) {\n        this._default = _default;\n        this._store = [];\n    }\n    get(index) {\n        if (index < this._store.length) {\n            return this._store[index];\n        }\n        return this._default;\n    }\n    set(index, value) {\n        while (index >= this._store.length) {\n            this._store[this._store.length] = this._default;\n        }\n        this._store[index] = value;\n    }\n    // TODO have `replace` instead of `delete` and `insert`\n    delete(deleteIndex, deleteCount) {\n        if (deleteCount === 0 || deleteIndex >= this._store.length) {\n            return;\n        }\n        this._store.splice(deleteIndex, deleteCount);\n    }\n    insert(insertIndex, insertCount) {\n        if (insertCount === 0 || insertIndex >= this._store.length) {\n            return;\n        }\n        const arr = [];\n        for (let i = 0; i < insertCount; i++) {\n            arr[i] = this._default;\n        }\n        this._store = arrays.arrayInsert(this._store, insertIndex, arr);\n    }\n}\n/**\n * Stores the states at the start of each line and keeps track of which lines\n * must be re-tokenized. Also uses state equality to quickly validate lines\n * that don't need to be re-tokenized.\n *\n * For example, when typing on a line, the line gets marked as needing to be tokenized.\n * Once the line is tokenized, the end state is checked for equality against the begin\n * state of the next line. If the states are equal, tokenization doesn't need to run\n * again over the rest of the file. If the states are not equal, the next line gets marked\n * as needing to be tokenized.\n */\nexport class TokenizationStateStore {\n    get invalidLineStartIndex() {\n        return this._firstLineNeedsTokenization;\n    }\n    constructor(tokenizationSupport, initialState) {\n        this.tokenizationSupport = tokenizationSupport;\n        this.initialState = initialState;\n        /**\n         * `lineBeginState[i]` contains the begin state used to tokenize line number `i + 1`.\n         */\n        this._lineBeginState = new ContiguousGrowingArray(null);\n        /**\n         * `lineNeedsTokenization[i]` describes if line number `i + 1` needs to be tokenized.\n         */\n        this._lineNeedsTokenization = new ContiguousGrowingArray(true);\n        this._firstLineNeedsTokenization = 0;\n        this._lineBeginState.set(0, this.initialState);\n    }\n    markMustBeTokenized(lineIndex) {\n        this._lineNeedsTokenization.set(lineIndex, true);\n        this._firstLineNeedsTokenization = Math.min(this._firstLineNeedsTokenization, lineIndex);\n    }\n    getBeginState(lineIndex) {\n        return this._lineBeginState.get(lineIndex);\n    }\n    setEndState(linesLength, lineIndex, endState) {\n        this._lineNeedsTokenization.set(lineIndex, false);\n        this._firstLineNeedsTokenization = lineIndex + 1;\n        // Check if this was the last line\n        if (lineIndex === linesLength - 1) {\n            return false;\n        }\n        // Check if the end state has changed\n        const previousEndState = this._lineBeginState.get(lineIndex + 1);\n        if (previousEndState === null || !endState.equals(previousEndState)) {\n            this._lineBeginState.set(lineIndex + 1, endState);\n            this.markMustBeTokenized(lineIndex + 1);\n            return true;\n        }\n        // Perhaps we can skip tokenizing some lines...\n        let i = lineIndex + 1;\n        while (i < linesLength) {\n            if (this._lineNeedsTokenization.get(i)) {\n                break;\n            }\n            i++;\n        }\n        this._firstLineNeedsTokenization = i;\n        return false;\n    }\n    applyEdits(range, eolCount) {\n        this.markMustBeTokenized(range.startLineNumber - 1);\n        this._lineBeginState.delete(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        this._lineNeedsTokenization.delete(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        this._lineBeginState.insert(range.startLineNumber, eolCount);\n        this._lineNeedsTokenization.insert(range.startLineNumber, eolCount);\n    }\n    updateTokensUntilLine(textModel, languageIdCodec, builder, lineNumber) {\n        const languageId = textModel.getLanguageId();\n        const linesLength = textModel.getLineCount();\n        const endLineIndex = lineNumber - 1;\n        // Validate all states up to and including endLineIndex\n        for (let lineIndex = this.invalidLineStartIndex; lineIndex <= endLineIndex; lineIndex++) {\n            const text = textModel.getLineContent(lineIndex + 1);\n            const lineStartState = this.getBeginState(lineIndex);\n            const r = safeTokenize(languageIdCodec, languageId, this.tokenizationSupport, text, true, lineStartState);\n            builder.add(lineIndex + 1, r.tokens);\n            this.setEndState(linesLength, lineIndex, r.endState);\n            lineIndex = this.invalidLineStartIndex - 1; // -1 because the outer loop increments it\n        }\n    }\n    isTokenizationComplete(textModel) {\n        return this.invalidLineStartIndex >= textModel.getLineCount();\n    }\n}\nexport class TextModelTokenization extends Disposable {\n    constructor(_textModel, _tokenizationPart, _languageIdCodec) {\n        super();\n        this._textModel = _textModel;\n        this._tokenizationPart = _tokenizationPart;\n        this._languageIdCodec = _languageIdCodec;\n        this._tokenizationStateStore = null;\n        this._defaultBackgroundTokenizer = null;\n        this.backgroundTokenizer = this._register(new MutableDisposable());\n        this._register(TokenizationRegistry.onDidChange((e) => {\n            const languageId = this._textModel.getLanguageId();\n            if (e.changedLanguages.indexOf(languageId) === -1) {\n                return;\n            }\n            this._resetTokenizationState();\n            this._tokenizationPart.clearTokens();\n        }));\n        this._resetTokenizationState();\n    }\n    handleDidChangeContent(e) {\n        var _a;\n        if (e.isFlush) {\n            this._resetTokenizationState();\n            return;\n        }\n        if (this._tokenizationStateStore) {\n            for (let i = 0, len = e.changes.length; i < len; i++) {\n                const change = e.changes[i];\n                const [eolCount] = countEOL(change.text);\n                this._tokenizationStateStore.applyEdits(change.range, eolCount);\n            }\n        }\n        (_a = this._defaultBackgroundTokenizer) === null || _a === void 0 ? void 0 : _a.handleChanges();\n    }\n    handleDidChangeAttached() {\n        var _a;\n        (_a = this._defaultBackgroundTokenizer) === null || _a === void 0 ? void 0 : _a.handleChanges();\n    }\n    handleDidChangeLanguage(e) {\n        this._resetTokenizationState();\n        this._tokenizationPart.clearTokens();\n    }\n    _resetTokenizationState() {\n        const [tokenizationSupport, initialState] = initializeTokenization(this._textModel, this._tokenizationPart);\n        if (tokenizationSupport && initialState) {\n            this._tokenizationStateStore = new TokenizationStateStore(tokenizationSupport, initialState);\n        }\n        else {\n            this._tokenizationStateStore = null;\n        }\n        this.backgroundTokenizer.clear();\n        this._defaultBackgroundTokenizer = null;\n        if (this._tokenizationStateStore) {\n            const b = {\n                setTokens: (tokens) => {\n                    this._tokenizationPart.setTokens(tokens);\n                },\n                backgroundTokenizationFinished: () => {\n                    this._tokenizationPart.handleBackgroundTokenizationFinished();\n                },\n                setEndState: (lineNumber, state) => {\n                    var _a, _b;\n                    if (!state) {\n                        throw new BugIndicatingError();\n                    }\n                    const invalidLineStartIndex = (_a = this._tokenizationStateStore) === null || _a === void 0 ? void 0 : _a.invalidLineStartIndex;\n                    if (invalidLineStartIndex !== undefined && lineNumber - 1 >= invalidLineStartIndex) {\n                        // Don't accept states for definitely valid states\n                        (_b = this._tokenizationStateStore) === null || _b === void 0 ? void 0 : _b.setEndState(this._textModel.getLineCount(), lineNumber - 1, state);\n                    }\n                },\n            };\n            if (tokenizationSupport && tokenizationSupport.createBackgroundTokenizer) {\n                this.backgroundTokenizer.value = tokenizationSupport.createBackgroundTokenizer(this._textModel, b);\n            }\n            if (!this.backgroundTokenizer.value) {\n                this.backgroundTokenizer.value = this._defaultBackgroundTokenizer =\n                    new DefaultBackgroundTokenizer(this._textModel, this._tokenizationStateStore, b, this._languageIdCodec);\n                this._defaultBackgroundTokenizer.handleChanges();\n            }\n        }\n    }\n    tokenizeViewport(startLineNumber, endLineNumber) {\n        var _a;\n        const builder = new ContiguousMultilineTokensBuilder();\n        this._heuristicallyTokenizeViewport(builder, startLineNumber, endLineNumber);\n        this._tokenizationPart.setTokens(builder.finalize());\n        (_a = this._defaultBackgroundTokenizer) === null || _a === void 0 ? void 0 : _a.checkFinished();\n    }\n    reset() {\n        this._resetTokenizationState();\n        this._tokenizationPart.clearTokens();\n    }\n    forceTokenization(lineNumber) {\n        var _a, _b;\n        const builder = new ContiguousMultilineTokensBuilder();\n        (_a = this._tokenizationStateStore) === null || _a === void 0 ? void 0 : _a.updateTokensUntilLine(this._textModel, this._languageIdCodec, builder, lineNumber);\n        this._tokenizationPart.setTokens(builder.finalize());\n        (_b = this._defaultBackgroundTokenizer) === null || _b === void 0 ? void 0 : _b.checkFinished();\n    }\n    getTokenTypeIfInsertingCharacter(position, character) {\n        if (!this._tokenizationStateStore) {\n            return 0 /* StandardTokenType.Other */;\n        }\n        this.forceTokenization(position.lineNumber);\n        const lineStartState = this._tokenizationStateStore.getBeginState(position.lineNumber - 1);\n        if (!lineStartState) {\n            return 0 /* StandardTokenType.Other */;\n        }\n        const languageId = this._textModel.getLanguageId();\n        const lineContent = this._textModel.getLineContent(position.lineNumber);\n        // Create the text as if `character` was inserted\n        const text = (lineContent.substring(0, position.column - 1)\n            + character\n            + lineContent.substring(position.column - 1));\n        const r = safeTokenize(this._languageIdCodec, languageId, this._tokenizationStateStore.tokenizationSupport, text, true, lineStartState);\n        const lineTokens = new LineTokens(r.tokens, text, this._languageIdCodec);\n        if (lineTokens.getCount() === 0) {\n            return 0 /* StandardTokenType.Other */;\n        }\n        const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        return lineTokens.getStandardTokenType(tokenIndex);\n    }\n    tokenizeLineWithEdit(position, length, newText) {\n        const lineNumber = position.lineNumber;\n        const column = position.column;\n        if (!this._tokenizationStateStore) {\n            return null;\n        }\n        this.forceTokenization(lineNumber);\n        const lineStartState = this._tokenizationStateStore.getBeginState(lineNumber - 1);\n        if (!lineStartState) {\n            return null;\n        }\n        const curLineContent = this._textModel.getLineContent(lineNumber);\n        const newLineContent = curLineContent.substring(0, column - 1)\n            + newText + curLineContent.substring(column - 1 + length);\n        const languageId = this._textModel.getLanguageIdAtPosition(lineNumber, 0);\n        const result = safeTokenize(this._languageIdCodec, languageId, this._tokenizationStateStore.tokenizationSupport, newLineContent, true, lineStartState);\n        const lineTokens = new LineTokens(result.tokens, newLineContent, this._languageIdCodec);\n        return lineTokens;\n    }\n    isCheapToTokenize(lineNumber) {\n        if (!this._tokenizationStateStore) {\n            return true;\n        }\n        const firstInvalidLineNumber = this._tokenizationStateStore.invalidLineStartIndex + 1;\n        if (lineNumber > firstInvalidLineNumber) {\n            return false;\n        }\n        if (lineNumber < firstInvalidLineNumber) {\n            return true;\n        }\n        if (this._textModel.getLineLength(lineNumber) < 2048 /* Constants.CHEAP_TOKENIZATION_LENGTH_LIMIT */) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * The result is not cached.\n     */\n    _heuristicallyTokenizeViewport(builder, startLineNumber, endLineNumber) {\n        var _a;\n        if (!this._tokenizationStateStore) {\n            // nothing to do\n            return;\n        }\n        if (endLineNumber <= this._tokenizationStateStore.invalidLineStartIndex) {\n            // nothing to do\n            return;\n        }\n        if (startLineNumber <= this._tokenizationStateStore.invalidLineStartIndex) {\n            // tokenization has reached the viewport start...\n            this._tokenizationStateStore.updateTokensUntilLine(this._textModel, this._languageIdCodec, builder, endLineNumber);\n            return;\n        }\n        let state = this.guessStartState(startLineNumber);\n        const languageId = this._textModel.getLanguageId();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const text = this._textModel.getLineContent(lineNumber);\n            const r = safeTokenize(this._languageIdCodec, languageId, this._tokenizationStateStore.tokenizationSupport, text, true, state);\n            builder.add(lineNumber, r.tokens);\n            state = r.endState;\n        }\n        // We overrode the tokens. Because old states might get reused (thus stopping invalidation),\n        // we have to explicitly request the tokens for this range again.\n        (_a = this.backgroundTokenizer.value) === null || _a === void 0 ? void 0 : _a.requestTokens(startLineNumber, endLineNumber + 1);\n    }\n    guessStartState(lineNumber) {\n        let nonWhitespaceColumn = this._textModel.getLineFirstNonWhitespaceColumn(lineNumber);\n        const likelyRelevantLines = [];\n        let initialState = null;\n        for (let i = lineNumber - 1; nonWhitespaceColumn > 1 && i >= 1; i--) {\n            const newNonWhitespaceIndex = this._textModel.getLineFirstNonWhitespaceColumn(i);\n            // Ignore lines full of whitespace\n            if (newNonWhitespaceIndex === 0) {\n                continue;\n            }\n            if (newNonWhitespaceIndex < nonWhitespaceColumn) {\n                likelyRelevantLines.push(this._textModel.getLineContent(i));\n                nonWhitespaceColumn = newNonWhitespaceIndex;\n                initialState = this._tokenizationStateStore.getBeginState(i - 1);\n                if (initialState) {\n                    break;\n                }\n            }\n        }\n        if (!initialState) {\n            initialState = this._tokenizationStateStore.initialState;\n        }\n        likelyRelevantLines.reverse();\n        const languageId = this._textModel.getLanguageId();\n        let state = initialState;\n        for (const line of likelyRelevantLines) {\n            const r = safeTokenize(this._languageIdCodec, languageId, this._tokenizationStateStore.tokenizationSupport, line, false, state);\n            state = r.endState;\n        }\n        return state;\n    }\n}\nfunction initializeTokenization(textModel, tokenizationPart) {\n    if (textModel.isTooLargeForTokenization()) {\n        return [null, null];\n    }\n    const tokenizationSupport = TokenizationRegistry.get(tokenizationPart.getLanguageId());\n    if (!tokenizationSupport) {\n        return [null, null];\n    }\n    let initialState;\n    try {\n        initialState = tokenizationSupport.getInitialState();\n    }\n    catch (e) {\n        onUnexpectedError(e);\n        return [null, null];\n    }\n    return [tokenizationSupport, initialState];\n}\nfunction safeTokenize(languageIdCodec, languageId, tokenizationSupport, text, hasEOL, state) {\n    let r = null;\n    if (tokenizationSupport) {\n        try {\n            r = tokenizationSupport.tokenizeEncoded(text, hasEOL, state.clone());\n        }\n        catch (e) {\n            onUnexpectedError(e);\n        }\n    }\n    if (!r) {\n        r = nullTokenizeEncoded(languageIdCodec.encodeLanguageId(languageId), state);\n    }\n    LineTokens.convertToEndOffset(r.tokens, text.length);\n    return r;\n}\nclass DefaultBackgroundTokenizer {\n    constructor(_textModel, _stateStore, _backgroundTokenStore, _languageIdCodec) {\n        this._textModel = _textModel;\n        this._stateStore = _stateStore;\n        this._backgroundTokenStore = _backgroundTokenStore;\n        this._languageIdCodec = _languageIdCodec;\n        this._isDisposed = false;\n        this._isScheduled = false;\n    }\n    dispose() {\n        this._isDisposed = true;\n    }\n    handleChanges() {\n        this._beginBackgroundTokenization();\n    }\n    _beginBackgroundTokenization() {\n        if (this._isScheduled || !this._textModel.isAttachedToEditor() || !this._hasLinesToTokenize()) {\n            return;\n        }\n        this._isScheduled = true;\n        runWhenIdle((deadline) => {\n            this._isScheduled = false;\n            this._backgroundTokenizeWithDeadline(deadline);\n        });\n    }\n    /**\n     * Tokenize until the deadline occurs, but try to yield every 1-2ms.\n     */\n    _backgroundTokenizeWithDeadline(deadline) {\n        // Read the time remaining from the `deadline` immediately because it is unclear\n        // if the `deadline` object will be valid after execution leaves this function.\n        const endTime = Date.now() + deadline.timeRemaining();\n        const execute = () => {\n            if (this._isDisposed || !this._textModel.isAttachedToEditor() || !this._hasLinesToTokenize()) {\n                // disposed in the meantime or detached or finished\n                return;\n            }\n            this._backgroundTokenizeForAtLeast1ms();\n            if (Date.now() < endTime) {\n                // There is still time before reaching the deadline, so yield to the browser and then\n                // continue execution\n                setTimeout0(execute);\n            }\n            else {\n                // The deadline has been reached, so schedule a new idle callback if necessary\n                this._beginBackgroundTokenization();\n            }\n        };\n        execute();\n    }\n    /**\n     * Tokenize for at least 1ms.\n     */\n    _backgroundTokenizeForAtLeast1ms() {\n        const lineCount = this._textModel.getLineCount();\n        const builder = new ContiguousMultilineTokensBuilder();\n        const sw = StopWatch.create(false);\n        do {\n            if (sw.elapsed() > 1) {\n                // the comparison is intentionally > 1 and not >= 1 to ensure that\n                // a full millisecond has elapsed, given how microseconds are rounded\n                // to milliseconds\n                break;\n            }\n            const tokenizedLineNumber = this._tokenizeOneInvalidLine(builder);\n            if (tokenizedLineNumber >= lineCount) {\n                break;\n            }\n        } while (this._hasLinesToTokenize());\n        this._backgroundTokenStore.setTokens(builder.finalize());\n        this.checkFinished();\n    }\n    _hasLinesToTokenize() {\n        if (!this._stateStore) {\n            return false;\n        }\n        return this._stateStore.invalidLineStartIndex < this._textModel.getLineCount();\n    }\n    _tokenizeOneInvalidLine(builder) {\n        if (!this._stateStore || !this._hasLinesToTokenize()) {\n            return this._textModel.getLineCount() + 1;\n        }\n        const lineNumber = this._stateStore.invalidLineStartIndex + 1;\n        this._stateStore.updateTokensUntilLine(this._textModel, this._languageIdCodec, builder, lineNumber);\n        return lineNumber;\n    }\n    checkFinished() {\n        if (this._isDisposed) {\n            return;\n        }\n        if (this._stateStore.isTokenizationComplete(this._textModel)) {\n            this._backgroundTokenStore.backgroundTokenizationFinished();\n        }\n    }\n    requestTokens(startLineNumber, endLineNumberExclusive) {\n        for (let lineNumber = startLineNumber; lineNumber < endLineNumberExclusive; lineNumber++) {\n            this._stateStore.markMustBeTokenized(lineNumber - 1);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Position } from '../core/position.js';\nimport { getWordAtText } from '../core/wordHelper.js';\nimport { TextModelPart } from './textModelPart.js';\nimport { TextModelTokenization } from './textModelTokens.js';\nimport { ContiguousTokensStore } from '../tokens/contiguousTokensStore.js';\nimport { SparseTokensStore } from '../tokens/sparseTokensStore.js';\nexport class TokenizationTextModelPart extends TextModelPart {\n    constructor(_languageService, _languageConfigurationService, _textModel, bracketPairsTextModelPart, _languageId) {\n        super();\n        this._languageService = _languageService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._textModel = _textModel;\n        this.bracketPairsTextModelPart = bracketPairsTextModelPart;\n        this._languageId = _languageId;\n        this._onDidChangeLanguage = this._register(new Emitter());\n        this.onDidChangeLanguage = this._onDidChangeLanguage.event;\n        this._onDidChangeLanguageConfiguration = this._register(new Emitter());\n        this.onDidChangeLanguageConfiguration = this._onDidChangeLanguageConfiguration.event;\n        this._onDidChangeTokens = this._register(new Emitter());\n        this.onDidChangeTokens = this._onDidChangeTokens.event;\n        this._backgroundTokenizationState = 1 /* BackgroundTokenizationState.InProgress */;\n        this._tokens = new ContiguousTokensStore(this._languageService.languageIdCodec);\n        this._semanticTokens = new SparseTokensStore(this._languageService.languageIdCodec);\n        this._tokenization = this._register(new TextModelTokenization(_textModel, this, this._languageService.languageIdCodec));\n        this._register(this._languageConfigurationService.onDidChange(e => {\n            if (e.affects(this._languageId)) {\n                this._onDidChangeLanguageConfiguration.fire({});\n            }\n        }));\n    }\n    acceptEdit(range, text, eolCount, firstLineLength, lastLineLength) {\n        this._tokens.acceptEdit(range, eolCount, firstLineLength);\n        this._semanticTokens.acceptEdit(range, eolCount, firstLineLength, lastLineLength, text.length > 0 ? text.charCodeAt(0) : 0 /* CharCode.Null */);\n    }\n    handleDidChangeAttached() {\n        this._tokenization.handleDidChangeAttached();\n    }\n    flush() {\n        this._tokens.flush();\n        this._semanticTokens.flush();\n    }\n    // TODO@hediet TODO@alexdima what is the difference between this and acceptEdit?\n    handleDidChangeContent(change) {\n        this._tokenization.handleDidChangeContent(change);\n    }\n    get backgroundTokenizationState() {\n        return this._backgroundTokenizationState;\n    }\n    handleBackgroundTokenizationFinished() {\n        if (this._backgroundTokenizationState === 2 /* BackgroundTokenizationState.Completed */) {\n            // We already did a full tokenization and don't go back to progressing.\n            return;\n        }\n        const newState = 2 /* BackgroundTokenizationState.Completed */;\n        this._backgroundTokenizationState = newState;\n        this.bracketPairsTextModelPart.handleDidChangeBackgroundTokenizationState();\n    }\n    get hasTokens() {\n        return this._tokens.hasTokens;\n    }\n    setTokens(tokens) {\n        if (tokens.length === 0) {\n            return;\n        }\n        const ranges = [];\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const element = tokens[i];\n            let minChangedLineNumber = 0;\n            let maxChangedLineNumber = 0;\n            let hasChange = false;\n            for (let lineNumber = element.startLineNumber; lineNumber <= element.endLineNumber; lineNumber++) {\n                if (hasChange) {\n                    this._tokens.setTokens(this._languageId, lineNumber - 1, this._textModel.getLineLength(lineNumber), element.getLineTokens(lineNumber), false);\n                    maxChangedLineNumber = lineNumber;\n                }\n                else {\n                    const lineHasChange = this._tokens.setTokens(this._languageId, lineNumber - 1, this._textModel.getLineLength(lineNumber), element.getLineTokens(lineNumber), true);\n                    if (lineHasChange) {\n                        hasChange = true;\n                        minChangedLineNumber = lineNumber;\n                        maxChangedLineNumber = lineNumber;\n                    }\n                }\n            }\n            if (hasChange) {\n                ranges.push({\n                    fromLineNumber: minChangedLineNumber,\n                    toLineNumber: maxChangedLineNumber,\n                });\n            }\n        }\n        if (ranges.length > 0) {\n            this._emitModelTokensChangedEvent({\n                tokenizationSupportChanged: false,\n                semanticTokensApplied: false,\n                ranges: ranges,\n            });\n        }\n    }\n    setSemanticTokens(tokens, isComplete) {\n        this._semanticTokens.set(tokens, isComplete);\n        this._emitModelTokensChangedEvent({\n            tokenizationSupportChanged: false,\n            semanticTokensApplied: tokens !== null,\n            ranges: [{ fromLineNumber: 1, toLineNumber: this._textModel.getLineCount() }],\n        });\n    }\n    hasCompleteSemanticTokens() {\n        return this._semanticTokens.isComplete();\n    }\n    hasSomeSemanticTokens() {\n        return !this._semanticTokens.isEmpty();\n    }\n    setPartialSemanticTokens(range, tokens) {\n        if (this.hasCompleteSemanticTokens()) {\n            return;\n        }\n        const changedRange = this._textModel.validateRange(this._semanticTokens.setPartial(range, tokens));\n        this._emitModelTokensChangedEvent({\n            tokenizationSupportChanged: false,\n            semanticTokensApplied: true,\n            ranges: [\n                {\n                    fromLineNumber: changedRange.startLineNumber,\n                    toLineNumber: changedRange.endLineNumber,\n                },\n            ],\n        });\n    }\n    tokenizeViewport(startLineNumber, endLineNumber) {\n        startLineNumber = Math.max(1, startLineNumber);\n        endLineNumber = Math.min(this._textModel.getLineCount(), endLineNumber);\n        this._tokenization.tokenizeViewport(startLineNumber, endLineNumber);\n    }\n    clearTokens() {\n        this._tokens.flush();\n        this._emitModelTokensChangedEvent({\n            tokenizationSupportChanged: true,\n            semanticTokensApplied: false,\n            ranges: [\n                {\n                    fromLineNumber: 1,\n                    toLineNumber: this._textModel.getLineCount(),\n                },\n            ],\n        });\n    }\n    _emitModelTokensChangedEvent(e) {\n        if (!this._textModel._isDisposing()) {\n            this.bracketPairsTextModelPart.handleDidChangeTokens(e);\n            this._onDidChangeTokens.fire(e);\n        }\n    }\n    resetTokenization() {\n        this._tokenization.reset();\n    }\n    forceTokenization(lineNumber) {\n        if (lineNumber < 1 || lineNumber > this._textModel.getLineCount()) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        this._tokenization.forceTokenization(lineNumber);\n    }\n    isCheapToTokenize(lineNumber) {\n        return this._tokenization.isCheapToTokenize(lineNumber);\n    }\n    tokenizeIfCheap(lineNumber) {\n        if (this.isCheapToTokenize(lineNumber)) {\n            this.forceTokenization(lineNumber);\n        }\n    }\n    getLineTokens(lineNumber) {\n        if (lineNumber < 1 || lineNumber > this._textModel.getLineCount()) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        return this._getLineTokens(lineNumber);\n    }\n    _getLineTokens(lineNumber) {\n        const lineText = this._textModel.getLineContent(lineNumber);\n        const syntacticTokens = this._tokens.getTokens(this._languageId, lineNumber - 1, lineText);\n        return this._semanticTokens.addSparseTokens(lineNumber, syntacticTokens);\n    }\n    getTokenTypeIfInsertingCharacter(lineNumber, column, character) {\n        const position = this._textModel.validatePosition(new Position(lineNumber, column));\n        return this._tokenization.getTokenTypeIfInsertingCharacter(position, character);\n    }\n    tokenizeLineWithEdit(position, length, newText) {\n        const validatedPosition = this._textModel.validatePosition(position);\n        return this._tokenization.tokenizeLineWithEdit(validatedPosition, length, newText);\n    }\n    getLanguageConfiguration(languageId) {\n        return this._languageConfigurationService.getLanguageConfiguration(languageId);\n    }\n    // Having tokens allows implementing additional helper methods\n    getWordAtPosition(_position) {\n        this.assertNotDisposed();\n        const position = this._textModel.validatePosition(_position);\n        const lineContent = this._textModel.getLineContent(position.lineNumber);\n        const lineTokens = this._getLineTokens(position.lineNumber);\n        const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        // (1). First try checking right biased word\n        const [rbStartOffset, rbEndOffset] = TokenizationTextModelPart._findLanguageBoundaries(lineTokens, tokenIndex);\n        const rightBiasedWord = getWordAtText(position.column, this.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).getWordDefinition(), lineContent.substring(rbStartOffset, rbEndOffset), rbStartOffset);\n        // Make sure the result touches the original passed in position\n        if (rightBiasedWord &&\n            rightBiasedWord.startColumn <= _position.column &&\n            _position.column <= rightBiasedWord.endColumn) {\n            return rightBiasedWord;\n        }\n        // (2). Else, if we were at a language boundary, check the left biased word\n        if (tokenIndex > 0 && rbStartOffset === position.column - 1) {\n            // edge case, where `position` sits between two tokens belonging to two different languages\n            const [lbStartOffset, lbEndOffset] = TokenizationTextModelPart._findLanguageBoundaries(lineTokens, tokenIndex - 1);\n            const leftBiasedWord = getWordAtText(position.column, this.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex - 1)).getWordDefinition(), lineContent.substring(lbStartOffset, lbEndOffset), lbStartOffset);\n            // Make sure the result touches the original passed in position\n            if (leftBiasedWord &&\n                leftBiasedWord.startColumn <= _position.column &&\n                _position.column <= leftBiasedWord.endColumn) {\n                return leftBiasedWord;\n            }\n        }\n        return null;\n    }\n    static _findLanguageBoundaries(lineTokens, tokenIndex) {\n        const languageId = lineTokens.getLanguageId(tokenIndex);\n        // go left until a different language is hit\n        let startOffset = 0;\n        for (let i = tokenIndex; i >= 0 && lineTokens.getLanguageId(i) === languageId; i--) {\n            startOffset = lineTokens.getStartOffset(i);\n        }\n        // go right until a different language is hit\n        let endOffset = lineTokens.getLineContent().length;\n        for (let i = tokenIndex, tokenCount = lineTokens.getCount(); i < tokenCount && lineTokens.getLanguageId(i) === languageId; i++) {\n            endOffset = lineTokens.getEndOffset(i);\n        }\n        return [startOffset, endOffset];\n    }\n    getWordUntilPosition(position) {\n        const wordAtPosition = this.getWordAtPosition(position);\n        if (!wordAtPosition) {\n            return {\n                word: '',\n                startColumn: position.column,\n                endColumn: position.column,\n            };\n        }\n        return {\n            word: wordAtPosition.word.substr(0, position.column - wordAtPosition.startColumn),\n            startColumn: wordAtPosition.startColumn,\n            endColumn: position.column,\n        };\n    }\n    getLanguageId() {\n        return this._languageId;\n    }\n    getLanguageIdAtPosition(lineNumber, column) {\n        const position = this._textModel.validatePosition(new Position(lineNumber, column));\n        const lineTokens = this.getLineTokens(position.lineNumber);\n        return lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\n    }\n    setLanguageId(languageId, source = 'api') {\n        if (this._languageId === languageId) {\n            // There's nothing to do\n            return;\n        }\n        const e = {\n            oldLanguage: this._languageId,\n            newLanguage: languageId,\n            source\n        };\n        this._languageId = languageId;\n        this.bracketPairsTextModelPart.handleDidChangeLanguage(e);\n        this._tokenization.handleDidChangeLanguage(e);\n        this._onDidChangeLanguage.fire(e);\n        this._onDidChangeLanguageConfiguration.fire({});\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { ArrayQueue, pushMany } from '../../../base/common/arrays.js';\nimport { Color } from '../../../base/common/color.js';\nimport { illegalArgument, onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { combinedDisposable, Disposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { normalizeIndentation } from '../core/indentation.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nimport * as model from '../model.js';\nimport { BracketPairsTextModelPart } from './bracketPairsTextModelPart/bracketPairsImpl.js';\nimport { ColorizedBracketPairsDecorationProvider } from './bracketPairsTextModelPart/colorizedBracketPairsDecorationProvider.js';\nimport { EditStack } from './editStack.js';\nimport { GuidesTextModelPart } from './guidesTextModelPart.js';\nimport { guessIndentation } from './indentationGuesser.js';\nimport { IntervalNode, IntervalTree, recomputeMaxEnd } from './intervalTree.js';\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer/pieceTreeTextBuffer.js';\nimport { PieceTreeTextBufferBuilder } from './pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js';\nimport { SearchParams, TextModelSearch } from './textModelSearch.js';\nimport { TokenizationTextModelPart } from './tokenizationTextModelPart.js';\nimport { InternalModelContentChangeEvent, LineInjectedText, ModelInjectedTextChangedEvent, ModelRawContentChangedEvent, ModelRawEOLChanged, ModelRawFlush, ModelRawLineChanged, ModelRawLinesDeleted, ModelRawLinesInserted } from '../textModelEvents.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nexport function createTextBufferFactory(text) {\n    const builder = new PieceTreeTextBufferBuilder();\n    builder.acceptChunk(text);\n    return builder.finish();\n}\nexport function createTextBufferFactoryFromSnapshot(snapshot) {\n    const builder = new PieceTreeTextBufferBuilder();\n    let chunk;\n    while (typeof (chunk = snapshot.read()) === 'string') {\n        builder.acceptChunk(chunk);\n    }\n    return builder.finish();\n}\nexport function createTextBuffer(value, defaultEOL) {\n    let factory;\n    if (typeof value === 'string') {\n        factory = createTextBufferFactory(value);\n    }\n    else if (model.isITextSnapshot(value)) {\n        factory = createTextBufferFactoryFromSnapshot(value);\n    }\n    else {\n        factory = value;\n    }\n    return factory.create(defaultEOL);\n}\nlet MODEL_ID = 0;\nconst LIMIT_FIND_COUNT = 999;\nconst LONG_LINE_BOUNDARY = 10000;\nclass TextModelSnapshot {\n    constructor(source) {\n        this._source = source;\n        this._eos = false;\n    }\n    read() {\n        if (this._eos) {\n            return null;\n        }\n        const result = [];\n        let resultCnt = 0;\n        let resultLength = 0;\n        do {\n            const tmp = this._source.read();\n            if (tmp === null) {\n                // end-of-stream\n                this._eos = true;\n                if (resultCnt === 0) {\n                    return null;\n                }\n                else {\n                    return result.join('');\n                }\n            }\n            if (tmp.length > 0) {\n                result[resultCnt++] = tmp;\n                resultLength += tmp.length;\n            }\n            if (resultLength >= 64 * 1024) {\n                return result.join('');\n            }\n        } while (true);\n    }\n}\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\nlet TextModel = class TextModel extends Disposable {\n    static resolveOptions(textBuffer, options) {\n        if (options.detectIndentation) {\n            const guessedIndentation = guessIndentation(textBuffer, options.tabSize, options.insertSpaces);\n            return new model.TextModelResolvedOptions({\n                tabSize: guessedIndentation.tabSize,\n                indentSize: 'tabSize',\n                insertSpaces: guessedIndentation.insertSpaces,\n                trimAutoWhitespace: options.trimAutoWhitespace,\n                defaultEOL: options.defaultEOL,\n                bracketPairColorizationOptions: options.bracketPairColorizationOptions,\n            });\n        }\n        return new model.TextModelResolvedOptions(options);\n    }\n    get onDidChangeLanguage() { return this._tokenizationTextModelPart.onDidChangeLanguage; }\n    get onDidChangeLanguageConfiguration() { return this._tokenizationTextModelPart.onDidChangeLanguageConfiguration; }\n    get onDidChangeTokens() { return this._tokenizationTextModelPart.onDidChangeTokens; }\n    onDidChangeContent(listener) {\n        return this._eventEmitter.slowEvent((e) => listener(e.contentChangedEvent));\n    }\n    onDidChangeContentOrInjectedText(listener) {\n        return combinedDisposable(this._eventEmitter.fastEvent(e => listener(e)), this._onDidChangeInjectedText.event(e => listener(e)));\n    }\n    _isDisposing() { return this.__isDisposing; }\n    get tokenization() { return this._tokenizationTextModelPart; }\n    get bracketPairs() { return this._bracketPairs; }\n    get guides() { return this._guidesTextModelPart; }\n    constructor(source, languageId, creationOptions, associatedResource = null, _undoRedoService, _languageService, _languageConfigurationService) {\n        super();\n        this._undoRedoService = _undoRedoService;\n        this._languageService = _languageService;\n        this._languageConfigurationService = _languageConfigurationService;\n        //#region Events\n        this._onWillDispose = this._register(new Emitter());\n        this.onWillDispose = this._onWillDispose.event;\n        this._onDidChangeDecorations = this._register(new DidChangeDecorationsEmitter(affectedInjectedTextLines => this.handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines)));\n        this.onDidChangeDecorations = this._onDidChangeDecorations.event;\n        this._onDidChangeOptions = this._register(new Emitter());\n        this.onDidChangeOptions = this._onDidChangeOptions.event;\n        this._onDidChangeAttached = this._register(new Emitter());\n        this.onDidChangeAttached = this._onDidChangeAttached.event;\n        this._onDidChangeInjectedText = this._register(new Emitter());\n        this._eventEmitter = this._register(new DidChangeContentEmitter());\n        this._deltaDecorationCallCnt = 0;\n        // Generate a new unique model id\n        MODEL_ID++;\n        this.id = '$model' + MODEL_ID;\n        this.isForSimpleWidget = creationOptions.isForSimpleWidget;\n        if (typeof associatedResource === 'undefined' || associatedResource === null) {\n            this._associatedResource = URI.parse('inmemory://model/' + MODEL_ID);\n        }\n        else {\n            this._associatedResource = associatedResource;\n        }\n        this._attachedEditorCount = 0;\n        const { textBuffer, disposable } = createTextBuffer(source, creationOptions.defaultEOL);\n        this._buffer = textBuffer;\n        this._bufferDisposable = disposable;\n        this._options = TextModel.resolveOptions(this._buffer, creationOptions);\n        this._bracketPairs = this._register(new BracketPairsTextModelPart(this, this._languageConfigurationService));\n        this._guidesTextModelPart = this._register(new GuidesTextModelPart(this, this._languageConfigurationService));\n        this._decorationProvider = this._register(new ColorizedBracketPairsDecorationProvider(this));\n        this._tokenizationTextModelPart = new TokenizationTextModelPart(this._languageService, this._languageConfigurationService, this, this._bracketPairs, languageId);\n        const bufferLineCount = this._buffer.getLineCount();\n        const bufferTextLength = this._buffer.getValueLengthInRange(new Range(1, 1, bufferLineCount, this._buffer.getLineLength(bufferLineCount) + 1), 0 /* model.EndOfLinePreference.TextDefined */);\n        // !!! Make a decision in the ctor and permanently respect this decision !!!\n        // If a model is too large at construction time, it will never get tokenized,\n        // under no circumstances.\n        if (creationOptions.largeFileOptimizations) {\n            this._isTooLargeForTokenization = ((bufferTextLength > TextModel.LARGE_FILE_SIZE_THRESHOLD)\n                || (bufferLineCount > TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD));\n        }\n        else {\n            this._isTooLargeForTokenization = false;\n        }\n        this._isTooLargeForSyncing = (bufferTextLength > TextModel._MODEL_SYNC_LIMIT);\n        this._versionId = 1;\n        this._alternativeVersionId = 1;\n        this._initialUndoRedoSnapshot = null;\n        this._isDisposed = false;\n        this.__isDisposing = false;\n        this._instanceId = strings.singleLetterHash(MODEL_ID);\n        this._lastDecorationId = 0;\n        this._decorations = Object.create(null);\n        this._decorationsTree = new DecorationsTrees();\n        this._commandManager = new EditStack(this, this._undoRedoService);\n        this._isUndoing = false;\n        this._isRedoing = false;\n        this._trimAutoWhitespaceLines = null;\n        this._register(this._decorationProvider.onDidChange(() => {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._onDidChangeDecorations.fire();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }));\n    }\n    dispose() {\n        this.__isDisposing = true;\n        this._onWillDispose.fire();\n        this._tokenizationTextModelPart.dispose();\n        this._isDisposed = true;\n        super.dispose();\n        this._bufferDisposable.dispose();\n        this.__isDisposing = false;\n        // Manually release reference to previous text buffer to avoid large leaks\n        // in case someone leaks a TextModel reference\n        const emptyDisposedTextBuffer = new PieceTreeTextBuffer([], '', '\\n', false, false, true, true);\n        emptyDisposedTextBuffer.dispose();\n        this._buffer = emptyDisposedTextBuffer;\n        this._bufferDisposable = Disposable.None;\n    }\n    _assertNotDisposed() {\n        if (this._isDisposed) {\n            throw new Error('Model is disposed!');\n        }\n    }\n    _emitContentChangedEvent(rawChange, change) {\n        if (this.__isDisposing) {\n            // Do not confuse listeners by emitting any event after disposing\n            return;\n        }\n        this._tokenizationTextModelPart.handleDidChangeContent(change);\n        this._bracketPairs.handleDidChangeContent(change);\n        this._eventEmitter.fire(new InternalModelContentChangeEvent(rawChange, change));\n    }\n    setValue(value) {\n        this._assertNotDisposed();\n        if (value === null || value === undefined) {\n            throw illegalArgument();\n        }\n        const { textBuffer, disposable } = createTextBuffer(value, this._options.defaultEOL);\n        this._setValueFromTextBuffer(textBuffer, disposable);\n    }\n    _createContentChanged2(range, rangeOffset, rangeLength, text, isUndoing, isRedoing, isFlush) {\n        return {\n            changes: [{\n                    range: range,\n                    rangeOffset: rangeOffset,\n                    rangeLength: rangeLength,\n                    text: text,\n                }],\n            eol: this._buffer.getEOL(),\n            versionId: this.getVersionId(),\n            isUndoing: isUndoing,\n            isRedoing: isRedoing,\n            isFlush: isFlush\n        };\n    }\n    _setValueFromTextBuffer(textBuffer, textBufferDisposable) {\n        this._assertNotDisposed();\n        const oldFullModelRange = this.getFullModelRange();\n        const oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n        const endLineNumber = this.getLineCount();\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        this._buffer = textBuffer;\n        this._bufferDisposable.dispose();\n        this._bufferDisposable = textBufferDisposable;\n        this._increaseVersionId();\n        // Flush all tokens\n        this._tokenizationTextModelPart.flush();\n        // Destroy all my decorations\n        this._decorations = Object.create(null);\n        this._decorationsTree = new DecorationsTrees();\n        // Destroy my edit history and settings\n        this._commandManager.clear();\n        this._trimAutoWhitespaceLines = null;\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent([\n            new ModelRawFlush()\n        ], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, true));\n    }\n    setEOL(eol) {\n        this._assertNotDisposed();\n        const newEOL = (eol === 1 /* model.EndOfLineSequence.CRLF */ ? '\\r\\n' : '\\n');\n        if (this._buffer.getEOL() === newEOL) {\n            // Nothing to do\n            return;\n        }\n        const oldFullModelRange = this.getFullModelRange();\n        const oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n        const endLineNumber = this.getLineCount();\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        this._onBeforeEOLChange();\n        this._buffer.setEOL(newEOL);\n        this._increaseVersionId();\n        this._onAfterEOLChange();\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent([\n            new ModelRawEOLChanged()\n        ], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, false));\n    }\n    _onBeforeEOLChange() {\n        // Ensure all decorations get their `range` set.\n        this._decorationsTree.ensureAllNodesHaveRanges(this);\n    }\n    _onAfterEOLChange() {\n        // Transform back `range` to offsets\n        const versionId = this.getVersionId();\n        const allDecorations = this._decorationsTree.collectNodesPostOrder();\n        for (let i = 0, len = allDecorations.length; i < len; i++) {\n            const node = allDecorations[i];\n            const range = node.range; // the range is defined due to `_onBeforeEOLChange`\n            const delta = node.cachedAbsoluteStart - node.start;\n            const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n            const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n            node.cachedAbsoluteStart = startOffset;\n            node.cachedAbsoluteEnd = endOffset;\n            node.cachedVersionId = versionId;\n            node.start = startOffset - delta;\n            node.end = endOffset - delta;\n            recomputeMaxEnd(node);\n        }\n    }\n    onBeforeAttached() {\n        this._attachedEditorCount++;\n        if (this._attachedEditorCount === 1) {\n            this._tokenizationTextModelPart.handleDidChangeAttached();\n            this._onDidChangeAttached.fire(undefined);\n        }\n    }\n    onBeforeDetached() {\n        this._attachedEditorCount--;\n        if (this._attachedEditorCount === 0) {\n            this._tokenizationTextModelPart.handleDidChangeAttached();\n            this._onDidChangeAttached.fire(undefined);\n        }\n    }\n    isAttachedToEditor() {\n        return this._attachedEditorCount > 0;\n    }\n    getAttachedEditorCount() {\n        return this._attachedEditorCount;\n    }\n    isTooLargeForSyncing() {\n        return this._isTooLargeForSyncing;\n    }\n    isTooLargeForTokenization() {\n        return this._isTooLargeForTokenization;\n    }\n    isDisposed() {\n        return this._isDisposed;\n    }\n    isDominatedByLongLines() {\n        this._assertNotDisposed();\n        if (this.isTooLargeForTokenization()) {\n            // Cannot word wrap huge files anyways, so it doesn't really matter\n            return false;\n        }\n        let smallLineCharCount = 0;\n        let longLineCharCount = 0;\n        const lineCount = this._buffer.getLineCount();\n        for (let lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\n            const lineLength = this._buffer.getLineLength(lineNumber);\n            if (lineLength >= LONG_LINE_BOUNDARY) {\n                longLineCharCount += lineLength;\n            }\n            else {\n                smallLineCharCount += lineLength;\n            }\n        }\n        return (longLineCharCount > smallLineCharCount);\n    }\n    get uri() {\n        return this._associatedResource;\n    }\n    //#region Options\n    getOptions() {\n        this._assertNotDisposed();\n        return this._options;\n    }\n    getFormattingOptions() {\n        return {\n            tabSize: this._options.indentSize,\n            insertSpaces: this._options.insertSpaces\n        };\n    }\n    updateOptions(_newOpts) {\n        this._assertNotDisposed();\n        const tabSize = (typeof _newOpts.tabSize !== 'undefined') ? _newOpts.tabSize : this._options.tabSize;\n        const indentSize = (typeof _newOpts.indentSize !== 'undefined') ? _newOpts.indentSize : this._options.originalIndentSize;\n        const insertSpaces = (typeof _newOpts.insertSpaces !== 'undefined') ? _newOpts.insertSpaces : this._options.insertSpaces;\n        const trimAutoWhitespace = (typeof _newOpts.trimAutoWhitespace !== 'undefined') ? _newOpts.trimAutoWhitespace : this._options.trimAutoWhitespace;\n        const bracketPairColorizationOptions = (typeof _newOpts.bracketColorizationOptions !== 'undefined') ? _newOpts.bracketColorizationOptions : this._options.bracketPairColorizationOptions;\n        const newOpts = new model.TextModelResolvedOptions({\n            tabSize: tabSize,\n            indentSize: indentSize,\n            insertSpaces: insertSpaces,\n            defaultEOL: this._options.defaultEOL,\n            trimAutoWhitespace: trimAutoWhitespace,\n            bracketPairColorizationOptions,\n        });\n        if (this._options.equals(newOpts)) {\n            return;\n        }\n        const e = this._options.createChangeEvent(newOpts);\n        this._options = newOpts;\n        this._bracketPairs.handleDidChangeOptions(e);\n        this._decorationProvider.handleDidChangeOptions(e);\n        this._onDidChangeOptions.fire(e);\n    }\n    detectIndentation(defaultInsertSpaces, defaultTabSize) {\n        this._assertNotDisposed();\n        const guessedIndentation = guessIndentation(this._buffer, defaultTabSize, defaultInsertSpaces);\n        this.updateOptions({\n            insertSpaces: guessedIndentation.insertSpaces,\n            tabSize: guessedIndentation.tabSize,\n            indentSize: guessedIndentation.tabSize, // TODO@Alex: guess indentSize independent of tabSize\n        });\n    }\n    normalizeIndentation(str) {\n        this._assertNotDisposed();\n        return normalizeIndentation(str, this._options.indentSize, this._options.insertSpaces);\n    }\n    //#endregion\n    //#region Reading\n    getVersionId() {\n        this._assertNotDisposed();\n        return this._versionId;\n    }\n    mightContainRTL() {\n        return this._buffer.mightContainRTL();\n    }\n    mightContainUnusualLineTerminators() {\n        return this._buffer.mightContainUnusualLineTerminators();\n    }\n    removeUnusualLineTerminators(selections = null) {\n        const matches = this.findMatches(strings.UNUSUAL_LINE_TERMINATORS.source, false, true, false, null, false, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n        this._buffer.resetMightContainUnusualLineTerminators();\n        this.pushEditOperations(selections, matches.map(m => ({ range: m.range, text: null })), () => null);\n    }\n    mightContainNonBasicASCII() {\n        return this._buffer.mightContainNonBasicASCII();\n    }\n    getAlternativeVersionId() {\n        this._assertNotDisposed();\n        return this._alternativeVersionId;\n    }\n    getInitialUndoRedoSnapshot() {\n        this._assertNotDisposed();\n        return this._initialUndoRedoSnapshot;\n    }\n    getOffsetAt(rawPosition) {\n        this._assertNotDisposed();\n        const position = this._validatePosition(rawPosition.lineNumber, rawPosition.column, 0 /* StringOffsetValidationType.Relaxed */);\n        return this._buffer.getOffsetAt(position.lineNumber, position.column);\n    }\n    getPositionAt(rawOffset) {\n        this._assertNotDisposed();\n        const offset = (Math.min(this._buffer.getLength(), Math.max(0, rawOffset)));\n        return this._buffer.getPositionAt(offset);\n    }\n    _increaseVersionId() {\n        this._versionId = this._versionId + 1;\n        this._alternativeVersionId = this._versionId;\n    }\n    _overwriteVersionId(versionId) {\n        this._versionId = versionId;\n    }\n    _overwriteAlternativeVersionId(newAlternativeVersionId) {\n        this._alternativeVersionId = newAlternativeVersionId;\n    }\n    _overwriteInitialUndoRedoSnapshot(newInitialUndoRedoSnapshot) {\n        this._initialUndoRedoSnapshot = newInitialUndoRedoSnapshot;\n    }\n    getValue(eol, preserveBOM = false) {\n        this._assertNotDisposed();\n        const fullModelRange = this.getFullModelRange();\n        const fullModelValue = this.getValueInRange(fullModelRange, eol);\n        if (preserveBOM) {\n            return this._buffer.getBOM() + fullModelValue;\n        }\n        return fullModelValue;\n    }\n    createSnapshot(preserveBOM = false) {\n        return new TextModelSnapshot(this._buffer.createSnapshot(preserveBOM));\n    }\n    getValueLength(eol, preserveBOM = false) {\n        this._assertNotDisposed();\n        const fullModelRange = this.getFullModelRange();\n        const fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\n        if (preserveBOM) {\n            return this._buffer.getBOM().length + fullModelValue;\n        }\n        return fullModelValue;\n    }\n    getValueInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getValueInRange(this.validateRange(rawRange), eol);\n    }\n    getValueLengthInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getValueLengthInRange(this.validateRange(rawRange), eol);\n    }\n    getCharacterCountInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getCharacterCountInRange(this.validateRange(rawRange), eol);\n    }\n    getLineCount() {\n        this._assertNotDisposed();\n        return this._buffer.getLineCount();\n    }\n    getLineContent(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineContent(lineNumber);\n    }\n    getLineLength(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLength(lineNumber);\n    }\n    getLinesContent() {\n        this._assertNotDisposed();\n        return this._buffer.getLinesContent();\n    }\n    getEOL() {\n        this._assertNotDisposed();\n        return this._buffer.getEOL();\n    }\n    getEndOfLineSequence() {\n        this._assertNotDisposed();\n        return (this._buffer.getEOL() === '\\n'\n            ? 0 /* model.EndOfLineSequence.LF */\n            : 1 /* model.EndOfLineSequence.CRLF */);\n    }\n    getLineMinColumn(lineNumber) {\n        this._assertNotDisposed();\n        return 1;\n    }\n    getLineMaxColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLength(lineNumber) + 1;\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineFirstNonWhitespaceColumn(lineNumber);\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new Error('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLastNonWhitespaceColumn(lineNumber);\n    }\n    /**\n     * Validates `range` is within buffer bounds, but allows it to sit in between surrogate pairs, etc.\n     * Will try to not allocate if possible.\n     */\n    _validateRangeRelaxedNoAllocations(range) {\n        const linesCount = this._buffer.getLineCount();\n        const initialStartLineNumber = range.startLineNumber;\n        const initialStartColumn = range.startColumn;\n        let startLineNumber = Math.floor((typeof initialStartLineNumber === 'number' && !isNaN(initialStartLineNumber)) ? initialStartLineNumber : 1);\n        let startColumn = Math.floor((typeof initialStartColumn === 'number' && !isNaN(initialStartColumn)) ? initialStartColumn : 1);\n        if (startLineNumber < 1) {\n            startLineNumber = 1;\n            startColumn = 1;\n        }\n        else if (startLineNumber > linesCount) {\n            startLineNumber = linesCount;\n            startColumn = this.getLineMaxColumn(startLineNumber);\n        }\n        else {\n            if (startColumn <= 1) {\n                startColumn = 1;\n            }\n            else {\n                const maxColumn = this.getLineMaxColumn(startLineNumber);\n                if (startColumn >= maxColumn) {\n                    startColumn = maxColumn;\n                }\n            }\n        }\n        const initialEndLineNumber = range.endLineNumber;\n        const initialEndColumn = range.endColumn;\n        let endLineNumber = Math.floor((typeof initialEndLineNumber === 'number' && !isNaN(initialEndLineNumber)) ? initialEndLineNumber : 1);\n        let endColumn = Math.floor((typeof initialEndColumn === 'number' && !isNaN(initialEndColumn)) ? initialEndColumn : 1);\n        if (endLineNumber < 1) {\n            endLineNumber = 1;\n            endColumn = 1;\n        }\n        else if (endLineNumber > linesCount) {\n            endLineNumber = linesCount;\n            endColumn = this.getLineMaxColumn(endLineNumber);\n        }\n        else {\n            if (endColumn <= 1) {\n                endColumn = 1;\n            }\n            else {\n                const maxColumn = this.getLineMaxColumn(endLineNumber);\n                if (endColumn >= maxColumn) {\n                    endColumn = maxColumn;\n                }\n            }\n        }\n        if (initialStartLineNumber === startLineNumber\n            && initialStartColumn === startColumn\n            && initialEndLineNumber === endLineNumber\n            && initialEndColumn === endColumn\n            && range instanceof Range\n            && !(range instanceof Selection)) {\n            return range;\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    _isValidPosition(lineNumber, column, validationType) {\n        if (typeof lineNumber !== 'number' || typeof column !== 'number') {\n            return false;\n        }\n        if (isNaN(lineNumber) || isNaN(column)) {\n            return false;\n        }\n        if (lineNumber < 1 || column < 1) {\n            return false;\n        }\n        if ((lineNumber | 0) !== lineNumber || (column | 0) !== column) {\n            return false;\n        }\n        const lineCount = this._buffer.getLineCount();\n        if (lineNumber > lineCount) {\n            return false;\n        }\n        if (column === 1) {\n            return true;\n        }\n        const maxColumn = this.getLineMaxColumn(lineNumber);\n        if (column > maxColumn) {\n            return false;\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            // !!At this point, column > 1\n            const charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n            if (strings.isHighSurrogate(charCodeBefore)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _validatePosition(_lineNumber, _column, validationType) {\n        const lineNumber = Math.floor((typeof _lineNumber === 'number' && !isNaN(_lineNumber)) ? _lineNumber : 1);\n        const column = Math.floor((typeof _column === 'number' && !isNaN(_column)) ? _column : 1);\n        const lineCount = this._buffer.getLineCount();\n        if (lineNumber < 1) {\n            return new Position(1, 1);\n        }\n        if (lineNumber > lineCount) {\n            return new Position(lineCount, this.getLineMaxColumn(lineCount));\n        }\n        if (column <= 1) {\n            return new Position(lineNumber, 1);\n        }\n        const maxColumn = this.getLineMaxColumn(lineNumber);\n        if (column >= maxColumn) {\n            return new Position(lineNumber, maxColumn);\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            // If the position would end up in the middle of a high-low surrogate pair,\n            // we move it to before the pair\n            // !!At this point, column > 1\n            const charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n            if (strings.isHighSurrogate(charCodeBefore)) {\n                return new Position(lineNumber, column - 1);\n            }\n        }\n        return new Position(lineNumber, column);\n    }\n    validatePosition(position) {\n        const validationType = 1 /* StringOffsetValidationType.SurrogatePairs */;\n        this._assertNotDisposed();\n        // Avoid object allocation and cover most likely case\n        if (position instanceof Position) {\n            if (this._isValidPosition(position.lineNumber, position.column, validationType)) {\n                return position;\n            }\n        }\n        return this._validatePosition(position.lineNumber, position.column, validationType);\n    }\n    _isValidRange(range, validationType) {\n        const startLineNumber = range.startLineNumber;\n        const startColumn = range.startColumn;\n        const endLineNumber = range.endLineNumber;\n        const endColumn = range.endColumn;\n        if (!this._isValidPosition(startLineNumber, startColumn, 0 /* StringOffsetValidationType.Relaxed */)) {\n            return false;\n        }\n        if (!this._isValidPosition(endLineNumber, endColumn, 0 /* StringOffsetValidationType.Relaxed */)) {\n            return false;\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            const charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\n            const charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\n            const startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n            const endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n            if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n                return true;\n            }\n            return false;\n        }\n        return true;\n    }\n    validateRange(_range) {\n        const validationType = 1 /* StringOffsetValidationType.SurrogatePairs */;\n        this._assertNotDisposed();\n        // Avoid object allocation and cover most likely case\n        if ((_range instanceof Range) && !(_range instanceof Selection)) {\n            if (this._isValidRange(_range, validationType)) {\n                return _range;\n            }\n        }\n        const start = this._validatePosition(_range.startLineNumber, _range.startColumn, 0 /* StringOffsetValidationType.Relaxed */);\n        const end = this._validatePosition(_range.endLineNumber, _range.endColumn, 0 /* StringOffsetValidationType.Relaxed */);\n        const startLineNumber = start.lineNumber;\n        const startColumn = start.column;\n        const endLineNumber = end.lineNumber;\n        const endColumn = end.column;\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            const charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\n            const charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\n            const startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n            const endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n            if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n                return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            }\n            if (startLineNumber === endLineNumber && startColumn === endColumn) {\n                // do not expand a collapsed range, simply move it to a valid location\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn - 1);\n            }\n            if (startInsideSurrogatePair && endInsideSurrogatePair) {\n                // expand range at both ends\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn + 1);\n            }\n            if (startInsideSurrogatePair) {\n                // only expand range at the start\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn);\n            }\n            // only expand range at the end\n            return new Range(startLineNumber, startColumn, endLineNumber, endColumn + 1);\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    modifyPosition(rawPosition, offset) {\n        this._assertNotDisposed();\n        const candidate = this.getOffsetAt(rawPosition) + offset;\n        return this.getPositionAt(Math.min(this._buffer.getLength(), Math.max(0, candidate)));\n    }\n    getFullModelRange() {\n        this._assertNotDisposed();\n        const lineCount = this.getLineCount();\n        return new Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\n    }\n    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {\n        return this._buffer.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n    }\n    findMatches(searchString, rawSearchScope, isRegex, matchCase, wordSeparators, captureMatches, limitResultCount = LIMIT_FIND_COUNT) {\n        this._assertNotDisposed();\n        let searchRanges = null;\n        if (rawSearchScope !== null) {\n            if (!Array.isArray(rawSearchScope)) {\n                rawSearchScope = [rawSearchScope];\n            }\n            if (rawSearchScope.every((searchScope) => Range.isIRange(searchScope))) {\n                searchRanges = rawSearchScope.map((searchScope) => this.validateRange(searchScope));\n            }\n        }\n        if (searchRanges === null) {\n            searchRanges = [this.getFullModelRange()];\n        }\n        searchRanges = searchRanges.sort((d1, d2) => d1.startLineNumber - d2.startLineNumber || d1.startColumn - d2.startColumn);\n        const uniqueSearchRanges = [];\n        uniqueSearchRanges.push(searchRanges.reduce((prev, curr) => {\n            if (Range.areIntersecting(prev, curr)) {\n                return prev.plusRange(curr);\n            }\n            uniqueSearchRanges.push(prev);\n            return curr;\n        }));\n        let matchMapper;\n        if (!isRegex && searchString.indexOf('\\n') < 0) {\n            // not regex, not multi line\n            const searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n            const searchData = searchParams.parseSearchRequest();\n            if (!searchData) {\n                return [];\n            }\n            matchMapper = (searchRange) => this.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n        }\n        else {\n            matchMapper = (searchRange) => TextModelSearch.findMatches(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchRange, captureMatches, limitResultCount);\n        }\n        return uniqueSearchRanges.map(matchMapper).reduce((arr, matches) => arr.concat(matches), []);\n    }\n    findNextMatch(searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n        this._assertNotDisposed();\n        const searchStart = this.validatePosition(rawSearchStart);\n        if (!isRegex && searchString.indexOf('\\n') < 0) {\n            const searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n            const searchData = searchParams.parseSearchRequest();\n            if (!searchData) {\n                return null;\n            }\n            const lineCount = this.getLineCount();\n            let searchRange = new Range(searchStart.lineNumber, searchStart.column, lineCount, this.getLineMaxColumn(lineCount));\n            let ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n            TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n            if (ret.length > 0) {\n                return ret[0];\n            }\n            searchRange = new Range(1, 1, searchStart.lineNumber, this.getLineMaxColumn(searchStart.lineNumber));\n            ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n            if (ret.length > 0) {\n                return ret[0];\n            }\n            return null;\n        }\n        return TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n    }\n    findPreviousMatch(searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n        this._assertNotDisposed();\n        const searchStart = this.validatePosition(rawSearchStart);\n        return TextModelSearch.findPreviousMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n    }\n    //#endregion\n    //#region Editing\n    pushStackElement() {\n        this._commandManager.pushStackElement();\n    }\n    popStackElement() {\n        this._commandManager.popStackElement();\n    }\n    pushEOL(eol) {\n        const currentEOL = (this.getEOL() === '\\n' ? 0 /* model.EndOfLineSequence.LF */ : 1 /* model.EndOfLineSequence.CRLF */);\n        if (currentEOL === eol) {\n            return;\n        }\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            if (this._initialUndoRedoSnapshot === null) {\n                this._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n            }\n            this._commandManager.pushEOL(eol);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _validateEditOperation(rawOperation) {\n        if (rawOperation instanceof model.ValidAnnotatedEditOperation) {\n            return rawOperation;\n        }\n        return new model.ValidAnnotatedEditOperation(rawOperation.identifier || null, this.validateRange(rawOperation.range), rawOperation.text, rawOperation.forceMoveMarkers || false, rawOperation.isAutoWhitespaceEdit || false, rawOperation._isTracked || false);\n    }\n    _validateEditOperations(rawOperations) {\n        const result = [];\n        for (let i = 0, len = rawOperations.length; i < len; i++) {\n            result[i] = this._validateEditOperation(rawOperations[i]);\n        }\n        return result;\n    }\n    pushEditOperations(beforeCursorState, editOperations, cursorStateComputer, group) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            return this._pushEditOperations(beforeCursorState, this._validateEditOperations(editOperations), cursorStateComputer, group);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _pushEditOperations(beforeCursorState, editOperations, cursorStateComputer, group) {\n        if (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {\n            // Go through each saved line number and insert a trim whitespace edit\n            // if it is safe to do so (no conflicts with other edits).\n            const incomingEdits = editOperations.map((op) => {\n                return {\n                    range: this.validateRange(op.range),\n                    text: op.text\n                };\n            });\n            // Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\n            // We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\n            let editsAreNearCursors = true;\n            if (beforeCursorState) {\n                for (let i = 0, len = beforeCursorState.length; i < len; i++) {\n                    const sel = beforeCursorState[i];\n                    let foundEditNearSel = false;\n                    for (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n                        const editRange = incomingEdits[j].range;\n                        const selIsAbove = editRange.startLineNumber > sel.endLineNumber;\n                        const selIsBelow = sel.startLineNumber > editRange.endLineNumber;\n                        if (!selIsAbove && !selIsBelow) {\n                            foundEditNearSel = true;\n                            break;\n                        }\n                    }\n                    if (!foundEditNearSel) {\n                        editsAreNearCursors = false;\n                        break;\n                    }\n                }\n            }\n            if (editsAreNearCursors) {\n                for (let i = 0, len = this._trimAutoWhitespaceLines.length; i < len; i++) {\n                    const trimLineNumber = this._trimAutoWhitespaceLines[i];\n                    const maxLineColumn = this.getLineMaxColumn(trimLineNumber);\n                    let allowTrimLine = true;\n                    for (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n                        const editRange = incomingEdits[j].range;\n                        const editText = incomingEdits[j].text;\n                        if (trimLineNumber < editRange.startLineNumber || trimLineNumber > editRange.endLineNumber) {\n                            // `trimLine` is completely outside this edit\n                            continue;\n                        }\n                        // At this point:\n                        //   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\n                        if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === maxLineColumn\n                            && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(0) === '\\n') {\n                            // This edit inserts a new line (and maybe other text) after `trimLine`\n                            continue;\n                        }\n                        if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === 1\n                            && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(editText.length - 1) === '\\n') {\n                            // This edit inserts a new line (and maybe other text) before `trimLine`\n                            continue;\n                        }\n                        // Looks like we can't trim this line as it would interfere with an incoming edit\n                        allowTrimLine = false;\n                        break;\n                    }\n                    if (allowTrimLine) {\n                        const trimRange = new Range(trimLineNumber, 1, trimLineNumber, maxLineColumn);\n                        editOperations.push(new model.ValidAnnotatedEditOperation(null, trimRange, null, false, false, false));\n                    }\n                }\n            }\n            this._trimAutoWhitespaceLines = null;\n        }\n        if (this._initialUndoRedoSnapshot === null) {\n            this._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n        }\n        return this._commandManager.pushEditOperation(beforeCursorState, editOperations, cursorStateComputer, group);\n    }\n    _applyUndo(changes, eol, resultingAlternativeVersionId, resultingSelection) {\n        const edits = changes.map((change) => {\n            const rangeStart = this.getPositionAt(change.newPosition);\n            const rangeEnd = this.getPositionAt(change.newEnd);\n            return {\n                range: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n                text: change.oldText\n            };\n        });\n        this._applyUndoRedoEdits(edits, eol, true, false, resultingAlternativeVersionId, resultingSelection);\n    }\n    _applyRedo(changes, eol, resultingAlternativeVersionId, resultingSelection) {\n        const edits = changes.map((change) => {\n            const rangeStart = this.getPositionAt(change.oldPosition);\n            const rangeEnd = this.getPositionAt(change.oldEnd);\n            return {\n                range: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n                text: change.newText\n            };\n        });\n        this._applyUndoRedoEdits(edits, eol, false, true, resultingAlternativeVersionId, resultingSelection);\n    }\n    _applyUndoRedoEdits(edits, eol, isUndoing, isRedoing, resultingAlternativeVersionId, resultingSelection) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            this._isUndoing = isUndoing;\n            this._isRedoing = isRedoing;\n            this.applyEdits(edits, false);\n            this.setEOL(eol);\n            this._overwriteAlternativeVersionId(resultingAlternativeVersionId);\n        }\n        finally {\n            this._isUndoing = false;\n            this._isRedoing = false;\n            this._eventEmitter.endDeferredEmit(resultingSelection);\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    applyEdits(rawOperations, computeUndoEdits = false) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            const operations = this._validateEditOperations(rawOperations);\n            return this._doApplyEdits(operations, computeUndoEdits);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _doApplyEdits(rawOperations, computeUndoEdits) {\n        const oldLineCount = this._buffer.getLineCount();\n        const result = this._buffer.applyEdits(rawOperations, this._options.trimAutoWhitespace, computeUndoEdits);\n        const newLineCount = this._buffer.getLineCount();\n        const contentChanges = result.changes;\n        this._trimAutoWhitespaceLines = result.trimAutoWhitespaceLineNumbers;\n        if (contentChanges.length !== 0) {\n            // We do a first pass to update tokens and decorations\n            // because we want to read decorations in the second pass\n            // where we will emit content change events\n            // and we want to read the final decorations\n            for (let i = 0, len = contentChanges.length; i < len; i++) {\n                const change = contentChanges[i];\n                const [eolCount, firstLineLength, lastLineLength] = countEOL(change.text);\n                this._tokenizationTextModelPart.acceptEdit(change.range, change.text, eolCount, firstLineLength, lastLineLength);\n                this._decorationsTree.acceptReplace(change.rangeOffset, change.rangeLength, change.text.length, change.forceMoveMarkers);\n            }\n            const rawContentChanges = [];\n            this._increaseVersionId();\n            let lineCount = oldLineCount;\n            for (let i = 0, len = contentChanges.length; i < len; i++) {\n                const change = contentChanges[i];\n                const [eolCount] = countEOL(change.text);\n                this._onDidChangeDecorations.fire();\n                const startLineNumber = change.range.startLineNumber;\n                const endLineNumber = change.range.endLineNumber;\n                const deletingLinesCnt = endLineNumber - startLineNumber;\n                const insertingLinesCnt = eolCount;\n                const editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\n                const changeLineCountDelta = (insertingLinesCnt - deletingLinesCnt);\n                const currentEditStartLineNumber = newLineCount - lineCount - changeLineCountDelta + startLineNumber;\n                const firstEditLineNumber = currentEditStartLineNumber;\n                const lastInsertedLineNumber = currentEditStartLineNumber + insertingLinesCnt;\n                const decorationsWithInjectedTextInEditedRange = this._decorationsTree.getInjectedTextInInterval(this, this.getOffsetAt(new Position(firstEditLineNumber, 1)), this.getOffsetAt(new Position(lastInsertedLineNumber, this.getLineMaxColumn(lastInsertedLineNumber))), 0);\n                const injectedTextInEditedRange = LineInjectedText.fromDecorations(decorationsWithInjectedTextInEditedRange);\n                const injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n                for (let j = editingLinesCnt; j >= 0; j--) {\n                    const editLineNumber = startLineNumber + j;\n                    const currentEditLineNumber = currentEditStartLineNumber + j;\n                    injectedTextInEditedRangeQueue.takeFromEndWhile(r => r.lineNumber > currentEditLineNumber);\n                    const decorationsInCurrentLine = injectedTextInEditedRangeQueue.takeFromEndWhile(r => r.lineNumber === currentEditLineNumber);\n                    rawContentChanges.push(new ModelRawLineChanged(editLineNumber, this.getLineContent(currentEditLineNumber), decorationsInCurrentLine));\n                }\n                if (editingLinesCnt < deletingLinesCnt) {\n                    // Must delete some lines\n                    const spliceStartLineNumber = startLineNumber + editingLinesCnt;\n                    rawContentChanges.push(new ModelRawLinesDeleted(spliceStartLineNumber + 1, endLineNumber));\n                }\n                if (editingLinesCnt < insertingLinesCnt) {\n                    const injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n                    // Must insert some lines\n                    const spliceLineNumber = startLineNumber + editingLinesCnt;\n                    const cnt = insertingLinesCnt - editingLinesCnt;\n                    const fromLineNumber = newLineCount - lineCount - cnt + spliceLineNumber + 1;\n                    const injectedTexts = [];\n                    const newLines = [];\n                    for (let i = 0; i < cnt; i++) {\n                        const lineNumber = fromLineNumber + i;\n                        newLines[i] = this.getLineContent(lineNumber);\n                        injectedTextInEditedRangeQueue.takeWhile(r => r.lineNumber < lineNumber);\n                        injectedTexts[i] = injectedTextInEditedRangeQueue.takeWhile(r => r.lineNumber === lineNumber);\n                    }\n                    rawContentChanges.push(new ModelRawLinesInserted(spliceLineNumber + 1, startLineNumber + insertingLinesCnt, newLines, injectedTexts));\n                }\n                lineCount += changeLineCountDelta;\n            }\n            this._emitContentChangedEvent(new ModelRawContentChangedEvent(rawContentChanges, this.getVersionId(), this._isUndoing, this._isRedoing), {\n                changes: contentChanges,\n                eol: this._buffer.getEOL(),\n                versionId: this.getVersionId(),\n                isUndoing: this._isUndoing,\n                isRedoing: this._isRedoing,\n                isFlush: false\n            });\n        }\n        return (result.reverseEdits === null ? undefined : result.reverseEdits);\n    }\n    undo() {\n        return this._undoRedoService.undo(this.uri);\n    }\n    canUndo() {\n        return this._undoRedoService.canUndo(this.uri);\n    }\n    redo() {\n        return this._undoRedoService.redo(this.uri);\n    }\n    canRedo() {\n        return this._undoRedoService.canRedo(this.uri);\n    }\n    //#endregion\n    //#region Decorations\n    handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines) {\n        // This is called before the decoration changed event is fired.\n        if (affectedInjectedTextLines === null || affectedInjectedTextLines.size === 0) {\n            return;\n        }\n        const affectedLines = Array.from(affectedInjectedTextLines);\n        const lineChangeEvents = affectedLines.map(lineNumber => new ModelRawLineChanged(lineNumber, this.getLineContent(lineNumber), this._getInjectedTextInLine(lineNumber)));\n        this._onDidChangeInjectedText.fire(new ModelInjectedTextChangedEvent(lineChangeEvents));\n    }\n    changeDecorations(callback, ownerId = 0) {\n        this._assertNotDisposed();\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            return this._changeDecorations(ownerId, callback);\n        }\n        finally {\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _changeDecorations(ownerId, callback) {\n        const changeAccessor = {\n            addDecoration: (range, options) => {\n                return this._deltaDecorationsImpl(ownerId, [], [{ range: range, options: options }])[0];\n            },\n            changeDecoration: (id, newRange) => {\n                this._changeDecorationImpl(id, newRange);\n            },\n            changeDecorationOptions: (id, options) => {\n                this._changeDecorationOptionsImpl(id, _normalizeOptions(options));\n            },\n            removeDecoration: (id) => {\n                this._deltaDecorationsImpl(ownerId, [id], []);\n            },\n            deltaDecorations: (oldDecorations, newDecorations) => {\n                if (oldDecorations.length === 0 && newDecorations.length === 0) {\n                    // nothing to do\n                    return [];\n                }\n                return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n            }\n        };\n        let result = null;\n        try {\n            result = callback(changeAccessor);\n        }\n        catch (e) {\n            onUnexpectedError(e);\n        }\n        // Invalidate change accessor\n        changeAccessor.addDecoration = invalidFunc;\n        changeAccessor.changeDecoration = invalidFunc;\n        changeAccessor.changeDecorationOptions = invalidFunc;\n        changeAccessor.removeDecoration = invalidFunc;\n        changeAccessor.deltaDecorations = invalidFunc;\n        return result;\n    }\n    deltaDecorations(oldDecorations, newDecorations, ownerId = 0) {\n        this._assertNotDisposed();\n        if (!oldDecorations) {\n            oldDecorations = [];\n        }\n        if (oldDecorations.length === 0 && newDecorations.length === 0) {\n            // nothing to do\n            return [];\n        }\n        try {\n            this._deltaDecorationCallCnt++;\n            if (this._deltaDecorationCallCnt > 1) {\n                console.warn(`Invoking deltaDecorations recursively could lead to leaking decorations.`);\n                onUnexpectedError(new Error(`Invoking deltaDecorations recursively could lead to leaking decorations.`));\n            }\n            this._onDidChangeDecorations.beginDeferredEmit();\n            return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n        }\n        finally {\n            this._onDidChangeDecorations.endDeferredEmit();\n            this._deltaDecorationCallCnt--;\n        }\n    }\n    _getTrackedRange(id) {\n        return this.getDecorationRange(id);\n    }\n    _setTrackedRange(id, newRange, newStickiness) {\n        const node = (id ? this._decorations[id] : null);\n        if (!node) {\n            if (!newRange) {\n                // node doesn't exist, the request is to delete => nothing to do\n                return null;\n            }\n            // node doesn't exist, the request is to set => add the tracked range\n            return this._deltaDecorationsImpl(0, [], [{ range: newRange, options: TRACKED_RANGE_OPTIONS[newStickiness] }])[0];\n        }\n        if (!newRange) {\n            // node exists, the request is to delete => delete node\n            this._decorationsTree.delete(node);\n            delete this._decorations[node.id];\n            return null;\n        }\n        // node exists, the request is to set => change the tracked range and its options\n        const range = this._validateRangeRelaxedNoAllocations(newRange);\n        const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n        const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n        this._decorationsTree.delete(node);\n        node.reset(this.getVersionId(), startOffset, endOffset, range);\n        node.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\n        this._decorationsTree.insert(node);\n        return node.id;\n    }\n    removeAllDecorationsWithOwnerId(ownerId) {\n        if (this._isDisposed) {\n            return;\n        }\n        const nodes = this._decorationsTree.collectNodesFromOwner(ownerId);\n        for (let i = 0, len = nodes.length; i < len; i++) {\n            const node = nodes[i];\n            this._decorationsTree.delete(node);\n            delete this._decorations[node.id];\n        }\n    }\n    getDecorationOptions(decorationId) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return null;\n        }\n        return node.options;\n    }\n    getDecorationRange(decorationId) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return null;\n        }\n        return this._decorationsTree.getNodeRange(this, node);\n    }\n    getLineDecorations(lineNumber, ownerId = 0, filterOutValidation = false) {\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            return [];\n        }\n        return this.getLinesDecorations(lineNumber, lineNumber, ownerId, filterOutValidation);\n    }\n    getLinesDecorations(_startLineNumber, _endLineNumber, ownerId = 0, filterOutValidation = false) {\n        const lineCount = this.getLineCount();\n        const startLineNumber = Math.min(lineCount, Math.max(1, _startLineNumber));\n        const endLineNumber = Math.min(lineCount, Math.max(1, _endLineNumber));\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        const range = new Range(startLineNumber, 1, endLineNumber, endColumn);\n        const decorations = this._getDecorationsInRange(range, ownerId, filterOutValidation);\n        pushMany(decorations, this._decorationProvider.getDecorationsInRange(range, ownerId, filterOutValidation));\n        return decorations;\n    }\n    getDecorationsInRange(range, ownerId = 0, filterOutValidation = false, onlyMinimapDecorations = false) {\n        const validatedRange = this.validateRange(range);\n        const decorations = this._getDecorationsInRange(validatedRange, ownerId, filterOutValidation);\n        pushMany(decorations, this._decorationProvider.getDecorationsInRange(validatedRange, ownerId, filterOutValidation, onlyMinimapDecorations));\n        return decorations;\n    }\n    getOverviewRulerDecorations(ownerId = 0, filterOutValidation = false) {\n        return this._decorationsTree.getAll(this, ownerId, filterOutValidation, true);\n    }\n    getInjectedTextDecorations(ownerId = 0) {\n        return this._decorationsTree.getAllInjectedText(this, ownerId);\n    }\n    _getInjectedTextInLine(lineNumber) {\n        const startOffset = this._buffer.getOffsetAt(lineNumber, 1);\n        const endOffset = startOffset + this._buffer.getLineLength(lineNumber);\n        const result = this._decorationsTree.getInjectedTextInInterval(this, startOffset, endOffset, 0);\n        return LineInjectedText.fromDecorations(result).filter(t => t.lineNumber === lineNumber);\n    }\n    getAllDecorations(ownerId = 0, filterOutValidation = false) {\n        let result = this._decorationsTree.getAll(this, ownerId, filterOutValidation, false);\n        result = result.concat(this._decorationProvider.getAllDecorations(ownerId, filterOutValidation));\n        return result;\n    }\n    _getDecorationsInRange(filterRange, filterOwnerId, filterOutValidation) {\n        const startOffset = this._buffer.getOffsetAt(filterRange.startLineNumber, filterRange.startColumn);\n        const endOffset = this._buffer.getOffsetAt(filterRange.endLineNumber, filterRange.endColumn);\n        return this._decorationsTree.getAllInInterval(this, startOffset, endOffset, filterOwnerId, filterOutValidation);\n    }\n    getRangeAt(start, end) {\n        return this._buffer.getRangeAt(start, end - start);\n    }\n    _changeDecorationImpl(decorationId, _range) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return;\n        }\n        if (node.options.after) {\n            const oldRange = this.getDecorationRange(decorationId);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange.endLineNumber);\n        }\n        if (node.options.before) {\n            const oldRange = this.getDecorationRange(decorationId);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange.startLineNumber);\n        }\n        const range = this._validateRangeRelaxedNoAllocations(_range);\n        const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n        const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n        this._decorationsTree.delete(node);\n        node.reset(this.getVersionId(), startOffset, endOffset, range);\n        this._decorationsTree.insert(node);\n        this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n        if (node.options.after) {\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n        }\n        if (node.options.before) {\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n        }\n    }\n    _changeDecorationOptionsImpl(decorationId, options) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return;\n        }\n        const nodeWasInOverviewRuler = (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\n        const nodeIsInOverviewRuler = (options.overviewRuler && options.overviewRuler.color ? true : false);\n        this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n        this._onDidChangeDecorations.checkAffectedAndFire(options);\n        if (node.options.after || options.after) {\n            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n        }\n        if (node.options.before || options.before) {\n            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber);\n        }\n        if (nodeWasInOverviewRuler !== nodeIsInOverviewRuler) {\n            // Delete + Insert due to an overview ruler status change\n            this._decorationsTree.delete(node);\n            node.setOptions(options);\n            this._decorationsTree.insert(node);\n        }\n        else {\n            node.setOptions(options);\n        }\n    }\n    _deltaDecorationsImpl(ownerId, oldDecorationsIds, newDecorations) {\n        const versionId = this.getVersionId();\n        const oldDecorationsLen = oldDecorationsIds.length;\n        let oldDecorationIndex = 0;\n        const newDecorationsLen = newDecorations.length;\n        let newDecorationIndex = 0;\n        this._onDidChangeDecorations.beginDeferredEmit();\n        try {\n            const result = new Array(newDecorationsLen);\n            while (oldDecorationIndex < oldDecorationsLen || newDecorationIndex < newDecorationsLen) {\n                let node = null;\n                if (oldDecorationIndex < oldDecorationsLen) {\n                    // (1) get ourselves an old node\n                    do {\n                        node = this._decorations[oldDecorationsIds[oldDecorationIndex++]];\n                    } while (!node && oldDecorationIndex < oldDecorationsLen);\n                    // (2) remove the node from the tree (if it exists)\n                    if (node) {\n                        if (node.options.after) {\n                            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n                            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n                        }\n                        if (node.options.before) {\n                            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n                            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber);\n                        }\n                        this._decorationsTree.delete(node);\n                        this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n                    }\n                }\n                if (newDecorationIndex < newDecorationsLen) {\n                    // (3) create a new node if necessary\n                    if (!node) {\n                        const internalDecorationId = (++this._lastDecorationId);\n                        const decorationId = `${this._instanceId};${internalDecorationId}`;\n                        node = new IntervalNode(decorationId, 0, 0);\n                        this._decorations[decorationId] = node;\n                    }\n                    // (4) initialize node\n                    const newDecoration = newDecorations[newDecorationIndex];\n                    const range = this._validateRangeRelaxedNoAllocations(newDecoration.range);\n                    const options = _normalizeOptions(newDecoration.options);\n                    const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n                    const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n                    node.ownerId = ownerId;\n                    node.reset(versionId, startOffset, endOffset, range);\n                    node.setOptions(options);\n                    if (node.options.after) {\n                        this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n                    }\n                    if (node.options.before) {\n                        this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n                    }\n                    this._onDidChangeDecorations.checkAffectedAndFire(options);\n                    this._decorationsTree.insert(node);\n                    result[newDecorationIndex] = node.id;\n                    newDecorationIndex++;\n                }\n                else {\n                    if (node) {\n                        delete this._decorations[node.id];\n                    }\n                }\n            }\n            return result;\n        }\n        finally {\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    //#endregion\n    //#region Tokenization\n    // TODO move them to the tokenization part.\n    getLanguageId() {\n        return this.tokenization.getLanguageId();\n    }\n    setMode(languageId, source) {\n        this.tokenization.setLanguageId(languageId, source);\n    }\n    getLanguageIdAtPosition(lineNumber, column) {\n        return this.tokenization.getLanguageIdAtPosition(lineNumber, column);\n    }\n    getWordAtPosition(position) {\n        return this._tokenizationTextModelPart.getWordAtPosition(position);\n    }\n    getWordUntilPosition(position) {\n        return this._tokenizationTextModelPart.getWordUntilPosition(position);\n    }\n    //#endregion\n    normalizePosition(position, affinity) {\n        return position;\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n    getLineIndentColumn(lineNumber) {\n        // Columns start with 1.\n        return indentOfLine(this.getLineContent(lineNumber)) + 1;\n    }\n};\nTextModel._MODEL_SYNC_LIMIT = 50 * 1024 * 1024; // 50 MB,  // used in tests\nTextModel.LARGE_FILE_SIZE_THRESHOLD = 20 * 1024 * 1024; // 20 MB;\nTextModel.LARGE_FILE_LINE_COUNT_THRESHOLD = 300 * 1000; // 300K lines\nTextModel.DEFAULT_CREATION_OPTIONS = {\n    isForSimpleWidget: false,\n    tabSize: EDITOR_MODEL_DEFAULTS.tabSize,\n    indentSize: EDITOR_MODEL_DEFAULTS.indentSize,\n    insertSpaces: EDITOR_MODEL_DEFAULTS.insertSpaces,\n    detectIndentation: false,\n    defaultEOL: 1 /* model.DefaultEndOfLine.LF */,\n    trimAutoWhitespace: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n    largeFileOptimizations: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n    bracketPairColorizationOptions: EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions,\n};\nTextModel = __decorate([\n    __param(4, IUndoRedoService),\n    __param(5, ILanguageService),\n    __param(6, ILanguageConfigurationService)\n], TextModel);\nexport { TextModel };\nfunction indentOfLine(line) {\n    let indent = 0;\n    for (const c of line) {\n        if (c === ' ' || c === '\\t') {\n            indent++;\n        }\n        else {\n            break;\n        }\n    }\n    return indent;\n}\n//#region Decorations\nfunction isNodeInOverviewRuler(node) {\n    return (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\n}\nfunction isNodeInjectedText(node) {\n    return !!node.options.after || !!node.options.before;\n}\nclass DecorationsTrees {\n    constructor() {\n        this._decorationsTree0 = new IntervalTree();\n        this._decorationsTree1 = new IntervalTree();\n        this._injectedTextDecorationsTree = new IntervalTree();\n    }\n    ensureAllNodesHaveRanges(host) {\n        this.getAll(host, 0, false, false);\n    }\n    _ensureNodesHaveRanges(host, nodes) {\n        for (const node of nodes) {\n            if (node.range === null) {\n                node.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n            }\n        }\n        return nodes;\n    }\n    getAllInInterval(host, start, end, filterOwnerId, filterOutValidation) {\n        const versionId = host.getVersionId();\n        const result = this._intervalSearch(start, end, filterOwnerId, filterOutValidation, versionId);\n        return this._ensureNodesHaveRanges(host, result);\n    }\n    _intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId) {\n        const r0 = this._decorationsTree0.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId);\n        const r1 = this._decorationsTree1.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId);\n        const r2 = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId);\n        return r0.concat(r1).concat(r2);\n    }\n    getInjectedTextInInterval(host, start, end, filterOwnerId) {\n        const versionId = host.getVersionId();\n        const result = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, false, versionId);\n        return this._ensureNodesHaveRanges(host, result).filter((i) => i.options.showIfCollapsed || !i.range.isEmpty());\n    }\n    getAllInjectedText(host, filterOwnerId) {\n        const versionId = host.getVersionId();\n        const result = this._injectedTextDecorationsTree.search(filterOwnerId, false, versionId);\n        return this._ensureNodesHaveRanges(host, result).filter((i) => i.options.showIfCollapsed || !i.range.isEmpty());\n    }\n    getAll(host, filterOwnerId, filterOutValidation, overviewRulerOnly) {\n        const versionId = host.getVersionId();\n        const result = this._search(filterOwnerId, filterOutValidation, overviewRulerOnly, versionId);\n        return this._ensureNodesHaveRanges(host, result);\n    }\n    _search(filterOwnerId, filterOutValidation, overviewRulerOnly, cachedVersionId) {\n        if (overviewRulerOnly) {\n            return this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId);\n        }\n        else {\n            const r0 = this._decorationsTree0.search(filterOwnerId, filterOutValidation, cachedVersionId);\n            const r1 = this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId);\n            const r2 = this._injectedTextDecorationsTree.search(filterOwnerId, filterOutValidation, cachedVersionId);\n            return r0.concat(r1).concat(r2);\n        }\n    }\n    collectNodesFromOwner(ownerId) {\n        const r0 = this._decorationsTree0.collectNodesFromOwner(ownerId);\n        const r1 = this._decorationsTree1.collectNodesFromOwner(ownerId);\n        const r2 = this._injectedTextDecorationsTree.collectNodesFromOwner(ownerId);\n        return r0.concat(r1).concat(r2);\n    }\n    collectNodesPostOrder() {\n        const r0 = this._decorationsTree0.collectNodesPostOrder();\n        const r1 = this._decorationsTree1.collectNodesPostOrder();\n        const r2 = this._injectedTextDecorationsTree.collectNodesPostOrder();\n        return r0.concat(r1).concat(r2);\n    }\n    insert(node) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.insert(node);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.insert(node);\n        }\n        else {\n            this._decorationsTree0.insert(node);\n        }\n    }\n    delete(node) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.delete(node);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.delete(node);\n        }\n        else {\n            this._decorationsTree0.delete(node);\n        }\n    }\n    getNodeRange(host, node) {\n        const versionId = host.getVersionId();\n        if (node.cachedVersionId !== versionId) {\n            this._resolveNode(node, versionId);\n        }\n        if (node.range === null) {\n            node.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n        }\n        return node.range;\n    }\n    _resolveNode(node, cachedVersionId) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.resolveNode(node, cachedVersionId);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.resolveNode(node, cachedVersionId);\n        }\n        else {\n            this._decorationsTree0.resolveNode(node, cachedVersionId);\n        }\n    }\n    acceptReplace(offset, length, textLength, forceMoveMarkers) {\n        this._decorationsTree0.acceptReplace(offset, length, textLength, forceMoveMarkers);\n        this._decorationsTree1.acceptReplace(offset, length, textLength, forceMoveMarkers);\n        this._injectedTextDecorationsTree.acceptReplace(offset, length, textLength, forceMoveMarkers);\n    }\n}\nfunction cleanClassName(className) {\n    return className.replace(/[^a-z0-9\\-_]/gi, ' ');\n}\nclass DecorationOptions {\n    constructor(options) {\n        this.color = options.color || '';\n        this.darkColor = options.darkColor || '';\n    }\n}\nexport class ModelDecorationOverviewRulerOptions extends DecorationOptions {\n    constructor(options) {\n        super(options);\n        this._resolvedColor = null;\n        this.position = (typeof options.position === 'number' ? options.position : model.OverviewRulerLane.Center);\n    }\n    getColor(theme) {\n        if (!this._resolvedColor) {\n            if (theme.type !== 'light' && this.darkColor) {\n                this._resolvedColor = this._resolveColor(this.darkColor, theme);\n            }\n            else {\n                this._resolvedColor = this._resolveColor(this.color, theme);\n            }\n        }\n        return this._resolvedColor;\n    }\n    invalidateCachedColor() {\n        this._resolvedColor = null;\n    }\n    _resolveColor(color, theme) {\n        if (typeof color === 'string') {\n            return color;\n        }\n        const c = color ? theme.getColor(color.id) : null;\n        if (!c) {\n            return '';\n        }\n        return c.toString();\n    }\n}\nexport class ModelDecorationMinimapOptions extends DecorationOptions {\n    constructor(options) {\n        super(options);\n        this.position = options.position;\n    }\n    getColor(theme) {\n        if (!this._resolvedColor) {\n            if (theme.type !== 'light' && this.darkColor) {\n                this._resolvedColor = this._resolveColor(this.darkColor, theme);\n            }\n            else {\n                this._resolvedColor = this._resolveColor(this.color, theme);\n            }\n        }\n        return this._resolvedColor;\n    }\n    invalidateCachedColor() {\n        this._resolvedColor = undefined;\n    }\n    _resolveColor(color, theme) {\n        if (typeof color === 'string') {\n            return Color.fromHex(color);\n        }\n        return theme.getColor(color.id);\n    }\n}\nexport class ModelDecorationInjectedTextOptions {\n    static from(options) {\n        if (options instanceof ModelDecorationInjectedTextOptions) {\n            return options;\n        }\n        return new ModelDecorationInjectedTextOptions(options);\n    }\n    constructor(options) {\n        this.content = options.content || '';\n        this.inlineClassName = options.inlineClassName || null;\n        this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n        this.attachedData = options.attachedData || null;\n        this.cursorStops = options.cursorStops || null;\n    }\n}\nexport class ModelDecorationOptions {\n    static register(options) {\n        return new ModelDecorationOptions(options);\n    }\n    static createDynamic(options) {\n        return new ModelDecorationOptions(options);\n    }\n    constructor(options) {\n        var _a, _b, _c;\n        this.description = options.description;\n        this.blockClassName = options.blockClassName ? cleanClassName(options.blockClassName) : null;\n        this.blockIsAfterEnd = (_a = options.blockIsAfterEnd) !== null && _a !== void 0 ? _a : null;\n        this.stickiness = options.stickiness || 0 /* model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */;\n        this.zIndex = options.zIndex || 0;\n        this.className = options.className ? cleanClassName(options.className) : null;\n        this.hoverMessage = options.hoverMessage || null;\n        this.glyphMarginHoverMessage = options.glyphMarginHoverMessage || null;\n        this.isWholeLine = options.isWholeLine || false;\n        this.showIfCollapsed = options.showIfCollapsed || false;\n        this.collapseOnReplaceEdit = options.collapseOnReplaceEdit || false;\n        this.overviewRuler = options.overviewRuler ? new ModelDecorationOverviewRulerOptions(options.overviewRuler) : null;\n        this.minimap = options.minimap ? new ModelDecorationMinimapOptions(options.minimap) : null;\n        this.glyphMarginClassName = options.glyphMarginClassName ? cleanClassName(options.glyphMarginClassName) : null;\n        this.linesDecorationsClassName = options.linesDecorationsClassName ? cleanClassName(options.linesDecorationsClassName) : null;\n        this.firstLineDecorationClassName = options.firstLineDecorationClassName ? cleanClassName(options.firstLineDecorationClassName) : null;\n        this.marginClassName = options.marginClassName ? cleanClassName(options.marginClassName) : null;\n        this.inlineClassName = options.inlineClassName ? cleanClassName(options.inlineClassName) : null;\n        this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n        this.beforeContentClassName = options.beforeContentClassName ? cleanClassName(options.beforeContentClassName) : null;\n        this.afterContentClassName = options.afterContentClassName ? cleanClassName(options.afterContentClassName) : null;\n        this.after = options.after ? ModelDecorationInjectedTextOptions.from(options.after) : null;\n        this.before = options.before ? ModelDecorationInjectedTextOptions.from(options.before) : null;\n        this.hideInCommentTokens = (_b = options.hideInCommentTokens) !== null && _b !== void 0 ? _b : false;\n        this.hideInStringTokens = (_c = options.hideInStringTokens) !== null && _c !== void 0 ? _c : false;\n    }\n}\nModelDecorationOptions.EMPTY = ModelDecorationOptions.register({ description: 'empty' });\n/**\n * The order carefully matches the values of the enum.\n */\nconst TRACKED_RANGE_OPTIONS = [\n    ModelDecorationOptions.register({ description: 'tracked-range-always-grows-when-typing-at-edges', stickiness: 0 /* model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-never-grows-when-typing-at-edges', stickiness: 1 /* model.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-grows-only-when-typing-before', stickiness: 2 /* model.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-grows-only-when-typing-after', stickiness: 3 /* model.TrackedRangeStickiness.GrowsOnlyWhenTypingAfter */ }),\n];\nfunction _normalizeOptions(options) {\n    if (options instanceof ModelDecorationOptions) {\n        return options;\n    }\n    return ModelDecorationOptions.createDynamic(options);\n}\nclass DidChangeDecorationsEmitter extends Disposable {\n    constructor(handleBeforeFire) {\n        super();\n        this.handleBeforeFire = handleBeforeFire;\n        this._actual = this._register(new Emitter());\n        this.event = this._actual.event;\n        this._affectedInjectedTextLines = null;\n        this._deferredCnt = 0;\n        this._shouldFireDeferred = false;\n        this._affectsMinimap = false;\n        this._affectsOverviewRuler = false;\n    }\n    beginDeferredEmit() {\n        this._deferredCnt++;\n    }\n    endDeferredEmit() {\n        var _a;\n        this._deferredCnt--;\n        if (this._deferredCnt === 0) {\n            if (this._shouldFireDeferred) {\n                this.doFire();\n            }\n            (_a = this._affectedInjectedTextLines) === null || _a === void 0 ? void 0 : _a.clear();\n            this._affectedInjectedTextLines = null;\n        }\n    }\n    recordLineAffectedByInjectedText(lineNumber) {\n        if (!this._affectedInjectedTextLines) {\n            this._affectedInjectedTextLines = new Set();\n        }\n        this._affectedInjectedTextLines.add(lineNumber);\n    }\n    checkAffectedAndFire(options) {\n        if (!this._affectsMinimap) {\n            this._affectsMinimap = options.minimap && options.minimap.position ? true : false;\n        }\n        if (!this._affectsOverviewRuler) {\n            this._affectsOverviewRuler = options.overviewRuler && options.overviewRuler.color ? true : false;\n        }\n        this.tryFire();\n    }\n    fire() {\n        this._affectsMinimap = true;\n        this._affectsOverviewRuler = true;\n        this.tryFire();\n    }\n    tryFire() {\n        if (this._deferredCnt === 0) {\n            this.doFire();\n        }\n        else {\n            this._shouldFireDeferred = true;\n        }\n    }\n    doFire() {\n        this.handleBeforeFire(this._affectedInjectedTextLines);\n        const event = {\n            affectsMinimap: this._affectsMinimap,\n            affectsOverviewRuler: this._affectsOverviewRuler\n        };\n        this._shouldFireDeferred = false;\n        this._affectsMinimap = false;\n        this._affectsOverviewRuler = false;\n        this._actual.fire(event);\n    }\n}\n//#endregion\nclass DidChangeContentEmitter extends Disposable {\n    constructor() {\n        super();\n        /**\n         * Both `fastEvent` and `slowEvent` work the same way and contain the same events, but first we invoke `fastEvent` and then `slowEvent`.\n         */\n        this._fastEmitter = this._register(new Emitter());\n        this.fastEvent = this._fastEmitter.event;\n        this._slowEmitter = this._register(new Emitter());\n        this.slowEvent = this._slowEmitter.event;\n        this._deferredCnt = 0;\n        this._deferredEvent = null;\n    }\n    beginDeferredEmit() {\n        this._deferredCnt++;\n    }\n    endDeferredEmit(resultingSelection = null) {\n        this._deferredCnt--;\n        if (this._deferredCnt === 0) {\n            if (this._deferredEvent !== null) {\n                this._deferredEvent.rawContentChangedEvent.resultingSelection = resultingSelection;\n                const e = this._deferredEvent;\n                this._deferredEvent = null;\n                this._fastEmitter.fire(e);\n                this._slowEmitter.fire(e);\n            }\n        }\n    }\n    fire(e) {\n        if (this._deferredCnt > 0) {\n            if (this._deferredEvent) {\n                this._deferredEvent = this._deferredEvent.merge(e);\n            }\n            else {\n                this._deferredEvent = e;\n            }\n            return;\n        }\n        this._fastEmitter.fire(e);\n        this._slowEmitter.fire(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../base/common/lifecycle.js';\nexport class TextModelPart extends Disposable {\n    constructor() {\n        super(...arguments);\n        this._isDisposed = false;\n    }\n    dispose() {\n        super.dispose();\n        this._isDisposed = true;\n    }\n    assertNotDisposed() {\n        if (this._isDisposed) {\n            throw new Error('TextModelPart is disposed!');\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { getMapForWordSeparators } from '../core/wordCharacterClassifier.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { FindMatch, SearchData } from '../model.js';\nconst LIMIT_FIND_COUNT = 999;\nexport class SearchParams {\n    constructor(searchString, isRegex, matchCase, wordSeparators) {\n        this.searchString = searchString;\n        this.isRegex = isRegex;\n        this.matchCase = matchCase;\n        this.wordSeparators = wordSeparators;\n    }\n    parseSearchRequest() {\n        if (this.searchString === '') {\n            return null;\n        }\n        // Try to create a RegExp out of the params\n        let multiline;\n        if (this.isRegex) {\n            multiline = isMultilineRegexSource(this.searchString);\n        }\n        else {\n            multiline = (this.searchString.indexOf('\\n') >= 0);\n        }\n        let regex = null;\n        try {\n            regex = strings.createRegExp(this.searchString, this.isRegex, {\n                matchCase: this.matchCase,\n                wholeWord: false,\n                multiline: multiline,\n                global: true,\n                unicode: true\n            });\n        }\n        catch (err) {\n            return null;\n        }\n        if (!regex) {\n            return null;\n        }\n        let canUseSimpleSearch = (!this.isRegex && !multiline);\n        if (canUseSimpleSearch && this.searchString.toLowerCase() !== this.searchString.toUpperCase()) {\n            // casing might make a difference\n            canUseSimpleSearch = this.matchCase;\n        }\n        return new SearchData(regex, this.wordSeparators ? getMapForWordSeparators(this.wordSeparators) : null, canUseSimpleSearch ? this.searchString : null);\n    }\n}\nexport function isMultilineRegexSource(searchString) {\n    if (!searchString || searchString.length === 0) {\n        return false;\n    }\n    for (let i = 0, len = searchString.length; i < len; i++) {\n        const chCode = searchString.charCodeAt(i);\n        if (chCode === 10 /* CharCode.LineFeed */) {\n            return true;\n        }\n        if (chCode === 92 /* CharCode.Backslash */) {\n            // move to next char\n            i++;\n            if (i >= len) {\n                // string ends with a \\\n                break;\n            }\n            const nextChCode = searchString.charCodeAt(i);\n            if (nextChCode === 110 /* CharCode.n */ || nextChCode === 114 /* CharCode.r */ || nextChCode === 87 /* CharCode.W */) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport function createFindMatch(range, rawMatches, captureMatches) {\n    if (!captureMatches) {\n        return new FindMatch(range, null);\n    }\n    const matches = [];\n    for (let i = 0, len = rawMatches.length; i < len; i++) {\n        matches[i] = rawMatches[i];\n    }\n    return new FindMatch(range, matches);\n}\nclass LineFeedCounter {\n    constructor(text) {\n        const lineFeedsOffsets = [];\n        let lineFeedsOffsetsLen = 0;\n        for (let i = 0, textLen = text.length; i < textLen; i++) {\n            if (text.charCodeAt(i) === 10 /* CharCode.LineFeed */) {\n                lineFeedsOffsets[lineFeedsOffsetsLen++] = i;\n            }\n        }\n        this._lineFeedsOffsets = lineFeedsOffsets;\n    }\n    findLineFeedCountBeforeOffset(offset) {\n        const lineFeedsOffsets = this._lineFeedsOffsets;\n        let min = 0;\n        let max = lineFeedsOffsets.length - 1;\n        if (max === -1) {\n            // no line feeds\n            return 0;\n        }\n        if (offset <= lineFeedsOffsets[0]) {\n            // before first line feed\n            return 0;\n        }\n        while (min < max) {\n            const mid = min + ((max - min) / 2 >> 0);\n            if (lineFeedsOffsets[mid] >= offset) {\n                max = mid - 1;\n            }\n            else {\n                if (lineFeedsOffsets[mid + 1] >= offset) {\n                    // bingo!\n                    min = mid;\n                    max = mid;\n                }\n                else {\n                    min = mid + 1;\n                }\n            }\n        }\n        return min + 1;\n    }\n}\nexport class TextModelSearch {\n    static findMatches(model, searchParams, searchRange, captureMatches, limitResultCount) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return [];\n        }\n        if (searchData.regex.multiline) {\n            return this._doFindMatchesMultiline(model, searchRange, new Searcher(searchData.wordSeparators, searchData.regex), captureMatches, limitResultCount);\n        }\n        return this._doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount);\n    }\n    /**\n     * Multiline search always executes on the lines concatenated with \\n.\n     * We must therefore compensate for the count of \\n in case the model is CRLF\n     */\n    static _getMultilineMatchRange(model, deltaOffset, text, lfCounter, matchIndex, match0) {\n        let startOffset;\n        let lineFeedCountBeforeMatch = 0;\n        if (lfCounter) {\n            lineFeedCountBeforeMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex);\n            startOffset = deltaOffset + matchIndex + lineFeedCountBeforeMatch /* add as many \\r as there were \\n */;\n        }\n        else {\n            startOffset = deltaOffset + matchIndex;\n        }\n        let endOffset;\n        if (lfCounter) {\n            const lineFeedCountBeforeEndOfMatch = lfCounter.findLineFeedCountBeforeOffset(matchIndex + match0.length);\n            const lineFeedCountInMatch = lineFeedCountBeforeEndOfMatch - lineFeedCountBeforeMatch;\n            endOffset = startOffset + match0.length + lineFeedCountInMatch /* add as many \\r as there were \\n */;\n        }\n        else {\n            endOffset = startOffset + match0.length;\n        }\n        const startPosition = model.getPositionAt(startOffset);\n        const endPosition = model.getPositionAt(endOffset);\n        return new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n    }\n    static _doFindMatchesMultiline(model, searchRange, searcher, captureMatches, limitResultCount) {\n        const deltaOffset = model.getOffsetAt(searchRange.getStartPosition());\n        // We always execute multiline search over the lines joined with \\n\n        // This makes it that \\n will match the EOL for both CRLF and LF models\n        // We compensate for offset errors in `_getMultilineMatchRange`\n        const text = model.getValueInRange(searchRange, 1 /* EndOfLinePreference.LF */);\n        const lfCounter = (model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null);\n        const result = [];\n        let counter = 0;\n        let m;\n        searcher.reset(0);\n        while ((m = searcher.next(text))) {\n            result[counter++] = createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\n            if (counter >= limitResultCount) {\n                return result;\n            }\n        }\n        return result;\n    }\n    static _doFindMatchesLineByLine(model, searchRange, searchData, captureMatches, limitResultCount) {\n        const result = [];\n        let resultLen = 0;\n        // Early case for a search range that starts & stops on the same line number\n        if (searchRange.startLineNumber === searchRange.endLineNumber) {\n            const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1, searchRange.endColumn - 1);\n            resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\n            return result;\n        }\n        // Collect results from first line\n        const text = model.getLineContent(searchRange.startLineNumber).substring(searchRange.startColumn - 1);\n        resultLen = this._findMatchesInLine(searchData, text, searchRange.startLineNumber, searchRange.startColumn - 1, resultLen, result, captureMatches, limitResultCount);\n        // Collect results from middle lines\n        for (let lineNumber = searchRange.startLineNumber + 1; lineNumber < searchRange.endLineNumber && resultLen < limitResultCount; lineNumber++) {\n            resultLen = this._findMatchesInLine(searchData, model.getLineContent(lineNumber), lineNumber, 0, resultLen, result, captureMatches, limitResultCount);\n        }\n        // Collect results from last line\n        if (resultLen < limitResultCount) {\n            const text = model.getLineContent(searchRange.endLineNumber).substring(0, searchRange.endColumn - 1);\n            resultLen = this._findMatchesInLine(searchData, text, searchRange.endLineNumber, 0, resultLen, result, captureMatches, limitResultCount);\n        }\n        return result;\n    }\n    static _findMatchesInLine(searchData, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {\n        const wordSeparators = searchData.wordSeparators;\n        if (!captureMatches && searchData.simpleSearch) {\n            const searchString = searchData.simpleSearch;\n            const searchStringLen = searchString.length;\n            const textLength = text.length;\n            let lastMatchIndex = -searchStringLen;\n            while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {\n                if (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {\n                    result[resultLen++] = new FindMatch(new Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);\n                    if (resultLen >= limitResultCount) {\n                        return resultLen;\n                    }\n                }\n            }\n            return resultLen;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        let m;\n        // Reset regex to search from the beginning\n        searcher.reset(0);\n        do {\n            m = searcher.next(text);\n            if (m) {\n                result[resultLen++] = createFindMatch(new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);\n                if (resultLen >= limitResultCount) {\n                    return resultLen;\n                }\n            }\n        } while (m);\n        return resultLen;\n    }\n    static findNextMatch(model, searchParams, searchStart, captureMatches) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return null;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        if (searchData.regex.multiline) {\n            return this._doFindNextMatchMultiline(model, searchStart, searcher, captureMatches);\n        }\n        return this._doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches);\n    }\n    static _doFindNextMatchMultiline(model, searchStart, searcher, captureMatches) {\n        const searchTextStart = new Position(searchStart.lineNumber, 1);\n        const deltaOffset = model.getOffsetAt(searchTextStart);\n        const lineCount = model.getLineCount();\n        // We always execute multiline search over the lines joined with \\n\n        // This makes it that \\n will match the EOL for both CRLF and LF models\n        // We compensate for offset errors in `_getMultilineMatchRange`\n        const text = model.getValueInRange(new Range(searchTextStart.lineNumber, searchTextStart.column, lineCount, model.getLineMaxColumn(lineCount)), 1 /* EndOfLinePreference.LF */);\n        const lfCounter = (model.getEOL() === '\\r\\n' ? new LineFeedCounter(text) : null);\n        searcher.reset(searchStart.column - 1);\n        const m = searcher.next(text);\n        if (m) {\n            return createFindMatch(this._getMultilineMatchRange(model, deltaOffset, text, lfCounter, m.index, m[0]), m, captureMatches);\n        }\n        if (searchStart.lineNumber !== 1 || searchStart.column !== 1) {\n            // Try again from the top\n            return this._doFindNextMatchMultiline(model, new Position(1, 1), searcher, captureMatches);\n        }\n        return null;\n    }\n    static _doFindNextMatchLineByLine(model, searchStart, searcher, captureMatches) {\n        const lineCount = model.getLineCount();\n        const startLineNumber = searchStart.lineNumber;\n        // Look in first line\n        const text = model.getLineContent(startLineNumber);\n        const r = this._findFirstMatchInLine(searcher, text, startLineNumber, searchStart.column, captureMatches);\n        if (r) {\n            return r;\n        }\n        for (let i = 1; i <= lineCount; i++) {\n            const lineIndex = (startLineNumber + i - 1) % lineCount;\n            const text = model.getLineContent(lineIndex + 1);\n            const r = this._findFirstMatchInLine(searcher, text, lineIndex + 1, 1, captureMatches);\n            if (r) {\n                return r;\n            }\n        }\n        return null;\n    }\n    static _findFirstMatchInLine(searcher, text, lineNumber, fromColumn, captureMatches) {\n        // Set regex to search from column\n        searcher.reset(fromColumn - 1);\n        const m = searcher.next(text);\n        if (m) {\n            return createFindMatch(new Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\n        }\n        return null;\n    }\n    static findPreviousMatch(model, searchParams, searchStart, captureMatches) {\n        const searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n            return null;\n        }\n        const searcher = new Searcher(searchData.wordSeparators, searchData.regex);\n        if (searchData.regex.multiline) {\n            return this._doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches);\n        }\n        return this._doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches);\n    }\n    static _doFindPreviousMatchMultiline(model, searchStart, searcher, captureMatches) {\n        const matches = this._doFindMatchesMultiline(model, new Range(1, 1, searchStart.lineNumber, searchStart.column), searcher, captureMatches, 10 * LIMIT_FIND_COUNT);\n        if (matches.length > 0) {\n            return matches[matches.length - 1];\n        }\n        const lineCount = model.getLineCount();\n        if (searchStart.lineNumber !== lineCount || searchStart.column !== model.getLineMaxColumn(lineCount)) {\n            // Try again with all content\n            return this._doFindPreviousMatchMultiline(model, new Position(lineCount, model.getLineMaxColumn(lineCount)), searcher, captureMatches);\n        }\n        return null;\n    }\n    static _doFindPreviousMatchLineByLine(model, searchStart, searcher, captureMatches) {\n        const lineCount = model.getLineCount();\n        const startLineNumber = searchStart.lineNumber;\n        // Look in first line\n        const text = model.getLineContent(startLineNumber).substring(0, searchStart.column - 1);\n        const r = this._findLastMatchInLine(searcher, text, startLineNumber, captureMatches);\n        if (r) {\n            return r;\n        }\n        for (let i = 1; i <= lineCount; i++) {\n            const lineIndex = (lineCount + startLineNumber - i - 1) % lineCount;\n            const text = model.getLineContent(lineIndex + 1);\n            const r = this._findLastMatchInLine(searcher, text, lineIndex + 1, captureMatches);\n            if (r) {\n                return r;\n            }\n        }\n        return null;\n    }\n    static _findLastMatchInLine(searcher, text, lineNumber, captureMatches) {\n        let bestResult = null;\n        let m;\n        searcher.reset(0);\n        while ((m = searcher.next(text))) {\n            bestResult = createFindMatch(new Range(lineNumber, m.index + 1, lineNumber, m.index + 1 + m[0].length), m, captureMatches);\n        }\n        return bestResult;\n    }\n}\nfunction leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    if (matchStartIndex === 0) {\n        // Match starts at start of string\n        return true;\n    }\n    const charBefore = text.charCodeAt(matchStartIndex - 1);\n    if (wordSeparators.get(charBefore) !== 0 /* WordCharacterClass.Regular */) {\n        // The character before the match is a word separator\n        return true;\n    }\n    if (charBefore === 13 /* CharCode.CarriageReturn */ || charBefore === 10 /* CharCode.LineFeed */) {\n        // The character before the match is line break or carriage return.\n        return true;\n    }\n    if (matchLength > 0) {\n        const firstCharInMatch = text.charCodeAt(matchStartIndex);\n        if (wordSeparators.get(firstCharInMatch) !== 0 /* WordCharacterClass.Regular */) {\n            // The first character inside the match is a word separator\n            return true;\n        }\n    }\n    return false;\n}\nfunction rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    if (matchStartIndex + matchLength === textLength) {\n        // Match ends at end of string\n        return true;\n    }\n    const charAfter = text.charCodeAt(matchStartIndex + matchLength);\n    if (wordSeparators.get(charAfter) !== 0 /* WordCharacterClass.Regular */) {\n        // The character after the match is a word separator\n        return true;\n    }\n    if (charAfter === 13 /* CharCode.CarriageReturn */ || charAfter === 10 /* CharCode.LineFeed */) {\n        // The character after the match is line break or carriage return.\n        return true;\n    }\n    if (matchLength > 0) {\n        const lastCharInMatch = text.charCodeAt(matchStartIndex + matchLength - 1);\n        if (wordSeparators.get(lastCharInMatch) !== 0 /* WordCharacterClass.Regular */) {\n            // The last character in the match is a word separator\n            return true;\n        }\n    }\n    return false;\n}\nexport function isValidMatch(wordSeparators, text, textLength, matchStartIndex, matchLength) {\n    return (leftIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength)\n        && rightIsWordBounday(wordSeparators, text, textLength, matchStartIndex, matchLength));\n}\nexport class Searcher {\n    constructor(wordSeparators, searchRegex) {\n        this._wordSeparators = wordSeparators;\n        this._searchRegex = searchRegex;\n        this._prevMatchStartIndex = -1;\n        this._prevMatchLength = 0;\n    }\n    reset(lastIndex) {\n        this._searchRegex.lastIndex = lastIndex;\n        this._prevMatchStartIndex = -1;\n        this._prevMatchLength = 0;\n    }\n    next(text) {\n        const textLength = text.length;\n        let m;\n        do {\n            if (this._prevMatchStartIndex + this._prevMatchLength === textLength) {\n                // Reached the end of the line\n                return null;\n            }\n            m = this._searchRegex.exec(text);\n            if (!m) {\n                return null;\n            }\n            const matchStartIndex = m.index;\n            const matchLength = m[0].length;\n            if (matchStartIndex === this._prevMatchStartIndex && matchLength === this._prevMatchLength) {\n                if (matchLength === 0) {\n                    // the search result is an empty string and won't advance `regex.lastIndex`, so `regex.exec` will stuck here\n                    // we attempt to recover from that by advancing by two if surrogate pair found and by one otherwise\n                    if (strings.getNextCodePoint(text, textLength, this._searchRegex.lastIndex) > 0xFFFF) {\n                        this._searchRegex.lastIndex += 2;\n                    }\n                    else {\n                        this._searchRegex.lastIndex += 1;\n                    }\n                    continue;\n                }\n                // Exit early if the regex matches the same range twice\n                return null;\n            }\n            this._prevMatchStartIndex = matchStartIndex;\n            this._prevMatchLength = matchLength;\n            if (!this._wordSeparators || isValidMatch(this._wordSeparators, text, textLength, matchStartIndex, matchLength)) {\n                return m;\n            }\n        } while (m);\n        return null;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Returns:\n *  - -1 => the line consists of whitespace\n *  - otherwise => the indent level is returned value\n */\nexport function computeIndentLevel(line, tabSize) {\n    let indent = 0;\n    let i = 0;\n    const len = line.length;\n    while (i < len) {\n        const chCode = line.charCodeAt(i);\n        if (chCode === 32 /* CharCode.Space */) {\n            indent++;\n        }\n        else if (chCode === 9 /* CharCode.Tab */) {\n            indent = indent - indent % tabSize + tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    if (i === len) {\n        return -1; // line only consists of whitespace\n    }\n    return indent;\n}\n"],"names":["MirrorTextModel","uri","lines","eol","versionId","_classCallCheck","this","_uri","_lines","_eol","_versionId","_lineStarts","_cachedTextValue","_createClass","key","value","length","get","join","e","_step","changes","_iterator","_createForOfIteratorHelper","s","n","done","change","_acceptDeleteRange","range","_acceptInsertText","Position","startLineNumber","startColumn","text","err","f","eolLength","linesLength","lineStartValues","Uint32Array","i","PrefixSumComputer","lineIndex","newValue","setValue","endLineNumber","_setLineText","substring","endColumn","splice","removeValues","position","insertText","insertLines","splitLines","lineNumber","column","newLengths","insertValues","values","prefixSum","prefixSumValidIndex","Int32Array","insertIndex","toUint32","oldValues","oldPrefixSum","insertValuesLen","set","subarray","index","startIndex","count","maxCount","_getPrefixSum","Math","max","sum","floor","getTotalSum","low","high","mid","midStop","midStart","PrefixSumIndexOfResult","ConstantTimePrefixSumComputer","_values","_isValid","_validEndIndex","_prefixSum","_indexBySum","_ensureValid","idx","viewLinesAbove","start","deleteCount","_invalidate","insertArr","arrayInsert","min","len","sumAbove","j","remainder","_prefixSumIndexOfResultBrand","undefined","TreeNode","piece","color","size_left","lf_left","parent","left","right","SENTINEL","leftest","node","righttest","calculateSize","calculateLF","lineFeedCnt","resetSentinel","leftRotate","tree","x","y","root","rightRotate","rbDelete","z","detach","yWasRed","recomputeTreeMetadata","newSizeLeft","newLFLeft","delta","lf_delta","updateTreeMetadata","w","fixInsert","lineFeedCntDelta","AverageBufferSize","createUintArray","arr","r","Uint16Array","LineStarts","lineStarts","cr","lf","crlf","isBasicASCII","createLineStartsFast","str","readonly","arguments","rLength","chr","charCodeAt","Piece","bufferIndex","end","StringBuffer","buffer","PieceTreeSnapshot","BOM","_this","_pieces","_tree","_BOM","_index","iterate","push","getPieceContent","PieceTreeSearchCache","limit","_limit","_cache","offset","nodePos","nodeStartOffset","nodeStartLineNumber","nodePosition","shift","hasInvalidVal","tmp","newArr","entry","PieceTreeBase","chunks","eolNormalized","create","_buffers","_lastChangeBufferPos","line","_lineCnt","_length","_EOL","_EOLLength","_EOLNormalized","lastNode","rbInsertRight","_searchCache","_lastVisitedLine","computeBufferMetadata","_this2","averageBufferSize","tempChunk","tempChunkLen","getNodeContent","replace","newEOL","normalizeEOL","leftLen","getAccumulatedValue","lfCnt","originalOffset","out","getIndexOf","getOffsetAt","startPosition","nodeAt2","endPosition","getValueInRange2","getEOL","startOffset","offsetInBuffer","ret","next","substr","_this3","currentLine","danglingCR","pieceLength","pieceStartLine","pieceEndLine","pieceStartOffset","getLineRawContent","matchingNode","targetOffset","_getCharCode","getLineCount","getLength","searcher","startCursor","endCursor","searchData","captureMatches","limitResultCount","resultLen","result","m","searchText","startOffsetInBuffer","_wordSeparators","reset","positionInBuffer","getLineFeedCnt","retStartColumn","retEndColumn","createFindMatch","Range","searchRange","Searcher","wordSeparators","regex","findMatchesInNode","currentNode","lineBreakCnt","nextLineStartOffset","getLineContent","_findMatchesInLine","deltaOffset","simpleSearch","searchString","searchStringLen","textLength","lastMatchIndex","indexOf","isValidMatch","FindMatch","_this$nodeAt","nodeAt","insertPosInBuffer","appendToNode","insertContentToNodeLeft","validate","nodesToDel","newRightPiece","shouldCheckCRLF","endWithCR","nodeCharCodeAt","newStart","startWithLF","previousPos","deleteNodeTail","newPieces","createNewPieces","tmpNode","k","deleteNodes","insertContentToNodeRight","pieces","rbInsertLeft","cnt","startNode","endNode","startSplitPosInBuffer","endSplitPosInBuffer","validateCRLFWithPrevNode","deleteNodeHead","validateCRLFWithNextNode","shrinkNode","prev","nPiece","newNode","adjustCarriageReturnFromNext","endOffset","previousCharOffset","cursor","nodes","lastChar","splitText","concat","slice","endIndex","endPos","newPiece","cache","get2","prevAccumulatedValue","accumulatedValue","originalLineNumber","pos","lineCnt","realLineCnt","expectedLineStartIndex","originalLFCnt","originalEndOffset","newEnd","newEndOffset","newLineFeedCnt","size_delta","newLength","originalStartOffset","originalStartPos","originalEndPos","oldLength","oldLFCnt","hitCRLF","prevStartOffset","pop","oldLineFeedCnt","prevAccumualtedValue","offsetOfNode","newOffset","val","nextNode","fixCRLF","prevNewLength","prevNewLFCnt","callback","leftRet","p","prevNode","PieceTreeTextBuffer","_Disposable","_inherits","_super","_createSuper","containsRTL","containsUnusualLineTerminators","call","_onDidChangeContent","_register","Emitter","_mightContainNonBasicASCII","_mightContainRTL","_mightContainUnusualLineTerminators","_pieceTree","preserveBOM","createSnapshot","getPositionAt","isEmpty","lineEnding","_getEndOfLine","getValueInRange","eolOffsetCompensation","desiredEOL","actualEOL","fromLineNumber","toLineNumber","lineContent","fromOffset","toOffset","strings","getValueLengthInRange","getLinesContent","getLineCharCode","getLineLength","Error","setEOL","rawOperations","recordTrimAutoWhitespace","computeUndoEdits","mightContainRTL","mightContainUnusualLineTerminators","mightContainNonBasicASCII","canReduceOperations","operations","op","_isTracked","validatedRange","textMightContainNonBasicASCII","validText","eolCount","firstLineLength","lastLineLength","strEOL","_countEOL","countEOL","_countEOL2","_slicedToArray","bufferEOL","sortIndex","identifier","rangeOffset","rangeLength","forceMoveMarkers","Boolean","isAutoWhitespaceEdit","sort","_sortOpsAscending","hasTouchingRanges","rangeEnd","getEndPosition","nextRangeStart","getStartPosition","isBeforeOrEqual","isBefore","_reduceOperations","reverseRanges","_getInverseEditRanges","newTrimAutoWhitespaceCandidates","reverseRange","currentLineContent","oldContent","reverseOperations","reverseRangeDeltaOffset","bufferText","reverseRangeOffset","textChange","TextChange","a","b","contentChanges","_doApplyEdits","trimAutoWhitespaceLineNumbers","prevContent","fire","ApplyEditsResult","_toSingleEditOperation","firstEditRange","lastEditRange","entireEditRange","lastEndLineNumber","lastEndColumn","operation","_countEOL3","_countEOL4","_sortOpsDescending","delete","insert","contentChangeRange","findMatchesLineByLine","prevOpEndLineNumber","prevOpEndColumn","prevOp","resultRange","lineCount","compareRangesUsingEnds","Disposable","PieceTreeTextBufferFactory","_chunks","_bom","_cr","_lf","_crlf","_containsRTL","_containsUnusualLineTerminators","_isBasicASCII","_normalizeEOL","defaultEOL","totalEOLCount","totalCRCount","_getEOL","newLineStart","textBuffer","disposable","PieceTreeTextBufferBuilder","_hasPreviousChar","_previousChar","_tmpLineStarts","chunk","_acceptChunk1","allowEmptyStrings","_acceptChunk2","String","fromCharCode","createLineStarts","_finish","lastChunk","newLineStarts","ContiguousGrowingArray","_default","_store","deleteIndex","insertCount","arrays","TokenizationStateStore","tokenizationSupport","initialState","_lineBeginState","_lineNeedsTokenization","_firstLineNeedsTokenization","endState","previousEndState","equals","markMustBeTokenized","textModel","languageIdCodec","builder","languageId","getLanguageId","endLineIndex","invalidLineStartIndex","lineStartState","getBeginState","safeTokenize","add","tokens","setEndState","TextModelTokenization","_textModel","_tokenizationPart","_languageIdCodec","_tokenizationStateStore","_defaultBackgroundTokenizer","backgroundTokenizer","MutableDisposable","TokenizationRegistry","onDidChange","changedLanguages","_resetTokenizationState","clearTokens","_a","isFlush","applyEdits","handleChanges","_initializeTokenizati","tokenizationPart","isTooLargeForTokenization","getInitialState","onUnexpectedError","initializeTokenization","_initializeTokenizati2","clear","setTokens","backgroundTokenizationFinished","handleBackgroundTokenizationFinished","state","_b","BugIndicatingError","createBackgroundTokenizer","DefaultBackgroundTokenizer","ContiguousMultilineTokensBuilder","_heuristicallyTokenizeViewport","finalize","checkFinished","updateTokensUntilLine","character","forceTokenization","lineTokens","LineTokens","getCount","tokenIndex","findTokenIndexAtOffset","getStandardTokenType","newText","curLineContent","newLineContent","getLanguageIdAtPosition","firstInvalidLineNumber","guessStartState","requestTokens","nonWhitespaceColumn","getLineFirstNonWhitespaceColumn","likelyRelevantLines","newNonWhitespaceIndex","reverse","_i","_likelyRelevantLines","hasEOL","tokenizeEncoded","clone","nullTokenizeEncoded","encodeLanguageId","convertToEndOffset","_stateStore","_backgroundTokenStore","_isDisposed","_isScheduled","_beginBackgroundTokenization","isAttachedToEditor","_hasLinesToTokenize","runWhenIdle","deadline","_backgroundTokenizeWithDeadline","_this4","endTime","Date","now","timeRemaining","execute","_backgroundTokenizeForAtLeast1ms","setTimeout0","sw","StopWatch","elapsed","_tokenizeOneInvalidLine","isTokenizationComplete","endLineNumberExclusive","TokenizationTextModelPart","_TextModelPart","_languageService","_languageConfigurationService","bracketPairsTextModelPart","_languageId","_onDidChangeLanguage","onDidChangeLanguage","event","_onDidChangeLanguageConfiguration","onDidChangeLanguageConfiguration","_onDidChangeTokens","onDidChangeTokens","_backgroundTokenizationState","_tokens","ContiguousTokensStore","_semanticTokens","SparseTokensStore","_tokenization","_assertThisInitialized","affects","acceptEdit","handleDidChangeAttached","flush","handleDidChangeContent","handleDidChangeBackgroundTokenizationState","hasTokens","ranges","element","minChangedLineNumber","maxChangedLineNumber","hasChange","getLineTokens","_emitModelTokensChangedEvent","tokenizationSupportChanged","semanticTokensApplied","isComplete","hasCompleteSemanticTokens","changedRange","validateRange","setPartial","tokenizeViewport","_isDisposing","handleDidChangeTokens","isCheapToTokenize","_getLineTokens","lineText","syntacticTokens","getTokens","addSparseTokens","validatePosition","getTokenTypeIfInsertingCharacter","validatedPosition","tokenizeLineWithEdit","getLanguageConfiguration","_position","assertNotDisposed","_TokenizationTextMode","_findLanguageBoundaries","_TokenizationTextMode2","rbStartOffset","rbEndOffset","rightBiasedWord","getWordAtText","getWordDefinition","_TokenizationTextMode3","_TokenizationTextMode4","lbStartOffset","lbEndOffset","leftBiasedWord","wordAtPosition","getWordAtPosition","word","source","oldLanguage","newLanguage","handleDidChangeLanguage","getStartOffset","tokenCount","getEndOffset","TextModelPart","__decorate","decorators","target","desc","d","c","Object","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","createTextBuffer","acceptChunk","finish","createTextBufferFactory","model","snapshot","read","createTextBufferFactoryFromSnapshot","MODEL_ID","TextModelSnapshot","_source","_eos","resultCnt","resultLength","invalidFunc","TextModel","creationOptions","associatedResource","_undoRedoService","_onWillDispose","onWillDispose","_onDidChangeDecorations","DidChangeDecorationsEmitter","affectedInjectedTextLines","handleBeforeFireDecorationsChangedEvent","onDidChangeDecorations","_onDidChangeOptions","onDidChangeOptions","_onDidChangeAttached","onDidChangeAttached","_onDidChangeInjectedText","_eventEmitter","DidChangeContentEmitter","_deltaDecorationCallCnt","id","isForSimpleWidget","_associatedResource","URI","parse","_attachedEditorCount","_createTextBuffer","_buffer","_bufferDisposable","_options","resolveOptions","_bracketPairs","BracketPairsTextModelPart","_guidesTextModelPart","GuidesTextModelPart","_decorationProvider","ColorizedBracketPairsDecorationProvider","_tokenizationTextModelPart","bufferLineCount","bufferTextLength","largeFileOptimizations","_isTooLargeForTokenization","LARGE_FILE_SIZE_THRESHOLD","LARGE_FILE_LINE_COUNT_THRESHOLD","_isTooLargeForSyncing","_MODEL_SYNC_LIMIT","_alternativeVersionId","_initialUndoRedoSnapshot","__isDisposing","_instanceId","_lastDecorationId","_decorations","_decorationsTree","DecorationsTrees","_commandManager","EditStack","_isUndoing","_isRedoing","_trimAutoWhitespaceLines","beginDeferredEmit","endDeferredEmit","listener","slowEvent","contentChangedEvent","combinedDisposable","fastEvent","dispose","_get","_getPrototypeOf","prototype","emptyDisposedTextBuffer","None","rawChange","InternalModelContentChangeEvent","_assertNotDisposed","illegalArgument","_createTextBuffer2","_setValueFromTextBuffer","isUndoing","isRedoing","getVersionId","textBufferDisposable","oldFullModelRange","getFullModelRange","oldModelValueLength","getLineMaxColumn","_increaseVersionId","_emitContentChangedEvent","ModelRawContentChangedEvent","ModelRawFlush","_createContentChanged2","getValue","_onBeforeEOLChange","_onAfterEOLChange","ModelRawEOLChanged","ensureAllNodesHaveRanges","allDecorations","collectNodesPostOrder","cachedAbsoluteStart","cachedAbsoluteEnd","cachedVersionId","recomputeMaxEnd","smallLineCharCount","longLineCharCount","lineLength","tabSize","indentSize","insertSpaces","_newOpts","originalIndentSize","trimAutoWhitespace","bracketPairColorizationOptions","bracketColorizationOptions","newOpts","createChangeEvent","handleDidChangeOptions","defaultInsertSpaces","defaultTabSize","guessedIndentation","guessIndentation","updateOptions","normalizeIndentation","selections","matches","findMatches","resetMightContainUnusualLineTerminators","pushEditOperations","map","rawPosition","_validatePosition","rawOffset","newAlternativeVersionId","newInitialUndoRedoSnapshot","fullModelRange","fullModelValue","getBOM","rawRange","getCharacterCountInRange","getLineLastNonWhitespaceColumn","linesCount","initialStartLineNumber","initialStartColumn","isNaN","maxColumn","initialEndLineNumber","initialEndColumn","Selection","validationType","charCodeBefore","_lineNumber","_column","_isValidPosition","charCodeBeforeStart","charCodeBeforeEnd","startInsideSurrogatePair","endInsideSurrogatePair","_range","_isValidRange","candidate","rawSearchScope","isRegex","matchCase","searchRanges","Array","isArray","every","searchScope","isIRange","d1","d2","matchMapper","uniqueSearchRanges","reduce","curr","areIntersecting","plusRange","SearchParams","parseSearchRequest","TextModelSearch","rawSearchStart","searchStart","findNextMatch","findPreviousMatch","pushStackElement","popStackElement","pushEOL","rawOperation","_validateEditOperation","beforeCursorState","editOperations","cursorStateComputer","group","_pushEditOperations","_validateEditOperations","incomingEdits","editsAreNearCursors","sel","foundEditNearSel","lenJ","editRange","selIsAbove","selIsBelow","trimLineNumber","maxLineColumn","allowTrimLine","editText","charAt","trimRange","pushEditOperation","resultingAlternativeVersionId","resultingSelection","edits","rangeStart","newPosition","oldText","_applyUndoRedoEdits","_this5","oldPosition","oldEnd","_overwriteAlternativeVersionId","_this6","oldLineCount","newLineCount","acceptReplace","rawContentChanges","deletingLinesCnt","insertingLinesCnt","editingLinesCnt","changeLineCountDelta","currentEditStartLineNumber","firstEditLineNumber","lastInsertedLineNumber","decorationsWithInjectedTextInEditedRange","getInjectedTextInInterval","injectedTextInEditedRange","LineInjectedText","fromDecorations","injectedTextInEditedRangeQueue","ArrayQueue","_loop","editLineNumber","currentEditLineNumber","takeFromEndWhile","decorationsInCurrentLine","ModelRawLineChanged","spliceStartLineNumber","ModelRawLinesDeleted","spliceLineNumber","injectedTexts","newLines","_loop2","takeWhile","ModelRawLinesInserted","reverseEdits","undo","canUndo","redo","canRedo","_this7","size","lineChangeEvents","from","_getInjectedTextInLine","ModelInjectedTextChangedEvent","ownerId","_changeDecorations","_this8","changeAccessor","addDecoration","options","_deltaDecorationsImpl","changeDecoration","newRange","_changeDecorationImpl","changeDecorationOptions","_changeDecorationOptionsImpl","_normalizeOptions","removeDecoration","deltaDecorations","oldDecorations","newDecorations","console","warn","getDecorationRange","newStickiness","TRACKED_RANGE_OPTIONS","_validateRangeRelaxedNoAllocations","setOptions","collectNodesFromOwner","decorationId","getNodeRange","filterOutValidation","getLinesDecorations","_startLineNumber","_endLineNumber","decorations","_getDecorationsInRange","pushMany","getDecorationsInRange","onlyMinimapDecorations","getAll","getAllInjectedText","filter","t","getAllDecorations","filterRange","filterOwnerId","getAllInInterval","getRangeAt","after","oldRange","recordLineAffectedByInjectedText","before","checkAffectedAndFire","nodeWasInOverviewRuler","overviewRuler","nodeIsInOverviewRuler","nodeRange","oldDecorationsIds","oldDecorationsLen","oldDecorationIndex","newDecorationsLen","newDecorationIndex","internalDecorationId","IntervalNode","newDecoration","tokenization","setLanguageId","getWordUntilPosition","affinity","indent","indentOfLine","detectIndentation","isNodeInOverviewRuler","isNodeInjectedText","DEFAULT_CREATION_OPTIONS","EDITOR_MODEL_DEFAULTS","IUndoRedoService","ILanguageService","ILanguageConfigurationService","_decorationsTree0","IntervalTree","_decorationsTree1","_injectedTextDecorationsTree","host","_step2","_iterator2","_intervalSearch","_ensureNodesHaveRanges","r0","intervalSearch","r1","r2","showIfCollapsed","search","overviewRulerOnly","_search","_resolveNode","resolveNode","cleanClassName","className","DecorationOptions","darkColor","ModelDecorationOverviewRulerOptions","_DecorationOptions","_super2","_this9","_resolvedColor","Center","theme","type","_resolveColor","getColor","toString","ModelDecorationMinimapOptions","_DecorationOptions2","_super3","_this10","Color","fromHex","ModelDecorationInjectedTextOptions","content","inlineClassName","inlineClassNameAffectsLetterSpacing","attachedData","cursorStops","ModelDecorationOptions","_c","description","blockClassName","blockIsAfterEnd","stickiness","zIndex","hoverMessage","glyphMarginHoverMessage","isWholeLine","collapseOnReplaceEdit","minimap","glyphMarginClassName","linesDecorationsClassName","firstLineDecorationClassName","marginClassName","beforeContentClassName","afterContentClassName","hideInCommentTokens","hideInStringTokens","EMPTY","register","createDynamic","_Disposable2","_super4","handleBeforeFire","_this11","_actual","_affectedInjectedTextLines","_deferredCnt","_shouldFireDeferred","_affectsMinimap","_affectsOverviewRuler","doFire","Set","tryFire","affectsMinimap","affectsOverviewRuler","_Disposable3","_super5","_this12","_fastEmitter","_slowEmitter","_deferredEvent","rawContentChangedEvent","merge","apply","multiline","chCode","nextChCode","isMultilineRegexSource","wholeWord","global","unicode","canUseSimpleSearch","toLowerCase","toUpperCase","SearchData","getMapForWordSeparators","rawMatches","LineFeedCounter","lineFeedsOffsets","lineFeedsOffsetsLen","textLen","_lineFeedsOffsets","searchParams","_doFindMatchesMultiline","_doFindMatchesLineByLine","lfCounter","matchIndex","match0","lineFeedCountBeforeMatch","findLineFeedCountBeforeOffset","lineFeedCountInMatch","counter","_getMultilineMatchRange","_doFindNextMatchMultiline","_doFindNextMatchLineByLine","searchTextStart","_findFirstMatchInLine","fromColumn","_doFindPreviousMatchMultiline","_doFindPreviousMatchLineByLine","_findLastMatchInLine","bestResult","matchStartIndex","matchLength","charBefore","firstCharInMatch","leftIsWordBounday","charAfter","lastCharInMatch","rightIsWordBounday","searchRegex","_searchRegex","_prevMatchStartIndex","_prevMatchLength","lastIndex","exec","computeIndentLevel"],"sourceRoot":""}