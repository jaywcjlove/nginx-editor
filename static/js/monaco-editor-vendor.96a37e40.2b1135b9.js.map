{"version":3,"file":"static/js/monaco-editor-vendor.96a37e40.2b1135b9.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/contentWidgets/contentWidgets.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/currentLineHighlight/currentLineHighlight.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/decorations/decorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/editorScrollbar/editorScrollbar.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/indentGuides/indentGuides.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/domReadingContext.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLines.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/glyphMargin/glyphMargin.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/linesDecorations/linesDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/marginDecorations/marginDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharSheet.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRenderer.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapPreBaked.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimap.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/overviewRuler.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/rulers/rulers.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/scrollDecoration/scrollDecoration.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/selections/selections.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursor.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursors.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewZones/viewZones.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/blockDecorations/blockDecorations.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/whitespace/whitespace.js","../node_modules/monaco-editor/esm/vs/editor/browser/view.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/domLineBreaksComputer.js","../node_modules/monaco-editor/esm/vs/editor/browser/view/dynamicViewOverlay.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lineNumbers/lineNumbers.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/rangeUtil.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLine.js","../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/margin/margin.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewContentWidgets extends ViewPart {\n    constructor(context, viewDomNode) {\n        super(context);\n        this._viewDomNode = viewDomNode;\n        this._widgets = {};\n        this.domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.domNode, 1 /* PartFingerprint.ContentWidgets */);\n        this.domNode.setClassName('contentWidgets');\n        this.domNode.setPosition('absolute');\n        this.domNode.setTop(0);\n        this.overflowingContentWidgetsDomNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.overflowingContentWidgetsDomNode, 2 /* PartFingerprint.OverflowingContentWidgets */);\n        this.overflowingContentWidgetsDomNode.setClassName('overflowingContentWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLineMappingChanged(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesChanged(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesDeleted(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesInserted(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    _updateAnchorsViewPositions() {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].updateAnchorViewPosition();\n        }\n    }\n    addWidget(_widget) {\n        const myWidget = new Widget(this._context, this._viewDomNode, _widget);\n        this._widgets[myWidget.id] = myWidget;\n        if (myWidget.allowEditorOverflow) {\n            this.overflowingContentWidgetsDomNode.appendChild(myWidget.domNode);\n        }\n        else {\n            this.domNode.appendChild(myWidget.domNode);\n        }\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, primaryAnchor, secondaryAnchor, preference, affinity) {\n        const myWidget = this._widgets[widget.getId()];\n        myWidget.setPosition(primaryAnchor, secondaryAnchor, preference, affinity);\n        this.setShouldRender();\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const myWidget = this._widgets[widgetId];\n            delete this._widgets[widgetId];\n            const domNode = myWidget.domNode.domNode;\n            domNode.parentNode.removeChild(domNode);\n            domNode.removeAttribute('monaco-visible-content-widget');\n            this.setShouldRender();\n        }\n    }\n    shouldSuppressMouseDownOnWidget(widgetId) {\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            return this._widgets[widgetId].suppressMouseDown;\n        }\n        return false;\n    }\n    onBeforeRender(viewportData) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onBeforeRender(viewportData);\n        }\n    }\n    prepareRender(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].render(ctx);\n        }\n    }\n}\nclass Widget {\n    constructor(context, viewDomNode, actual) {\n        this._primaryAnchor = new PositionPair(null, null);\n        this._secondaryAnchor = new PositionPair(null, null);\n        this._context = context;\n        this._viewDomNode = viewDomNode;\n        this._actual = actual;\n        this.domNode = createFastDomNode(this._actual.getDomNode());\n        this.id = this._actual.getId();\n        this.allowEditorOverflow = this._actual.allowEditorOverflow || false;\n        this.suppressMouseDown = this._actual.suppressMouseDown || false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._fixedOverflowWidgets = options.get(42 /* EditorOption.fixedOverflowWidgets */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._affinity = null;\n        this._preference = [];\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n        this._maxWidth = this._getMaxWidth();\n        this._isVisible = false;\n        this._renderData = null;\n        this.domNode.setPosition((this._fixedOverflowWidgets && this.allowEditorOverflow) ? 'fixed' : 'absolute');\n        this.domNode.setDisplay('none');\n        this.domNode.setVisibility('hidden');\n        this.domNode.setAttribute('widgetId', this.id);\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        if (e.hasChanged(143 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n            this._contentLeft = layoutInfo.contentLeft;\n            this._contentWidth = layoutInfo.contentWidth;\n            this._maxWidth = this._getMaxWidth();\n        }\n    }\n    updateAnchorViewPosition() {\n        this._setPosition(this._affinity, this._primaryAnchor.modelPosition, this._secondaryAnchor.modelPosition);\n    }\n    _setPosition(affinity, primaryAnchor, secondaryAnchor) {\n        this._affinity = affinity;\n        this._primaryAnchor = getValidPositionPair(primaryAnchor, this._context.viewModel, this._affinity);\n        this._secondaryAnchor = getValidPositionPair(secondaryAnchor, this._context.viewModel, this._affinity);\n        function getValidPositionPair(position, viewModel, affinity) {\n            if (!position) {\n                return new PositionPair(null, null);\n            }\n            // Do not trust that widgets give a valid position\n            const validModelPosition = viewModel.model.validatePosition(position);\n            if (viewModel.coordinatesConverter.modelPositionIsVisible(validModelPosition)) {\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(validModelPosition, affinity !== null && affinity !== void 0 ? affinity : undefined);\n                return new PositionPair(position, viewPosition);\n            }\n            return new PositionPair(position, null);\n        }\n    }\n    _getMaxWidth() {\n        const elDocument = this.domNode.domNode.ownerDocument;\n        const elWindow = elDocument.defaultView;\n        return (this.allowEditorOverflow\n            ? (elWindow === null || elWindow === void 0 ? void 0 : elWindow.innerWidth) || elDocument.documentElement.offsetWidth || elDocument.body.offsetWidth\n            : this._contentWidth);\n    }\n    setPosition(primaryAnchor, secondaryAnchor, preference, affinity) {\n        this._setPosition(affinity, primaryAnchor, secondaryAnchor);\n        this._preference = preference;\n        if (this._primaryAnchor.viewPosition && this._preference && this._preference.length > 0) {\n            // this content widget would like to be visible if possible\n            // we change it from `display:none` to `display:block` even if it\n            // might be outside the viewport such that we can measure its size\n            // in `prepareRender`\n            this.domNode.setDisplay('block');\n        }\n        else {\n            this.domNode.setDisplay('none');\n        }\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n    }\n    _layoutBoxInViewport(anchor, width, height, ctx) {\n        // Our visible box is split horizontally by the current line => 2 boxes\n        // a) the box above the line\n        const aboveLineTop = anchor.top;\n        const heightAvailableAboveLine = aboveLineTop;\n        // b) the box under the line\n        const underLineTop = anchor.top + anchor.height;\n        const heightAvailableUnderLine = ctx.viewportHeight - underLineTop;\n        const aboveTop = aboveLineTop - height;\n        const fitsAbove = (heightAvailableAboveLine >= height);\n        const belowTop = underLineTop;\n        const fitsBelow = (heightAvailableUnderLine >= height);\n        // And its left\n        let left = anchor.left;\n        if (left + width > ctx.scrollLeft + ctx.viewportWidth) {\n            left = ctx.scrollLeft + ctx.viewportWidth - width;\n        }\n        if (left < ctx.scrollLeft) {\n            left = ctx.scrollLeft;\n        }\n        return { fitsAbove, aboveTop, fitsBelow, belowTop, left };\n    }\n    _layoutHorizontalSegmentInPage(windowSize, domNodePosition, left, width) {\n        var _a;\n        // Leave some clearance to the left/right\n        const LEFT_PADDING = 15;\n        const RIGHT_PADDING = 15;\n        // Initially, the limits are defined as the dom node limits\n        const MIN_LIMIT = Math.max(LEFT_PADDING, domNodePosition.left - width);\n        const MAX_LIMIT = Math.min(domNodePosition.left + domNodePosition.width + width, windowSize.width - RIGHT_PADDING);\n        const elDocument = this._viewDomNode.domNode.ownerDocument;\n        const elWindow = elDocument.defaultView;\n        let absoluteLeft = domNodePosition.left + left - ((_a = elWindow === null || elWindow === void 0 ? void 0 : elWindow.scrollX) !== null && _a !== void 0 ? _a : 0);\n        if (absoluteLeft + width > MAX_LIMIT) {\n            const delta = absoluteLeft - (MAX_LIMIT - width);\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        if (absoluteLeft < MIN_LIMIT) {\n            const delta = absoluteLeft - MIN_LIMIT;\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        return [left, absoluteLeft];\n    }\n    _layoutBoxInPage(anchor, width, height, ctx) {\n        var _a, _b;\n        const aboveTop = anchor.top - height;\n        const belowTop = anchor.top + anchor.height;\n        const domNodePosition = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n        const elDocument = this._viewDomNode.domNode.ownerDocument;\n        const elWindow = elDocument.defaultView;\n        const absoluteAboveTop = domNodePosition.top + aboveTop - ((_a = elWindow === null || elWindow === void 0 ? void 0 : elWindow.scrollY) !== null && _a !== void 0 ? _a : 0);\n        const absoluteBelowTop = domNodePosition.top + belowTop - ((_b = elWindow === null || elWindow === void 0 ? void 0 : elWindow.scrollY) !== null && _b !== void 0 ? _b : 0);\n        const windowSize = dom.getClientArea(elDocument.body);\n        const [left, absoluteAboveLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, anchor.left - ctx.scrollLeft + this._contentLeft, width);\n        // Leave some clearance to the top/bottom\n        const TOP_PADDING = 22;\n        const BOTTOM_PADDING = 22;\n        const fitsAbove = (absoluteAboveTop >= TOP_PADDING);\n        const fitsBelow = (absoluteBelowTop + height <= windowSize.height - BOTTOM_PADDING);\n        if (this._fixedOverflowWidgets) {\n            return {\n                fitsAbove,\n                aboveTop: Math.max(absoluteAboveTop, TOP_PADDING),\n                fitsBelow,\n                belowTop: absoluteBelowTop,\n                left: absoluteAboveLeft\n            };\n        }\n        return { fitsAbove, aboveTop, fitsBelow, belowTop, left };\n    }\n    _prepareRenderWidgetAtExactPositionOverflowing(topLeft) {\n        return new Coordinate(topLeft.top, topLeft.left + this._contentLeft);\n    }\n    /**\n     * Compute the coordinates above and below the primary and secondary anchors.\n     * The content widget *must* touch the primary anchor.\n     * The content widget should touch if possible the secondary anchor.\n     */\n    _getAnchorsCoordinates(ctx) {\n        var _a, _b;\n        const primary = getCoordinates(this._primaryAnchor.viewPosition, this._affinity, this._lineHeight);\n        const secondaryViewPosition = (((_a = this._secondaryAnchor.viewPosition) === null || _a === void 0 ? void 0 : _a.lineNumber) === ((_b = this._primaryAnchor.viewPosition) === null || _b === void 0 ? void 0 : _b.lineNumber) ? this._secondaryAnchor.viewPosition : null);\n        const secondary = getCoordinates(secondaryViewPosition, this._affinity, this._lineHeight);\n        return { primary, secondary };\n        function getCoordinates(position, affinity, lineHeight) {\n            if (!position) {\n                return null;\n            }\n            const horizontalPosition = ctx.visibleRangeForPosition(position);\n            if (!horizontalPosition) {\n                return null;\n            }\n            // Left-align widgets that should appear :before content\n            const left = (position.column === 1 && affinity === 3 /* PositionAffinity.LeftOfInjectedText */ ? 0 : horizontalPosition.left);\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.scrollTop;\n            return new AnchorCoordinate(top, left, lineHeight);\n        }\n    }\n    _reduceAnchorCoordinates(primary, secondary, width) {\n        if (!secondary) {\n            return primary;\n        }\n        const fontInfo = this._context.configuration.options.get(50 /* EditorOption.fontInfo */);\n        let left = secondary.left;\n        if (left < primary.left) {\n            left = Math.max(left, primary.left - width + fontInfo.typicalFullwidthCharacterWidth);\n        }\n        else {\n            left = Math.min(left, primary.left + width - fontInfo.typicalFullwidthCharacterWidth);\n        }\n        return new AnchorCoordinate(primary.top, left, primary.height);\n    }\n    _prepareRenderWidget(ctx) {\n        if (!this._preference || this._preference.length === 0) {\n            return null;\n        }\n        const { primary, secondary } = this._getAnchorsCoordinates(ctx);\n        if (!primary) {\n            return null;\n        }\n        if (this._cachedDomNodeOffsetWidth === -1 || this._cachedDomNodeOffsetHeight === -1) {\n            let preferredDimensions = null;\n            if (typeof this._actual.beforeRender === 'function') {\n                preferredDimensions = safeInvoke(this._actual.beforeRender, this._actual);\n            }\n            if (preferredDimensions) {\n                this._cachedDomNodeOffsetWidth = preferredDimensions.width;\n                this._cachedDomNodeOffsetHeight = preferredDimensions.height;\n            }\n            else {\n                const domNode = this.domNode.domNode;\n                const clientRect = domNode.getBoundingClientRect();\n                this._cachedDomNodeOffsetWidth = Math.round(clientRect.width);\n                this._cachedDomNodeOffsetHeight = Math.round(clientRect.height);\n            }\n        }\n        const anchor = this._reduceAnchorCoordinates(primary, secondary, this._cachedDomNodeOffsetWidth);\n        let placement;\n        if (this.allowEditorOverflow) {\n            placement = this._layoutBoxInPage(anchor, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        else {\n            placement = this._layoutBoxInViewport(anchor, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        // Do two passes, first for perfect fit, second picks first option\n        for (let pass = 1; pass <= 2; pass++) {\n            for (const pref of this._preference) {\n                // placement\n                if (pref === 1 /* ContentWidgetPositionPreference.ABOVE */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsAbove) {\n                        return { coordinate: new Coordinate(placement.aboveTop, placement.left), position: 1 /* ContentWidgetPositionPreference.ABOVE */ };\n                    }\n                }\n                else if (pref === 2 /* ContentWidgetPositionPreference.BELOW */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsBelow) {\n                        return { coordinate: new Coordinate(placement.belowTop, placement.left), position: 2 /* ContentWidgetPositionPreference.BELOW */ };\n                    }\n                }\n                else {\n                    if (this.allowEditorOverflow) {\n                        return { coordinate: this._prepareRenderWidgetAtExactPositionOverflowing(new Coordinate(anchor.top, anchor.left)), position: 0 /* ContentWidgetPositionPreference.EXACT */ };\n                    }\n                    else {\n                        return { coordinate: new Coordinate(anchor.top, anchor.left), position: 0 /* ContentWidgetPositionPreference.EXACT */ };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * On this first pass, we ensure that the content widget (if it is in the viewport) has the max width set correctly.\n     */\n    onBeforeRender(viewportData) {\n        if (!this._primaryAnchor.viewPosition || !this._preference) {\n            return;\n        }\n        if (this._primaryAnchor.viewPosition.lineNumber < viewportData.startLineNumber || this._primaryAnchor.viewPosition.lineNumber > viewportData.endLineNumber) {\n            // Outside of viewport\n            return;\n        }\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRenderWidget(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            // This widget should be invisible\n            if (this._isVisible) {\n                this.domNode.removeAttribute('monaco-visible-content-widget');\n                this._isVisible = false;\n                this.domNode.setVisibility('hidden');\n            }\n            if (typeof this._actual.afterRender === 'function') {\n                safeInvoke(this._actual.afterRender, this._actual, null);\n            }\n            return;\n        }\n        // This widget should be visible\n        if (this.allowEditorOverflow) {\n            this.domNode.setTop(this._renderData.coordinate.top);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        else {\n            this.domNode.setTop(this._renderData.coordinate.top + ctx.scrollTop - ctx.bigNumbersDelta);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        if (!this._isVisible) {\n            this.domNode.setVisibility('inherit');\n            this.domNode.setAttribute('monaco-visible-content-widget', 'true');\n            this._isVisible = true;\n        }\n        if (typeof this._actual.afterRender === 'function') {\n            safeInvoke(this._actual.afterRender, this._actual, this._renderData.position);\n        }\n    }\n}\nclass PositionPair {\n    constructor(modelPosition, viewPosition) {\n        this.modelPosition = modelPosition;\n        this.viewPosition = viewPosition;\n    }\n}\nclass Coordinate {\n    constructor(top, left) {\n        this.top = top;\n        this.left = left;\n        this._coordinateBrand = undefined;\n    }\n}\nclass AnchorCoordinate {\n    constructor(top, left, height) {\n        this.top = top;\n        this.left = left;\n        this.height = height;\n        this._anchorCoordinateBrand = undefined;\n    }\n}\nfunction safeInvoke(fn, thisArg, ...args) {\n    try {\n        return fn.call(thisArg, ...args);\n    }\n    catch (_a) {\n        // ignore\n        return null;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nexport class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._renderLineHighlight = options.get(95 /* EditorOption.renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(96 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._selectionIsEmpty = true;\n        this._focused = false;\n        this._cursorLineNumbers = [1];\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderData = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    _readFromSelections() {\n        let hasChanged = false;\n        const cursorsLineNumbers = this._selections.map(s => s.positionLineNumber);\n        cursorsLineNumbers.sort((a, b) => a - b);\n        if (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n            this._cursorLineNumbers = cursorsLineNumbers;\n            hasChanged = true;\n        }\n        const selectionIsEmpty = this._selections.every(s => s.isEmpty());\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            hasChanged = true;\n        }\n        return hasChanged;\n    }\n    // --- begin event handlers\n    onThemeChanged(e) {\n        return this._readFromSelections();\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._renderLineHighlight = options.get(95 /* EditorOption.renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(96 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return this._readFromSelections();\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollWidthChanged || e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        if (!this._renderLineHighlightOnlyWhenFocus) {\n            return false;\n        }\n        this._focused = e.isFocused;\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (!this._shouldRenderThis()) {\n            this._renderData = null;\n            return;\n        }\n        const renderedLine = this._renderOne(ctx);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const len = this._cursorLineNumbers.length;\n        let index = 0;\n        const renderData = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            while (index < len && this._cursorLineNumbers[index] < lineNumber) {\n                index++;\n            }\n            if (index < len && this._cursorLineNumbers[index] === lineNumber) {\n                renderData[lineIndex] = renderedLine;\n            }\n            else {\n                renderData[lineIndex] = '';\n            }\n        }\n        this._renderData = renderData;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderData) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex >= this._renderData.length) {\n            return '';\n        }\n        return this._renderData[lineIndex];\n    }\n    _shouldRenderInMargin() {\n        return ((this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n    _shouldRenderInContent() {\n        return ((this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n            && this._selectionIsEmpty\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n}\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx) {\n        const className = 'current-line' + (this._shouldRenderOther() ? ' current-line-both' : '');\n        return `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return this._shouldRenderInContent();\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInMargin();\n    }\n}\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx) {\n        const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '');\n        return `<div class=\"${className}\" style=\"width:${this._contentLeft}px; height:${this._lineHeight}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return true;\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInContent();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const lineHighlight = theme.getColor(editorLineHighlight);\n    if (lineHighlight) {\n        collector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n        collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n    }\n    if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n        const lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n        if (lineHighlightBorder) {\n            collector.addRule(`.monaco-editor .view-overlays .current-line { border: 2px solid ${lineHighlightBorder}; }`);\n            collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border: 2px solid ${lineHighlightBorder}; }`);\n            if (isHighContrast(theme.type)) {\n                collector.addRule(`.monaco-editor .view-overlays .current-line { border-width: 1px; }`);\n                collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { border-width: 1px; }`);\n            }\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { HorizontalRange } from '../../view/renderingContext.js';\nimport { Range } from '../../../common/core/range.js';\nexport class DecorationsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        const _decorations = ctx.getDecorationsInViewport();\n        // Keep only decorations with `className`\n        let decorations = [];\n        let decorationsLen = 0;\n        for (let i = 0, len = _decorations.length; i < len; i++) {\n            const d = _decorations[i];\n            if (d.options.className) {\n                decorations[decorationsLen++] = d;\n            }\n        }\n        // Sort decorations for consistent render output\n        decorations = decorations.sort((a, b) => {\n            if (a.options.zIndex < b.options.zIndex) {\n                return -1;\n            }\n            if (a.options.zIndex > b.options.zIndex) {\n                return 1;\n            }\n            const aClassName = a.options.className;\n            const bClassName = b.options.className;\n            if (aClassName < bClassName) {\n                return -1;\n            }\n            if (aClassName > bClassName) {\n                return 1;\n            }\n            return Range.compareRangesUsingStarts(a.range, b.range);\n        });\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = '';\n        }\n        // Render first whole line decorations and then regular decorations\n        this._renderWholeLineDecorations(ctx, decorations, output);\n        this._renderNormalDecorations(ctx, decorations, output);\n        this._renderResult = output;\n    }\n    _renderWholeLineDecorations(ctx, decorations, output) {\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (!d.options.isWholeLine) {\n                continue;\n            }\n            const decorationOutput = ('<div class=\"cdr '\n                + d.options.className\n                + '\" style=\"left:0;width:100%;height:'\n                + lineHeight\n                + 'px;\"></div>');\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            for (let j = startLineNumber; j <= endLineNumber; j++) {\n                const lineIndex = j - visibleStartLineNumber;\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    _renderNormalDecorations(ctx, decorations, output) {\n        var _a;\n        const lineHeight = String(this._lineHeight);\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        let prevClassName = null;\n        let prevShowIfCollapsed = false;\n        let prevRange = null;\n        let prevShouldFillLineOnLineBreak = false;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (d.options.isWholeLine) {\n                continue;\n            }\n            const className = d.options.className;\n            const showIfCollapsed = Boolean(d.options.showIfCollapsed);\n            let range = d.range;\n            if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n                range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.viewModel.getLineMaxColumn(range.endLineNumber - 1));\n            }\n            if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n                // merge into previous decoration\n                prevRange = Range.plusRange(prevRange, range);\n                continue;\n            }\n            // flush previous decoration\n            if (prevClassName !== null) {\n                this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n            }\n            prevClassName = className;\n            prevShowIfCollapsed = showIfCollapsed;\n            prevRange = range;\n            prevShouldFillLineOnLineBreak = (_a = d.options.shouldFillLineOnLineBreak) !== null && _a !== void 0 ? _a : false;\n        }\n        if (prevClassName !== null) {\n            this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n        }\n    }\n    _renderNormalDecoration(ctx, range, className, shouldFillLineOnLineBreak, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\n        const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/ className === 'findMatch');\n        if (!linesVisibleRanges) {\n            return;\n        }\n        for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n            const lineVisibleRanges = linesVisibleRanges[j];\n            if (lineVisibleRanges.outsideRenderedLine) {\n                continue;\n            }\n            const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n            if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n                const singleVisibleRange = lineVisibleRanges.ranges[0];\n                if (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n                    // collapsed/very small range case => make the decoration visible by expanding its width\n                    // expand its size on both sides (both to the left and to the right, keeping it centered)\n                    const center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n                    const left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n                    lineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n                }\n            }\n            for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n                const expandToLeft = shouldFillLineOnLineBreak && lineVisibleRanges.continuesOnNextLine && lenK === 1;\n                const visibleRange = lineVisibleRanges.ranges[k];\n                const decorationOutput = ('<div class=\"cdr '\n                    + className\n                    + '\" style=\"left:'\n                    + String(visibleRange.left)\n                    + (expandToLeft ?\n                        'px;width:100%;height:' :\n                        ('px;width:' + String(visibleRange.width) + 'px;height:'))\n                    + lineHeight\n                    + 'px;\"></div>');\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { SmoothScrollableElement } from '../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { getThemeTypeSelector } from '../../../../platform/theme/common/themeService.js';\nexport class EditorScrollbar extends ViewPart {\n    constructor(context, linesContent, viewDomNode, overflowGuardDomNode) {\n        super(context);\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(102 /* EditorOption.scrollbar */);\n        const mouseWheelScrollSensitivity = options.get(74 /* EditorOption.mouseWheelScrollSensitivity */);\n        const fastScrollSensitivity = options.get(40 /* EditorOption.fastScrollSensitivity */);\n        const scrollPredominantAxis = options.get(105 /* EditorOption.scrollPredominantAxis */);\n        const scrollbarOptions = {\n            listenOnDomNode: viewDomNode.domNode,\n            className: 'editor-scrollable' + ' ' + getThemeTypeSelector(context.theme.type),\n            useShadows: false,\n            lazyRender: true,\n            vertical: scrollbar.vertical,\n            horizontal: scrollbar.horizontal,\n            verticalHasArrows: scrollbar.verticalHasArrows,\n            horizontalHasArrows: scrollbar.horizontalHasArrows,\n            verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n            verticalSliderSize: scrollbar.verticalSliderSize,\n            horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n            horizontalSliderSize: scrollbar.horizontalSliderSize,\n            handleMouseWheel: scrollbar.handleMouseWheel,\n            alwaysConsumeMouseWheel: scrollbar.alwaysConsumeMouseWheel,\n            arrowSize: scrollbar.arrowSize,\n            mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n            fastScrollSensitivity: fastScrollSensitivity,\n            scrollPredominantAxis: scrollPredominantAxis,\n            scrollByPage: scrollbar.scrollByPage,\n        };\n        this.scrollbar = this._register(new SmoothScrollableElement(linesContent.domNode, scrollbarOptions, this._context.viewLayout.getScrollable()));\n        PartFingerprints.write(this.scrollbar.getDomNode(), 5 /* PartFingerprint.ScrollableElement */);\n        this.scrollbarDomNode = createFastDomNode(this.scrollbar.getDomNode());\n        this.scrollbarDomNode.setPosition('absolute');\n        this._setLayout();\n        // When having a zone widget that calls .focus() on one of its dom elements,\n        // the browser will try desperately to reveal that dom node, unexpectedly\n        // changing the .scrollTop of this.linesContent\n        const onBrowserDesperateReveal = (domNode, lookAtScrollTop, lookAtScrollLeft) => {\n            const newScrollPosition = {};\n            if (lookAtScrollTop) {\n                const deltaTop = domNode.scrollTop;\n                if (deltaTop) {\n                    newScrollPosition.scrollTop = this._context.viewLayout.getCurrentScrollTop() + deltaTop;\n                    domNode.scrollTop = 0;\n                }\n            }\n            if (lookAtScrollLeft) {\n                const deltaLeft = domNode.scrollLeft;\n                if (deltaLeft) {\n                    newScrollPosition.scrollLeft = this._context.viewLayout.getCurrentScrollLeft() + deltaLeft;\n                    domNode.scrollLeft = 0;\n                }\n            }\n            this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, 1 /* ScrollType.Immediate */);\n        };\n        // I've seen this happen both on the view dom node & on the lines content dom node.\n        this._register(dom.addDisposableListener(viewDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(viewDomNode.domNode, true, true)));\n        this._register(dom.addDisposableListener(linesContent.domNode, 'scroll', (e) => onBrowserDesperateReveal(linesContent.domNode, true, false)));\n        this._register(dom.addDisposableListener(overflowGuardDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(overflowGuardDomNode.domNode, true, false)));\n        this._register(dom.addDisposableListener(this.scrollbarDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(this.scrollbarDomNode.domNode, true, false)));\n    }\n    dispose() {\n        super.dispose();\n    }\n    _setLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this.scrollbarDomNode.setLeft(layoutInfo.contentLeft);\n        const minimap = options.get(72 /* EditorOption.minimap */);\n        const side = minimap.side;\n        if (side === 'right') {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth + layoutInfo.minimap.minimapWidth);\n        }\n        else {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth);\n        }\n        this.scrollbarDomNode.setHeight(layoutInfo.height);\n    }\n    getOverviewRulerLayoutInfo() {\n        return this.scrollbar.getOverviewRulerLayoutInfo();\n    }\n    getDomNode() {\n        return this.scrollbarDomNode;\n    }\n    delegateVerticalScrollbarPointerDown(browserEvent) {\n        this.scrollbar.delegateVerticalScrollbarPointerDown(browserEvent);\n    }\n    delegateScrollFromMouseWheelEvent(browserEvent) {\n        this.scrollbar.delegateScrollFromMouseWheelEvent(browserEvent);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(102 /* EditorOption.scrollbar */)\n            || e.hasChanged(74 /* EditorOption.mouseWheelScrollSensitivity */)\n            || e.hasChanged(40 /* EditorOption.fastScrollSensitivity */)) {\n            const options = this._context.configuration.options;\n            const scrollbar = options.get(102 /* EditorOption.scrollbar */);\n            const mouseWheelScrollSensitivity = options.get(74 /* EditorOption.mouseWheelScrollSensitivity */);\n            const fastScrollSensitivity = options.get(40 /* EditorOption.fastScrollSensitivity */);\n            const scrollPredominantAxis = options.get(105 /* EditorOption.scrollPredominantAxis */);\n            const newOpts = {\n                vertical: scrollbar.vertical,\n                horizontal: scrollbar.horizontal,\n                verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n                horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n                scrollByPage: scrollbar.scrollByPage,\n                handleMouseWheel: scrollbar.handleMouseWheel,\n                mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n                fastScrollSensitivity: fastScrollSensitivity,\n                scrollPredominantAxis: scrollPredominantAxis\n            };\n            this.scrollbar.updateOptions(newOpts);\n        }\n        if (e.hasChanged(143 /* EditorOption.layoutInfo */)) {\n            this._setLayout();\n        }\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        this.scrollbar.updateClassName('editor-scrollable' + ' ' + getThemeTypeSelector(this._context.theme.type));\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to do\n    }\n    render(ctx) {\n        this.scrollbar.renderNow();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './indentGuides.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorBracketHighlightingForeground1, editorBracketHighlightingForeground2, editorBracketHighlightingForeground3, editorBracketHighlightingForeground4, editorBracketHighlightingForeground5, editorBracketHighlightingForeground6, editorBracketPairGuideActiveBackground1, editorBracketPairGuideActiveBackground2, editorBracketPairGuideActiveBackground3, editorBracketPairGuideActiveBackground4, editorBracketPairGuideActiveBackground5, editorBracketPairGuideActiveBackground6, editorBracketPairGuideBackground1, editorBracketPairGuideBackground2, editorBracketPairGuideBackground3, editorBracketPairGuideBackground4, editorBracketPairGuideBackground5, editorBracketPairGuideBackground6, editorIndentGuide1, editorIndentGuide2, editorIndentGuide3, editorIndentGuide4, editorIndentGuide5, editorIndentGuide6, editorActiveIndentGuide1, editorActiveIndentGuide2, editorActiveIndentGuide3, editorActiveIndentGuide4, editorActiveIndentGuide5, editorActiveIndentGuide6 } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Position } from '../../../common/core/position.js';\nimport { ArrayQueue } from '../../../../base/common/arrays.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { BracketPairGuidesClassNames } from '../../../common/model/guidesTextModelPart.js';\nimport { IndentGuide, HorizontalGuidesState } from '../../../common/textModelGuides.js';\nexport class IndentGuidesOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._primaryPosition = null;\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(144 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(16 /* EditorOption.guides */);\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(144 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(16 /* EditorOption.guides */);\n        return true;\n    }\n    onCursorStateChanged(e) {\n        var _a;\n        const selection = e.selections[0];\n        const newPosition = selection.getPosition();\n        if (!((_a = this._primaryPosition) === null || _a === void 0 ? void 0 : _a.equals(newPosition))) {\n            this._primaryPosition = newPosition;\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged; // || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLanguageConfigurationChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        var _a, _b, _c, _d;\n        if (!this._bracketPairGuideOptions.indentation && this._bracketPairGuideOptions.bracketPairs === false) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const scrollWidth = ctx.scrollWidth;\n        const lineHeight = this._lineHeight;\n        const activeCursorPosition = this._primaryPosition;\n        const indents = this.getGuidesByLine(visibleStartLineNumber, Math.min(visibleEndLineNumber + 1, this._context.viewModel.getLineCount()), activeCursorPosition);\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const indent = indents[lineIndex];\n            let result = '';\n            const leftOffset = (_b = (_a = ctx.visibleRangeForPosition(new Position(lineNumber, 1))) === null || _a === void 0 ? void 0 : _a.left) !== null && _b !== void 0 ? _b : 0;\n            for (const guide of indent) {\n                const left = guide.column === -1\n                    ? leftOffset + (guide.visibleColumn - 1) * this._spaceWidth\n                    : ctx.visibleRangeForPosition(new Position(lineNumber, guide.column)).left;\n                if (left > scrollWidth || (this._maxIndentLeft > 0 && left > this._maxIndentLeft)) {\n                    break;\n                }\n                const className = guide.horizontalLine ? (guide.horizontalLine.top ? 'horizontal-top' : 'horizontal-bottom') : 'vertical';\n                const width = guide.horizontalLine\n                    ? ((_d = (_c = ctx.visibleRangeForPosition(new Position(lineNumber, guide.horizontalLine.endColumn))) === null || _c === void 0 ? void 0 : _c.left) !== null && _d !== void 0 ? _d : (left + this._spaceWidth)) - left\n                    : this._spaceWidth;\n                result += `<div class=\"core-guide ${guide.className} ${className}\" style=\"left:${left}px;height:${lineHeight}px;width:${width}px\"></div>`;\n            }\n            output[lineIndex] = result;\n        }\n        this._renderResult = output;\n    }\n    getGuidesByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition) {\n        const bracketGuides = this._bracketPairGuideOptions.bracketPairs !== false\n            ? this._context.viewModel.getBracketGuidesInRangeByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition, {\n                highlightActive: this._bracketPairGuideOptions.highlightActiveBracketPair,\n                horizontalGuides: this._bracketPairGuideOptions.bracketPairsHorizontal === true\n                    ? HorizontalGuidesState.Enabled\n                    : this._bracketPairGuideOptions.bracketPairsHorizontal === 'active'\n                        ? HorizontalGuidesState.EnabledForActive\n                        : HorizontalGuidesState.Disabled,\n                includeInactive: this._bracketPairGuideOptions.bracketPairs === true,\n            })\n            : null;\n        const indentGuides = this._bracketPairGuideOptions.indentation\n            ? this._context.viewModel.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber)\n            : null;\n        let activeIndentStartLineNumber = 0;\n        let activeIndentEndLineNumber = 0;\n        let activeIndentLevel = 0;\n        if (this._bracketPairGuideOptions.highlightActiveIndentation !== false && activeCursorPosition) {\n            const activeIndentInfo = this._context.viewModel.getActiveIndentGuide(activeCursorPosition.lineNumber, visibleStartLineNumber, visibleEndLineNumber);\n            activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\n            activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\n            activeIndentLevel = activeIndentInfo.indent;\n        }\n        const { indentSize } = this._context.viewModel.model.getOptions();\n        const result = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineGuides = new Array();\n            result.push(lineGuides);\n            const bracketGuidesInLine = bracketGuides ? bracketGuides[lineNumber - visibleStartLineNumber] : [];\n            const bracketGuidesInLineQueue = new ArrayQueue(bracketGuidesInLine);\n            const indentGuidesInLine = indentGuides ? indentGuides[lineNumber - visibleStartLineNumber] : 0;\n            for (let indentLvl = 1; indentLvl <= indentGuidesInLine; indentLvl++) {\n                const indentGuide = (indentLvl - 1) * indentSize + 1;\n                const isActive = \n                // Disable active indent guide if there are bracket guides.\n                (this._bracketPairGuideOptions.highlightActiveIndentation === 'always' || bracketGuidesInLine.length === 0) &&\n                    activeIndentStartLineNumber <= lineNumber &&\n                    lineNumber <= activeIndentEndLineNumber &&\n                    indentLvl === activeIndentLevel;\n                lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => g.visibleColumn < indentGuide) || []);\n                const peeked = bracketGuidesInLineQueue.peek();\n                if (!peeked || peeked.visibleColumn !== indentGuide || peeked.horizontalLine) {\n                    lineGuides.push(new IndentGuide(indentGuide, -1, `core-guide-indent lvl-${(indentLvl - 1) % 30}` + (isActive ? ' indent-active' : ''), null, -1, -1));\n                }\n            }\n            lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => true) || []);\n        }\n        return result;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nfunction transparentToUndefined(color) {\n    if (color && color.isTransparent()) {\n        return undefined;\n    }\n    return color;\n}\nregisterThemingParticipant((theme, collector) => {\n    const colors = [\n        { bracketColor: editorBracketHighlightingForeground1, guideColor: editorBracketPairGuideBackground1, guideColorActive: editorBracketPairGuideActiveBackground1 },\n        { bracketColor: editorBracketHighlightingForeground2, guideColor: editorBracketPairGuideBackground2, guideColorActive: editorBracketPairGuideActiveBackground2 },\n        { bracketColor: editorBracketHighlightingForeground3, guideColor: editorBracketPairGuideBackground3, guideColorActive: editorBracketPairGuideActiveBackground3 },\n        { bracketColor: editorBracketHighlightingForeground4, guideColor: editorBracketPairGuideBackground4, guideColorActive: editorBracketPairGuideActiveBackground4 },\n        { bracketColor: editorBracketHighlightingForeground5, guideColor: editorBracketPairGuideBackground5, guideColorActive: editorBracketPairGuideActiveBackground5 },\n        { bracketColor: editorBracketHighlightingForeground6, guideColor: editorBracketPairGuideBackground6, guideColorActive: editorBracketPairGuideActiveBackground6 }\n    ];\n    const colorProvider = new BracketPairGuidesClassNames();\n    const indentColors = [\n        { indentColor: editorIndentGuide1, indentColorActive: editorActiveIndentGuide1 },\n        { indentColor: editorIndentGuide2, indentColorActive: editorActiveIndentGuide2 },\n        { indentColor: editorIndentGuide3, indentColorActive: editorActiveIndentGuide3 },\n        { indentColor: editorIndentGuide4, indentColorActive: editorActiveIndentGuide4 },\n        { indentColor: editorIndentGuide5, indentColorActive: editorActiveIndentGuide5 },\n        { indentColor: editorIndentGuide6, indentColorActive: editorActiveIndentGuide6 },\n    ];\n    const colorValues = colors\n        .map(c => {\n        var _a, _b;\n        const bracketColor = theme.getColor(c.bracketColor);\n        const guideColor = theme.getColor(c.guideColor);\n        const guideColorActive = theme.getColor(c.guideColorActive);\n        const effectiveGuideColor = transparentToUndefined((_a = transparentToUndefined(guideColor)) !== null && _a !== void 0 ? _a : bracketColor === null || bracketColor === void 0 ? void 0 : bracketColor.transparent(0.3));\n        const effectiveGuideColorActive = transparentToUndefined((_b = transparentToUndefined(guideColorActive)) !== null && _b !== void 0 ? _b : bracketColor);\n        if (!effectiveGuideColor || !effectiveGuideColorActive) {\n            return undefined;\n        }\n        return {\n            guideColor: effectiveGuideColor,\n            guideColorActive: effectiveGuideColorActive,\n        };\n    })\n        .filter(isDefined);\n    const indentColorValues = indentColors\n        .map(c => {\n        const indentColor = theme.getColor(c.indentColor);\n        const indentColorActive = theme.getColor(c.indentColorActive);\n        const effectiveIndentColor = transparentToUndefined(indentColor);\n        const effectiveIndentColorActive = transparentToUndefined(indentColorActive);\n        if (!effectiveIndentColor || !effectiveIndentColorActive) {\n            return undefined;\n        }\n        return {\n            indentColor: effectiveIndentColor,\n            indentColorActive: effectiveIndentColorActive,\n        };\n    })\n        .filter(isDefined);\n    if (colorValues.length > 0) {\n        for (let level = 0; level < 30; level++) {\n            const colors = colorValues[level % colorValues.length];\n            collector.addRule(`.monaco-editor .${colorProvider.getInlineClassNameOfLevel(level).replace(/ /g, '.')} { --guide-color: ${colors.guideColor}; --guide-color-active: ${colors.guideColorActive}; }`);\n        }\n        collector.addRule(`.monaco-editor .vertical { box-shadow: 1px 0 0 0 var(--guide-color) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top { border-top: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom { border-bottom: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .vertical.${colorProvider.activeClassName} { box-shadow: 1px 0 0 0 var(--guide-color-active) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top.${colorProvider.activeClassName} { border-top: 1px solid var(--guide-color-active); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom.${colorProvider.activeClassName} { border-bottom: 1px solid var(--guide-color-active); }`);\n    }\n    if (indentColorValues.length > 0) {\n        for (let level = 0; level < 30; level++) {\n            const colors = indentColorValues[level % indentColorValues.length];\n            collector.addRule(`.monaco-editor .lines-content .core-guide-indent.lvl-${level} { --indent-color: ${colors.indentColor}; --indent-color-active: ${colors.indentColorActive}; }`);\n        }\n        collector.addRule(`.monaco-editor .lines-content .core-guide-indent { box-shadow: 1px 0 0 0 var(--indent-color) inset; }`);\n        collector.addRule(`.monaco-editor .lines-content .core-guide-indent.indent-active { box-shadow: 1px 0 0 0 var(--indent-color-active) inset; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class DomReadingContext {\n    get didDomLayout() {\n        return this._didDomLayout;\n    }\n    readClientRect() {\n        if (!this._clientRectRead) {\n            this._clientRectRead = true;\n            const rect = this._domNode.getBoundingClientRect();\n            this.markDidDomLayout();\n            this._clientRectDeltaLeft = rect.left;\n            this._clientRectScale = rect.width / this._domNode.offsetWidth;\n        }\n    }\n    get clientRectDeltaLeft() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectDeltaLeft;\n    }\n    get clientRectScale() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectScale;\n    }\n    constructor(_domNode, endNode) {\n        this._domNode = _domNode;\n        this.endNode = endNode;\n        this._didDomLayout = false;\n        this._clientRectDeltaLeft = 0;\n        this._clientRectScale = 1;\n        this._clientRectRead = false;\n    }\n    markDidDomLayout() {\n        this._didDomLayout = true;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport './viewLines.css';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { HorizontalPosition, HorizontalRange, LineVisibleRanges } from '../../view/renderingContext.js';\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { DomReadingContext } from './domReadingContext.js';\nimport { ViewLine, ViewLineOptions } from './viewLine.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nclass LastRenderedData {\n    constructor() {\n        this._currentVisibleRange = new Range(1, 1, 1, 1);\n    }\n    getCurrentVisibleRange() {\n        return this._currentVisibleRange;\n    }\n    setCurrentVisibleRange(currentVisibleRange) {\n        this._currentVisibleRange = currentVisibleRange;\n    }\n}\nclass HorizontalRevealRangeRequest {\n    constructor(minimalReveal, lineNumber, startColumn, endColumn, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.lineNumber = lineNumber;\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'range';\n        this.minLineNumber = lineNumber;\n        this.maxLineNumber = lineNumber;\n    }\n}\nclass HorizontalRevealSelectionsRequest {\n    constructor(minimalReveal, selections, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.selections = selections;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'selections';\n        let minLineNumber = selections[0].startLineNumber;\n        let maxLineNumber = selections[0].endLineNumber;\n        for (let i = 1, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n            maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n        }\n        this.minLineNumber = minLineNumber;\n        this.maxLineNumber = maxLineNumber;\n    }\n}\nexport class ViewLines extends ViewPart {\n    constructor(context, linesContent) {\n        super(context);\n        this._linesContent = linesContent;\n        this._textRangeRestingSpot = document.createElement('div');\n        this._visibleLines = new VisibleLinesCollection(this);\n        this.domNode = this._visibleLines.domNode;\n        const conf = this._context.configuration;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(144 /* EditorOption.wrappingInfo */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(99 /* EditorOption.revealHorizontalRightPadding */);\n        this._cursorSurroundingLines = options.get(29 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(30 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        this._viewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        PartFingerprints.write(this.domNode, 7 /* PartFingerprint.ViewLines */);\n        this.domNode.setClassName(`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        applyFontInfo(this.domNode, fontInfo);\n        // --- width & height\n        this._maxLineWidth = 0;\n        this._asyncUpdateLineWidths = new RunOnceScheduler(() => {\n            this._updateLineWidthsSlow();\n        }, 200);\n        this._asyncCheckMonospaceFontAssumptions = new RunOnceScheduler(() => {\n            this._checkMonospaceFontAssumptions();\n        }, 2000);\n        this._lastRenderedData = new LastRenderedData();\n        this._horizontalRevealRequest = null;\n        // sticky scroll widget\n        this._stickyScrollEnabled = options.get(114 /* EditorOption.stickyScroll */).enabled;\n        this._maxNumberStickyLines = options.get(114 /* EditorOption.stickyScroll */).maxLineCount;\n    }\n    dispose() {\n        this._asyncUpdateLineWidths.dispose();\n        this._asyncCheckMonospaceFontAssumptions.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    // ---- begin IVisibleLinesHost\n    createVisibleLine() {\n        return new ViewLine(this._viewLineOptions);\n    }\n    // ---- end IVisibleLinesHost\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        if (e.hasChanged(144 /* EditorOption.wrappingInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(144 /* EditorOption.wrappingInfo */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(99 /* EditorOption.revealHorizontalRightPadding */);\n        this._cursorSurroundingLines = options.get(29 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(30 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        // sticky scroll\n        this._stickyScrollEnabled = options.get(114 /* EditorOption.stickyScroll */).enabled;\n        this._maxNumberStickyLines = options.get(114 /* EditorOption.stickyScroll */).maxLineCount;\n        applyFontInfo(this.domNode, fontInfo);\n        this._onOptionsMaybeChanged();\n        if (e.hasChanged(143 /* EditorOption.layoutInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        return true;\n    }\n    _onOptionsMaybeChanged() {\n        const conf = this._context.configuration;\n        const newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        if (!this._viewLineOptions.equals(newViewLineOptions)) {\n            this._viewLineOptions = newViewLineOptions;\n            const startLineNumber = this._visibleLines.getStartLineNumber();\n            const endLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n                const line = this._visibleLines.getVisibleLine(lineNumber);\n                line.onOptionsChanged(this._viewLineOptions);\n            }\n            return true;\n        }\n        return false;\n    }\n    onCursorStateChanged(e) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let r = false;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            r = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\n        }\n        return r;\n    }\n    onDecorationsChanged(e) {\n        if (true /*e.inlineDecorationsChanged*/) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\n            }\n        }\n        return true;\n    }\n    onFlushed(e) {\n        const shouldRender = this._visibleLines.onFlushed(e);\n        this._maxLineWidth = 0;\n        return shouldRender;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onRevealRangeRequest(e) {\n        // Using the future viewport here in order to handle multiple\n        // incoming reveal range requests that might all desire to be animated\n        const desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.minimalReveal, e.range, e.selections, e.verticalType);\n        if (desiredScrollTop === -1) {\n            // marker to abort the reveal range request\n            return false;\n        }\n        // validate the new desired scroll top\n        let newScrollPosition = this._context.viewLayout.validateScrollPosition({ scrollTop: desiredScrollTop });\n        if (e.revealHorizontal) {\n            if (e.range && e.range.startLineNumber !== e.range.endLineNumber) {\n                // Two or more lines? => scroll to base (That's how you see most of the two lines)\n                newScrollPosition = {\n                    scrollTop: newScrollPosition.scrollTop,\n                    scrollLeft: 0\n                };\n            }\n            else if (e.range) {\n                // We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n                this._horizontalRevealRequest = new HorizontalRevealRangeRequest(e.minimalReveal, e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n            else if (e.selections && e.selections.length > 0) {\n                this._horizontalRevealRequest = new HorizontalRevealSelectionsRequest(e.minimalReveal, e.selections, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n        }\n        else {\n            this._horizontalRevealRequest = null;\n        }\n        const scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\n        const scrollType = (scrollTopDelta <= this._lineHeight ? 1 /* ScrollType.Immediate */ : e.scrollType);\n        this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, scrollType);\n        return true;\n    }\n    onScrollChanged(e) {\n        if (this._horizontalRevealRequest && e.scrollLeftChanged) {\n            // cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n            this._horizontalRevealRequest = null;\n        }\n        if (this._horizontalRevealRequest && e.scrollTopChanged) {\n            const min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            const max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            if (e.scrollTop < min || e.scrollTop > max) {\n                // cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n                this._horizontalRevealRequest = null;\n            }\n        }\n        this.domNode.setWidth(e.scrollWidth);\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        return this._visibleLines.onZonesChanged(e);\n    }\n    onThemeChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    // ---- end view event handlers\n    // ----------- HELPERS FOR OTHERS\n    getPositionFromDOMInfo(spanNode, offset) {\n        const viewLineDomNode = this._getViewLineDomNode(spanNode);\n        if (viewLineDomNode === null) {\n            // Couldn't find view line node\n            return null;\n        }\n        const lineNumber = this._getLineNumberFor(viewLineDomNode);\n        if (lineNumber === -1) {\n            // Couldn't find view line node\n            return null;\n        }\n        if (lineNumber < 1 || lineNumber > this._context.viewModel.getLineCount()) {\n            // lineNumber is outside range\n            return null;\n        }\n        if (this._context.viewModel.getLineMaxColumn(lineNumber) === 1) {\n            // Line is empty\n            return new Position(lineNumber, 1);\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return null;\n        }\n        let column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(spanNode, offset);\n        const minColumn = this._context.viewModel.getLineMinColumn(lineNumber);\n        if (column < minColumn) {\n            column = minColumn;\n        }\n        return new Position(lineNumber, column);\n    }\n    _getViewLineDomNode(node) {\n        while (node && node.nodeType === 1) {\n            if (node.className === ViewLine.CLASS_NAME) {\n                return node;\n            }\n            node = node.parentElement;\n        }\n        return null;\n    }\n    /**\n     * @returns the line number of this view line dom node.\n     */\n    _getLineNumberFor(domNode) {\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const line = this._visibleLines.getVisibleLine(lineNumber);\n            if (domNode === line.getDomNode()) {\n                return lineNumber;\n            }\n        }\n        return -1;\n    }\n    getLineWidth(lineNumber) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return -1;\n        }\n        const context = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        const result = this._visibleLines.getVisibleLine(lineNumber).getWidth(context);\n        this._updateLineWidthsSlowIfDomDidLayout(context);\n        return result;\n    }\n    linesVisibleRangesForRange(_range, includeNewLines) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        const originalEndLineNumber = _range.endLineNumber;\n        const range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\n        if (!range) {\n            return null;\n        }\n        const visibleRanges = [];\n        let visibleRangesLen = 0;\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        let nextLineModelLineNumber = 0;\n        if (includeNewLines) {\n            nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n            if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n                continue;\n            }\n            const startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\n            const continuesInNextLine = lineNumber !== range.endLineNumber;\n            const endColumn = continuesInNextLine ? this._context.viewModel.getLineMaxColumn(lineNumber) : range.endColumn;\n            const visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n            if (!visibleRangesForLine) {\n                continue;\n            }\n            if (includeNewLines && lineNumber < originalEndLineNumber) {\n                const currentLineModelLineNumber = nextLineModelLineNumber;\n                nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\n                if (currentLineModelLineNumber !== nextLineModelLineNumber) {\n                    visibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\n                }\n            }\n            visibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, HorizontalRange.from(visibleRangesForLine.ranges), continuesInNextLine);\n        }\n        this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n        if (visibleRangesLen === 0) {\n            return null;\n        }\n        return visibleRanges;\n    }\n    _visibleRangesForLineRange(lineNumber, startColumn, endColumn) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        if (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\n            return null;\n        }\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        const result = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n        this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n        return result;\n    }\n    visibleRangeForPosition(position) {\n        const visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\n        if (!visibleRanges) {\n            return null;\n        }\n        return new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\n    }\n    /**\n     * Updates the max line width if it is fast to compute.\n     * Returns true if all lines were taken into account.\n     * Returns false if some lines need to be reevaluated (in a slow fashion).\n     */\n    _updateLineWidthsFast() {\n        return this._updateLineWidths(true);\n    }\n    _updateLineWidthsSlow() {\n        this._updateLineWidths(false);\n    }\n    /**\n     * Update the line widths using DOM layout information after someone else\n     * has caused a synchronous layout.\n     */\n    _updateLineWidthsSlowIfDomDidLayout(domReadingContext) {\n        if (!domReadingContext.didDomLayout) {\n            // only proceed if we just did a layout\n            return;\n        }\n        if (this._asyncUpdateLineWidths.isScheduled()) {\n            // reading widths is not scheduled => widths are up-to-date\n            return;\n        }\n        this._asyncUpdateLineWidths.cancel();\n        this._updateLineWidthsSlow();\n    }\n    _updateLineWidths(fast) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let localMaxLineWidth = 1;\n        let allWidthsComputed = true;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (fast && !visibleLine.getWidthIsFast()) {\n                // Cannot compute width in a fast way for this line\n                allWidthsComputed = false;\n                continue;\n            }\n            localMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth(null));\n        }\n        if (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.viewModel.getLineCount()) {\n            // we know the max line width for all the lines\n            this._maxLineWidth = 0;\n        }\n        this._ensureMaxLineWidth(localMaxLineWidth);\n        return allWidthsComputed;\n    }\n    _checkMonospaceFontAssumptions() {\n        // Problems with monospace assumptions are more apparent for longer lines,\n        // as small rounding errors start to sum up, so we will select the longest\n        // line for a closer inspection\n        let longestLineNumber = -1;\n        let longestWidth = -1;\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (visibleLine.needsMonospaceFontCheck()) {\n                const lineWidth = visibleLine.getWidth(null);\n                if (lineWidth > longestWidth) {\n                    longestWidth = lineWidth;\n                    longestLineNumber = lineNumber;\n                }\n            }\n        }\n        if (longestLineNumber === -1) {\n            return;\n        }\n        if (!this._visibleLines.getVisibleLine(longestLineNumber).monospaceAssumptionsAreValid()) {\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                visibleLine.onMonospaceAssumptionsInvalidated();\n            }\n        }\n    }\n    prepareRender() {\n        throw new Error('Not supported');\n    }\n    render() {\n        throw new Error('Not supported');\n    }\n    renderText(viewportData) {\n        // (1) render lines - ensures lines are in the DOM\n        this._visibleLines.renderLines(viewportData);\n        this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\n        this.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n        this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000));\n        // (2) compute horizontal scroll position:\n        //  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n        //  - it might change `scrollWidth` and `scrollLeft`\n        if (this._horizontalRevealRequest) {\n            const horizontalRevealRequest = this._horizontalRevealRequest;\n            // Check that we have the line that contains the horizontal range in the viewport\n            if (viewportData.startLineNumber <= horizontalRevealRequest.minLineNumber && horizontalRevealRequest.maxLineNumber <= viewportData.endLineNumber) {\n                this._horizontalRevealRequest = null;\n                // allow `visibleRangesForRange2` to work\n                this.onDidRender();\n                // compute new scroll position\n                const newScrollLeft = this._computeScrollLeftToReveal(horizontalRevealRequest);\n                if (newScrollLeft) {\n                    if (!this._isViewportWrapping) {\n                        // ensure `scrollWidth` is large enough\n                        this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\n                    }\n                    // set `scrollLeft`\n                    this._context.viewModel.viewLayout.setScrollPosition({\n                        scrollLeft: newScrollLeft.scrollLeft\n                    }, horizontalRevealRequest.scrollType);\n                }\n            }\n        }\n        // Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n        if (!this._updateLineWidthsFast()) {\n            // Computing the width of some lines would be slow => delay it\n            this._asyncUpdateLineWidths.schedule();\n        }\n        else {\n            this._asyncUpdateLineWidths.cancel();\n        }\n        if (platform.isLinux && !this._asyncCheckMonospaceFontAssumptions.isScheduled()) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                if (visibleLine.needsMonospaceFontCheck()) {\n                    this._asyncCheckMonospaceFontAssumptions.schedule();\n                    break;\n                }\n            }\n        }\n        // (3) handle scrolling\n        this._linesContent.setLayerHinting(this._canUseLayerHinting);\n        this._linesContent.setContain('strict');\n        const adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\n        this._linesContent.setTop(-adjustedScrollTop);\n        this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\n    }\n    // --- width\n    _ensureMaxLineWidth(lineWidth) {\n        const iLineWidth = Math.ceil(lineWidth);\n        if (this._maxLineWidth < iLineWidth) {\n            this._maxLineWidth = iLineWidth;\n            this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        }\n    }\n    _computeScrollTopToRevealRange(viewport, source, minimalReveal, range, selections, verticalType) {\n        const viewportStartY = viewport.top;\n        const viewportHeight = viewport.height;\n        const viewportEndY = viewportStartY + viewportHeight;\n        let boxIsSingleRange;\n        let boxStartY;\n        let boxEndY;\n        if (selections && selections.length > 0) {\n            let minLineNumber = selections[0].startLineNumber;\n            let maxLineNumber = selections[0].endLineNumber;\n            for (let i = 1, len = selections.length; i < len; i++) {\n                const selection = selections[i];\n                minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n                maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n            }\n            boxIsSingleRange = false;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(minLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(maxLineNumber) + this._lineHeight;\n        }\n        else if (range) {\n            boxIsSingleRange = true;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\n        }\n        else {\n            return -1;\n        }\n        const shouldIgnoreScrollOff = (source === 'mouse' || minimalReveal) && this._cursorSurroundingLinesStyle === 'default';\n        let paddingTop = 0;\n        let paddingBottom = 0;\n        if (!shouldIgnoreScrollOff) {\n            const context = Math.min((viewportHeight / this._lineHeight) / 2, this._cursorSurroundingLines);\n            if (this._stickyScrollEnabled) {\n                paddingTop = Math.max(context, this._maxNumberStickyLines) * this._lineHeight;\n            }\n            else {\n                paddingTop = context * this._lineHeight;\n            }\n            paddingBottom = Math.max(0, (context - 1)) * this._lineHeight;\n        }\n        else {\n            if (!minimalReveal) {\n                // Reveal one more line above (this case is hit when dragging)\n                paddingTop = this._lineHeight;\n            }\n        }\n        if (!minimalReveal) {\n            if (verticalType === 0 /* viewEvents.VerticalRevealType.Simple */ || verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */) {\n                // Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n                paddingBottom += this._lineHeight;\n            }\n        }\n        boxStartY -= paddingTop;\n        boxEndY += paddingBottom;\n        let newScrollTop;\n        if (boxEndY - boxStartY > viewportHeight) {\n            // the box is larger than the viewport ... scroll to its top\n            if (!boxIsSingleRange) {\n                // do not reveal multiple cursors if there are more than fit the viewport\n                return -1;\n            }\n            newScrollTop = boxStartY;\n        }\n        else if (verticalType === 5 /* viewEvents.VerticalRevealType.NearTop */ || verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */) {\n            if (verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // We want a gap that is 20% of the viewport, but with a minimum of 5 lines\n                const desiredGapAbove = Math.max(5 * this._lineHeight, viewportHeight * 0.2);\n                // Try to scroll just above the box with the desired gap\n                const desiredScrollTop = boxStartY - desiredGapAbove;\n                // But ensure that the box is not pushed out of viewport\n                const minScrollTop = boxEndY - viewportHeight;\n                newScrollTop = Math.max(minScrollTop, desiredScrollTop);\n            }\n        }\n        else if (verticalType === 1 /* viewEvents.VerticalRevealType.Center */ || verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */) {\n            if (verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // Box is outside the viewport... center it\n                const boxMiddleY = (boxStartY + boxEndY) / 2;\n                newScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n            }\n        }\n        else {\n            newScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === 3 /* viewEvents.VerticalRevealType.Top */, verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */);\n        }\n        return newScrollTop;\n    }\n    _computeScrollLeftToReveal(horizontalRevealRequest) {\n        const viewport = this._context.viewLayout.getCurrentViewport();\n        const layoutInfo = this._context.configuration.options.get(143 /* EditorOption.layoutInfo */);\n        const viewportStartX = viewport.left;\n        const viewportEndX = viewportStartX + viewport.width - layoutInfo.verticalScrollbarWidth;\n        let boxStartX = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n        let boxEndX = 0;\n        if (horizontalRevealRequest.type === 'range') {\n            const visibleRanges = this._visibleRangesForLineRange(horizontalRevealRequest.lineNumber, horizontalRevealRequest.startColumn, horizontalRevealRequest.endColumn);\n            if (!visibleRanges) {\n                return null;\n            }\n            for (const visibleRange of visibleRanges.ranges) {\n                boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n            }\n        }\n        else {\n            for (const selection of horizontalRevealRequest.selections) {\n                if (selection.startLineNumber !== selection.endLineNumber) {\n                    return null;\n                }\n                const visibleRanges = this._visibleRangesForLineRange(selection.startLineNumber, selection.startColumn, selection.endColumn);\n                if (!visibleRanges) {\n                    return null;\n                }\n                for (const visibleRange of visibleRanges.ranges) {\n                    boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                    boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n                }\n            }\n        }\n        if (!horizontalRevealRequest.minimalReveal) {\n            boxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n            boxEndX += this._revealHorizontalRightPadding;\n        }\n        if (horizontalRevealRequest.type === 'selections' && boxEndX - boxStartX > viewport.width) {\n            return null;\n        }\n        const newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\n        return {\n            scrollLeft: newScrollLeft,\n            maxHorizontalOffset: boxEndX\n        };\n    }\n    _computeMinimumScrolling(viewportStart, viewportEnd, boxStart, boxEnd, revealAtStart, revealAtEnd) {\n        viewportStart = viewportStart | 0;\n        viewportEnd = viewportEnd | 0;\n        boxStart = boxStart | 0;\n        boxEnd = boxEnd | 0;\n        revealAtStart = !!revealAtStart;\n        revealAtEnd = !!revealAtEnd;\n        const viewportLength = viewportEnd - viewportStart;\n        const boxLength = boxEnd - boxStart;\n        if (boxLength < viewportLength) {\n            // The box would fit in the viewport\n            if (revealAtStart) {\n                return boxStart;\n            }\n            if (revealAtEnd) {\n                return Math.max(0, boxEnd - viewportLength);\n            }\n            if (boxStart < viewportStart) {\n                // The box is above the viewport\n                return boxStart;\n            }\n            else if (boxEnd > viewportEnd) {\n                // The box is below the viewport\n                return Math.max(0, boxEnd - viewportLength);\n            }\n        }\n        else {\n            // The box would not fit in the viewport\n            // Reveal the beginning of the box\n            return boxStart;\n        }\n        return viewportStart;\n    }\n}\n/**\n * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\n */\nViewLines.HORIZONTAL_EXTRA_PX = 30;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ArrayQueue } from '../../../../base/common/arrays.js';\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Range } from '../../../common/core/range.js';\n/**\n * Represents a decoration that should be shown along the lines from `startLineNumber` to `endLineNumber`.\n * This can end up producing multiple `LineDecorationToRender`.\n */\nexport class DecorationToRender {\n    constructor(startLineNumber, endLineNumber, className, zIndex) {\n        this._decorationToRenderBrand = undefined;\n        this.startLineNumber = +startLineNumber;\n        this.endLineNumber = +endLineNumber;\n        this.className = String(className);\n        this.zIndex = zIndex !== null && zIndex !== void 0 ? zIndex : 0;\n    }\n}\n/**\n * A decoration that should be shown along a line.\n */\nexport class LineDecorationToRender {\n    constructor(className, zIndex) {\n        this.className = className;\n        this.zIndex = zIndex;\n    }\n}\n/**\n * Decorations to render on a visible line.\n */\nexport class VisibleLineDecorationsToRender {\n    constructor() {\n        this.decorations = [];\n    }\n    add(decoration) {\n        this.decorations.push(decoration);\n    }\n    getDecorations() {\n        return this.decorations;\n    }\n}\nexport class DedupOverlay extends DynamicViewOverlay {\n    /**\n     * Returns an array with an element for each visible line number.\n     */\n    _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = new VisibleLineDecorationsToRender();\n        }\n        if (decorations.length === 0) {\n            return output;\n        }\n        // Sort decorations by className, then by startLineNumber and then by endLineNumber\n        decorations.sort((a, b) => {\n            if (a.className === b.className) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return (a.className < b.className ? -1 : 1);\n        });\n        let prevClassName = null;\n        let prevEndLineIndex = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const className = d.className;\n            const zIndex = d.zIndex;\n            let startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n            const endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n            if (prevClassName === className) {\n                // Here we avoid rendering the same className multiple times on the same line\n                startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n                prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n            }\n            else {\n                prevClassName = className;\n                prevEndLineIndex = endLineIndex;\n            }\n            for (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n                output[i].add(new LineDecorationToRender(className, zIndex));\n            }\n        }\n        return output;\n    }\n}\nexport class GlyphMarginWidgets extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._widgets = {};\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName('glyph-margin-widgets');\n        this.domNode.setPosition('absolute');\n        this.domNode.setTop(0);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(57 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._glyphMarginDecorationLaneCount = layoutInfo.glyphMarginDecorationLaneCount;\n        this._managedDomNodes = [];\n        this._decorationGlyphsToRender = [];\n    }\n    dispose() {\n        this._managedDomNodes = [];\n        this._decorationGlyphsToRender = [];\n        this._widgets = {};\n        super.dispose();\n    }\n    getWidgets() {\n        return Object.values(this._widgets);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(57 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._glyphMarginDecorationLaneCount = layoutInfo.glyphMarginDecorationLaneCount;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // --- begin widget management\n    addWidget(widget) {\n        const domNode = createFastDomNode(widget.getDomNode());\n        this._widgets[widget.getId()] = {\n            widget: widget,\n            preference: widget.getPosition(),\n            domNode: domNode,\n            renderInfo: null\n        };\n        domNode.setPosition('absolute');\n        domNode.setDisplay('none');\n        domNode.setAttribute('widgetId', widget.getId());\n        this.domNode.appendChild(domNode);\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, preference) {\n        const myWidget = this._widgets[widget.getId()];\n        if (myWidget.preference.lane === preference.lane\n            && myWidget.preference.zIndex === preference.zIndex\n            && Range.equalsRange(myWidget.preference.range, preference.range)) {\n            return false;\n        }\n        myWidget.preference = preference;\n        this.setShouldRender();\n        return true;\n    }\n    removeWidget(widget) {\n        var _a;\n        const widgetId = widget.getId();\n        if (this._widgets[widgetId]) {\n            const widgetData = this._widgets[widgetId];\n            const domNode = widgetData.domNode.domNode;\n            delete this._widgets[widgetId];\n            (_a = domNode.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(domNode);\n            this.setShouldRender();\n        }\n    }\n    // --- end widget management\n    _collectDecorationBasedGlyphRenderRequest(ctx, requests) {\n        var _a, _b, _c;\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const decorations = ctx.getDecorationsInViewport();\n        for (const d of decorations) {\n            const glyphMarginClassName = d.options.glyphMarginClassName;\n            if (!glyphMarginClassName) {\n                continue;\n            }\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            const lane = Math.min((_b = (_a = d.options.glyphMargin) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : 1, this._glyphMarginDecorationLaneCount);\n            const zIndex = (_c = d.options.zIndex) !== null && _c !== void 0 ? _c : 0;\n            for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n                requests.push(new DecorationBasedGlyphRenderRequest(lineNumber, lane, zIndex, glyphMarginClassName));\n            }\n        }\n    }\n    _collectWidgetBasedGlyphRenderRequest(ctx, requests) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (const widget of Object.values(this._widgets)) {\n            const range = widget.preference.range;\n            if (range.endLineNumber < visibleStartLineNumber || range.startLineNumber > visibleEndLineNumber) {\n                // The widget is not in the viewport\n                continue;\n            }\n            // The widget is in the viewport, find a good line for it\n            const widgetLineNumber = Math.max(range.startLineNumber, visibleStartLineNumber);\n            const lane = Math.min(widget.preference.lane, this._glyphMarginDecorationLaneCount);\n            requests.push(new WidgetBasedGlyphRenderRequest(widgetLineNumber, lane, widget.preference.zIndex, widget));\n        }\n    }\n    _collectSortedGlyphRenderRequests(ctx) {\n        const requests = [];\n        this._collectDecorationBasedGlyphRenderRequest(ctx, requests);\n        this._collectWidgetBasedGlyphRenderRequest(ctx, requests);\n        // sort requests by lineNumber ASC, lane  ASC, zIndex DESC, type DESC (widgets first), className ASC\n        // don't change this sort unless you understand `prepareRender` below.\n        requests.sort((a, b) => {\n            if (a.lineNumber === b.lineNumber) {\n                if (a.lane === b.lane) {\n                    if (a.zIndex === b.zIndex) {\n                        if (b.type === a.type) {\n                            if (a.type === 0 /* GlyphRenderRequestType.Decoration */ && b.type === 0 /* GlyphRenderRequestType.Decoration */) {\n                                return (a.className < b.className ? -1 : 1);\n                            }\n                            return 0;\n                        }\n                        return b.type - a.type;\n                    }\n                    return b.zIndex - a.zIndex;\n                }\n                return a.lane - b.lane;\n            }\n            return a.lineNumber - b.lineNumber;\n        });\n        return requests;\n    }\n    /**\n     * Will store render information in each widget's renderInfo and in `_decorationGlyphsToRender`.\n     */\n    prepareRender(ctx) {\n        if (!this._glyphMargin) {\n            this._decorationGlyphsToRender = [];\n            return;\n        }\n        for (const widget of Object.values(this._widgets)) {\n            widget.renderInfo = null;\n        }\n        const requests = new ArrayQueue(this._collectSortedGlyphRenderRequests(ctx));\n        const decorationGlyphsToRender = [];\n        while (requests.length > 0) {\n            const first = requests.peek();\n            if (!first) {\n                // not possible\n                break;\n            }\n            // Requests are sorted by lineNumber and lane, so we read all requests for this particular location\n            const requestsAtLocation = requests.takeWhile((el) => el.lineNumber === first.lineNumber && el.lane === first.lane);\n            if (!requestsAtLocation || requestsAtLocation.length === 0) {\n                // not possible\n                break;\n            }\n            const winner = requestsAtLocation[0];\n            if (winner.type === 0 /* GlyphRenderRequestType.Decoration */) {\n                // combine all decorations with the same z-index\n                const classNames = [];\n                // requests are sorted by zIndex, type, and className so we can dedup className by looking at the previous one\n                for (const request of requestsAtLocation) {\n                    if (request.zIndex !== winner.zIndex || request.type !== winner.type) {\n                        break;\n                    }\n                    if (classNames.length === 0 || classNames[classNames.length - 1] !== request.className) {\n                        classNames.push(request.className);\n                    }\n                }\n                decorationGlyphsToRender.push(winner.accept(classNames.join(' '))); // TODO@joyceerhl Implement overflow for remaining decorations\n            }\n            else {\n                // widgets cannot be combined\n                winner.widget.renderInfo = {\n                    lineNumber: winner.lineNumber,\n                    lane: winner.lane,\n                };\n            }\n        }\n        this._decorationGlyphsToRender = decorationGlyphsToRender;\n    }\n    render(ctx) {\n        if (!this._glyphMargin) {\n            for (const widget of Object.values(this._widgets)) {\n                widget.domNode.setDisplay('none');\n            }\n            while (this._managedDomNodes.length > 0) {\n                const domNode = this._managedDomNodes.pop();\n                domNode === null || domNode === void 0 ? void 0 : domNode.domNode.remove();\n            }\n            return;\n        }\n        const width = (Math.round(this._glyphMarginWidth / this._glyphMarginDecorationLaneCount));\n        // Render widgets\n        for (const widget of Object.values(this._widgets)) {\n            if (!widget.renderInfo) {\n                // this widget is not visible\n                widget.domNode.setDisplay('none');\n            }\n            else {\n                const top = ctx.viewportData.relativeVerticalOffset[widget.renderInfo.lineNumber - ctx.viewportData.startLineNumber];\n                const left = this._glyphMarginLeft + (widget.renderInfo.lane - 1) * this._lineHeight;\n                widget.domNode.setDisplay('block');\n                widget.domNode.setTop(top);\n                widget.domNode.setLeft(left);\n                widget.domNode.setWidth(width);\n                widget.domNode.setHeight(this._lineHeight);\n            }\n        }\n        // Render decorations, reusing previous dom nodes as possible\n        for (let i = 0; i < this._decorationGlyphsToRender.length; i++) {\n            const dec = this._decorationGlyphsToRender[i];\n            const top = ctx.viewportData.relativeVerticalOffset[dec.lineNumber - ctx.viewportData.startLineNumber];\n            const left = this._glyphMarginLeft + (dec.lane - 1) * this._lineHeight;\n            let domNode;\n            if (i < this._managedDomNodes.length) {\n                domNode = this._managedDomNodes[i];\n            }\n            else {\n                domNode = createFastDomNode(document.createElement('div'));\n                this._managedDomNodes.push(domNode);\n                this.domNode.appendChild(domNode);\n            }\n            domNode.setClassName(`cgmr codicon ` + dec.combinedClassName);\n            domNode.setPosition(`absolute`);\n            domNode.setTop(top);\n            domNode.setLeft(left);\n            domNode.setWidth(width);\n            domNode.setHeight(this._lineHeight);\n        }\n        // remove extra dom nodes\n        while (this._managedDomNodes.length > this._decorationGlyphsToRender.length) {\n            const domNode = this._managedDomNodes.pop();\n            domNode === null || domNode === void 0 ? void 0 : domNode.domNode.remove();\n        }\n    }\n}\n/**\n * A request to render a decoration in the glyph margin at a certain location.\n */\nclass DecorationBasedGlyphRenderRequest {\n    constructor(lineNumber, lane, zIndex, className) {\n        this.lineNumber = lineNumber;\n        this.lane = lane;\n        this.zIndex = zIndex;\n        this.className = className;\n        this.type = 0 /* GlyphRenderRequestType.Decoration */;\n    }\n    accept(combinedClassName) {\n        return new DecorationBasedGlyph(this.lineNumber, this.lane, combinedClassName);\n    }\n}\n/**\n * A request to render a widget in the glyph margin at a certain location.\n */\nclass WidgetBasedGlyphRenderRequest {\n    constructor(lineNumber, lane, zIndex, widget) {\n        this.lineNumber = lineNumber;\n        this.lane = lane;\n        this.zIndex = zIndex;\n        this.widget = widget;\n        this.type = 1 /* GlyphRenderRequestType.Widget */;\n    }\n}\nclass DecorationBasedGlyph {\n    constructor(lineNumber, lane, combinedClassName) {\n        this.lineNumber = lineNumber;\n        this.lane = lane;\n        this.combinedClassName = combinedClassName;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './linesDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class LinesDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const linesDecorationsClassName = d.options.linesDecorationsClassName;\n            const zIndex = d.options.zIndex;\n            if (linesDecorationsClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName, zIndex);\n            }\n            const firstLineDecorationClassName = d.options.firstLineDecorationClassName;\n            if (firstLineDecorationClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.startLineNumber, firstLineDecorationClassName, zIndex);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const left = this._decorationsLeft.toString();\n        const width = this._decorationsWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const decorations = toRender[lineIndex].getDecorations();\n            let lineOutput = '';\n            for (const decoration of decorations) {\n                lineOutput += '<div class=\"cldr ' + decoration.className + common;\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './marginDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class MarginViewLineDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const marginClassName = d.options.marginClassName;\n            const zIndex = d.options.zIndex;\n            if (marginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, marginClassName, zIndex);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const decorations = toRender[lineIndex].getDecorations();\n            let lineOutput = '';\n            for (const decoration of decorations) {\n                lineOutput += '<div class=\"cmdr ' + decoration.className + '\" style=\"\"></div>';\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const allCharCodes = (() => {\n    const v = [];\n    for (let i = 32 /* Constants.START_CH_CODE */; i <= 126 /* Constants.END_CH_CODE */; i++) {\n        v.push(i);\n    }\n    v.push(65533 /* Constants.UNKNOWN_CODE */);\n    return v;\n})();\nexport const getCharIndex = (chCode, fontScale) => {\n    chCode -= 32 /* Constants.START_CH_CODE */;\n    if (chCode < 0 || chCode > 96 /* Constants.CHAR_COUNT */) {\n        if (fontScale <= 2) {\n            // for smaller scales, we can get away with using any ASCII character...\n            return (chCode + 96 /* Constants.CHAR_COUNT */) % 96 /* Constants.CHAR_COUNT */;\n        }\n        return 96 /* Constants.CHAR_COUNT */ - 1; // unknown symbol\n    }\n    return chCode;\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getCharIndex } from './minimapCharSheet.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\nexport class MinimapCharRenderer {\n    constructor(charData, scale) {\n        this.scale = scale;\n        this._minimapCharRendererBrand = undefined;\n        this.charDataNormal = MinimapCharRenderer.soften(charData, 12 / 15);\n        this.charDataLight = MinimapCharRenderer.soften(charData, 50 / 60);\n    }\n    static soften(input, ratio) {\n        const result = new Uint8ClampedArray(input.length);\n        for (let i = 0, len = input.length; i < len; i++) {\n            result[i] = toUint8(input[i] * ratio);\n        }\n        return result;\n    }\n    renderChar(target, dx, dy, chCode, color, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight) {\n        const charWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* Constants.BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const charData = useLighterFont ? this.charDataLight : this.charDataNormal;\n        const charIndex = getCharIndex(chCode, fontScale);\n        const destWidth = target.width * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let sourceOffset = charIndex * charWidth * charHeight;\n        let row = dy * destWidth + dx * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                const c = (charData[sourceOffset++] / 255) * (foregroundAlpha / 255);\n                dest[column++] = backgroundR + deltaR * c;\n                dest[column++] = backgroundG + deltaG * c;\n                dest[column++] = backgroundB + deltaB * c;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n    blockRenderChar(target, dx, dy, color, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight) {\n        const charWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* Constants.BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const destWidth = target.width * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        const c = 0.5 * (foregroundAlpha / 255);\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const colorR = backgroundR + deltaR * c;\n        const colorG = backgroundG + deltaG * c;\n        const colorB = backgroundB + deltaB * c;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let row = dy * destWidth + dx * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                dest[column++] = colorR;\n                dest[column++] = colorG;\n                dest[column++] = colorB;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nconst charTable = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15\n};\nconst decodeData = (str) => {\n    const output = new Uint8ClampedArray(str.length / 2);\n    for (let i = 0; i < str.length; i += 2) {\n        output[i >> 1] = (charTable[str[i]] << 4) | (charTable[str[i + 1]] & 0xF);\n    }\n    return output;\n};\n/*\nconst encodeData = (data: Uint8ClampedArray, length: string) => {\n    const chars = '0123456789ABCDEF';\n    let output = '';\n    for (let i = 0; i < data.length; i++) {\n        output += chars[data[i] >> 4] + chars[data[i] & 0xf];\n    }\n    return output;\n};\n*/\n/**\n * Map of minimap scales to prebaked sample data at those scales. We don't\n * sample much larger data, because then font family becomes visible, which\n * is use-configurable.\n */\nexport const prebakedMiniMaps = {\n    1: createSingleCallFunction(() => decodeData('0000511D6300CF609C709645A78432005642574171487021003C451900274D35D762755E8B629C5BA856AF57BA649530C167D1512A272A3F6038604460398526BCA2A968DB6F8957C768BE5FBE2FB467CF5D8D5B795DC7625B5DFF50DE64C466DB2FC47CD860A65E9A2EB96CB54CE06DA763AB2EA26860524D3763536601005116008177A8705E53AB738E6A982F88BAA35B5F5B626D9C636B449B737E5B7B678598869A662F6B5B8542706C704C80736A607578685B70594A49715A4522E792')),\n    2: createSingleCallFunction(() => decodeDatan};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MinimapCharRenderer } from './minimapCharRenderer.js';\nimport { allCharCodes } from './minimapCharSheet.js';\nimport { prebakedMiniMaps } from './minimapPreBaked.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\n/**\n * Creates character renderers. It takes a 'scale' that determines how large\n * characters should be drawn. Using this, it draws data into a canvas and\n * then downsamples the characters as necessary for the current display.\n * This makes rendering more efficient, rather than drawing a full (tiny)\n * font, or downsampling in real-time.\n */\nexport class MinimapCharRendererFactory {\n    /**\n     * Creates a new character renderer factory with the given scale.\n     */\n    static create(scale, fontFamily) {\n        // renderers are immutable. By default we'll 'create' a new minimap\n        // character renderer whenever we switch editors, no need to do extra work.\n        if (this.lastCreated && scale === this.lastCreated.scale && fontFamily === this.lastFontFamily) {\n            return this.lastCreated;\n        }\n        let factory;\n        if (prebakedMiniMaps[scale]) {\n            factory = new MinimapCharRenderer(prebakedMiniMaps[scale](), scale);\n        }\n        else {\n            factory = MinimapCharRendererFactory.createFromSampleData(MinimapCharRendererFactory.createSampleData(fontFamily).data, scale);\n        }\n        this.lastFontFamily = fontFamily;\n        this.lastCreated = factory;\n        return factory;\n    }\n    /**\n     * Creates the font sample data, writing to a canvas.\n     */\n    static createSampleData(fontFamily) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.style.height = `${16 /* Constants.SAMPLED_CHAR_HEIGHT */}px`;\n        canvas.height = 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n        canvas.width = 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n        canvas.style.width = 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */ + 'px';\n        ctx.fillStyle = '#ffffff';\n        ctx.font = `bold ${16 /* Constants.SAMPLED_CHAR_HEIGHT */}px ${fontFamily}`;\n        ctx.textBaseline = 'middle';\n        let x = 0;\n        for (const code of allCharCodes) {\n            ctx.fillText(String.fromCharCode(code), x, 16 /* Constants.SAMPLED_CHAR_HEIGHT */ / 2);\n            x += 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n        }\n        return ctx.getImageData(0, 0, 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */, 16 /* Constants.SAMPLED_CHAR_HEIGHT */);\n    }\n    /**\n     * Creates a character renderer from the canvas sample data.\n     */\n    static createFromSampleData(source, scale) {\n        const expectedLength = 16 /* Constants.SAMPLED_CHAR_HEIGHT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */ * 4 /* Constants.RGBA_CHANNELS_CNT */ * 96 /* Constants.CHAR_COUNT */;\n        if (source.length !== expectedLength) {\n            throw new Error('Unexpected source in MinimapCharRenderer');\n        }\n        const charData = MinimapCharRendererFactory._downsample(source, scale);\n        return new MinimapCharRenderer(charData, scale);\n    }\n    static _downsampleChar(source, sourceOffset, dest, destOffset, scale) {\n        const width = 1 /* Constants.BASE_CHAR_WIDTH */ * scale;\n        const height = 2 /* Constants.BASE_CHAR_HEIGHT */ * scale;\n        let targetIndex = destOffset;\n        let brightest = 0;\n        // This is essentially an ad-hoc rescaling algorithm. Standard approaches\n        // like bicubic interpolation are awesome for scaling between image sizes,\n        // but don't work so well when scaling to very small pixel values, we end\n        // up with blurry, indistinct forms.\n        //\n        // The approach taken here is simply mapping each source pixel to the target\n        // pixels, and taking the weighted values for all pixels in each, and then\n        // averaging them out. Finally we apply an intensity boost in _downsample,\n        // since when scaling to the smallest pixel sizes there's more black space\n        // which causes characters to be much less distinct.\n        for (let y = 0; y < height; y++) {\n            // 1. For this destination pixel, get the source pixels we're sampling\n            // from (x1, y1) to the next pixel (x2, y2)\n            const sourceY1 = (y / height) * 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n            const sourceY2 = ((y + 1) / height) * 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n            for (let x = 0; x < width; x++) {\n                const sourceX1 = (x / width) * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n                const sourceX2 = ((x + 1) / width) * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n                // 2. Sample all of them, summing them up and weighting them. Similar\n                // to bilinear interpolation.\n                let value = 0;\n                let samples = 0;\n                for (let sy = sourceY1; sy < sourceY2; sy++) {\n                    const sourceRow = sourceOffset + Math.floor(sy) * 3840 /* Constants.RGBA_SAMPLED_ROW_WIDTH */;\n                    const yBalance = 1 - (sy - Math.floor(sy));\n                    for (let sx = sourceX1; sx < sourceX2; sx++) {\n                        const xBalance = 1 - (sx - Math.floor(sx));\n                        const sourceIndex = sourceRow + Math.floor(sx) * 4 /* Constants.RGBA_CHANNELS_CNT */;\n                        const weight = xBalance * yBalance;\n                        samples += weight;\n                        value += ((source[sourceIndex] * source[sourceIndex + 3]) / 255) * weight;\n                    }\n                }\n                const final = value / samples;\n                brightest = Math.max(brightest, final);\n                dest[targetIndex++] = toUint8(final);\n            }\n        }\n        return brightest;\n    }\n    static _downsample(data, scale) {\n        const pixelsPerCharacter = 2 /* Constants.BASE_CHAR_HEIGHT */ * scale * 1 /* Constants.BASE_CHAR_WIDTH */ * scale;\n        const resultLen = pixelsPerCharacter * 96 /* Constants.CHAR_COUNT */;\n        const result = new Uint8ClampedArray(resultLen);\n        let resultOffset = 0;\n        let sourceOffset = 0;\n        let brightest = 0;\n        for (let charIndex = 0; charIndex < 96 /* Constants.CHAR_COUNT */; charIndex++) {\n            brightest = Math.max(brightest, this._downsampleChar(data, sourceOffset, result, resultOffset, scale));\n            resultOffset += pixelsPerCharacter;\n            sourceOffset += 10 /* Constants.SAMPLED_CHAR_WIDTH */ * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        }\n        if (brightest > 0) {\n            const adjust = 255 / brightest;\n            for (let i = 0; i < resultLen; i++) {\n                result[i] *= adjust;\n            }\n        }\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './minimap.css';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { GlobalPointerMoveMonitor } from '../../../../base/browser/globalPointerMoveMonitor.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { RenderedLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { MINIMAP_GUTTER_WIDTH, EditorLayoutInfoComputer } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { RGBA8 } from '../../../common/core/rgba.js';\nimport { MinimapTokensColorTracker } from '../../../common/viewModel/minimapTokensColorTracker.js';\nimport { ViewModelDecoration } from '../../../common/viewModel.js';\nimport { minimapSelection, minimapBackground, minimapForegroundOpacity } from '../../../../platform/theme/common/colorRegistry.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EventType, Gesture } from '../../../../base/browser/touch.js';\nimport { MinimapCharRendererFactory } from './minimapCharRendererFactory.js';\nimport { MinimapPosition } from '../../../common/model.js';\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nconst POINTER_DRAG_RESET_DISTANCE = 140;\nconst GUTTER_DECORATION_WIDTH = 2;\nclass MinimapOptions {\n    constructor(configuration, theme, tokensColorTracker) {\n        const options = configuration.options;\n        const pixelRatio = options.get(141 /* EditorOption.pixelRatio */);\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        const minimapLayout = layoutInfo.minimap;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const minimapOpts = options.get(72 /* EditorOption.minimap */);\n        this.renderMinimap = minimapLayout.renderMinimap;\n        this.size = minimapOpts.size;\n        this.minimapHeightIsEditorHeight = minimapLayout.minimapHeightIsEditorHeight;\n        this.scrollBeyondLastLine = options.get(104 /* EditorOption.scrollBeyondLastLine */);\n        this.paddingTop = options.get(83 /* EditorOption.padding */).top;\n        this.paddingBottom = options.get(83 /* EditorOption.padding */).bottom;\n        this.showSlider = minimapOpts.showSlider;\n        this.autohide = minimapOpts.autohide;\n        this.pixelRatio = pixelRatio;\n        this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this.lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this.minimapLeft = minimapLayout.minimapLeft;\n        this.minimapWidth = minimapLayout.minimapWidth;\n        this.minimapHeight = layoutInfo.height;\n        this.canvasInnerWidth = minimapLayout.minimapCanvasInnerWidth;\n        this.canvasInnerHeight = minimapLayout.minimapCanvasInnerHeight;\n        this.canvasOuterWidth = minimapLayout.minimapCanvasOuterWidth;\n        this.canvasOuterHeight = minimapLayout.minimapCanvasOuterHeight;\n        this.isSampling = minimapLayout.minimapIsSampling;\n        this.editorHeight = layoutInfo.height;\n        this.fontScale = minimapLayout.minimapScale;\n        this.minimapLineHeight = minimapLayout.minimapLineHeight;\n        this.minimapCharWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.fontScale;\n        this.charRenderer = createSingleCallFunction(() => MinimapCharRendererFactory.create(this.fontScale, fontInfo.fontFamily));\n        this.defaultBackgroundColor = tokensColorTracker.getColor(2 /* ColorId.DefaultBackground */);\n        this.backgroundColor = MinimapOptions._getMinimapBackground(theme, this.defaultBackgroundColor);\n        this.foregroundAlpha = MinimapOptions._getMinimapForegroundOpacity(theme);\n    }\n    static _getMinimapBackground(theme, defaultBackgroundColor) {\n        const themeColor = theme.getColor(minimapBackground);\n        if (themeColor) {\n            return new RGBA8(themeColor.rgba.r, themeColor.rgba.g, themeColor.rgba.b, Math.round(255 * themeColor.rgba.a));\n        }\n        return defaultBackgroundColor;\n    }\n    static _getMinimapForegroundOpacity(theme) {\n        const themeColor = theme.getColor(minimapForegroundOpacity);\n        if (themeColor) {\n            return RGBA8._clamp(Math.round(255 * themeColor.rgba.a));\n        }\n        return 255;\n    }\n    equals(other) {\n        return (this.renderMinimap === other.renderMinimap\n            && this.size === other.size\n            && this.minimapHeightIsEditorHeight === other.minimapHeightIsEditorHeight\n            && this.scrollBeyondLastLine === other.scrollBeyondLastLine\n            && this.paddingTop === other.paddingTop\n            && this.paddingBottom === other.paddingBottom\n            && this.showSlider === other.showSlider\n            && this.autohide === other.autohide\n            && this.pixelRatio === other.pixelRatio\n            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n            && this.lineHeight === other.lineHeight\n            && this.minimapLeft === other.minimapLeft\n            && this.minimapWidth === other.minimapWidth\n            && this.minimapHeight === other.minimapHeight\n            && this.canvasInnerWidth === other.canvasInnerWidth\n            && this.canvasInnerHeight === other.canvasInnerHeight\n            && this.canvasOuterWidth === other.canvasOuterWidth\n            && this.canvasOuterHeight === other.canvasOuterHeight\n            && this.isSampling === other.isSampling\n            && this.editorHeight === other.editorHeight\n            && this.fontScale === other.fontScale\n            && this.minimapLineHeight === other.minimapLineHeight\n            && this.minimapCharWidth === other.minimapCharWidth\n            && this.defaultBackgroundColor && this.defaultBackgroundColor.equals(other.defaultBackgroundColor)\n            && this.backgroundColor && this.backgroundColor.equals(other.backgroundColor)\n            && this.foregroundAlpha === other.foregroundAlpha);\n    }\n}\nclass MinimapLayout {\n    constructor(\n    /**\n     * The given editor scrollTop (input).\n     */\n    scrollTop, \n    /**\n     * The given editor scrollHeight (input).\n     */\n    scrollHeight, sliderNeeded, _computedSliderRatio, \n    /**\n     * slider dom node top (in CSS px)\n     */\n    sliderTop, \n    /**\n     * slider dom node height (in CSS px)\n     */\n    sliderHeight, \n    /**\n     * empty lines to reserve at the top of the minimap.\n     */\n    topPaddingLineCount, \n    /**\n     * minimap render start line number.\n     */\n    startLineNumber, \n    /**\n     * minimap render end line number.\n     */\n    endLineNumber) {\n        this.scrollTop = scrollTop;\n        this.scrollHeight = scrollHeight;\n        this.sliderNeeded = sliderNeeded;\n        this._computedSliderRatio = _computedSliderRatio;\n        this.sliderTop = sliderTop;\n        this.sliderHeight = sliderHeight;\n        this.topPaddingLineCount = topPaddingLineCount;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n    }\n    /**\n     * Compute a desired `scrollPosition` such that the slider moves by `delta`.\n     */\n    getDesiredScrollTopFromDelta(delta) {\n        return Math.round(this.scrollTop + delta / this._computedSliderRatio);\n    }\n    getDesiredScrollTopFromTouchLocation(pageY) {\n        return Math.round((pageY - this.sliderHeight / 2) / this._computedSliderRatio);\n    }\n    /**\n     * Intersect a line range with `this.startLineNumber` and `this.endLineNumber`.\n     */\n    intersectWithViewport(range) {\n        const startLineNumber = Math.max(this.startLineNumber, range.startLineNumber);\n        const endLineNumber = Math.min(this.endLineNumber, range.endLineNumber);\n        if (startLineNumber > endLineNumber) {\n            // entirely outside minimap's viewport\n            return null;\n        }\n        return [startLineNumber, endLineNumber];\n    }\n    /**\n     * Get the inner minimap y coordinate for a line number.\n     */\n    getYForLineNumber(lineNumber, minimapLineHeight) {\n        return +(lineNumber - this.startLineNumber + this.topPaddingLineCount) * minimapLineHeight;\n    }\n    static create(options, viewportStartLineNumber, viewportEndLineNumber, viewportStartLineNumberVerticalOffset, viewportHeight, viewportContainsWhitespaceGaps, lineCount, realLineCount, scrollTop, scrollHeight, previousLayout) {\n        const pixelRatio = options.pixelRatio;\n        const minimapLineHeight = options.minimapLineHeight;\n        const minimapLinesFitting = Math.floor(options.canvasInnerHeight / minimapLineHeight);\n        const lineHeight = options.lineHeight;\n        if (options.minimapHeightIsEditorHeight) {\n            let logicalScrollHeight = (realLineCount * options.lineHeight\n                + options.paddingTop\n                + options.paddingBottom);\n            if (options.scrollBeyondLastLine) {\n                logicalScrollHeight += Math.max(0, viewportHeight - options.lineHeight - options.paddingBottom);\n            }\n            const sliderHeight = Math.max(1, Math.floor(viewportHeight * viewportHeight / logicalScrollHeight));\n            const maxMinimapSliderTop = Math.max(0, options.minimapHeight - sliderHeight);\n            // The slider can move from 0 to `maxMinimapSliderTop`\n            // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n            const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n            const sliderTop = (scrollTop * computedSliderRatio);\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            const maxLinesFitting = Math.floor(options.canvasInnerHeight / options.minimapLineHeight);\n            const topPaddingLineCount = Math.floor(options.paddingTop / options.lineHeight);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, topPaddingLineCount, 1, Math.min(lineCount, maxLinesFitting));\n        }\n        // The visible line count in a viewport can change due to a number of reasons:\n        //  a) with the same viewport width, different scroll positions can result in partial lines being visible:\n        //    e.g. for a line height of 20, and a viewport height of 600\n        //          * scrollTop = 0  => visible lines are [1, 30]\n        //          * scrollTop = 10 => visible lines are [1, 31] (with lines 1 and 31 partially visible)\n        //          * scrollTop = 20 => visible lines are [2, 31]\n        //  b) whitespace gaps might make their way in the viewport (which results in a decrease in the visible line count)\n        //  c) we could be in the scroll beyond last line case (which also results in a decrease in the visible line count, down to possibly only one line being visible)\n        // We must first establish a desirable slider height.\n        let sliderHeight;\n        if (viewportContainsWhitespaceGaps && viewportEndLineNumber !== lineCount) {\n            // case b) from above: there are whitespace gaps in the viewport.\n            // In this case, the height of the slider directly reflects the visible line count.\n            const viewportLineCount = viewportEndLineNumber - viewportStartLineNumber + 1;\n            sliderHeight = Math.floor(viewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        else {\n            // The slider has a stable height\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            sliderHeight = Math.floor(expectedViewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        const extraLinesAtTheTop = Math.floor(options.paddingTop / lineHeight);\n        let extraLinesAtTheBottom = Math.floor(options.paddingBottom / lineHeight);\n        if (options.scrollBeyondLastLine) {\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            extraLinesAtTheBottom = Math.max(extraLinesAtTheBottom, expectedViewportLineCount - 1);\n        }\n        let maxMinimapSliderTop;\n        if (extraLinesAtTheBottom > 0) {\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            // The minimap slider, when dragged all the way down, will contain the last line at its top\n            maxMinimapSliderTop = (extraLinesAtTheTop + lineCount + extraLinesAtTheBottom - expectedViewportLineCount - 1) * minimapLineHeight / pixelRatio;\n        }\n        else {\n            // The minimap slider, when dragged all the way down, will contain the last line at its bottom\n            maxMinimapSliderTop = Math.max(0, (extraLinesAtTheTop + lineCount) * minimapLineHeight / pixelRatio - sliderHeight);\n        }\n        maxMinimapSliderTop = Math.min(options.minimapHeight - sliderHeight, maxMinimapSliderTop);\n        // The slider can move from 0 to `maxMinimapSliderTop`\n        // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n        const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n        const sliderTop = (scrollTop * computedSliderRatio);\n        if (minimapLinesFitting >= extraLinesAtTheTop + lineCount + extraLinesAtTheBottom) {\n            // All lines fit in the minimap\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, extraLinesAtTheTop, 1, lineCount);\n        }\n        else {\n            let consideringStartLineNumber;\n            if (viewportStartLineNumber > 1) {\n                consideringStartLineNumber = viewportStartLineNumber + extraLinesAtTheTop;\n            }\n            else {\n                consideringStartLineNumber = Math.max(1, scrollTop / lineHeight);\n            }\n            let topPaddingLineCount;\n            let startLineNumber = Math.max(1, Math.floor(consideringStartLineNumber - sliderTop * pixelRatio / minimapLineHeight));\n            if (startLineNumber < extraLinesAtTheTop) {\n                topPaddingLineCount = extraLinesAtTheTop - startLineNumber + 1;\n                startLineNumber = 1;\n            }\n            else {\n                topPaddingLineCount = 0;\n                startLineNumber = Math.max(1, startLineNumber - extraLinesAtTheTop);\n            }\n            // Avoid flickering caused by a partial viewport start line\n            // by being consistent w.r.t. the previous layout decision\n            if (previousLayout && previousLayout.scrollHeight === scrollHeight) {\n                if (previousLayout.scrollTop > scrollTop) {\n                    // Scrolling up => never increase `startLineNumber`\n                    startLineNumber = Math.min(startLineNumber, previousLayout.startLineNumber);\n                    topPaddingLineCount = Math.max(topPaddingLineCount, previousLayout.topPaddingLineCount);\n                }\n                if (previousLayout.scrollTop < scrollTop) {\n                    // Scrolling down => never decrease `startLineNumber`\n                    startLineNumber = Math.max(startLineNumber, previousLayout.startLineNumber);\n                    topPaddingLineCount = Math.min(topPaddingLineCount, previousLayout.topPaddingLineCount);\n                }\n            }\n            const endLineNumber = Math.min(lineCount, startLineNumber - topPaddingLineCount + minimapLinesFitting - 1);\n            const partialLine = (scrollTop - viewportStartLineNumberVerticalOffset) / lineHeight;\n            let sliderTopAligned;\n            if (scrollTop >= options.paddingTop) {\n                sliderTopAligned = (viewportStartLineNumber - startLineNumber + topPaddingLineCount + partialLine) * minimapLineHeight / pixelRatio;\n            }\n            else {\n                sliderTopAligned = (scrollTop / options.paddingTop) * (topPaddingLineCount + partialLine) * minimapLineHeight / pixelRatio;\n            }\n            return new MinimapLayout(scrollTop, scrollHeight, true, computedSliderRatio, sliderTopAligned, sliderHeight, topPaddingLineCount, startLineNumber, endLineNumber);\n        }\n    }\n}\nclass MinimapLine {\n    constructor(dy) {\n        this.dy = dy;\n    }\n    onContentChanged() {\n        this.dy = -1;\n    }\n    onTokensChanged() {\n        this.dy = -1;\n    }\n}\nMinimapLine.INVALID = new MinimapLine(-1);\nclass RenderData {\n    constructor(renderedLayout, imageData, lines) {\n        this.renderedLayout = renderedLayout;\n        this._imageData = imageData;\n        this._renderedLines = new RenderedLinesCollection(() => MinimapLine.INVALID);\n        this._renderedLines._set(renderedLayout.startLineNumber, lines);\n    }\n    /**\n     * Check if the current RenderData matches accurately the new desired layout and no painting is needed.\n     */\n    linesEquals(layout) {\n        if (!this.scrollEquals(layout)) {\n            return false;\n        }\n        const tmp = this._renderedLines._get();\n        const lines = tmp.lines;\n        for (let i = 0, len = lines.length; i < len; i++) {\n            if (lines[i].dy === -1) {\n                // This line is invalid\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Check if the current RenderData matches the new layout's scroll position\n     */\n    scrollEquals(layout) {\n        return this.renderedLayout.startLineNumber === layout.startLineNumber\n            && this.renderedLayout.endLineNumber === layout.endLineNumber;\n    }\n    _get() {\n        const tmp = this._renderedLines._get();\n        return {\n            imageData: this._imageData,\n            rendLineNumberStart: tmp.rendLineNumberStart,\n            lines: tmp.lines\n        };\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        return this._renderedLines.onLinesChanged(changeFromLineNumber, changeCount);\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        this._renderedLines.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        this._renderedLines.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n    }\n    onTokensChanged(ranges) {\n        return this._renderedLines.onTokensChanged(ranges);\n    }\n}\n/**\n * Some sort of double buffering.\n *\n * Keeps two buffers around that will be rotated for painting.\n * Always gives a buffer that is filled with the background color.\n */\nclass MinimapBuffers {\n    constructor(ctx, WIDTH, HEIGHT, background) {\n        this._backgroundFillData = MinimapBuffers._createBackgroundFillData(WIDTH, HEIGHT, background);\n        this._buffers = [\n            ctx.createImageData(WIDTH, HEIGHT),\n            ctx.createImageData(WIDTH, HEIGHT)\n        ];\n        this._lastUsedBuffer = 0;\n    }\n    getBuffer() {\n        // rotate buffers\n        this._lastUsedBuffer = 1 - this._lastUsedBuffer;\n        const result = this._buffers[this._lastUsedBuffer];\n        // fill with background color\n        result.data.set(this._backgroundFillData);\n        return result;\n    }\n    static _createBackgroundFillData(WIDTH, HEIGHT, background) {\n        const backgroundR = background.r;\n        const backgroundG = background.g;\n        const backgroundB = background.b;\n        const backgroundA = background.a;\n        const result = new Uint8ClampedArray(WIDTH * HEIGHT * 4);\n        let offset = 0;\n        for (let i = 0; i < HEIGHT; i++) {\n            for (let j = 0; j < WIDTH; j++) {\n                result[offset] = backgroundR;\n                result[offset + 1] = backgroundG;\n                result[offset + 2] = backgroundB;\n                result[offset + 3] = backgroundA;\n                offset += 4;\n            }\n        }\n        return result;\n    }\n}\nclass MinimapSamplingState {\n    static compute(options, viewLineCount, oldSamplingState) {\n        if (options.renderMinimap === 0 /* RenderMinimap.None */ || !options.isSampling) {\n            return [null, []];\n        }\n        // ratio is intentionally not part of the layout to avoid the layout changing all the time\n        // so we need to recompute it again...\n        const { minimapLineCount } = EditorLayoutInfoComputer.computeContainedMinimapLineCount({\n            viewLineCount: viewLineCount,\n            scrollBeyondLastLine: options.scrollBeyondLastLine,\n            paddingTop: options.paddingTop,\n            paddingBottom: options.paddingBottom,\n            height: options.editorHeight,\n            lineHeight: options.lineHeight,\n            pixelRatio: options.pixelRatio\n        });\n        const ratio = viewLineCount / minimapLineCount;\n        const halfRatio = ratio / 2;\n        if (!oldSamplingState || oldSamplingState.minimapLines.length === 0) {\n            const result = [];\n            result[0] = 1;\n            if (minimapLineCount > 1) {\n                for (let i = 0, lastIndex = minimapLineCount - 1; i < lastIndex; i++) {\n                    result[i] = Math.round(i * ratio + halfRatio);\n                }\n                result[minimapLineCount - 1] = viewLineCount;\n            }\n            return [new MinimapSamplingState(ratio, result), []];\n        }\n        const oldMinimapLines = oldSamplingState.minimapLines;\n        const oldLength = oldMinimapLines.length;\n        const result = [];\n        let oldIndex = 0;\n        let oldDeltaLineCount = 0;\n        let minViewLineNumber = 1;\n        const MAX_EVENT_COUNT = 10; // generate at most 10 events, if there are more than 10 changes, just flush all previous data\n        let events = [];\n        let lastEvent = null;\n        for (let i = 0; i < minimapLineCount; i++) {\n            const fromViewLineNumber = Math.max(minViewLineNumber, Math.round(i * ratio));\n            const toViewLineNumber = Math.max(fromViewLineNumber, Math.round((i + 1) * ratio));\n            while (oldIndex < oldLength && oldMinimapLines[oldIndex] < fromViewLineNumber) {\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                        lastEvent.deleteToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount--;\n                }\n                oldIndex++;\n            }\n            let selectedViewLineNumber;\n            if (oldIndex < oldLength && oldMinimapLines[oldIndex] <= toViewLineNumber) {\n                // reuse the old sampled line\n                selectedViewLineNumber = oldMinimapLines[oldIndex];\n                oldIndex++;\n            }\n            else {\n                if (i === 0) {\n                    selectedViewLineNumber = 1;\n                }\n                else if (i + 1 === minimapLineCount) {\n                    selectedViewLineNumber = viewLineCount;\n                }\n                else {\n                    selectedViewLineNumber = Math.round(i * ratio + halfRatio);\n                }\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'inserted' && lastEvent._i === i - 1) {\n                        lastEvent.insertToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'inserted', _i: i, insertFromLineNumber: oldMinimapLineNumber, insertToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount++;\n                }\n            }\n            result[i] = selectedViewLineNumber;\n            minViewLineNumber = selectedViewLineNumber;\n        }\n        if (events.length < MAX_EVENT_COUNT) {\n            while (oldIndex < oldLength) {\n                const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                    lastEvent.deleteToLineNumber++;\n                }\n                else {\n                    lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                    events.push(lastEvent);\n                }\n                oldDeltaLineCount--;\n                oldIndex++;\n            }\n        }\n        else {\n            // too many events, just give up\n            events = [{ type: 'flush' }];\n        }\n        return [new MinimapSamplingState(ratio, result), events];\n    }\n    constructor(samplingRatio, minimapLines) {\n        this.samplingRatio = samplingRatio;\n        this.minimapLines = minimapLines;\n    }\n    modelLineToMinimapLine(lineNumber) {\n        return Math.min(this.minimapLines.length, Math.max(1, Math.round(lineNumber / this.samplingRatio)));\n    }\n    /**\n     * Will return null if the model line ranges are not intersecting with a sampled model line.\n     */\n    modelLineRangeToMinimapLineRange(fromLineNumber, toLineNumber) {\n        let fromLineIndex = this.modelLineToMinimapLine(fromLineNumber) - 1;\n        while (fromLineIndex > 0 && this.minimapLines[fromLineIndex - 1] >= fromLineNumber) {\n            fromLineIndex--;\n        }\n        let toLineIndex = this.modelLineToMinimapLine(toLineNumber) - 1;\n        while (toLineIndex + 1 < this.minimapLines.length && this.minimapLines[toLineIndex + 1] <= toLineNumber) {\n            toLineIndex++;\n        }\n        if (fromLineIndex === toLineIndex) {\n            const sampledLineNumber = this.minimapLines[fromLineIndex];\n            if (sampledLineNumber < fromLineNumber || sampledLineNumber > toLineNumber) {\n                // This line is not part of the sampled lines ==> nothing to do\n                return null;\n            }\n        }\n        return [fromLineIndex + 1, toLineIndex + 1];\n    }\n    /**\n     * Will always return a range, even if it is not intersecting with a sampled model line.\n     */\n    decorationLineRangeToMinimapLineRange(startLineNumber, endLineNumber) {\n        let minimapLineStart = this.modelLineToMinimapLine(startLineNumber);\n        let minimapLineEnd = this.modelLineToMinimapLine(endLineNumber);\n        if (startLineNumber !== endLineNumber && minimapLineEnd === minimapLineStart) {\n            if (minimapLineEnd === this.minimapLines.length) {\n                if (minimapLineStart > 1) {\n                    minimapLineStart--;\n                }\n            }\n            else {\n                minimapLineEnd++;\n            }\n        }\n        return [minimapLineStart, minimapLineEnd];\n    }\n    onLinesDeleted(e) {\n        // have the mapping be sticky\n        const deletedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        let changeStartIndex = this.minimapLines.length;\n        let changeEndIndex = 0;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            if (this.minimapLines[i] <= e.toLineNumber) {\n                // this line got deleted => move to previous available\n                this.minimapLines[i] = Math.max(1, e.fromLineNumber - 1);\n                changeStartIndex = Math.min(changeStartIndex, i);\n                changeEndIndex = Math.max(changeEndIndex, i);\n            }\n            else {\n                this.minimapLines[i] -= deletedLineCount;\n            }\n        }\n        return [changeStartIndex, changeEndIndex];\n    }\n    onLinesInserted(e) {\n        // have the mapping be sticky\n        const insertedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            this.minimapLines[i] += insertedLineCount;\n        }\n    }\n}\nexport class Minimap extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.tokensColorTracker = MinimapTokensColorTracker.getInstance();\n        this._selections = [];\n        this._minimapSelections = null;\n        this.options = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        const [samplingState,] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), null);\n        this._samplingState = samplingState;\n        this._shouldCheckSampling = false;\n        this._actual = new InnerMinimap(context.theme, this);\n    }\n    dispose() {\n        this._actual.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this._actual.getDomNode();\n    }\n    _onOptionsMaybeChanged() {\n        const opts = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        if (this.options.equals(opts)) {\n            return false;\n        }\n        this.options = opts;\n        this._recreateLineSampling();\n        this._actual.onDidChangeOptions();\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        this._minimapSelections = null;\n        return this._actual.onSelectionChanged();\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsMinimap) {\n            return this._actual.onDecorationsChanged();\n        }\n        return false;\n    }\n    onFlushed(e) {\n        if (this._samplingState) {\n            this._shouldCheckSampling = true;\n        }\n        return this._actual.onFlushed();\n    }\n    onLinesChanged(e) {\n        if (this._samplingState) {\n            const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(e.fromLineNumber, e.fromLineNumber + e.count - 1);\n            if (minimapLineRange) {\n                return this._actual.onLinesChanged(minimapLineRange[0], minimapLineRange[1] - minimapLineRange[0] + 1);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onLinesChanged(e.fromLineNumber, e.count);\n        }\n    }\n    onLinesDeleted(e) {\n        if (this._samplingState) {\n            const [changeStartIndex, changeEndIndex] = this._samplingState.onLinesDeleted(e);\n            if (changeStartIndex <= changeEndIndex) {\n                this._actual.onLinesChanged(changeStartIndex + 1, changeEndIndex - changeStartIndex + 1);\n            }\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onLinesInserted(e) {\n        if (this._samplingState) {\n            this._samplingState.onLinesInserted(e);\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onScrollChanged(e) {\n        return this._actual.onScrollChanged();\n    }\n    onThemeChanged(e) {\n        this._actual.onThemeChanged();\n        this._onOptionsMaybeChanged();\n        return true;\n    }\n    onTokensChanged(e) {\n        if (this._samplingState) {\n            const ranges = [];\n            for (const range of e.ranges) {\n                const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(range.fromLineNumber, range.toLineNumber);\n                if (minimapLineRange) {\n                    ranges.push({ fromLineNumber: minimapLineRange[0], toLineNumber: minimapLineRange[1] });\n                }\n            }\n            if (ranges.length) {\n                return this._actual.onTokensChanged(ranges);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onTokensChanged(e.ranges);\n        }\n    }\n    onTokensColorsChanged(e) {\n        this._onOptionsMaybeChanged();\n        return this._actual.onTokensColorsChanged();\n    }\n    onZonesChanged(e) {\n        return this._actual.onZonesChanged();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._shouldCheckSampling) {\n            this._shouldCheckSampling = false;\n            this._recreateLineSampling();\n        }\n    }\n    render(ctx) {\n        let viewportStartLineNumber = ctx.visibleRange.startLineNumber;\n        let viewportEndLineNumber = ctx.visibleRange.endLineNumber;\n        if (this._samplingState) {\n            viewportStartLineNumber = this._samplingState.modelLineToMinimapLine(viewportStartLineNumber);\n            viewportEndLineNumber = this._samplingState.modelLineToMinimapLine(viewportEndLineNumber);\n        }\n        const minimapCtx = {\n            viewportContainsWhitespaceGaps: (ctx.viewportData.whitespaceViewportData.length > 0),\n            scrollWidth: ctx.scrollWidth,\n            scrollHeight: ctx.scrollHeight,\n            viewportStartLineNumber: viewportStartLineNumber,\n            viewportEndLineNumber: viewportEndLineNumber,\n            viewportStartLineNumberVerticalOffset: ctx.getVerticalOffsetForLineNumber(viewportStartLineNumber),\n            scrollTop: ctx.scrollTop,\n            scrollLeft: ctx.scrollLeft,\n            viewportWidth: ctx.viewportWidth,\n            viewportHeight: ctx.viewportHeight,\n        };\n        this._actual.render(minimapCtx);\n    }\n    //#region IMinimapModel\n    _recreateLineSampling() {\n        this._minimapSelections = null;\n        const wasSampling = Boolean(this._samplingState);\n        const [samplingState, events] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), this._samplingState);\n        this._samplingState = samplingState;\n        if (wasSampling && this._samplingState) {\n            // was sampling, is sampling\n            for (const event of events) {\n                switch (event.type) {\n                    case 'deleted':\n                        this._actual.onLinesDeleted(event.deleteFromLineNumber, event.deleteToLineNumber);\n                        break;\n                    case 'inserted':\n                        this._actual.onLinesInserted(event.insertFromLineNumber, event.insertToLineNumber);\n                        break;\n                    case 'flush':\n                        this._actual.onFlushed();\n                        break;\n                }\n            }\n        }\n    }\n    getLineCount() {\n        if (this._samplingState) {\n            return this._samplingState.minimapLines.length;\n        }\n        return this._context.viewModel.getLineCount();\n    }\n    getRealLineCount() {\n        return this._context.viewModel.getLineCount();\n    }\n    getLineContent(lineNumber) {\n        if (this._samplingState) {\n            return this._context.viewModel.getLineContent(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.viewModel.getLineContent(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        if (this._samplingState) {\n            return this._context.viewModel.getLineMaxColumn(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.viewModel.getLineMaxColumn(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        if (this._samplingState) {\n            const result = [];\n            for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n                if (needed[lineIndex]) {\n                    result[lineIndex] = this._context.viewModel.getViewLineData(this._samplingState.minimapLines[startLineNumber + lineIndex - 1]);\n                }\n                else {\n                    result[lineIndex] = null;\n                }\n            }\n            return result;\n        }\n        return this._context.viewModel.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed).data;\n    }\n    getSelections() {\n        if (this._minimapSelections === null) {\n            if (this._samplingState) {\n                this._minimapSelections = [];\n                for (const selection of this._selections) {\n                    const [minimapLineStart, minimapLineEnd] = this._samplingState.decorationLineRangeToMinimapLineRange(selection.startLineNumber, selection.endLineNumber);\n                    this._minimapSelections.push(new Selection(minimapLineStart, selection.startColumn, minimapLineEnd, selection.endColumn));\n                }\n            }\n            else {\n                this._minimapSelections = this._selections;\n            }\n        }\n        return this._minimapSelections;\n    }\n    getMinimapDecorationsInViewport(startLineNumber, endLineNumber) {\n        let visibleRange;\n        if (this._samplingState) {\n            const modelStartLineNumber = this._samplingState.minimapLines[startLineNumber - 1];\n            const modelEndLineNumber = this._samplingState.minimapLines[endLineNumber - 1];\n            visibleRange = new Range(modelStartLineNumber, 1, modelEndLineNumber, this._context.viewModel.getLineMaxColumn(modelEndLineNumber));\n        }\n        else {\n            visibleRange = new Range(startLineNumber, 1, endLineNumber, this._context.viewModel.getLineMaxColumn(endLineNumber));\n        }\n        const decorations = this._context.viewModel.getMinimapDecorationsInRange(visibleRange);\n        if (this._samplingState) {\n            const result = [];\n            for (const decoration of decorations) {\n                if (!decoration.options.minimap) {\n                    continue;\n                }\n                const range = decoration.range;\n                const minimapStartLineNumber = this._samplingState.modelLineToMinimapLine(range.startLineNumber);\n                const minimapEndLineNumber = this._samplingState.modelLineToMinimapLine(range.endLineNumber);\n                result.push(new ViewModelDecoration(new Range(minimapStartLineNumber, range.startColumn, minimapEndLineNumber, range.endColumn), decoration.options));\n            }\n            return result;\n        }\n        return decorations;\n    }\n    getOptions() {\n        return this._context.viewModel.model.getOptions();\n    }\n    revealLineNumber(lineNumber) {\n        if (this._samplingState) {\n            lineNumber = this._samplingState.minimapLines[lineNumber - 1];\n        }\n        this._context.viewModel.revealRange('mouse', false, new Range(lineNumber, 1, lineNumber, 1), 1 /* viewEvents.VerticalRevealType.Center */, 0 /* ScrollType.Smooth */);\n    }\n    setScrollTop(scrollTop) {\n        this._context.viewModel.viewLayout.setScrollPosition({\n            scrollTop: scrollTop\n        }, 1 /* ScrollType.Immediate */);\n    }\n}\nclass InnerMinimap extends Disposable {\n    constructor(theme, model) {\n        super();\n        this._renderDecorations = false;\n        this._gestureInProgress = false;\n        this._theme = theme;\n        this._model = model;\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 8 /* PartFingerprint.Minimap */);\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._shadow = createFastDomNode(document.createElement('div'));\n        this._shadow.setClassName('minimap-shadow-hidden');\n        this._domNode.appendChild(this._shadow);\n        this._canvas = createFastDomNode(document.createElement('canvas'));\n        this._canvas.setPosition('absolute');\n        this._canvas.setLeft(0);\n        this._domNode.appendChild(this._canvas);\n        this._decorationsCanvas = createFastDomNode(document.createElement('canvas'));\n        this._decorationsCanvas.setPosition('absolute');\n        this._decorationsCanvas.setClassName('minimap-decorations-layer');\n        this._decorationsCanvas.setLeft(0);\n        this._domNode.appendChild(this._decorationsCanvas);\n        this._slider = createFastDomNode(document.createElement('div'));\n        this._slider.setPosition('absolute');\n        this._slider.setClassName('minimap-slider');\n        this._slider.setLayerHinting(true);\n        this._slider.setContain('strict');\n        this._domNode.appendChild(this._slider);\n        this._sliderHorizontal = createFastDomNode(document.createElement('div'));\n        this._sliderHorizontal.setPosition('absolute');\n        this._sliderHorizontal.setClassName('minimap-slider-horizontal');\n        this._slider.appendChild(this._sliderHorizontal);\n        this._applyLayout();\n        this._pointerDownListener = dom.addStandardDisposableListener(this._domNode.domNode, dom.EventType.POINTER_DOWN, (e) => {\n            e.preventDefault();\n            const renderMinimap = this._model.options.renderMinimap;\n            if (renderMinimap === 0 /* RenderMinimap.None */) {\n                return;\n            }\n            if (!this._lastRenderData) {\n                return;\n            }\n            if (this._model.options.size !== 'proportional') {\n                if (e.button === 0 && this._lastRenderData) {\n                    // pretend the click occurred in the center of the slider\n                    const position = dom.getDomNodePagePosition(this._slider.domNode);\n                    const initialPosY = position.top + position.height / 2;\n                    this._startSliderDragging(e, initialPosY, this._lastRenderData.renderedLayout);\n                }\n                return;\n            }\n            const minimapLineHeight = this._model.options.minimapLineHeight;\n            const internalOffsetY = (this._model.options.canvasInnerHeight / this._model.options.canvasOuterHeight) * e.offsetY;\n            const lineIndex = Math.floor(internalOffsetY / minimapLineHeight);\n            let lineNumber = lineIndex + this._lastRenderData.renderedLayout.startLineNumber - this._lastRenderData.renderedLayout.topPaddingLineCount;\n            lineNumber = Math.min(lineNumber, this._model.getLineCount());\n            this._model.revealLineNumber(lineNumber);\n        });\n        this._sliderPointerMoveMonitor = new GlobalPointerMoveMonitor();\n        this._sliderPointerDownListener = dom.addStandardDisposableListener(this._slider.domNode, dom.EventType.POINTER_DOWN, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (e.button === 0 && this._lastRenderData) {\n                this._startSliderDragging(e, e.pageY, this._lastRenderData.renderedLayout);\n            }\n        });\n        this._gestureDisposable = Gesture.addTarget(this._domNode.domNode);\n        this._sliderTouchStartListener = dom.addDisposableListener(this._domNode.domNode, EventType.Start, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData) {\n                this._slider.toggleClassName('active', true);\n                this._gestureInProgress = true;\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchMoveListener = dom.addDisposableListener(this._domNode.domNode, EventType.Change, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData && this._gestureInProgress) {\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchEndListener = dom.addStandardDisposableListener(this._domNode.domNode, EventType.End, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            this._gestureInProgress = false;\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    _startSliderDragging(e, initialPosY, initialSliderState) {\n        if (!e.target || !(e.target instanceof Element)) {\n            return;\n        }\n        const initialPosX = e.pageX;\n        this._slider.toggleClassName('active', true);\n        const handlePointerMove = (posy, posx) => {\n            const minimapPosition = dom.getDomNodePagePosition(this._domNode.domNode);\n            const pointerOrthogonalDelta = Math.min(Math.abs(posx - initialPosX), Math.abs(posx - minimapPosition.left), Math.abs(posx - minimapPosition.left - minimapPosition.width));\n            if (platform.isWindows && pointerOrthogonalDelta > POINTER_DRAG_RESET_DISTANCE) {\n                // The pointer has wondered away from the scrollbar => reset dragging\n                this._model.setScrollTop(initialSliderState.scrollTop);\n                return;\n            }\n            const pointerDelta = posy - initialPosY;\n            this._model.setScrollTop(initialSliderState.getDesiredScrollTopFromDelta(pointerDelta));\n        };\n        if (e.pageY !== initialPosY) {\n            handlePointerMove(e.pageY, initialPosX);\n        }\n        this._sliderPointerMoveMonitor.startMonitoring(e.target, e.pointerId, e.buttons, pointerMoveData => handlePointerMove(pointerMoveData.pageY, pointerMoveData.pageX), () => {\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    scrollDueToTouchEvent(touch) {\n        const startY = this._domNode.domNode.getBoundingClientRect().top;\n        const scrollTop = this._lastRenderData.renderedLayout.getDesiredScrollTopFromTouchLocation(touch.pageY - startY);\n        this._model.setScrollTop(scrollTop);\n    }\n    dispose() {\n        this._pointerDownListener.dispose();\n        this._sliderPointerMoveMonitor.dispose();\n        this._sliderPointerDownListener.dispose();\n        this._gestureDisposable.dispose();\n        this._sliderTouchStartListener.dispose();\n        this._sliderTouchMoveListener.dispose();\n        this._sliderTouchEndListener.dispose();\n        super.dispose();\n    }\n    _getMinimapDomNodeClassName() {\n        const class_ = ['minimap'];\n        if (this._model.options.showSlider === 'always') {\n            class_.push('slider-always');\n        }\n        else {\n            class_.push('slider-mouseover');\n        }\n        if (this._model.options.autohide) {\n            class_.push('autohide');\n        }\n        return class_.join(' ');\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _applyLayout() {\n        this._domNode.setLeft(this._model.options.minimapLeft);\n        this._domNode.setWidth(this._model.options.minimapWidth);\n        this._domNode.setHeight(this._model.options.minimapHeight);\n        this._shadow.setHeight(this._model.options.minimapHeight);\n        this._canvas.setWidth(this._model.options.canvasOuterWidth);\n        this._canvas.setHeight(this._model.options.canvasOuterHeight);\n        this._canvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._canvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._decorationsCanvas.setWidth(this._model.options.canvasOuterWidth);\n        this._decorationsCanvas.setHeight(this._model.options.canvasOuterHeight);\n        this._decorationsCanvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._decorationsCanvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._slider.setWidth(this._model.options.minimapWidth);\n    }\n    _getBuffer() {\n        if (!this._buffers) {\n            if (this._model.options.canvasInnerWidth > 0 && this._model.options.canvasInnerHeight > 0) {\n                this._buffers = new MinimapBuffers(this._canvas.domNode.getContext('2d'), this._model.options.canvasInnerWidth, this._model.options.canvasInnerHeight, this._model.options.backgroundColor);\n            }\n        }\n        return this._buffers ? this._buffers.getBuffer() : null;\n    }\n    // ---- begin view event handlers\n    onDidChangeOptions() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._applyLayout();\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n    }\n    onSelectionChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onDecorationsChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onFlushed() {\n        this._lastRenderData = null;\n        return true;\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onLinesChanged(changeFromLineNumber, changeCount);\n        }\n        return false;\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        var _a;\n        (_a = this._lastRenderData) === null || _a === void 0 ? void 0 : _a.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n        return true;\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        var _a;\n        (_a = this._lastRenderData) === null || _a === void 0 ? void 0 : _a.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n        return true;\n    }\n    onScrollChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onThemeChanged() {\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._renderDecorations = true;\n        return true;\n    }\n    onTokensChanged(ranges) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onTokensChanged(ranges);\n        }\n        return false;\n    }\n    onTokensColorsChanged() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        return true;\n    }\n    onZonesChanged() {\n        this._lastRenderData = null;\n        return true;\n    }\n    // --- end event handlers\n    render(renderingCtx) {\n        const renderMinimap = this._model.options.renderMinimap;\n        if (renderMinimap === 0 /* RenderMinimap.None */) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n            this._sliderHorizontal.setWidth(0);\n            this._sliderHorizontal.setHeight(0);\n            return;\n        }\n        if (renderingCtx.scrollLeft + renderingCtx.viewportWidth >= renderingCtx.scrollWidth) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n        }\n        else {\n            this._shadow.setClassName('minimap-shadow-visible');\n        }\n        const layout = MinimapLayout.create(this._model.options, renderingCtx.viewportStartLineNumber, renderingCtx.viewportEndLineNumber, renderingCtx.viewportStartLineNumberVerticalOffset, renderingCtx.viewportHeight, renderingCtx.viewportContainsWhitespaceGaps, this._model.getLineCount(), this._model.getRealLineCount(), renderingCtx.scrollTop, renderingCtx.scrollHeight, this._lastRenderData ? this._lastRenderData.renderedLayout : null);\n        this._slider.setDisplay(layout.sliderNeeded ? 'block' : 'none');\n        this._slider.setTop(layout.sliderTop);\n        this._slider.setHeight(layout.sliderHeight);\n        // Compute horizontal slider coordinates\n        this._sliderHorizontal.setLeft(0);\n        this._sliderHorizontal.setWidth(this._model.options.minimapWidth);\n        this._sliderHorizontal.setTop(0);\n        this._sliderHorizontal.setHeight(layout.sliderHeight);\n        this.renderDecorations(layout);\n        this._lastRenderData = this.renderLines(layout);\n    }\n    renderDecorations(layout) {\n        if (this._renderDecorations) {\n            this._renderDecorations = false;\n            const selections = this._model.getSelections();\n            selections.sort(Range.compareRangesUsingStarts);\n            const decorations = this._model.getMinimapDecorationsInViewport(layout.startLineNumber, layout.endLineNumber);\n            decorations.sort((a, b) => (a.options.zIndex || 0) - (b.options.zIndex || 0));\n            const { canvasInnerWidth, canvasInnerHeight } = this._model.options;\n            const minimapLineHeight = this._model.options.minimapLineHeight;\n            const minimapCharWidth = this._model.options.minimapCharWidth;\n            const tabSize = this._model.getOptions().tabSize;\n            const canvasContext = this._decorationsCanvas.domNode.getContext('2d');\n            canvasContext.clearRect(0, 0, canvasInnerWidth, canvasInnerHeight);\n            // We first need to render line highlights and then render decorations on top of those.\n            // But we need to pick a single color for each line, and use that as a line highlight.\n            // This needs to be the color of the decoration with the highest `zIndex`, but priority\n            // is given to the selection.\n            const highlightedLines = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, false);\n            this._renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, minimapLineHeight);\n            this._renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, minimapLineHeight);\n            const lineOffsetMap = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, null);\n            this._renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, minimapLineHeight, tabSize, minimapCharWidth, canvasInnerWidth);\n            this._renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, minimapLineHeight, tabSize, minimapCharWidth, canvasInnerWidth);\n        }\n    }\n    _renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, minimapLineHeight) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        canvasContext.fillStyle = this._selectionColor.transparent(0.5).toString();\n        let y1 = 0;\n        let y2 = 0;\n        for (const selection of selections) {\n            const intersection = layout.intersectWithViewport(selection);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                highlightedLines.set(line, true);\n            }\n            const yy1 = layout.getYForLineNumber(startLineNumber, minimapLineHeight);\n            const yy2 = layout.getYForLineNumber(endLineNumber, minimapLineHeight);\n            if (y2 >= yy1) {\n                // merge into previous\n                y2 = yy2;\n            }\n            else {\n                if (y2 > y1) {\n                    // flush\n                    canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n                }\n                y1 = yy1;\n                y2 = yy2;\n            }\n        }\n        if (y2 > y1) {\n            // flush\n            canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n        }\n    }\n    _renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, minimapLineHeight) {\n        const highlightColors = new Map();\n        // Loop backwards to hit first decorations with higher `zIndex`\n        for (let i = decorations.length - 1; i >= 0; i--) {\n            const decoration = decorations[i];\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions || minimapOptions.position !== MinimapPosition.Inline) {\n                continue;\n            }\n            const intersection = layout.intersectWithViewport(decoration.range);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            let highlightColor = highlightColors.get(decorationColor.toString());\n            if (!highlightColor) {\n                highlightColor = decorationColor.transparent(0.5).toString();\n                highlightColors.set(decorationColor.toString(), highlightColor);\n            }\n            canvasContext.fillStyle = highlightColor;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                if (highlightedLines.has(line)) {\n                    continue;\n                }\n                highlightedLines.set(line, true);\n                const y = layout.getYForLineNumber(startLineNumber, minimapLineHeight);\n                canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y, canvasContext.canvas.width, minimapLineHeight);\n            }\n        }\n    }\n    _renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        for (const selection of selections) {\n            const intersection = layout.intersectWithViewport(selection);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                this.renderDecorationOnLine(canvasContext, lineOffsetMap, selection, this._selectionColor, layout, line, lineHeight, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n            }\n        }\n    }\n    _renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, minimapLineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        // Loop forwards to hit first decorations with lower `zIndex`\n        for (const decoration of decorations) {\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions) {\n                continue;\n            }\n            const intersection = layout.intersectWithViewport(decoration.range);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                switch (minimapOptions.position) {\n                    case MinimapPosition.Inline:\n                        this.renderDecorationOnLine(canvasContext, lineOffsetMap, decoration.range, decorationColor, layout, line, minimapLineHeight, minimapLineHeight, tabSize, characterWidth, canvasInnerWidth);\n                        continue;\n                    case MinimapPosition.Gutter: {\n                        const y = layout.getYForLineNumber(line, minimapLineHeight);\n                        const x = 2;\n                        this.renderDecoration(canvasContext, decorationColor, x, y, GUTTER_DECORATION_WIDTH, minimapLineHeight);\n                        continue;\n                    }\n                }\n            }\n        }\n    }\n    renderDecorationOnLine(canvasContext, lineOffsetMap, decorationRange, decorationColor, layout, lineNumber, height, minimapLineHeight, tabSize, charWidth, canvasInnerWidth) {\n        const y = layout.getYForLineNumber(lineNumber, minimapLineHeight);\n        // Skip rendering the line if it's vertically outside our viewport\n        if (y + height < 0 || y > this._model.options.canvasInnerHeight) {\n            return;\n        }\n        const { startLineNumber, endLineNumber } = decorationRange;\n        const startColumn = (startLineNumber === lineNumber ? decorationRange.startColumn : 1);\n        const endColumn = (endLineNumber === lineNumber ? decorationRange.endColumn : this._model.getLineMaxColumn(lineNumber));\n        const x1 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, startColumn, tabSize, charWidth, canvasInnerWidth);\n        const x2 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, endColumn, tabSize, charWidth, canvasInnerWidth);\n        this.renderDecoration(canvasContext, decorationColor, x1, y, x2 - x1, height);\n    }\n    getXOffsetForPosition(lineOffsetMap, lineNumber, column, tabSize, charWidth, canvasInnerWidth) {\n        if (column === 1) {\n            return MINIMAP_GUTTER_WIDTH;\n        }\n        const minimumXOffset = (column - 1) * charWidth;\n        if (minimumXOffset >= canvasInnerWidth) {\n            // there is no need to look at actual characters,\n            // as this column is certainly after the minimap width\n            return canvasInnerWidth;\n        }\n        // Cache line offset data so that it is only read once per line\n        let lineIndexToXOffset = lineOffsetMap.get(lineNumber);\n        if (!lineIndexToXOffset) {\n            const lineData = this._model.getLineContent(lineNumber);\n            lineIndexToXOffset = [MINIMAP_GUTTER_WIDTH];\n            let prevx = MINIMAP_GUTTER_WIDTH;\n            for (let i = 1; i < lineData.length + 1; i++) {\n                const charCode = lineData.charCodeAt(i - 1);\n                const dx = charCode === 9 /* CharCode.Tab */\n                    ? tabSize * charWidth\n                    : strings.isFullWidthCharacter(charCode)\n                        ? 2 * charWidth\n                        : charWidth;\n                const x = prevx + dx;\n                if (x >= canvasInnerWidth) {\n                    // no need to keep on going, as we've hit the canvas width\n                    lineIndexToXOffset[i] = canvasInnerWidth;\n                    break;\n                }\n                lineIndexToXOffset[i] = x;\n                prevx = x;\n            }\n            lineOffsetMap.set(lineNumber, lineIndexToXOffset);\n        }\n        if (column - 1 < lineIndexToXOffset.length) {\n            return lineIndexToXOffset[column - 1];\n        }\n        // goes over the canvas width\n        return canvasInnerWidth;\n    }\n    renderDecoration(canvasContext, decorationColor, x, y, width, height) {\n        canvasContext.fillStyle = decorationColor && decorationColor.toString() || '';\n        canvasContext.fillRect(x, y, width, height);\n    }\n    renderLines(layout) {\n        const startLineNumber = layout.startLineNumber;\n        const endLineNumber = layout.endLineNumber;\n        const minimapLineHeight = this._model.options.minimapLineHeight;\n        // Check if nothing changed w.r.t. lines from last frame\n        if (this._lastRenderData && this._lastRenderData.linesEquals(layout)) {\n            const _lastData = this._lastRenderData._get();\n            // Nice!! Nothing changed from last frame\n            return new RenderData(layout, _lastData.imageData, _lastData.lines);\n        }\n        // Oh well!! We need to repaint some lines...\n        const imageData = this._getBuffer();\n        if (!imageData) {\n            // 0 width or 0 height canvas, nothing to do\n            return null;\n        }\n        // Render untouched lines by using last rendered data.\n        const [_dirtyY1, _dirtyY2, needed] = InnerMinimap._renderUntouchedLines(imageData, layout.topPaddingLineCount, startLineNumber, endLineNumber, minimapLineHeight, this._lastRenderData);\n        // Fetch rendering info from view model for rest of lines that need rendering.\n        const lineInfo = this._model.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed);\n        const tabSize = this._model.getOptions().tabSize;\n        const defaultBackground = this._model.options.defaultBackgroundColor;\n        const background = this._model.options.backgroundColor;\n        const foregroundAlpha = this._model.options.foregroundAlpha;\n        const tokensColorTracker = this._model.tokensColorTracker;\n        const useLighterFont = tokensColorTracker.backgroundIsLight();\n        const renderMinimap = this._model.options.renderMinimap;\n        const charRenderer = this._model.options.charRenderer();\n        const fontScale = this._model.options.fontScale;\n        const minimapCharWidth = this._model.options.minimapCharWidth;\n        const baseCharHeight = (renderMinimap === 1 /* RenderMinimap.Text */ ? 2 /* Constants.BASE_CHAR_HEIGHT */ : 2 /* Constants.BASE_CHAR_HEIGHT */ + 1);\n        const renderMinimapLineHeight = baseCharHeight * fontScale;\n        const innerLinePadding = (minimapLineHeight > renderMinimapLineHeight ? Math.floor((minimapLineHeight - renderMinimapLineHeight) / 2) : 0);\n        // Render the rest of lines\n        const backgroundA = background.a / 255;\n        const renderBackground = new RGBA8(Math.round((background.r - defaultBackground.r) * backgroundA + defaultBackground.r), Math.round((background.g - defaultBackground.g) * backgroundA + defaultBackground.g), Math.round((background.b - defaultBackground.b) * backgroundA + defaultBackground.b), 255);\n        let dy = layout.topPaddingLineCount * minimapLineHeight;\n        const renderedLines = [];\n        for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n            if (needed[lineIndex]) {\n                InnerMinimap._renderLine(imageData, renderBackground, background.a, useLighterFont, renderMinimap, minimapCharWidth, tokensColorTracker, foregroundAlpha, charRenderer, dy, innerLinePadding, tabSize, lineInfo[lineIndex], fontScale, minimapLineHeight);\n            }\n            renderedLines[lineIndex] = new MinimapLine(dy);\n            dy += minimapLineHeight;\n        }\n        const dirtyY1 = (_dirtyY1 === -1 ? 0 : _dirtyY1);\n        const dirtyY2 = (_dirtyY2 === -1 ? imageData.height : _dirtyY2);\n        const dirtyHeight = dirtyY2 - dirtyY1;\n        // Finally, paint to the canvas\n        const ctx = this._canvas.domNode.getContext('2d');\n        ctx.putImageData(imageData, 0, 0, 0, dirtyY1, imageData.width, dirtyHeight);\n        // Save rendered data for reuse on next frame if possible\n        return new RenderData(layout, imageData, renderedLines);\n    }\n    static _renderUntouchedLines(target, topPaddingLineCount, startLineNumber, endLineNumber, minimapLineHeight, lastRenderData) {\n        const needed = [];\n        if (!lastRenderData) {\n            for (let i = 0, len = endLineNumber - startLineNumber + 1; i < len; i++) {\n                needed[i] = true;\n            }\n            return [-1, -1, needed];\n        }\n        const _lastData = lastRenderData._get();\n        const lastTargetData = _lastData.imageData.data;\n        const lastStartLineNumber = _lastData.rendLineNumberStart;\n        const lastLines = _lastData.lines;\n        const lastLinesLength = lastLines.length;\n        const WIDTH = target.width;\n        const targetData = target.data;\n        const maxDestPixel = (endLineNumber - startLineNumber + 1) * minimapLineHeight * WIDTH * 4;\n        let dirtyPixel1 = -1; // the pixel offset up to which all the data is equal to the prev frame\n        let dirtyPixel2 = -1; // the pixel offset after which all the data is equal to the prev frame\n        let copySourceStart = -1;\n        let copySourceEnd = -1;\n        let copyDestStart = -1;\n        let copyDestEnd = -1;\n        let dest_dy = topPaddingLineCount * minimapLineHeight;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - startLineNumber;\n            const lastLineIndex = lineNumber - lastStartLineNumber;\n            const source_dy = (lastLineIndex >= 0 && lastLineIndex < lastLinesLength ? lastLines[lastLineIndex].dy : -1);\n            if (source_dy === -1) {\n                needed[lineIndex] = true;\n                dest_dy += minimapLineHeight;\n                continue;\n            }\n            const sourceStart = source_dy * WIDTH * 4;\n            const sourceEnd = (source_dy + minimapLineHeight) * WIDTH * 4;\n            const destStart = dest_dy * WIDTH * 4;\n            const destEnd = (dest_dy + minimapLineHeight) * WIDTH * 4;\n            if (copySourceEnd === sourceStart && copyDestEnd === destStart) {\n                // contiguous zone => extend copy request\n                copySourceEnd = sourceEnd;\n                copyDestEnd = destEnd;\n            }\n            else {\n                if (copySourceStart !== -1) {\n                    // flush existing copy request\n                    targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n                    if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                        dirtyPixel1 = copySourceEnd;\n                    }\n                    if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                        dirtyPixel2 = copySourceStart;\n                    }\n                }\n                copySourceStart = sourceStart;\n                copySourceEnd = sourceEnd;\n                copyDestStart = destStart;\n                copyDestEnd = destEnd;\n            }\n            needed[lineIndex] = false;\n            dest_dy += minimapLineHeight;\n        }\n        if (copySourceStart !== -1) {\n            // flush existing copy request\n            targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n            if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                dirtyPixel1 = copySourceEnd;\n            }\n            if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                dirtyPixel2 = copySourceStart;\n            }\n        }\n        const dirtyY1 = (dirtyPixel1 === -1 ? -1 : dirtyPixel1 / (WIDTH * 4));\n        const dirtyY2 = (dirtyPixel2 === -1 ? -1 : dirtyPixel2 / (WIDTH * 4));\n        return [dirtyY1, dirtyY2, needed];\n    }\n    static _renderLine(target, backgroundColor, backgroundAlpha, useLighterFont, renderMinimap, charWidth, colorTracker, foregroundAlpha, minimapCharRenderer, dy, innerLinePadding, tabSize, lineData, fontScale, minimapLineHeight) {\n        const content = lineData.content;\n        const tokens = lineData.tokens;\n        const maxDx = target.width - charWidth;\n        const force1pxHeight = (minimapLineHeight === 1);\n        let dx = MINIMAP_GUTTER_WIDTH;\n        let charIndex = 0;\n        let tabsCharDelta = 0;\n        for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n            const tokenEndIndex = tokens.getEndOffset(tokenIndex);\n            const tokenColorId = tokens.getForeground(tokenIndex);\n            const tokenColor = colorTracker.getColor(tokenColorId);\n            for (; charIndex < tokenEndIndex; charIndex++) {\n                if (dx > maxDx) {\n                    // hit edge of minimap\n                    return;\n                }\n                const charCode = content.charCodeAt(charIndex);\n                if (charCode === 9 /* CharCode.Tab */) {\n                    const insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n                    tabsCharDelta += insertSpacesCount - 1;\n                    // No need to render anything since tab is invisible\n                    dx += insertSpacesCount * charWidth;\n                }\n                else if (charCode === 32 /* CharCode.Space */) {\n                    // No need to render anything since space is invisible\n                    dx += charWidth;\n                }\n                else {\n                    // Render twice for a full width character\n                    const count = strings.isFullWidthCharacter(charCode) ? 2 : 1;\n                    for (let i = 0; i < count; i++) {\n                        if (renderMinimap === 2 /* RenderMinimap.Blocks */) {\n                            minimapCharRenderer.blockRenderChar(target, dx, dy + innerLinePadding, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight);\n                        }\n                        else { // RenderMinimap.Text\n                            minimapCharRenderer.renderChar(target, dx, dy + innerLinePadding, charCode, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight);\n                        }\n                        dx += charWidth;\n                        if (dx > maxDx) {\n                            // hit edge of minimap\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nclass ContiguousLineMap {\n    constructor(startLineNumber, endLineNumber, defaultValue) {\n        this._startLineNumber = startLineNumber;\n        this._endLineNumber = endLineNumber;\n        this._defaultValue = defaultValue;\n        this._values = [];\n        for (let i = 0, count = this._endLineNumber - this._startLineNumber + 1; i < count; i++) {\n            this._values[i] = defaultValue;\n        }\n    }\n    has(lineNumber) {\n        return (this.get(lineNumber) !== this._defaultValue);\n    }\n    set(lineNumber, value) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return;\n        }\n        this._values[lineNumber - this._startLineNumber] = value;\n    }\n    get(lineNumber) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return this._defaultValue;\n        }\n        return this._values[lineNumber - this._startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './overlayWidgets.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewOverlayWidgets extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._widgets = {};\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 4 /* PartFingerprint.OverlayWidgets */);\n        this._domNode.setClassName('overlayWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        return true;\n    }\n    // ---- end view event handlers\n    addWidget(widget) {\n        const domNode = createFastDomNode(widget.getDomNode());\n        this._widgets[widget.getId()] = {\n            widget: widget,\n            preference: null,\n            domNode: domNode\n        };\n        // This is sync because a widget wants to be in the dom\n        domNode.setPosition('absolute');\n        domNode.setAttribute('widgetId', widget.getId());\n        this._domNode.appendChild(domNode);\n        this.setShouldRender();\n        this._updateMaxMinWidth();\n    }\n    setWidgetPosition(widget, preference) {\n        const widgetData = this._widgets[widget.getId()];\n        if (widgetData.preference === preference) {\n            this._updateMaxMinWidth();\n            return false;\n        }\n        widgetData.preference = preference;\n        this.setShouldRender();\n        this._updateMaxMinWidth();\n        return true;\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._widgets[widgetId];\n            const domNode = widgetData.domNode.domNode;\n            delete this._widgets[widgetId];\n            domNode.parentNode.removeChild(domNode);\n            this.setShouldRender();\n            this._updateMaxMinWidth();\n        }\n    }\n    _updateMaxMinWidth() {\n        var _a, _b;\n        let maxMinWidth = 0;\n        const keys = Object.keys(this._widgets);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const widgetId = keys[i];\n            const widget = this._widgets[widgetId];\n            const widgetMinWidthInPx = (_b = (_a = widget.widget).getMinContentWidthInPx) === null || _b === void 0 ? void 0 : _b.call(_a);\n            if (typeof widgetMinWidthInPx !== 'undefined') {\n                maxMinWidth = Math.max(maxMinWidth, widgetMinWidthInPx);\n            }\n        }\n        this._context.viewLayout.setOverlayWidgetsMinWidth(maxMinWidth);\n    }\n    _renderWidget(widgetData) {\n        const domNode = widgetData.domNode;\n        if (widgetData.preference === null) {\n            domNode.setTop('');\n            return;\n        }\n        if (widgetData.preference === 0 /* OverlayWidgetPositionPreference.TOP_RIGHT_CORNER */) {\n            domNode.setTop(0);\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 1 /* OverlayWidgetPositionPreference.BOTTOM_RIGHT_CORNER */) {\n            const widgetHeight = domNode.domNode.clientHeight;\n            domNode.setTop((this._editorHeight - widgetHeight - 2 * this._horizontalScrollbarHeight));\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 2 /* OverlayWidgetPositionPreference.TOP_CENTER */) {\n            domNode.setTop(0);\n            domNode.domNode.style.right = '50%';\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._editorWidth);\n        const keys = Object.keys(this._widgets);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const widgetId = keys[i];\n            this._renderWidget(this._widgets[widgetId]);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';\nimport { equals } from '../../../../base/common/arrays.js';\nclass Settings {\n    constructor(config, theme) {\n        const options = config.options;\n        this.lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this.pixelRatio = options.get(141 /* EditorOption.pixelRatio */);\n        this.overviewRulerLanes = options.get(82 /* EditorOption.overviewRulerLanes */);\n        this.renderBorder = options.get(81 /* EditorOption.overviewRulerBorder */);\n        const borderColor = theme.getColor(editorOverviewRulerBorder);\n        this.borderColor = borderColor ? borderColor.toString() : null;\n        this.hideCursor = options.get(59 /* EditorOption.hideCursorInOverviewRuler */);\n        const cursorColor = theme.getColor(editorCursorForeground);\n        this.cursorColor = cursorColor ? cursorColor.transparent(0.7).toString() : null;\n        this.themeType = theme.type;\n        const minimapOpts = options.get(72 /* EditorOption.minimap */);\n        const minimapEnabled = minimapOpts.enabled;\n        const minimapSide = minimapOpts.side;\n        const themeColor = theme.getColor(editorOverviewRulerBackground);\n        const defaultBackground = TokenizationRegistry.getDefaultBackground();\n        if (themeColor) {\n            this.backgroundColor = themeColor;\n        }\n        else if (minimapEnabled && minimapSide === 'right') {\n            this.backgroundColor = defaultBackground;\n        }\n        else {\n            this.backgroundColor = null;\n        }\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        const position = layoutInfo.overviewRuler;\n        this.top = position.top;\n        this.right = position.right;\n        this.domWidth = position.width;\n        this.domHeight = position.height;\n        if (this.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this.canvasWidth = 0;\n            this.canvasHeight = 0;\n        }\n        else {\n            this.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n            this.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n        }\n        const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n        this.x = x;\n        this.w = w;\n    }\n    _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n        const remainingWidth = canvasWidth - canvasLeftOffset;\n        if (laneCount >= 3) {\n            const leftWidth = Math.floor(remainingWidth / 3);\n            const rightWidth = Math.floor(remainingWidth / 3);\n            const centerWidth = remainingWidth - leftWidth - rightWidth;\n            const leftOffset = canvasLeftOffset;\n            const centerOffset = leftOffset + leftWidth;\n            const rightOffset = leftOffset + leftWidth + centerWidth;\n            return [\n                [\n                    0,\n                    leftOffset, // Left\n                    centerOffset, // Center\n                    leftOffset, // Left | Center\n                    rightOffset, // Right\n                    leftOffset, // Left | Right\n                    centerOffset, // Center | Right\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth, // Left\n                    centerWidth, // Center\n                    leftWidth + centerWidth, // Left | Center\n                    rightWidth, // Right\n                    leftWidth + centerWidth + rightWidth, // Left | Right\n                    centerWidth + rightWidth, // Center | Right\n                    leftWidth + centerWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else if (laneCount === 2) {\n            const leftWidth = Math.floor(remainingWidth / 2);\n            const rightWidth = remainingWidth - leftWidth;\n            const leftOffset = canvasLeftOffset;\n            const rightOffset = leftOffset + leftWidth;\n            return [\n                [\n                    0,\n                    leftOffset, // Left\n                    leftOffset, // Center\n                    leftOffset, // Left | Center\n                    rightOffset, // Right\n                    leftOffset, // Left | Right\n                    leftOffset, // Center | Right\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth, // Left\n                    leftWidth, // Center\n                    leftWidth, // Left | Center\n                    rightWidth, // Right\n                    leftWidth + rightWidth, // Left | Right\n                    leftWidth + rightWidth, // Center | Right\n                    leftWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else {\n            const offset = canvasLeftOffset;\n            const width = remainingWidth;\n            return [\n                [\n                    0,\n                    offset, // Left\n                    offset, // Center\n                    offset, // Left | Center\n                    offset, // Right\n                    offset, // Left | Right\n                    offset, // Center | Right\n                    offset, // Left | Center | Right\n                ], [\n                    0,\n                    width, // Left\n                    width, // Center\n                    width, // Left | Center\n                    width, // Right\n                    width, // Left | Right\n                    width, // Center | Right\n                    width, // Left | Center | Right\n                ]\n            ];\n        }\n    }\n    equals(other) {\n        return (this.lineHeight === other.lineHeight\n            && this.pixelRatio === other.pixelRatio\n            && this.overviewRulerLanes === other.overviewRulerLanes\n            && this.renderBorder === other.renderBorder\n            && this.borderColor === other.borderColor\n            && this.hideCursor === other.hideCursor\n            && this.cursorColor === other.cursorColor\n            && this.themeType === other.themeType\n            && Color.equals(this.backgroundColor, other.backgroundColor)\n            && this.top === other.top\n            && this.right === other.right\n            && this.domWidth === other.domWidth\n            && this.domHeight === other.domHeight\n            && this.canvasWidth === other.canvasWidth\n            && this.canvasHeight === other.canvasHeight);\n    }\n}\nexport class DecorationsOverviewRuler extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._actualShouldRender = 0 /* ShouldRenderValue.NotNeeded */;\n        this._renderedDecorations = [];\n        this._renderedCursorPositions = [];\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName('decorationsOverviewRuler');\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateSettings(false);\n        this._tokensColorTrackerListener = TokenizationRegistry.onDidChange((e) => {\n            if (e.changedColorMap) {\n                this._updateSettings(true);\n            }\n        });\n        this._cursorPositions = [];\n    }\n    dispose() {\n        super.dispose();\n        this._tokensColorTrackerListener.dispose();\n    }\n    _updateSettings(renderNow) {\n        const newSettings = new Settings(this._context.configuration, this._context.theme);\n        if (this._settings && this._settings.equals(newSettings)) {\n            // nothing to do\n            return false;\n        }\n        this._settings = newSettings;\n        this._domNode.setTop(this._settings.top);\n        this._domNode.setRight(this._settings.right);\n        this._domNode.setWidth(this._settings.domWidth);\n        this._domNode.setHeight(this._settings.domHeight);\n        this._domNode.domNode.width = this._settings.canvasWidth;\n        this._domNode.domNode.height = this._settings.canvasHeight;\n        if (renderNow) {\n            this._render();\n        }\n        return true;\n    }\n    // ---- begin view event handlers\n    _markRenderingIsNeeded() {\n        this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        return true;\n    }\n    _markRenderingIsMaybeNeeded() {\n        this._actualShouldRender = 1 /* ShouldRenderValue.Maybe */;\n        return true;\n    }\n    onConfigurationChanged(e) {\n        return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n    }\n    onCursorStateChanged(e) {\n        this._cursorPositions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            this._cursorPositions[i] = e.selections[i].getPosition();\n        }\n        this._cursorPositions.sort(Position.compare);\n        return this._markRenderingIsMaybeNeeded();\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsOverviewRuler) {\n            return this._markRenderingIsMaybeNeeded();\n        }\n        return false;\n    }\n    onFlushed(e) {\n        return this._markRenderingIsNeeded();\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged ? this._markRenderingIsNeeded() : false;\n    }\n    onZonesChanged(e) {\n        return this._markRenderingIsNeeded();\n    }\n    onThemeChanged(e) {\n        return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(editorCtx) {\n        this._render();\n        this._actualShouldRender = 0 /* ShouldRenderValue.NotNeeded */;\n    }\n    _render() {\n        const backgroundColor = this._settings.backgroundColor;\n        if (this._settings.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this._domNode.setBackgroundColor(backgroundColor ? Color.Format.CSS.formatHexA(backgroundColor) : '');\n            this._domNode.setDisplay('none');\n            return;\n        }\n        const decorations = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);\n        decorations.sort(OverviewRulerDecorationsGroup.compareByRenderingProps);\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */ && !OverviewRulerDecorationsGroup.equalsArr(this._renderedDecorations, decorations)) {\n            this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        }\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */ && !equals(this._renderedCursorPositions, this._cursorPositions, (a, b) => a.lineNumber === b.lineNumber)) {\n            this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        }\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */) {\n            // both decorations and cursor positions are unchanged, nothing to do\n            return;\n        }\n        this._renderedDecorations = decorations;\n        this._renderedCursorPositions = this._cursorPositions;\n        this._domNode.setDisplay('block');\n        const canvasWidth = this._settings.canvasWidth;\n        const canvasHeight = this._settings.canvasHeight;\n        const lineHeight = this._settings.lineHeight;\n        const viewLayout = this._context.viewLayout;\n        const outerHeight = this._context.viewLayout.getScrollHeight();\n        const heightRatio = canvasHeight / outerHeight;\n        const minDecorationHeight = (6 /* Constants.MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio) | 0;\n        const halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n        const canvasCtx = this._domNode.domNode.getContext('2d');\n        if (backgroundColor) {\n            if (backgroundColor.isOpaque()) {\n                // We have a background color which is opaque, we can just paint the entire surface with it\n                canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n            }\n            else {\n                // We have a background color which is transparent, we need to first clear the surface and\n                // then fill it\n                canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n                canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n            }\n        }\n        else {\n            // We don't have a background color\n            canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        }\n        const x = this._settings.x;\n        const w = this._settings.w;\n        for (const decorationGroup of decorations) {\n            const color = decorationGroup.color;\n            const decorationGroupData = decorationGroup.data;\n            canvasCtx.fillStyle = color;\n            let prevLane = 0;\n            let prevY1 = 0;\n            let prevY2 = 0;\n            for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n                const lane = decorationGroupData[3 * i];\n                const startLineNumber = decorationGroupData[3 * i + 1];\n                const endLineNumber = decorationGroupData[3 * i + 2];\n                let y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n                let y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n                const height = y2 - y1;\n                if (height < minDecorationHeight) {\n                    let yCenter = ((y1 + y2) / 2) | 0;\n                    if (yCenter < halfMinDecorationHeight) {\n                        yCenter = halfMinDecorationHeight;\n                    }\n                    else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n                        yCenter = canvasHeight - halfMinDecorationHeight;\n                    }\n                    y1 = yCenter - halfMinDecorationHeight;\n                    y2 = yCenter + halfMinDecorationHeight;\n                }\n                if (y1 > prevY2 + 1 || lane !== prevLane) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n                    }\n                    prevLane = lane;\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n        }\n        // Draw cursors\n        if (!this._settings.hideCursor && this._settings.cursorColor) {\n            const cursorHeight = (2 * this._settings.pixelRatio) | 0;\n            const halfCursorHeight = (cursorHeight / 2) | 0;\n            const cursorX = this._settings.x[7 /* OverviewRulerLane.Full */];\n            const cursorW = this._settings.w[7 /* OverviewRulerLane.Full */];\n            canvasCtx.fillStyle = this._settings.cursorColor;\n            let prevY1 = -100;\n            let prevY2 = -100;\n            for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n                const cursor = this._cursorPositions[i];\n                let yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n                if (yCenter < halfCursorHeight) {\n                    yCenter = halfCursorHeight;\n                }\n                else if (yCenter + halfCursorHeight > canvasHeight) {\n                    yCenter = canvasHeight - halfCursorHeight;\n                }\n                const y1 = yCenter - halfCursorHeight;\n                const y2 = y1 + cursorHeight;\n                if (y1 > prevY2 + 1) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n                    }\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n        }\n        if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n            canvasCtx.beginPath();\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = this._settings.borderColor;\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(0, canvasHeight);\n            canvasCtx.stroke();\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(canvasWidth, 0);\n            canvasCtx.stroke();\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { OverviewZoneManager } from '../../../common/viewModel/overviewZoneManager.js';\nimport { ViewEventHandler } from '../../../common/viewEventHandler.js';\nexport class OverviewRuler extends ViewEventHandler {\n    constructor(context, cssClassName) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName(cssClassName);\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._zoneManager = new OverviewZoneManager((lineNumber) => this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber));\n        this._zoneManager.setDOMWidth(0);\n        this._zoneManager.setDOMHeight(0);\n        this._zoneManager.setOuterHeight(this._context.viewLayout.getScrollHeight());\n        this._zoneManager.setLineHeight(options.get(66 /* EditorOption.lineHeight */));\n        this._zoneManager.setPixelRatio(options.get(141 /* EditorOption.pixelRatio */));\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        if (e.hasChanged(66 /* EditorOption.lineHeight */)) {\n            this._zoneManager.setLineHeight(options.get(66 /* EditorOption.lineHeight */));\n            this._render();\n        }\n        if (e.hasChanged(141 /* EditorOption.pixelRatio */)) {\n            this._zoneManager.setPixelRatio(options.get(141 /* EditorOption.pixelRatio */));\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n        return true;\n    }\n    onFlushed(e) {\n        this._render();\n        return true;\n    }\n    onScrollChanged(e) {\n        if (e.scrollHeightChanged) {\n            this._zoneManager.setOuterHeight(e.scrollHeight);\n            this._render();\n        }\n        return true;\n    }\n    onZonesChanged(e) {\n        this._render();\n        return true;\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    setLayout(position) {\n        this._domNode.setTop(position.top);\n        this._domNode.setRight(position.right);\n        let hasChanged = false;\n        hasChanged = this._zoneManager.setDOMWidth(position.width) || hasChanged;\n        hasChanged = this._zoneManager.setDOMHeight(position.height) || hasChanged;\n        if (hasChanged) {\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n    }\n    setZones(zones) {\n        this._zoneManager.setZones(zones);\n        this._render();\n    }\n    _render() {\n        if (this._zoneManager.getOuterHeight() === 0) {\n            return false;\n        }\n        const width = this._zoneManager.getCanvasWidth();\n        const height = this._zoneManager.getCanvasHeight();\n        const colorZones = this._zoneManager.resolveColorZones();\n        const id2Color = this._zoneManager.getId2Color();\n        const ctx = this._domNode.domNode.getContext('2d');\n        ctx.clearRect(0, 0, width, height);\n        if (colorZones.length > 0) {\n            this._renderOneLane(ctx, colorZones, id2Color, width);\n        }\n        return true;\n    }\n    _renderOneLane(ctx, colorZones, id2Color, width) {\n        let currentColorId = 0;\n        let currentFrom = 0;\n        let currentTo = 0;\n        for (const zone of colorZones) {\n            const zoneColorId = zone.colorId;\n            const zoneFrom = zone.from;\n            const zoneTo = zone.to;\n            if (zoneColorId !== currentColorId) {\n                ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                currentColorId = zoneColorId;\n                ctx.fillStyle = id2Color[currentColorId];\n                currentFrom = zoneFrom;\n                currentTo = zoneTo;\n            }\n            else {\n                if (currentTo >= zoneFrom) {\n                    currentTo = Math.max(currentTo, zoneTo);\n                }\n                else {\n                    ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                    currentFrom = zoneFrom;\n                    currentTo = zoneTo;\n                }\n            }\n        }\n        ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './rulers.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class Rulers extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.domNode.setClassName('view-rulers');\n        this._renderedRulers = [];\n        const options = this._context.configuration.options;\n        this._rulers = options.get(101 /* EditorOption.rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n    }\n    dispose() {\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._rulers = options.get(101 /* EditorOption.rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    _ensureRulersCount() {\n        const currentCount = this._renderedRulers.length;\n        const desiredCount = this._rulers.length;\n        if (currentCount === desiredCount) {\n            // Nothing to do\n            return;\n        }\n        if (currentCount < desiredCount) {\n            const { tabSize } = this._context.viewModel.model.getOptions();\n            const rulerWidth = tabSize;\n            let addCount = desiredCount - currentCount;\n            while (addCount > 0) {\n                const node = createFastDomNode(document.createElement('div'));\n                node.setClassName('view-ruler');\n                node.setWidth(rulerWidth);\n                this.domNode.appendChild(node);\n                this._renderedRulers.push(node);\n                addCount--;\n            }\n            return;\n        }\n        let removeCount = currentCount - desiredCount;\n        while (removeCount > 0) {\n            const node = this._renderedRulers.pop();\n            this.domNode.removeChild(node);\n            removeCount--;\n        }\n    }\n    render(ctx) {\n        this._ensureRulersCount();\n        for (let i = 0, len = this._rulers.length; i < len; i++) {\n            const node = this._renderedRulers[i];\n            const ruler = this._rulers[i];\n            node.setBoxShadow(ruler.color ? `1px 0 0 0 ${ruler.color} inset` : ``);\n            node.setHeight(Math.min(ctx.scrollHeight, 1000000));\n            node.setLeft(ruler.column * this._typicalHalfwidthCharacterWidth);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './scrollDecoration.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class ScrollDecorationViewPart extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._scrollTop = 0;\n        this._width = 0;\n        this._updateWidth();\n        this._shouldShow = false;\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(102 /* EditorOption.scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n    }\n    dispose() {\n        super.dispose();\n    }\n    _updateShouldShow() {\n        const newShouldShow = (this._useShadows && this._scrollTop > 0);\n        if (this._shouldShow !== newShouldShow) {\n            this._shouldShow = newShouldShow;\n            return true;\n        }\n        return false;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _updateWidth() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        if (layoutInfo.minimap.renderMinimap === 0 || (layoutInfo.minimap.minimapWidth > 0 && layoutInfo.minimap.minimapLeft === 0)) {\n            this._width = layoutInfo.width;\n        }\n        else {\n            this._width = layoutInfo.width - layoutInfo.verticalScrollbarWidth;\n        }\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(102 /* EditorOption.scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._updateWidth();\n        this._updateShouldShow();\n        return true;\n    }\n    onScrollChanged(e) {\n        this._scrollTop = e.scrollTop;\n        return this._updateShouldShow();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._width);\n        this._domNode.setClassName(this._shouldShow ? 'scroll-decoration' : '');\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './selections.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorSelectionForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nclass HorizontalRangeWithStyle {\n    constructor(other) {\n        this.left = other.left;\n        this.width = other.width;\n        this.startStyle = null;\n        this.endStyle = null;\n    }\n}\nclass LineVisibleRangesWithStyle {\n    constructor(lineNumber, ranges) {\n        this.lineNumber = lineNumber;\n        this.ranges = ranges;\n    }\n}\nfunction toStyledRange(item) {\n    return new HorizontalRangeWithStyle(item);\n}\nfunction toStyled(item) {\n    return new LineVisibleRangesWithStyle(item.lineNumber, item.ranges.map(toStyledRange));\n}\nexport class SelectionsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._previousFrameVisibleRangesWithStyle = [];\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._roundedSelection = options.get(100 /* EditorOption.roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._selections = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._roundedSelection = options.get(100 /* EditorOption.roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections.slice(0);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true; //e.inlineDecorationsChanged;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _visibleRangesHaveGaps(linesVisibleRanges) {\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = linesVisibleRanges[i];\n            if (lineVisibleRanges.ranges.length > 1) {\n                // There are two ranges on the same line\n                return true;\n            }\n        }\n        return false;\n    }\n    _enrichVisibleRangesWithStyle(viewport, linesVisibleRanges, previousFrame) {\n        const epsilon = this._typicalHalfwidthCharacterWidth / 4;\n        let previousFrameTop = null;\n        let previousFrameBottom = null;\n        if (previousFrame && previousFrame.length > 0 && linesVisibleRanges.length > 0) {\n            const topLineNumber = linesVisibleRanges[0].lineNumber;\n            if (topLineNumber === viewport.startLineNumber) {\n                for (let i = 0; !previousFrameTop && i < previousFrame.length; i++) {\n                    if (previousFrame[i].lineNumber === topLineNumber) {\n                        previousFrameTop = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            const bottomLineNumber = linesVisibleRanges[linesVisibleRanges.length - 1].lineNumber;\n            if (bottomLineNumber === viewport.endLineNumber) {\n                for (let i = previousFrame.length - 1; !previousFrameBottom && i >= 0; i--) {\n                    if (previousFrame[i].lineNumber === bottomLineNumber) {\n                        previousFrameBottom = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            if (previousFrameTop && !previousFrameTop.startStyle) {\n                previousFrameTop = null;\n            }\n            if (previousFrameBottom && !previousFrameBottom.startStyle) {\n                previousFrameBottom = null;\n            }\n        }\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            // We know for a fact that there is precisely one range on each line\n            const curLineRange = linesVisibleRanges[i].ranges[0];\n            const curLeft = curLineRange.left;\n            const curRight = curLineRange.left + curLineRange.width;\n            const startStyle = {\n                top: 0 /* CornerStyle.EXTERN */,\n                bottom: 0 /* CornerStyle.EXTERN */\n            };\n            const endStyle = {\n                top: 0 /* CornerStyle.EXTERN */,\n                bottom: 0 /* CornerStyle.EXTERN */\n            };\n            if (i > 0) {\n                // Look above\n                const prevLeft = linesVisibleRanges[i - 1].ranges[0].left;\n                const prevRight = linesVisibleRanges[i - 1].ranges[0].left + linesVisibleRanges[i - 1].ranges[0].width;\n                if (abs(curLeft - prevLeft) < epsilon) {\n                    startStyle.top = 2 /* CornerStyle.FLAT */;\n                }\n                else if (curLeft > prevLeft) {\n                    startStyle.top = 1 /* CornerStyle.INTERN */;\n                }\n                if (abs(curRight - prevRight) < epsilon) {\n                    endStyle.top = 2 /* CornerStyle.FLAT */;\n                }\n                else if (prevLeft < curRight && curRight < prevRight) {\n                    endStyle.top = 1 /* CornerStyle.INTERN */;\n                }\n            }\n            else if (previousFrameTop) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.top = previousFrameTop.startStyle.top;\n                endStyle.top = previousFrameTop.endStyle.top;\n            }\n            if (i + 1 < len) {\n                // Look below\n                const nextLeft = linesVisibleRanges[i + 1].ranges[0].left;\n                const nextRight = linesVisibleRanges[i + 1].ranges[0].left + linesVisibleRanges[i + 1].ranges[0].width;\n                if (abs(curLeft - nextLeft) < epsilon) {\n                    startStyle.bottom = 2 /* CornerStyle.FLAT */;\n                }\n                else if (nextLeft < curLeft && curLeft < nextRight) {\n                    startStyle.bottom = 1 /* CornerStyle.INTERN */;\n                }\n                if (abs(curRight - nextRight) < epsilon) {\n                    endStyle.bottom = 2 /* CornerStyle.FLAT */;\n                }\n                else if (curRight < nextRight) {\n                    endStyle.bottom = 1 /* CornerStyle.INTERN */;\n                }\n            }\n            else if (previousFrameBottom) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.bottom = previousFrameBottom.startStyle.bottom;\n                endStyle.bottom = previousFrameBottom.endStyle.bottom;\n            }\n            curLineRange.startStyle = startStyle;\n            curLineRange.endStyle = endStyle;\n        }\n    }\n    _getVisibleRangesWithStyle(selection, ctx, previousFrame) {\n        const _linesVisibleRanges = ctx.linesVisibleRangesForRange(selection, true) || [];\n        const linesVisibleRanges = _linesVisibleRanges.map(toStyled);\n        const visibleRangesHaveGaps = this._visibleRangesHaveGaps(linesVisibleRanges);\n        if (!visibleRangesHaveGaps && this._roundedSelection) {\n            this._enrichVisibleRangesWithStyle(ctx.visibleRange, linesVisibleRanges, previousFrame);\n        }\n        // The visible ranges are sorted TOP-BOTTOM and LEFT-RIGHT\n        return linesVisibleRanges;\n    }\n    _createSelectionPiece(top, height, className, left, width) {\n        return ('<div class=\"cslr '\n            + className\n            + '\" style=\"top:'\n            + top.toString()\n            + 'px;left:'\n            + left.toString()\n            + 'px;width:'\n            + width.toString()\n            + 'px;height:'\n            + height\n            + 'px;\"></div>');\n    }\n    _actualRenderOneSelection(output2, visibleStartLineNumber, hasMultipleSelections, visibleRanges) {\n        if (visibleRanges.length === 0) {\n            return;\n        }\n        const visibleRangesHaveStyle = !!visibleRanges[0].ranges[0].startStyle;\n        const fullLineHeight = (this._lineHeight).toString();\n        const reducedLineHeight = (this._lineHeight - 1).toString();\n        const firstLineNumber = visibleRanges[0].lineNumber;\n        const lastLineNumber = visibleRanges[visibleRanges.length - 1].lineNumber;\n        for (let i = 0, len = visibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = visibleRanges[i];\n            const lineNumber = lineVisibleRanges.lineNumber;\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const lineHeight = hasMultipleSelections ? (lineNumber === lastLineNumber || lineNumber === firstLineNumber ? reducedLineHeight : fullLineHeight) : fullLineHeight;\n            const top = hasMultipleSelections ? (lineNumber === firstLineNumber ? 1 : 0) : 0;\n            let innerCornerOutput = '';\n            let restOfSelectionOutput = '';\n            for (let j = 0, lenJ = lineVisibleRanges.ranges.length; j < lenJ; j++) {\n                const visibleRange = lineVisibleRanges.ranges[j];\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 1 /* CornerStyle.INTERN */ || startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                        // Reverse rounded corner to the left\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (startStyle.top === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                        }\n                        if (startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                    if (endStyle.top === 1 /* CornerStyle.INTERN */ || endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                        // Reverse rounded corner to the right\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (endStyle.top === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                        }\n                        if (endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                }\n                let className = SelectionsOverlay.SELECTION_CLASS_NAME;\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                    }\n                    if (startStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                    }\n                    if (endStyle.top === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                    }\n                    if (endStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                    }\n                }\n                restOfSelectionOutput += this._createSelectionPiece(top, lineHeight, className, visibleRange.left, visibleRange.width);\n            }\n            output2[lineIndex][0] += innerCornerOutput;\n            output2[lineIndex][1] += restOfSelectionOutput;\n        }\n    }\n    prepareRender(ctx) {\n        // Build HTML for inner corners separate from HTML for the rest of selections,\n        // as the inner corner HTML can interfere with that of other selections.\n        // In final render, make sure to place the inner corner HTML before the rest of selection HTML. See issue #77777.\n        const output = [];\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = ['', ''];\n        }\n        const thisFrameVisibleRangesWithStyle = [];\n        for (let i = 0, len = this._selections.length; i < len; i++) {\n            const selection = this._selections[i];\n            if (selection.isEmpty()) {\n                thisFrameVisibleRangesWithStyle[i] = null;\n                continue;\n            }\n            const visibleRangesWithStyle = this._getVisibleRangesWithStyle(selection, ctx, this._previousFrameVisibleRangesWithStyle[i]);\n            thisFrameVisibleRangesWithStyle[i] = visibleRangesWithStyle;\n            this._actualRenderOneSelection(output, visibleStartLineNumber, this._selections.length > 1, visibleRangesWithStyle);\n        }\n        this._previousFrameVisibleRangesWithStyle = thisFrameVisibleRangesWithStyle;\n        this._renderResult = output.map(([internalCorners, restOfSelection]) => internalCorners + restOfSelection);\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nSelectionsOverlay.SELECTION_CLASS_NAME = 'selected-text';\nSelectionsOverlay.SELECTION_TOP_LEFT = 'top-left-radius';\nSelectionsOverlay.SELECTION_BOTTOM_LEFT = 'bottom-left-radius';\nSelectionsOverlay.SELECTION_TOP_RIGHT = 'top-right-radius';\nSelectionsOverlay.SELECTION_BOTTOM_RIGHT = 'bottom-right-radius';\nSelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME = 'monaco-editor-background';\nSelectionsOverlay.ROUNDED_PIECE_WIDTH = 10;\nregisterThemingParticipant((theme, collector) => {\n    const editorSelectionForegroundColor = theme.getColor(editorSelectionForeground);\n    if (editorSelectionForegroundColor && !editorSelectionForegroundColor.isTransparent()) {\n        collector.addRule(`.monaco-editor .view-line span.inline-selected-text { color: ${editorSelectionForegroundColor}; }`);\n    }\n});\nfunction abs(n) {\n    return n < 0 ? -n : n;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass ViewCursorRenderData {\n    constructor(top, left, paddingLeft, width, height, textContent, textContentClassName) {\n        this.top = top;\n        this.left = left;\n        this.paddingLeft = paddingLeft;\n        this.width = width;\n        this.height = height;\n        this.textContent = textContent;\n        this.textContentClassName = textContentClassName;\n    }\n}\nexport class ViewCursor {\n    constructor(context) {\n        this._context = context;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._cursorStyle = options.get(28 /* EditorOption.cursorStyle */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(31 /* EditorOption.cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        this._isVisible = true;\n        // Create the dom node\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this._domNode.setHeight(this._lineHeight);\n        this._domNode.setTop(0);\n        this._domNode.setLeft(0);\n        applyFontInfo(this._domNode, fontInfo);\n        this._domNode.setDisplay('none');\n        this._position = new Position(1, 1);\n        this._lastRenderedContent = '';\n        this._renderData = null;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return this._position;\n    }\n    show() {\n        if (!this._isVisible) {\n            this._domNode.setVisibility('inherit');\n            this._isVisible = true;\n        }\n    }\n    hide() {\n        if (this._isVisible) {\n            this._domNode.setVisibility('hidden');\n            this._isVisible = false;\n        }\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._cursorStyle = options.get(28 /* EditorOption.cursorStyle */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(31 /* EditorOption.cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        applyFontInfo(this._domNode, fontInfo);\n        return true;\n    }\n    onCursorPositionChanged(position, pauseAnimation) {\n        if (pauseAnimation) {\n            this._domNode.domNode.style.transitionProperty = 'none';\n        }\n        else {\n            this._domNode.domNode.style.transitionProperty = '';\n        }\n        this._position = position;\n        return true;\n    }\n    /**\n     * If `this._position` is inside a grapheme, returns the position where the grapheme starts.\n     * Also returns the next grapheme.\n     */\n    _getGraphemeAwarePosition() {\n        const { lineNumber, column } = this._position;\n        const lineContent = this._context.viewModel.getLineContent(lineNumber);\n        const [startOffset, endOffset] = strings.getCharContainingOffset(lineContent, column - 1);\n        return [new Position(lineNumber, startOffset + 1), lineContent.substring(startOffset, endOffset)];\n    }\n    _prepareRender(ctx) {\n        let textContent = '';\n        let textContentClassName = '';\n        const [position, nextGrapheme] = this._getGraphemeAwarePosition();\n        if (this._cursorStyle === TextEditorCursorStyle.Line || this._cursorStyle === TextEditorCursorStyle.LineThin) {\n            const visibleRange = ctx.visibleRangeForPosition(position);\n            if (!visibleRange || visibleRange.outsideRenderedLine) {\n                // Outside viewport\n                return null;\n            }\n            let width;\n            if (this._cursorStyle === TextEditorCursorStyle.Line) {\n                width = dom.computeScreenAwareSize(this._lineCursorWidth > 0 ? this._lineCursorWidth : 2);\n                if (width > 2) {\n                    textContent = nextGrapheme;\n                    textContentClassName = this._getTokenClassName(position);\n                }\n            }\n            else {\n                width = dom.computeScreenAwareSize(1);\n            }\n            let left = visibleRange.left;\n            let paddingLeft = 0;\n            if (width >= 2 && left >= 1) {\n                // shift the cursor a bit between the characters\n                paddingLeft = 1;\n                left -= paddingLeft;\n            }\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n            return new ViewCursorRenderData(top, left, paddingLeft, width, this._lineHeight, textContent, textContentClassName);\n        }\n        const visibleRangeForCharacter = ctx.linesVisibleRangesForRange(new Range(position.lineNumber, position.column, position.lineNumber, position.column + nextGrapheme.length), false);\n        if (!visibleRangeForCharacter || visibleRangeForCharacter.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const firstVisibleRangeForCharacter = visibleRangeForCharacter[0];\n        if (firstVisibleRangeForCharacter.outsideRenderedLine || firstVisibleRangeForCharacter.ranges.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const range = firstVisibleRangeForCharacter.ranges[0];\n        const width = (nextGrapheme === '\\t'\n            ? this._typicalHalfwidthCharacterWidth\n            : (range.width < 1\n                ? this._typicalHalfwidthCharacterWidth\n                : range.width));\n        if (this._cursorStyle === TextEditorCursorStyle.Block) {\n            textContent = nextGrapheme;\n            textContentClassName = this._getTokenClassName(position);\n        }\n        let top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n        let height = this._lineHeight;\n        // Underline might interfere with clicking\n        if (this._cursorStyle === TextEditorCursorStyle.Underline || this._cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n            top += this._lineHeight - 2;\n            height = 2;\n        }\n        return new ViewCursorRenderData(top, range.left, 0, width, height, textContent, textContentClassName);\n    }\n    _getTokenClassName(position) {\n        const lineData = this._context.viewModel.getViewLineData(position.lineNumber);\n        const tokenIndex = lineData.tokens.findTokenIndexAtOffset(position.column - 1);\n        return lineData.tokens.getClassName(tokenIndex);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRender(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            this._domNode.setDisplay('none');\n            return null;\n        }\n        if (this._lastRenderedContent !== this._renderData.textContent) {\n            this._lastRenderedContent = this._renderData.textContent;\n            this._domNode.domNode.textContent = this._lastRenderedContent;\n        }\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ${this._renderData.textContentClassName}`);\n        this._domNode.setDisplay('block');\n        this._domNode.setTop(this._renderData.top);\n        this._domNode.setLeft(this._renderData.left);\n        this._domNode.setPaddingLeft(this._renderData.paddingLeft);\n        this._domNode.setWidth(this._renderData.width);\n        this._domNode.setLineHeight(this._renderData.height);\n        this._domNode.setHeight(this._renderData.height);\n        return {\n            domNode: this._domNode.domNode,\n            position: this._position,\n            contentLeft: this._renderData.left,\n            height: this._renderData.height,\n            width: 2\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './viewCursors.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { IntervalTimer, TimeoutTimer } from '../../../../base/common/async.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { ViewCursor } from './viewCursor.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { editorCursorBackground, editorCursorForeground } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nexport class ViewCursors extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(90 /* EditorOption.readOnly */);\n        this._cursorBlinking = options.get(26 /* EditorOption.cursorBlinking */);\n        this._cursorStyle = options.get(28 /* EditorOption.cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(27 /* EditorOption.cursorSmoothCaretAnimation */);\n        this._selectionIsEmpty = true;\n        this._isComposingInput = false;\n        this._isVisible = false;\n        this._primaryCursor = new ViewCursor(this._context);\n        this._secondaryCursors = [];\n        this._renderData = [];\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateDomClassName();\n        this._domNode.appendChild(this._primaryCursor.getDomNode());\n        this._startCursorBlinkAnimation = new TimeoutTimer();\n        this._cursorFlatBlinkInterval = new IntervalTimer();\n        this._blinkingEnabled = false;\n        this._editorHasFocus = false;\n        this._updateBlinking();\n    }\n    dispose() {\n        super.dispose();\n        this._startCursorBlinkAnimation.dispose();\n        this._cursorFlatBlinkInterval.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onCompositionStart(e) {\n        this._isComposingInput = true;\n        this._updateBlinking();\n        return true;\n    }\n    onCompositionEnd(e) {\n        this._isComposingInput = false;\n        this._updateBlinking();\n        return true;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(90 /* EditorOption.readOnly */);\n        this._cursorBlinking = options.get(26 /* EditorOption.cursorBlinking */);\n        this._cursorStyle = options.get(28 /* EditorOption.cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(27 /* EditorOption.cursorSmoothCaretAnimation */);\n        this._updateBlinking();\n        this._updateDomClassName();\n        this._primaryCursor.onConfigurationChanged(e);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    _onCursorPositionChanged(position, secondaryPositions, reason) {\n        const pauseAnimation = (this._secondaryCursors.length !== secondaryPositions.length\n            || (this._cursorSmoothCaretAnimation === 'explicit' && reason !== 3 /* CursorChangeReason.Explicit */));\n        this._primaryCursor.onCursorPositionChanged(position, pauseAnimation);\n        this._updateBlinking();\n        if (this._secondaryCursors.length < secondaryPositions.length) {\n            // Create new cursors\n            const addCnt = secondaryPositions.length - this._secondaryCursors.length;\n            for (let i = 0; i < addCnt; i++) {\n                const newCursor = new ViewCursor(this._context);\n                this._domNode.domNode.insertBefore(newCursor.getDomNode().domNode, this._primaryCursor.getDomNode().domNode.nextSibling);\n                this._secondaryCursors.push(newCursor);\n            }\n        }\n        else if (this._secondaryCursors.length > secondaryPositions.length) {\n            // Remove some cursors\n            const removeCnt = this._secondaryCursors.length - secondaryPositions.length;\n            for (let i = 0; i < removeCnt; i++) {\n                this._domNode.removeChild(this._secondaryCursors[0].getDomNode());\n                this._secondaryCursors.splice(0, 1);\n            }\n        }\n        for (let i = 0; i < secondaryPositions.length; i++) {\n            this._secondaryCursors[i].onCursorPositionChanged(secondaryPositions[i], pauseAnimation);\n        }\n    }\n    onCursorStateChanged(e) {\n        const positions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            positions[i] = e.selections[i].getPosition();\n        }\n        this._onCursorPositionChanged(positions[0], positions.slice(1), e.reason);\n        const selectionIsEmpty = e.selections[0].isEmpty();\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            this._updateDomClassName();\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        this._editorHasFocus = e.isFocused;\n        this._updateBlinking();\n        return false;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onTokensChanged(e) {\n        const shouldRender = (position) => {\n            for (let i = 0, len = e.ranges.length; i < len; i++) {\n                if (e.ranges[i].fromLineNumber <= position.lineNumber && position.lineNumber <= e.ranges[i].toLineNumber) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        if (shouldRender(this._primaryCursor.getPosition())) {\n            return true;\n        }\n        for (const secondaryCursor of this._secondaryCursors) {\n            if (shouldRender(secondaryCursor.getPosition())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // ---- blinking logic\n    _getCursorBlinking() {\n        if (this._isComposingInput) {\n            // avoid double cursors\n            return 0 /* TextEditorCursorBlinkingStyle.Hidden */;\n        }\n        if (!this._editorHasFocus) {\n            return 0 /* TextEditorCursorBlinkingStyle.Hidden */;\n        }\n        if (this._readOnly) {\n            return 5 /* TextEditorCursorBlinkingStyle.Solid */;\n        }\n        return this._cursorBlinking;\n    }\n    _updateBlinking() {\n        this._startCursorBlinkAnimation.cancel();\n        this._cursorFlatBlinkInterval.cancel();\n        const blinkingStyle = this._getCursorBlinking();\n        // hidden and solid are special as they involve no animations\n        const isHidden = (blinkingStyle === 0 /* TextEditorCursorBlinkingStyle.Hidden */);\n        const isSolid = (blinkingStyle === 5 /* TextEditorCursorBlinkingStyle.Solid */);\n        if (isHidden) {\n            this._hide();\n        }\n        else {\n            this._show();\n        }\n        this._blinkingEnabled = false;\n        this._updateDomClassName();\n        if (!isHidden && !isSolid) {\n            if (blinkingStyle === 1 /* TextEditorCursorBlinkingStyle.Blink */) {\n                // flat blinking is handled by JavaScript to save battery life due to Chromium step timing issue https://bugs.chromium.org/p/chromium/issues/detail?id=361587\n                this._cursorFlatBlinkInterval.cancelAndSet(() => {\n                    if (this._isVisible) {\n                        this._hide();\n                    }\n                    else {\n                        this._show();\n                    }\n                }, ViewCursors.BLINK_INTERVAL);\n            }\n            else {\n                this._startCursorBlinkAnimation.setIfNotSet(() => {\n                    this._blinkingEnabled = true;\n                    this._updateDomClassName();\n                }, ViewCursors.BLINK_INTERVAL);\n            }\n        }\n    }\n    // --- end blinking logic\n    _updateDomClassName() {\n        this._domNode.setClassName(this._getClassName());\n    }\n    _getClassName() {\n        let result = 'cursors-layer';\n        if (!this._selectionIsEmpty) {\n            result += ' has-selection';\n        }\n        switch (this._cursorStyle) {\n            case TextEditorCursorStyle.Line:\n                result += ' cursor-line-style';\n                break;\n            case TextEditorCursorStyle.Block:\n                result += ' cursor-block-style';\n                break;\n            case TextEditorCursorStyle.Underline:\n                result += ' cursor-underline-style';\n                break;\n            case TextEditorCursorStyle.LineThin:\n                result += ' cursor-line-thin-style';\n                break;\n            case TextEditorCursorStyle.BlockOutline:\n                result += ' cursor-block-outline-style';\n                break;\n            case TextEditorCursorStyle.UnderlineThin:\n                result += ' cursor-underline-thin-style';\n                break;\n            default:\n                result += ' cursor-line-style';\n        }\n        if (this._blinkingEnabled) {\n            switch (this._getCursorBlinking()) {\n                case 1 /* TextEditorCursorBlinkingStyle.Blink */:\n                    result += ' cursor-blink';\n                    break;\n                case 2 /* TextEditorCursorBlinkingStyle.Smooth */:\n                    result += ' cursor-smooth';\n                    break;\n                case 3 /* TextEditorCursorBlinkingStyle.Phase */:\n                    result += ' cursor-phase';\n                    break;\n                case 4 /* TextEditorCursorBlinkingStyle.Expand */:\n                    result += ' cursor-expand';\n                    break;\n                case 5 /* TextEditorCursorBlinkingStyle.Solid */:\n                    result += ' cursor-solid';\n                    break;\n                default:\n                    result += ' cursor-solid';\n            }\n        }\n        else {\n            result += ' cursor-solid';\n        }\n        if (this._cursorSmoothCaretAnimation === 'on' || this._cursorSmoothCaretAnimation === 'explicit') {\n            result += ' cursor-smooth-caret-animation';\n        }\n        return result;\n    }\n    _show() {\n        this._primaryCursor.show();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].show();\n        }\n        this._isVisible = true;\n    }\n    _hide() {\n        this._primaryCursor.hide();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].hide();\n        }\n        this._isVisible = false;\n    }\n    // ---- IViewPart implementation\n    prepareRender(ctx) {\n        this._primaryCursor.prepareRender(ctx);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const renderData = [];\n        let renderDataLen = 0;\n        const primaryRenderData = this._primaryCursor.render(ctx);\n        if (primaryRenderData) {\n            renderData[renderDataLen++] = primaryRenderData;\n        }\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            const secondaryRenderData = this._secondaryCursors[i].render(ctx);\n            if (secondaryRenderData) {\n                renderData[renderDataLen++] = secondaryRenderData;\n            }\n        }\n        this._renderData = renderData;\n    }\n    getLastRenderData() {\n        return this._renderData;\n    }\n}\nViewCursors.BLINK_INTERVAL = 500;\nregisterThemingParticipant((theme, collector) => {\n    const caret = theme.getColor(editorCursorForeground);\n    if (caret) {\n        let caretBackground = theme.getColor(editorCursorBackground);\n        if (!caretBackground) {\n            caretBackground = caret.opposite();\n        }\n        collector.addRule(`.monaco-editor .cursors-layer .cursor { background-color: ${caret}; border-color: ${caret}; color: ${caretBackground}; }`);\n        if (isHighContrast(theme.type)) {\n            collector.addRule(`.monaco-editor .cursors-layer.has-selection .cursor { border-left: 1px solid ${caretBackground}; border-right: 1px solid ${caretBackground}; }`);\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\nexport class ViewZones extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName('view-zones');\n        this.domNode.setPosition('absolute');\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.marginDomNode = createFastDomNode(document.createElement('div'));\n        this.marginDomNode.setClassName('margin-view-zones');\n        this.marginDomNode.setPosition('absolute');\n        this.marginDomNode.setAttribute('role', 'presentation');\n        this.marginDomNode.setAttribute('aria-hidden', 'true');\n        this._zones = {};\n    }\n    dispose() {\n        super.dispose();\n        this._zones = {};\n    }\n    // ---- begin view event handlers\n    _recomputeWhitespacesProps() {\n        const whitespaces = this._context.viewLayout.getWhitespaces();\n        const oldWhitespaces = new Map();\n        for (const whitespace of whitespaces) {\n            oldWhitespaces.set(whitespace.id, whitespace);\n        }\n        let hadAChange = false;\n        this._context.viewModel.changeWhitespace((whitespaceAccessor) => {\n            const keys = Object.keys(this._zones);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const id = keys[i];\n                const zone = this._zones[id];\n                const props = this._computeWhitespaceProps(zone.delegate);\n                zone.isInHiddenArea = props.isInHiddenArea;\n                const oldWhitespace = oldWhitespaces.get(id);\n                if (oldWhitespace && (oldWhitespace.afterLineNumber !== props.afterViewLineNumber || oldWhitespace.height !== props.heightInPx)) {\n                    whitespaceAccessor.changeOneWhitespace(id, props.afterViewLineNumber, props.heightInPx);\n                    this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n                    hadAChange = true;\n                }\n            }\n        });\n        return hadAChange;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        if (e.hasChanged(66 /* EditorOption.lineHeight */)) {\n            this._recomputeWhitespacesProps();\n        }\n        return true;\n    }\n    onLineMappingChanged(e) {\n        return this._recomputeWhitespacesProps();\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    _getZoneOrdinal(zone) {\n        var _a, _b;\n        return (_b = (_a = zone.ordinal) !== null && _a !== void 0 ? _a : zone.afterColumn) !== null && _b !== void 0 ? _b : 10000;\n    }\n    _computeWhitespaceProps(zone) {\n        if (zone.afterLineNumber === 0) {\n            return {\n                isInHiddenArea: false,\n                afterViewLineNumber: 0,\n                heightInPx: this._heightInPixels(zone),\n                minWidthInPx: this._minWidthInPixels(zone)\n            };\n        }\n        let zoneAfterModelPosition;\n        if (typeof zone.afterColumn !== 'undefined') {\n            zoneAfterModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zone.afterLineNumber,\n                column: zone.afterColumn\n            });\n        }\n        else {\n            const validAfterLineNumber = this._context.viewModel.model.validatePosition({\n                lineNumber: zone.afterLineNumber,\n                column: 1\n            }).lineNumber;\n            zoneAfterModelPosition = new Position(validAfterLineNumber, this._context.viewModel.model.getLineMaxColumn(validAfterLineNumber));\n        }\n        let zoneBeforeModelPosition;\n        if (zoneAfterModelPosition.column === this._context.viewModel.model.getLineMaxColumn(zoneAfterModelPosition.lineNumber)) {\n            zoneBeforeModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zoneAfterModelPosition.lineNumber + 1,\n                column: 1\n            });\n        }\n        else {\n            zoneBeforeModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zoneAfterModelPosition.lineNumber,\n                column: zoneAfterModelPosition.column + 1\n            });\n        }\n        const viewPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(zoneAfterModelPosition, zone.afterColumnAffinity, true);\n        const isVisible = zone.showInHiddenAreas || this._context.viewModel.coordinatesConverter.modelPositionIsVisible(zoneBeforeModelPosition);\n        return {\n            isInHiddenArea: !isVisible,\n            afterViewLineNumber: viewPosition.lineNumber,\n            heightInPx: (isVisible ? this._heightInPixels(zone) : 0),\n            minWidthInPx: this._minWidthInPixels(zone)\n        };\n    }\n    changeViewZones(callback) {\n        let zonesHaveChanged = false;\n        this._context.viewModel.changeWhitespace((whitespaceAccessor) => {\n            const changeAccessor = {\n                addZone: (zone) => {\n                    zonesHaveChanged = true;\n                    return this._addZone(whitespaceAccessor, zone);\n                },\n                removeZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._removeZone(whitespaceAccessor, id) || zonesHaveChanged;\n                },\n                layoutZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._layoutZone(whitespaceAccessor, id) || zonesHaveChanged;\n                }\n            };\n            safeInvoke1Arg(callback, changeAccessor);\n            // Invalidate changeAccessor\n            changeAccessor.addZone = invalidFunc;\n            changeAccessor.removeZone = invalidFunc;\n            changeAccessor.layoutZone = invalidFunc;\n        });\n        return zonesHaveChanged;\n    }\n    _addZone(whitespaceAccessor, zone) {\n        const props = this._computeWhitespaceProps(zone);\n        const whitespaceId = whitespaceAccessor.insertWhitespace(props.afterViewLineNumber, this._getZoneOrdinal(zone), props.heightInPx, props.minWidthInPx);\n        const myZone = {\n            whitespaceId: whitespaceId,\n            delegate: zone,\n            isInHiddenArea: props.isInHiddenArea,\n            isVisible: false,\n            domNode: createFastDomNode(zone.domNode),\n            marginDomNode: zone.marginDomNode ? createFastDomNode(zone.marginDomNode) : null\n        };\n        this._safeCallOnComputedHeight(myZone.delegate, props.heightInPx);\n        myZone.domNode.setPosition('absolute');\n        myZone.domNode.domNode.style.width = '100%';\n        myZone.domNode.setDisplay('none');\n        myZone.domNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n        this.domNode.appendChild(myZone.domNode);\n        if (myZone.marginDomNode) {\n            myZone.marginDomNode.setPosition('absolute');\n            myZone.marginDomNode.domNode.style.width = '100%';\n            myZone.marginDomNode.setDisplay('none');\n            myZone.marginDomNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n            this.marginDomNode.appendChild(myZone.marginDomNode);\n        }\n        this._zones[myZone.whitespaceId] = myZone;\n        this.setShouldRender();\n        return myZone.whitespaceId;\n    }\n    _removeZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            delete this._zones[id];\n            whitespaceAccessor.removeWhitespace(zone.whitespaceId);\n            zone.domNode.removeAttribute('monaco-visible-view-zone');\n            zone.domNode.removeAttribute('monaco-view-zone');\n            zone.domNode.domNode.parentNode.removeChild(zone.domNode.domNode);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.removeAttribute('monaco-visible-view-zone');\n                zone.marginDomNode.removeAttribute('monaco-view-zone');\n                zone.marginDomNode.domNode.parentNode.removeChild(zone.marginDomNode.domNode);\n            }\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    _layoutZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            const props = this._computeWhitespaceProps(zone.delegate);\n            zone.isInHiddenArea = props.isInHiddenArea;\n            // const newOrdinal = this._getZoneOrdinal(zone.delegate);\n            whitespaceAccessor.changeOneWhitespace(zone.whitespaceId, props.afterViewLineNumber, props.heightInPx);\n            // TODO@Alex: change `newOrdinal` too\n            this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    shouldSuppressMouseDownOnViewZone(id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            return Boolean(zone.delegate.suppressMouseDown);\n        }\n        return false;\n    }\n    _heightInPixels(zone) {\n        if (typeof zone.heightInPx === 'number') {\n            return zone.heightInPx;\n        }\n        if (typeof zone.heightInLines === 'number') {\n            return this._lineHeight * zone.heightInLines;\n        }\n        return this._lineHeight;\n    }\n    _minWidthInPixels(zone) {\n        if (typeof zone.minWidthInPx === 'number') {\n            return zone.minWidthInPx;\n        }\n        return 0;\n    }\n    _safeCallOnComputedHeight(zone, height) {\n        if (typeof zone.onComputedHeight === 'function') {\n            try {\n                zone.onComputedHeight(height);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    _safeCallOnDomNodeTop(zone, top) {\n        if (typeof zone.onDomNodeTop === 'function') {\n            try {\n                zone.onDomNodeTop(top);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        const visibleWhitespaces = ctx.viewportData.whitespaceViewportData;\n        const visibleZones = {};\n        let hasVisibleZone = false;\n        for (const visibleWhitespace of visibleWhitespaces) {\n            if (this._zones[visibleWhitespace.id].isInHiddenArea) {\n                continue;\n            }\n            visibleZones[visibleWhitespace.id] = visibleWhitespace;\n            hasVisibleZone = true;\n        }\n        const keys = Object.keys(this._zones);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const id = keys[i];\n            const zone = this._zones[id];\n            let newTop = 0;\n            let newHeight = 0;\n            let newDisplay = 'none';\n            if (visibleZones.hasOwnProperty(id)) {\n                newTop = visibleZones[id].verticalOffset - ctx.bigNumbersDelta;\n                newHeight = visibleZones[id].height;\n                newDisplay = 'block';\n                // zone is visible\n                if (!zone.isVisible) {\n                    zone.domNode.setAttribute('monaco-visible-view-zone', 'true');\n                    zone.isVisible = true;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(visibleZones[id].verticalOffset));\n            }\n            else {\n                if (zone.isVisible) {\n                    zone.domNode.removeAttribute('monaco-visible-view-zone');\n                    zone.isVisible = false;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(-1000000));\n            }\n            zone.domNode.setTop(newTop);\n            zone.domNode.setHeight(newHeight);\n            zone.domNode.setDisplay(newDisplay);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.setTop(newTop);\n                zone.marginDomNode.setHeight(newHeight);\n                zone.marginDomNode.setDisplay(newDisplay);\n            }\n        }\n        if (hasVisibleZone) {\n            this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n            this.marginDomNode.setWidth(this._contentLeft);\n        }\n    }\n}\nfunction safeInvoke1Arg(func, arg1) {\n    try {\n        return func(arg1);\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport './blockDecorations.css';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class BlockDecorations extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.blocks = [];\n        this.contentWidth = -1;\n        this.contentLeft = 0;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.domNode.setClassName('blockDecorations-container');\n        this.update();\n    }\n    update() {\n        let didChange = false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        const newContentWidth = layoutInfo.contentWidth - layoutInfo.verticalScrollbarWidth;\n        if (this.contentWidth !== newContentWidth) {\n            this.contentWidth = newContentWidth;\n            didChange = true;\n        }\n        const newContentLeft = layoutInfo.contentLeft;\n        if (this.contentLeft !== newContentLeft) {\n            this.contentLeft = newContentLeft;\n            didChange = true;\n        }\n        return didChange;\n    }\n    dispose() {\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return this.update();\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollLeftChanged;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        var _a;\n        let count = 0;\n        const decorations = ctx.getDecorationsInViewport();\n        for (const decoration of decorations) {\n            if (!decoration.options.blockClassName) {\n                continue;\n            }\n            let block = this.blocks[count];\n            if (!block) {\n                block = this.blocks[count] = createFastDomNode(document.createElement('div'));\n                this.domNode.appendChild(block);\n            }\n            let top;\n            let bottom;\n            if (decoration.options.blockIsAfterEnd) {\n                // range must be empty\n                top = ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, false);\n                bottom = ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, true);\n            }\n            else {\n                top = ctx.getVerticalOffsetForLineNumber(decoration.range.startLineNumber, true);\n                bottom = decoration.range.isEmpty() && !decoration.options.blockDoesNotCollapse\n                    ? ctx.getVerticalOffsetForLineNumber(decoration.range.startLineNumber, false)\n                    : ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, true);\n            }\n            const [paddingTop, paddingRight, paddingBottom, paddingLeft] = (_a = decoration.options.blockPadding) !== null && _a !== void 0 ? _a : [0, 0, 0, 0];\n            block.setClassName('blockDecorations-block ' + decoration.options.blockClassName);\n            block.setLeft(this.contentLeft - paddingLeft);\n            block.setWidth(this.contentWidth + paddingLeft + paddingRight);\n            block.setTop(top - ctx.scrollTop - paddingTop);\n            block.setHeight(bottom - top + paddingTop + paddingBottom);\n            count++;\n        }\n        for (let i = count; i < this.blocks.length; i++) {\n            this.blocks[i].domNode.remove();\n        }\n        this.blocks.length = count;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './whitespace.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { LineRange } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorWhitespaces } from '../../../common/core/editorColorRegistry.js';\nexport class WhitespaceOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._options = new WhitespaceOptions(this._context.configuration);\n        this._selection = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const newOptions = new WhitespaceOptions(this._context.configuration);\n        if (this._options.equals(newOptions)) {\n            return e.hasChanged(143 /* EditorOption.layoutInfo */);\n        }\n        this._options = newOptions;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selection = e.selections;\n        if (this._options.renderWhitespace === 'selection') {\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._options.renderWhitespace === 'none') {\n            this._renderResult = null;\n            return;\n        }\n        const startLineNumber = ctx.visibleRange.startLineNumber;\n        const endLineNumber = ctx.visibleRange.endLineNumber;\n        const lineCount = endLineNumber - startLineNumber + 1;\n        const needed = new Array(lineCount);\n        for (let i = 0; i < lineCount; i++) {\n            needed[i] = true;\n        }\n        const viewportData = this._context.viewModel.getMinimapLinesRenderingData(ctx.viewportData.startLineNumber, ctx.viewportData.endLineNumber, needed);\n        this._renderResult = [];\n        for (let lineNumber = ctx.viewportData.startLineNumber; lineNumber <= ctx.viewportData.endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - ctx.viewportData.startLineNumber;\n            const lineData = viewportData.data[lineIndex];\n            let selectionsOnLine = null;\n            if (this._options.renderWhitespace === 'selection') {\n                const selections = this._selection;\n                for (const selection of selections) {\n                    if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                        // Selection does not intersect line\n                        continue;\n                    }\n                    const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                    const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                    if (startColumn < endColumn) {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n            this._renderResult[lineIndex] = this._applyRenderWhitespace(ctx, lineNumber, selectionsOnLine, lineData);\n        }\n    }\n    _applyRenderWhitespace(ctx, lineNumber, selections, lineData) {\n        if (this._options.renderWhitespace === 'selection' && !selections) {\n            return '';\n        }\n        if (this._options.renderWhitespace === 'trailing' && lineData.continuesWithWrappedLine) {\n            return '';\n        }\n        const color = this._context.theme.getColor(editorWhitespaces);\n        const USE_SVG = this._options.renderWithSVG;\n        const lineContent = lineData.content;\n        const len = (this._options.stopRenderingLineAfter === -1 ? lineContent.length : Math.min(this._options.stopRenderingLineAfter, lineContent.length));\n        const continuesWithWrappedLine = lineData.continuesWithWrappedLine;\n        const fauxIndentLength = lineData.minColumn - 1;\n        const onlyBoundary = (this._options.renderWhitespace === 'boundary');\n        const onlyTrailing = (this._options.renderWhitespace === 'trailing');\n        const lineHeight = this._options.lineHeight;\n        const middotWidth = this._options.middotWidth;\n        const wsmiddotWidth = this._options.wsmiddotWidth;\n        const spaceWidth = this._options.spaceWidth;\n        const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n        const middotDiff = Math.abs(middotWidth - spaceWidth);\n        // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        // U+00B7 - MIDDLE DOT\n        const renderSpaceCharCode = (wsmiddotDiff < middotDiff ? 0x2E31 : 0xB7);\n        const canUseHalfwidthRightwardsArrow = this._options.canUseHalfwidthRightwardsArrow;\n        let result = '';\n        let lineIsEmptyOrWhitespace = false;\n        let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n        let lastNonWhitespaceIndex;\n        if (firstNonWhitespaceIndex === -1) {\n            lineIsEmptyOrWhitespace = true;\n            firstNonWhitespaceIndex = len;\n            lastNonWhitespaceIndex = len;\n        }\n        else {\n            lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n        }\n        let currentSelectionIndex = 0;\n        let currentSelection = selections && selections[currentSelectionIndex];\n        let maxLeft = 0;\n        for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n            const chCode = lineContent.charCodeAt(charIndex);\n            if (currentSelection && charIndex >= currentSelection.endOffset) {\n                currentSelectionIndex++;\n                currentSelection = selections && selections[currentSelectionIndex];\n            }\n            if (chCode !== 9 /* CharCode.Tab */ && chCode !== 32 /* CharCode.Space */) {\n                continue;\n            }\n            if (onlyTrailing && !lineIsEmptyOrWhitespace && charIndex <= lastNonWhitespaceIndex) {\n                // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n                continue;\n            }\n            if (onlyBoundary && charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex && chCode === 32 /* CharCode.Space */) {\n                // rendering only boundary whitespace\n                const prevChCode = (charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */);\n                const nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n                if (prevChCode !== 32 /* CharCode.Space */ && nextChCode !== 32 /* CharCode.Space */) {\n                    continue;\n                }\n            }\n            if (onlyBoundary && continuesWithWrappedLine && charIndex === len - 1) {\n                const prevCharCode = (charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */);\n                const isSingleTrailingSpace = (chCode === 32 /* CharCode.Space */ && (prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */));\n                if (isSingleTrailingSpace) {\n                    continue;\n                }\n            }\n            if (selections && (!currentSelection || currentSelection.startOffset > charIndex || currentSelection.endOffset <= charIndex)) {\n                // If rendering whitespace on selection, check that the charIndex falls within a selection\n                continue;\n            }\n            const visibleRange = ctx.visibleRangeForPosition(new Position(lineNumber, charIndex + 1));\n            if (!visibleRange) {\n                continue;\n            }\n            if (USE_SVG) {\n                maxLeft = Math.max(maxLeft, visibleRange.left);\n                if (chCode === 9 /* CharCode.Tab */) {\n                    result += this._renderArrow(lineHeight, spaceWidth, visibleRange.left);\n                }\n                else {\n                    result += `<circle cx=\"${(visibleRange.left + spaceWidth / 2).toFixed(2)}\" cy=\"${(lineHeight / 2).toFixed(2)}\" r=\"${(spaceWidth / 7).toFixed(2)}\" />`;\n                }\n            }\n            else {\n                if (chCode === 9 /* CharCode.Tab */) {\n                    result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${canUseHalfwidthRightwardsArrow ? String.fromCharCode(0xFFEB) : String.fromCharCode(0x2192)}</div>`;\n                }\n                else {\n                    result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${String.fromCharCode(renderSpaceCharCode)}</div>`;\n                }\n            }\n        }\n        if (USE_SVG) {\n            maxLeft = Math.round(maxLeft + spaceWidth);\n            return (`<svg style=\"position:absolute;width:${maxLeft}px;height:${lineHeight}px\" viewBox=\"0 0 ${maxLeft} ${lineHeight}\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"${color}\">`\n                + result\n                + `</svg>`);\n        }\n        return result;\n    }\n    _renderArrow(lineHeight, spaceWidth, left) {\n        const strokeWidth = spaceWidth / 7;\n        const width = spaceWidth;\n        const dy = lineHeight / 2;\n        const dx = left;\n        const p1 = { x: 0, y: strokeWidth / 2 };\n        const p2 = { x: 100 / 125 * width, y: p1.y };\n        const p3 = { x: p2.x - 0.2 * p2.x, y: p2.y + 0.2 * p2.x };\n        const p4 = { x: p3.x + 0.1 * p2.x, y: p3.y + 0.1 * p2.x };\n        const p5 = { x: p4.x + 0.35 * p2.x, y: p4.y - 0.35 * p2.x };\n        const p6 = { x: p5.x, y: -p5.y };\n        const p7 = { x: p4.x, y: -p4.y };\n        const p8 = { x: p3.x, y: -p3.y };\n        const p9 = { x: p2.x, y: -p2.y };\n        const p10 = { x: p1.x, y: -p1.y };\n        const p = [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10];\n        const parts = p.map((p) => `${(dx + p.x).toFixed(2)} ${(dy + p.y).toFixed(2)}`).join(' L ');\n        return `<path d=\"M ${parts}\" />`;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nclass WhitespaceOptions {\n    constructor(config) {\n        const options = config.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const experimentalWhitespaceRendering = options.get(38 /* EditorOption.experimentalWhitespaceRendering */);\n        if (experimentalWhitespaceRendering === 'off') {\n            // whitespace is rendered in the view line\n            this.renderWhitespace = 'none';\n            this.renderWithSVG = false;\n        }\n        else if (experimentalWhitespaceRendering === 'svg') {\n            this.renderWhitespace = options.get(98 /* EditorOption.renderWhitespace */);\n            this.renderWithSVG = true;\n        }\n        else {\n            this.renderWhitespace = options.get(98 /* EditorOption.renderWhitespace */);\n            this.renderWithSVG = false;\n        }\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this.stopRenderingLineAfter = options.get(116 /* EditorOption.stopRenderingLineAfter */);\n    }\n    equals(other) {\n        return (this.renderWhitespace === other.renderWhitespace\n            && this.renderWithSVG === other.renderWithSVG\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as dom from '../../base/browser/dom.js';\nimport { Selection } from '../common/core/selection.js';\nimport { Range } from '../common/core/range.js';\nimport { createFastDomNode } from '../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../base/common/errors.js';\nimport { PointerHandler } from './controller/pointerHandler.js';\nimport { TextAreaHandler } from './controller/textAreaHandler.js';\nimport { ViewController } from './view/viewController.js';\nimport { ViewUserInputEvents } from './view/viewUserInputEvents.js';\nimport { ContentViewOverlays, MarginViewOverlays } from './view/viewOverlays.js';\nimport { PartFingerprints } from './view/viewPart.js';\nimport { ViewContentWidgets } from './viewParts/contentWidgets/contentWidgets.js';\nimport { CurrentLineHighlightOverlay, CurrentLineMarginHighlightOverlay } from './viewParts/currentLineHighlight/currentLineHighlight.js';\nimport { DecorationsOverlay } from './viewParts/decorations/decorations.js';\nimport { EditorScrollbar } from './viewParts/editorScrollbar/editorScrollbar.js';\nimport { IndentGuidesOverlay } from './viewParts/indentGuides/indentGuides.js';\nimport { LineNumbersOverlay } from './viewParts/lineNumbers/lineNumbers.js';\nimport { ViewLines } from './viewParts/lines/viewLines.js';\nimport { LinesDecorationsOverlay } from './viewParts/linesDecorations/linesDecorations.js';\nimport { Margin } from './viewParts/margin/margin.js';\nimport { MarginViewLineDecorationsOverlay } from './viewParts/marginDecorations/marginDecorations.js';\nimport { Minimap } from './viewParts/minimap/minimap.js';\nimport { ViewOverlayWidgets } from './viewParts/overlayWidgets/overlayWidgets.js';\nimport { DecorationsOverviewRuler } from './viewParts/overviewRuler/decorationsOverviewRuler.js';\nimport { OverviewRuler } from './viewParts/overviewRuler/overviewRuler.js';\nimport { Rulers } from './viewParts/rulers/rulers.js';\nimport { ScrollDecorationViewPart } from './viewParts/scrollDecoration/scrollDecoration.js';\nimport { SelectionsOverlay } from './viewParts/selections/selections.js';\nimport { ViewCursors } from './viewParts/viewCursors/viewCursors.js';\nimport { ViewZones } from './viewParts/viewZones/viewZones.js';\nimport { Position } from '../common/core/position.js';\nimport { RenderingContext } from './view/renderingContext.js';\nimport { ViewContext } from '../common/viewModel/viewContext.js';\nimport { ViewportData } from '../common/viewLayout/viewLinesViewportData.js';\nimport { ViewEventHandler } from '../common/viewEventHandler.js';\nimport { getThemeTypeSelector } from '../../platform/theme/common/themeService.js';\nimport { PointerHandlerLastRenderData } from './controller/mouseTarget.js';\nimport { BlockDecorations } from './viewParts/blockDecorations/blockDecorations.js';\nimport { inputLatency } from '../../base/browser/performance.js';\nimport { WhitespaceOverlay } from './viewParts/whitespace/whitespace.js';\nimport { GlyphMarginWidgets } from './viewParts/glyphMargin/glyphMargin.js';\nimport { GlyphMarginLane } from '../common/model.js';\nimport { IInstantiationService } from '../../platform/instantiation/common/instantiation.js';\nlet View = class View extends ViewEventHandler {\n    constructor(commandDelegate, configuration, colorTheme, model, userInputEvents, overflowWidgetsDomNode, _instantiationService) {\n        super();\n        this._instantiationService = _instantiationService;\n        // Actual mutable state\n        this._shouldRecomputeGlyphMarginLanes = false;\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderAnimationFrame = null;\n        const viewController = new ViewController(configuration, model, userInputEvents, commandDelegate);\n        // The view context is passed on to most classes (basically to reduce param. counts in ctors)\n        this._context = new ViewContext(configuration, colorTheme, model);\n        // Ensure the view is the first event handler in order to update the layout\n        this._context.addEventHandler(this);\n        this._viewParts = [];\n        // Keyboard handler\n        this._textAreaHandler = this._instantiationService.createInstance(TextAreaHandler, this._context, viewController, this._createTextAreaHandlerHelper());\n        this._viewParts.push(this._textAreaHandler);\n        // These two dom nodes must be constructed up front, since references are needed in the layout provider (scrolling & co.)\n        this._linesContent = createFastDomNode(document.createElement('div'));\n        this._linesContent.setClassName('lines-content' + ' monaco-editor-background');\n        this._linesContent.setPosition('absolute');\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName(this._getEditorClassName());\n        // Set role 'code' for better screen reader support https://github.com/microsoft/vscode/issues/93438\n        this.domNode.setAttribute('role', 'code');\n        this._overflowGuardContainer = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._overflowGuardContainer, 3 /* PartFingerprint.OverflowGuard */);\n        this._overflowGuardContainer.setClassName('overflow-guard');\n        this._scrollbar = new EditorScrollbar(this._context, this._linesContent, this.domNode, this._overflowGuardContainer);\n        this._viewParts.push(this._scrollbar);\n        // View Lines\n        this._viewLines = new ViewLines(this._context, this._linesContent);\n        // View Zones\n        this._viewZones = new ViewZones(this._context);\n        this._viewParts.push(this._viewZones);\n        // Decorations overview ruler\n        const decorationsOverviewRuler = new DecorationsOverviewRuler(this._context);\n        this._viewParts.push(decorationsOverviewRuler);\n        const scrollDecoration = new ScrollDecorationViewPart(this._context);\n        this._viewParts.push(scrollDecoration);\n        const contentViewOverlays = new ContentViewOverlays(this._context);\n        this._viewParts.push(contentViewOverlays);\n        contentViewOverlays.addDynamicOverlay(new CurrentLineHighlightOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new SelectionsOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new IndentGuidesOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new DecorationsOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new WhitespaceOverlay(this._context));\n        const marginViewOverlays = new MarginViewOverlays(this._context);\n        this._viewParts.push(marginViewOverlays);\n        marginViewOverlays.addDynamicOverlay(new CurrentLineMarginHighlightOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new MarginViewLineDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LinesDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LineNumbersOverlay(this._context));\n        // Glyph margin widgets\n        this._glyphMarginWidgets = new GlyphMarginWidgets(this._context);\n        this._viewParts.push(this._glyphMarginWidgets);\n        const margin = new Margin(this._context);\n        margin.getDomNode().appendChild(this._viewZones.marginDomNode);\n        margin.getDomNode().appendChild(marginViewOverlays.getDomNode());\n        margin.getDomNode().appendChild(this._glyphMarginWidgets.domNode);\n        this._viewParts.push(margin);\n        // Content widgets\n        this._contentWidgets = new ViewContentWidgets(this._context, this.domNode);\n        this._viewParts.push(this._contentWidgets);\n        this._viewCursors = new ViewCursors(this._context);\n        this._viewParts.push(this._viewCursors);\n        // Overlay widgets\n        this._overlayWidgets = new ViewOverlayWidgets(this._context);\n        this._viewParts.push(this._overlayWidgets);\n        const rulers = new Rulers(this._context);\n        this._viewParts.push(rulers);\n        const blockOutline = new BlockDecorations(this._context);\n        this._viewParts.push(blockOutline);\n        const minimap = new Minimap(this._context);\n        this._viewParts.push(minimap);\n        // -------------- Wire dom nodes up\n        if (decorationsOverviewRuler) {\n            const overviewRulerData = this._scrollbar.getOverviewRulerLayoutInfo();\n            overviewRulerData.parent.insertBefore(decorationsOverviewRuler.getDomNode(), overviewRulerData.insertBefore);\n        }\n        this._linesContent.appendChild(contentViewOverlays.getDomNode());\n        this._linesContent.appendChild(rulers.domNode);\n        this._linesContent.appendChild(this._viewZones.domNode);\n        this._linesContent.appendChild(this._viewLines.getDomNode());\n        this._linesContent.appendChild(this._contentWidgets.domNode);\n        this._linesContent.appendChild(this._viewCursors.getDomNode());\n        this._overflowGuardContainer.appendChild(margin.getDomNode());\n        this._overflowGuardContainer.appendChild(this._scrollbar.getDomNode());\n        this._overflowGuardContainer.appendChild(scrollDecoration.getDomNode());\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textArea);\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textAreaCover);\n        this._overflowGuardContainer.appendChild(this._overlayWidgets.getDomNode());\n        this._overflowGuardContainer.appendChild(minimap.getDomNode());\n        this._overflowGuardContainer.appendChild(blockOutline.domNode);\n        this.domNode.appendChild(this._overflowGuardContainer);\n        if (overflowWidgetsDomNode) {\n            overflowWidgetsDomNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode.domNode);\n        }\n        else {\n            this.domNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode);\n        }\n        this._applyLayout();\n        // Pointer handler\n        this._pointerHandler = this._register(new PointerHandler(this._context, viewController, this._createPointerHandlerHelper()));\n    }\n    _flushAccumulatedAndRenderNow() {\n        if (this._shouldRecomputeGlyphMarginLanes) {\n            this._shouldRecomputeGlyphMarginLanes = false;\n            this._context.configuration.setGlyphMarginDecorationLaneCount(this._computeGlyphMarginLaneCount());\n        }\n        inputLatency.onRenderStart();\n        this._renderNow();\n    }\n    _computeGlyphMarginLaneCount() {\n        const model = this._context.viewModel.model;\n        let glyphs = [];\n        // Add all margin decorations\n        glyphs = glyphs.concat(model.getAllMarginDecorations().map((decoration) => {\n            var _a, _b;\n            const lane = (_b = (_a = decoration.options.glyphMargin) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : GlyphMarginLane.Left;\n            return { range: decoration.range, lane };\n        }));\n        // Add all glyph margin widgets\n        glyphs = glyphs.concat(this._glyphMarginWidgets.getWidgets().map((widget) => {\n            const range = model.validateRange(widget.preference.range);\n            return { range, lane: widget.preference.lane };\n        }));\n        // Sorted by their start position\n        glyphs.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n        let leftDecRange = null;\n        let rightDecRange = null;\n        for (const decoration of glyphs) {\n            if (decoration.lane === GlyphMarginLane.Left && (!leftDecRange || Range.compareRangesUsingEnds(leftDecRange, decoration.range) < 0)) {\n                // assign only if the range of `decoration` ends after, which means it has a higher chance to overlap with the other lane\n                leftDecRange = decoration.range;\n            }\n            if (decoration.lane === GlyphMarginLane.Right && (!rightDecRange || Range.compareRangesUsingEnds(rightDecRange, decoration.range) < 0)) {\n                // assign only if the range of `decoration` ends after, which means it has a higher chance to overlap with the other lane\n                rightDecRange = decoration.range;\n            }\n            if (leftDecRange && rightDecRange) {\n                if (leftDecRange.endLineNumber < rightDecRange.startLineNumber) {\n                    // there's no chance for `leftDecRange` to ever intersect something going further\n                    leftDecRange = null;\n                    continue;\n                }\n                if (rightDecRange.endLineNumber < leftDecRange.startLineNumber) {\n                    // there's no chance for `rightDecRange` to ever intersect something going further\n                    rightDecRange = null;\n                    continue;\n                }\n                // leftDecRange and rightDecRange are intersecting or touching => we need two lanes\n                return 2;\n            }\n        }\n        return 1;\n    }\n    _createPointerHandlerHelper() {\n        return {\n            viewDomNode: this.domNode.domNode,\n            linesContentDomNode: this._linesContent.domNode,\n            viewLinesDomNode: this._viewLines.getDomNode().domNode,\n            focusTextArea: () => {\n                this.focus();\n            },\n            dispatchTextAreaEvent: (event) => {\n                this._textAreaHandler.textArea.domNode.dispatchEvent(event);\n            },\n            getLastRenderData: () => {\n                const lastViewCursorsRenderData = this._viewCursors.getLastRenderData() || [];\n                const lastTextareaPosition = this._textAreaHandler.getLastRenderData();\n                return new PointerHandlerLastRenderData(lastViewCursorsRenderData, lastTextareaPosition);\n            },\n            renderNow: () => {\n                this.render(true, false);\n            },\n            shouldSuppressMouseDownOnViewZone: (viewZoneId) => {\n                return this._viewZones.shouldSuppressMouseDownOnViewZone(viewZoneId);\n            },\n            shouldSuppressMouseDownOnWidget: (widgetId) => {\n                return this._contentWidgets.shouldSuppressMouseDownOnWidget(widgetId);\n            },\n            getPositionFromDOMInfo: (spanNode, offset) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getPositionFromDOMInfo(spanNode, offset);\n            },\n            visibleRangeForPosition: (lineNumber, column) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(new Position(lineNumber, column));\n            },\n            getLineWidth: (lineNumber) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getLineWidth(lineNumber);\n            }\n        };\n    }\n    _createTextAreaHandlerHelper() {\n        return {\n            visibleRangeForPosition: (position) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(position);\n            }\n        };\n    }\n    _applyLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this.domNode.setWidth(layoutInfo.width);\n        this.domNode.setHeight(layoutInfo.height);\n        this._overflowGuardContainer.setWidth(layoutInfo.width);\n        this._overflowGuardContainer.setHeight(layoutInfo.height);\n        this._linesContent.setWidth(1000000);\n        this._linesContent.setHeight(1000000);\n    }\n    _getEditorClassName() {\n        const focused = this._textAreaHandler.isFocused() ? ' focused' : '';\n        return this._context.configuration.options.get(140 /* EditorOption.editorClassName */) + ' ' + getThemeTypeSelector(this._context.theme.type) + focused;\n    }\n    // --- begin event handlers\n    handleEvents(events) {\n        super.handleEvents(events);\n        this._scheduleRender();\n    }\n    onConfigurationChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        this._applyLayout();\n        return false;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return false;\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsGlyphMargin) {\n            this._shouldRecomputeGlyphMarginLanes = true;\n        }\n        return false;\n    }\n    onFocusChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    onThemeChanged(e) {\n        this._context.theme.update(e.theme);\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    // --- end event handlers\n    dispose() {\n        if (this._renderAnimationFrame !== null) {\n            this._renderAnimationFrame.dispose();\n            this._renderAnimationFrame = null;\n        }\n        this._contentWidgets.overflowingContentWidgetsDomNode.domNode.remove();\n        this._context.removeEventHandler(this);\n        this._viewLines.dispose();\n        // Destroy view parts\n        for (const viewPart of this._viewParts) {\n            viewPart.dispose();\n        }\n        super.dispose();\n    }\n    _scheduleRender() {\n        if (this._renderAnimationFrame === null) {\n            this._renderAnimationFrame = dom.runAtThisOrScheduleAtNextAnimationFrame(this._onRenderScheduled.bind(this), 100);\n        }\n    }\n    _onRenderScheduled() {\n        this._renderAnimationFrame = null;\n        this._flushAccumulatedAndRenderNow();\n    }\n    _renderNow() {\n        safeInvokeNoArg(() => this._actualRender());\n    }\n    _getViewPartsToRender() {\n        const result = [];\n        let resultLen = 0;\n        for (const viewPart of this._viewParts) {\n            if (viewPart.shouldRender()) {\n                result[resultLen++] = viewPart;\n            }\n        }\n        return result;\n    }\n    _actualRender() {\n        if (!dom.isInDOM(this.domNode.domNode)) {\n            return;\n        }\n        let viewPartsToRender = this._getViewPartsToRender();\n        if (!this._viewLines.shouldRender() && viewPartsToRender.length === 0) {\n            // Nothing to render\n            return;\n        }\n        const partialViewportData = this._context.viewLayout.getLinesViewportData();\n        this._context.viewModel.setViewport(partialViewportData.startLineNumber, partialViewportData.endLineNumber, partialViewportData.centeredLineNumber);\n        const viewportData = new ViewportData(this._selections, partialViewportData, this._context.viewLayout.getWhitespaceViewportData(), this._context.viewModel);\n        if (this._contentWidgets.shouldRender()) {\n            // Give the content widgets a chance to set their max width before a possible synchronous layout\n            this._contentWidgets.onBeforeRender(viewportData);\n        }\n        if (this._viewLines.shouldRender()) {\n            this._viewLines.renderText(viewportData);\n            this._viewLines.onDidRender();\n            // Rendering of viewLines might cause scroll events to occur, so collect view parts to render again\n            viewPartsToRender = this._getViewPartsToRender();\n        }\n        const renderingContext = new RenderingContext(this._context.viewLayout, viewportData, this._viewLines);\n        // Render the rest of the parts\n        for (const viewPart of viewPartsToRender) {\n            viewPart.prepareRender(renderingContext);\n        }\n        for (const viewPart of viewPartsToRender) {\n            viewPart.render(renderingContext);\n            viewPart.onDidRender();\n        }\n    }\n    // --- BEGIN CodeEditor helpers\n    delegateVerticalScrollbarPointerDown(browserEvent) {\n        this._scrollbar.delegateVerticalScrollbarPointerDown(browserEvent);\n    }\n    delegateScrollFromMouseWheelEvent(browserEvent) {\n        this._scrollbar.delegateScrollFromMouseWheelEvent(browserEvent);\n    }\n    restoreState(scrollPosition) {\n        this._context.viewModel.viewLayout.setScrollPosition({\n            scrollTop: scrollPosition.scrollTop,\n            scrollLeft: scrollPosition.scrollLeft\n        }, 1 /* ScrollType.Immediate */);\n        this._context.viewModel.visibleLinesStabilized();\n    }\n    getOffsetForColumn(modelLineNumber, modelColumn) {\n        const modelPosition = this._context.viewModel.model.validatePosition({\n            lineNumber: modelLineNumber,\n            column: modelColumn\n        });\n        const viewPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        this._flushAccumulatedAndRenderNow();\n        const visibleRange = this._viewLines.visibleRangeForPosition(new Position(viewPosition.lineNumber, viewPosition.column));\n        if (!visibleRange) {\n            return -1;\n        }\n        return visibleRange.left;\n    }\n    getTargetAtClientPoint(clientX, clientY) {\n        const mouseTarget = this._pointerHandler.getTargetAtClientPoint(clientX, clientY);\n        if (!mouseTarget) {\n            return null;\n        }\n        return ViewUserInputEvents.convertViewToModelMouseTarget(mouseTarget, this._context.viewModel.coordinatesConverter);\n    }\n    createOverviewRuler(cssClassName) {\n        return new OverviewRuler(this._context, cssClassName);\n    }\n    change(callback) {\n        this._viewZones.changeViewZones(callback);\n        this._scheduleRender();\n    }\n    render(now, everything) {\n        if (everything) {\n            // Force everything to render...\n            this._viewLines.forceShouldRender();\n            for (const viewPart of this._viewParts) {\n                viewPart.forceShouldRender();\n            }\n        }\n        if (now) {\n            this._flushAccumulatedAndRenderNow();\n        }\n        else {\n            this._scheduleRender();\n        }\n    }\n    writeScreenReaderContent(reason) {\n        this._textAreaHandler.writeScreenReaderContent(reason);\n    }\n    focus() {\n        this._textAreaHandler.focusTextArea();\n    }\n    isFocused() {\n        return this._textAreaHandler.isFocused();\n    }\n    setAriaOptions(options) {\n        this._textAreaHandler.setAriaOptions(options);\n    }\n    addContentWidget(widgetData) {\n        this._contentWidgets.addWidget(widgetData.widget);\n        this.layoutContentWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutContentWidget(widgetData) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        this._contentWidgets.setWidgetPosition(widgetData.widget, (_b = (_a = widgetData.position) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : null, (_d = (_c = widgetData.position) === null || _c === void 0 ? void 0 : _c.secondaryPosition) !== null && _d !== void 0 ? _d : null, (_f = (_e = widgetData.position) === null || _e === void 0 ? void 0 : _e.preference) !== null && _f !== void 0 ? _f : null, (_h = (_g = widgetData.position) === null || _g === void 0 ? void 0 : _g.positionAffinity) !== null && _h !== void 0 ? _h : null);\n        this._scheduleRender();\n    }\n    removeContentWidget(widgetData) {\n        this._contentWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n    addOverlayWidget(widgetData) {\n        this._overlayWidgets.addWidget(widgetData.widget);\n        this.layoutOverlayWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutOverlayWidget(widgetData) {\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\n        const shouldRender = this._overlayWidgets.setWidgetPosition(widgetData.widget, newPreference);\n        if (shouldRender) {\n            this._scheduleRender();\n        }\n    }\n    removeOverlayWidget(widgetData) {\n        this._overlayWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n    addGlyphMarginWidget(widgetData) {\n        this._glyphMarginWidgets.addWidget(widgetData.widget);\n        this._shouldRecomputeGlyphMarginLanes = true;\n        this._scheduleRender();\n    }\n    layoutGlyphMarginWidget(widgetData) {\n        const newPreference = widgetData.position;\n        const shouldRender = this._glyphMarginWidgets.setWidgetPosition(widgetData.widget, newPreference);\n        if (shouldRender) {\n            this._shouldRecomputeGlyphMarginLanes = true;\n            this._scheduleRender();\n        }\n    }\n    removeGlyphMarginWidget(widgetData) {\n        this._glyphMarginWidgets.removeWidget(widgetData.widget);\n        this._shouldRecomputeGlyphMarginLanes = true;\n        this._scheduleRender();\n    }\n};\nView = __decorate([\n    __param(6, IInstantiationService)\n], View);\nexport { View };\nfunction safeInvokeNoArg(func) {\n    try {\n        return func();\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { StringBuilder } from '../../common/core/stringBuilder.js';\nimport { ModelLineProjectionData } from '../../common/modelLineProjectionData.js';\nimport { LineInjectedText } from '../../common/textModelEvents.js';\nconst ttPolicy = createTrustedTypesPolicy('domLineBreaksComputer', { createHTML: value => value });\nexport class DOMLineBreaksComputerFactory {\n    static create() {\n        return new DOMLineBreaksComputerFactory();\n    }\n    constructor() {\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak) {\n        const requests = [];\n        const injectedTexts = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n            },\n            finalize: () => {\n                return createLineBreaks(requests, fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak, injectedTexts);\n            }\n        };\n    }\n}\nfunction createLineBreaks(requests, fontInfo, tabSize, firstLineBreakColumn, wrappingIndent, wordBreak, injectedTextsPerLine) {\n    var _a;\n    function createEmptyLineBreakWithPossiblyInjectedText(requestIdx) {\n        const injectedTexts = injectedTextsPerLine[requestIdx];\n        if (injectedTexts) {\n            const lineText = LineInjectedText.applyInjectedText(requests[requestIdx], injectedTexts);\n            const injectionOptions = injectedTexts.map(t => t.options);\n            const injectionOffsets = injectedTexts.map(text => text.column - 1);\n            // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n            // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n            return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n        }\n        else {\n            return null;\n        }\n    }\n    if (firstLineBreakColumn === -1) {\n        const result = [];\n        for (let i = 0, len = requests.length; i < len; i++) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n        }\n        return result;\n    }\n    const overallWidth = Math.round(firstLineBreakColumn * fontInfo.typicalHalfwidthCharacterWidth);\n    const additionalIndent = (wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0);\n    const additionalIndentSize = Math.round(tabSize * additionalIndent);\n    const additionalIndentLength = Math.ceil(fontInfo.spaceWidth * additionalIndentSize);\n    const containerDomNode = document.createElement('div');\n    applyFontInfo(containerDomNode, fontInfo);\n    const sb = new StringBuilder(10000);\n    const firstNonWhitespaceIndices = [];\n    const wrappedTextIndentLengths = [];\n    const renderLineContents = [];\n    const allCharOffsets = [];\n    const allVisibleColumns = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineContent = LineInjectedText.applyInjectedText(requests[i], injectedTextsPerLine[i]);\n        let firstNonWhitespaceIndex = 0;\n        let wrappedTextIndentLength = 0;\n        let width = overallWidth;\n        if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n            firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n            if (firstNonWhitespaceIndex === -1) {\n                // all whitespace line\n                firstNonWhitespaceIndex = 0;\n            }\n            else {\n                // Track existing indent\n                for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                    const charWidth = (lineContent.charCodeAt(i) === 9 /* CharCode.Tab */\n                        ? (tabSize - (wrappedTextIndentLength % tabSize))\n                        : 1);\n                    wrappedTextIndentLength += charWidth;\n                }\n                const indentWidth = Math.ceil(fontInfo.spaceWidth * wrappedTextIndentLength);\n                // Force sticking to beginning of line if no character would fit except for the indentation\n                if (indentWidth + fontInfo.typicalFullwidthCharacterWidth > overallWidth) {\n                    firstNonWhitespaceIndex = 0;\n                    wrappedTextIndentLength = 0;\n                }\n                else {\n                    width = overallWidth - indentWidth;\n                }\n            }\n        }\n        const renderLineContent = lineContent.substr(firstNonWhitespaceIndex);\n        const tmp = renderLine(renderLineContent, wrappedTextIndentLength, tabSize, width, sb, additionalIndentLength);\n        firstNonWhitespaceIndices[i] = firstNonWhitespaceIndex;\n        wrappedTextIndentLengths[i] = wrappedTextIndentLength;\n        renderLineContents[i] = renderLineContent;\n        allCharOffsets[i] = tmp[0];\n        allVisibleColumns[i] = tmp[1];\n    }\n    const html = sb.build();\n    const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(html)) !== null && _a !== void 0 ? _a : html;\n    containerDomNode.innerHTML = trustedhtml;\n    containerDomNode.style.position = 'absolute';\n    containerDomNode.style.top = '10000';\n    if (wordBreak === 'keepAll') {\n        // word-break: keep-all; overflow-wrap: anywhere\n        containerDomNode.style.wordBreak = 'keep-all';\n        containerDomNode.style.overflowWrap = 'anywhere';\n    }\n    else {\n        // overflow-wrap: break-word\n        containerDomNode.style.wordBreak = 'inherit';\n        containerDomNode.style.overflowWrap = 'break-word';\n    }\n    document.body.appendChild(containerDomNode);\n    const range = document.createRange();\n    const lineDomNodes = Array.prototype.slice.call(containerDomNode.children, 0);\n    const result = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineDomNode = lineDomNodes[i];\n        const breakOffsets = readLineBreaks(range, lineDomNode, renderLineContents[i], allCharOffsets[i]);\n        if (breakOffsets === null) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n            continue;\n        }\n        const firstNonWhitespaceIndex = firstNonWhitespaceIndices[i];\n        const wrappedTextIndentLength = wrappedTextIndentLengths[i] + additionalIndentSize;\n        const visibleColumns = allVisibleColumns[i];\n        const breakOffsetsVisibleColumn = [];\n        for (let j = 0, len = breakOffsets.length; j < len; j++) {\n            breakOffsetsVisibleColumn[j] = visibleColumns[breakOffsets[j]];\n        }\n        if (firstNonWhitespaceIndex !== 0) {\n            // All break offsets are relative to the renderLineContent, make them absolute again\n            for (let j = 0, len = breakOffsets.length; j < len; j++) {\n                breakOffsets[j] += firstNonWhitespaceIndex;\n            }\n        }\n        let injectionOptions;\n        let injectionOffsets;\n        const curInjectedTexts = injectedTextsPerLine[i];\n        if (curInjectedTexts) {\n            injectionOptions = curInjectedTexts.map(t => t.options);\n            injectionOffsets = curInjectedTexts.map(text => text.column - 1);\n        }\n        else {\n            injectionOptions = null;\n            injectionOffsets = null;\n        }\n        result[i] = new ModelLineProjectionData(injectionOffsets, injectionOptions, breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength);\n    }\n    document.body.removeChild(containerDomNode);\n    return result;\n}\nfunction renderLine(lineContent, initialVisibleColumn, tabSize, width, sb, wrappingIndentLength) {\n    if (wrappingIndentLength !== 0) {\n        const hangingOffset = String(wrappingIndentLength);\n        sb.appendString('<div style=\"text-indent: -');\n        sb.appendString(hangingOffset);\n        sb.appendString('px; padding-left: ');\n        sb.appendString(hangingOffset);\n        sb.appendString('px; box-sizing: border-box; width:');\n    }\n    else {\n        sb.appendString('<div style=\"width:');\n    }\n    sb.appendString(String(width));\n    sb.appendString('px;\">');\n    // if (containsRTL) {\n    // \tsb.appendASCIIString('\" dir=\"ltr');\n    // }\n    const len = lineContent.length;\n    let visibleColumn = initialVisibleColumn;\n    let charOffset = 0;\n    const charOffsets = [];\n    const visibleColumns = [];\n    let nextCharCode = (0 < len ? lineContent.charCodeAt(0) : 0 /* CharCode.Null */);\n    sb.appendString('<span>');\n    for (let charIndex = 0; charIndex < len; charIndex++) {\n        if (charIndex !== 0 && charIndex % 16384 /* Constants.SPAN_MODULO_LIMIT */ === 0) {\n            sb.appendString('</span><span>');\n        }\n        charOffsets[charIndex] = charOffset;\n        visibleColumns[charIndex] = visibleColumn;\n        const charCode = nextCharCode;\n        nextCharCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n        let producedCharacters = 1;\n        let charWidth = 1;\n        switch (charCode) {\n            case 9 /* CharCode.Tab */:\n                producedCharacters = (tabSize - (visibleColumn % tabSize));\n                charWidth = producedCharacters;\n                for (let space = 1; space <= producedCharacters; space++) {\n                    if (space < producedCharacters) {\n                        sb.appendCharCode(0xA0); // &nbsp;\n                    }\n                    else {\n                        sb.appendASCIICharCode(32 /* CharCode.Space */);\n                    }\n                }\n                break;\n            case 32 /* CharCode.Space */:\n                if (nextCharCode === 32 /* CharCode.Space */) {\n                    sb.appendCharCode(0xA0); // &nbsp;\n                }\n                else {\n                    sb.appendASCIICharCode(32 /* CharCode.Space */);\n                }\n                break;\n            case 60 /* CharCode.LessThan */:\n                sb.appendString('&lt;');\n                break;\n            case 62 /* CharCode.GreaterThan */:\n                sb.appendString('&gt;');\n                break;\n            case 38 /* CharCode.Ampersand */:\n                sb.appendString('&amp;');\n                break;\n            case 0 /* CharCode.Null */:\n                sb.appendString('&#00;');\n                break;\n            case 65279 /* CharCode.UTF8_BOM */:\n            case 8232 /* CharCode.LINE_SEPARATOR */:\n            case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n            case 133 /* CharCode.NEXT_LINE */:\n                sb.appendCharCode(0xFFFD);\n                break;\n            default:\n                if (strings.isFullWidthCharacter(charCode)) {\n                    charWidth++;\n                }\n                if (charCode < 32) {\n                    sb.appendCharCode(9216 + charCode);\n                }\n                else {\n                    sb.appendCharCode(charCode);\n                }\n        }\n        charOffset += producedCharacters;\n        visibleColumn += charWidth;\n    }\n    sb.appendString('</span>');\n    charOffsets[lineContent.length] = charOffset;\n    visibleColumns[lineContent.length] = visibleColumn;\n    sb.appendString('</div>');\n    return [charOffsets, visibleColumns];\n}\nfunction readLineBreaks(range, lineDomNode, lineContent, charOffsets) {\n    if (lineContent.length <= 1) {\n        return null;\n    }\n    const spans = Array.prototype.slice.call(lineDomNode.children, 0);\n    const breakOffsets = [];\n    try {\n        discoverBreaks(range, spans, charOffsets, 0, null, lineContent.length - 1, null, breakOffsets);\n    }\n    catch (err) {\n        console.log(err);\n        return null;\n    }\n    if (breakOffsets.length === 0) {\n        return null;\n    }\n    breakOffsets.push(lineContent.length);\n    return breakOffsets;\n}\nfunction discoverBreaks(range, spans, charOffsets, low, lowRects, high, highRects, result) {\n    if (low === high) {\n        return;\n    }\n    lowRects = lowRects || readClientRect(range, spans, charOffsets[low], charOffsets[low + 1]);\n    highRects = highRects || readClientRect(range, spans, charOffsets[high], charOffsets[high + 1]);\n    if (Math.abs(lowRects[0].top - highRects[0].top) <= 0.1) {\n        // same line\n        return;\n    }\n    // there is at least one line break between these two offsets\n    if (low + 1 === high) {\n        // the two characters are adjacent, so the line break must be exactly between them\n        result.push(high);\n        return;\n    }\n    const mid = low + ((high - low) / 2) | 0;\n    const midRects = readClientRect(range, spans, charOffsets[mid], charOffsets[mid + 1]);\n    discoverBreaks(range, spans, charOffsets, low, lowRects, mid, midRects, result);\n    discoverBreaks(range, spans, charOffsets, mid, midRects, high, highRects, result);\n}\nfunction readClientRect(range, spans, startOffset, endOffset) {\n    range.setStart(spans[(startOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */) | 0].firstChild, startOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n    range.setEnd(spans[(endOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */) | 0].firstChild, endOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n    return range.getClientRects();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ViewEventHandler } from '../../common/viewEventHandler.js';\nexport class DynamicViewOverlay extends ViewEventHandler {\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { editorDimmedLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._readConfig();\n        this._lastCursorModelPosition = new Position(1, 1);\n        this._renderResult = null;\n        this._activeLineNumber = 1;\n        this._context.addEventHandler(this);\n    }\n    _readConfig() {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        const lineNumbers = options.get(67 /* EditorOption.lineNumbers */);\n        this._renderLineNumbers = lineNumbers.renderType;\n        this._renderCustomLineNumbers = lineNumbers.renderFn;\n        this._renderFinalNewline = options.get(94 /* EditorOption.renderFinalNewline */);\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n        this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        this._readConfig();\n        return true;\n    }\n    onCursorStateChanged(e) {\n        const primaryViewPosition = e.selections[0].getPosition();\n        this._lastCursorModelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n        let shouldRender = false;\n        if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n            this._activeLineNumber = primaryViewPosition.lineNumber;\n            shouldRender = true;\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */ || this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            shouldRender = true;\n        }\n        return shouldRender;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getLineRenderLineNumber(viewLineNumber) {\n        const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n        if (modelPosition.column !== 1) {\n            return '';\n        }\n        const modelLineNumber = modelPosition.lineNumber;\n        if (this._renderCustomLineNumbers) {\n            return this._renderCustomLineNumbers(modelLineNumber);\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */) {\n            const diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n            if (diff === 0) {\n                return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n            }\n            return String(diff);\n        }\n        if (this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n                return String(modelLineNumber);\n            }\n            if (modelLineNumber % 10 === 0) {\n                return String(modelLineNumber);\n            }\n            return '';\n        }\n        return String(modelLineNumber);\n    }\n    prepareRender(ctx) {\n        if (this._renderLineNumbers === 0 /* RenderLineNumbersType.Off */) {\n            this._renderResult = null;\n            return;\n        }\n        const lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const lineCount = this._context.viewModel.getLineCount();\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n            if (!renderLineNumber) {\n                output[lineIndex] = '';\n                continue;\n            }\n            let extraClassName = '';\n            if (lineNumber === lineCount && this._context.viewModel.getLineLength(lineNumber) === 0) {\n                // this is the last line\n                if (this._renderFinalNewline === 'off') {\n                    output[lineIndex] = '';\n                    continue;\n                }\n                if (this._renderFinalNewline === 'dimmed') {\n                    extraClassName = ' dimmed-line-number';\n                }\n            }\n            if (lineNumber === this._activeLineNumber) {\n                extraClassName = ' active-line-number';\n            }\n            output[lineIndex] = (`<div class=\"${LineNumbersOverlay.CLASS_NAME}${lineHeightClassName}${extraClassName}\" style=\"left:${this._lineNumbersLeft}px;width:${this._lineNumbersWidth}px;\">${renderLineNumber}</div>`);\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nLineNumbersOverlay.CLASS_NAME = 'line-numbers';\nregisterThemingParticipant((theme, collector) => {\n    const editorLineNumbersColor = theme.getColor(editorLineNumbers);\n    const editorDimmedLineNumberColor = theme.getColor(editorDimmedLineNumber);\n    if (editorDimmedLineNumberColor) {\n        collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorDimmedLineNumberColor}; }`);\n    }\n    else if (editorLineNumbersColor) {\n        collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorLineNumbersColor.transparent(0.4)}; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { FloatHorizontalRange } from '../../view/renderingContext.js';\nexport class RangeUtil {\n    static _createRange() {\n        if (!this._handyReadyRange) {\n            this._handyReadyRange = document.createRange();\n        }\n        return this._handyReadyRange;\n    }\n    static _detachRange(range, endNode) {\n        // Move range out of the span node, IE doesn't like having many ranges in\n        // the same spot and will act badly for lines containing dashes ('-')\n        range.selectNodeContents(endNode);\n    }\n    static _readClientRects(startElement, startOffset, endElement, endOffset, endNode) {\n        const range = this._createRange();\n        try {\n            range.setStart(startElement, startOffset);\n            range.setEnd(endElement, endOffset);\n            return range.getClientRects();\n        }\n        catch (e) {\n            // This is life ...\n            return null;\n        }\n        finally {\n            this._detachRange(range, endNode);\n        }\n    }\n    static _mergeAdjacentRanges(ranges) {\n        if (ranges.length === 1) {\n            // There is nothing to merge\n            return ranges;\n        }\n        ranges.sort(FloatHorizontalRange.compare);\n        const result = [];\n        let resultLen = 0;\n        let prev = ranges[0];\n        for (let i = 1, len = ranges.length; i < len; i++) {\n            const range = ranges[i];\n            if (prev.left + prev.width + 0.9 /* account for browser's rounding errors*/ >= range.left) {\n                prev.width = Math.max(prev.width, range.left + range.width - prev.left);\n            }\n            else {\n                result[resultLen++] = prev;\n                prev = range;\n            }\n        }\n        result[resultLen++] = prev;\n        return result;\n    }\n    static _createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale) {\n        if (!clientRects || clientRects.length === 0) {\n            return null;\n        }\n        // We go through FloatHorizontalRange because it has been observed in bi-di text\n        // that the clientRects are not coming in sorted from the browser\n        const result = [];\n        for (let i = 0, len = clientRects.length; i < len; i++) {\n            const clientRect = clientRects[i];\n            result[i] = new FloatHorizontalRange(Math.max(0, (clientRect.left - clientRectDeltaLeft) / clientRectScale), clientRect.width / clientRectScale);\n        }\n        return this._mergeAdjacentRanges(result);\n    }\n    static readHorizontalRanges(domNode, startChildIndex, startOffset, endChildIndex, endOffset, context) {\n        // Panic check\n        const min = 0;\n        const max = domNode.children.length - 1;\n        if (min > max) {\n            return null;\n        }\n        startChildIndex = Math.min(max, Math.max(min, startChildIndex));\n        endChildIndex = Math.min(max, Math.max(min, endChildIndex));\n        if (startChildIndex === endChildIndex && startOffset === endOffset && startOffset === 0 && !domNode.children[startChildIndex].firstChild) {\n            // We must find the position at the beginning of a <span>\n            // To cover cases of empty <span>s, avoid using a range and use the <span>'s bounding box\n            const clientRects = domNode.children[startChildIndex].getClientRects();\n            context.markDidDomLayout();\n            return this._createHorizontalRangesFromClientRects(clientRects, context.clientRectDeltaLeft, context.clientRectScale);\n        }\n        // If crossing over to a span only to select offset 0, then use the previous span's maximum offset\n        // Chrome is buggy and doesn't handle 0 offsets well sometimes.\n        if (startChildIndex !== endChildIndex) {\n            if (endChildIndex > 0 && endOffset === 0) {\n                endChildIndex--;\n                endOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        let startElement = domNode.children[startChildIndex].firstChild;\n        let endElement = domNode.children[endChildIndex].firstChild;\n        if (!startElement || !endElement) {\n            // When having an empty <span> (without any text content), try to move to the previous <span>\n            if (!startElement && startOffset === 0 && startChildIndex > 0) {\n                startElement = domNode.children[startChildIndex - 1].firstChild;\n                startOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n            if (!endElement && endOffset === 0 && endChildIndex > 0) {\n                endElement = domNode.children[endChildIndex - 1].firstChild;\n                endOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        if (!startElement || !endElement) {\n            return null;\n        }\n        startOffset = Math.min(startElement.textContent.length, Math.max(0, startOffset));\n        endOffset = Math.min(endElement.textContent.length, Math.max(0, endOffset));\n        const clientRects = this._readClientRects(startElement, startOffset, endElement, endOffset, context.endNode);\n        context.markDidDomLayout();\n        return this._createHorizontalRangesFromClientRects(clientRects, context.clientRectDeltaLeft, context.clientRectScale);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RangeUtil } from './rangeUtil.js';\nimport { FloatHorizontalRange, VisibleRanges } from '../../view/renderingContext.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine, LineRange, DomPosition } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nconst canUseFastRenderedViewLine = (function () {\n    if (platform.isNative) {\n        // In VSCode we know very well when the zoom level changes\n        return true;\n    }\n    if (platform.isLinux || browser.isFirefox || browser.isSafari) {\n        // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n        // --\n        // Even though we read character widths correctly, having read them at a specific zoom level\n        // does not mean they are the same at the current zoom level.\n        // --\n        // This could be improved if we ever figure out how to get an event when browsers zoom,\n        // but until then we have to stick with reading client rects.\n        // --\n        // The same has been observed with Firefox on Windows7\n        // --\n        // The same has been oversved with Safari\n        return false;\n    }\n    return true;\n})();\nlet monospaceAssumptionsAreValid = true;\nexport class ViewLineOptions {\n    constructor(config, themeType) {\n        this.themeType = themeType;\n        const options = config.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const experimentalWhitespaceRendering = options.get(38 /* EditorOption.experimentalWhitespaceRendering */);\n        if (experimentalWhitespaceRendering === 'off') {\n            this.renderWhitespace = options.get(98 /* EditorOption.renderWhitespace */);\n        }\n        else {\n            // whitespace is rendered in a different layer\n            this.renderWhitespace = 'none';\n        }\n        this.renderControlCharacters = options.get(93 /* EditorOption.renderControlCharacters */);\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.useMonospaceOptimizations = (fontInfo.isMonospace\n            && !options.get(33 /* EditorOption.disableMonospaceOptimizations */));\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        this.stopRenderingLineAfter = options.get(116 /* EditorOption.stopRenderingLineAfter */);\n        this.fontLigatures = options.get(51 /* EditorOption.fontLigatures */);\n    }\n    equals(other) {\n        return (this.themeType === other.themeType\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.fontLigatures === other.fontLigatures);\n    }\n}\nexport class ViewLine {\n    constructor(options) {\n        this._options = options;\n        this._isMaybeInvalid = true;\n        this._renderedViewLine = null;\n    }\n    // --- begin IVisibleLineData\n    getDomNode() {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            return this._renderedViewLine.domNode.domNode;\n        }\n        return null;\n    }\n    setDomNode(domNode) {\n        if (this._renderedViewLine) {\n            this._renderedViewLine.domNode = createFastDomNode(domNode);\n        }\n        else {\n            throw new Error('I have no rendered view line to set the dom node to...');\n        }\n    }\n    onContentChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onTokensChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onDecorationsChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onOptionsChanged(newOptions) {\n        this._isMaybeInvalid = true;\n        this._options = newOptions;\n    }\n    onSelectionChanged() {\n        if (isHighContrast(this._options.themeType) || this._options.renderWhitespace === 'selection') {\n            this._isMaybeInvalid = true;\n            return true;\n        }\n        return false;\n    }\n    renderLine(lineNumber, deltaTop, viewportData, sb) {\n        if (this._isMaybeInvalid === false) {\n            // it appears that nothing relevant has changed\n            return false;\n        }\n        this._isMaybeInvalid = false;\n        const lineData = viewportData.getViewLineRenderingData(lineNumber);\n        const options = this._options;\n        const actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\n        // Only send selection information when needed for rendering whitespace\n        let selectionsOnLine = null;\n        if (isHighContrast(options.themeType) || this._options.renderWhitespace === 'selection') {\n            const selections = viewportData.selections;\n            for (const selection of selections) {\n                if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                    // Selection does not intersect line\n                    continue;\n                }\n                const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                if (startColumn < endColumn) {\n                    if (isHighContrast(options.themeType)) {\n                        actualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', 0 /* InlineDecorationType.Regular */));\n                    }\n                    if (this._options.renderWhitespace === 'selection') {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n        }\n        const renderLineInput = new RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, lineData.startVisibleColumn, options.spaceWidth, options.middotWidth, options.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, selectionsOnLine);\n        if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n            // no need to do anything, we have the same render input\n            return false;\n        }\n        sb.appendString('<div style=\"top:');\n        sb.appendString(String(deltaTop));\n        sb.appendString('px;height:');\n        sb.appendString(String(this._options.lineHeight));\n        sb.appendString('px;\" class=\"');\n        sb.appendString(ViewLine.CLASS_NAME);\n        sb.appendString('\">');\n        const output = renderViewLine(renderLineInput, sb);\n        sb.appendString('</div>');\n        let renderedViewLine = null;\n        if (monospaceAssumptionsAreValid && canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === 0 /* ForeignElementType.None */) {\n            renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\n        }\n        if (!renderedViewLine) {\n            renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\n        }\n        this._renderedViewLine = renderedViewLine;\n        return true;\n    }\n    layoutLine(lineNumber, deltaTop) {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            this._renderedViewLine.domNode.setTop(deltaTop);\n            this._renderedViewLine.domNode.setHeight(this._options.lineHeight);\n        }\n    }\n    // --- end IVisibleLineData\n    getWidth(context) {\n        if (!this._renderedViewLine) {\n            return 0;\n        }\n        return this._renderedViewLine.getWidth(context);\n    }\n    getWidthIsFast() {\n        if (!this._renderedViewLine) {\n            return true;\n        }\n        return this._renderedViewLine.getWidthIsFast();\n    }\n    needsMonospaceFontCheck() {\n        if (!this._renderedViewLine) {\n            return false;\n        }\n        return (this._renderedViewLine instanceof FastRenderedViewLine);\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this._renderedViewLine) {\n            return monospaceAssumptionsAreValid;\n        }\n        if (this._renderedViewLine instanceof FastRenderedViewLine) {\n            return this._renderedViewLine.monospaceAssumptionsAreValid();\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    onMonospaceAssumptionsInvalidated() {\n        if (this._renderedViewLine && this._renderedViewLine instanceof FastRenderedViewLine) {\n            this._renderedViewLine = this._renderedViewLine.toSlowRenderedLine();\n        }\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this._renderedViewLine) {\n            return null;\n        }\n        startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n        endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n        const stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter;\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\n            // This range is obviously not visible\n            return new VisibleRanges(true, [new FloatHorizontalRange(this.getWidth(context), 0)]);\n        }\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\n            startColumn = stopRenderingLineAfter + 1;\n        }\n        if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\n            endColumn = stopRenderingLineAfter + 1;\n        }\n        const horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(lineNumber, startColumn, endColumn, context);\n        if (horizontalRanges && horizontalRanges.length > 0) {\n            return new VisibleRanges(false, horizontalRanges);\n        }\n        return null;\n    }\n    getColumnOfNodeOffset(spanNode, offset) {\n        if (!this._renderedViewLine) {\n            return 1;\n        }\n        return this._renderedViewLine.getColumnOfNodeOffset(spanNode, offset);\n    }\n}\nViewLine.CLASS_NAME = 'view-line';\n/**\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\n */\nclass FastRenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping) {\n        this._cachedWidth = -1;\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        const keyColumnCount = Math.floor(renderLineInput.lineContent.length / 300 /* Constants.MaxMonospaceDistance */);\n        if (keyColumnCount > 0) {\n            this._keyColumnPixelOffsetCache = new Float32Array(keyColumnCount);\n            for (let i = 0; i < keyColumnCount; i++) {\n                this._keyColumnPixelOffsetCache[i] = -1;\n            }\n        }\n        else {\n            this._keyColumnPixelOffsetCache = null;\n        }\n        this._characterMapping = characterMapping;\n        this._charWidth = renderLineInput.spaceWidth;\n    }\n    getWidth(context) {\n        if (!this.domNode || this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(this._characterMapping.length);\n            return Math.round(this._charWidth * horizontalOffset);\n        }\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n            context === null || context === void 0 ? void 0 : context.markDidDomLayout();\n        }\n        return this._cachedWidth;\n    }\n    getWidthIsFast() {\n        return (this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) || this._cachedWidth !== -1;\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this.domNode) {\n            return monospaceAssumptionsAreValid;\n        }\n        if (this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) {\n            const expectedWidth = this.getWidth(null);\n            const actualWidth = this.domNode.domNode.firstChild.offsetWidth;\n            if (Math.abs(expectedWidth - actualWidth) >= 2) {\n                // more than 2px off\n                console.warn(`monospace assumptions have been violated, therefore disabling monospace optimizations!`);\n                monospaceAssumptionsAreValid = false;\n            }\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    toSlowRenderedLine() {\n        return createRenderedLine(this.domNode, this.input, this._characterMapping, false, 0 /* ForeignElementType.None */);\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        const startPosition = this._getColumnPixelOffset(lineNumber, startColumn, context);\n        const endPosition = this._getColumnPixelOffset(lineNumber, endColumn, context);\n        return [new FloatHorizontalRange(startPosition, endPosition - startPosition)];\n    }\n    _getColumnPixelOffset(lineNumber, column, context) {\n        if (column <= 300 /* Constants.MaxMonospaceDistance */) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            return this._charWidth * horizontalOffset;\n        }\n        const keyColumnOrdinal = Math.floor((column - 1) / 300 /* Constants.MaxMonospaceDistance */) - 1;\n        const keyColumn = (keyColumnOrdinal + 1) * 300 /* Constants.MaxMonospaceDistance */ + 1;\n        let keyColumnPixelOffset = -1;\n        if (this._keyColumnPixelOffsetCache) {\n            keyColumnPixelOffset = this._keyColumnPixelOffsetCache[keyColumnOrdinal];\n            if (keyColumnPixelOffset === -1) {\n                keyColumnPixelOffset = this._actualReadPixelOffset(lineNumber, keyColumn, context);\n                this._keyColumnPixelOffsetCache[keyColumnOrdinal] = keyColumnPixelOffset;\n            }\n        }\n        if (keyColumnPixelOffset === -1) {\n            // Could not read actual key column pixel offset\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            return this._charWidth * horizontalOffset;\n        }\n        const keyColumnHorizontalOffset = this._characterMapping.getHorizontalOffset(keyColumn);\n        const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n        return keyColumnPixelOffset + this._charWidth * (horizontalOffset - keyColumnHorizontalOffset);\n    }\n    _getReadingTarget(myDomNode) {\n        return myDomNode.domNode.firstChild;\n    }\n    _actualReadPixelOffset(lineNumber, column, context) {\n        if (!this.domNode) {\n            return -1;\n        }\n        const domPosition = this._characterMapping.getDomPosition(column);\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(this.domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        return r[0].left;\n    }\n    getColumnOfNodeOffset(spanNode, offset) {\n        return getColumnOfNodeOffset(this._characterMapping, spanNode, offset);\n    }\n}\n/**\n * Every time we render a line, we save what we have rendered in an instance of this class.\n */\nclass RenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n        this._containsForeignElements = containsForeignElements;\n        this._cachedWidth = -1;\n        this._pixelOffsetCache = null;\n        if (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\n            this._pixelOffsetCache = new Float32Array(Math.max(2, this._characterMapping.length + 1));\n            for (let column = 0, len = this._characterMapping.length; column <= len; column++) {\n                this._pixelOffsetCache[column] = -1;\n            }\n        }\n    }\n    // --- Reading from the DOM methods\n    _getReadingTarget(myDomNode) {\n        return myDomNode.domNode.firstChild;\n    }\n    /**\n     * Width of the line in pixels\n     */\n    getWidth(context) {\n        if (!this.domNode) {\n            return 0;\n        }\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n            context === null || context === void 0 ? void 0 : context.markDidDomLayout();\n        }\n        return this._cachedWidth;\n    }\n    getWidthIsFast() {\n        if (this._cachedWidth === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Visible ranges for a model range\n     */\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this.domNode) {\n            return null;\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const startOffset = this._readPixelOffset(this.domNode, lineNumber, startColumn, context);\n            if (startOffset === -1) {\n                return null;\n            }\n            const endOffset = this._readPixelOffset(this.domNode, lineNumber, endColumn, context);\n            if (endOffset === -1) {\n                return null;\n            }\n            return [new FloatHorizontalRange(startOffset, endOffset - startOffset)];\n        }\n        return this._readVisibleRangesForRange(this.domNode, lineNumber, startColumn, endColumn, context);\n    }\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        if (startColumn === endColumn) {\n            const pixelOffset = this._readPixelOffset(domNode, lineNumber, startColumn, context);\n            if (pixelOffset === -1) {\n                return null;\n            }\n            else {\n                return [new FloatHorizontalRange(pixelOffset, 0)];\n            }\n        }\n        else {\n            return this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\n        }\n    }\n    _readPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            if (this._containsForeignElements === 0 /* ForeignElementType.None */) {\n                // We can assume the line is really empty\n                return 0;\n            }\n            if (this._containsForeignElements === 2 /* ForeignElementType.After */) {\n                // We have foreign elements after the (empty) line\n                return 0;\n            }\n            if (this._containsForeignElements === 1 /* ForeignElementType.Before */) {\n                // We have foreign elements before the (empty) line\n                return this.getWidth(context);\n            }\n            // We have foreign elements before & after the (empty) line\n            const readingTarget = this._getReadingTarget(domNode);\n            if (readingTarget.firstChild) {\n                context.markDidDomLayout();\n                return readingTarget.firstChild.offsetWidth;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const cachedPixelOffset = this._pixelOffsetCache[column];\n            if (cachedPixelOffset !== -1) {\n                return cachedPixelOffset;\n            }\n            const result = this._actualReadPixelOffset(domNode, lineNumber, column, context);\n            this._pixelOffsetCache[column] = result;\n            return result;\n        }\n        return this._actualReadPixelOffset(domNode, lineNumber, column, context);\n    }\n    _actualReadPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context);\n            if (!r || r.length === 0) {\n                return -1;\n            }\n            return r[0].left;\n        }\n        if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0 /* ForeignElementType.None */) {\n            // This branch helps in the case of whitespace only lines which have a width set\n            return this.getWidth(context);\n        }\n        const domPosition = this._characterMapping.getDomPosition(column);\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        const result = r[0].left;\n        if (this.input.isBasicASCII) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            const expectedResult = Math.round(this.input.spaceWidth * horizontalOffset);\n            if (Math.abs(expectedResult - result) <= 1) {\n                return expectedResult;\n            }\n        }\n        return result;\n    }\n    _readRawVisibleRangesForRange(domNode, startColumn, endColumn, context) {\n        if (startColumn === 1 && endColumn === this._characterMapping.length) {\n            // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n            return [new FloatHorizontalRange(0, this.getWidth(context))];\n        }\n        const startDomPosition = this._characterMapping.getDomPosition(startColumn);\n        const endDomPosition = this._characterMapping.getDomPosition(endColumn);\n        return RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startDomPosition.partIndex, startDomPosition.charIndex, endDomPosition.partIndex, endDomPosition.charIndex, context);\n    }\n    /**\n     * Returns the column for the text found at a specific offset inside a rendered dom node\n     */\n    getColumnOfNodeOffset(spanNode, offset) {\n        return getColumnOfNodeOffset(this._characterMapping, spanNode, offset);\n    }\n}\nclass WebKitRenderedViewLine extends RenderedViewLine {\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        const output = super._readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context);\n        if (!output || output.length === 0 || startColumn === endColumn || (startColumn === 1 && endColumn === this._characterMapping.length)) {\n            return output;\n        }\n        // WebKit is buggy and returns an expanded range (to contain words in some cases)\n        // The last client rect is enlarged (I think)\n        if (!this.input.containsRTL) {\n            // This is an attempt to patch things up\n            // Find position of last column\n            const endPixelOffset = this._readPixelOffset(domNode, lineNumber, endColumn, context);\n            if (endPixelOffset !== -1) {\n                const lastRange = output[output.length - 1];\n                if (lastRange.left < endPixelOffset) {\n                    // Trim down the width of the last visible range to not go after the last column's position\n                    lastRange.width = endPixelOffset - lastRange.left;\n                }\n            }\n        }\n        return output;\n    }\n}\nconst createRenderedLine = (function () {\n    if (browser.isWebKit) {\n        return createWebKitRenderedLine;\n    }\n    return createNormalRenderedLine;\n})();\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\nexport function getColumnOfNodeOffset(characterMapping, spanNode, offset) {\n    const spanNodeTextContentLength = spanNode.textContent.length;\n    let spanIndex = -1;\n    while (spanNode) {\n        spanNode = spanNode.previousSibling;\n        spanIndex++;\n    }\n    return characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './margin.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class Margin extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(Margin.OUTER_CLASS_NAME);\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._glyphMarginBackgroundDomNode = createFastDomNode(document.createElement('div'));\n        this._glyphMarginBackgroundDomNode.setClassName(Margin.CLASS_NAME);\n        this._domNode.appendChild(this._glyphMarginBackgroundDomNode);\n    }\n    dispose() {\n        super.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollTopChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setLayerHinting(this._canUseLayerHinting);\n        this._domNode.setContain('strict');\n        const adjustedScrollTop = ctx.scrollTop - ctx.bigNumbersDelta;\n        this._domNode.setTop(-adjustedScrollTop);\n        const height = Math.min(ctx.scrollHeight, 1000000);\n        this._domNode.setHeight(height);\n        this._domNode.setWidth(this._contentLeft);\n        this._glyphMarginBackgroundDomNode.setLeft(this._glyphMarginLeft);\n        this._glyphMarginBackgroundDomNode.setWidth(this._glyphMarginWidth);\n        this._glyphMarginBackgroundDomNode.setHeight(height);\n    }\n}\nMargin.CLASS_NAME = 'glyph-margin';\nMargin.OUTER_CLASS_NAME = 'margin';\n"],"names":["ViewContentWidgets","_ViewPart","_inherits","_super","_createSuper","context","viewDomNode","_this","_classCallCheck","call","_viewDomNode","_widgets","domNode","createFastDomNode","document","createElement","PartFingerprints","write","setClassName","setPosition","setTop","overflowingContentWidgetsDomNode","_createClass","key","value","_get","_getPrototypeOf","prototype","this","e","_i","_keys","Object","keys","length","widgetId","onConfigurationChanged","_updateAnchorsViewPositions","_i2","_keys2","updateAnchorViewPosition","_widget","myWidget","Widget","_context","id","allowEditorOverflow","appendChild","setShouldRender","widget","primaryAnchor","secondaryAnchor","preference","affinity","getId","hasOwnProperty","parentNode","removeChild","removeAttribute","suppressMouseDown","viewportData","_i3","_keys3","onBeforeRender","ctx","_i4","_keys4","prepareRender","_i5","_keys5","render","ViewPart","actual","_primaryAnchor","PositionPair","_secondaryAnchor","_actual","getDomNode","options","configuration","layoutInfo","get","_fixedOverflowWidgets","_contentWidth","contentWidth","_contentLeft","contentLeft","_lineHeight","_affinity","_preference","_cachedDomNodeOffsetWidth","_cachedDomNodeOffsetHeight","_maxWidth","_getMaxWidth","_isVisible","_renderData","setDisplay","setVisibility","setAttribute","setMaxWidth","hasChanged","_setPosition","modelPosition","getValidPositionPair","position","viewModel","validModelPosition","model","validatePosition","coordinatesConverter","modelPositionIsVisible","viewPosition","convertModelPositionToViewPosition","undefined","elDocument","ownerDocument","elWindow","defaultView","innerWidth","documentElement","offsetWidth","body","anchor","width","height","aboveLineTop","top","heightAvailableAboveLine","underLineTop","aboveTop","fitsAbove","belowTop","fitsBelow","viewportHeight","left","scrollLeft","viewportWidth","windowSize","domNodePosition","_a","MIN_LIMIT","Math","max","MAX_LIMIT","min","absoluteLeft","scrollX","delta","_b","dom","getDomNodePagePosition","absoluteAboveTop","scrollY","absoluteBelowTop","getClientArea","_this$_layoutHorizont","_layoutHorizontalSegmentInPage","_this$_layoutHorizont2","_slicedToArray","absoluteAboveLeft","topLeft","Coordinate","primary","getCoordinates","secondary","lineNumber","lineHeight","horizontalPosition","visibleRangeForPosition","column","getVerticalOffsetForLineNumber","scrollTop","AnchorCoordinate","fontInfo","typicalFullwidthCharacterWidth","_this$_getAnchorsCoor","_getAnchorsCoordinates","preferredDimensions","beforeRender","safeInvoke","clientRect","getBoundingClientRect","round","placement","_reduceAnchorCoordinates","_layoutBoxInPage","_layoutBoxInViewport","pass","_step","_iterator","_createForOfIteratorHelper","s","n","done","pref","coordinate","_prepareRenderWidgetAtExactPositionOverflowing","err","f","startLineNumber","endLineNumber","_prepareRenderWidget","afterRender","setLeft","bigNumbersDelta","_coordinateBrand","_anchorCoordinateBrand","fn","thisArg","_len","arguments","args","Array","_key","apply","concat","AbstractLineHighlightOverlay","_DynamicViewOverlay","_renderLineHighlight","_renderLineHighlightOnlyWhenFocus","_selectionIsEmpty","_focused","_cursorLineNumbers","_selections","Selection","addEventHandler","_assertThisInitialized","removeEventHandler","cursorsLineNumbers","map","positionLineNumber","sort","a","b","arrays","selectionIsEmpty","every","isEmpty","_readFromSelections","selections","scrollWidthChanged","scrollTopChanged","isFocused","_shouldRenderThis","renderedLine","_renderOne","visibleStartLineNumber","visibleRange","visibleEndLineNumber","len","index","renderData","lineIndex","DynamicViewOverlay","CurrentLineHighlightOverlay","_AbstractLineHighligh","_super2","className","_shouldRenderOther","scrollWidth","_shouldRenderInContent","_shouldRenderInMargin","CurrentLineMarginHighlightOverlay","_AbstractLineHighligh2","_super3","registerThemingParticipant","theme","collector","lineHighlight","getColor","editorLineHighlight","addRule","isTransparent","defines","editorLineHighlightBorder","lineHighlightBorder","isHighContrast","type","DecorationsOverlay","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_renderResult","_decorations","getDecorationsInViewport","decorations","decorationsLen","i","d","zIndex","aClassName","bClassName","Range","compareRangesUsingStarts","range","output","_renderWholeLineDecorations","_renderNormalDecorations","String","lenI","isWholeLine","decorationOutput","j","prevClassName","prevShowIfCollapsed","prevRange","prevShouldFillLineOnLineBreak","showIfCollapsed","Boolean","endColumn","startColumn","getLineMaxColumn","areIntersectingOrTouching","plusRange","_renderNormalDecoration","shouldFillLineOnLineBreak","linesVisibleRanges","linesVisibleRangesForRange","lenJ","lineVisibleRanges","outsideRenderedLine","ranges","singleVisibleRange","center","HorizontalRange","k","lenK","expandToLeft","continuesOnNextLine","EditorScrollbar","linesContent","overflowGuardDomNode","scrollbar","mouseWheelScrollSensitivity","fastScrollSensitivity","scrollPredominantAxis","scrollbarOptions","listenOnDomNode","getThemeTypeSelector","useShadows","lazyRender","vertical","horizontal","verticalHasArrows","horizontalHasArrows","verticalScrollbarSize","verticalSliderSize","horizontalScrollbarSize","horizontalSliderSize","handleMouseWheel","alwaysConsumeMouseWheel","arrowSize","scrollByPage","_register","SmoothScrollableElement","viewLayout","getScrollable","scrollbarDomNode","_setLayout","onBrowserDesperateReveal","lookAtScrollTop","lookAtScrollLeft","newScrollPosition","deltaTop","getCurrentScrollTop","deltaLeft","getCurrentScrollLeft","setScrollPosition","addDisposableListener","side","setWidth","minimap","minimapWidth","setHeight","getOverviewRulerLayoutInfo","browserEvent","delegateVerticalScrollbarPointerDown","delegateScrollFromMouseWheelEvent","newOpts","updateOptions","updateClassName","renderNow","IndentGuidesOverlay","_primaryPosition","wrappingInfo","_spaceWidth","spaceWidth","_maxIndentLeft","wrappingColumn","_bracketPairGuideOptions","newPosition","getPosition","equals","_c","_d","indentation","bracketPairs","activeCursorPosition","indents","getGuidesByLine","getLineCount","indent","result","leftOffset","Position","guide","visibleColumn","horizontalLine","_this2","bracketGuides","getBracketGuidesInRangeByLine","highlightActive","highlightActiveBracketPair","horizontalGuides","bracketPairsHorizontal","HorizontalGuidesState","Enabled","EnabledForActive","Disabled","includeInactive","indentGuides","getLinesIndentGuides","activeIndentStartLineNumber","activeIndentEndLineNumber","activeIndentLevel","highlightActiveIndentation","activeIndentInfo","getActiveIndentGuide","indentSize","getOptions","lineGuides","push","bracketGuidesInLine","bracketGuidesInLineQueue","ArrayQueue","indentGuidesInLine","_loop","indentGuide","indentLvl","isActive","_toConsumableArray","takeWhile","g","peeked","peek","IndentGuide","transparentToUndefined","color","colors","bracketColor","editorBracketHighlightingForeground1","guideColor","editorBracketPairGuideBackground1","guideColorActive","editorBracketPairGuideActiveBackground1","editorBracketHighlightingForeground2","editorBracketPairGuideBackground2","editorBracketPairGuideActiveBackground2","editorBracketHighlightingForeground3","editorBracketPairGuideBackground3","editorBracketPairGuideActiveBackground3","editorBracketHighlightingForeground4","editorBracketPairGuideBackground4","editorBracketPairGuideActiveBackground4","editorBracketHighlightingForeground5","editorBracketPairGuideBackground5","editorBracketPairGuideActiveBackground5","editorBracketHighlightingForeground6","editorBracketPairGuideBackground6","editorBracketPairGuideActiveBackground6","colorProvider","BracketPairGuidesClassNames","indentColors","indentColor","editorIndentGuide1","indentColorActive","editorActiveIndentGuide1","editorIndentGuide2","editorActiveIndentGuide2","editorIndentGuide3","editorActiveIndentGuide3","editorIndentGuide4","editorActiveIndentGuide4","editorIndentGuide5","editorActiveIndentGuide5","editorIndentGuide6","editorActiveIndentGuide6","colorValues","c","effectiveGuideColor","transparent","effectiveGuideColorActive","filter","isDefined","indentColorValues","effectiveIndentColor","effectiveIndentColorActive","level","getInlineClassNameOfLevel","replace","activeClassName","DomReadingContext","_domNode","endNode","_didDomLayout","_clientRectDeltaLeft","_clientRectScale","_clientRectRead","rect","markDidDomLayout","readClientRect","LastRenderedData","_currentVisibleRange","currentVisibleRange","HorizontalRevealRangeRequest","minimalReveal","startScrollTop","stopScrollTop","scrollType","minLineNumber","maxLineNumber","HorizontalRevealSelectionsRequest","selection","ViewLines","_linesContent","_textRangeRestingSpot","_visibleLines","VisibleLinesCollection","conf","_isViewportWrapping","isViewportWrapping","_revealHorizontalRightPadding","_cursorSurroundingLines","_cursorSurroundingLinesStyle","_canUseLayerHinting","_viewLineOptions","ViewLineOptions","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","applyFontInfo","_maxLineWidth","_asyncUpdateLineWidths","RunOnceScheduler","_updateLineWidthsSlow","_asyncCheckMonospaceFontAssumptions","_checkMonospaceFontAssumptions","_lastRenderedData","_horizontalRevealRequest","_stickyScrollEnabled","enabled","_maxNumberStickyLines","maxLineCount","dispose","ViewLine","_onOptionsMaybeChanged","newViewLineOptions","getStartLineNumber","getEndLineNumber","getVisibleLine","onOptionsChanged","rendStartLineNumber","rendEndLineNumber","r","onSelectionChanged","onDecorationsChanged","shouldRender","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","desiredScrollTop","_computeScrollTopToRevealRange","getFutureViewport","source","verticalType","validateScrollPosition","revealHorizontal","abs","scrollLeftChanged","onScrollChanged","onTokensChanged","setMaxLineWidth","onZonesChanged","spanNode","offset","viewLineDomNode","_getViewLineDomNode","_getLineNumberFor","getColumnOfNodeOffset","minColumn","getLineMinColumn","node","nodeType","CLASS_NAME","parentElement","getWidth","_updateLineWidthsSlowIfDomDidLayout","_range","includeNewLines","originalEndLineNumber","intersectRanges","getCurrentVisibleRange","visibleRanges","visibleRangesLen","domReadingContext","nextLineModelLineNumber","convertViewPositionToModelPosition","continuesInNextLine","visibleRangesForLine","getVisibleRangesForRange","LineVisibleRanges","from","_visibleRangesForLineRange","HorizontalPosition","_updateLineWidths","didDomLayout","isScheduled","cancel","fast","localMaxLineWidth","allWidthsComputed","visibleLine","getWidthIsFast","_ensureMaxLineWidth","longestLineNumber","longestWidth","needsMonospaceFontCheck","lineWidth","monospaceAssumptionsAreValid","onMonospaceAssumptionsInvalidated","Error","renderLines","setCurrentVisibleRange","getScrollWidth","getScrollHeight","horizontalRevealRequest","onDidRender","newScrollLeft","_computeScrollLeftToReveal","maxHorizontalOffset","_updateLineWidthsFast","schedule","platform","setLayerHinting","setContain","adjustedScrollTop","iLineWidth","ceil","viewport","boxIsSingleRange","boxStartY","boxEndY","viewportStartY","viewportEndY","newScrollTop","paddingTop","paddingBottom","minScrollTop","boxMiddleY","_computeMinimumScrolling","getCurrentViewport","viewportStartX","viewportEndX","verticalScrollbarWidth","boxStartX","boxEndX","_step2","_iterator2","_step3","_iterator3","HORIZONTAL_EXTRA_PX","viewportStart","viewportEnd","boxStart","boxEnd","revealAtStart","revealAtEnd","viewportLength","DecorationToRender","_decorationToRenderBrand","LineDecorationToRender","VisibleLineDecorationsToRender","decoration","DedupOverlay","prevEndLineIndex","startLineIndex","endLineIndex","add","GlyphMarginWidgets","_glyphMargin","_glyphMarginLeft","glyphMarginLeft","_glyphMarginWidth","glyphMarginWidth","_glyphMarginDecorationLaneCount","glyphMarginDecorationLaneCount","_managedDomNodes","_decorationGlyphsToRender","values","renderInfo","lane","equalsRange","requests","glyphMarginClassName","glyphMargin","DecorationBasedGlyphRenderRequest","_Object$values","widgetLineNumber","WidgetBasedGlyphRenderRequest","_collectDecorationBasedGlyphRenderRequest","_collectWidgetBasedGlyphRenderRequest","_Object$values2","_collectSortedGlyphRenderRequests","decorationGlyphsToRender","first","requestsAtLocation","el","winner","classNames","request","accept","join","_Object$values4","relativeVerticalOffset","dec","combinedClassName","pop","remove","_Object$values3","DecorationBasedGlyph","LinesDecorationsOverlay","_DedupOverlay","_decorationsLeft","decorationsLeft","_decorationsWidth","decorationsWidth","rLen","linesDecorationsClassName","firstLineDecorationClassName","toRender","_render","_getDecorations","common","toString","getDecorations","lineOutput","MarginViewLineDecorationsOverlay","marginClassName","allCharCodes","v","MinimapCharRenderer","charData","scale","_minimapCharRendererBrand","charDataNormal","soften","charDataLight","target","dx","dy","chCode","foregroundAlpha","backgroundColor","backgroundAlpha","fontScale","useLighterFont","force1pxHeight","charWidth","charHeight","renderHeight","console","warn","charIndex","getCharIndex","destWidth","backgroundR","backgroundG","backgroundB","deltaR","deltaG","deltaB","destAlpha","dest","data","sourceOffset","row","y","x","colorR","colorG","colorB","input","ratio","Uint8ClampedArray","toUint8","charTable","A","B","C","D","E","F","decodeData","str","prebakedMiniMaps","createSingleCallFunction","MinimapCharRendererFactory","fontFamily","lastCreated","lastFontFamily","factory","createFromSampleData","createSampleData","canvas","getContext","style","fillStyle","font","textBaseline","code","fillText","fromCharCode","getImageData","_downsample","destOffset","targetIndex","brightest","sourceY1","sourceY2","sourceX1","sourceX2","samples","sy","sourceRow","floor","yBalance","sx","xBalance","sourceIndex","weight","final","pixelsPerCharacter","resultLen","resultOffset","_downsampleChar","adjust","MinimapOptions","tokensColorTracker","pixelRatio","minimapLayout","minimapOpts","renderMinimap","size","minimapHeightIsEditorHeight","scrollBeyondLastLine","bottom","showSlider","autohide","minimapLeft","minimapHeight","canvasInnerWidth","minimapCanvasInnerWidth","canvasInnerHeight","minimapCanvasInnerHeight","canvasOuterWidth","minimapCanvasOuterWidth","canvasOuterHeight","minimapCanvasOuterHeight","isSampling","minimapIsSampling","editorHeight","minimapScale","minimapLineHeight","minimapCharWidth","charRenderer","create","defaultBackgroundColor","_getMinimapBackground","_getMinimapForegroundOpacity","other","themeColor","minimapBackground","RGBA8","rgba","minimapForegroundOpacity","_clamp","MinimapLayout","scrollHeight","sliderNeeded","_computedSliderRatio","sliderTop","sliderHeight","topPaddingLineCount","pageY","viewportStartLineNumber","viewportEndLineNumber","viewportStartLineNumberVerticalOffset","viewportContainsWhitespaceGaps","lineCount","realLineCount","previousLayout","minimapLinesFitting","logicalScrollHeight","maxMinimapSliderTop","computedSliderRatio","maxLinesFitting","viewportLineCount","expectedViewportLineCount","extraLinesAtTheTop","extraLinesAtTheBottom","consideringStartLineNumber","partialLine","MinimapLine","INVALID","RenderData","renderedLayout","imageData","lines","_imageData","_renderedLines","RenderedLinesCollection","_set","layout","scrollEquals","tmp","rendLineNumberStart","changeFromLineNumber","changeCount","deleteFromLineNumber","deleteToLineNumber","insertFromLineNumber","insertToLineNumber","MinimapBuffers","WIDTH","HEIGHT","background","_backgroundFillData","_createBackgroundFillData","_buffers","createImageData","_lastUsedBuffer","set","backgroundA","MinimapSamplingState","samplingRatio","minimapLines","fromLineNumber","toLineNumber","fromLineIndex","modelLineToMinimapLine","toLineIndex","sampledLineNumber","minimapLineStart","minimapLineEnd","deletedLineCount","changeStartIndex","changeEndIndex","insertedLineCount","viewLineCount","oldSamplingState","minimapLineCount","EditorLayoutInfoComputer","computeContainedMinimapLineCount","halfRatio","lastIndex","oldMinimapLines","oldLength","oldIndex","oldDeltaLineCount","minViewLineNumber","events","lastEvent","fromViewLineNumber","toViewLineNumber","oldMinimapLineNumber","_oldIndex","selectedViewLineNumber","Minimap","MinimapTokensColorTracker","getInstance","_minimapSelections","_MinimapSamplingState","compute","samplingState","_samplingState","_shouldCheckSampling","InnerMinimap","_get2","opts","_recreateLineSampling","onDidChangeOptions","affectsMinimap","minimapLineRange","modelLineRangeToMinimapLineRange","count","_this$_samplingState$","_this$_samplingState$2","onThemeChanged","onTokensColorsChanged","minimapCtx","whitespaceViewportData","wasSampling","_MinimapSamplingState3","_MinimapSamplingState4","event","getLineContent","needed","getViewLineData","getMinimapLinesRenderingData","_this$_samplingState$3","decorationLineRangeToMinimapLineRange","_this$_samplingState$4","modelStartLineNumber","modelEndLineNumber","getMinimapDecorationsInRange","_step4","_iterator4","minimapStartLineNumber","minimapEndLineNumber","ViewModelDecoration","revealRange","_Disposable","_this3","_renderDecorations","_gestureInProgress","_theme","_model","_lastRenderData","_selectionColor","minimapSelection","_getMinimapDomNodeClassName","_shadow","_canvas","_decorationsCanvas","_slider","_sliderHorizontal","_applyLayout","_pointerDownListener","addStandardDisposableListener","EventType","POINTER_DOWN","preventDefault","internalOffsetY","offsetY","revealLineNumber","button","initialPosY","_startSliderDragging","_sliderPointerMoveMonitor","GlobalPointerMoveMonitor","_sliderPointerDownListener","stopPropagation","_gestureDisposable","Gesture","addTarget","_sliderTouchStartListener","Start","toggleClassName","scrollDueToTouchEvent","passive","_sliderTouchMoveListener","Change","_sliderTouchEndListener","End","initialSliderState","_this4","Element","initialPosX","pageX","handlePointerMove","posy","posx","minimapPosition","pointerOrthogonalDelta","setScrollTop","pointerDelta","getDesiredScrollTopFromDelta","startMonitoring","pointerId","buttons","pointerMoveData","touch","startY","getDesiredScrollTopFromTouchLocation","class_","getBuffer","renderingCtx","getRealLineCount","renderDecorations","getSelections","getMinimapDecorationsInViewport","_this$_model$options","tabSize","canvasContext","clearRect","highlightedLines","ContiguousLineMap","_renderSelectionLineHighlights","_renderDecorationsLineHighlights","lineOffsetMap","_renderSelectionsHighlights","_renderDecorationsHighlights","_step5","y1","y2","_iterator5","intersection","intersectWithViewport","_intersection","line","yy1","getYForLineNumber","yy2","fillRect","MINIMAP_GUTTER_WIDTH","highlightColors","Map","minimapOptions","MinimapPosition","Inline","_intersection2","decorationColor","highlightColor","has","characterWidth","_step6","_iterator6","_intersection3","renderDecorationOnLine","_step7","_iterator7","_intersection4","Gutter","renderDecoration","decorationRange","x1","getXOffsetForPosition","x2","lineIndexToXOffset","lineData","prevx","charCode","charCodeAt","strings","linesEquals","_lastData","_getBuffer","_InnerMinimap$_render","_renderUntouchedLines","_InnerMinimap$_render2","_dirtyY1","_dirtyY2","lineInfo","defaultBackground","backgroundIsLight","renderMinimapLineHeight","innerLinePadding","renderBackground","renderedLines","_renderLine","dirtyY1","dirtyHeight","putImageData","lastRenderData","lastTargetData","lastStartLineNumber","lastLines","lastLinesLength","targetData","maxDestPixel","dirtyPixel1","dirtyPixel2","copySourceStart","copySourceEnd","copyDestStart","copyDestEnd","dest_dy","lastLineIndex","source_dy","sourceStart","sourceEnd","destStart","destEnd","subarray","colorTracker","minimapCharRenderer","content","tokens","maxDx","tabsCharDelta","tokenIndex","tokensLen","getCount","tokenEndIndex","getEndOffset","tokenColorId","getForeground","tokenColor","insertSpacesCount","blockRenderChar","renderChar","Disposable","defaultValue","_startLineNumber","_endLineNumber","_defaultValue","_values","ViewOverlayWidgets","_verticalScrollbarWidth","_minimapWidth","_horizontalScrollbarHeight","horizontalScrollbarHeight","_editorHeight","_editorWidth","_updateMaxMinWidth","widgetData","maxMinWidth","widgetMinWidthInPx","getMinContentWidthInPx","setOverlayWidgetsMinWidth","setRight","widgetHeight","clientHeight","right","_renderWidget","Settings","config","overviewRulerLanes","renderBorder","borderColor","editorOverviewRulerBorder","hideCursor","cursorColor","editorCursorForeground","themeType","minimapEnabled","minimapSide","editorOverviewRulerBackground","TokenizationRegistry","getDefaultBackground","overviewRuler","domWidth","domHeight","canvasWidth","canvasHeight","_this$_initLanes","_initLanes","_this$_initLanes2","w","canvasLeftOffset","laneCount","remainingWidth","leftWidth","rightWidth","centerWidth","centerOffset","Color","DecorationsOverviewRuler","_actualShouldRender","_renderedDecorations","_renderedCursorPositions","_updateSettings","_tokensColorTrackerListener","onDidChange","changedColorMap","_cursorPositions","newSettings","_settings","_markRenderingIsNeeded","compare","_markRenderingIsMaybeNeeded","affectsOverviewRuler","scrollHeightChanged","editorCtx","setBackgroundColor","Format","CSS","formatHexA","getAllOverviewRulerDecorations","OverviewRulerDecorationsGroup","compareByRenderingProps","equalsArr","heightRatio","minDecorationHeight","halfMinDecorationHeight","canvasCtx","isOpaque","decorationGroup","decorationGroupData","prevLane","prevY1","prevY2","yCenter","cursorHeight","halfCursorHeight","cursorX","cursorW","cursor","beginPath","strokeStyle","moveTo","lineTo","stroke","OverviewRuler","_ViewEventHandler","cssClassName","_zoneManager","OverviewZoneManager","setDOMWidth","setDOMHeight","setOuterHeight","setLineHeight","setPixelRatio","getDOMWidth","getDOMHeight","getCanvasWidth","getCanvasHeight","zones","setZones","getOuterHeight","colorZones","resolveColorZones","id2Color","getId2Color","_renderOneLane","currentColorId","currentFrom","currentTo","zone","zoneColorId","colorId","zoneFrom","zoneTo","to","ViewEventHandler","Rulers","_renderedRulers","_rulers","currentCount","desiredCount","rulerWidth","addCount","removeCount","_ensureRulersCount","ruler","setBoxShadow","ScrollDecorationViewPart","_scrollTop","_width","_updateWidth","_shouldShow","_useShadows","newShouldShow","_updateShouldShow","HorizontalRangeWithStyle","startStyle","endStyle","LineVisibleRangesWithStyle","toStyledRange","item","toStyled","SelectionsOverlay","_previousFrameVisibleRangesWithStyle","_roundedSelection","slice","previousFrame","epsilon","previousFrameTop","previousFrameBottom","topLineNumber","bottomLineNumber","curLineRange","curLeft","curRight","prevLeft","prevRight","nextLeft","nextRight","_visibleRangesHaveGaps","_enrichVisibleRangesWithStyle","output2","hasMultipleSelections","visibleRangesHaveStyle","fullLineHeight","reducedLineHeight","firstLineNumber","lastLineNumber","innerCornerOutput","restOfSelectionOutput","_createSelectionPiece","SELECTION_CLASS_NAME","ROUNDED_PIECE_WIDTH","EDITOR_BACKGROUND_CLASS_NAME","SELECTION_TOP_RIGHT","SELECTION_BOTTOM_RIGHT","SELECTION_TOP_LEFT","SELECTION_BOTTOM_LEFT","thisFrameVisibleRangesWithStyle","visibleRangesWithStyle","_getVisibleRangesWithStyle","_actualRenderOneSelection","_ref","_ref2","editorSelectionForegroundColor","editorSelectionForeground","ViewCursorRenderData","paddingLeft","textContent","textContentClassName","ViewCursor","_cursorStyle","_lineCursorWidth","_position","_lastRenderedContent","pauseAnimation","transitionProperty","_this$_position","lineContent","_strings$getCharConta","_strings$getCharConta2","startOffset","endOffset","substring","_this$_getGraphemeAwa","_getGraphemeAwarePosition","_this$_getGraphemeAwa2","nextGrapheme","TextEditorCursorStyle","Line","LineThin","computeScreenAwareSize","_getTokenClassName","visibleRangeForCharacter","firstVisibleRangeForCharacter","Block","Underline","UnderlineThin","findTokenIndexAtOffset","getClassName","_prepareRender","setPaddingLeft","ViewCursors","_readOnly","_cursorBlinking","_cursorSmoothCaretAnimation","_isComposingInput","_primaryCursor","_secondaryCursors","_updateDomClassName","_startCursorBlinkAnimation","TimeoutTimer","_cursorFlatBlinkInterval","IntervalTimer","_blinkingEnabled","_editorHasFocus","_updateBlinking","secondaryPositions","reason","onCursorPositionChanged","addCnt","newCursor","insertBefore","nextSibling","removeCnt","splice","positions","_onCursorPositionChanged","blinkingStyle","_getCursorBlinking","isHidden","isSolid","_hide","_show","cancelAndSet","BLINK_INTERVAL","setIfNotSet","_getClassName","BlockOutline","show","hide","renderDataLen","primaryRenderData","secondaryRenderData","caret","caretBackground","editorCursorBackground","opposite","invalidFunc","ViewZones","marginDomNode","_zones","whitespaces","getWhitespaces","oldWhitespaces","whitespace","hadAChange","changeWhitespace","whitespaceAccessor","props","_computeWhitespaceProps","delegate","isInHiddenArea","oldWhitespace","afterLineNumber","afterViewLineNumber","heightInPx","changeOneWhitespace","_safeCallOnComputedHeight","_recomputeWhitespacesProps","ordinal","afterColumn","_heightInPixels","minWidthInPx","_minWidthInPixels","zoneAfterModelPosition","zoneBeforeModelPosition","validAfterLineNumber","afterColumnAffinity","isVisible","showInHiddenAreas","callback","zonesHaveChanged","changeAccessor","addZone","_addZone","removeZone","_removeZone","layoutZone","_layoutZone","func","arg1","onUnexpectedError","safeInvoke1Arg","myZone","whitespaceId","insertWhitespace","_getZoneOrdinal","removeWhitespace","heightInLines","onComputedHeight","onDomNodeTop","visibleWhitespaces","visibleZones","hasVisibleZone","visibleWhitespace","newTop","newHeight","newDisplay","verticalOffset","_safeCallOnDomNodeTop","getScrolledTopFromAbsoluteTop","BlockDecorations","blocks","update","didChange","newContentWidth","newContentLeft","blockClassName","block","blockIsAfterEnd","getVerticalOffsetAfterLineNumber","blockDoesNotCollapse","blockPadding","paddingRight","WhitespaceOverlay","_options","WhitespaceOptions","_selection","newOptions","renderWhitespace","selectionsOnLine","maxColumn","LineRange","_applyRenderWhitespace","continuesWithWrappedLine","lastNonWhitespaceIndex","editorWhitespaces","USE_SVG","renderWithSVG","stopRenderingLineAfter","fauxIndentLength","onlyBoundary","onlyTrailing","middotWidth","wsmiddotWidth","renderSpaceCharCode","canUseHalfwidthRightwardsArrow","lineIsEmptyOrWhitespace","firstNonWhitespaceIndex","currentSelectionIndex","currentSelection","maxLeft","prevChCode","nextChCode","prevCharCode","_renderArrow","toFixed","p1","p2","p3","p4","p5","parts","p","experimentalWhitespaceRendering","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","View","commandDelegate","colorTheme","userInputEvents","overflowWidgetsDomNode","_instantiationService","_shouldRecomputeGlyphMarginLanes","_renderAnimationFrame","viewController","ViewController","ViewContext","_viewParts","_textAreaHandler","createInstance","TextAreaHandler","_createTextAreaHandlerHelper","_getEditorClassName","_overflowGuardContainer","_scrollbar","_viewLines","_viewZones","decorationsOverviewRuler","scrollDecoration","contentViewOverlays","ContentViewOverlays","addDynamicOverlay","marginViewOverlays","MarginViewOverlays","LineNumbersOverlay","_glyphMarginWidgets","margin","Margin","_contentWidgets","_viewCursors","_overlayWidgets","rulers","blockOutline","overviewRulerData","parent","textArea","textAreaCover","_pointerHandler","PointerHandler","_createPointerHandlerHelper","setGlyphMarginDecorationLaneCount","_computeGlyphMarginLaneCount","inputLatency","onRenderStart","_renderNow","glyphs","getAllMarginDecorations","GlyphMarginLane","Left","getWidgets","validateRange","leftDecRange","rightDecRange","compareRangesUsingEnds","Right","linesContentDomNode","viewLinesDomNode","focusTextArea","focus","dispatchTextAreaEvent","dispatchEvent","getLastRenderData","lastViewCursorsRenderData","lastTextareaPosition","PointerHandlerLastRenderData","shouldSuppressMouseDownOnViewZone","viewZoneId","shouldSuppressMouseDownOnWidget","getPositionFromDOMInfo","_flushAccumulatedAndRenderNow","getLineWidth","focused","_scheduleRender","affectsGlyphMargin","runAtThisOrScheduleAtNextAnimationFrame","_onRenderScheduled","bind","safeInvokeNoArg","_actualRender","viewPart","isInDOM","viewPartsToRender","_getViewPartsToRender","partialViewportData","getLinesViewportData","setViewport","centeredLineNumber","ViewportData","getWhitespaceViewportData","renderText","renderingContext","RenderingContext","scrollPosition","visibleLinesStabilized","modelLineNumber","modelColumn","clientX","clientY","mouseTarget","getTargetAtClientPoint","ViewUserInputEvents","convertViewToModelMouseTarget","changeViewZones","now","everything","forceShouldRender","writeScreenReaderContent","setAriaOptions","addWidget","layoutContentWidget","_e","_f","_g","_h","setWidgetPosition","secondaryPosition","positionAffinity","removeWidget","layoutOverlayWidget","newPreference","IInstantiationService","ttPolicy","createTrustedTypesPolicy","createHTML","DOMLineBreaksComputerFactory","wrappingIndent","wordBreak","injectedTexts","addRequest","lineText","injectedText","previousLineBreakData","finalize","firstLineBreakColumn","injectedTextsPerLine","createEmptyLineBreakWithPossiblyInjectedText","requestIdx","LineInjectedText","applyInjectedText","injectionOptions","t","injectionOffsets","text","ModelLineProjectionData","overallWidth","additionalIndent","additionalIndentSize","additionalIndentLength","containerDomNode","sb","StringBuilder","firstNonWhitespaceIndices","wrappedTextIndentLengths","renderLineContents","allCharOffsets","allVisibleColumns","wrappedTextIndentLength","indentWidth","renderLineContent","substr","renderLine","html","build","trustedhtml","innerHTML","overflowWrap","createRange","lineDomNodes","children","breakOffsets","readLineBreaks","visibleColumns","breakOffsetsVisibleColumn","curInjectedTexts","createLineBreaks","initialVisibleColumn","wrappingIndentLength","hangingOffset","appendString","charOffset","charOffsets","nextCharCode","producedCharacters","space","appendCharCode","appendASCIICharCode","lineDomNode","spans","discoverBreaks","log","low","lowRects","high","highRects","mid","midRects","setStart","firstChild","setEnd","getClientRects","_readConfig","_lastCursorModelPosition","_activeLineNumber","lineNumbers","_renderLineNumbers","renderType","_renderCustomLineNumbers","renderFn","_renderFinalNewline","_lineNumbersLeft","lineNumbersLeft","_lineNumbersWidth","lineNumbersWidth","primaryViewPosition","viewLineNumber","diff","lineHeightClassName","renderLineNumber","_getLineRenderLineNumber","extraClassName","getLineLength","editorLineNumbersColor","editorLineNumbers","editorDimmedLineNumberColor","editorDimmedLineNumber","RangeUtil","_handyReadyRange","selectNodeContents","startElement","endElement","_createRange","_detachRange","FloatHorizontalRange","prev","clientRects","clientRectDeltaLeft","clientRectScale","_mergeAdjacentRanges","startChildIndex","endChildIndex","_createHorizontalRangesFromClientRects","_readClientRects","canUseFastRenderedViewLine","browser","renderControlCharacters","useMonospaceOptimizations","isMonospace","fontLigatures","_isMaybeInvalid","_renderedViewLine","getViewLineRenderingData","actualInlineDecorations","LineDecoration","inlineDecorations","renderLineInput","RenderLineInput","isBasicASCII","containsRTL","startVisibleColumn","EditorFontLigatures","OFF","renderViewLine","renderedViewLine","containsForeignElements","FastRenderedViewLine","characterMapping","createRenderedLine","toSlowRenderedLine","VisibleRanges","horizontalRanges","_cachedWidth","keyColumnCount","_keyColumnPixelOffsetCache","Float32Array","_characterMapping","_charWidth","horizontalOffset","getHorizontalOffset","_getReadingTarget","expectedWidth","actualWidth","startPosition","_getColumnPixelOffset","endPosition","keyColumnOrdinal","keyColumn","keyColumnPixelOffset","_actualReadPixelOffset","keyColumnHorizontalOffset","myDomNode","domPosition","getDomPosition","readHorizontalRanges","partIndex","RenderedViewLine","_isWhitespaceOnly","test","_containsForeignElements","_pixelOffsetCache","_readPixelOffset","_readVisibleRangesForRange","pixelOffset","_readRawVisibleRangesForRange","readingTarget","cachedPixelOffset","expectedResult","startDomPosition","endDomPosition","WebKitRenderedViewLine","_RenderedViewLine","endPixelOffset","lastRange","createWebKitRenderedLine","createNormalRenderedLine","spanNodeTextContentLength","spanIndex","previousSibling","getColumn","DomPosition","OUTER_CLASS_NAME","_glyphMarginBackgroundDomNode"],"sourceRoot":""}