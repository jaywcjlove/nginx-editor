{"version":3,"file":"static/js/monaco-editor-vendor.7c9f466c.f30dab48.js","mappings":"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","sources":["../../node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/findSectionHeaders.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/editorWorker.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/getIconClasses.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/languageFeatureDebounce.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/languageFeatures.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/languageFeaturesService.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/languagesAssociations.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/languagesRegistry.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/languageService.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/markerDecorations.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/markerDecorationsService.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/model.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/resolverService.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/semanticTokensDto.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokens/sparseMultilineTokens.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/semanticTokensProviderStyling.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/semanticTokensStyling.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/semanticTokensStylingService.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/textResourceConfiguration.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/treeViewsDnd.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/treeViewsDndService.js","../../node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js","../../node_modules/monaco-editor/esm/vs/editor/common/standalone/standaloneEnums.js","../../node_modules/monaco-editor/esm/vs/editor/common/standaloneStrings.js","../../node_modules/monaco-editor/esm/vs/editor/common/textModelBracketPairs.js","../../node_modules/monaco-editor/esm/vs/editor/common/textModelEvents.js","../../node_modules/monaco-editor/esm/vs/editor/common/textModelGuides.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousMultilineTokens.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousMultilineTokensBuilder.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousTokensEditing.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousTokensStore.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokens/lineTokens.js","../../node_modules/monaco-editor/esm/vs/editor/common/tokens/sparseTokensStore.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewEventHandler.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewEvents.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/lineDecorations.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linePart.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLineRenderer.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLinesViewportData.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/minimapTokensColorTracker.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/monospaceLineBreaksComputer.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/overviewZoneManager.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewContext.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelDecorations.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linesLayout.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLayout.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/modelLineProjection.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelLines.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/glyphLanesModel.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js","../../node_modules/monaco-editor/esm/vs/editor/common/viewModelEventDispatcher.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { Token } from '../languages.js';\nimport * as standaloneEnums from '../standalone/standaloneEnums.js';\nexport class KeyMod {\n    static chord(firstPart, secondPart) {\n        return KeyChord(firstPart, secondPart);\n    }\n}\nKeyMod.CtrlCmd = 2048 /* ConstKeyMod.CtrlCmd */;\nKeyMod.Shift = 1024 /* ConstKeyMod.Shift */;\nKeyMod.Alt = 512 /* ConstKeyMod.Alt */;\nKeyMod.WinCtrl = 256 /* ConstKeyMod.WinCtrl */;\nexport function createMonacoBaseAPI() {\n    return {\n        editor: undefined, // undefined override expected here\n        languages: undefined, // undefined override expected here\n        CancellationTokenSource: CancellationTokenSource,\n        Emitter: Emitter,\n        KeyCode: standaloneEnums.KeyCode,\n        KeyMod: KeyMod,\n        Position: Position,\n        Range: Range,\n        Selection: Selection,\n        SelectionDirection: standaloneEnums.SelectionDirection,\n        MarkerSeverity: standaloneEnums.MarkerSeverity,\n        MarkerTag: standaloneEnums.MarkerTag,\n        Uri: URI,\n        Token: Token\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst markRegex = /\\bMARK:\\s*(.*)$/d;\nconst trimDashesRegex = /^-+|-+$/g;\n/**\n * Find section headers in the model.\n *\n * @param model the text model to search in\n * @param options options to search with\n * @returns an array of section headers\n */\nexport function findSectionHeaders(model, options) {\n    var _a;\n    let headers = [];\n    if (options.findRegionSectionHeaders && ((_a = options.foldingRules) === null || _a === void 0 ? void 0 : _a.markers)) {\n        const regionHeaders = collectRegionHeaders(model, options);\n        headers = headers.concat(regionHeaders);\n    }\n    if (options.findMarkSectionHeaders) {\n        const markHeaders = collectMarkHeaders(model);\n        headers = headers.concat(markHeaders);\n    }\n    return headers;\n}\nfunction collectRegionHeaders(model, options) {\n    const regionHeaders = [];\n    const endLineNumber = model.getLineCount();\n    for (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {\n        const lineContent = model.getLineContent(lineNumber);\n        const match = lineContent.match(options.foldingRules.markers.start);\n        if (match) {\n            const range = { startLineNumber: lineNumber, startColumn: match[0].length + 1, endLineNumber: lineNumber, endColumn: lineContent.length + 1 };\n            if (range.endColumn > range.startColumn) {\n                const sectionHeader = {\n                    range,\n                    ...getHeaderText(lineContent.substring(match[0].length)),\n                    shouldBeInComments: false\n                };\n                if (sectionHeader.text || sectionHeader.hasSeparatorLine) {\n                    regionHeaders.push(sectionHeader);\n                }\n            }\n        }\n    }\n    return regionHeaders;\n}\nfunction collectMarkHeaders(model) {\n    const markHeaders = [];\n    const endLineNumber = model.getLineCount();\n    for (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {\n        const lineContent = model.getLineContent(lineNumber);\n        addMarkHeaderIfFound(lineContent, lineNumber, markHeaders);\n    }\n    return markHeaders;\n}\nfunction addMarkHeaderIfFound(lineContent, lineNumber, sectionHeaders) {\n    markRegex.lastIndex = 0;\n    const match = markRegex.exec(lineContent);\n    if (match) {\n        const column = match.indices[1][0] + 1;\n        const endColumn = match.indices[1][1] + 1;\n        const range = { startLineNumber: lineNumber, startColumn: column, endLineNumber: lineNumber, endColumn: endColumn };\n        if (range.endColumn > range.startColumn) {\n            const sectionHeader = {\n                range,\n                ...getHeaderText(match[1]),\n                shouldBeInComments: true\n            };\n            if (sectionHeader.text || sectionHeader.hasSeparatorLine) {\n                sectionHeaders.push(sectionHeader);\n            }\n        }\n    }\n}\nfunction getHeaderText(text) {\n    text = text.trim();\n    const hasSeparatorLine = text.startsWith('-');\n    text = text.replace(trimDashesRegex, '');\n    return { text, hasSeparatorLine };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { stringDiff } from '../../../base/common/diff/diff.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { MirrorTextModel as BaseMirrorModel } from '../model/mirrorTextModel.js';\nimport { ensureValidWordDefinition, getWordAtText } from '../core/wordHelper.js';\nimport { computeLinks } from '../languages/linkComputer.js';\nimport { BasicInplaceReplace } from '../languages/supports/inplaceReplaceSupport.js';\nimport { createMonacoBaseAPI } from './editorBaseApi.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { UnicodeTextModelHighlighter } from './unicodeTextModelHighlighter.js';\nimport { linesDiffComputers } from '../diff/linesDiffComputers.js';\nimport { createProxyObject, getAllMethodNames } from '../../../base/common/objects.js';\nimport { computeDefaultDocumentColors } from '../languages/defaultDocumentColorsComputer.js';\nimport { findSectionHeaders } from './findSectionHeaders.js';\n/**\n * @internal\n */\nclass MirrorModel extends BaseMirrorModel {\n    get uri() {\n        return this._uri;\n    }\n    get eol() {\n        return this._eol;\n    }\n    getValue() {\n        return this.getText();\n    }\n    findMatches(regex) {\n        const matches = [];\n        for (let i = 0; i < this._lines.length; i++) {\n            const line = this._lines[i];\n            const offsetToAdd = this.offsetAt(new Position(i + 1, 1));\n            const iteratorOverMatches = line.matchAll(regex);\n            for (const match of iteratorOverMatches) {\n                if (match.index || match.index === 0) {\n                    match.index = match.index + offsetToAdd;\n                }\n                matches.push(match);\n            }\n        }\n        return matches;\n    }\n    getLinesContent() {\n        return this._lines.slice(0);\n    }\n    getLineCount() {\n        return this._lines.length;\n    }\n    getLineContent(lineNumber) {\n        return this._lines[lineNumber - 1];\n    }\n    getWordAtPosition(position, wordDefinition) {\n        const wordAtText = getWordAtText(position.column, ensureValidWordDefinition(wordDefinition), this._lines[position.lineNumber - 1], 0);\n        if (wordAtText) {\n            return new Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);\n        }\n        return null;\n    }\n    words(wordDefinition) {\n        const lines = this._lines;\n        const wordenize = this._wordenize.bind(this);\n        let lineNumber = 0;\n        let lineText = '';\n        let wordRangesIdx = 0;\n        let wordRanges = [];\n        return {\n            *[Symbol.iterator]() {\n                while (true) {\n                    if (wordRangesIdx < wordRanges.length) {\n                        const value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);\n                        wordRangesIdx += 1;\n                        yield value;\n                    }\n                    else {\n                        if (lineNumber < lines.length) {\n                            lineText = lines[lineNumber];\n                            wordRanges = wordenize(lineText, wordDefinition);\n                            wordRangesIdx = 0;\n                            lineNumber += 1;\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n            }\n        };\n    }\n    getLineWords(lineNumber, wordDefinition) {\n        const content = this._lines[lineNumber - 1];\n        const ranges = this._wordenize(content, wordDefinition);\n        const words = [];\n        for (const range of ranges) {\n            words.push({\n                word: content.substring(range.start, range.end),\n                startColumn: range.start + 1,\n                endColumn: range.end + 1\n            });\n        }\n        return words;\n    }\n    _wordenize(content, wordDefinition) {\n        const result = [];\n        let match;\n        wordDefinition.lastIndex = 0; // reset lastIndex just to be sure\n        while (match = wordDefinition.exec(content)) {\n            if (match[0].length === 0) {\n                // it did match the empty string\n                break;\n            }\n            result.push({ start: match.index, end: match.index + match[0].length });\n        }\n        return result;\n    }\n    getValueInRange(range) {\n        range = this._validateRange(range);\n        if (range.startLineNumber === range.endLineNumber) {\n            return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\n        }\n        const lineEnding = this._eol;\n        const startLineIndex = range.startLineNumber - 1;\n        const endLineIndex = range.endLineNumber - 1;\n        const resultLines = [];\n        resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\n        for (let i = startLineIndex + 1; i < endLineIndex; i++) {\n            resultLines.push(this._lines[i]);\n        }\n        resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\n        return resultLines.join(lineEnding);\n    }\n    offsetAt(position) {\n        position = this._validatePosition(position);\n        this._ensureLineStarts();\n        return this._lineStarts.getPrefixSum(position.lineNumber - 2) + (position.column - 1);\n    }\n    positionAt(offset) {\n        offset = Math.floor(offset);\n        offset = Math.max(0, offset);\n        this._ensureLineStarts();\n        const out = this._lineStarts.getIndexOf(offset);\n        const lineLength = this._lines[out.index].length;\n        // Ensure we return a valid position\n        return {\n            lineNumber: 1 + out.index,\n            column: 1 + Math.min(out.remainder, lineLength)\n        };\n    }\n    _validateRange(range) {\n        const start = this._validatePosition({ lineNumber: range.startLineNumber, column: range.startColumn });\n        const end = this._validatePosition({ lineNumber: range.endLineNumber, column: range.endColumn });\n        if (start.lineNumber !== range.startLineNumber\n            || start.column !== range.startColumn\n            || end.lineNumber !== range.endLineNumber\n            || end.column !== range.endColumn) {\n            return {\n                startLineNumber: start.lineNumber,\n                startColumn: start.column,\n                endLineNumber: end.lineNumber,\n                endColumn: end.column\n            };\n        }\n        return range;\n    }\n    _validatePosition(position) {\n        if (!Position.isIPosition(position)) {\n            throw new Error('bad position');\n        }\n        let { lineNumber, column } = position;\n        let hasChanged = false;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            column = 1;\n            hasChanged = true;\n        }\n        else if (lineNumber > this._lines.length) {\n            lineNumber = this._lines.length;\n            column = this._lines[lineNumber - 1].length + 1;\n            hasChanged = true;\n        }\n        else {\n            const maxCharacter = this._lines[lineNumber - 1].length + 1;\n            if (column < 1) {\n                column = 1;\n                hasChanged = true;\n            }\n            else if (column > maxCharacter) {\n                column = maxCharacter;\n                hasChanged = true;\n            }\n        }\n        if (!hasChanged) {\n            return position;\n        }\n        else {\n            return { lineNumber, column };\n        }\n    }\n}\n/**\n * @internal\n */\nexport class EditorSimpleWorker {\n    constructor(host, foreignModuleFactory) {\n        this._host = host;\n        this._models = Object.create(null);\n        this._foreignModuleFactory = foreignModuleFactory;\n        this._foreignModule = null;\n    }\n    dispose() {\n        this._models = Object.create(null);\n    }\n    _getModel(uri) {\n        return this._models[uri];\n    }\n    _getModels() {\n        const all = [];\n        Object.keys(this._models).forEach((key) => all.push(this._models[key]));\n        return all;\n    }\n    acceptNewModel(data) {\n        this._models[data.url] = new MirrorModel(URI.parse(data.url), data.lines, data.EOL, data.versionId);\n    }\n    acceptModelChanged(strURL, e) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        const model = this._models[strURL];\n        model.onEvents(e);\n    }\n    acceptRemovedModel(strURL) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        delete this._models[strURL];\n    }\n    async computeUnicodeHighlights(url, options, range) {\n        const model = this._getModel(url);\n        if (!model) {\n            return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };\n        }\n        return UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n    }\n    async findSectionHeaders(url, options) {\n        const model = this._getModel(url);\n        if (!model) {\n            return [];\n        }\n        return findSectionHeaders(model, options);\n    }\n    // ---- BEGIN diff --------------------------------------------------------------------------\n    async computeDiff(originalUrl, modifiedUrl, options, algorithm) {\n        const original = this._getModel(originalUrl);\n        const modified = this._getModel(modifiedUrl);\n        if (!original || !modified) {\n            return null;\n        }\n        const result = EditorSimpleWorker.computeDiff(original, modified, options, algorithm);\n        return result;\n    }\n    static computeDiff(originalTextModel, modifiedTextModel, options, algorithm) {\n        const diffAlgorithm = algorithm === 'advanced' ? linesDiffComputers.getDefault() : linesDiffComputers.getLegacy();\n        const originalLines = originalTextModel.getLinesContent();\n        const modifiedLines = modifiedTextModel.getLinesContent();\n        const result = diffAlgorithm.computeDiff(originalLines, modifiedLines, options);\n        const identical = (result.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel));\n        function getLineChanges(changes) {\n            return changes.map(m => {\n                var _a;\n                return ([m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, (_a = m.innerChanges) === null || _a === void 0 ? void 0 : _a.map(m => [\n                        m.originalRange.startLineNumber,\n                        m.originalRange.startColumn,\n                        m.originalRange.endLineNumber,\n                        m.originalRange.endColumn,\n                        m.modifiedRange.startLineNumber,\n                        m.modifiedRange.startColumn,\n                        m.modifiedRange.endLineNumber,\n                        m.modifiedRange.endColumn,\n                    ])]);\n            });\n        }\n        return {\n            identical,\n            quitEarly: result.hitTimeout,\n            changes: getLineChanges(result.changes),\n            moves: result.moves.map(m => ([\n                m.lineRangeMapping.original.startLineNumber,\n                m.lineRangeMapping.original.endLineNumberExclusive,\n                m.lineRangeMapping.modified.startLineNumber,\n                m.lineRangeMapping.modified.endLineNumberExclusive,\n                getLineChanges(m.changes)\n            ])),\n        };\n    }\n    static _modelsAreIdentical(original, modified) {\n        const originalLineCount = original.getLineCount();\n        const modifiedLineCount = modified.getLineCount();\n        if (originalLineCount !== modifiedLineCount) {\n            return false;\n        }\n        for (let line = 1; line <= originalLineCount; line++) {\n            const originalLine = original.getLineContent(line);\n            const modifiedLine = modified.getLineContent(line);\n            if (originalLine !== modifiedLine) {\n                return false;\n            }\n        }\n        return true;\n    }\n    async computeMoreMinimalEdits(modelUrl, edits, pretty) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return edits;\n        }\n        const result = [];\n        let lastEol = undefined;\n        edits = edits.slice(0).sort((a, b) => {\n            if (a.range && b.range) {\n                return Range.compareRangesUsingStarts(a.range, b.range);\n            }\n            // eol only changes should go to the end\n            const aRng = a.range ? 0 : 1;\n            const bRng = b.range ? 0 : 1;\n            return aRng - bRng;\n        });\n        // merge adjacent edits\n        let writeIndex = 0;\n        for (let readIndex = 1; readIndex < edits.length; readIndex++) {\n            if (Range.getEndPosition(edits[writeIndex].range).equals(Range.getStartPosition(edits[readIndex].range))) {\n                edits[writeIndex].range = Range.fromPositions(Range.getStartPosition(edits[writeIndex].range), Range.getEndPosition(edits[readIndex].range));\n                edits[writeIndex].text += edits[readIndex].text;\n            }\n            else {\n                writeIndex++;\n                edits[writeIndex] = edits[readIndex];\n            }\n        }\n        edits.length = writeIndex + 1;\n        for (let { range, text, eol } of edits) {\n            if (typeof eol === 'number') {\n                lastEol = eol;\n            }\n            if (Range.isEmpty(range) && !text) {\n                // empty change\n                continue;\n            }\n            const original = model.getValueInRange(range);\n            text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n            if (original === text) {\n                // noop\n                continue;\n            }\n            // make sure diff won't take too long\n            if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n                result.push({ range, text });\n                continue;\n            }\n            // compute diff between original and edit.text\n            const changes = stringDiff(original, text, pretty);\n            const editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n            for (const change of changes) {\n                const start = model.positionAt(editOffset + change.originalStart);\n                const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n                const newEdit = {\n                    text: text.substr(change.modifiedStart, change.modifiedLength),\n                    range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\n                };\n                if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n                    result.push(newEdit);\n                }\n            }\n        }\n        if (typeof lastEol === 'number') {\n            result.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n        }\n        return result;\n    }\n    // ---- END minimal edits ---------------------------------------------------------------\n    async computeLinks(modelUrl) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        return computeLinks(model);\n    }\n    // --- BEGIN default document colors -----------------------------------------------------------\n    async computeDefaultDocumentColors(modelUrl) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        return computeDefaultDocumentColors(model);\n    }\n    async textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n        const sw = new StopWatch();\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        const seen = new Set();\n        outer: for (const url of modelUrls) {\n            const model = this._getModel(url);\n            if (!model) {\n                continue;\n            }\n            for (const word of model.words(wordDefRegExp)) {\n                if (word === leadingWord || !isNaN(Number(word))) {\n                    continue;\n                }\n                seen.add(word);\n                if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n                    break outer;\n                }\n            }\n        }\n        return { words: Array.from(seen), duration: sw.elapsed() };\n    }\n    // ---- END suggest --------------------------------------------------------------------------\n    //#region -- word ranges --\n    async computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return Object.create(null);\n        }\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        const result = Object.create(null);\n        for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n            const words = model.getLineWords(line, wordDefRegExp);\n            for (const word of words) {\n                if (!isNaN(Number(word.word))) {\n                    continue;\n                }\n                let array = result[word.word];\n                if (!array) {\n                    array = [];\n                    result[word.word] = array;\n                }\n                array.push({\n                    startLineNumber: line,\n                    startColumn: word.startColumn,\n                    endLineNumber: line,\n                    endColumn: word.endColumn\n                });\n            }\n        }\n        return result;\n    }\n    //#endregion\n    async navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        if (range.startColumn === range.endColumn) {\n            range = {\n                startLineNumber: range.startLineNumber,\n                startColumn: range.startColumn,\n                endLineNumber: range.endLineNumber,\n                endColumn: range.endColumn + 1\n            };\n        }\n        const selectionText = model.getValueInRange(range);\n        const wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\n        if (!wordRange) {\n            return null;\n        }\n        const word = model.getValueInRange(wordRange);\n        const result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n        return result;\n    }\n    // ---- BEGIN foreign module support --------------------------------------------------------------------------\n    loadForeignModule(moduleId, createData, foreignHostMethods) {\n        const proxyMethodRequest = (method, args) => {\n            return this._host.fhr(method, args);\n        };\n        const foreignHost = createProxyObject(foreignHostMethods, proxyMethodRequest);\n        const ctx = {\n            host: foreignHost,\n            getMirrorModels: () => {\n                return this._getModels();\n            }\n        };\n        if (this._foreignModuleFactory) {\n            this._foreignModule = this._foreignModuleFactory(ctx, createData);\n            // static foreing module\n            return Promise.resolve(getAllMethodNames(this._foreignModule));\n        }\n        // ESM-comment-begin\n        // \t\treturn new Promise<any>((resolve, reject) => {\n        // \t\t\trequire([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {\n        // \t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\n        // \n        // \t\t\t\tresolve(getAllMethodNames(this._foreignModule));\n        // \n        // \t\t\t}, reject);\n        // \t\t});\n        // ESM-comment-end\n        // ESM-uncomment-begin\n        return Promise.reject(new Error(`Unexpected usage`));\n        // ESM-uncomment-end\n    }\n    // foreign method request\n    fmr(method, args) {\n        if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n}\n// ---- END diff --------------------------------------------------------------------------\n// ---- BEGIN minimal edits ---------------------------------------------------------------\nEditorSimpleWorker._diffLimit = 100000;\n// ---- BEGIN suggest --------------------------------------------------------------------------\nEditorSimpleWorker._suggestionsLimit = 10000;\n/**\n * Called on the worker side\n * @internal\n */\nexport function create(host) {\n    return new EditorSimpleWorker(host, null);\n}\nif (typeof importScripts === 'function') {\n    // Running in a web worker\n    globalThis.monaco = createMonacoBaseAPI();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const IEditorWorkerService = createDecorator('editorWorkerService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Schemas } from '../../../base/common/network.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { FileKind } from '../../../platform/files/common/files.js';\nconst fileIconDirectoryRegex = /(?:\\/|^)(?:([^\\/]+)\\/)?([^\\/]+)$/;\nexport function getIconClasses(modelService, languageService, resource, fileKind, icon) {\n    if (icon) {\n        return [`codicon-${icon.id}`, 'predefined-file-icon'];\n    }\n    // we always set these base classes even if we do not have a path\n    const classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n    if (resource) {\n        // Get the path and name of the resource. For data-URIs, we need to parse specially\n        let name;\n        if (resource.scheme === Schemas.data) {\n            const metadata = DataUri.parseMetaData(resource);\n            name = metadata.get(DataUri.META_DATA_LABEL);\n        }\n        else {\n            const match = resource.path.match(fileIconDirectoryRegex);\n            if (match) {\n                name = cssEscape(match[2].toLowerCase());\n                if (match[1]) {\n                    classes.push(`${cssEscape(match[1].toLowerCase())}-name-dir-icon`); // parent directory\n                }\n            }\n            else {\n                name = cssEscape(resource.authority.toLowerCase());\n            }\n        }\n        // Root Folders\n        if (fileKind === FileKind.ROOT_FOLDER) {\n            classes.push(`${name}-root-name-folder-icon`);\n        }\n        // Folders\n        else if (fileKind === FileKind.FOLDER) {\n            classes.push(`${name}-name-folder-icon`);\n        }\n        // Files\n        else {\n            // Name & Extension(s)\n            if (name) {\n                classes.push(`${name}-name-file-icon`);\n                classes.push(`name-file-icon`); // extra segment to increase file-name score\n                // Avoid doing an explosive combination of extensions for very long filenames\n                // (most file systems do not allow files > 255 length) with lots of `.` characters\n                // https://github.com/microsoft/vscode/issues/116199\n                if (name.length <= 255) {\n                    const dotSegments = name.split('.');\n                    for (let i = 1; i < dotSegments.length; i++) {\n                        classes.push(`${dotSegments.slice(i).join('.')}-ext-file-icon`); // add each combination of all found extensions if more than one\n                    }\n                }\n                classes.push(`ext-file-icon`); // extra segment to increase file-ext score\n            }\n            // Detected Mode\n            const detectedLanguageId = detectLanguageId(modelService, languageService, resource);\n            if (detectedLanguageId) {\n                classes.push(`${cssEscape(detectedLanguageId)}-lang-file-icon`);\n            }\n        }\n    }\n    return classes;\n}\nfunction detectLanguageId(modelService, languageService, resource) {\n    if (!resource) {\n        return null; // we need a resource at least\n    }\n    let languageId = null;\n    // Data URI: check for encoded metadata\n    if (resource.scheme === Schemas.data) {\n        const metadata = DataUri.parseMetaData(resource);\n        const mime = metadata.get(DataUri.META_DATA_MIME);\n        if (mime) {\n            languageId = languageService.getLanguageIdByMimeType(mime);\n        }\n    }\n    // Any other URI: check for model if existing\n    else {\n        const model = modelService.getModel(resource);\n        if (model) {\n            languageId = model.getLanguageId();\n        }\n    }\n    // only take if the language id is specific (aka no just plain text)\n    if (languageId && languageId !== PLAINTEXT_LANGUAGE_ID) {\n        return languageId;\n    }\n    // otherwise fallback to path based detection\n    return languageService.guessLanguageIdByFilepathOrFirstLine(resource);\n}\nfunction cssEscape(str) {\n    return str.replace(/[\\11\\12\\14\\15\\40]/g, '/'); // HTML class names can not contain certain whitespace characters, use / instead, which doesn't exist in file names.\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { doHash } from '../../../base/common/hash.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { clamp, MovingAverage, SlidingWindowAverage } from '../../../base/common/numbers.js';\nimport { IEnvironmentService } from '../../../platform/environment/common/environment.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { matchesScheme } from '../../../base/common/network.js';\nexport const ILanguageFeatureDebounceService = createDecorator('ILanguageFeatureDebounceService');\nvar IdentityHash;\n(function (IdentityHash) {\n    const _hashes = new WeakMap();\n    let pool = 0;\n    function of(obj) {\n        let value = _hashes.get(obj);\n        if (value === undefined) {\n            value = ++pool;\n            _hashes.set(obj, value);\n        }\n        return value;\n    }\n    IdentityHash.of = of;\n})(IdentityHash || (IdentityHash = {}));\nclass NullDebounceInformation {\n    constructor(_default) {\n        this._default = _default;\n    }\n    get(_model) {\n        return this._default;\n    }\n    update(_model, _value) {\n        return this._default;\n    }\n    default() {\n        return this._default;\n    }\n}\nclass FeatureDebounceInformation {\n    constructor(_logService, _name, _registry, _default, _min, _max) {\n        this._logService = _logService;\n        this._name = _name;\n        this._registry = _registry;\n        this._default = _default;\n        this._min = _min;\n        this._max = _max;\n        this._cache = new LRUCache(50, 0.7);\n    }\n    _key(model) {\n        return model.id + this._registry.all(model).reduce((hashVal, obj) => doHash(IdentityHash.of(obj), hashVal), 0);\n    }\n    get(model) {\n        const key = this._key(model);\n        const avg = this._cache.get(key);\n        return avg\n            ? clamp(avg.value, this._min, this._max)\n            : this.default();\n    }\n    update(model, value) {\n        const key = this._key(model);\n        let avg = this._cache.get(key);\n        if (!avg) {\n            avg = new SlidingWindowAverage(6);\n            this._cache.set(key, avg);\n        }\n        const newValue = clamp(avg.update(value), this._min, this._max);\n        if (!matchesScheme(model.uri, 'output')) {\n            this._logService.trace(`[DEBOUNCE: ${this._name}] for ${model.uri.toString()} is ${newValue}ms`);\n        }\n        return newValue;\n    }\n    _overall() {\n        const result = new MovingAverage();\n        for (const [, avg] of this._cache) {\n            result.update(avg.value);\n        }\n        return result.value;\n    }\n    default() {\n        const value = (this._overall() | 0) || this._default;\n        return clamp(value, this._min, this._max);\n    }\n}\nlet LanguageFeatureDebounceService = class LanguageFeatureDebounceService {\n    constructor(_logService, envService) {\n        this._logService = _logService;\n        this._data = new Map();\n        this._isDev = envService.isExtensionDevelopment || !envService.isBuilt;\n    }\n    for(feature, name, config) {\n        var _a, _b, _c;\n        const min = (_a = config === null || config === void 0 ? void 0 : config.min) !== null && _a !== void 0 ? _a : 50;\n        const max = (_b = config === null || config === void 0 ? void 0 : config.max) !== null && _b !== void 0 ? _b : min ** 2;\n        const extra = (_c = config === null || config === void 0 ? void 0 : config.key) !== null && _c !== void 0 ? _c : undefined;\n        const key = `${IdentityHash.of(feature)},${min}${extra ? ',' + extra : ''}`;\n        let info = this._data.get(key);\n        if (!info) {\n            if (this._isDev) {\n                this._logService.debug(`[DEBOUNCE: ${name}] is disabled in developed mode`);\n                info = new NullDebounceInformation(min * 1.5);\n            }\n            else {\n                info = new FeatureDebounceInformation(this._logService, name, feature, (this._overallAverage() | 0) || (min * 1.5), // default is overall default or derived from min-value\n                min, max);\n            }\n            this._data.set(key, info);\n        }\n        return info;\n    }\n    _overallAverage() {\n        // Average of all language features. Not a great value but an approximation\n        const result = new MovingAverage();\n        for (const info of this._data.values()) {\n            result.update(info.default());\n        }\n        return result.value;\n    }\n};\nLanguageFeatureDebounceService = __decorate([\n    __param(0, ILogService),\n    __param(1, IEnvironmentService)\n], LanguageFeatureDebounceService);\nexport { LanguageFeatureDebounceService };\nregisterSingleton(ILanguageFeatureDebounceService, LanguageFeatureDebounceService, 1 /* InstantiationType.Delayed */);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const ILanguageFeaturesService = createDecorator('ILanguageFeaturesService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LanguageFeatureRegistry } from '../languageFeatureRegistry.js';\nimport { ILanguageFeaturesService } from './languageFeatures.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nexport class LanguageFeaturesService {\n    constructor() {\n        this.referenceProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.renameProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.newSymbolNamesProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.codeActionProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.definitionProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.typeDefinitionProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.declarationProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.implementationProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentSymbolProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.inlayHintsProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.colorProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.codeLensProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentFormattingEditProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentRangeFormattingEditProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.onTypeFormattingEditProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.signatureHelpProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.hoverProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentHighlightProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.multiDocumentHighlightProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.selectionRangeProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.foldingRangeProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.linkProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.inlineCompletionsProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.inlineEditProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.completionProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.linkedEditingRangeProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentRangeSemanticTokensProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentSemanticTokensProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentDropEditProvider = new LanguageFeatureRegistry(this._score.bind(this));\n        this.documentPasteEditProvider = new LanguageFeatureRegistry(this._score.bind(this));\n    }\n    _score(uri) {\n        var _a;\n        return (_a = this._notebookTypeResolver) === null || _a === void 0 ? void 0 : _a.call(this, uri);\n    }\n}\nregisterSingleton(ILanguageFeaturesService, LanguageFeaturesService, 1 /* InstantiationType.Delayed */);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { parse } from '../../../base/common/glob.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, posix } from '../../../base/common/path.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { startsWithUTF8BOM } from '../../../base/common/strings.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nlet registeredAssociations = [];\nlet nonUserRegisteredAssociations = [];\nlet userRegisteredAssociations = [];\n/**\n * Associate a language to the registry (platform).\n * * **NOTE**: This association will lose over associations registered using `registerConfiguredLanguageAssociation`.\n * * **NOTE**: Use `clearPlatformLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerPlatformLanguageAssociation(association, warnOnOverwrite = false) {\n    _registerLanguageAssociation(association, false, warnOnOverwrite);\n}\nfunction _registerLanguageAssociation(association, userConfigured, warnOnOverwrite) {\n    // Register\n    const associationItem = toLanguageAssociationItem(association, userConfigured);\n    registeredAssociations.push(associationItem);\n    if (!associationItem.userConfigured) {\n        nonUserRegisteredAssociations.push(associationItem);\n    }\n    else {\n        userRegisteredAssociations.push(associationItem);\n    }\n    // Check for conflicts unless this is a user configured association\n    if (warnOnOverwrite && !associationItem.userConfigured) {\n        registeredAssociations.forEach(a => {\n            if (a.mime === associationItem.mime || a.userConfigured) {\n                return; // same mime or userConfigured is ok\n            }\n            if (associationItem.extension && a.extension === associationItem.extension) {\n                console.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filename && a.filename === associationItem.filename) {\n                console.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n                console.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\n                console.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n        });\n    }\n}\nfunction toLanguageAssociationItem(association, userConfigured) {\n    return {\n        id: association.id,\n        mime: association.mime,\n        filename: association.filename,\n        extension: association.extension,\n        filepattern: association.filepattern,\n        firstline: association.firstline,\n        userConfigured: userConfigured,\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n        filepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n    };\n}\n/**\n * Clear language associations from the registry (platform).\n */\nexport function clearPlatformLanguageAssociations() {\n    registeredAssociations = registeredAssociations.filter(a => a.userConfigured);\n    nonUserRegisteredAssociations = [];\n}\n/**\n * @see `getMimeTypes`\n */\nexport function getLanguageIds(resource, firstLine) {\n    return getAssociations(resource, firstLine).map(item => item.id);\n}\nfunction getAssociations(resource, firstLine) {\n    let path;\n    if (resource) {\n        switch (resource.scheme) {\n            case Schemas.file:\n                path = resource.fsPath;\n                break;\n            case Schemas.data: {\n                const metadata = DataUri.parseMetaData(resource);\n                path = metadata.get(DataUri.META_DATA_LABEL);\n                break;\n            }\n            case Schemas.vscodeNotebookCell:\n                // File path not relevant for language detection of cell\n                path = undefined;\n                break;\n            default:\n                path = resource.path;\n        }\n    }\n    if (!path) {\n        return [{ id: 'unknown', mime: Mimes.unknown }];\n    }\n    path = path.toLowerCase();\n    const filename = basename(path);\n    // 1.) User configured mappings have highest priority\n    const configuredLanguage = getAssociationByPath(path, filename, userRegisteredAssociations);\n    if (configuredLanguage) {\n        return [configuredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 2.) Registered mappings have middle priority\n    const registeredLanguage = getAssociationByPath(path, filename, nonUserRegisteredAssociations);\n    if (registeredLanguage) {\n        return [registeredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 3.) Firstline has lowest priority\n    if (firstLine) {\n        const firstlineLanguage = getAssociationByFirstline(firstLine);\n        if (firstlineLanguage) {\n            return [firstlineLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n        }\n    }\n    return [{ id: 'unknown', mime: Mimes.unknown }];\n}\nfunction getAssociationByPath(path, filename, associations) {\n    var _a;\n    let filenameMatch = undefined;\n    let patternMatch = undefined;\n    let extensionMatch = undefined;\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n    for (let i = associations.length - 1; i >= 0; i--) {\n        const association = associations[i];\n        // First exact name match\n        if (filename === association.filenameLowercase) {\n            filenameMatch = association;\n            break; // take it!\n        }\n        // Longest pattern match\n        if (association.filepattern) {\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n                const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n                if ((_a = association.filepatternLowercase) === null || _a === void 0 ? void 0 : _a.call(association, target)) {\n                    patternMatch = association;\n                }\n            }\n        }\n        // Longest extension match\n        if (association.extension) {\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n                if (filename.endsWith(association.extensionLowercase)) {\n                    extensionMatch = association;\n                }\n            }\n        }\n    }\n    // 1.) Exact name match has second highest priority\n    if (filenameMatch) {\n        return filenameMatch;\n    }\n    // 2.) Match on pattern\n    if (patternMatch) {\n        return patternMatch;\n    }\n    // 3.) Match on extension comes next\n    if (extensionMatch) {\n        return extensionMatch;\n    }\n    return undefined;\n}\nfunction getAssociationByFirstline(firstLine) {\n    if (startsWithUTF8BOM(firstLine)) {\n        firstLine = firstLine.substr(1);\n    }\n    if (firstLine.length > 0) {\n        // We want to prioritize associations based on the order they are registered so that the last registered\n        // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n        for (let i = registeredAssociations.length - 1; i >= 0; i--) {\n            const association = registeredAssociations[i];\n            if (!association.firstline) {\n                continue;\n            }\n            const matches = firstLine.match(association.firstline);\n            if (matches && matches.length > 0) {\n                return association;\n            }\n        }\n    }\n    return undefined;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { regExpLeadsToEndlessLoop } from '../../../base/common/strings.js';\nimport { clearPlatformLanguageAssociations, getLanguageIds, registerPlatformLanguageAssociation } from './languagesAssociations.js';\nimport { ModesRegistry, PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst NULL_LANGUAGE_ID = 'vs.editor.nullLanguage';\nexport class LanguageIdCodec {\n    constructor() {\n        this._languageIdToLanguage = [];\n        this._languageToLanguageId = new Map();\n        this._register(NULL_LANGUAGE_ID, 0 /* LanguageId.Null */);\n        this._register(PLAINTEXT_LANGUAGE_ID, 1 /* LanguageId.PlainText */);\n        this._nextLanguageId = 2;\n    }\n    _register(language, languageId) {\n        this._languageIdToLanguage[languageId] = language;\n        this._languageToLanguageId.set(language, languageId);\n    }\n    register(language) {\n        if (this._languageToLanguageId.has(language)) {\n            return;\n        }\n        const languageId = this._nextLanguageId++;\n        this._register(language, languageId);\n    }\n    encodeLanguageId(languageId) {\n        return this._languageToLanguageId.get(languageId) || 0 /* LanguageId.Null */;\n    }\n    decodeLanguageId(languageId) {\n        return this._languageIdToLanguage[languageId] || NULL_LANGUAGE_ID;\n    }\n}\nexport class LanguagesRegistry extends Disposable {\n    constructor(useModesRegistry = true, warnOnOverwrite = false) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        LanguagesRegistry.instanceCount++;\n        this._warnOnOverwrite = warnOnOverwrite;\n        this.languageIdCodec = new LanguageIdCodec();\n        this._dynamicLanguages = [];\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        if (useModesRegistry) {\n            this._initializeFromRegistry();\n            this._register(ModesRegistry.onDidChangeLanguages((m) => {\n                this._initializeFromRegistry();\n            }));\n        }\n    }\n    dispose() {\n        LanguagesRegistry.instanceCount--;\n        super.dispose();\n    }\n    _initializeFromRegistry() {\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        clearPlatformLanguageAssociations();\n        const desc = [].concat(ModesRegistry.getLanguages()).concat(this._dynamicLanguages);\n        this._registerLanguages(desc);\n    }\n    _registerLanguages(desc) {\n        for (const d of desc) {\n            this._registerLanguage(d);\n        }\n        // Rebuild fast path maps\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        Object.keys(this._languages).forEach((langId) => {\n            const language = this._languages[langId];\n            if (language.name) {\n                this._nameMap[language.name] = language.identifier;\n            }\n            language.aliases.forEach((alias) => {\n                this._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n            });\n            language.mimetypes.forEach((mimetype) => {\n                this._mimeTypesMap[mimetype] = language.identifier;\n            });\n        });\n        Registry.as(Extensions.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds());\n        this._onDidChange.fire();\n    }\n    _registerLanguage(lang) {\n        const langId = lang.id;\n        let resolvedLanguage;\n        if (hasOwnProperty.call(this._languages, langId)) {\n            resolvedLanguage = this._languages[langId];\n        }\n        else {\n            this.languageIdCodec.register(langId);\n            resolvedLanguage = {\n                identifier: langId,\n                name: null,\n                mimetypes: [],\n                aliases: [],\n                extensions: [],\n                filenames: [],\n                configurationFiles: [],\n                icons: []\n            };\n            this._languages[langId] = resolvedLanguage;\n        }\n        this._mergeLanguage(resolvedLanguage, lang);\n    }\n    _mergeLanguage(resolvedLanguage, lang) {\n        const langId = lang.id;\n        let primaryMime = null;\n        if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n            resolvedLanguage.mimetypes.push(...lang.mimetypes);\n            primaryMime = lang.mimetypes[0];\n        }\n        if (!primaryMime) {\n            primaryMime = `text/x-${langId}`;\n            resolvedLanguage.mimetypes.push(primaryMime);\n        }\n        if (Array.isArray(lang.extensions)) {\n            if (lang.configuration) {\n                // insert first as this appears to be the 'primary' language definition\n                resolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\n            }\n            else {\n                resolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\n            }\n            for (const extension of lang.extensions) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, extension: extension }, this._warnOnOverwrite);\n            }\n        }\n        if (Array.isArray(lang.filenames)) {\n            for (const filename of lang.filenames) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filename: filename }, this._warnOnOverwrite);\n                resolvedLanguage.filenames.push(filename);\n            }\n        }\n        if (Array.isArray(lang.filenamePatterns)) {\n            for (const filenamePattern of lang.filenamePatterns) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filepattern: filenamePattern }, this._warnOnOverwrite);\n            }\n        }\n        if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n            let firstLineRegexStr = lang.firstLine;\n            if (firstLineRegexStr.charAt(0) !== '^') {\n                firstLineRegexStr = '^' + firstLineRegexStr;\n            }\n            try {\n                const firstLineRegex = new RegExp(firstLineRegexStr);\n                if (!regExpLeadsToEndlessLoop(firstLineRegex)) {\n                    registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, firstline: firstLineRegex }, this._warnOnOverwrite);\n                }\n            }\n            catch (err) {\n                // Most likely, the regex was bad\n                console.warn(`[${lang.id}]: Invalid regular expression \\`${firstLineRegexStr}\\`: `, err);\n            }\n        }\n        resolvedLanguage.aliases.push(langId);\n        let langAliases = null;\n        if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n            if (lang.aliases.length === 0) {\n                // signal that this language should not get a name\n                langAliases = [null];\n            }\n            else {\n                langAliases = lang.aliases;\n            }\n        }\n        if (langAliases !== null) {\n            for (const langAlias of langAliases) {\n                if (!langAlias || langAlias.length === 0) {\n                    continue;\n                }\n                resolvedLanguage.aliases.push(langAlias);\n            }\n        }\n        const containsAliases = (langAliases !== null && langAliases.length > 0);\n        if (containsAliases && langAliases[0] === null) {\n            // signal that this language should not get a name\n        }\n        else {\n            const bestName = (containsAliases ? langAliases[0] : null) || langId;\n            if (containsAliases || !resolvedLanguage.name) {\n                resolvedLanguage.name = bestName;\n            }\n        }\n        if (lang.configuration) {\n            resolvedLanguage.configurationFiles.push(lang.configuration);\n        }\n        if (lang.icon) {\n            resolvedLanguage.icons.push(lang.icon);\n        }\n    }\n    isRegisteredLanguageId(languageId) {\n        if (!languageId) {\n            return false;\n        }\n        return hasOwnProperty.call(this._languages, languageId);\n    }\n    getRegisteredLanguageIds() {\n        return Object.keys(this._languages);\n    }\n    getLanguageIdByLanguageName(languageName) {\n        const languageNameLower = languageName.toLowerCase();\n        if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n            return null;\n        }\n        return this._lowercaseNameMap[languageNameLower];\n    }\n    getLanguageIdByMimeType(mimeType) {\n        if (!mimeType) {\n            return null;\n        }\n        if (hasOwnProperty.call(this._mimeTypesMap, mimeType)) {\n            return this._mimeTypesMap[mimeType];\n        }\n        return null;\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n        if (!resource && !firstLine) {\n            return [];\n        }\n        return getLanguageIds(resource, firstLine);\n    }\n}\nLanguagesRegistry.instanceCount = 0;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\nimport { firstOrDefault } from '../../../base/common/arrays.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nexport class LanguageService extends Disposable {\n    constructor(warnOnOverwrite = false) {\n        super();\n        this._onDidRequestBasicLanguageFeatures = this._register(new Emitter());\n        this.onDidRequestBasicLanguageFeatures = this._onDidRequestBasicLanguageFeatures.event;\n        this._onDidRequestRichLanguageFeatures = this._register(new Emitter());\n        this.onDidRequestRichLanguageFeatures = this._onDidRequestRichLanguageFeatures.event;\n        this._onDidChange = this._register(new Emitter({ leakWarningThreshold: 200 /* https://github.com/microsoft/vscode/issues/119968 */ }));\n        this.onDidChange = this._onDidChange.event;\n        this._requestedBasicLanguages = new Set();\n        this._requestedRichLanguages = new Set();\n        LanguageService.instanceCount++;\n        this._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\n        this.languageIdCodec = this._registry.languageIdCodec;\n        this._register(this._registry.onDidChange(() => this._onDidChange.fire()));\n    }\n    dispose() {\n        LanguageService.instanceCount--;\n        super.dispose();\n    }\n    isRegisteredLanguageId(languageId) {\n        return this._registry.isRegisteredLanguageId(languageId);\n    }\n    getLanguageIdByLanguageName(languageName) {\n        return this._registry.getLanguageIdByLanguageName(languageName);\n    }\n    getLanguageIdByMimeType(mimeType) {\n        return this._registry.getLanguageIdByMimeType(mimeType);\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n        const languageIds = this._registry.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n        return firstOrDefault(languageIds, null);\n    }\n    createById(languageId) {\n        return new LanguageSelection(this.onDidChange, () => {\n            return this._createAndGetLanguageIdentifier(languageId);\n        });\n    }\n    createByFilepathOrFirstLine(resource, firstLine) {\n        return new LanguageSelection(this.onDidChange, () => {\n            const languageId = this.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n            return this._createAndGetLanguageIdentifier(languageId);\n        });\n    }\n    _createAndGetLanguageIdentifier(languageId) {\n        if (!languageId || !this.isRegisteredLanguageId(languageId)) {\n            // Fall back to plain text if language is unknown\n            languageId = PLAINTEXT_LANGUAGE_ID;\n        }\n        return languageId;\n    }\n    requestBasicLanguageFeatures(languageId) {\n        if (!this._requestedBasicLanguages.has(languageId)) {\n            this._requestedBasicLanguages.add(languageId);\n            this._onDidRequestBasicLanguageFeatures.fire(languageId);\n        }\n    }\n    requestRichLanguageFeatures(languageId) {\n        if (!this._requestedRichLanguages.has(languageId)) {\n            this._requestedRichLanguages.add(languageId);\n            // Ensure basic features are requested\n            this.requestBasicLanguageFeatures(languageId);\n            // Ensure tokenizers are created\n            TokenizationRegistry.getOrCreate(languageId);\n            this._onDidRequestRichLanguageFeatures.fire(languageId);\n        }\n    }\n}\nLanguageService.instanceCount = 0;\nclass LanguageSelection {\n    constructor(_onDidChangeLanguages, _selector) {\n        this._onDidChangeLanguages = _onDidChangeLanguages;\n        this._selector = _selector;\n        this._listener = null;\n        this._emitter = null;\n        this.languageId = this._selector();\n    }\n    _dispose() {\n        if (this._listener) {\n            this._listener.dispose();\n            this._listener = null;\n        }\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = null;\n        }\n    }\n    get onDidChange() {\n        if (!this._listener) {\n            this._listener = this._onDidChangeLanguages(() => this._evaluate());\n        }\n        if (!this._emitter) {\n            this._emitter = new Emitter({\n                onDidRemoveLastListener: () => {\n                    this._dispose();\n                }\n            });\n        }\n        return this._emitter.event;\n    }\n    _evaluate() {\n        var _a;\n        const languageId = this._selector();\n        if (languageId === this.languageId) {\n            // no change\n            return;\n        }\n        this.languageId = languageId;\n        (_a = this._emitter) === null || _a === void 0 ? void 0 : _a.fire(this.languageId);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const IMarkerDecorationsService = createDecorator('markerDecorationsService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { IMarkerService, MarkerSeverity } from '../../../platform/markers/common/markers.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { OverviewRulerLane } from '../model.js';\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\nimport { overviewRulerWarning, overviewRulerInfo, overviewRulerError } from '../core/editorColorRegistry.js';\nimport { IModelService } from './model.js';\nimport { Range } from '../core/range.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { minimapInfo, minimapWarning, minimapError } from '../../../platform/theme/common/colorRegistry.js';\nimport { BidirectionalMap, ResourceMap } from '../../../base/common/map.js';\nimport { diffSets } from '../../../base/common/collections.js';\nlet MarkerDecorationsService = class MarkerDecorationsService extends Disposable {\n    constructor(modelService, _markerService) {\n        super();\n        this._markerService = _markerService;\n        this._onDidChangeMarker = this._register(new Emitter());\n        this._markerDecorations = new ResourceMap();\n        modelService.getModels().forEach(model => this._onModelAdded(model));\n        this._register(modelService.onModelAdded(this._onModelAdded, this));\n        this._register(modelService.onModelRemoved(this._onModelRemoved, this));\n        this._register(this._markerService.onMarkerChanged(this._handleMarkerChange, this));\n    }\n    dispose() {\n        super.dispose();\n        this._markerDecorations.forEach(value => value.dispose());\n        this._markerDecorations.clear();\n    }\n    getMarker(uri, decoration) {\n        const markerDecorations = this._markerDecorations.get(uri);\n        return markerDecorations ? (markerDecorations.getMarker(decoration) || null) : null;\n    }\n    _handleMarkerChange(changedResources) {\n        changedResources.forEach((resource) => {\n            const markerDecorations = this._markerDecorations.get(resource);\n            if (markerDecorations) {\n                this._updateDecorations(markerDecorations);\n            }\n        });\n    }\n    _onModelAdded(model) {\n        const markerDecorations = new MarkerDecorations(model);\n        this._markerDecorations.set(model.uri, markerDecorations);\n        this._updateDecorations(markerDecorations);\n    }\n    _onModelRemoved(model) {\n        var _a;\n        const markerDecorations = this._markerDecorations.get(model.uri);\n        if (markerDecorations) {\n            markerDecorations.dispose();\n            this._markerDecorations.delete(model.uri);\n        }\n        // clean up markers for internal, transient models\n        if (model.uri.scheme === Schemas.inMemory\n            || model.uri.scheme === Schemas.internal\n            || model.uri.scheme === Schemas.vscode) {\n            (_a = this._markerService) === null || _a === void 0 ? void 0 : _a.read({ resource: model.uri }).map(marker => marker.owner).forEach(owner => this._markerService.remove(owner, [model.uri]));\n        }\n    }\n    _updateDecorations(markerDecorations) {\n        // Limit to the first 500 errors/warnings\n        const markers = this._markerService.read({ resource: markerDecorations.model.uri, take: 500 });\n        if (markerDecorations.update(markers)) {\n            this._onDidChangeMarker.fire(markerDecorations.model);\n        }\n    }\n};\nMarkerDecorationsService = __decorate([\n    __param(0, IModelService),\n    __param(1, IMarkerService)\n], MarkerDecorationsService);\nexport { MarkerDecorationsService };\nclass MarkerDecorations extends Disposable {\n    constructor(model) {\n        super();\n        this.model = model;\n        this._map = new BidirectionalMap();\n        this._register(toDisposable(() => {\n            this.model.deltaDecorations([...this._map.values()], []);\n            this._map.clear();\n        }));\n    }\n    update(markers) {\n        // We use the fact that marker instances are not recreated when different owners\n        // update. So we can compare references to find out what changed since the last update.\n        const { added, removed } = diffSets(new Set(this._map.keys()), new Set(markers));\n        if (added.length === 0 && removed.length === 0) {\n            return false;\n        }\n        const oldIds = removed.map(marker => this._map.get(marker));\n        const newDecorations = added.map(marker => {\n            return {\n                range: this._createDecorationRange(this.model, marker),\n                options: this._createDecorationOption(marker)\n            };\n        });\n        const ids = this.model.deltaDecorations(oldIds, newDecorations);\n        for (const removedMarker of removed) {\n            this._map.delete(removedMarker);\n        }\n        for (let index = 0; index < ids.length; index++) {\n            this._map.set(added[index], ids[index]);\n        }\n        return true;\n    }\n    getMarker(decoration) {\n        return this._map.getKey(decoration.id);\n    }\n    _createDecorationRange(model, rawMarker) {\n        let ret = Range.lift(rawMarker);\n        if (rawMarker.severity === MarkerSeverity.Hint && !this._hasMarkerTag(rawMarker, 1 /* MarkerTag.Unnecessary */) && !this._hasMarkerTag(rawMarker, 2 /* MarkerTag.Deprecated */)) {\n            // * never render hints on multiple lines\n            // * make enough space for three dots\n            ret = ret.setEndPosition(ret.startLineNumber, ret.startColumn + 2);\n        }\n        ret = model.validateRange(ret);\n        if (ret.isEmpty()) {\n            const maxColumn = model.getLineLastNonWhitespaceColumn(ret.startLineNumber) ||\n                model.getLineMaxColumn(ret.startLineNumber);\n            if (maxColumn === 1 || ret.endColumn >= maxColumn) {\n                // empty line or behind eol\n                // keep the range as is, it will be rendered 1ch wide\n                return ret;\n            }\n            const word = model.getWordAtPosition(ret.getStartPosition());\n            if (word) {\n                ret = new Range(ret.startLineNumber, word.startColumn, ret.endLineNumber, word.endColumn);\n            }\n        }\n        else if (rawMarker.endColumn === Number.MAX_VALUE && rawMarker.startColumn === 1 && ret.startLineNumber === ret.endLineNumber) {\n            const minColumn = model.getLineFirstNonWhitespaceColumn(rawMarker.startLineNumber);\n            if (minColumn < ret.endColumn) {\n                ret = new Range(ret.startLineNumber, minColumn, ret.endLineNumber, ret.endColumn);\n                rawMarker.startColumn = minColumn;\n            }\n        }\n        return ret;\n    }\n    _createDecorationOption(marker) {\n        let className;\n        let color = undefined;\n        let zIndex;\n        let inlineClassName = undefined;\n        let minimap;\n        switch (marker.severity) {\n            case MarkerSeverity.Hint:\n                if (this._hasMarkerTag(marker, 2 /* MarkerTag.Deprecated */)) {\n                    className = undefined;\n                }\n                else if (this._hasMarkerTag(marker, 1 /* MarkerTag.Unnecessary */)) {\n                    className = \"squiggly-unnecessary\" /* ClassName.EditorUnnecessaryDecoration */;\n                }\n                else {\n                    className = \"squiggly-hint\" /* ClassName.EditorHintDecoration */;\n                }\n                zIndex = 0;\n                break;\n            case MarkerSeverity.Info:\n                className = \"squiggly-info\" /* ClassName.EditorInfoDecoration */;\n                color = themeColorFromId(overviewRulerInfo);\n                zIndex = 10;\n                minimap = {\n                    color: themeColorFromId(minimapInfo),\n                    position: 1 /* MinimapPosition.Inline */\n                };\n                break;\n            case MarkerSeverity.Warning:\n                className = \"squiggly-warning\" /* ClassName.EditorWarningDecoration */;\n                color = themeColorFromId(overviewRulerWarning);\n                zIndex = 20;\n                minimap = {\n                    color: themeColorFromId(minimapWarning),\n                    position: 1 /* MinimapPosition.Inline */\n                };\n                break;\n            case MarkerSeverity.Error:\n            default:\n                className = \"squiggly-error\" /* ClassName.EditorErrorDecoration */;\n                color = themeColorFromId(overviewRulerError);\n                zIndex = 30;\n                minimap = {\n                    color: themeColorFromId(minimapError),\n                    position: 1 /* MinimapPosition.Inline */\n                };\n                break;\n        }\n        if (marker.tags) {\n            if (marker.tags.indexOf(1 /* MarkerTag.Unnecessary */) !== -1) {\n                inlineClassName = \"squiggly-inline-unnecessary\" /* ClassName.EditorUnnecessaryInlineDecoration */;\n            }\n            if (marker.tags.indexOf(2 /* MarkerTag.Deprecated */) !== -1) {\n                inlineClassName = \"squiggly-inline-deprecated\" /* ClassName.EditorDeprecatedInlineDecoration */;\n            }\n        }\n        return {\n            description: 'marker-decoration',\n            stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */,\n            className,\n            showIfCollapsed: true,\n            overviewRuler: {\n                color,\n                position: OverviewRulerLane.Right\n            },\n            minimap,\n            zIndex,\n            inlineClassName,\n        };\n    }\n    _hasMarkerTag(marker, tag) {\n        if (marker.tags) {\n            return marker.tags.indexOf(tag) >= 0;\n        }\n        return false;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const IModelService = createDecorator('modelService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar ModelService_1;\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { TextModel } from '../model/textModel.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { ITextResourcePropertiesService } from './textResourceConfiguration.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { StringSHA1 } from '../../../base/common/hash.js';\nimport { isEditStackElement } from '../model/editStack.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { equals } from '../../../base/common/objects.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nfunction MODEL_ID(resource) {\n    return resource.toString();\n}\nclass ModelData {\n    constructor(model, onWillDispose, onDidChangeLanguage) {\n        this.model = model;\n        this._modelEventListeners = new DisposableStore();\n        this.model = model;\n        this._modelEventListeners.add(model.onWillDispose(() => onWillDispose(model)));\n        this._modelEventListeners.add(model.onDidChangeLanguage((e) => onDidChangeLanguage(model, e)));\n    }\n    dispose() {\n        this._modelEventListeners.dispose();\n    }\n}\nconst DEFAULT_EOL = (platform.isLinux || platform.isMacintosh) ? 1 /* DefaultEndOfLine.LF */ : 2 /* DefaultEndOfLine.CRLF */;\nclass DisposedModelInfo {\n    constructor(uri, initialUndoRedoSnapshot, time, sharesUndoRedoStack, heapSize, sha1, versionId, alternativeVersionId) {\n        this.uri = uri;\n        this.initialUndoRedoSnapshot = initialUndoRedoSnapshot;\n        this.time = time;\n        this.sharesUndoRedoStack = sharesUndoRedoStack;\n        this.heapSize = heapSize;\n        this.sha1 = sha1;\n        this.versionId = versionId;\n        this.alternativeVersionId = alternativeVersionId;\n    }\n}\nlet ModelService = ModelService_1 = class ModelService extends Disposable {\n    constructor(_configurationService, _resourcePropertiesService, _undoRedoService, _languageService, _languageConfigurationService) {\n        super();\n        this._configurationService = _configurationService;\n        this._resourcePropertiesService = _resourcePropertiesService;\n        this._undoRedoService = _undoRedoService;\n        this._languageService = _languageService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._onModelAdded = this._register(new Emitter());\n        this.onModelAdded = this._onModelAdded.event;\n        this._onModelRemoved = this._register(new Emitter());\n        this.onModelRemoved = this._onModelRemoved.event;\n        this._onModelModeChanged = this._register(new Emitter());\n        this.onModelLanguageChanged = this._onModelModeChanged.event;\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n        this._models = {};\n        this._disposedModels = new Map();\n        this._disposedModelsHeapSize = 0;\n        this._register(this._configurationService.onDidChangeConfiguration(e => this._updateModelOptions(e)));\n        this._updateModelOptions(undefined);\n    }\n    static _readModelOptions(config, isForSimpleWidget) {\n        var _a;\n        let tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n        if (config.editor && typeof config.editor.tabSize !== 'undefined') {\n            const parsedTabSize = parseInt(config.editor.tabSize, 10);\n            if (!isNaN(parsedTabSize)) {\n                tabSize = parsedTabSize;\n            }\n            if (tabSize < 1) {\n                tabSize = 1;\n            }\n        }\n        let indentSize = 'tabSize';\n        if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n            const parsedIndentSize = parseInt(config.editor.indentSize, 10);\n            if (!isNaN(parsedIndentSize)) {\n                indentSize = Math.max(parsedIndentSize, 1);\n            }\n        }\n        let insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n        if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n            insertSpaces = (config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces));\n        }\n        let newDefaultEOL = DEFAULT_EOL;\n        const eol = config.eol;\n        if (eol === '\\r\\n') {\n            newDefaultEOL = 2 /* DefaultEndOfLine.CRLF */;\n        }\n        else if (eol === '\\n') {\n            newDefaultEOL = 1 /* DefaultEndOfLine.LF */;\n        }\n        let trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n        if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n            trimAutoWhitespace = (config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace));\n        }\n        let detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n        if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n            detectIndentation = (config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation));\n        }\n        let largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n        if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n            largeFileOptimizations = (config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations));\n        }\n        let bracketPairColorizationOptions = EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions;\n        if (((_a = config.editor) === null || _a === void 0 ? void 0 : _a.bracketPairColorization) && typeof config.editor.bracketPairColorization === 'object') {\n            bracketPairColorizationOptions = {\n                enabled: !!config.editor.bracketPairColorization.enabled,\n                independentColorPoolPerBracketType: !!config.editor.bracketPairColorization.independentColorPoolPerBracketType\n            };\n        }\n        return {\n            isForSimpleWidget: isForSimpleWidget,\n            tabSize: tabSize,\n            indentSize: indentSize,\n            insertSpaces: insertSpaces,\n            detectIndentation: detectIndentation,\n            defaultEOL: newDefaultEOL,\n            trimAutoWhitespace: trimAutoWhitespace,\n            largeFileOptimizations: largeFileOptimizations,\n            bracketPairColorizationOptions\n        };\n    }\n    _getEOL(resource, language) {\n        if (resource) {\n            return this._resourcePropertiesService.getEOL(resource, language);\n        }\n        const eol = this._configurationService.getValue('files.eol', { overrideIdentifier: language });\n        if (eol && typeof eol === 'string' && eol !== 'auto') {\n            return eol;\n        }\n        return platform.OS === 3 /* platform.OperatingSystem.Linux */ || platform.OS === 2 /* platform.OperatingSystem.Macintosh */ ? '\\n' : '\\r\\n';\n    }\n    _shouldRestoreUndoStack() {\n        const result = this._configurationService.getValue('files.restoreUndoStack');\n        if (typeof result === 'boolean') {\n            return result;\n        }\n        return true;\n    }\n    getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget) {\n        const language = (typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId);\n        let creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n        if (!creationOptions) {\n            const editor = this._configurationService.getValue('editor', { overrideIdentifier: language, resource });\n            const eol = this._getEOL(resource, language);\n            creationOptions = ModelService_1._readModelOptions({ editor, eol }, isForSimpleWidget);\n            this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n        }\n        return creationOptions;\n    }\n    _updateModelOptions(e) {\n        const oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n        // Update options on all models\n        const keys = Object.keys(this._models);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const modelId = keys[i];\n            const modelData = this._models[modelId];\n            const language = modelData.model.getLanguageId();\n            const uri = modelData.model.uri;\n            if (e && !e.affectsConfiguration('editor', { overrideIdentifier: language, resource: uri }) && !e.affectsConfiguration('files.eol', { overrideIdentifier: language, resource: uri })) {\n                continue; // perf: skip if this model is not affected by configuration change\n            }\n            const oldOptions = oldOptionsByLanguageAndResource[language + uri];\n            const newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n            ModelService_1._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n        }\n    }\n    static _setModelOptionsForModel(model, newOptions, currentOptions) {\n        if (currentOptions && currentOptions.defaultEOL !== newOptions.defaultEOL && model.getLineCount() === 1) {\n            model.setEOL(newOptions.defaultEOL === 1 /* DefaultEndOfLine.LF */ ? 0 /* EndOfLineSequence.LF */ : 1 /* EndOfLineSequence.CRLF */);\n        }\n        if (currentOptions\n            && (currentOptions.detectIndentation === newOptions.detectIndentation)\n            && (currentOptions.insertSpaces === newOptions.insertSpaces)\n            && (currentOptions.tabSize === newOptions.tabSize)\n            && (currentOptions.indentSize === newOptions.indentSize)\n            && (currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace)\n            && equals(currentOptions.bracketPairColorizationOptions, newOptions.bracketPairColorizationOptions)) {\n            // Same indent opts, no need to touch the model\n            return;\n        }\n        if (newOptions.detectIndentation) {\n            model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n            model.updateOptions({\n                trimAutoWhitespace: newOptions.trimAutoWhitespace,\n                bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n            });\n        }\n        else {\n            model.updateOptions({\n                insertSpaces: newOptions.insertSpaces,\n                tabSize: newOptions.tabSize,\n                indentSize: newOptions.indentSize,\n                trimAutoWhitespace: newOptions.trimAutoWhitespace,\n                bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n            });\n        }\n    }\n    // --- begin IModelService\n    _insertDisposedModel(disposedModelData) {\n        this._disposedModels.set(MODEL_ID(disposedModelData.uri), disposedModelData);\n        this._disposedModelsHeapSize += disposedModelData.heapSize;\n    }\n    _removeDisposedModel(resource) {\n        const disposedModelData = this._disposedModels.get(MODEL_ID(resource));\n        if (disposedModelData) {\n            this._disposedModelsHeapSize -= disposedModelData.heapSize;\n        }\n        this._disposedModels.delete(MODEL_ID(resource));\n        return disposedModelData;\n    }\n    _ensureDisposedModelsHeapSize(maxModelsHeapSize) {\n        if (this._disposedModelsHeapSize > maxModelsHeapSize) {\n            // we must remove some old undo stack elements to free up some memory\n            const disposedModels = [];\n            this._disposedModels.forEach(entry => {\n                if (!entry.sharesUndoRedoStack) {\n                    disposedModels.push(entry);\n                }\n            });\n            disposedModels.sort((a, b) => a.time - b.time);\n            while (disposedModels.length > 0 && this._disposedModelsHeapSize > maxModelsHeapSize) {\n                const disposedModel = disposedModels.shift();\n                this._removeDisposedModel(disposedModel.uri);\n                if (disposedModel.initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(disposedModel.initialUndoRedoSnapshot);\n                }\n            }\n        }\n    }\n    _createModelData(value, languageIdOrSelection, resource, isForSimpleWidget) {\n        // create & save the model\n        const options = this.getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget);\n        const model = new TextModel(value, languageIdOrSelection, options, resource, this._undoRedoService, this._languageService, this._languageConfigurationService);\n        if (resource && this._disposedModels.has(MODEL_ID(resource))) {\n            const disposedModelData = this._removeDisposedModel(resource);\n            const elements = this._undoRedoService.getElements(resource);\n            const sha1Computer = this._getSHA1Computer();\n            const sha1IsEqual = (sha1Computer.canComputeSHA1(model)\n                ? sha1Computer.computeSHA1(model) === disposedModelData.sha1\n                : false);\n            if (sha1IsEqual || disposedModelData.sharesUndoRedoStack) {\n                for (const element of elements.past) {\n                    if (isEditStackElement(element) && element.matchesResource(resource)) {\n                        element.setModel(model);\n                    }\n                }\n                for (const element of elements.future) {\n                    if (isEditStackElement(element) && element.matchesResource(resource)) {\n                        element.setModel(model);\n                    }\n                }\n                this._undoRedoService.setElementsValidFlag(resource, true, (element) => (isEditStackElement(element) && element.matchesResource(resource)));\n                if (sha1IsEqual) {\n                    model._overwriteVersionId(disposedModelData.versionId);\n                    model._overwriteAlternativeVersionId(disposedModelData.alternativeVersionId);\n                    model._overwriteInitialUndoRedoSnapshot(disposedModelData.initialUndoRedoSnapshot);\n                }\n            }\n            else {\n                if (disposedModelData.initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(disposedModelData.initialUndoRedoSnapshot);\n                }\n            }\n        }\n        const modelId = MODEL_ID(model.uri);\n        if (this._models[modelId]) {\n            // There already exists a model with this id => this is a programmer error\n            throw new Error('ModelService: Cannot add model because it already exists!');\n        }\n        const modelData = new ModelData(model, (model) => this._onWillDispose(model), (model, e) => this._onDidChangeLanguage(model, e));\n        this._models[modelId] = modelData;\n        return modelData;\n    }\n    createModel(value, languageSelection, resource, isForSimpleWidget = false) {\n        let modelData;\n        if (languageSelection) {\n            modelData = this._createModelData(value, languageSelection, resource, isForSimpleWidget);\n        }\n        else {\n            modelData = this._createModelData(value, PLAINTEXT_LANGUAGE_ID, resource, isForSimpleWidget);\n        }\n        this._onModelAdded.fire(modelData.model);\n        return modelData.model;\n    }\n    getModels() {\n        const ret = [];\n        const keys = Object.keys(this._models);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const modelId = keys[i];\n            ret.push(this._models[modelId].model);\n        }\n        return ret;\n    }\n    getModel(resource) {\n        const modelId = MODEL_ID(resource);\n        const modelData = this._models[modelId];\n        if (!modelData) {\n            return null;\n        }\n        return modelData.model;\n    }\n    // --- end IModelService\n    _schemaShouldMaintainUndoRedoElements(resource) {\n        return (resource.scheme === Schemas.file\n            || resource.scheme === Schemas.vscodeRemote\n            || resource.scheme === Schemas.vscodeUserData\n            || resource.scheme === Schemas.vscodeNotebookCell\n            || resource.scheme === 'fake-fs' // for tests\n        );\n    }\n    _onWillDispose(model) {\n        const modelId = MODEL_ID(model.uri);\n        const modelData = this._models[modelId];\n        const sharesUndoRedoStack = (this._undoRedoService.getUriComparisonKey(model.uri) !== model.uri.toString());\n        let maintainUndoRedoStack = false;\n        let heapSize = 0;\n        if (sharesUndoRedoStack || (this._shouldRestoreUndoStack() && this._schemaShouldMaintainUndoRedoElements(model.uri))) {\n            const elements = this._undoRedoService.getElements(model.uri);\n            if (elements.past.length > 0 || elements.future.length > 0) {\n                for (const element of elements.past) {\n                    if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n                        maintainUndoRedoStack = true;\n                        heapSize += element.heapSize(model.uri);\n                        element.setModel(model.uri); // remove reference from text buffer instance\n                    }\n                }\n                for (const element of elements.future) {\n                    if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n                        maintainUndoRedoStack = true;\n                        heapSize += element.heapSize(model.uri);\n                        element.setModel(model.uri); // remove reference from text buffer instance\n                    }\n                }\n            }\n        }\n        const maxMemory = ModelService_1.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;\n        const sha1Computer = this._getSHA1Computer();\n        if (!maintainUndoRedoStack) {\n            if (!sharesUndoRedoStack) {\n                const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n                if (initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n                }\n            }\n        }\n        else if (!sharesUndoRedoStack && (heapSize > maxMemory || !sha1Computer.canComputeSHA1(model))) {\n            // the undo stack for this file would never fit in the configured memory or the file is very large, so don't bother with it.\n            const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n            if (initialUndoRedoSnapshot !== null) {\n                this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n            }\n        }\n        else {\n            this._ensureDisposedModelsHeapSize(maxMemory - heapSize);\n            // We only invalidate the elements, but they remain in the undo-redo service.\n            this._undoRedoService.setElementsValidFlag(model.uri, false, (element) => (isEditStackElement(element) && element.matchesResource(model.uri)));\n            this._insertDisposedModel(new DisposedModelInfo(model.uri, modelData.model.getInitialUndoRedoSnapshot(), Date.now(), sharesUndoRedoStack, heapSize, sha1Computer.computeSHA1(model), model.getVersionId(), model.getAlternativeVersionId()));\n        }\n        delete this._models[modelId];\n        modelData.dispose();\n        // clean up cache\n        delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageId() + model.uri];\n        this._onModelRemoved.fire(model);\n    }\n    _onDidChangeLanguage(model, e) {\n        const oldLanguageId = e.oldLanguage;\n        const newLanguageId = model.getLanguageId();\n        const oldOptions = this.getCreationOptions(oldLanguageId, model.uri, model.isForSimpleWidget);\n        const newOptions = this.getCreationOptions(newLanguageId, model.uri, model.isForSimpleWidget);\n        ModelService_1._setModelOptionsForModel(model, newOptions, oldOptions);\n        this._onModelModeChanged.fire({ model, oldLanguageId: oldLanguageId });\n    }\n    _getSHA1Computer() {\n        return new DefaultModelSHA1Computer();\n    }\n};\nModelService.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024;\nModelService = ModelService_1 = __decorate([\n    __param(0, IConfigurationService),\n    __param(1, ITextResourcePropertiesService),\n    __param(2, IUndoRedoService),\n    __param(3, ILanguageService),\n    __param(4, ILanguageConfigurationService)\n], ModelService);\nexport { ModelService };\nexport class DefaultModelSHA1Computer {\n    canComputeSHA1(model) {\n        return (model.getValueLength() <= DefaultModelSHA1Computer.MAX_MODEL_SIZE);\n    }\n    computeSHA1(model) {\n        // compute the sha1\n        const shaComputer = new StringSHA1();\n        const snapshot = model.createSnapshot();\n        let text;\n        while ((text = snapshot.read())) {\n            shaComputer.update(text);\n        }\n        return shaComputer.digest();\n    }\n}\nDefaultModelSHA1Computer.MAX_MODEL_SIZE = 10 * 1024 * 1024; // takes 200ms to compute a sha1 on a 10MB model on a new machine\n","import { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const ITextModelService = createDecorator('textModelService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport * as platform from '../../../base/common/platform.js';\nfunction reverseEndianness(arr) {\n    for (let i = 0, len = arr.length; i < len; i += 4) {\n        // flip bytes 0<->3 and 1<->2\n        const b0 = arr[i + 0];\n        const b1 = arr[i + 1];\n        const b2 = arr[i + 2];\n        const b3 = arr[i + 3];\n        arr[i + 0] = b3;\n        arr[i + 1] = b2;\n        arr[i + 2] = b1;\n        arr[i + 3] = b0;\n    }\n}\nfunction toLittleEndianBuffer(arr) {\n    const uint8Arr = new Uint8Array(arr.buffer, arr.byteOffset, arr.length * 4);\n    if (!platform.isLittleEndian()) {\n        // the byte order must be changed\n        reverseEndianness(uint8Arr);\n    }\n    return VSBuffer.wrap(uint8Arr);\n}\nexport function encodeSemanticTokensDto(semanticTokens) {\n    const dest = new Uint32Array(encodeSemanticTokensDtoSize(semanticTokens));\n    let offset = 0;\n    dest[offset++] = semanticTokens.id;\n    if (semanticTokens.type === 'full') {\n        dest[offset++] = 1 /* EncodedSemanticTokensType.Full */;\n        dest[offset++] = semanticTokens.data.length;\n        dest.set(semanticTokens.data, offset);\n        offset += semanticTokens.data.length;\n    }\n    else {\n        dest[offset++] = 2 /* EncodedSemanticTokensType.Delta */;\n        dest[offset++] = semanticTokens.deltas.length;\n        for (const delta of semanticTokens.deltas) {\n            dest[offset++] = delta.start;\n            dest[offset++] = delta.deleteCount;\n            if (delta.data) {\n                dest[offset++] = delta.data.length;\n                dest.set(delta.data, offset);\n                offset += delta.data.length;\n            }\n            else {\n                dest[offset++] = 0;\n            }\n        }\n    }\n    return toLittleEndianBuffer(dest);\n}\nfunction encodeSemanticTokensDtoSize(semanticTokens) {\n    let result = 0;\n    result += (+1 // id\n        + 1 // type\n    );\n    if (semanticTokens.type === 'full') {\n        result += (+1 // data length\n            + semanticTokens.data.length);\n    }\n    else {\n        result += (+1 // delta count\n        );\n        result += (+1 // start\n            + 1 // deleteCount\n            + 1 // data length\n        ) * semanticTokens.deltas.length;\n        for (const delta of semanticTokens.deltas) {\n            if (delta.data) {\n                result += delta.data.length;\n            }\n        }\n    }\n    return result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { countEOL } from '../core/eolCounter.js';\n/**\n * Represents sparse tokens over a contiguous range of lines.\n */\nexport class SparseMultilineTokens {\n    static create(startLineNumber, tokens) {\n        return new SparseMultilineTokens(startLineNumber, new SparseMultilineTokensStorage(tokens));\n    }\n    /**\n     * (Inclusive) start line number for these tokens.\n     */\n    get startLineNumber() {\n        return this._startLineNumber;\n    }\n    /**\n     * (Inclusive) end line number for these tokens.\n     */\n    get endLineNumber() {\n        return this._endLineNumber;\n    }\n    constructor(startLineNumber, tokens) {\n        this._startLineNumber = startLineNumber;\n        this._tokens = tokens;\n        this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n    }\n    toString() {\n        return this._tokens.toString(this._startLineNumber);\n    }\n    _updateEndLineNumber() {\n        this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n    }\n    isEmpty() {\n        return this._tokens.isEmpty();\n    }\n    getLineTokens(lineNumber) {\n        if (this._startLineNumber <= lineNumber && lineNumber <= this._endLineNumber) {\n            return this._tokens.getLineTokens(lineNumber - this._startLineNumber);\n        }\n        return null;\n    }\n    getRange() {\n        const deltaRange = this._tokens.getRange();\n        if (!deltaRange) {\n            return deltaRange;\n        }\n        return new Range(this._startLineNumber + deltaRange.startLineNumber, deltaRange.startColumn, this._startLineNumber + deltaRange.endLineNumber, deltaRange.endColumn);\n    }\n    removeTokens(range) {\n        const startLineIndex = range.startLineNumber - this._startLineNumber;\n        const endLineIndex = range.endLineNumber - this._startLineNumber;\n        this._startLineNumber += this._tokens.removeTokens(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n        this._updateEndLineNumber();\n    }\n    split(range) {\n        // split tokens to two:\n        // a) all the tokens before `range`\n        // b) all the tokens after `range`\n        const startLineIndex = range.startLineNumber - this._startLineNumber;\n        const endLineIndex = range.endLineNumber - this._startLineNumber;\n        const [a, b, bDeltaLine] = this._tokens.split(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n        return [new SparseMultilineTokens(this._startLineNumber, a), new SparseMultilineTokens(this._startLineNumber + bDeltaLine, b)];\n    }\n    applyEdit(range, text) {\n        const [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n        this.acceptEdit(range, eolCount, firstLineLength, lastLineLength, text.length > 0 ? text.charCodeAt(0) : 0 /* CharCode.Null */);\n    }\n    acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        this._acceptDeleteRange(range);\n        this._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength, lastLineLength, firstCharCode);\n        this._updateEndLineNumber();\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n            // Nothing to delete\n            return;\n        }\n        const firstLineIndex = range.startLineNumber - this._startLineNumber;\n        const lastLineIndex = range.endLineNumber - this._startLineNumber;\n        if (lastLineIndex < 0) {\n            // this deletion occurs entirely before this block, so we only need to adjust line numbers\n            const deletedLinesCount = lastLineIndex - firstLineIndex;\n            this._startLineNumber -= deletedLinesCount;\n            return;\n        }\n        const tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n        if (firstLineIndex >= tokenMaxDeltaLine + 1) {\n            // this deletion occurs entirely after this block, so there is nothing to do\n            return;\n        }\n        if (firstLineIndex < 0 && lastLineIndex >= tokenMaxDeltaLine + 1) {\n            // this deletion completely encompasses this block\n            this._startLineNumber = 0;\n            this._tokens.clear();\n            return;\n        }\n        if (firstLineIndex < 0) {\n            const deletedBefore = -firstLineIndex;\n            this._startLineNumber -= deletedBefore;\n            this._tokens.acceptDeleteRange(range.startColumn - 1, 0, 0, lastLineIndex, range.endColumn - 1);\n        }\n        else {\n            this._tokens.acceptDeleteRange(0, firstLineIndex, range.startColumn - 1, lastLineIndex, range.endColumn - 1);\n        }\n    }\n    _acceptInsertText(position, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        if (eolCount === 0 && firstLineLength === 0) {\n            // Nothing to insert\n            return;\n        }\n        const lineIndex = position.lineNumber - this._startLineNumber;\n        if (lineIndex < 0) {\n            // this insertion occurs before this block, so we only need to adjust line numbers\n            this._startLineNumber += eolCount;\n            return;\n        }\n        const tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n        if (lineIndex >= tokenMaxDeltaLine + 1) {\n            // this insertion occurs after this block, so there is nothing to do\n            return;\n        }\n        this._tokens.acceptInsertText(lineIndex, position.column - 1, eolCount, firstLineLength, lastLineLength, firstCharCode);\n    }\n}\nclass SparseMultilineTokensStorage {\n    constructor(tokens) {\n        this._tokens = tokens;\n        this._tokenCount = tokens.length / 4;\n    }\n    toString(startLineNumber) {\n        const pieces = [];\n        for (let i = 0; i < this._tokenCount; i++) {\n            pieces.push(`(${this._getDeltaLine(i) + startLineNumber},${this._getStartCharacter(i)}-${this._getEndCharacter(i)})`);\n        }\n        return `[${pieces.join(',')}]`;\n    }\n    getMaxDeltaLine() {\n        const tokenCount = this._getTokenCount();\n        if (tokenCount === 0) {\n            return -1;\n        }\n        return this._getDeltaLine(tokenCount - 1);\n    }\n    getRange() {\n        const tokenCount = this._getTokenCount();\n        if (tokenCount === 0) {\n            return null;\n        }\n        const startChar = this._getStartCharacter(0);\n        const maxDeltaLine = this._getDeltaLine(tokenCount - 1);\n        const endChar = this._getEndCharacter(tokenCount - 1);\n        return new Range(0, startChar + 1, maxDeltaLine, endChar + 1);\n    }\n    _getTokenCount() {\n        return this._tokenCount;\n    }\n    _getDeltaLine(tokenIndex) {\n        return this._tokens[4 * tokenIndex];\n    }\n    _getStartCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 1];\n    }\n    _getEndCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 2];\n    }\n    isEmpty() {\n        return (this._getTokenCount() === 0);\n    }\n    getLineTokens(deltaLine) {\n        let low = 0;\n        let high = this._getTokenCount() - 1;\n        while (low < high) {\n            const mid = low + Math.floor((high - low) / 2);\n            const midDeltaLine = this._getDeltaLine(mid);\n            if (midDeltaLine < deltaLine) {\n                low = mid + 1;\n            }\n            else if (midDeltaLine > deltaLine) {\n                high = mid - 1;\n            }\n            else {\n                let min = mid;\n                while (min > low && this._getDeltaLine(min - 1) === deltaLine) {\n                    min--;\n                }\n                let max = mid;\n                while (max < high && this._getDeltaLine(max + 1) === deltaLine) {\n                    max++;\n                }\n                return new SparseLineTokens(this._tokens.subarray(4 * min, 4 * max + 4));\n            }\n        }\n        if (this._getDeltaLine(low) === deltaLine) {\n            return new SparseLineTokens(this._tokens.subarray(4 * low, 4 * low + 4));\n        }\n        return null;\n    }\n    clear() {\n        this._tokenCount = 0;\n    }\n    removeTokens(startDeltaLine, startChar, endDeltaLine, endChar) {\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        let newTokenCount = 0;\n        let hasDeletedTokens = false;\n        let firstDeltaLine = 0;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            const tokenDeltaLine = tokens[srcOffset];\n            const tokenStartCharacter = tokens[srcOffset + 1];\n            const tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))\n                && (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n                hasDeletedTokens = true;\n            }\n            else {\n                if (newTokenCount === 0) {\n                    firstDeltaLine = tokenDeltaLine;\n                }\n                if (hasDeletedTokens) {\n                    // must move the token to the left\n                    const destOffset = 4 * newTokenCount;\n                    tokens[destOffset] = tokenDeltaLine - firstDeltaLine;\n                    tokens[destOffset + 1] = tokenStartCharacter;\n                    tokens[destOffset + 2] = tokenEndCharacter;\n                    tokens[destOffset + 3] = tokenMetadata;\n                }\n                newTokenCount++;\n            }\n        }\n        this._tokenCount = newTokenCount;\n        return firstDeltaLine;\n    }\n    split(startDeltaLine, startChar, endDeltaLine, endChar) {\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        const aTokens = [];\n        const bTokens = [];\n        let destTokens = aTokens;\n        let destOffset = 0;\n        let destFirstDeltaLine = 0;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            const tokenDeltaLine = tokens[srcOffset];\n            const tokenStartCharacter = tokens[srcOffset + 1];\n            const tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))) {\n                if ((tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n                    // this token is touching the range\n                    continue;\n                }\n                else {\n                    // this token is after the range\n                    if (destTokens !== bTokens) {\n                        // this token is the first token after the range\n                        destTokens = bTokens;\n                        destOffset = 0;\n                        destFirstDeltaLine = tokenDeltaLine;\n                    }\n                }\n            }\n            destTokens[destOffset++] = tokenDeltaLine - destFirstDeltaLine;\n            destTokens[destOffset++] = tokenStartCharacter;\n            destTokens[destOffset++] = tokenEndCharacter;\n            destTokens[destOffset++] = tokenMetadata;\n        }\n        return [new SparseMultilineTokensStorage(new Uint32Array(aTokens)), new SparseMultilineTokensStorage(new Uint32Array(bTokens)), destFirstDeltaLine];\n    }\n    acceptDeleteRange(horizontalShiftForFirstLineTokens, startDeltaLine, startCharacter, endDeltaLine, endCharacter) {\n        // This is a bit complex, here are the cases I used to think about this:\n        //\n        // 1. The token starts before the deletion range\n        // 1a. The token is completely before the deletion range\n        //               -----------\n        //                          xxxxxxxxxxx\n        // 1b. The token starts before, the deletion range ends after the token\n        //               -----------\n        //                      xxxxxxxxxxx\n        // 1c. The token starts before, the deletion range ends precisely with the token\n        //               ---------------\n        //                      xxxxxxxx\n        // 1d. The token starts before, the deletion range is inside the token\n        //               ---------------\n        //                    xxxxx\n        //\n        // 2. The token starts at the same position with the deletion range\n        // 2a. The token starts at the same position, and ends inside the deletion range\n        //               -------\n        //               xxxxxxxxxxx\n        // 2b. The token starts at the same position, and ends at the same position as the deletion range\n        //               ----------\n        //               xxxxxxxxxx\n        // 2c. The token starts at the same position, and ends after the deletion range\n        //               -------------\n        //               xxxxxxx\n        //\n        // 3. The token starts inside the deletion range\n        // 3a. The token is inside the deletion range\n        //                -------\n        //             xxxxxxxxxxxxx\n        // 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n        //                ----------\n        //             xxxxxxxxxxxxx\n        // 3c. The token starts inside the deletion range, and ends after the deletion range\n        //                ------------\n        //             xxxxxxxxxxx\n        //\n        // 4. The token starts after the deletion range\n        //                  -----------\n        //          xxxxxxxx\n        //\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        const deletedLineCount = (endDeltaLine - startDeltaLine);\n        let newTokenCount = 0;\n        let hasDeletedTokens = false;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            let tokenDeltaLine = tokens[srcOffset];\n            let tokenStartCharacter = tokens[srcOffset + 1];\n            let tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if (tokenDeltaLine < startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter <= startCharacter)) {\n                // 1a. The token is completely before the deletion range\n                // => nothing to do\n                newTokenCount++;\n                continue;\n            }\n            else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter < startCharacter) {\n                // 1b, 1c, 1d\n                // => the token survives, but it needs to shrink\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 1d. The token starts before, the deletion range is inside the token\n                    // => the token shrinks by the deletion character count\n                    tokenEndCharacter -= (endCharacter - startCharacter);\n                }\n                else {\n                    // 1b. The token starts before, the deletion range ends after the token\n                    // 1c. The token starts before, the deletion range ends precisely with the token\n                    // => the token shrinks its ending to the deletion start\n                    tokenEndCharacter = startCharacter;\n                }\n            }\n            else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter === startCharacter) {\n                // 2a, 2b, 2c\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 2c. The token starts at the same position, and ends after the deletion range\n                    // => the token shrinks by the deletion character count\n                    tokenEndCharacter -= (endCharacter - startCharacter);\n                }\n                else {\n                    // 2a. The token starts at the same position, and ends inside the deletion range\n                    // 2b. The token starts at the same position, and ends at the same position as the deletion range\n                    // => the token is deleted\n                    hasDeletedTokens = true;\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter < endCharacter)) {\n                // 3a, 3b, 3c\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 3c. The token starts inside the deletion range, and ends after the deletion range\n                    // => the token moves to continue right after the deletion\n                    tokenDeltaLine = startDeltaLine;\n                    tokenStartCharacter = startCharacter;\n                    tokenEndCharacter = tokenStartCharacter + (tokenEndCharacter - endCharacter);\n                }\n                else {\n                    // 3a. The token is inside the deletion range\n                    // 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n                    // => the token is deleted\n                    hasDeletedTokens = true;\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine > endDeltaLine) {\n                // 4. (partial) The token starts after the deletion range, on a line below...\n                if (deletedLineCount === 0 && !hasDeletedTokens) {\n                    // early stop, there is no need to walk all the tokens and do nothing...\n                    newTokenCount = tokenCount;\n                    break;\n                }\n                tokenDeltaLine -= deletedLineCount;\n            }\n            else if (tokenDeltaLine === endDeltaLine && tokenStartCharacter >= endCharacter) {\n                // 4. (continued) The token starts after the deletion range, on the last line where a deletion occurs\n                if (horizontalShiftForFirstLineTokens && tokenDeltaLine === 0) {\n                    tokenStartCharacter += horizontalShiftForFirstLineTokens;\n                    tokenEndCharacter += horizontalShiftForFirstLineTokens;\n                }\n                tokenDeltaLine -= deletedLineCount;\n                tokenStartCharacter -= (endCharacter - startCharacter);\n                tokenEndCharacter -= (endCharacter - startCharacter);\n            }\n            else {\n                throw new Error(`Not possible!`);\n            }\n            const destOffset = 4 * newTokenCount;\n            tokens[destOffset] = tokenDeltaLine;\n            tokens[destOffset + 1] = tokenStartCharacter;\n            tokens[destOffset + 2] = tokenEndCharacter;\n            tokens[destOffset + 3] = tokenMetadata;\n            newTokenCount++;\n        }\n        this._tokenCount = newTokenCount;\n    }\n    acceptInsertText(deltaLine, character, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        // Here are the cases I used to think about this:\n        //\n        // 1. The token is completely before the insertion point\n        //            -----------   |\n        // 2. The token ends precisely at the insertion point\n        //            -----------|\n        // 3. The token contains the insertion point\n        //            -----|------\n        // 4. The token starts precisely at the insertion point\n        //            |-----------\n        // 5. The token is completely after the insertion point\n        //            |   -----------\n        //\n        const isInsertingPreciselyOneWordCharacter = (eolCount === 0\n            && firstLineLength === 1\n            && ((firstCharCode >= 48 /* CharCode.Digit0 */ && firstCharCode <= 57 /* CharCode.Digit9 */)\n                || (firstCharCode >= 65 /* CharCode.A */ && firstCharCode <= 90 /* CharCode.Z */)\n                || (firstCharCode >= 97 /* CharCode.a */ && firstCharCode <= 122 /* CharCode.z */)));\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        for (let i = 0; i < tokenCount; i++) {\n            const offset = 4 * i;\n            let tokenDeltaLine = tokens[offset];\n            let tokenStartCharacter = tokens[offset + 1];\n            let tokenEndCharacter = tokens[offset + 2];\n            if (tokenDeltaLine < deltaLine || (tokenDeltaLine === deltaLine && tokenEndCharacter < character)) {\n                // 1. The token is completely before the insertion point\n                // => nothing to do\n                continue;\n            }\n            else if (tokenDeltaLine === deltaLine && tokenEndCharacter === character) {\n                // 2. The token ends precisely at the insertion point\n                // => expand the end character only if inserting precisely one character that is a word character\n                if (isInsertingPreciselyOneWordCharacter) {\n                    tokenEndCharacter += 1;\n                }\n                else {\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine === deltaLine && tokenStartCharacter < character && character < tokenEndCharacter) {\n                // 3. The token contains the insertion point\n                if (eolCount === 0) {\n                    // => just expand the end character\n                    tokenEndCharacter += firstLineLength;\n                }\n                else {\n                    // => cut off the token\n                    tokenEndCharacter = character;\n                }\n            }\n            else {\n                // 4. or 5.\n                if (tokenDeltaLine === deltaLine && tokenStartCharacter === character) {\n                    // 4. The token starts precisely at the insertion point\n                    // => grow the token (by keeping its start constant) only if inserting precisely one character that is a word character\n                    // => otherwise behave as in case 5.\n                    if (isInsertingPreciselyOneWordCharacter) {\n                        continue;\n                    }\n                }\n                // => the token must move and keep its size constant\n                if (tokenDeltaLine === deltaLine) {\n                    tokenDeltaLine += eolCount;\n                    // this token is on the line where the insertion is taking place\n                    if (eolCount === 0) {\n                        tokenStartCharacter += firstLineLength;\n                        tokenEndCharacter += firstLineLength;\n                    }\n                    else {\n                        const tokenLength = tokenEndCharacter - tokenStartCharacter;\n                        tokenStartCharacter = lastLineLength + (tokenStartCharacter - character);\n                        tokenEndCharacter = tokenStartCharacter + tokenLength;\n                    }\n                }\n                else {\n                    tokenDeltaLine += eolCount;\n                }\n            }\n            tokens[offset] = tokenDeltaLine;\n            tokens[offset + 1] = tokenStartCharacter;\n            tokens[offset + 2] = tokenEndCharacter;\n        }\n    }\n}\nexport class SparseLineTokens {\n    constructor(tokens) {\n        this._tokens = tokens;\n    }\n    getCount() {\n        return this._tokens.length / 4;\n    }\n    getStartCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 1];\n    }\n    getEndCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 2];\n    }\n    getMetadata(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 3];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nimport { ILogService, LogLevel } from '../../../platform/log/common/log.js';\nimport { SparseMultilineTokens } from '../tokens/sparseMultilineTokens.js';\nimport { ILanguageService } from '../languages/language.js';\nlet SemanticTokensProviderStyling = class SemanticTokensProviderStyling {\n    constructor(_legend, _themeService, _languageService, _logService) {\n        this._legend = _legend;\n        this._themeService = _themeService;\n        this._languageService = _languageService;\n        this._logService = _logService;\n        this._hasWarnedOverlappingTokens = false;\n        this._hasWarnedInvalidLengthTokens = false;\n        this._hasWarnedInvalidEditStart = false;\n        this._hashTable = new HashTable();\n    }\n    getMetadata(tokenTypeIndex, tokenModifierSet, languageId) {\n        const encodedLanguageId = this._languageService.languageIdCodec.encodeLanguageId(languageId);\n        const entry = this._hashTable.get(tokenTypeIndex, tokenModifierSet, encodedLanguageId);\n        let metadata;\n        if (entry) {\n            metadata = entry.metadata;\n            if (this._logService.getLevel() === LogLevel.Trace) {\n                this._logService.trace(`SemanticTokensProviderStyling [CACHED] ${tokenTypeIndex} / ${tokenModifierSet}: foreground ${TokenMetadata.getForeground(metadata)}, fontStyle ${TokenMetadata.getFontStyle(metadata).toString(2)}`);\n            }\n        }\n        else {\n            let tokenType = this._legend.tokenTypes[tokenTypeIndex];\n            const tokenModifiers = [];\n            if (tokenType) {\n                let modifierSet = tokenModifierSet;\n                for (let modifierIndex = 0; modifierSet > 0 && modifierIndex < this._legend.tokenModifiers.length; modifierIndex++) {\n                    if (modifierSet & 1) {\n                        tokenModifiers.push(this._legend.tokenModifiers[modifierIndex]);\n                    }\n                    modifierSet = modifierSet >> 1;\n                }\n                if (modifierSet > 0 && this._logService.getLevel() === LogLevel.Trace) {\n                    this._logService.trace(`SemanticTokensProviderStyling: unknown token modifier index: ${tokenModifierSet.toString(2)} for legend: ${JSON.stringify(this._legend.tokenModifiers)}`);\n                    tokenModifiers.push('not-in-legend');\n                }\n                const tokenStyle = this._themeService.getColorTheme().getTokenStyleMetadata(tokenType, tokenModifiers, languageId);\n                if (typeof tokenStyle === 'undefined') {\n                    metadata = 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */;\n                }\n                else {\n                    metadata = 0;\n                    if (typeof tokenStyle.italic !== 'undefined') {\n                        const italicBit = (tokenStyle.italic ? 1 /* FontStyle.Italic */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= italicBit | 1 /* MetadataConsts.SEMANTIC_USE_ITALIC */;\n                    }\n                    if (typeof tokenStyle.bold !== 'undefined') {\n                        const boldBit = (tokenStyle.bold ? 2 /* FontStyle.Bold */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= boldBit | 2 /* MetadataConsts.SEMANTIC_USE_BOLD */;\n                    }\n                    if (typeof tokenStyle.underline !== 'undefined') {\n                        const underlineBit = (tokenStyle.underline ? 4 /* FontStyle.Underline */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= underlineBit | 4 /* MetadataConsts.SEMANTIC_USE_UNDERLINE */;\n                    }\n                    if (typeof tokenStyle.strikethrough !== 'undefined') {\n                        const strikethroughBit = (tokenStyle.strikethrough ? 8 /* FontStyle.Strikethrough */ : 0) << 11 /* MetadataConsts.FONT_STYLE_OFFSET */;\n                        metadata |= strikethroughBit | 8 /* MetadataConsts.SEMANTIC_USE_STRIKETHROUGH */;\n                    }\n                    if (tokenStyle.foreground) {\n                        const foregroundBits = (tokenStyle.foreground) << 15 /* MetadataConsts.FOREGROUND_OFFSET */;\n                        metadata |= foregroundBits | 16 /* MetadataConsts.SEMANTIC_USE_FOREGROUND */;\n                    }\n                    if (metadata === 0) {\n                        // Nothing!\n                        metadata = 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */;\n                    }\n                }\n            }\n            else {\n                if (this._logService.getLevel() === LogLevel.Trace) {\n                    this._logService.trace(`SemanticTokensProviderStyling: unknown token type index: ${tokenTypeIndex} for legend: ${JSON.stringify(this._legend.tokenTypes)}`);\n                }\n                metadata = 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */;\n                tokenType = 'not-in-legend';\n            }\n            this._hashTable.add(tokenTypeIndex, tokenModifierSet, encodedLanguageId, metadata);\n            if (this._logService.getLevel() === LogLevel.Trace) {\n                this._logService.trace(`SemanticTokensProviderStyling ${tokenTypeIndex} (${tokenType}) / ${tokenModifierSet} (${tokenModifiers.join(' ')}): foreground ${TokenMetadata.getForeground(metadata)}, fontStyle ${TokenMetadata.getFontStyle(metadata).toString(2)}`);\n            }\n        }\n        return metadata;\n    }\n    warnOverlappingSemanticTokens(lineNumber, startColumn) {\n        if (!this._hasWarnedOverlappingTokens) {\n            this._hasWarnedOverlappingTokens = true;\n            this._logService.warn(`Overlapping semantic tokens detected at lineNumber ${lineNumber}, column ${startColumn}`);\n        }\n    }\n    warnInvalidLengthSemanticTokens(lineNumber, startColumn) {\n        if (!this._hasWarnedInvalidLengthTokens) {\n            this._hasWarnedInvalidLengthTokens = true;\n            this._logService.warn(`Semantic token with invalid length detected at lineNumber ${lineNumber}, column ${startColumn}`);\n        }\n    }\n    warnInvalidEditStart(previousResultId, resultId, editIndex, editStart, maxExpectedStart) {\n        if (!this._hasWarnedInvalidEditStart) {\n            this._hasWarnedInvalidEditStart = true;\n            this._logService.warn(`Invalid semantic tokens edit detected (previousResultId: ${previousResultId}, resultId: ${resultId}) at edit #${editIndex}: The provided start offset ${editStart} is outside the previous data (length ${maxExpectedStart}).`);\n        }\n    }\n};\nSemanticTokensProviderStyling = __decorate([\n    __param(1, IThemeService),\n    __param(2, ILanguageService),\n    __param(3, ILogService)\n], SemanticTokensProviderStyling);\nexport { SemanticTokensProviderStyling };\nexport function toMultilineTokens2(tokens, styling, languageId) {\n    const srcData = tokens.data;\n    const tokenCount = (tokens.data.length / 5) | 0;\n    const tokensPerArea = Math.max(Math.ceil(tokenCount / 1024 /* SemanticColoringConstants.DesiredMaxAreas */), 400 /* SemanticColoringConstants.DesiredTokensPerArea */);\n    const result = [];\n    let tokenIndex = 0;\n    let lastLineNumber = 1;\n    let lastStartCharacter = 0;\n    while (tokenIndex < tokenCount) {\n        const tokenStartIndex = tokenIndex;\n        let tokenEndIndex = Math.min(tokenStartIndex + tokensPerArea, tokenCount);\n        // Keep tokens on the same line in the same area...\n        if (tokenEndIndex < tokenCount) {\n            let smallTokenEndIndex = tokenEndIndex;\n            while (smallTokenEndIndex - 1 > tokenStartIndex && srcData[5 * smallTokenEndIndex] === 0) {\n                smallTokenEndIndex--;\n            }\n            if (smallTokenEndIndex - 1 === tokenStartIndex) {\n                // there are so many tokens on this line that our area would be empty, we must now go right\n                let bigTokenEndIndex = tokenEndIndex;\n                while (bigTokenEndIndex + 1 < tokenCount && srcData[5 * bigTokenEndIndex] === 0) {\n                    bigTokenEndIndex++;\n                }\n                tokenEndIndex = bigTokenEndIndex;\n            }\n            else {\n                tokenEndIndex = smallTokenEndIndex;\n            }\n        }\n        let destData = new Uint32Array((tokenEndIndex - tokenStartIndex) * 4);\n        let destOffset = 0;\n        let areaLine = 0;\n        let prevLineNumber = 0;\n        let prevEndCharacter = 0;\n        while (tokenIndex < tokenEndIndex) {\n            const srcOffset = 5 * tokenIndex;\n            const deltaLine = srcData[srcOffset];\n            const deltaCharacter = srcData[srcOffset + 1];\n            // Casting both `lineNumber`, `startCharacter` and `endCharacter` here to uint32 using `|0`\n            // to validate below with the actual values that will be inserted in the Uint32Array result\n            const lineNumber = (lastLineNumber + deltaLine) | 0;\n            const startCharacter = (deltaLine === 0 ? (lastStartCharacter + deltaCharacter) | 0 : deltaCharacter);\n            const length = srcData[srcOffset + 2];\n            const endCharacter = (startCharacter + length) | 0;\n            const tokenTypeIndex = srcData[srcOffset + 3];\n            const tokenModifierSet = srcData[srcOffset + 4];\n            if (endCharacter <= startCharacter) {\n                // this token is invalid (most likely a negative length casted to uint32)\n                styling.warnInvalidLengthSemanticTokens(lineNumber, startCharacter + 1);\n            }\n            else if (prevLineNumber === lineNumber && prevEndCharacter > startCharacter) {\n                // this token overlaps with the previous token\n                styling.warnOverlappingSemanticTokens(lineNumber, startCharacter + 1);\n            }\n            else {\n                const metadata = styling.getMetadata(tokenTypeIndex, tokenModifierSet, languageId);\n                if (metadata !== 2147483647 /* SemanticTokensProviderStylingConstants.NO_STYLING */) {\n                    if (areaLine === 0) {\n                        areaLine = lineNumber;\n                    }\n                    destData[destOffset] = lineNumber - areaLine;\n                    destData[destOffset + 1] = startCharacter;\n                    destData[destOffset + 2] = endCharacter;\n                    destData[destOffset + 3] = metadata;\n                    destOffset += 4;\n                    prevLineNumber = lineNumber;\n                    prevEndCharacter = endCharacter;\n                }\n            }\n            lastLineNumber = lineNumber;\n            lastStartCharacter = startCharacter;\n            tokenIndex++;\n        }\n        if (destOffset !== destData.length) {\n            destData = destData.subarray(0, destOffset);\n        }\n        const tokens = SparseMultilineTokens.create(areaLine, destData);\n        result.push(tokens);\n    }\n    return result;\n}\nclass HashTableEntry {\n    constructor(tokenTypeIndex, tokenModifierSet, languageId, metadata) {\n        this.tokenTypeIndex = tokenTypeIndex;\n        this.tokenModifierSet = tokenModifierSet;\n        this.languageId = languageId;\n        this.metadata = metadata;\n        this.next = null;\n    }\n}\nclass HashTable {\n    constructor() {\n        this._elementsCount = 0;\n        this._currentLengthIndex = 0;\n        this._currentLength = HashTable._SIZES[this._currentLengthIndex];\n        this._growCount = Math.round(this._currentLengthIndex + 1 < HashTable._SIZES.length ? 2 / 3 * this._currentLength : 0);\n        this._elements = [];\n        HashTable._nullOutEntries(this._elements, this._currentLength);\n    }\n    static _nullOutEntries(entries, length) {\n        for (let i = 0; i < length; i++) {\n            entries[i] = null;\n        }\n    }\n    _hash2(n1, n2) {\n        return (((n1 << 5) - n1) + n2) | 0; // n1 * 31 + n2, keep as int32\n    }\n    _hashFunc(tokenTypeIndex, tokenModifierSet, languageId) {\n        return this._hash2(this._hash2(tokenTypeIndex, tokenModifierSet), languageId) % this._currentLength;\n    }\n    get(tokenTypeIndex, tokenModifierSet, languageId) {\n        const hash = this._hashFunc(tokenTypeIndex, tokenModifierSet, languageId);\n        let p = this._elements[hash];\n        while (p) {\n            if (p.tokenTypeIndex === tokenTypeIndex && p.tokenModifierSet === tokenModifierSet && p.languageId === languageId) {\n                return p;\n            }\n            p = p.next;\n        }\n        return null;\n    }\n    add(tokenTypeIndex, tokenModifierSet, languageId, metadata) {\n        this._elementsCount++;\n        if (this._growCount !== 0 && this._elementsCount >= this._growCount) {\n            // expand!\n            const oldElements = this._elements;\n            this._currentLengthIndex++;\n            this._currentLength = HashTable._SIZES[this._currentLengthIndex];\n            this._growCount = Math.round(this._currentLengthIndex + 1 < HashTable._SIZES.length ? 2 / 3 * this._currentLength : 0);\n            this._elements = [];\n            HashTable._nullOutEntries(this._elements, this._currentLength);\n            for (const first of oldElements) {\n                let p = first;\n                while (p) {\n                    const oldNext = p.next;\n                    p.next = null;\n                    this._add(p);\n                    p = oldNext;\n                }\n            }\n        }\n        this._add(new HashTableEntry(tokenTypeIndex, tokenModifierSet, languageId, metadata));\n    }\n    _add(element) {\n        const hash = this._hashFunc(element.tokenTypeIndex, element.tokenModifierSet, element.languageId);\n        element.next = this._elements[hash];\n        this._elements[hash] = element;\n    }\n}\nHashTable._SIZES = [3, 7, 13, 31, 61, 127, 251, 509, 1021, 2039, 4093, 8191, 16381, 32749, 65521, 131071, 262139, 524287, 1048573, 2097143];\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const ISemanticTokensStylingService = createDecorator('semanticTokensStylingService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { SemanticTokensProviderStyling } from './semanticTokensProviderStyling.js';\nimport { ISemanticTokensStylingService } from './semanticTokensStyling.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nlet SemanticTokensStylingService = class SemanticTokensStylingService extends Disposable {\n    constructor(_themeService, _logService, _languageService) {\n        super();\n        this._themeService = _themeService;\n        this._logService = _logService;\n        this._languageService = _languageService;\n        this._caches = new WeakMap();\n        this._register(this._themeService.onDidColorThemeChange(() => {\n            this._caches = new WeakMap();\n        }));\n    }\n    getStyling(provider) {\n        if (!this._caches.has(provider)) {\n            this._caches.set(provider, new SemanticTokensProviderStyling(provider.getLegend(), this._themeService, this._languageService, this._logService));\n        }\n        return this._caches.get(provider);\n    }\n};\nSemanticTokensStylingService = __decorate([\n    __param(0, IThemeService),\n    __param(1, ILogService),\n    __param(2, ILanguageService)\n], SemanticTokensStylingService);\nexport { SemanticTokensStylingService };\nregisterSingleton(ISemanticTokensStylingService, SemanticTokensStylingService, 1 /* InstantiationType.Delayed */);\n","import { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nexport const ITextResourceConfigurationService = createDecorator('textResourceConfigurationService');\nexport const ITextResourcePropertiesService = createDecorator('textResourcePropertiesService');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class TreeViewsDnDService {\n    constructor() {\n        this._dragOperations = new Map();\n    }\n    removeDragOperationTransfer(uuid) {\n        if ((uuid && this._dragOperations.has(uuid))) {\n            const operation = this._dragOperations.get(uuid);\n            this._dragOperations.delete(uuid);\n            return operation;\n        }\n        return undefined;\n    }\n}\nexport class DraggedTreeItemsIdentifier {\n    constructor(identifier) {\n        this.identifier = identifier;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { TreeViewsDnDService } from './treeViewsDnd.js';\nexport const ITreeViewsDnDService = createDecorator('treeViewsDndService');\nregisterSingleton(ITreeViewsDnDService, TreeViewsDnDService, 1 /* InstantiationType.Delayed */);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\nimport { Searcher } from '../model/textModelSearch.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { assertNever } from '../../../base/common/assert.js';\nimport { DEFAULT_WORD_REGEXP, getWordAtText } from '../core/wordHelper.js';\nexport class UnicodeTextModelHighlighter {\n    static computeUnicodeHighlights(model, options, range) {\n        const startLine = range ? range.startLineNumber : 1;\n        const endLine = range ? range.endLineNumber : model.getLineCount();\n        const codePointHighlighter = new CodePointHighlighter(options);\n        const candidates = codePointHighlighter.getCandidateCodePoints();\n        let regex;\n        if (candidates === 'allNonBasicAscii') {\n            regex = new RegExp('[^\\\\t\\\\n\\\\r\\\\x20-\\\\x7E]', 'g');\n        }\n        else {\n            regex = new RegExp(`${buildRegExpCharClassExpr(Array.from(candidates))}`, 'g');\n        }\n        const searcher = new Searcher(null, regex);\n        const ranges = [];\n        let hasMore = false;\n        let m;\n        let ambiguousCharacterCount = 0;\n        let invisibleCharacterCount = 0;\n        let nonBasicAsciiCharacterCount = 0;\n        forLoop: for (let lineNumber = startLine, lineCount = endLine; lineNumber <= lineCount; lineNumber++) {\n            const lineContent = model.getLineContent(lineNumber);\n            const lineLength = lineContent.length;\n            // Reset regex to search from the beginning\n            searcher.reset(0);\n            do {\n                m = searcher.next(lineContent);\n                if (m) {\n                    let startIndex = m.index;\n                    let endIndex = m.index + m[0].length;\n                    // Extend range to entire code point\n                    if (startIndex > 0) {\n                        const charCodeBefore = lineContent.charCodeAt(startIndex - 1);\n                        if (strings.isHighSurrogate(charCodeBefore)) {\n                            startIndex--;\n                        }\n                    }\n                    if (endIndex + 1 < lineLength) {\n                        const charCodeBefore = lineContent.charCodeAt(endIndex - 1);\n                        if (strings.isHighSurrogate(charCodeBefore)) {\n                            endIndex++;\n                        }\n                    }\n                    const str = lineContent.substring(startIndex, endIndex);\n                    let word = getWordAtText(startIndex + 1, DEFAULT_WORD_REGEXP, lineContent, 0);\n                    if (word && word.endColumn <= startIndex + 1) {\n                        // The word does not include the problematic character, ignore the word\n                        word = null;\n                    }\n                    const highlightReason = codePointHighlighter.shouldHighlightNonBasicASCII(str, word ? word.word : null);\n                    if (highlightReason !== 0 /* SimpleHighlightReason.None */) {\n                        if (highlightReason === 3 /* SimpleHighlightReason.Ambiguous */) {\n                            ambiguousCharacterCount++;\n                        }\n                        else if (highlightReason === 2 /* SimpleHighlightReason.Invisible */) {\n                            invisibleCharacterCount++;\n                        }\n                        else if (highlightReason === 1 /* SimpleHighlightReason.NonBasicASCII */) {\n                            nonBasicAsciiCharacterCount++;\n                        }\n                        else {\n                            assertNever(highlightReason);\n                        }\n                        const MAX_RESULT_LENGTH = 1000;\n                        if (ranges.length >= MAX_RESULT_LENGTH) {\n                            hasMore = true;\n                            break forLoop;\n                        }\n                        ranges.push(new Range(lineNumber, startIndex + 1, lineNumber, endIndex + 1));\n                    }\n                }\n            } while (m);\n        }\n        return {\n            ranges,\n            hasMore,\n            ambiguousCharacterCount,\n            invisibleCharacterCount,\n            nonBasicAsciiCharacterCount\n        };\n    }\n    static computeUnicodeHighlightReason(char, options) {\n        const codePointHighlighter = new CodePointHighlighter(options);\n        const reason = codePointHighlighter.shouldHighlightNonBasicASCII(char, null);\n        switch (reason) {\n            case 0 /* SimpleHighlightReason.None */:\n                return null;\n            case 2 /* SimpleHighlightReason.Invisible */:\n                return { kind: 1 /* UnicodeHighlighterReasonKind.Invisible */ };\n            case 3 /* SimpleHighlightReason.Ambiguous */: {\n                const codePoint = char.codePointAt(0);\n                const primaryConfusable = codePointHighlighter.ambiguousCharacters.getPrimaryConfusable(codePoint);\n                const notAmbiguousInLocales = strings.AmbiguousCharacters.getLocales().filter((l) => !strings.AmbiguousCharacters.getInstance(new Set([...options.allowedLocales, l])).isAmbiguous(codePoint));\n                return { kind: 0 /* UnicodeHighlighterReasonKind.Ambiguous */, confusableWith: String.fromCodePoint(primaryConfusable), notAmbiguousInLocales };\n            }\n            case 1 /* SimpleHighlightReason.NonBasicASCII */:\n                return { kind: 2 /* UnicodeHighlighterReasonKind.NonBasicAscii */ };\n        }\n    }\n}\nfunction buildRegExpCharClassExpr(codePoints, flags) {\n    const src = `[${strings.escapeRegExpCharacters(codePoints.map((i) => String.fromCodePoint(i)).join(''))}]`;\n    return src;\n}\nclass CodePointHighlighter {\n    constructor(options) {\n        this.options = options;\n        this.allowedCodePoints = new Set(options.allowedCodePoints);\n        this.ambiguousCharacters = strings.AmbiguousCharacters.getInstance(new Set(options.allowedLocales));\n    }\n    getCandidateCodePoints() {\n        if (this.options.nonBasicASCII) {\n            return 'allNonBasicAscii';\n        }\n        const set = new Set();\n        if (this.options.invisibleCharacters) {\n            for (const cp of strings.InvisibleCharacters.codePoints) {\n                if (!isAllowedInvisibleCharacter(String.fromCodePoint(cp))) {\n                    set.add(cp);\n                }\n            }\n        }\n        if (this.options.ambiguousCharacters) {\n            for (const cp of this.ambiguousCharacters.getConfusableCodePoints()) {\n                set.add(cp);\n            }\n        }\n        for (const cp of this.allowedCodePoints) {\n            set.delete(cp);\n        }\n        return set;\n    }\n    shouldHighlightNonBasicASCII(character, wordContext) {\n        const codePoint = character.codePointAt(0);\n        if (this.allowedCodePoints.has(codePoint)) {\n            return 0 /* SimpleHighlightReason.None */;\n        }\n        if (this.options.nonBasicASCII) {\n            return 1 /* SimpleHighlightReason.NonBasicASCII */;\n        }\n        let hasBasicASCIICharacters = false;\n        let hasNonConfusableNonBasicAsciiCharacter = false;\n        if (wordContext) {\n            for (const char of wordContext) {\n                const codePoint = char.codePointAt(0);\n                const isBasicASCII = strings.isBasicASCII(char);\n                hasBasicASCIICharacters = hasBasicASCIICharacters || isBasicASCII;\n                if (!isBasicASCII &&\n                    !this.ambiguousCharacters.isAmbiguous(codePoint) &&\n                    !strings.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n                    hasNonConfusableNonBasicAsciiCharacter = true;\n                }\n            }\n        }\n        if (\n        /* Don't allow mixing weird looking characters with ASCII */ !hasBasicASCIICharacters &&\n            /* Is there an obviously weird looking character? */ hasNonConfusableNonBasicAsciiCharacter) {\n            return 0 /* SimpleHighlightReason.None */;\n        }\n        if (this.options.invisibleCharacters) {\n            // TODO check for emojis\n            if (!isAllowedInvisibleCharacter(character) && strings.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n                return 2 /* SimpleHighlightReason.Invisible */;\n            }\n        }\n        if (this.options.ambiguousCharacters) {\n            if (this.ambiguousCharacters.isAmbiguous(codePoint)) {\n                return 3 /* SimpleHighlightReason.Ambiguous */;\n            }\n        }\n        return 0 /* SimpleHighlightReason.None */;\n    }\n}\nfunction isAllowedInvisibleCharacter(character) {\n    return character === ' ' || character === '\\n' || character === '\\t';\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// THIS IS A GENERATED FILE. DO NOT EDIT DIRECTLY.\nexport var AccessibilitySupport;\n(function (AccessibilitySupport) {\n    /**\n     * This should be the browser case where it is not known if a screen reader is attached or no.\n     */\n    AccessibilitySupport[AccessibilitySupport[\"Unknown\"] = 0] = \"Unknown\";\n    AccessibilitySupport[AccessibilitySupport[\"Disabled\"] = 1] = \"Disabled\";\n    AccessibilitySupport[AccessibilitySupport[\"Enabled\"] = 2] = \"Enabled\";\n})(AccessibilitySupport || (AccessibilitySupport = {}));\nexport var CodeActionTriggerType;\n(function (CodeActionTriggerType) {\n    CodeActionTriggerType[CodeActionTriggerType[\"Invoke\"] = 1] = \"Invoke\";\n    CodeActionTriggerType[CodeActionTriggerType[\"Auto\"] = 2] = \"Auto\";\n})(CodeActionTriggerType || (CodeActionTriggerType = {}));\nexport var CompletionItemInsertTextRule;\n(function (CompletionItemInsertTextRule) {\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"None\"] = 0] = \"None\";\n    /**\n     * Adjust whitespace/indentation of multiline insert texts to\n     * match the current line indentation.\n     */\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"KeepWhitespace\"] = 1] = \"KeepWhitespace\";\n    /**\n     * `insertText` is a snippet.\n     */\n    CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"InsertAsSnippet\"] = 4] = \"InsertAsSnippet\";\n})(CompletionItemInsertTextRule || (CompletionItemInsertTextRule = {}));\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind[CompletionItemKind[\"Method\"] = 0] = \"Method\";\n    CompletionItemKind[CompletionItemKind[\"Function\"] = 1] = \"Function\";\n    CompletionItemKind[CompletionItemKind[\"Constructor\"] = 2] = \"Constructor\";\n    CompletionItemKind[CompletionItemKind[\"Field\"] = 3] = \"Field\";\n    CompletionItemKind[CompletionItemKind[\"Variable\"] = 4] = \"Variable\";\n    CompletionItemKind[CompletionItemKind[\"Class\"] = 5] = \"Class\";\n    CompletionItemKind[CompletionItemKind[\"Struct\"] = 6] = \"Struct\";\n    CompletionItemKind[CompletionItemKind[\"Interface\"] = 7] = \"Interface\";\n    CompletionItemKind[CompletionItemKind[\"Module\"] = 8] = \"Module\";\n    CompletionItemKind[CompletionItemKind[\"Property\"] = 9] = \"Property\";\n    CompletionItemKind[CompletionItemKind[\"Event\"] = 10] = \"Event\";\n    CompletionItemKind[CompletionItemKind[\"Operator\"] = 11] = \"Operator\";\n    CompletionItemKind[CompletionItemKind[\"Unit\"] = 12] = \"Unit\";\n    CompletionItemKind[CompletionItemKind[\"Value\"] = 13] = \"Value\";\n    CompletionItemKind[CompletionItemKind[\"Constant\"] = 14] = \"Constant\";\n    CompletionItemKind[CompletionItemKind[\"Enum\"] = 15] = \"Enum\";\n    CompletionItemKind[CompletionItemKind[\"EnumMember\"] = 16] = \"EnumMember\";\n    CompletionItemKind[CompletionItemKind[\"Keyword\"] = 17] = \"Keyword\";\n    CompletionItemKind[CompletionItemKind[\"Text\"] = 18] = \"Text\";\n    CompletionItemKind[CompletionItemKind[\"Color\"] = 19] = \"Color\";\n    CompletionItemKind[CompletionItemKind[\"File\"] = 20] = \"File\";\n    CompletionItemKind[CompletionItemKind[\"Reference\"] = 21] = \"Reference\";\n    CompletionItemKind[CompletionItemKind[\"Customcolor\"] = 22] = \"Customcolor\";\n    CompletionItemKind[CompletionItemKind[\"Folder\"] = 23] = \"Folder\";\n    CompletionItemKind[CompletionItemKind[\"TypeParameter\"] = 24] = \"TypeParameter\";\n    CompletionItemKind[CompletionItemKind[\"User\"] = 25] = \"User\";\n    CompletionItemKind[CompletionItemKind[\"Issue\"] = 26] = \"Issue\";\n    CompletionItemKind[CompletionItemKind[\"Snippet\"] = 27] = \"Snippet\";\n})(CompletionItemKind || (CompletionItemKind = {}));\nexport var CompletionItemTag;\n(function (CompletionItemTag) {\n    CompletionItemTag[CompletionItemTag[\"Deprecated\"] = 1] = \"Deprecated\";\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * How a suggest provider was triggered.\n */\nexport var CompletionTriggerKind;\n(function (CompletionTriggerKind) {\n    CompletionTriggerKind[CompletionTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n    CompletionTriggerKind[CompletionTriggerKind[\"TriggerCharacter\"] = 1] = \"TriggerCharacter\";\n    CompletionTriggerKind[CompletionTriggerKind[\"TriggerForIncompleteCompletions\"] = 2] = \"TriggerForIncompleteCompletions\";\n})(CompletionTriggerKind || (CompletionTriggerKind = {}));\n/**\n * A positioning preference for rendering content widgets.\n */\nexport var ContentWidgetPositionPreference;\n(function (ContentWidgetPositionPreference) {\n    /**\n     * Place the content widget exactly at a position\n     */\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"EXACT\"] = 0] = \"EXACT\";\n    /**\n     * Place the content widget above a position\n     */\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"ABOVE\"] = 1] = \"ABOVE\";\n    /**\n     * Place the content widget below a position\n     */\n    ContentWidgetPositionPreference[ContentWidgetPositionPreference[\"BELOW\"] = 2] = \"BELOW\";\n})(ContentWidgetPositionPreference || (ContentWidgetPositionPreference = {}));\n/**\n * Describes the reason the cursor has changed its position.\n */\nexport var CursorChangeReason;\n(function (CursorChangeReason) {\n    /**\n     * Unknown or not set.\n     */\n    CursorChangeReason[CursorChangeReason[\"NotSet\"] = 0] = \"NotSet\";\n    /**\n     * A `model.setValue()` was called.\n     */\n    CursorChangeReason[CursorChangeReason[\"ContentFlush\"] = 1] = \"ContentFlush\";\n    /**\n     * The `model` has been changed outside of this cursor and the cursor recovers its position from associated markers.\n     */\n    CursorChangeReason[CursorChangeReason[\"RecoverFromMarkers\"] = 2] = \"RecoverFromMarkers\";\n    /**\n     * There was an explicit user gesture.\n     */\n    CursorChangeReason[CursorChangeReason[\"Explicit\"] = 3] = \"Explicit\";\n    /**\n     * There was a Paste.\n     */\n    CursorChangeReason[CursorChangeReason[\"Paste\"] = 4] = \"Paste\";\n    /**\n     * There was an Undo.\n     */\n    CursorChangeReason[CursorChangeReason[\"Undo\"] = 5] = \"Undo\";\n    /**\n     * There was a Redo.\n     */\n    CursorChangeReason[CursorChangeReason[\"Redo\"] = 6] = \"Redo\";\n})(CursorChangeReason || (CursorChangeReason = {}));\n/**\n * The default end of line to use when instantiating models.\n */\nexport var DefaultEndOfLine;\n(function (DefaultEndOfLine) {\n    /**\n     * Use line feed (\\n) as the end of line character.\n     */\n    DefaultEndOfLine[DefaultEndOfLine[\"LF\"] = 1] = \"LF\";\n    /**\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\n     */\n    DefaultEndOfLine[DefaultEndOfLine[\"CRLF\"] = 2] = \"CRLF\";\n})(DefaultEndOfLine || (DefaultEndOfLine = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Text\"] = 0] = \"Text\";\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Read\"] = 1] = \"Read\";\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind[DocumentHighlightKind[\"Write\"] = 2] = \"Write\";\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * Configuration options for auto indentation in the editor\n */\nexport var EditorAutoIndentStrategy;\n(function (EditorAutoIndentStrategy) {\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"None\"] = 0] = \"None\";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Keep\"] = 1] = \"Keep\";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Brackets\"] = 2] = \"Brackets\";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Advanced\"] = 3] = \"Advanced\";\n    EditorAutoIndentStrategy[EditorAutoIndentStrategy[\"Full\"] = 4] = \"Full\";\n})(EditorAutoIndentStrategy || (EditorAutoIndentStrategy = {}));\nexport var EditorOption;\n(function (EditorOption) {\n    EditorOption[EditorOption[\"acceptSuggestionOnCommitCharacter\"] = 0] = \"acceptSuggestionOnCommitCharacter\";\n    EditorOption[EditorOption[\"acceptSuggestionOnEnter\"] = 1] = \"acceptSuggestionOnEnter\";\n    EditorOption[EditorOption[\"accessibilitySupport\"] = 2] = \"accessibilitySupport\";\n    EditorOption[EditorOption[\"accessibilityPageSize\"] = 3] = \"accessibilityPageSize\";\n    EditorOption[EditorOption[\"ariaLabel\"] = 4] = \"ariaLabel\";\n    EditorOption[EditorOption[\"ariaRequired\"] = 5] = \"ariaRequired\";\n    EditorOption[EditorOption[\"autoClosingBrackets\"] = 6] = \"autoClosingBrackets\";\n    EditorOption[EditorOption[\"autoClosingComments\"] = 7] = \"autoClosingComments\";\n    EditorOption[EditorOption[\"screenReaderAnnounceInlineSuggestion\"] = 8] = \"screenReaderAnnounceInlineSuggestion\";\n    EditorOption[EditorOption[\"autoClosingDelete\"] = 9] = \"autoClosingDelete\";\n    EditorOption[EditorOption[\"autoClosingOvertype\"] = 10] = \"autoClosingOvertype\";\n    EditorOption[EditorOption[\"autoClosingQuotes\"] = 11] = \"autoClosingQuotes\";\n    EditorOption[EditorOption[\"autoIndent\"] = 12] = \"autoIndent\";\n    EditorOption[EditorOption[\"automaticLayout\"] = 13] = \"automaticLayout\";\n    EditorOption[EditorOption[\"autoSurround\"] = 14] = \"autoSurround\";\n    EditorOption[EditorOption[\"bracketPairColorization\"] = 15] = \"bracketPairColorization\";\n    EditorOption[EditorOption[\"guides\"] = 16] = \"guides\";\n    EditorOption[EditorOption[\"codeLens\"] = 17] = \"codeLens\";\n    EditorOption[EditorOption[\"codeLensFontFamily\"] = 18] = \"codeLensFontFamily\";\n    EditorOption[EditorOption[\"codeLensFontSize\"] = 19] = \"codeLensFontSize\";\n    EditorOption[EditorOption[\"colorDecorators\"] = 20] = \"colorDecorators\";\n    EditorOption[EditorOption[\"colorDecoratorsLimit\"] = 21] = \"colorDecoratorsLimit\";\n    EditorOption[EditorOption[\"columnSelection\"] = 22] = \"columnSelection\";\n    EditorOption[EditorOption[\"comments\"] = 23] = \"comments\";\n    EditorOption[EditorOption[\"contextmenu\"] = 24] = \"contextmenu\";\n    EditorOption[EditorOption[\"copyWithSyntaxHighlighting\"] = 25] = \"copyWithSyntaxHighlighting\";\n    EditorOption[EditorOption[\"cursorBlinking\"] = 26] = \"cursorBlinking\";\n    EditorOption[EditorOption[\"cursorSmoothCaretAnimation\"] = 27] = \"cursorSmoothCaretAnimation\";\n    EditorOption[EditorOption[\"cursorStyle\"] = 28] = \"cursorStyle\";\n    EditorOption[EditorOption[\"cursorSurroundingLines\"] = 29] = \"cursorSurroundingLines\";\n    EditorOption[EditorOption[\"cursorSurroundingLinesStyle\"] = 30] = \"cursorSurroundingLinesStyle\";\n    EditorOption[EditorOption[\"cursorWidth\"] = 31] = \"cursorWidth\";\n    EditorOption[EditorOption[\"disableLayerHinting\"] = 32] = \"disableLayerHinting\";\n    EditorOption[EditorOption[\"disableMonospaceOptimizations\"] = 33] = \"disableMonospaceOptimizations\";\n    EditorOption[EditorOption[\"domReadOnly\"] = 34] = \"domReadOnly\";\n    EditorOption[EditorOption[\"dragAndDrop\"] = 35] = \"dragAndDrop\";\n    EditorOption[EditorOption[\"dropIntoEditor\"] = 36] = \"dropIntoEditor\";\n    EditorOption[EditorOption[\"emptySelectionClipboard\"] = 37] = \"emptySelectionClipboard\";\n    EditorOption[EditorOption[\"experimentalWhitespaceRendering\"] = 38] = \"experimentalWhitespaceRendering\";\n    EditorOption[EditorOption[\"extraEditorClassName\"] = 39] = \"extraEditorClassName\";\n    EditorOption[EditorOption[\"fastScrollSensitivity\"] = 40] = \"fastScrollSensitivity\";\n    EditorOption[EditorOption[\"find\"] = 41] = \"find\";\n    EditorOption[EditorOption[\"fixedOverflowWidgets\"] = 42] = \"fixedOverflowWidgets\";\n    EditorOption[EditorOption[\"folding\"] = 43] = \"folding\";\n    EditorOption[EditorOption[\"foldingStrategy\"] = 44] = \"foldingStrategy\";\n    EditorOption[EditorOption[\"foldingHighlight\"] = 45] = \"foldingHighlight\";\n    EditorOption[EditorOption[\"foldingImportsByDefault\"] = 46] = \"foldingImportsByDefault\";\n    EditorOption[EditorOption[\"foldingMaximumRegions\"] = 47] = \"foldingMaximumRegions\";\n    EditorOption[EditorOption[\"unfoldOnClickAfterEndOfLine\"] = 48] = \"unfoldOnClickAfterEndOfLine\";\n    EditorOption[EditorOption[\"fontFamily\"] = 49] = \"fontFamily\";\n    EditorOption[EditorOption[\"fontInfo\"] = 50] = \"fontInfo\";\n    EditorOption[EditorOption[\"fontLigatures\"] = 51] = \"fontLigatures\";\n    EditorOption[EditorOption[\"fontSize\"] = 52] = \"fontSize\";\n    EditorOption[EditorOption[\"fontWeight\"] = 53] = \"fontWeight\";\n    EditorOption[EditorOption[\"fontVariations\"] = 54] = \"fontVariations\";\n    EditorOption[EditorOption[\"formatOnPaste\"] = 55] = \"formatOnPaste\";\n    EditorOption[EditorOption[\"formatOnType\"] = 56] = \"formatOnType\";\n    EditorOption[EditorOption[\"glyphMargin\"] = 57] = \"glyphMargin\";\n    EditorOption[EditorOption[\"gotoLocation\"] = 58] = \"gotoLocation\";\n    EditorOption[EditorOption[\"hideCursorInOverviewRuler\"] = 59] = \"hideCursorInOverviewRuler\";\n    EditorOption[EditorOption[\"hover\"] = 60] = \"hover\";\n    EditorOption[EditorOption[\"inDiffEditor\"] = 61] = \"inDiffEditor\";\n    EditorOption[EditorOption[\"inlineSuggest\"] = 62] = \"inlineSuggest\";\n    EditorOption[EditorOption[\"inlineEdit\"] = 63] = \"inlineEdit\";\n    EditorOption[EditorOption[\"letterSpacing\"] = 64] = \"letterSpacing\";\n    EditorOption[EditorOption[\"lightbulb\"] = 65] = \"lightbulb\";\n    EditorOption[EditorOption[\"lineDecorationsWidth\"] = 66] = \"lineDecorationsWidth\";\n    EditorOption[EditorOption[\"lineHeight\"] = 67] = \"lineHeight\";\n    EditorOption[EditorOption[\"lineNumbers\"] = 68] = \"lineNumbers\";\n    EditorOption[EditorOption[\"lineNumbersMinChars\"] = 69] = \"lineNumbersMinChars\";\n    EditorOption[EditorOption[\"linkedEditing\"] = 70] = \"linkedEditing\";\n    EditorOption[EditorOption[\"links\"] = 71] = \"links\";\n    EditorOption[EditorOption[\"matchBrackets\"] = 72] = \"matchBrackets\";\n    EditorOption[EditorOption[\"minimap\"] = 73] = \"minimap\";\n    EditorOption[EditorOption[\"mouseStyle\"] = 74] = \"mouseStyle\";\n    EditorOption[EditorOption[\"mouseWheelScrollSensitivity\"] = 75] = \"mouseWheelScrollSensitivity\";\n    EditorOption[EditorOption[\"mouseWheelZoom\"] = 76] = \"mouseWheelZoom\";\n    EditorOption[EditorOption[\"multiCursorMergeOverlapping\"] = 77] = \"multiCursorMergeOverlapping\";\n    EditorOption[EditorOption[\"multiCursorModifier\"] = 78] = \"multiCursorModifier\";\n    EditorOption[EditorOption[\"multiCursorPaste\"] = 79] = \"multiCursorPaste\";\n    EditorOption[EditorOption[\"multiCursorLimit\"] = 80] = \"multiCursorLimit\";\n    EditorOption[EditorOption[\"occurrencesHighlight\"] = 81] = \"occurrencesHighlight\";\n    EditorOption[EditorOption[\"overviewRulerBorder\"] = 82] = \"overviewRulerBorder\";\n    EditorOption[EditorOption[\"overviewRulerLanes\"] = 83] = \"overviewRulerLanes\";\n    EditorOption[EditorOption[\"padding\"] = 84] = \"padding\";\n    EditorOption[EditorOption[\"pasteAs\"] = 85] = \"pasteAs\";\n    EditorOption[EditorOption[\"parameterHints\"] = 86] = \"parameterHints\";\n    EditorOption[EditorOption[\"peekWidgetDefaultFocus\"] = 87] = \"peekWidgetDefaultFocus\";\n    EditorOption[EditorOption[\"definitionLinkOpensInPeek\"] = 88] = \"definitionLinkOpensInPeek\";\n    EditorOption[EditorOption[\"quickSuggestions\"] = 89] = \"quickSuggestions\";\n    EditorOption[EditorOption[\"quickSuggestionsDelay\"] = 90] = \"quickSuggestionsDelay\";\n    EditorOption[EditorOption[\"readOnly\"] = 91] = \"readOnly\";\n    EditorOption[EditorOption[\"readOnlyMessage\"] = 92] = \"readOnlyMessage\";\n    EditorOption[EditorOption[\"renameOnType\"] = 93] = \"renameOnType\";\n    EditorOption[EditorOption[\"renderControlCharacters\"] = 94] = \"renderControlCharacters\";\n    EditorOption[EditorOption[\"renderFinalNewline\"] = 95] = \"renderFinalNewline\";\n    EditorOption[EditorOption[\"renderLineHighlight\"] = 96] = \"renderLineHighlight\";\n    EditorOption[EditorOption[\"renderLineHighlightOnlyWhenFocus\"] = 97] = \"renderLineHighlightOnlyWhenFocus\";\n    EditorOption[EditorOption[\"renderValidationDecorations\"] = 98] = \"renderValidationDecorations\";\n    EditorOption[EditorOption[\"renderWhitespace\"] = 99] = \"renderWhitespace\";\n    EditorOption[EditorOption[\"revealHorizontalRightPadding\"] = 100] = \"revealHorizontalRightPadding\";\n    EditorOption[EditorOption[\"roundedSelection\"] = 101] = \"roundedSelection\";\n    EditorOption[EditorOption[\"rulers\"] = 102] = \"rulers\";\n    EditorOption[EditorOption[\"scrollbar\"] = 103] = \"scrollbar\";\n    EditorOption[EditorOption[\"scrollBeyondLastColumn\"] = 104] = \"scrollBeyondLastColumn\";\n    EditorOption[EditorOption[\"scrollBeyondLastLine\"] = 105] = \"scrollBeyondLastLine\";\n    EditorOption[EditorOption[\"scrollPredominantAxis\"] = 106] = \"scrollPredominantAxis\";\n    EditorOption[EditorOption[\"selectionClipboard\"] = 107] = \"selectionClipboard\";\n    EditorOption[EditorOption[\"selectionHighlight\"] = 108] = \"selectionHighlight\";\n    EditorOption[EditorOption[\"selectOnLineNumbers\"] = 109] = \"selectOnLineNumbers\";\n    EditorOption[EditorOption[\"showFoldingControls\"] = 110] = \"showFoldingControls\";\n    EditorOption[EditorOption[\"showUnused\"] = 111] = \"showUnused\";\n    EditorOption[EditorOption[\"snippetSuggestions\"] = 112] = \"snippetSuggestions\";\n    EditorOption[EditorOption[\"smartSelect\"] = 113] = \"smartSelect\";\n    EditorOption[EditorOption[\"smoothScrolling\"] = 114] = \"smoothScrolling\";\n    EditorOption[EditorOption[\"stickyScroll\"] = 115] = \"stickyScroll\";\n    EditorOption[EditorOption[\"stickyTabStops\"] = 116] = \"stickyTabStops\";\n    EditorOption[EditorOption[\"stopRenderingLineAfter\"] = 117] = \"stopRenderingLineAfter\";\n    EditorOption[EditorOption[\"suggest\"] = 118] = \"suggest\";\n    EditorOption[EditorOption[\"suggestFontSize\"] = 119] = \"suggestFontSize\";\n    EditorOption[EditorOption[\"suggestLineHeight\"] = 120] = \"suggestLineHeight\";\n    EditorOption[EditorOption[\"suggestOnTriggerCharacters\"] = 121] = \"suggestOnTriggerCharacters\";\n    EditorOption[EditorOption[\"suggestSelection\"] = 122] = \"suggestSelection\";\n    EditorOption[EditorOption[\"tabCompletion\"] = 123] = \"tabCompletion\";\n    EditorOption[EditorOption[\"tabIndex\"] = 124] = \"tabIndex\";\n    EditorOption[EditorOption[\"unicodeHighlighting\"] = 125] = \"unicodeHighlighting\";\n    EditorOption[EditorOption[\"unusualLineTerminators\"] = 126] = \"unusualLineTerminators\";\n    EditorOption[EditorOption[\"useShadowDOM\"] = 127] = \"useShadowDOM\";\n    EditorOption[EditorOption[\"useTabStops\"] = 128] = \"useTabStops\";\n    EditorOption[EditorOption[\"wordBreak\"] = 129] = \"wordBreak\";\n    EditorOption[EditorOption[\"wordSegmenterLocales\"] = 130] = \"wordSegmenterLocales\";\n    EditorOption[EditorOption[\"wordSeparators\"] = 131] = \"wordSeparators\";\n    EditorOption[EditorOption[\"wordWrap\"] = 132] = \"wordWrap\";\n    EditorOption[EditorOption[\"wordWrapBreakAfterCharacters\"] = 133] = \"wordWrapBreakAfterCharacters\";\n    EditorOption[EditorOption[\"wordWrapBreakBeforeCharacters\"] = 134] = \"wordWrapBreakBeforeCharacters\";\n    EditorOption[EditorOption[\"wordWrapColumn\"] = 135] = \"wordWrapColumn\";\n    EditorOption[EditorOption[\"wordWrapOverride1\"] = 136] = \"wordWrapOverride1\";\n    EditorOption[EditorOption[\"wordWrapOverride2\"] = 137] = \"wordWrapOverride2\";\n    EditorOption[EditorOption[\"wrappingIndent\"] = 138] = \"wrappingIndent\";\n    EditorOption[EditorOption[\"wrappingStrategy\"] = 139] = \"wrappingStrategy\";\n    EditorOption[EditorOption[\"showDeprecated\"] = 140] = \"showDeprecated\";\n    EditorOption[EditorOption[\"inlayHints\"] = 141] = \"inlayHints\";\n    EditorOption[EditorOption[\"editorClassName\"] = 142] = \"editorClassName\";\n    EditorOption[EditorOption[\"pixelRatio\"] = 143] = \"pixelRatio\";\n    EditorOption[EditorOption[\"tabFocusMode\"] = 144] = \"tabFocusMode\";\n    EditorOption[EditorOption[\"layoutInfo\"] = 145] = \"layoutInfo\";\n    EditorOption[EditorOption[\"wrappingInfo\"] = 146] = \"wrappingInfo\";\n    EditorOption[EditorOption[\"defaultColorDecorators\"] = 147] = \"defaultColorDecorators\";\n    EditorOption[EditorOption[\"colorDecoratorsActivatedOn\"] = 148] = \"colorDecoratorsActivatedOn\";\n    EditorOption[EditorOption[\"inlineCompletionsAccessibilityVerbose\"] = 149] = \"inlineCompletionsAccessibilityVerbose\";\n})(EditorOption || (EditorOption = {}));\n/**\n * End of line character preference.\n */\nexport var EndOfLinePreference;\n(function (EndOfLinePreference) {\n    /**\n     * Use the end of line character identified in the text buffer.\n     */\n    EndOfLinePreference[EndOfLinePreference[\"TextDefined\"] = 0] = \"TextDefined\";\n    /**\n     * Use line feed (\\n) as the end of line character.\n     */\n    EndOfLinePreference[EndOfLinePreference[\"LF\"] = 1] = \"LF\";\n    /**\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\n     */\n    EndOfLinePreference[EndOfLinePreference[\"CRLF\"] = 2] = \"CRLF\";\n})(EndOfLinePreference || (EndOfLinePreference = {}));\n/**\n * End of line character preference.\n */\nexport var EndOfLineSequence;\n(function (EndOfLineSequence) {\n    /**\n     * Use line feed (\\n) as the end of line character.\n     */\n    EndOfLineSequence[EndOfLineSequence[\"LF\"] = 0] = \"LF\";\n    /**\n     * Use carriage return and line feed (\\r\\n) as the end of line character.\n     */\n    EndOfLineSequence[EndOfLineSequence[\"CRLF\"] = 1] = \"CRLF\";\n})(EndOfLineSequence || (EndOfLineSequence = {}));\n/**\n * Vertical Lane in the glyph margin of the editor.\n */\nexport var GlyphMarginLane;\n(function (GlyphMarginLane) {\n    GlyphMarginLane[GlyphMarginLane[\"Left\"] = 1] = \"Left\";\n    GlyphMarginLane[GlyphMarginLane[\"Center\"] = 2] = \"Center\";\n    GlyphMarginLane[GlyphMarginLane[\"Right\"] = 3] = \"Right\";\n})(GlyphMarginLane || (GlyphMarginLane = {}));\nexport var HoverVerbosityAction;\n(function (HoverVerbosityAction) {\n    /**\n     * Increase the verbosity of the hover\n     */\n    HoverVerbosityAction[HoverVerbosityAction[\"Increase\"] = 0] = \"Increase\";\n    /**\n     * Decrease the verbosity of the hover\n     */\n    HoverVerbosityAction[HoverVerbosityAction[\"Decrease\"] = 1] = \"Decrease\";\n})(HoverVerbosityAction || (HoverVerbosityAction = {}));\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nexport var IndentAction;\n(function (IndentAction) {\n    /**\n     * Insert new line and copy the previous line's indentation.\n     */\n    IndentAction[IndentAction[\"None\"] = 0] = \"None\";\n    /**\n     * Insert new line and indent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\n    /**\n     * Insert two new lines:\n     *  - the first one indented which will hold the cursor\n     *  - the second one at the same indentation level\n     */\n    IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\n    /**\n     * Insert new line and outdent once (relative to the previous line's indentation).\n     */\n    IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\n})(IndentAction || (IndentAction = {}));\nexport var InjectedTextCursorStops;\n(function (InjectedTextCursorStops) {\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Both\"] = 0] = \"Both\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Right\"] = 1] = \"Right\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"Left\"] = 2] = \"Left\";\n    InjectedTextCursorStops[InjectedTextCursorStops[\"None\"] = 3] = \"None\";\n})(InjectedTextCursorStops || (InjectedTextCursorStops = {}));\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    InlayHintKind[InlayHintKind[\"Type\"] = 1] = \"Type\";\n    InlayHintKind[InlayHintKind[\"Parameter\"] = 2] = \"Parameter\";\n})(InlayHintKind || (InlayHintKind = {}));\n/**\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered automatically while editing.\n     * It is sufficient to return a single completion item in this case.\n     */\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Automatic\"] = 0] = \"Automatic\";\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     * Return multiple completion items to enable cycling through them.\n     */\n    InlineCompletionTriggerKind[InlineCompletionTriggerKind[\"Explicit\"] = 1] = \"Explicit\";\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var InlineEditTriggerKind;\n(function (InlineEditTriggerKind) {\n    InlineEditTriggerKind[InlineEditTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n    InlineEditTriggerKind[InlineEditTriggerKind[\"Automatic\"] = 1] = \"Automatic\";\n})(InlineEditTriggerKind || (InlineEditTriggerKind = {}));\n/**\n * Virtual Key Codes, the value does not hold any inherent meaning.\n * Inspired somewhat from https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n * But these are \"more general\", as they should work across browsers & OS`s.\n */\nexport var KeyCode;\n(function (KeyCode) {\n    KeyCode[KeyCode[\"DependsOnKbLayout\"] = -1] = \"DependsOnKbLayout\";\n    /**\n     * Placed first to cover the 0 value of the enum.\n     */\n    KeyCode[KeyCode[\"Unknown\"] = 0] = \"Unknown\";\n    KeyCode[KeyCode[\"Backspace\"] = 1] = \"Backspace\";\n    KeyCode[KeyCode[\"Tab\"] = 2] = \"Tab\";\n    KeyCode[KeyCode[\"Enter\"] = 3] = \"Enter\";\n    KeyCode[KeyCode[\"Shift\"] = 4] = \"Shift\";\n    KeyCode[KeyCode[\"Ctrl\"] = 5] = \"Ctrl\";\n    KeyCode[KeyCode[\"Alt\"] = 6] = \"Alt\";\n    KeyCode[KeyCode[\"PauseBreak\"] = 7] = \"PauseBreak\";\n    KeyCode[KeyCode[\"CapsLock\"] = 8] = \"CapsLock\";\n    KeyCode[KeyCode[\"Escape\"] = 9] = \"Escape\";\n    KeyCode[KeyCode[\"Space\"] = 10] = \"Space\";\n    KeyCode[KeyCode[\"PageUp\"] = 11] = \"PageUp\";\n    KeyCode[KeyCode[\"PageDown\"] = 12] = \"PageDown\";\n    KeyCode[KeyCode[\"End\"] = 13] = \"End\";\n    KeyCode[KeyCode[\"Home\"] = 14] = \"Home\";\n    KeyCode[KeyCode[\"LeftArrow\"] = 15] = \"LeftArrow\";\n    KeyCode[KeyCode[\"UpArrow\"] = 16] = \"UpArrow\";\n    KeyCode[KeyCode[\"RightArrow\"] = 17] = \"RightArrow\";\n    KeyCode[KeyCode[\"DownArrow\"] = 18] = \"DownArrow\";\n    KeyCode[KeyCode[\"Insert\"] = 19] = \"Insert\";\n    KeyCode[KeyCode[\"Delete\"] = 20] = \"Delete\";\n    KeyCode[KeyCode[\"Digit0\"] = 21] = \"Digit0\";\n    KeyCode[KeyCode[\"Digit1\"] = 22] = \"Digit1\";\n    KeyCode[KeyCode[\"Digit2\"] = 23] = \"Digit2\";\n    KeyCode[KeyCode[\"Digit3\"] = 24] = \"Digit3\";\n    KeyCode[KeyCode[\"Digit4\"] = 25] = \"Digit4\";\n    KeyCode[KeyCode[\"Digit5\"] = 26] = \"Digit5\";\n    KeyCode[KeyCode[\"Digit6\"] = 27] = \"Digit6\";\n    KeyCode[KeyCode[\"Digit7\"] = 28] = \"Digit7\";\n    KeyCode[KeyCode[\"Digit8\"] = 29] = \"Digit8\";\n    KeyCode[KeyCode[\"Digit9\"] = 30] = \"Digit9\";\n    KeyCode[KeyCode[\"KeyA\"] = 31] = \"KeyA\";\n    KeyCode[KeyCode[\"KeyB\"] = 32] = \"KeyB\";\n    KeyCode[KeyCode[\"KeyC\"] = 33] = \"KeyC\";\n    KeyCode[KeyCode[\"KeyD\"] = 34] = \"KeyD\";\n    KeyCode[KeyCode[\"KeyE\"] = 35] = \"KeyE\";\n    KeyCode[KeyCode[\"KeyF\"] = 36] = \"KeyF\";\n    KeyCode[KeyCode[\"KeyG\"] = 37] = \"KeyG\";\n    KeyCode[KeyCode[\"KeyH\"] = 38] = \"KeyH\";\n    KeyCode[KeyCode[\"KeyI\"] = 39] = \"KeyI\";\n    KeyCode[KeyCode[\"KeyJ\"] = 40] = \"KeyJ\";\n    KeyCode[KeyCode[\"KeyK\"] = 41] = \"KeyK\";\n    KeyCode[KeyCode[\"KeyL\"] = 42] = \"KeyL\";\n    KeyCode[KeyCode[\"KeyM\"] = 43] = \"KeyM\";\n    KeyCode[KeyCode[\"KeyN\"] = 44] = \"KeyN\";\n    KeyCode[KeyCode[\"KeyO\"] = 45] = \"KeyO\";\n    KeyCode[KeyCode[\"KeyP\"] = 46] = \"KeyP\";\n    KeyCode[KeyCode[\"KeyQ\"] = 47] = \"KeyQ\";\n    KeyCode[KeyCode[\"KeyR\"] = 48] = \"KeyR\";\n    KeyCode[KeyCode[\"KeyS\"] = 49] = \"KeyS\";\n    KeyCode[KeyCode[\"KeyT\"] = 50] = \"KeyT\";\n    KeyCode[KeyCode[\"KeyU\"] = 51] = \"KeyU\";\n    KeyCode[KeyCode[\"KeyV\"] = 52] = \"KeyV\";\n    KeyCode[KeyCode[\"KeyW\"] = 53] = \"KeyW\";\n    KeyCode[KeyCode[\"KeyX\"] = 54] = \"KeyX\";\n    KeyCode[KeyCode[\"KeyY\"] = 55] = \"KeyY\";\n    KeyCode[KeyCode[\"KeyZ\"] = 56] = \"KeyZ\";\n    KeyCode[KeyCode[\"Meta\"] = 57] = \"Meta\";\n    KeyCode[KeyCode[\"ContextMenu\"] = 58] = \"ContextMenu\";\n    KeyCode[KeyCode[\"F1\"] = 59] = \"F1\";\n    KeyCode[KeyCode[\"F2\"] = 60] = \"F2\";\n    KeyCode[KeyCode[\"F3\"] = 61] = \"F3\";\n    KeyCode[KeyCode[\"F4\"] = 62] = \"F4\";\n    KeyCode[KeyCode[\"F5\"] = 63] = \"F5\";\n    KeyCode[KeyCode[\"F6\"] = 64] = \"F6\";\n    KeyCode[KeyCode[\"F7\"] = 65] = \"F7\";\n    KeyCode[KeyCode[\"F8\"] = 66] = \"F8\";\n    KeyCode[KeyCode[\"F9\"] = 67] = \"F9\";\n    KeyCode[KeyCode[\"F10\"] = 68] = \"F10\";\n    KeyCode[KeyCode[\"F11\"] = 69] = \"F11\";\n    KeyCode[KeyCode[\"F12\"] = 70] = \"F12\";\n    KeyCode[KeyCode[\"F13\"] = 71] = \"F13\";\n    KeyCode[KeyCode[\"F14\"] = 72] = \"F14\";\n    KeyCode[KeyCode[\"F15\"] = 73] = \"F15\";\n    KeyCode[KeyCode[\"F16\"] = 74] = \"F16\";\n    KeyCode[KeyCode[\"F17\"] = 75] = \"F17\";\n    KeyCode[KeyCode[\"F18\"] = 76] = \"F18\";\n    KeyCode[KeyCode[\"F19\"] = 77] = \"F19\";\n    KeyCode[KeyCode[\"F20\"] = 78] = \"F20\";\n    KeyCode[KeyCode[\"F21\"] = 79] = \"F21\";\n    KeyCode[KeyCode[\"F22\"] = 80] = \"F22\";\n    KeyCode[KeyCode[\"F23\"] = 81] = \"F23\";\n    KeyCode[KeyCode[\"F24\"] = 82] = \"F24\";\n    KeyCode[KeyCode[\"NumLock\"] = 83] = \"NumLock\";\n    KeyCode[KeyCode[\"ScrollLock\"] = 84] = \"ScrollLock\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the ';:' key\n     */\n    KeyCode[KeyCode[\"Semicolon\"] = 85] = \"Semicolon\";\n    /**\n     * For any country/region, the '+' key\n     * For the US standard keyboard, the '=+' key\n     */\n    KeyCode[KeyCode[\"Equal\"] = 86] = \"Equal\";\n    /**\n     * For any country/region, the ',' key\n     * For the US standard keyboard, the ',<' key\n     */\n    KeyCode[KeyCode[\"Comma\"] = 87] = \"Comma\";\n    /**\n     * For any country/region, the '-' key\n     * For the US standard keyboard, the '-_' key\n     */\n    KeyCode[KeyCode[\"Minus\"] = 88] = \"Minus\";\n    /**\n     * For any country/region, the '.' key\n     * For the US standard keyboard, the '.>' key\n     */\n    KeyCode[KeyCode[\"Period\"] = 89] = \"Period\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the '/?' key\n     */\n    KeyCode[KeyCode[\"Slash\"] = 90] = \"Slash\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the '`~' key\n     */\n    KeyCode[KeyCode[\"Backquote\"] = 91] = \"Backquote\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the '[{' key\n     */\n    KeyCode[KeyCode[\"BracketLeft\"] = 92] = \"BracketLeft\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the '\\|' key\n     */\n    KeyCode[KeyCode[\"Backslash\"] = 93] = \"Backslash\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the ']}' key\n     */\n    KeyCode[KeyCode[\"BracketRight\"] = 94] = \"BracketRight\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     * For the US standard keyboard, the ''\"' key\n     */\n    KeyCode[KeyCode[\"Quote\"] = 95] = \"Quote\";\n    /**\n     * Used for miscellaneous characters; it can vary by keyboard.\n     */\n    KeyCode[KeyCode[\"OEM_8\"] = 96] = \"OEM_8\";\n    /**\n     * Either the angle bracket key or the backslash key on the RT 102-key keyboard.\n     */\n    KeyCode[KeyCode[\"IntlBackslash\"] = 97] = \"IntlBackslash\";\n    KeyCode[KeyCode[\"Numpad0\"] = 98] = \"Numpad0\";\n    KeyCode[KeyCode[\"Numpad1\"] = 99] = \"Numpad1\";\n    KeyCode[KeyCode[\"Numpad2\"] = 100] = \"Numpad2\";\n    KeyCode[KeyCode[\"Numpad3\"] = 101] = \"Numpad3\";\n    KeyCode[KeyCode[\"Numpad4\"] = 102] = \"Numpad4\";\n    KeyCode[KeyCode[\"Numpad5\"] = 103] = \"Numpad5\";\n    KeyCode[KeyCode[\"Numpad6\"] = 104] = \"Numpad6\";\n    KeyCode[KeyCode[\"Numpad7\"] = 105] = \"Numpad7\";\n    KeyCode[KeyCode[\"Numpad8\"] = 106] = \"Numpad8\";\n    KeyCode[KeyCode[\"Numpad9\"] = 107] = \"Numpad9\";\n    KeyCode[KeyCode[\"NumpadMultiply\"] = 108] = \"NumpadMultiply\";\n    KeyCode[KeyCode[\"NumpadAdd\"] = 109] = \"NumpadAdd\";\n    KeyCode[KeyCode[\"NUMPAD_SEPARATOR\"] = 110] = \"NUMPAD_SEPARATOR\";\n    KeyCode[KeyCode[\"NumpadSubtract\"] = 111] = \"NumpadSubtract\";\n    KeyCode[KeyCode[\"NumpadDecimal\"] = 112] = \"NumpadDecimal\";\n    KeyCode[KeyCode[\"NumpadDivide\"] = 113] = \"NumpadDivide\";\n    /**\n     * Cover all key codes when IME is processing input.\n     */\n    KeyCode[KeyCode[\"KEY_IN_COMPOSITION\"] = 114] = \"KEY_IN_COMPOSITION\";\n    KeyCode[KeyCode[\"ABNT_C1\"] = 115] = \"ABNT_C1\";\n    KeyCode[KeyCode[\"ABNT_C2\"] = 116] = \"ABNT_C2\";\n    KeyCode[KeyCode[\"AudioVolumeMute\"] = 117] = \"AudioVolumeMute\";\n    KeyCode[KeyCode[\"AudioVolumeUp\"] = 118] = \"AudioVolumeUp\";\n    KeyCode[KeyCode[\"AudioVolumeDown\"] = 119] = \"AudioVolumeDown\";\n    KeyCode[KeyCode[\"BrowserSearch\"] = 120] = \"BrowserSearch\";\n    KeyCode[KeyCode[\"BrowserHome\"] = 121] = \"BrowserHome\";\n    KeyCode[KeyCode[\"BrowserBack\"] = 122] = \"BrowserBack\";\n    KeyCode[KeyCode[\"BrowserForward\"] = 123] = \"BrowserForward\";\n    KeyCode[KeyCode[\"MediaTrackNext\"] = 124] = \"MediaTrackNext\";\n    KeyCode[KeyCode[\"MediaTrackPrevious\"] = 125] = \"MediaTrackPrevious\";\n    KeyCode[KeyCode[\"MediaStop\"] = 126] = \"MediaStop\";\n    KeyCode[KeyCode[\"MediaPlayPause\"] = 127] = \"MediaPlayPause\";\n    KeyCode[KeyCode[\"LaunchMediaPlayer\"] = 128] = \"LaunchMediaPlayer\";\n    KeyCode[KeyCode[\"LaunchMail\"] = 129] = \"LaunchMail\";\n    KeyCode[KeyCode[\"LaunchApp2\"] = 130] = \"LaunchApp2\";\n    /**\n     * VK_CLEAR, 0x0C, CLEAR key\n     */\n    KeyCode[KeyCode[\"Clear\"] = 131] = \"Clear\";\n    /**\n     * Placed last to cover the length of the enum.\n     * Please do not depend on this value!\n     */\n    KeyCode[KeyCode[\"MAX_VALUE\"] = 132] = \"MAX_VALUE\";\n})(KeyCode || (KeyCode = {}));\nexport var MarkerSeverity;\n(function (MarkerSeverity) {\n    MarkerSeverity[MarkerSeverity[\"Hint\"] = 1] = \"Hint\";\n    MarkerSeverity[MarkerSeverity[\"Info\"] = 2] = \"Info\";\n    MarkerSeverity[MarkerSeverity[\"Warning\"] = 4] = \"Warning\";\n    MarkerSeverity[MarkerSeverity[\"Error\"] = 8] = \"Error\";\n})(MarkerSeverity || (MarkerSeverity = {}));\nexport var MarkerTag;\n(function (MarkerTag) {\n    MarkerTag[MarkerTag[\"Unnecessary\"] = 1] = \"Unnecessary\";\n    MarkerTag[MarkerTag[\"Deprecated\"] = 2] = \"Deprecated\";\n})(MarkerTag || (MarkerTag = {}));\n/**\n * Position in the minimap to render the decoration.\n */\nexport var MinimapPosition;\n(function (MinimapPosition) {\n    MinimapPosition[MinimapPosition[\"Inline\"] = 1] = \"Inline\";\n    MinimapPosition[MinimapPosition[\"Gutter\"] = 2] = \"Gutter\";\n})(MinimapPosition || (MinimapPosition = {}));\n/**\n * Section header style.\n */\nexport var MinimapSectionHeaderStyle;\n(function (MinimapSectionHeaderStyle) {\n    MinimapSectionHeaderStyle[MinimapSectionHeaderStyle[\"Normal\"] = 1] = \"Normal\";\n    MinimapSectionHeaderStyle[MinimapSectionHeaderStyle[\"Underlined\"] = 2] = \"Underlined\";\n})(MinimapSectionHeaderStyle || (MinimapSectionHeaderStyle = {}));\n/**\n * Type of hit element with the mouse in the editor.\n */\nexport var MouseTargetType;\n(function (MouseTargetType) {\n    /**\n     * Mouse is on top of an unknown element.\n     */\n    MouseTargetType[MouseTargetType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    /**\n     * Mouse is on top of the textarea used for input.\n     */\n    MouseTargetType[MouseTargetType[\"TEXTAREA\"] = 1] = \"TEXTAREA\";\n    /**\n     * Mouse is on top of the glyph margin\n     */\n    MouseTargetType[MouseTargetType[\"GUTTER_GLYPH_MARGIN\"] = 2] = \"GUTTER_GLYPH_MARGIN\";\n    /**\n     * Mouse is on top of the line numbers\n     */\n    MouseTargetType[MouseTargetType[\"GUTTER_LINE_NUMBERS\"] = 3] = \"GUTTER_LINE_NUMBERS\";\n    /**\n     * Mouse is on top of the line decorations\n     */\n    MouseTargetType[MouseTargetType[\"GUTTER_LINE_DECORATIONS\"] = 4] = \"GUTTER_LINE_DECORATIONS\";\n    /**\n     * Mouse is on top of the whitespace left in the gutter by a view zone.\n     */\n    MouseTargetType[MouseTargetType[\"GUTTER_VIEW_ZONE\"] = 5] = \"GUTTER_VIEW_ZONE\";\n    /**\n     * Mouse is on top of text in the content.\n     */\n    MouseTargetType[MouseTargetType[\"CONTENT_TEXT\"] = 6] = \"CONTENT_TEXT\";\n    /**\n     * Mouse is on top of empty space in the content (e.g. after line text or below last line)\n     */\n    MouseTargetType[MouseTargetType[\"CONTENT_EMPTY\"] = 7] = \"CONTENT_EMPTY\";\n    /**\n     * Mouse is on top of a view zone in the content.\n     */\n    MouseTargetType[MouseTargetType[\"CONTENT_VIEW_ZONE\"] = 8] = \"CONTENT_VIEW_ZONE\";\n    /**\n     * Mouse is on top of a content widget.\n     */\n    MouseTargetType[MouseTargetType[\"CONTENT_WIDGET\"] = 9] = \"CONTENT_WIDGET\";\n    /**\n     * Mouse is on top of the decorations overview ruler.\n     */\n    MouseTargetType[MouseTargetType[\"OVERVIEW_RULER\"] = 10] = \"OVERVIEW_RULER\";\n    /**\n     * Mouse is on top of a scrollbar.\n     */\n    MouseTargetType[MouseTargetType[\"SCROLLBAR\"] = 11] = \"SCROLLBAR\";\n    /**\n     * Mouse is on top of an overlay widget.\n     */\n    MouseTargetType[MouseTargetType[\"OVERLAY_WIDGET\"] = 12] = \"OVERLAY_WIDGET\";\n    /**\n     * Mouse is outside of the editor.\n     */\n    MouseTargetType[MouseTargetType[\"OUTSIDE_EDITOR\"] = 13] = \"OUTSIDE_EDITOR\";\n})(MouseTargetType || (MouseTargetType = {}));\nexport var NewSymbolNameTag;\n(function (NewSymbolNameTag) {\n    NewSymbolNameTag[NewSymbolNameTag[\"AIGenerated\"] = 1] = \"AIGenerated\";\n})(NewSymbolNameTag || (NewSymbolNameTag = {}));\nexport var NewSymbolNameTriggerKind;\n(function (NewSymbolNameTriggerKind) {\n    NewSymbolNameTriggerKind[NewSymbolNameTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n    NewSymbolNameTriggerKind[NewSymbolNameTriggerKind[\"Automatic\"] = 1] = \"Automatic\";\n})(NewSymbolNameTriggerKind || (NewSymbolNameTriggerKind = {}));\n/**\n * A positioning preference for rendering overlay widgets.\n */\nexport var OverlayWidgetPositionPreference;\n(function (OverlayWidgetPositionPreference) {\n    /**\n     * Position the overlay widget in the top right corner\n     */\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"TOP_RIGHT_CORNER\"] = 0] = \"TOP_RIGHT_CORNER\";\n    /**\n     * Position the overlay widget in the bottom right corner\n     */\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"BOTTOM_RIGHT_CORNER\"] = 1] = \"BOTTOM_RIGHT_CORNER\";\n    /**\n     * Position the overlay widget in the top center\n     */\n    OverlayWidgetPositionPreference[OverlayWidgetPositionPreference[\"TOP_CENTER\"] = 2] = \"TOP_CENTER\";\n})(OverlayWidgetPositionPreference || (OverlayWidgetPositionPreference = {}));\n/**\n * Vertical Lane in the overview ruler of the editor.\n */\nexport var OverviewRulerLane;\n(function (OverviewRulerLane) {\n    OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\n    OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\n    OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\n    OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\n})(OverviewRulerLane || (OverviewRulerLane = {}));\n/**\n * How a partial acceptance was triggered.\n */\nexport var PartialAcceptTriggerKind;\n(function (PartialAcceptTriggerKind) {\n    PartialAcceptTriggerKind[PartialAcceptTriggerKind[\"Word\"] = 0] = \"Word\";\n    PartialAcceptTriggerKind[PartialAcceptTriggerKind[\"Line\"] = 1] = \"Line\";\n    PartialAcceptTriggerKind[PartialAcceptTriggerKind[\"Suggest\"] = 2] = \"Suggest\";\n})(PartialAcceptTriggerKind || (PartialAcceptTriggerKind = {}));\nexport var PositionAffinity;\n(function (PositionAffinity) {\n    /**\n     * Prefers the left most position.\n    */\n    PositionAffinity[PositionAffinity[\"Left\"] = 0] = \"Left\";\n    /**\n     * Prefers the right most position.\n    */\n    PositionAffinity[PositionAffinity[\"Right\"] = 1] = \"Right\";\n    /**\n     * No preference.\n    */\n    PositionAffinity[PositionAffinity[\"None\"] = 2] = \"None\";\n    /**\n     * If the given position is on injected text, prefers the position left of it.\n    */\n    PositionAffinity[PositionAffinity[\"LeftOfInjectedText\"] = 3] = \"LeftOfInjectedText\";\n    /**\n     * If the given position is on injected text, prefers the position right of it.\n    */\n    PositionAffinity[PositionAffinity[\"RightOfInjectedText\"] = 4] = \"RightOfInjectedText\";\n})(PositionAffinity || (PositionAffinity = {}));\nexport var RenderLineNumbersType;\n(function (RenderLineNumbersType) {\n    RenderLineNumbersType[RenderLineNumbersType[\"Off\"] = 0] = \"Off\";\n    RenderLineNumbersType[RenderLineNumbersType[\"On\"] = 1] = \"On\";\n    RenderLineNumbersType[RenderLineNumbersType[\"Relative\"] = 2] = \"Relative\";\n    RenderLineNumbersType[RenderLineNumbersType[\"Interval\"] = 3] = \"Interval\";\n    RenderLineNumbersType[RenderLineNumbersType[\"Custom\"] = 4] = \"Custom\";\n})(RenderLineNumbersType || (RenderLineNumbersType = {}));\nexport var RenderMinimap;\n(function (RenderMinimap) {\n    RenderMinimap[RenderMinimap[\"None\"] = 0] = \"None\";\n    RenderMinimap[RenderMinimap[\"Text\"] = 1] = \"Text\";\n    RenderMinimap[RenderMinimap[\"Blocks\"] = 2] = \"Blocks\";\n})(RenderMinimap || (RenderMinimap = {}));\nexport var ScrollType;\n(function (ScrollType) {\n    ScrollType[ScrollType[\"Smooth\"] = 0] = \"Smooth\";\n    ScrollType[ScrollType[\"Immediate\"] = 1] = \"Immediate\";\n})(ScrollType || (ScrollType = {}));\nexport var ScrollbarVisibility;\n(function (ScrollbarVisibility) {\n    ScrollbarVisibility[ScrollbarVisibility[\"Auto\"] = 1] = \"Auto\";\n    ScrollbarVisibility[ScrollbarVisibility[\"Hidden\"] = 2] = \"Hidden\";\n    ScrollbarVisibility[ScrollbarVisibility[\"Visible\"] = 3] = \"Visible\";\n})(ScrollbarVisibility || (ScrollbarVisibility = {}));\n/**\n * The direction of a selection.\n */\nexport var SelectionDirection;\n(function (SelectionDirection) {\n    /**\n     * The selection starts above where it ends.\n     */\n    SelectionDirection[SelectionDirection[\"LTR\"] = 0] = \"LTR\";\n    /**\n     * The selection starts below where it ends.\n     */\n    SelectionDirection[SelectionDirection[\"RTL\"] = 1] = \"RTL\";\n})(SelectionDirection || (SelectionDirection = {}));\nexport var ShowLightbulbIconMode;\n(function (ShowLightbulbIconMode) {\n    ShowLightbulbIconMode[\"Off\"] = \"off\";\n    ShowLightbulbIconMode[\"OnCode\"] = \"onCode\";\n    ShowLightbulbIconMode[\"On\"] = \"on\";\n})(ShowLightbulbIconMode || (ShowLightbulbIconMode = {}));\nexport var SignatureHelpTriggerKind;\n(function (SignatureHelpTriggerKind) {\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"Invoke\"] = 1] = \"Invoke\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"TriggerCharacter\"] = 2] = \"TriggerCharacter\";\n    SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"ContentChange\"] = 3] = \"ContentChange\";\n})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind[SymbolKind[\"File\"] = 0] = \"File\";\n    SymbolKind[SymbolKind[\"Module\"] = 1] = \"Module\";\n    SymbolKind[SymbolKind[\"Namespace\"] = 2] = \"Namespace\";\n    SymbolKind[SymbolKind[\"Package\"] = 3] = \"Package\";\n    SymbolKind[SymbolKind[\"Class\"] = 4] = \"Class\";\n    SymbolKind[SymbolKind[\"Method\"] = 5] = \"Method\";\n    SymbolKind[SymbolKind[\"Property\"] = 6] = \"Property\";\n    SymbolKind[SymbolKind[\"Field\"] = 7] = \"Field\";\n    SymbolKind[SymbolKind[\"Constructor\"] = 8] = \"Constructor\";\n    SymbolKind[SymbolKind[\"Enum\"] = 9] = \"Enum\";\n    SymbolKind[SymbolKind[\"Interface\"] = 10] = \"Interface\";\n    SymbolKind[SymbolKind[\"Function\"] = 11] = \"Function\";\n    SymbolKind[SymbolKind[\"Variable\"] = 12] = \"Variable\";\n    SymbolKind[SymbolKind[\"Constant\"] = 13] = \"Constant\";\n    SymbolKind[SymbolKind[\"String\"] = 14] = \"String\";\n    SymbolKind[SymbolKind[\"Number\"] = 15] = \"Number\";\n    SymbolKind[SymbolKind[\"Boolean\"] = 16] = \"Boolean\";\n    SymbolKind[SymbolKind[\"Array\"] = 17] = \"Array\";\n    SymbolKind[SymbolKind[\"Object\"] = 18] = \"Object\";\n    SymbolKind[SymbolKind[\"Key\"] = 19] = \"Key\";\n    SymbolKind[SymbolKind[\"Null\"] = 20] = \"Null\";\n    SymbolKind[SymbolKind[\"EnumMember\"] = 21] = \"EnumMember\";\n    SymbolKind[SymbolKind[\"Struct\"] = 22] = \"Struct\";\n    SymbolKind[SymbolKind[\"Event\"] = 23] = \"Event\";\n    SymbolKind[SymbolKind[\"Operator\"] = 24] = \"Operator\";\n    SymbolKind[SymbolKind[\"TypeParameter\"] = 25] = \"TypeParameter\";\n})(SymbolKind || (SymbolKind = {}));\nexport var SymbolTag;\n(function (SymbolTag) {\n    SymbolTag[SymbolTag[\"Deprecated\"] = 1] = \"Deprecated\";\n})(SymbolTag || (SymbolTag = {}));\n/**\n * The kind of animation in which the editor's cursor should be rendered.\n */\nexport var TextEditorCursorBlinkingStyle;\n(function (TextEditorCursorBlinkingStyle) {\n    /**\n     * Hidden\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Hidden\"] = 0] = \"Hidden\";\n    /**\n     * Blinking\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Blink\"] = 1] = \"Blink\";\n    /**\n     * Blinking with smooth fading\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Smooth\"] = 2] = \"Smooth\";\n    /**\n     * Blinking with prolonged filled state and smooth fading\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Phase\"] = 3] = \"Phase\";\n    /**\n     * Expand collapse animation on the y axis\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Expand\"] = 4] = \"Expand\";\n    /**\n     * No-Blinking\n     */\n    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Solid\"] = 5] = \"Solid\";\n})(TextEditorCursorBlinkingStyle || (TextEditorCursorBlinkingStyle = {}));\n/**\n * The style in which the editor's cursor should be rendered.\n */\nexport var TextEditorCursorStyle;\n(function (TextEditorCursorStyle) {\n    /**\n     * As a vertical line (sitting between two characters).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Line\"] = 1] = \"Line\";\n    /**\n     * As a block (sitting on top of a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Block\"] = 2] = \"Block\";\n    /**\n     * As a horizontal line (sitting under a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Underline\"] = 3] = \"Underline\";\n    /**\n     * As a thin vertical line (sitting between two characters).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"LineThin\"] = 4] = \"LineThin\";\n    /**\n     * As an outlined block (sitting on top of a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"BlockOutline\"] = 5] = \"BlockOutline\";\n    /**\n     * As a thin horizontal line (sitting under a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"UnderlineThin\"] = 6] = \"UnderlineThin\";\n})(TextEditorCursorStyle || (TextEditorCursorStyle = {}));\n/**\n * Describes the behavior of decorations when typing/editing near their edges.\n * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`\n */\nexport var TrackedRangeStickiness;\n(function (TrackedRangeStickiness) {\n    TrackedRangeStickiness[TrackedRangeStickiness[\"AlwaysGrowsWhenTypingAtEdges\"] = 0] = \"AlwaysGrowsWhenTypingAtEdges\";\n    TrackedRangeStickiness[TrackedRangeStickiness[\"NeverGrowsWhenTypingAtEdges\"] = 1] = \"NeverGrowsWhenTypingAtEdges\";\n    TrackedRangeStickiness[TrackedRangeStickiness[\"GrowsOnlyWhenTypingBefore\"] = 2] = \"GrowsOnlyWhenTypingBefore\";\n    TrackedRangeStickiness[TrackedRangeStickiness[\"GrowsOnlyWhenTypingAfter\"] = 3] = \"GrowsOnlyWhenTypingAfter\";\n})(TrackedRangeStickiness || (TrackedRangeStickiness = {}));\n/**\n * Describes how to indent wrapped lines.\n */\nexport var WrappingIndent;\n(function (WrappingIndent) {\n    /**\n     * No indentation => wrapped lines begin at column 1.\n     */\n    WrappingIndent[WrappingIndent[\"None\"] = 0] = \"None\";\n    /**\n     * Same => wrapped lines get the same indentation as the parent.\n     */\n    WrappingIndent[WrappingIndent[\"Same\"] = 1] = \"Same\";\n    /**\n     * Indent => wrapped lines get +1 indentation toward the parent.\n     */\n    WrappingIndent[WrappingIndent[\"Indent\"] = 2] = \"Indent\";\n    /**\n     * DeepIndent => wrapped lines get +2 indentation toward the parent.\n     */\n    WrappingIndent[WrappingIndent[\"DeepIndent\"] = 3] = \"DeepIndent\";\n})(WrappingIndent || (WrappingIndent = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nexport var InspectTokensNLS;\n(function (InspectTokensNLS) {\n    InspectTokensNLS.inspectTokensAction = nls.localize('inspectTokens', \"Developer: Inspect Tokens\");\n})(InspectTokensNLS || (InspectTokensNLS = {}));\nexport var GoToLineNLS;\n(function (GoToLineNLS) {\n    GoToLineNLS.gotoLineActionLabel = nls.localize('gotoLineActionLabel', \"Go to Line/Column...\");\n})(GoToLineNLS || (GoToLineNLS = {}));\nexport var QuickHelpNLS;\n(function (QuickHelpNLS) {\n    QuickHelpNLS.helpQuickAccessActionLabel = nls.localize('helpQuickAccess', \"Show all Quick Access Providers\");\n})(QuickHelpNLS || (QuickHelpNLS = {}));\nexport var QuickCommandNLS;\n(function (QuickCommandNLS) {\n    QuickCommandNLS.quickCommandActionLabel = nls.localize('quickCommandActionLabel', \"Command Palette\");\n    QuickCommandNLS.quickCommandHelp = nls.localize('quickCommandActionHelp', \"Show And Run Commands\");\n})(QuickCommandNLS || (QuickCommandNLS = {}));\nexport var QuickOutlineNLS;\n(function (QuickOutlineNLS) {\n    QuickOutlineNLS.quickOutlineActionLabel = nls.localize('quickOutlineActionLabel', \"Go to Symbol...\");\n    QuickOutlineNLS.quickOutlineByCategoryActionLabel = nls.localize('quickOutlineByCategoryActionLabel', \"Go to Symbol by Category...\");\n})(QuickOutlineNLS || (QuickOutlineNLS = {}));\nexport var StandaloneCodeEditorNLS;\n(function (StandaloneCodeEditorNLS) {\n    StandaloneCodeEditorNLS.editorViewAccessibleLabel = nls.localize('editorViewAccessibleLabel', \"Editor content\");\n    StandaloneCodeEditorNLS.accessibilityHelpMessage = nls.localize('accessibilityHelpMessage', \"Press Alt+F1 for Accessibility Options.\");\n})(StandaloneCodeEditorNLS || (StandaloneCodeEditorNLS = {}));\nexport var ToggleHighContrastNLS;\n(function (ToggleHighContrastNLS) {\n    ToggleHighContrastNLS.toggleHighContrast = nls.localize('toggleHighContrast', \"Toggle High Contrast Theme\");\n})(ToggleHighContrastNLS || (ToggleHighContrastNLS = {}));\nexport var StandaloneServicesNLS;\n(function (StandaloneServicesNLS) {\n    StandaloneServicesNLS.bulkEditServiceSummary = nls.localize('bulkEditServiceSummary', \"Made {0} edits in {1} files\");\n})(StandaloneServicesNLS || (StandaloneServicesNLS = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class BracketInfo {\n    constructor(range, \n    /** 0-based level */\n    nestingLevel, nestingLevelOfEqualBracketType, isInvalid) {\n        this.range = range;\n        this.nestingLevel = nestingLevel;\n        this.nestingLevelOfEqualBracketType = nestingLevelOfEqualBracketType;\n        this.isInvalid = isInvalid;\n    }\n}\nexport class BracketPairInfo {\n    constructor(range, openingBracketRange, closingBracketRange, \n    /** 0-based */\n    nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode) {\n        this.range = range;\n        this.openingBracketRange = openingBracketRange;\n        this.closingBracketRange = closingBracketRange;\n        this.nestingLevel = nestingLevel;\n        this.nestingLevelOfEqualBracketType = nestingLevelOfEqualBracketType;\n        this.bracketPairNode = bracketPairNode;\n    }\n    get openingBracketInfo() {\n        return this.bracketPairNode.openingBracket.bracketInfo;\n    }\n}\nexport class BracketPairWithMinIndentationInfo extends BracketPairInfo {\n    constructor(range, openingBracketRange, closingBracketRange, \n    /**\n     * 0-based\n    */\n    nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode, \n    /**\n     * -1 if not requested, otherwise the size of the minimum indentation in the bracket pair in terms of visible columns.\n    */\n    minVisibleColumnIndentation) {\n        super(range, openingBracketRange, closingBracketRange, nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode);\n        this.minVisibleColumnIndentation = minVisibleColumnIndentation;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n    constructor() {\n        this.changeType = 1 /* RawContentChangedType.Flush */;\n    }\n}\n/**\n * Represents text injected on a line\n * @internal\n */\nexport class LineInjectedText {\n    static applyInjectedText(lineText, injectedTexts) {\n        if (!injectedTexts || injectedTexts.length === 0) {\n            return lineText;\n        }\n        let result = '';\n        let lastOriginalOffset = 0;\n        for (const injectedText of injectedTexts) {\n            result += lineText.substring(lastOriginalOffset, injectedText.column - 1);\n            lastOriginalOffset = injectedText.column - 1;\n            result += injectedText.options.content;\n        }\n        result += lineText.substring(lastOriginalOffset);\n        return result;\n    }\n    static fromDecorations(decorations) {\n        const result = [];\n        for (const decoration of decorations) {\n            if (decoration.options.before && decoration.options.before.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.startLineNumber, decoration.range.startColumn, decoration.options.before, 0));\n            }\n            if (decoration.options.after && decoration.options.after.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.endLineNumber, decoration.range.endColumn, decoration.options.after, 1));\n            }\n        }\n        result.sort((a, b) => {\n            if (a.lineNumber === b.lineNumber) {\n                if (a.column === b.column) {\n                    return a.order - b.order;\n                }\n                return a.column - b.column;\n            }\n            return a.lineNumber - b.lineNumber;\n        });\n        return result;\n    }\n    constructor(ownerId, lineNumber, column, options, order) {\n        this.ownerId = ownerId;\n        this.lineNumber = lineNumber;\n        this.column = column;\n        this.options = options;\n        this.order = order;\n    }\n}\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nexport class ModelRawLineChanged {\n    constructor(lineNumber, detail, injectedText) {\n        this.changeType = 2 /* RawContentChangedType.LineChanged */;\n        this.lineNumber = lineNumber;\n        this.detail = detail;\n        this.injectedText = injectedText;\n    }\n}\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nexport class ModelRawLinesDeleted {\n    constructor(fromLineNumber, toLineNumber) {\n        this.changeType = 3 /* RawContentChangedType.LinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nexport class ModelRawLinesInserted {\n    constructor(fromLineNumber, toLineNumber, detail, injectedTexts) {\n        this.changeType = 4 /* RawContentChangedType.LinesInserted */;\n        this.injectedTexts = injectedTexts;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n        this.detail = detail;\n    }\n}\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nexport class ModelRawEOLChanged {\n    constructor() {\n        this.changeType = 5 /* RawContentChangedType.EOLChanged */;\n    }\n}\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nexport class ModelRawContentChangedEvent {\n    constructor(changes, versionId, isUndoing, isRedoing) {\n        this.changes = changes;\n        this.versionId = versionId;\n        this.isUndoing = isUndoing;\n        this.isRedoing = isRedoing;\n        this.resultingSelection = null;\n    }\n    containsEvent(type) {\n        for (let i = 0, len = this.changes.length; i < len; i++) {\n            const change = this.changes[i];\n            if (change.changeType === type) {\n                return true;\n            }\n        }\n        return false;\n    }\n    static merge(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        return new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n    }\n}\n/**\n * An event describing a change in injected text.\n * @internal\n */\nexport class ModelInjectedTextChangedEvent {\n    constructor(changes) {\n        this.changes = changes;\n    }\n}\n/**\n * @internal\n */\nexport class InternalModelContentChangeEvent {\n    constructor(rawContentChangedEvent, contentChangedEvent) {\n        this.rawContentChangedEvent = rawContentChangedEvent;\n        this.contentChangedEvent = contentChangedEvent;\n    }\n    merge(other) {\n        const rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n        const contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n        return new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n    }\n    static _mergeChangeEvents(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const eol = b.eol;\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        const isFlush = (a.isFlush || b.isFlush);\n        const isEolChange = a.isEolChange && b.isEolChange; // both must be true to not confuse listeners who skip such edits\n        return {\n            changes: changes,\n            eol: eol,\n            isEolChange: isEolChange,\n            versionId: versionId,\n            isUndoing: isUndoing,\n            isRedoing: isRedoing,\n            isFlush: isFlush,\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var HorizontalGuidesState;\n(function (HorizontalGuidesState) {\n    HorizontalGuidesState[HorizontalGuidesState[\"Disabled\"] = 0] = \"Disabled\";\n    HorizontalGuidesState[HorizontalGuidesState[\"EnabledForActive\"] = 1] = \"EnabledForActive\";\n    HorizontalGuidesState[HorizontalGuidesState[\"Enabled\"] = 2] = \"Enabled\";\n})(HorizontalGuidesState || (HorizontalGuidesState = {}));\nexport class IndentGuide {\n    constructor(visibleColumn, column, className, \n    /**\n     * If set, this indent guide is a horizontal guide (no vertical part).\n     * It starts at visibleColumn and continues until endColumn.\n    */\n    horizontalLine, \n    /**\n     * If set (!= -1), only show this guide for wrapped lines that don't contain this model column, but are after it.\n    */\n    forWrappedLinesAfterColumn, forWrappedLinesBeforeOrAtColumn) {\n        this.visibleColumn = visibleColumn;\n        this.column = column;\n        this.className = className;\n        this.horizontalLine = horizontalLine;\n        this.forWrappedLinesAfterColumn = forWrappedLinesAfterColumn;\n        this.forWrappedLinesBeforeOrAtColumn = forWrappedLinesBeforeOrAtColumn;\n        if ((visibleColumn !== -1) === (column !== -1)) {\n            throw new Error();\n        }\n    }\n}\nexport class IndentGuideHorizontalLine {\n    constructor(top, endColumn) {\n        this.top = top;\n        this.endColumn = endColumn;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../base/common/lifecycle.js';\nexport class TokenizationRegistry {\n    constructor() {\n        this._tokenizationSupports = new Map();\n        this._factories = new Map();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._colorMap = null;\n    }\n    handleChange(languageIds) {\n        this._onDidChange.fire({\n            changedLanguages: languageIds,\n            changedColorMap: false\n        });\n    }\n    register(languageId, support) {\n        this._tokenizationSupports.set(languageId, support);\n        this.handleChange([languageId]);\n        return toDisposable(() => {\n            if (this._tokenizationSupports.get(languageId) !== support) {\n                return;\n            }\n            this._tokenizationSupports.delete(languageId);\n            this.handleChange([languageId]);\n        });\n    }\n    get(languageId) {\n        return this._tokenizationSupports.get(languageId) || null;\n    }\n    registerFactory(languageId, factory) {\n        var _a;\n        (_a = this._factories.get(languageId)) === null || _a === void 0 ? void 0 : _a.dispose();\n        const myData = new TokenizationSupportFactoryData(this, languageId, factory);\n        this._factories.set(languageId, myData);\n        return toDisposable(() => {\n            const v = this._factories.get(languageId);\n            if (!v || v !== myData) {\n                return;\n            }\n            this._factories.delete(languageId);\n            v.dispose();\n        });\n    }\n    async getOrCreate(languageId) {\n        // check first if the support is already set\n        const tokenizationSupport = this.get(languageId);\n        if (tokenizationSupport) {\n            return tokenizationSupport;\n        }\n        const factory = this._factories.get(languageId);\n        if (!factory || factory.isResolved) {\n            // no factory or factory.resolve already finished\n            return null;\n        }\n        await factory.resolve();\n        return this.get(languageId);\n    }\n    isResolved(languageId) {\n        const tokenizationSupport = this.get(languageId);\n        if (tokenizationSupport) {\n            return true;\n        }\n        const factory = this._factories.get(languageId);\n        if (!factory || factory.isResolved) {\n            return true;\n        }\n        return false;\n    }\n    setColorMap(colorMap) {\n        this._colorMap = colorMap;\n        this._onDidChange.fire({\n            changedLanguages: Array.from(this._tokenizationSupports.keys()),\n            changedColorMap: true\n        });\n    }\n    getColorMap() {\n        return this._colorMap;\n    }\n    getDefaultBackground() {\n        if (this._colorMap && this._colorMap.length > 2 /* ColorId.DefaultBackground */) {\n            return this._colorMap[2 /* ColorId.DefaultBackground */];\n        }\n        return null;\n    }\n}\nclass TokenizationSupportFactoryData extends Disposable {\n    get isResolved() {\n        return this._isResolved;\n    }\n    constructor(_registry, _languageId, _factory) {\n        super();\n        this._registry = _registry;\n        this._languageId = _languageId;\n        this._factory = _factory;\n        this._isDisposed = false;\n        this._resolvePromise = null;\n        this._isResolved = false;\n    }\n    dispose() {\n        this._isDisposed = true;\n        super.dispose();\n    }\n    async resolve() {\n        if (!this._resolvePromise) {\n            this._resolvePromise = this._create();\n        }\n        return this._resolvePromise;\n    }\n    async _create() {\n        const value = await this._factory.tokenizationSupport;\n        this._isResolved = true;\n        if (value && !this._isDisposed) {\n            this._register(this._registry.register(this._languageId, value));\n        }\n    }\n}\n","/**\n * Represents contiguous tokens over a contiguous range of lines.\n */\nexport class ContiguousMultilineTokens {\n    /**\n     * (Inclusive) start line number for these tokens.\n     */\n    get startLineNumber() {\n        return this._startLineNumber;\n    }\n    /**\n     * (Inclusive) end line number for these tokens.\n     */\n    get endLineNumber() {\n        return this._startLineNumber + this._tokens.length - 1;\n    }\n    constructor(startLineNumber, tokens) {\n        this._startLineNumber = startLineNumber;\n        this._tokens = tokens;\n    }\n    /**\n     * @see {@link _tokens}\n     */\n    getLineTokens(lineNumber) {\n        return this._tokens[lineNumber - this._startLineNumber];\n    }\n    appendLineTokens(lineTokens) {\n        this._tokens.push(lineTokens);\n    }\n}\n","import { ContiguousMultilineTokens } from './contiguousMultilineTokens.js';\nexport class ContiguousMultilineTokensBuilder {\n    constructor() {\n        this._tokens = [];\n    }\n    add(lineNumber, lineTokens) {\n        if (this._tokens.length > 0) {\n            const last = this._tokens[this._tokens.length - 1];\n            if (last.endLineNumber + 1 === lineNumber) {\n                // append\n                last.appendLineTokens(lineTokens);\n                return;\n            }\n        }\n        this._tokens.push(new ContiguousMultilineTokens(lineNumber, [lineTokens]));\n    }\n    finalize() {\n        return this._tokens;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineTokens } from './lineTokens.js';\nexport const EMPTY_LINE_TOKENS = (new Uint32Array(0)).buffer;\nexport class ContiguousTokensEditing {\n    static deleteBeginning(lineTokens, toChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        return ContiguousTokensEditing.delete(lineTokens, 0, toChIndex);\n    }\n    static deleteEnding(lineTokens, fromChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const lineTextLength = tokens[tokens.length - 2];\n        return ContiguousTokensEditing.delete(lineTokens, fromChIndex, lineTextLength);\n    }\n    static delete(lineTokens, fromChIndex, toChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS || fromChIndex === toChIndex) {\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const tokensCount = (tokens.length >>> 1);\n        // special case: deleting everything\n        if (fromChIndex === 0 && tokens[tokens.length - 2] === toChIndex) {\n            return EMPTY_LINE_TOKENS;\n        }\n        const fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, fromChIndex);\n        const fromTokenStartOffset = (fromTokenIndex > 0 ? tokens[(fromTokenIndex - 1) << 1] : 0);\n        const fromTokenEndOffset = tokens[fromTokenIndex << 1];\n        if (toChIndex < fromTokenEndOffset) {\n            // the delete range is inside a single token\n            const delta = (toChIndex - fromChIndex);\n            for (let i = fromTokenIndex; i < tokensCount; i++) {\n                tokens[i << 1] -= delta;\n            }\n            return lineTokens;\n        }\n        let dest;\n        let lastEnd;\n        if (fromTokenStartOffset !== fromChIndex) {\n            tokens[fromTokenIndex << 1] = fromChIndex;\n            dest = ((fromTokenIndex + 1) << 1);\n            lastEnd = fromChIndex;\n        }\n        else {\n            dest = (fromTokenIndex << 1);\n            lastEnd = fromTokenStartOffset;\n        }\n        const delta = (toChIndex - fromChIndex);\n        for (let tokenIndex = fromTokenIndex + 1; tokenIndex < tokensCount; tokenIndex++) {\n            const tokenEndOffset = tokens[tokenIndex << 1] - delta;\n            if (tokenEndOffset > lastEnd) {\n                tokens[dest++] = tokenEndOffset;\n                tokens[dest++] = tokens[(tokenIndex << 1) + 1];\n                lastEnd = tokenEndOffset;\n            }\n        }\n        if (dest === tokens.length) {\n            // nothing to trim\n            return lineTokens;\n        }\n        const tmp = new Uint32Array(dest);\n        tmp.set(tokens.subarray(0, dest), 0);\n        return tmp.buffer;\n    }\n    static append(lineTokens, _otherTokens) {\n        if (_otherTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        if (lineTokens === EMPTY_LINE_TOKENS) {\n            return _otherTokens;\n        }\n        if (lineTokens === null) {\n            return lineTokens;\n        }\n        if (_otherTokens === null) {\n            // cannot determine combined line length...\n            return null;\n        }\n        const myTokens = toUint32Array(lineTokens);\n        const otherTokens = toUint32Array(_otherTokens);\n        const otherTokensCount = (otherTokens.length >>> 1);\n        const result = new Uint32Array(myTokens.length + otherTokens.length);\n        result.set(myTokens, 0);\n        let dest = myTokens.length;\n        const delta = myTokens[myTokens.length - 2];\n        for (let i = 0; i < otherTokensCount; i++) {\n            result[dest++] = otherTokens[(i << 1)] + delta;\n            result[dest++] = otherTokens[(i << 1) + 1];\n        }\n        return result.buffer;\n    }\n    static insert(lineTokens, chIndex, textLength) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            // nothing to do\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const tokensCount = (tokens.length >>> 1);\n        let fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, chIndex);\n        if (fromTokenIndex > 0) {\n            const fromTokenStartOffset = tokens[(fromTokenIndex - 1) << 1];\n            if (fromTokenStartOffset === chIndex) {\n                fromTokenIndex--;\n            }\n        }\n        for (let tokenIndex = fromTokenIndex; tokenIndex < tokensCount; tokenIndex++) {\n            tokens[tokenIndex << 1] += textLength;\n        }\n        return lineTokens;\n    }\n}\nexport function toUint32Array(arr) {\n    if (arr instanceof Uint32Array) {\n        return arr;\n    }\n    else {\n        return new Uint32Array(arr);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { ContiguousTokensEditing, EMPTY_LINE_TOKENS, toUint32Array } from './contiguousTokensEditing.js';\nimport { LineTokens } from './lineTokens.js';\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\n/**\n * Represents contiguous tokens in a text model.\n */\nexport class ContiguousTokensStore {\n    constructor(languageIdCodec) {\n        this._lineTokens = [];\n        this._len = 0;\n        this._languageIdCodec = languageIdCodec;\n    }\n    flush() {\n        this._lineTokens = [];\n        this._len = 0;\n    }\n    get hasTokens() {\n        return this._lineTokens.length > 0;\n    }\n    getTokens(topLevelLanguageId, lineIndex, lineText) {\n        let rawLineTokens = null;\n        if (lineIndex < this._len) {\n            rawLineTokens = this._lineTokens[lineIndex];\n        }\n        if (rawLineTokens !== null && rawLineTokens !== EMPTY_LINE_TOKENS) {\n            return new LineTokens(toUint32Array(rawLineTokens), lineText, this._languageIdCodec);\n        }\n        const lineTokens = new Uint32Array(2);\n        lineTokens[0] = lineText.length;\n        lineTokens[1] = getDefaultMetadata(this._languageIdCodec.encodeLanguageId(topLevelLanguageId));\n        return new LineTokens(lineTokens, lineText, this._languageIdCodec);\n    }\n    static _massageTokens(topLevelLanguageId, lineTextLength, _tokens) {\n        const tokens = _tokens ? toUint32Array(_tokens) : null;\n        if (lineTextLength === 0) {\n            let hasDifferentLanguageId = false;\n            if (tokens && tokens.length > 1) {\n                hasDifferentLanguageId = (TokenMetadata.getLanguageId(tokens[1]) !== topLevelLanguageId);\n            }\n            if (!hasDifferentLanguageId) {\n                return EMPTY_LINE_TOKENS;\n            }\n        }\n        if (!tokens || tokens.length === 0) {\n            const tokens = new Uint32Array(2);\n            tokens[0] = lineTextLength;\n            tokens[1] = getDefaultMetadata(topLevelLanguageId);\n            return tokens.buffer;\n        }\n        // Ensure the last token covers the end of the text\n        tokens[tokens.length - 2] = lineTextLength;\n        if (tokens.byteOffset === 0 && tokens.byteLength === tokens.buffer.byteLength) {\n            // Store directly the ArrayBuffer pointer to save an object\n            return tokens.buffer;\n        }\n        return tokens;\n    }\n    _ensureLine(lineIndex) {\n        while (lineIndex >= this._len) {\n            this._lineTokens[this._len] = null;\n            this._len++;\n        }\n    }\n    _deleteLines(start, deleteCount) {\n        if (deleteCount === 0) {\n            return;\n        }\n        if (start + deleteCount > this._len) {\n            deleteCount = this._len - start;\n        }\n        this._lineTokens.splice(start, deleteCount);\n        this._len -= deleteCount;\n    }\n    _insertLines(insertIndex, insertCount) {\n        if (insertCount === 0) {\n            return;\n        }\n        const lineTokens = [];\n        for (let i = 0; i < insertCount; i++) {\n            lineTokens[i] = null;\n        }\n        this._lineTokens = arrays.arrayInsert(this._lineTokens, insertIndex, lineTokens);\n        this._len += insertCount;\n    }\n    setTokens(topLevelLanguageId, lineIndex, lineTextLength, _tokens, checkEquality) {\n        const tokens = ContiguousTokensStore._massageTokens(this._languageIdCodec.encodeLanguageId(topLevelLanguageId), lineTextLength, _tokens);\n        this._ensureLine(lineIndex);\n        const oldTokens = this._lineTokens[lineIndex];\n        this._lineTokens[lineIndex] = tokens;\n        if (checkEquality) {\n            return !ContiguousTokensStore._equals(oldTokens, tokens);\n        }\n        return false;\n    }\n    static _equals(_a, _b) {\n        if (!_a || !_b) {\n            return !_a && !_b;\n        }\n        const a = toUint32Array(_a);\n        const b = toUint32Array(_b);\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0, len = a.length; i < len; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //#region Editing\n    acceptEdit(range, eolCount, firstLineLength) {\n        this._acceptDeleteRange(range);\n        this._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength);\n    }\n    _acceptDeleteRange(range) {\n        const firstLineIndex = range.startLineNumber - 1;\n        if (firstLineIndex >= this._len) {\n            return;\n        }\n        if (range.startLineNumber === range.endLineNumber) {\n            if (range.startColumn === range.endColumn) {\n                // Nothing to delete\n                return;\n            }\n            this._lineTokens[firstLineIndex] = ContiguousTokensEditing.delete(this._lineTokens[firstLineIndex], range.startColumn - 1, range.endColumn - 1);\n            return;\n        }\n        this._lineTokens[firstLineIndex] = ContiguousTokensEditing.deleteEnding(this._lineTokens[firstLineIndex], range.startColumn - 1);\n        const lastLineIndex = range.endLineNumber - 1;\n        let lastLineTokens = null;\n        if (lastLineIndex < this._len) {\n            lastLineTokens = ContiguousTokensEditing.deleteBeginning(this._lineTokens[lastLineIndex], range.endColumn - 1);\n        }\n        // Take remaining text on last line and append it to remaining text on first line\n        this._lineTokens[firstLineIndex] = ContiguousTokensEditing.append(this._lineTokens[firstLineIndex], lastLineTokens);\n        // Delete middle lines\n        this._deleteLines(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n    }\n    _acceptInsertText(position, eolCount, firstLineLength) {\n        if (eolCount === 0 && firstLineLength === 0) {\n            // Nothing to insert\n            return;\n        }\n        const lineIndex = position.lineNumber - 1;\n        if (lineIndex >= this._len) {\n            return;\n        }\n        if (eolCount === 0) {\n            // Inserting text on one line\n            this._lineTokens[lineIndex] = ContiguousTokensEditing.insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n            return;\n        }\n        this._lineTokens[lineIndex] = ContiguousTokensEditing.deleteEnding(this._lineTokens[lineIndex], position.column - 1);\n        this._lineTokens[lineIndex] = ContiguousTokensEditing.insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n        this._insertLines(position.lineNumber, eolCount);\n    }\n    //#endregion\n    setMultilineTokens(tokens, textModel) {\n        if (tokens.length === 0) {\n            return { changes: [] };\n        }\n        const ranges = [];\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const element = tokens[i];\n            let minChangedLineNumber = 0;\n            let maxChangedLineNumber = 0;\n            let hasChange = false;\n            for (let lineNumber = element.startLineNumber; lineNumber <= element.endLineNumber; lineNumber++) {\n                if (hasChange) {\n                    this.setTokens(textModel.getLanguageId(), lineNumber - 1, textModel.getLineLength(lineNumber), element.getLineTokens(lineNumber), false);\n                    maxChangedLineNumber = lineNumber;\n                }\n                else {\n                    const lineHasChange = this.setTokens(textModel.getLanguageId(), lineNumber - 1, textModel.getLineLength(lineNumber), element.getLineTokens(lineNumber), true);\n                    if (lineHasChange) {\n                        hasChange = true;\n                        minChangedLineNumber = lineNumber;\n                        maxChangedLineNumber = lineNumber;\n                    }\n                }\n            }\n            if (hasChange) {\n                ranges.push({ fromLineNumber: minChangedLineNumber, toLineNumber: maxChangedLineNumber, });\n            }\n        }\n        return { changes: ranges };\n    }\n}\nfunction getDefaultMetadata(topLevelLanguageId) {\n    return ((topLevelLanguageId << 0 /* MetadataConsts.LANGUAGEID_OFFSET */)\n        | (0 /* StandardTokenType.Other */ << 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */)\n        | (0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n        | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n        | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)\n        // If there is no grammar, we just take a guess and try to match brackets.\n        | (1024 /* MetadataConsts.BALANCED_BRACKETS_MASK */)) >>> 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\nexport class LineTokens {\n    static createEmpty(lineContent, decoder) {\n        const defaultMetadata = LineTokens.defaultTokenMetadata;\n        const tokens = new Uint32Array(2);\n        tokens[0] = lineContent.length;\n        tokens[1] = defaultMetadata;\n        return new LineTokens(tokens, lineContent, decoder);\n    }\n    constructor(tokens, text, decoder) {\n        this._lineTokensBrand = undefined;\n        this._tokens = tokens;\n        this._tokensCount = (this._tokens.length >>> 1);\n        this._text = text;\n        this._languageIdCodec = decoder;\n    }\n    equals(other) {\n        if (other instanceof LineTokens) {\n            return this.slicedEquals(other, 0, this._tokensCount);\n        }\n        return false;\n    }\n    slicedEquals(other, sliceFromTokenIndex, sliceTokenCount) {\n        if (this._text !== other._text) {\n            return false;\n        }\n        if (this._tokensCount !== other._tokensCount) {\n            return false;\n        }\n        const from = (sliceFromTokenIndex << 1);\n        const to = from + (sliceTokenCount << 1);\n        for (let i = from; i < to; i++) {\n            if (this._tokens[i] !== other._tokens[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    getLineContent() {\n        return this._text;\n    }\n    getCount() {\n        return this._tokensCount;\n    }\n    getStartOffset(tokenIndex) {\n        if (tokenIndex > 0) {\n            return this._tokens[(tokenIndex - 1) << 1];\n        }\n        return 0;\n    }\n    getMetadata(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return metadata;\n    }\n    getLanguageId(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        const languageId = TokenMetadata.getLanguageId(metadata);\n        return this._languageIdCodec.decodeLanguageId(languageId);\n    }\n    getStandardTokenType(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getTokenType(metadata);\n    }\n    getForeground(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getForeground(metadata);\n    }\n    getClassName(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getClassNameFromMetadata(metadata);\n    }\n    getInlineStyle(tokenIndex, colorMap) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\n    }\n    getPresentation(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getPresentationFromMetadata(metadata);\n    }\n    getEndOffset(tokenIndex) {\n        return this._tokens[tokenIndex << 1];\n    }\n    /**\n     * Find the token containing offset `offset`.\n     * @param offset The search offset\n     * @return The index of the token containing the offset.\n     */\n    findTokenIndexAtOffset(offset) {\n        return LineTokens.findIndexInTokensArray(this._tokens, offset);\n    }\n    inflate() {\n        return this;\n    }\n    sliceAndInflate(startOffset, endOffset, deltaOffset) {\n        return new SliceLineTokens(this, startOffset, endOffset, deltaOffset);\n    }\n    static convertToEndOffset(tokens, lineTextLength) {\n        const tokenCount = (tokens.length >>> 1);\n        const lastTokenIndex = tokenCount - 1;\n        for (let tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\n            tokens[tokenIndex << 1] = tokens[(tokenIndex + 1) << 1];\n        }\n        tokens[lastTokenIndex << 1] = lineTextLength;\n    }\n    static findIndexInTokensArray(tokens, desiredIndex) {\n        if (tokens.length <= 2) {\n            return 0;\n        }\n        let low = 0;\n        let high = (tokens.length >>> 1) - 1;\n        while (low < high) {\n            const mid = low + Math.floor((high - low) / 2);\n            const endOffset = tokens[(mid << 1)];\n            if (endOffset === desiredIndex) {\n                return mid + 1;\n            }\n            else if (endOffset < desiredIndex) {\n                low = mid + 1;\n            }\n            else if (endOffset > desiredIndex) {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    /**\n     * @pure\n     * @param insertTokens Must be sorted by offset.\n    */\n    withInserted(insertTokens) {\n        if (insertTokens.length === 0) {\n            return this;\n        }\n        let nextOriginalTokenIdx = 0;\n        let nextInsertTokenIdx = 0;\n        let text = '';\n        const newTokens = new Array();\n        let originalEndOffset = 0;\n        while (true) {\n            const nextOriginalTokenEndOffset = nextOriginalTokenIdx < this._tokensCount ? this._tokens[nextOriginalTokenIdx << 1] : -1;\n            const nextInsertToken = nextInsertTokenIdx < insertTokens.length ? insertTokens[nextInsertTokenIdx] : null;\n            if (nextOriginalTokenEndOffset !== -1 && (nextInsertToken === null || nextOriginalTokenEndOffset <= nextInsertToken.offset)) {\n                // original token ends before next insert token\n                text += this._text.substring(originalEndOffset, nextOriginalTokenEndOffset);\n                const metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n                newTokens.push(text.length, metadata);\n                nextOriginalTokenIdx++;\n                originalEndOffset = nextOriginalTokenEndOffset;\n            }\n            else if (nextInsertToken) {\n                if (nextInsertToken.offset > originalEndOffset) {\n                    // insert token is in the middle of the next token.\n                    text += this._text.substring(originalEndOffset, nextInsertToken.offset);\n                    const metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n                    newTokens.push(text.length, metadata);\n                    originalEndOffset = nextInsertToken.offset;\n                }\n                text += nextInsertToken.text;\n                newTokens.push(text.length, nextInsertToken.tokenMetadata);\n                nextInsertTokenIdx++;\n            }\n            else {\n                break;\n            }\n        }\n        return new LineTokens(new Uint32Array(newTokens), text, this._languageIdCodec);\n    }\n}\nLineTokens.defaultTokenMetadata = ((0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n    | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n    | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\nclass SliceLineTokens {\n    constructor(source, startOffset, endOffset, deltaOffset) {\n        this._source = source;\n        this._startOffset = startOffset;\n        this._endOffset = endOffset;\n        this._deltaOffset = deltaOffset;\n        this._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\n        this._tokensCount = 0;\n        for (let i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\n            const tokenStartOffset = source.getStartOffset(i);\n            if (tokenStartOffset >= endOffset) {\n                break;\n            }\n            this._tokensCount++;\n        }\n    }\n    getMetadata(tokenIndex) {\n        return this._source.getMetadata(this._firstTokenIndex + tokenIndex);\n    }\n    getLanguageId(tokenIndex) {\n        return this._source.getLanguageId(this._firstTokenIndex + tokenIndex);\n    }\n    getLineContent() {\n        return this._source.getLineContent().substring(this._startOffset, this._endOffset);\n    }\n    equals(other) {\n        if (other instanceof SliceLineTokens) {\n            return (this._startOffset === other._startOffset\n                && this._endOffset === other._endOffset\n                && this._deltaOffset === other._deltaOffset\n                && this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount));\n        }\n        return false;\n    }\n    getCount() {\n        return this._tokensCount;\n    }\n    getForeground(tokenIndex) {\n        return this._source.getForeground(this._firstTokenIndex + tokenIndex);\n    }\n    getEndOffset(tokenIndex) {\n        const tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\n        return Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\n    }\n    getClassName(tokenIndex) {\n        return this._source.getClassName(this._firstTokenIndex + tokenIndex);\n    }\n    getInlineStyle(tokenIndex, colorMap) {\n        return this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\n    }\n    getPresentation(tokenIndex) {\n        return this._source.getPresentation(this._firstTokenIndex + tokenIndex);\n    }\n    findTokenIndexAtOffset(offset) {\n        return this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { LineTokens } from './lineTokens.js';\n/**\n * Represents sparse tokens in a text model.\n */\nexport class SparseTokensStore {\n    constructor(languageIdCodec) {\n        this._pieces = [];\n        this._isComplete = false;\n        this._languageIdCodec = languageIdCodec;\n    }\n    flush() {\n        this._pieces = [];\n        this._isComplete = false;\n    }\n    isEmpty() {\n        return (this._pieces.length === 0);\n    }\n    set(pieces, isComplete) {\n        this._pieces = pieces || [];\n        this._isComplete = isComplete;\n    }\n    setPartial(_range, pieces) {\n        // console.log(`setPartial ${_range} ${pieces.map(p => p.toString()).join(', ')}`);\n        let range = _range;\n        if (pieces.length > 0) {\n            const _firstRange = pieces[0].getRange();\n            const _lastRange = pieces[pieces.length - 1].getRange();\n            if (!_firstRange || !_lastRange) {\n                return _range;\n            }\n            range = _range.plusRange(_firstRange).plusRange(_lastRange);\n        }\n        let insertPosition = null;\n        for (let i = 0, len = this._pieces.length; i < len; i++) {\n            const piece = this._pieces[i];\n            if (piece.endLineNumber < range.startLineNumber) {\n                // this piece is before the range\n                continue;\n            }\n            if (piece.startLineNumber > range.endLineNumber) {\n                // this piece is after the range, so mark the spot before this piece\n                // as a good insertion position and stop looping\n                insertPosition = insertPosition || { index: i };\n                break;\n            }\n            // this piece might intersect with the range\n            piece.removeTokens(range);\n            if (piece.isEmpty()) {\n                // remove the piece if it became empty\n                this._pieces.splice(i, 1);\n                i--;\n                len--;\n                continue;\n            }\n            if (piece.endLineNumber < range.startLineNumber) {\n                // after removal, this piece is before the range\n                continue;\n            }\n            if (piece.startLineNumber > range.endLineNumber) {\n                // after removal, this piece is after the range\n                insertPosition = insertPosition || { index: i };\n                continue;\n            }\n            // after removal, this piece contains the range\n            const [a, b] = piece.split(range);\n            if (a.isEmpty()) {\n                // this piece is actually after the range\n                insertPosition = insertPosition || { index: i };\n                continue;\n            }\n            if (b.isEmpty()) {\n                // this piece is actually before the range\n                continue;\n            }\n            this._pieces.splice(i, 1, a, b);\n            i++;\n            len++;\n            insertPosition = insertPosition || { index: i };\n        }\n        insertPosition = insertPosition || { index: this._pieces.length };\n        if (pieces.length > 0) {\n            this._pieces = arrays.arrayInsert(this._pieces, insertPosition.index, pieces);\n        }\n        // console.log(`I HAVE ${this._pieces.length} pieces`);\n        // console.log(`${this._pieces.map(p => p.toString()).join('\\n')}`);\n        return range;\n    }\n    isComplete() {\n        return this._isComplete;\n    }\n    addSparseTokens(lineNumber, aTokens) {\n        if (aTokens.getLineContent().length === 0) {\n            // Don't do anything for empty lines\n            return aTokens;\n        }\n        const pieces = this._pieces;\n        if (pieces.length === 0) {\n            return aTokens;\n        }\n        const pieceIndex = SparseTokensStore._findFirstPieceWithLine(pieces, lineNumber);\n        const bTokens = pieces[pieceIndex].getLineTokens(lineNumber);\n        if (!bTokens) {\n            return aTokens;\n        }\n        const aLen = aTokens.getCount();\n        const bLen = bTokens.getCount();\n        let aIndex = 0;\n        const result = [];\n        let resultLen = 0;\n        let lastEndOffset = 0;\n        const emitToken = (endOffset, metadata) => {\n            if (endOffset === lastEndOffset) {\n                return;\n            }\n            lastEndOffset = endOffset;\n            result[resultLen++] = endOffset;\n            result[resultLen++] = metadata;\n        };\n        for (let bIndex = 0; bIndex < bLen; bIndex++) {\n            const bStartCharacter = bTokens.getStartCharacter(bIndex);\n            const bEndCharacter = bTokens.getEndCharacter(bIndex);\n            const bMetadata = bTokens.getMetadata(bIndex);\n            const bMask = (((bMetadata & 1 /* MetadataConsts.SEMANTIC_USE_ITALIC */) ? 2048 /* MetadataConsts.ITALIC_MASK */ : 0)\n                | ((bMetadata & 2 /* MetadataConsts.SEMANTIC_USE_BOLD */) ? 4096 /* MetadataConsts.BOLD_MASK */ : 0)\n                | ((bMetadata & 4 /* MetadataConsts.SEMANTIC_USE_UNDERLINE */) ? 8192 /* MetadataConsts.UNDERLINE_MASK */ : 0)\n                | ((bMetadata & 8 /* MetadataConsts.SEMANTIC_USE_STRIKETHROUGH */) ? 16384 /* MetadataConsts.STRIKETHROUGH_MASK */ : 0)\n                | ((bMetadata & 16 /* MetadataConsts.SEMANTIC_USE_FOREGROUND */) ? 16744448 /* MetadataConsts.FOREGROUND_MASK */ : 0)\n                | ((bMetadata & 32 /* MetadataConsts.SEMANTIC_USE_BACKGROUND */) ? 4278190080 /* MetadataConsts.BACKGROUND_MASK */ : 0)) >>> 0;\n            const aMask = (~bMask) >>> 0;\n            // push any token from `a` that is before `b`\n            while (aIndex < aLen && aTokens.getEndOffset(aIndex) <= bStartCharacter) {\n                emitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n                aIndex++;\n            }\n            // push the token from `a` if it intersects the token from `b`\n            if (aIndex < aLen && aTokens.getStartOffset(aIndex) < bStartCharacter) {\n                emitToken(bStartCharacter, aTokens.getMetadata(aIndex));\n            }\n            // skip any tokens from `a` that are contained inside `b`\n            while (aIndex < aLen && aTokens.getEndOffset(aIndex) < bEndCharacter) {\n                emitToken(aTokens.getEndOffset(aIndex), (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n                aIndex++;\n            }\n            if (aIndex < aLen) {\n                emitToken(bEndCharacter, (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n                if (aTokens.getEndOffset(aIndex) === bEndCharacter) {\n                    // `a` ends exactly at the same spot as `b`!\n                    aIndex++;\n                }\n            }\n            else {\n                const aMergeIndex = Math.min(Math.max(0, aIndex - 1), aLen - 1);\n                // push the token from `b`\n                emitToken(bEndCharacter, (aTokens.getMetadata(aMergeIndex) & aMask) | (bMetadata & bMask));\n            }\n        }\n        // push the remaining tokens from `a`\n        while (aIndex < aLen) {\n            emitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n            aIndex++;\n        }\n        return new LineTokens(new Uint32Array(result), aTokens.getLineContent(), this._languageIdCodec);\n    }\n    static _findFirstPieceWithLine(pieces, lineNumber) {\n        let low = 0;\n        let high = pieces.length - 1;\n        while (low < high) {\n            let mid = low + Math.floor((high - low) / 2);\n            if (pieces[mid].endLineNumber < lineNumber) {\n                low = mid + 1;\n            }\n            else if (pieces[mid].startLineNumber > lineNumber) {\n                high = mid - 1;\n            }\n            else {\n                while (mid > low && pieces[mid - 1].startLineNumber <= lineNumber && lineNumber <= pieces[mid - 1].endLineNumber) {\n                    mid--;\n                }\n                return mid;\n            }\n        }\n        return low;\n    }\n    acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        for (const piece of this._pieces) {\n            piece.acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../base/common/lifecycle.js';\nexport class ViewEventHandler extends Disposable {\n    constructor() {\n        super();\n        this._shouldRender = true;\n    }\n    shouldRender() {\n        return this._shouldRender;\n    }\n    forceShouldRender() {\n        this._shouldRender = true;\n    }\n    setShouldRender() {\n        this._shouldRender = true;\n    }\n    onDidRender() {\n        this._shouldRender = false;\n    }\n    // --- begin event handlers\n    onCompositionStart(e) {\n        return false;\n    }\n    onCompositionEnd(e) {\n        return false;\n    }\n    onConfigurationChanged(e) {\n        return false;\n    }\n    onCursorStateChanged(e) {\n        return false;\n    }\n    onDecorationsChanged(e) {\n        return false;\n    }\n    onFlushed(e) {\n        return false;\n    }\n    onFocusChanged(e) {\n        return false;\n    }\n    onLanguageConfigurationChanged(e) {\n        return false;\n    }\n    onLineMappingChanged(e) {\n        return false;\n    }\n    onLinesChanged(e) {\n        return false;\n    }\n    onLinesDeleted(e) {\n        return false;\n    }\n    onLinesInserted(e) {\n        return false;\n    }\n    onRevealRangeRequest(e) {\n        return false;\n    }\n    onScrollChanged(e) {\n        return false;\n    }\n    onThemeChanged(e) {\n        return false;\n    }\n    onTokensChanged(e) {\n        return false;\n    }\n    onTokensColorsChanged(e) {\n        return false;\n    }\n    onZonesChanged(e) {\n        return false;\n    }\n    // --- end event handlers\n    handleEvents(events) {\n        let shouldRender = false;\n        for (let i = 0, len = events.length; i < len; i++) {\n            const e = events[i];\n            switch (e.type) {\n                case 0 /* viewEvents.ViewEventType.ViewCompositionStart */:\n                    if (this.onCompositionStart(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 1 /* viewEvents.ViewEventType.ViewCompositionEnd */:\n                    if (this.onCompositionEnd(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 2 /* viewEvents.ViewEventType.ViewConfigurationChanged */:\n                    if (this.onConfigurationChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 3 /* viewEvents.ViewEventType.ViewCursorStateChanged */:\n                    if (this.onCursorStateChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 4 /* viewEvents.ViewEventType.ViewDecorationsChanged */:\n                    if (this.onDecorationsChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 5 /* viewEvents.ViewEventType.ViewFlushed */:\n                    if (this.onFlushed(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 6 /* viewEvents.ViewEventType.ViewFocusChanged */:\n                    if (this.onFocusChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 7 /* viewEvents.ViewEventType.ViewLanguageConfigurationChanged */:\n                    if (this.onLanguageConfigurationChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 8 /* viewEvents.ViewEventType.ViewLineMappingChanged */:\n                    if (this.onLineMappingChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 9 /* viewEvents.ViewEventType.ViewLinesChanged */:\n                    if (this.onLinesChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 10 /* viewEvents.ViewEventType.ViewLinesDeleted */:\n                    if (this.onLinesDeleted(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 11 /* viewEvents.ViewEventType.ViewLinesInserted */:\n                    if (this.onLinesInserted(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 12 /* viewEvents.ViewEventType.ViewRevealRangeRequest */:\n                    if (this.onRevealRangeRequest(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 13 /* viewEvents.ViewEventType.ViewScrollChanged */:\n                    if (this.onScrollChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 15 /* viewEvents.ViewEventType.ViewTokensChanged */:\n                    if (this.onTokensChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 14 /* viewEvents.ViewEventType.ViewThemeChanged */:\n                    if (this.onThemeChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 16 /* viewEvents.ViewEventType.ViewTokensColorsChanged */:\n                    if (this.onTokensColorsChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 17 /* viewEvents.ViewEventType.ViewZonesChanged */:\n                    if (this.onZonesChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                default:\n                    console.info('View received unknown event: ');\n                    console.info(e);\n            }\n        }\n        if (shouldRender) {\n            this._shouldRender = true;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ViewCompositionStartEvent {\n    constructor() {\n        this.type = 0 /* ViewEventType.ViewCompositionStart */;\n    }\n}\nexport class ViewCompositionEndEvent {\n    constructor() {\n        this.type = 1 /* ViewEventType.ViewCompositionEnd */;\n    }\n}\nexport class ViewConfigurationChangedEvent {\n    constructor(source) {\n        this.type = 2 /* ViewEventType.ViewConfigurationChanged */;\n        this._source = source;\n    }\n    hasChanged(id) {\n        return this._source.hasChanged(id);\n    }\n}\nexport class ViewCursorStateChangedEvent {\n    constructor(selections, modelSelections, reason) {\n        this.selections = selections;\n        this.modelSelections = modelSelections;\n        this.reason = reason;\n        this.type = 3 /* ViewEventType.ViewCursorStateChanged */;\n    }\n}\nexport class ViewDecorationsChangedEvent {\n    constructor(source) {\n        this.type = 4 /* ViewEventType.ViewDecorationsChanged */;\n        if (source) {\n            this.affectsMinimap = source.affectsMinimap;\n            this.affectsOverviewRuler = source.affectsOverviewRuler;\n            this.affectsGlyphMargin = source.affectsGlyphMargin;\n            this.affectsLineNumber = source.affectsLineNumber;\n        }\n        else {\n            this.affectsMinimap = true;\n            this.affectsOverviewRuler = true;\n            this.affectsGlyphMargin = true;\n            this.affectsLineNumber = true;\n        }\n    }\n}\nexport class ViewFlushedEvent {\n    constructor() {\n        this.type = 5 /* ViewEventType.ViewFlushed */;\n        // Nothing to do\n    }\n}\nexport class ViewFocusChangedEvent {\n    constructor(isFocused) {\n        this.type = 6 /* ViewEventType.ViewFocusChanged */;\n        this.isFocused = isFocused;\n    }\n}\nexport class ViewLanguageConfigurationEvent {\n    constructor() {\n        this.type = 7 /* ViewEventType.ViewLanguageConfigurationChanged */;\n    }\n}\nexport class ViewLineMappingChangedEvent {\n    constructor() {\n        this.type = 8 /* ViewEventType.ViewLineMappingChanged */;\n        // Nothing to do\n    }\n}\nexport class ViewLinesChangedEvent {\n    constructor(\n    /**\n     * The first line that has changed.\n     */\n    fromLineNumber, \n    /**\n     * The number of lines that have changed.\n     */\n    count) {\n        this.fromLineNumber = fromLineNumber;\n        this.count = count;\n        this.type = 9 /* ViewEventType.ViewLinesChanged */;\n    }\n}\nexport class ViewLinesDeletedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 10 /* ViewEventType.ViewLinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewLinesInsertedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 11 /* ViewEventType.ViewLinesInserted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewRevealRangeRequestEvent {\n    constructor(\n    /**\n     * Source of the call that caused the event.\n     */\n    source, \n    /**\n     * Reduce the revealing to a minimum (e.g. avoid scrolling if the bounding box is visible and near the viewport edge).\n     */\n    minimalReveal, \n    /**\n     * Range to be reavealed.\n     */\n    range, \n    /**\n     * Selections to be revealed.\n     */\n    selections, \n    /**\n     * The vertical reveal strategy.\n     */\n    verticalType, \n    /**\n     * If true: there should be a horizontal & vertical revealing.\n     * If false: there should be just a vertical revealing.\n     */\n    revealHorizontal, \n    /**\n     * The scroll type.\n     */\n    scrollType) {\n        this.source = source;\n        this.minimalReveal = minimalReveal;\n        this.range = range;\n        this.selections = selections;\n        this.verticalType = verticalType;\n        this.revealHorizontal = revealHorizontal;\n        this.scrollType = scrollType;\n        this.type = 12 /* ViewEventType.ViewRevealRangeRequest */;\n    }\n}\nexport class ViewScrollChangedEvent {\n    constructor(source) {\n        this.type = 13 /* ViewEventType.ViewScrollChanged */;\n        this.scrollWidth = source.scrollWidth;\n        this.scrollLeft = source.scrollLeft;\n        this.scrollHeight = source.scrollHeight;\n        this.scrollTop = source.scrollTop;\n        this.scrollWidthChanged = source.scrollWidthChanged;\n        this.scrollLeftChanged = source.scrollLeftChanged;\n        this.scrollHeightChanged = source.scrollHeightChanged;\n        this.scrollTopChanged = source.scrollTopChanged;\n    }\n}\nexport class ViewThemeChangedEvent {\n    constructor(theme) {\n        this.theme = theme;\n        this.type = 14 /* ViewEventType.ViewThemeChanged */;\n    }\n}\nexport class ViewTokensChangedEvent {\n    constructor(ranges) {\n        this.type = 15 /* ViewEventType.ViewTokensChanged */;\n        this.ranges = ranges;\n    }\n}\nexport class ViewTokensColorsChangedEvent {\n    constructor() {\n        this.type = 16 /* ViewEventType.ViewTokensColorsChanged */;\n        // Nothing to do\n    }\n}\nexport class ViewZonesChangedEvent {\n    constructor() {\n        this.type = 17 /* ViewEventType.ViewZonesChanged */;\n        // Nothing to do\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nexport class LineDecoration {\n    constructor(startColumn, endColumn, className, type) {\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.className = className;\n        this.type = type;\n        this._lineDecorationBrand = undefined;\n    }\n    static _equals(a, b) {\n        return (a.startColumn === b.startColumn\n            && a.endColumn === b.endColumn\n            && a.className === b.className\n            && a.type === b.type);\n    }\n    static equalsArr(a, b) {\n        const aLen = a.length;\n        const bLen = b.length;\n        if (aLen !== bLen) {\n            return false;\n        }\n        for (let i = 0; i < aLen; i++) {\n            if (!LineDecoration._equals(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static extractWrapped(arr, startOffset, endOffset) {\n        if (arr.length === 0) {\n            return arr;\n        }\n        const startColumn = startOffset + 1;\n        const endColumn = endOffset + 1;\n        const lineLength = endOffset - startOffset;\n        const r = [];\n        let rLength = 0;\n        for (const dec of arr) {\n            if (dec.endColumn <= startColumn || dec.startColumn >= endColumn) {\n                continue;\n            }\n            r[rLength++] = new LineDecoration(Math.max(1, dec.startColumn - startColumn + 1), Math.min(lineLength + 1, dec.endColumn - startColumn + 1), dec.className, dec.type);\n        }\n        return r;\n    }\n    static filter(lineDecorations, lineNumber, minLineColumn, maxLineColumn) {\n        if (lineDecorations.length === 0) {\n            return [];\n        }\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = lineDecorations.length; i < len; i++) {\n            const d = lineDecorations[i];\n            const range = d.range;\n            if (range.endLineNumber < lineNumber || range.startLineNumber > lineNumber) {\n                // Ignore decorations that sit outside this line\n                continue;\n            }\n            if (range.isEmpty() && (d.type === 0 /* InlineDecorationType.Regular */ || d.type === 3 /* InlineDecorationType.RegularAffectingLetterSpacing */)) {\n                // Ignore empty range decorations\n                continue;\n            }\n            const startColumn = (range.startLineNumber === lineNumber ? range.startColumn : minLineColumn);\n            const endColumn = (range.endLineNumber === lineNumber ? range.endColumn : maxLineColumn);\n            result[resultLen++] = new LineDecoration(startColumn, endColumn, d.inlineClassName, d.type);\n        }\n        return result;\n    }\n    static _typeCompare(a, b) {\n        const ORDER = [2, 0, 1, 3];\n        return ORDER[a] - ORDER[b];\n    }\n    static compare(a, b) {\n        if (a.startColumn !== b.startColumn) {\n            return a.startColumn - b.startColumn;\n        }\n        if (a.endColumn !== b.endColumn) {\n            return a.endColumn - b.endColumn;\n        }\n        const typeCmp = LineDecoration._typeCompare(a.type, b.type);\n        if (typeCmp !== 0) {\n            return typeCmp;\n        }\n        if (a.className !== b.className) {\n            return a.className < b.className ? -1 : 1;\n        }\n        return 0;\n    }\n}\nexport class DecorationSegment {\n    constructor(startOffset, endOffset, className, metadata) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.className = className;\n        this.metadata = metadata;\n    }\n}\nclass Stack {\n    constructor() {\n        this.stopOffsets = [];\n        this.classNames = [];\n        this.metadata = [];\n        this.count = 0;\n    }\n    static _metadata(metadata) {\n        let result = 0;\n        for (let i = 0, len = metadata.length; i < len; i++) {\n            result |= metadata[i];\n        }\n        return result;\n    }\n    consumeLowerThan(maxStopOffset, nextStartOffset, result) {\n        while (this.count > 0 && this.stopOffsets[0] < maxStopOffset) {\n            let i = 0;\n            // Take all equal stopping offsets\n            while (i + 1 < this.count && this.stopOffsets[i] === this.stopOffsets[i + 1]) {\n                i++;\n            }\n            // Basically we are consuming the first i + 1 elements of the stack\n            result.push(new DecorationSegment(nextStartOffset, this.stopOffsets[i], this.classNames.join(' '), Stack._metadata(this.metadata)));\n            nextStartOffset = this.stopOffsets[i] + 1;\n            // Consume them\n            this.stopOffsets.splice(0, i + 1);\n            this.classNames.splice(0, i + 1);\n            this.metadata.splice(0, i + 1);\n            this.count -= (i + 1);\n        }\n        if (this.count > 0 && nextStartOffset < maxStopOffset) {\n            result.push(new DecorationSegment(nextStartOffset, maxStopOffset - 1, this.classNames.join(' '), Stack._metadata(this.metadata)));\n            nextStartOffset = maxStopOffset;\n        }\n        return nextStartOffset;\n    }\n    insert(stopOffset, className, metadata) {\n        if (this.count === 0 || this.stopOffsets[this.count - 1] <= stopOffset) {\n            // Insert at the end\n            this.stopOffsets.push(stopOffset);\n            this.classNames.push(className);\n            this.metadata.push(metadata);\n        }\n        else {\n            // Find the insertion position for `stopOffset`\n            for (let i = 0; i < this.count; i++) {\n                if (this.stopOffsets[i] >= stopOffset) {\n                    this.stopOffsets.splice(i, 0, stopOffset);\n                    this.classNames.splice(i, 0, className);\n                    this.metadata.splice(i, 0, metadata);\n                    break;\n                }\n            }\n        }\n        this.count++;\n        return;\n    }\n}\nexport class LineDecorationsNormalizer {\n    /**\n     * Normalize line decorations. Overlapping decorations will generate multiple segments\n     */\n    static normalize(lineContent, lineDecorations) {\n        if (lineDecorations.length === 0) {\n            return [];\n        }\n        const result = [];\n        const stack = new Stack();\n        let nextStartOffset = 0;\n        for (let i = 0, len = lineDecorations.length; i < len; i++) {\n            const d = lineDecorations[i];\n            let startColumn = d.startColumn;\n            let endColumn = d.endColumn;\n            const className = d.className;\n            const metadata = (d.type === 1 /* InlineDecorationType.Before */\n                ? 2 /* LinePartMetadata.PSEUDO_BEFORE */\n                : d.type === 2 /* InlineDecorationType.After */\n                    ? 4 /* LinePartMetadata.PSEUDO_AFTER */\n                    : 0);\n            // If the position would end up in the middle of a high-low surrogate pair, we move it to before the pair\n            if (startColumn > 1) {\n                const charCodeBefore = lineContent.charCodeAt(startColumn - 2);\n                if (strings.isHighSurrogate(charCodeBefore)) {\n                    startColumn--;\n                }\n            }\n            if (endColumn > 1) {\n                const charCodeBefore = lineContent.charCodeAt(endColumn - 2);\n                if (strings.isHighSurrogate(charCodeBefore)) {\n                    endColumn--;\n                }\n            }\n            const currentStartOffset = startColumn - 1;\n            const currentEndOffset = endColumn - 2;\n            nextStartOffset = stack.consumeLowerThan(currentStartOffset, nextStartOffset, result);\n            if (stack.count === 0) {\n                nextStartOffset = currentStartOffset;\n            }\n            stack.insert(currentEndOffset, className, metadata);\n        }\n        stack.consumeLowerThan(1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, nextStartOffset, result);\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class LinePart {\n    constructor(\n    /**\n     * last char index of this token (not inclusive).\n     */\n    endIndex, type, metadata, containsRTL) {\n        this.endIndex = endIndex;\n        this.type = type;\n        this.metadata = metadata;\n        this.containsRTL = containsRTL;\n        this._linePartBrand = undefined;\n    }\n    isWhitespace() {\n        return (this.metadata & 1 /* LinePartMetadata.IS_WHITESPACE_MASK */ ? true : false);\n    }\n    isPseudoAfter() {\n        return (this.metadata & 4 /* LinePartMetadata.PSEUDO_AFTER_MASK */ ? true : false);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { StringBuilder } from '../core/stringBuilder.js';\nimport { LineDecoration, LineDecorationsNormalizer } from './lineDecorations.js';\nimport { LinePart } from './linePart.js';\nexport class LineRange {\n    constructor(startIndex, endIndex) {\n        this.startOffset = startIndex;\n        this.endOffset = endIndex;\n    }\n    equals(otherLineRange) {\n        return this.startOffset === otherLineRange.startOffset\n            && this.endOffset === otherLineRange.endOffset;\n    }\n}\nexport class RenderLineInput {\n    constructor(useMonospaceOptimizations, canUseHalfwidthRightwardsArrow, lineContent, continuesWithWrappedLine, isBasicASCII, containsRTL, fauxIndentLength, lineTokens, lineDecorations, tabSize, startVisibleColumn, spaceWidth, middotWidth, wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, selectionsOnLine) {\n        this.useMonospaceOptimizations = useMonospaceOptimizations;\n        this.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n        this.lineContent = lineContent;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.isBasicASCII = isBasicASCII;\n        this.containsRTL = containsRTL;\n        this.fauxIndentLength = fauxIndentLength;\n        this.lineTokens = lineTokens;\n        this.lineDecorations = lineDecorations.sort(LineDecoration.compare);\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n        this.spaceWidth = spaceWidth;\n        this.stopRenderingLineAfter = stopRenderingLineAfter;\n        this.renderWhitespace = (renderWhitespace === 'all'\n            ? 4 /* RenderWhitespace.All */\n            : renderWhitespace === 'boundary'\n                ? 1 /* RenderWhitespace.Boundary */\n                : renderWhitespace === 'selection'\n                    ? 2 /* RenderWhitespace.Selection */\n                    : renderWhitespace === 'trailing'\n                        ? 3 /* RenderWhitespace.Trailing */\n                        : 0 /* RenderWhitespace.None */);\n        this.renderControlCharacters = renderControlCharacters;\n        this.fontLigatures = fontLigatures;\n        this.selectionsOnLine = selectionsOnLine && selectionsOnLine.sort((a, b) => a.startOffset < b.startOffset ? -1 : 1);\n        const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n        const middotDiff = Math.abs(middotWidth - spaceWidth);\n        if (wsmiddotDiff < middotDiff) {\n            this.renderSpaceWidth = wsmiddotWidth;\n            this.renderSpaceCharCode = 0x2E31; // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        }\n        else {\n            this.renderSpaceWidth = middotWidth;\n            this.renderSpaceCharCode = 0xB7; // U+00B7 - MIDDLE DOT\n        }\n    }\n    sameSelection(otherSelections) {\n        if (this.selectionsOnLine === null) {\n            return otherSelections === null;\n        }\n        if (otherSelections === null) {\n            return false;\n        }\n        if (otherSelections.length !== this.selectionsOnLine.length) {\n            return false;\n        }\n        for (let i = 0; i < this.selectionsOnLine.length; i++) {\n            if (!this.selectionsOnLine[i].equals(otherSelections[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    equals(other) {\n        return (this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineContent === other.lineContent\n            && this.continuesWithWrappedLine === other.continuesWithWrappedLine\n            && this.isBasicASCII === other.isBasicASCII\n            && this.containsRTL === other.containsRTL\n            && this.fauxIndentLength === other.fauxIndentLength\n            && this.tabSize === other.tabSize\n            && this.startVisibleColumn === other.startVisibleColumn\n            && this.spaceWidth === other.spaceWidth\n            && this.renderSpaceWidth === other.renderSpaceWidth\n            && this.renderSpaceCharCode === other.renderSpaceCharCode\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.fontLigatures === other.fontLigatures\n            && LineDecoration.equalsArr(this.lineDecorations, other.lineDecorations)\n            && this.lineTokens.equals(other.lineTokens)\n            && this.sameSelection(other.selectionsOnLine));\n    }\n}\nexport class DomPosition {\n    constructor(partIndex, charIndex) {\n        this.partIndex = partIndex;\n        this.charIndex = charIndex;\n    }\n}\n/**\n * Provides a both direction mapping between a line's character and its rendered position.\n */\nexport class CharacterMapping {\n    static getPartIndex(partData) {\n        return (partData & 4294901760 /* CharacterMappingConstants.PART_INDEX_MASK */) >>> 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */;\n    }\n    static getCharIndex(partData) {\n        return (partData & 65535 /* CharacterMappingConstants.CHAR_INDEX_MASK */) >>> 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */;\n    }\n    constructor(length, partCount) {\n        this.length = length;\n        this._data = new Uint32Array(this.length);\n        this._horizontalOffset = new Uint32Array(this.length);\n    }\n    setColumnInfo(column, partIndex, charIndex, horizontalOffset) {\n        const partData = ((partIndex << 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */)\n            | (charIndex << 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */)) >>> 0;\n        this._data[column - 1] = partData;\n        this._horizontalOffset[column - 1] = horizontalOffset;\n    }\n    getHorizontalOffset(column) {\n        if (this._horizontalOffset.length === 0) {\n            // No characters on this line\n            return 0;\n        }\n        return this._horizontalOffset[column - 1];\n    }\n    charOffsetToPartData(charOffset) {\n        if (this.length === 0) {\n            return 0;\n        }\n        if (charOffset < 0) {\n            return this._data[0];\n        }\n        if (charOffset >= this.length) {\n            return this._data[this.length - 1];\n        }\n        return this._data[charOffset];\n    }\n    getDomPosition(column) {\n        const partData = this.charOffsetToPartData(column - 1);\n        const partIndex = CharacterMapping.getPartIndex(partData);\n        const charIndex = CharacterMapping.getCharIndex(partData);\n        return new DomPosition(partIndex, charIndex);\n    }\n    getColumn(domPosition, partLength) {\n        const charOffset = this.partDataToCharOffset(domPosition.partIndex, partLength, domPosition.charIndex);\n        return charOffset + 1;\n    }\n    partDataToCharOffset(partIndex, partLength, charIndex) {\n        if (this.length === 0) {\n            return 0;\n        }\n        const searchEntry = ((partIndex << 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */)\n            | (charIndex << 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */)) >>> 0;\n        let min = 0;\n        let max = this.length - 1;\n        while (min + 1 < max) {\n            const mid = ((min + max) >>> 1);\n            const midEntry = this._data[mid];\n            if (midEntry === searchEntry) {\n                return mid;\n            }\n            else if (midEntry > searchEntry) {\n                max = mid;\n            }\n            else {\n                min = mid;\n            }\n        }\n        if (min === max) {\n            return min;\n        }\n        const minEntry = this._data[min];\n        const maxEntry = this._data[max];\n        if (minEntry === searchEntry) {\n            return min;\n        }\n        if (maxEntry === searchEntry) {\n            return max;\n        }\n        const minPartIndex = CharacterMapping.getPartIndex(minEntry);\n        const minCharIndex = CharacterMapping.getCharIndex(minEntry);\n        const maxPartIndex = CharacterMapping.getPartIndex(maxEntry);\n        let maxCharIndex;\n        if (minPartIndex !== maxPartIndex) {\n            // sitting between parts\n            maxCharIndex = partLength;\n        }\n        else {\n            maxCharIndex = CharacterMapping.getCharIndex(maxEntry);\n        }\n        const minEntryDistance = charIndex - minCharIndex;\n        const maxEntryDistance = maxCharIndex - charIndex;\n        if (minEntryDistance <= maxEntryDistance) {\n            return min;\n        }\n        return max;\n    }\n}\nexport class RenderLineOutput {\n    constructor(characterMapping, containsRTL, containsForeignElements) {\n        this._renderLineOutputBrand = undefined;\n        this.characterMapping = characterMapping;\n        this.containsRTL = containsRTL;\n        this.containsForeignElements = containsForeignElements;\n    }\n}\nexport function renderViewLine(input, sb) {\n    if (input.lineContent.length === 0) {\n        if (input.lineDecorations.length > 0) {\n            // This line is empty, but it contains inline decorations\n            sb.appendString(`<span>`);\n            let beforeCount = 0;\n            let afterCount = 0;\n            let containsForeignElements = 0 /* ForeignElementType.None */;\n            for (const lineDecoration of input.lineDecorations) {\n                if (lineDecoration.type === 1 /* InlineDecorationType.Before */ || lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                    sb.appendString(`<span class=\"`);\n                    sb.appendString(lineDecoration.className);\n                    sb.appendString(`\"></span>`);\n                    if (lineDecoration.type === 1 /* InlineDecorationType.Before */) {\n                        containsForeignElements |= 1 /* ForeignElementType.Before */;\n                        beforeCount++;\n                    }\n                    if (lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                        containsForeignElements |= 2 /* ForeignElementType.After */;\n                        afterCount++;\n                    }\n                }\n            }\n            sb.appendString(`</span>`);\n            const characterMapping = new CharacterMapping(1, beforeCount + afterCount);\n            characterMapping.setColumnInfo(1, beforeCount, 0, 0);\n            return new RenderLineOutput(characterMapping, false, containsForeignElements);\n        }\n        // completely empty line\n        sb.appendString('<span><span></span></span>');\n        return new RenderLineOutput(new CharacterMapping(0, 0), false, 0 /* ForeignElementType.None */);\n    }\n    return _renderLine(resolveRenderLineInput(input), sb);\n}\nexport class RenderLineOutput2 {\n    constructor(characterMapping, html, containsRTL, containsForeignElements) {\n        this.characterMapping = characterMapping;\n        this.html = html;\n        this.containsRTL = containsRTL;\n        this.containsForeignElements = containsForeignElements;\n    }\n}\nexport function renderViewLine2(input) {\n    const sb = new StringBuilder(10000);\n    const out = renderViewLine(input, sb);\n    return new RenderLineOutput2(out.characterMapping, sb.build(), out.containsRTL, out.containsForeignElements);\n}\nclass ResolvedRenderLineInput {\n    constructor(fontIsMonospace, canUseHalfwidthRightwardsArrow, lineContent, len, isOverflowing, overflowingCharCount, parts, containsForeignElements, fauxIndentLength, tabSize, startVisibleColumn, containsRTL, spaceWidth, renderSpaceCharCode, renderWhitespace, renderControlCharacters) {\n        this.fontIsMonospace = fontIsMonospace;\n        this.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n        this.lineContent = lineContent;\n        this.len = len;\n        this.isOverflowing = isOverflowing;\n        this.overflowingCharCount = overflowingCharCount;\n        this.parts = parts;\n        this.containsForeignElements = containsForeignElements;\n        this.fauxIndentLength = fauxIndentLength;\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n        this.containsRTL = containsRTL;\n        this.spaceWidth = spaceWidth;\n        this.renderSpaceCharCode = renderSpaceCharCode;\n        this.renderWhitespace = renderWhitespace;\n        this.renderControlCharacters = renderControlCharacters;\n        //\n    }\n}\nfunction resolveRenderLineInput(input) {\n    const lineContent = input.lineContent;\n    let isOverflowing;\n    let overflowingCharCount;\n    let len;\n    if (input.stopRenderingLineAfter !== -1 && input.stopRenderingLineAfter < lineContent.length) {\n        isOverflowing = true;\n        overflowingCharCount = lineContent.length - input.stopRenderingLineAfter;\n        len = input.stopRenderingLineAfter;\n    }\n    else {\n        isOverflowing = false;\n        overflowingCharCount = 0;\n        len = lineContent.length;\n    }\n    let tokens = transformAndRemoveOverflowing(lineContent, input.containsRTL, input.lineTokens, input.fauxIndentLength, len);\n    if (input.renderControlCharacters && !input.isBasicASCII) {\n        // Calling `extractControlCharacters` before adding (possibly empty) line parts\n        // for inline decorations. `extractControlCharacters` removes empty line parts.\n        tokens = extractControlCharacters(lineContent, tokens);\n    }\n    if (input.renderWhitespace === 4 /* RenderWhitespace.All */ ||\n        input.renderWhitespace === 1 /* RenderWhitespace.Boundary */ ||\n        (input.renderWhitespace === 2 /* RenderWhitespace.Selection */ && !!input.selectionsOnLine) ||\n        (input.renderWhitespace === 3 /* RenderWhitespace.Trailing */ && !input.continuesWithWrappedLine)) {\n        tokens = _applyRenderWhitespace(input, lineContent, len, tokens);\n    }\n    let containsForeignElements = 0 /* ForeignElementType.None */;\n    if (input.lineDecorations.length > 0) {\n        for (let i = 0, len = input.lineDecorations.length; i < len; i++) {\n            const lineDecoration = input.lineDecorations[i];\n            if (lineDecoration.type === 3 /* InlineDecorationType.RegularAffectingLetterSpacing */) {\n                // Pretend there are foreign elements... although not 100% accurate.\n                containsForeignElements |= 1 /* ForeignElementType.Before */;\n            }\n            else if (lineDecoration.type === 1 /* InlineDecorationType.Before */) {\n                containsForeignElements |= 1 /* ForeignElementType.Before */;\n            }\n            else if (lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                containsForeignElements |= 2 /* ForeignElementType.After */;\n            }\n        }\n        tokens = _applyInlineDecorations(lineContent, len, tokens, input.lineDecorations);\n    }\n    if (!input.containsRTL) {\n        // We can never split RTL text, as it ruins the rendering\n        tokens = splitLargeTokens(lineContent, tokens, !input.isBasicASCII || input.fontLigatures);\n    }\n    return new ResolvedRenderLineInput(input.useMonospaceOptimizations, input.canUseHalfwidthRightwardsArrow, lineContent, len, isOverflowing, overflowingCharCount, tokens, containsForeignElements, input.fauxIndentLength, input.tabSize, input.startVisibleColumn, input.containsRTL, input.spaceWidth, input.renderSpaceCharCode, input.renderWhitespace, input.renderControlCharacters);\n}\n/**\n * In the rendering phase, characters are always looped until token.endIndex.\n * Ensure that all tokens end before `len` and the last one ends precisely at `len`.\n */\nfunction transformAndRemoveOverflowing(lineContent, lineContainsRTL, tokens, fauxIndentLength, len) {\n    const result = [];\n    let resultLen = 0;\n    // The faux indent part of the line should have no token type\n    if (fauxIndentLength > 0) {\n        result[resultLen++] = new LinePart(fauxIndentLength, '', 0, false);\n    }\n    let startOffset = fauxIndentLength;\n    for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n        const endIndex = tokens.getEndOffset(tokenIndex);\n        if (endIndex <= fauxIndentLength) {\n            // The faux indent part of the line should have no token type\n            continue;\n        }\n        const type = tokens.getClassName(tokenIndex);\n        if (endIndex >= len) {\n            const tokenContainsRTL = (lineContainsRTL ? strings.containsRTL(lineContent.substring(startOffset, len)) : false);\n            result[resultLen++] = new LinePart(len, type, 0, tokenContainsRTL);\n            break;\n        }\n        const tokenContainsRTL = (lineContainsRTL ? strings.containsRTL(lineContent.substring(startOffset, endIndex)) : false);\n        result[resultLen++] = new LinePart(endIndex, type, 0, tokenContainsRTL);\n        startOffset = endIndex;\n    }\n    return result;\n}\n/**\n * See https://github.com/microsoft/vscode/issues/6885.\n * It appears that having very large spans causes very slow reading of character positions.\n * So here we try to avoid that.\n */\nfunction splitLargeTokens(lineContent, tokens, onlyAtSpaces) {\n    let lastTokenEndIndex = 0;\n    const result = [];\n    let resultLen = 0;\n    if (onlyAtSpaces) {\n        // Split only at spaces => we need to walk each character\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const token = tokens[i];\n            const tokenEndIndex = token.endIndex;\n            if (lastTokenEndIndex + 50 /* Constants.LongToken */ < tokenEndIndex) {\n                const tokenType = token.type;\n                const tokenMetadata = token.metadata;\n                const tokenContainsRTL = token.containsRTL;\n                let lastSpaceOffset = -1;\n                let currTokenStart = lastTokenEndIndex;\n                for (let j = lastTokenEndIndex; j < tokenEndIndex; j++) {\n                    if (lineContent.charCodeAt(j) === 32 /* CharCode.Space */) {\n                        lastSpaceOffset = j;\n                    }\n                    if (lastSpaceOffset !== -1 && j - currTokenStart >= 50 /* Constants.LongToken */) {\n                        // Split at `lastSpaceOffset` + 1\n                        result[resultLen++] = new LinePart(lastSpaceOffset + 1, tokenType, tokenMetadata, tokenContainsRTL);\n                        currTokenStart = lastSpaceOffset + 1;\n                        lastSpaceOffset = -1;\n                    }\n                }\n                if (currTokenStart !== tokenEndIndex) {\n                    result[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n                }\n            }\n            else {\n                result[resultLen++] = token;\n            }\n            lastTokenEndIndex = tokenEndIndex;\n        }\n    }\n    else {\n        // Split anywhere => we don't need to walk each character\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const token = tokens[i];\n            const tokenEndIndex = token.endIndex;\n            const diff = (tokenEndIndex - lastTokenEndIndex);\n            if (diff > 50 /* Constants.LongToken */) {\n                const tokenType = token.type;\n                const tokenMetadata = token.metadata;\n                const tokenContainsRTL = token.containsRTL;\n                const piecesCount = Math.ceil(diff / 50 /* Constants.LongToken */);\n                for (let j = 1; j < piecesCount; j++) {\n                    const pieceEndIndex = lastTokenEndIndex + (j * 50 /* Constants.LongToken */);\n                    result[resultLen++] = new LinePart(pieceEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n                }\n                result[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n            }\n            else {\n                result[resultLen++] = token;\n            }\n            lastTokenEndIndex = tokenEndIndex;\n        }\n    }\n    return result;\n}\nfunction isControlCharacter(charCode) {\n    if (charCode < 32) {\n        return (charCode !== 9 /* CharCode.Tab */);\n    }\n    if (charCode === 127) {\n        // DEL\n        return true;\n    }\n    if ((charCode >= 0x202A && charCode <= 0x202E)\n        || (charCode >= 0x2066 && charCode <= 0x2069)\n        || (charCode >= 0x200E && charCode <= 0x200F)\n        || charCode === 0x061C) {\n        // Unicode Directional Formatting Characters\n        // LRE\tU+202A\tLEFT-TO-RIGHT EMBEDDING\n        // RLE\tU+202B\tRIGHT-TO-LEFT EMBEDDING\n        // PDF\tU+202C\tPOP DIRECTIONAL FORMATTING\n        // LRO\tU+202D\tLEFT-TO-RIGHT OVERRIDE\n        // RLO\tU+202E\tRIGHT-TO-LEFT OVERRIDE\n        // LRI\tU+2066\tLEFT-TO-RIGHT ISOLATE\n        // RLI\tU+2067\tRIGHT-TO-LEFT ISOLATE\n        // FSI\tU+2068\tFIRST STRONG ISOLATE\n        // PDI\tU+2069\tPOP DIRECTIONAL ISOLATE\n        // LRM\tU+200E\tLEFT-TO-RIGHT MARK\n        // RLM\tU+200F\tRIGHT-TO-LEFT MARK\n        // ALM\tU+061C\tARABIC LETTER MARK\n        return true;\n    }\n    return false;\n}\nfunction extractControlCharacters(lineContent, tokens) {\n    const result = [];\n    let lastLinePart = new LinePart(0, '', 0, false);\n    let charOffset = 0;\n    for (const token of tokens) {\n        const tokenEndIndex = token.endIndex;\n        for (; charOffset < tokenEndIndex; charOffset++) {\n            const charCode = lineContent.charCodeAt(charOffset);\n            if (isControlCharacter(charCode)) {\n                if (charOffset > lastLinePart.endIndex) {\n                    // emit previous part if it has text\n                    lastLinePart = new LinePart(charOffset, token.type, token.metadata, token.containsRTL);\n                    result.push(lastLinePart);\n                }\n                lastLinePart = new LinePart(charOffset + 1, 'mtkcontrol', token.metadata, false);\n                result.push(lastLinePart);\n            }\n        }\n        if (charOffset > lastLinePart.endIndex) {\n            // emit previous part if it has text\n            lastLinePart = new LinePart(tokenEndIndex, token.type, token.metadata, token.containsRTL);\n            result.push(lastLinePart);\n        }\n    }\n    return result;\n}\n/**\n * Whitespace is rendered by \"replacing\" tokens with a special-purpose `mtkw` type that is later recognized in the rendering phase.\n * Moreover, a token is created for every visual indent because on some fonts the glyphs used for rendering whitespace (&rarr; or &middot;) do not have the same width as &nbsp;.\n * The rendering phase will generate `style=\"width:...\"` for these tokens.\n */\nfunction _applyRenderWhitespace(input, lineContent, len, tokens) {\n    const continuesWithWrappedLine = input.continuesWithWrappedLine;\n    const fauxIndentLength = input.fauxIndentLength;\n    const tabSize = input.tabSize;\n    const startVisibleColumn = input.startVisibleColumn;\n    const useMonospaceOptimizations = input.useMonospaceOptimizations;\n    const selections = input.selectionsOnLine;\n    const onlyBoundary = (input.renderWhitespace === 1 /* RenderWhitespace.Boundary */);\n    const onlyTrailing = (input.renderWhitespace === 3 /* RenderWhitespace.Trailing */);\n    const generateLinePartForEachWhitespace = (input.renderSpaceWidth !== input.spaceWidth);\n    const result = [];\n    let resultLen = 0;\n    let tokenIndex = 0;\n    let tokenType = tokens[tokenIndex].type;\n    let tokenContainsRTL = tokens[tokenIndex].containsRTL;\n    let tokenEndIndex = tokens[tokenIndex].endIndex;\n    const tokensLength = tokens.length;\n    let lineIsEmptyOrWhitespace = false;\n    let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n    let lastNonWhitespaceIndex;\n    if (firstNonWhitespaceIndex === -1) {\n        lineIsEmptyOrWhitespace = true;\n        firstNonWhitespaceIndex = len;\n        lastNonWhitespaceIndex = len;\n    }\n    else {\n        lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n    }\n    let wasInWhitespace = false;\n    let currentSelectionIndex = 0;\n    let currentSelection = selections && selections[currentSelectionIndex];\n    let tmpIndent = startVisibleColumn % tabSize;\n    for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n        const chCode = lineContent.charCodeAt(charIndex);\n        if (currentSelection && charIndex >= currentSelection.endOffset) {\n            currentSelectionIndex++;\n            currentSelection = selections && selections[currentSelectionIndex];\n        }\n        let isInWhitespace;\n        if (charIndex < firstNonWhitespaceIndex || charIndex > lastNonWhitespaceIndex) {\n            // in leading or trailing whitespace\n            isInWhitespace = true;\n        }\n        else if (chCode === 9 /* CharCode.Tab */) {\n            // a tab character is rendered both in all and boundary cases\n            isInWhitespace = true;\n        }\n        else if (chCode === 32 /* CharCode.Space */) {\n            // hit a space character\n            if (onlyBoundary) {\n                // rendering only boundary whitespace\n                if (wasInWhitespace) {\n                    isInWhitespace = true;\n                }\n                else {\n                    const nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n                    isInWhitespace = (nextChCode === 32 /* CharCode.Space */ || nextChCode === 9 /* CharCode.Tab */);\n                }\n            }\n            else {\n                isInWhitespace = true;\n            }\n        }\n        else {\n            isInWhitespace = false;\n        }\n        // If rendering whitespace on selection, check that the charIndex falls within a selection\n        if (isInWhitespace && selections) {\n            isInWhitespace = !!currentSelection && currentSelection.startOffset <= charIndex && currentSelection.endOffset > charIndex;\n        }\n        // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n        if (isInWhitespace && onlyTrailing) {\n            isInWhitespace = lineIsEmptyOrWhitespace || charIndex > lastNonWhitespaceIndex;\n        }\n        if (isInWhitespace && tokenContainsRTL) {\n            // If the token contains RTL text, breaking it up into multiple line parts\n            // to render whitespace might affect the browser's bidi layout.\n            //\n            // We render whitespace in such tokens only if the whitespace\n            // is the leading or the trailing whitespace of the line,\n            // which doesn't affect the browser's bidi layout.\n            if (charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex) {\n                isInWhitespace = false;\n            }\n        }\n        if (wasInWhitespace) {\n            // was in whitespace token\n            if (!isInWhitespace || (!useMonospaceOptimizations && tmpIndent >= tabSize)) {\n                // leaving whitespace token or entering a new indent\n                if (generateLinePartForEachWhitespace) {\n                    const lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n                    for (let i = lastEndIndex + 1; i <= charIndex; i++) {\n                        result[resultLen++] = new LinePart(i, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n                    }\n                }\n                else {\n                    result[resultLen++] = new LinePart(charIndex, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n                }\n                tmpIndent = tmpIndent % tabSize;\n            }\n        }\n        else {\n            // was in regular token\n            if (charIndex === tokenEndIndex || (isInWhitespace && charIndex > fauxIndentLength)) {\n                result[resultLen++] = new LinePart(charIndex, tokenType, 0, tokenContainsRTL);\n                tmpIndent = tmpIndent % tabSize;\n            }\n        }\n        if (chCode === 9 /* CharCode.Tab */) {\n            tmpIndent = tabSize;\n        }\n        else if (strings.isFullWidthCharacter(chCode)) {\n            tmpIndent += 2;\n        }\n        else {\n            tmpIndent++;\n        }\n        wasInWhitespace = isInWhitespace;\n        while (charIndex === tokenEndIndex) {\n            tokenIndex++;\n            if (tokenIndex < tokensLength) {\n                tokenType = tokens[tokenIndex].type;\n                tokenContainsRTL = tokens[tokenIndex].containsRTL;\n                tokenEndIndex = tokens[tokenIndex].endIndex;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    let generateWhitespace = false;\n    if (wasInWhitespace) {\n        // was in whitespace token\n        if (continuesWithWrappedLine && onlyBoundary) {\n            const lastCharCode = (len > 0 ? lineContent.charCodeAt(len - 1) : 0 /* CharCode.Null */);\n            const prevCharCode = (len > 1 ? lineContent.charCodeAt(len - 2) : 0 /* CharCode.Null */);\n            const isSingleTrailingSpace = (lastCharCode === 32 /* CharCode.Space */ && (prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */));\n            if (!isSingleTrailingSpace) {\n                generateWhitespace = true;\n            }\n        }\n        else {\n            generateWhitespace = true;\n        }\n    }\n    if (generateWhitespace) {\n        if (generateLinePartForEachWhitespace) {\n            const lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n            for (let i = lastEndIndex + 1; i <= len; i++) {\n                result[resultLen++] = new LinePart(i, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n            }\n        }\n        else {\n            result[resultLen++] = new LinePart(len, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n        }\n    }\n    else {\n        result[resultLen++] = new LinePart(len, tokenType, 0, tokenContainsRTL);\n    }\n    return result;\n}\n/**\n * Inline decorations are \"merged\" on top of tokens.\n * Special care must be taken when multiple inline decorations are at play and they overlap.\n */\nfunction _applyInlineDecorations(lineContent, len, tokens, _lineDecorations) {\n    _lineDecorations.sort(LineDecoration.compare);\n    const lineDecorations = LineDecorationsNormalizer.normalize(lineContent, _lineDecorations);\n    const lineDecorationsLen = lineDecorations.length;\n    let lineDecorationIndex = 0;\n    const result = [];\n    let resultLen = 0;\n    let lastResultEndIndex = 0;\n    for (let tokenIndex = 0, len = tokens.length; tokenIndex < len; tokenIndex++) {\n        const token = tokens[tokenIndex];\n        const tokenEndIndex = token.endIndex;\n        const tokenType = token.type;\n        const tokenMetadata = token.metadata;\n        const tokenContainsRTL = token.containsRTL;\n        while (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset < tokenEndIndex) {\n            const lineDecoration = lineDecorations[lineDecorationIndex];\n            if (lineDecoration.startOffset > lastResultEndIndex) {\n                lastResultEndIndex = lineDecoration.startOffset;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n            }\n            if (lineDecoration.endOffset + 1 <= tokenEndIndex) {\n                // This line decoration ends before this token ends\n                lastResultEndIndex = lineDecoration.endOffset + 1;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata, tokenContainsRTL);\n                lineDecorationIndex++;\n            }\n            else {\n                // This line decoration continues on to the next token\n                lastResultEndIndex = tokenEndIndex;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata, tokenContainsRTL);\n                break;\n            }\n        }\n        if (tokenEndIndex > lastResultEndIndex) {\n            lastResultEndIndex = tokenEndIndex;\n            result[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n        }\n    }\n    const lastTokenEndIndex = tokens[tokens.length - 1].endIndex;\n    if (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n        while (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n            const lineDecoration = lineDecorations[lineDecorationIndex];\n            result[resultLen++] = new LinePart(lastResultEndIndex, lineDecoration.className, lineDecoration.metadata, false);\n            lineDecorationIndex++;\n        }\n    }\n    return result;\n}\n/**\n * This function is on purpose not split up into multiple functions to allow runtime type inference (i.e. performance reasons).\n * Notice how all the needed data is fully resolved and passed in (i.e. no other calls).\n */\nfunction _renderLine(input, sb) {\n    const fontIsMonospace = input.fontIsMonospace;\n    const canUseHalfwidthRightwardsArrow = input.canUseHalfwidthRightwardsArrow;\n    const containsForeignElements = input.containsForeignElements;\n    const lineContent = input.lineContent;\n    const len = input.len;\n    const isOverflowing = input.isOverflowing;\n    const overflowingCharCount = input.overflowingCharCount;\n    const parts = input.parts;\n    const fauxIndentLength = input.fauxIndentLength;\n    const tabSize = input.tabSize;\n    const startVisibleColumn = input.startVisibleColumn;\n    const containsRTL = input.containsRTL;\n    const spaceWidth = input.spaceWidth;\n    const renderSpaceCharCode = input.renderSpaceCharCode;\n    const renderWhitespace = input.renderWhitespace;\n    const renderControlCharacters = input.renderControlCharacters;\n    const characterMapping = new CharacterMapping(len + 1, parts.length);\n    let lastCharacterMappingDefined = false;\n    let charIndex = 0;\n    let visibleColumn = startVisibleColumn;\n    let charOffsetInPart = 0; // the character offset in the current part\n    let charHorizontalOffset = 0; // the character horizontal position in terms of chars relative to line start\n    let partDisplacement = 0;\n    if (containsRTL) {\n        sb.appendString('<span dir=\"ltr\">');\n    }\n    else {\n        sb.appendString('<span>');\n    }\n    for (let partIndex = 0, tokensLen = parts.length; partIndex < tokensLen; partIndex++) {\n        const part = parts[partIndex];\n        const partEndIndex = part.endIndex;\n        const partType = part.type;\n        const partContainsRTL = part.containsRTL;\n        const partRendersWhitespace = (renderWhitespace !== 0 /* RenderWhitespace.None */ && part.isWhitespace());\n        const partRendersWhitespaceWithWidth = partRendersWhitespace && !fontIsMonospace && (partType === 'mtkw' /*only whitespace*/ || !containsForeignElements);\n        const partIsEmptyAndHasPseudoAfter = (charIndex === partEndIndex && part.isPseudoAfter());\n        charOffsetInPart = 0;\n        sb.appendString('<span ');\n        if (partContainsRTL) {\n            sb.appendString('style=\"unicode-bidi:isolate\" ');\n        }\n        sb.appendString('class=\"');\n        sb.appendString(partRendersWhitespaceWithWidth ? 'mtkz' : partType);\n        sb.appendASCIICharCode(34 /* CharCode.DoubleQuote */);\n        if (partRendersWhitespace) {\n            let partWidth = 0;\n            {\n                let _charIndex = charIndex;\n                let _visibleColumn = visibleColumn;\n                for (; _charIndex < partEndIndex; _charIndex++) {\n                    const charCode = lineContent.charCodeAt(_charIndex);\n                    const charWidth = (charCode === 9 /* CharCode.Tab */ ? (tabSize - (_visibleColumn % tabSize)) : 1) | 0;\n                    partWidth += charWidth;\n                    if (_charIndex >= fauxIndentLength) {\n                        _visibleColumn += charWidth;\n                    }\n                }\n            }\n            if (partRendersWhitespaceWithWidth) {\n                sb.appendString(' style=\"width:');\n                sb.appendString(String(spaceWidth * partWidth));\n                sb.appendString('px\"');\n            }\n            sb.appendASCIICharCode(62 /* CharCode.GreaterThan */);\n            for (; charIndex < partEndIndex; charIndex++) {\n                characterMapping.setColumnInfo(charIndex + 1, partIndex - partDisplacement, charOffsetInPart, charHorizontalOffset);\n                partDisplacement = 0;\n                const charCode = lineContent.charCodeAt(charIndex);\n                let producedCharacters;\n                let charWidth;\n                if (charCode === 9 /* CharCode.Tab */) {\n                    producedCharacters = (tabSize - (visibleColumn % tabSize)) | 0;\n                    charWidth = producedCharacters;\n                    if (!canUseHalfwidthRightwardsArrow || charWidth > 1) {\n                        sb.appendCharCode(0x2192); // RIGHTWARDS ARROW\n                    }\n                    else {\n                        sb.appendCharCode(0xFFEB); // HALFWIDTH RIGHTWARDS ARROW\n                    }\n                    for (let space = 2; space <= charWidth; space++) {\n                        sb.appendCharCode(0xA0); // &nbsp;\n                    }\n                }\n                else { // must be CharCode.Space\n                    producedCharacters = 2;\n                    charWidth = 1;\n                    sb.appendCharCode(renderSpaceCharCode); // &middot; or word separator middle dot\n                    sb.appendCharCode(0x200C); // ZERO WIDTH NON-JOINER\n                }\n                charOffsetInPart += producedCharacters;\n                charHorizontalOffset += charWidth;\n                if (charIndex >= fauxIndentLength) {\n                    visibleColumn += charWidth;\n                }\n            }\n        }\n        else {\n            sb.appendASCIICharCode(62 /* CharCode.GreaterThan */);\n            for (; charIndex < partEndIndex; charIndex++) {\n                characterMapping.setColumnInfo(charIndex + 1, partIndex - partDisplacement, charOffsetInPart, charHorizontalOffset);\n                partDisplacement = 0;\n                const charCode = lineContent.charCodeAt(charIndex);\n                let producedCharacters = 1;\n                let charWidth = 1;\n                switch (charCode) {\n                    case 9 /* CharCode.Tab */:\n                        producedCharacters = (tabSize - (visibleColumn % tabSize));\n                        charWidth = producedCharacters;\n                        for (let space = 1; space <= producedCharacters; space++) {\n                            sb.appendCharCode(0xA0); // &nbsp;\n                        }\n                        break;\n                    case 32 /* CharCode.Space */:\n                        sb.appendCharCode(0xA0); // &nbsp;\n                        break;\n                    case 60 /* CharCode.LessThan */:\n                        sb.appendString('&lt;');\n                        break;\n                    case 62 /* CharCode.GreaterThan */:\n                        sb.appendString('&gt;');\n                        break;\n                    case 38 /* CharCode.Ampersand */:\n                        sb.appendString('&amp;');\n                        break;\n                    case 0 /* CharCode.Null */:\n                        if (renderControlCharacters) {\n                            // See https://unicode-table.com/en/blocks/control-pictures/\n                            sb.appendCharCode(9216);\n                        }\n                        else {\n                            sb.appendString('&#00;');\n                        }\n                        break;\n                    case 65279 /* CharCode.UTF8_BOM */:\n                    case 8232 /* CharCode.LINE_SEPARATOR */:\n                    case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n                    case 133 /* CharCode.NEXT_LINE */:\n                        sb.appendCharCode(0xFFFD);\n                        break;\n                    default:\n                        if (strings.isFullWidthCharacter(charCode)) {\n                            charWidth++;\n                        }\n                        // See https://unicode-table.com/en/blocks/control-pictures/\n                        if (renderControlCharacters && charCode < 32) {\n                            sb.appendCharCode(9216 + charCode);\n                        }\n                        else if (renderControlCharacters && charCode === 127) {\n                            // DEL\n                            sb.appendCharCode(9249);\n                        }\n                        else if (renderControlCharacters && isControlCharacter(charCode)) {\n                            sb.appendString('[U+');\n                            sb.appendString(to4CharHex(charCode));\n                            sb.appendString(']');\n                            producedCharacters = 8;\n                            charWidth = producedCharacters;\n                        }\n                        else {\n                            sb.appendCharCode(charCode);\n                        }\n                }\n                charOffsetInPart += producedCharacters;\n                charHorizontalOffset += charWidth;\n                if (charIndex >= fauxIndentLength) {\n                    visibleColumn += charWidth;\n                }\n            }\n        }\n        if (partIsEmptyAndHasPseudoAfter) {\n            partDisplacement++;\n        }\n        else {\n            partDisplacement = 0;\n        }\n        if (charIndex >= len && !lastCharacterMappingDefined && part.isPseudoAfter()) {\n            lastCharacterMappingDefined = true;\n            characterMapping.setColumnInfo(charIndex + 1, partIndex, charOffsetInPart, charHorizontalOffset);\n        }\n        sb.appendString('</span>');\n    }\n    if (!lastCharacterMappingDefined) {\n        // When getting client rects for the last character, we will position the\n        // text range at the end of the span, insteaf of at the beginning of next span\n        characterMapping.setColumnInfo(len + 1, parts.length - 1, charOffsetInPart, charHorizontalOffset);\n    }\n    if (isOverflowing) {\n        sb.appendString('<span class=\"mtkoverflow\">');\n        sb.appendString(nls.localize('showMore', \"Show more ({0})\", renderOverflowingCharCount(overflowingCharCount)));\n        sb.appendString('</span>');\n    }\n    sb.appendString('</span>');\n    return new RenderLineOutput(characterMapping, containsRTL, containsForeignElements);\n}\nfunction to4CharHex(n) {\n    return n.toString(16).toUpperCase().padStart(4, '0');\n}\nfunction renderOverflowingCharCount(n) {\n    if (n < 1024) {\n        return nls.localize('overflow.chars', \"{0} chars\", n);\n    }\n    if (n < 1024 * 1024) {\n        return `${(n / 1024).toFixed(1)} KB`;\n    }\n    return `${(n / 1024 / 1024).toFixed(1)} MB`;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\n/**\n * Contains all data needed to render at a specific viewport.\n */\nexport class ViewportData {\n    constructor(selections, partialData, whitespaceViewportData, model) {\n        this.selections = selections;\n        this.startLineNumber = partialData.startLineNumber | 0;\n        this.endLineNumber = partialData.endLineNumber | 0;\n        this.relativeVerticalOffset = partialData.relativeVerticalOffset;\n        this.bigNumbersDelta = partialData.bigNumbersDelta | 0;\n        this.lineHeight = partialData.lineHeight | 0;\n        this.whitespaceViewportData = whitespaceViewportData;\n        this._model = model;\n        this.visibleRange = new Range(partialData.startLineNumber, this._model.getLineMinColumn(partialData.startLineNumber), partialData.endLineNumber, this._model.getLineMaxColumn(partialData.endLineNumber));\n    }\n    getViewLineRenderingData(lineNumber) {\n        return this._model.getViewportViewLineRenderingData(this.visibleRange, lineNumber);\n    }\n    getDecorationsInViewport() {\n        return this._model.getDecorationsInViewport(this.visibleRange);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../base/common/arrays.js';\nimport * as strings from '../../base/common/strings.js';\nimport { Range } from './core/range.js';\nexport class Viewport {\n    constructor(top, left, width, height) {\n        this._viewportBrand = undefined;\n        this.top = top | 0;\n        this.left = left | 0;\n        this.width = width | 0;\n        this.height = height | 0;\n    }\n}\nexport class MinimapLinesRenderingData {\n    constructor(tabSize, data) {\n        this.tabSize = tabSize;\n        this.data = data;\n    }\n}\nexport class ViewLineData {\n    constructor(content, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens, inlineDecorations) {\n        this._viewLineDataBrand = undefined;\n        this.content = content;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.minColumn = minColumn;\n        this.maxColumn = maxColumn;\n        this.startVisibleColumn = startVisibleColumn;\n        this.tokens = tokens;\n        this.inlineDecorations = inlineDecorations;\n    }\n}\nexport class ViewLineRenderingData {\n    constructor(minColumn, maxColumn, content, continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, tokens, inlineDecorations, tabSize, startVisibleColumn) {\n        this.minColumn = minColumn;\n        this.maxColumn = maxColumn;\n        this.content = content;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\n        this.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\n        this.tokens = tokens;\n        this.inlineDecorations = inlineDecorations;\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n    }\n    static isBasicASCII(lineContent, mightContainNonBasicASCII) {\n        if (mightContainNonBasicASCII) {\n            return strings.isBasicASCII(lineContent);\n        }\n        return true;\n    }\n    static containsRTL(lineContent, isBasicASCII, mightContainRTL) {\n        if (!isBasicASCII && mightContainRTL) {\n            return strings.containsRTL(lineContent);\n        }\n        return false;\n    }\n}\nexport class InlineDecoration {\n    constructor(range, inlineClassName, type) {\n        this.range = range;\n        this.inlineClassName = inlineClassName;\n        this.type = type;\n    }\n}\nexport class SingleLineInlineDecoration {\n    constructor(startOffset, endOffset, inlineClassName, inlineClassNameAffectsLetterSpacing) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.inlineClassName = inlineClassName;\n        this.inlineClassNameAffectsLetterSpacing = inlineClassNameAffectsLetterSpacing;\n    }\n    toInlineDecoration(lineNumber) {\n        return new InlineDecoration(new Range(lineNumber, this.startOffset + 1, lineNumber, this.endOffset + 1), this.inlineClassName, this.inlineClassNameAffectsLetterSpacing ? 3 /* InlineDecorationType.RegularAffectingLetterSpacing */ : 0 /* InlineDecorationType.Regular */);\n    }\n}\nexport class ViewModelDecoration {\n    constructor(range, options) {\n        this._viewModelDecorationBrand = undefined;\n        this.range = range;\n        this.options = options;\n    }\n}\nexport class OverviewRulerDecorationsGroup {\n    constructor(color, zIndex, \n    /**\n     * Decorations are encoded in a number array using the following scheme:\n     *  - 3*i = lane\n     *  - 3*i+1 = startLineNumber\n     *  - 3*i+2 = endLineNumber\n     */\n    data) {\n        this.color = color;\n        this.zIndex = zIndex;\n        this.data = data;\n    }\n    static compareByRenderingProps(a, b) {\n        if (a.zIndex === b.zIndex) {\n            if (a.color < b.color) {\n                return -1;\n            }\n            if (a.color > b.color) {\n                return 1;\n            }\n            return 0;\n        }\n        return a.zIndex - b.zIndex;\n    }\n    static equals(a, b) {\n        return (a.color === b.color\n            && a.zIndex === b.zIndex\n            && arrays.equals(a.data, b.data));\n    }\n    static equalsArr(a, b) {\n        return arrays.equals(a, b, OverviewRulerDecorationsGroup.equals);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, markAsSingleton } from '../../../base/common/lifecycle.js';\nimport { RGBA8 } from '../core/rgba.js';\nimport { TokenizationRegistry } from '../languages.js';\nexport class MinimapTokensColorTracker extends Disposable {\n    static getInstance() {\n        if (!this._INSTANCE) {\n            this._INSTANCE = markAsSingleton(new MinimapTokensColorTracker());\n        }\n        return this._INSTANCE;\n    }\n    constructor() {\n        super();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._updateColorMap();\n        this._register(TokenizationRegistry.onDidChange(e => {\n            if (e.changedColorMap) {\n                this._updateColorMap();\n            }\n        }));\n    }\n    _updateColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        if (!colorMap) {\n            this._colors = [RGBA8.Empty];\n            this._backgroundIsLight = true;\n            return;\n        }\n        this._colors = [RGBA8.Empty];\n        for (let colorId = 1; colorId < colorMap.length; colorId++) {\n            const source = colorMap[colorId].rgba;\n            // Use a VM friendly data-type\n            this._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n        }\n        const backgroundLuminosity = colorMap[2 /* ColorId.DefaultBackground */].getRelativeLuminance();\n        this._backgroundIsLight = backgroundLuminosity >= 0.5;\n        this._onDidChange.fire(undefined);\n    }\n    getColor(colorId) {\n        if (colorId < 1 || colorId >= this._colors.length) {\n            // background color (basically invisible)\n            colorId = 2 /* ColorId.DefaultBackground */;\n        }\n        return this._colors[colorId];\n    }\n    backgroundIsLight() {\n        return this._backgroundIsLight;\n    }\n}\nMinimapTokensColorTracker._INSTANCE = null;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { ModelLineProjectionData } from '../modelLineProjectionData.js';\nexport class MonospaceLineBreaksComputerFactory {\n    static create(options) {\n        return new MonospaceLineBreaksComputerFactory(options.get(134 /* EditorOption.wordWrapBreakBeforeCharacters */), options.get(133 /* EditorOption.wordWrapBreakAfterCharacters */));\n    }\n    constructor(breakBeforeChars, breakAfterChars) {\n        this.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak) {\n        const requests = [];\n        const injectedTexts = [];\n        const previousBreakingData = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n                previousBreakingData.push(previousLineBreakData);\n            },\n            finalize: () => {\n                const columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth;\n                const result = [];\n                for (let i = 0, len = requests.length; i < len; i++) {\n                    const injectedText = injectedTexts[i];\n                    const previousLineBreakData = previousBreakingData[i];\n                    if (previousLineBreakData && !previousLineBreakData.injectionOptions && !injectedText) {\n                        result[i] = createLineBreaksFromPreviousLineBreaks(this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak);\n                    }\n                    else {\n                        result[i] = createLineBreaks(this.classifier, requests[i], injectedText, tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak);\n                    }\n                }\n                arrPool1.length = 0;\n                arrPool2.length = 0;\n                return result;\n            }\n        };\n    }\n}\nclass WrappingCharacterClassifier extends CharacterClassifier {\n    constructor(BREAK_BEFORE, BREAK_AFTER) {\n        super(0 /* CharacterClass.NONE */);\n        for (let i = 0; i < BREAK_BEFORE.length; i++) {\n            this.set(BREAK_BEFORE.charCodeAt(i), 1 /* CharacterClass.BREAK_BEFORE */);\n        }\n        for (let i = 0; i < BREAK_AFTER.length; i++) {\n            this.set(BREAK_AFTER.charCodeAt(i), 2 /* CharacterClass.BREAK_AFTER */);\n        }\n    }\n    get(charCode) {\n        if (charCode >= 0 && charCode < 256) {\n            return this._asciiMap[charCode];\n        }\n        else {\n            // Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\n            // 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\n            // 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\n            // 3. Hiragana and Katakana (0x3040 -- 0x30FF)\n            if ((charCode >= 0x3040 && charCode <= 0x30FF)\n                || (charCode >= 0x3400 && charCode <= 0x4DBF)\n                || (charCode >= 0x4E00 && charCode <= 0x9FFF)) {\n                return 3 /* CharacterClass.BREAK_IDEOGRAPHIC */;\n            }\n            return (this._map.get(charCode) || this._defaultValue);\n        }\n    }\n}\nlet arrPool1 = [];\nlet arrPool2 = [];\nfunction createLineBreaksFromPreviousLineBreaks(classifier, previousBreakingData, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent, wordBreak) {\n    if (firstLineBreakColumn === -1) {\n        return null;\n    }\n    const len = lineText.length;\n    if (len <= 1) {\n        return null;\n    }\n    const isKeepAll = (wordBreak === 'keepAll');\n    const prevBreakingOffsets = previousBreakingData.breakOffsets;\n    const prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n    const breakingOffsets = arrPool1;\n    const breakingOffsetsVisibleColumn = arrPool2;\n    let breakingOffsetsCount = 0;\n    let lastBreakingOffset = 0;\n    let lastBreakingOffsetVisibleColumn = 0;\n    let breakingColumn = firstLineBreakColumn;\n    const prevLen = prevBreakingOffsets.length;\n    let prevIndex = 0;\n    if (prevIndex >= 0) {\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n        while (prevIndex + 1 < prevLen) {\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n            if (distance >= bestDistance) {\n                break;\n            }\n            bestDistance = distance;\n            prevIndex++;\n        }\n    }\n    while (prevIndex < prevLen) {\n        // Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\n        let prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\n        let prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\n        if (lastBreakingOffset > prevBreakOffset) {\n            prevBreakOffset = lastBreakingOffset;\n            prevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\n        }\n        let breakOffset = 0;\n        let breakOffsetVisibleColumn = 0;\n        let forcedBreakOffset = 0;\n        let forcedBreakOffsetVisibleColumn = 0;\n        // initially, we search as much as possible to the right (if it fits)\n        if (prevBreakOffsetVisibleColumn <= breakingColumn) {\n            let visibleColumn = prevBreakOffsetVisibleColumn;\n            let prevCharCode = prevBreakOffset === 0 ? 0 /* CharCode.Null */ : lineText.charCodeAt(prevBreakOffset - 1);\n            let prevCharCodeClass = prevBreakOffset === 0 ? 0 /* CharacterClass.NONE */ : classifier.get(prevCharCode);\n            let entireLineFits = true;\n            for (let i = prevBreakOffset; i < len; i++) {\n                const charStartOffset = i;\n                const charCode = lineText.charCodeAt(i);\n                let charCodeClass;\n                let charWidth;\n                if (strings.isHighSurrogate(charCode)) {\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                    i++;\n                    charCodeClass = 0 /* CharacterClass.NONE */;\n                    charWidth = 2;\n                }\n                else {\n                    charCodeClass = classifier.get(charCode);\n                    charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n                }\n                if (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n                    breakOffset = charStartOffset;\n                    breakOffsetVisibleColumn = visibleColumn;\n                }\n                visibleColumn += charWidth;\n                // check if adding character at `i` will go over the breaking column\n                if (visibleColumn > breakingColumn) {\n                    // We need to break at least before character at `i`:\n                    if (charStartOffset > lastBreakingOffset) {\n                        forcedBreakOffset = charStartOffset;\n                        forcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\n                    }\n                    else {\n                        // we need to advance at least by one character\n                        forcedBreakOffset = i + 1;\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\n                    }\n                    if (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n                        // Cannot break at `breakOffset` => reset it if it was set\n                        breakOffset = 0;\n                    }\n                    entireLineFits = false;\n                    break;\n                }\n                prevCharCode = charCode;\n                prevCharCodeClass = charCodeClass;\n            }\n            if (entireLineFits) {\n                // there is no more need to break => stop the outer loop!\n                if (breakingOffsetsCount > 0) {\n                    // Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\n                    breakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\n                    breakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\n                    breakingOffsetsCount++;\n                }\n                break;\n            }\n        }\n        if (breakOffset === 0) {\n            // must search left\n            let visibleColumn = prevBreakOffsetVisibleColumn;\n            let charCode = lineText.charCodeAt(prevBreakOffset);\n            let charCodeClass = classifier.get(charCode);\n            let hitATabCharacter = false;\n            for (let i = prevBreakOffset - 1; i >= lastBreakingOffset; i--) {\n                const charStartOffset = i + 1;\n                const prevCharCode = lineText.charCodeAt(i);\n                if (prevCharCode === 9 /* CharCode.Tab */) {\n                    // cannot determine the width of a tab when going backwards, so we must go forwards\n                    hitATabCharacter = true;\n                    break;\n                }\n                let prevCharCodeClass;\n                let prevCharWidth;\n                if (strings.isLowSurrogate(prevCharCode)) {\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                    i--;\n                    prevCharCodeClass = 0 /* CharacterClass.NONE */;\n                    prevCharWidth = 2;\n                }\n                else {\n                    prevCharCodeClass = classifier.get(prevCharCode);\n                    prevCharWidth = (strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1);\n                }\n                if (visibleColumn <= breakingColumn) {\n                    if (forcedBreakOffset === 0) {\n                        forcedBreakOffset = charStartOffset;\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\n                    }\n                    if (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\n                        // went too far!\n                        break;\n                    }\n                    if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n                        breakOffset = charStartOffset;\n                        breakOffsetVisibleColumn = visibleColumn;\n                        break;\n                    }\n                }\n                visibleColumn -= prevCharWidth;\n                charCode = prevCharCode;\n                charCodeClass = prevCharCodeClass;\n            }\n            if (breakOffset !== 0) {\n                const remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\n                if (remainingWidthOfNextLine <= tabSize) {\n                    const charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\n                    let charWidth;\n                    if (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\n                        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                        charWidth = 2;\n                    }\n                    else {\n                        charWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n                    }\n                    if (remainingWidthOfNextLine - charWidth < 0) {\n                        // it is not worth it to break at breakOffset, it just introduces an extra needless line!\n                        breakOffset = 0;\n                    }\n                }\n            }\n            if (hitATabCharacter) {\n                // cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\n                prevIndex--;\n                continue;\n            }\n        }\n        if (breakOffset === 0) {\n            // Could not find a good breaking point\n            breakOffset = forcedBreakOffset;\n            breakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\n        }\n        if (breakOffset <= lastBreakingOffset) {\n            // Make sure that we are advancing (at least one character)\n            const charCode = lineText.charCodeAt(lastBreakingOffset);\n            if (strings.isHighSurrogate(charCode)) {\n                // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                breakOffset = lastBreakingOffset + 2;\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\n            }\n            else {\n                breakOffset = lastBreakingOffset + 1;\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(charCode, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n            }\n        }\n        lastBreakingOffset = breakOffset;\n        breakingOffsets[breakingOffsetsCount] = breakOffset;\n        lastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\n        breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n        breakingOffsetsCount++;\n        breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n        while (prevIndex < 0 || (prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn)) {\n            prevIndex++;\n        }\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n        while (prevIndex + 1 < prevLen) {\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n            if (distance >= bestDistance) {\n                break;\n            }\n            bestDistance = distance;\n            prevIndex++;\n        }\n    }\n    if (breakingOffsetsCount === 0) {\n        return null;\n    }\n    // Doing here some object reuse which ends up helping a huge deal with GC pauses!\n    breakingOffsets.length = breakingOffsetsCount;\n    breakingOffsetsVisibleColumn.length = breakingOffsetsCount;\n    arrPool1 = previousBreakingData.breakOffsets;\n    arrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\n    previousBreakingData.breakOffsets = breakingOffsets;\n    previousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\n    previousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\n    return previousBreakingData;\n}\nfunction createLineBreaks(classifier, _lineText, injectedTexts, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent, wordBreak) {\n    const lineText = LineInjectedText.applyInjectedText(_lineText, injectedTexts);\n    let injectionOptions;\n    let injectionOffsets;\n    if (injectedTexts && injectedTexts.length > 0) {\n        injectionOptions = injectedTexts.map(t => t.options);\n        injectionOffsets = injectedTexts.map(text => text.column - 1);\n    }\n    else {\n        injectionOptions = null;\n        injectionOffsets = null;\n    }\n    if (firstLineBreakColumn === -1) {\n        if (!injectionOptions) {\n            return null;\n        }\n        // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n        // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n        return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    }\n    const len = lineText.length;\n    if (len <= 1) {\n        if (!injectionOptions) {\n            return null;\n        }\n        // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n        // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n        return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    }\n    const isKeepAll = (wordBreak === 'keepAll');\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n    const breakingOffsets = [];\n    const breakingOffsetsVisibleColumn = [];\n    let breakingOffsetsCount = 0;\n    let breakOffset = 0;\n    let breakOffsetVisibleColumn = 0;\n    let breakingColumn = firstLineBreakColumn;\n    let prevCharCode = lineText.charCodeAt(0);\n    let prevCharCodeClass = classifier.get(prevCharCode);\n    let visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\n    let startOffset = 1;\n    if (strings.isHighSurrogate(prevCharCode)) {\n        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n        visibleColumn += 1;\n        prevCharCode = lineText.charCodeAt(1);\n        prevCharCodeClass = classifier.get(prevCharCode);\n        startOffset++;\n    }\n    for (let i = startOffset; i < len; i++) {\n        const charStartOffset = i;\n        const charCode = lineText.charCodeAt(i);\n        let charCodeClass;\n        let charWidth;\n        if (strings.isHighSurrogate(charCode)) {\n            // A surrogate pair must always be considered as a single unit, so it is never to be broken\n            i++;\n            charCodeClass = 0 /* CharacterClass.NONE */;\n            charWidth = 2;\n        }\n        else {\n            charCodeClass = classifier.get(charCode);\n            charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n        }\n        if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n            breakOffset = charStartOffset;\n            breakOffsetVisibleColumn = visibleColumn;\n        }\n        visibleColumn += charWidth;\n        // check if adding character at `i` will go over the breaking column\n        if (visibleColumn > breakingColumn) {\n            // We need to break at least before character at `i`:\n            if (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n                // Cannot break at `breakOffset`, must break at `i`\n                breakOffset = charStartOffset;\n                breakOffsetVisibleColumn = visibleColumn - charWidth;\n            }\n            breakingOffsets[breakingOffsetsCount] = breakOffset;\n            breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n            breakingOffsetsCount++;\n            breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n            breakOffset = 0;\n        }\n        prevCharCode = charCode;\n        prevCharCodeClass = charCodeClass;\n    }\n    if (breakingOffsetsCount === 0 && (!injectedTexts || injectedTexts.length === 0)) {\n        return null;\n    }\n    // Add last segment\n    breakingOffsets[breakingOffsetsCount] = len;\n    breakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\n    return new ModelLineProjectionData(injectionOffsets, injectionOptions, breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\n}\nfunction computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar) {\n    if (charCode === 9 /* CharCode.Tab */) {\n        return (tabSize - (visibleColumn % tabSize));\n    }\n    if (strings.isFullWidthCharacter(charCode)) {\n        return columnsForFullWidthChar;\n    }\n    if (charCode < 32) {\n        // when using `editor.renderControlCharacters`, the substitutions are often wide\n        return columnsForFullWidthChar;\n    }\n    return 1;\n}\nfunction tabCharacterWidth(visibleColumn, tabSize) {\n    return (tabSize - (visibleColumn % tabSize));\n}\n/**\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\n * Kinsoku Shori : Don't break before a trailing character, like a period\n */\nfunction canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll) {\n    return (charCode !== 32 /* CharCode.Space */\n        && ((prevCharCodeClass === 2 /* CharacterClass.BREAK_AFTER */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */) // break at the end of multiple BREAK_AFTER\n            || (prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */ && charCodeClass === 1 /* CharacterClass.BREAK_BEFORE */) // break at the start of multiple BREAK_BEFORE\n            || (!isKeepAll && prevCharCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */)\n            || (!isKeepAll && charCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */)));\n}\nfunction computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n    let wrappedTextIndentLength = 0;\n    if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n        const firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\n        if (firstNonWhitespaceIndex !== -1) {\n            // Track existing indent\n            for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                const charWidth = (lineText.charCodeAt(i) === 9 /* CharCode.Tab */ ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1);\n                wrappedTextIndentLength += charWidth;\n            }\n            // Increase indent of continuation lines, if desired\n            const numberOfAdditionalTabs = (wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0);\n            for (let i = 0; i < numberOfAdditionalTabs; i++) {\n                const charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\n                wrappedTextIndentLength += charWidth;\n            }\n            // Force sticking to beginning of line if no character would fit except for the indentation\n            if (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\n                wrappedTextIndentLength = 0;\n            }\n        }\n    }\n    return wrappedTextIndentLength;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ColorZone {\n    constructor(from, to, colorId) {\n        this._colorZoneBrand = undefined;\n        this.from = from | 0;\n        this.to = to | 0;\n        this.colorId = colorId | 0;\n    }\n    static compare(a, b) {\n        if (a.colorId === b.colorId) {\n            if (a.from === b.from) {\n                return a.to - b.to;\n            }\n            return a.from - b.from;\n        }\n        return a.colorId - b.colorId;\n    }\n}\n/**\n * A zone in the overview ruler\n */\nexport class OverviewRulerZone {\n    constructor(startLineNumber, endLineNumber, heightInLines, color) {\n        this._overviewRulerZoneBrand = undefined;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n        this.heightInLines = heightInLines;\n        this.color = color;\n        this._colorZone = null;\n    }\n    static compare(a, b) {\n        if (a.color === b.color) {\n            if (a.startLineNumber === b.startLineNumber) {\n                if (a.heightInLines === b.heightInLines) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.heightInLines - b.heightInLines;\n            }\n            return a.startLineNumber - b.startLineNumber;\n        }\n        return a.color < b.color ? -1 : 1;\n    }\n    setColorZone(colorZone) {\n        this._colorZone = colorZone;\n    }\n    getColorZones() {\n        return this._colorZone;\n    }\n}\nexport class OverviewZoneManager {\n    constructor(getVerticalOffsetForLine) {\n        this._getVerticalOffsetForLine = getVerticalOffsetForLine;\n        this._zones = [];\n        this._colorZonesInvalid = false;\n        this._lineHeight = 0;\n        this._domWidth = 0;\n        this._domHeight = 0;\n        this._outerHeight = 0;\n        this._pixelRatio = 1;\n        this._lastAssignedId = 0;\n        this._color2Id = Object.create(null);\n        this._id2Color = [];\n    }\n    getId2Color() {\n        return this._id2Color;\n    }\n    setZones(newZones) {\n        this._zones = newZones;\n        this._zones.sort(OverviewRulerZone.compare);\n    }\n    setLineHeight(lineHeight) {\n        if (this._lineHeight === lineHeight) {\n            return false;\n        }\n        this._lineHeight = lineHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    setPixelRatio(pixelRatio) {\n        this._pixelRatio = pixelRatio;\n        this._colorZonesInvalid = true;\n    }\n    getDOMWidth() {\n        return this._domWidth;\n    }\n    getCanvasWidth() {\n        return this._domWidth * this._pixelRatio;\n    }\n    setDOMWidth(width) {\n        if (this._domWidth === width) {\n            return false;\n        }\n        this._domWidth = width;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getDOMHeight() {\n        return this._domHeight;\n    }\n    getCanvasHeight() {\n        return this._domHeight * this._pixelRatio;\n    }\n    setDOMHeight(height) {\n        if (this._domHeight === height) {\n            return false;\n        }\n        this._domHeight = height;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getOuterHeight() {\n        return this._outerHeight;\n    }\n    setOuterHeight(outerHeight) {\n        if (this._outerHeight === outerHeight) {\n            return false;\n        }\n        this._outerHeight = outerHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    resolveColorZones() {\n        const colorZonesInvalid = this._colorZonesInvalid;\n        const lineHeight = Math.floor(this._lineHeight);\n        const totalHeight = Math.floor(this.getCanvasHeight());\n        const outerHeight = Math.floor(this._outerHeight);\n        const heightRatio = totalHeight / outerHeight;\n        const halfMinimumHeight = Math.floor(4 /* Constants.MINIMUM_HEIGHT */ * this._pixelRatio / 2);\n        const allColorZones = [];\n        for (let i = 0, len = this._zones.length; i < len; i++) {\n            const zone = this._zones[i];\n            if (!colorZonesInvalid) {\n                const colorZone = zone.getColorZones();\n                if (colorZone) {\n                    allColorZones.push(colorZone);\n                    continue;\n                }\n            }\n            const offset1 = this._getVerticalOffsetForLine(zone.startLineNumber);\n            const offset2 = (zone.heightInLines === 0\n                ? this._getVerticalOffsetForLine(zone.endLineNumber) + lineHeight\n                : offset1 + zone.heightInLines * lineHeight);\n            const y1 = Math.floor(heightRatio * offset1);\n            const y2 = Math.floor(heightRatio * offset2);\n            let ycenter = Math.floor((y1 + y2) / 2);\n            let halfHeight = (y2 - ycenter);\n            if (halfHeight < halfMinimumHeight) {\n                halfHeight = halfMinimumHeight;\n            }\n            if (ycenter - halfHeight < 0) {\n                ycenter = halfHeight;\n            }\n            if (ycenter + halfHeight > totalHeight) {\n                ycenter = totalHeight - halfHeight;\n            }\n            const color = zone.color;\n            let colorId = this._color2Id[color];\n            if (!colorId) {\n                colorId = (++this._lastAssignedId);\n                this._color2Id[color] = colorId;\n                this._id2Color[colorId] = color;\n            }\n            const colorZone = new ColorZone(ycenter - halfHeight, ycenter + halfHeight, colorId);\n            zone.setColorZone(colorZone);\n            allColorZones.push(colorZone);\n        }\n        this._colorZonesInvalid = false;\n        allColorZones.sort(ColorZone.compare);\n        return allColorZones;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorTheme } from '../editorTheme.js';\nexport class ViewContext {\n    constructor(configuration, theme, model) {\n        this.configuration = configuration;\n        this.theme = new EditorTheme(theme);\n        this.viewModel = model;\n        this.viewLayout = model.viewLayout;\n    }\n    addEventHandler(eventHandler) {\n        this.viewModel.addViewEventHandler(eventHandler);\n    }\n    removeEventHandler(eventHandler) {\n        this.viewModel.removeViewEventHandler(eventHandler);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { InlineDecoration, ViewModelDecoration } from '../viewModel.js';\nimport { filterValidationDecorations } from '../config/editorOptions.js';\nexport class ViewModelDecorations {\n    constructor(editorId, model, configuration, linesCollection, coordinatesConverter) {\n        this.editorId = editorId;\n        this.model = model;\n        this.configuration = configuration;\n        this._linesCollection = linesCollection;\n        this._coordinatesConverter = coordinatesConverter;\n        this._decorationsCache = Object.create(null);\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    _clearCachedModelDecorationsResolver() {\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    dispose() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    reset() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onModelDecorationsChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onLineMappingChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    _getOrCreateViewModelDecoration(modelDecoration) {\n        const id = modelDecoration.id;\n        let r = this._decorationsCache[id];\n        if (!r) {\n            const modelRange = modelDecoration.range;\n            const options = modelDecoration.options;\n            let viewRange;\n            if (options.isWholeLine) {\n                const start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1), 0 /* PositionAffinity.Left */, false, true);\n                const end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)), 1 /* PositionAffinity.Right */);\n                viewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n            }\n            else {\n                // For backwards compatibility reasons, we want injected text before any decoration.\n                // Thus, move decorations to the right.\n                viewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange, 1 /* PositionAffinity.Right */);\n            }\n            r = new ViewModelDecoration(viewRange, options);\n            this._decorationsCache[id] = r;\n        }\n        return r;\n    }\n    getMinimapDecorationsInRange(range) {\n        return this._getDecorationsInRange(range, true, false).decorations;\n    }\n    getDecorationsViewportData(viewRange) {\n        let cacheIsValid = (this._cachedModelDecorationsResolver !== null);\n        cacheIsValid = cacheIsValid && (viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange));\n        if (!cacheIsValid) {\n            this._cachedModelDecorationsResolver = this._getDecorationsInRange(viewRange, false, false);\n            this._cachedModelDecorationsResolverViewRange = viewRange;\n        }\n        return this._cachedModelDecorationsResolver;\n    }\n    getInlineDecorationsOnLine(lineNumber, onlyMinimapDecorations = false, onlyMarginDecorations = false) {\n        const range = new Range(lineNumber, this._linesCollection.getViewLineMinColumn(lineNumber), lineNumber, this._linesCollection.getViewLineMaxColumn(lineNumber));\n        return this._getDecorationsInRange(range, onlyMinimapDecorations, onlyMarginDecorations).inlineDecorations[0];\n    }\n    _getDecorationsInRange(viewRange, onlyMinimapDecorations, onlyMarginDecorations) {\n        const modelDecorations = this._linesCollection.getDecorationsInRange(viewRange, this.editorId, filterValidationDecorations(this.configuration.options), onlyMinimapDecorations, onlyMarginDecorations);\n        const startLineNumber = viewRange.startLineNumber;\n        const endLineNumber = viewRange.endLineNumber;\n        const decorationsInViewport = [];\n        let decorationsInViewportLen = 0;\n        const inlineDecorations = [];\n        for (let j = startLineNumber; j <= endLineNumber; j++) {\n            inlineDecorations[j - startLineNumber] = [];\n        }\n        for (let i = 0, len = modelDecorations.length; i < len; i++) {\n            const modelDecoration = modelDecorations[i];\n            const decorationOptions = modelDecoration.options;\n            if (!isModelDecorationVisible(this.model, modelDecoration)) {\n                continue;\n            }\n            const viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n            const viewRange = viewModelDecoration.range;\n            decorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n            if (decorationOptions.inlineClassName) {\n                const inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? 3 /* InlineDecorationType.RegularAffectingLetterSpacing */ : 0 /* InlineDecorationType.Regular */);\n                const intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n                const intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n                for (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n                    inlineDecorations[j - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.beforeContentClassName) {\n                if (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n                    const inlineDecoration = new InlineDecoration(new Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn), decorationOptions.beforeContentClassName, 1 /* InlineDecorationType.Before */);\n                    inlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.afterContentClassName) {\n                if (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n                    const inlineDecoration = new InlineDecoration(new Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn), decorationOptions.afterContentClassName, 2 /* InlineDecorationType.After */);\n                    inlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n        }\n        return {\n            decorations: decorationsInViewport,\n            inlineDecorations: inlineDecorations\n        };\n    }\n}\nexport function isModelDecorationVisible(model, decoration) {\n    if (decoration.options.hideInCommentTokens && isModelDecorationInComment(model, decoration)) {\n        return false;\n    }\n    if (decoration.options.hideInStringTokens && isModelDecorationInString(model, decoration)) {\n        return false;\n    }\n    return true;\n}\nexport function isModelDecorationInComment(model, decoration) {\n    return testTokensInRange(model, decoration.range, (tokenType) => tokenType === 1 /* StandardTokenType.Comment */);\n}\nexport function isModelDecorationInString(model, decoration) {\n    return testTokensInRange(model, decoration.range, (tokenType) => tokenType === 2 /* StandardTokenType.String */);\n}\n/**\n * Calls the callback for every token that intersects the range.\n * If the callback returns `false`, iteration stops and `false` is returned.\n * Otherwise, `true` is returned.\n */\nfunction testTokensInRange(model, range, callback) {\n    for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n        const lineTokens = model.tokenization.getLineTokens(lineNumber);\n        const isFirstLine = lineNumber === range.startLineNumber;\n        const isEndLine = lineNumber === range.endLineNumber;\n        let tokenIdx = isFirstLine ? lineTokens.findTokenIndexAtOffset(range.startColumn - 1) : 0;\n        while (tokenIdx < lineTokens.getCount()) {\n            if (isEndLine) {\n                const startOffset = lineTokens.getStartOffset(tokenIdx);\n                if (startOffset > range.endColumn - 1) {\n                    break;\n                }\n            }\n            const callbackResult = callback(lineTokens.getStandardTokenType(tokenIdx));\n            if (!callbackResult) {\n                return false;\n            }\n            tokenIdx++;\n        }\n    }\n    return true;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nclass PendingChanges {\n    constructor() {\n        this._hasPending = false;\n        this._inserts = [];\n        this._changes = [];\n        this._removes = [];\n    }\n    insert(x) {\n        this._hasPending = true;\n        this._inserts.push(x);\n    }\n    change(x) {\n        this._hasPending = true;\n        this._changes.push(x);\n    }\n    remove(x) {\n        this._hasPending = true;\n        this._removes.push(x);\n    }\n    mustCommit() {\n        return this._hasPending;\n    }\n    commit(linesLayout) {\n        if (!this._hasPending) {\n            return;\n        }\n        const inserts = this._inserts;\n        const changes = this._changes;\n        const removes = this._removes;\n        this._hasPending = false;\n        this._inserts = [];\n        this._changes = [];\n        this._removes = [];\n        linesLayout._commitPendingChanges(inserts, changes, removes);\n    }\n}\nexport class EditorWhitespace {\n    constructor(id, afterLineNumber, ordinal, height, minWidth) {\n        this.id = id;\n        this.afterLineNumber = afterLineNumber;\n        this.ordinal = ordinal;\n        this.height = height;\n        this.minWidth = minWidth;\n        this.prefixSum = 0;\n    }\n}\n/**\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\n *\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\n */\nexport class LinesLayout {\n    constructor(lineCount, lineHeight, paddingTop, paddingBottom) {\n        this._instanceId = strings.singleLetterHash(++LinesLayout.INSTANCE_COUNT);\n        this._pendingChanges = new PendingChanges();\n        this._lastWhitespaceId = 0;\n        this._arr = [];\n        this._prefixSumValidIndex = -1;\n        this._minWidth = -1; /* marker for not being computed */\n        this._lineCount = lineCount;\n        this._lineHeight = lineHeight;\n        this._paddingTop = paddingTop;\n        this._paddingBottom = paddingBottom;\n    }\n    /**\n     * Find the insertion index for a new value inside a sorted array of values.\n     * If the value is already present in the sorted array, the insertion index will be after the already existing value.\n     */\n    static findInsertionIndex(arr, afterLineNumber, ordinal) {\n        let low = 0;\n        let high = arr.length;\n        while (low < high) {\n            const mid = ((low + high) >>> 1);\n            if (afterLineNumber === arr[mid].afterLineNumber) {\n                if (ordinal < arr[mid].ordinal) {\n                    high = mid;\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            else if (afterLineNumber < arr[mid].afterLineNumber) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    /**\n     * Change the height of a line in pixels.\n     */\n    setLineHeight(lineHeight) {\n        this._checkPendingChanges();\n        this._lineHeight = lineHeight;\n    }\n    /**\n     * Changes the padding used to calculate vertical offsets.\n     */\n    setPadding(paddingTop, paddingBottom) {\n        this._paddingTop = paddingTop;\n        this._paddingBottom = paddingBottom;\n    }\n    /**\n     * Set the number of lines.\n     *\n     * @param lineCount New number of lines.\n     */\n    onFlushed(lineCount) {\n        this._checkPendingChanges();\n        this._lineCount = lineCount;\n    }\n    changeWhitespace(callback) {\n        let hadAChange = false;\n        try {\n            const accessor = {\n                insertWhitespace: (afterLineNumber, ordinal, heightInPx, minWidth) => {\n                    hadAChange = true;\n                    afterLineNumber = afterLineNumber | 0;\n                    ordinal = ordinal | 0;\n                    heightInPx = heightInPx | 0;\n                    minWidth = minWidth | 0;\n                    const id = this._instanceId + (++this._lastWhitespaceId);\n                    this._pendingChanges.insert(new EditorWhitespace(id, afterLineNumber, ordinal, heightInPx, minWidth));\n                    return id;\n                },\n                changeOneWhitespace: (id, newAfterLineNumber, newHeight) => {\n                    hadAChange = true;\n                    newAfterLineNumber = newAfterLineNumber | 0;\n                    newHeight = newHeight | 0;\n                    this._pendingChanges.change({ id, newAfterLineNumber, newHeight });\n                },\n                removeWhitespace: (id) => {\n                    hadAChange = true;\n                    this._pendingChanges.remove({ id });\n                }\n            };\n            callback(accessor);\n        }\n        finally {\n            this._pendingChanges.commit(this);\n        }\n        return hadAChange;\n    }\n    _commitPendingChanges(inserts, changes, removes) {\n        if (inserts.length > 0 || removes.length > 0) {\n            this._minWidth = -1; /* marker for not being computed */\n        }\n        if (inserts.length + changes.length + removes.length <= 1) {\n            // when only one thing happened, handle it \"delicately\"\n            for (const insert of inserts) {\n                this._insertWhitespace(insert);\n            }\n            for (const change of changes) {\n                this._changeOneWhitespace(change.id, change.newAfterLineNumber, change.newHeight);\n            }\n            for (const remove of removes) {\n                const index = this._findWhitespaceIndex(remove.id);\n                if (index === -1) {\n                    continue;\n                }\n                this._removeWhitespace(index);\n            }\n            return;\n        }\n        // simply rebuild the entire datastructure\n        const toRemove = new Set();\n        for (const remove of removes) {\n            toRemove.add(remove.id);\n        }\n        const toChange = new Map();\n        for (const change of changes) {\n            toChange.set(change.id, change);\n        }\n        const applyRemoveAndChange = (whitespaces) => {\n            const result = [];\n            for (const whitespace of whitespaces) {\n                if (toRemove.has(whitespace.id)) {\n                    continue;\n                }\n                if (toChange.has(whitespace.id)) {\n                    const change = toChange.get(whitespace.id);\n                    whitespace.afterLineNumber = change.newAfterLineNumber;\n                    whitespace.height = change.newHeight;\n                }\n                result.push(whitespace);\n            }\n            return result;\n        };\n        const result = applyRemoveAndChange(this._arr).concat(applyRemoveAndChange(inserts));\n        result.sort((a, b) => {\n            if (a.afterLineNumber === b.afterLineNumber) {\n                return a.ordinal - b.ordinal;\n            }\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n        this._arr = result;\n        this._prefixSumValidIndex = -1;\n    }\n    _checkPendingChanges() {\n        if (this._pendingChanges.mustCommit()) {\n            this._pendingChanges.commit(this);\n        }\n    }\n    _insertWhitespace(whitespace) {\n        const insertIndex = LinesLayout.findInsertionIndex(this._arr, whitespace.afterLineNumber, whitespace.ordinal);\n        this._arr.splice(insertIndex, 0, whitespace);\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, insertIndex - 1);\n    }\n    _findWhitespaceIndex(id) {\n        const arr = this._arr;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            if (arr[i].id === id) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    _changeOneWhitespace(id, newAfterLineNumber, newHeight) {\n        const index = this._findWhitespaceIndex(id);\n        if (index === -1) {\n            return;\n        }\n        if (this._arr[index].height !== newHeight) {\n            this._arr[index].height = newHeight;\n            this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, index - 1);\n        }\n        if (this._arr[index].afterLineNumber !== newAfterLineNumber) {\n            // `afterLineNumber` changed for this whitespace\n            // Record old whitespace\n            const whitespace = this._arr[index];\n            // Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace\n            this._removeWhitespace(index);\n            whitespace.afterLineNumber = newAfterLineNumber;\n            // And add it again\n            this._insertWhitespace(whitespace);\n        }\n    }\n    _removeWhitespace(removeIndex) {\n        this._arr.splice(removeIndex, 1);\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, removeIndex - 1);\n    }\n    /**\n     * Notify the layouter that lines have been deleted (a continuous zone of lines).\n     *\n     * @param fromLineNumber The line number at which the deletion started, inclusive\n     * @param toLineNumber The line number at which the deletion ended, inclusive\n     */\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._checkPendingChanges();\n        fromLineNumber = fromLineNumber | 0;\n        toLineNumber = toLineNumber | 0;\n        this._lineCount -= (toLineNumber - fromLineNumber + 1);\n        for (let i = 0, len = this._arr.length; i < len; i++) {\n            const afterLineNumber = this._arr[i].afterLineNumber;\n            if (fromLineNumber <= afterLineNumber && afterLineNumber <= toLineNumber) {\n                // The line this whitespace was after has been deleted\n                //  => move whitespace to before first deleted line\n                this._arr[i].afterLineNumber = fromLineNumber - 1;\n            }\n            else if (afterLineNumber > toLineNumber) {\n                // The line this whitespace was after has been moved up\n                //  => move whitespace up\n                this._arr[i].afterLineNumber -= (toLineNumber - fromLineNumber + 1);\n            }\n        }\n    }\n    /**\n     * Notify the layouter that lines have been inserted (a continuous zone of lines).\n     *\n     * @param fromLineNumber The line number at which the insertion started, inclusive\n     * @param toLineNumber The line number at which the insertion ended, inclusive.\n     */\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._checkPendingChanges();\n        fromLineNumber = fromLineNumber | 0;\n        toLineNumber = toLineNumber | 0;\n        this._lineCount += (toLineNumber - fromLineNumber + 1);\n        for (let i = 0, len = this._arr.length; i < len; i++) {\n            const afterLineNumber = this._arr[i].afterLineNumber;\n            if (fromLineNumber <= afterLineNumber) {\n                this._arr[i].afterLineNumber += (toLineNumber - fromLineNumber + 1);\n            }\n        }\n    }\n    /**\n     * Get the sum of all the whitespaces.\n     */\n    getWhitespacesTotalHeight() {\n        this._checkPendingChanges();\n        if (this._arr.length === 0) {\n            return 0;\n        }\n        return this.getWhitespacesAccumulatedHeight(this._arr.length - 1);\n    }\n    /**\n     * Return the sum of the heights of the whitespaces at [0..index].\n     * This includes the whitespace at `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.\n     */\n    getWhitespacesAccumulatedHeight(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        let startIndex = Math.max(0, this._prefixSumValidIndex + 1);\n        if (startIndex === 0) {\n            this._arr[0].prefixSum = this._arr[0].height;\n            startIndex++;\n        }\n        for (let i = startIndex; i <= index; i++) {\n            this._arr[i].prefixSum = this._arr[i - 1].prefixSum + this._arr[i].height;\n        }\n        this._prefixSumValidIndex = Math.max(this._prefixSumValidIndex, index);\n        return this._arr[index].prefixSum;\n    }\n    /**\n     * Get the sum of heights for all objects.\n     *\n     * @return The sum of heights for all objects.\n     */\n    getLinesTotalHeight() {\n        this._checkPendingChanges();\n        const linesHeight = this._lineHeight * this._lineCount;\n        const whitespacesHeight = this.getWhitespacesTotalHeight();\n        return linesHeight + whitespacesHeight + this._paddingTop + this._paddingBottom;\n    }\n    /**\n     * Returns the accumulated height of whitespaces before the given line number.\n     *\n     * @param lineNumber The line number\n     */\n    getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        const lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n        if (lastWhitespaceBeforeLineNumber === -1) {\n            return 0;\n        }\n        return this.getWhitespacesAccumulatedHeight(lastWhitespaceBeforeLineNumber);\n    }\n    _findLastWhitespaceBeforeLineNumber(lineNumber) {\n        lineNumber = lineNumber | 0;\n        // Find the whitespace before line number\n        const arr = this._arr;\n        let low = 0;\n        let high = arr.length - 1;\n        while (low <= high) {\n            const delta = (high - low) | 0;\n            const halfDelta = (delta / 2) | 0;\n            const mid = (low + halfDelta) | 0;\n            if (arr[mid].afterLineNumber < lineNumber) {\n                if (mid + 1 >= arr.length || arr[mid + 1].afterLineNumber >= lineNumber) {\n                    return mid;\n                }\n                else {\n                    low = (mid + 1) | 0;\n                }\n            }\n            else {\n                high = (mid - 1) | 0;\n            }\n        }\n        return -1;\n    }\n    _findFirstWhitespaceAfterLineNumber(lineNumber) {\n        lineNumber = lineNumber | 0;\n        const lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n        const firstWhitespaceAfterLineNumber = lastWhitespaceBeforeLineNumber + 1;\n        if (firstWhitespaceAfterLineNumber < this._arr.length) {\n            return firstWhitespaceAfterLineNumber;\n        }\n        return -1;\n    }\n    /**\n     * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.\n     * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.\n     */\n    getFirstWhitespaceIndexAfterLineNumber(lineNumber) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        return this._findFirstWhitespaceAfterLineNumber(lineNumber);\n    }\n    /**\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n     *\n     * @param lineNumber The line number\n     * @return The sum of heights for all objects above `lineNumber`.\n     */\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        let previousLinesHeight;\n        if (lineNumber > 1) {\n            previousLinesHeight = this._lineHeight * (lineNumber - 1);\n        }\n        else {\n            previousLinesHeight = 0;\n        }\n        const previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber - (includeViewZones ? 1 : 0));\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    /**\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n     *\n     * @param lineNumber The line number\n     * @return The sum of heights for all objects above `lineNumber`.\n     */\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        const previousLinesHeight = this._lineHeight * lineNumber;\n        const previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber + (includeViewZones ? 1 : 0));\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    /**\n     * The maximum min width for all whitespaces.\n     */\n    getWhitespaceMinWidth() {\n        this._checkPendingChanges();\n        if (this._minWidth === -1) {\n            let minWidth = 0;\n            for (let i = 0, len = this._arr.length; i < len; i++) {\n                minWidth = Math.max(minWidth, this._arr[i].minWidth);\n            }\n            this._minWidth = minWidth;\n        }\n        return this._minWidth;\n    }\n    /**\n     * Check if `verticalOffset` is below all lines.\n     */\n    isAfterLines(verticalOffset) {\n        this._checkPendingChanges();\n        const totalHeight = this.getLinesTotalHeight();\n        return verticalOffset > totalHeight;\n    }\n    isInTopPadding(verticalOffset) {\n        if (this._paddingTop === 0) {\n            return false;\n        }\n        this._checkPendingChanges();\n        return (verticalOffset < this._paddingTop);\n    }\n    isInBottomPadding(verticalOffset) {\n        if (this._paddingBottom === 0) {\n            return false;\n        }\n        this._checkPendingChanges();\n        const totalHeight = this.getLinesTotalHeight();\n        return (verticalOffset >= totalHeight - this._paddingBottom);\n    }\n    /**\n     * Find the first line number that is at or after vertical offset `verticalOffset`.\n     * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\n     * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\n     *\n     * @param verticalOffset The vertical offset to search at.\n     * @return The line number at or after vertical offset `verticalOffset`.\n     */\n    getLineNumberAtOrAfterVerticalOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        if (verticalOffset < 0) {\n            return 1;\n        }\n        const linesCount = this._lineCount | 0;\n        const lineHeight = this._lineHeight;\n        let minLineNumber = 1;\n        let maxLineNumber = linesCount;\n        while (minLineNumber < maxLineNumber) {\n            const midLineNumber = ((minLineNumber + maxLineNumber) / 2) | 0;\n            const midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber) | 0;\n            if (verticalOffset >= midLineNumberVerticalOffset + lineHeight) {\n                // vertical offset is after mid line number\n                minLineNumber = midLineNumber + 1;\n            }\n            else if (verticalOffset >= midLineNumberVerticalOffset) {\n                // Hit\n                return midLineNumber;\n            }\n            else {\n                // vertical offset is before mid line number, but mid line number could still be what we're searching for\n                maxLineNumber = midLineNumber;\n            }\n        }\n        if (minLineNumber > linesCount) {\n            return linesCount;\n        }\n        return minLineNumber;\n    }\n    /**\n     * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\n     *\n     * @param verticalOffset1 The beginning of the viewport.\n     * @param verticalOffset2 The end of the viewport.\n     * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\n     */\n    getLinesViewportData(verticalOffset1, verticalOffset2) {\n        this._checkPendingChanges();\n        verticalOffset1 = verticalOffset1 | 0;\n        verticalOffset2 = verticalOffset2 | 0;\n        const lineHeight = this._lineHeight;\n        // Find first line number\n        // We don't live in a perfect world, so the line number might start before or after verticalOffset1\n        const startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1) | 0;\n        const startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber) | 0;\n        let endLineNumber = this._lineCount | 0;\n        // Also keep track of what whitespace we've got\n        let whitespaceIndex = this.getFirstWhitespaceIndexAfterLineNumber(startLineNumber) | 0;\n        const whitespaceCount = this.getWhitespacesCount() | 0;\n        let currentWhitespaceHeight;\n        let currentWhitespaceAfterLineNumber;\n        if (whitespaceIndex === -1) {\n            whitespaceIndex = whitespaceCount;\n            currentWhitespaceAfterLineNumber = endLineNumber + 1;\n            currentWhitespaceHeight = 0;\n        }\n        else {\n            currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n            currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n        }\n        let currentVerticalOffset = startLineNumberVerticalOffset;\n        let currentLineRelativeOffset = currentVerticalOffset;\n        // IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\n        const STEP_SIZE = 500000;\n        let bigNumbersDelta = 0;\n        if (startLineNumberVerticalOffset >= STEP_SIZE) {\n            // Compute a delta that guarantees that lines are positioned at `lineHeight` increments\n            bigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\n            bigNumbersDelta = Math.floor(bigNumbersDelta / lineHeight) * lineHeight;\n            currentLineRelativeOffset -= bigNumbersDelta;\n        }\n        const linesOffsets = [];\n        const verticalCenter = verticalOffset1 + (verticalOffset2 - verticalOffset1) / 2;\n        let centeredLineNumber = -1;\n        // Figure out how far the lines go\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            if (centeredLineNumber === -1) {\n                const currentLineTop = currentVerticalOffset;\n                const currentLineBottom = currentVerticalOffset + lineHeight;\n                if ((currentLineTop <= verticalCenter && verticalCenter < currentLineBottom) || currentLineTop > verticalCenter) {\n                    centeredLineNumber = lineNumber;\n                }\n            }\n            // Count current line height in the vertical offsets\n            currentVerticalOffset += lineHeight;\n            linesOffsets[lineNumber - startLineNumber] = currentLineRelativeOffset;\n            // Next line starts immediately after this one\n            currentLineRelativeOffset += lineHeight;\n            while (currentWhitespaceAfterLineNumber === lineNumber) {\n                // Push down next line with the height of the current whitespace\n                currentLineRelativeOffset += currentWhitespaceHeight;\n                // Count current whitespace in the vertical offsets\n                currentVerticalOffset += currentWhitespaceHeight;\n                whitespaceIndex++;\n                if (whitespaceIndex >= whitespaceCount) {\n                    currentWhitespaceAfterLineNumber = endLineNumber + 1;\n                }\n                else {\n                    currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n                    currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n                }\n            }\n            if (currentVerticalOffset >= verticalOffset2) {\n                // We have covered the entire viewport area, time to stop\n                endLineNumber = lineNumber;\n                break;\n            }\n        }\n        if (centeredLineNumber === -1) {\n            centeredLineNumber = endLineNumber;\n        }\n        const endLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(endLineNumber) | 0;\n        let completelyVisibleStartLineNumber = startLineNumber;\n        let completelyVisibleEndLineNumber = endLineNumber;\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n            if (startLineNumberVerticalOffset < verticalOffset1) {\n                completelyVisibleStartLineNumber++;\n            }\n        }\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n            if (endLineNumberVerticalOffset + lineHeight > verticalOffset2) {\n                completelyVisibleEndLineNumber--;\n            }\n        }\n        return {\n            bigNumbersDelta: bigNumbersDelta,\n            startLineNumber: startLineNumber,\n            endLineNumber: endLineNumber,\n            relativeVerticalOffset: linesOffsets,\n            centeredLineNumber: centeredLineNumber,\n            completelyVisibleStartLineNumber: completelyVisibleStartLineNumber,\n            completelyVisibleEndLineNumber: completelyVisibleEndLineNumber,\n            lineHeight: this._lineHeight,\n        };\n    }\n    getVerticalOffsetForWhitespaceIndex(whitespaceIndex) {\n        this._checkPendingChanges();\n        whitespaceIndex = whitespaceIndex | 0;\n        const afterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\n        let previousLinesHeight;\n        if (afterLineNumber >= 1) {\n            previousLinesHeight = this._lineHeight * afterLineNumber;\n        }\n        else {\n            previousLinesHeight = 0;\n        }\n        let previousWhitespacesHeight;\n        if (whitespaceIndex > 0) {\n            previousWhitespacesHeight = this.getWhitespacesAccumulatedHeight(whitespaceIndex - 1);\n        }\n        else {\n            previousWhitespacesHeight = 0;\n        }\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        let minWhitespaceIndex = 0;\n        let maxWhitespaceIndex = this.getWhitespacesCount() - 1;\n        if (maxWhitespaceIndex < 0) {\n            return -1;\n        }\n        // Special case: nothing to be found\n        const maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex);\n        const maxWhitespaceHeight = this.getHeightForWhitespaceIndex(maxWhitespaceIndex);\n        if (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\n            return -1;\n        }\n        while (minWhitespaceIndex < maxWhitespaceIndex) {\n            const midWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\n            const midWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex);\n            const midWhitespaceHeight = this.getHeightForWhitespaceIndex(midWhitespaceIndex);\n            if (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\n                // vertical offset is after whitespace\n                minWhitespaceIndex = midWhitespaceIndex + 1;\n            }\n            else if (verticalOffset >= midWhitespaceVerticalOffset) {\n                // Hit\n                return midWhitespaceIndex;\n            }\n            else {\n                // vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\n                maxWhitespaceIndex = midWhitespaceIndex;\n            }\n        }\n        return minWhitespaceIndex;\n    }\n    /**\n     * Get exactly the whitespace that is layouted at `verticalOffset`.\n     *\n     * @param verticalOffset The vertical offset.\n     * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\n     */\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        const candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);\n        if (candidateIndex < 0) {\n            return null;\n        }\n        if (candidateIndex >= this.getWhitespacesCount()) {\n            return null;\n        }\n        const candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex);\n        if (candidateTop > verticalOffset) {\n            return null;\n        }\n        const candidateHeight = this.getHeightForWhitespaceIndex(candidateIndex);\n        const candidateId = this.getIdForWhitespaceIndex(candidateIndex);\n        const candidateAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(candidateIndex);\n        return {\n            id: candidateId,\n            afterLineNumber: candidateAfterLineNumber,\n            verticalOffset: candidateTop,\n            height: candidateHeight\n        };\n    }\n    /**\n     * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\n     *\n     * @param verticalOffset1 The beginning of the viewport.\n     * @param verticalOffset2 The end of the viewport.\n     * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\n     */\n    getWhitespaceViewportData(verticalOffset1, verticalOffset2) {\n        this._checkPendingChanges();\n        verticalOffset1 = verticalOffset1 | 0;\n        verticalOffset2 = verticalOffset2 | 0;\n        const startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1);\n        const endIndex = this.getWhitespacesCount() - 1;\n        if (startIndex < 0) {\n            return [];\n        }\n        const result = [];\n        for (let i = startIndex; i <= endIndex; i++) {\n            const top = this.getVerticalOffsetForWhitespaceIndex(i);\n            const height = this.getHeightForWhitespaceIndex(i);\n            if (top >= verticalOffset2) {\n                break;\n            }\n            result.push({\n                id: this.getIdForWhitespaceIndex(i),\n                afterLineNumber: this.getAfterLineNumberForWhitespaceIndex(i),\n                verticalOffset: top,\n                height: height\n            });\n        }\n        return result;\n    }\n    /**\n     * Get all whitespaces.\n     */\n    getWhitespaces() {\n        this._checkPendingChanges();\n        return this._arr.slice(0);\n    }\n    /**\n     * The number of whitespaces.\n     */\n    getWhitespacesCount() {\n        this._checkPendingChanges();\n        return this._arr.length;\n    }\n    /**\n     * Get the `id` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `id` of whitespace at `index`.\n     */\n    getIdForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].id;\n    }\n    /**\n     * Get the `afterLineNumber` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `afterLineNumber` of whitespace at `index`.\n     */\n    getAfterLineNumberForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].afterLineNumber;\n    }\n    /**\n     * Get the `height` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `height` of whitespace at `index`.\n     */\n    getHeightForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].height;\n    }\n}\nLinesLayout.INSTANCE_COUNT = 0;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModelEventDispatcher.js';\nconst SMOOTH_SCROLLING_TIME = 125;\nclass EditorScrollDimensions {\n    constructor(width, contentWidth, height, contentHeight) {\n        width = width | 0;\n        contentWidth = contentWidth | 0;\n        height = height | 0;\n        contentHeight = contentHeight | 0;\n        if (width < 0) {\n            width = 0;\n        }\n        if (contentWidth < 0) {\n            contentWidth = 0;\n        }\n        if (height < 0) {\n            height = 0;\n        }\n        if (contentHeight < 0) {\n            contentHeight = 0;\n        }\n        this.width = width;\n        this.contentWidth = contentWidth;\n        this.scrollWidth = Math.max(width, contentWidth);\n        this.height = height;\n        this.contentHeight = contentHeight;\n        this.scrollHeight = Math.max(height, contentHeight);\n    }\n    equals(other) {\n        return (this.width === other.width\n            && this.contentWidth === other.contentWidth\n            && this.height === other.height\n            && this.contentHeight === other.contentHeight);\n    }\n}\nclass EditorScrollable extends Disposable {\n    constructor(smoothScrollDuration, scheduleAtNextAnimationFrame) {\n        super();\n        this._onDidContentSizeChange = this._register(new Emitter());\n        this.onDidContentSizeChange = this._onDidContentSizeChange.event;\n        this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n        this._scrollable = this._register(new Scrollable({\n            forceIntegerValues: true,\n            smoothScrollDuration,\n            scheduleAtNextAnimationFrame\n        }));\n        this.onDidScroll = this._scrollable.onScroll;\n    }\n    getScrollable() {\n        return this._scrollable;\n    }\n    setSmoothScrollDuration(smoothScrollDuration) {\n        this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    getScrollDimensions() {\n        return this._dimensions;\n    }\n    setScrollDimensions(dimensions) {\n        if (this._dimensions.equals(dimensions)) {\n            return;\n        }\n        const oldDimensions = this._dimensions;\n        this._dimensions = dimensions;\n        this._scrollable.setScrollDimensions({\n            width: dimensions.width,\n            scrollWidth: dimensions.scrollWidth,\n            height: dimensions.height,\n            scrollHeight: dimensions.scrollHeight\n        }, true);\n        const contentWidthChanged = (oldDimensions.contentWidth !== dimensions.contentWidth);\n        const contentHeightChanged = (oldDimensions.contentHeight !== dimensions.contentHeight);\n        if (contentWidthChanged || contentHeightChanged) {\n            this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\n        }\n    }\n    getFutureScrollPosition() {\n        return this._scrollable.getFutureScrollPosition();\n    }\n    getCurrentScrollPosition() {\n        return this._scrollable.getCurrentScrollPosition();\n    }\n    setScrollPositionNow(update) {\n        this._scrollable.setScrollPositionNow(update);\n    }\n    setScrollPositionSmooth(update) {\n        this._scrollable.setScrollPositionSmooth(update);\n    }\n    hasPendingScrollAnimation() {\n        return this._scrollable.hasPendingScrollAnimation();\n    }\n}\nexport class ViewLayout extends Disposable {\n    constructor(configuration, lineCount, scheduleAtNextAnimationFrame) {\n        super();\n        this._configuration = configuration;\n        const options = this._configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        const padding = options.get(84 /* EditorOption.padding */);\n        this._linesLayout = new LinesLayout(lineCount, options.get(67 /* EditorOption.lineHeight */), padding.top, padding.bottom);\n        this._maxLineWidth = 0;\n        this._overlayWidgetsMinWidth = 0;\n        this._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n        this._configureSmoothScrollDuration();\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\n        this.onDidScroll = this._scrollable.onDidScroll;\n        this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\n        this._updateHeight();\n    }\n    dispose() {\n        super.dispose();\n    }\n    getScrollable() {\n        return this._scrollable.getScrollable();\n    }\n    onHeightMaybeChanged() {\n        this._updateHeight();\n    }\n    _configureSmoothScrollDuration() {\n        this._scrollable.setSmoothScrollDuration(this._configuration.options.get(114 /* EditorOption.smoothScrolling */) ? SMOOTH_SCROLLING_TIME : 0);\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._configuration.options;\n        if (e.hasChanged(67 /* EditorOption.lineHeight */)) {\n            this._linesLayout.setLineHeight(options.get(67 /* EditorOption.lineHeight */));\n        }\n        if (e.hasChanged(84 /* EditorOption.padding */)) {\n            const padding = options.get(84 /* EditorOption.padding */);\n            this._linesLayout.setPadding(padding.top, padding.bottom);\n        }\n        if (e.hasChanged(145 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n            const width = layoutInfo.contentWidth;\n            const height = layoutInfo.height;\n            const scrollDimensions = this._scrollable.getScrollDimensions();\n            const contentWidth = scrollDimensions.contentWidth;\n            this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n        }\n        else {\n            this._updateHeight();\n        }\n        if (e.hasChanged(114 /* EditorOption.smoothScrolling */)) {\n            this._configureSmoothScrollDuration();\n        }\n    }\n    onFlushed(lineCount) {\n        this._linesLayout.onFlushed(lineCount);\n    }\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n    }\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n    }\n    // ---- end view event handlers\n    _getHorizontalScrollbarHeight(width, scrollWidth) {\n        const options = this._configuration.options;\n        const scrollbar = options.get(103 /* EditorOption.scrollbar */);\n        if (scrollbar.horizontal === 2 /* ScrollbarVisibility.Hidden */) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        if (width >= scrollWidth) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        return scrollbar.horizontalScrollbarSize;\n    }\n    _getContentHeight(width, height, contentWidth) {\n        const options = this._configuration.options;\n        let result = this._linesLayout.getLinesTotalHeight();\n        if (options.get(105 /* EditorOption.scrollBeyondLastLine */)) {\n            result += Math.max(0, height - options.get(67 /* EditorOption.lineHeight */) - options.get(84 /* EditorOption.padding */).bottom);\n        }\n        else if (!options.get(103 /* EditorOption.scrollbar */).ignoreHorizontalScrollbarInContentHeight) {\n            result += this._getHorizontalScrollbarHeight(width, contentWidth);\n        }\n        return result;\n    }\n    _updateHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const width = scrollDimensions.width;\n        const height = scrollDimensions.height;\n        const contentWidth = scrollDimensions.contentWidth;\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n    }\n    // ---- Layouting logic\n    getCurrentViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    getFutureViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    _computeContentWidth() {\n        const options = this._configuration.options;\n        const maxLineWidth = this._maxLineWidth;\n        const wrappingInfo = options.get(146 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        if (wrappingInfo.isViewportWrapping) {\n            const minimap = options.get(73 /* EditorOption.minimap */);\n            if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n                // This is a case where viewport wrapping is on, but the line extends above the viewport\n                if (minimap.enabled && minimap.side === 'right') {\n                    // We need to accomodate the scrollbar width\n                    return maxLineWidth + layoutInfo.verticalScrollbarWidth;\n                }\n            }\n            return maxLineWidth;\n        }\n        else {\n            const extraHorizontalSpace = options.get(104 /* EditorOption.scrollBeyondLastColumn */) * fontInfo.typicalHalfwidthCharacterWidth;\n            const whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n            return Math.max(maxLineWidth + extraHorizontalSpace + layoutInfo.verticalScrollbarWidth, whitespaceMinWidth, this._overlayWidgetsMinWidth);\n        }\n    }\n    setMaxLineWidth(maxLineWidth) {\n        this._maxLineWidth = maxLineWidth;\n        this._updateContentWidth();\n    }\n    setOverlayWidgetsMinWidth(maxMinWidth) {\n        this._overlayWidgetsMinWidth = maxMinWidth;\n        this._updateContentWidth();\n    }\n    _updateContentWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(), scrollDimensions.height, scrollDimensions.contentHeight));\n        // The height might depend on the fact that there is a horizontal scrollbar or not\n        this._updateHeight();\n    }\n    // ---- view state\n    saveState() {\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        const scrollTop = currentScrollPosition.scrollTop;\n        const firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n        const whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n        return {\n            scrollTop: scrollTop,\n            scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n            scrollLeft: currentScrollPosition.scrollLeft\n        };\n    }\n    // ----\n    changeWhitespace(callback) {\n        const hadAChange = this._linesLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this.onHeightMaybeChanged();\n        }\n        return hadAChange;\n    }\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber, includeViewZones);\n    }\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones);\n    }\n    isAfterLines(verticalOffset) {\n        return this._linesLayout.isAfterLines(verticalOffset);\n    }\n    isInTopPadding(verticalOffset) {\n        return this._linesLayout.isInTopPadding(verticalOffset);\n    }\n    isInBottomPadding(verticalOffset) {\n        return this._linesLayout.isInBottomPadding(verticalOffset);\n    }\n    getLineNumberAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n    }\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n    }\n    getLinesViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getLinesViewportDataAtScrollTop(scrollTop) {\n        // do some minimal validations on scrollTop\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n            scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n        }\n        if (scrollTop < 0) {\n            scrollTop = 0;\n        }\n        return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n    }\n    getWhitespaceViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getWhitespaces() {\n        return this._linesLayout.getWhitespaces();\n    }\n    // ----\n    getContentWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentWidth;\n    }\n    getScrollWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollWidth;\n    }\n    getContentHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentHeight;\n    }\n    getScrollHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollHeight;\n    }\n    getCurrentScrollLeft() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollLeft;\n    }\n    getCurrentScrollTop() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollTop;\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    setScrollPosition(position, type) {\n        if (type === 1 /* ScrollType.Immediate */) {\n            this._scrollable.setScrollPositionNow(position);\n        }\n        else {\n            this._scrollable.setScrollPositionSmooth(position);\n        }\n    }\n    hasPendingScrollAnimation() {\n        return this._scrollable.hasPendingScrollAnimation();\n    }\n    deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        this._scrollable.setScrollPositionNow({\n            scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n            scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n        });\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { Position } from '../core/position.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { SingleLineInlineDecoration, ViewLineData } from '../viewModel.js';\nexport function createModelLineProjection(lineBreakData, isVisible) {\n    if (lineBreakData === null) {\n        // No mapping needed\n        if (isVisible) {\n            return IdentityModelLineProjection.INSTANCE;\n        }\n        return HiddenModelLineProjection.INSTANCE;\n    }\n    else {\n        return new ModelLineProjection(lineBreakData, isVisible);\n    }\n}\n/**\n * This projection is used to\n * * wrap model lines\n * * inject text\n */\nclass ModelLineProjection {\n    constructor(lineBreakData, isVisible) {\n        this._projectionData = lineBreakData;\n        this._isVisible = isVisible;\n    }\n    isVisible() {\n        return this._isVisible;\n    }\n    setVisible(isVisible) {\n        this._isVisible = isVisible;\n        return this;\n    }\n    getProjectionData() {\n        return this._projectionData;\n    }\n    getViewLineCount() {\n        if (!this._isVisible) {\n            return 0;\n        }\n        return this._projectionData.getOutputLineCount();\n    }\n    getViewLineContent(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        const startOffsetInInputWithInjections = outputLineIndex > 0 ? this._projectionData.breakOffsets[outputLineIndex - 1] : 0;\n        const endOffsetInInputWithInjections = this._projectionData.breakOffsets[outputLineIndex];\n        let r;\n        if (this._projectionData.injectionOffsets !== null) {\n            const injectedTexts = this._projectionData.injectionOffsets.map((offset, idx) => new LineInjectedText(0, 0, offset + 1, this._projectionData.injectionOptions[idx], 0));\n            const lineWithInjections = LineInjectedText.applyInjectedText(model.getLineContent(modelLineNumber), injectedTexts);\n            r = lineWithInjections.substring(startOffsetInInputWithInjections, endOffsetInInputWithInjections);\n        }\n        else {\n            r = model.getValueInRange({\n                startLineNumber: modelLineNumber,\n                startColumn: startOffsetInInputWithInjections + 1,\n                endLineNumber: modelLineNumber,\n                endColumn: endOffsetInInputWithInjections + 1\n            });\n        }\n        if (outputLineIndex > 0) {\n            r = spaces(this._projectionData.wrappedTextIndentLength) + r;\n        }\n        return r;\n    }\n    getViewLineLength(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getLineLength(outputLineIndex);\n    }\n    getViewLineMinColumn(_model, _modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n    }\n    getViewLineMaxColumn(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getMaxOutputOffset(outputLineIndex) + 1;\n    }\n    /**\n     * Try using {@link getViewLinesData} instead.\n    */\n    getViewLineData(model, modelLineNumber, outputLineIndex) {\n        const arr = new Array();\n        this.getViewLinesData(model, modelLineNumber, outputLineIndex, 1, 0, [true], arr);\n        return arr[0];\n    }\n    getViewLinesData(model, modelLineNumber, outputLineIdx, lineCount, globalStartIndex, needed, result) {\n        this._assertVisible();\n        const lineBreakData = this._projectionData;\n        const injectionOffsets = lineBreakData.injectionOffsets;\n        const injectionOptions = lineBreakData.injectionOptions;\n        let inlineDecorationsPerOutputLine = null;\n        if (injectionOffsets) {\n            inlineDecorationsPerOutputLine = [];\n            let totalInjectedTextLengthBefore = 0;\n            let currentInjectedOffset = 0;\n            for (let outputLineIndex = 0; outputLineIndex < lineBreakData.getOutputLineCount(); outputLineIndex++) {\n                const inlineDecorations = new Array();\n                inlineDecorationsPerOutputLine[outputLineIndex] = inlineDecorations;\n                const lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n                const lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n                while (currentInjectedOffset < injectionOffsets.length) {\n                    const length = injectionOptions[currentInjectedOffset].content.length;\n                    const injectedTextStartOffsetInInputWithInjections = injectionOffsets[currentInjectedOffset] + totalInjectedTextLengthBefore;\n                    const injectedTextEndOffsetInInputWithInjections = injectedTextStartOffsetInInputWithInjections + length;\n                    if (injectedTextStartOffsetInInputWithInjections > lineEndOffsetInInputWithInjections) {\n                        // Injected text only starts in later wrapped lines.\n                        break;\n                    }\n                    if (lineStartOffsetInInputWithInjections < injectedTextEndOffsetInInputWithInjections) {\n                        // Injected text ends after or in this line (but also starts in or before this line).\n                        const options = injectionOptions[currentInjectedOffset];\n                        if (options.inlineClassName) {\n                            const offset = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n                            const start = offset + Math.max(injectedTextStartOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, 0);\n                            const end = offset + Math.min(injectedTextEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections);\n                            if (start !== end) {\n                                inlineDecorations.push(new SingleLineInlineDecoration(start, end, options.inlineClassName, options.inlineClassNameAffectsLetterSpacing));\n                            }\n                        }\n                    }\n                    if (injectedTextEndOffsetInInputWithInjections <= lineEndOffsetInInputWithInjections) {\n                        totalInjectedTextLengthBefore += length;\n                        currentInjectedOffset++;\n                    }\n                    else {\n                        // injected text breaks into next line, process it again\n                        break;\n                    }\n                }\n            }\n        }\n        let lineWithInjections;\n        if (injectionOffsets) {\n            lineWithInjections = model.tokenization.getLineTokens(modelLineNumber).withInserted(injectionOffsets.map((offset, idx) => ({\n                offset,\n                text: injectionOptions[idx].content,\n                tokenMetadata: LineTokens.defaultTokenMetadata\n            })));\n        }\n        else {\n            lineWithInjections = model.tokenization.getLineTokens(modelLineNumber);\n        }\n        for (let outputLineIndex = outputLineIdx; outputLineIndex < outputLineIdx + lineCount; outputLineIndex++) {\n            const globalIndex = globalStartIndex + outputLineIndex - outputLineIdx;\n            if (!needed[globalIndex]) {\n                result[globalIndex] = null;\n                continue;\n            }\n            result[globalIndex] = this._getViewLineData(lineWithInjections, inlineDecorationsPerOutputLine ? inlineDecorationsPerOutputLine[outputLineIndex] : null, outputLineIndex);\n        }\n    }\n    _getViewLineData(lineWithInjections, inlineDecorations, outputLineIndex) {\n        this._assertVisible();\n        const lineBreakData = this._projectionData;\n        const deltaStartIndex = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n        const lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n        const lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n        const tokens = lineWithInjections.sliceAndInflate(lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections, deltaStartIndex);\n        let lineContent = tokens.getLineContent();\n        if (outputLineIndex > 0) {\n            lineContent = spaces(lineBreakData.wrappedTextIndentLength) + lineContent;\n        }\n        const minColumn = this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n        const maxColumn = lineContent.length + 1;\n        const continuesWithWrappedLine = (outputLineIndex + 1 < this.getViewLineCount());\n        const startVisibleColumn = (outputLineIndex === 0 ? 0 : lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1]);\n        return new ViewLineData(lineContent, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens, inlineDecorations);\n    }\n    getModelColumnOfViewPosition(outputLineIndex, outputColumn) {\n        this._assertVisible();\n        return this._projectionData.translateToInputOffset(outputLineIndex, outputColumn - 1) + 1;\n    }\n    getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity = 2 /* PositionAffinity.None */) {\n        this._assertVisible();\n        const r = this._projectionData.translateToOutputPosition(inputColumn - 1, affinity);\n        return r.toPosition(deltaLineNumber);\n    }\n    getViewLineNumberOfModelPosition(deltaLineNumber, inputColumn) {\n        this._assertVisible();\n        const r = this._projectionData.translateToOutputPosition(inputColumn - 1);\n        return deltaLineNumber + r.outputLineIndex;\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        const baseViewLineNumber = outputPosition.lineNumber - outputLineIndex;\n        const normalizedOutputPosition = this._projectionData.normalizeOutputPosition(outputLineIndex, outputPosition.column - 1, affinity);\n        const result = normalizedOutputPosition.toPosition(baseViewLineNumber);\n        return result;\n    }\n    getInjectedTextAt(outputLineIndex, outputColumn) {\n        return this._projectionData.getInjectedText(outputLineIndex, outputColumn - 1);\n    }\n    _assertVisible() {\n        if (!this._isVisible) {\n            throw new Error('Not supported');\n        }\n    }\n}\n/**\n * This projection does not change the model line.\n*/\nclass IdentityModelLineProjection {\n    constructor() { }\n    isVisible() {\n        return true;\n    }\n    setVisible(isVisible) {\n        if (isVisible) {\n            return this;\n        }\n        return HiddenModelLineProjection.INSTANCE;\n    }\n    getProjectionData() {\n        return null;\n    }\n    getViewLineCount() {\n        return 1;\n    }\n    getViewLineContent(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineContent(modelLineNumber);\n    }\n    getViewLineLength(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineLength(modelLineNumber);\n    }\n    getViewLineMinColumn(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineMinColumn(modelLineNumber);\n    }\n    getViewLineMaxColumn(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineMaxColumn(modelLineNumber);\n    }\n    getViewLineData(model, modelLineNumber, _outputLineIndex) {\n        const lineTokens = model.tokenization.getLineTokens(modelLineNumber);\n        const lineContent = lineTokens.getLineContent();\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate(), null);\n    }\n    getViewLinesData(model, modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, globalStartIndex, needed, result) {\n        if (!needed[globalStartIndex]) {\n            result[globalStartIndex] = null;\n            return;\n        }\n        result[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\n    }\n    getModelColumnOfViewPosition(_outputLineIndex, outputColumn) {\n        return outputColumn;\n    }\n    getViewPositionOfModelPosition(deltaLineNumber, inputColumn) {\n        return new Position(deltaLineNumber, inputColumn);\n    }\n    getViewLineNumberOfModelPosition(deltaLineNumber, _inputColumn) {\n        return deltaLineNumber;\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        return outputPosition;\n    }\n    getInjectedTextAt(_outputLineIndex, _outputColumn) {\n        return null;\n    }\n}\nIdentityModelLineProjection.INSTANCE = new IdentityModelLineProjection();\n/**\n * This projection hides the model line.\n */\nclass HiddenModelLineProjection {\n    constructor() { }\n    isVisible() {\n        return false;\n    }\n    setVisible(isVisible) {\n        if (!isVisible) {\n            return this;\n        }\n        return IdentityModelLineProjection.INSTANCE;\n    }\n    getProjectionData() {\n        return null;\n    }\n    getViewLineCount() {\n        return 0;\n    }\n    getViewLineContent(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineLength(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineMinColumn(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineMaxColumn(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineData(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLinesData(_model, _modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, _globalStartIndex, _needed, _result) {\n        throw new Error('Not supported');\n    }\n    getModelColumnOfViewPosition(_outputLineIndex, _outputColumn) {\n        throw new Error('Not supported');\n    }\n    getViewPositionOfModelPosition(_deltaLineNumber, _inputColumn) {\n        throw new Error('Not supported');\n    }\n    getViewLineNumberOfModelPosition(_deltaLineNumber, _inputColumn) {\n        throw new Error('Not supported');\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        throw new Error('Not supported');\n    }\n    getInjectedTextAt(_outputLineIndex, _outputColumn) {\n        throw new Error('Not supported');\n    }\n}\nHiddenModelLineProjection.INSTANCE = new HiddenModelLineProjection();\nconst _spaces = [''];\nfunction spaces(count) {\n    if (count >= _spaces.length) {\n        for (let i = 1; i <= count; i++) {\n            _spaces[i] = _makeSpaces(i);\n        }\n    }\n    return _spaces[count];\n}\nfunction _makeSpaces(count) {\n    return new Array(count + 1).join(' ');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { IndentGuide, IndentGuideHorizontalLine } from '../textModelGuides.js';\nimport { ModelDecorationOptions } from '../model/textModel.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { createModelLineProjection } from './modelLineProjection.js';\nimport { ConstantTimePrefixSumComputer } from '../model/prefixSumComputer.js';\nimport { ViewLineData } from '../viewModel.js';\nexport class ViewModelLinesFromProjectedModel {\n    constructor(editorId, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, tabSize, wrappingStrategy, wrappingColumn, wrappingIndent, wordBreak) {\n        this._editorId = editorId;\n        this.model = model;\n        this._validModelVersionId = -1;\n        this._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\n        this._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\n        this.fontInfo = fontInfo;\n        this.tabSize = tabSize;\n        this.wrappingStrategy = wrappingStrategy;\n        this.wrappingColumn = wrappingColumn;\n        this.wrappingIndent = wrappingIndent;\n        this.wordBreak = wordBreak;\n        this._constructLines(/*resetHiddenAreas*/ true, null);\n    }\n    dispose() {\n        this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n    }\n    createCoordinatesConverter() {\n        return new CoordinatesConverter(this);\n    }\n    _constructLines(resetHiddenAreas, previousLineBreaks) {\n        this.modelLineProjections = [];\n        if (resetHiddenAreas) {\n            this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n        }\n        const linesContent = this.model.getLinesContent();\n        const injectedTextDecorations = this.model.getInjectedTextDecorations(this._editorId);\n        const lineCount = linesContent.length;\n        const lineBreaksComputer = this.createLineBreaksComputer();\n        const injectedTextQueue = new arrays.ArrayQueue(LineInjectedText.fromDecorations(injectedTextDecorations));\n        for (let i = 0; i < lineCount; i++) {\n            const lineInjectedText = injectedTextQueue.takeWhile(t => t.lineNumber === i + 1);\n            lineBreaksComputer.addRequest(linesContent[i], lineInjectedText, previousLineBreaks ? previousLineBreaks[i] : null);\n        }\n        const linesBreaks = lineBreaksComputer.finalize();\n        const values = [];\n        const hiddenAreas = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)).sort(Range.compareRangesUsingStarts);\n        let hiddenAreaStart = 1, hiddenAreaEnd = 0;\n        let hiddenAreaIdx = -1;\n        let nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n        for (let i = 0; i < lineCount; i++) {\n            const lineNumber = i + 1;\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n                hiddenAreaIdx++;\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n            }\n            const isInHiddenArea = (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd);\n            const line = createModelLineProjection(linesBreaks[i], !isInHiddenArea);\n            values[i] = line.getViewLineCount();\n            this.modelLineProjections[i] = line;\n        }\n        this._validModelVersionId = this.model.getVersionId();\n        this.projectedModelLineLineCounts = new ConstantTimePrefixSumComputer(values);\n    }\n    getHiddenAreas() {\n        return this.hiddenAreasDecorationIds.map((decId) => this.model.getDecorationRange(decId));\n    }\n    setHiddenAreas(_ranges) {\n        const validatedRanges = _ranges.map(r => this.model.validateRange(r));\n        const newRanges = normalizeLineRanges(validatedRanges);\n        // TODO@Martin: Please stop calling this method on each model change!\n        // This checks if there really was a change\n        const oldRanges = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)).sort(Range.compareRangesUsingStarts);\n        if (newRanges.length === oldRanges.length) {\n            let hasDifference = false;\n            for (let i = 0; i < newRanges.length; i++) {\n                if (!newRanges[i].equalsRange(oldRanges[i])) {\n                    hasDifference = true;\n                    break;\n                }\n            }\n            if (!hasDifference) {\n                return false;\n            }\n        }\n        const newDecorations = newRanges.map((r) => ({\n            range: r,\n            options: ModelDecorationOptions.EMPTY,\n        }));\n        this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, newDecorations);\n        const hiddenAreas = newRanges;\n        let hiddenAreaStart = 1, hiddenAreaEnd = 0;\n        let hiddenAreaIdx = -1;\n        let nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n        let hasVisibleLine = false;\n        for (let i = 0; i < this.modelLineProjections.length; i++) {\n            const lineNumber = i + 1;\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n                hiddenAreaIdx++;\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n            }\n            let lineChanged = false;\n            if (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\n                // Line should be hidden\n                if (this.modelLineProjections[i].isVisible()) {\n                    this.modelLineProjections[i] = this.modelLineProjections[i].setVisible(false);\n                    lineChanged = true;\n                }\n            }\n            else {\n                hasVisibleLine = true;\n                // Line should be visible\n                if (!this.modelLineProjections[i].isVisible()) {\n                    this.modelLineProjections[i] = this.modelLineProjections[i].setVisible(true);\n                    lineChanged = true;\n                }\n            }\n            if (lineChanged) {\n                const newOutputLineCount = this.modelLineProjections[i].getViewLineCount();\n                this.projectedModelLineLineCounts.setValue(i, newOutputLineCount);\n            }\n        }\n        if (!hasVisibleLine) {\n            // Cannot have everything be hidden => reveal everything!\n            this.setHiddenAreas([]);\n        }\n        return true;\n    }\n    modelPositionIsVisible(modelLineNumber, _modelColumn) {\n        if (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n            // invalid arguments\n            return false;\n        }\n        return this.modelLineProjections[modelLineNumber - 1].isVisible();\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        if (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n            // invalid arguments\n            return 1;\n        }\n        return this.modelLineProjections[modelLineNumber - 1].getViewLineCount();\n    }\n    setTabSize(newTabSize) {\n        if (this.tabSize === newTabSize) {\n            return false;\n        }\n        this.tabSize = newTabSize;\n        this._constructLines(/*resetHiddenAreas*/ false, null);\n        return true;\n    }\n    setWrappingSettings(fontInfo, wrappingStrategy, wrappingColumn, wrappingIndent, wordBreak) {\n        const equalFontInfo = this.fontInfo.equals(fontInfo);\n        const equalWrappingStrategy = (this.wrappingStrategy === wrappingStrategy);\n        const equalWrappingColumn = (this.wrappingColumn === wrappingColumn);\n        const equalWrappingIndent = (this.wrappingIndent === wrappingIndent);\n        const equalWordBreak = (this.wordBreak === wordBreak);\n        if (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent && equalWordBreak) {\n            return false;\n        }\n        const onlyWrappingColumnChanged = (equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent && equalWordBreak);\n        this.fontInfo = fontInfo;\n        this.wrappingStrategy = wrappingStrategy;\n        this.wrappingColumn = wrappingColumn;\n        this.wrappingIndent = wrappingIndent;\n        this.wordBreak = wordBreak;\n        let previousLineBreaks = null;\n        if (onlyWrappingColumnChanged) {\n            previousLineBreaks = [];\n            for (let i = 0, len = this.modelLineProjections.length; i < len; i++) {\n                previousLineBreaks[i] = this.modelLineProjections[i].getProjectionData();\n            }\n        }\n        this._constructLines(/*resetHiddenAreas*/ false, previousLineBreaks);\n        return true;\n    }\n    createLineBreaksComputer() {\n        const lineBreaksComputerFactory = (this.wrappingStrategy === 'advanced'\n            ? this._domLineBreaksComputerFactory\n            : this._monospaceLineBreaksComputerFactory);\n        return lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent, this.wordBreak);\n    }\n    onModelFlushed() {\n        this._constructLines(/*resetHiddenAreas*/ true, null);\n    }\n    onModelLinesDeleted(versionId, fromLineNumber, toLineNumber) {\n        if (!versionId || versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return null;\n        }\n        const outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n        const outputToLineNumber = this.projectedModelLineLineCounts.getPrefixSum(toLineNumber);\n        this.modelLineProjections.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n        this.projectedModelLineLineCounts.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n        return new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\n    }\n    onModelLinesInserted(versionId, fromLineNumber, _toLineNumber, lineBreaks) {\n        if (!versionId || versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return null;\n        }\n        // cannot use this.getHiddenAreas() because those decorations have already seen the effect of this model change\n        const isInHiddenArea = (fromLineNumber > 2 && !this.modelLineProjections[fromLineNumber - 2].isVisible());\n        const outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n        let totalOutputLineCount = 0;\n        const insertLines = [];\n        const insertPrefixSumValues = [];\n        for (let i = 0, len = lineBreaks.length; i < len; i++) {\n            const line = createModelLineProjection(lineBreaks[i], !isInHiddenArea);\n            insertLines.push(line);\n            const outputLineCount = line.getViewLineCount();\n            totalOutputLineCount += outputLineCount;\n            insertPrefixSumValues[i] = outputLineCount;\n        }\n        // TODO@Alex: use arrays.arrayInsert\n        this.modelLineProjections =\n            this.modelLineProjections.slice(0, fromLineNumber - 1)\n                .concat(insertLines)\n                .concat(this.modelLineProjections.slice(fromLineNumber - 1));\n        this.projectedModelLineLineCounts.insertValues(fromLineNumber - 1, insertPrefixSumValues);\n        return new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\n    }\n    onModelLineChanged(versionId, lineNumber, lineBreakData) {\n        if (versionId !== null && versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return [false, null, null, null];\n        }\n        const lineIndex = lineNumber - 1;\n        const oldOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n        const isVisible = this.modelLineProjections[lineIndex].isVisible();\n        const line = createModelLineProjection(lineBreakData, isVisible);\n        this.modelLineProjections[lineIndex] = line;\n        const newOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n        let lineMappingChanged = false;\n        let changeFrom = 0;\n        let changeTo = -1;\n        let insertFrom = 0;\n        let insertTo = -1;\n        let deleteFrom = 0;\n        let deleteTo = -1;\n        if (oldOutputLineCount > newOutputLineCount) {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + newOutputLineCount - 1;\n            deleteFrom = changeTo + 1;\n            deleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\n            lineMappingChanged = true;\n        }\n        else if (oldOutputLineCount < newOutputLineCount) {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + oldOutputLineCount - 1;\n            insertFrom = changeTo + 1;\n            insertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\n            lineMappingChanged = true;\n        }\n        else {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + newOutputLineCount - 1;\n        }\n        this.projectedModelLineLineCounts.setValue(lineIndex, newOutputLineCount);\n        const viewLinesChangedEvent = (changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo - changeFrom + 1) : null);\n        const viewLinesInsertedEvent = (insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null);\n        const viewLinesDeletedEvent = (deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null);\n        return [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\n    }\n    acceptVersionId(versionId) {\n        this._validModelVersionId = versionId;\n        if (this.modelLineProjections.length === 1 && !this.modelLineProjections[0].isVisible()) {\n            // At least one line must be visible => reset hidden areas\n            this.setHiddenAreas([]);\n        }\n    }\n    getViewLineCount() {\n        return this.projectedModelLineLineCounts.getTotalSum();\n    }\n    _toValidViewLineNumber(viewLineNumber) {\n        if (viewLineNumber < 1) {\n            return 1;\n        }\n        const viewLineCount = this.getViewLineCount();\n        if (viewLineNumber > viewLineCount) {\n            return viewLineCount;\n        }\n        return viewLineNumber | 0;\n    }\n    getActiveIndentGuide(viewLineNumber, minLineNumber, maxLineNumber) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        minLineNumber = this._toValidViewLineNumber(minLineNumber);\n        maxLineNumber = this._toValidViewLineNumber(maxLineNumber);\n        const modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\n        const modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\n        const modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\n        const result = this.model.guides.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\n        const viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\n        const viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\n        return {\n            startLineNumber: viewStartPosition.lineNumber,\n            endLineNumber: viewEndPosition.lineNumber,\n            indent: result.indent\n        };\n    }\n    // #region ViewLineInfo\n    getViewLineInfo(viewLineNumber) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        const r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n        const lineIndex = r.index;\n        const remainder = r.remainder;\n        return new ViewLineInfo(lineIndex + 1, remainder);\n    }\n    getMinColumnOfViewLine(viewLineInfo) {\n        return this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMinColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n    }\n    getMaxColumnOfViewLine(viewLineInfo) {\n        return this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMaxColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n    }\n    getModelStartPositionOfViewLine(viewLineInfo) {\n        const line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n        const minViewColumn = line.getViewLineMinColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n        const column = line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx, minViewColumn);\n        return new Position(viewLineInfo.modelLineNumber, column);\n    }\n    getModelEndPositionOfViewLine(viewLineInfo) {\n        const line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n        const maxViewColumn = line.getViewLineMaxColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n        const column = line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx, maxViewColumn);\n        return new Position(viewLineInfo.modelLineNumber, column);\n    }\n    getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber) {\n        const startViewLine = this.getViewLineInfo(viewStartLineNumber);\n        const endViewLine = this.getViewLineInfo(viewEndLineNumber);\n        const result = new Array();\n        let lastVisibleModelPos = this.getModelStartPositionOfViewLine(startViewLine);\n        let viewLines = new Array();\n        for (let curModelLine = startViewLine.modelLineNumber; curModelLine <= endViewLine.modelLineNumber; curModelLine++) {\n            const line = this.modelLineProjections[curModelLine - 1];\n            if (line.isVisible()) {\n                const startOffset = curModelLine === startViewLine.modelLineNumber\n                    ? startViewLine.modelLineWrappedLineIdx\n                    : 0;\n                const endOffset = curModelLine === endViewLine.modelLineNumber\n                    ? endViewLine.modelLineWrappedLineIdx + 1\n                    : line.getViewLineCount();\n                for (let i = startOffset; i < endOffset; i++) {\n                    viewLines.push(new ViewLineInfo(curModelLine, i));\n                }\n            }\n            if (!line.isVisible() && lastVisibleModelPos) {\n                const lastVisibleModelPos2 = new Position(curModelLine - 1, this.model.getLineMaxColumn(curModelLine - 1) + 1);\n                const modelRange = Range.fromPositions(lastVisibleModelPos, lastVisibleModelPos2);\n                result.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n                viewLines = [];\n                lastVisibleModelPos = null;\n            }\n            else if (line.isVisible() && !lastVisibleModelPos) {\n                lastVisibleModelPos = new Position(curModelLine, 1);\n            }\n        }\n        if (lastVisibleModelPos) {\n            const modelRange = Range.fromPositions(lastVisibleModelPos, this.getModelEndPositionOfViewLine(endViewLine));\n            result.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n        }\n        return result;\n    }\n    // #endregion\n    getViewLinesBracketGuides(viewStartLineNumber, viewEndLineNumber, activeViewPosition, options) {\n        const modelActivePosition = activeViewPosition ? this.convertViewPositionToModelPosition(activeViewPosition.lineNumber, activeViewPosition.column) : null;\n        const resultPerViewLine = [];\n        for (const group of this.getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber)) {\n            const modelRangeStartLineNumber = group.modelRange.startLineNumber;\n            const bracketGuidesPerModelLine = this.model.guides.getLinesBracketGuides(modelRangeStartLineNumber, group.modelRange.endLineNumber, modelActivePosition, options);\n            for (const viewLineInfo of group.viewLines) {\n                const bracketGuides = bracketGuidesPerModelLine[viewLineInfo.modelLineNumber - modelRangeStartLineNumber];\n                // visibleColumns stay as they are (this is a bug and needs to be fixed, but it is not a regression)\n                // model-columns must be converted to view-model columns.\n                const result = bracketGuides.map(g => {\n                    if (g.forWrappedLinesAfterColumn !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesAfterColumn);\n                        if (p.lineNumber >= viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    if (g.forWrappedLinesBeforeOrAtColumn !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesBeforeOrAtColumn);\n                        if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    if (!g.horizontalLine) {\n                        return g;\n                    }\n                    let column = -1;\n                    if (g.column !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.column);\n                        if (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n                            column = p.column;\n                        }\n                        else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                            column = this.getMinColumnOfViewLine(viewLineInfo);\n                        }\n                        else if (p.lineNumber > viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    const viewPosition = this.convertModelPositionToViewPosition(viewLineInfo.modelLineNumber, g.horizontalLine.endColumn);\n                    const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.horizontalLine.endColumn);\n                    if (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n                        return new IndentGuide(g.visibleColumn, column, g.className, new IndentGuideHorizontalLine(g.horizontalLine.top, viewPosition.column), -1, -1);\n                    }\n                    else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                        return undefined;\n                    }\n                    else {\n                        if (g.visibleColumn !== -1) {\n                            // Don't repeat horizontal lines that use visibleColumn for unrelated lines.\n                            return undefined;\n                        }\n                        return new IndentGuide(g.visibleColumn, column, g.className, new IndentGuideHorizontalLine(g.horizontalLine.top, this.getMaxColumnOfViewLine(viewLineInfo)), -1, -1);\n                    }\n                });\n                resultPerViewLine.push(result.filter((r) => !!r));\n            }\n        }\n        return resultPerViewLine;\n    }\n    getViewLinesIndentGuides(viewStartLineNumber, viewEndLineNumber) {\n        // TODO: Use the same code as in `getViewLinesBracketGuides`.\n        // Future TODO: Merge with `getViewLinesBracketGuides`.\n        // However, this requires more refactoring of indent guides.\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n        const modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\n        const modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\n        let result = [];\n        const resultRepeatCount = [];\n        const resultRepeatOption = [];\n        const modelStartLineIndex = modelStart.lineNumber - 1;\n        const modelEndLineIndex = modelEnd.lineNumber - 1;\n        let reqStart = null;\n        for (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (line.isVisible()) {\n                const viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n                const viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\n                const count = viewLineEndIndex - viewLineStartIndex + 1;\n                let option = 0 /* IndentGuideRepeatOption.BlockNone */;\n                if (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\n                    // wrapped lines should block indent guides\n                    option = (viewLineStartIndex === 0 ? 1 /* IndentGuideRepeatOption.BlockSubsequent */ : 2 /* IndentGuideRepeatOption.BlockAll */);\n                }\n                resultRepeatCount.push(count);\n                resultRepeatOption.push(option);\n                // merge into previous request\n                if (reqStart === null) {\n                    reqStart = new Position(modelLineIndex + 1, 0);\n                }\n            }\n            else {\n                // hit invisible line => flush request\n                if (reqStart !== null) {\n                    result = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\n                    reqStart = null;\n                }\n            }\n        }\n        if (reqStart !== null) {\n            result = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\n            reqStart = null;\n        }\n        const viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n        const viewIndents = new Array(viewLineCount);\n        let currIndex = 0;\n        for (let i = 0, len = result.length; i < len; i++) {\n            let value = result[i];\n            const count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\n            const option = resultRepeatOption[i];\n            let blockAtIndex;\n            if (option === 2 /* IndentGuideRepeatOption.BlockAll */) {\n                blockAtIndex = 0;\n            }\n            else if (option === 1 /* IndentGuideRepeatOption.BlockSubsequent */) {\n                blockAtIndex = 1;\n            }\n            else {\n                blockAtIndex = count;\n            }\n            for (let j = 0; j < count; j++) {\n                if (j === blockAtIndex) {\n                    value = 0;\n                }\n                viewIndents[currIndex++] = value;\n            }\n        }\n        return viewIndents;\n    }\n    getViewLineContent(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineContent(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineLength(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineLength(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineMinColumn(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineMinColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineMaxColumn(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineMaxColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineData(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineData(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLinesData(viewStartLineNumber, viewEndLineNumber, needed) {\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n        const start = this.projectedModelLineLineCounts.getIndexOf(viewStartLineNumber - 1);\n        let viewLineNumber = viewStartLineNumber;\n        const startModelLineIndex = start.index;\n        const startRemainder = start.remainder;\n        const result = [];\n        for (let modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (!line.isVisible()) {\n                continue;\n            }\n            const fromViewLineIndex = (modelLineIndex === startModelLineIndex ? startRemainder : 0);\n            let remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\n            let lastLine = false;\n            if (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\n                lastLine = true;\n                remainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\n            }\n            line.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, remainingViewLineCount, viewLineNumber - viewStartLineNumber, needed, result);\n            viewLineNumber += remainingViewLineCount;\n            if (lastLine) {\n                break;\n            }\n        }\n        return result;\n    }\n    validateViewPosition(viewLineNumber, viewColumn, expectedModelPosition) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        const r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n        const lineIndex = r.index;\n        const remainder = r.remainder;\n        const line = this.modelLineProjections[lineIndex];\n        const minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n        const maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n        if (viewColumn < minColumn) {\n            viewColumn = minColumn;\n        }\n        if (viewColumn > maxColumn) {\n            viewColumn = maxColumn;\n        }\n        const computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\n        const computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\n        if (computedModelPosition.equals(expectedModelPosition)) {\n            return new Position(viewLineNumber, viewColumn);\n        }\n        return this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\n    }\n    validateViewRange(viewRange, expectedModelRange) {\n        const validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\n        const validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\n        return new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\n    }\n    convertViewPositionToModelPosition(viewLineNumber, viewColumn) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        const inputColumn = this.modelLineProjections[info.modelLineNumber - 1].getModelColumnOfViewPosition(info.modelLineWrappedLineIdx, viewColumn);\n        // console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\n        return this.model.validatePosition(new Position(info.modelLineNumber, inputColumn));\n    }\n    convertViewRangeToModelRange(viewRange) {\n        const start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\n        const end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    convertModelPositionToViewPosition(_modelLineNumber, _modelColumn, affinity = 2 /* PositionAffinity.None */, allowZeroLineNumber = false, belowHiddenRanges = false) {\n        const validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\n        const inputLineNumber = validPosition.lineNumber;\n        const inputColumn = validPosition.column;\n        let lineIndex = inputLineNumber - 1, lineIndexChanged = false;\n        if (belowHiddenRanges) {\n            while (lineIndex < this.modelLineProjections.length && !this.modelLineProjections[lineIndex].isVisible()) {\n                lineIndex++;\n                lineIndexChanged = true;\n            }\n        }\n        else {\n            while (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n                lineIndex--;\n                lineIndexChanged = true;\n            }\n        }\n        if (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            // Could not reach a real line\n            // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\n            // TODO@alexdima@hediet this isn't soo pretty\n            return new Position(allowZeroLineNumber ? 0 : 1, 1);\n        }\n        const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n        let r;\n        if (lineIndexChanged) {\n            if (belowHiddenRanges) {\n                r = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, 1, affinity);\n            }\n            else {\n                r = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1), affinity);\n            }\n        }\n        else {\n            r = this.modelLineProjections[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity);\n        }\n        // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\n        return r;\n    }\n    /**\n     * @param affinity The affinity in case of an empty range. Has no effect for non-empty ranges.\n    */\n    convertModelRangeToViewRange(modelRange, affinity = 0 /* PositionAffinity.Left */) {\n        if (modelRange.isEmpty()) {\n            const start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, affinity);\n            return Range.fromPositions(start);\n        }\n        else {\n            const start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, 1 /* PositionAffinity.Right */);\n            const end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn, 0 /* PositionAffinity.Left */);\n            return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n        }\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        let lineIndex = modelLineNumber - 1;\n        if (this.modelLineProjections[lineIndex].isVisible()) {\n            // this model line is visible\n            const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n            return this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, modelColumn);\n        }\n        // this model line is not visible\n        while (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            lineIndex--;\n        }\n        if (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            // Could not reach a real line\n            return 1;\n        }\n        const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n        return this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n    }\n    getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations) {\n        const modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\n        const modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\n        if (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\n            // most likely there are no hidden lines => fast path\n            // fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\n            return this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations);\n        }\n        let result = [];\n        const modelStartLineIndex = modelStart.lineNumber - 1;\n        const modelEndLineIndex = modelEnd.lineNumber - 1;\n        let reqStart = null;\n        for (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (line.isVisible()) {\n                // merge into previous request\n                if (reqStart === null) {\n                    reqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n                }\n            }\n            else {\n                // hit invisible line => flush request\n                if (reqStart !== null) {\n                    const maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\n                    result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation, onlyMinimapDecorations));\n                    reqStart = null;\n                }\n            }\n        }\n        if (reqStart !== null) {\n            result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, onlyMinimapDecorations));\n            reqStart = null;\n        }\n        result.sort((a, b) => {\n            const res = Range.compareRangesUsingStarts(a.range, b.range);\n            if (res === 0) {\n                if (a.id < b.id) {\n                    return -1;\n                }\n                if (a.id > b.id) {\n                    return 1;\n                }\n                return 0;\n            }\n            return res;\n        });\n        // Eliminate duplicate decorations that might have intersected our visible ranges multiple times\n        const finalResult = [];\n        let finalResultLen = 0;\n        let prevDecId = null;\n        for (const dec of result) {\n            const decId = dec.id;\n            if (prevDecId === decId) {\n                // skip\n                continue;\n            }\n            prevDecId = decId;\n            finalResult[finalResultLen++] = dec;\n        }\n        return finalResult;\n    }\n    getInjectedTextAt(position) {\n        const info = this.getViewLineInfo(position.lineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getInjectedTextAt(info.modelLineWrappedLineIdx, position.column);\n    }\n    normalizePosition(position, affinity) {\n        const info = this.getViewLineInfo(position.lineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].normalizePosition(info.modelLineWrappedLineIdx, position, affinity);\n    }\n    getLineIndentColumn(lineNumber) {\n        const info = this.getViewLineInfo(lineNumber);\n        if (info.modelLineWrappedLineIdx === 0) {\n            return this.model.getLineIndentColumn(info.modelLineNumber);\n        }\n        // wrapped lines have no indentation.\n        // We deliberately don't handle the case that indentation is wrapped\n        // to avoid two view lines reporting indentation for the very same model line.\n        return 0;\n    }\n}\n/**\n * Overlapping unsorted ranges:\n * [   )      [ )       [  )\n *    [    )      [       )\n * ->\n * Non overlapping sorted ranges:\n * [       )  [ ) [        )\n *\n * Note: This function only considers line information! Columns are ignored.\n*/\nfunction normalizeLineRanges(ranges) {\n    if (ranges.length === 0) {\n        return [];\n    }\n    const sortedRanges = ranges.slice();\n    sortedRanges.sort(Range.compareRangesUsingStarts);\n    const result = [];\n    let currentRangeStart = sortedRanges[0].startLineNumber;\n    let currentRangeEnd = sortedRanges[0].endLineNumber;\n    for (let i = 1, len = sortedRanges.length; i < len; i++) {\n        const range = sortedRanges[i];\n        if (range.startLineNumber > currentRangeEnd + 1) {\n            result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n            currentRangeStart = range.startLineNumber;\n            currentRangeEnd = range.endLineNumber;\n        }\n        else if (range.endLineNumber > currentRangeEnd) {\n            currentRangeEnd = range.endLineNumber;\n        }\n    }\n    result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n    return result;\n}\n/**\n * Represents a view line. Can be used to efficiently query more information about it.\n */\nclass ViewLineInfo {\n    constructor(modelLineNumber, modelLineWrappedLineIdx) {\n        this.modelLineNumber = modelLineNumber;\n        this.modelLineWrappedLineIdx = modelLineWrappedLineIdx;\n    }\n}\n/**\n * A list of view lines that have a contiguous span in the model.\n*/\nclass ViewLineInfoGroupedByModelRange {\n    constructor(modelRange, viewLines) {\n        this.modelRange = modelRange;\n        this.viewLines = viewLines;\n    }\n}\nclass CoordinatesConverter {\n    constructor(lines) {\n        this._lines = lines;\n    }\n    // View -> Model conversion and related methods\n    convertViewPositionToModelPosition(viewPosition) {\n        return this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\n    }\n    convertViewRangeToModelRange(viewRange) {\n        return this._lines.convertViewRangeToModelRange(viewRange);\n    }\n    validateViewPosition(viewPosition, expectedModelPosition) {\n        return this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\n    }\n    validateViewRange(viewRange, expectedModelRange) {\n        return this._lines.validateViewRange(viewRange, expectedModelRange);\n    }\n    // Model -> View conversion and related methods\n    convertModelPositionToViewPosition(modelPosition, affinity, allowZero, belowHiddenRanges) {\n        return this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column, affinity, allowZero, belowHiddenRanges);\n    }\n    convertModelRangeToViewRange(modelRange, affinity) {\n        return this._lines.convertModelRangeToViewRange(modelRange, affinity);\n    }\n    modelPositionIsVisible(modelPosition) {\n        return this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        return this._lines.getModelLineViewLineCount(modelLineNumber);\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        return this._lines.getViewLineNumberOfModelPosition(modelLineNumber, modelColumn);\n    }\n}\nexport class ViewModelLinesFromModelAsIs {\n    constructor(model) {\n        this.model = model;\n    }\n    dispose() {\n    }\n    createCoordinatesConverter() {\n        return new IdentityCoordinatesConverter(this);\n    }\n    getHiddenAreas() {\n        return [];\n    }\n    setHiddenAreas(_ranges) {\n        return false;\n    }\n    setTabSize(_newTabSize) {\n        return false;\n    }\n    setWrappingSettings(_fontInfo, _wrappingStrategy, _wrappingColumn, _wrappingIndent) {\n        return false;\n    }\n    createLineBreaksComputer() {\n        const result = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                result.push(null);\n            },\n            finalize: () => {\n                return result;\n            }\n        };\n    }\n    onModelFlushed() {\n    }\n    onModelLinesDeleted(_versionId, fromLineNumber, toLineNumber) {\n        return new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\n    }\n    onModelLinesInserted(_versionId, fromLineNumber, toLineNumber, lineBreaks) {\n        return new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\n    }\n    onModelLineChanged(_versionId, lineNumber, lineBreakData) {\n        return [false, new viewEvents.ViewLinesChangedEvent(lineNumber, 1), null, null];\n    }\n    acceptVersionId(_versionId) {\n    }\n    getViewLineCount() {\n        return this.model.getLineCount();\n    }\n    getActiveIndentGuide(viewLineNumber, _minLineNumber, _maxLineNumber) {\n        return {\n            startLineNumber: viewLineNumber,\n            endLineNumber: viewLineNumber,\n            indent: 0\n        };\n    }\n    getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition) {\n        return new Array(endLineNumber - startLineNumber + 1).fill([]);\n    }\n    getViewLinesIndentGuides(viewStartLineNumber, viewEndLineNumber) {\n        const viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n        const result = new Array(viewLineCount);\n        for (let i = 0; i < viewLineCount; i++) {\n            result[i] = 0;\n        }\n        return result;\n    }\n    getViewLineContent(viewLineNumber) {\n        return this.model.getLineContent(viewLineNumber);\n    }\n    getViewLineLength(viewLineNumber) {\n        return this.model.getLineLength(viewLineNumber);\n    }\n    getViewLineMinColumn(viewLineNumber) {\n        return this.model.getLineMinColumn(viewLineNumber);\n    }\n    getViewLineMaxColumn(viewLineNumber) {\n        return this.model.getLineMaxColumn(viewLineNumber);\n    }\n    getViewLineData(viewLineNumber) {\n        const lineTokens = this.model.tokenization.getLineTokens(viewLineNumber);\n        const lineContent = lineTokens.getLineContent();\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate(), null);\n    }\n    getViewLinesData(viewStartLineNumber, viewEndLineNumber, needed) {\n        const lineCount = this.model.getLineCount();\n        viewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\n        viewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\n        const result = [];\n        for (let lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\n            const idx = lineNumber - viewStartLineNumber;\n            result[idx] = needed[idx] ? this.getViewLineData(lineNumber) : null;\n        }\n        return result;\n    }\n    getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations) {\n        return this.model.getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations);\n    }\n    normalizePosition(position, affinity) {\n        return this.model.normalizePosition(position, affinity);\n    }\n    getLineIndentColumn(lineNumber) {\n        return this.model.getLineIndentColumn(lineNumber);\n    }\n    getInjectedTextAt(position) {\n        // Identity lines collection does not support injected text.\n        return null;\n    }\n}\nclass IdentityCoordinatesConverter {\n    constructor(lines) {\n        this._lines = lines;\n    }\n    _validPosition(pos) {\n        return this._lines.model.validatePosition(pos);\n    }\n    _validRange(range) {\n        return this._lines.model.validateRange(range);\n    }\n    // View -> Model conversion and related methods\n    convertViewPositionToModelPosition(viewPosition) {\n        return this._validPosition(viewPosition);\n    }\n    convertViewRangeToModelRange(viewRange) {\n        return this._validRange(viewRange);\n    }\n    validateViewPosition(_viewPosition, expectedModelPosition) {\n        return this._validPosition(expectedModelPosition);\n    }\n    validateViewRange(_viewRange, expectedModelRange) {\n        return this._validRange(expectedModelRange);\n    }\n    // Model -> View conversion and related methods\n    convertModelPositionToViewPosition(modelPosition) {\n        return this._validPosition(modelPosition);\n    }\n    convertModelRangeToViewRange(modelRange) {\n        return this._validRange(modelRange);\n    }\n    modelPositionIsVisible(modelPosition) {\n        const lineCount = this._lines.model.getLineCount();\n        if (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\n            // invalid arguments\n            return false;\n        }\n        return true;\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        return 1;\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        return modelLineNumber;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { GlyphMarginLane } from '../model.js';\nconst MAX_LANE = GlyphMarginLane.Right;\nexport class GlyphMarginLanesModel {\n    constructor(maxLine) {\n        this.persist = 0;\n        this._requiredLanes = 1; // always render at least one lane\n        this.lanes = new Uint8Array(Math.ceil(((maxLine + 1) * MAX_LANE) / 8));\n    }\n    reset(maxLine) {\n        const bytes = Math.ceil(((maxLine + 1) * MAX_LANE) / 8);\n        if (this.lanes.length < bytes) {\n            this.lanes = new Uint8Array(bytes);\n        }\n        else {\n            this.lanes.fill(0);\n        }\n        this._requiredLanes = 1;\n    }\n    get requiredLanes() {\n        return this._requiredLanes;\n    }\n    push(lane, range, persist) {\n        if (persist) {\n            this.persist |= (1 << (lane - 1));\n        }\n        for (let i = range.startLineNumber; i <= range.endLineNumber; i++) {\n            const bit = (MAX_LANE * i) + (lane - 1);\n            this.lanes[bit >>> 3] |= (1 << (bit % 8));\n            this._requiredLanes = Math.max(this._requiredLanes, this.countAtLine(i));\n        }\n    }\n    getLanesAtLine(lineNumber) {\n        const lanes = [];\n        let bit = MAX_LANE * lineNumber;\n        for (let i = 0; i < MAX_LANE; i++) {\n            if (this.persist & (1 << i) || this.lanes[bit >>> 3] & (1 << (bit % 8))) {\n                lanes.push(i + 1);\n            }\n            bit++;\n        }\n        return lanes.length ? lanes : [GlyphMarginLane.Center];\n    }\n    countAtLine(lineNumber) {\n        let bit = MAX_LANE * lineNumber;\n        let count = 0;\n        for (let i = 0; i < MAX_LANE; i++) {\n            if (this.persist & (1 << i) || this.lanes[bit >>> 3] & (1 << (bit % 8))) {\n                count++;\n            }\n            bit++;\n        }\n        return count;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayQueue } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { CursorsController } from '../cursor/cursor.js';\nimport { CursorConfiguration } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport * as textModelEvents from '../textModelEvents.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { tokenizeLineToHTML } from '../languages/textToHtmlTokenizer.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport { MinimapLinesRenderingData, OverviewRulerDecorationsGroup, ViewLineRenderingData } from '../viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { FocusChangedEvent, HiddenAreasChangedEvent, ModelContentChangedEvent, ModelDecorationsChangedEvent, ModelLanguageChangedEvent, ModelLanguageConfigurationChangedEvent, ModelOptionsChangedEvent, ModelTokensChangedEvent, ReadOnlyEditAttemptEvent, ScrollChangedEvent, ViewModelEventDispatcher, ViewZonesChangedEvent } from '../viewModelEventDispatcher.js';\nimport { ViewModelLinesFromModelAsIs, ViewModelLinesFromProjectedModel } from './viewModelLines.js';\nimport { GlyphMarginLanesModel } from './glyphLanesModel.js';\nconst USE_IDENTITY_LINES_COLLECTION = true;\nexport class ViewModel extends Disposable {\n    constructor(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame, languageConfigurationService, _themeService, _attachedView) {\n        super();\n        this.languageConfigurationService = languageConfigurationService;\n        this._themeService = _themeService;\n        this._attachedView = _attachedView;\n        this.hiddenAreasModel = new HiddenAreasModel();\n        this.previousHiddenAreas = [];\n        this._editorId = editorId;\n        this._configuration = configuration;\n        this.model = model;\n        this._eventDispatcher = new ViewModelEventDispatcher();\n        this.onEvent = this._eventDispatcher.onEvent;\n        this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n        this._updateConfigurationViewLineCount = this._register(new RunOnceScheduler(() => this._updateConfigurationViewLineCountNow(), 0));\n        this._hasFocus = false;\n        this._viewportStart = ViewportStart.create(this.model);\n        this.glyphLanes = new GlyphMarginLanesModel(0);\n        if (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\n            this._lines = new ViewModelLinesFromModelAsIs(this.model);\n        }\n        else {\n            const options = this._configuration.options;\n            const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n            const wrappingStrategy = options.get(139 /* EditorOption.wrappingStrategy */);\n            const wrappingInfo = options.get(146 /* EditorOption.wrappingInfo */);\n            const wrappingIndent = options.get(138 /* EditorOption.wrappingIndent */);\n            const wordBreak = options.get(129 /* EditorOption.wordBreak */);\n            this._lines = new ViewModelLinesFromProjectedModel(this._editorId, this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak);\n        }\n        this.coordinatesConverter = this._lines.createCoordinatesConverter();\n        this._cursor = this._register(new CursorsController(model, this, this.coordinatesConverter, this.cursorConfig));\n        this.viewLayout = this._register(new ViewLayout(this._configuration, this.getLineCount(), scheduleAtNextAnimationFrame));\n        this._register(this.viewLayout.onDidScroll((e) => {\n            if (e.scrollTopChanged) {\n                this._handleVisibleLinesChanged();\n            }\n            if (e.scrollTopChanged) {\n                this._viewportStart.invalidate();\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(e.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop, e.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop));\n        }));\n        this._register(this.viewLayout.onDidContentSizeChange((e) => {\n            this._eventDispatcher.emitOutgoingEvent(e);\n        }));\n        this._decorations = new ViewModelDecorations(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter);\n        this._registerModelEvents();\n        this._register(this._configuration.onDidChangeFast((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                this._onConfigurationChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n        }));\n        this._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n        }));\n        this._register(this._themeService.onDidColorThemeChange((theme) => {\n            this._invalidateDecorationsColorCache();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme));\n        }));\n        this._updateConfigurationViewLineCountNow();\n    }\n    dispose() {\n        // First remove listeners, as disposing the lines might end up sending\n        // model decoration changed events ... and we no longer care about them ...\n        super.dispose();\n        this._decorations.dispose();\n        this._lines.dispose();\n        this._viewportStart.dispose();\n        this._eventDispatcher.dispose();\n    }\n    createLineBreaksComputer() {\n        return this._lines.createLineBreaksComputer();\n    }\n    addViewEventHandler(eventHandler) {\n        this._eventDispatcher.addViewEventHandler(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        this._eventDispatcher.removeViewEventHandler(eventHandler);\n    }\n    _updateConfigurationViewLineCountNow() {\n        this._configuration.setViewLineCount(this._lines.getViewLineCount());\n    }\n    getModelVisibleRanges() {\n        const linesViewportData = this.viewLayout.getLinesViewportData();\n        const viewVisibleRange = new Range(linesViewportData.startLineNumber, this.getLineMinColumn(linesViewportData.startLineNumber), linesViewportData.endLineNumber, this.getLineMaxColumn(linesViewportData.endLineNumber));\n        const modelVisibleRanges = this._toModelVisibleRanges(viewVisibleRange);\n        return modelVisibleRanges;\n    }\n    visibleLinesStabilized() {\n        const modelVisibleRanges = this.getModelVisibleRanges();\n        this._attachedView.setVisibleLines(modelVisibleRanges, true);\n    }\n    _handleVisibleLinesChanged() {\n        const modelVisibleRanges = this.getModelVisibleRanges();\n        this._attachedView.setVisibleLines(modelVisibleRanges, false);\n    }\n    setHasFocus(hasFocus) {\n        this._hasFocus = hasFocus;\n        this._cursor.setHasFocus(hasFocus);\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n        this._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n    }\n    onCompositionStart() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n    }\n    onCompositionEnd() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n    }\n    _captureStableViewport() {\n        // We might need to restore the current start view range, so save it (if available)\n        // But only if the scroll position is not at the top of the file\n        if (this._viewportStart.isValid && this.viewLayout.getCurrentScrollTop() > 0) {\n            const previousViewportStartViewPosition = new Position(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber));\n            const previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n            return new StableViewport(previousViewportStartModelPosition, this._viewportStart.startLineDelta);\n        }\n        return new StableViewport(null, 0);\n    }\n    _onConfigurationChanged(eventsCollector, e) {\n        const stableViewport = this._captureStableViewport();\n        const options = this._configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingStrategy = options.get(139 /* EditorOption.wrappingStrategy */);\n        const wrappingInfo = options.get(146 /* EditorOption.wrappingInfo */);\n        const wrappingIndent = options.get(138 /* EditorOption.wrappingIndent */);\n        const wordBreak = options.get(129 /* EditorOption.wordBreak */);\n        if (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak)) {\n            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n            this._cursor.onLineMappingChanged(eventsCollector);\n            this._decorations.onLineMappingChanged();\n            this.viewLayout.onFlushed(this.getLineCount());\n            this._updateConfigurationViewLineCount.schedule();\n        }\n        if (e.hasChanged(91 /* EditorOption.readOnly */)) {\n            // Must read again all decorations due to readOnly filtering\n            this._decorations.reset();\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        }\n        if (e.hasChanged(98 /* EditorOption.renderValidationDecorations */)) {\n            this._decorations.reset();\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        }\n        eventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n        this.viewLayout.onConfigurationChanged(e);\n        stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n        if (CursorConfiguration.shouldRecreate(e)) {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n        }\n    }\n    _registerModelEvents() {\n        this._register(this.model.onDidChangeContentOrInjectedText((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                let hadOtherModelChange = false;\n                let hadModelLineChangeThatChangedLineMapping = false;\n                const changes = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes);\n                const versionId = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.versionId : null);\n                // Do a first pass to compute line mappings, and a second pass to actually interpret them\n                const lineBreaksComputer = this._lines.createLineBreaksComputer();\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            for (let lineIdx = 0; lineIdx < change.detail.length; lineIdx++) {\n                                const line = change.detail[lineIdx];\n                                let injectedText = change.injectedTexts[lineIdx];\n                                if (injectedText) {\n                                    injectedText = injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                                }\n                                lineBreaksComputer.addRequest(line, injectedText, null);\n                            }\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            let injectedText = null;\n                            if (change.injectedText) {\n                                injectedText = change.injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                            }\n                            lineBreaksComputer.addRequest(change.detail, injectedText, null);\n                            break;\n                        }\n                    }\n                }\n                const lineBreaks = lineBreaksComputer.finalize();\n                const lineBreakQueue = new ArrayQueue(lineBreaks);\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 1 /* textModelEvents.RawContentChangedType.Flush */: {\n                            this._lines.onModelFlushed();\n                            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                            this._decorations.reset();\n                            this.viewLayout.onFlushed(this.getLineCount());\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 3 /* textModelEvents.RawContentChangedType.LinesDeleted */: {\n                            const linesDeletedEvent = this._lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n                            if (linesDeletedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            const insertedLineBreaks = lineBreakQueue.takeCount(change.detail.length);\n                            const linesInsertedEvent = this._lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n                            if (linesInsertedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            const changedLineBreakData = lineBreakQueue.dequeue();\n                            const [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] = this._lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData);\n                            hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n                            if (linesChangedEvent) {\n                                eventsCollector.emitViewEvent(linesChangedEvent);\n                            }\n                            if (linesInsertedEvent) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            if (linesDeletedEvent) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            break;\n                        }\n                        case 5 /* textModelEvents.RawContentChangedType.EOLChanged */: {\n                            // Nothing to do. The new version will be accepted below\n                            break;\n                        }\n                    }\n                }\n                if (versionId !== null) {\n                    this._lines.acceptVersionId(versionId);\n                }\n                this.viewLayout.onHeightMaybeChanged();\n                if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                }\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            // Update the configuration and reset the centered view line\n            const viewportStartWasValid = this._viewportStart.isValid;\n            this._viewportStart.invalidate();\n            this._configuration.setModelLineCount(this.model.getLineCount());\n            this._updateConfigurationViewLineCountNow();\n            // Recover viewport\n            if (!this._hasFocus && this.model.getAttachedEditorCount() >= 2 && viewportStartWasValid) {\n                const modelRange = this.model._getTrackedRange(this._viewportStart.modelTrackedRange);\n                if (modelRange) {\n                    const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n                    const viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n                    this.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStart.startLineDelta }, 1 /* ScrollType.Immediate */);\n                }\n            }\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                if (e instanceof textModelEvents.InternalModelContentChangeEvent) {\n                    eventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent));\n                }\n                this._cursor.onModelContentChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            this._handleVisibleLinesChanged();\n        }));\n        this._register(this.model.onDidChangeTokens((e) => {\n            const viewRanges = [];\n            for (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n                const modelRange = e.ranges[j];\n                const viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n                const viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n                viewRanges[j] = {\n                    fromLineNumber: viewStartLineNumber,\n                    toLineNumber: viewEndLineNumber\n                };\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n            this._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguageConfiguration((e) => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguage((e) => {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeOptions((e) => {\n            // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n            if (this._lines.setTabSize(this.model.getOptions().tabSize)) {\n                try {\n                    const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                    eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                    this.viewLayout.onFlushed(this.getLineCount());\n                }\n                finally {\n                    this._eventDispatcher.endEmitViewEvents();\n                }\n                this._updateConfigurationViewLineCount.schedule();\n            }\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeDecorations((e) => {\n            this._decorations.onModelDecorationsChanged();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e));\n        }));\n    }\n    setHiddenAreas(ranges, source) {\n        var _a;\n        this.hiddenAreasModel.setHiddenAreas(source, ranges);\n        const mergedRanges = this.hiddenAreasModel.getMergedRanges();\n        if (mergedRanges === this.previousHiddenAreas) {\n            return;\n        }\n        this.previousHiddenAreas = mergedRanges;\n        const stableViewport = this._captureStableViewport();\n        let lineMappingChanged = false;\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            lineMappingChanged = this._lines.setHiddenAreas(mergedRanges);\n            if (lineMappingChanged) {\n                eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                this._cursor.onLineMappingChanged(eventsCollector);\n                this._decorations.onLineMappingChanged();\n                this.viewLayout.onFlushed(this.getLineCount());\n                this.viewLayout.onHeightMaybeChanged();\n            }\n            const firstModelLineInViewPort = (_a = stableViewport.viewportStartModelPosition) === null || _a === void 0 ? void 0 : _a.lineNumber;\n            const firstModelLineIsHidden = firstModelLineInViewPort && mergedRanges.some(range => range.startLineNumber <= firstModelLineInViewPort && firstModelLineInViewPort <= range.endLineNumber);\n            if (!firstModelLineIsHidden) {\n                stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n            }\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n        this._updateConfigurationViewLineCount.schedule();\n        if (lineMappingChanged) {\n            this._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent());\n        }\n    }\n    getVisibleRangesPlusViewportAboveBelow() {\n        const layoutInfo = this._configuration.options.get(145 /* EditorOption.layoutInfo */);\n        const lineHeight = this._configuration.options.get(67 /* EditorOption.lineHeight */);\n        const linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n        const endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n        return this._toModelVisibleRanges(new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber)));\n    }\n    getVisibleRanges() {\n        const visibleViewRange = this.getCompletelyVisibleViewRange();\n        return this._toModelVisibleRanges(visibleViewRange);\n    }\n    getHiddenAreas() {\n        return this._lines.getHiddenAreas();\n    }\n    _toModelVisibleRanges(visibleViewRange) {\n        const visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        const hiddenAreas = this._lines.getHiddenAreas();\n        if (hiddenAreas.length === 0) {\n            return [visibleRange];\n        }\n        const result = [];\n        let resultLen = 0;\n        let startLineNumber = visibleRange.startLineNumber;\n        let startColumn = visibleRange.startColumn;\n        const endLineNumber = visibleRange.endLineNumber;\n        const endColumn = visibleRange.endColumn;\n        for (let i = 0, len = hiddenAreas.length; i < len; i++) {\n            const hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n            const hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n            if (hiddenEndLineNumber < startLineNumber) {\n                continue;\n            }\n            if (hiddenStartLineNumber > endLineNumber) {\n                continue;\n            }\n            if (startLineNumber < hiddenStartLineNumber) {\n                result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n            }\n            startLineNumber = hiddenEndLineNumber + 1;\n            startColumn = 1;\n        }\n        if (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\n            result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return result;\n    }\n    getCompletelyVisibleViewRange() {\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    getCompletelyVisibleViewRangeAtScrollTop(scrollTop) {\n        const partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    saveState() {\n        const compatViewState = this.viewLayout.saveState();\n        const scrollTop = compatViewState.scrollTop;\n        const firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n        const firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n        const firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n        return {\n            scrollLeft: compatViewState.scrollLeft,\n            firstPosition: firstPosition,\n            firstPositionDeltaTop: firstPositionDeltaTop\n        };\n    }\n    reduceRestoreState(state) {\n        if (typeof state.firstPosition === 'undefined') {\n            // This is a view state serialized by an older version\n            return this._reduceRestoreStateCompatibility(state);\n        }\n        const modelPosition = this.model.validatePosition(state.firstPosition);\n        const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        const scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: scrollTop\n        };\n    }\n    _reduceRestoreStateCompatibility(state) {\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: state.scrollTopWithoutViewZones\n        };\n    }\n    getTabSize() {\n        return this.model.getOptions().tabSize;\n    }\n    getLineCount() {\n        return this._lines.getViewLineCount();\n    }\n    /**\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\n     */\n    setViewport(startLineNumber, endLineNumber, centeredLineNumber) {\n        this._viewportStart.update(this, startLineNumber);\n    }\n    getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n        return this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n    }\n    getLinesIndentGuides(startLineNumber, endLineNumber) {\n        return this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n    }\n    getBracketGuidesInRangeByLine(startLineNumber, endLineNumber, activePosition, options) {\n        return this._lines.getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options);\n    }\n    getLineContent(lineNumber) {\n        return this._lines.getViewLineContent(lineNumber);\n    }\n    getLineLength(lineNumber) {\n        return this._lines.getViewLineLength(lineNumber);\n    }\n    getLineMinColumn(lineNumber) {\n        return this._lines.getViewLineMinColumn(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        return this._lines.getViewLineMaxColumn(lineNumber);\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 1;\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 2;\n    }\n    getMinimapDecorationsInRange(range) {\n        return this._decorations.getMinimapDecorationsInRange(range);\n    }\n    getDecorationsInViewport(visibleRange) {\n        return this._decorations.getDecorationsViewportData(visibleRange).decorations;\n    }\n    getInjectedTextAt(viewPosition) {\n        return this._lines.getInjectedTextAt(viewPosition);\n    }\n    getViewportViewLineRenderingData(visibleRange, lineNumber) {\n        const allInlineDecorations = this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n        const inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    getViewLineRenderingData(lineNumber) {\n        const inlineDecorations = this._decorations.getInlineDecorationsOnLine(lineNumber);\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    _getViewLineRenderingData(lineNumber, inlineDecorations) {\n        const mightContainRTL = this.model.mightContainRTL();\n        const mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n        const tabSize = this.getTabSize();\n        const lineData = this._lines.getViewLineData(lineNumber);\n        if (lineData.inlineDecorations) {\n            inlineDecorations = [\n                ...inlineDecorations,\n                ...lineData.inlineDecorations.map(d => d.toInlineDecoration(lineNumber))\n            ];\n        }\n        return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\n    }\n    getViewLineData(lineNumber) {\n        return this._lines.getViewLineData(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        const result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n        return new MinimapLinesRenderingData(this.getTabSize(), result);\n    }\n    getAllOverviewRulerDecorations(theme) {\n        const decorations = this.model.getOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options));\n        const result = new OverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const decorationOptions = decoration.options;\n            const opts = decorationOptions.overviewRuler;\n            if (!opts) {\n                continue;\n            }\n            const lane = opts.position;\n            if (lane === 0) {\n                continue;\n            }\n            const color = opts.getColor(theme.value);\n            const viewStartLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n            const viewEndLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n            result.accept(color, decorationOptions.zIndex, viewStartLineNumber, viewEndLineNumber, lane);\n        }\n        return result.asArray;\n    }\n    _invalidateDecorationsColorCache() {\n        const decorations = this.model.getOverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const opts1 = decoration.options.overviewRuler;\n            opts1 === null || opts1 === void 0 ? void 0 : opts1.invalidateCachedColor();\n            const opts2 = decoration.options.minimap;\n            opts2 === null || opts2 === void 0 ? void 0 : opts2.invalidateCachedColor();\n        }\n    }\n    getValueInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueInRange(modelRange, eol);\n    }\n    getValueLengthInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueLengthInRange(modelRange, eol);\n    }\n    modifyPosition(position, offset) {\n        const modelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(position);\n        const resultModelPosition = this.model.modifyPosition(modelPosition, offset);\n        return this.coordinatesConverter.convertModelPositionToViewPosition(resultModelPosition);\n    }\n    deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\n        const modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n        if (this.model.getEOL().length === 2) {\n            // This model uses CRLF, so the delta must take that into account\n            if (deltaOffset < 0) {\n                deltaOffset -= lineFeedCnt;\n            }\n            else {\n                deltaOffset += lineFeedCnt;\n            }\n        }\n        const modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n        const resultOffset = modelAnchorOffset + deltaOffset;\n        return this.model.getPositionAt(resultOffset);\n    }\n    getPlainTextToCopy(modelRanges, emptySelectionClipboard, forceCRLF) {\n        const newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n        modelRanges = modelRanges.slice(0);\n        modelRanges.sort(Range.compareRangesUsingStarts);\n        let hasEmptyRange = false;\n        let hasNonEmptyRange = false;\n        for (const range of modelRanges) {\n            if (range.isEmpty()) {\n                hasEmptyRange = true;\n            }\n            else {\n                hasNonEmptyRange = true;\n            }\n        }\n        if (!hasNonEmptyRange) {\n            // all ranges are empty\n            if (!emptySelectionClipboard) {\n                return '';\n            }\n            const modelLineNumbers = modelRanges.map((r) => r.startLineNumber);\n            let result = '';\n            for (let i = 0; i < modelLineNumbers.length; i++) {\n                if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n                    continue;\n                }\n                result += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n            }\n            return result;\n        }\n        if (hasEmptyRange && emptySelectionClipboard) {\n            // mixed empty selections and non-empty selections\n            const result = [];\n            let prevModelLineNumber = 0;\n            for (const modelRange of modelRanges) {\n                const modelLineNumber = modelRange.startLineNumber;\n                if (modelRange.isEmpty()) {\n                    if (modelLineNumber !== prevModelLineNumber) {\n                        result.push(this.model.getLineContent(modelLineNumber));\n                    }\n                }\n                else {\n                    result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n                }\n                prevModelLineNumber = modelLineNumber;\n            }\n            return result.length === 1 ? result[0] : result;\n        }\n        const result = [];\n        for (const modelRange of modelRanges) {\n            if (!modelRange.isEmpty()) {\n                result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n            }\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n    getRichTextToCopy(modelRanges, emptySelectionClipboard) {\n        const languageId = this.model.getLanguageId();\n        if (languageId === PLAINTEXT_LANGUAGE_ID) {\n            return null;\n        }\n        if (modelRanges.length !== 1) {\n            // no multiple selection support at this time\n            return null;\n        }\n        let range = modelRanges[0];\n        if (range.isEmpty()) {\n            if (!emptySelectionClipboard) {\n                // nothing to copy\n                return null;\n            }\n            const lineNumber = range.startLineNumber;\n            range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n        }\n        const fontInfo = this._configuration.options.get(50 /* EditorOption.fontInfo */);\n        const colorMap = this._getColorMap();\n        const hasBadChars = (/[:;\\\\\\/<>]/.test(fontInfo.fontFamily));\n        const useDefaultFontFamily = (hasBadChars || fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily);\n        let fontFamily;\n        if (useDefaultFontFamily) {\n            fontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n        }\n        else {\n            fontFamily = fontInfo.fontFamily;\n            fontFamily = fontFamily.replace(/\"/g, '\\'');\n            const hasQuotesOrIsList = /[,']/.test(fontFamily);\n            if (!hasQuotesOrIsList) {\n                const needsQuotes = /[+ ]/.test(fontFamily);\n                if (needsQuotes) {\n                    fontFamily = `'${fontFamily}'`;\n                }\n            }\n            fontFamily = `${fontFamily}, ${EDITOR_FONT_DEFAULTS.fontFamily}`;\n        }\n        return {\n            mode: languageId,\n            html: (`<div style=\"`\n                + `color: ${colorMap[1 /* ColorId.DefaultForeground */]};`\n                + `background-color: ${colorMap[2 /* ColorId.DefaultBackground */]};`\n                + `font-family: ${fontFamily};`\n                + `font-weight: ${fontInfo.fontWeight};`\n                + `font-size: ${fontInfo.fontSize}px;`\n                + `line-height: ${fontInfo.lineHeight}px;`\n                + `white-space: pre;`\n                + `\">`\n                + this._getHTMLToCopy(range, colorMap)\n                + '</div>')\n        };\n    }\n    _getHTMLToCopy(modelRange, colorMap) {\n        const startLineNumber = modelRange.startLineNumber;\n        const startColumn = modelRange.startColumn;\n        const endLineNumber = modelRange.endLineNumber;\n        const endColumn = modelRange.endColumn;\n        const tabSize = this.getTabSize();\n        let result = '';\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineTokens = this.model.tokenization.getLineTokens(lineNumber);\n            const lineContent = lineTokens.getLineContent();\n            const startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n            const endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n            if (lineContent === '') {\n                result += '<br>';\n            }\n            else {\n                result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n            }\n        }\n        return result;\n    }\n    _getColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        const result = ['#000000'];\n        if (colorMap) {\n            for (let i = 1, len = colorMap.length; i < len; i++) {\n                result[i] = Color.Format.CSS.formatHex(colorMap[i]);\n            }\n        }\n        return result;\n    }\n    //#region cursor operations\n    getPrimaryCursorState() {\n        return this._cursor.getPrimaryCursorState();\n    }\n    getLastAddedCursorIndex() {\n        return this._cursor.getLastAddedCursorIndex();\n    }\n    getCursorStates() {\n        return this._cursor.getCursorStates();\n    }\n    setCursorStates(source, reason, states) {\n        return this._withViewEventsCollector(eventsCollector => this._cursor.setStates(eventsCollector, source, reason, states));\n    }\n    getCursorColumnSelectData() {\n        return this._cursor.getCursorColumnSelectData();\n    }\n    getCursorAutoClosedCharacters() {\n        return this._cursor.getAutoClosedCharacters();\n    }\n    setCursorColumnSelectData(columnSelectData) {\n        this._cursor.setCursorColumnSelectData(columnSelectData);\n    }\n    getPrevEditOperationType() {\n        return this._cursor.getPrevEditOperationType();\n    }\n    setPrevEditOperationType(type) {\n        this._cursor.setPrevEditOperationType(type);\n    }\n    getSelection() {\n        return this._cursor.getSelection();\n    }\n    getSelections() {\n        return this._cursor.getSelections();\n    }\n    getPosition() {\n        return this._cursor.getPrimaryCursorState().modelState.position;\n    }\n    setSelections(source, selections, reason = 0 /* CursorChangeReason.NotSet */) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.setSelections(eventsCollector, source, selections, reason));\n    }\n    saveCursorState() {\n        return this._cursor.saveState();\n    }\n    restoreCursorState(states) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.restoreState(eventsCollector, states));\n    }\n    _executeCursorEdit(callback) {\n        if (this._cursor.context.cursorConfig.readOnly) {\n            // we cannot edit when read only...\n            this._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n            return;\n        }\n        this._withViewEventsCollector(callback);\n    }\n    executeEdits(source, edits, cursorStateComputer) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer));\n    }\n    startComposition() {\n        this._executeCursorEdit(eventsCollector => this._cursor.startComposition(eventsCollector));\n    }\n    endComposition(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.endComposition(eventsCollector, source));\n    }\n    type(text, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.type(eventsCollector, text, source));\n    }\n    compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source));\n    }\n    paste(text, pasteOnNewLine, multicursorText, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source));\n    }\n    cut(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.cut(eventsCollector, source));\n    }\n    executeCommand(command, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommand(eventsCollector, command, source));\n    }\n    executeCommands(commands, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommands(eventsCollector, commands, source));\n    }\n    revealAllCursors(source, revealHorizontal, minimalReveal = false) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.revealAll(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */));\n    }\n    revealPrimaryCursor(source, revealHorizontal, minimalReveal = false) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.revealPrimary(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */));\n    }\n    revealTopMostCursor(source) {\n        const viewPosition = this._cursor.getTopMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealBottomMostCursor(source) {\n        const viewPosition = this._cursor.getBottomMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealRange(source, revealHorizontal, viewRange, verticalType, scrollType) {\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, verticalType, revealHorizontal, scrollType)));\n    }\n    //#endregion\n    //#region viewLayout\n    changeWhitespace(callback) {\n        const hadAChange = this.viewLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n            this._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n        }\n    }\n    //#endregion\n    _withViewEventsCollector(callback) {\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            return callback(eventsCollector);\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n    }\n    batchEvents(callback) {\n        this._withViewEventsCollector(() => { callback(); });\n    }\n    normalizePosition(position, affinity) {\n        return this._lines.normalizePosition(position, affinity);\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n    getLineIndentColumn(lineNumber) {\n        return this._lines.getLineIndentColumn(lineNumber);\n    }\n}\nclass ViewportStart {\n    static create(model) {\n        const viewportStartLineTrackedRange = model._setTrackedRange(null, new Range(1, 1, 1, 1), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        return new ViewportStart(model, 1, false, viewportStartLineTrackedRange, 0);\n    }\n    get viewLineNumber() {\n        return this._viewLineNumber;\n    }\n    get isValid() {\n        return this._isValid;\n    }\n    get modelTrackedRange() {\n        return this._modelTrackedRange;\n    }\n    get startLineDelta() {\n        return this._startLineDelta;\n    }\n    constructor(_model, _viewLineNumber, _isValid, _modelTrackedRange, _startLineDelta) {\n        this._model = _model;\n        this._viewLineNumber = _viewLineNumber;\n        this._isValid = _isValid;\n        this._modelTrackedRange = _modelTrackedRange;\n        this._startLineDelta = _startLineDelta;\n    }\n    dispose() {\n        this._model._setTrackedRange(this._modelTrackedRange, null, 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n    }\n    update(viewModel, startLineNumber) {\n        const position = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, viewModel.getLineMinColumn(startLineNumber)));\n        const viewportStartLineTrackedRange = viewModel.model._setTrackedRange(this._modelTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        const viewportStartLineTop = viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n        const scrollTop = viewModel.viewLayout.getCurrentScrollTop();\n        this._viewLineNumber = startLineNumber;\n        this._isValid = true;\n        this._modelTrackedRange = viewportStartLineTrackedRange;\n        this._startLineDelta = scrollTop - viewportStartLineTop;\n    }\n    invalidate() {\n        this._isValid = false;\n    }\n}\nclass OverviewRulerDecorations {\n    constructor() {\n        this._asMap = Object.create(null);\n        this.asArray = [];\n    }\n    accept(color, zIndex, startLineNumber, endLineNumber, lane) {\n        const prevGroup = this._asMap[color];\n        if (prevGroup) {\n            const prevData = prevGroup.data;\n            const prevLane = prevData[prevData.length - 3];\n            const prevEndLineNumber = prevData[prevData.length - 1];\n            if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n                // merge into prev\n                if (endLineNumber > prevEndLineNumber) {\n                    prevData[prevData.length - 1] = endLineNumber;\n                }\n                return;\n            }\n            // push\n            prevData.push(lane, startLineNumber, endLineNumber);\n        }\n        else {\n            const group = new OverviewRulerDecorationsGroup(color, zIndex, [lane, startLineNumber, endLineNumber]);\n            this._asMap[color] = group;\n            this.asArray.push(group);\n        }\n    }\n}\nclass HiddenAreasModel {\n    constructor() {\n        this.hiddenAreas = new Map();\n        this.shouldRecompute = false;\n        this.ranges = [];\n    }\n    setHiddenAreas(source, ranges) {\n        const existing = this.hiddenAreas.get(source);\n        if (existing && rangeArraysEqual(existing, ranges)) {\n            return;\n        }\n        this.hiddenAreas.set(source, ranges);\n        this.shouldRecompute = true;\n    }\n    /**\n     * The returned array is immutable.\n    */\n    getMergedRanges() {\n        if (!this.shouldRecompute) {\n            return this.ranges;\n        }\n        this.shouldRecompute = false;\n        const newRanges = Array.from(this.hiddenAreas.values()).reduce((r, hiddenAreas) => mergeLineRangeArray(r, hiddenAreas), []);\n        if (rangeArraysEqual(this.ranges, newRanges)) {\n            return this.ranges;\n        }\n        this.ranges = newRanges;\n        return this.ranges;\n    }\n}\nfunction mergeLineRangeArray(arr1, arr2) {\n    const result = [];\n    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n        const item1 = arr1[i];\n        const item2 = arr2[j];\n        if (item1.endLineNumber < item2.startLineNumber - 1) {\n            result.push(arr1[i++]);\n        }\n        else if (item2.endLineNumber < item1.startLineNumber - 1) {\n            result.push(arr2[j++]);\n        }\n        else {\n            const startLineNumber = Math.min(item1.startLineNumber, item2.startLineNumber);\n            const endLineNumber = Math.max(item1.endLineNumber, item2.endLineNumber);\n            result.push(new Range(startLineNumber, 1, endLineNumber, 1));\n            i++;\n            j++;\n        }\n    }\n    while (i < arr1.length) {\n        result.push(arr1[i++]);\n    }\n    while (j < arr2.length) {\n        result.push(arr2[j++]);\n    }\n    return result;\n}\nfunction rangeArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!arr1[i].equalsRange(arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Maintain a stable viewport by trying to keep the first line in the viewport constant.\n */\nclass StableViewport {\n    constructor(viewportStartModelPosition, startLineDelta) {\n        this.viewportStartModelPosition = viewportStartModelPosition;\n        this.startLineDelta = startLineDelta;\n    }\n    recoverViewportStart(coordinatesConverter, viewLayout) {\n        if (!this.viewportStartModelPosition) {\n            return;\n        }\n        const viewPosition = coordinatesConverter.convertModelPositionToViewPosition(this.viewportStartModelPosition);\n        const viewPositionTop = viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n        viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this.startLineDelta }, 1 /* ScrollType.Immediate */);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable } from '../../base/common/lifecycle.js';\nexport class ViewModelEventDispatcher extends Disposable {\n    constructor() {\n        super();\n        this._onEvent = this._register(new Emitter());\n        this.onEvent = this._onEvent.event;\n        this._eventHandlers = [];\n        this._viewEventQueue = null;\n        this._isConsumingViewEventQueue = false;\n        this._collector = null;\n        this._collectorCnt = 0;\n        this._outgoingEvents = [];\n    }\n    emitOutgoingEvent(e) {\n        this._addOutgoingEvent(e);\n        this._emitOutgoingEvents();\n    }\n    _addOutgoingEvent(e) {\n        for (let i = 0, len = this._outgoingEvents.length; i < len; i++) {\n            const mergeResult = (this._outgoingEvents[i].kind === e.kind ? this._outgoingEvents[i].attemptToMerge(e) : null);\n            if (mergeResult) {\n                this._outgoingEvents[i] = mergeResult;\n                return;\n            }\n        }\n        // not merged\n        this._outgoingEvents.push(e);\n    }\n    _emitOutgoingEvents() {\n        while (this._outgoingEvents.length > 0) {\n            if (this._collector || this._isConsumingViewEventQueue) {\n                // right now collecting or emitting view events, so let's postpone emitting\n                return;\n            }\n            const event = this._outgoingEvents.shift();\n            if (event.isNoOp()) {\n                continue;\n            }\n            this._onEvent.fire(event);\n        }\n    }\n    addViewEventHandler(eventHandler) {\n        for (let i = 0, len = this._eventHandlers.length; i < len; i++) {\n            if (this._eventHandlers[i] === eventHandler) {\n                console.warn('Detected duplicate listener in ViewEventDispatcher', eventHandler);\n            }\n        }\n        this._eventHandlers.push(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        for (let i = 0; i < this._eventHandlers.length; i++) {\n            if (this._eventHandlers[i] === eventHandler) {\n                this._eventHandlers.splice(i, 1);\n                break;\n            }\n        }\n    }\n    beginEmitViewEvents() {\n        this._collectorCnt++;\n        if (this._collectorCnt === 1) {\n            this._collector = new ViewModelEventsCollector();\n        }\n        return this._collector;\n    }\n    endEmitViewEvents() {\n        this._collectorCnt--;\n        if (this._collectorCnt === 0) {\n            const outgoingEvents = this._collector.outgoingEvents;\n            const viewEvents = this._collector.viewEvents;\n            this._collector = null;\n            for (const outgoingEvent of outgoingEvents) {\n                this._addOutgoingEvent(outgoingEvent);\n            }\n            if (viewEvents.length > 0) {\n                this._emitMany(viewEvents);\n            }\n        }\n        this._emitOutgoingEvents();\n    }\n    emitSingleViewEvent(event) {\n        try {\n            const eventsCollector = this.beginEmitViewEvents();\n            eventsCollector.emitViewEvent(event);\n        }\n        finally {\n            this.endEmitViewEvents();\n        }\n    }\n    _emitMany(events) {\n        if (this._viewEventQueue) {\n            this._viewEventQueue = this._viewEventQueue.concat(events);\n        }\n        else {\n            this._viewEventQueue = events;\n        }\n        if (!this._isConsumingViewEventQueue) {\n            this._consumeViewEventQueue();\n        }\n    }\n    _consumeViewEventQueue() {\n        try {\n            this._isConsumingViewEventQueue = true;\n            this._doConsumeQueue();\n        }\n        finally {\n            this._isConsumingViewEventQueue = false;\n        }\n    }\n    _doConsumeQueue() {\n        while (this._viewEventQueue) {\n            // Empty event queue, as events might come in while sending these off\n            const events = this._viewEventQueue;\n            this._viewEventQueue = null;\n            // Use a clone of the event handlers list, as they might remove themselves\n            const eventHandlers = this._eventHandlers.slice(0);\n            for (const eventHandler of eventHandlers) {\n                eventHandler.handleEvents(events);\n            }\n        }\n    }\n}\nexport class ViewModelEventsCollector {\n    constructor() {\n        this.viewEvents = [];\n        this.outgoingEvents = [];\n    }\n    emitViewEvent(event) {\n        this.viewEvents.push(event);\n    }\n    emitOutgoingEvent(e) {\n        this.outgoingEvents.push(e);\n    }\n}\nexport class ContentSizeChangedEvent {\n    constructor(oldContentWidth, oldContentHeight, contentWidth, contentHeight) {\n        this.kind = 0 /* OutgoingViewModelEventKind.ContentSizeChanged */;\n        this._oldContentWidth = oldContentWidth;\n        this._oldContentHeight = oldContentHeight;\n        this.contentWidth = contentWidth;\n        this.contentHeight = contentHeight;\n        this.contentWidthChanged = (this._oldContentWidth !== this.contentWidth);\n        this.contentHeightChanged = (this._oldContentHeight !== this.contentHeight);\n    }\n    isNoOp() {\n        return (!this.contentWidthChanged && !this.contentHeightChanged);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new ContentSizeChangedEvent(this._oldContentWidth, this._oldContentHeight, other.contentWidth, other.contentHeight);\n    }\n}\nexport class FocusChangedEvent {\n    constructor(oldHasFocus, hasFocus) {\n        this.kind = 1 /* OutgoingViewModelEventKind.FocusChanged */;\n        this.oldHasFocus = oldHasFocus;\n        this.hasFocus = hasFocus;\n    }\n    isNoOp() {\n        return (this.oldHasFocus === this.hasFocus);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new FocusChangedEvent(this.oldHasFocus, other.hasFocus);\n    }\n}\nexport class ScrollChangedEvent {\n    constructor(oldScrollWidth, oldScrollLeft, oldScrollHeight, oldScrollTop, scrollWidth, scrollLeft, scrollHeight, scrollTop) {\n        this.kind = 2 /* OutgoingViewModelEventKind.ScrollChanged */;\n        this._oldScrollWidth = oldScrollWidth;\n        this._oldScrollLeft = oldScrollLeft;\n        this._oldScrollHeight = oldScrollHeight;\n        this._oldScrollTop = oldScrollTop;\n        this.scrollWidth = scrollWidth;\n        this.scrollLeft = scrollLeft;\n        this.scrollHeight = scrollHeight;\n        this.scrollTop = scrollTop;\n        this.scrollWidthChanged = (this._oldScrollWidth !== this.scrollWidth);\n        this.scrollLeftChanged = (this._oldScrollLeft !== this.scrollLeft);\n        this.scrollHeightChanged = (this._oldScrollHeight !== this.scrollHeight);\n        this.scrollTopChanged = (this._oldScrollTop !== this.scrollTop);\n    }\n    isNoOp() {\n        return (!this.scrollWidthChanged && !this.scrollLeftChanged && !this.scrollHeightChanged && !this.scrollTopChanged);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new ScrollChangedEvent(this._oldScrollWidth, this._oldScrollLeft, this._oldScrollHeight, this._oldScrollTop, other.scrollWidth, other.scrollLeft, other.scrollHeight, other.scrollTop);\n    }\n}\nexport class ViewZonesChangedEvent {\n    constructor() {\n        this.kind = 3 /* OutgoingViewModelEventKind.ViewZonesChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class HiddenAreasChangedEvent {\n    constructor() {\n        this.kind = 4 /* OutgoingViewModelEventKind.HiddenAreasChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class CursorStateChangedEvent {\n    constructor(oldSelections, selections, oldModelVersionId, modelVersionId, source, reason, reachedMaxCursorCount) {\n        this.kind = 6 /* OutgoingViewModelEventKind.CursorStateChanged */;\n        this.oldSelections = oldSelections;\n        this.selections = selections;\n        this.oldModelVersionId = oldModelVersionId;\n        this.modelVersionId = modelVersionId;\n        this.source = source;\n        this.reason = reason;\n        this.reachedMaxCursorCount = reachedMaxCursorCount;\n    }\n    static _selectionsAreEqual(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        const aLen = a.length;\n        const bLen = b.length;\n        if (aLen !== bLen) {\n            return false;\n        }\n        for (let i = 0; i < aLen; i++) {\n            if (!a[i].equalsSelection(b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    isNoOp() {\n        return (CursorStateChangedEvent._selectionsAreEqual(this.oldSelections, this.selections)\n            && this.oldModelVersionId === this.modelVersionId);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new CursorStateChangedEvent(this.oldSelections, other.selections, this.oldModelVersionId, other.modelVersionId, other.source, other.reason, this.reachedMaxCursorCount || other.reachedMaxCursorCount);\n    }\n}\nexport class ReadOnlyEditAttemptEvent {\n    constructor() {\n        this.kind = 5 /* OutgoingViewModelEventKind.ReadOnlyEditAttempt */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class ModelDecorationsChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 7 /* OutgoingViewModelEventKind.ModelDecorationsChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelLanguageChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 8 /* OutgoingViewModelEventKind.ModelLanguageChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelLanguageConfigurationChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 9 /* OutgoingViewModelEventKind.ModelLanguageConfigurationChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelContentChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 10 /* OutgoingViewModelEventKind.ModelContentChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelOptionsChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 11 /* OutgoingViewModelEventKind.ModelOptionsChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelTokensChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 12 /* OutgoingViewModelEventKind.ModelTokensChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\n"],"names":["KeyMod","chord","firstPart","secondPart","KeyChord","createMonacoBaseAPI","editor","undefined","languages","CancellationTokenSource","Emitter","KeyCode","standaloneEnums","Position","Range","Selection","SelectionDirection","MarkerSeverity","MarkerTag","Uri","URI","Token","CtrlCmd","Shift","Alt","WinCtrl","markRegex","trimDashesRegex","findSectionHeaders","model","options","_a","headers","findRegionSectionHeaders","foldingRules","markers","regionHeaders","endLineNumber","getLineCount","lineNumber","lineContent","getLineContent","match","start","range","startLineNumber","startColumn","length","endColumn","sectionHeader","getHeaderText","substring","shouldBeInComments","text","hasSeparatorLine","push","collectRegionHeaders","concat","findMarkSectionHeaders","markHeaders","addMarkHeaderIfFound","collectMarkHeaders","sectionHeaders","lastIndex","exec","indices","trim","startsWith","replace","MirrorModel","BaseMirrorModel","uri","this","_uri","eol","_eol","getValue","getText","findMatches","regex","matches","i","_lines","line","offsetToAdd","offsetAt","iteratorOverMatches","matchAll","index","getLinesContent","slice","getWordAtPosition","position","wordDefinition","wordAtText","getWordAtText","column","ensureValidWordDefinition","words","lines","wordenize","_wordenize","bind","lineText","wordRangesIdx","wordRanges","Symbol","iterator","value","end","getLineWords","content","ranges","word","result","getValueInRange","_validateRange","lineEnding","startLineIndex","endLineIndex","resultLines","join","_validatePosition","_ensureLineStarts","_lineStarts","getPrefixSum","positionAt","offset","Math","floor","max","out","getIndexOf","lineLength","min","remainder","isIPosition","Error","hasChanged","maxCharacter","EditorSimpleWorker","constructor","host","foreignModuleFactory","_host","_models","Object","create","_foreignModuleFactory","_foreignModule","dispose","_getModel","_getModels","all","keys","forEach","key","acceptNewModel","data","url","parse","EOL","versionId","acceptModelChanged","strURL","e","onEvents","acceptRemovedModel","computeUnicodeHighlights","UnicodeTextModelHighlighter","hasMore","ambiguousCharacterCount","invisibleCharacterCount","nonBasicAsciiCharacterCount","computeDiff","originalUrl","modifiedUrl","algorithm","original","modified","originalTextModel","modifiedTextModel","diffAlgorithm","linesDiffComputers","getDefault","getLegacy","originalLines","modifiedLines","getLineChanges","changes","map","m","endLineNumberExclusive","innerChanges","originalRange","modifiedRange","identical","_modelsAreIdentical","quitEarly","hitTimeout","moves","lineRangeMapping","originalLineCount","computeMoreMinimalEdits","modelUrl","edits","pretty","lastEol","sort","a","b","compareRangesUsingStarts","writeIndex","readIndex","getEndPosition","equals","getStartPosition","fromPositions","isEmpty","_diffLimit","stringDiff","editOffset","lift","change","originalStart","originalLength","newEdit","substr","modifiedStart","modifiedLength","computeLinks","computeDefaultDocumentColors","textualSuggest","modelUrls","leadingWord","wordDef","wordDefFlags","sw","StopWatch","wordDefRegExp","RegExp","seen","Set","outer","isNaN","Number","add","size","_suggestionsLimit","Array","from","duration","elapsed","computeWordRanges","array","navigateValueSet","up","selectionText","wordRange","BasicInplaceReplace","INSTANCE","loadForeignModule","moduleId","createData","foreignHostMethods","ctx","createProxyObject","proxyMethodRequest","method","args","fhr","getMirrorModels","Promise","resolve","getAllMethodNames","reject","fmr","apply","importScripts","globalThis","monaco","IEditorWorkerService","createDecorator","fileIconDirectoryRegex","getIconClasses","modelService","languageService","resource","fileKind","icon","id","classes","FileKind","ROOT_FOLDER","FOLDER","name","scheme","Schemas","DataUri","parseMetaData","get","META_DATA_LABEL","path","cssEscape","toLowerCase","authority","dotSegments","split","detectedLanguageId","languageId","mime","META_DATA_MIME","getLanguageIdByMimeType","getModel","getLanguageId","PLAINTEXT_LANGUAGE_ID","guessLanguageIdByFilepathOrFirstLine","detectLanguageId","str","__decorate","decorators","target","desc","d","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","ILanguageFeatureDebounceService","IdentityHash","_hashes","WeakMap","pool","of","obj","set","NullDebounceInformation","_default","_model","update","_value","default","FeatureDebounceInformation","_logService","_name","_registry","_min","_max","_cache","LRUCache","_key","reduce","hashVal","doHash","avg","clamp","SlidingWindowAverage","newValue","matchesScheme","trace","toString","_overall","MovingAverage","LanguageFeatureDebounceService","envService","_data","Map","_isDev","isExtensionDevelopment","isBuilt","for","feature","config","_b","_c","extra","info","debug","_overallAverage","values","ILogService","IEnvironmentService","registerSingleton","ILanguageFeaturesService","referenceProvider","LanguageFeatureRegistry","_score","renameProvider","newSymbolNamesProvider","codeActionProvider","definitionProvider","typeDefinitionProvider","declarationProvider","implementationProvider","documentSymbolProvider","inlayHintsProvider","colorProvider","codeLensProvider","documentFormattingEditProvider","documentRangeFormattingEditProvider","onTypeFormattingEditProvider","signatureHelpProvider","hoverProvider","documentHighlightProvider","multiDocumentHighlightProvider","selectionRangeProvider","foldingRangeProvider","linkProvider","inlineCompletionsProvider","inlineEditProvider","completionProvider","linkedEditingRangeProvider","documentRangeSemanticTokensProvider","documentSemanticTokensProvider","documentDropEditProvider","documentPasteEditProvider","_notebookTypeResolver","call","registeredAssociations","nonUserRegisteredAssociations","userRegisteredAssociations","registerPlatformLanguageAssociation","association","userConfigured","warnOnOverwrite","associationItem","filename","extension","filepattern","firstline","filenameLowercase","extensionLowercase","filepatternLowercase","filepatternOnPath","indexOf","posix","sep","toLanguageAssociationItem","console","warn","_registerLanguageAssociation","getLanguageIds","firstLine","file","fsPath","vscodeNotebookCell","Mimes","unknown","basename","configuredLanguage","getAssociationByPath","registeredLanguage","firstlineLanguage","startsWithUTF8BOM","getAssociationByFirstline","getAssociations","item","associations","filenameMatch","patternMatch","extensionMatch","endsWith","hasOwnProperty","prototype","NULL_LANGUAGE_ID","LanguageIdCodec","_languageIdToLanguage","_languageToLanguageId","_register","_nextLanguageId","language","register","has","encodeLanguageId","decodeLanguageId","LanguagesRegistry","Disposable","useModesRegistry","super","_onDidChange","onDidChange","event","instanceCount","_warnOnOverwrite","languageIdCodec","_dynamicLanguages","_languages","_mimeTypesMap","_nameMap","_lowercaseNameMap","_initializeFromRegistry","ModesRegistry","onDidChangeLanguages","filter","getLanguages","_registerLanguages","_registerLanguage","langId","identifier","aliases","alias","mimetypes","mimetype","Registry","as","Extensions","Configuration","registerOverrideIdentifiers","getRegisteredLanguageIds","fire","lang","resolvedLanguage","extensions","filenames","configurationFiles","icons","_mergeLanguage","primaryMime","isArray","configuration","filenamePatterns","filenamePattern","firstLineRegexStr","charAt","firstLineRegex","regExpLeadsToEndlessLoop","err","langAliases","langAlias","containsAliases","bestName","isRegisteredLanguageId","getLanguageIdByLanguageName","languageName","languageNameLower","mimeType","LanguageService","_onDidRequestBasicLanguageFeatures","onDidRequestBasicLanguageFeatures","_onDidRequestRichLanguageFeatures","onDidRequestRichLanguageFeatures","leakWarningThreshold","_requestedBasicLanguages","_requestedRichLanguages","languageIds","firstOrDefault","createById","LanguageSelection","_createAndGetLanguageIdentifier","createByFilepathOrFirstLine","requestBasicLanguageFeatures","requestRichLanguageFeatures","TokenizationRegistry","getOrCreate","_onDidChangeLanguages","_selector","_listener","_emitter","_dispose","_evaluate","onDidRemoveLastListener","IMarkerDecorationsService","MarkerDecorationsService","_markerService","_onDidChangeMarker","_markerDecorations","ResourceMap","getModels","_onModelAdded","onModelAdded","onModelRemoved","_onModelRemoved","onMarkerChanged","_handleMarkerChange","clear","getMarker","decoration","markerDecorations","changedResources","_updateDecorations","MarkerDecorations","delete","inMemory","internal","vscode","read","marker","owner","remove","take","IModelService","IMarkerService","_map","BidirectionalMap","toDisposable","deltaDecorations","added","removed","diffSets","oldIds","newDecorations","_createDecorationRange","_createDecorationOption","ids","removedMarker","getKey","rawMarker","ret","severity","Hint","_hasMarkerTag","setEndPosition","validateRange","maxColumn","getLineLastNonWhitespaceColumn","getLineMaxColumn","MAX_VALUE","minColumn","getLineFirstNonWhitespaceColumn","className","color","zIndex","inlineClassName","minimap","Info","themeColorFromId","overviewRulerInfo","minimapInfo","Warning","overviewRulerWarning","minimapWarning","overviewRulerError","minimapError","tags","description","stickiness","showIfCollapsed","overviewRuler","OverviewRulerLane","Right","tag","ModelService_1","MODEL_ID","ModelData","onWillDispose","onDidChangeLanguage","_modelEventListeners","DisposableStore","DEFAULT_EOL","platform","DisposedModelInfo","initialUndoRedoSnapshot","time","sharesUndoRedoStack","heapSize","sha1","alternativeVersionId","ModelService","_configurationService","_resourcePropertiesService","_undoRedoService","_languageService","_languageConfigurationService","_onModelModeChanged","onModelLanguageChanged","_modelCreationOptionsByLanguageAndResource","_disposedModels","_disposedModelsHeapSize","onDidChangeConfiguration","_updateModelOptions","_readModelOptions","isForSimpleWidget","tabSize","EDITOR_MODEL_DEFAULTS","parsedTabSize","parseInt","indentSize","parsedIndentSize","insertSpaces","Boolean","newDefaultEOL","trimAutoWhitespace","detectIndentation","largeFileOptimizations","bracketPairColorizationOptions","bracketPairColorization","enabled","independentColorPoolPerBracketType","defaultEOL","_getEOL","getEOL","overrideIdentifier","_shouldRestoreUndoStack","getCreationOptions","languageIdOrSelection","creationOptions","oldOptionsByLanguageAndResource","len","modelId","modelData","affectsConfiguration","oldOptions","newOptions","_setModelOptionsForModel","currentOptions","setEOL","updateOptions","bracketColorizationOptions","_insertDisposedModel","disposedModelData","_removeDisposedModel","_ensureDisposedModelsHeapSize","maxModelsHeapSize","disposedModels","entry","disposedModel","shift","restoreSnapshot","_createModelData","TextModel","elements","getElements","sha1Computer","_getSHA1Computer","sha1IsEqual","canComputeSHA1","computeSHA1","element","past","isEditStackElement","matchesResource","setModel","future","setElementsValidFlag","_overwriteVersionId","_overwriteAlternativeVersionId","_overwriteInitialUndoRedoSnapshot","_onWillDispose","_onDidChangeLanguage","createModel","languageSelection","_schemaShouldMaintainUndoRedoElements","vscodeRemote","vscodeUserData","getUriComparisonKey","maintainUndoRedoStack","maxMemory","MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK","getInitialUndoRedoSnapshot","Date","now","getVersionId","getAlternativeVersionId","oldLanguageId","oldLanguage","newLanguageId","DefaultModelSHA1Computer","IConfigurationService","ITextResourcePropertiesService","IUndoRedoService","ILanguageService","ILanguageConfigurationService","getValueLength","MAX_MODEL_SIZE","shaComputer","StringSHA1","snapshot","createSnapshot","digest","ITextModelService","encodeSemanticTokensDto","semanticTokens","dest","Uint32Array","type","deltas","delta","encodeSemanticTokensDtoSize","deleteCount","arr","uint8Arr","Uint8Array","buffer","byteOffset","b0","b1","b2","b3","reverseEndianness","VSBuffer","wrap","toLittleEndianBuffer","SparseMultilineTokens","tokens","SparseMultilineTokensStorage","_startLineNumber","_endLineNumber","_tokens","getMaxDeltaLine","_updateEndLineNumber","getLineTokens","getRange","deltaRange","removeTokens","bDeltaLine","applyEdit","eolCount","firstLineLength","lastLineLength","countEOL","acceptEdit","charCodeAt","firstCharCode","_acceptDeleteRange","_acceptInsertText","firstLineIndex","lastLineIndex","deletedLinesCount","tokenMaxDeltaLine","deletedBefore","acceptDeleteRange","lineIndex","acceptInsertText","_tokenCount","pieces","_getDeltaLine","_getStartCharacter","_getEndCharacter","tokenCount","_getTokenCount","startChar","maxDeltaLine","endChar","tokenIndex","deltaLine","low","high","mid","midDeltaLine","SparseLineTokens","subarray","startDeltaLine","endDeltaLine","newTokenCount","hasDeletedTokens","firstDeltaLine","srcOffset","tokenDeltaLine","tokenStartCharacter","tokenEndCharacter","tokenMetadata","destOffset","aTokens","bTokens","destTokens","destFirstDeltaLine","horizontalShiftForFirstLineTokens","startCharacter","endCharacter","deletedLineCount","character","isInsertingPreciselyOneWordCharacter","tokenLength","getCount","getStartCharacter","getEndCharacter","getMetadata","SemanticTokensProviderStyling","_legend","_themeService","_hasWarnedOverlappingTokens","_hasWarnedInvalidLengthTokens","_hasWarnedInvalidEditStart","_hashTable","HashTable","tokenTypeIndex","tokenModifierSet","encodedLanguageId","metadata","getLevel","LogLevel","Trace","TokenMetadata","getForeground","getFontStyle","tokenType","tokenTypes","tokenModifiers","modifierSet","modifierIndex","JSON","stringify","tokenStyle","getColorTheme","getTokenStyleMetadata","italic","bold","underline","strikethrough","foreground","warnOverlappingSemanticTokens","warnInvalidLengthSemanticTokens","warnInvalidEditStart","previousResultId","resultId","editIndex","editStart","maxExpectedStart","toMultilineTokens2","styling","srcData","tokensPerArea","ceil","lastLineNumber","lastStartCharacter","tokenStartIndex","tokenEndIndex","smallTokenEndIndex","bigTokenEndIndex","destData","areaLine","prevLineNumber","prevEndCharacter","deltaCharacter","IThemeService","HashTableEntry","next","_elementsCount","_currentLengthIndex","_currentLength","_SIZES","_growCount","round","_elements","_nullOutEntries","entries","_hash2","n1","n2","_hashFunc","hash","p","oldElements","first","oldNext","_add","ISemanticTokensStylingService","SemanticTokensStylingService","_caches","onDidColorThemeChange","getStyling","provider","getLegend","ITextResourceConfigurationService","TreeViewsDnDService","_dragOperations","removeDragOperationTransfer","uuid","operation","DraggedTreeItemsIdentifier","ITreeViewsDnDService","startLine","endLine","codePointHighlighter","CodePointHighlighter","candidates","getCandidateCodePoints","codePoints","strings","String","fromCodePoint","searcher","Searcher","forLoop","lineCount","reset","startIndex","endIndex","charCodeBefore","DEFAULT_WORD_REGEXP","highlightReason","shouldHighlightNonBasicASCII","assertNever","MAX_RESULT_LENGTH","computeUnicodeHighlightReason","char","kind","codePoint","codePointAt","primaryConfusable","ambiguousCharacters","getPrimaryConfusable","notAmbiguousInLocales","getLocales","l","getInstance","allowedLocales","isAmbiguous","confusableWith","allowedCodePoints","nonBasicASCII","invisibleCharacters","cp","isAllowedInvisibleCharacter","getConfusableCodePoints","wordContext","hasBasicASCIICharacters","hasNonConfusableNonBasicAsciiCharacter","isBasicASCII","isInvisibleCharacter","AccessibilitySupport","CodeActionTriggerType","CompletionItemInsertTextRule","CompletionItemKind","CompletionItemTag","CompletionTriggerKind","ContentWidgetPositionPreference","CursorChangeReason","DefaultEndOfLine","DocumentHighlightKind","EditorAutoIndentStrategy","EditorOption","EndOfLinePreference","EndOfLineSequence","GlyphMarginLane","HoverVerbosityAction","IndentAction","InjectedTextCursorStops","InlayHintKind","InlineCompletionTriggerKind","InlineEditTriggerKind","MinimapPosition","MinimapSectionHeaderStyle","MouseTargetType","NewSymbolNameTag","NewSymbolNameTriggerKind","OverlayWidgetPositionPreference","PartialAcceptTriggerKind","PositionAffinity","RenderLineNumbersType","RenderMinimap","ScrollType","ScrollbarVisibility","ShowLightbulbIconMode","SignatureHelpTriggerKind","SymbolKind","SymbolTag","TextEditorCursorBlinkingStyle","TextEditorCursorStyle","TrackedRangeStickiness","WrappingIndent","InspectTokensNLS","GoToLineNLS","QuickHelpNLS","QuickCommandNLS","QuickOutlineNLS","StandaloneCodeEditorNLS","ToggleHighContrastNLS","StandaloneServicesNLS","inspectTokensAction","nls","gotoLineActionLabel","helpQuickAccessActionLabel","quickCommandActionLabel","quickCommandHelp","quickOutlineActionLabel","quickOutlineByCategoryActionLabel","editorViewAccessibleLabel","accessibilityHelpMessage","toggleHighContrast","bulkEditServiceSummary","BracketInfo","nestingLevel","nestingLevelOfEqualBracketType","isInvalid","BracketPairInfo","openingBracketRange","closingBracketRange","bracketPairNode","openingBracketInfo","openingBracket","bracketInfo","BracketPairWithMinIndentationInfo","minVisibleColumnIndentation","ModelRawFlush","changeType","LineInjectedText","applyInjectedText","injectedTexts","lastOriginalOffset","injectedText","fromDecorations","decorations","before","ownerId","after","order","ModelRawLineChanged","detail","ModelRawLinesDeleted","fromLineNumber","toLineNumber","ModelRawLinesInserted","ModelRawEOLChanged","ModelRawContentChangedEvent","isUndoing","isRedoing","resultingSelection","containsEvent","merge","ModelInjectedTextChangedEvent","InternalModelContentChangeEvent","rawContentChangedEvent","contentChangedEvent","other","_mergeChangeEvents","isFlush","isEolChange","HorizontalGuidesState","IndentGuide","visibleColumn","horizontalLine","forWrappedLinesAfterColumn","forWrappedLinesBeforeOrAtColumn","IndentGuideHorizontalLine","top","_tokenizationSupports","_factories","_colorMap","handleChange","changedLanguages","changedColorMap","support","registerFactory","factory","myData","TokenizationSupportFactoryData","v","tokenizationSupport","isResolved","setColorMap","colorMap","getColorMap","getDefaultBackground","_isResolved","_languageId","_factory","_isDisposed","_resolvePromise","_create","ContiguousMultilineTokens","appendLineTokens","lineTokens","ContiguousMultilineTokensBuilder","last","finalize","EMPTY_LINE_TOKENS","ContiguousTokensEditing","deleteBeginning","toChIndex","deleteEnding","fromChIndex","toUint32Array","lineTextLength","tokensCount","fromTokenIndex","LineTokens","findIndexInTokensArray","fromTokenStartOffset","lastEnd","tokenEndOffset","tmp","append","_otherTokens","myTokens","otherTokens","otherTokensCount","insert","chIndex","textLength","ContiguousTokensStore","_lineTokens","_len","_languageIdCodec","flush","hasTokens","getTokens","topLevelLanguageId","rawLineTokens","getDefaultMetadata","_massageTokens","hasDifferentLanguageId","byteLength","_ensureLine","_deleteLines","splice","_insertLines","insertIndex","insertCount","arrays","setTokens","checkEquality","oldTokens","_equals","lastLineTokens","setMultilineTokens","textModel","minChangedLineNumber","maxChangedLineNumber","hasChange","getLineLength","createEmpty","decoder","defaultMetadata","defaultTokenMetadata","_lineTokensBrand","_tokensCount","_text","slicedEquals","sliceFromTokenIndex","sliceTokenCount","to","getStartOffset","getStandardTokenType","getTokenType","getClassName","getClassNameFromMetadata","getInlineStyle","getInlineStyleFromMetadata","getPresentation","getPresentationFromMetadata","getEndOffset","findTokenIndexAtOffset","inflate","sliceAndInflate","startOffset","endOffset","deltaOffset","SliceLineTokens","convertToEndOffset","lastTokenIndex","desiredIndex","withInserted","insertTokens","nextOriginalTokenIdx","nextInsertTokenIdx","newTokens","originalEndOffset","nextOriginalTokenEndOffset","nextInsertToken","source","_source","_startOffset","_endOffset","_deltaOffset","_firstTokenIndex","SparseTokensStore","_pieces","_isComplete","isComplete","setPartial","_range","_firstRange","_lastRange","plusRange","insertPosition","piece","addSparseTokens","_findFirstPieceWithLine","aLen","bLen","aIndex","resultLen","lastEndOffset","emitToken","bIndex","bStartCharacter","bEndCharacter","bMetadata","bMask","aMask","aMergeIndex","ViewEventHandler","_shouldRender","shouldRender","forceShouldRender","setShouldRender","onDidRender","onCompositionStart","onCompositionEnd","onConfigurationChanged","onCursorStateChanged","onDecorationsChanged","onFlushed","onFocusChanged","onLanguageConfigurationChanged","onLineMappingChanged","onLinesChanged","onLinesDeleted","onLinesInserted","onRevealRangeRequest","onScrollChanged","onThemeChanged","onTokensChanged","onTokensColorsChanged","onZonesChanged","handleEvents","events","ViewCompositionStartEvent","ViewCompositionEndEvent","ViewConfigurationChangedEvent","ViewCursorStateChangedEvent","selections","modelSelections","reason","ViewDecorationsChangedEvent","affectsMinimap","affectsOverviewRuler","affectsGlyphMargin","affectsLineNumber","ViewFlushedEvent","ViewFocusChangedEvent","isFocused","ViewLanguageConfigurationEvent","ViewLineMappingChangedEvent","ViewLinesChangedEvent","count","ViewLinesDeletedEvent","ViewLinesInsertedEvent","ViewRevealRangeRequestEvent","minimalReveal","verticalType","revealHorizontal","scrollType","ViewScrollChangedEvent","scrollWidth","scrollLeft","scrollHeight","scrollTop","scrollWidthChanged","scrollLeftChanged","scrollHeightChanged","scrollTopChanged","ViewThemeChangedEvent","theme","ViewTokensChangedEvent","ViewTokensColorsChangedEvent","ViewZonesChangedEvent","LineDecoration","_lineDecorationBrand","equalsArr","extractWrapped","rLength","dec","lineDecorations","minLineColumn","maxLineColumn","_typeCompare","ORDER","compare","typeCmp","DecorationSegment","Stack","stopOffsets","classNames","_metadata","consumeLowerThan","maxStopOffset","nextStartOffset","stopOffset","LineDecorationsNormalizer","normalize","stack","currentStartOffset","currentEndOffset","LinePart","containsRTL","_linePartBrand","isWhitespace","isPseudoAfter","LineRange","otherLineRange","RenderLineInput","useMonospaceOptimizations","canUseHalfwidthRightwardsArrow","continuesWithWrappedLine","fauxIndentLength","startVisibleColumn","spaceWidth","middotWidth","wsmiddotWidth","stopRenderingLineAfter","renderWhitespace","renderControlCharacters","fontLigatures","selectionsOnLine","abs","renderSpaceWidth","renderSpaceCharCode","sameSelection","otherSelections","DomPosition","partIndex","charIndex","CharacterMapping","getPartIndex","partData","getCharIndex","partCount","_horizontalOffset","setColumnInfo","horizontalOffset","getHorizontalOffset","charOffsetToPartData","charOffset","getDomPosition","getColumn","domPosition","partLength","partDataToCharOffset","searchEntry","midEntry","minEntry","maxEntry","minPartIndex","minCharIndex","maxCharIndex","RenderLineOutput","characterMapping","containsForeignElements","_renderLineOutputBrand","renderViewLine","input","sb","appendString","beforeCount","afterCount","lineDecoration","fontIsMonospace","isOverflowing","overflowingCharCount","parts","lastCharacterMappingDefined","charOffsetInPart","charHorizontalOffset","partDisplacement","tokensLen","part","partEndIndex","partType","partContainsRTL","partRendersWhitespace","partRendersWhitespaceWithWidth","partIsEmptyAndHasPseudoAfter","appendASCIICharCode","partWidth","_charIndex","_visibleColumn","charWidth","producedCharacters","appendCharCode","space","charCode","isControlCharacter","to4CharHex","n","toFixed","renderOverflowingCharCount","_renderLine","lineContainsRTL","tokenContainsRTL","transformAndRemoveOverflowing","lastLinePart","token","extractControlCharacters","onlyBoundary","onlyTrailing","generateLinePartForEachWhitespace","tokensLength","lastNonWhitespaceIndex","lineIsEmptyOrWhitespace","firstNonWhitespaceIndex","wasInWhitespace","currentSelectionIndex","currentSelection","tmpIndent","chCode","isInWhitespace","nextChCode","generateWhitespace","lastCharCode","prevCharCode","_applyRenderWhitespace","_lineDecorations","lineDecorationsLen","lineDecorationIndex","lastResultEndIndex","lastTokenEndIndex","_applyInlineDecorations","onlyAtSpaces","lastSpaceOffset","currTokenStart","j","diff","piecesCount","pieceEndIndex","splitLargeTokens","ResolvedRenderLineInput","resolveRenderLineInput","RenderLineOutput2","html","renderViewLine2","StringBuilder","build","toUpperCase","padStart","ViewportData","partialData","whitespaceViewportData","relativeVerticalOffset","bigNumbersDelta","lineHeight","visibleRange","getLineMinColumn","getViewLineRenderingData","getViewportViewLineRenderingData","getDecorationsInViewport","Viewport","left","width","height","_viewportBrand","MinimapLinesRenderingData","ViewLineData","inlineDecorations","_viewLineDataBrand","ViewLineRenderingData","mightContainRTL","mightContainNonBasicASCII","InlineDecoration","SingleLineInlineDecoration","inlineClassNameAffectsLetterSpacing","toInlineDecoration","ViewModelDecoration","_viewModelDecorationBrand","OverviewRulerDecorationsGroup","compareByRenderingProps","MinimapTokensColorTracker","_INSTANCE","markAsSingleton","_updateColorMap","_colors","RGBA8","Empty","_backgroundIsLight","colorId","rgba","g","backgroundLuminosity","getRelativeLuminance","getColor","backgroundIsLight","MonospaceLineBreaksComputerFactory","breakBeforeChars","breakAfterChars","classifier","WrappingCharacterClassifier","createLineBreaksComputer","fontInfo","wrappingColumn","wrappingIndent","wordBreak","requests","previousBreakingData","addRequest","previousLineBreakData","columnsForFullWidthChar","typicalFullwidthCharacterWidth","typicalHalfwidthCharacterWidth","injectionOptions","createLineBreaks","createLineBreaksFromPreviousLineBreaks","arrPool1","arrPool2","CharacterClassifier","BREAK_BEFORE","BREAK_AFTER","_asciiMap","_defaultValue","firstLineBreakColumn","isKeepAll","prevBreakingOffsets","breakOffsets","prevBreakingOffsetsVisibleColumn","breakOffsetsVisibleColumn","wrappedTextIndentLength","computeWrappedTextIndentLength","wrappedLineBreakColumn","breakingOffsets","breakingOffsetsVisibleColumn","breakingOffsetsCount","lastBreakingOffset","lastBreakingOffsetVisibleColumn","breakingColumn","prevLen","prevIndex","bestDistance","distance","prevBreakOffset","prevBreakOffsetVisibleColumn","breakOffset","breakOffsetVisibleColumn","forcedBreakOffset","forcedBreakOffsetVisibleColumn","prevCharCodeClass","entireLineFits","charStartOffset","charCodeClass","computeCharWidth","canBreak","hitATabCharacter","prevCharWidth","remainingWidthOfNextLine","charCodeAtForcedBreakOffset","_lineText","injectionOffsets","t","ModelLineProjectionData","tabCharacterWidth","numberOfAdditionalTabs","ColorZone","_colorZoneBrand","OverviewRulerZone","heightInLines","_overviewRulerZoneBrand","_colorZone","setColorZone","colorZone","getColorZones","OverviewZoneManager","getVerticalOffsetForLine","_getVerticalOffsetForLine","_zones","_colorZonesInvalid","_lineHeight","_domWidth","_domHeight","_outerHeight","_pixelRatio","_lastAssignedId","_color2Id","_id2Color","getId2Color","setZones","newZones","setLineHeight","setPixelRatio","pixelRatio","getDOMWidth","getCanvasWidth","setDOMWidth","getDOMHeight","getCanvasHeight","setDOMHeight","getOuterHeight","setOuterHeight","outerHeight","resolveColorZones","colorZonesInvalid","totalHeight","heightRatio","halfMinimumHeight","allColorZones","zone","offset1","offset2","y1","y2","ycenter","halfHeight","ViewContext","EditorTheme","viewModel","viewLayout","addEventHandler","eventHandler","addViewEventHandler","removeEventHandler","removeViewEventHandler","ViewModelDecorations","editorId","linesCollection","coordinatesConverter","_linesCollection","_coordinatesConverter","_decorationsCache","_cachedModelDecorationsResolver","_cachedModelDecorationsResolverViewRange","_clearCachedModelDecorationsResolver","onModelDecorationsChanged","_getOrCreateViewModelDecoration","modelDecoration","modelRange","viewRange","isWholeLine","convertModelPositionToViewPosition","convertModelRangeToViewRange","getMinimapDecorationsInRange","_getDecorationsInRange","getDecorationsViewportData","cacheIsValid","equalsRange","getInlineDecorationsOnLine","onlyMinimapDecorations","onlyMarginDecorations","getViewLineMinColumn","getViewLineMaxColumn","modelDecorations","getDecorationsInRange","filterValidationDecorations","decorationsInViewport","decorationsInViewportLen","decorationOptions","isModelDecorationVisible","viewModelDecoration","inlineDecoration","intersectedStartLineNumber","intersectedEndLineNumber","beforeContentClassName","afterContentClassName","hideInCommentTokens","isModelDecorationInComment","hideInStringTokens","isModelDecorationInString","testTokensInRange","callback","tokenization","isFirstLine","isEndLine","tokenIdx","PendingChanges","_hasPending","_inserts","_changes","_removes","x","mustCommit","commit","linesLayout","inserts","removes","_commitPendingChanges","EditorWhitespace","afterLineNumber","ordinal","minWidth","prefixSum","LinesLayout","paddingTop","paddingBottom","_instanceId","INSTANCE_COUNT","_pendingChanges","_lastWhitespaceId","_arr","_prefixSumValidIndex","_minWidth","_lineCount","_paddingTop","_paddingBottom","findInsertionIndex","_checkPendingChanges","setPadding","changeWhitespace","hadAChange","insertWhitespace","heightInPx","changeOneWhitespace","newAfterLineNumber","newHeight","removeWhitespace","_insertWhitespace","_changeOneWhitespace","_findWhitespaceIndex","_removeWhitespace","toRemove","toChange","applyRemoveAndChange","whitespaces","whitespace","removeIndex","getWhitespacesTotalHeight","getWhitespacesAccumulatedHeight","getLinesTotalHeight","getWhitespaceAccumulatedHeightBeforeLineNumber","lastWhitespaceBeforeLineNumber","_findLastWhitespaceBeforeLineNumber","_findFirstWhitespaceAfterLineNumber","firstWhitespaceAfterLineNumber","getFirstWhitespaceIndexAfterLineNumber","getVerticalOffsetForLineNumber","previousLinesHeight","includeViewZones","getVerticalOffsetAfterLineNumber","getWhitespaceMinWidth","isAfterLines","verticalOffset","isInTopPadding","isInBottomPadding","getLineNumberAtOrAfterVerticalOffset","linesCount","minLineNumber","maxLineNumber","midLineNumber","midLineNumberVerticalOffset","getLinesViewportData","verticalOffset1","verticalOffset2","startLineNumberVerticalOffset","whitespaceIndex","whitespaceCount","getWhitespacesCount","currentWhitespaceHeight","currentWhitespaceAfterLineNumber","getAfterLineNumberForWhitespaceIndex","getHeightForWhitespaceIndex","currentVerticalOffset","currentLineRelativeOffset","STEP_SIZE","linesOffsets","verticalCenter","centeredLineNumber","endLineNumberVerticalOffset","completelyVisibleStartLineNumber","completelyVisibleEndLineNumber","getVerticalOffsetForWhitespaceIndex","previousWhitespacesHeight","getWhitespaceIndexAtOrAfterVerticallOffset","minWhitespaceIndex","maxWhitespaceIndex","midWhitespaceIndex","midWhitespaceVerticalOffset","getWhitespaceAtVerticalOffset","candidateIndex","candidateTop","candidateHeight","getIdForWhitespaceIndex","getWhitespaceViewportData","getWhitespaces","EditorScrollDimensions","contentWidth","contentHeight","EditorScrollable","smoothScrollDuration","scheduleAtNextAnimationFrame","_onDidContentSizeChange","onDidContentSizeChange","_dimensions","_scrollable","Scrollable","forceIntegerValues","onDidScroll","onScroll","getScrollable","setSmoothScrollDuration","validateScrollPosition","scrollPosition","getScrollDimensions","setScrollDimensions","dimensions","oldDimensions","contentWidthChanged","contentHeightChanged","ContentSizeChangedEvent","getFutureScrollPosition","getCurrentScrollPosition","setScrollPositionNow","setScrollPositionSmooth","hasPendingScrollAnimation","ViewLayout","_configuration","layoutInfo","padding","_linesLayout","bottom","_maxLineWidth","_overlayWidgetsMinWidth","_configureSmoothScrollDuration","_updateHeight","onHeightMaybeChanged","scrollDimensions","_getContentHeight","_getHorizontalScrollbarHeight","scrollbar","horizontal","horizontalScrollbarSize","ignoreHorizontalScrollbarInContentHeight","getCurrentViewport","currentScrollPosition","getFutureViewport","_computeContentWidth","maxLineWidth","wrappingInfo","isViewportWrapping","side","verticalScrollbarWidth","extraHorizontalSpace","whitespaceMinWidth","setMaxLineWidth","_updateContentWidth","setOverlayWidgetsMinWidth","maxMinWidth","saveState","firstLineNumberInViewport","scrollTopWithoutViewZones","getLineNumberAtVerticalOffset","visibleBox","getLinesViewportDataAtScrollTop","getContentWidth","getScrollWidth","getContentHeight","getScrollHeight","getCurrentScrollLeft","getCurrentScrollTop","setScrollPosition","deltaScrollNow","deltaScrollLeft","deltaScrollTop","createModelLineProjection","lineBreakData","isVisible","IdentityModelLineProjection","HiddenModelLineProjection","ModelLineProjection","_projectionData","_isVisible","setVisible","getProjectionData","getViewLineCount","getOutputLineCount","getViewLineContent","modelLineNumber","outputLineIndex","_assertVisible","startOffsetInInputWithInjections","endOffsetInInputWithInjections","idx","spaces","getViewLineLength","_modelLineNumber","getMinOutputOffset","getMaxOutputOffset","getViewLineData","getViewLinesData","outputLineIdx","globalStartIndex","needed","lineWithInjections","inlineDecorationsPerOutputLine","totalInjectedTextLengthBefore","currentInjectedOffset","lineStartOffsetInInputWithInjections","lineEndOffsetInInputWithInjections","injectedTextStartOffsetInInputWithInjections","injectedTextEndOffsetInInputWithInjections","globalIndex","_getViewLineData","deltaStartIndex","getModelColumnOfViewPosition","outputColumn","translateToInputOffset","getViewPositionOfModelPosition","deltaLineNumber","inputColumn","affinity","translateToOutputPosition","toPosition","getViewLineNumberOfModelPosition","normalizePosition","outputPosition","baseViewLineNumber","normalizeOutputPosition","getInjectedTextAt","getInjectedText","_outputLineIndex","_fromOuputLineIndex","_toOutputLineIndex","_inputColumn","_outputColumn","_globalStartIndex","_needed","_result","_deltaLineNumber","_spaces","_makeSpaces","ViewModelLinesFromProjectedModel","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","wrappingStrategy","_editorId","_validModelVersionId","_domLineBreaksComputerFactory","_monospaceLineBreaksComputerFactory","_constructLines","hiddenAreasDecorationIds","createCoordinatesConverter","CoordinatesConverter","resetHiddenAreas","previousLineBreaks","modelLineProjections","linesContent","injectedTextDecorations","getInjectedTextDecorations","lineBreaksComputer","injectedTextQueue","lineInjectedText","takeWhile","linesBreaks","hiddenAreas","areaId","getDecorationRange","hiddenAreaStart","hiddenAreaEnd","hiddenAreaIdx","nextLineNumberToUpdateHiddenArea","isInHiddenArea","projectedModelLineLineCounts","ConstantTimePrefixSumComputer","getHiddenAreas","decId","setHiddenAreas","_ranges","newRanges","sortedRanges","currentRangeStart","currentRangeEnd","normalizeLineRanges","oldRanges","hasDifference","ModelDecorationOptions","EMPTY","hasVisibleLine","lineChanged","newOutputLineCount","setValue","modelPositionIsVisible","_modelColumn","getModelLineViewLineCount","setTabSize","newTabSize","setWrappingSettings","equalFontInfo","equalWrappingStrategy","equalWrappingColumn","equalWrappingIndent","equalWordBreak","onlyWrappingColumnChanged","onModelFlushed","onModelLinesDeleted","outputFromLineNumber","outputToLineNumber","removeValues","viewEvents","onModelLinesInserted","_toLineNumber","lineBreaks","totalOutputLineCount","insertLines","insertPrefixSumValues","outputLineCount","insertValues","onModelLineChanged","oldOutputLineCount","lineMappingChanged","changeFrom","changeTo","insertFrom","insertTo","deleteFrom","deleteTo","acceptVersionId","getTotalSum","_toValidViewLineNumber","viewLineNumber","viewLineCount","getActiveIndentGuide","modelPosition","convertViewPositionToModelPosition","modelMinPosition","modelMaxPosition","guides","viewStartPosition","viewEndPosition","indent","getViewLineInfo","ViewLineInfo","getMinColumnOfViewLine","viewLineInfo","modelLineWrappedLineIdx","getMaxColumnOfViewLine","getModelStartPositionOfViewLine","minViewColumn","getModelEndPositionOfViewLine","maxViewColumn","getViewLineInfosGroupedByModelRanges","viewStartLineNumber","viewEndLineNumber","startViewLine","endViewLine","lastVisibleModelPos","viewLines","curModelLine","lastVisibleModelPos2","ViewLineInfoGroupedByModelRange","getViewLinesBracketGuides","activeViewPosition","modelActivePosition","resultPerViewLine","group","modelRangeStartLineNumber","bracketGuidesPerModelLine","getLinesBracketGuides","viewPosition","getViewLinesIndentGuides","modelStart","modelEnd","resultRepeatCount","resultRepeatOption","modelStartLineIndex","modelEndLineIndex","reqStart","modelLineIndex","viewLineStartIndex","viewLineEndIndex","option","getLinesIndentGuides","viewIndents","currIndex","blockAtIndex","startModelLineIndex","startRemainder","fromViewLineIndex","remainingViewLineCount","lastLine","validateViewPosition","viewColumn","expectedModelPosition","computedModelColumn","validatePosition","validateViewRange","expectedModelRange","validViewStart","validViewEnd","convertViewRangeToModelRange","allowZeroLineNumber","belowHiddenRanges","validPosition","inputLineNumber","lineIndexChanged","modelColumn","filterOutValidation","res","finalResult","finalResultLen","prevDecId","getLineIndentColumn","allowZero","ViewModelLinesFromModelAsIs","IdentityCoordinatesConverter","_newTabSize","_fontInfo","_wrappingStrategy","_wrappingColumn","_wrappingIndent","_versionId","_minLineNumber","_maxLineNumber","activePosition","fill","_validPosition","pos","_validRange","_viewPosition","_viewRange","MAX_LANE","GlyphMarginLanesModel","maxLine","persist","_requiredLanes","lanes","bytes","requiredLanes","lane","bit","countAtLine","getLanesAtLine","Center","ViewModel","languageConfigurationService","_attachedView","hiddenAreasModel","HiddenAreasModel","previousHiddenAreas","_eventDispatcher","ViewModelEventDispatcher","onEvent","cursorConfig","CursorConfiguration","getOptions","_updateConfigurationViewLineCount","RunOnceScheduler","_updateConfigurationViewLineCountNow","_hasFocus","_viewportStart","ViewportStart","glyphLanes","isTooLargeForTokenization","_cursor","CursorsController","_handleVisibleLinesChanged","invalidate","emitSingleViewEvent","emitOutgoingEvent","ScrollChangedEvent","oldScrollWidth","oldScrollLeft","oldScrollHeight","oldScrollTop","_decorations","_registerModelEvents","onDidChangeFast","eventsCollector","beginEmitViewEvents","_onConfigurationChanged","endEmitViewEvents","_invalidateDecorationsColorCache","setViewLineCount","getModelVisibleRanges","linesViewportData","viewVisibleRange","_toModelVisibleRanges","visibleLinesStabilized","modelVisibleRanges","setVisibleLines","setHasFocus","hasFocus","FocusChangedEvent","_captureStableViewport","isValid","previousViewportStartViewPosition","previousViewportStartModelPosition","StableViewport","startLineDelta","stableViewport","emitViewEvent","schedule","recoverViewportStart","shouldRecreate","updateConfiguration","onDidChangeContentOrInjectedText","hadOtherModelChange","hadModelLineChangeThatChangedLineMapping","textModelEvents","lineIdx","lineBreakQueue","ArrayQueue","linesDeletedEvent","insertedLineBreaks","takeCount","linesInsertedEvent","changedLineBreakData","dequeue","linesChangedEvent","viewportStartWasValid","setModelLineCount","getAttachedEditorCount","_getTrackedRange","modelTrackedRange","viewPositionTop","ModelContentChangedEvent","onModelContentChanged","onDidChangeTokens","viewRanges","lenJ","ModelTokensChangedEvent","onDidChangeLanguageConfiguration","ModelLanguageConfigurationChangedEvent","ModelLanguageChangedEvent","onDidChangeOptions","ModelOptionsChangedEvent","onDidChangeDecorations","ModelDecorationsChangedEvent","mergedRanges","getMergedRanges","firstModelLineInViewPort","viewportStartModelPosition","some","HiddenAreasChangedEvent","getVisibleRangesPlusViewportAboveBelow","linesAround","startViewLineNumber","endViewLineNumber","getVisibleRanges","visibleViewRange","getCompletelyVisibleViewRange","hiddenStartLineNumber","hiddenEndLineNumber","getCompletelyVisibleViewRangeAtScrollTop","compatViewState","firstViewLineNumber","firstPosition","firstPositionDeltaTop","reduceRestoreState","state","_reduceRestoreStateCompatibility","getTabSize","setViewport","getBracketGuidesInRangeByLine","_getViewLineRenderingData","lineData","getMinimapLinesRenderingData","getAllOverviewRulerDecorations","getOverviewRulerDecorations","OverviewRulerDecorations","opts","accept","asArray","opts1","invalidateCachedColor","opts2","getValueLengthInRange","modifyPosition","resultModelPosition","deduceModelPositionRelativeToViewPosition","viewAnchorPosition","lineFeedCnt","modelAnchor","resultOffset","getOffsetAt","getPositionAt","getPlainTextToCopy","modelRanges","emptySelectionClipboard","forceCRLF","newLineCharacter","hasEmptyRange","hasNonEmptyRange","modelLineNumbers","prevModelLineNumber","getRichTextToCopy","_getColorMap","fontFamily","test","EDITOR_FONT_DEFAULTS","mode","fontWeight","fontSize","_getHTMLToCopy","tokenizeLineToHTML","Color","Format","CSS","formatHex","getPrimaryCursorState","getLastAddedCursorIndex","getCursorStates","setCursorStates","states","_withViewEventsCollector","setStates","getCursorColumnSelectData","getCursorAutoClosedCharacters","getAutoClosedCharacters","setCursorColumnSelectData","columnSelectData","getPrevEditOperationType","setPrevEditOperationType","getSelection","getSelections","getPosition","modelState","setSelections","saveCursorState","restoreCursorState","restoreState","_executeCursorEdit","context","readOnly","ReadOnlyEditAttemptEvent","executeEdits","cursorStateComputer","startComposition","endComposition","compositionType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","paste","pasteOnNewLine","multicursorText","cut","executeCommand","command","executeCommands","commands","revealAllCursors","revealAll","revealPrimaryCursor","revealPrimary","revealTopMostCursor","getTopMostViewPosition","revealBottomMostCursor","getBottomMostViewPosition","revealRange","batchEvents","viewportStartLineTrackedRange","_setTrackedRange","_viewLineNumber","_isValid","_modelTrackedRange","_startLineDelta","viewportStartLineTop","_asMap","prevGroup","prevData","prevLane","prevEndLineNumber","shouldRecompute","existing","rangeArraysEqual","arr1","arr2","item1","item2","mergeLineRangeArray","_onEvent","_eventHandlers","_viewEventQueue","_isConsumingViewEventQueue","_collector","_collectorCnt","_outgoingEvents","_addOutgoingEvent","_emitOutgoingEvents","mergeResult","attemptToMerge","isNoOp","ViewModelEventsCollector","outgoingEvents","outgoingEvent","_emitMany","_consumeViewEventQueue","_doConsumeQueue","eventHandlers","oldContentWidth","oldContentHeight","_oldContentWidth","_oldContentHeight","oldHasFocus","_oldScrollWidth","_oldScrollLeft","_oldScrollHeight","_oldScrollTop","CursorStateChangedEvent","oldSelections","oldModelVersionId","modelVersionId","reachedMaxCursorCount","_selectionsAreEqual","equalsSelection"],"sourceRoot":""}