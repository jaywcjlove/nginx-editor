{"version":3,"file":"static/js/monaco-editor-vendor.083c15da.aae4873a.js","mappings":"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","sources":["../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/platform/storage/common/storage.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/platform/telemetry/common/telemetry.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/platform/theme/browser/defaultStyles.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/platform/theme/browser/iconsStyleSheet.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/platform/theme/common/colorRegistry.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/platform/theme/common/iconRegistry.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/platform/theme/common/theme.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/platform/theme/common/themeService.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/platform/undoRedo/common/undoRedo.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/platform/undoRedo/common/undoRedoService.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/platform/workspace/common/workspace.js","../node_modules/@uiw/react-monacoeditor/node_modules/monaco-editor/esm/vs/platform/workspace/common/workspaceTrust.js"],"sourcesContent":["import { Emitter, Event, PauseableEmitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { isUndefinedOrNull } from '../../../base/common/types.js';\nimport { InMemoryStorageDatabase, Storage, StorageHint } from '../../../base/parts/storage/common/storage.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const TARGET_KEY = '__$__targetStorageMarker';\nexport const IStorageService = createDecorator('storageService');\nexport var WillSaveStateReason;\n(function (WillSaveStateReason) {\n    /**\n     * No specific reason to save state.\n     */\n    WillSaveStateReason[WillSaveStateReason[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * A hint that the workbench is about to shutdown.\n     */\n    WillSaveStateReason[WillSaveStateReason[\"SHUTDOWN\"] = 1] = \"SHUTDOWN\";\n})(WillSaveStateReason || (WillSaveStateReason = {}));\nexport function loadKeyTargets(storage) {\n    const keysRaw = storage.get(TARGET_KEY);\n    if (keysRaw) {\n        try {\n            return JSON.parse(keysRaw);\n        }\n        catch (error) {\n            // Fail gracefully\n        }\n    }\n    return Object.create(null);\n}\nexport class AbstractStorageService extends Disposable {\n    constructor(options = { flushInterval: AbstractStorageService.DEFAULT_FLUSH_INTERVAL }) {\n        super();\n        this.options = options;\n        this._onDidChangeValue = this._register(new PauseableEmitter());\n        this._onDidChangeTarget = this._register(new PauseableEmitter());\n        this._onWillSaveState = this._register(new Emitter());\n        this.onWillSaveState = this._onWillSaveState.event;\n        this._workspaceKeyTargets = undefined;\n        this._profileKeyTargets = undefined;\n        this._applicationKeyTargets = undefined;\n    }\n    onDidChangeValue(scope, key, disposable) {\n        return Event.filter(this._onDidChangeValue.event, e => e.scope === scope && (key === undefined || e.key === key), disposable);\n    }\n    emitDidChangeValue(scope, event) {\n        const { key, external } = event;\n        // Specially handle `TARGET_KEY`\n        if (key === TARGET_KEY) {\n            // Clear our cached version which is now out of date\n            switch (scope) {\n                case -1 /* StorageScope.APPLICATION */:\n                    this._applicationKeyTargets = undefined;\n                    break;\n                case 0 /* StorageScope.PROFILE */:\n                    this._profileKeyTargets = undefined;\n                    break;\n                case 1 /* StorageScope.WORKSPACE */:\n                    this._workspaceKeyTargets = undefined;\n                    break;\n            }\n            // Emit as `didChangeTarget` event\n            this._onDidChangeTarget.fire({ scope });\n        }\n        // Emit any other key to outside\n        else {\n            this._onDidChangeValue.fire({ scope, key, target: this.getKeyTargets(scope)[key], external });\n        }\n    }\n    get(key, scope, fallbackValue) {\n        var _a;\n        return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.get(key, fallbackValue);\n    }\n    getBoolean(key, scope, fallbackValue) {\n        var _a;\n        return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.getBoolean(key, fallbackValue);\n    }\n    getNumber(key, scope, fallbackValue) {\n        var _a;\n        return (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.getNumber(key, fallbackValue);\n    }\n    store(key, value, scope, target, external = false) {\n        // We remove the key for undefined/null values\n        if (isUndefinedOrNull(value)) {\n            this.remove(key, scope, external);\n            return;\n        }\n        // Update our datastructures but send events only after\n        this.withPausedEmitters(() => {\n            var _a;\n            // Update key-target map\n            this.updateKeyTarget(key, scope, target);\n            // Store actual value\n            (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.set(key, value, external);\n        });\n    }\n    remove(key, scope, external = false) {\n        // Update our datastructures but send events only after\n        this.withPausedEmitters(() => {\n            var _a;\n            // Update key-target map\n            this.updateKeyTarget(key, scope, undefined);\n            // Remove actual key\n            (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.delete(key, external);\n        });\n    }\n    withPausedEmitters(fn) {\n        // Pause emitters\n        this._onDidChangeValue.pause();\n        this._onDidChangeTarget.pause();\n        try {\n            fn();\n        }\n        finally {\n            // Resume emitters\n            this._onDidChangeValue.resume();\n            this._onDidChangeTarget.resume();\n        }\n    }\n    updateKeyTarget(key, scope, target, external = false) {\n        var _a, _b;\n        // Add\n        const keyTargets = this.getKeyTargets(scope);\n        if (typeof target === 'number') {\n            if (keyTargets[key] !== target) {\n                keyTargets[key] = target;\n                (_a = this.getStorage(scope)) === null || _a === void 0 ? void 0 : _a.set(TARGET_KEY, JSON.stringify(keyTargets), external);\n            }\n        }\n        // Remove\n        else {\n            if (typeof keyTargets[key] === 'number') {\n                delete keyTargets[key];\n                (_b = this.getStorage(scope)) === null || _b === void 0 ? void 0 : _b.set(TARGET_KEY, JSON.stringify(keyTargets), external);\n            }\n        }\n    }\n    get workspaceKeyTargets() {\n        if (!this._workspaceKeyTargets) {\n            this._workspaceKeyTargets = this.loadKeyTargets(1 /* StorageScope.WORKSPACE */);\n        }\n        return this._workspaceKeyTargets;\n    }\n    get profileKeyTargets() {\n        if (!this._profileKeyTargets) {\n            this._profileKeyTargets = this.loadKeyTargets(0 /* StorageScope.PROFILE */);\n        }\n        return this._profileKeyTargets;\n    }\n    get applicationKeyTargets() {\n        if (!this._applicationKeyTargets) {\n            this._applicationKeyTargets = this.loadKeyTargets(-1 /* StorageScope.APPLICATION */);\n        }\n        return this._applicationKeyTargets;\n    }\n    getKeyTargets(scope) {\n        switch (scope) {\n            case -1 /* StorageScope.APPLICATION */:\n                return this.applicationKeyTargets;\n            case 0 /* StorageScope.PROFILE */:\n                return this.profileKeyTargets;\n            default:\n                return this.workspaceKeyTargets;\n        }\n    }\n    loadKeyTargets(scope) {\n        const storage = this.getStorage(scope);\n        return storage ? loadKeyTargets(storage) : Object.create(null);\n    }\n}\nAbstractStorageService.DEFAULT_FLUSH_INTERVAL = 60 * 1000; // every minute\nexport class InMemoryStorageService extends AbstractStorageService {\n    constructor() {\n        super();\n        this.applicationStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n        this.profileStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n        this.workspaceStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n        this._register(this.workspaceStorage.onDidChangeStorage(e => this.emitDidChangeValue(1 /* StorageScope.WORKSPACE */, e)));\n        this._register(this.profileStorage.onDidChangeStorage(e => this.emitDidChangeValue(0 /* StorageScope.PROFILE */, e)));\n        this._register(this.applicationStorage.onDidChangeStorage(e => this.emitDidChangeValue(-1 /* StorageScope.APPLICATION */, e)));\n    }\n    getStorage(scope) {\n        switch (scope) {\n            case -1 /* StorageScope.APPLICATION */:\n                return this.applicationStorage;\n            case 0 /* StorageScope.PROFILE */:\n                return this.profileStorage;\n            default:\n                return this.workspaceStorage;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const ITelemetryService = createDecorator('telemetryService');\n","import { keybindingLabelBackground, keybindingLabelBorder, keybindingLabelBottomBorder, keybindingLabelForeground, asCssVariable, widgetShadow, buttonForeground, buttonSeparator, buttonBackground, buttonHoverBackground, buttonSecondaryForeground, buttonSecondaryBackground, buttonSecondaryHoverBackground, buttonBorder, progressBarBackground, inputActiveOptionBorder, inputActiveOptionForeground, inputActiveOptionBackground, editorWidgetBackground, editorWidgetForeground, contrastBorder, checkboxBorder, checkboxBackground, checkboxForeground, problemsErrorIconForeground, problemsWarningIconForeground, problemsInfoIconForeground, inputBackground, inputForeground, inputBorder, textLinkForeground, inputValidationInfoBorder, inputValidationInfoBackground, inputValidationInfoForeground, inputValidationWarningBorder, inputValidationWarningBackground, inputValidationWarningForeground, inputValidationErrorBorder, inputValidationErrorBackground, inputValidationErrorForeground, listFilterWidgetBackground, listFilterWidgetNoMatchesOutline, listFilterWidgetOutline, listFilterWidgetShadow, badgeBackground, badgeForeground, breadcrumbsBackground, breadcrumbsForeground, breadcrumbsFocusForeground, breadcrumbsActiveSelectionForeground, activeContrastBorder, listActiveSelectionBackground, listActiveSelectionForeground, listActiveSelectionIconForeground, listDropBackground, listFocusAndSelectionOutline, listFocusBackground, listFocusForeground, listFocusOutline, listHoverBackground, listHoverForeground, listInactiveFocusBackground, listInactiveFocusOutline, listInactiveSelectionBackground, listInactiveSelectionForeground, listInactiveSelectionIconForeground, tableColumnsBorder, tableOddRowsBackgroundColor, treeIndentGuidesStroke, asCssVariableWithDefault, editorWidgetBorder, focusBorder, pickerGroupForeground, quickInputListFocusBackground, quickInputListFocusForeground, quickInputListFocusIconForeground, selectBackground, selectBorder, selectForeground, selectListBackground, treeInactiveIndentGuidesStroke, menuBorder, menuForeground, menuBackground, menuSelectionForeground, menuSelectionBackground, menuSelectionBorder, menuSeparatorBackground, scrollbarShadow, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground } from '../common/colorRegistry.js';\nimport { Color } from '../../../base/common/color.js';\nfunction overrideStyles(override, styles) {\n    const result = Object.assign({}, styles);\n    for (const key in override) {\n        const val = override[key];\n        result[key] = val !== undefined ? asCssVariable(val) : undefined;\n    }\n    return result;\n}\nexport const defaultKeybindingLabelStyles = {\n    keybindingLabelBackground: asCssVariable(keybindingLabelBackground),\n    keybindingLabelForeground: asCssVariable(keybindingLabelForeground),\n    keybindingLabelBorder: asCssVariable(keybindingLabelBorder),\n    keybindingLabelBottomBorder: asCssVariable(keybindingLabelBottomBorder),\n    keybindingLabelShadow: asCssVariable(widgetShadow)\n};\nexport const defaultButtonStyles = {\n    buttonForeground: asCssVariable(buttonForeground),\n    buttonSeparator: asCssVariable(buttonSeparator),\n    buttonBackground: asCssVariable(buttonBackground),\n    buttonHoverBackground: asCssVariable(buttonHoverBackground),\n    buttonSecondaryForeground: asCssVariable(buttonSecondaryForeground),\n    buttonSecondaryBackground: asCssVariable(buttonSecondaryBackground),\n    buttonSecondaryHoverBackground: asCssVariable(buttonSecondaryHoverBackground),\n    buttonBorder: asCssVariable(buttonBorder),\n};\nexport const defaultProgressBarStyles = {\n    progressBarBackground: asCssVariable(progressBarBackground)\n};\nexport const defaultToggleStyles = {\n    inputActiveOptionBorder: asCssVariable(inputActiveOptionBorder),\n    inputActiveOptionForeground: asCssVariable(inputActiveOptionForeground),\n    inputActiveOptionBackground: asCssVariable(inputActiveOptionBackground)\n};\nexport const defaultCheckboxStyles = {\n    checkboxBackground: asCssVariable(checkboxBackground),\n    checkboxBorder: asCssVariable(checkboxBorder),\n    checkboxForeground: asCssVariable(checkboxForeground)\n};\nexport const defaultDialogStyles = {\n    dialogBackground: asCssVariable(editorWidgetBackground),\n    dialogForeground: asCssVariable(editorWidgetForeground),\n    dialogShadow: asCssVariable(widgetShadow),\n    dialogBorder: asCssVariable(contrastBorder),\n    errorIconForeground: asCssVariable(problemsErrorIconForeground),\n    warningIconForeground: asCssVariable(problemsWarningIconForeground),\n    infoIconForeground: asCssVariable(problemsInfoIconForeground),\n    textLinkForeground: asCssVariable(textLinkForeground)\n};\nexport const defaultInputBoxStyles = {\n    inputBackground: asCssVariable(inputBackground),\n    inputForeground: asCssVariable(inputForeground),\n    inputBorder: asCssVariable(inputBorder),\n    inputValidationInfoBorder: asCssVariable(inputValidationInfoBorder),\n    inputValidationInfoBackground: asCssVariable(inputValidationInfoBackground),\n    inputValidationInfoForeground: asCssVariable(inputValidationInfoForeground),\n    inputValidationWarningBorder: asCssVariable(inputValidationWarningBorder),\n    inputValidationWarningBackground: asCssVariable(inputValidationWarningBackground),\n    inputValidationWarningForeground: asCssVariable(inputValidationWarningForeground),\n    inputValidationErrorBorder: asCssVariable(inputValidationErrorBorder),\n    inputValidationErrorBackground: asCssVariable(inputValidationErrorBackground),\n    inputValidationErrorForeground: asCssVariable(inputValidationErrorForeground)\n};\nexport const defaultFindWidgetStyles = {\n    listFilterWidgetBackground: asCssVariable(listFilterWidgetBackground),\n    listFilterWidgetOutline: asCssVariable(listFilterWidgetOutline),\n    listFilterWidgetNoMatchesOutline: asCssVariable(listFilterWidgetNoMatchesOutline),\n    listFilterWidgetShadow: asCssVariable(listFilterWidgetShadow),\n    inputBoxStyles: defaultInputBoxStyles,\n    toggleStyles: defaultToggleStyles\n};\nexport const defaultCountBadgeStyles = {\n    badgeBackground: asCssVariable(badgeBackground),\n    badgeForeground: asCssVariable(badgeForeground),\n    badgeBorder: asCssVariable(contrastBorder)\n};\nexport const defaultBreadcrumbsWidgetStyles = {\n    breadcrumbsBackground: asCssVariable(breadcrumbsBackground),\n    breadcrumbsForeground: asCssVariable(breadcrumbsForeground),\n    breadcrumbsHoverForeground: asCssVariable(breadcrumbsFocusForeground),\n    breadcrumbsFocusForeground: asCssVariable(breadcrumbsFocusForeground),\n    breadcrumbsFocusAndSelectionForeground: asCssVariable(breadcrumbsActiveSelectionForeground)\n};\nexport const defaultListStyles = {\n    listBackground: undefined,\n    listInactiveFocusForeground: undefined,\n    listFocusBackground: asCssVariable(listFocusBackground),\n    listFocusForeground: asCssVariable(listFocusForeground),\n    listFocusOutline: asCssVariable(listFocusOutline),\n    listActiveSelectionBackground: asCssVariable(listActiveSelectionBackground),\n    listActiveSelectionForeground: asCssVariable(listActiveSelectionForeground),\n    listActiveSelectionIconForeground: asCssVariable(listActiveSelectionIconForeground),\n    listFocusAndSelectionOutline: asCssVariable(listFocusAndSelectionOutline),\n    listFocusAndSelectionBackground: asCssVariable(listActiveSelectionBackground),\n    listFocusAndSelectionForeground: asCssVariable(listActiveSelectionForeground),\n    listInactiveSelectionBackground: asCssVariable(listInactiveSelectionBackground),\n    listInactiveSelectionIconForeground: asCssVariable(listInactiveSelectionIconForeground),\n    listInactiveSelectionForeground: asCssVariable(listInactiveSelectionForeground),\n    listInactiveFocusBackground: asCssVariable(listInactiveFocusBackground),\n    listInactiveFocusOutline: asCssVariable(listInactiveFocusOutline),\n    listHoverBackground: asCssVariable(listHoverBackground),\n    listHoverForeground: asCssVariable(listHoverForeground),\n    listDropBackground: asCssVariable(listDropBackground),\n    listSelectionOutline: asCssVariable(activeContrastBorder),\n    listHoverOutline: asCssVariable(activeContrastBorder),\n    treeIndentGuidesStroke: asCssVariable(treeIndentGuidesStroke),\n    treeInactiveIndentGuidesStroke: asCssVariable(treeInactiveIndentGuidesStroke),\n    tableColumnsBorder: asCssVariable(tableColumnsBorder),\n    tableOddRowsBackgroundColor: asCssVariable(tableOddRowsBackgroundColor),\n};\nexport function getListStyles(override) {\n    return overrideStyles(override, defaultListStyles);\n}\nexport const defaultSelectBoxStyles = {\n    selectBackground: asCssVariable(selectBackground),\n    selectListBackground: asCssVariable(selectListBackground),\n    selectForeground: asCssVariable(selectForeground),\n    decoratorRightForeground: asCssVariable(pickerGroupForeground),\n    selectBorder: asCssVariable(selectBorder),\n    focusBorder: asCssVariable(focusBorder),\n    listFocusBackground: asCssVariable(quickInputListFocusBackground),\n    listInactiveSelectionIconForeground: asCssVariable(quickInputListFocusIconForeground),\n    listFocusForeground: asCssVariable(quickInputListFocusForeground),\n    listFocusOutline: asCssVariableWithDefault(activeContrastBorder, Color.transparent.toString()),\n    listHoverBackground: asCssVariable(listHoverBackground),\n    listHoverForeground: asCssVariable(listHoverForeground),\n    listHoverOutline: asCssVariable(activeContrastBorder),\n    selectListBorder: asCssVariable(editorWidgetBorder),\n    listBackground: undefined,\n    listActiveSelectionBackground: undefined,\n    listActiveSelectionForeground: undefined,\n    listActiveSelectionIconForeground: undefined,\n    listFocusAndSelectionBackground: undefined,\n    listDropBackground: undefined,\n    listInactiveSelectionBackground: undefined,\n    listInactiveSelectionForeground: undefined,\n    listInactiveFocusBackground: undefined,\n    listInactiveFocusOutline: undefined,\n    listSelectionOutline: undefined,\n    listFocusAndSelectionForeground: undefined,\n    listFocusAndSelectionOutline: undefined,\n    listInactiveFocusForeground: undefined,\n    tableColumnsBorder: undefined,\n    tableOddRowsBackgroundColor: undefined,\n    treeIndentGuidesStroke: undefined,\n    treeInactiveIndentGuidesStroke: undefined,\n};\nexport const defaultMenuStyles = {\n    shadowColor: asCssVariable(widgetShadow),\n    borderColor: asCssVariable(menuBorder),\n    foregroundColor: asCssVariable(menuForeground),\n    backgroundColor: asCssVariable(menuBackground),\n    selectionForegroundColor: asCssVariable(menuSelectionForeground),\n    selectionBackgroundColor: asCssVariable(menuSelectionBackground),\n    selectionBorderColor: asCssVariable(menuSelectionBorder),\n    separatorColor: asCssVariable(menuSeparatorBackground),\n    scrollbarShadow: asCssVariable(scrollbarShadow),\n    scrollbarSliderBackground: asCssVariable(scrollbarSliderBackground),\n    scrollbarSliderHoverBackground: asCssVariable(scrollbarSliderHoverBackground),\n    scrollbarSliderActiveBackground: asCssVariable(scrollbarSliderActiveBackground)\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { asCSSPropertyValue, asCSSUrl } from '../../../base/browser/dom.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport { getIconRegistry } from '../common/iconRegistry.js';\nexport function getIconsStyleSheet(themeService) {\n    const disposable = new DisposableStore();\n    const onDidChangeEmmiter = disposable.add(new Emitter());\n    const iconRegistry = getIconRegistry();\n    disposable.add(iconRegistry.onDidChange(() => onDidChangeEmmiter.fire()));\n    if (themeService) {\n        disposable.add(themeService.onDidProductIconThemeChange(() => onDidChangeEmmiter.fire()));\n    }\n    return {\n        dispose: () => disposable.dispose(),\n        onDidChange: onDidChangeEmmiter.event,\n        getCSS() {\n            const productIconTheme = themeService ? themeService.getProductIconTheme() : new UnthemedProductIconTheme();\n            const usedFontIds = {};\n            const formatIconRule = (contribution) => {\n                const definition = productIconTheme.getIcon(contribution);\n                if (!definition) {\n                    return undefined;\n                }\n                const fontContribution = definition.font;\n                if (fontContribution) {\n                    usedFontIds[fontContribution.id] = fontContribution.definition;\n                    return `.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; font-family: ${asCSSPropertyValue(fontContribution.id)}; }`;\n                }\n                // default font (codicon)\n                return `.codicon-${contribution.id}:before { content: '${definition.fontCharacter}'; }`;\n            };\n            const rules = [];\n            for (const contribution of iconRegistry.getIcons()) {\n                const rule = formatIconRule(contribution);\n                if (rule) {\n                    rules.push(rule);\n                }\n            }\n            for (const id in usedFontIds) {\n                const definition = usedFontIds[id];\n                const fontWeight = definition.weight ? `font-weight: ${definition.weight};` : '';\n                const fontStyle = definition.style ? `font-style: ${definition.style};` : '';\n                const src = definition.src.map(l => `${asCSSUrl(l.location)} format('${l.format}')`).join(', ');\n                rules.push(`@font-face { src: ${src}; font-family: ${asCSSPropertyValue(id)};${fontWeight}${fontStyle} font-display: block; }`);\n            }\n            return rules.join('\\n');\n        }\n    };\n}\nexport class UnthemedProductIconTheme {\n    getIcon(contribution) {\n        const iconRegistry = getIconRegistry();\n        let definition = contribution.defaults;\n        while (ThemeIcon.isThemeIcon(definition)) {\n            const c = iconRegistry.getIcon(definition.id);\n            if (!c) {\n                return undefined;\n            }\n            definition = c.defaults;\n        }\n        return definition;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { assertNever } from '../../../base/common/assert.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\n/**\n * Returns the css variable name for the given color identifier. Dots (`.`) are replaced with hyphens (`-`) and\n * everything is prefixed with `--vscode-`.\n *\n * @sample `editorSuggestWidget.background` is `--vscode-editorSuggestWidget-background`.\n */\nexport function asCssVariableName(colorIdent) {\n    return `--vscode-${colorIdent.replace(/\\./g, '-')}`;\n}\nexport function asCssVariable(color) {\n    return `var(${asCssVariableName(color)})`;\n}\nexport function asCssVariableWithDefault(color, defaultCssValue) {\n    return `var(${asCssVariableName(color)}, ${defaultCssValue})`;\n}\n// color registry\nexport const Extensions = {\n    ColorContribution: 'base.contributions.colors'\n};\nclass ColorRegistry {\n    constructor() {\n        this._onDidChangeSchema = new Emitter();\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\n        this.colorSchema = { type: 'object', properties: {} };\n        this.colorReferenceSchema = { type: 'string', enum: [], enumDescriptions: [] };\n        this.colorsById = {};\n    }\n    registerColor(id, defaults, description, needsTransparency = false, deprecationMessage) {\n        const colorContribution = { id, description, defaults, needsTransparency, deprecationMessage };\n        this.colorsById[id] = colorContribution;\n        const propertySchema = { type: 'string', description, format: 'color-hex', defaultSnippets: [{ body: '${1:#ff0000}' }] };\n        if (deprecationMessage) {\n            propertySchema.deprecationMessage = deprecationMessage;\n        }\n        this.colorSchema.properties[id] = propertySchema;\n        this.colorReferenceSchema.enum.push(id);\n        this.colorReferenceSchema.enumDescriptions.push(description);\n        this._onDidChangeSchema.fire();\n        return id;\n    }\n    getColors() {\n        return Object.keys(this.colorsById).map(id => this.colorsById[id]);\n    }\n    resolveDefaultColor(id, theme) {\n        const colorDesc = this.colorsById[id];\n        if (colorDesc && colorDesc.defaults) {\n            const colorValue = colorDesc.defaults[theme.type];\n            return resolveColorValue(colorValue, theme);\n        }\n        return undefined;\n    }\n    getColorSchema() {\n        return this.colorSchema;\n    }\n    toString() {\n        const sorter = (a, b) => {\n            const cat1 = a.indexOf('.') === -1 ? 0 : 1;\n            const cat2 = b.indexOf('.') === -1 ? 0 : 1;\n            if (cat1 !== cat2) {\n                return cat1 - cat2;\n            }\n            return a.localeCompare(b);\n        };\n        return Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\n    }\n}\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n    return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n}\n// ----- base colors\nexport const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport const disabledForeground = registerColor('disabledForeground', { dark: '#CCCCCC80', light: '#61616180', hcDark: '#A5A5A5', hcLight: '#7F7F7F' }, nls.localize('disabledForeground', \"Overall foreground for disabled elements. This color is only used if not overridden by a component.\"));\nexport const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport const descriptionForeground = registerColor('descriptionForeground', { light: '#717171', dark: transparent(foreground, 0.7), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('descriptionForeground', \"Foreground color for description text providing additional information, for example for a label.\"));\nexport const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('iconForeground', \"The default color for icons in the workbench.\"));\nexport const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hcDark: '#F38518', hcLight: '#006BBD' }, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hcDark: '#6FC3DF', hcLight: '#0F4A85' }, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport const selectionBackground = registerColor('selection.background', { light: null, dark: null, hcDark: null, hcLight: null }, nls.localize('selectionBackground', \"The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.\"));\n// ------ text colors\nexport const textSeparatorForeground = registerColor('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hcDark: Color.black, hcLight: '#292929' }, nls.localize('textSeparatorForeground', \"Color for text separators.\"));\nexport const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hcDark: '#3794FF', hcLight: '#0F4A85' }, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport const textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hcDark: '#3794FF', hcLight: '#0F4A85' }, nls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\nexport const textPreformatForeground = registerColor('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hcDark: '#D7BA7D', hcLight: '#292929' }, nls.localize('textPreformatForeground', \"Foreground color for preformatted text segments.\"));\nexport const textBlockQuoteBackground = registerColor('textBlockQuote.background', { light: '#7f7f7f1a', dark: '#7f7f7f1a', hcDark: null, hcLight: '#F2F2F2' }, nls.localize('textBlockQuoteBackground', \"Background color for block quotes in text.\"));\nexport const textBlockQuoteBorder = registerColor('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hcDark: Color.white, hcLight: '#292929' }, nls.localize('textBlockQuoteBorder', \"Border color for block quotes in text.\"));\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hcDark: Color.black, hcLight: '#F2F2F2' }, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\n// ----- widgets\nexport const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hcDark: null, hcLight: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport const widgetBorder = registerColor('widget.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('widgetBorder', 'Border color of widgets such as find/replace inside the editor.'));\nexport const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC', light: '#007ACC', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', { dark: '#5a5d5e80', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('inputOption.hoverBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('inputOption.activeBackground', \"Background hover color of options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hcDark: foreground, hcLight: foreground }, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: transparent(foreground, 0.5), dark: transparent(foreground, 0.5), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\nexport const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownListBackground', \"Dropdown list background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: foreground, hcDark: Color.white, hcLight: foreground }, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('dropdownBorder', \"Dropdown border.\"));\nexport const buttonForeground = registerColor('button.foreground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: Color.white }, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonSeparator = registerColor('button.separator', { dark: transparent(buttonForeground, .4), light: transparent(buttonForeground, .4), hcDark: transparent(buttonForeground, .4), hcLight: transparent(buttonForeground, .4) }, nls.localize('buttonSeparator', \"Button separator color.\"));\nexport const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hcDark: null, hcLight: '#0F4A85' }, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hcDark: buttonBackground, hcLight: buttonBackground }, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const buttonBorder = registerColor('button.border', { dark: contrastBorder, light: contrastBorder, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('buttonBorder', \"Button border color.\"));\nexport const buttonSecondaryForeground = registerColor('button.secondaryForeground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: foreground }, nls.localize('buttonSecondaryForeground', \"Secondary button foreground color.\"));\nexport const buttonSecondaryBackground = registerColor('button.secondaryBackground', { dark: '#3A3D41', light: '#5F6A79', hcDark: null, hcLight: Color.white }, nls.localize('buttonSecondaryBackground', \"Secondary button background color.\"));\nexport const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', { dark: lighten(buttonSecondaryBackground, 0.2), light: darken(buttonSecondaryBackground, 0.2), hcDark: null, hcLight: null }, nls.localize('buttonSecondaryHoverBackground', \"Secondary button background color when hovering.\"));\nexport const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hcDark: Color.black, hcLight: '#0F4A85' }, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hcDark: Color.white, hcLight: Color.white }, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\nexport const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hcDark: null, hcLight: null }, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hcDark: transparent(contrastBorder, 0.6), hcLight: transparent(contrastBorder, 0.4) }, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hcDark: transparent(contrastBorder, 0.8), hcLight: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\nexport const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\nexport const editorErrorBackground = registerColor('editorError.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hcDark: Color.fromHex('#E47777').transparent(0.8), hcLight: '#B5200D' }, nls.localize('errorBorder', 'If set, color of double underlines for errors in the editor.'));\nexport const editorWarningBackground = registerColor('editorWarning.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hcDark: '#FFD370', hcLight: '#895503' }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hcDark: Color.fromHex('#FFCC00').transparent(0.8), hcLight: Color.fromHex('#FFCC00').transparent(0.8) }, nls.localize('warningBorder', 'If set, color of double underlines for warnings in the editor.'));\nexport const editorInfoBackground = registerColor('editorInfo.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hcDark: '#3794FF', hcLight: '#1a85ff' }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hcDark: Color.fromHex('#3794FF').transparent(0.8), hcLight: '#292929' }, nls.localize('infoBorder', 'If set, color of double underlines for infos in the editor.'));\nexport const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hcDark: null, hcLight: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hcDark: Color.fromHex('#eeeeee').transparent(0.8), hcLight: '#292929' }, nls.localize('hintBorder', 'If set, color of double underlines for hints in the editor.'));\nexport const sashHoverBorder = registerColor('sash.hoverBorder', { dark: focusBorder, light: focusBorder, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('sashActiveBorder', \"Border color of active sashes.\"));\n/**\n * Editor background color.\n */\nexport const editorBackground = registerColor('editor.background', { light: '#ffffff', dark: '#1E1E1E', hcDark: Color.black, hcLight: Color.white }, nls.localize('editorBackground', \"Editor background color.\"));\n/**\n * Editor foreground color.\n */\nexport const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hcDark: Color.white, hcLight: foreground }, nls.localize('editorForeground', \"Editor default foreground color.\"));\n/**\n * Sticky scroll\n */\nexport const editorStickyScrollBackground = registerColor('editorStickyScroll.background', { light: editorBackground, dark: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('editorStickyScrollBackground', \"Sticky scroll background color for the editor\"));\nexport const editorStickyScrollHoverBackground = registerColor('editorStickyScrollHover.background', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('editorStickyScrollHoverBackground', \"Sticky scroll on hover background color for the editor\"));\n/**\n * Editor widgets\n */\nexport const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hcDark: '#0C141F', hcLight: Color.white }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', { light: null, dark: null, hcDark: null, hcLight: null }, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\n/**\n * Quick pick widget\n */\nexport const quickInputBackground = registerColor('quickInput.background', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('pickerBackground', \"Quick picker background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputForeground = registerColor('quickInput.foreground', { dark: editorWidgetForeground, light: editorWidgetForeground, hcDark: editorWidgetForeground, hcLight: editorWidgetForeground }, nls.localize('pickerForeground', \"Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: new Color(new RGBA(255, 255, 255, 0.105)), light: new Color(new RGBA(0, 0, 0, 0.06)), hcDark: '#000000', hcLight: Color.white }, nls.localize('pickerTitleBackground', \"Quick picker title background color. The quick picker widget is the container for pickers like the command palette.\"));\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\n/**\n * Keybinding label\n */\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: new Color(new RGBA(128, 128, 128, 0.17)), light: new Color(new RGBA(221, 221, 221, 0.4)), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: Color.fromHex('#CCCCCC'), light: Color.fromHex('#555555'), hcDark: Color.white, hcLight: foreground }, nls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: new Color(new RGBA(51, 51, 51, 0.6)), light: new Color(new RGBA(204, 204, 204, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: contrastBorder }, nls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: new Color(new RGBA(68, 68, 68, 0.6)), light: new Color(new RGBA(187, 187, 187, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: foreground }, nls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));\n/**\n * Editor selection colors.\n */\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hcDark: '#f3f518', hcLight: '#0F4A85' }, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hcDark: '#000000', hcLight: Color.white }, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hcDark: transparent(editorSelectionBackground, 0.7), hcLight: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hcDark: null, hcLight: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n/**\n * Editor find match colors.\n */\nexport const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hcDark: null, hcLight: null }, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hcDark: null, hcLight: null }, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hcDark: null, hcLight: null }, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hcDark: transparent(activeContrastBorder, 0.4), hcLight: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n/**\n * Search Editor query match colors.\n *\n * Distinct from normal editor find match to allow for better differentiation\n */\nexport const searchEditorFindMatch = registerColor('searchEditor.findMatchBackground', { light: transparent(editorFindMatchHighlight, 0.66), dark: transparent(editorFindMatchHighlight, 0.66), hcDark: editorFindMatchHighlight, hcLight: editorFindMatchHighlight }, nls.localize('searchEditor.queryMatch', \"Color of the Search Editor query matches.\"));\nexport const searchEditorFindMatchBorder = registerColor('searchEditor.findMatchBorder', { light: transparent(editorFindMatchHighlightBorder, 0.66), dark: transparent(editorFindMatchHighlightBorder, 0.66), hcDark: editorFindMatchHighlightBorder, hcLight: editorFindMatchHighlightBorder }, nls.localize('searchEditor.editorFindMatchBorder', \"Border color of the Search Editor query matches.\"));\n/**\n * Search Viewlet colors.\n */\nexport const searchResultsInfoForeground = registerColor('search.resultsInfoForeground', { light: foreground, dark: transparent(foreground, 0.65), hcDark: foreground, hcLight: foreground }, nls.localize('search.resultsInfoForeground', \"Color of the text in the search viewlet's completion message.\"));\n/**\n * Editor hover\n */\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hcDark: '#ADD6FF26', hcLight: null }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', { light: editorWidgetForeground, dark: editorWidgetForeground, hcDark: editorWidgetForeground, hcLight: editorWidgetForeground }, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', { light: editorWidgetBorder, dark: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n/**\n * Editor link colors\n */\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hcDark: Color.cyan, hcLight: '#292929' }, nls.localize('activeLinkForeground', 'Color of active links.'));\n/**\n * Inline hints\n */\nexport const editorInlayHintForeground = registerColor('editorInlayHint.foreground', { dark: '#969696', light: '#969696', hcDark: Color.white, hcLight: Color.black }, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\nexport const editorInlayHintBackground = registerColor('editorInlayHint.background', { dark: transparent(badgeBackground, .10), light: transparent(badgeBackground, .10), hcDark: transparent(Color.white, .10), hcLight: transparent(badgeBackground, .10) }, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));\nexport const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hcDark: editorInlayHintForeground, hcLight: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\nexport const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hcDark: editorInlayHintBackground, hcLight: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\nexport const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hcDark: editorInlayHintForeground, hcLight: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\nexport const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hcDark: editorInlayHintBackground, hcLight: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n/**\n * Editor lightbulb icon colors\n */\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hcDark: '#FFCC00', hcLight: '#007ACC' }, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hcDark: '#75BEFF', hcLight: '#007ACC' }, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\n/**\n * Diff Editor Colors\n */\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, .2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, .2));\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: '#9ccc2c33', light: '#9ccc2c40', hcDark: null, hcLight: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: '#ff000033', light: '#ff000033', hcDark: null, hcLight: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLine = registerColor('diffEditor.insertedLineBackground', { dark: defaultInsertColor, light: defaultInsertColor, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemovedLine = registerColor('diffEditor.removedLineBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLineGutter = registerColor('diffEditorGutter.insertedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));\nexport const diffRemovedLineGutter = registerColor('diffEditorGutter.removedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));\nexport const diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));\nexport const diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hcDark: '#33ff2eff', hcLight: '#374E06' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hcDark: '#FF008F', hcLight: '#AD0707' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hcDark: null, hcLight: null }, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\nexport const diffUnchangedRegionBackground = registerColor('diffEditor.unchangedRegionBackground', { dark: '#3e3e3e', light: '#e4e4e4', hcDark: null, hcLight: null }, nls.localize('diffEditor.unchangedRegionBackground', \"The background color of unchanged blocks in the diff editor.\"));\nexport const diffUnchangedRegionForeground = registerColor('diffEditor.unchangedRegionForeground', { dark: '#a3a2a2', light: '#4d4c4c', hcDark: null, hcLight: null }, nls.localize('diffEditor.unchangedRegionForeground', \"The foreground color of unchanged blocks in the diff editor.\"));\nexport const diffUnchangedTextBackground = registerColor('diffEditor.unchangedCodeBackground', { dark: '#74747429', light: '#b8b8b829', hcDark: null, hcLight: null }, nls.localize('diffEditor.unchangedCodeBackground', \"The background color of unchanged code in the diff editor.\"));\n/**\n * List and tree colors\n */\nexport const listFocusBackground = registerColor('list.focusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusForeground = registerColor('list.focusForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusOutline = registerColor('list.focusOutline', { dark: focusBorder, light: focusBorder, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('listFocusOutline', \"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusAndSelectionOutline = registerColor('list.focusAndSelectionOutline', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusAndSelectionOutline', \"List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveFocusOutline', \"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: Color.white.transparent(0.1), hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport const listHoverForeground = registerColor('list.hoverForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport const listDropBackground = registerColor('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null }, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\nexport const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#2AAAFF', light: '#0066BF', hcDark: focusBorder, hcLight: focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', { dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#BBE7FF'), hcDark: listHighlightForeground, hcLight: listHighlightForeground }, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));\nexport const listInvalidItemForeground = registerColor('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' }, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));\nexport const listErrorForeground = registerColor('list.errorForeground', { dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));\nexport const listWarningForeground = registerColor('list.warningForeground', { dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: darken(editorWidgetBackground, 0), dark: lighten(editorWidgetBackground, 0), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport const listFilterWidgetShadow = registerColor('listFilterWidget.shadow', { dark: widgetShadow, light: widgetShadow, hcDark: widgetShadow, hcLight: widgetShadow }, nls.localize('listFilterWidgetShadow', 'Shadow color of the type filter widget in lists and trees.'));\nexport const listFilterMatchHighlight = registerColor('list.filterMatchBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));\nexport const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder', { dark: editorFindMatchHighlightBorder, light: editorFindMatchHighlightBorder, hcDark: contrastBorder, hcLight: activeContrastBorder }, nls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' }, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\nexport const treeInactiveIndentGuidesStroke = registerColor('tree.inactiveIndentGuidesStroke', { dark: transparent(treeIndentGuidesStroke, 0.4), light: transparent(treeIndentGuidesStroke, 0.4), hcDark: transparent(treeIndentGuidesStroke, 0.4), hcLight: transparent(treeIndentGuidesStroke, 0.4) }, nls.localize('treeInactiveIndentGuidesStroke', \"Tree stroke color for the indentation guides that are not active.\"));\nexport const tableColumnsBorder = registerColor('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null }, nls.localize('tableColumnsBorder', \"Table border color between columns.\"));\nexport const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground', { dark: transparent(foreground, 0.04), light: transparent(foreground, 0.04), hcDark: null, hcLight: null }, nls.localize('tableOddRowsBackgroundColor', \"Background color for odd table rows.\"));\nexport const listDeemphasizedForeground = registerColor('list.deemphasizedForeground', { dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' }, nls.localize('listDeemphasizedForeground', \"List/Tree foreground color for items that are deemphasized. \"));\n/**\n * Checkboxes\n */\nexport const checkboxBackground = registerColor('checkbox.background', { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, nls.localize('checkbox.background', \"Background color of checkbox widget.\"));\nexport const checkboxSelectBackground = registerColor('checkbox.selectBackground', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('checkbox.select.background', \"Background color of checkbox widget when the element it's in is selected.\"));\nexport const checkboxForeground = registerColor('checkbox.foreground', { dark: selectForeground, light: selectForeground, hcDark: selectForeground, hcLight: selectForeground }, nls.localize('checkbox.foreground', \"Foreground color of checkbox widget.\"));\nexport const checkboxBorder = registerColor('checkbox.border', { dark: selectBorder, light: selectBorder, hcDark: selectBorder, hcLight: selectBorder }, nls.localize('checkbox.border', \"Border color of checkbox widget.\"));\nexport const checkboxSelectBorder = registerColor('checkbox.selectBorder', { dark: iconForeground, light: iconForeground, hcDark: iconForeground, hcLight: iconForeground }, nls.localize('checkbox.select.border', \"Border color of checkbox widget when the element it's in is selected.\"));\n/**\n * Quick pick widget (dependent on List and tree colors)\n */\nexport const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, '', undefined, nls.localize('quickInput.list.focusBackground deprecation', \"Please use quickInputList.focusBackground instead\"));\nexport const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hcDark: listActiveSelectionForeground, hcLight: listActiveSelectionForeground }, nls.localize('quickInput.listFocusForeground', \"Quick picker foreground color for the focused item.\"));\nexport const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', { dark: listActiveSelectionIconForeground, light: listActiveSelectionIconForeground, hcDark: listActiveSelectionIconForeground, hcLight: listActiveSelectionIconForeground }, nls.localize('quickInput.listFocusIconForeground', \"Quick picker icon foreground color for the focused item.\"));\nexport const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', { dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), hcDark: null, hcLight: null }, nls.localize('quickInput.listFocusBackground', \"Quick picker background color for the focused item.\"));\n/**\n * Menu colors\n */\nexport const menuBorder = registerColor('menu.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuBorder', \"Border color of menus.\"));\nexport const menuForeground = registerColor('menu.foreground', { dark: selectForeground, light: selectForeground, hcDark: selectForeground, hcLight: selectForeground }, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport const menuBackground = registerColor('menu.background', { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hcDark: listActiveSelectionForeground, hcLight: listActiveSelectionForeground }, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', { dark: listActiveSelectionBackground, light: listActiveSelectionBackground, hcDark: listActiveSelectionBackground, hcLight: listActiveSelectionBackground }, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#606060', light: '#D4D4D4', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n/**\n * Toolbar colors\n */\nexport const toolbarHoverBackground = registerColor('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\nexport const toolbarHoverOutline = registerColor('toolbar.hoverOutline', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('toolbarHoverOutline', \"Toolbar outline when hovering over actions using the mouse\"));\nexport const toolbarActiveBackground = registerColor('toolbar.activeBackground', { dark: lighten(toolbarHoverBackground, 0.1), light: darken(toolbarHoverBackground, 0.1), hcDark: null, hcLight: null }, nls.localize('toolbarActiveBackground', \"Toolbar background when holding the mouse over actions\"));\n/**\n * Snippet placeholder colors\n */\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hcDark: new Color(new RGBA(124, 124, 124, 0.3)), hcLight: new Color(new RGBA(10, 50, 100, 0.2)) }, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hcDark: '#525252', hcLight: '#292929' }, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\n/**\n * Breadcrumb colors\n */\nexport const breadcrumbsForeground = registerColor('breadcrumb.foreground', { light: transparent(foreground, 0.8), dark: transparent(foreground, 0.8), hcDark: transparent(foreground, 0.8), hcLight: transparent(foreground, 0.8) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsBackground = registerColor('breadcrumb.background', { light: editorBackground, dark: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\nexport const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsSelectedForeground', \"Color of selected breadcrumb items.\"));\nexport const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n/**\n * Merge-conflict colors\n */\nconst headerTransparency = 0.5;\nconst currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);\nconst incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparency);\nconst commonBaseColor = Color.fromHex('#606060').transparent(0.4);\nconst contentTransparency = 0.4;\nconst rulerTransparency = 1;\nexport const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', { dark: transparent(mergeCurrentHeaderBackground, contentTransparency), light: transparent(mergeCurrentHeaderBackground, contentTransparency), hcDark: transparent(mergeCurrentHeaderBackground, contentTransparency), hcLight: transparent(mergeCurrentHeaderBackground, contentTransparency) }, nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', { dark: transparent(mergeIncomingHeaderBackground, contentTransparency), light: transparent(mergeIncomingHeaderBackground, contentTransparency), hcDark: transparent(mergeIncomingHeaderBackground, contentTransparency), hcLight: transparent(mergeIncomingHeaderBackground, contentTransparency) }, nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonContentBackground = registerColor('merge.commonContentBackground', { dark: transparent(mergeCommonHeaderBackground, contentTransparency), light: transparent(mergeCommonHeaderBackground, contentTransparency), hcDark: transparent(mergeCommonHeaderBackground, contentTransparency), hcLight: transparent(mergeCommonHeaderBackground, contentTransparency) }, nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeBorder = registerColor('merge.border', { dark: null, light: null, hcDark: '#C3DF6F', hcLight: '#007ACC' }, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\nexport const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', { dark: transparent(mergeCurrentHeaderBackground, rulerTransparency), light: transparent(mergeCurrentHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', { dark: transparent(mergeIncomingHeaderBackground, rulerTransparency), light: transparent(mergeIncomingHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', { dark: transparent(mergeCommonHeaderBackground, rulerTransparency), light: transparent(mergeCommonHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hcDark: '#AB5A00', hcLight: '' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hcDark: '#A0A0A0CC', hcLight: '#A0A0A0CC' }, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hcDark: '#AB5A00', hcLight: '#0F4A85' }, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);\nexport const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', { light: '#c9c9c9', dark: '#676767', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);\nexport const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);\nexport const minimapInfo = registerColor('minimap.infoHighlight', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoBorder, hcLight: editorInfoBorder }, nls.localize('minimapInfo', 'Minimap marker color for infos.'));\nexport const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));\nexport const minimapError = registerColor('minimap.errorHighlight', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('minimapError', 'Minimap marker color for errors.'));\nexport const minimapBackground = registerColor('minimap.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('minimapBackground', \"Minimap background color.\"));\nexport const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', { dark: Color.fromHex('#000f'), light: Color.fromHex('#000f'), hcDark: Color.fromHex('#000f'), hcLight: Color.fromHex('#000f') }, nls.localize('minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, \"#000000c0\" will render the elements with 75% opacity.'));\nexport const minimapSliderBackground = registerColor('minimapSlider.background', { light: transparent(scrollbarSliderBackground, 0.5), dark: transparent(scrollbarSliderBackground, 0.5), hcDark: transparent(scrollbarSliderBackground, 0.5), hcLight: transparent(scrollbarSliderBackground, 0.5) }, nls.localize('minimapSliderBackground', \"Minimap slider background color.\"));\nexport const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', { light: transparent(scrollbarSliderHoverBackground, 0.5), dark: transparent(scrollbarSliderHoverBackground, 0.5), hcDark: transparent(scrollbarSliderHoverBackground, 0.5), hcLight: transparent(scrollbarSliderHoverBackground, 0.5) }, nls.localize('minimapSliderHoverBackground', \"Minimap slider background color when hovering.\"));\nexport const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', { light: transparent(scrollbarSliderActiveBackground, 0.5), dark: transparent(scrollbarSliderActiveBackground, 0.5), hcDark: transparent(scrollbarSliderActiveBackground, 0.5), hcLight: transparent(scrollbarSliderActiveBackground, 0.5) }, nls.localize('minimapSliderActiveBackground', \"Minimap slider background color when clicked on.\"));\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', { dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorErrorForeground, hcLight: editorErrorForeground }, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningForeground, hcLight: editorWarningForeground }, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoForeground, hcLight: editorInfoForeground }, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\n/**\n * Chart colors\n */\nexport const chartsForeground = registerColor('charts.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('chartsForeground', \"The foreground color used in charts.\"));\nexport const chartsLines = registerColor('charts.lines', { dark: transparent(foreground, .5), light: transparent(foreground, .5), hcDark: transparent(foreground, .5), hcLight: transparent(foreground, .5) }, nls.localize('chartsLines', \"The color used for horizontal lines in charts.\"));\nexport const chartsRed = registerColor('charts.red', { dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorErrorForeground, hcLight: editorErrorForeground }, nls.localize('chartsRed', \"The red color used in chart visualizations.\"));\nexport const chartsBlue = registerColor('charts.blue', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoForeground, hcLight: editorInfoForeground }, nls.localize('chartsBlue', \"The blue color used in chart visualizations.\"));\nexport const chartsYellow = registerColor('charts.yellow', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningForeground, hcLight: editorWarningForeground }, nls.localize('chartsYellow', \"The yellow color used in chart visualizations.\"));\nexport const chartsOrange = registerColor('charts.orange', { dark: minimapFindMatch, light: minimapFindMatch, hcDark: minimapFindMatch, hcLight: minimapFindMatch }, nls.localize('chartsOrange', \"The orange color used in chart visualizations.\"));\nexport const chartsGreen = registerColor('charts.green', { dark: '#89D185', light: '#388A34', hcDark: '#89D185', hcLight: '#374e06' }, nls.localize('chartsGreen', \"The green color used in chart visualizations.\"));\nexport const chartsPurple = registerColor('charts.purple', { dark: '#B180D7', light: '#652D90', hcDark: '#B180D7', hcLight: '#652D90' }, nls.localize('chartsPurple', \"The purple color used in chart visualizations.\"));\n// ----- color functions\nexport function executeTransform(transform, theme) {\n    var _a, _b, _c, _d;\n    switch (transform.op) {\n        case 0 /* ColorTransformType.Darken */:\n            return (_a = resolveColorValue(transform.value, theme)) === null || _a === void 0 ? void 0 : _a.darken(transform.factor);\n        case 1 /* ColorTransformType.Lighten */:\n            return (_b = resolveColorValue(transform.value, theme)) === null || _b === void 0 ? void 0 : _b.lighten(transform.factor);\n        case 2 /* ColorTransformType.Transparent */:\n            return (_c = resolveColorValue(transform.value, theme)) === null || _c === void 0 ? void 0 : _c.transparent(transform.factor);\n        case 3 /* ColorTransformType.Opaque */: {\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return resolveColorValue(transform.value, theme);\n            }\n            return (_d = resolveColorValue(transform.value, theme)) === null || _d === void 0 ? void 0 : _d.makeOpaque(backgroundColor);\n        }\n        case 4 /* ColorTransformType.OneOf */:\n            for (const candidate of transform.values) {\n                const color = resolveColorValue(candidate, theme);\n                if (color) {\n                    return color;\n                }\n            }\n            return undefined;\n        case 6 /* ColorTransformType.IfDefinedThenElse */:\n            return resolveColorValue(theme.defines(transform.if) ? transform.then : transform.else, theme);\n        case 5 /* ColorTransformType.LessProminent */: {\n            const from = resolveColorValue(transform.value, theme);\n            if (!from) {\n                return undefined;\n            }\n            const backgroundColor = resolveColorValue(transform.background, theme);\n            if (!backgroundColor) {\n                return from.transparent(transform.factor * transform.transparency);\n            }\n            return from.isDarkerThan(backgroundColor)\n                ? Color.getLighterColor(from, backgroundColor, transform.factor).transparent(transform.transparency)\n                : Color.getDarkerColor(from, backgroundColor, transform.factor).transparent(transform.transparency);\n        }\n        default:\n            throw assertNever(transform);\n    }\n}\nexport function darken(colorValue, factor) {\n    return { op: 0 /* ColorTransformType.Darken */, value: colorValue, factor };\n}\nexport function lighten(colorValue, factor) {\n    return { op: 1 /* ColorTransformType.Lighten */, value: colorValue, factor };\n}\nexport function transparent(colorValue, factor) {\n    return { op: 2 /* ColorTransformType.Transparent */, value: colorValue, factor };\n}\nexport function oneOf(...colorValues) {\n    return { op: 4 /* ColorTransformType.OneOf */, values: colorValues };\n}\nexport function ifDefinedThenElse(ifArg, thenArg, elseArg) {\n    return { op: 6 /* ColorTransformType.IfDefinedThenElse */, if: ifArg, then: thenArg, else: elseArg };\n}\nfunction lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n    return { op: 5 /* ColorTransformType.LessProminent */, value: colorValue, background: backgroundColorValue, factor, transparency };\n}\n// ----- implementation\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\nexport function resolveColorValue(colorValue, theme) {\n    if (colorValue === null) {\n        return undefined;\n    }\n    else if (typeof colorValue === 'string') {\n        if (colorValue[0] === '#') {\n            return Color.fromHex(colorValue);\n        }\n        return theme.getColor(colorValue);\n    }\n    else if (colorValue instanceof Color) {\n        return colorValue;\n    }\n    else if (typeof colorValue === 'object') {\n        return executeTransform(colorValue, theme);\n    }\n    return undefined;\n}\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nconst schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\ncolorRegistry.onDidChangeSchema(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Codicon, getCodiconFontCharacters } from '../../../base/common/codicons.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { isString } from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport * as platform from '../../registry/common/platform.js';\n//  ------ API types\n// icon registry\nexport const Extensions = {\n    IconContribution: 'base.contributions.icons'\n};\nexport var IconContribution;\n(function (IconContribution) {\n    function getDefinition(contribution, registry) {\n        let definition = contribution.defaults;\n        while (ThemeIcon.isThemeIcon(definition)) {\n            const c = iconRegistry.getIcon(definition.id);\n            if (!c) {\n                return undefined;\n            }\n            definition = c.defaults;\n        }\n        return definition;\n    }\n    IconContribution.getDefinition = getDefinition;\n})(IconContribution || (IconContribution = {}));\nexport var IconFontDefinition;\n(function (IconFontDefinition) {\n    function toJSONObject(iconFont) {\n        return {\n            weight: iconFont.weight,\n            style: iconFont.style,\n            src: iconFont.src.map(s => ({ format: s.format, location: s.location.toString() }))\n        };\n    }\n    IconFontDefinition.toJSONObject = toJSONObject;\n    function fromJSONObject(json) {\n        const stringOrUndef = (s) => isString(s) ? s : undefined;\n        if (json && Array.isArray(json.src) && json.src.every((s) => isString(s.format) && isString(s.location))) {\n            return {\n                weight: stringOrUndef(json.weight),\n                style: stringOrUndef(json.style),\n                src: json.src.map((s) => ({ format: s.format, location: URI.parse(s.location) }))\n            };\n        }\n        return undefined;\n    }\n    IconFontDefinition.fromJSONObject = fromJSONObject;\n})(IconFontDefinition || (IconFontDefinition = {}));\nclass IconRegistry {\n    constructor() {\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this.iconSchema = {\n            definitions: {\n                icons: {\n                    type: 'object',\n                    properties: {\n                        fontId: { type: 'string', description: localize('iconDefinition.fontId', 'The id of the font to use. If not set, the font that is defined first is used.') },\n                        fontCharacter: { type: 'string', description: localize('iconDefinition.fontCharacter', 'The font character associated with the icon definition.') }\n                    },\n                    additionalProperties: false,\n                    defaultSnippets: [{ body: { fontCharacter: '\\\\\\\\e030' } }]\n                }\n            },\n            type: 'object',\n            properties: {}\n        };\n        this.iconReferenceSchema = { type: 'string', pattern: `^${ThemeIcon.iconNameExpression}$`, enum: [], enumDescriptions: [] };\n        this.iconsById = {};\n        this.iconFontsById = {};\n    }\n    registerIcon(id, defaults, description, deprecationMessage) {\n        const existing = this.iconsById[id];\n        if (existing) {\n            if (description && !existing.description) {\n                existing.description = description;\n                this.iconSchema.properties[id].markdownDescription = `${description} $(${id})`;\n                const enumIndex = this.iconReferenceSchema.enum.indexOf(id);\n                if (enumIndex !== -1) {\n                    this.iconReferenceSchema.enumDescriptions[enumIndex] = description;\n                }\n                this._onDidChange.fire();\n            }\n            return existing;\n        }\n        const iconContribution = { id, description, defaults, deprecationMessage };\n        this.iconsById[id] = iconContribution;\n        const propertySchema = { $ref: '#/definitions/icons' };\n        if (deprecationMessage) {\n            propertySchema.deprecationMessage = deprecationMessage;\n        }\n        if (description) {\n            propertySchema.markdownDescription = `${description}: $(${id})`;\n        }\n        this.iconSchema.properties[id] = propertySchema;\n        this.iconReferenceSchema.enum.push(id);\n        this.iconReferenceSchema.enumDescriptions.push(description || '');\n        this._onDidChange.fire();\n        return { id };\n    }\n    getIcons() {\n        return Object.keys(this.iconsById).map(id => this.iconsById[id]);\n    }\n    getIcon(id) {\n        return this.iconsById[id];\n    }\n    getIconSchema() {\n        return this.iconSchema;\n    }\n    toString() {\n        const sorter = (i1, i2) => {\n            return i1.id.localeCompare(i2.id);\n        };\n        const classNames = (i) => {\n            while (ThemeIcon.isThemeIcon(i.defaults)) {\n                i = this.iconsById[i.defaults.id];\n            }\n            return `codicon codicon-${i ? i.id : ''}`;\n        };\n        const reference = [];\n        reference.push(`| preview     | identifier                        | default codicon ID                | description`);\n        reference.push(`| ----------- | --------------------------------- | --------------------------------- | --------------------------------- |`);\n        const contributions = Object.keys(this.iconsById).map(key => this.iconsById[key]);\n        for (const i of contributions.filter(i => !!i.description).sort(sorter)) {\n            reference.push(`|<i class=\"${classNames(i)}\"></i>|${i.id}|${ThemeIcon.isThemeIcon(i.defaults) ? i.defaults.id : i.id}|${i.description || ''}|`);\n        }\n        reference.push(`| preview     | identifier                        `);\n        reference.push(`| ----------- | --------------------------------- |`);\n        for (const i of contributions.filter(i => !ThemeIcon.isThemeIcon(i.defaults)).sort(sorter)) {\n            reference.push(`|<i class=\"${classNames(i)}\"></i>|${i.id}|`);\n        }\n        return reference.join('\\n');\n    }\n}\nconst iconRegistry = new IconRegistry();\nplatform.Registry.add(Extensions.IconContribution, iconRegistry);\nexport function registerIcon(id, defaults, description, deprecationMessage) {\n    return iconRegistry.registerIcon(id, defaults, description, deprecationMessage);\n}\nexport function getIconRegistry() {\n    return iconRegistry;\n}\nfunction initialize() {\n    const codiconFontCharacters = getCodiconFontCharacters();\n    for (const icon in codiconFontCharacters) {\n        const fontCharacter = '\\\\' + codiconFontCharacters[icon].toString(16);\n        iconRegistry.registerIcon(icon, { fontCharacter });\n    }\n}\ninitialize();\nexport const iconsSchemaId = 'vscode://schemas/icons';\nconst schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(iconsSchemaId, iconRegistry.getIconSchema());\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(iconsSchemaId), 200);\niconRegistry.onDidChange(() => {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n//setTimeout(_ => console.log(iconRegistry.toString()), 5000);\n// common icons\nexport const widgetClose = registerIcon('widget-close', Codicon.close, localize('widgetClose', 'Icon for the close action in widgets.'));\nexport const gotoPreviousLocation = registerIcon('goto-previous-location', Codicon.arrowUp, localize('previousChangeIcon', 'Icon for goto previous editor location.'));\nexport const gotoNextLocation = registerIcon('goto-next-location', Codicon.arrowDown, localize('nextChangeIcon', 'Icon for goto next editor location.'));\nexport const syncing = ThemeIcon.modify(Codicon.sync, 'spin');\nexport const spinningLoading = ThemeIcon.modify(Codicon.loading, 'spin');\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Color scheme used by the OS and by color themes.\n */\nexport var ColorScheme;\n(function (ColorScheme) {\n    ColorScheme[\"DARK\"] = \"dark\";\n    ColorScheme[\"LIGHT\"] = \"light\";\n    ColorScheme[\"HIGH_CONTRAST_DARK\"] = \"hcDark\";\n    ColorScheme[\"HIGH_CONTRAST_LIGHT\"] = \"hcLight\";\n})(ColorScheme || (ColorScheme = {}));\nexport function isHighContrast(scheme) {\n    return scheme === ColorScheme.HIGH_CONTRAST_DARK || scheme === ColorScheme.HIGH_CONTRAST_LIGHT;\n}\nexport function isDark(scheme) {\n    return scheme === ColorScheme.DARK || scheme === ColorScheme.HIGH_CONTRAST_DARK;\n}\n","import { Emitter } from '../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport * as platform from '../../registry/common/platform.js';\nimport { ColorScheme } from './theme.js';\nexport const IThemeService = createDecorator('themeService');\nexport function themeColorFromId(id) {\n    return { id };\n}\nexport function getThemeTypeSelector(type) {\n    switch (type) {\n        case ColorScheme.DARK: return 'vs-dark';\n        case ColorScheme.HIGH_CONTRAST_DARK: return 'hc-black';\n        case ColorScheme.HIGH_CONTRAST_LIGHT: return 'hc-light';\n        default: return 'vs';\n    }\n}\n// static theming participant\nexport const Extensions = {\n    ThemingContribution: 'base.contributions.theming'\n};\nclass ThemingRegistry {\n    constructor() {\n        this.themingParticipants = [];\n        this.themingParticipants = [];\n        this.onThemingParticipantAddedEmitter = new Emitter();\n    }\n    onColorThemeChange(participant) {\n        this.themingParticipants.push(participant);\n        this.onThemingParticipantAddedEmitter.fire(participant);\n        return toDisposable(() => {\n            const idx = this.themingParticipants.indexOf(participant);\n            this.themingParticipants.splice(idx, 1);\n        });\n    }\n    getThemingParticipants() {\n        return this.themingParticipants;\n    }\n}\nconst themingRegistry = new ThemingRegistry();\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\nexport function registerThemingParticipant(participant) {\n    return themingRegistry.onColorThemeChange(participant);\n}\n/**\n * Utility base class for all themable components.\n */\nexport class Themable extends Disposable {\n    constructor(themeService) {\n        super();\n        this.themeService = themeService;\n        this.theme = themeService.getColorTheme();\n        // Hook up to theme changes\n        this._register(this.themeService.onDidColorThemeChange(theme => this.onThemeChange(theme)));\n    }\n    onThemeChange(theme) {\n        this.theme = theme;\n        this.updateStyles();\n    }\n    updateStyles() {\n        // Subclasses to override\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IUndoRedoService = createDecorator('undoRedoService');\nexport class ResourceEditStackSnapshot {\n    constructor(resource, elements) {\n        this.resource = resource;\n        this.elements = elements;\n    }\n}\nexport class UndoRedoGroup {\n    constructor() {\n        this.id = UndoRedoGroup._ID++;\n        this.order = 1;\n    }\n    nextOrder() {\n        if (this.id === 0) {\n            return 0;\n        }\n        return this.order++;\n    }\n}\nUndoRedoGroup._ID = 0;\nUndoRedoGroup.None = new UndoRedoGroup();\nexport class UndoRedoSource {\n    constructor() {\n        this.id = UndoRedoSource._ID++;\n        this.order = 1;\n    }\n    nextOrder() {\n        if (this.id === 0) {\n            return 0;\n        }\n        return this.order++;\n    }\n}\nUndoRedoSource._ID = 0;\nUndoRedoSource.None = new UndoRedoSource();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Disposable, isDisposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport Severity from '../../../base/common/severity.js';\nimport * as nls from '../../../nls.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { registerSingleton } from '../../instantiation/common/extensions.js';\nimport { INotificationService } from '../../notification/common/notification.js';\nimport { IUndoRedoService, ResourceEditStackSnapshot, UndoRedoGroup, UndoRedoSource } from './undoRedo.js';\nconst DEBUG = false;\nfunction getResourceLabel(resource) {\n    return resource.scheme === Schemas.file ? resource.fsPath : resource.path;\n}\nlet stackElementCounter = 0;\nclass ResourceStackElement {\n    constructor(actual, resourceLabel, strResource, groupId, groupOrder, sourceId, sourceOrder) {\n        this.id = (++stackElementCounter);\n        this.type = 0 /* UndoRedoElementType.Resource */;\n        this.actual = actual;\n        this.label = actual.label;\n        this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n        this.resourceLabel = resourceLabel;\n        this.strResource = strResource;\n        this.resourceLabels = [this.resourceLabel];\n        this.strResources = [this.strResource];\n        this.groupId = groupId;\n        this.groupOrder = groupOrder;\n        this.sourceId = sourceId;\n        this.sourceOrder = sourceOrder;\n        this.isValid = true;\n    }\n    setValid(isValid) {\n        this.isValid = isValid;\n    }\n    toString() {\n        return `[id:${this.id}] [group:${this.groupId}] [${this.isValid ? '  VALID' : 'INVALID'}] ${this.actual.constructor.name} - ${this.actual}`;\n    }\n}\nclass ResourceReasonPair {\n    constructor(resourceLabel, reason) {\n        this.resourceLabel = resourceLabel;\n        this.reason = reason;\n    }\n}\nclass RemovedResources {\n    constructor() {\n        this.elements = new Map();\n    }\n    createMessage() {\n        const externalRemoval = [];\n        const noParallelUniverses = [];\n        for (const [, element] of this.elements) {\n            const dest = (element.reason === 0 /* RemovedResourceReason.ExternalRemoval */\n                ? externalRemoval\n                : noParallelUniverses);\n            dest.push(element.resourceLabel);\n        }\n        const messages = [];\n        if (externalRemoval.length > 0) {\n            messages.push(nls.localize({ key: 'externalRemoval', comment: ['{0} is a list of filenames'] }, \"The following files have been closed and modified on disk: {0}.\", externalRemoval.join(', ')));\n        }\n        if (noParallelUniverses.length > 0) {\n            messages.push(nls.localize({ key: 'noParallelUniverses', comment: ['{0} is a list of filenames'] }, \"The following files have been modified in an incompatible way: {0}.\", noParallelUniverses.join(', ')));\n        }\n        return messages.join('\\n');\n    }\n    get size() {\n        return this.elements.size;\n    }\n    has(strResource) {\n        return this.elements.has(strResource);\n    }\n    set(strResource, value) {\n        this.elements.set(strResource, value);\n    }\n    delete(strResource) {\n        return this.elements.delete(strResource);\n    }\n}\nclass WorkspaceStackElement {\n    constructor(actual, resourceLabels, strResources, groupId, groupOrder, sourceId, sourceOrder) {\n        this.id = (++stackElementCounter);\n        this.type = 1 /* UndoRedoElementType.Workspace */;\n        this.actual = actual;\n        this.label = actual.label;\n        this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n        this.resourceLabels = resourceLabels;\n        this.strResources = strResources;\n        this.groupId = groupId;\n        this.groupOrder = groupOrder;\n        this.sourceId = sourceId;\n        this.sourceOrder = sourceOrder;\n        this.removedResources = null;\n        this.invalidatedResources = null;\n    }\n    canSplit() {\n        return (typeof this.actual.split === 'function');\n    }\n    removeResource(resourceLabel, strResource, reason) {\n        if (!this.removedResources) {\n            this.removedResources = new RemovedResources();\n        }\n        if (!this.removedResources.has(strResource)) {\n            this.removedResources.set(strResource, new ResourceReasonPair(resourceLabel, reason));\n        }\n    }\n    setValid(resourceLabel, strResource, isValid) {\n        if (isValid) {\n            if (this.invalidatedResources) {\n                this.invalidatedResources.delete(strResource);\n                if (this.invalidatedResources.size === 0) {\n                    this.invalidatedResources = null;\n                }\n            }\n        }\n        else {\n            if (!this.invalidatedResources) {\n                this.invalidatedResources = new RemovedResources();\n            }\n            if (!this.invalidatedResources.has(strResource)) {\n                this.invalidatedResources.set(strResource, new ResourceReasonPair(resourceLabel, 0 /* RemovedResourceReason.ExternalRemoval */));\n            }\n        }\n    }\n    toString() {\n        return `[id:${this.id}] [group:${this.groupId}] [${this.invalidatedResources ? 'INVALID' : '  VALID'}] ${this.actual.constructor.name} - ${this.actual}`;\n    }\n}\nclass ResourceEditStack {\n    constructor(resourceLabel, strResource) {\n        this.resourceLabel = resourceLabel;\n        this.strResource = strResource;\n        this._past = [];\n        this._future = [];\n        this.locked = false;\n        this.versionId = 1;\n    }\n    dispose() {\n        for (const element of this._past) {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        for (const element of this._future) {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        this.versionId++;\n    }\n    toString() {\n        const result = [];\n        result.push(`* ${this.strResource}:`);\n        for (let i = 0; i < this._past.length; i++) {\n            result.push(`   * [UNDO] ${this._past[i]}`);\n        }\n        for (let i = this._future.length - 1; i >= 0; i--) {\n            result.push(`   * [REDO] ${this._future[i]}`);\n        }\n        return result.join('\\n');\n    }\n    flushAllElements() {\n        this._past = [];\n        this._future = [];\n        this.versionId++;\n    }\n    _setElementValidFlag(element, isValid) {\n        if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n            element.setValid(this.resourceLabel, this.strResource, isValid);\n        }\n        else {\n            element.setValid(isValid);\n        }\n    }\n    setElementsValidFlag(isValid, filter) {\n        for (const element of this._past) {\n            if (filter(element.actual)) {\n                this._setElementValidFlag(element, isValid);\n            }\n        }\n        for (const element of this._future) {\n            if (filter(element.actual)) {\n                this._setElementValidFlag(element, isValid);\n            }\n        }\n    }\n    pushElement(element) {\n        // remove the future\n        for (const futureElement of this._future) {\n            if (futureElement.type === 1 /* UndoRedoElementType.Workspace */) {\n                futureElement.removeResource(this.resourceLabel, this.strResource, 1 /* RemovedResourceReason.NoParallelUniverses */);\n            }\n        }\n        this._future = [];\n        this._past.push(element);\n        this.versionId++;\n    }\n    createSnapshot(resource) {\n        const elements = [];\n        for (let i = 0, len = this._past.length; i < len; i++) {\n            elements.push(this._past[i].id);\n        }\n        for (let i = this._future.length - 1; i >= 0; i--) {\n            elements.push(this._future[i].id);\n        }\n        return new ResourceEditStackSnapshot(resource, elements);\n    }\n    restoreSnapshot(snapshot) {\n        const snapshotLength = snapshot.elements.length;\n        let isOK = true;\n        let snapshotIndex = 0;\n        let removePastAfter = -1;\n        for (let i = 0, len = this._past.length; i < len; i++, snapshotIndex++) {\n            const element = this._past[i];\n            if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n                isOK = false;\n                removePastAfter = 0;\n            }\n            if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        let removeFutureBefore = -1;\n        for (let i = this._future.length - 1; i >= 0; i--, snapshotIndex++) {\n            const element = this._future[i];\n            if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n                isOK = false;\n                removeFutureBefore = i;\n            }\n            if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        if (removePastAfter !== -1) {\n            this._past = this._past.slice(0, removePastAfter);\n        }\n        if (removeFutureBefore !== -1) {\n            this._future = this._future.slice(removeFutureBefore + 1);\n        }\n        this.versionId++;\n    }\n    getElements() {\n        const past = [];\n        const future = [];\n        for (const element of this._past) {\n            past.push(element.actual);\n        }\n        for (const element of this._future) {\n            future.push(element.actual);\n        }\n        return { past, future };\n    }\n    getClosestPastElement() {\n        if (this._past.length === 0) {\n            return null;\n        }\n        return this._past[this._past.length - 1];\n    }\n    getSecondClosestPastElement() {\n        if (this._past.length < 2) {\n            return null;\n        }\n        return this._past[this._past.length - 2];\n    }\n    getClosestFutureElement() {\n        if (this._future.length === 0) {\n            return null;\n        }\n        return this._future[this._future.length - 1];\n    }\n    hasPastElements() {\n        return (this._past.length > 0);\n    }\n    hasFutureElements() {\n        return (this._future.length > 0);\n    }\n    splitPastWorkspaceElement(toRemove, individualMap) {\n        for (let j = this._past.length - 1; j >= 0; j--) {\n            if (this._past[j] === toRemove) {\n                if (individualMap.has(this.strResource)) {\n                    // gets replaced\n                    this._past[j] = individualMap.get(this.strResource);\n                }\n                else {\n                    // gets deleted\n                    this._past.splice(j, 1);\n                }\n                break;\n            }\n        }\n        this.versionId++;\n    }\n    splitFutureWorkspaceElement(toRemove, individualMap) {\n        for (let j = this._future.length - 1; j >= 0; j--) {\n            if (this._future[j] === toRemove) {\n                if (individualMap.has(this.strResource)) {\n                    // gets replaced\n                    this._future[j] = individualMap.get(this.strResource);\n                }\n                else {\n                    // gets deleted\n                    this._future.splice(j, 1);\n                }\n                break;\n            }\n        }\n        this.versionId++;\n    }\n    moveBackward(element) {\n        this._past.pop();\n        this._future.push(element);\n        this.versionId++;\n    }\n    moveForward(element) {\n        this._future.pop();\n        this._past.push(element);\n        this.versionId++;\n    }\n}\nclass EditStackSnapshot {\n    constructor(editStacks) {\n        this.editStacks = editStacks;\n        this._versionIds = [];\n        for (let i = 0, len = this.editStacks.length; i < len; i++) {\n            this._versionIds[i] = this.editStacks[i].versionId;\n        }\n    }\n    isValid() {\n        for (let i = 0, len = this.editStacks.length; i < len; i++) {\n            if (this._versionIds[i] !== this.editStacks[i].versionId) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nconst missingEditStack = new ResourceEditStack('', '');\nmissingEditStack.locked = true;\nlet UndoRedoService = class UndoRedoService {\n    constructor(_dialogService, _notificationService) {\n        this._dialogService = _dialogService;\n        this._notificationService = _notificationService;\n        this._editStacks = new Map();\n        this._uriComparisonKeyComputers = [];\n    }\n    getUriComparisonKey(resource) {\n        for (const uriComparisonKeyComputer of this._uriComparisonKeyComputers) {\n            if (uriComparisonKeyComputer[0] === resource.scheme) {\n                return uriComparisonKeyComputer[1].getComparisonKey(resource);\n            }\n        }\n        return resource.toString();\n    }\n    _print(label) {\n        console.log(`------------------------------------`);\n        console.log(`AFTER ${label}: `);\n        const str = [];\n        for (const element of this._editStacks) {\n            str.push(element[1].toString());\n        }\n        console.log(str.join('\\n'));\n    }\n    pushElement(element, group = UndoRedoGroup.None, source = UndoRedoSource.None) {\n        if (element.type === 0 /* UndoRedoElementType.Resource */) {\n            const resourceLabel = getResourceLabel(element.resource);\n            const strResource = this.getUriComparisonKey(element.resource);\n            this._pushElement(new ResourceStackElement(element, resourceLabel, strResource, group.id, group.nextOrder(), source.id, source.nextOrder()));\n        }\n        else {\n            const seen = new Set();\n            const resourceLabels = [];\n            const strResources = [];\n            for (const resource of element.resources) {\n                const resourceLabel = getResourceLabel(resource);\n                const strResource = this.getUriComparisonKey(resource);\n                if (seen.has(strResource)) {\n                    continue;\n                }\n                seen.add(strResource);\n                resourceLabels.push(resourceLabel);\n                strResources.push(strResource);\n            }\n            if (resourceLabels.length === 1) {\n                this._pushElement(new ResourceStackElement(element, resourceLabels[0], strResources[0], group.id, group.nextOrder(), source.id, source.nextOrder()));\n            }\n            else {\n                this._pushElement(new WorkspaceStackElement(element, resourceLabels, strResources, group.id, group.nextOrder(), source.id, source.nextOrder()));\n            }\n        }\n        if (DEBUG) {\n            this._print('pushElement');\n        }\n    }\n    _pushElement(element) {\n        for (let i = 0, len = element.strResources.length; i < len; i++) {\n            const resourceLabel = element.resourceLabels[i];\n            const strResource = element.strResources[i];\n            let editStack;\n            if (this._editStacks.has(strResource)) {\n                editStack = this._editStacks.get(strResource);\n            }\n            else {\n                editStack = new ResourceEditStack(resourceLabel, strResource);\n                this._editStacks.set(strResource, editStack);\n            }\n            editStack.pushElement(element);\n        }\n    }\n    getLastElement(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            if (editStack.hasFutureElements()) {\n                return null;\n            }\n            const closestPastElement = editStack.getClosestPastElement();\n            return closestPastElement ? closestPastElement.actual : null;\n        }\n        return null;\n    }\n    _splitPastWorkspaceElement(toRemove, ignoreResources) {\n        const individualArr = toRemove.actual.split();\n        const individualMap = new Map();\n        for (const _element of individualArr) {\n            const resourceLabel = getResourceLabel(_element.resource);\n            const strResource = this.getUriComparisonKey(_element.resource);\n            const element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n            individualMap.set(element.strResource, element);\n        }\n        for (const strResource of toRemove.strResources) {\n            if (ignoreResources && ignoreResources.has(strResource)) {\n                continue;\n            }\n            const editStack = this._editStacks.get(strResource);\n            editStack.splitPastWorkspaceElement(toRemove, individualMap);\n        }\n    }\n    _splitFutureWorkspaceElement(toRemove, ignoreResources) {\n        const individualArr = toRemove.actual.split();\n        const individualMap = new Map();\n        for (const _element of individualArr) {\n            const resourceLabel = getResourceLabel(_element.resource);\n            const strResource = this.getUriComparisonKey(_element.resource);\n            const element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n            individualMap.set(element.strResource, element);\n        }\n        for (const strResource of toRemove.strResources) {\n            if (ignoreResources && ignoreResources.has(strResource)) {\n                continue;\n            }\n            const editStack = this._editStacks.get(strResource);\n            editStack.splitFutureWorkspaceElement(toRemove, individualMap);\n        }\n    }\n    removeElements(resource) {\n        const strResource = typeof resource === 'string' ? resource : this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.dispose();\n            this._editStacks.delete(strResource);\n        }\n        if (DEBUG) {\n            this._print('removeElements');\n        }\n    }\n    setElementsValidFlag(resource, isValid, filter) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.setElementsValidFlag(isValid, filter);\n        }\n        if (DEBUG) {\n            this._print('setElementsValidFlag');\n        }\n    }\n    createSnapshot(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.createSnapshot(resource);\n        }\n        return new ResourceEditStackSnapshot(resource, []);\n    }\n    restoreSnapshot(snapshot) {\n        const strResource = this.getUriComparisonKey(snapshot.resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.restoreSnapshot(snapshot);\n            if (!editStack.hasPastElements() && !editStack.hasFutureElements()) {\n                // the edit stack is now empty, just remove it entirely\n                editStack.dispose();\n                this._editStacks.delete(strResource);\n            }\n        }\n        if (DEBUG) {\n            this._print('restoreSnapshot');\n        }\n    }\n    getElements(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.getElements();\n        }\n        return { past: [], future: [] };\n    }\n    _findClosestUndoElementWithSource(sourceId) {\n        if (!sourceId) {\n            return [null, null];\n        }\n        // find an element with the sourceId and with the highest sourceOrder ready to be undone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestPastElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.sourceId === sourceId) {\n                if (!matchedElement || candidate.sourceOrder > matchedElement.sourceOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    canUndo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? true : false;\n        }\n        const strResource = this.getUriComparisonKey(resourceOrSource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.hasPastElements();\n        }\n        return false;\n    }\n    _onError(err, element) {\n        onUnexpectedError(err);\n        // An error occurred while undoing or redoing => drop the undo/redo stack for all affected resources\n        for (const strResource of element.strResources) {\n            this.removeElements(strResource);\n        }\n        this._notificationService.error(err);\n    }\n    _acquireLocks(editStackSnapshot) {\n        // first, check if all locks can be acquired\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                throw new Error('Cannot acquire edit stack lock');\n            }\n        }\n        // can acquire all locks\n        for (const editStack of editStackSnapshot.editStacks) {\n            editStack.locked = true;\n        }\n        return () => {\n            // release all locks\n            for (const editStack of editStackSnapshot.editStacks) {\n                editStack.locked = false;\n            }\n        };\n    }\n    _safeInvokeWithLocks(element, invoke, editStackSnapshot, cleanup, continuation) {\n        const releaseLocks = this._acquireLocks(editStackSnapshot);\n        let result;\n        try {\n            result = invoke();\n        }\n        catch (err) {\n            releaseLocks();\n            cleanup.dispose();\n            return this._onError(err, element);\n        }\n        if (result) {\n            // result is Promise<void>\n            return result.then(() => {\n                releaseLocks();\n                cleanup.dispose();\n                return continuation();\n            }, (err) => {\n                releaseLocks();\n                cleanup.dispose();\n                return this._onError(err, element);\n            });\n        }\n        else {\n            // result is void\n            releaseLocks();\n            cleanup.dispose();\n            return continuation();\n        }\n    }\n    _invokeWorkspacePrepare(element) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof element.actual.prepareUndoRedo === 'undefined') {\n                return Disposable.None;\n            }\n            const result = element.actual.prepareUndoRedo();\n            if (typeof result === 'undefined') {\n                return Disposable.None;\n            }\n            return result;\n        });\n    }\n    _invokeResourcePrepare(element, callback) {\n        if (element.actual.type !== 1 /* UndoRedoElementType.Workspace */ || typeof element.actual.prepareUndoRedo === 'undefined') {\n            // no preparation needed\n            return callback(Disposable.None);\n        }\n        const r = element.actual.prepareUndoRedo();\n        if (!r) {\n            // nothing to clean up\n            return callback(Disposable.None);\n        }\n        if (isDisposable(r)) {\n            return callback(r);\n        }\n        return r.then((disposable) => {\n            return callback(disposable);\n        });\n    }\n    _getAffectedEditStacks(element) {\n        const affectedEditStacks = [];\n        for (const strResource of element.strResources) {\n            affectedEditStacks.push(this._editStacks.get(strResource) || missingEditStack);\n        }\n        return new EditStackSnapshot(affectedEditStacks);\n    }\n    _tryToSplitAndUndo(strResource, element, ignoreResources, message) {\n        if (element.canSplit()) {\n            this._splitPastWorkspaceElement(element, ignoreResources);\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError(this._undo(strResource, 0, true));\n        }\n        else {\n            // Cannot safely split this workspace element => flush all undo/redo stacks\n            for (const strResource of element.strResources) {\n                this.removeElements(strResource);\n            }\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError();\n        }\n    }\n    _checkWorkspaceUndo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n        if (element.removedResources) {\n            return this._tryToSplitAndUndo(strResource, element, element.removedResources, nls.localize({ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not undo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n        }\n        if (checkInvalidatedResources && element.invalidatedResources) {\n            return this._tryToSplitAndUndo(strResource, element, element.invalidatedResources, nls.localize({ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not undo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n        }\n        // this must be the last past element in all the impacted resources!\n        const cannotUndoDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.getClosestPastElement() !== element) {\n                cannotUndoDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotUndoDueToResources.length > 0) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because changes were made to {1}\", element.label, cannotUndoDueToResources.join(', ')));\n        }\n        const cannotLockDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                cannotLockDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotLockDueToResources.length > 0) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n        }\n        // check if new stack elements were added in the meantime...\n        if (!editStackSnapshot.isValid()) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n        }\n        return null;\n    }\n    _workspaceUndo(strResource, element, undoConfirmed) {\n        const affectedEditStacks = this._getAffectedEditStacks(element);\n        const verificationError = this._checkWorkspaceUndo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/ false);\n        if (verificationError) {\n            return verificationError.returnValue;\n        }\n        return this._confirmAndExecuteWorkspaceUndo(strResource, element, affectedEditStacks, undoConfirmed);\n    }\n    _isPartOfUndoGroup(element) {\n        if (!element.groupId) {\n            return false;\n        }\n        // check that there is at least another element with the same groupId ready to be undone\n        for (const [, editStack] of this._editStacks) {\n            const pastElement = editStack.getClosestPastElement();\n            if (!pastElement) {\n                continue;\n            }\n            if (pastElement === element) {\n                const secondPastElement = editStack.getSecondClosestPastElement();\n                if (secondPastElement && secondPastElement.groupId === element.groupId) {\n                    // there is another element with the same group id in the same stack!\n                    return true;\n                }\n            }\n            if (pastElement.groupId === element.groupId) {\n                // there is another element with the same group id in another stack!\n                return true;\n            }\n        }\n        return false;\n    }\n    _confirmAndExecuteWorkspaceUndo(strResource, element, editStackSnapshot, undoConfirmed) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (element.canSplit() && !this._isPartOfUndoGroup(element)) {\n                // this element can be split\n                let UndoChoice;\n                (function (UndoChoice) {\n                    UndoChoice[UndoChoice[\"All\"] = 0] = \"All\";\n                    UndoChoice[UndoChoice[\"This\"] = 1] = \"This\";\n                    UndoChoice[UndoChoice[\"Cancel\"] = 2] = \"Cancel\";\n                })(UndoChoice || (UndoChoice = {}));\n                const { result } = yield this._dialogService.prompt({\n                    type: Severity.Info,\n                    message: nls.localize('confirmWorkspace', \"Would you like to undo '{0}' across all files?\", element.label),\n                    buttons: [\n                        {\n                            label: nls.localize({ key: 'ok', comment: ['{0} denotes a number that is > 1, && denotes a mnemonic'] }, \"&&Undo in {0} Files\", editStackSnapshot.editStacks.length),\n                            run: () => UndoChoice.All\n                        },\n                        {\n                            label: nls.localize({ key: 'nok', comment: ['&& denotes a mnemonic'] }, \"Undo this &&File\"),\n                            run: () => UndoChoice.This\n                        }\n                    ],\n                    cancelButton: {\n                        run: () => UndoChoice.Cancel\n                    }\n                });\n                if (result === UndoChoice.Cancel) {\n                    // choice: cancel\n                    return;\n                }\n                if (result === UndoChoice.This) {\n                    // choice: undo this file\n                    this._splitPastWorkspaceElement(element, null);\n                    return this._undo(strResource, 0, true);\n                }\n                // choice: undo in all files\n                // At this point, it is possible that the element has been made invalid in the meantime (due to the confirmation await)\n                const verificationError1 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*invalidated resources will be checked after the prepare call*/ false);\n                if (verificationError1) {\n                    return verificationError1.returnValue;\n                }\n                undoConfirmed = true;\n            }\n            // prepare\n            let cleanup;\n            try {\n                cleanup = yield this._invokeWorkspacePrepare(element);\n            }\n            catch (err) {\n                return this._onError(err, element);\n            }\n            // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n            const verificationError2 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/ true);\n            if (verificationError2) {\n                cleanup.dispose();\n                return verificationError2.returnValue;\n            }\n            for (const editStack of editStackSnapshot.editStacks) {\n                editStack.moveBackward(element);\n            }\n            return this._safeInvokeWithLocks(element, () => element.actual.undo(), editStackSnapshot, cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n        });\n    }\n    _resourceUndo(editStack, element, undoConfirmed) {\n        if (!element.isValid) {\n            // invalid element => immediately flush edit stack!\n            editStack.flushAllElements();\n            return;\n        }\n        if (editStack.locked) {\n            const message = nls.localize({ key: 'cannotResourceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, \"Could not undo '{0}' because there is already an undo or redo operation running.\", element.label);\n            this._notificationService.warn(message);\n            return;\n        }\n        return this._invokeResourcePrepare(element, (cleanup) => {\n            editStack.moveBackward(element);\n            return this._safeInvokeWithLocks(element, () => element.actual.undo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n        });\n    }\n    _findClosestUndoElementInGroup(groupId) {\n        if (!groupId) {\n            return [null, null];\n        }\n        // find another element with the same groupId and with the highest groupOrder ready to be undone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestPastElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.groupId === groupId) {\n                if (!matchedElement || candidate.groupOrder > matchedElement.groupOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    _continueUndoInGroup(groupId, undoConfirmed) {\n        if (!groupId) {\n            return;\n        }\n        const [, matchedStrResource] = this._findClosestUndoElementInGroup(groupId);\n        if (matchedStrResource) {\n            return this._undo(matchedStrResource, 0, undoConfirmed);\n        }\n    }\n    undo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? this._undo(matchedStrResource, resourceOrSource.id, false) : undefined;\n        }\n        if (typeof resourceOrSource === 'string') {\n            return this._undo(resourceOrSource, 0, false);\n        }\n        return this._undo(this.getUriComparisonKey(resourceOrSource), 0, false);\n    }\n    _undo(strResource, sourceId = 0, undoConfirmed) {\n        if (!this._editStacks.has(strResource)) {\n            return;\n        }\n        const editStack = this._editStacks.get(strResource);\n        const element = editStack.getClosestPastElement();\n        if (!element) {\n            return;\n        }\n        if (element.groupId) {\n            // this element is a part of a group, we need to make sure undoing in a group is in order\n            const [matchedElement, matchedStrResource] = this._findClosestUndoElementInGroup(element.groupId);\n            if (element !== matchedElement && matchedStrResource) {\n                // there is an element in the same group that should be undone before this one\n                return this._undo(matchedStrResource, sourceId, undoConfirmed);\n            }\n        }\n        const shouldPromptForConfirmation = (element.sourceId !== sourceId || element.confirmBeforeUndo);\n        if (shouldPromptForConfirmation && !undoConfirmed) {\n            // Hit a different source or the element asks for prompt before undo, prompt for confirmation\n            return this._confirmAndContinueUndo(strResource, sourceId, element);\n        }\n        try {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                return this._workspaceUndo(strResource, element, undoConfirmed);\n            }\n            else {\n                return this._resourceUndo(editStack, element, undoConfirmed);\n            }\n        }\n        finally {\n            if (DEBUG) {\n                this._print('undo');\n            }\n        }\n    }\n    _confirmAndContinueUndo(strResource, sourceId, element) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this._dialogService.confirm({\n                message: nls.localize('confirmDifferentSource', \"Would you like to undo '{0}'?\", element.label),\n                primaryButton: nls.localize({ key: 'confirmDifferentSource.yes', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"),\n                cancelButton: nls.localize('confirmDifferentSource.no', \"No\")\n            });\n            if (!result.confirmed) {\n                return;\n            }\n            return this._undo(strResource, sourceId, true);\n        });\n    }\n    _findClosestRedoElementWithSource(sourceId) {\n        if (!sourceId) {\n            return [null, null];\n        }\n        // find an element with sourceId and with the lowest sourceOrder ready to be redone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestFutureElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.sourceId === sourceId) {\n                if (!matchedElement || candidate.sourceOrder < matchedElement.sourceOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    canRedo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? true : false;\n        }\n        const strResource = this.getUriComparisonKey(resourceOrSource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.hasFutureElements();\n        }\n        return false;\n    }\n    _tryToSplitAndRedo(strResource, element, ignoreResources, message) {\n        if (element.canSplit()) {\n            this._splitFutureWorkspaceElement(element, ignoreResources);\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError(this._redo(strResource));\n        }\n        else {\n            // Cannot safely split this workspace element => flush all undo/redo stacks\n            for (const strResource of element.strResources) {\n                this.removeElements(strResource);\n            }\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError();\n        }\n    }\n    _checkWorkspaceRedo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n        if (element.removedResources) {\n            return this._tryToSplitAndRedo(strResource, element, element.removedResources, nls.localize({ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not redo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n        }\n        if (checkInvalidatedResources && element.invalidatedResources) {\n            return this._tryToSplitAndRedo(strResource, element, element.invalidatedResources, nls.localize({ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not redo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n        }\n        // this must be the last future element in all the impacted resources!\n        const cannotRedoDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.getClosestFutureElement() !== element) {\n                cannotRedoDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotRedoDueToResources.length > 0) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because changes were made to {1}\", element.label, cannotRedoDueToResources.join(', ')));\n        }\n        const cannotLockDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                cannotLockDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotLockDueToResources.length > 0) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n        }\n        // check if new stack elements were added in the meantime...\n        if (!editStackSnapshot.isValid()) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n        }\n        return null;\n    }\n    _workspaceRedo(strResource, element) {\n        const affectedEditStacks = this._getAffectedEditStacks(element);\n        const verificationError = this._checkWorkspaceRedo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/ false);\n        if (verificationError) {\n            return verificationError.returnValue;\n        }\n        return this._executeWorkspaceRedo(strResource, element, affectedEditStacks);\n    }\n    _executeWorkspaceRedo(strResource, element, editStackSnapshot) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // prepare\n            let cleanup;\n            try {\n                cleanup = yield this._invokeWorkspacePrepare(element);\n            }\n            catch (err) {\n                return this._onError(err, element);\n            }\n            // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n            const verificationError = this._checkWorkspaceRedo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/ true);\n            if (verificationError) {\n                cleanup.dispose();\n                return verificationError.returnValue;\n            }\n            for (const editStack of editStackSnapshot.editStacks) {\n                editStack.moveForward(element);\n            }\n            return this._safeInvokeWithLocks(element, () => element.actual.redo(), editStackSnapshot, cleanup, () => this._continueRedoInGroup(element.groupId));\n        });\n    }\n    _resourceRedo(editStack, element) {\n        if (!element.isValid) {\n            // invalid element => immediately flush edit stack!\n            editStack.flushAllElements();\n            return;\n        }\n        if (editStack.locked) {\n            const message = nls.localize({ key: 'cannotResourceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, \"Could not redo '{0}' because there is already an undo or redo operation running.\", element.label);\n            this._notificationService.warn(message);\n            return;\n        }\n        return this._invokeResourcePrepare(element, (cleanup) => {\n            editStack.moveForward(element);\n            return this._safeInvokeWithLocks(element, () => element.actual.redo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueRedoInGroup(element.groupId));\n        });\n    }\n    _findClosestRedoElementInGroup(groupId) {\n        if (!groupId) {\n            return [null, null];\n        }\n        // find another element with the same groupId and with the lowest groupOrder ready to be redone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestFutureElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.groupId === groupId) {\n                if (!matchedElement || candidate.groupOrder < matchedElement.groupOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    _continueRedoInGroup(groupId) {\n        if (!groupId) {\n            return;\n        }\n        const [, matchedStrResource] = this._findClosestRedoElementInGroup(groupId);\n        if (matchedStrResource) {\n            return this._redo(matchedStrResource);\n        }\n    }\n    redo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? this._redo(matchedStrResource) : undefined;\n        }\n        if (typeof resourceOrSource === 'string') {\n            return this._redo(resourceOrSource);\n        }\n        return this._redo(this.getUriComparisonKey(resourceOrSource));\n    }\n    _redo(strResource) {\n        if (!this._editStacks.has(strResource)) {\n            return;\n        }\n        const editStack = this._editStacks.get(strResource);\n        const element = editStack.getClosestFutureElement();\n        if (!element) {\n            return;\n        }\n        if (element.groupId) {\n            // this element is a part of a group, we need to make sure redoing in a group is in order\n            const [matchedElement, matchedStrResource] = this._findClosestRedoElementInGroup(element.groupId);\n            if (element !== matchedElement && matchedStrResource) {\n                // there is an element in the same group that should be redone before this one\n                return this._redo(matchedStrResource);\n            }\n        }\n        try {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                return this._workspaceRedo(strResource, element);\n            }\n            else {\n                return this._resourceRedo(editStack, element);\n            }\n        }\n        finally {\n            if (DEBUG) {\n                this._print('redo');\n            }\n        }\n    }\n};\nUndoRedoService = __decorate([\n    __param(0, IDialogService),\n    __param(1, INotificationService)\n], UndoRedoService);\nexport { UndoRedoService };\nclass WorkspaceVerificationError {\n    constructor(returnValue) {\n        this.returnValue = returnValue;\n    }\n}\nregisterSingleton(IUndoRedoService, UndoRedoService, 1 /* InstantiationType.Delayed */);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { localize } from '../../../nls.js';\nimport { basename } from '../../../base/common/path.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IWorkspaceContextService = createDecorator('contextService');\nexport function isSingleFolderWorkspaceIdentifier(obj) {\n    const singleFolderIdentifier = obj;\n    return typeof (singleFolderIdentifier === null || singleFolderIdentifier === void 0 ? void 0 : singleFolderIdentifier.id) === 'string' && URI.isUri(singleFolderIdentifier.uri);\n}\nexport function isEmptyWorkspaceIdentifier(obj) {\n    const emptyWorkspaceIdentifier = obj;\n    return typeof (emptyWorkspaceIdentifier === null || emptyWorkspaceIdentifier === void 0 ? void 0 : emptyWorkspaceIdentifier.id) === 'string'\n        && !isSingleFolderWorkspaceIdentifier(obj)\n        && !isWorkspaceIdentifier(obj);\n}\nexport const EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE = { id: 'ext-dev' };\nexport const UNKNOWN_EMPTY_WINDOW_WORKSPACE = { id: 'empty-window' };\nexport function toWorkspaceIdentifier(arg0, isExtensionDevelopment) {\n    // Empty workspace\n    if (typeof arg0 === 'string' || typeof arg0 === 'undefined') {\n        // With a backupPath, the basename is the empty workspace identifier\n        if (typeof arg0 === 'string') {\n            return {\n                id: basename(arg0)\n            };\n        }\n        // Extension development empty windows have backups disabled\n        // so we return a constant workspace identifier for extension\n        // authors to allow to restore their workspace state even then.\n        if (isExtensionDevelopment) {\n            return EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE;\n        }\n        return UNKNOWN_EMPTY_WINDOW_WORKSPACE;\n    }\n    // Multi root\n    const workspace = arg0;\n    if (workspace.configuration) {\n        return {\n            id: workspace.id,\n            configPath: workspace.configuration\n        };\n    }\n    // Single folder\n    if (workspace.folders.length === 1) {\n        return {\n            id: workspace.id,\n            uri: workspace.folders[0].uri\n        };\n    }\n    // Empty window\n    return {\n        id: workspace.id\n    };\n}\nexport function isWorkspaceIdentifier(obj) {\n    const workspaceIdentifier = obj;\n    return typeof (workspaceIdentifier === null || workspaceIdentifier === void 0 ? void 0 : workspaceIdentifier.id) === 'string' && URI.isUri(workspaceIdentifier.configPath);\n}\nexport class Workspace {\n    constructor(_id, folders, _transient, _configuration, _ignorePathCasing) {\n        this._id = _id;\n        this._transient = _transient;\n        this._configuration = _configuration;\n        this._ignorePathCasing = _ignorePathCasing;\n        this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing, () => true);\n        this.folders = folders;\n    }\n    get folders() {\n        return this._folders;\n    }\n    set folders(folders) {\n        this._folders = folders;\n        this.updateFoldersMap();\n    }\n    get id() {\n        return this._id;\n    }\n    get transient() {\n        return this._transient;\n    }\n    get configuration() {\n        return this._configuration;\n    }\n    set configuration(configuration) {\n        this._configuration = configuration;\n    }\n    getFolder(resource) {\n        if (!resource) {\n            return null;\n        }\n        return this._foldersMap.findSubstr(resource) || null;\n    }\n    updateFoldersMap() {\n        this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing, () => true);\n        for (const folder of this.folders) {\n            this._foldersMap.set(folder.uri, folder);\n        }\n    }\n    toJSON() {\n        return { id: this.id, folders: this.folders, transient: this.transient, configuration: this.configuration };\n    }\n}\nexport class WorkspaceFolder {\n    constructor(data, \n    /**\n     * Provides access to the original metadata for this workspace\n     * folder. This can be different from the metadata provided in\n     * this class:\n     * - raw paths can be relative\n     * - raw paths are not normalized\n     */\n    raw) {\n        this.raw = raw;\n        this.uri = data.uri;\n        this.index = data.index;\n        this.name = data.name;\n    }\n    toJSON() {\n        return { uri: this.uri, name: this.name, index: this.index };\n    }\n}\nexport const WORKSPACE_EXTENSION = 'code-workspace';\nexport const WORKSPACE_FILTER = [{ name: localize('codeWorkspace', \"Code Workspace\"), extensions: [WORKSPACE_EXTENSION] }];\nexport const STANDALONE_EDITOR_WORKSPACE_ID = '4064f6ec-cb38-4ad0-af64-ee6467e63c82';\nexport function isStandaloneEditorWorkspace(workspace) {\n    return workspace.id === STANDALONE_EDITOR_WORKSPACE_ID;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IWorkspaceTrustManagementService = createDecorator('workspaceTrustManagementService');\n"],"names":["TARGET_KEY","IStorageService","createDecorator","WillSaveStateReason","AbstractStorageService","Disposable","constructor","options","arguments","length","undefined","flushInterval","DEFAULT_FLUSH_INTERVAL","super","this","_onDidChangeValue","_register","PauseableEmitter","_onDidChangeTarget","_onWillSaveState","Emitter","onWillSaveState","event","_workspaceKeyTargets","_profileKeyTargets","_applicationKeyTargets","onDidChangeValue","scope","key","disposable","Event","filter","e","emitDidChangeValue","external","fire","target","getKeyTargets","get","fallbackValue","_a","getStorage","getBoolean","getNumber","store","value","isUndefinedOrNull","remove","withPausedEmitters","updateKeyTarget","set","delete","fn","pause","resume","_b","keyTargets","JSON","stringify","workspaceKeyTargets","loadKeyTargets","profileKeyTargets","applicationKeyTargets","storage","keysRaw","parse","error","Object","create","InMemoryStorageService","applicationStorage","Storage","InMemoryStorageDatabase","hint","StorageHint","STORAGE_IN_MEMORY","profileStorage","workspaceStorage","onDidChangeStorage","ITelemetryService","defaultKeybindingLabelStyles","keybindingLabelBackground","asCssVariable","keybindingLabelForeground","keybindingLabelBorder","keybindingLabelBottomBorder","keybindingLabelShadow","widgetShadow","defaultButtonStyles","buttonForeground","buttonSeparator","buttonBackground","buttonHoverBackground","buttonSecondaryForeground","buttonSecondaryBackground","buttonSecondaryHoverBackground","buttonBorder","defaultProgressBarStyles","progressBarBackground","defaultToggleStyles","inputActiveOptionBorder","inputActiveOptionForeground","inputActiveOptionBackground","defaultInputBoxStyles","checkboxBackground","checkboxBorder","checkboxForeground","editorWidgetBackground","editorWidgetForeground","contrastBorder","problemsErrorIconForeground","problemsWarningIconForeground","problemsInfoIconForeground","textLinkForeground","inputBackground","inputForeground","inputBorder","inputValidationInfoBorder","inputValidationInfoBackground","inputValidationInfoForeground","inputValidationWarningBorder","inputValidationWarningBackground","inputValidationWarningForeground","inputValidationErrorBorder","inputValidationErrorBackground","inputValidationErrorForeground","defaultFindWidgetStyles","listFilterWidgetBackground","listFilterWidgetOutline","listFilterWidgetNoMatchesOutline","listFilterWidgetShadow","inputBoxStyles","toggleStyles","defaultCountBadgeStyles","badgeBackground","badgeForeground","badgeBorder","defaultListStyles","breadcrumbsBackground","breadcrumbsForeground","breadcrumbsFocusForeground","breadcrumbsActiveSelectionForeground","listBackground","listInactiveFocusForeground","listFocusBackground","listFocusForeground","listFocusOutline","listActiveSelectionBackground","listActiveSelectionForeground","listActiveSelectionIconForeground","listFocusAndSelectionOutline","listFocusAndSelectionBackground","listFocusAndSelectionForeground","listInactiveSelectionBackground","listInactiveSelectionIconForeground","listInactiveSelectionForeground","listInactiveFocusBackground","listInactiveFocusOutline","listHoverBackground","listHoverForeground","listDropBackground","listSelectionOutline","activeContrastBorder","listHoverOutline","treeIndentGuidesStroke","treeInactiveIndentGuidesStroke","tableColumnsBorder","tableOddRowsBackgroundColor","getListStyles","override","styles","result","assign","val","overrideStyles","defaultSelectBoxStyles","selectBackground","selectListBackground","selectForeground","decoratorRightForeground","pickerGroupForeground","selectBorder","focusBorder","quickInputListFocusBackground","quickInputListFocusIconForeground","quickInputListFocusForeground","asCssVariableWithDefault","Color","transparent","toString","selectListBorder","editorWidgetBorder","defaultMenuStyles","shadowColor","borderColor","menuBorder","foregroundColor","menuForeground","backgroundColor","menuBackground","selectionForegroundColor","menuSelectionForeground","selectionBackgroundColor","menuSelectionBackground","selectionBorderColor","menuSelectionBorder","separatorColor","menuSeparatorBackground","scrollbarShadow","scrollbarSliderBackground","scrollbarSliderHoverBackground","scrollbarSliderActiveBackground","getIconsStyleSheet","themeService","DisposableStore","onDidChangeEmmiter","add","iconRegistry","getIconRegistry","onDidChange","onDidProductIconThemeChange","dispose","getCSS","productIconTheme","getProductIconTheme","UnthemedProductIconTheme","usedFontIds","formatIconRule","contribution","definition","getIcon","fontContribution","font","id","concat","fontCharacter","asCSSPropertyValue","rules","getIcons","rule","push","fontWeight","weight","fontStyle","style","src","map","l","asCSSUrl","location","format","join","defaults","ThemeIcon","isThemeIcon","c","asCssVariableName","colorIdent","replace","color","defaultCssValue","Extensions","ColorContribution","colorRegistry","_onDidChangeSchema","onDidChangeSchema","colorSchema","type","properties","colorReferenceSchema","enum","enumDescriptions","colorsById","registerColor","description","deprecationMessage","colorContribution","needsTransparency","propertySchema","defaultSnippets","body","getColors","keys","resolveDefaultColor","theme","colorDesc","resolveColorValue","getColorSchema","sort","sorter","a","b","cat1","indexOf","cat2","localeCompare","k","platform","foreground","dark","light","hcDark","hcLight","nls","errorForeground","iconForeground","black","white","widgetBorder","lighten","darken","fromHex","editorErrorForeground","editorErrorBorder","editorWarningForeground","editorWarningBorder","editorInfoForeground","editorInfoBorder","editorHintForeground","editorBackground","editorForeground","editorWidgetResizeBorder","quickInputBackground","quickInputForeground","quickInputTitleBackground","RGBA","pickerGroupBorder","editorSelectionBackground","editorSelectionForeground","editorInactiveSelection","editorSelectionHighlight","lessProminent","editorFindMatch","editorFindMatchHighlight","editorFindRangeHighlight","editorFindMatchBorder","editorFindMatchHighlightBorder","editorFindRangeHighlightBorder","editorHoverBackground","editorHoverBorder","editorActiveLinkForeground","blue","cyan","editorInlayHintForeground","editorInlayHintBackground","editorInlayHintTypeForeground","editorInlayHintTypeBackground","editorInlayHintParameterForeground","editorInlayHintParameterBackground","defaultInsertColor","defaultRemoveColor","diffInserted","diffRemoved","diffOverviewRulerInserted","diffOverviewRulerRemoved","listHighlightForeground","listFocusHighlightForeground","ifArg","thenArg","elseArg","op","if","then","else","_deprecatedQuickInputListFocusBackground","oneOf","toolbarHoverBackground","currentBaseColor","incomingBaseColor","commonBaseColor","contentTransparency","mergeCurrentHeaderBackground","mergeIncomingHeaderBackground","mergeCommonHeaderBackground","mergeBorder","overviewRulerFindMatchForeground","overviewRulerSelectionHighlightForeground","minimapFindMatch","minimapSelectionOccurrenceHighlight","minimapSelection","minimapInfo","minimapWarning","minimapError","minimapBackground","minimapForegroundOpacity","colorValue","factor","_len","colorValues","Array","_key","values","backgroundColorValue","transparency","background","getColor","transform","_c","_d","makeOpaque","candidate","defines","from","isDarkerThan","getLighterColor","getDarkerColor","assertNever","executeTransform","workbenchColorsSchemaId","schemaRegistry","as","JSONExtensions","JSONContribution","registerSchema","delayer","RunOnceScheduler","notifySchemaChanged","isScheduled","schedule","IconContribution","IconFontDefinition","getDefinition","registry","toJSONObject","iconFont","s","fromJSONObject","json","stringOrUndef","isString","isArray","every","URI","_onDidChange","iconSchema","definitions","icons","fontId","localize","additionalProperties","iconReferenceSchema","pattern","iconNameExpression","iconsById","iconFontsById","registerIcon","existing","markdownDescription","enumIndex","iconContribution","$ref","getIconSchema","i1","i2","classNames","i","reference","contributions","codiconFontCharacters","getCodiconFontCharacters","icon","initialize","iconsSchemaId","widgetClose","Codicon","close","arrowUp","arrowDown","modify","sync","loading","ColorScheme","isHighContrast","scheme","HIGH_CONTRAST_DARK","HIGH_CONTRAST_LIGHT","isDark","DARK","IThemeService","themeColorFromId","getThemeTypeSelector","ThemingContribution","themingRegistry","themingParticipants","onThemingParticipantAddedEmitter","onColorThemeChange","participant","toDisposable","idx","splice","getThemingParticipants","registerThemingParticipant","Themable","getColorTheme","onDidColorThemeChange","onThemeChange","updateStyles","IUndoRedoService","ResourceEditStackSnapshot","resource","elements","UndoRedoGroup","_ID","order","nextOrder","None","UndoRedoSource","__decorate","decorators","desc","d","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","done","apply","DEBUG","getResourceLabel","Schemas","file","fsPath","path","stackElementCounter","ResourceStackElement","actual","resourceLabel","strResource","groupId","groupOrder","sourceId","sourceOrder","label","confirmBeforeUndo","resourceLabels","strResources","isValid","setValid","name","ResourceReasonPair","reason","RemovedResources","Map","createMessage","externalRemoval","noParallelUniverses","element","messages","comment","size","has","WorkspaceStackElement","removedResources","invalidatedResources","canSplit","split","removeResource","ResourceEditStack","_past","_future","locked","versionId","flushAllElements","_setElementValidFlag","setElementsValidFlag","pushElement","futureElement","createSnapshot","len","restoreSnapshot","snapshot","snapshotLength","isOK","snapshotIndex","removePastAfter","removeFutureBefore","slice","getElements","past","future","getClosestPastElement","getSecondClosestPastElement","getClosestFutureElement","hasPastElements","hasFutureElements","splitPastWorkspaceElement","toRemove","individualMap","j","splitFutureWorkspaceElement","moveBackward","pop","moveForward","EditStackSnapshot","editStacks","_versionIds","missingEditStack","UndoRedoService","_dialogService","_notificationService","_editStacks","_uriComparisonKeyComputers","getUriComparisonKey","uriComparisonKeyComputer","getComparisonKey","_print","console","log","str","group","source","_pushElement","seen","Set","resources","editStack","getLastElement","closestPastElement","_splitPastWorkspaceElement","ignoreResources","individualArr","_element","_splitFutureWorkspaceElement","removeElements","_findClosestUndoElementWithSource","matchedElement","matchedStrResource","canUndo","resourceOrSource","_onError","err","onUnexpectedError","_acquireLocks","editStackSnapshot","Error","_safeInvokeWithLocks","invoke","cleanup","continuation","releaseLocks","_invokeWorkspacePrepare","prepareUndoRedo","_invokeResourcePrepare","callback","isDisposable","_getAffectedEditStacks","affectedEditStacks","_tryToSplitAndUndo","message","warn","WorkspaceVerificationError","_undo","_checkWorkspaceUndo","checkInvalidatedResources","cannotUndoDueToResources","cannotLockDueToResources","_workspaceUndo","undoConfirmed","verificationError","returnValue","_confirmAndExecuteWorkspaceUndo","_isPartOfUndoGroup","pastElement","secondPastElement","UndoChoice","prompt","Severity","Info","buttons","run","All","This","cancelButton","Cancel","verificationError1","verificationError2","undo","_continueUndoInGroup","_resourceUndo","_findClosestUndoElementInGroup","_confirmAndContinueUndo","confirm","primaryButton","confirmed","_findClosestRedoElementWithSource","canRedo","_tryToSplitAndRedo","_redo","_checkWorkspaceRedo","cannotRedoDueToResources","_workspaceRedo","_executeWorkspaceRedo","redo","_continueRedoInGroup","_resourceRedo","_findClosestRedoElementInGroup","IDialogService","INotificationService","registerSingleton","IWorkspaceContextService","isSingleFolderWorkspaceIdentifier","obj","singleFolderIdentifier","isUri","uri","isEmptyWorkspaceIdentifier","workspaceIdentifier","configPath","isWorkspaceIdentifier","EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE","UNKNOWN_EMPTY_WINDOW_WORKSPACE","toWorkspaceIdentifier","arg0","isExtensionDevelopment","basename","workspace","configuration","folders","WorkspaceFolder","data","raw","index","toJSON","WORKSPACE_EXTENSION","STANDALONE_EDITOR_WORKSPACE_ID","isStandaloneEditorWorkspace","IWorkspaceTrustManagementService"],"sourceRoot":""}