{"version":3,"file":"static/js/monaco-editor-vendor.192dbdcc.09257319.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/common/textModelBracketPairs.js","../node_modules/monaco-editor/esm/vs/editor/common/textModelEvents.js","../node_modules/monaco-editor/esm/vs/editor/common/textModelGuides.js","../node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js","../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousMultilineTokens.js","../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousMultilineTokensBuilder.js","../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousTokensEditing.js","../node_modules/monaco-editor/esm/vs/editor/common/tokens/contiguousTokensStore.js","../node_modules/monaco-editor/esm/vs/editor/common/tokens/lineTokens.js","../node_modules/monaco-editor/esm/vs/editor/common/tokens/sparseMultilineTokens.js","../node_modules/monaco-editor/esm/vs/editor/common/tokens/sparseTokensStore.js","../node_modules/monaco-editor/esm/vs/editor/common/viewEventHandler.js","../node_modules/monaco-editor/esm/vs/editor/common/viewEvents.js","../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/lineDecorations.js","../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linePart.js","../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLineRenderer.js","../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLinesViewportData.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/minimapTokensColorTracker.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/monospaceLineBreaksComputer.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/overviewZoneManager.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewContext.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelDecorations.js","../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/linesLayout.js","../node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLayout.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/modelLineProjection.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelLines.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js","../node_modules/monaco-editor/esm/vs/editor/common/viewModelEventDispatcher.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class BracketInfo {\n    constructor(range, \n    /** 0-based level */\n    nestingLevel, nestingLevelOfEqualBracketType, isInvalid) {\n        this.range = range;\n        this.nestingLevel = nestingLevel;\n        this.nestingLevelOfEqualBracketType = nestingLevelOfEqualBracketType;\n        this.isInvalid = isInvalid;\n    }\n}\nexport class BracketPairInfo {\n    constructor(range, openingBracketRange, closingBracketRange, \n    /** 0-based */\n    nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode) {\n        this.range = range;\n        this.openingBracketRange = openingBracketRange;\n        this.closingBracketRange = closingBracketRange;\n        this.nestingLevel = nestingLevel;\n        this.nestingLevelOfEqualBracketType = nestingLevelOfEqualBracketType;\n        this.bracketPairNode = bracketPairNode;\n    }\n    get openingBracketInfo() {\n        return this.bracketPairNode.openingBracket.bracketInfo;\n    }\n}\nexport class BracketPairWithMinIndentationInfo extends BracketPairInfo {\n    constructor(range, openingBracketRange, closingBracketRange, \n    /**\n     * 0-based\n    */\n    nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode, \n    /**\n     * -1 if not requested, otherwise the size of the minimum indentation in the bracket pair in terms of visible columns.\n    */\n    minVisibleColumnIndentation) {\n        super(range, openingBracketRange, closingBracketRange, nestingLevel, nestingLevelOfEqualBracketType, bracketPairNode);\n        this.minVisibleColumnIndentation = minVisibleColumnIndentation;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n    constructor() {\n        this.changeType = 1 /* RawContentChangedType.Flush */;\n    }\n}\n/**\n * Represents text injected on a line\n * @internal\n */\nexport class LineInjectedText {\n    static applyInjectedText(lineText, injectedTexts) {\n        if (!injectedTexts || injectedTexts.length === 0) {\n            return lineText;\n        }\n        let result = '';\n        let lastOriginalOffset = 0;\n        for (const injectedText of injectedTexts) {\n            result += lineText.substring(lastOriginalOffset, injectedText.column - 1);\n            lastOriginalOffset = injectedText.column - 1;\n            result += injectedText.options.content;\n        }\n        result += lineText.substring(lastOriginalOffset);\n        return result;\n    }\n    static fromDecorations(decorations) {\n        const result = [];\n        for (const decoration of decorations) {\n            if (decoration.options.before && decoration.options.before.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.startLineNumber, decoration.range.startColumn, decoration.options.before, 0));\n            }\n            if (decoration.options.after && decoration.options.after.content.length > 0) {\n                result.push(new LineInjectedText(decoration.ownerId, decoration.range.endLineNumber, decoration.range.endColumn, decoration.options.after, 1));\n            }\n        }\n        result.sort((a, b) => {\n            if (a.lineNumber === b.lineNumber) {\n                if (a.column === b.column) {\n                    return a.order - b.order;\n                }\n                return a.column - b.column;\n            }\n            return a.lineNumber - b.lineNumber;\n        });\n        return result;\n    }\n    constructor(ownerId, lineNumber, column, options, order) {\n        this.ownerId = ownerId;\n        this.lineNumber = lineNumber;\n        this.column = column;\n        this.options = options;\n        this.order = order;\n    }\n}\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nexport class ModelRawLineChanged {\n    constructor(lineNumber, detail, injectedText) {\n        this.changeType = 2 /* RawContentChangedType.LineChanged */;\n        this.lineNumber = lineNumber;\n        this.detail = detail;\n        this.injectedText = injectedText;\n    }\n}\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nexport class ModelRawLinesDeleted {\n    constructor(fromLineNumber, toLineNumber) {\n        this.changeType = 3 /* RawContentChangedType.LinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nexport class ModelRawLinesInserted {\n    constructor(fromLineNumber, toLineNumber, detail, injectedTexts) {\n        this.changeType = 4 /* RawContentChangedType.LinesInserted */;\n        this.injectedTexts = injectedTexts;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n        this.detail = detail;\n    }\n}\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nexport class ModelRawEOLChanged {\n    constructor() {\n        this.changeType = 5 /* RawContentChangedType.EOLChanged */;\n    }\n}\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nexport class ModelRawContentChangedEvent {\n    constructor(changes, versionId, isUndoing, isRedoing) {\n        this.changes = changes;\n        this.versionId = versionId;\n        this.isUndoing = isUndoing;\n        this.isRedoing = isRedoing;\n        this.resultingSelection = null;\n    }\n    containsEvent(type) {\n        for (let i = 0, len = this.changes.length; i < len; i++) {\n            const change = this.changes[i];\n            if (change.changeType === type) {\n                return true;\n            }\n        }\n        return false;\n    }\n    static merge(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        return new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n    }\n}\n/**\n * An event describing a change in injected text.\n * @internal\n */\nexport class ModelInjectedTextChangedEvent {\n    constructor(changes) {\n        this.changes = changes;\n    }\n}\n/**\n * @internal\n */\nexport class InternalModelContentChangeEvent {\n    constructor(rawContentChangedEvent, contentChangedEvent) {\n        this.rawContentChangedEvent = rawContentChangedEvent;\n        this.contentChangedEvent = contentChangedEvent;\n    }\n    merge(other) {\n        const rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n        const contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n        return new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n    }\n    static _mergeChangeEvents(a, b) {\n        const changes = [].concat(a.changes).concat(b.changes);\n        const eol = b.eol;\n        const versionId = b.versionId;\n        const isUndoing = (a.isUndoing || b.isUndoing);\n        const isRedoing = (a.isRedoing || b.isRedoing);\n        const isFlush = (a.isFlush || b.isFlush);\n        const isEolChange = a.isEolChange && b.isEolChange; // both must be true to not confuse listeners who skip such edits\n        return {\n            changes: changes,\n            eol: eol,\n            isEolChange: isEolChange,\n            versionId: versionId,\n            isUndoing: isUndoing,\n            isRedoing: isRedoing,\n            isFlush: isFlush,\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var HorizontalGuidesState;\n(function (HorizontalGuidesState) {\n    HorizontalGuidesState[HorizontalGuidesState[\"Disabled\"] = 0] = \"Disabled\";\n    HorizontalGuidesState[HorizontalGuidesState[\"EnabledForActive\"] = 1] = \"EnabledForActive\";\n    HorizontalGuidesState[HorizontalGuidesState[\"Enabled\"] = 2] = \"Enabled\";\n})(HorizontalGuidesState || (HorizontalGuidesState = {}));\nexport class IndentGuide {\n    constructor(visibleColumn, column, className, \n    /**\n     * If set, this indent guide is a horizontal guide (no vertical part).\n     * It starts at visibleColumn and continues until endColumn.\n    */\n    horizontalLine, \n    /**\n     * If set (!= -1), only show this guide for wrapped lines that don't contain this model column, but are after it.\n    */\n    forWrappedLinesAfterColumn, forWrappedLinesBeforeOrAtColumn) {\n        this.visibleColumn = visibleColumn;\n        this.column = column;\n        this.className = className;\n        this.horizontalLine = horizontalLine;\n        this.forWrappedLinesAfterColumn = forWrappedLinesAfterColumn;\n        this.forWrappedLinesBeforeOrAtColumn = forWrappedLinesBeforeOrAtColumn;\n        if ((visibleColumn !== -1) === (column !== -1)) {\n            throw new Error();\n        }\n    }\n}\nexport class IndentGuideHorizontalLine {\n    constructor(top, endColumn) {\n        this.top = top;\n        this.endColumn = endColumn;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../base/common/lifecycle.js';\nexport class TokenizationRegistry {\n    constructor() {\n        this._tokenizationSupports = new Map();\n        this._factories = new Map();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._colorMap = null;\n    }\n    handleChange(languageIds) {\n        this._onDidChange.fire({\n            changedLanguages: languageIds,\n            changedColorMap: false\n        });\n    }\n    register(languageId, support) {\n        this._tokenizationSupports.set(languageId, support);\n        this.handleChange([languageId]);\n        return toDisposable(() => {\n            if (this._tokenizationSupports.get(languageId) !== support) {\n                return;\n            }\n            this._tokenizationSupports.delete(languageId);\n            this.handleChange([languageId]);\n        });\n    }\n    get(languageId) {\n        return this._tokenizationSupports.get(languageId) || null;\n    }\n    registerFactory(languageId, factory) {\n        var _a;\n        (_a = this._factories.get(languageId)) === null || _a === void 0 ? void 0 : _a.dispose();\n        const myData = new TokenizationSupportFactoryData(this, languageId, factory);\n        this._factories.set(languageId, myData);\n        return toDisposable(() => {\n            const v = this._factories.get(languageId);\n            if (!v || v !== myData) {\n                return;\n            }\n            this._factories.delete(languageId);\n            v.dispose();\n        });\n    }\n    getOrCreate(languageId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // check first if the support is already set\n            const tokenizationSupport = this.get(languageId);\n            if (tokenizationSupport) {\n                return tokenizationSupport;\n            }\n            const factory = this._factories.get(languageId);\n            if (!factory || factory.isResolved) {\n                // no factory or factory.resolve already finished\n                return null;\n            }\n            yield factory.resolve();\n            return this.get(languageId);\n        });\n    }\n    isResolved(languageId) {\n        const tokenizationSupport = this.get(languageId);\n        if (tokenizationSupport) {\n            return true;\n        }\n        const factory = this._factories.get(languageId);\n        if (!factory || factory.isResolved) {\n            return true;\n        }\n        return false;\n    }\n    setColorMap(colorMap) {\n        this._colorMap = colorMap;\n        this._onDidChange.fire({\n            changedLanguages: Array.from(this._tokenizationSupports.keys()),\n            changedColorMap: true\n        });\n    }\n    getColorMap() {\n        return this._colorMap;\n    }\n    getDefaultBackground() {\n        if (this._colorMap && this._colorMap.length > 2 /* ColorId.DefaultBackground */) {\n            return this._colorMap[2 /* ColorId.DefaultBackground */];\n        }\n        return null;\n    }\n}\nclass TokenizationSupportFactoryData extends Disposable {\n    get isResolved() {\n        return this._isResolved;\n    }\n    constructor(_registry, _languageId, _factory) {\n        super();\n        this._registry = _registry;\n        this._languageId = _languageId;\n        this._factory = _factory;\n        this._isDisposed = false;\n        this._resolvePromise = null;\n        this._isResolved = false;\n    }\n    dispose() {\n        this._isDisposed = true;\n        super.dispose();\n    }\n    resolve() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._resolvePromise) {\n                this._resolvePromise = this._create();\n            }\n            return this._resolvePromise;\n        });\n    }\n    _create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const value = yield this._factory.tokenizationSupport;\n            this._isResolved = true;\n            if (value && !this._isDisposed) {\n                this._register(this._registry.register(this._languageId, value));\n            }\n        });\n    }\n}\n","/**\n * Represents contiguous tokens over a contiguous range of lines.\n */\nexport class ContiguousMultilineTokens {\n    /**\n     * (Inclusive) start line number for these tokens.\n     */\n    get startLineNumber() {\n        return this._startLineNumber;\n    }\n    /**\n     * (Inclusive) end line number for these tokens.\n     */\n    get endLineNumber() {\n        return this._startLineNumber + this._tokens.length - 1;\n    }\n    constructor(startLineNumber, tokens) {\n        this._startLineNumber = startLineNumber;\n        this._tokens = tokens;\n    }\n    /**\n     * @see {@link _tokens}\n     */\n    getLineTokens(lineNumber) {\n        return this._tokens[lineNumber - this._startLineNumber];\n    }\n    appendLineTokens(lineTokens) {\n        this._tokens.push(lineTokens);\n    }\n}\n","import { ContiguousMultilineTokens } from './contiguousMultilineTokens.js';\nexport class ContiguousMultilineTokensBuilder {\n    constructor() {\n        this._tokens = [];\n    }\n    add(lineNumber, lineTokens) {\n        if (this._tokens.length > 0) {\n            const last = this._tokens[this._tokens.length - 1];\n            if (last.endLineNumber + 1 === lineNumber) {\n                // append\n                last.appendLineTokens(lineTokens);\n                return;\n            }\n        }\n        this._tokens.push(new ContiguousMultilineTokens(lineNumber, [lineTokens]));\n    }\n    finalize() {\n        return this._tokens;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineTokens } from './lineTokens.js';\nexport const EMPTY_LINE_TOKENS = (new Uint32Array(0)).buffer;\nexport class ContiguousTokensEditing {\n    static deleteBeginning(lineTokens, toChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        return ContiguousTokensEditing.delete(lineTokens, 0, toChIndex);\n    }\n    static deleteEnding(lineTokens, fromChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const lineTextLength = tokens[tokens.length - 2];\n        return ContiguousTokensEditing.delete(lineTokens, fromChIndex, lineTextLength);\n    }\n    static delete(lineTokens, fromChIndex, toChIndex) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS || fromChIndex === toChIndex) {\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const tokensCount = (tokens.length >>> 1);\n        // special case: deleting everything\n        if (fromChIndex === 0 && tokens[tokens.length - 2] === toChIndex) {\n            return EMPTY_LINE_TOKENS;\n        }\n        const fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, fromChIndex);\n        const fromTokenStartOffset = (fromTokenIndex > 0 ? tokens[(fromTokenIndex - 1) << 1] : 0);\n        const fromTokenEndOffset = tokens[fromTokenIndex << 1];\n        if (toChIndex < fromTokenEndOffset) {\n            // the delete range is inside a single token\n            const delta = (toChIndex - fromChIndex);\n            for (let i = fromTokenIndex; i < tokensCount; i++) {\n                tokens[i << 1] -= delta;\n            }\n            return lineTokens;\n        }\n        let dest;\n        let lastEnd;\n        if (fromTokenStartOffset !== fromChIndex) {\n            tokens[fromTokenIndex << 1] = fromChIndex;\n            dest = ((fromTokenIndex + 1) << 1);\n            lastEnd = fromChIndex;\n        }\n        else {\n            dest = (fromTokenIndex << 1);\n            lastEnd = fromTokenStartOffset;\n        }\n        const delta = (toChIndex - fromChIndex);\n        for (let tokenIndex = fromTokenIndex + 1; tokenIndex < tokensCount; tokenIndex++) {\n            const tokenEndOffset = tokens[tokenIndex << 1] - delta;\n            if (tokenEndOffset > lastEnd) {\n                tokens[dest++] = tokenEndOffset;\n                tokens[dest++] = tokens[(tokenIndex << 1) + 1];\n                lastEnd = tokenEndOffset;\n            }\n        }\n        if (dest === tokens.length) {\n            // nothing to trim\n            return lineTokens;\n        }\n        const tmp = new Uint32Array(dest);\n        tmp.set(tokens.subarray(0, dest), 0);\n        return tmp.buffer;\n    }\n    static append(lineTokens, _otherTokens) {\n        if (_otherTokens === EMPTY_LINE_TOKENS) {\n            return lineTokens;\n        }\n        if (lineTokens === EMPTY_LINE_TOKENS) {\n            return _otherTokens;\n        }\n        if (lineTokens === null) {\n            return lineTokens;\n        }\n        if (_otherTokens === null) {\n            // cannot determine combined line length...\n            return null;\n        }\n        const myTokens = toUint32Array(lineTokens);\n        const otherTokens = toUint32Array(_otherTokens);\n        const otherTokensCount = (otherTokens.length >>> 1);\n        const result = new Uint32Array(myTokens.length + otherTokens.length);\n        result.set(myTokens, 0);\n        let dest = myTokens.length;\n        const delta = myTokens[myTokens.length - 2];\n        for (let i = 0; i < otherTokensCount; i++) {\n            result[dest++] = otherTokens[(i << 1)] + delta;\n            result[dest++] = otherTokens[(i << 1) + 1];\n        }\n        return result.buffer;\n    }\n    static insert(lineTokens, chIndex, textLength) {\n        if (lineTokens === null || lineTokens === EMPTY_LINE_TOKENS) {\n            // nothing to do\n            return lineTokens;\n        }\n        const tokens = toUint32Array(lineTokens);\n        const tokensCount = (tokens.length >>> 1);\n        let fromTokenIndex = LineTokens.findIndexInTokensArray(tokens, chIndex);\n        if (fromTokenIndex > 0) {\n            const fromTokenStartOffset = tokens[(fromTokenIndex - 1) << 1];\n            if (fromTokenStartOffset === chIndex) {\n                fromTokenIndex--;\n            }\n        }\n        for (let tokenIndex = fromTokenIndex; tokenIndex < tokensCount; tokenIndex++) {\n            tokens[tokenIndex << 1] += textLength;\n        }\n        return lineTokens;\n    }\n}\nexport function toUint32Array(arr) {\n    if (arr instanceof Uint32Array) {\n        return arr;\n    }\n    else {\n        return new Uint32Array(arr);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { ContiguousTokensEditing, EMPTY_LINE_TOKENS, toUint32Array } from './contiguousTokensEditing.js';\nimport { LineTokens } from './lineTokens.js';\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\n/**\n * Represents contiguous tokens in a text model.\n */\nexport class ContiguousTokensStore {\n    constructor(languageIdCodec) {\n        this._lineTokens = [];\n        this._len = 0;\n        this._languageIdCodec = languageIdCodec;\n    }\n    flush() {\n        this._lineTokens = [];\n        this._len = 0;\n    }\n    get hasTokens() {\n        return this._lineTokens.length > 0;\n    }\n    getTokens(topLevelLanguageId, lineIndex, lineText) {\n        let rawLineTokens = null;\n        if (lineIndex < this._len) {\n            rawLineTokens = this._lineTokens[lineIndex];\n        }\n        if (rawLineTokens !== null && rawLineTokens !== EMPTY_LINE_TOKENS) {\n            return new LineTokens(toUint32Array(rawLineTokens), lineText, this._languageIdCodec);\n        }\n        const lineTokens = new Uint32Array(2);\n        lineTokens[0] = lineText.length;\n        lineTokens[1] = getDefaultMetadata(this._languageIdCodec.encodeLanguageId(topLevelLanguageId));\n        return new LineTokens(lineTokens, lineText, this._languageIdCodec);\n    }\n    static _massageTokens(topLevelLanguageId, lineTextLength, _tokens) {\n        const tokens = _tokens ? toUint32Array(_tokens) : null;\n        if (lineTextLength === 0) {\n            let hasDifferentLanguageId = false;\n            if (tokens && tokens.length > 1) {\n                hasDifferentLanguageId = (TokenMetadata.getLanguageId(tokens[1]) !== topLevelLanguageId);\n            }\n            if (!hasDifferentLanguageId) {\n                return EMPTY_LINE_TOKENS;\n            }\n        }\n        if (!tokens || tokens.length === 0) {\n            const tokens = new Uint32Array(2);\n            tokens[0] = lineTextLength;\n            tokens[1] = getDefaultMetadata(topLevelLanguageId);\n            return tokens.buffer;\n        }\n        // Ensure the last token covers the end of the text\n        tokens[tokens.length - 2] = lineTextLength;\n        if (tokens.byteOffset === 0 && tokens.byteLength === tokens.buffer.byteLength) {\n            // Store directly the ArrayBuffer pointer to save an object\n            return tokens.buffer;\n        }\n        return tokens;\n    }\n    _ensureLine(lineIndex) {\n        while (lineIndex >= this._len) {\n            this._lineTokens[this._len] = null;\n            this._len++;\n        }\n    }\n    _deleteLines(start, deleteCount) {\n        if (deleteCount === 0) {\n            return;\n        }\n        if (start + deleteCount > this._len) {\n            deleteCount = this._len - start;\n        }\n        this._lineTokens.splice(start, deleteCount);\n        this._len -= deleteCount;\n    }\n    _insertLines(insertIndex, insertCount) {\n        if (insertCount === 0) {\n            return;\n        }\n        const lineTokens = [];\n        for (let i = 0; i < insertCount; i++) {\n            lineTokens[i] = null;\n        }\n        this._lineTokens = arrays.arrayInsert(this._lineTokens, insertIndex, lineTokens);\n        this._len += insertCount;\n    }\n    setTokens(topLevelLanguageId, lineIndex, lineTextLength, _tokens, checkEquality) {\n        const tokens = ContiguousTokensStore._massageTokens(this._languageIdCodec.encodeLanguageId(topLevelLanguageId), lineTextLength, _tokens);\n        this._ensureLine(lineIndex);\n        const oldTokens = this._lineTokens[lineIndex];\n        this._lineTokens[lineIndex] = tokens;\n        if (checkEquality) {\n            return !ContiguousTokensStore._equals(oldTokens, tokens);\n        }\n        return false;\n    }\n    static _equals(_a, _b) {\n        if (!_a || !_b) {\n            return !_a && !_b;\n        }\n        const a = toUint32Array(_a);\n        const b = toUint32Array(_b);\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0, len = a.length; i < len; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //#region Editing\n    acceptEdit(range, eolCount, firstLineLength) {\n        this._acceptDeleteRange(range);\n        this._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength);\n    }\n    _acceptDeleteRange(range) {\n        const firstLineIndex = range.startLineNumber - 1;\n        if (firstLineIndex >= this._len) {\n            return;\n        }\n        if (range.startLineNumber === range.endLineNumber) {\n            if (range.startColumn === range.endColumn) {\n                // Nothing to delete\n                return;\n            }\n            this._lineTokens[firstLineIndex] = ContiguousTokensEditing.delete(this._lineTokens[firstLineIndex], range.startColumn - 1, range.endColumn - 1);\n            return;\n        }\n        this._lineTokens[firstLineIndex] = ContiguousTokensEditing.deleteEnding(this._lineTokens[firstLineIndex], range.startColumn - 1);\n        const lastLineIndex = range.endLineNumber - 1;\n        let lastLineTokens = null;\n        if (lastLineIndex < this._len) {\n            lastLineTokens = ContiguousTokensEditing.deleteBeginning(this._lineTokens[lastLineIndex], range.endColumn - 1);\n        }\n        // Take remaining text on last line and append it to remaining text on first line\n        this._lineTokens[firstLineIndex] = ContiguousTokensEditing.append(this._lineTokens[firstLineIndex], lastLineTokens);\n        // Delete middle lines\n        this._deleteLines(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n    }\n    _acceptInsertText(position, eolCount, firstLineLength) {\n        if (eolCount === 0 && firstLineLength === 0) {\n            // Nothing to insert\n            return;\n        }\n        const lineIndex = position.lineNumber - 1;\n        if (lineIndex >= this._len) {\n            return;\n        }\n        if (eolCount === 0) {\n            // Inserting text on one line\n            this._lineTokens[lineIndex] = ContiguousTokensEditing.insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n            return;\n        }\n        this._lineTokens[lineIndex] = ContiguousTokensEditing.deleteEnding(this._lineTokens[lineIndex], position.column - 1);\n        this._lineTokens[lineIndex] = ContiguousTokensEditing.insert(this._lineTokens[lineIndex], position.column - 1, firstLineLength);\n        this._insertLines(position.lineNumber, eolCount);\n    }\n    //#endregion\n    setMultilineTokens(tokens, textModel) {\n        if (tokens.length === 0) {\n            return { changes: [] };\n        }\n        const ranges = [];\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const element = tokens[i];\n            let minChangedLineNumber = 0;\n            let maxChangedLineNumber = 0;\n            let hasChange = false;\n            for (let lineNumber = element.startLineNumber; lineNumber <= element.endLineNumber; lineNumber++) {\n                if (hasChange) {\n                    this.setTokens(textModel.getLanguageId(), lineNumber - 1, textModel.getLineLength(lineNumber), element.getLineTokens(lineNumber), false);\n                    maxChangedLineNumber = lineNumber;\n                }\n                else {\n                    const lineHasChange = this.setTokens(textModel.getLanguageId(), lineNumber - 1, textModel.getLineLength(lineNumber), element.getLineTokens(lineNumber), true);\n                    if (lineHasChange) {\n                        hasChange = true;\n                        minChangedLineNumber = lineNumber;\n                        maxChangedLineNumber = lineNumber;\n                    }\n                }\n            }\n            if (hasChange) {\n                ranges.push({ fromLineNumber: minChangedLineNumber, toLineNumber: maxChangedLineNumber, });\n            }\n        }\n        return { changes: ranges };\n    }\n}\nfunction getDefaultMetadata(topLevelLanguageId) {\n    return ((topLevelLanguageId << 0 /* MetadataConsts.LANGUAGEID_OFFSET */)\n        | (0 /* StandardTokenType.Other */ << 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */)\n        | (0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n        | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n        | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)\n        // If there is no grammar, we just take a guess and try to match brackets.\n        | (1024 /* MetadataConsts.BALANCED_BRACKETS_MASK */)) >>> 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { TokenMetadata } from '../encodedTokenAttributes.js';\nexport class LineTokens {\n    static createEmpty(lineContent, decoder) {\n        const defaultMetadata = LineTokens.defaultTokenMetadata;\n        const tokens = new Uint32Array(2);\n        tokens[0] = lineContent.length;\n        tokens[1] = defaultMetadata;\n        return new LineTokens(tokens, lineContent, decoder);\n    }\n    constructor(tokens, text, decoder) {\n        this._lineTokensBrand = undefined;\n        this._tokens = tokens;\n        this._tokensCount = (this._tokens.length >>> 1);\n        this._text = text;\n        this._languageIdCodec = decoder;\n    }\n    equals(other) {\n        if (other instanceof LineTokens) {\n            return this.slicedEquals(other, 0, this._tokensCount);\n        }\n        return false;\n    }\n    slicedEquals(other, sliceFromTokenIndex, sliceTokenCount) {\n        if (this._text !== other._text) {\n            return false;\n        }\n        if (this._tokensCount !== other._tokensCount) {\n            return false;\n        }\n        const from = (sliceFromTokenIndex << 1);\n        const to = from + (sliceTokenCount << 1);\n        for (let i = from; i < to; i++) {\n            if (this._tokens[i] !== other._tokens[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    getLineContent() {\n        return this._text;\n    }\n    getCount() {\n        return this._tokensCount;\n    }\n    getStartOffset(tokenIndex) {\n        if (tokenIndex > 0) {\n            return this._tokens[(tokenIndex - 1) << 1];\n        }\n        return 0;\n    }\n    getMetadata(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return metadata;\n    }\n    getLanguageId(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        const languageId = TokenMetadata.getLanguageId(metadata);\n        return this._languageIdCodec.decodeLanguageId(languageId);\n    }\n    getStandardTokenType(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getTokenType(metadata);\n    }\n    getForeground(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getForeground(metadata);\n    }\n    getClassName(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getClassNameFromMetadata(metadata);\n    }\n    getInlineStyle(tokenIndex, colorMap) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\n    }\n    getPresentation(tokenIndex) {\n        const metadata = this._tokens[(tokenIndex << 1) + 1];\n        return TokenMetadata.getPresentationFromMetadata(metadata);\n    }\n    getEndOffset(tokenIndex) {\n        return this._tokens[tokenIndex << 1];\n    }\n    /**\n     * Find the token containing offset `offset`.\n     * @param offset The search offset\n     * @return The index of the token containing the offset.\n     */\n    findTokenIndexAtOffset(offset) {\n        return LineTokens.findIndexInTokensArray(this._tokens, offset);\n    }\n    inflate() {\n        return this;\n    }\n    sliceAndInflate(startOffset, endOffset, deltaOffset) {\n        return new SliceLineTokens(this, startOffset, endOffset, deltaOffset);\n    }\n    static convertToEndOffset(tokens, lineTextLength) {\n        const tokenCount = (tokens.length >>> 1);\n        const lastTokenIndex = tokenCount - 1;\n        for (let tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\n            tokens[tokenIndex << 1] = tokens[(tokenIndex + 1) << 1];\n        }\n        tokens[lastTokenIndex << 1] = lineTextLength;\n    }\n    static findIndexInTokensArray(tokens, desiredIndex) {\n        if (tokens.length <= 2) {\n            return 0;\n        }\n        let low = 0;\n        let high = (tokens.length >>> 1) - 1;\n        while (low < high) {\n            const mid = low + Math.floor((high - low) / 2);\n            const endOffset = tokens[(mid << 1)];\n            if (endOffset === desiredIndex) {\n                return mid + 1;\n            }\n            else if (endOffset < desiredIndex) {\n                low = mid + 1;\n            }\n            else if (endOffset > desiredIndex) {\n                high = mid;\n            }\n        }\n        return low;\n    }\n    /**\n     * @pure\n     * @param insertTokens Must be sorted by offset.\n    */\n    withInserted(insertTokens) {\n        if (insertTokens.length === 0) {\n            return this;\n        }\n        let nextOriginalTokenIdx = 0;\n        let nextInsertTokenIdx = 0;\n        let text = '';\n        const newTokens = new Array();\n        let originalEndOffset = 0;\n        while (true) {\n            const nextOriginalTokenEndOffset = nextOriginalTokenIdx < this._tokensCount ? this._tokens[nextOriginalTokenIdx << 1] : -1;\n            const nextInsertToken = nextInsertTokenIdx < insertTokens.length ? insertTokens[nextInsertTokenIdx] : null;\n            if (nextOriginalTokenEndOffset !== -1 && (nextInsertToken === null || nextOriginalTokenEndOffset <= nextInsertToken.offset)) {\n                // original token ends before next insert token\n                text += this._text.substring(originalEndOffset, nextOriginalTokenEndOffset);\n                const metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n                newTokens.push(text.length, metadata);\n                nextOriginalTokenIdx++;\n                originalEndOffset = nextOriginalTokenEndOffset;\n            }\n            else if (nextInsertToken) {\n                if (nextInsertToken.offset > originalEndOffset) {\n                    // insert token is in the middle of the next token.\n                    text += this._text.substring(originalEndOffset, nextInsertToken.offset);\n                    const metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n                    newTokens.push(text.length, metadata);\n                    originalEndOffset = nextInsertToken.offset;\n                }\n                text += nextInsertToken.text;\n                newTokens.push(text.length, nextInsertToken.tokenMetadata);\n                nextInsertTokenIdx++;\n            }\n            else {\n                break;\n            }\n        }\n        return new LineTokens(new Uint32Array(newTokens), text, this._languageIdCodec);\n    }\n}\nLineTokens.defaultTokenMetadata = ((0 /* FontStyle.None */ << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n    | (1 /* ColorId.DefaultForeground */ << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n    | (2 /* ColorId.DefaultBackground */ << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\nclass SliceLineTokens {\n    constructor(source, startOffset, endOffset, deltaOffset) {\n        this._source = source;\n        this._startOffset = startOffset;\n        this._endOffset = endOffset;\n        this._deltaOffset = deltaOffset;\n        this._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\n        this._tokensCount = 0;\n        for (let i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\n            const tokenStartOffset = source.getStartOffset(i);\n            if (tokenStartOffset >= endOffset) {\n                break;\n            }\n            this._tokensCount++;\n        }\n    }\n    getMetadata(tokenIndex) {\n        return this._source.getMetadata(this._firstTokenIndex + tokenIndex);\n    }\n    getLanguageId(tokenIndex) {\n        return this._source.getLanguageId(this._firstTokenIndex + tokenIndex);\n    }\n    getLineContent() {\n        return this._source.getLineContent().substring(this._startOffset, this._endOffset);\n    }\n    equals(other) {\n        if (other instanceof SliceLineTokens) {\n            return (this._startOffset === other._startOffset\n                && this._endOffset === other._endOffset\n                && this._deltaOffset === other._deltaOffset\n                && this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount));\n        }\n        return false;\n    }\n    getCount() {\n        return this._tokensCount;\n    }\n    getForeground(tokenIndex) {\n        return this._source.getForeground(this._firstTokenIndex + tokenIndex);\n    }\n    getEndOffset(tokenIndex) {\n        const tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\n        return Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\n    }\n    getClassName(tokenIndex) {\n        return this._source.getClassName(this._firstTokenIndex + tokenIndex);\n    }\n    getInlineStyle(tokenIndex, colorMap) {\n        return this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\n    }\n    getPresentation(tokenIndex) {\n        return this._source.getPresentation(this._firstTokenIndex + tokenIndex);\n    }\n    findTokenIndexAtOffset(offset) {\n        return this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { countEOL } from '../core/eolCounter.js';\n/**\n * Represents sparse tokens over a contiguous range of lines.\n */\nexport class SparseMultilineTokens {\n    static create(startLineNumber, tokens) {\n        return new SparseMultilineTokens(startLineNumber, new SparseMultilineTokensStorage(tokens));\n    }\n    /**\n     * (Inclusive) start line number for these tokens.\n     */\n    get startLineNumber() {\n        return this._startLineNumber;\n    }\n    /**\n     * (Inclusive) end line number for these tokens.\n     */\n    get endLineNumber() {\n        return this._endLineNumber;\n    }\n    constructor(startLineNumber, tokens) {\n        this._startLineNumber = startLineNumber;\n        this._tokens = tokens;\n        this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n    }\n    toString() {\n        return this._tokens.toString(this._startLineNumber);\n    }\n    _updateEndLineNumber() {\n        this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n    }\n    isEmpty() {\n        return this._tokens.isEmpty();\n    }\n    getLineTokens(lineNumber) {\n        if (this._startLineNumber <= lineNumber && lineNumber <= this._endLineNumber) {\n            return this._tokens.getLineTokens(lineNumber - this._startLineNumber);\n        }\n        return null;\n    }\n    getRange() {\n        const deltaRange = this._tokens.getRange();\n        if (!deltaRange) {\n            return deltaRange;\n        }\n        return new Range(this._startLineNumber + deltaRange.startLineNumber, deltaRange.startColumn, this._startLineNumber + deltaRange.endLineNumber, deltaRange.endColumn);\n    }\n    removeTokens(range) {\n        const startLineIndex = range.startLineNumber - this._startLineNumber;\n        const endLineIndex = range.endLineNumber - this._startLineNumber;\n        this._startLineNumber += this._tokens.removeTokens(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n        this._updateEndLineNumber();\n    }\n    split(range) {\n        // split tokens to two:\n        // a) all the tokens before `range`\n        // b) all the tokens after `range`\n        const startLineIndex = range.startLineNumber - this._startLineNumber;\n        const endLineIndex = range.endLineNumber - this._startLineNumber;\n        const [a, b, bDeltaLine] = this._tokens.split(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n        return [new SparseMultilineTokens(this._startLineNumber, a), new SparseMultilineTokens(this._startLineNumber + bDeltaLine, b)];\n    }\n    applyEdit(range, text) {\n        const [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n        this.acceptEdit(range, eolCount, firstLineLength, lastLineLength, text.length > 0 ? text.charCodeAt(0) : 0 /* CharCode.Null */);\n    }\n    acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        this._acceptDeleteRange(range);\n        this._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength, lastLineLength, firstCharCode);\n        this._updateEndLineNumber();\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n            // Nothing to delete\n            return;\n        }\n        const firstLineIndex = range.startLineNumber - this._startLineNumber;\n        const lastLineIndex = range.endLineNumber - this._startLineNumber;\n        if (lastLineIndex < 0) {\n            // this deletion occurs entirely before this block, so we only need to adjust line numbers\n            const deletedLinesCount = lastLineIndex - firstLineIndex;\n            this._startLineNumber -= deletedLinesCount;\n            return;\n        }\n        const tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n        if (firstLineIndex >= tokenMaxDeltaLine + 1) {\n            // this deletion occurs entirely after this block, so there is nothing to do\n            return;\n        }\n        if (firstLineIndex < 0 && lastLineIndex >= tokenMaxDeltaLine + 1) {\n            // this deletion completely encompasses this block\n            this._startLineNumber = 0;\n            this._tokens.clear();\n            return;\n        }\n        if (firstLineIndex < 0) {\n            const deletedBefore = -firstLineIndex;\n            this._startLineNumber -= deletedBefore;\n            this._tokens.acceptDeleteRange(range.startColumn - 1, 0, 0, lastLineIndex, range.endColumn - 1);\n        }\n        else {\n            this._tokens.acceptDeleteRange(0, firstLineIndex, range.startColumn - 1, lastLineIndex, range.endColumn - 1);\n        }\n    }\n    _acceptInsertText(position, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        if (eolCount === 0 && firstLineLength === 0) {\n            // Nothing to insert\n            return;\n        }\n        const lineIndex = position.lineNumber - this._startLineNumber;\n        if (lineIndex < 0) {\n            // this insertion occurs before this block, so we only need to adjust line numbers\n            this._startLineNumber += eolCount;\n            return;\n        }\n        const tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n        if (lineIndex >= tokenMaxDeltaLine + 1) {\n            // this insertion occurs after this block, so there is nothing to do\n            return;\n        }\n        this._tokens.acceptInsertText(lineIndex, position.column - 1, eolCount, firstLineLength, lastLineLength, firstCharCode);\n    }\n}\nclass SparseMultilineTokensStorage {\n    constructor(tokens) {\n        this._tokens = tokens;\n        this._tokenCount = tokens.length / 4;\n    }\n    toString(startLineNumber) {\n        const pieces = [];\n        for (let i = 0; i < this._tokenCount; i++) {\n            pieces.push(`(${this._getDeltaLine(i) + startLineNumber},${this._getStartCharacter(i)}-${this._getEndCharacter(i)})`);\n        }\n        return `[${pieces.join(',')}]`;\n    }\n    getMaxDeltaLine() {\n        const tokenCount = this._getTokenCount();\n        if (tokenCount === 0) {\n            return -1;\n        }\n        return this._getDeltaLine(tokenCount - 1);\n    }\n    getRange() {\n        const tokenCount = this._getTokenCount();\n        if (tokenCount === 0) {\n            return null;\n        }\n        const startChar = this._getStartCharacter(0);\n        const maxDeltaLine = this._getDeltaLine(tokenCount - 1);\n        const endChar = this._getEndCharacter(tokenCount - 1);\n        return new Range(0, startChar + 1, maxDeltaLine, endChar + 1);\n    }\n    _getTokenCount() {\n        return this._tokenCount;\n    }\n    _getDeltaLine(tokenIndex) {\n        return this._tokens[4 * tokenIndex];\n    }\n    _getStartCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 1];\n    }\n    _getEndCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 2];\n    }\n    isEmpty() {\n        return (this._getTokenCount() === 0);\n    }\n    getLineTokens(deltaLine) {\n        let low = 0;\n        let high = this._getTokenCount() - 1;\n        while (low < high) {\n            const mid = low + Math.floor((high - low) / 2);\n            const midDeltaLine = this._getDeltaLine(mid);\n            if (midDeltaLine < deltaLine) {\n                low = mid + 1;\n            }\n            else if (midDeltaLine > deltaLine) {\n                high = mid - 1;\n            }\n            else {\n                let min = mid;\n                while (min > low && this._getDeltaLine(min - 1) === deltaLine) {\n                    min--;\n                }\n                let max = mid;\n                while (max < high && this._getDeltaLine(max + 1) === deltaLine) {\n                    max++;\n                }\n                return new SparseLineTokens(this._tokens.subarray(4 * min, 4 * max + 4));\n            }\n        }\n        if (this._getDeltaLine(low) === deltaLine) {\n            return new SparseLineTokens(this._tokens.subarray(4 * low, 4 * low + 4));\n        }\n        return null;\n    }\n    clear() {\n        this._tokenCount = 0;\n    }\n    removeTokens(startDeltaLine, startChar, endDeltaLine, endChar) {\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        let newTokenCount = 0;\n        let hasDeletedTokens = false;\n        let firstDeltaLine = 0;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            const tokenDeltaLine = tokens[srcOffset];\n            const tokenStartCharacter = tokens[srcOffset + 1];\n            const tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))\n                && (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n                hasDeletedTokens = true;\n            }\n            else {\n                if (newTokenCount === 0) {\n                    firstDeltaLine = tokenDeltaLine;\n                }\n                if (hasDeletedTokens) {\n                    // must move the token to the left\n                    const destOffset = 4 * newTokenCount;\n                    tokens[destOffset] = tokenDeltaLine - firstDeltaLine;\n                    tokens[destOffset + 1] = tokenStartCharacter;\n                    tokens[destOffset + 2] = tokenEndCharacter;\n                    tokens[destOffset + 3] = tokenMetadata;\n                }\n                newTokenCount++;\n            }\n        }\n        this._tokenCount = newTokenCount;\n        return firstDeltaLine;\n    }\n    split(startDeltaLine, startChar, endDeltaLine, endChar) {\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        const aTokens = [];\n        const bTokens = [];\n        let destTokens = aTokens;\n        let destOffset = 0;\n        let destFirstDeltaLine = 0;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            const tokenDeltaLine = tokens[srcOffset];\n            const tokenStartCharacter = tokens[srcOffset + 1];\n            const tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))) {\n                if ((tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n                    // this token is touching the range\n                    continue;\n                }\n                else {\n                    // this token is after the range\n                    if (destTokens !== bTokens) {\n                        // this token is the first token after the range\n                        destTokens = bTokens;\n                        destOffset = 0;\n                        destFirstDeltaLine = tokenDeltaLine;\n                    }\n                }\n            }\n            destTokens[destOffset++] = tokenDeltaLine - destFirstDeltaLine;\n            destTokens[destOffset++] = tokenStartCharacter;\n            destTokens[destOffset++] = tokenEndCharacter;\n            destTokens[destOffset++] = tokenMetadata;\n        }\n        return [new SparseMultilineTokensStorage(new Uint32Array(aTokens)), new SparseMultilineTokensStorage(new Uint32Array(bTokens)), destFirstDeltaLine];\n    }\n    acceptDeleteRange(horizontalShiftForFirstLineTokens, startDeltaLine, startCharacter, endDeltaLine, endCharacter) {\n        // This is a bit complex, here are the cases I used to think about this:\n        //\n        // 1. The token starts before the deletion range\n        // 1a. The token is completely before the deletion range\n        //               -----------\n        //                          xxxxxxxxxxx\n        // 1b. The token starts before, the deletion range ends after the token\n        //               -----------\n        //                      xxxxxxxxxxx\n        // 1c. The token starts before, the deletion range ends precisely with the token\n        //               ---------------\n        //                      xxxxxxxx\n        // 1d. The token starts before, the deletion range is inside the token\n        //               ---------------\n        //                    xxxxx\n        //\n        // 2. The token starts at the same position with the deletion range\n        // 2a. The token starts at the same position, and ends inside the deletion range\n        //               -------\n        //               xxxxxxxxxxx\n        // 2b. The token starts at the same position, and ends at the same position as the deletion range\n        //               ----------\n        //               xxxxxxxxxx\n        // 2c. The token starts at the same position, and ends after the deletion range\n        //               -------------\n        //               xxxxxxx\n        //\n        // 3. The token starts inside the deletion range\n        // 3a. The token is inside the deletion range\n        //                -------\n        //             xxxxxxxxxxxxx\n        // 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n        //                ----------\n        //             xxxxxxxxxxxxx\n        // 3c. The token starts inside the deletion range, and ends after the deletion range\n        //                ------------\n        //             xxxxxxxxxxx\n        //\n        // 4. The token starts after the deletion range\n        //                  -----------\n        //          xxxxxxxx\n        //\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        const deletedLineCount = (endDeltaLine - startDeltaLine);\n        let newTokenCount = 0;\n        let hasDeletedTokens = false;\n        for (let i = 0; i < tokenCount; i++) {\n            const srcOffset = 4 * i;\n            let tokenDeltaLine = tokens[srcOffset];\n            let tokenStartCharacter = tokens[srcOffset + 1];\n            let tokenEndCharacter = tokens[srcOffset + 2];\n            const tokenMetadata = tokens[srcOffset + 3];\n            if (tokenDeltaLine < startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter <= startCharacter)) {\n                // 1a. The token is completely before the deletion range\n                // => nothing to do\n                newTokenCount++;\n                continue;\n            }\n            else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter < startCharacter) {\n                // 1b, 1c, 1d\n                // => the token survives, but it needs to shrink\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 1d. The token starts before, the deletion range is inside the token\n                    // => the token shrinks by the deletion character count\n                    tokenEndCharacter -= (endCharacter - startCharacter);\n                }\n                else {\n                    // 1b. The token starts before, the deletion range ends after the token\n                    // 1c. The token starts before, the deletion range ends precisely with the token\n                    // => the token shrinks its ending to the deletion start\n                    tokenEndCharacter = startCharacter;\n                }\n            }\n            else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter === startCharacter) {\n                // 2a, 2b, 2c\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 2c. The token starts at the same position, and ends after the deletion range\n                    // => the token shrinks by the deletion character count\n                    tokenEndCharacter -= (endCharacter - startCharacter);\n                }\n                else {\n                    // 2a. The token starts at the same position, and ends inside the deletion range\n                    // 2b. The token starts at the same position, and ends at the same position as the deletion range\n                    // => the token is deleted\n                    hasDeletedTokens = true;\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter < endCharacter)) {\n                // 3a, 3b, 3c\n                if (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n                    // 3c. The token starts inside the deletion range, and ends after the deletion range\n                    // => the token moves to continue right after the deletion\n                    tokenDeltaLine = startDeltaLine;\n                    tokenStartCharacter = startCharacter;\n                    tokenEndCharacter = tokenStartCharacter + (tokenEndCharacter - endCharacter);\n                }\n                else {\n                    // 3a. The token is inside the deletion range\n                    // 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n                    // => the token is deleted\n                    hasDeletedTokens = true;\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine > endDeltaLine) {\n                // 4. (partial) The token starts after the deletion range, on a line below...\n                if (deletedLineCount === 0 && !hasDeletedTokens) {\n                    // early stop, there is no need to walk all the tokens and do nothing...\n                    newTokenCount = tokenCount;\n                    break;\n                }\n                tokenDeltaLine -= deletedLineCount;\n            }\n            else if (tokenDeltaLine === endDeltaLine && tokenStartCharacter >= endCharacter) {\n                // 4. (continued) The token starts after the deletion range, on the last line where a deletion occurs\n                if (horizontalShiftForFirstLineTokens && tokenDeltaLine === 0) {\n                    tokenStartCharacter += horizontalShiftForFirstLineTokens;\n                    tokenEndCharacter += horizontalShiftForFirstLineTokens;\n                }\n                tokenDeltaLine -= deletedLineCount;\n                tokenStartCharacter -= (endCharacter - startCharacter);\n                tokenEndCharacter -= (endCharacter - startCharacter);\n            }\n            else {\n                throw new Error(`Not possible!`);\n            }\n            const destOffset = 4 * newTokenCount;\n            tokens[destOffset] = tokenDeltaLine;\n            tokens[destOffset + 1] = tokenStartCharacter;\n            tokens[destOffset + 2] = tokenEndCharacter;\n            tokens[destOffset + 3] = tokenMetadata;\n            newTokenCount++;\n        }\n        this._tokenCount = newTokenCount;\n    }\n    acceptInsertText(deltaLine, character, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        // Here are the cases I used to think about this:\n        //\n        // 1. The token is completely before the insertion point\n        //            -----------   |\n        // 2. The token ends precisely at the insertion point\n        //            -----------|\n        // 3. The token contains the insertion point\n        //            -----|------\n        // 4. The token starts precisely at the insertion point\n        //            |-----------\n        // 5. The token is completely after the insertion point\n        //            |   -----------\n        //\n        const isInsertingPreciselyOneWordCharacter = (eolCount === 0\n            && firstLineLength === 1\n            && ((firstCharCode >= 48 /* CharCode.Digit0 */ && firstCharCode <= 57 /* CharCode.Digit9 */)\n                || (firstCharCode >= 65 /* CharCode.A */ && firstCharCode <= 90 /* CharCode.Z */)\n                || (firstCharCode >= 97 /* CharCode.a */ && firstCharCode <= 122 /* CharCode.z */)));\n        const tokens = this._tokens;\n        const tokenCount = this._tokenCount;\n        for (let i = 0; i < tokenCount; i++) {\n            const offset = 4 * i;\n            let tokenDeltaLine = tokens[offset];\n            let tokenStartCharacter = tokens[offset + 1];\n            let tokenEndCharacter = tokens[offset + 2];\n            if (tokenDeltaLine < deltaLine || (tokenDeltaLine === deltaLine && tokenEndCharacter < character)) {\n                // 1. The token is completely before the insertion point\n                // => nothing to do\n                continue;\n            }\n            else if (tokenDeltaLine === deltaLine && tokenEndCharacter === character) {\n                // 2. The token ends precisely at the insertion point\n                // => expand the end character only if inserting precisely one character that is a word character\n                if (isInsertingPreciselyOneWordCharacter) {\n                    tokenEndCharacter += 1;\n                }\n                else {\n                    continue;\n                }\n            }\n            else if (tokenDeltaLine === deltaLine && tokenStartCharacter < character && character < tokenEndCharacter) {\n                // 3. The token contains the insertion point\n                if (eolCount === 0) {\n                    // => just expand the end character\n                    tokenEndCharacter += firstLineLength;\n                }\n                else {\n                    // => cut off the token\n                    tokenEndCharacter = character;\n                }\n            }\n            else {\n                // 4. or 5.\n                if (tokenDeltaLine === deltaLine && tokenStartCharacter === character) {\n                    // 4. The token starts precisely at the insertion point\n                    // => grow the token (by keeping its start constant) only if inserting precisely one character that is a word character\n                    // => otherwise behave as in case 5.\n                    if (isInsertingPreciselyOneWordCharacter) {\n                        continue;\n                    }\n                }\n                // => the token must move and keep its size constant\n                if (tokenDeltaLine === deltaLine) {\n                    tokenDeltaLine += eolCount;\n                    // this token is on the line where the insertion is taking place\n                    if (eolCount === 0) {\n                        tokenStartCharacter += firstLineLength;\n                        tokenEndCharacter += firstLineLength;\n                    }\n                    else {\n                        const tokenLength = tokenEndCharacter - tokenStartCharacter;\n                        tokenStartCharacter = lastLineLength + (tokenStartCharacter - character);\n                        tokenEndCharacter = tokenStartCharacter + tokenLength;\n                    }\n                }\n                else {\n                    tokenDeltaLine += eolCount;\n                }\n            }\n            tokens[offset] = tokenDeltaLine;\n            tokens[offset + 1] = tokenStartCharacter;\n            tokens[offset + 2] = tokenEndCharacter;\n        }\n    }\n}\nexport class SparseLineTokens {\n    constructor(tokens) {\n        this._tokens = tokens;\n    }\n    getCount() {\n        return this._tokens.length / 4;\n    }\n    getStartCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 1];\n    }\n    getEndCharacter(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 2];\n    }\n    getMetadata(tokenIndex) {\n        return this._tokens[4 * tokenIndex + 3];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { LineTokens } from './lineTokens.js';\n/**\n * Represents sparse tokens in a text model.\n */\nexport class SparseTokensStore {\n    constructor(languageIdCodec) {\n        this._pieces = [];\n        this._isComplete = false;\n        this._languageIdCodec = languageIdCodec;\n    }\n    flush() {\n        this._pieces = [];\n        this._isComplete = false;\n    }\n    isEmpty() {\n        return (this._pieces.length === 0);\n    }\n    set(pieces, isComplete) {\n        this._pieces = pieces || [];\n        this._isComplete = isComplete;\n    }\n    setPartial(_range, pieces) {\n        // console.log(`setPartial ${_range} ${pieces.map(p => p.toString()).join(', ')}`);\n        let range = _range;\n        if (pieces.length > 0) {\n            const _firstRange = pieces[0].getRange();\n            const _lastRange = pieces[pieces.length - 1].getRange();\n            if (!_firstRange || !_lastRange) {\n                return _range;\n            }\n            range = _range.plusRange(_firstRange).plusRange(_lastRange);\n        }\n        let insertPosition = null;\n        for (let i = 0, len = this._pieces.length; i < len; i++) {\n            const piece = this._pieces[i];\n            if (piece.endLineNumber < range.startLineNumber) {\n                // this piece is before the range\n                continue;\n            }\n            if (piece.startLineNumber > range.endLineNumber) {\n                // this piece is after the range, so mark the spot before this piece\n                // as a good insertion position and stop looping\n                insertPosition = insertPosition || { index: i };\n                break;\n            }\n            // this piece might intersect with the range\n            piece.removeTokens(range);\n            if (piece.isEmpty()) {\n                // remove the piece if it became empty\n                this._pieces.splice(i, 1);\n                i--;\n                len--;\n                continue;\n            }\n            if (piece.endLineNumber < range.startLineNumber) {\n                // after removal, this piece is before the range\n                continue;\n            }\n            if (piece.startLineNumber > range.endLineNumber) {\n                // after removal, this piece is after the range\n                insertPosition = insertPosition || { index: i };\n                continue;\n            }\n            // after removal, this piece contains the range\n            const [a, b] = piece.split(range);\n            if (a.isEmpty()) {\n                // this piece is actually after the range\n                insertPosition = insertPosition || { index: i };\n                continue;\n            }\n            if (b.isEmpty()) {\n                // this piece is actually before the range\n                continue;\n            }\n            this._pieces.splice(i, 1, a, b);\n            i++;\n            len++;\n            insertPosition = insertPosition || { index: i };\n        }\n        insertPosition = insertPosition || { index: this._pieces.length };\n        if (pieces.length > 0) {\n            this._pieces = arrays.arrayInsert(this._pieces, insertPosition.index, pieces);\n        }\n        // console.log(`I HAVE ${this._pieces.length} pieces`);\n        // console.log(`${this._pieces.map(p => p.toString()).join('\\n')}`);\n        return range;\n    }\n    isComplete() {\n        return this._isComplete;\n    }\n    addSparseTokens(lineNumber, aTokens) {\n        if (aTokens.getLineContent().length === 0) {\n            // Don't do anything for empty lines\n            return aTokens;\n        }\n        const pieces = this._pieces;\n        if (pieces.length === 0) {\n            return aTokens;\n        }\n        const pieceIndex = SparseTokensStore._findFirstPieceWithLine(pieces, lineNumber);\n        const bTokens = pieces[pieceIndex].getLineTokens(lineNumber);\n        if (!bTokens) {\n            return aTokens;\n        }\n        const aLen = aTokens.getCount();\n        const bLen = bTokens.getCount();\n        let aIndex = 0;\n        const result = [];\n        let resultLen = 0;\n        let lastEndOffset = 0;\n        const emitToken = (endOffset, metadata) => {\n            if (endOffset === lastEndOffset) {\n                return;\n            }\n            lastEndOffset = endOffset;\n            result[resultLen++] = endOffset;\n            result[resultLen++] = metadata;\n        };\n        for (let bIndex = 0; bIndex < bLen; bIndex++) {\n            const bStartCharacter = bTokens.getStartCharacter(bIndex);\n            const bEndCharacter = bTokens.getEndCharacter(bIndex);\n            const bMetadata = bTokens.getMetadata(bIndex);\n            const bMask = (((bMetadata & 1 /* MetadataConsts.SEMANTIC_USE_ITALIC */) ? 2048 /* MetadataConsts.ITALIC_MASK */ : 0)\n                | ((bMetadata & 2 /* MetadataConsts.SEMANTIC_USE_BOLD */) ? 4096 /* MetadataConsts.BOLD_MASK */ : 0)\n                | ((bMetadata & 4 /* MetadataConsts.SEMANTIC_USE_UNDERLINE */) ? 8192 /* MetadataConsts.UNDERLINE_MASK */ : 0)\n                | ((bMetadata & 8 /* MetadataConsts.SEMANTIC_USE_STRIKETHROUGH */) ? 16384 /* MetadataConsts.STRIKETHROUGH_MASK */ : 0)\n                | ((bMetadata & 16 /* MetadataConsts.SEMANTIC_USE_FOREGROUND */) ? 16744448 /* MetadataConsts.FOREGROUND_MASK */ : 0)\n                | ((bMetadata & 32 /* MetadataConsts.SEMANTIC_USE_BACKGROUND */) ? 4278190080 /* MetadataConsts.BACKGROUND_MASK */ : 0)) >>> 0;\n            const aMask = (~bMask) >>> 0;\n            // push any token from `a` that is before `b`\n            while (aIndex < aLen && aTokens.getEndOffset(aIndex) <= bStartCharacter) {\n                emitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n                aIndex++;\n            }\n            // push the token from `a` if it intersects the token from `b`\n            if (aIndex < aLen && aTokens.getStartOffset(aIndex) < bStartCharacter) {\n                emitToken(bStartCharacter, aTokens.getMetadata(aIndex));\n            }\n            // skip any tokens from `a` that are contained inside `b`\n            while (aIndex < aLen && aTokens.getEndOffset(aIndex) < bEndCharacter) {\n                emitToken(aTokens.getEndOffset(aIndex), (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n                aIndex++;\n            }\n            if (aIndex < aLen) {\n                emitToken(bEndCharacter, (aTokens.getMetadata(aIndex) & aMask) | (bMetadata & bMask));\n                if (aTokens.getEndOffset(aIndex) === bEndCharacter) {\n                    // `a` ends exactly at the same spot as `b`!\n                    aIndex++;\n                }\n            }\n            else {\n                const aMergeIndex = Math.min(Math.max(0, aIndex - 1), aLen - 1);\n                // push the token from `b`\n                emitToken(bEndCharacter, (aTokens.getMetadata(aMergeIndex) & aMask) | (bMetadata & bMask));\n            }\n        }\n        // push the remaining tokens from `a`\n        while (aIndex < aLen) {\n            emitToken(aTokens.getEndOffset(aIndex), aTokens.getMetadata(aIndex));\n            aIndex++;\n        }\n        return new LineTokens(new Uint32Array(result), aTokens.getLineContent(), this._languageIdCodec);\n    }\n    static _findFirstPieceWithLine(pieces, lineNumber) {\n        let low = 0;\n        let high = pieces.length - 1;\n        while (low < high) {\n            let mid = low + Math.floor((high - low) / 2);\n            if (pieces[mid].endLineNumber < lineNumber) {\n                low = mid + 1;\n            }\n            else if (pieces[mid].startLineNumber > lineNumber) {\n                high = mid - 1;\n            }\n            else {\n                while (mid > low && pieces[mid - 1].startLineNumber <= lineNumber && lineNumber <= pieces[mid - 1].endLineNumber) {\n                    mid--;\n                }\n                return mid;\n            }\n        }\n        return low;\n    }\n    acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode) {\n        for (const piece of this._pieces) {\n            piece.acceptEdit(range, eolCount, firstLineLength, lastLineLength, firstCharCode);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../base/common/lifecycle.js';\nexport class ViewEventHandler extends Disposable {\n    constructor() {\n        super();\n        this._shouldRender = true;\n    }\n    shouldRender() {\n        return this._shouldRender;\n    }\n    forceShouldRender() {\n        this._shouldRender = true;\n    }\n    setShouldRender() {\n        this._shouldRender = true;\n    }\n    onDidRender() {\n        this._shouldRender = false;\n    }\n    // --- begin event handlers\n    onCompositionStart(e) {\n        return false;\n    }\n    onCompositionEnd(e) {\n        return false;\n    }\n    onConfigurationChanged(e) {\n        return false;\n    }\n    onCursorStateChanged(e) {\n        return false;\n    }\n    onDecorationsChanged(e) {\n        return false;\n    }\n    onFlushed(e) {\n        return false;\n    }\n    onFocusChanged(e) {\n        return false;\n    }\n    onLanguageConfigurationChanged(e) {\n        return false;\n    }\n    onLineMappingChanged(e) {\n        return false;\n    }\n    onLinesChanged(e) {\n        return false;\n    }\n    onLinesDeleted(e) {\n        return false;\n    }\n    onLinesInserted(e) {\n        return false;\n    }\n    onRevealRangeRequest(e) {\n        return false;\n    }\n    onScrollChanged(e) {\n        return false;\n    }\n    onThemeChanged(e) {\n        return false;\n    }\n    onTokensChanged(e) {\n        return false;\n    }\n    onTokensColorsChanged(e) {\n        return false;\n    }\n    onZonesChanged(e) {\n        return false;\n    }\n    // --- end event handlers\n    handleEvents(events) {\n        let shouldRender = false;\n        for (let i = 0, len = events.length; i < len; i++) {\n            const e = events[i];\n            switch (e.type) {\n                case 0 /* viewEvents.ViewEventType.ViewCompositionStart */:\n                    if (this.onCompositionStart(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 1 /* viewEvents.ViewEventType.ViewCompositionEnd */:\n                    if (this.onCompositionEnd(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 2 /* viewEvents.ViewEventType.ViewConfigurationChanged */:\n                    if (this.onConfigurationChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 3 /* viewEvents.ViewEventType.ViewCursorStateChanged */:\n                    if (this.onCursorStateChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 4 /* viewEvents.ViewEventType.ViewDecorationsChanged */:\n                    if (this.onDecorationsChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 5 /* viewEvents.ViewEventType.ViewFlushed */:\n                    if (this.onFlushed(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 6 /* viewEvents.ViewEventType.ViewFocusChanged */:\n                    if (this.onFocusChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 7 /* viewEvents.ViewEventType.ViewLanguageConfigurationChanged */:\n                    if (this.onLanguageConfigurationChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 8 /* viewEvents.ViewEventType.ViewLineMappingChanged */:\n                    if (this.onLineMappingChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 9 /* viewEvents.ViewEventType.ViewLinesChanged */:\n                    if (this.onLinesChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 10 /* viewEvents.ViewEventType.ViewLinesDeleted */:\n                    if (this.onLinesDeleted(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 11 /* viewEvents.ViewEventType.ViewLinesInserted */:\n                    if (this.onLinesInserted(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 12 /* viewEvents.ViewEventType.ViewRevealRangeRequest */:\n                    if (this.onRevealRangeRequest(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 13 /* viewEvents.ViewEventType.ViewScrollChanged */:\n                    if (this.onScrollChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 15 /* viewEvents.ViewEventType.ViewTokensChanged */:\n                    if (this.onTokensChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 14 /* viewEvents.ViewEventType.ViewThemeChanged */:\n                    if (this.onThemeChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 16 /* viewEvents.ViewEventType.ViewTokensColorsChanged */:\n                    if (this.onTokensColorsChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                case 17 /* viewEvents.ViewEventType.ViewZonesChanged */:\n                    if (this.onZonesChanged(e)) {\n                        shouldRender = true;\n                    }\n                    break;\n                default:\n                    console.info('View received unknown event: ');\n                    console.info(e);\n            }\n        }\n        if (shouldRender) {\n            this._shouldRender = true;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ViewCompositionStartEvent {\n    constructor() {\n        this.type = 0 /* ViewEventType.ViewCompositionStart */;\n    }\n}\nexport class ViewCompositionEndEvent {\n    constructor() {\n        this.type = 1 /* ViewEventType.ViewCompositionEnd */;\n    }\n}\nexport class ViewConfigurationChangedEvent {\n    constructor(source) {\n        this.type = 2 /* ViewEventType.ViewConfigurationChanged */;\n        this._source = source;\n    }\n    hasChanged(id) {\n        return this._source.hasChanged(id);\n    }\n}\nexport class ViewCursorStateChangedEvent {\n    constructor(selections, modelSelections, reason) {\n        this.selections = selections;\n        this.modelSelections = modelSelections;\n        this.reason = reason;\n        this.type = 3 /* ViewEventType.ViewCursorStateChanged */;\n    }\n}\nexport class ViewDecorationsChangedEvent {\n    constructor(source) {\n        this.type = 4 /* ViewEventType.ViewDecorationsChanged */;\n        if (source) {\n            this.affectsMinimap = source.affectsMinimap;\n            this.affectsOverviewRuler = source.affectsOverviewRuler;\n            this.affectsGlyphMargin = source.affectsGlyphMargin;\n        }\n        else {\n            this.affectsMinimap = true;\n            this.affectsOverviewRuler = true;\n            this.affectsGlyphMargin = true;\n        }\n    }\n}\nexport class ViewFlushedEvent {\n    constructor() {\n        this.type = 5 /* ViewEventType.ViewFlushed */;\n        // Nothing to do\n    }\n}\nexport class ViewFocusChangedEvent {\n    constructor(isFocused) {\n        this.type = 6 /* ViewEventType.ViewFocusChanged */;\n        this.isFocused = isFocused;\n    }\n}\nexport class ViewLanguageConfigurationEvent {\n    constructor() {\n        this.type = 7 /* ViewEventType.ViewLanguageConfigurationChanged */;\n    }\n}\nexport class ViewLineMappingChangedEvent {\n    constructor() {\n        this.type = 8 /* ViewEventType.ViewLineMappingChanged */;\n        // Nothing to do\n    }\n}\nexport class ViewLinesChangedEvent {\n    constructor(\n    /**\n     * The first line that has changed.\n     */\n    fromLineNumber, \n    /**\n     * The number of lines that have changed.\n     */\n    count) {\n        this.fromLineNumber = fromLineNumber;\n        this.count = count;\n        this.type = 9 /* ViewEventType.ViewLinesChanged */;\n    }\n}\nexport class ViewLinesDeletedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 10 /* ViewEventType.ViewLinesDeleted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewLinesInsertedEvent {\n    constructor(fromLineNumber, toLineNumber) {\n        this.type = 11 /* ViewEventType.ViewLinesInserted */;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n}\nexport class ViewRevealRangeRequestEvent {\n    constructor(\n    /**\n     * Source of the call that caused the event.\n     */\n    source, \n    /**\n     * Reduce the revealing to a minimum (e.g. avoid scrolling if the bounding box is visible and near the viewport edge).\n     */\n    minimalReveal, \n    /**\n     * Range to be reavealed.\n     */\n    range, \n    /**\n     * Selections to be revealed.\n     */\n    selections, \n    /**\n     * The vertical reveal strategy.\n     */\n    verticalType, \n    /**\n     * If true: there should be a horizontal & vertical revealing.\n     * If false: there should be just a vertical revealing.\n     */\n    revealHorizontal, \n    /**\n     * The scroll type.\n     */\n    scrollType) {\n        this.source = source;\n        this.minimalReveal = minimalReveal;\n        this.range = range;\n        this.selections = selections;\n        this.verticalType = verticalType;\n        this.revealHorizontal = revealHorizontal;\n        this.scrollType = scrollType;\n        this.type = 12 /* ViewEventType.ViewRevealRangeRequest */;\n    }\n}\nexport class ViewScrollChangedEvent {\n    constructor(source) {\n        this.type = 13 /* ViewEventType.ViewScrollChanged */;\n        this.scrollWidth = source.scrollWidth;\n        this.scrollLeft = source.scrollLeft;\n        this.scrollHeight = source.scrollHeight;\n        this.scrollTop = source.scrollTop;\n        this.scrollWidthChanged = source.scrollWidthChanged;\n        this.scrollLeftChanged = source.scrollLeftChanged;\n        this.scrollHeightChanged = source.scrollHeightChanged;\n        this.scrollTopChanged = source.scrollTopChanged;\n    }\n}\nexport class ViewThemeChangedEvent {\n    constructor(theme) {\n        this.theme = theme;\n        this.type = 14 /* ViewEventType.ViewThemeChanged */;\n    }\n}\nexport class ViewTokensChangedEvent {\n    constructor(ranges) {\n        this.type = 15 /* ViewEventType.ViewTokensChanged */;\n        this.ranges = ranges;\n    }\n}\nexport class ViewTokensColorsChangedEvent {\n    constructor() {\n        this.type = 16 /* ViewEventType.ViewTokensColorsChanged */;\n        // Nothing to do\n    }\n}\nexport class ViewZonesChangedEvent {\n    constructor() {\n        this.type = 17 /* ViewEventType.ViewZonesChanged */;\n        // Nothing to do\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nexport class LineDecoration {\n    constructor(startColumn, endColumn, className, type) {\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.className = className;\n        this.type = type;\n        this._lineDecorationBrand = undefined;\n    }\n    static _equals(a, b) {\n        return (a.startColumn === b.startColumn\n            && a.endColumn === b.endColumn\n            && a.className === b.className\n            && a.type === b.type);\n    }\n    static equalsArr(a, b) {\n        const aLen = a.length;\n        const bLen = b.length;\n        if (aLen !== bLen) {\n            return false;\n        }\n        for (let i = 0; i < aLen; i++) {\n            if (!LineDecoration._equals(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static extractWrapped(arr, startOffset, endOffset) {\n        if (arr.length === 0) {\n            return arr;\n        }\n        const startColumn = startOffset + 1;\n        const endColumn = endOffset + 1;\n        const lineLength = endOffset - startOffset;\n        const r = [];\n        let rLength = 0;\n        for (const dec of arr) {\n            if (dec.endColumn <= startColumn || dec.startColumn >= endColumn) {\n                continue;\n            }\n            r[rLength++] = new LineDecoration(Math.max(1, dec.startColumn - startColumn + 1), Math.min(lineLength + 1, dec.endColumn - startColumn + 1), dec.className, dec.type);\n        }\n        return r;\n    }\n    static filter(lineDecorations, lineNumber, minLineColumn, maxLineColumn) {\n        if (lineDecorations.length === 0) {\n            return [];\n        }\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = lineDecorations.length; i < len; i++) {\n            const d = lineDecorations[i];\n            const range = d.range;\n            if (range.endLineNumber < lineNumber || range.startLineNumber > lineNumber) {\n                // Ignore decorations that sit outside this line\n                continue;\n            }\n            if (range.isEmpty() && (d.type === 0 /* InlineDecorationType.Regular */ || d.type === 3 /* InlineDecorationType.RegularAffectingLetterSpacing */)) {\n                // Ignore empty range decorations\n                continue;\n            }\n            const startColumn = (range.startLineNumber === lineNumber ? range.startColumn : minLineColumn);\n            const endColumn = (range.endLineNumber === lineNumber ? range.endColumn : maxLineColumn);\n            result[resultLen++] = new LineDecoration(startColumn, endColumn, d.inlineClassName, d.type);\n        }\n        return result;\n    }\n    static _typeCompare(a, b) {\n        const ORDER = [2, 0, 1, 3];\n        return ORDER[a] - ORDER[b];\n    }\n    static compare(a, b) {\n        if (a.startColumn !== b.startColumn) {\n            return a.startColumn - b.startColumn;\n        }\n        if (a.endColumn !== b.endColumn) {\n            return a.endColumn - b.endColumn;\n        }\n        const typeCmp = LineDecoration._typeCompare(a.type, b.type);\n        if (typeCmp !== 0) {\n            return typeCmp;\n        }\n        if (a.className !== b.className) {\n            return a.className < b.className ? -1 : 1;\n        }\n        return 0;\n    }\n}\nexport class DecorationSegment {\n    constructor(startOffset, endOffset, className, metadata) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.className = className;\n        this.metadata = metadata;\n    }\n}\nclass Stack {\n    constructor() {\n        this.stopOffsets = [];\n        this.classNames = [];\n        this.metadata = [];\n        this.count = 0;\n    }\n    static _metadata(metadata) {\n        let result = 0;\n        for (let i = 0, len = metadata.length; i < len; i++) {\n            result |= metadata[i];\n        }\n        return result;\n    }\n    consumeLowerThan(maxStopOffset, nextStartOffset, result) {\n        while (this.count > 0 && this.stopOffsets[0] < maxStopOffset) {\n            let i = 0;\n            // Take all equal stopping offsets\n            while (i + 1 < this.count && this.stopOffsets[i] === this.stopOffsets[i + 1]) {\n                i++;\n            }\n            // Basically we are consuming the first i + 1 elements of the stack\n            result.push(new DecorationSegment(nextStartOffset, this.stopOffsets[i], this.classNames.join(' '), Stack._metadata(this.metadata)));\n            nextStartOffset = this.stopOffsets[i] + 1;\n            // Consume them\n            this.stopOffsets.splice(0, i + 1);\n            this.classNames.splice(0, i + 1);\n            this.metadata.splice(0, i + 1);\n            this.count -= (i + 1);\n        }\n        if (this.count > 0 && nextStartOffset < maxStopOffset) {\n            result.push(new DecorationSegment(nextStartOffset, maxStopOffset - 1, this.classNames.join(' '), Stack._metadata(this.metadata)));\n            nextStartOffset = maxStopOffset;\n        }\n        return nextStartOffset;\n    }\n    insert(stopOffset, className, metadata) {\n        if (this.count === 0 || this.stopOffsets[this.count - 1] <= stopOffset) {\n            // Insert at the end\n            this.stopOffsets.push(stopOffset);\n            this.classNames.push(className);\n            this.metadata.push(metadata);\n        }\n        else {\n            // Find the insertion position for `stopOffset`\n            for (let i = 0; i < this.count; i++) {\n                if (this.stopOffsets[i] >= stopOffset) {\n                    this.stopOffsets.splice(i, 0, stopOffset);\n                    this.classNames.splice(i, 0, className);\n                    this.metadata.splice(i, 0, metadata);\n                    break;\n                }\n            }\n        }\n        this.count++;\n        return;\n    }\n}\nexport class LineDecorationsNormalizer {\n    /**\n     * Normalize line decorations. Overlapping decorations will generate multiple segments\n     */\n    static normalize(lineContent, lineDecorations) {\n        if (lineDecorations.length === 0) {\n            return [];\n        }\n        const result = [];\n        const stack = new Stack();\n        let nextStartOffset = 0;\n        for (let i = 0, len = lineDecorations.length; i < len; i++) {\n            const d = lineDecorations[i];\n            let startColumn = d.startColumn;\n            let endColumn = d.endColumn;\n            const className = d.className;\n            const metadata = (d.type === 1 /* InlineDecorationType.Before */\n                ? 2 /* LinePartMetadata.PSEUDO_BEFORE */\n                : d.type === 2 /* InlineDecorationType.After */\n                    ? 4 /* LinePartMetadata.PSEUDO_AFTER */\n                    : 0);\n            // If the position would end up in the middle of a high-low surrogate pair, we move it to before the pair\n            if (startColumn > 1) {\n                const charCodeBefore = lineContent.charCodeAt(startColumn - 2);\n                if (strings.isHighSurrogate(charCodeBefore)) {\n                    startColumn--;\n                }\n            }\n            if (endColumn > 1) {\n                const charCodeBefore = lineContent.charCodeAt(endColumn - 2);\n                if (strings.isHighSurrogate(charCodeBefore)) {\n                    endColumn--;\n                }\n            }\n            const currentStartOffset = startColumn - 1;\n            const currentEndOffset = endColumn - 2;\n            nextStartOffset = stack.consumeLowerThan(currentStartOffset, nextStartOffset, result);\n            if (stack.count === 0) {\n                nextStartOffset = currentStartOffset;\n            }\n            stack.insert(currentEndOffset, className, metadata);\n        }\n        stack.consumeLowerThan(1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, nextStartOffset, result);\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class LinePart {\n    constructor(\n    /**\n     * last char index of this token (not inclusive).\n     */\n    endIndex, type, metadata, containsRTL) {\n        this.endIndex = endIndex;\n        this.type = type;\n        this.metadata = metadata;\n        this.containsRTL = containsRTL;\n        this._linePartBrand = undefined;\n    }\n    isWhitespace() {\n        return (this.metadata & 1 /* LinePartMetadata.IS_WHITESPACE_MASK */ ? true : false);\n    }\n    isPseudoAfter() {\n        return (this.metadata & 4 /* LinePartMetadata.PSEUDO_AFTER_MASK */ ? true : false);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { StringBuilder } from '../core/stringBuilder.js';\nimport { LineDecoration, LineDecorationsNormalizer } from './lineDecorations.js';\nimport { LinePart } from './linePart.js';\nexport class LineRange {\n    constructor(startIndex, endIndex) {\n        this.startOffset = startIndex;\n        this.endOffset = endIndex;\n    }\n    equals(otherLineRange) {\n        return this.startOffset === otherLineRange.startOffset\n            && this.endOffset === otherLineRange.endOffset;\n    }\n}\nexport class RenderLineInput {\n    constructor(useMonospaceOptimizations, canUseHalfwidthRightwardsArrow, lineContent, continuesWithWrappedLine, isBasicASCII, containsRTL, fauxIndentLength, lineTokens, lineDecorations, tabSize, startVisibleColumn, spaceWidth, middotWidth, wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures, selectionsOnLine) {\n        this.useMonospaceOptimizations = useMonospaceOptimizations;\n        this.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n        this.lineContent = lineContent;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.isBasicASCII = isBasicASCII;\n        this.containsRTL = containsRTL;\n        this.fauxIndentLength = fauxIndentLength;\n        this.lineTokens = lineTokens;\n        this.lineDecorations = lineDecorations.sort(LineDecoration.compare);\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n        this.spaceWidth = spaceWidth;\n        this.stopRenderingLineAfter = stopRenderingLineAfter;\n        this.renderWhitespace = (renderWhitespace === 'all'\n            ? 4 /* RenderWhitespace.All */\n            : renderWhitespace === 'boundary'\n                ? 1 /* RenderWhitespace.Boundary */\n                : renderWhitespace === 'selection'\n                    ? 2 /* RenderWhitespace.Selection */\n                    : renderWhitespace === 'trailing'\n                        ? 3 /* RenderWhitespace.Trailing */\n                        : 0 /* RenderWhitespace.None */);\n        this.renderControlCharacters = renderControlCharacters;\n        this.fontLigatures = fontLigatures;\n        this.selectionsOnLine = selectionsOnLine && selectionsOnLine.sort((a, b) => a.startOffset < b.startOffset ? -1 : 1);\n        const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n        const middotDiff = Math.abs(middotWidth - spaceWidth);\n        if (wsmiddotDiff < middotDiff) {\n            this.renderSpaceWidth = wsmiddotWidth;\n            this.renderSpaceCharCode = 0x2E31; // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        }\n        else {\n            this.renderSpaceWidth = middotWidth;\n            this.renderSpaceCharCode = 0xB7; // U+00B7 - MIDDLE DOT\n        }\n    }\n    sameSelection(otherSelections) {\n        if (this.selectionsOnLine === null) {\n            return otherSelections === null;\n        }\n        if (otherSelections === null) {\n            return false;\n        }\n        if (otherSelections.length !== this.selectionsOnLine.length) {\n            return false;\n        }\n        for (let i = 0; i < this.selectionsOnLine.length; i++) {\n            if (!this.selectionsOnLine[i].equals(otherSelections[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    equals(other) {\n        return (this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineContent === other.lineContent\n            && this.continuesWithWrappedLine === other.continuesWithWrappedLine\n            && this.isBasicASCII === other.isBasicASCII\n            && this.containsRTL === other.containsRTL\n            && this.fauxIndentLength === other.fauxIndentLength\n            && this.tabSize === other.tabSize\n            && this.startVisibleColumn === other.startVisibleColumn\n            && this.spaceWidth === other.spaceWidth\n            && this.renderSpaceWidth === other.renderSpaceWidth\n            && this.renderSpaceCharCode === other.renderSpaceCharCode\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.fontLigatures === other.fontLigatures\n            && LineDecoration.equalsArr(this.lineDecorations, other.lineDecorations)\n            && this.lineTokens.equals(other.lineTokens)\n            && this.sameSelection(other.selectionsOnLine));\n    }\n}\nexport class DomPosition {\n    constructor(partIndex, charIndex) {\n        this.partIndex = partIndex;\n        this.charIndex = charIndex;\n    }\n}\n/**\n * Provides a both direction mapping between a line's character and its rendered position.\n */\nexport class CharacterMapping {\n    static getPartIndex(partData) {\n        return (partData & 4294901760 /* CharacterMappingConstants.PART_INDEX_MASK */) >>> 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */;\n    }\n    static getCharIndex(partData) {\n        return (partData & 65535 /* CharacterMappingConstants.CHAR_INDEX_MASK */) >>> 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */;\n    }\n    constructor(length, partCount) {\n        this.length = length;\n        this._data = new Uint32Array(this.length);\n        this._horizontalOffset = new Uint32Array(this.length);\n    }\n    setColumnInfo(column, partIndex, charIndex, horizontalOffset) {\n        const partData = ((partIndex << 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */)\n            | (charIndex << 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */)) >>> 0;\n        this._data[column - 1] = partData;\n        this._horizontalOffset[column - 1] = horizontalOffset;\n    }\n    getHorizontalOffset(column) {\n        if (this._horizontalOffset.length === 0) {\n            // No characters on this line\n            return 0;\n        }\n        return this._horizontalOffset[column - 1];\n    }\n    charOffsetToPartData(charOffset) {\n        if (this.length === 0) {\n            return 0;\n        }\n        if (charOffset < 0) {\n            return this._data[0];\n        }\n        if (charOffset >= this.length) {\n            return this._data[this.length - 1];\n        }\n        return this._data[charOffset];\n    }\n    getDomPosition(column) {\n        const partData = this.charOffsetToPartData(column - 1);\n        const partIndex = CharacterMapping.getPartIndex(partData);\n        const charIndex = CharacterMapping.getCharIndex(partData);\n        return new DomPosition(partIndex, charIndex);\n    }\n    getColumn(domPosition, partLength) {\n        const charOffset = this.partDataToCharOffset(domPosition.partIndex, partLength, domPosition.charIndex);\n        return charOffset + 1;\n    }\n    partDataToCharOffset(partIndex, partLength, charIndex) {\n        if (this.length === 0) {\n            return 0;\n        }\n        const searchEntry = ((partIndex << 16 /* CharacterMappingConstants.PART_INDEX_OFFSET */)\n            | (charIndex << 0 /* CharacterMappingConstants.CHAR_INDEX_OFFSET */)) >>> 0;\n        let min = 0;\n        let max = this.length - 1;\n        while (min + 1 < max) {\n            const mid = ((min + max) >>> 1);\n            const midEntry = this._data[mid];\n            if (midEntry === searchEntry) {\n                return mid;\n            }\n            else if (midEntry > searchEntry) {\n                max = mid;\n            }\n            else {\n                min = mid;\n            }\n        }\n        if (min === max) {\n            return min;\n        }\n        const minEntry = this._data[min];\n        const maxEntry = this._data[max];\n        if (minEntry === searchEntry) {\n            return min;\n        }\n        if (maxEntry === searchEntry) {\n            return max;\n        }\n        const minPartIndex = CharacterMapping.getPartIndex(minEntry);\n        const minCharIndex = CharacterMapping.getCharIndex(minEntry);\n        const maxPartIndex = CharacterMapping.getPartIndex(maxEntry);\n        let maxCharIndex;\n        if (minPartIndex !== maxPartIndex) {\n            // sitting between parts\n            maxCharIndex = partLength;\n        }\n        else {\n            maxCharIndex = CharacterMapping.getCharIndex(maxEntry);\n        }\n        const minEntryDistance = charIndex - minCharIndex;\n        const maxEntryDistance = maxCharIndex - charIndex;\n        if (minEntryDistance <= maxEntryDistance) {\n            return min;\n        }\n        return max;\n    }\n}\nexport class RenderLineOutput {\n    constructor(characterMapping, containsRTL, containsForeignElements) {\n        this._renderLineOutputBrand = undefined;\n        this.characterMapping = characterMapping;\n        this.containsRTL = containsRTL;\n        this.containsForeignElements = containsForeignElements;\n    }\n}\nexport function renderViewLine(input, sb) {\n    if (input.lineContent.length === 0) {\n        if (input.lineDecorations.length > 0) {\n            // This line is empty, but it contains inline decorations\n            sb.appendString(`<span>`);\n            let beforeCount = 0;\n            let afterCount = 0;\n            let containsForeignElements = 0 /* ForeignElementType.None */;\n            for (const lineDecoration of input.lineDecorations) {\n                if (lineDecoration.type === 1 /* InlineDecorationType.Before */ || lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                    sb.appendString(`<span class=\"`);\n                    sb.appendString(lineDecoration.className);\n                    sb.appendString(`\"></span>`);\n                    if (lineDecoration.type === 1 /* InlineDecorationType.Before */) {\n                        containsForeignElements |= 1 /* ForeignElementType.Before */;\n                        beforeCount++;\n                    }\n                    if (lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                        containsForeignElements |= 2 /* ForeignElementType.After */;\n                        afterCount++;\n                    }\n                }\n            }\n            sb.appendString(`</span>`);\n            const characterMapping = new CharacterMapping(1, beforeCount + afterCount);\n            characterMapping.setColumnInfo(1, beforeCount, 0, 0);\n            return new RenderLineOutput(characterMapping, false, containsForeignElements);\n        }\n        // completely empty line\n        sb.appendString('<span><span></span></span>');\n        return new RenderLineOutput(new CharacterMapping(0, 0), false, 0 /* ForeignElementType.None */);\n    }\n    return _renderLine(resolveRenderLineInput(input), sb);\n}\nexport class RenderLineOutput2 {\n    constructor(characterMapping, html, containsRTL, containsForeignElements) {\n        this.characterMapping = characterMapping;\n        this.html = html;\n        this.containsRTL = containsRTL;\n        this.containsForeignElements = containsForeignElements;\n    }\n}\nexport function renderViewLine2(input) {\n    const sb = new StringBuilder(10000);\n    const out = renderViewLine(input, sb);\n    return new RenderLineOutput2(out.characterMapping, sb.build(), out.containsRTL, out.containsForeignElements);\n}\nclass ResolvedRenderLineInput {\n    constructor(fontIsMonospace, canUseHalfwidthRightwardsArrow, lineContent, len, isOverflowing, overflowingCharCount, parts, containsForeignElements, fauxIndentLength, tabSize, startVisibleColumn, containsRTL, spaceWidth, renderSpaceCharCode, renderWhitespace, renderControlCharacters) {\n        this.fontIsMonospace = fontIsMonospace;\n        this.canUseHalfwidthRightwardsArrow = canUseHalfwidthRightwardsArrow;\n        this.lineContent = lineContent;\n        this.len = len;\n        this.isOverflowing = isOverflowing;\n        this.overflowingCharCount = overflowingCharCount;\n        this.parts = parts;\n        this.containsForeignElements = containsForeignElements;\n        this.fauxIndentLength = fauxIndentLength;\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n        this.containsRTL = containsRTL;\n        this.spaceWidth = spaceWidth;\n        this.renderSpaceCharCode = renderSpaceCharCode;\n        this.renderWhitespace = renderWhitespace;\n        this.renderControlCharacters = renderControlCharacters;\n        //\n    }\n}\nfunction resolveRenderLineInput(input) {\n    const lineContent = input.lineContent;\n    let isOverflowing;\n    let overflowingCharCount;\n    let len;\n    if (input.stopRenderingLineAfter !== -1 && input.stopRenderingLineAfter < lineContent.length) {\n        isOverflowing = true;\n        overflowingCharCount = lineContent.length - input.stopRenderingLineAfter;\n        len = input.stopRenderingLineAfter;\n    }\n    else {\n        isOverflowing = false;\n        overflowingCharCount = 0;\n        len = lineContent.length;\n    }\n    let tokens = transformAndRemoveOverflowing(lineContent, input.containsRTL, input.lineTokens, input.fauxIndentLength, len);\n    if (input.renderControlCharacters && !input.isBasicASCII) {\n        // Calling `extractControlCharacters` before adding (possibly empty) line parts\n        // for inline decorations. `extractControlCharacters` removes empty line parts.\n        tokens = extractControlCharacters(lineContent, tokens);\n    }\n    if (input.renderWhitespace === 4 /* RenderWhitespace.All */ ||\n        input.renderWhitespace === 1 /* RenderWhitespace.Boundary */ ||\n        (input.renderWhitespace === 2 /* RenderWhitespace.Selection */ && !!input.selectionsOnLine) ||\n        (input.renderWhitespace === 3 /* RenderWhitespace.Trailing */ && !input.continuesWithWrappedLine)) {\n        tokens = _applyRenderWhitespace(input, lineContent, len, tokens);\n    }\n    let containsForeignElements = 0 /* ForeignElementType.None */;\n    if (input.lineDecorations.length > 0) {\n        for (let i = 0, len = input.lineDecorations.length; i < len; i++) {\n            const lineDecoration = input.lineDecorations[i];\n            if (lineDecoration.type === 3 /* InlineDecorationType.RegularAffectingLetterSpacing */) {\n                // Pretend there are foreign elements... although not 100% accurate.\n                containsForeignElements |= 1 /* ForeignElementType.Before */;\n            }\n            else if (lineDecoration.type === 1 /* InlineDecorationType.Before */) {\n                containsForeignElements |= 1 /* ForeignElementType.Before */;\n            }\n            else if (lineDecoration.type === 2 /* InlineDecorationType.After */) {\n                containsForeignElements |= 2 /* ForeignElementType.After */;\n            }\n        }\n        tokens = _applyInlineDecorations(lineContent, len, tokens, input.lineDecorations);\n    }\n    if (!input.containsRTL) {\n        // We can never split RTL text, as it ruins the rendering\n        tokens = splitLargeTokens(lineContent, tokens, !input.isBasicASCII || input.fontLigatures);\n    }\n    return new ResolvedRenderLineInput(input.useMonospaceOptimizations, input.canUseHalfwidthRightwardsArrow, lineContent, len, isOverflowing, overflowingCharCount, tokens, containsForeignElements, input.fauxIndentLength, input.tabSize, input.startVisibleColumn, input.containsRTL, input.spaceWidth, input.renderSpaceCharCode, input.renderWhitespace, input.renderControlCharacters);\n}\n/**\n * In the rendering phase, characters are always looped until token.endIndex.\n * Ensure that all tokens end before `len` and the last one ends precisely at `len`.\n */\nfunction transformAndRemoveOverflowing(lineContent, lineContainsRTL, tokens, fauxIndentLength, len) {\n    const result = [];\n    let resultLen = 0;\n    // The faux indent part of the line should have no token type\n    if (fauxIndentLength > 0) {\n        result[resultLen++] = new LinePart(fauxIndentLength, '', 0, false);\n    }\n    let startOffset = fauxIndentLength;\n    for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n        const endIndex = tokens.getEndOffset(tokenIndex);\n        if (endIndex <= fauxIndentLength) {\n            // The faux indent part of the line should have no token type\n            continue;\n        }\n        const type = tokens.getClassName(tokenIndex);\n        if (endIndex >= len) {\n            const tokenContainsRTL = (lineContainsRTL ? strings.containsRTL(lineContent.substring(startOffset, len)) : false);\n            result[resultLen++] = new LinePart(len, type, 0, tokenContainsRTL);\n            break;\n        }\n        const tokenContainsRTL = (lineContainsRTL ? strings.containsRTL(lineContent.substring(startOffset, endIndex)) : false);\n        result[resultLen++] = new LinePart(endIndex, type, 0, tokenContainsRTL);\n        startOffset = endIndex;\n    }\n    return result;\n}\n/**\n * See https://github.com/microsoft/vscode/issues/6885.\n * It appears that having very large spans causes very slow reading of character positions.\n * So here we try to avoid that.\n */\nfunction splitLargeTokens(lineContent, tokens, onlyAtSpaces) {\n    let lastTokenEndIndex = 0;\n    const result = [];\n    let resultLen = 0;\n    if (onlyAtSpaces) {\n        // Split only at spaces => we need to walk each character\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const token = tokens[i];\n            const tokenEndIndex = token.endIndex;\n            if (lastTokenEndIndex + 50 /* Constants.LongToken */ < tokenEndIndex) {\n                const tokenType = token.type;\n                const tokenMetadata = token.metadata;\n                const tokenContainsRTL = token.containsRTL;\n                let lastSpaceOffset = -1;\n                let currTokenStart = lastTokenEndIndex;\n                for (let j = lastTokenEndIndex; j < tokenEndIndex; j++) {\n                    if (lineContent.charCodeAt(j) === 32 /* CharCode.Space */) {\n                        lastSpaceOffset = j;\n                    }\n                    if (lastSpaceOffset !== -1 && j - currTokenStart >= 50 /* Constants.LongToken */) {\n                        // Split at `lastSpaceOffset` + 1\n                        result[resultLen++] = new LinePart(lastSpaceOffset + 1, tokenType, tokenMetadata, tokenContainsRTL);\n                        currTokenStart = lastSpaceOffset + 1;\n                        lastSpaceOffset = -1;\n                    }\n                }\n                if (currTokenStart !== tokenEndIndex) {\n                    result[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n                }\n            }\n            else {\n                result[resultLen++] = token;\n            }\n            lastTokenEndIndex = tokenEndIndex;\n        }\n    }\n    else {\n        // Split anywhere => we don't need to walk each character\n        for (let i = 0, len = tokens.length; i < len; i++) {\n            const token = tokens[i];\n            const tokenEndIndex = token.endIndex;\n            const diff = (tokenEndIndex - lastTokenEndIndex);\n            if (diff > 50 /* Constants.LongToken */) {\n                const tokenType = token.type;\n                const tokenMetadata = token.metadata;\n                const tokenContainsRTL = token.containsRTL;\n                const piecesCount = Math.ceil(diff / 50 /* Constants.LongToken */);\n                for (let j = 1; j < piecesCount; j++) {\n                    const pieceEndIndex = lastTokenEndIndex + (j * 50 /* Constants.LongToken */);\n                    result[resultLen++] = new LinePart(pieceEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n                }\n                result[resultLen++] = new LinePart(tokenEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n            }\n            else {\n                result[resultLen++] = token;\n            }\n            lastTokenEndIndex = tokenEndIndex;\n        }\n    }\n    return result;\n}\nfunction isControlCharacter(charCode) {\n    if (charCode < 32) {\n        return (charCode !== 9 /* CharCode.Tab */);\n    }\n    if (charCode === 127) {\n        // DEL\n        return true;\n    }\n    if ((charCode >= 0x202A && charCode <= 0x202E)\n        || (charCode >= 0x2066 && charCode <= 0x2069)\n        || (charCode >= 0x200E && charCode <= 0x200F)\n        || charCode === 0x061C) {\n        // Unicode Directional Formatting Characters\n        // LRE\tU+202A\tLEFT-TO-RIGHT EMBEDDING\n        // RLE\tU+202B\tRIGHT-TO-LEFT EMBEDDING\n        // PDF\tU+202C\tPOP DIRECTIONAL FORMATTING\n        // LRO\tU+202D\tLEFT-TO-RIGHT OVERRIDE\n        // RLO\tU+202E\tRIGHT-TO-LEFT OVERRIDE\n        // LRI\tU+2066\tLEFT-TO-RIGHT ISOLATE\n        // RLI\tU+2067\tRIGHT-TO-LEFT ISOLATE\n        // FSI\tU+2068\tFIRST STRONG ISOLATE\n        // PDI\tU+2069\tPOP DIRECTIONAL ISOLATE\n        // LRM\tU+200E\tLEFT-TO-RIGHT MARK\n        // RLM\tU+200F\tRIGHT-TO-LEFT MARK\n        // ALM\tU+061C\tARABIC LETTER MARK\n        return true;\n    }\n    return false;\n}\nfunction extractControlCharacters(lineContent, tokens) {\n    const result = [];\n    let lastLinePart = new LinePart(0, '', 0, false);\n    let charOffset = 0;\n    for (const token of tokens) {\n        const tokenEndIndex = token.endIndex;\n        for (; charOffset < tokenEndIndex; charOffset++) {\n            const charCode = lineContent.charCodeAt(charOffset);\n            if (isControlCharacter(charCode)) {\n                if (charOffset > lastLinePart.endIndex) {\n                    // emit previous part if it has text\n                    lastLinePart = new LinePart(charOffset, token.type, token.metadata, token.containsRTL);\n                    result.push(lastLinePart);\n                }\n                lastLinePart = new LinePart(charOffset + 1, 'mtkcontrol', token.metadata, false);\n                result.push(lastLinePart);\n            }\n        }\n        if (charOffset > lastLinePart.endIndex) {\n            // emit previous part if it has text\n            lastLinePart = new LinePart(tokenEndIndex, token.type, token.metadata, token.containsRTL);\n            result.push(lastLinePart);\n        }\n    }\n    return result;\n}\n/**\n * Whitespace is rendered by \"replacing\" tokens with a special-purpose `mtkw` type that is later recognized in the rendering phase.\n * Moreover, a token is created for every visual indent because on some fonts the glyphs used for rendering whitespace (&rarr; or &middot;) do not have the same width as &nbsp;.\n * The rendering phase will generate `style=\"width:...\"` for these tokens.\n */\nfunction _applyRenderWhitespace(input, lineContent, len, tokens) {\n    const continuesWithWrappedLine = input.continuesWithWrappedLine;\n    const fauxIndentLength = input.fauxIndentLength;\n    const tabSize = input.tabSize;\n    const startVisibleColumn = input.startVisibleColumn;\n    const useMonospaceOptimizations = input.useMonospaceOptimizations;\n    const selections = input.selectionsOnLine;\n    const onlyBoundary = (input.renderWhitespace === 1 /* RenderWhitespace.Boundary */);\n    const onlyTrailing = (input.renderWhitespace === 3 /* RenderWhitespace.Trailing */);\n    const generateLinePartForEachWhitespace = (input.renderSpaceWidth !== input.spaceWidth);\n    const result = [];\n    let resultLen = 0;\n    let tokenIndex = 0;\n    let tokenType = tokens[tokenIndex].type;\n    let tokenContainsRTL = tokens[tokenIndex].containsRTL;\n    let tokenEndIndex = tokens[tokenIndex].endIndex;\n    const tokensLength = tokens.length;\n    let lineIsEmptyOrWhitespace = false;\n    let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n    let lastNonWhitespaceIndex;\n    if (firstNonWhitespaceIndex === -1) {\n        lineIsEmptyOrWhitespace = true;\n        firstNonWhitespaceIndex = len;\n        lastNonWhitespaceIndex = len;\n    }\n    else {\n        lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n    }\n    let wasInWhitespace = false;\n    let currentSelectionIndex = 0;\n    let currentSelection = selections && selections[currentSelectionIndex];\n    let tmpIndent = startVisibleColumn % tabSize;\n    for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n        const chCode = lineContent.charCodeAt(charIndex);\n        if (currentSelection && charIndex >= currentSelection.endOffset) {\n            currentSelectionIndex++;\n            currentSelection = selections && selections[currentSelectionIndex];\n        }\n        let isInWhitespace;\n        if (charIndex < firstNonWhitespaceIndex || charIndex > lastNonWhitespaceIndex) {\n            // in leading or trailing whitespace\n            isInWhitespace = true;\n        }\n        else if (chCode === 9 /* CharCode.Tab */) {\n            // a tab character is rendered both in all and boundary cases\n            isInWhitespace = true;\n        }\n        else if (chCode === 32 /* CharCode.Space */) {\n            // hit a space character\n            if (onlyBoundary) {\n                // rendering only boundary whitespace\n                if (wasInWhitespace) {\n                    isInWhitespace = true;\n                }\n                else {\n                    const nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n                    isInWhitespace = (nextChCode === 32 /* CharCode.Space */ || nextChCode === 9 /* CharCode.Tab */);\n                }\n            }\n            else {\n                isInWhitespace = true;\n            }\n        }\n        else {\n            isInWhitespace = false;\n        }\n        // If rendering whitespace on selection, check that the charIndex falls within a selection\n        if (isInWhitespace && selections) {\n            isInWhitespace = !!currentSelection && currentSelection.startOffset <= charIndex && currentSelection.endOffset > charIndex;\n        }\n        // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n        if (isInWhitespace && onlyTrailing) {\n            isInWhitespace = lineIsEmptyOrWhitespace || charIndex > lastNonWhitespaceIndex;\n        }\n        if (isInWhitespace && tokenContainsRTL) {\n            // If the token contains RTL text, breaking it up into multiple line parts\n            // to render whitespace might affect the browser's bidi layout.\n            //\n            // We render whitespace in such tokens only if the whitespace\n            // is the leading or the trailing whitespace of the line,\n            // which doesn't affect the browser's bidi layout.\n            if (charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex) {\n                isInWhitespace = false;\n            }\n        }\n        if (wasInWhitespace) {\n            // was in whitespace token\n            if (!isInWhitespace || (!useMonospaceOptimizations && tmpIndent >= tabSize)) {\n                // leaving whitespace token or entering a new indent\n                if (generateLinePartForEachWhitespace) {\n                    const lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n                    for (let i = lastEndIndex + 1; i <= charIndex; i++) {\n                        result[resultLen++] = new LinePart(i, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n                    }\n                }\n                else {\n                    result[resultLen++] = new LinePart(charIndex, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n                }\n                tmpIndent = tmpIndent % tabSize;\n            }\n        }\n        else {\n            // was in regular token\n            if (charIndex === tokenEndIndex || (isInWhitespace && charIndex > fauxIndentLength)) {\n                result[resultLen++] = new LinePart(charIndex, tokenType, 0, tokenContainsRTL);\n                tmpIndent = tmpIndent % tabSize;\n            }\n        }\n        if (chCode === 9 /* CharCode.Tab */) {\n            tmpIndent = tabSize;\n        }\n        else if (strings.isFullWidthCharacter(chCode)) {\n            tmpIndent += 2;\n        }\n        else {\n            tmpIndent++;\n        }\n        wasInWhitespace = isInWhitespace;\n        while (charIndex === tokenEndIndex) {\n            tokenIndex++;\n            if (tokenIndex < tokensLength) {\n                tokenType = tokens[tokenIndex].type;\n                tokenContainsRTL = tokens[tokenIndex].containsRTL;\n                tokenEndIndex = tokens[tokenIndex].endIndex;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    let generateWhitespace = false;\n    if (wasInWhitespace) {\n        // was in whitespace token\n        if (continuesWithWrappedLine && onlyBoundary) {\n            const lastCharCode = (len > 0 ? lineContent.charCodeAt(len - 1) : 0 /* CharCode.Null */);\n            const prevCharCode = (len > 1 ? lineContent.charCodeAt(len - 2) : 0 /* CharCode.Null */);\n            const isSingleTrailingSpace = (lastCharCode === 32 /* CharCode.Space */ && (prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */));\n            if (!isSingleTrailingSpace) {\n                generateWhitespace = true;\n            }\n        }\n        else {\n            generateWhitespace = true;\n        }\n    }\n    if (generateWhitespace) {\n        if (generateLinePartForEachWhitespace) {\n            const lastEndIndex = (resultLen > 0 ? result[resultLen - 1].endIndex : fauxIndentLength);\n            for (let i = lastEndIndex + 1; i <= len; i++) {\n                result[resultLen++] = new LinePart(i, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n            }\n        }\n        else {\n            result[resultLen++] = new LinePart(len, 'mtkw', 1 /* LinePartMetadata.IS_WHITESPACE */, false);\n        }\n    }\n    else {\n        result[resultLen++] = new LinePart(len, tokenType, 0, tokenContainsRTL);\n    }\n    return result;\n}\n/**\n * Inline decorations are \"merged\" on top of tokens.\n * Special care must be taken when multiple inline decorations are at play and they overlap.\n */\nfunction _applyInlineDecorations(lineContent, len, tokens, _lineDecorations) {\n    _lineDecorations.sort(LineDecoration.compare);\n    const lineDecorations = LineDecorationsNormalizer.normalize(lineContent, _lineDecorations);\n    const lineDecorationsLen = lineDecorations.length;\n    let lineDecorationIndex = 0;\n    const result = [];\n    let resultLen = 0;\n    let lastResultEndIndex = 0;\n    for (let tokenIndex = 0, len = tokens.length; tokenIndex < len; tokenIndex++) {\n        const token = tokens[tokenIndex];\n        const tokenEndIndex = token.endIndex;\n        const tokenType = token.type;\n        const tokenMetadata = token.metadata;\n        const tokenContainsRTL = token.containsRTL;\n        while (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset < tokenEndIndex) {\n            const lineDecoration = lineDecorations[lineDecorationIndex];\n            if (lineDecoration.startOffset > lastResultEndIndex) {\n                lastResultEndIndex = lineDecoration.startOffset;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n            }\n            if (lineDecoration.endOffset + 1 <= tokenEndIndex) {\n                // This line decoration ends before this token ends\n                lastResultEndIndex = lineDecoration.endOffset + 1;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata, tokenContainsRTL);\n                lineDecorationIndex++;\n            }\n            else {\n                // This line decoration continues on to the next token\n                lastResultEndIndex = tokenEndIndex;\n                result[resultLen++] = new LinePart(lastResultEndIndex, tokenType + ' ' + lineDecoration.className, tokenMetadata | lineDecoration.metadata, tokenContainsRTL);\n                break;\n            }\n        }\n        if (tokenEndIndex > lastResultEndIndex) {\n            lastResultEndIndex = tokenEndIndex;\n            result[resultLen++] = new LinePart(lastResultEndIndex, tokenType, tokenMetadata, tokenContainsRTL);\n        }\n    }\n    const lastTokenEndIndex = tokens[tokens.length - 1].endIndex;\n    if (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n        while (lineDecorationIndex < lineDecorationsLen && lineDecorations[lineDecorationIndex].startOffset === lastTokenEndIndex) {\n            const lineDecoration = lineDecorations[lineDecorationIndex];\n            result[resultLen++] = new LinePart(lastResultEndIndex, lineDecoration.className, lineDecoration.metadata, false);\n            lineDecorationIndex++;\n        }\n    }\n    return result;\n}\n/**\n * This function is on purpose not split up into multiple functions to allow runtime type inference (i.e. performance reasons).\n * Notice how all the needed data is fully resolved and passed in (i.e. no other calls).\n */\nfunction _renderLine(input, sb) {\n    const fontIsMonospace = input.fontIsMonospace;\n    const canUseHalfwidthRightwardsArrow = input.canUseHalfwidthRightwardsArrow;\n    const containsForeignElements = input.containsForeignElements;\n    const lineContent = input.lineContent;\n    const len = input.len;\n    const isOverflowing = input.isOverflowing;\n    const overflowingCharCount = input.overflowingCharCount;\n    const parts = input.parts;\n    const fauxIndentLength = input.fauxIndentLength;\n    const tabSize = input.tabSize;\n    const startVisibleColumn = input.startVisibleColumn;\n    const containsRTL = input.containsRTL;\n    const spaceWidth = input.spaceWidth;\n    const renderSpaceCharCode = input.renderSpaceCharCode;\n    const renderWhitespace = input.renderWhitespace;\n    const renderControlCharacters = input.renderControlCharacters;\n    const characterMapping = new CharacterMapping(len + 1, parts.length);\n    let lastCharacterMappingDefined = false;\n    let charIndex = 0;\n    let visibleColumn = startVisibleColumn;\n    let charOffsetInPart = 0; // the character offset in the current part\n    let charHorizontalOffset = 0; // the character horizontal position in terms of chars relative to line start\n    let partDisplacement = 0;\n    if (containsRTL) {\n        sb.appendString('<span dir=\"ltr\">');\n    }\n    else {\n        sb.appendString('<span>');\n    }\n    for (let partIndex = 0, tokensLen = parts.length; partIndex < tokensLen; partIndex++) {\n        const part = parts[partIndex];\n        const partEndIndex = part.endIndex;\n        const partType = part.type;\n        const partContainsRTL = part.containsRTL;\n        const partRendersWhitespace = (renderWhitespace !== 0 /* RenderWhitespace.None */ && part.isWhitespace());\n        const partRendersWhitespaceWithWidth = partRendersWhitespace && !fontIsMonospace && (partType === 'mtkw' /*only whitespace*/ || !containsForeignElements);\n        const partIsEmptyAndHasPseudoAfter = (charIndex === partEndIndex && part.isPseudoAfter());\n        charOffsetInPart = 0;\n        sb.appendString('<span ');\n        if (partContainsRTL) {\n            sb.appendString('style=\"unicode-bidi:isolate\" ');\n        }\n        sb.appendString('class=\"');\n        sb.appendString(partRendersWhitespaceWithWidth ? 'mtkz' : partType);\n        sb.appendASCIICharCode(34 /* CharCode.DoubleQuote */);\n        if (partRendersWhitespace) {\n            let partWidth = 0;\n            {\n                let _charIndex = charIndex;\n                let _visibleColumn = visibleColumn;\n                for (; _charIndex < partEndIndex; _charIndex++) {\n                    const charCode = lineContent.charCodeAt(_charIndex);\n                    const charWidth = (charCode === 9 /* CharCode.Tab */ ? (tabSize - (_visibleColumn % tabSize)) : 1) | 0;\n                    partWidth += charWidth;\n                    if (_charIndex >= fauxIndentLength) {\n                        _visibleColumn += charWidth;\n                    }\n                }\n            }\n            if (partRendersWhitespaceWithWidth) {\n                sb.appendString(' style=\"width:');\n                sb.appendString(String(spaceWidth * partWidth));\n                sb.appendString('px\"');\n            }\n            sb.appendASCIICharCode(62 /* CharCode.GreaterThan */);\n            for (; charIndex < partEndIndex; charIndex++) {\n                characterMapping.setColumnInfo(charIndex + 1, partIndex - partDisplacement, charOffsetInPart, charHorizontalOffset);\n                partDisplacement = 0;\n                const charCode = lineContent.charCodeAt(charIndex);\n                let producedCharacters;\n                let charWidth;\n                if (charCode === 9 /* CharCode.Tab */) {\n                    producedCharacters = (tabSize - (visibleColumn % tabSize)) | 0;\n                    charWidth = producedCharacters;\n                    if (!canUseHalfwidthRightwardsArrow || charWidth > 1) {\n                        sb.appendCharCode(0x2192); // RIGHTWARDS ARROW\n                    }\n                    else {\n                        sb.appendCharCode(0xFFEB); // HALFWIDTH RIGHTWARDS ARROW\n                    }\n                    for (let space = 2; space <= charWidth; space++) {\n                        sb.appendCharCode(0xA0); // &nbsp;\n                    }\n                }\n                else { // must be CharCode.Space\n                    producedCharacters = 2;\n                    charWidth = 1;\n                    sb.appendCharCode(renderSpaceCharCode); // &middot; or word separator middle dot\n                    sb.appendCharCode(0x200C); // ZERO WIDTH NON-JOINER\n                }\n                charOffsetInPart += producedCharacters;\n                charHorizontalOffset += charWidth;\n                if (charIndex >= fauxIndentLength) {\n                    visibleColumn += charWidth;\n                }\n            }\n        }\n        else {\n            sb.appendASCIICharCode(62 /* CharCode.GreaterThan */);\n            for (; charIndex < partEndIndex; charIndex++) {\n                characterMapping.setColumnInfo(charIndex + 1, partIndex - partDisplacement, charOffsetInPart, charHorizontalOffset);\n                partDisplacement = 0;\n                const charCode = lineContent.charCodeAt(charIndex);\n                let producedCharacters = 1;\n                let charWidth = 1;\n                switch (charCode) {\n                    case 9 /* CharCode.Tab */:\n                        producedCharacters = (tabSize - (visibleColumn % tabSize));\n                        charWidth = producedCharacters;\n                        for (let space = 1; space <= producedCharacters; space++) {\n                            sb.appendCharCode(0xA0); // &nbsp;\n                        }\n                        break;\n                    case 32 /* CharCode.Space */:\n                        sb.appendCharCode(0xA0); // &nbsp;\n                        break;\n                    case 60 /* CharCode.LessThan */:\n                        sb.appendString('&lt;');\n                        break;\n                    case 62 /* CharCode.GreaterThan */:\n                        sb.appendString('&gt;');\n                        break;\n                    case 38 /* CharCode.Ampersand */:\n                        sb.appendString('&amp;');\n                        break;\n                    case 0 /* CharCode.Null */:\n                        if (renderControlCharacters) {\n                            // See https://unicode-table.com/en/blocks/control-pictures/\n                            sb.appendCharCode(9216);\n                        }\n                        else {\n                            sb.appendString('&#00;');\n                        }\n                        break;\n                    case 65279 /* CharCode.UTF8_BOM */:\n                    case 8232 /* CharCode.LINE_SEPARATOR */:\n                    case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n                    case 133 /* CharCode.NEXT_LINE */:\n                        sb.appendCharCode(0xFFFD);\n                        break;\n                    default:\n                        if (strings.isFullWidthCharacter(charCode)) {\n                            charWidth++;\n                        }\n                        // See https://unicode-table.com/en/blocks/control-pictures/\n                        if (renderControlCharacters && charCode < 32) {\n                            sb.appendCharCode(9216 + charCode);\n                        }\n                        else if (renderControlCharacters && charCode === 127) {\n                            // DEL\n                            sb.appendCharCode(9249);\n                        }\n                        else if (renderControlCharacters && isControlCharacter(charCode)) {\n                            sb.appendString('[U+');\n                            sb.appendString(to4CharHex(charCode));\n                            sb.appendString(']');\n                            producedCharacters = 8;\n                            charWidth = producedCharacters;\n                        }\n                        else {\n                            sb.appendCharCode(charCode);\n                        }\n                }\n                charOffsetInPart += producedCharacters;\n                charHorizontalOffset += charWidth;\n                if (charIndex >= fauxIndentLength) {\n                    visibleColumn += charWidth;\n                }\n            }\n        }\n        if (partIsEmptyAndHasPseudoAfter) {\n            partDisplacement++;\n        }\n        else {\n            partDisplacement = 0;\n        }\n        if (charIndex >= len && !lastCharacterMappingDefined && part.isPseudoAfter()) {\n            lastCharacterMappingDefined = true;\n            characterMapping.setColumnInfo(charIndex + 1, partIndex, charOffsetInPart, charHorizontalOffset);\n        }\n        sb.appendString('</span>');\n    }\n    if (!lastCharacterMappingDefined) {\n        // When getting client rects for the last character, we will position the\n        // text range at the end of the span, insteaf of at the beginning of next span\n        characterMapping.setColumnInfo(len + 1, parts.length - 1, charOffsetInPart, charHorizontalOffset);\n    }\n    if (isOverflowing) {\n        sb.appendString('<span class=\"mtkoverflow\">');\n        sb.appendString(nls.localize('showMore', \"Show more ({0})\", renderOverflowingCharCount(overflowingCharCount)));\n        sb.appendString('</span>');\n    }\n    sb.appendString('</span>');\n    return new RenderLineOutput(characterMapping, containsRTL, containsForeignElements);\n}\nfunction to4CharHex(n) {\n    return n.toString(16).toUpperCase().padStart(4, '0');\n}\nfunction renderOverflowingCharCount(n) {\n    if (n < 1024) {\n        return nls.localize('overflow.chars', \"{0} chars\", n);\n    }\n    if (n < 1024 * 1024) {\n        return `${(n / 1024).toFixed(1)} KB`;\n    }\n    return `${(n / 1024 / 1024).toFixed(1)} MB`;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\n/**\n * Contains all data needed to render at a specific viewport.\n */\nexport class ViewportData {\n    constructor(selections, partialData, whitespaceViewportData, model) {\n        this.selections = selections;\n        this.startLineNumber = partialData.startLineNumber | 0;\n        this.endLineNumber = partialData.endLineNumber | 0;\n        this.relativeVerticalOffset = partialData.relativeVerticalOffset;\n        this.bigNumbersDelta = partialData.bigNumbersDelta | 0;\n        this.whitespaceViewportData = whitespaceViewportData;\n        this._model = model;\n        this.visibleRange = new Range(partialData.startLineNumber, this._model.getLineMinColumn(partialData.startLineNumber), partialData.endLineNumber, this._model.getLineMaxColumn(partialData.endLineNumber));\n    }\n    getViewLineRenderingData(lineNumber) {\n        return this._model.getViewportViewLineRenderingData(this.visibleRange, lineNumber);\n    }\n    getDecorationsInViewport() {\n        return this._model.getDecorationsInViewport(this.visibleRange);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../base/common/arrays.js';\nimport * as strings from '../../base/common/strings.js';\nimport { Range } from './core/range.js';\nexport class Viewport {\n    constructor(top, left, width, height) {\n        this._viewportBrand = undefined;\n        this.top = top | 0;\n        this.left = left | 0;\n        this.width = width | 0;\n        this.height = height | 0;\n    }\n}\nexport class MinimapLinesRenderingData {\n    constructor(tabSize, data) {\n        this.tabSize = tabSize;\n        this.data = data;\n    }\n}\nexport class ViewLineData {\n    constructor(content, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens, inlineDecorations) {\n        this._viewLineDataBrand = undefined;\n        this.content = content;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.minColumn = minColumn;\n        this.maxColumn = maxColumn;\n        this.startVisibleColumn = startVisibleColumn;\n        this.tokens = tokens;\n        this.inlineDecorations = inlineDecorations;\n    }\n}\nexport class ViewLineRenderingData {\n    constructor(minColumn, maxColumn, content, continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, tokens, inlineDecorations, tabSize, startVisibleColumn) {\n        this.minColumn = minColumn;\n        this.maxColumn = maxColumn;\n        this.content = content;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\n        this.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\n        this.tokens = tokens;\n        this.inlineDecorations = inlineDecorations;\n        this.tabSize = tabSize;\n        this.startVisibleColumn = startVisibleColumn;\n    }\n    static isBasicASCII(lineContent, mightContainNonBasicASCII) {\n        if (mightContainNonBasicASCII) {\n            return strings.isBasicASCII(lineContent);\n        }\n        return true;\n    }\n    static containsRTL(lineContent, isBasicASCII, mightContainRTL) {\n        if (!isBasicASCII && mightContainRTL) {\n            return strings.containsRTL(lineContent);\n        }\n        return false;\n    }\n}\nexport class InlineDecoration {\n    constructor(range, inlineClassName, type) {\n        this.range = range;\n        this.inlineClassName = inlineClassName;\n        this.type = type;\n    }\n}\nexport class SingleLineInlineDecoration {\n    constructor(startOffset, endOffset, inlineClassName, inlineClassNameAffectsLetterSpacing) {\n        this.startOffset = startOffset;\n        this.endOffset = endOffset;\n        this.inlineClassName = inlineClassName;\n        this.inlineClassNameAffectsLetterSpacing = inlineClassNameAffectsLetterSpacing;\n    }\n    toInlineDecoration(lineNumber) {\n        return new InlineDecoration(new Range(lineNumber, this.startOffset + 1, lineNumber, this.endOffset + 1), this.inlineClassName, this.inlineClassNameAffectsLetterSpacing ? 3 /* InlineDecorationType.RegularAffectingLetterSpacing */ : 0 /* InlineDecorationType.Regular */);\n    }\n}\nexport class ViewModelDecoration {\n    constructor(range, options) {\n        this._viewModelDecorationBrand = undefined;\n        this.range = range;\n        this.options = options;\n    }\n}\nexport class OverviewRulerDecorationsGroup {\n    constructor(color, zIndex, \n    /**\n     * Decorations are encoded in a number array using the following scheme:\n     *  - 3*i = lane\n     *  - 3*i+1 = startLineNumber\n     *  - 3*i+2 = endLineNumber\n     */\n    data) {\n        this.color = color;\n        this.zIndex = zIndex;\n        this.data = data;\n    }\n    static compareByRenderingProps(a, b) {\n        if (a.zIndex === b.zIndex) {\n            if (a.color < b.color) {\n                return -1;\n            }\n            if (a.color > b.color) {\n                return 1;\n            }\n            return 0;\n        }\n        return a.zIndex - b.zIndex;\n    }\n    static equals(a, b) {\n        return (a.color === b.color\n            && a.zIndex === b.zIndex\n            && arrays.equals(a.data, b.data));\n    }\n    static equalsArr(a, b) {\n        return arrays.equals(a, b, OverviewRulerDecorationsGroup.equals);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, markAsSingleton } from '../../../base/common/lifecycle.js';\nimport { RGBA8 } from '../core/rgba.js';\nimport { TokenizationRegistry } from '../languages.js';\nexport class MinimapTokensColorTracker extends Disposable {\n    static getInstance() {\n        if (!this._INSTANCE) {\n            this._INSTANCE = markAsSingleton(new MinimapTokensColorTracker());\n        }\n        return this._INSTANCE;\n    }\n    constructor() {\n        super();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._updateColorMap();\n        this._register(TokenizationRegistry.onDidChange(e => {\n            if (e.changedColorMap) {\n                this._updateColorMap();\n            }\n        }));\n    }\n    _updateColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        if (!colorMap) {\n            this._colors = [RGBA8.Empty];\n            this._backgroundIsLight = true;\n            return;\n        }\n        this._colors = [RGBA8.Empty];\n        for (let colorId = 1; colorId < colorMap.length; colorId++) {\n            const source = colorMap[colorId].rgba;\n            // Use a VM friendly data-type\n            this._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n        }\n        const backgroundLuminosity = colorMap[2 /* ColorId.DefaultBackground */].getRelativeLuminance();\n        this._backgroundIsLight = backgroundLuminosity >= 0.5;\n        this._onDidChange.fire(undefined);\n    }\n    getColor(colorId) {\n        if (colorId < 1 || colorId >= this._colors.length) {\n            // background color (basically invisible)\n            colorId = 2 /* ColorId.DefaultBackground */;\n        }\n        return this._colors[colorId];\n    }\n    backgroundIsLight() {\n        return this._backgroundIsLight;\n    }\n}\nMinimapTokensColorTracker._INSTANCE = null;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { ModelLineProjectionData } from '../modelLineProjectionData.js';\nexport class MonospaceLineBreaksComputerFactory {\n    static create(options) {\n        return new MonospaceLineBreaksComputerFactory(options.get(132 /* EditorOption.wordWrapBreakBeforeCharacters */), options.get(131 /* EditorOption.wordWrapBreakAfterCharacters */));\n    }\n    constructor(breakBeforeChars, breakAfterChars) {\n        this.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak) {\n        const requests = [];\n        const injectedTexts = [];\n        const previousBreakingData = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n                previousBreakingData.push(previousLineBreakData);\n            },\n            finalize: () => {\n                const columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth;\n                const result = [];\n                for (let i = 0, len = requests.length; i < len; i++) {\n                    const injectedText = injectedTexts[i];\n                    const previousLineBreakData = previousBreakingData[i];\n                    if (previousLineBreakData && !previousLineBreakData.injectionOptions && !injectedText) {\n                        result[i] = createLineBreaksFromPreviousLineBreaks(this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak);\n                    }\n                    else {\n                        result[i] = createLineBreaks(this.classifier, requests[i], injectedText, tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent, wordBreak);\n                    }\n                }\n                arrPool1.length = 0;\n                arrPool2.length = 0;\n                return result;\n            }\n        };\n    }\n}\nclass WrappingCharacterClassifier extends CharacterClassifier {\n    constructor(BREAK_BEFORE, BREAK_AFTER) {\n        super(0 /* CharacterClass.NONE */);\n        for (let i = 0; i < BREAK_BEFORE.length; i++) {\n            this.set(BREAK_BEFORE.charCodeAt(i), 1 /* CharacterClass.BREAK_BEFORE */);\n        }\n        for (let i = 0; i < BREAK_AFTER.length; i++) {\n            this.set(BREAK_AFTER.charCodeAt(i), 2 /* CharacterClass.BREAK_AFTER */);\n        }\n    }\n    get(charCode) {\n        if (charCode >= 0 && charCode < 256) {\n            return this._asciiMap[charCode];\n        }\n        else {\n            // Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\n            // 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\n            // 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\n            // 3. Hiragana and Katakana (0x3040 -- 0x30FF)\n            if ((charCode >= 0x3040 && charCode <= 0x30FF)\n                || (charCode >= 0x3400 && charCode <= 0x4DBF)\n                || (charCode >= 0x4E00 && charCode <= 0x9FFF)) {\n                return 3 /* CharacterClass.BREAK_IDEOGRAPHIC */;\n            }\n            return (this._map.get(charCode) || this._defaultValue);\n        }\n    }\n}\nlet arrPool1 = [];\nlet arrPool2 = [];\nfunction createLineBreaksFromPreviousLineBreaks(classifier, previousBreakingData, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent, wordBreak) {\n    if (firstLineBreakColumn === -1) {\n        return null;\n    }\n    const len = lineText.length;\n    if (len <= 1) {\n        return null;\n    }\n    const isKeepAll = (wordBreak === 'keepAll');\n    const prevBreakingOffsets = previousBreakingData.breakOffsets;\n    const prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n    const breakingOffsets = arrPool1;\n    const breakingOffsetsVisibleColumn = arrPool2;\n    let breakingOffsetsCount = 0;\n    let lastBreakingOffset = 0;\n    let lastBreakingOffsetVisibleColumn = 0;\n    let breakingColumn = firstLineBreakColumn;\n    const prevLen = prevBreakingOffsets.length;\n    let prevIndex = 0;\n    if (prevIndex >= 0) {\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n        while (prevIndex + 1 < prevLen) {\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n            if (distance >= bestDistance) {\n                break;\n            }\n            bestDistance = distance;\n            prevIndex++;\n        }\n    }\n    while (prevIndex < prevLen) {\n        // Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\n        let prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\n        let prevBreakOffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\n        if (lastBreakingOffset > prevBreakOffset) {\n            prevBreakOffset = lastBreakingOffset;\n            prevBreakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn;\n        }\n        let breakOffset = 0;\n        let breakOffsetVisibleColumn = 0;\n        let forcedBreakOffset = 0;\n        let forcedBreakOffsetVisibleColumn = 0;\n        // initially, we search as much as possible to the right (if it fits)\n        if (prevBreakOffsetVisibleColumn <= breakingColumn) {\n            let visibleColumn = prevBreakOffsetVisibleColumn;\n            let prevCharCode = prevBreakOffset === 0 ? 0 /* CharCode.Null */ : lineText.charCodeAt(prevBreakOffset - 1);\n            let prevCharCodeClass = prevBreakOffset === 0 ? 0 /* CharacterClass.NONE */ : classifier.get(prevCharCode);\n            let entireLineFits = true;\n            for (let i = prevBreakOffset; i < len; i++) {\n                const charStartOffset = i;\n                const charCode = lineText.charCodeAt(i);\n                let charCodeClass;\n                let charWidth;\n                if (strings.isHighSurrogate(charCode)) {\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                    i++;\n                    charCodeClass = 0 /* CharacterClass.NONE */;\n                    charWidth = 2;\n                }\n                else {\n                    charCodeClass = classifier.get(charCode);\n                    charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n                }\n                if (charStartOffset > lastBreakingOffset && canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n                    breakOffset = charStartOffset;\n                    breakOffsetVisibleColumn = visibleColumn;\n                }\n                visibleColumn += charWidth;\n                // check if adding character at `i` will go over the breaking column\n                if (visibleColumn > breakingColumn) {\n                    // We need to break at least before character at `i`:\n                    if (charStartOffset > lastBreakingOffset) {\n                        forcedBreakOffset = charStartOffset;\n                        forcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\n                    }\n                    else {\n                        // we need to advance at least by one character\n                        forcedBreakOffset = i + 1;\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\n                    }\n                    if (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n                        // Cannot break at `breakOffset` => reset it if it was set\n                        breakOffset = 0;\n                    }\n                    entireLineFits = false;\n                    break;\n                }\n                prevCharCode = charCode;\n                prevCharCodeClass = charCodeClass;\n            }\n            if (entireLineFits) {\n                // there is no more need to break => stop the outer loop!\n                if (breakingOffsetsCount > 0) {\n                    // Add last segment, no need to assign to `lastBreakingOffset` and `lastBreakingOffsetVisibleColumn`\n                    breakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\n                    breakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\n                    breakingOffsetsCount++;\n                }\n                break;\n            }\n        }\n        if (breakOffset === 0) {\n            // must search left\n            let visibleColumn = prevBreakOffsetVisibleColumn;\n            let charCode = lineText.charCodeAt(prevBreakOffset);\n            let charCodeClass = classifier.get(charCode);\n            let hitATabCharacter = false;\n            for (let i = prevBreakOffset - 1; i >= lastBreakingOffset; i--) {\n                const charStartOffset = i + 1;\n                const prevCharCode = lineText.charCodeAt(i);\n                if (prevCharCode === 9 /* CharCode.Tab */) {\n                    // cannot determine the width of a tab when going backwards, so we must go forwards\n                    hitATabCharacter = true;\n                    break;\n                }\n                let prevCharCodeClass;\n                let prevCharWidth;\n                if (strings.isLowSurrogate(prevCharCode)) {\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                    i--;\n                    prevCharCodeClass = 0 /* CharacterClass.NONE */;\n                    prevCharWidth = 2;\n                }\n                else {\n                    prevCharCodeClass = classifier.get(prevCharCode);\n                    prevCharWidth = (strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1);\n                }\n                if (visibleColumn <= breakingColumn) {\n                    if (forcedBreakOffset === 0) {\n                        forcedBreakOffset = charStartOffset;\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\n                    }\n                    if (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\n                        // went too far!\n                        break;\n                    }\n                    if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n                        breakOffset = charStartOffset;\n                        breakOffsetVisibleColumn = visibleColumn;\n                        break;\n                    }\n                }\n                visibleColumn -= prevCharWidth;\n                charCode = prevCharCode;\n                charCodeClass = prevCharCodeClass;\n            }\n            if (breakOffset !== 0) {\n                const remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\n                if (remainingWidthOfNextLine <= tabSize) {\n                    const charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\n                    let charWidth;\n                    if (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\n                        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                        charWidth = 2;\n                    }\n                    else {\n                        charWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n                    }\n                    if (remainingWidthOfNextLine - charWidth < 0) {\n                        // it is not worth it to break at breakOffset, it just introduces an extra needless line!\n                        breakOffset = 0;\n                    }\n                }\n            }\n            if (hitATabCharacter) {\n                // cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\n                prevIndex--;\n                continue;\n            }\n        }\n        if (breakOffset === 0) {\n            // Could not find a good breaking point\n            breakOffset = forcedBreakOffset;\n            breakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\n        }\n        if (breakOffset <= lastBreakingOffset) {\n            // Make sure that we are advancing (at least one character)\n            const charCode = lineText.charCodeAt(lastBreakingOffset);\n            if (strings.isHighSurrogate(charCode)) {\n                // A surrogate pair must always be considered as a single unit, so it is never to be broken\n                breakOffset = lastBreakingOffset + 2;\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + 2;\n            }\n            else {\n                breakOffset = lastBreakingOffset + 1;\n                breakOffsetVisibleColumn = lastBreakingOffsetVisibleColumn + computeCharWidth(charCode, lastBreakingOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\n            }\n        }\n        lastBreakingOffset = breakOffset;\n        breakingOffsets[breakingOffsetsCount] = breakOffset;\n        lastBreakingOffsetVisibleColumn = breakOffsetVisibleColumn;\n        breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n        breakingOffsetsCount++;\n        breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n        while (prevIndex < 0 || (prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn)) {\n            prevIndex++;\n        }\n        let bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\n        while (prevIndex + 1 < prevLen) {\n            const distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\n            if (distance >= bestDistance) {\n                break;\n            }\n            bestDistance = distance;\n            prevIndex++;\n        }\n    }\n    if (breakingOffsetsCount === 0) {\n        return null;\n    }\n    // Doing here some object reuse which ends up helping a huge deal with GC pauses!\n    breakingOffsets.length = breakingOffsetsCount;\n    breakingOffsetsVisibleColumn.length = breakingOffsetsCount;\n    arrPool1 = previousBreakingData.breakOffsets;\n    arrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\n    previousBreakingData.breakOffsets = breakingOffsets;\n    previousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\n    previousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\n    return previousBreakingData;\n}\nfunction createLineBreaks(classifier, _lineText, injectedTexts, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent, wordBreak) {\n    const lineText = LineInjectedText.applyInjectedText(_lineText, injectedTexts);\n    let injectionOptions;\n    let injectionOffsets;\n    if (injectedTexts && injectedTexts.length > 0) {\n        injectionOptions = injectedTexts.map(t => t.options);\n        injectionOffsets = injectedTexts.map(text => text.column - 1);\n    }\n    else {\n        injectionOptions = null;\n        injectionOffsets = null;\n    }\n    if (firstLineBreakColumn === -1) {\n        if (!injectionOptions) {\n            return null;\n        }\n        // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n        // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n        return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    }\n    const len = lineText.length;\n    if (len <= 1) {\n        if (!injectionOptions) {\n            return null;\n        }\n        // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n        // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n        return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n    }\n    const isKeepAll = (wordBreak === 'keepAll');\n    const wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\n    const wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\n    const breakingOffsets = [];\n    const breakingOffsetsVisibleColumn = [];\n    let breakingOffsetsCount = 0;\n    let breakOffset = 0;\n    let breakOffsetVisibleColumn = 0;\n    let breakingColumn = firstLineBreakColumn;\n    let prevCharCode = lineText.charCodeAt(0);\n    let prevCharCodeClass = classifier.get(prevCharCode);\n    let visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\n    let startOffset = 1;\n    if (strings.isHighSurrogate(prevCharCode)) {\n        // A surrogate pair must always be considered as a single unit, so it is never to be broken\n        visibleColumn += 1;\n        prevCharCode = lineText.charCodeAt(1);\n        prevCharCodeClass = classifier.get(prevCharCode);\n        startOffset++;\n    }\n    for (let i = startOffset; i < len; i++) {\n        const charStartOffset = i;\n        const charCode = lineText.charCodeAt(i);\n        let charCodeClass;\n        let charWidth;\n        if (strings.isHighSurrogate(charCode)) {\n            // A surrogate pair must always be considered as a single unit, so it is never to be broken\n            i++;\n            charCodeClass = 0 /* CharacterClass.NONE */;\n            charWidth = 2;\n        }\n        else {\n            charCodeClass = classifier.get(charCode);\n            charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\n        }\n        if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll)) {\n            breakOffset = charStartOffset;\n            breakOffsetVisibleColumn = visibleColumn;\n        }\n        visibleColumn += charWidth;\n        // check if adding character at `i` will go over the breaking column\n        if (visibleColumn > breakingColumn) {\n            // We need to break at least before character at `i`:\n            if (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\n                // Cannot break at `breakOffset`, must break at `i`\n                breakOffset = charStartOffset;\n                breakOffsetVisibleColumn = visibleColumn - charWidth;\n            }\n            breakingOffsets[breakingOffsetsCount] = breakOffset;\n            breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\n            breakingOffsetsCount++;\n            breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\n            breakOffset = 0;\n        }\n        prevCharCode = charCode;\n        prevCharCodeClass = charCodeClass;\n    }\n    if (breakingOffsetsCount === 0 && (!injectedTexts || injectedTexts.length === 0)) {\n        return null;\n    }\n    // Add last segment\n    breakingOffsets[breakingOffsetsCount] = len;\n    breakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\n    return new ModelLineProjectionData(injectionOffsets, injectionOptions, breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\n}\nfunction computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar) {\n    if (charCode === 9 /* CharCode.Tab */) {\n        return (tabSize - (visibleColumn % tabSize));\n    }\n    if (strings.isFullWidthCharacter(charCode)) {\n        return columnsForFullWidthChar;\n    }\n    if (charCode < 32) {\n        // when using `editor.renderControlCharacters`, the substitutions are often wide\n        return columnsForFullWidthChar;\n    }\n    return 1;\n}\nfunction tabCharacterWidth(visibleColumn, tabSize) {\n    return (tabSize - (visibleColumn % tabSize));\n}\n/**\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\n * Kinsoku Shori : Don't break before a trailing character, like a period\n */\nfunction canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass, isKeepAll) {\n    return (charCode !== 32 /* CharCode.Space */\n        && ((prevCharCodeClass === 2 /* CharacterClass.BREAK_AFTER */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */) // break at the end of multiple BREAK_AFTER\n            || (prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */ && charCodeClass === 1 /* CharacterClass.BREAK_BEFORE */) // break at the start of multiple BREAK_BEFORE\n            || (!isKeepAll && prevCharCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && charCodeClass !== 2 /* CharacterClass.BREAK_AFTER */)\n            || (!isKeepAll && charCodeClass === 3 /* CharacterClass.BREAK_IDEOGRAPHIC */ && prevCharCodeClass !== 1 /* CharacterClass.BREAK_BEFORE */)));\n}\nfunction computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\n    let wrappedTextIndentLength = 0;\n    if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n        const firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\n        if (firstNonWhitespaceIndex !== -1) {\n            // Track existing indent\n            for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                const charWidth = (lineText.charCodeAt(i) === 9 /* CharCode.Tab */ ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1);\n                wrappedTextIndentLength += charWidth;\n            }\n            // Increase indent of continuation lines, if desired\n            const numberOfAdditionalTabs = (wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0);\n            for (let i = 0; i < numberOfAdditionalTabs; i++) {\n                const charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\n                wrappedTextIndentLength += charWidth;\n            }\n            // Force sticking to beginning of line if no character would fit except for the indentation\n            if (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\n                wrappedTextIndentLength = 0;\n            }\n        }\n    }\n    return wrappedTextIndentLength;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class ColorZone {\n    constructor(from, to, colorId) {\n        this._colorZoneBrand = undefined;\n        this.from = from | 0;\n        this.to = to | 0;\n        this.colorId = colorId | 0;\n    }\n    static compare(a, b) {\n        if (a.colorId === b.colorId) {\n            if (a.from === b.from) {\n                return a.to - b.to;\n            }\n            return a.from - b.from;\n        }\n        return a.colorId - b.colorId;\n    }\n}\n/**\n * A zone in the overview ruler\n */\nexport class OverviewRulerZone {\n    constructor(startLineNumber, endLineNumber, heightInLines, color) {\n        this._overviewRulerZoneBrand = undefined;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n        this.heightInLines = heightInLines;\n        this.color = color;\n        this._colorZone = null;\n    }\n    static compare(a, b) {\n        if (a.color === b.color) {\n            if (a.startLineNumber === b.startLineNumber) {\n                if (a.heightInLines === b.heightInLines) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.heightInLines - b.heightInLines;\n            }\n            return a.startLineNumber - b.startLineNumber;\n        }\n        return a.color < b.color ? -1 : 1;\n    }\n    setColorZone(colorZone) {\n        this._colorZone = colorZone;\n    }\n    getColorZones() {\n        return this._colorZone;\n    }\n}\nexport class OverviewZoneManager {\n    constructor(getVerticalOffsetForLine) {\n        this._getVerticalOffsetForLine = getVerticalOffsetForLine;\n        this._zones = [];\n        this._colorZonesInvalid = false;\n        this._lineHeight = 0;\n        this._domWidth = 0;\n        this._domHeight = 0;\n        this._outerHeight = 0;\n        this._pixelRatio = 1;\n        this._lastAssignedId = 0;\n        this._color2Id = Object.create(null);\n        this._id2Color = [];\n    }\n    getId2Color() {\n        return this._id2Color;\n    }\n    setZones(newZones) {\n        this._zones = newZones;\n        this._zones.sort(OverviewRulerZone.compare);\n    }\n    setLineHeight(lineHeight) {\n        if (this._lineHeight === lineHeight) {\n            return false;\n        }\n        this._lineHeight = lineHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    setPixelRatio(pixelRatio) {\n        this._pixelRatio = pixelRatio;\n        this._colorZonesInvalid = true;\n    }\n    getDOMWidth() {\n        return this._domWidth;\n    }\n    getCanvasWidth() {\n        return this._domWidth * this._pixelRatio;\n    }\n    setDOMWidth(width) {\n        if (this._domWidth === width) {\n            return false;\n        }\n        this._domWidth = width;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getDOMHeight() {\n        return this._domHeight;\n    }\n    getCanvasHeight() {\n        return this._domHeight * this._pixelRatio;\n    }\n    setDOMHeight(height) {\n        if (this._domHeight === height) {\n            return false;\n        }\n        this._domHeight = height;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    getOuterHeight() {\n        return this._outerHeight;\n    }\n    setOuterHeight(outerHeight) {\n        if (this._outerHeight === outerHeight) {\n            return false;\n        }\n        this._outerHeight = outerHeight;\n        this._colorZonesInvalid = true;\n        return true;\n    }\n    resolveColorZones() {\n        const colorZonesInvalid = this._colorZonesInvalid;\n        const lineHeight = Math.floor(this._lineHeight);\n        const totalHeight = Math.floor(this.getCanvasHeight());\n        const outerHeight = Math.floor(this._outerHeight);\n        const heightRatio = totalHeight / outerHeight;\n        const halfMinimumHeight = Math.floor(4 /* Constants.MINIMUM_HEIGHT */ * this._pixelRatio / 2);\n        const allColorZones = [];\n        for (let i = 0, len = this._zones.length; i < len; i++) {\n            const zone = this._zones[i];\n            if (!colorZonesInvalid) {\n                const colorZone = zone.getColorZones();\n                if (colorZone) {\n                    allColorZones.push(colorZone);\n                    continue;\n                }\n            }\n            const offset1 = this._getVerticalOffsetForLine(zone.startLineNumber);\n            const offset2 = (zone.heightInLines === 0\n                ? this._getVerticalOffsetForLine(zone.endLineNumber) + lineHeight\n                : offset1 + zone.heightInLines * lineHeight);\n            const y1 = Math.floor(heightRatio * offset1);\n            const y2 = Math.floor(heightRatio * offset2);\n            let ycenter = Math.floor((y1 + y2) / 2);\n            let halfHeight = (y2 - ycenter);\n            if (halfHeight < halfMinimumHeight) {\n                halfHeight = halfMinimumHeight;\n            }\n            if (ycenter - halfHeight < 0) {\n                ycenter = halfHeight;\n            }\n            if (ycenter + halfHeight > totalHeight) {\n                ycenter = totalHeight - halfHeight;\n            }\n            const color = zone.color;\n            let colorId = this._color2Id[color];\n            if (!colorId) {\n                colorId = (++this._lastAssignedId);\n                this._color2Id[color] = colorId;\n                this._id2Color[colorId] = color;\n            }\n            const colorZone = new ColorZone(ycenter - halfHeight, ycenter + halfHeight, colorId);\n            zone.setColorZone(colorZone);\n            allColorZones.push(colorZone);\n        }\n        this._colorZonesInvalid = false;\n        allColorZones.sort(ColorZone.compare);\n        return allColorZones;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorTheme } from '../editorTheme.js';\nexport class ViewContext {\n    constructor(configuration, theme, model) {\n        this.configuration = configuration;\n        this.theme = new EditorTheme(theme);\n        this.viewModel = model;\n        this.viewLayout = model.viewLayout;\n    }\n    addEventHandler(eventHandler) {\n        this.viewModel.addViewEventHandler(eventHandler);\n    }\n    removeEventHandler(eventHandler) {\n        this.viewModel.removeViewEventHandler(eventHandler);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { InlineDecoration, ViewModelDecoration } from '../viewModel.js';\nimport { filterValidationDecorations } from '../config/editorOptions.js';\nexport class ViewModelDecorations {\n    constructor(editorId, model, configuration, linesCollection, coordinatesConverter) {\n        this.editorId = editorId;\n        this.model = model;\n        this.configuration = configuration;\n        this._linesCollection = linesCollection;\n        this._coordinatesConverter = coordinatesConverter;\n        this._decorationsCache = Object.create(null);\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    _clearCachedModelDecorationsResolver() {\n        this._cachedModelDecorationsResolver = null;\n        this._cachedModelDecorationsResolverViewRange = null;\n    }\n    dispose() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    reset() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onModelDecorationsChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    onLineMappingChanged() {\n        this._decorationsCache = Object.create(null);\n        this._clearCachedModelDecorationsResolver();\n    }\n    _getOrCreateViewModelDecoration(modelDecoration) {\n        const id = modelDecoration.id;\n        let r = this._decorationsCache[id];\n        if (!r) {\n            const modelRange = modelDecoration.range;\n            const options = modelDecoration.options;\n            let viewRange;\n            if (options.isWholeLine) {\n                const start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1), 0 /* PositionAffinity.Left */, false, true);\n                const end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)), 1 /* PositionAffinity.Right */);\n                viewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n            }\n            else {\n                // For backwards compatibility reasons, we want injected text before any decoration.\n                // Thus, move decorations to the right.\n                viewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange, 1 /* PositionAffinity.Right */);\n            }\n            r = new ViewModelDecoration(viewRange, options);\n            this._decorationsCache[id] = r;\n        }\n        return r;\n    }\n    getMinimapDecorationsInRange(range) {\n        return this._getDecorationsInRange(range, true, false).decorations;\n    }\n    getDecorationsViewportData(viewRange) {\n        let cacheIsValid = (this._cachedModelDecorationsResolver !== null);\n        cacheIsValid = cacheIsValid && (viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange));\n        if (!cacheIsValid) {\n            this._cachedModelDecorationsResolver = this._getDecorationsInRange(viewRange, false, false);\n            this._cachedModelDecorationsResolverViewRange = viewRange;\n        }\n        return this._cachedModelDecorationsResolver;\n    }\n    getInlineDecorationsOnLine(lineNumber, onlyMinimapDecorations = false, onlyMarginDecorations = false) {\n        const range = new Range(lineNumber, this._linesCollection.getViewLineMinColumn(lineNumber), lineNumber, this._linesCollection.getViewLineMaxColumn(lineNumber));\n        return this._getDecorationsInRange(range, onlyMinimapDecorations, onlyMarginDecorations).inlineDecorations[0];\n    }\n    _getDecorationsInRange(viewRange, onlyMinimapDecorations, onlyMarginDecorations) {\n        const modelDecorations = this._linesCollection.getDecorationsInRange(viewRange, this.editorId, filterValidationDecorations(this.configuration.options), onlyMinimapDecorations, onlyMarginDecorations);\n        const startLineNumber = viewRange.startLineNumber;\n        const endLineNumber = viewRange.endLineNumber;\n        const decorationsInViewport = [];\n        let decorationsInViewportLen = 0;\n        const inlineDecorations = [];\n        for (let j = startLineNumber; j <= endLineNumber; j++) {\n            inlineDecorations[j - startLineNumber] = [];\n        }\n        for (let i = 0, len = modelDecorations.length; i < len; i++) {\n            const modelDecoration = modelDecorations[i];\n            const decorationOptions = modelDecoration.options;\n            if (!isModelDecorationVisible(this.model, modelDecoration)) {\n                continue;\n            }\n            const viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n            const viewRange = viewModelDecoration.range;\n            decorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n            if (decorationOptions.inlineClassName) {\n                const inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? 3 /* InlineDecorationType.RegularAffectingLetterSpacing */ : 0 /* InlineDecorationType.Regular */);\n                const intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n                const intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n                for (let j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n                    inlineDecorations[j - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.beforeContentClassName) {\n                if (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n                    const inlineDecoration = new InlineDecoration(new Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn), decorationOptions.beforeContentClassName, 1 /* InlineDecorationType.Before */);\n                    inlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n            if (decorationOptions.afterContentClassName) {\n                if (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n                    const inlineDecoration = new InlineDecoration(new Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn), decorationOptions.afterContentClassName, 2 /* InlineDecorationType.After */);\n                    inlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n                }\n            }\n        }\n        return {\n            decorations: decorationsInViewport,\n            inlineDecorations: inlineDecorations\n        };\n    }\n}\nexport function isModelDecorationVisible(model, decoration) {\n    if (decoration.options.hideInCommentTokens && isModelDecorationInComment(model, decoration)) {\n        return false;\n    }\n    if (decoration.options.hideInStringTokens && isModelDecorationInString(model, decoration)) {\n        return false;\n    }\n    return true;\n}\nexport function isModelDecorationInComment(model, decoration) {\n    return testTokensInRange(model, decoration.range, (tokenType) => tokenType === 1 /* StandardTokenType.Comment */);\n}\nexport function isModelDecorationInString(model, decoration) {\n    return testTokensInRange(model, decoration.range, (tokenType) => tokenType === 2 /* StandardTokenType.String */);\n}\n/**\n * Calls the callback for every token that intersects the range.\n * If the callback returns `false`, iteration stops and `false` is returned.\n * Otherwise, `true` is returned.\n */\nfunction testTokensInRange(model, range, callback) {\n    for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n        const lineTokens = model.tokenization.getLineTokens(lineNumber);\n        const isFirstLine = lineNumber === range.startLineNumber;\n        const isEndLine = lineNumber === range.endLineNumber;\n        let tokenIdx = isFirstLine ? lineTokens.findTokenIndexAtOffset(range.startColumn - 1) : 0;\n        while (tokenIdx < lineTokens.getCount()) {\n            if (isEndLine) {\n                const startOffset = lineTokens.getStartOffset(tokenIdx);\n                if (startOffset > range.endColumn - 1) {\n                    break;\n                }\n            }\n            const callbackResult = callback(lineTokens.getStandardTokenType(tokenIdx));\n            if (!callbackResult) {\n                return false;\n            }\n            tokenIdx++;\n        }\n    }\n    return true;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nclass PendingChanges {\n    constructor() {\n        this._hasPending = false;\n        this._inserts = [];\n        this._changes = [];\n        this._removes = [];\n    }\n    insert(x) {\n        this._hasPending = true;\n        this._inserts.push(x);\n    }\n    change(x) {\n        this._hasPending = true;\n        this._changes.push(x);\n    }\n    remove(x) {\n        this._hasPending = true;\n        this._removes.push(x);\n    }\n    mustCommit() {\n        return this._hasPending;\n    }\n    commit(linesLayout) {\n        if (!this._hasPending) {\n            return;\n        }\n        const inserts = this._inserts;\n        const changes = this._changes;\n        const removes = this._removes;\n        this._hasPending = false;\n        this._inserts = [];\n        this._changes = [];\n        this._removes = [];\n        linesLayout._commitPendingChanges(inserts, changes, removes);\n    }\n}\nexport class EditorWhitespace {\n    constructor(id, afterLineNumber, ordinal, height, minWidth) {\n        this.id = id;\n        this.afterLineNumber = afterLineNumber;\n        this.ordinal = ordinal;\n        this.height = height;\n        this.minWidth = minWidth;\n        this.prefixSum = 0;\n    }\n}\n/**\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\n *\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\n */\nexport class LinesLayout {\n    constructor(lineCount, lineHeight, paddingTop, paddingBottom) {\n        this._instanceId = strings.singleLetterHash(++LinesLayout.INSTANCE_COUNT);\n        this._pendingChanges = new PendingChanges();\n        this._lastWhitespaceId = 0;\n        this._arr = [];\n        this._prefixSumValidIndex = -1;\n        this._minWidth = -1; /* marker for not being computed */\n        this._lineCount = lineCount;\n        this._lineHeight = lineHeight;\n        this._paddingTop = paddingTop;\n        this._paddingBottom = paddingBottom;\n    }\n    /**\n     * Find the insertion index for a new value inside a sorted array of values.\n     * If the value is already present in the sorted array, the insertion index will be after the already existing value.\n     */\n    static findInsertionIndex(arr, afterLineNumber, ordinal) {\n        let low = 0;\n        let high = arr.length;\n        while (low < high) {\n            const mid = ((low + high) >>> 1);\n            if (afterLineNumber === arr[mid].afterLineNumber) {\n                if (ordinal < arr[mid].ordinal) {\n                    high = mid;\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n            else if (afterLineNumber < arr[mid].afterLineNumber) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        return low;\n    }\n    /**\n     * Change the height of a line in pixels.\n     */\n    setLineHeight(lineHeight) {\n        this._checkPendingChanges();\n        this._lineHeight = lineHeight;\n    }\n    /**\n     * Changes the padding used to calculate vertical offsets.\n     */\n    setPadding(paddingTop, paddingBottom) {\n        this._paddingTop = paddingTop;\n        this._paddingBottom = paddingBottom;\n    }\n    /**\n     * Set the number of lines.\n     *\n     * @param lineCount New number of lines.\n     */\n    onFlushed(lineCount) {\n        this._checkPendingChanges();\n        this._lineCount = lineCount;\n    }\n    changeWhitespace(callback) {\n        let hadAChange = false;\n        try {\n            const accessor = {\n                insertWhitespace: (afterLineNumber, ordinal, heightInPx, minWidth) => {\n                    hadAChange = true;\n                    afterLineNumber = afterLineNumber | 0;\n                    ordinal = ordinal | 0;\n                    heightInPx = heightInPx | 0;\n                    minWidth = minWidth | 0;\n                    const id = this._instanceId + (++this._lastWhitespaceId);\n                    this._pendingChanges.insert(new EditorWhitespace(id, afterLineNumber, ordinal, heightInPx, minWidth));\n                    return id;\n                },\n                changeOneWhitespace: (id, newAfterLineNumber, newHeight) => {\n                    hadAChange = true;\n                    newAfterLineNumber = newAfterLineNumber | 0;\n                    newHeight = newHeight | 0;\n                    this._pendingChanges.change({ id, newAfterLineNumber, newHeight });\n                },\n                removeWhitespace: (id) => {\n                    hadAChange = true;\n                    this._pendingChanges.remove({ id });\n                }\n            };\n            callback(accessor);\n        }\n        finally {\n            this._pendingChanges.commit(this);\n        }\n        return hadAChange;\n    }\n    _commitPendingChanges(inserts, changes, removes) {\n        if (inserts.length > 0 || removes.length > 0) {\n            this._minWidth = -1; /* marker for not being computed */\n        }\n        if (inserts.length + changes.length + removes.length <= 1) {\n            // when only one thing happened, handle it \"delicately\"\n            for (const insert of inserts) {\n                this._insertWhitespace(insert);\n            }\n            for (const change of changes) {\n                this._changeOneWhitespace(change.id, change.newAfterLineNumber, change.newHeight);\n            }\n            for (const remove of removes) {\n                const index = this._findWhitespaceIndex(remove.id);\n                if (index === -1) {\n                    continue;\n                }\n                this._removeWhitespace(index);\n            }\n            return;\n        }\n        // simply rebuild the entire datastructure\n        const toRemove = new Set();\n        for (const remove of removes) {\n            toRemove.add(remove.id);\n        }\n        const toChange = new Map();\n        for (const change of changes) {\n            toChange.set(change.id, change);\n        }\n        const applyRemoveAndChange = (whitespaces) => {\n            const result = [];\n            for (const whitespace of whitespaces) {\n                if (toRemove.has(whitespace.id)) {\n                    continue;\n                }\n                if (toChange.has(whitespace.id)) {\n                    const change = toChange.get(whitespace.id);\n                    whitespace.afterLineNumber = change.newAfterLineNumber;\n                    whitespace.height = change.newHeight;\n                }\n                result.push(whitespace);\n            }\n            return result;\n        };\n        const result = applyRemoveAndChange(this._arr).concat(applyRemoveAndChange(inserts));\n        result.sort((a, b) => {\n            if (a.afterLineNumber === b.afterLineNumber) {\n                return a.ordinal - b.ordinal;\n            }\n            return a.afterLineNumber - b.afterLineNumber;\n        });\n        this._arr = result;\n        this._prefixSumValidIndex = -1;\n    }\n    _checkPendingChanges() {\n        if (this._pendingChanges.mustCommit()) {\n            this._pendingChanges.commit(this);\n        }\n    }\n    _insertWhitespace(whitespace) {\n        const insertIndex = LinesLayout.findInsertionIndex(this._arr, whitespace.afterLineNumber, whitespace.ordinal);\n        this._arr.splice(insertIndex, 0, whitespace);\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, insertIndex - 1);\n    }\n    _findWhitespaceIndex(id) {\n        const arr = this._arr;\n        for (let i = 0, len = arr.length; i < len; i++) {\n            if (arr[i].id === id) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    _changeOneWhitespace(id, newAfterLineNumber, newHeight) {\n        const index = this._findWhitespaceIndex(id);\n        if (index === -1) {\n            return;\n        }\n        if (this._arr[index].height !== newHeight) {\n            this._arr[index].height = newHeight;\n            this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, index - 1);\n        }\n        if (this._arr[index].afterLineNumber !== newAfterLineNumber) {\n            // `afterLineNumber` changed for this whitespace\n            // Record old whitespace\n            const whitespace = this._arr[index];\n            // Since changing `afterLineNumber` can trigger a reordering, we're gonna remove this whitespace\n            this._removeWhitespace(index);\n            whitespace.afterLineNumber = newAfterLineNumber;\n            // And add it again\n            this._insertWhitespace(whitespace);\n        }\n    }\n    _removeWhitespace(removeIndex) {\n        this._arr.splice(removeIndex, 1);\n        this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, removeIndex - 1);\n    }\n    /**\n     * Notify the layouter that lines have been deleted (a continuous zone of lines).\n     *\n     * @param fromLineNumber The line number at which the deletion started, inclusive\n     * @param toLineNumber The line number at which the deletion ended, inclusive\n     */\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._checkPendingChanges();\n        fromLineNumber = fromLineNumber | 0;\n        toLineNumber = toLineNumber | 0;\n        this._lineCount -= (toLineNumber - fromLineNumber + 1);\n        for (let i = 0, len = this._arr.length; i < len; i++) {\n            const afterLineNumber = this._arr[i].afterLineNumber;\n            if (fromLineNumber <= afterLineNumber && afterLineNumber <= toLineNumber) {\n                // The line this whitespace was after has been deleted\n                //  => move whitespace to before first deleted line\n                this._arr[i].afterLineNumber = fromLineNumber - 1;\n            }\n            else if (afterLineNumber > toLineNumber) {\n                // The line this whitespace was after has been moved up\n                //  => move whitespace up\n                this._arr[i].afterLineNumber -= (toLineNumber - fromLineNumber + 1);\n            }\n        }\n    }\n    /**\n     * Notify the layouter that lines have been inserted (a continuous zone of lines).\n     *\n     * @param fromLineNumber The line number at which the insertion started, inclusive\n     * @param toLineNumber The line number at which the insertion ended, inclusive.\n     */\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._checkPendingChanges();\n        fromLineNumber = fromLineNumber | 0;\n        toLineNumber = toLineNumber | 0;\n        this._lineCount += (toLineNumber - fromLineNumber + 1);\n        for (let i = 0, len = this._arr.length; i < len; i++) {\n            const afterLineNumber = this._arr[i].afterLineNumber;\n            if (fromLineNumber <= afterLineNumber) {\n                this._arr[i].afterLineNumber += (toLineNumber - fromLineNumber + 1);\n            }\n        }\n    }\n    /**\n     * Get the sum of all the whitespaces.\n     */\n    getWhitespacesTotalHeight() {\n        this._checkPendingChanges();\n        if (this._arr.length === 0) {\n            return 0;\n        }\n        return this.getWhitespacesAccumulatedHeight(this._arr.length - 1);\n    }\n    /**\n     * Return the sum of the heights of the whitespaces at [0..index].\n     * This includes the whitespace at `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return The sum of the heights of all whitespaces before the one at `index`, including the one at `index`.\n     */\n    getWhitespacesAccumulatedHeight(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        let startIndex = Math.max(0, this._prefixSumValidIndex + 1);\n        if (startIndex === 0) {\n            this._arr[0].prefixSum = this._arr[0].height;\n            startIndex++;\n        }\n        for (let i = startIndex; i <= index; i++) {\n            this._arr[i].prefixSum = this._arr[i - 1].prefixSum + this._arr[i].height;\n        }\n        this._prefixSumValidIndex = Math.max(this._prefixSumValidIndex, index);\n        return this._arr[index].prefixSum;\n    }\n    /**\n     * Get the sum of heights for all objects.\n     *\n     * @return The sum of heights for all objects.\n     */\n    getLinesTotalHeight() {\n        this._checkPendingChanges();\n        const linesHeight = this._lineHeight * this._lineCount;\n        const whitespacesHeight = this.getWhitespacesTotalHeight();\n        return linesHeight + whitespacesHeight + this._paddingTop + this._paddingBottom;\n    }\n    /**\n     * Returns the accumulated height of whitespaces before the given line number.\n     *\n     * @param lineNumber The line number\n     */\n    getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        const lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n        if (lastWhitespaceBeforeLineNumber === -1) {\n            return 0;\n        }\n        return this.getWhitespacesAccumulatedHeight(lastWhitespaceBeforeLineNumber);\n    }\n    _findLastWhitespaceBeforeLineNumber(lineNumber) {\n        lineNumber = lineNumber | 0;\n        // Find the whitespace before line number\n        const arr = this._arr;\n        let low = 0;\n        let high = arr.length - 1;\n        while (low <= high) {\n            const delta = (high - low) | 0;\n            const halfDelta = (delta / 2) | 0;\n            const mid = (low + halfDelta) | 0;\n            if (arr[mid].afterLineNumber < lineNumber) {\n                if (mid + 1 >= arr.length || arr[mid + 1].afterLineNumber >= lineNumber) {\n                    return mid;\n                }\n                else {\n                    low = (mid + 1) | 0;\n                }\n            }\n            else {\n                high = (mid - 1) | 0;\n            }\n        }\n        return -1;\n    }\n    _findFirstWhitespaceAfterLineNumber(lineNumber) {\n        lineNumber = lineNumber | 0;\n        const lastWhitespaceBeforeLineNumber = this._findLastWhitespaceBeforeLineNumber(lineNumber);\n        const firstWhitespaceAfterLineNumber = lastWhitespaceBeforeLineNumber + 1;\n        if (firstWhitespaceAfterLineNumber < this._arr.length) {\n            return firstWhitespaceAfterLineNumber;\n        }\n        return -1;\n    }\n    /**\n     * Find the index of the first whitespace which has `afterLineNumber` >= `lineNumber`.\n     * @return The index of the first whitespace with `afterLineNumber` >= `lineNumber` or -1 if no whitespace is found.\n     */\n    getFirstWhitespaceIndexAfterLineNumber(lineNumber) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        return this._findFirstWhitespaceAfterLineNumber(lineNumber);\n    }\n    /**\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n     *\n     * @param lineNumber The line number\n     * @return The sum of heights for all objects above `lineNumber`.\n     */\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        let previousLinesHeight;\n        if (lineNumber > 1) {\n            previousLinesHeight = this._lineHeight * (lineNumber - 1);\n        }\n        else {\n            previousLinesHeight = 0;\n        }\n        const previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber - (includeViewZones ? 1 : 0));\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    /**\n     * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n     *\n     * @param lineNumber The line number\n     * @return The sum of heights for all objects above `lineNumber`.\n     */\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        this._checkPendingChanges();\n        lineNumber = lineNumber | 0;\n        const previousLinesHeight = this._lineHeight * lineNumber;\n        const previousWhitespacesHeight = this.getWhitespaceAccumulatedHeightBeforeLineNumber(lineNumber + (includeViewZones ? 1 : 0));\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    /**\n     * The maximum min width for all whitespaces.\n     */\n    getWhitespaceMinWidth() {\n        this._checkPendingChanges();\n        if (this._minWidth === -1) {\n            let minWidth = 0;\n            for (let i = 0, len = this._arr.length; i < len; i++) {\n                minWidth = Math.max(minWidth, this._arr[i].minWidth);\n            }\n            this._minWidth = minWidth;\n        }\n        return this._minWidth;\n    }\n    /**\n     * Check if `verticalOffset` is below all lines.\n     */\n    isAfterLines(verticalOffset) {\n        this._checkPendingChanges();\n        const totalHeight = this.getLinesTotalHeight();\n        return verticalOffset > totalHeight;\n    }\n    isInTopPadding(verticalOffset) {\n        if (this._paddingTop === 0) {\n            return false;\n        }\n        this._checkPendingChanges();\n        return (verticalOffset < this._paddingTop);\n    }\n    isInBottomPadding(verticalOffset) {\n        if (this._paddingBottom === 0) {\n            return false;\n        }\n        this._checkPendingChanges();\n        const totalHeight = this.getLinesTotalHeight();\n        return (verticalOffset >= totalHeight - this._paddingBottom);\n    }\n    /**\n     * Find the first line number that is at or after vertical offset `verticalOffset`.\n     * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\n     * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\n     *\n     * @param verticalOffset The vertical offset to search at.\n     * @return The line number at or after vertical offset `verticalOffset`.\n     */\n    getLineNumberAtOrAfterVerticalOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        if (verticalOffset < 0) {\n            return 1;\n        }\n        const linesCount = this._lineCount | 0;\n        const lineHeight = this._lineHeight;\n        let minLineNumber = 1;\n        let maxLineNumber = linesCount;\n        while (minLineNumber < maxLineNumber) {\n            const midLineNumber = ((minLineNumber + maxLineNumber) / 2) | 0;\n            const midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber) | 0;\n            if (verticalOffset >= midLineNumberVerticalOffset + lineHeight) {\n                // vertical offset is after mid line number\n                minLineNumber = midLineNumber + 1;\n            }\n            else if (verticalOffset >= midLineNumberVerticalOffset) {\n                // Hit\n                return midLineNumber;\n            }\n            else {\n                // vertical offset is before mid line number, but mid line number could still be what we're searching for\n                maxLineNumber = midLineNumber;\n            }\n        }\n        if (minLineNumber > linesCount) {\n            return linesCount;\n        }\n        return minLineNumber;\n    }\n    /**\n     * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\n     *\n     * @param verticalOffset1 The beginning of the viewport.\n     * @param verticalOffset2 The end of the viewport.\n     * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\n     */\n    getLinesViewportData(verticalOffset1, verticalOffset2) {\n        this._checkPendingChanges();\n        verticalOffset1 = verticalOffset1 | 0;\n        verticalOffset2 = verticalOffset2 | 0;\n        const lineHeight = this._lineHeight;\n        // Find first line number\n        // We don't live in a perfect world, so the line number might start before or after verticalOffset1\n        const startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1) | 0;\n        const startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber) | 0;\n        let endLineNumber = this._lineCount | 0;\n        // Also keep track of what whitespace we've got\n        let whitespaceIndex = this.getFirstWhitespaceIndexAfterLineNumber(startLineNumber) | 0;\n        const whitespaceCount = this.getWhitespacesCount() | 0;\n        let currentWhitespaceHeight;\n        let currentWhitespaceAfterLineNumber;\n        if (whitespaceIndex === -1) {\n            whitespaceIndex = whitespaceCount;\n            currentWhitespaceAfterLineNumber = endLineNumber + 1;\n            currentWhitespaceHeight = 0;\n        }\n        else {\n            currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n            currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n        }\n        let currentVerticalOffset = startLineNumberVerticalOffset;\n        let currentLineRelativeOffset = currentVerticalOffset;\n        // IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\n        const STEP_SIZE = 500000;\n        let bigNumbersDelta = 0;\n        if (startLineNumberVerticalOffset >= STEP_SIZE) {\n            // Compute a delta that guarantees that lines are positioned at `lineHeight` increments\n            bigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\n            bigNumbersDelta = Math.floor(bigNumbersDelta / lineHeight) * lineHeight;\n            currentLineRelativeOffset -= bigNumbersDelta;\n        }\n        const linesOffsets = [];\n        const verticalCenter = verticalOffset1 + (verticalOffset2 - verticalOffset1) / 2;\n        let centeredLineNumber = -1;\n        // Figure out how far the lines go\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            if (centeredLineNumber === -1) {\n                const currentLineTop = currentVerticalOffset;\n                const currentLineBottom = currentVerticalOffset + lineHeight;\n                if ((currentLineTop <= verticalCenter && verticalCenter < currentLineBottom) || currentLineTop > verticalCenter) {\n                    centeredLineNumber = lineNumber;\n                }\n            }\n            // Count current line height in the vertical offsets\n            currentVerticalOffset += lineHeight;\n            linesOffsets[lineNumber - startLineNumber] = currentLineRelativeOffset;\n            // Next line starts immediately after this one\n            currentLineRelativeOffset += lineHeight;\n            while (currentWhitespaceAfterLineNumber === lineNumber) {\n                // Push down next line with the height of the current whitespace\n                currentLineRelativeOffset += currentWhitespaceHeight;\n                // Count current whitespace in the vertical offsets\n                currentVerticalOffset += currentWhitespaceHeight;\n                whitespaceIndex++;\n                if (whitespaceIndex >= whitespaceCount) {\n                    currentWhitespaceAfterLineNumber = endLineNumber + 1;\n                }\n                else {\n                    currentWhitespaceAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n                    currentWhitespaceHeight = this.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n                }\n            }\n            if (currentVerticalOffset >= verticalOffset2) {\n                // We have covered the entire viewport area, time to stop\n                endLineNumber = lineNumber;\n                break;\n            }\n        }\n        if (centeredLineNumber === -1) {\n            centeredLineNumber = endLineNumber;\n        }\n        const endLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(endLineNumber) | 0;\n        let completelyVisibleStartLineNumber = startLineNumber;\n        let completelyVisibleEndLineNumber = endLineNumber;\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n            if (startLineNumberVerticalOffset < verticalOffset1) {\n                completelyVisibleStartLineNumber++;\n            }\n        }\n        if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n            if (endLineNumberVerticalOffset + lineHeight > verticalOffset2) {\n                completelyVisibleEndLineNumber--;\n            }\n        }\n        return {\n            bigNumbersDelta: bigNumbersDelta,\n            startLineNumber: startLineNumber,\n            endLineNumber: endLineNumber,\n            relativeVerticalOffset: linesOffsets,\n            centeredLineNumber: centeredLineNumber,\n            completelyVisibleStartLineNumber: completelyVisibleStartLineNumber,\n            completelyVisibleEndLineNumber: completelyVisibleEndLineNumber\n        };\n    }\n    getVerticalOffsetForWhitespaceIndex(whitespaceIndex) {\n        this._checkPendingChanges();\n        whitespaceIndex = whitespaceIndex | 0;\n        const afterLineNumber = this.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\n        let previousLinesHeight;\n        if (afterLineNumber >= 1) {\n            previousLinesHeight = this._lineHeight * afterLineNumber;\n        }\n        else {\n            previousLinesHeight = 0;\n        }\n        let previousWhitespacesHeight;\n        if (whitespaceIndex > 0) {\n            previousWhitespacesHeight = this.getWhitespacesAccumulatedHeight(whitespaceIndex - 1);\n        }\n        else {\n            previousWhitespacesHeight = 0;\n        }\n        return previousLinesHeight + previousWhitespacesHeight + this._paddingTop;\n    }\n    getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        let minWhitespaceIndex = 0;\n        let maxWhitespaceIndex = this.getWhitespacesCount() - 1;\n        if (maxWhitespaceIndex < 0) {\n            return -1;\n        }\n        // Special case: nothing to be found\n        const maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex);\n        const maxWhitespaceHeight = this.getHeightForWhitespaceIndex(maxWhitespaceIndex);\n        if (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\n            return -1;\n        }\n        while (minWhitespaceIndex < maxWhitespaceIndex) {\n            const midWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\n            const midWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex);\n            const midWhitespaceHeight = this.getHeightForWhitespaceIndex(midWhitespaceIndex);\n            if (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\n                // vertical offset is after whitespace\n                minWhitespaceIndex = midWhitespaceIndex + 1;\n            }\n            else if (verticalOffset >= midWhitespaceVerticalOffset) {\n                // Hit\n                return midWhitespaceIndex;\n            }\n            else {\n                // vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\n                maxWhitespaceIndex = midWhitespaceIndex;\n            }\n        }\n        return minWhitespaceIndex;\n    }\n    /**\n     * Get exactly the whitespace that is layouted at `verticalOffset`.\n     *\n     * @param verticalOffset The vertical offset.\n     * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\n     */\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        this._checkPendingChanges();\n        verticalOffset = verticalOffset | 0;\n        const candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);\n        if (candidateIndex < 0) {\n            return null;\n        }\n        if (candidateIndex >= this.getWhitespacesCount()) {\n            return null;\n        }\n        const candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex);\n        if (candidateTop > verticalOffset) {\n            return null;\n        }\n        const candidateHeight = this.getHeightForWhitespaceIndex(candidateIndex);\n        const candidateId = this.getIdForWhitespaceIndex(candidateIndex);\n        const candidateAfterLineNumber = this.getAfterLineNumberForWhitespaceIndex(candidateIndex);\n        return {\n            id: candidateId,\n            afterLineNumber: candidateAfterLineNumber,\n            verticalOffset: candidateTop,\n            height: candidateHeight\n        };\n    }\n    /**\n     * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\n     *\n     * @param verticalOffset1 The beginning of the viewport.\n     * @param verticalOffset2 The end of the viewport.\n     * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\n     */\n    getWhitespaceViewportData(verticalOffset1, verticalOffset2) {\n        this._checkPendingChanges();\n        verticalOffset1 = verticalOffset1 | 0;\n        verticalOffset2 = verticalOffset2 | 0;\n        const startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1);\n        const endIndex = this.getWhitespacesCount() - 1;\n        if (startIndex < 0) {\n            return [];\n        }\n        const result = [];\n        for (let i = startIndex; i <= endIndex; i++) {\n            const top = this.getVerticalOffsetForWhitespaceIndex(i);\n            const height = this.getHeightForWhitespaceIndex(i);\n            if (top >= verticalOffset2) {\n                break;\n            }\n            result.push({\n                id: this.getIdForWhitespaceIndex(i),\n                afterLineNumber: this.getAfterLineNumberForWhitespaceIndex(i),\n                verticalOffset: top,\n                height: height\n            });\n        }\n        return result;\n    }\n    /**\n     * Get all whitespaces.\n     */\n    getWhitespaces() {\n        this._checkPendingChanges();\n        return this._arr.slice(0);\n    }\n    /**\n     * The number of whitespaces.\n     */\n    getWhitespacesCount() {\n        this._checkPendingChanges();\n        return this._arr.length;\n    }\n    /**\n     * Get the `id` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `id` of whitespace at `index`.\n     */\n    getIdForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].id;\n    }\n    /**\n     * Get the `afterLineNumber` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `afterLineNumber` of whitespace at `index`.\n     */\n    getAfterLineNumberForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].afterLineNumber;\n    }\n    /**\n     * Get the `height` for whitespace at index `index`.\n     *\n     * @param index The index of the whitespace.\n     * @return `height` of whitespace at `index`.\n     */\n    getHeightForWhitespaceIndex(index) {\n        this._checkPendingChanges();\n        index = index | 0;\n        return this._arr[index].height;\n    }\n}\nLinesLayout.INSTANCE_COUNT = 0;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModelEventDispatcher.js';\nconst SMOOTH_SCROLLING_TIME = 125;\nclass EditorScrollDimensions {\n    constructor(width, contentWidth, height, contentHeight) {\n        width = width | 0;\n        contentWidth = contentWidth | 0;\n        height = height | 0;\n        contentHeight = contentHeight | 0;\n        if (width < 0) {\n            width = 0;\n        }\n        if (contentWidth < 0) {\n            contentWidth = 0;\n        }\n        if (height < 0) {\n            height = 0;\n        }\n        if (contentHeight < 0) {\n            contentHeight = 0;\n        }\n        this.width = width;\n        this.contentWidth = contentWidth;\n        this.scrollWidth = Math.max(width, contentWidth);\n        this.height = height;\n        this.contentHeight = contentHeight;\n        this.scrollHeight = Math.max(height, contentHeight);\n    }\n    equals(other) {\n        return (this.width === other.width\n            && this.contentWidth === other.contentWidth\n            && this.height === other.height\n            && this.contentHeight === other.contentHeight);\n    }\n}\nclass EditorScrollable extends Disposable {\n    constructor(smoothScrollDuration, scheduleAtNextAnimationFrame) {\n        super();\n        this._onDidContentSizeChange = this._register(new Emitter());\n        this.onDidContentSizeChange = this._onDidContentSizeChange.event;\n        this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n        this._scrollable = this._register(new Scrollable({\n            forceIntegerValues: true,\n            smoothScrollDuration,\n            scheduleAtNextAnimationFrame\n        }));\n        this.onDidScroll = this._scrollable.onScroll;\n    }\n    getScrollable() {\n        return this._scrollable;\n    }\n    setSmoothScrollDuration(smoothScrollDuration) {\n        this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    getScrollDimensions() {\n        return this._dimensions;\n    }\n    setScrollDimensions(dimensions) {\n        if (this._dimensions.equals(dimensions)) {\n            return;\n        }\n        const oldDimensions = this._dimensions;\n        this._dimensions = dimensions;\n        this._scrollable.setScrollDimensions({\n            width: dimensions.width,\n            scrollWidth: dimensions.scrollWidth,\n            height: dimensions.height,\n            scrollHeight: dimensions.scrollHeight\n        }, true);\n        const contentWidthChanged = (oldDimensions.contentWidth !== dimensions.contentWidth);\n        const contentHeightChanged = (oldDimensions.contentHeight !== dimensions.contentHeight);\n        if (contentWidthChanged || contentHeightChanged) {\n            this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\n        }\n    }\n    getFutureScrollPosition() {\n        return this._scrollable.getFutureScrollPosition();\n    }\n    getCurrentScrollPosition() {\n        return this._scrollable.getCurrentScrollPosition();\n    }\n    setScrollPositionNow(update) {\n        this._scrollable.setScrollPositionNow(update);\n    }\n    setScrollPositionSmooth(update) {\n        this._scrollable.setScrollPositionSmooth(update);\n    }\n    hasPendingScrollAnimation() {\n        return this._scrollable.hasPendingScrollAnimation();\n    }\n}\nexport class ViewLayout extends Disposable {\n    constructor(configuration, lineCount, scheduleAtNextAnimationFrame) {\n        super();\n        this._configuration = configuration;\n        const options = this._configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        const padding = options.get(83 /* EditorOption.padding */);\n        this._linesLayout = new LinesLayout(lineCount, options.get(66 /* EditorOption.lineHeight */), padding.top, padding.bottom);\n        this._maxLineWidth = 0;\n        this._overlayWidgetsMinWidth = 0;\n        this._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n        this._configureSmoothScrollDuration();\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\n        this.onDidScroll = this._scrollable.onDidScroll;\n        this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\n        this._updateHeight();\n    }\n    dispose() {\n        super.dispose();\n    }\n    getScrollable() {\n        return this._scrollable.getScrollable();\n    }\n    onHeightMaybeChanged() {\n        this._updateHeight();\n    }\n    _configureSmoothScrollDuration() {\n        this._scrollable.setSmoothScrollDuration(this._configuration.options.get(113 /* EditorOption.smoothScrolling */) ? SMOOTH_SCROLLING_TIME : 0);\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._configuration.options;\n        if (e.hasChanged(66 /* EditorOption.lineHeight */)) {\n            this._linesLayout.setLineHeight(options.get(66 /* EditorOption.lineHeight */));\n        }\n        if (e.hasChanged(83 /* EditorOption.padding */)) {\n            const padding = options.get(83 /* EditorOption.padding */);\n            this._linesLayout.setPadding(padding.top, padding.bottom);\n        }\n        if (e.hasChanged(143 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n            const width = layoutInfo.contentWidth;\n            const height = layoutInfo.height;\n            const scrollDimensions = this._scrollable.getScrollDimensions();\n            const contentWidth = scrollDimensions.contentWidth;\n            this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n        }\n        else {\n            this._updateHeight();\n        }\n        if (e.hasChanged(113 /* EditorOption.smoothScrolling */)) {\n            this._configureSmoothScrollDuration();\n        }\n    }\n    onFlushed(lineCount) {\n        this._linesLayout.onFlushed(lineCount);\n    }\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n    }\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n    }\n    // ---- end view event handlers\n    _getHorizontalScrollbarHeight(width, scrollWidth) {\n        const options = this._configuration.options;\n        const scrollbar = options.get(102 /* EditorOption.scrollbar */);\n        if (scrollbar.horizontal === 2 /* ScrollbarVisibility.Hidden */) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        if (width >= scrollWidth) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        return scrollbar.horizontalScrollbarSize;\n    }\n    _getContentHeight(width, height, contentWidth) {\n        const options = this._configuration.options;\n        let result = this._linesLayout.getLinesTotalHeight();\n        if (options.get(104 /* EditorOption.scrollBeyondLastLine */)) {\n            result += Math.max(0, height - options.get(66 /* EditorOption.lineHeight */) - options.get(83 /* EditorOption.padding */).bottom);\n        }\n        else {\n            result += this._getHorizontalScrollbarHeight(width, contentWidth);\n        }\n        return result;\n    }\n    _updateHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const width = scrollDimensions.width;\n        const height = scrollDimensions.height;\n        const contentWidth = scrollDimensions.contentWidth;\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n    }\n    // ---- Layouting logic\n    getCurrentViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    getFutureViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    _computeContentWidth() {\n        const options = this._configuration.options;\n        const maxLineWidth = this._maxLineWidth;\n        const wrappingInfo = options.get(144 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        if (wrappingInfo.isViewportWrapping) {\n            const minimap = options.get(72 /* EditorOption.minimap */);\n            if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n                // This is a case where viewport wrapping is on, but the line extends above the viewport\n                if (minimap.enabled && minimap.side === 'right') {\n                    // We need to accomodate the scrollbar width\n                    return maxLineWidth + layoutInfo.verticalScrollbarWidth;\n                }\n            }\n            return maxLineWidth;\n        }\n        else {\n            const extraHorizontalSpace = options.get(103 /* EditorOption.scrollBeyondLastColumn */) * fontInfo.typicalHalfwidthCharacterWidth;\n            const whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n            return Math.max(maxLineWidth + extraHorizontalSpace + layoutInfo.verticalScrollbarWidth, whitespaceMinWidth, this._overlayWidgetsMinWidth);\n        }\n    }\n    setMaxLineWidth(maxLineWidth) {\n        this._maxLineWidth = maxLineWidth;\n        this._updateContentWidth();\n    }\n    setOverlayWidgetsMinWidth(maxMinWidth) {\n        this._overlayWidgetsMinWidth = maxMinWidth;\n        this._updateContentWidth();\n    }\n    _updateContentWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(), scrollDimensions.height, scrollDimensions.contentHeight));\n        // The height might depend on the fact that there is a horizontal scrollbar or not\n        this._updateHeight();\n    }\n    // ---- view state\n    saveState() {\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        const scrollTop = currentScrollPosition.scrollTop;\n        const firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n        const whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n        return {\n            scrollTop: scrollTop,\n            scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n            scrollLeft: currentScrollPosition.scrollLeft\n        };\n    }\n    // ----\n    changeWhitespace(callback) {\n        const hadAChange = this._linesLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this.onHeightMaybeChanged();\n        }\n        return hadAChange;\n    }\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber, includeViewZones);\n    }\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones);\n    }\n    isAfterLines(verticalOffset) {\n        return this._linesLayout.isAfterLines(verticalOffset);\n    }\n    isInTopPadding(verticalOffset) {\n        return this._linesLayout.isInTopPadding(verticalOffset);\n    }\n    isInBottomPadding(verticalOffset) {\n        return this._linesLayout.isInBottomPadding(verticalOffset);\n    }\n    getLineNumberAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n    }\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n    }\n    getLinesViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getLinesViewportDataAtScrollTop(scrollTop) {\n        // do some minimal validations on scrollTop\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n            scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n        }\n        if (scrollTop < 0) {\n            scrollTop = 0;\n        }\n        return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n    }\n    getWhitespaceViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getWhitespaces() {\n        return this._linesLayout.getWhitespaces();\n    }\n    // ----\n    getContentWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentWidth;\n    }\n    getScrollWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollWidth;\n    }\n    getContentHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentHeight;\n    }\n    getScrollHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollHeight;\n    }\n    getCurrentScrollLeft() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollLeft;\n    }\n    getCurrentScrollTop() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollTop;\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    setScrollPosition(position, type) {\n        if (type === 1 /* ScrollType.Immediate */) {\n            this._scrollable.setScrollPositionNow(position);\n        }\n        else {\n            this._scrollable.setScrollPositionSmooth(position);\n        }\n    }\n    hasPendingScrollAnimation() {\n        return this._scrollable.hasPendingScrollAnimation();\n    }\n    deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        this._scrollable.setScrollPositionNow({\n            scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n            scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n        });\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { Position } from '../core/position.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport { SingleLineInlineDecoration, ViewLineData } from '../viewModel.js';\nexport function createModelLineProjection(lineBreakData, isVisible) {\n    if (lineBreakData === null) {\n        // No mapping needed\n        if (isVisible) {\n            return IdentityModelLineProjection.INSTANCE;\n        }\n        return HiddenModelLineProjection.INSTANCE;\n    }\n    else {\n        return new ModelLineProjection(lineBreakData, isVisible);\n    }\n}\n/**\n * This projection is used to\n * * wrap model lines\n * * inject text\n */\nclass ModelLineProjection {\n    constructor(lineBreakData, isVisible) {\n        this._projectionData = lineBreakData;\n        this._isVisible = isVisible;\n    }\n    isVisible() {\n        return this._isVisible;\n    }\n    setVisible(isVisible) {\n        this._isVisible = isVisible;\n        return this;\n    }\n    getProjectionData() {\n        return this._projectionData;\n    }\n    getViewLineCount() {\n        if (!this._isVisible) {\n            return 0;\n        }\n        return this._projectionData.getOutputLineCount();\n    }\n    getViewLineContent(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        const startOffsetInInputWithInjections = outputLineIndex > 0 ? this._projectionData.breakOffsets[outputLineIndex - 1] : 0;\n        const endOffsetInInputWithInjections = this._projectionData.breakOffsets[outputLineIndex];\n        let r;\n        if (this._projectionData.injectionOffsets !== null) {\n            const injectedTexts = this._projectionData.injectionOffsets.map((offset, idx) => new LineInjectedText(0, 0, offset + 1, this._projectionData.injectionOptions[idx], 0));\n            const lineWithInjections = LineInjectedText.applyInjectedText(model.getLineContent(modelLineNumber), injectedTexts);\n            r = lineWithInjections.substring(startOffsetInInputWithInjections, endOffsetInInputWithInjections);\n        }\n        else {\n            r = model.getValueInRange({\n                startLineNumber: modelLineNumber,\n                startColumn: startOffsetInInputWithInjections + 1,\n                endLineNumber: modelLineNumber,\n                endColumn: endOffsetInInputWithInjections + 1\n            });\n        }\n        if (outputLineIndex > 0) {\n            r = spaces(this._projectionData.wrappedTextIndentLength) + r;\n        }\n        return r;\n    }\n    getViewLineLength(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getLineLength(outputLineIndex);\n    }\n    getViewLineMinColumn(_model, _modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n    }\n    getViewLineMaxColumn(model, modelLineNumber, outputLineIndex) {\n        this._assertVisible();\n        return this._projectionData.getMaxOutputOffset(outputLineIndex) + 1;\n    }\n    /**\n     * Try using {@link getViewLinesData} instead.\n    */\n    getViewLineData(model, modelLineNumber, outputLineIndex) {\n        const arr = new Array();\n        this.getViewLinesData(model, modelLineNumber, outputLineIndex, 1, 0, [true], arr);\n        return arr[0];\n    }\n    getViewLinesData(model, modelLineNumber, outputLineIdx, lineCount, globalStartIndex, needed, result) {\n        this._assertVisible();\n        const lineBreakData = this._projectionData;\n        const injectionOffsets = lineBreakData.injectionOffsets;\n        const injectionOptions = lineBreakData.injectionOptions;\n        let inlineDecorationsPerOutputLine = null;\n        if (injectionOffsets) {\n            inlineDecorationsPerOutputLine = [];\n            let totalInjectedTextLengthBefore = 0;\n            let currentInjectedOffset = 0;\n            for (let outputLineIndex = 0; outputLineIndex < lineBreakData.getOutputLineCount(); outputLineIndex++) {\n                const inlineDecorations = new Array();\n                inlineDecorationsPerOutputLine[outputLineIndex] = inlineDecorations;\n                const lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n                const lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n                while (currentInjectedOffset < injectionOffsets.length) {\n                    const length = injectionOptions[currentInjectedOffset].content.length;\n                    const injectedTextStartOffsetInInputWithInjections = injectionOffsets[currentInjectedOffset] + totalInjectedTextLengthBefore;\n                    const injectedTextEndOffsetInInputWithInjections = injectedTextStartOffsetInInputWithInjections + length;\n                    if (injectedTextStartOffsetInInputWithInjections > lineEndOffsetInInputWithInjections) {\n                        // Injected text only starts in later wrapped lines.\n                        break;\n                    }\n                    if (lineStartOffsetInInputWithInjections < injectedTextEndOffsetInInputWithInjections) {\n                        // Injected text ends after or in this line (but also starts in or before this line).\n                        const options = injectionOptions[currentInjectedOffset];\n                        if (options.inlineClassName) {\n                            const offset = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n                            const start = offset + Math.max(injectedTextStartOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, 0);\n                            const end = offset + Math.min(injectedTextEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections);\n                            if (start !== end) {\n                                inlineDecorations.push(new SingleLineInlineDecoration(start, end, options.inlineClassName, options.inlineClassNameAffectsLetterSpacing));\n                            }\n                        }\n                    }\n                    if (injectedTextEndOffsetInInputWithInjections <= lineEndOffsetInInputWithInjections) {\n                        totalInjectedTextLengthBefore += length;\n                        currentInjectedOffset++;\n                    }\n                    else {\n                        // injected text breaks into next line, process it again\n                        break;\n                    }\n                }\n            }\n        }\n        let lineWithInjections;\n        if (injectionOffsets) {\n            lineWithInjections = model.tokenization.getLineTokens(modelLineNumber).withInserted(injectionOffsets.map((offset, idx) => ({\n                offset,\n                text: injectionOptions[idx].content,\n                tokenMetadata: LineTokens.defaultTokenMetadata\n            })));\n        }\n        else {\n            lineWithInjections = model.tokenization.getLineTokens(modelLineNumber);\n        }\n        for (let outputLineIndex = outputLineIdx; outputLineIndex < outputLineIdx + lineCount; outputLineIndex++) {\n            const globalIndex = globalStartIndex + outputLineIndex - outputLineIdx;\n            if (!needed[globalIndex]) {\n                result[globalIndex] = null;\n                continue;\n            }\n            result[globalIndex] = this._getViewLineData(lineWithInjections, inlineDecorationsPerOutputLine ? inlineDecorationsPerOutputLine[outputLineIndex] : null, outputLineIndex);\n        }\n    }\n    _getViewLineData(lineWithInjections, inlineDecorations, outputLineIndex) {\n        this._assertVisible();\n        const lineBreakData = this._projectionData;\n        const deltaStartIndex = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n        const lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n        const lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n        const tokens = lineWithInjections.sliceAndInflate(lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections, deltaStartIndex);\n        let lineContent = tokens.getLineContent();\n        if (outputLineIndex > 0) {\n            lineContent = spaces(lineBreakData.wrappedTextIndentLength) + lineContent;\n        }\n        const minColumn = this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n        const maxColumn = lineContent.length + 1;\n        const continuesWithWrappedLine = (outputLineIndex + 1 < this.getViewLineCount());\n        const startVisibleColumn = (outputLineIndex === 0 ? 0 : lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1]);\n        return new ViewLineData(lineContent, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens, inlineDecorations);\n    }\n    getModelColumnOfViewPosition(outputLineIndex, outputColumn) {\n        this._assertVisible();\n        return this._projectionData.translateToInputOffset(outputLineIndex, outputColumn - 1) + 1;\n    }\n    getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity = 2 /* PositionAffinity.None */) {\n        this._assertVisible();\n        const r = this._projectionData.translateToOutputPosition(inputColumn - 1, affinity);\n        return r.toPosition(deltaLineNumber);\n    }\n    getViewLineNumberOfModelPosition(deltaLineNumber, inputColumn) {\n        this._assertVisible();\n        const r = this._projectionData.translateToOutputPosition(inputColumn - 1);\n        return deltaLineNumber + r.outputLineIndex;\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        const baseViewLineNumber = outputPosition.lineNumber - outputLineIndex;\n        const normalizedOutputPosition = this._projectionData.normalizeOutputPosition(outputLineIndex, outputPosition.column - 1, affinity);\n        const result = normalizedOutputPosition.toPosition(baseViewLineNumber);\n        return result;\n    }\n    getInjectedTextAt(outputLineIndex, outputColumn) {\n        return this._projectionData.getInjectedText(outputLineIndex, outputColumn - 1);\n    }\n    _assertVisible() {\n        if (!this._isVisible) {\n            throw new Error('Not supported');\n        }\n    }\n}\n/**\n * This projection does not change the model line.\n*/\nclass IdentityModelLineProjection {\n    constructor() { }\n    isVisible() {\n        return true;\n    }\n    setVisible(isVisible) {\n        if (isVisible) {\n            return this;\n        }\n        return HiddenModelLineProjection.INSTANCE;\n    }\n    getProjectionData() {\n        return null;\n    }\n    getViewLineCount() {\n        return 1;\n    }\n    getViewLineContent(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineContent(modelLineNumber);\n    }\n    getViewLineLength(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineLength(modelLineNumber);\n    }\n    getViewLineMinColumn(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineMinColumn(modelLineNumber);\n    }\n    getViewLineMaxColumn(model, modelLineNumber, _outputLineIndex) {\n        return model.getLineMaxColumn(modelLineNumber);\n    }\n    getViewLineData(model, modelLineNumber, _outputLineIndex) {\n        const lineTokens = model.tokenization.getLineTokens(modelLineNumber);\n        const lineContent = lineTokens.getLineContent();\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate(), null);\n    }\n    getViewLinesData(model, modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, globalStartIndex, needed, result) {\n        if (!needed[globalStartIndex]) {\n            result[globalStartIndex] = null;\n            return;\n        }\n        result[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\n    }\n    getModelColumnOfViewPosition(_outputLineIndex, outputColumn) {\n        return outputColumn;\n    }\n    getViewPositionOfModelPosition(deltaLineNumber, inputColumn) {\n        return new Position(deltaLineNumber, inputColumn);\n    }\n    getViewLineNumberOfModelPosition(deltaLineNumber, _inputColumn) {\n        return deltaLineNumber;\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        return outputPosition;\n    }\n    getInjectedTextAt(_outputLineIndex, _outputColumn) {\n        return null;\n    }\n}\nIdentityModelLineProjection.INSTANCE = new IdentityModelLineProjection();\n/**\n * This projection hides the model line.\n */\nclass HiddenModelLineProjection {\n    constructor() { }\n    isVisible() {\n        return false;\n    }\n    setVisible(isVisible) {\n        if (!isVisible) {\n            return this;\n        }\n        return IdentityModelLineProjection.INSTANCE;\n    }\n    getProjectionData() {\n        return null;\n    }\n    getViewLineCount() {\n        return 0;\n    }\n    getViewLineContent(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineLength(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineMinColumn(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineMaxColumn(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLineData(_model, _modelLineNumber, _outputLineIndex) {\n        throw new Error('Not supported');\n    }\n    getViewLinesData(_model, _modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, _globalStartIndex, _needed, _result) {\n        throw new Error('Not supported');\n    }\n    getModelColumnOfViewPosition(_outputLineIndex, _outputColumn) {\n        throw new Error('Not supported');\n    }\n    getViewPositionOfModelPosition(_deltaLineNumber, _inputColumn) {\n        throw new Error('Not supported');\n    }\n    getViewLineNumberOfModelPosition(_deltaLineNumber, _inputColumn) {\n        throw new Error('Not supported');\n    }\n    normalizePosition(outputLineIndex, outputPosition, affinity) {\n        throw new Error('Not supported');\n    }\n    getInjectedTextAt(_outputLineIndex, _outputColumn) {\n        throw new Error('Not supported');\n    }\n}\nHiddenModelLineProjection.INSTANCE = new HiddenModelLineProjection();\nconst _spaces = [''];\nfunction spaces(count) {\n    if (count >= _spaces.length) {\n        for (let i = 1; i <= count; i++) {\n            _spaces[i] = _makeSpaces(i);\n        }\n    }\n    return _spaces[count];\n}\nfunction _makeSpaces(count) {\n    return new Array(count + 1).join(' ');\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { IndentGuide, IndentGuideHorizontalLine } from '../textModelGuides.js';\nimport { ModelDecorationOptions } from '../model/textModel.js';\nimport { LineInjectedText } from '../textModelEvents.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { createModelLineProjection } from './modelLineProjection.js';\nimport { ConstantTimePrefixSumComputer } from '../model/prefixSumComputer.js';\nimport { ViewLineData } from '../viewModel.js';\nexport class ViewModelLinesFromProjectedModel {\n    constructor(editorId, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, tabSize, wrappingStrategy, wrappingColumn, wrappingIndent, wordBreak) {\n        this._editorId = editorId;\n        this.model = model;\n        this._validModelVersionId = -1;\n        this._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\n        this._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\n        this.fontInfo = fontInfo;\n        this.tabSize = tabSize;\n        this.wrappingStrategy = wrappingStrategy;\n        this.wrappingColumn = wrappingColumn;\n        this.wrappingIndent = wrappingIndent;\n        this.wordBreak = wordBreak;\n        this._constructLines(/*resetHiddenAreas*/ true, null);\n    }\n    dispose() {\n        this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n    }\n    createCoordinatesConverter() {\n        return new CoordinatesConverter(this);\n    }\n    _constructLines(resetHiddenAreas, previousLineBreaks) {\n        this.modelLineProjections = [];\n        if (resetHiddenAreas) {\n            this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n        }\n        const linesContent = this.model.getLinesContent();\n        const injectedTextDecorations = this.model.getInjectedTextDecorations(this._editorId);\n        const lineCount = linesContent.length;\n        const lineBreaksComputer = this.createLineBreaksComputer();\n        const injectedTextQueue = new arrays.ArrayQueue(LineInjectedText.fromDecorations(injectedTextDecorations));\n        for (let i = 0; i < lineCount; i++) {\n            const lineInjectedText = injectedTextQueue.takeWhile(t => t.lineNumber === i + 1);\n            lineBreaksComputer.addRequest(linesContent[i], lineInjectedText, previousLineBreaks ? previousLineBreaks[i] : null);\n        }\n        const linesBreaks = lineBreaksComputer.finalize();\n        const values = [];\n        const hiddenAreas = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)).sort(Range.compareRangesUsingStarts);\n        let hiddenAreaStart = 1, hiddenAreaEnd = 0;\n        let hiddenAreaIdx = -1;\n        let nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n        for (let i = 0; i < lineCount; i++) {\n            const lineNumber = i + 1;\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n                hiddenAreaIdx++;\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n            }\n            const isInHiddenArea = (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd);\n            const line = createModelLineProjection(linesBreaks[i], !isInHiddenArea);\n            values[i] = line.getViewLineCount();\n            this.modelLineProjections[i] = line;\n        }\n        this._validModelVersionId = this.model.getVersionId();\n        this.projectedModelLineLineCounts = new ConstantTimePrefixSumComputer(values);\n    }\n    getHiddenAreas() {\n        return this.hiddenAreasDecorationIds.map((decId) => this.model.getDecorationRange(decId));\n    }\n    setHiddenAreas(_ranges) {\n        const validatedRanges = _ranges.map(r => this.model.validateRange(r));\n        const newRanges = normalizeLineRanges(validatedRanges);\n        // TODO@Martin: Please stop calling this method on each model change!\n        // This checks if there really was a change\n        const oldRanges = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)).sort(Range.compareRangesUsingStarts);\n        if (newRanges.length === oldRanges.length) {\n            let hasDifference = false;\n            for (let i = 0; i < newRanges.length; i++) {\n                if (!newRanges[i].equalsRange(oldRanges[i])) {\n                    hasDifference = true;\n                    break;\n                }\n            }\n            if (!hasDifference) {\n                return false;\n            }\n        }\n        const newDecorations = newRanges.map((r) => ({\n            range: r,\n            options: ModelDecorationOptions.EMPTY,\n        }));\n        this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, newDecorations);\n        const hiddenAreas = newRanges;\n        let hiddenAreaStart = 1, hiddenAreaEnd = 0;\n        let hiddenAreaIdx = -1;\n        let nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n        let hasVisibleLine = false;\n        for (let i = 0; i < this.modelLineProjections.length; i++) {\n            const lineNumber = i + 1;\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\n                hiddenAreaIdx++;\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n            }\n            let lineChanged = false;\n            if (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\n                // Line should be hidden\n                if (this.modelLineProjections[i].isVisible()) {\n                    this.modelLineProjections[i] = this.modelLineProjections[i].setVisible(false);\n                    lineChanged = true;\n                }\n            }\n            else {\n                hasVisibleLine = true;\n                // Line should be visible\n                if (!this.modelLineProjections[i].isVisible()) {\n                    this.modelLineProjections[i] = this.modelLineProjections[i].setVisible(true);\n                    lineChanged = true;\n                }\n            }\n            if (lineChanged) {\n                const newOutputLineCount = this.modelLineProjections[i].getViewLineCount();\n                this.projectedModelLineLineCounts.setValue(i, newOutputLineCount);\n            }\n        }\n        if (!hasVisibleLine) {\n            // Cannot have everything be hidden => reveal everything!\n            this.setHiddenAreas([]);\n        }\n        return true;\n    }\n    modelPositionIsVisible(modelLineNumber, _modelColumn) {\n        if (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n            // invalid arguments\n            return false;\n        }\n        return this.modelLineProjections[modelLineNumber - 1].isVisible();\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        if (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n            // invalid arguments\n            return 1;\n        }\n        return this.modelLineProjections[modelLineNumber - 1].getViewLineCount();\n    }\n    setTabSize(newTabSize) {\n        if (this.tabSize === newTabSize) {\n            return false;\n        }\n        this.tabSize = newTabSize;\n        this._constructLines(/*resetHiddenAreas*/ false, null);\n        return true;\n    }\n    setWrappingSettings(fontInfo, wrappingStrategy, wrappingColumn, wrappingIndent, wordBreak) {\n        const equalFontInfo = this.fontInfo.equals(fontInfo);\n        const equalWrappingStrategy = (this.wrappingStrategy === wrappingStrategy);\n        const equalWrappingColumn = (this.wrappingColumn === wrappingColumn);\n        const equalWrappingIndent = (this.wrappingIndent === wrappingIndent);\n        const equalWordBreak = (this.wordBreak === wordBreak);\n        if (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent && equalWordBreak) {\n            return false;\n        }\n        const onlyWrappingColumnChanged = (equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent && equalWordBreak);\n        this.fontInfo = fontInfo;\n        this.wrappingStrategy = wrappingStrategy;\n        this.wrappingColumn = wrappingColumn;\n        this.wrappingIndent = wrappingIndent;\n        this.wordBreak = wordBreak;\n        let previousLineBreaks = null;\n        if (onlyWrappingColumnChanged) {\n            previousLineBreaks = [];\n            for (let i = 0, len = this.modelLineProjections.length; i < len; i++) {\n                previousLineBreaks[i] = this.modelLineProjections[i].getProjectionData();\n            }\n        }\n        this._constructLines(/*resetHiddenAreas*/ false, previousLineBreaks);\n        return true;\n    }\n    createLineBreaksComputer() {\n        const lineBreaksComputerFactory = (this.wrappingStrategy === 'advanced'\n            ? this._domLineBreaksComputerFactory\n            : this._monospaceLineBreaksComputerFactory);\n        return lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent, this.wordBreak);\n    }\n    onModelFlushed() {\n        this._constructLines(/*resetHiddenAreas*/ true, null);\n    }\n    onModelLinesDeleted(versionId, fromLineNumber, toLineNumber) {\n        if (!versionId || versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return null;\n        }\n        const outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n        const outputToLineNumber = this.projectedModelLineLineCounts.getPrefixSum(toLineNumber);\n        this.modelLineProjections.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n        this.projectedModelLineLineCounts.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n        return new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\n    }\n    onModelLinesInserted(versionId, fromLineNumber, _toLineNumber, lineBreaks) {\n        if (!versionId || versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return null;\n        }\n        // cannot use this.getHiddenAreas() because those decorations have already seen the effect of this model change\n        const isInHiddenArea = (fromLineNumber > 2 && !this.modelLineProjections[fromLineNumber - 2].isVisible());\n        const outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n        let totalOutputLineCount = 0;\n        const insertLines = [];\n        const insertPrefixSumValues = [];\n        for (let i = 0, len = lineBreaks.length; i < len; i++) {\n            const line = createModelLineProjection(lineBreaks[i], !isInHiddenArea);\n            insertLines.push(line);\n            const outputLineCount = line.getViewLineCount();\n            totalOutputLineCount += outputLineCount;\n            insertPrefixSumValues[i] = outputLineCount;\n        }\n        // TODO@Alex: use arrays.arrayInsert\n        this.modelLineProjections =\n            this.modelLineProjections.slice(0, fromLineNumber - 1)\n                .concat(insertLines)\n                .concat(this.modelLineProjections.slice(fromLineNumber - 1));\n        this.projectedModelLineLineCounts.insertValues(fromLineNumber - 1, insertPrefixSumValues);\n        return new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\n    }\n    onModelLineChanged(versionId, lineNumber, lineBreakData) {\n        if (versionId !== null && versionId <= this._validModelVersionId) {\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\n            // We don't want to apply stale change events on top of a newer read model state.\n            return [false, null, null, null];\n        }\n        const lineIndex = lineNumber - 1;\n        const oldOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n        const isVisible = this.modelLineProjections[lineIndex].isVisible();\n        const line = createModelLineProjection(lineBreakData, isVisible);\n        this.modelLineProjections[lineIndex] = line;\n        const newOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n        let lineMappingChanged = false;\n        let changeFrom = 0;\n        let changeTo = -1;\n        let insertFrom = 0;\n        let insertTo = -1;\n        let deleteFrom = 0;\n        let deleteTo = -1;\n        if (oldOutputLineCount > newOutputLineCount) {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + newOutputLineCount - 1;\n            deleteFrom = changeTo + 1;\n            deleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\n            lineMappingChanged = true;\n        }\n        else if (oldOutputLineCount < newOutputLineCount) {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + oldOutputLineCount - 1;\n            insertFrom = changeTo + 1;\n            insertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\n            lineMappingChanged = true;\n        }\n        else {\n            changeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n            changeTo = changeFrom + newOutputLineCount - 1;\n        }\n        this.projectedModelLineLineCounts.setValue(lineIndex, newOutputLineCount);\n        const viewLinesChangedEvent = (changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo - changeFrom + 1) : null);\n        const viewLinesInsertedEvent = (insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null);\n        const viewLinesDeletedEvent = (deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null);\n        return [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\n    }\n    acceptVersionId(versionId) {\n        this._validModelVersionId = versionId;\n        if (this.modelLineProjections.length === 1 && !this.modelLineProjections[0].isVisible()) {\n            // At least one line must be visible => reset hidden areas\n            this.setHiddenAreas([]);\n        }\n    }\n    getViewLineCount() {\n        return this.projectedModelLineLineCounts.getTotalSum();\n    }\n    _toValidViewLineNumber(viewLineNumber) {\n        if (viewLineNumber < 1) {\n            return 1;\n        }\n        const viewLineCount = this.getViewLineCount();\n        if (viewLineNumber > viewLineCount) {\n            return viewLineCount;\n        }\n        return viewLineNumber | 0;\n    }\n    getActiveIndentGuide(viewLineNumber, minLineNumber, maxLineNumber) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        minLineNumber = this._toValidViewLineNumber(minLineNumber);\n        maxLineNumber = this._toValidViewLineNumber(maxLineNumber);\n        const modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\n        const modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\n        const modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\n        const result = this.model.guides.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\n        const viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\n        const viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\n        return {\n            startLineNumber: viewStartPosition.lineNumber,\n            endLineNumber: viewEndPosition.lineNumber,\n            indent: result.indent\n        };\n    }\n    // #region ViewLineInfo\n    getViewLineInfo(viewLineNumber) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        const r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n        const lineIndex = r.index;\n        const remainder = r.remainder;\n        return new ViewLineInfo(lineIndex + 1, remainder);\n    }\n    getMinColumnOfViewLine(viewLineInfo) {\n        return this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMinColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n    }\n    getMaxColumnOfViewLine(viewLineInfo) {\n        return this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMaxColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n    }\n    getModelStartPositionOfViewLine(viewLineInfo) {\n        const line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n        const minViewColumn = line.getViewLineMinColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n        const column = line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx, minViewColumn);\n        return new Position(viewLineInfo.modelLineNumber, column);\n    }\n    getModelEndPositionOfViewLine(viewLineInfo) {\n        const line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n        const maxViewColumn = line.getViewLineMaxColumn(this.model, viewLineInfo.modelLineNumber, viewLineInfo.modelLineWrappedLineIdx);\n        const column = line.getModelColumnOfViewPosition(viewLineInfo.modelLineWrappedLineIdx, maxViewColumn);\n        return new Position(viewLineInfo.modelLineNumber, column);\n    }\n    getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber) {\n        const startViewLine = this.getViewLineInfo(viewStartLineNumber);\n        const endViewLine = this.getViewLineInfo(viewEndLineNumber);\n        const result = new Array();\n        let lastVisibleModelPos = this.getModelStartPositionOfViewLine(startViewLine);\n        let viewLines = new Array();\n        for (let curModelLine = startViewLine.modelLineNumber; curModelLine <= endViewLine.modelLineNumber; curModelLine++) {\n            const line = this.modelLineProjections[curModelLine - 1];\n            if (line.isVisible()) {\n                const startOffset = curModelLine === startViewLine.modelLineNumber\n                    ? startViewLine.modelLineWrappedLineIdx\n                    : 0;\n                const endOffset = curModelLine === endViewLine.modelLineNumber\n                    ? endViewLine.modelLineWrappedLineIdx + 1\n                    : line.getViewLineCount();\n                for (let i = startOffset; i < endOffset; i++) {\n                    viewLines.push(new ViewLineInfo(curModelLine, i));\n                }\n            }\n            if (!line.isVisible() && lastVisibleModelPos) {\n                const lastVisibleModelPos2 = new Position(curModelLine - 1, this.model.getLineMaxColumn(curModelLine - 1) + 1);\n                const modelRange = Range.fromPositions(lastVisibleModelPos, lastVisibleModelPos2);\n                result.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n                viewLines = [];\n                lastVisibleModelPos = null;\n            }\n            else if (line.isVisible() && !lastVisibleModelPos) {\n                lastVisibleModelPos = new Position(curModelLine, 1);\n            }\n        }\n        if (lastVisibleModelPos) {\n            const modelRange = Range.fromPositions(lastVisibleModelPos, this.getModelEndPositionOfViewLine(endViewLine));\n            result.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n        }\n        return result;\n    }\n    // #endregion\n    getViewLinesBracketGuides(viewStartLineNumber, viewEndLineNumber, activeViewPosition, options) {\n        const modelActivePosition = activeViewPosition ? this.convertViewPositionToModelPosition(activeViewPosition.lineNumber, activeViewPosition.column) : null;\n        const resultPerViewLine = [];\n        for (const group of this.getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber)) {\n            const modelRangeStartLineNumber = group.modelRange.startLineNumber;\n            const bracketGuidesPerModelLine = this.model.guides.getLinesBracketGuides(modelRangeStartLineNumber, group.modelRange.endLineNumber, modelActivePosition, options);\n            for (const viewLineInfo of group.viewLines) {\n                const bracketGuides = bracketGuidesPerModelLine[viewLineInfo.modelLineNumber - modelRangeStartLineNumber];\n                // visibleColumns stay as they are (this is a bug and needs to be fixed, but it is not a regression)\n                // model-columns must be converted to view-model columns.\n                const result = bracketGuides.map(g => {\n                    if (g.forWrappedLinesAfterColumn !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesAfterColumn);\n                        if (p.lineNumber >= viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    if (g.forWrappedLinesBeforeOrAtColumn !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesBeforeOrAtColumn);\n                        if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    if (!g.horizontalLine) {\n                        return g;\n                    }\n                    let column = -1;\n                    if (g.column !== -1) {\n                        const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.column);\n                        if (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n                            column = p.column;\n                        }\n                        else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                            column = this.getMinColumnOfViewLine(viewLineInfo);\n                        }\n                        else if (p.lineNumber > viewLineInfo.modelLineWrappedLineIdx) {\n                            return undefined;\n                        }\n                    }\n                    const viewPosition = this.convertModelPositionToViewPosition(viewLineInfo.modelLineNumber, g.horizontalLine.endColumn);\n                    const p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.horizontalLine.endColumn);\n                    if (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n                        return new IndentGuide(g.visibleColumn, column, g.className, new IndentGuideHorizontalLine(g.horizontalLine.top, viewPosition.column), -1, -1);\n                    }\n                    else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n                        return undefined;\n                    }\n                    else {\n                        if (g.visibleColumn !== -1) {\n                            // Don't repeat horizontal lines that use visibleColumn for unrelated lines.\n                            return undefined;\n                        }\n                        return new IndentGuide(g.visibleColumn, column, g.className, new IndentGuideHorizontalLine(g.horizontalLine.top, this.getMaxColumnOfViewLine(viewLineInfo)), -1, -1);\n                    }\n                });\n                resultPerViewLine.push(result.filter((r) => !!r));\n            }\n        }\n        return resultPerViewLine;\n    }\n    getViewLinesIndentGuides(viewStartLineNumber, viewEndLineNumber) {\n        // TODO: Use the same code as in `getViewLinesBracketGuides`.\n        // Future TODO: Merge with `getViewLinesBracketGuides`.\n        // However, this requires more refactoring of indent guides.\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n        const modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\n        const modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\n        let result = [];\n        const resultRepeatCount = [];\n        const resultRepeatOption = [];\n        const modelStartLineIndex = modelStart.lineNumber - 1;\n        const modelEndLineIndex = modelEnd.lineNumber - 1;\n        let reqStart = null;\n        for (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (line.isVisible()) {\n                const viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n                const viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\n                const count = viewLineEndIndex - viewLineStartIndex + 1;\n                let option = 0 /* IndentGuideRepeatOption.BlockNone */;\n                if (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\n                    // wrapped lines should block indent guides\n                    option = (viewLineStartIndex === 0 ? 1 /* IndentGuideRepeatOption.BlockSubsequent */ : 2 /* IndentGuideRepeatOption.BlockAll */);\n                }\n                resultRepeatCount.push(count);\n                resultRepeatOption.push(option);\n                // merge into previous request\n                if (reqStart === null) {\n                    reqStart = new Position(modelLineIndex + 1, 0);\n                }\n            }\n            else {\n                // hit invisible line => flush request\n                if (reqStart !== null) {\n                    result = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\n                    reqStart = null;\n                }\n            }\n        }\n        if (reqStart !== null) {\n            result = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\n            reqStart = null;\n        }\n        const viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n        const viewIndents = new Array(viewLineCount);\n        let currIndex = 0;\n        for (let i = 0, len = result.length; i < len; i++) {\n            let value = result[i];\n            const count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\n            const option = resultRepeatOption[i];\n            let blockAtIndex;\n            if (option === 2 /* IndentGuideRepeatOption.BlockAll */) {\n                blockAtIndex = 0;\n            }\n            else if (option === 1 /* IndentGuideRepeatOption.BlockSubsequent */) {\n                blockAtIndex = 1;\n            }\n            else {\n                blockAtIndex = count;\n            }\n            for (let j = 0; j < count; j++) {\n                if (j === blockAtIndex) {\n                    value = 0;\n                }\n                viewIndents[currIndex++] = value;\n            }\n        }\n        return viewIndents;\n    }\n    getViewLineContent(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineContent(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineLength(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineLength(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineMinColumn(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineMinColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineMaxColumn(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineMaxColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLineData(viewLineNumber) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getViewLineData(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n    }\n    getViewLinesData(viewStartLineNumber, viewEndLineNumber, needed) {\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n        const start = this.projectedModelLineLineCounts.getIndexOf(viewStartLineNumber - 1);\n        let viewLineNumber = viewStartLineNumber;\n        const startModelLineIndex = start.index;\n        const startRemainder = start.remainder;\n        const result = [];\n        for (let modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (!line.isVisible()) {\n                continue;\n            }\n            const fromViewLineIndex = (modelLineIndex === startModelLineIndex ? startRemainder : 0);\n            let remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\n            let lastLine = false;\n            if (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\n                lastLine = true;\n                remainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\n            }\n            line.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, remainingViewLineCount, viewLineNumber - viewStartLineNumber, needed, result);\n            viewLineNumber += remainingViewLineCount;\n            if (lastLine) {\n                break;\n            }\n        }\n        return result;\n    }\n    validateViewPosition(viewLineNumber, viewColumn, expectedModelPosition) {\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n        const r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n        const lineIndex = r.index;\n        const remainder = r.remainder;\n        const line = this.modelLineProjections[lineIndex];\n        const minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n        const maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n        if (viewColumn < minColumn) {\n            viewColumn = minColumn;\n        }\n        if (viewColumn > maxColumn) {\n            viewColumn = maxColumn;\n        }\n        const computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\n        const computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\n        if (computedModelPosition.equals(expectedModelPosition)) {\n            return new Position(viewLineNumber, viewColumn);\n        }\n        return this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\n    }\n    validateViewRange(viewRange, expectedModelRange) {\n        const validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\n        const validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\n        return new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\n    }\n    convertViewPositionToModelPosition(viewLineNumber, viewColumn) {\n        const info = this.getViewLineInfo(viewLineNumber);\n        const inputColumn = this.modelLineProjections[info.modelLineNumber - 1].getModelColumnOfViewPosition(info.modelLineWrappedLineIdx, viewColumn);\n        // console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\n        return this.model.validatePosition(new Position(info.modelLineNumber, inputColumn));\n    }\n    convertViewRangeToModelRange(viewRange) {\n        const start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\n        const end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    convertModelPositionToViewPosition(_modelLineNumber, _modelColumn, affinity = 2 /* PositionAffinity.None */, allowZeroLineNumber = false, belowHiddenRanges = false) {\n        const validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\n        const inputLineNumber = validPosition.lineNumber;\n        const inputColumn = validPosition.column;\n        let lineIndex = inputLineNumber - 1, lineIndexChanged = false;\n        if (belowHiddenRanges) {\n            while (lineIndex < this.modelLineProjections.length && !this.modelLineProjections[lineIndex].isVisible()) {\n                lineIndex++;\n                lineIndexChanged = true;\n            }\n        }\n        else {\n            while (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n                lineIndex--;\n                lineIndexChanged = true;\n            }\n        }\n        if (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            // Could not reach a real line\n            // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\n            // TODO@alexdima@hediet this isn't soo pretty\n            return new Position(allowZeroLineNumber ? 0 : 1, 1);\n        }\n        const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n        let r;\n        if (lineIndexChanged) {\n            if (belowHiddenRanges) {\n                r = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, 1, affinity);\n            }\n            else {\n                r = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1), affinity);\n            }\n        }\n        else {\n            r = this.modelLineProjections[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity);\n        }\n        // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\n        return r;\n    }\n    /**\n     * @param affinity The affinity in case of an empty range. Has no effect for non-empty ranges.\n    */\n    convertModelRangeToViewRange(modelRange, affinity = 0 /* PositionAffinity.Left */) {\n        if (modelRange.isEmpty()) {\n            const start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, affinity);\n            return Range.fromPositions(start);\n        }\n        else {\n            const start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, 1 /* PositionAffinity.Right */);\n            const end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn, 0 /* PositionAffinity.Left */);\n            return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n        }\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        let lineIndex = modelLineNumber - 1;\n        if (this.modelLineProjections[lineIndex].isVisible()) {\n            // this model line is visible\n            const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n            return this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, modelColumn);\n        }\n        // this model line is not visible\n        while (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            lineIndex--;\n        }\n        if (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n            // Could not reach a real line\n            return 1;\n        }\n        const deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n        return this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n    }\n    getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations) {\n        const modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\n        const modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\n        if (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\n            // most likely there are no hidden lines => fast path\n            // fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\n            return this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations);\n        }\n        let result = [];\n        const modelStartLineIndex = modelStart.lineNumber - 1;\n        const modelEndLineIndex = modelEnd.lineNumber - 1;\n        let reqStart = null;\n        for (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n            const line = this.modelLineProjections[modelLineIndex];\n            if (line.isVisible()) {\n                // merge into previous request\n                if (reqStart === null) {\n                    reqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n                }\n            }\n            else {\n                // hit invisible line => flush request\n                if (reqStart !== null) {\n                    const maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\n                    result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation, onlyMinimapDecorations));\n                    reqStart = null;\n                }\n            }\n        }\n        if (reqStart !== null) {\n            result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, onlyMinimapDecorations));\n            reqStart = null;\n        }\n        result.sort((a, b) => {\n            const res = Range.compareRangesUsingStarts(a.range, b.range);\n            if (res === 0) {\n                if (a.id < b.id) {\n                    return -1;\n                }\n                if (a.id > b.id) {\n                    return 1;\n                }\n                return 0;\n            }\n            return res;\n        });\n        // Eliminate duplicate decorations that might have intersected our visible ranges multiple times\n        const finalResult = [];\n        let finalResultLen = 0;\n        let prevDecId = null;\n        for (const dec of result) {\n            const decId = dec.id;\n            if (prevDecId === decId) {\n                // skip\n                continue;\n            }\n            prevDecId = decId;\n            finalResult[finalResultLen++] = dec;\n        }\n        return finalResult;\n    }\n    getInjectedTextAt(position) {\n        const info = this.getViewLineInfo(position.lineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].getInjectedTextAt(info.modelLineWrappedLineIdx, position.column);\n    }\n    normalizePosition(position, affinity) {\n        const info = this.getViewLineInfo(position.lineNumber);\n        return this.modelLineProjections[info.modelLineNumber - 1].normalizePosition(info.modelLineWrappedLineIdx, position, affinity);\n    }\n    getLineIndentColumn(lineNumber) {\n        const info = this.getViewLineInfo(lineNumber);\n        if (info.modelLineWrappedLineIdx === 0) {\n            return this.model.getLineIndentColumn(info.modelLineNumber);\n        }\n        // wrapped lines have no indentation.\n        // We deliberately don't handle the case that indentation is wrapped\n        // to avoid two view lines reporting indentation for the very same model line.\n        return 0;\n    }\n}\n/**\n * Overlapping unsorted ranges:\n * [   )      [ )       [  )\n *    [    )      [       )\n * ->\n * Non overlapping sorted ranges:\n * [       )  [ ) [        )\n *\n * Note: This function only considers line information! Columns are ignored.\n*/\nfunction normalizeLineRanges(ranges) {\n    if (ranges.length === 0) {\n        return [];\n    }\n    const sortedRanges = ranges.slice();\n    sortedRanges.sort(Range.compareRangesUsingStarts);\n    const result = [];\n    let currentRangeStart = sortedRanges[0].startLineNumber;\n    let currentRangeEnd = sortedRanges[0].endLineNumber;\n    for (let i = 1, len = sortedRanges.length; i < len; i++) {\n        const range = sortedRanges[i];\n        if (range.startLineNumber > currentRangeEnd + 1) {\n            result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n            currentRangeStart = range.startLineNumber;\n            currentRangeEnd = range.endLineNumber;\n        }\n        else if (range.endLineNumber > currentRangeEnd) {\n            currentRangeEnd = range.endLineNumber;\n        }\n    }\n    result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n    return result;\n}\n/**\n * Represents a view line. Can be used to efficiently query more information about it.\n */\nclass ViewLineInfo {\n    constructor(modelLineNumber, modelLineWrappedLineIdx) {\n        this.modelLineNumber = modelLineNumber;\n        this.modelLineWrappedLineIdx = modelLineWrappedLineIdx;\n    }\n}\n/**\n * A list of view lines that have a contiguous span in the model.\n*/\nclass ViewLineInfoGroupedByModelRange {\n    constructor(modelRange, viewLines) {\n        this.modelRange = modelRange;\n        this.viewLines = viewLines;\n    }\n}\nclass CoordinatesConverter {\n    constructor(lines) {\n        this._lines = lines;\n    }\n    // View -> Model conversion and related methods\n    convertViewPositionToModelPosition(viewPosition) {\n        return this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\n    }\n    convertViewRangeToModelRange(viewRange) {\n        return this._lines.convertViewRangeToModelRange(viewRange);\n    }\n    validateViewPosition(viewPosition, expectedModelPosition) {\n        return this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\n    }\n    validateViewRange(viewRange, expectedModelRange) {\n        return this._lines.validateViewRange(viewRange, expectedModelRange);\n    }\n    // Model -> View conversion and related methods\n    convertModelPositionToViewPosition(modelPosition, affinity, allowZero, belowHiddenRanges) {\n        return this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column, affinity, allowZero, belowHiddenRanges);\n    }\n    convertModelRangeToViewRange(modelRange, affinity) {\n        return this._lines.convertModelRangeToViewRange(modelRange, affinity);\n    }\n    modelPositionIsVisible(modelPosition) {\n        return this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        return this._lines.getModelLineViewLineCount(modelLineNumber);\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        return this._lines.getViewLineNumberOfModelPosition(modelLineNumber, modelColumn);\n    }\n}\nexport class ViewModelLinesFromModelAsIs {\n    constructor(model) {\n        this.model = model;\n    }\n    dispose() {\n    }\n    createCoordinatesConverter() {\n        return new IdentityCoordinatesConverter(this);\n    }\n    getHiddenAreas() {\n        return [];\n    }\n    setHiddenAreas(_ranges) {\n        return false;\n    }\n    setTabSize(_newTabSize) {\n        return false;\n    }\n    setWrappingSettings(_fontInfo, _wrappingStrategy, _wrappingColumn, _wrappingIndent) {\n        return false;\n    }\n    createLineBreaksComputer() {\n        const result = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                result.push(null);\n            },\n            finalize: () => {\n                return result;\n            }\n        };\n    }\n    onModelFlushed() {\n    }\n    onModelLinesDeleted(_versionId, fromLineNumber, toLineNumber) {\n        return new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\n    }\n    onModelLinesInserted(_versionId, fromLineNumber, toLineNumber, lineBreaks) {\n        return new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\n    }\n    onModelLineChanged(_versionId, lineNumber, lineBreakData) {\n        return [false, new viewEvents.ViewLinesChangedEvent(lineNumber, 1), null, null];\n    }\n    acceptVersionId(_versionId) {\n    }\n    getViewLineCount() {\n        return this.model.getLineCount();\n    }\n    getActiveIndentGuide(viewLineNumber, _minLineNumber, _maxLineNumber) {\n        return {\n            startLineNumber: viewLineNumber,\n            endLineNumber: viewLineNumber,\n            indent: 0\n        };\n    }\n    getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition) {\n        return new Array(endLineNumber - startLineNumber + 1).fill([]);\n    }\n    getViewLinesIndentGuides(viewStartLineNumber, viewEndLineNumber) {\n        const viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n        const result = new Array(viewLineCount);\n        for (let i = 0; i < viewLineCount; i++) {\n            result[i] = 0;\n        }\n        return result;\n    }\n    getViewLineContent(viewLineNumber) {\n        return this.model.getLineContent(viewLineNumber);\n    }\n    getViewLineLength(viewLineNumber) {\n        return this.model.getLineLength(viewLineNumber);\n    }\n    getViewLineMinColumn(viewLineNumber) {\n        return this.model.getLineMinColumn(viewLineNumber);\n    }\n    getViewLineMaxColumn(viewLineNumber) {\n        return this.model.getLineMaxColumn(viewLineNumber);\n    }\n    getViewLineData(viewLineNumber) {\n        const lineTokens = this.model.tokenization.getLineTokens(viewLineNumber);\n        const lineContent = lineTokens.getLineContent();\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate(), null);\n    }\n    getViewLinesData(viewStartLineNumber, viewEndLineNumber, needed) {\n        const lineCount = this.model.getLineCount();\n        viewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\n        viewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\n        const result = [];\n        for (let lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\n            const idx = lineNumber - viewStartLineNumber;\n            result[idx] = needed[idx] ? this.getViewLineData(lineNumber) : null;\n        }\n        return result;\n    }\n    getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations) {\n        return this.model.getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations);\n    }\n    normalizePosition(position, affinity) {\n        return this.model.normalizePosition(position, affinity);\n    }\n    getLineIndentColumn(lineNumber) {\n        return this.model.getLineIndentColumn(lineNumber);\n    }\n    getInjectedTextAt(position) {\n        // Identity lines collection does not support injected text.\n        return null;\n    }\n}\nclass IdentityCoordinatesConverter {\n    constructor(lines) {\n        this._lines = lines;\n    }\n    _validPosition(pos) {\n        return this._lines.model.validatePosition(pos);\n    }\n    _validRange(range) {\n        return this._lines.model.validateRange(range);\n    }\n    // View -> Model conversion and related methods\n    convertViewPositionToModelPosition(viewPosition) {\n        return this._validPosition(viewPosition);\n    }\n    convertViewRangeToModelRange(viewRange) {\n        return this._validRange(viewRange);\n    }\n    validateViewPosition(_viewPosition, expectedModelPosition) {\n        return this._validPosition(expectedModelPosition);\n    }\n    validateViewRange(_viewRange, expectedModelRange) {\n        return this._validRange(expectedModelRange);\n    }\n    // Model -> View conversion and related methods\n    convertModelPositionToViewPosition(modelPosition) {\n        return this._validPosition(modelPosition);\n    }\n    convertModelRangeToViewRange(modelRange) {\n        return this._validRange(modelRange);\n    }\n    modelPositionIsVisible(modelPosition) {\n        const lineCount = this._lines.model.getLineCount();\n        if (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\n            // invalid arguments\n            return false;\n        }\n        return true;\n    }\n    getModelLineViewLineCount(modelLineNumber) {\n        return 1;\n    }\n    getViewLineNumberOfModelPosition(modelLineNumber, modelColumn) {\n        return modelLineNumber;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayQueue } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { CursorsController } from '../cursor/cursor.js';\nimport { CursorConfiguration } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport * as textModelEvents from '../textModelEvents.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { tokenizeLineToHTML } from '../languages/textToHtmlTokenizer.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport { MinimapLinesRenderingData, OverviewRulerDecorationsGroup, ViewLineRenderingData } from '../viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { FocusChangedEvent, HiddenAreasChangedEvent, ModelContentChangedEvent, ModelDecorationsChangedEvent, ModelLanguageChangedEvent, ModelLanguageConfigurationChangedEvent, ModelOptionsChangedEvent, ModelTokensChangedEvent, ReadOnlyEditAttemptEvent, ScrollChangedEvent, ViewModelEventDispatcher, ViewZonesChangedEvent } from '../viewModelEventDispatcher.js';\nimport { ViewModelLinesFromModelAsIs, ViewModelLinesFromProjectedModel } from './viewModelLines.js';\nconst USE_IDENTITY_LINES_COLLECTION = true;\nexport class ViewModel extends Disposable {\n    constructor(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame, languageConfigurationService, _themeService, _attachedView) {\n        super();\n        this.languageConfigurationService = languageConfigurationService;\n        this._themeService = _themeService;\n        this._attachedView = _attachedView;\n        this.hiddenAreasModel = new HiddenAreasModel();\n        this.previousHiddenAreas = [];\n        this._editorId = editorId;\n        this._configuration = configuration;\n        this.model = model;\n        this._eventDispatcher = new ViewModelEventDispatcher();\n        this.onEvent = this._eventDispatcher.onEvent;\n        this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n        this._updateConfigurationViewLineCount = this._register(new RunOnceScheduler(() => this._updateConfigurationViewLineCountNow(), 0));\n        this._hasFocus = false;\n        this._viewportStart = ViewportStart.create(this.model);\n        if (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\n            this._lines = new ViewModelLinesFromModelAsIs(this.model);\n        }\n        else {\n            const options = this._configuration.options;\n            const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n            const wrappingStrategy = options.get(137 /* EditorOption.wrappingStrategy */);\n            const wrappingInfo = options.get(144 /* EditorOption.wrappingInfo */);\n            const wrappingIndent = options.get(136 /* EditorOption.wrappingIndent */);\n            const wordBreak = options.get(128 /* EditorOption.wordBreak */);\n            this._lines = new ViewModelLinesFromProjectedModel(this._editorId, this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak);\n        }\n        this.coordinatesConverter = this._lines.createCoordinatesConverter();\n        this._cursor = this._register(new CursorsController(model, this, this.coordinatesConverter, this.cursorConfig));\n        this.viewLayout = this._register(new ViewLayout(this._configuration, this.getLineCount(), scheduleAtNextAnimationFrame));\n        this._register(this.viewLayout.onDidScroll((e) => {\n            if (e.scrollTopChanged) {\n                this._handleVisibleLinesChanged();\n            }\n            if (e.scrollTopChanged) {\n                this._viewportStart.invalidate();\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(e.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop, e.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop));\n        }));\n        this._register(this.viewLayout.onDidContentSizeChange((e) => {\n            this._eventDispatcher.emitOutgoingEvent(e);\n        }));\n        this._decorations = new ViewModelDecorations(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter);\n        this._registerModelEvents();\n        this._register(this._configuration.onDidChangeFast((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                this._onConfigurationChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n        }));\n        this._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n        }));\n        this._register(this._themeService.onDidColorThemeChange((theme) => {\n            this._invalidateDecorationsColorCache();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme));\n        }));\n        this._updateConfigurationViewLineCountNow();\n    }\n    dispose() {\n        // First remove listeners, as disposing the lines might end up sending\n        // model decoration changed events ... and we no longer care about them ...\n        super.dispose();\n        this._decorations.dispose();\n        this._lines.dispose();\n        this._viewportStart.dispose();\n        this._eventDispatcher.dispose();\n    }\n    createLineBreaksComputer() {\n        return this._lines.createLineBreaksComputer();\n    }\n    addViewEventHandler(eventHandler) {\n        this._eventDispatcher.addViewEventHandler(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        this._eventDispatcher.removeViewEventHandler(eventHandler);\n    }\n    _updateConfigurationViewLineCountNow() {\n        this._configuration.setViewLineCount(this._lines.getViewLineCount());\n    }\n    getModelVisibleRanges() {\n        const linesViewportData = this.viewLayout.getLinesViewportData();\n        const viewVisibleRange = new Range(linesViewportData.startLineNumber, this.getLineMinColumn(linesViewportData.startLineNumber), linesViewportData.endLineNumber, this.getLineMaxColumn(linesViewportData.endLineNumber));\n        const modelVisibleRanges = this._toModelVisibleRanges(viewVisibleRange);\n        return modelVisibleRanges;\n    }\n    visibleLinesStabilized() {\n        const modelVisibleRanges = this.getModelVisibleRanges();\n        this._attachedView.setVisibleLines(modelVisibleRanges, true);\n    }\n    _handleVisibleLinesChanged() {\n        const modelVisibleRanges = this.getModelVisibleRanges();\n        this._attachedView.setVisibleLines(modelVisibleRanges, false);\n    }\n    setHasFocus(hasFocus) {\n        this._hasFocus = hasFocus;\n        this._cursor.setHasFocus(hasFocus);\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n        this._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n    }\n    onCompositionStart() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n    }\n    onCompositionEnd() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n    }\n    _captureStableViewport() {\n        // We might need to restore the current start view range, so save it (if available)\n        // But only if the scroll position is not at the top of the file\n        if (this._viewportStart.isValid && this.viewLayout.getCurrentScrollTop() > 0) {\n            const previousViewportStartViewPosition = new Position(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber));\n            const previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n            return new StableViewport(previousViewportStartModelPosition, this._viewportStart.startLineDelta);\n        }\n        return new StableViewport(null, 0);\n    }\n    _onConfigurationChanged(eventsCollector, e) {\n        const stableViewport = this._captureStableViewport();\n        const options = this._configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingStrategy = options.get(137 /* EditorOption.wrappingStrategy */);\n        const wrappingInfo = options.get(144 /* EditorOption.wrappingInfo */);\n        const wrappingIndent = options.get(136 /* EditorOption.wrappingIndent */);\n        const wordBreak = options.get(128 /* EditorOption.wordBreak */);\n        if (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak)) {\n            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n            this._cursor.onLineMappingChanged(eventsCollector);\n            this._decorations.onLineMappingChanged();\n            this.viewLayout.onFlushed(this.getLineCount());\n            this._updateConfigurationViewLineCount.schedule();\n        }\n        if (e.hasChanged(90 /* EditorOption.readOnly */)) {\n            // Must read again all decorations due to readOnly filtering\n            this._decorations.reset();\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        }\n        eventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n        this.viewLayout.onConfigurationChanged(e);\n        stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n        if (CursorConfiguration.shouldRecreate(e)) {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n        }\n    }\n    _registerModelEvents() {\n        this._register(this.model.onDidChangeContentOrInjectedText((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                let hadOtherModelChange = false;\n                let hadModelLineChangeThatChangedLineMapping = false;\n                const changes = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes);\n                const versionId = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.versionId : null);\n                // Do a first pass to compute line mappings, and a second pass to actually interpret them\n                const lineBreaksComputer = this._lines.createLineBreaksComputer();\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            for (let lineIdx = 0; lineIdx < change.detail.length; lineIdx++) {\n                                const line = change.detail[lineIdx];\n                                let injectedText = change.injectedTexts[lineIdx];\n                                if (injectedText) {\n                                    injectedText = injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                                }\n                                lineBreaksComputer.addRequest(line, injectedText, null);\n                            }\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            let injectedText = null;\n                            if (change.injectedText) {\n                                injectedText = change.injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                            }\n                            lineBreaksComputer.addRequest(change.detail, injectedText, null);\n                            break;\n                        }\n                    }\n                }\n                const lineBreaks = lineBreaksComputer.finalize();\n                const lineBreakQueue = new ArrayQueue(lineBreaks);\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 1 /* textModelEvents.RawContentChangedType.Flush */: {\n                            this._lines.onModelFlushed();\n                            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                            this._decorations.reset();\n                            this.viewLayout.onFlushed(this.getLineCount());\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 3 /* textModelEvents.RawContentChangedType.LinesDeleted */: {\n                            const linesDeletedEvent = this._lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n                            if (linesDeletedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            const insertedLineBreaks = lineBreakQueue.takeCount(change.detail.length);\n                            const linesInsertedEvent = this._lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n                            if (linesInsertedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            const changedLineBreakData = lineBreakQueue.dequeue();\n                            const [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] = this._lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData);\n                            hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n                            if (linesChangedEvent) {\n                                eventsCollector.emitViewEvent(linesChangedEvent);\n                            }\n                            if (linesInsertedEvent) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            if (linesDeletedEvent) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            break;\n                        }\n                        case 5 /* textModelEvents.RawContentChangedType.EOLChanged */: {\n                            // Nothing to do. The new version will be accepted below\n                            break;\n                        }\n                    }\n                }\n                if (versionId !== null) {\n                    this._lines.acceptVersionId(versionId);\n                }\n                this.viewLayout.onHeightMaybeChanged();\n                if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                }\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            // Update the configuration and reset the centered view line\n            const viewportStartWasValid = this._viewportStart.isValid;\n            this._viewportStart.invalidate();\n            this._configuration.setModelLineCount(this.model.getLineCount());\n            this._updateConfigurationViewLineCountNow();\n            // Recover viewport\n            if (!this._hasFocus && this.model.getAttachedEditorCount() >= 2 && viewportStartWasValid) {\n                const modelRange = this.model._getTrackedRange(this._viewportStart.modelTrackedRange);\n                if (modelRange) {\n                    const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n                    const viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n                    this.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStart.startLineDelta }, 1 /* ScrollType.Immediate */);\n                }\n            }\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                if (e instanceof textModelEvents.InternalModelContentChangeEvent) {\n                    eventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent));\n                }\n                this._cursor.onModelContentChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            this._handleVisibleLinesChanged();\n        }));\n        this._register(this.model.onDidChangeTokens((e) => {\n            const viewRanges = [];\n            for (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n                const modelRange = e.ranges[j];\n                const viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n                const viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n                viewRanges[j] = {\n                    fromLineNumber: viewStartLineNumber,\n                    toLineNumber: viewEndLineNumber\n                };\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n            this._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguageConfiguration((e) => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguage((e) => {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeOptions((e) => {\n            // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n            if (this._lines.setTabSize(this.model.getOptions().tabSize)) {\n                try {\n                    const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                    eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                    this.viewLayout.onFlushed(this.getLineCount());\n                }\n                finally {\n                    this._eventDispatcher.endEmitViewEvents();\n                }\n                this._updateConfigurationViewLineCount.schedule();\n            }\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeDecorations((e) => {\n            this._decorations.onModelDecorationsChanged();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e));\n        }));\n    }\n    setHiddenAreas(ranges, source) {\n        this.hiddenAreasModel.setHiddenAreas(source, ranges);\n        const mergedRanges = this.hiddenAreasModel.getMergedRanges();\n        if (mergedRanges === this.previousHiddenAreas) {\n            return;\n        }\n        this.previousHiddenAreas = mergedRanges;\n        const stableViewport = this._captureStableViewport();\n        let lineMappingChanged = false;\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            lineMappingChanged = this._lines.setHiddenAreas(mergedRanges);\n            if (lineMappingChanged) {\n                eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                this._cursor.onLineMappingChanged(eventsCollector);\n                this._decorations.onLineMappingChanged();\n                this.viewLayout.onFlushed(this.getLineCount());\n                this.viewLayout.onHeightMaybeChanged();\n            }\n            stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n        this._updateConfigurationViewLineCount.schedule();\n        if (lineMappingChanged) {\n            this._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent());\n        }\n    }\n    getVisibleRangesPlusViewportAboveBelow() {\n        const layoutInfo = this._configuration.options.get(143 /* EditorOption.layoutInfo */);\n        const lineHeight = this._configuration.options.get(66 /* EditorOption.lineHeight */);\n        const linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n        const endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n        return this._toModelVisibleRanges(new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber)));\n    }\n    getVisibleRanges() {\n        const visibleViewRange = this.getCompletelyVisibleViewRange();\n        return this._toModelVisibleRanges(visibleViewRange);\n    }\n    getHiddenAreas() {\n        return this._lines.getHiddenAreas();\n    }\n    _toModelVisibleRanges(visibleViewRange) {\n        const visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        const hiddenAreas = this._lines.getHiddenAreas();\n        if (hiddenAreas.length === 0) {\n            return [visibleRange];\n        }\n        const result = [];\n        let resultLen = 0;\n        let startLineNumber = visibleRange.startLineNumber;\n        let startColumn = visibleRange.startColumn;\n        const endLineNumber = visibleRange.endLineNumber;\n        const endColumn = visibleRange.endColumn;\n        for (let i = 0, len = hiddenAreas.length; i < len; i++) {\n            const hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n            const hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n            if (hiddenEndLineNumber < startLineNumber) {\n                continue;\n            }\n            if (hiddenStartLineNumber > endLineNumber) {\n                continue;\n            }\n            if (startLineNumber < hiddenStartLineNumber) {\n                result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n            }\n            startLineNumber = hiddenEndLineNumber + 1;\n            startColumn = 1;\n        }\n        if (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\n            result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return result;\n    }\n    getCompletelyVisibleViewRange() {\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    getCompletelyVisibleViewRangeAtScrollTop(scrollTop) {\n        const partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    saveState() {\n        const compatViewState = this.viewLayout.saveState();\n        const scrollTop = compatViewState.scrollTop;\n        const firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n        const firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n        const firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n        return {\n            scrollLeft: compatViewState.scrollLeft,\n            firstPosition: firstPosition,\n            firstPositionDeltaTop: firstPositionDeltaTop\n        };\n    }\n    reduceRestoreState(state) {\n        if (typeof state.firstPosition === 'undefined') {\n            // This is a view state serialized by an older version\n            return this._reduceRestoreStateCompatibility(state);\n        }\n        const modelPosition = this.model.validatePosition(state.firstPosition);\n        const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        const scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: scrollTop\n        };\n    }\n    _reduceRestoreStateCompatibility(state) {\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: state.scrollTopWithoutViewZones\n        };\n    }\n    getTabSize() {\n        return this.model.getOptions().tabSize;\n    }\n    getLineCount() {\n        return this._lines.getViewLineCount();\n    }\n    /**\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\n     */\n    setViewport(startLineNumber, endLineNumber, centeredLineNumber) {\n        this._viewportStart.update(this, startLineNumber);\n    }\n    getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n        return this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n    }\n    getLinesIndentGuides(startLineNumber, endLineNumber) {\n        return this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n    }\n    getBracketGuidesInRangeByLine(startLineNumber, endLineNumber, activePosition, options) {\n        return this._lines.getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options);\n    }\n    getLineContent(lineNumber) {\n        return this._lines.getViewLineContent(lineNumber);\n    }\n    getLineLength(lineNumber) {\n        return this._lines.getViewLineLength(lineNumber);\n    }\n    getLineMinColumn(lineNumber) {\n        return this._lines.getViewLineMinColumn(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        return this._lines.getViewLineMaxColumn(lineNumber);\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 1;\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 2;\n    }\n    getMinimapDecorationsInRange(range) {\n        return this._decorations.getMinimapDecorationsInRange(range);\n    }\n    getDecorationsInViewport(visibleRange) {\n        return this._decorations.getDecorationsViewportData(visibleRange).decorations;\n    }\n    getInjectedTextAt(viewPosition) {\n        return this._lines.getInjectedTextAt(viewPosition);\n    }\n    getViewportViewLineRenderingData(visibleRange, lineNumber) {\n        const allInlineDecorations = this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n        const inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    getViewLineRenderingData(lineNumber) {\n        const inlineDecorations = this._decorations.getInlineDecorationsOnLine(lineNumber);\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    _getViewLineRenderingData(lineNumber, inlineDecorations) {\n        const mightContainRTL = this.model.mightContainRTL();\n        const mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n        const tabSize = this.getTabSize();\n        const lineData = this._lines.getViewLineData(lineNumber);\n        if (lineData.inlineDecorations) {\n            inlineDecorations = [\n                ...inlineDecorations,\n                ...lineData.inlineDecorations.map(d => d.toInlineDecoration(lineNumber))\n            ];\n        }\n        return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\n    }\n    getViewLineData(lineNumber) {\n        return this._lines.getViewLineData(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        const result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n        return new MinimapLinesRenderingData(this.getTabSize(), result);\n    }\n    getAllOverviewRulerDecorations(theme) {\n        const decorations = this.model.getOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options));\n        const result = new OverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const decorationOptions = decoration.options;\n            const opts = decorationOptions.overviewRuler;\n            if (!opts) {\n                continue;\n            }\n            const lane = opts.position;\n            if (lane === 0) {\n                continue;\n            }\n            const color = opts.getColor(theme.value);\n            const viewStartLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n            const viewEndLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n            result.accept(color, decorationOptions.zIndex, viewStartLineNumber, viewEndLineNumber, lane);\n        }\n        return result.asArray;\n    }\n    _invalidateDecorationsColorCache() {\n        const decorations = this.model.getOverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const opts1 = decoration.options.overviewRuler;\n            opts1 === null || opts1 === void 0 ? void 0 : opts1.invalidateCachedColor();\n            const opts2 = decoration.options.minimap;\n            opts2 === null || opts2 === void 0 ? void 0 : opts2.invalidateCachedColor();\n        }\n    }\n    getValueInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueInRange(modelRange, eol);\n    }\n    getValueLengthInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueLengthInRange(modelRange, eol);\n    }\n    modifyPosition(position, offset) {\n        const modelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(position);\n        return this.model.modifyPosition(modelPosition, offset);\n    }\n    deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\n        const modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n        if (this.model.getEOL().length === 2) {\n            // This model uses CRLF, so the delta must take that into account\n            if (deltaOffset < 0) {\n                deltaOffset -= lineFeedCnt;\n            }\n            else {\n                deltaOffset += lineFeedCnt;\n            }\n        }\n        const modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n        const resultOffset = modelAnchorOffset + deltaOffset;\n        return this.model.getPositionAt(resultOffset);\n    }\n    getPlainTextToCopy(modelRanges, emptySelectionClipboard, forceCRLF) {\n        const newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n        modelRanges = modelRanges.slice(0);\n        modelRanges.sort(Range.compareRangesUsingStarts);\n        let hasEmptyRange = false;\n        let hasNonEmptyRange = false;\n        for (const range of modelRanges) {\n            if (range.isEmpty()) {\n                hasEmptyRange = true;\n            }\n            else {\n                hasNonEmptyRange = true;\n            }\n        }\n        if (!hasNonEmptyRange) {\n            // all ranges are empty\n            if (!emptySelectionClipboard) {\n                return '';\n            }\n            const modelLineNumbers = modelRanges.map((r) => r.startLineNumber);\n            let result = '';\n            for (let i = 0; i < modelLineNumbers.length; i++) {\n                if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n                    continue;\n                }\n                result += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n            }\n            return result;\n        }\n        if (hasEmptyRange && emptySelectionClipboard) {\n            // mixed empty selections and non-empty selections\n            const result = [];\n            let prevModelLineNumber = 0;\n            for (const modelRange of modelRanges) {\n                const modelLineNumber = modelRange.startLineNumber;\n                if (modelRange.isEmpty()) {\n                    if (modelLineNumber !== prevModelLineNumber) {\n                        result.push(this.model.getLineContent(modelLineNumber));\n                    }\n                }\n                else {\n                    result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n                }\n                prevModelLineNumber = modelLineNumber;\n            }\n            return result.length === 1 ? result[0] : result;\n        }\n        const result = [];\n        for (const modelRange of modelRanges) {\n            if (!modelRange.isEmpty()) {\n                result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n            }\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n    getRichTextToCopy(modelRanges, emptySelectionClipboard) {\n        const languageId = this.model.getLanguageId();\n        if (languageId === PLAINTEXT_LANGUAGE_ID) {\n            return null;\n        }\n        if (modelRanges.length !== 1) {\n            // no multiple selection support at this time\n            return null;\n        }\n        let range = modelRanges[0];\n        if (range.isEmpty()) {\n            if (!emptySelectionClipboard) {\n                // nothing to copy\n                return null;\n            }\n            const lineNumber = range.startLineNumber;\n            range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n        }\n        const fontInfo = this._configuration.options.get(50 /* EditorOption.fontInfo */);\n        const colorMap = this._getColorMap();\n        const hasBadChars = (/[:;\\\\\\/<>]/.test(fontInfo.fontFamily));\n        const useDefaultFontFamily = (hasBadChars || fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily);\n        let fontFamily;\n        if (useDefaultFontFamily) {\n            fontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n        }\n        else {\n            fontFamily = fontInfo.fontFamily;\n            fontFamily = fontFamily.replace(/\"/g, '\\'');\n            const hasQuotesOrIsList = /[,']/.test(fontFamily);\n            if (!hasQuotesOrIsList) {\n                const needsQuotes = /[+ ]/.test(fontFamily);\n                if (needsQuotes) {\n                    fontFamily = `'${fontFamily}'`;\n                }\n            }\n            fontFamily = `${fontFamily}, ${EDITOR_FONT_DEFAULTS.fontFamily}`;\n        }\n        return {\n            mode: languageId,\n            html: (`<div style=\"`\n                + `color: ${colorMap[1 /* ColorId.DefaultForeground */]};`\n                + `background-color: ${colorMap[2 /* ColorId.DefaultBackground */]};`\n                + `font-family: ${fontFamily};`\n                + `font-weight: ${fontInfo.fontWeight};`\n                + `font-size: ${fontInfo.fontSize}px;`\n                + `line-height: ${fontInfo.lineHeight}px;`\n                + `white-space: pre;`\n                + `\">`\n                + this._getHTMLToCopy(range, colorMap)\n                + '</div>')\n        };\n    }\n    _getHTMLToCopy(modelRange, colorMap) {\n        const startLineNumber = modelRange.startLineNumber;\n        const startColumn = modelRange.startColumn;\n        const endLineNumber = modelRange.endLineNumber;\n        const endColumn = modelRange.endColumn;\n        const tabSize = this.getTabSize();\n        let result = '';\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineTokens = this.model.tokenization.getLineTokens(lineNumber);\n            const lineContent = lineTokens.getLineContent();\n            const startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n            const endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n            if (lineContent === '') {\n                result += '<br>';\n            }\n            else {\n                result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n            }\n        }\n        return result;\n    }\n    _getColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        const result = ['#000000'];\n        if (colorMap) {\n            for (let i = 1, len = colorMap.length; i < len; i++) {\n                result[i] = Color.Format.CSS.formatHex(colorMap[i]);\n            }\n        }\n        return result;\n    }\n    //#region cursor operations\n    getPrimaryCursorState() {\n        return this._cursor.getPrimaryCursorState();\n    }\n    getLastAddedCursorIndex() {\n        return this._cursor.getLastAddedCursorIndex();\n    }\n    getCursorStates() {\n        return this._cursor.getCursorStates();\n    }\n    setCursorStates(source, reason, states) {\n        return this._withViewEventsCollector(eventsCollector => this._cursor.setStates(eventsCollector, source, reason, states));\n    }\n    getCursorColumnSelectData() {\n        return this._cursor.getCursorColumnSelectData();\n    }\n    getCursorAutoClosedCharacters() {\n        return this._cursor.getAutoClosedCharacters();\n    }\n    setCursorColumnSelectData(columnSelectData) {\n        this._cursor.setCursorColumnSelectData(columnSelectData);\n    }\n    getPrevEditOperationType() {\n        return this._cursor.getPrevEditOperationType();\n    }\n    setPrevEditOperationType(type) {\n        this._cursor.setPrevEditOperationType(type);\n    }\n    getSelection() {\n        return this._cursor.getSelection();\n    }\n    getSelections() {\n        return this._cursor.getSelections();\n    }\n    getPosition() {\n        return this._cursor.getPrimaryCursorState().modelState.position;\n    }\n    setSelections(source, selections, reason = 0 /* CursorChangeReason.NotSet */) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.setSelections(eventsCollector, source, selections, reason));\n    }\n    saveCursorState() {\n        return this._cursor.saveState();\n    }\n    restoreCursorState(states) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.restoreState(eventsCollector, states));\n    }\n    _executeCursorEdit(callback) {\n        if (this._cursor.context.cursorConfig.readOnly) {\n            // we cannot edit when read only...\n            this._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n            return;\n        }\n        this._withViewEventsCollector(callback);\n    }\n    executeEdits(source, edits, cursorStateComputer) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer));\n    }\n    startComposition() {\n        this._executeCursorEdit(eventsCollector => this._cursor.startComposition(eventsCollector));\n    }\n    endComposition(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.endComposition(eventsCollector, source));\n    }\n    type(text, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.type(eventsCollector, text, source));\n    }\n    compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source));\n    }\n    paste(text, pasteOnNewLine, multicursorText, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source));\n    }\n    cut(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.cut(eventsCollector, source));\n    }\n    executeCommand(command, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommand(eventsCollector, command, source));\n    }\n    executeCommands(commands, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommands(eventsCollector, commands, source));\n    }\n    revealPrimaryCursor(source, revealHorizontal, minimalReveal = false) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.revealPrimary(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */));\n    }\n    revealTopMostCursor(source) {\n        const viewPosition = this._cursor.getTopMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealBottomMostCursor(source) {\n        const viewPosition = this._cursor.getBottomMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealRange(source, revealHorizontal, viewRange, verticalType, scrollType) {\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, verticalType, revealHorizontal, scrollType)));\n    }\n    //#endregion\n    //#region viewLayout\n    changeWhitespace(callback) {\n        const hadAChange = this.viewLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n            this._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n        }\n    }\n    //#endregion\n    _withViewEventsCollector(callback) {\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            return callback(eventsCollector);\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n    }\n    normalizePosition(position, affinity) {\n        return this._lines.normalizePosition(position, affinity);\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n    getLineIndentColumn(lineNumber) {\n        return this._lines.getLineIndentColumn(lineNumber);\n    }\n}\nclass ViewportStart {\n    static create(model) {\n        const viewportStartLineTrackedRange = model._setTrackedRange(null, new Range(1, 1, 1, 1), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        return new ViewportStart(model, 1, false, viewportStartLineTrackedRange, 0);\n    }\n    get viewLineNumber() {\n        return this._viewLineNumber;\n    }\n    get isValid() {\n        return this._isValid;\n    }\n    get modelTrackedRange() {\n        return this._modelTrackedRange;\n    }\n    get startLineDelta() {\n        return this._startLineDelta;\n    }\n    constructor(_model, _viewLineNumber, _isValid, _modelTrackedRange, _startLineDelta) {\n        this._model = _model;\n        this._viewLineNumber = _viewLineNumber;\n        this._isValid = _isValid;\n        this._modelTrackedRange = _modelTrackedRange;\n        this._startLineDelta = _startLineDelta;\n    }\n    dispose() {\n        this._model._setTrackedRange(this._modelTrackedRange, null, 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n    }\n    update(viewModel, startLineNumber) {\n        const position = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, viewModel.getLineMinColumn(startLineNumber)));\n        const viewportStartLineTrackedRange = viewModel.model._setTrackedRange(this._modelTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        const viewportStartLineTop = viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n        const scrollTop = viewModel.viewLayout.getCurrentScrollTop();\n        this._viewLineNumber = startLineNumber;\n        this._isValid = true;\n        this._modelTrackedRange = viewportStartLineTrackedRange;\n        this._startLineDelta = scrollTop - viewportStartLineTop;\n    }\n    invalidate() {\n        this._isValid = false;\n    }\n}\nclass OverviewRulerDecorations {\n    constructor() {\n        this._asMap = Object.create(null);\n        this.asArray = [];\n    }\n    accept(color, zIndex, startLineNumber, endLineNumber, lane) {\n        const prevGroup = this._asMap[color];\n        if (prevGroup) {\n            const prevData = prevGroup.data;\n            const prevLane = prevData[prevData.length - 3];\n            const prevEndLineNumber = prevData[prevData.length - 1];\n            if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n                // merge into prev\n                if (endLineNumber > prevEndLineNumber) {\n                    prevData[prevData.length - 1] = endLineNumber;\n                }\n                return;\n            }\n            // push\n            prevData.push(lane, startLineNumber, endLineNumber);\n        }\n        else {\n            const group = new OverviewRulerDecorationsGroup(color, zIndex, [lane, startLineNumber, endLineNumber]);\n            this._asMap[color] = group;\n            this.asArray.push(group);\n        }\n    }\n}\nclass HiddenAreasModel {\n    constructor() {\n        this.hiddenAreas = new Map();\n        this.shouldRecompute = false;\n        this.ranges = [];\n    }\n    setHiddenAreas(source, ranges) {\n        const existing = this.hiddenAreas.get(source);\n        if (existing && rangeArraysEqual(existing, ranges)) {\n            return;\n        }\n        this.hiddenAreas.set(source, ranges);\n        this.shouldRecompute = true;\n    }\n    /**\n     * The returned array is immutable.\n    */\n    getMergedRanges() {\n        if (!this.shouldRecompute) {\n            return this.ranges;\n        }\n        this.shouldRecompute = false;\n        const newRanges = Array.from(this.hiddenAreas.values()).reduce((r, hiddenAreas) => mergeLineRangeArray(r, hiddenAreas), []);\n        if (rangeArraysEqual(this.ranges, newRanges)) {\n            return this.ranges;\n        }\n        this.ranges = newRanges;\n        return this.ranges;\n    }\n}\nfunction mergeLineRangeArray(arr1, arr2) {\n    const result = [];\n    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n        const item1 = arr1[i];\n        const item2 = arr2[j];\n        if (item1.endLineNumber < item2.startLineNumber - 1) {\n            result.push(arr1[i++]);\n        }\n        else if (item2.endLineNumber < item1.startLineNumber - 1) {\n            result.push(arr2[j++]);\n        }\n        else {\n            const startLineNumber = Math.min(item1.startLineNumber, item2.startLineNumber);\n            const endLineNumber = Math.max(item1.endLineNumber, item2.endLineNumber);\n            result.push(new Range(startLineNumber, 1, endLineNumber, 1));\n            i++;\n            j++;\n        }\n    }\n    while (i < arr1.length) {\n        result.push(arr1[i++]);\n    }\n    while (j < arr2.length) {\n        result.push(arr2[j++]);\n    }\n    return result;\n}\nfunction rangeArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!arr1[i].equalsRange(arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Maintain a stable viewport by trying to keep the first line in the viewport constant.\n */\nclass StableViewport {\n    constructor(viewportStartModelPosition, startLineDelta) {\n        this.viewportStartModelPosition = viewportStartModelPosition;\n        this.startLineDelta = startLineDelta;\n    }\n    recoverViewportStart(coordinatesConverter, viewLayout) {\n        if (!this.viewportStartModelPosition) {\n            return;\n        }\n        const viewPosition = coordinatesConverter.convertModelPositionToViewPosition(this.viewportStartModelPosition);\n        const viewPositionTop = viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n        viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this.startLineDelta }, 1 /* ScrollType.Immediate */);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable } from '../../base/common/lifecycle.js';\nexport class ViewModelEventDispatcher extends Disposable {\n    constructor() {\n        super();\n        this._onEvent = this._register(new Emitter());\n        this.onEvent = this._onEvent.event;\n        this._eventHandlers = [];\n        this._viewEventQueue = null;\n        this._isConsumingViewEventQueue = false;\n        this._collector = null;\n        this._collectorCnt = 0;\n        this._outgoingEvents = [];\n    }\n    emitOutgoingEvent(e) {\n        this._addOutgoingEvent(e);\n        this._emitOutgoingEvents();\n    }\n    _addOutgoingEvent(e) {\n        for (let i = 0, len = this._outgoingEvents.length; i < len; i++) {\n            const mergeResult = (this._outgoingEvents[i].kind === e.kind ? this._outgoingEvents[i].attemptToMerge(e) : null);\n            if (mergeResult) {\n                this._outgoingEvents[i] = mergeResult;\n                return;\n            }\n        }\n        // not merged\n        this._outgoingEvents.push(e);\n    }\n    _emitOutgoingEvents() {\n        while (this._outgoingEvents.length > 0) {\n            if (this._collector || this._isConsumingViewEventQueue) {\n                // right now collecting or emitting view events, so let's postpone emitting\n                return;\n            }\n            const event = this._outgoingEvents.shift();\n            if (event.isNoOp()) {\n                continue;\n            }\n            this._onEvent.fire(event);\n        }\n    }\n    addViewEventHandler(eventHandler) {\n        for (let i = 0, len = this._eventHandlers.length; i < len; i++) {\n            if (this._eventHandlers[i] === eventHandler) {\n                console.warn('Detected duplicate listener in ViewEventDispatcher', eventHandler);\n            }\n        }\n        this._eventHandlers.push(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        for (let i = 0; i < this._eventHandlers.length; i++) {\n            if (this._eventHandlers[i] === eventHandler) {\n                this._eventHandlers.splice(i, 1);\n                break;\n            }\n        }\n    }\n    beginEmitViewEvents() {\n        this._collectorCnt++;\n        if (this._collectorCnt === 1) {\n            this._collector = new ViewModelEventsCollector();\n        }\n        return this._collector;\n    }\n    endEmitViewEvents() {\n        this._collectorCnt--;\n        if (this._collectorCnt === 0) {\n            const outgoingEvents = this._collector.outgoingEvents;\n            const viewEvents = this._collector.viewEvents;\n            this._collector = null;\n            for (const outgoingEvent of outgoingEvents) {\n                this._addOutgoingEvent(outgoingEvent);\n            }\n            if (viewEvents.length > 0) {\n                this._emitMany(viewEvents);\n            }\n        }\n        this._emitOutgoingEvents();\n    }\n    emitSingleViewEvent(event) {\n        try {\n            const eventsCollector = this.beginEmitViewEvents();\n            eventsCollector.emitViewEvent(event);\n        }\n        finally {\n            this.endEmitViewEvents();\n        }\n    }\n    _emitMany(events) {\n        if (this._viewEventQueue) {\n            this._viewEventQueue = this._viewEventQueue.concat(events);\n        }\n        else {\n            this._viewEventQueue = events;\n        }\n        if (!this._isConsumingViewEventQueue) {\n            this._consumeViewEventQueue();\n        }\n    }\n    _consumeViewEventQueue() {\n        try {\n            this._isConsumingViewEventQueue = true;\n            this._doConsumeQueue();\n        }\n        finally {\n            this._isConsumingViewEventQueue = false;\n        }\n    }\n    _doConsumeQueue() {\n        while (this._viewEventQueue) {\n            // Empty event queue, as events might come in while sending these off\n            const events = this._viewEventQueue;\n            this._viewEventQueue = null;\n            // Use a clone of the event handlers list, as they might remove themselves\n            const eventHandlers = this._eventHandlers.slice(0);\n            for (const eventHandler of eventHandlers) {\n                eventHandler.handleEvents(events);\n            }\n        }\n    }\n}\nexport class ViewModelEventsCollector {\n    constructor() {\n        this.viewEvents = [];\n        this.outgoingEvents = [];\n    }\n    emitViewEvent(event) {\n        this.viewEvents.push(event);\n    }\n    emitOutgoingEvent(e) {\n        this.outgoingEvents.push(e);\n    }\n}\nexport class ContentSizeChangedEvent {\n    constructor(oldContentWidth, oldContentHeight, contentWidth, contentHeight) {\n        this.kind = 0 /* OutgoingViewModelEventKind.ContentSizeChanged */;\n        this._oldContentWidth = oldContentWidth;\n        this._oldContentHeight = oldContentHeight;\n        this.contentWidth = contentWidth;\n        this.contentHeight = contentHeight;\n        this.contentWidthChanged = (this._oldContentWidth !== this.contentWidth);\n        this.contentHeightChanged = (this._oldContentHeight !== this.contentHeight);\n    }\n    isNoOp() {\n        return (!this.contentWidthChanged && !this.contentHeightChanged);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new ContentSizeChangedEvent(this._oldContentWidth, this._oldContentHeight, other.contentWidth, other.contentHeight);\n    }\n}\nexport class FocusChangedEvent {\n    constructor(oldHasFocus, hasFocus) {\n        this.kind = 1 /* OutgoingViewModelEventKind.FocusChanged */;\n        this.oldHasFocus = oldHasFocus;\n        this.hasFocus = hasFocus;\n    }\n    isNoOp() {\n        return (this.oldHasFocus === this.hasFocus);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new FocusChangedEvent(this.oldHasFocus, other.hasFocus);\n    }\n}\nexport class ScrollChangedEvent {\n    constructor(oldScrollWidth, oldScrollLeft, oldScrollHeight, oldScrollTop, scrollWidth, scrollLeft, scrollHeight, scrollTop) {\n        this.kind = 2 /* OutgoingViewModelEventKind.ScrollChanged */;\n        this._oldScrollWidth = oldScrollWidth;\n        this._oldScrollLeft = oldScrollLeft;\n        this._oldScrollHeight = oldScrollHeight;\n        this._oldScrollTop = oldScrollTop;\n        this.scrollWidth = scrollWidth;\n        this.scrollLeft = scrollLeft;\n        this.scrollHeight = scrollHeight;\n        this.scrollTop = scrollTop;\n        this.scrollWidthChanged = (this._oldScrollWidth !== this.scrollWidth);\n        this.scrollLeftChanged = (this._oldScrollLeft !== this.scrollLeft);\n        this.scrollHeightChanged = (this._oldScrollHeight !== this.scrollHeight);\n        this.scrollTopChanged = (this._oldScrollTop !== this.scrollTop);\n    }\n    isNoOp() {\n        return (!this.scrollWidthChanged && !this.scrollLeftChanged && !this.scrollHeightChanged && !this.scrollTopChanged);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new ScrollChangedEvent(this._oldScrollWidth, this._oldScrollLeft, this._oldScrollHeight, this._oldScrollTop, other.scrollWidth, other.scrollLeft, other.scrollHeight, other.scrollTop);\n    }\n}\nexport class ViewZonesChangedEvent {\n    constructor() {\n        this.kind = 3 /* OutgoingViewModelEventKind.ViewZonesChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class HiddenAreasChangedEvent {\n    constructor() {\n        this.kind = 4 /* OutgoingViewModelEventKind.HiddenAreasChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class CursorStateChangedEvent {\n    constructor(oldSelections, selections, oldModelVersionId, modelVersionId, source, reason, reachedMaxCursorCount) {\n        this.kind = 6 /* OutgoingViewModelEventKind.CursorStateChanged */;\n        this.oldSelections = oldSelections;\n        this.selections = selections;\n        this.oldModelVersionId = oldModelVersionId;\n        this.modelVersionId = modelVersionId;\n        this.source = source;\n        this.reason = reason;\n        this.reachedMaxCursorCount = reachedMaxCursorCount;\n    }\n    static _selectionsAreEqual(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        const aLen = a.length;\n        const bLen = b.length;\n        if (aLen !== bLen) {\n            return false;\n        }\n        for (let i = 0; i < aLen; i++) {\n            if (!a[i].equalsSelection(b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    isNoOp() {\n        return (CursorStateChangedEvent._selectionsAreEqual(this.oldSelections, this.selections)\n            && this.oldModelVersionId === this.modelVersionId);\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return new CursorStateChangedEvent(this.oldSelections, other.selections, this.oldModelVersionId, other.modelVersionId, other.source, other.reason, this.reachedMaxCursorCount || other.reachedMaxCursorCount);\n    }\n}\nexport class ReadOnlyEditAttemptEvent {\n    constructor() {\n        this.kind = 5 /* OutgoingViewModelEventKind.ReadOnlyEditAttempt */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        if (other.kind !== this.kind) {\n            return null;\n        }\n        return this;\n    }\n}\nexport class ModelDecorationsChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 7 /* OutgoingViewModelEventKind.ModelDecorationsChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelLanguageChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 8 /* OutgoingViewModelEventKind.ModelLanguageChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelLanguageConfigurationChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 9 /* OutgoingViewModelEventKind.ModelLanguageConfigurationChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelContentChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 10 /* OutgoingViewModelEventKind.ModelContentChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelOptionsChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 11 /* OutgoingViewModelEventKind.ModelOptionsChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\nexport class ModelTokensChangedEvent {\n    constructor(event) {\n        this.event = event;\n        this.kind = 12 /* OutgoingViewModelEventKind.ModelTokensChanged */;\n    }\n    isNoOp() {\n        return false;\n    }\n    attemptToMerge(other) {\n        return null;\n    }\n}\n"],"names":["BracketInfo","constructor","range","nestingLevel","nestingLevelOfEqualBracketType","isInvalid","this","BracketPairInfo","openingBracketRange","closingBracketRange","bracketPairNode","openingBracketInfo","openingBracket","bracketInfo","BracketPairWithMinIndentationInfo","minVisibleColumnIndentation","super","ModelRawFlush","changeType","LineInjectedText","applyInjectedText","lineText","injectedTexts","length","result","lastOriginalOffset","injectedText","substring","column","options","content","fromDecorations","decorations","decoration","before","push","ownerId","startLineNumber","startColumn","after","endLineNumber","endColumn","sort","a","b","lineNumber","order","ModelRawLineChanged","detail","ModelRawLinesDeleted","fromLineNumber","toLineNumber","ModelRawLinesInserted","ModelRawEOLChanged","ModelRawContentChangedEvent","changes","versionId","isUndoing","isRedoing","resultingSelection","containsEvent","type","i","len","merge","concat","ModelInjectedTextChangedEvent","InternalModelContentChangeEvent","rawContentChangedEvent","contentChangedEvent","other","_mergeChangeEvents","eol","isFlush","isEolChange","HorizontalGuidesState","IndentGuide","visibleColumn","className","horizontalLine","forWrappedLinesAfterColumn","forWrappedLinesBeforeOrAtColumn","Error","IndentGuideHorizontalLine","top","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","done","then","apply","TokenizationRegistry","_tokenizationSupports","Map","_factories","_onDidChange","Emitter","onDidChange","event","_colorMap","handleChange","languageIds","fire","changedLanguages","changedColorMap","register","languageId","support","set","toDisposable","get","delete","registerFactory","factory","_a","dispose","myData","TokenizationSupportFactoryData","v","getOrCreate","tokenizationSupport","isResolved","setColorMap","colorMap","Array","from","keys","getColorMap","getDefaultBackground","Disposable","_isResolved","_registry","_languageId","_factory","_isDisposed","_resolvePromise","_create","_register","ContiguousMultilineTokens","_startLineNumber","_tokens","tokens","getLineTokens","appendLineTokens","lineTokens","ContiguousMultilineTokensBuilder","add","last","finalize","EMPTY_LINE_TOKENS","Uint32Array","buffer","ContiguousTokensEditing","deleteBeginning","toChIndex","deleteEnding","fromChIndex","toUint32Array","lineTextLength","tokensCount","fromTokenIndex","LineTokens","findIndexInTokensArray","fromTokenStartOffset","delta","dest","lastEnd","tokenIndex","tokenEndOffset","tmp","subarray","append","_otherTokens","myTokens","otherTokens","otherTokensCount","insert","chIndex","textLength","arr","ContiguousTokensStore","languageIdCodec","_lineTokens","_len","_languageIdCodec","flush","hasTokens","getTokens","topLevelLanguageId","lineIndex","rawLineTokens","getDefaultMetadata","encodeLanguageId","_massageTokens","hasDifferentLanguageId","TokenMetadata","getLanguageId","byteOffset","byteLength","_ensureLine","_deleteLines","start","deleteCount","splice","_insertLines","insertIndex","insertCount","arrays","setTokens","checkEquality","oldTokens","_equals","_b","acceptEdit","eolCount","firstLineLength","_acceptDeleteRange","_acceptInsertText","Position","firstLineIndex","lastLineIndex","lastLineTokens","position","setMultilineTokens","textModel","ranges","element","minChangedLineNumber","maxChangedLineNumber","hasChange","getLineLength","createEmpty","lineContent","decoder","defaultMetadata","defaultTokenMetadata","text","_lineTokensBrand","undefined","_tokensCount","_text","equals","slicedEquals","sliceFromTokenIndex","sliceTokenCount","to","getLineContent","getCount","getStartOffset","getMetadata","metadata","decodeLanguageId","getStandardTokenType","getTokenType","getForeground","getClassName","getClassNameFromMetadata","getInlineStyle","getInlineStyleFromMetadata","getPresentation","getPresentationFromMetadata","getEndOffset","findTokenIndexAtOffset","offset","inflate","sliceAndInflate","startOffset","endOffset","deltaOffset","SliceLineTokens","convertToEndOffset","lastTokenIndex","desiredIndex","low","high","mid","Math","floor","withInserted","insertTokens","nextOriginalTokenIdx","nextInsertTokenIdx","newTokens","originalEndOffset","nextOriginalTokenEndOffset","nextInsertToken","tokenMetadata","source","_source","_startOffset","_endOffset","_deltaOffset","_firstTokenIndex","min","SparseMultilineTokens","create","SparseMultilineTokensStorage","_endLineNumber","getMaxDeltaLine","toString","_updateEndLineNumber","isEmpty","getRange","deltaRange","Range","removeTokens","startLineIndex","endLineIndex","split","bDeltaLine","applyEdit","lastLineLength","countEOL","charCodeAt","firstCharCode","deletedLinesCount","tokenMaxDeltaLine","clear","deletedBefore","acceptDeleteRange","acceptInsertText","_tokenCount","pieces","_getDeltaLine","_getStartCharacter","_getEndCharacter","join","tokenCount","_getTokenCount","startChar","maxDeltaLine","endChar","deltaLine","midDeltaLine","max","SparseLineTokens","startDeltaLine","endDeltaLine","newTokenCount","hasDeletedTokens","firstDeltaLine","srcOffset","tokenDeltaLine","tokenStartCharacter","tokenEndCharacter","destOffset","aTokens","bTokens","destTokens","destFirstDeltaLine","horizontalShiftForFirstLineTokens","startCharacter","endCharacter","deletedLineCount","character","isInsertingPreciselyOneWordCharacter","tokenLength","getStartCharacter","getEndCharacter","SparseTokensStore","_pieces","_isComplete","isComplete","setPartial","_range","_firstRange","_lastRange","plusRange","insertPosition","piece","index","addSparseTokens","_findFirstPieceWithLine","aLen","bLen","aIndex","resultLen","lastEndOffset","emitToken","bIndex","bStartCharacter","bEndCharacter","bMetadata","bMask","aMask","aMergeIndex","ViewEventHandler","_shouldRender","shouldRender","forceShouldRender","setShouldRender","onDidRender","onCompositionStart","onCompositionEnd","onConfigurationChanged","onCursorStateChanged","onDecorationsChanged","onFlushed","onFocusChanged","onLanguageConfigurationChanged","onLineMappingChanged","onLinesChanged","onLinesDeleted","onLinesInserted","onRevealRangeRequest","onScrollChanged","onThemeChanged","onTokensChanged","onTokensColorsChanged","onZonesChanged","handleEvents","events","console","info","ViewCompositionStartEvent","ViewCompositionEndEvent","ViewConfigurationChangedEvent","hasChanged","id","ViewCursorStateChangedEvent","selections","modelSelections","reason","ViewDecorationsChangedEvent","affectsMinimap","affectsOverviewRuler","affectsGlyphMargin","ViewFlushedEvent","ViewFocusChangedEvent","isFocused","ViewLanguageConfigurationEvent","ViewLineMappingChangedEvent","ViewLinesChangedEvent","count","ViewLinesDeletedEvent","ViewLinesInsertedEvent","ViewRevealRangeRequestEvent","minimalReveal","verticalType","revealHorizontal","scrollType","ViewScrollChangedEvent","scrollWidth","scrollLeft","scrollHeight","scrollTop","scrollWidthChanged","scrollLeftChanged","scrollHeightChanged","scrollTopChanged","ViewThemeChangedEvent","theme","ViewTokensChangedEvent","ViewTokensColorsChangedEvent","ViewZonesChangedEvent","LineDecoration","_lineDecorationBrand","equalsArr","extractWrapped","lineLength","r","rLength","dec","filter","lineDecorations","minLineColumn","maxLineColumn","d","inlineClassName","_typeCompare","ORDER","compare","typeCmp","DecorationSegment","Stack","stopOffsets","classNames","_metadata","consumeLowerThan","maxStopOffset","nextStartOffset","stopOffset","LineDecorationsNormalizer","normalize","stack","charCodeBefore","strings","currentStartOffset","currentEndOffset","LinePart","endIndex","containsRTL","_linePartBrand","isWhitespace","isPseudoAfter","LineRange","startIndex","otherLineRange","RenderLineInput","useMonospaceOptimizations","canUseHalfwidthRightwardsArrow","continuesWithWrappedLine","isBasicASCII","fauxIndentLength","tabSize","startVisibleColumn","spaceWidth","middotWidth","wsmiddotWidth","stopRenderingLineAfter","renderWhitespace","renderControlCharacters","fontLigatures","selectionsOnLine","abs","renderSpaceWidth","renderSpaceCharCode","sameSelection","otherSelections","DomPosition","partIndex","charIndex","CharacterMapping","getPartIndex","partData","getCharIndex","partCount","_data","_horizontalOffset","setColumnInfo","horizontalOffset","getHorizontalOffset","charOffsetToPartData","charOffset","getDomPosition","getColumn","domPosition","partLength","partDataToCharOffset","searchEntry","midEntry","minEntry","maxEntry","minPartIndex","minCharIndex","maxCharIndex","RenderLineOutput","characterMapping","containsForeignElements","_renderLineOutputBrand","renderViewLine","input","sb","appendString","beforeCount","afterCount","lineDecoration","fontIsMonospace","isOverflowing","overflowingCharCount","parts","lastCharacterMappingDefined","charOffsetInPart","charHorizontalOffset","partDisplacement","tokensLen","part","partEndIndex","partType","partContainsRTL","partRendersWhitespace","partRendersWhitespaceWithWidth","partIsEmptyAndHasPseudoAfter","appendASCIICharCode","partWidth","_charIndex","_visibleColumn","charWidth","String","producedCharacters","appendCharCode","space","charCode","isControlCharacter","to4CharHex","nls","n","toFixed","renderOverflowingCharCount","_renderLine","lineContainsRTL","tokenContainsRTL","transformAndRemoveOverflowing","lastLinePart","token","tokenEndIndex","extractControlCharacters","onlyBoundary","onlyTrailing","generateLinePartForEachWhitespace","tokenType","tokensLength","lastNonWhitespaceIndex","lineIsEmptyOrWhitespace","firstNonWhitespaceIndex","wasInWhitespace","currentSelectionIndex","currentSelection","tmpIndent","chCode","isInWhitespace","nextChCode","generateWhitespace","lastCharCode","prevCharCode","_applyRenderWhitespace","_lineDecorations","lineDecorationsLen","lineDecorationIndex","lastResultEndIndex","lastTokenEndIndex","_applyInlineDecorations","onlyAtSpaces","lastSpaceOffset","currTokenStart","j","diff","piecesCount","ceil","pieceEndIndex","splitLargeTokens","ResolvedRenderLineInput","resolveRenderLineInput","RenderLineOutput2","html","renderViewLine2","StringBuilder","out","build","toUpperCase","padStart","ViewportData","partialData","whitespaceViewportData","model","relativeVerticalOffset","bigNumbersDelta","_model","visibleRange","getLineMinColumn","getLineMaxColumn","getViewLineRenderingData","getViewportViewLineRenderingData","getDecorationsInViewport","Viewport","left","width","height","_viewportBrand","MinimapLinesRenderingData","data","ViewLineData","minColumn","maxColumn","inlineDecorations","_viewLineDataBrand","ViewLineRenderingData","mightContainRTL","mightContainNonBasicASCII","InlineDecoration","SingleLineInlineDecoration","inlineClassNameAffectsLetterSpacing","toInlineDecoration","ViewModelDecoration","_viewModelDecorationBrand","OverviewRulerDecorationsGroup","color","zIndex","compareByRenderingProps","MinimapTokensColorTracker","getInstance","_INSTANCE","markAsSingleton","_updateColorMap","_colors","RGBA8","Empty","_backgroundIsLight","colorId","rgba","g","round","backgroundLuminosity","getRelativeLuminance","getColor","backgroundIsLight","MonospaceLineBreaksComputerFactory","breakBeforeChars","breakAfterChars","classifier","WrappingCharacterClassifier","createLineBreaksComputer","fontInfo","wrappingColumn","wrappingIndent","wordBreak","requests","previousBreakingData","addRequest","previousLineBreakData","columnsForFullWidthChar","typicalFullwidthCharacterWidth","typicalHalfwidthCharacterWidth","injectionOptions","createLineBreaks","createLineBreaksFromPreviousLineBreaks","arrPool1","arrPool2","CharacterClassifier","BREAK_BEFORE","BREAK_AFTER","_asciiMap","_map","_defaultValue","firstLineBreakColumn","isKeepAll","prevBreakingOffsets","breakOffsets","prevBreakingOffsetsVisibleColumn","breakOffsetsVisibleColumn","wrappedTextIndentLength","computeWrappedTextIndentLength","wrappedLineBreakColumn","breakingOffsets","breakingOffsetsVisibleColumn","breakingOffsetsCount","lastBreakingOffset","lastBreakingOffsetVisibleColumn","breakingColumn","prevLen","prevIndex","bestDistance","distance","prevBreakOffset","prevBreakOffsetVisibleColumn","breakOffset","breakOffsetVisibleColumn","forcedBreakOffset","forcedBreakOffsetVisibleColumn","prevCharCodeClass","entireLineFits","charStartOffset","charCodeClass","computeCharWidth","canBreak","hitATabCharacter","prevCharWidth","remainingWidthOfNextLine","charCodeAtForcedBreakOffset","_lineText","injectionOffsets","map","t","ModelLineProjectionData","tabCharacterWidth","numberOfAdditionalTabs","ColorZone","_colorZoneBrand","OverviewRulerZone","heightInLines","_overviewRulerZoneBrand","_colorZone","setColorZone","colorZone","getColorZones","OverviewZoneManager","getVerticalOffsetForLine","_getVerticalOffsetForLine","_zones","_colorZonesInvalid","_lineHeight","_domWidth","_domHeight","_outerHeight","_pixelRatio","_lastAssignedId","_color2Id","Object","_id2Color","getId2Color","setZones","newZones","setLineHeight","lineHeight","setPixelRatio","pixelRatio","getDOMWidth","getCanvasWidth","setDOMWidth","getDOMHeight","getCanvasHeight","setDOMHeight","getOuterHeight","setOuterHeight","outerHeight","resolveColorZones","colorZonesInvalid","totalHeight","heightRatio","halfMinimumHeight","allColorZones","zone","offset1","offset2","y1","y2","ycenter","halfHeight","ViewContext","configuration","EditorTheme","viewModel","viewLayout","addEventHandler","eventHandler","addViewEventHandler","removeEventHandler","removeViewEventHandler","ViewModelDecorations","editorId","linesCollection","coordinatesConverter","_linesCollection","_coordinatesConverter","_decorationsCache","_cachedModelDecorationsResolver","_cachedModelDecorationsResolverViewRange","_clearCachedModelDecorationsResolver","reset","onModelDecorationsChanged","_getOrCreateViewModelDecoration","modelDecoration","modelRange","viewRange","isWholeLine","convertModelPositionToViewPosition","end","convertModelRangeToViewRange","getMinimapDecorationsInRange","_getDecorationsInRange","getDecorationsViewportData","cacheIsValid","equalsRange","getInlineDecorationsOnLine","onlyMinimapDecorations","arguments","onlyMarginDecorations","getViewLineMinColumn","getViewLineMaxColumn","modelDecorations","getDecorationsInRange","filterValidationDecorations","decorationsInViewport","decorationsInViewportLen","decorationOptions","isModelDecorationVisible","viewModelDecoration","inlineDecoration","intersectedStartLineNumber","intersectedEndLineNumber","beforeContentClassName","afterContentClassName","hideInCommentTokens","isModelDecorationInComment","hideInStringTokens","isModelDecorationInString","testTokensInRange","callback","tokenization","isFirstLine","isEndLine","tokenIdx","PendingChanges","_hasPending","_inserts","_changes","_removes","x","change","remove","mustCommit","commit","linesLayout","inserts","removes","_commitPendingChanges","EditorWhitespace","afterLineNumber","ordinal","minWidth","prefixSum","LinesLayout","lineCount","paddingTop","paddingBottom","_instanceId","INSTANCE_COUNT","_pendingChanges","_lastWhitespaceId","_arr","_prefixSumValidIndex","_minWidth","_lineCount","_paddingTop","_paddingBottom","findInsertionIndex","_checkPendingChanges","setPadding","changeWhitespace","hadAChange","insertWhitespace","heightInPx","changeOneWhitespace","newAfterLineNumber","newHeight","removeWhitespace","_insertWhitespace","_changeOneWhitespace","_findWhitespaceIndex","_removeWhitespace","toRemove","Set","toChange","applyRemoveAndChange","whitespaces","whitespace","has","removeIndex","getWhitespacesTotalHeight","getWhitespacesAccumulatedHeight","getLinesTotalHeight","getWhitespaceAccumulatedHeightBeforeLineNumber","lastWhitespaceBeforeLineNumber","_findLastWhitespaceBeforeLineNumber","_findFirstWhitespaceAfterLineNumber","firstWhitespaceAfterLineNumber","getFirstWhitespaceIndexAfterLineNumber","getVerticalOffsetForLineNumber","previousLinesHeight","includeViewZones","getVerticalOffsetAfterLineNumber","getWhitespaceMinWidth","isAfterLines","verticalOffset","isInTopPadding","isInBottomPadding","getLineNumberAtOrAfterVerticalOffset","linesCount","minLineNumber","maxLineNumber","midLineNumber","midLineNumberVerticalOffset","getLinesViewportData","verticalOffset1","verticalOffset2","startLineNumberVerticalOffset","whitespaceIndex","whitespaceCount","getWhitespacesCount","currentWhitespaceHeight","currentWhitespaceAfterLineNumber","getAfterLineNumberForWhitespaceIndex","getHeightForWhitespaceIndex","currentVerticalOffset","currentLineRelativeOffset","STEP_SIZE","linesOffsets","verticalCenter","centeredLineNumber","endLineNumberVerticalOffset","completelyVisibleStartLineNumber","completelyVisibleEndLineNumber","getVerticalOffsetForWhitespaceIndex","previousWhitespacesHeight","getWhitespaceIndexAtOrAfterVerticallOffset","minWhitespaceIndex","maxWhitespaceIndex","midWhitespaceIndex","midWhitespaceVerticalOffset","getWhitespaceAtVerticalOffset","candidateIndex","candidateTop","candidateHeight","getIdForWhitespaceIndex","getWhitespaceViewportData","getWhitespaces","slice","EditorScrollDimensions","contentWidth","contentHeight","EditorScrollable","smoothScrollDuration","scheduleAtNextAnimationFrame","_onDidContentSizeChange","onDidContentSizeChange","_dimensions","_scrollable","Scrollable","forceIntegerValues","onDidScroll","onScroll","getScrollable","setSmoothScrollDuration","validateScrollPosition","scrollPosition","getScrollDimensions","setScrollDimensions","dimensions","oldDimensions","contentWidthChanged","contentHeightChanged","ContentSizeChangedEvent","getFutureScrollPosition","getCurrentScrollPosition","setScrollPositionNow","update","setScrollPositionSmooth","hasPendingScrollAnimation","ViewLayout","_configuration","layoutInfo","padding","_linesLayout","bottom","_maxLineWidth","_overlayWidgetsMinWidth","_configureSmoothScrollDuration","_updateHeight","onHeightMaybeChanged","scrollDimensions","_getContentHeight","_getHorizontalScrollbarHeight","scrollbar","horizontal","horizontalScrollbarSize","getCurrentViewport","currentScrollPosition","getFutureViewport","_computeContentWidth","maxLineWidth","wrappingInfo","isViewportWrapping","minimap","enabled","side","verticalScrollbarWidth","extraHorizontalSpace","whitespaceMinWidth","setMaxLineWidth","_updateContentWidth","setOverlayWidgetsMinWidth","maxMinWidth","saveState","firstLineNumberInViewport","scrollTopWithoutViewZones","getLineNumberAtVerticalOffset","visibleBox","getLinesViewportDataAtScrollTop","getContentWidth","getScrollWidth","getContentHeight","getScrollHeight","getCurrentScrollLeft","getCurrentScrollTop","setScrollPosition","deltaScrollNow","deltaScrollLeft","deltaScrollTop","createModelLineProjection","lineBreakData","isVisible","IdentityModelLineProjection","INSTANCE","HiddenModelLineProjection","ModelLineProjection","_projectionData","_isVisible","setVisible","getProjectionData","getViewLineCount","getOutputLineCount","getViewLineContent","modelLineNumber","outputLineIndex","_assertVisible","startOffsetInInputWithInjections","endOffsetInInputWithInjections","idx","getValueInRange","spaces","getViewLineLength","_modelLineNumber","getMinOutputOffset","getMaxOutputOffset","getViewLineData","getViewLinesData","outputLineIdx","globalStartIndex","needed","lineWithInjections","inlineDecorationsPerOutputLine","totalInjectedTextLengthBefore","currentInjectedOffset","lineStartOffsetInInputWithInjections","lineEndOffsetInInputWithInjections","injectedTextStartOffsetInInputWithInjections","injectedTextEndOffsetInInputWithInjections","globalIndex","_getViewLineData","deltaStartIndex","getModelColumnOfViewPosition","outputColumn","translateToInputOffset","getViewPositionOfModelPosition","deltaLineNumber","inputColumn","affinity","translateToOutputPosition","toPosition","getViewLineNumberOfModelPosition","normalizePosition","outputPosition","baseViewLineNumber","normalizeOutputPosition","getInjectedTextAt","getInjectedText","_outputLineIndex","_fromOuputLineIndex","_toOutputLineIndex","_inputColumn","_outputColumn","_globalStartIndex","_needed","_result","_deltaLineNumber","_spaces","_makeSpaces","ViewModelLinesFromProjectedModel","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","wrappingStrategy","_editorId","_validModelVersionId","_domLineBreaksComputerFactory","_monospaceLineBreaksComputerFactory","_constructLines","hiddenAreasDecorationIds","deltaDecorations","createCoordinatesConverter","CoordinatesConverter","resetHiddenAreas","previousLineBreaks","modelLineProjections","linesContent","getLinesContent","injectedTextDecorations","getInjectedTextDecorations","lineBreaksComputer","injectedTextQueue","lineInjectedText","takeWhile","linesBreaks","values","hiddenAreas","areaId","getDecorationRange","compareRangesUsingStarts","hiddenAreaStart","hiddenAreaEnd","hiddenAreaIdx","nextLineNumberToUpdateHiddenArea","isInHiddenArea","line","getVersionId","projectedModelLineLineCounts","ConstantTimePrefixSumComputer","getHiddenAreas","decId","setHiddenAreas","_ranges","newRanges","sortedRanges","currentRangeStart","currentRangeEnd","normalizeLineRanges","validateRange","oldRanges","hasDifference","newDecorations","ModelDecorationOptions","EMPTY","hasVisibleLine","lineChanged","newOutputLineCount","setValue","modelPositionIsVisible","_modelColumn","getModelLineViewLineCount","setTabSize","newTabSize","setWrappingSettings","equalFontInfo","equalWrappingStrategy","equalWrappingColumn","equalWrappingIndent","equalWordBreak","onlyWrappingColumnChanged","onModelFlushed","onModelLinesDeleted","outputFromLineNumber","getPrefixSum","outputToLineNumber","removeValues","viewEvents","onModelLinesInserted","_toLineNumber","lineBreaks","totalOutputLineCount","insertLines","insertPrefixSumValues","outputLineCount","insertValues","onModelLineChanged","oldOutputLineCount","lineMappingChanged","changeFrom","changeTo","insertFrom","insertTo","deleteFrom","deleteTo","acceptVersionId","getTotalSum","_toValidViewLineNumber","viewLineNumber","viewLineCount","getActiveIndentGuide","modelPosition","convertViewPositionToModelPosition","modelMinPosition","modelMaxPosition","guides","viewStartPosition","viewEndPosition","indent","getViewLineInfo","getIndexOf","remainder","ViewLineInfo","getMinColumnOfViewLine","viewLineInfo","modelLineWrappedLineIdx","getMaxColumnOfViewLine","getModelStartPositionOfViewLine","minViewColumn","getModelEndPositionOfViewLine","maxViewColumn","getViewLineInfosGroupedByModelRanges","viewStartLineNumber","viewEndLineNumber","startViewLine","endViewLine","lastVisibleModelPos","viewLines","curModelLine","lastVisibleModelPos2","fromPositions","ViewLineInfoGroupedByModelRange","getViewLinesBracketGuides","activeViewPosition","modelActivePosition","resultPerViewLine","group","modelRangeStartLineNumber","bracketGuidesPerModelLine","getLinesBracketGuides","p","viewPosition","getViewLinesIndentGuides","modelStart","modelEnd","resultRepeatCount","resultRepeatOption","modelStartLineIndex","modelEndLineIndex","reqStart","modelLineIndex","viewLineStartIndex","viewLineEndIndex","option","getLinesIndentGuides","viewIndents","currIndex","blockAtIndex","startModelLineIndex","startRemainder","getLineCount","fromViewLineIndex","remainingViewLineCount","lastLine","validateViewPosition","viewColumn","expectedModelPosition","computedModelColumn","validatePosition","validateViewRange","expectedModelRange","validViewStart","getStartPosition","validViewEnd","getEndPosition","convertViewRangeToModelRange","allowZeroLineNumber","belowHiddenRanges","validPosition","inputLineNumber","lineIndexChanged","modelColumn","filterOutValidation","res","finalResult","finalResultLen","prevDecId","getLineIndentColumn","lines","_lines","allowZero","ViewModelLinesFromModelAsIs","IdentityCoordinatesConverter","_newTabSize","_fontInfo","_wrappingStrategy","_wrappingColumn","_wrappingIndent","_versionId","_minLineNumber","_maxLineNumber","activePosition","fill","_validPosition","pos","_validRange","_viewPosition","_viewRange","ViewModel","languageConfigurationService","_themeService","_attachedView","hiddenAreasModel","HiddenAreasModel","previousHiddenAreas","_eventDispatcher","ViewModelEventDispatcher","onEvent","cursorConfig","CursorConfiguration","getOptions","_updateConfigurationViewLineCount","RunOnceScheduler","_updateConfigurationViewLineCountNow","_hasFocus","_viewportStart","ViewportStart","isTooLargeForTokenization","_cursor","CursorsController","_handleVisibleLinesChanged","invalidate","emitSingleViewEvent","emitOutgoingEvent","ScrollChangedEvent","oldScrollWidth","oldScrollLeft","oldScrollHeight","oldScrollTop","_decorations","_registerModelEvents","onDidChangeFast","eventsCollector","beginEmitViewEvents","_onConfigurationChanged","endEmitViewEvents","onDidColorThemeChange","_invalidateDecorationsColorCache","setViewLineCount","getModelVisibleRanges","linesViewportData","viewVisibleRange","_toModelVisibleRanges","visibleLinesStabilized","modelVisibleRanges","setVisibleLines","setHasFocus","hasFocus","FocusChangedEvent","_captureStableViewport","isValid","previousViewportStartViewPosition","previousViewportStartModelPosition","StableViewport","startLineDelta","stableViewport","emitViewEvent","schedule","recoverViewportStart","shouldRecreate","updateConfiguration","onDidChangeContentOrInjectedText","hadOtherModelChange","hadModelLineChangeThatChangedLineMapping","textModelEvents","lineIdx","lineBreakQueue","ArrayQueue","linesDeletedEvent","insertedLineBreaks","takeCount","linesInsertedEvent","changedLineBreakData","dequeue","linesChangedEvent","viewportStartWasValid","setModelLineCount","getAttachedEditorCount","_getTrackedRange","modelTrackedRange","viewPositionTop","ModelContentChangedEvent","onModelContentChanged","onDidChangeTokens","viewRanges","lenJ","ModelTokensChangedEvent","onDidChangeLanguageConfiguration","ModelLanguageConfigurationChangedEvent","onDidChangeLanguage","ModelLanguageChangedEvent","onDidChangeOptions","ModelOptionsChangedEvent","onDidChangeDecorations","ModelDecorationsChangedEvent","mergedRanges","getMergedRanges","HiddenAreasChangedEvent","getVisibleRangesPlusViewportAboveBelow","linesAround","startViewLineNumber","endViewLineNumber","getVisibleRanges","visibleViewRange","getCompletelyVisibleViewRange","hiddenStartLineNumber","hiddenEndLineNumber","getCompletelyVisibleViewRangeAtScrollTop","compatViewState","firstViewLineNumber","firstPosition","firstPositionDeltaTop","reduceRestoreState","state","_reduceRestoreStateCompatibility","getTabSize","setViewport","getBracketGuidesInRangeByLine","getLineFirstNonWhitespaceColumn","getLineLastNonWhitespaceColumn","_getViewLineRenderingData","lineData","getMinimapLinesRenderingData","getAllOverviewRulerDecorations","getOverviewRulerDecorations","OverviewRulerDecorations","opts","overviewRuler","lane","accept","asArray","opts1","invalidateCachedColor","opts2","getValueLengthInRange","modifyPosition","deduceModelPositionRelativeToViewPosition","viewAnchorPosition","lineFeedCnt","modelAnchor","getEOL","resultOffset","getOffsetAt","getPositionAt","getPlainTextToCopy","modelRanges","emptySelectionClipboard","forceCRLF","newLineCharacter","hasEmptyRange","hasNonEmptyRange","modelLineNumbers","prevModelLineNumber","getRichTextToCopy","PLAINTEXT_LANGUAGE_ID","_getColorMap","fontFamily","test","EDITOR_FONT_DEFAULTS","replace","mode","fontWeight","fontSize","_getHTMLToCopy","tokenizeLineToHTML","platform","Color","Format","CSS","formatHex","getPrimaryCursorState","getLastAddedCursorIndex","getCursorStates","setCursorStates","states","_withViewEventsCollector","setStates","getCursorColumnSelectData","getCursorAutoClosedCharacters","getAutoClosedCharacters","setCursorColumnSelectData","columnSelectData","getPrevEditOperationType","setPrevEditOperationType","getSelection","getSelections","getPosition","modelState","setSelections","saveCursorState","restoreCursorState","restoreState","_executeCursorEdit","context","readOnly","ReadOnlyEditAttemptEvent","executeEdits","edits","cursorStateComputer","startComposition","endComposition","compositionType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","paste","pasteOnNewLine","multicursorText","cut","executeCommand","command","executeCommands","commands","revealPrimaryCursor","revealPrimary","revealTopMostCursor","getTopMostViewPosition","revealBottomMostCursor","getBottomMostViewPosition","revealRange","viewportStartLineTrackedRange","_setTrackedRange","_viewLineNumber","_isValid","_modelTrackedRange","_startLineDelta","viewportStartLineTop","_asMap","prevGroup","prevData","prevLane","prevEndLineNumber","shouldRecompute","existing","rangeArraysEqual","reduce","arr1","arr2","item1","item2","mergeLineRangeArray","viewportStartModelPosition","_onEvent","_eventHandlers","_viewEventQueue","_isConsumingViewEventQueue","_collector","_collectorCnt","_outgoingEvents","_addOutgoingEvent","_emitOutgoingEvents","mergeResult","kind","attemptToMerge","shift","isNoOp","warn","ViewModelEventsCollector","outgoingEvents","outgoingEvent","_emitMany","_consumeViewEventQueue","_doConsumeQueue","eventHandlers","oldContentWidth","oldContentHeight","_oldContentWidth","_oldContentHeight","oldHasFocus","_oldScrollWidth","_oldScrollLeft","_oldScrollHeight","_oldScrollTop","CursorStateChangedEvent","oldSelections","oldModelVersionId","modelVersionId","reachedMaxCursorCount","_selectionsAreEqual","equalsSelection"],"sourceRoot":""}