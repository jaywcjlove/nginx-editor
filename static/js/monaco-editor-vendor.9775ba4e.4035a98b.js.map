{"version":3,"file":"static/js/monaco-editor-vendor.9775ba4e.4035a98b.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/contrib/smartSelect/browser/bracketSelections.js","../node_modules/monaco-editor/esm/vs/editor/contrib/smartSelect/browser/wordSelections.js","../node_modules/monaco-editor/esm/vs/editor/contrib/smartSelect/browser/smartSelect.js","../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetController2.js","../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetParser.js","../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetVariables.js","../node_modules/monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetSession.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nclass BracketSelectionRangeProvider {\n    provideSelectionRanges(model, positions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = [];\n            for (const position of positions) {\n                const bucket = [];\n                result.push(bucket);\n                const ranges = new Map();\n                yield new Promise(resolve => BracketSelectionRangeProvider._bracketsRightYield(resolve, 0, model, position, ranges));\n                yield new Promise(resolve => BracketSelectionRangeProvider._bracketsLeftYield(resolve, 0, model, position, ranges, bucket));\n            }\n            return result;\n        });\n    }\n    static _bracketsRightYield(resolve, round, model, pos, ranges) {\n        const counts = new Map();\n        const t1 = Date.now();\n        while (true) {\n            if (round >= BracketSelectionRangeProvider._maxRounds) {\n                resolve();\n                break;\n            }\n            if (!pos) {\n                resolve();\n                break;\n            }\n            const bracket = model.bracketPairs.findNextBracket(pos);\n            if (!bracket) {\n                resolve();\n                break;\n            }\n            const d = Date.now() - t1;\n            if (d > BracketSelectionRangeProvider._maxDuration) {\n                setTimeout(() => BracketSelectionRangeProvider._bracketsRightYield(resolve, round + 1, model, pos, ranges));\n                break;\n            }\n            if (bracket.bracketInfo.isOpeningBracket) {\n                const key = bracket.bracketInfo.bracketText;\n                // wait for closing\n                const val = counts.has(key) ? counts.get(key) : 0;\n                counts.set(key, val + 1);\n            }\n            else {\n                const key = bracket.bracketInfo.getOpeningBrackets()[0].bracketText;\n                // process closing\n                let val = counts.has(key) ? counts.get(key) : 0;\n                val -= 1;\n                counts.set(key, Math.max(0, val));\n                if (val < 0) {\n                    let list = ranges.get(key);\n                    if (!list) {\n                        list = new LinkedList();\n                        ranges.set(key, list);\n                    }\n                    list.push(bracket.range);\n                }\n            }\n            pos = bracket.range.getEndPosition();\n        }\n    }\n    static _bracketsLeftYield(resolve, round, model, pos, ranges, bucket) {\n        const counts = new Map();\n        const t1 = Date.now();\n        while (true) {\n            if (round >= BracketSelectionRangeProvider._maxRounds && ranges.size === 0) {\n                resolve();\n                break;\n            }\n            if (!pos) {\n                resolve();\n                break;\n            }\n            const bracket = model.bracketPairs.findPrevBracket(pos);\n            if (!bracket) {\n                resolve();\n                break;\n            }\n            const d = Date.now() - t1;\n            if (d > BracketSelectionRangeProvider._maxDuration) {\n                setTimeout(() => BracketSelectionRangeProvider._bracketsLeftYield(resolve, round + 1, model, pos, ranges, bucket));\n                break;\n            }\n            if (!bracket.bracketInfo.isOpeningBracket) {\n                const key = bracket.bracketInfo.getOpeningBrackets()[0].bracketText;\n                // wait for opening\n                const val = counts.has(key) ? counts.get(key) : 0;\n                counts.set(key, val + 1);\n            }\n            else {\n                const key = bracket.bracketInfo.bracketText;\n                // opening\n                let val = counts.has(key) ? counts.get(key) : 0;\n                val -= 1;\n                counts.set(key, Math.max(0, val));\n                if (val < 0) {\n                    const list = ranges.get(key);\n                    if (list) {\n                        const closing = list.shift();\n                        if (list.size === 0) {\n                            ranges.delete(key);\n                        }\n                        const innerBracket = Range.fromPositions(bracket.range.getEndPosition(), closing.getStartPosition());\n                        const outerBracket = Range.fromPositions(bracket.range.getStartPosition(), closing.getEndPosition());\n                        bucket.push({ range: innerBracket });\n                        bucket.push({ range: outerBracket });\n                        BracketSelectionRangeProvider._addBracketLeading(model, outerBracket, bucket);\n                    }\n                }\n            }\n            pos = bracket.range.getStartPosition();\n        }\n    }\n    static _addBracketLeading(model, bracket, bucket) {\n        if (bracket.startLineNumber === bracket.endLineNumber) {\n            return;\n        }\n        // xxxxxxxx {\n        //\n        // }\n        const startLine = bracket.startLineNumber;\n        const column = model.getLineFirstNonWhitespaceColumn(startLine);\n        if (column !== 0 && column !== bracket.startColumn) {\n            bucket.push({ range: Range.fromPositions(new Position(startLine, column), bracket.getEndPosition()) });\n            bucket.push({ range: Range.fromPositions(new Position(startLine, 1), bracket.getEndPosition()) });\n        }\n        // xxxxxxxx\n        // {\n        //\n        // }\n        const aboveLine = startLine - 1;\n        if (aboveLine > 0) {\n            const column = model.getLineFirstNonWhitespaceColumn(aboveLine);\n            if (column === bracket.startColumn && column !== model.getLineLastNonWhitespaceColumn(aboveLine)) {\n                bucket.push({ range: Range.fromPositions(new Position(aboveLine, column), bracket.getEndPosition()) });\n                bucket.push({ range: Range.fromPositions(new Position(aboveLine, 1), bracket.getEndPosition()) });\n            }\n        }\n    }\n}\nBracketSelectionRangeProvider._maxDuration = 30;\nBracketSelectionRangeProvider._maxRounds = 2;\nexport { BracketSelectionRangeProvider };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isLowerAsciiLetter, isUpperAsciiLetter } from '../../../../base/common/strings.js';\nimport { Range } from '../../../common/core/range.js';\nexport class WordSelectionRangeProvider {\n    provideSelectionRanges(model, positions) {\n        const result = [];\n        for (const position of positions) {\n            const bucket = [];\n            result.push(bucket);\n            this._addInWordRanges(bucket, model, position);\n            this._addWordRanges(bucket, model, position);\n            this._addWhitespaceLine(bucket, model, position);\n            bucket.push({ range: model.getFullModelRange() });\n        }\n        return result;\n    }\n    _addInWordRanges(bucket, model, pos) {\n        const obj = model.getWordAtPosition(pos);\n        if (!obj) {\n            return;\n        }\n        const { word, startColumn } = obj;\n        const offset = pos.column - startColumn;\n        let start = offset;\n        let end = offset;\n        let lastCh = 0;\n        // LEFT anchor (start)\n        for (; start >= 0; start--) {\n            const ch = word.charCodeAt(start);\n            if ((start !== offset) && (ch === 95 /* CharCode.Underline */ || ch === 45 /* CharCode.Dash */)) {\n                // foo-bar OR foo_bar\n                break;\n            }\n            else if (isLowerAsciiLetter(ch) && isUpperAsciiLetter(lastCh)) {\n                // fooBar\n                break;\n            }\n            lastCh = ch;\n        }\n        start += 1;\n        // RIGHT anchor (end)\n        for (; end < word.length; end++) {\n            const ch = word.charCodeAt(end);\n            if (isUpperAsciiLetter(ch) && isLowerAsciiLetter(lastCh)) {\n                // fooBar\n                break;\n            }\n            else if (ch === 95 /* CharCode.Underline */ || ch === 45 /* CharCode.Dash */) {\n                // foo-bar OR foo_bar\n                break;\n            }\n            lastCh = ch;\n        }\n        if (start < end) {\n            bucket.push({ range: new Range(pos.lineNumber, startColumn + start, pos.lineNumber, startColumn + end) });\n        }\n    }\n    _addWordRanges(bucket, model, pos) {\n        const word = model.getWordAtPosition(pos);\n        if (word) {\n            bucket.push({ range: new Range(pos.lineNumber, word.startColumn, pos.lineNumber, word.endColumn) });\n        }\n    }\n    _addWhitespaceLine(bucket, model, pos) {\n        if (model.getLineLength(pos.lineNumber) > 0\n            && model.getLineFirstNonWhitespaceColumn(pos.lineNumber) === 0\n            && model.getLineLastNonWhitespaceColumn(pos.lineNumber) === 0) {\n            bucket.push({ range: new Range(pos.lineNumber, 1, pos.lineNumber, model.getLineMaxColumn(pos.lineNumber)) });\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { BracketSelectionRangeProvider } from './bracketSelections.js';\nimport { WordSelectionRangeProvider } from './wordSelections.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nclass SelectionRanges {\n    constructor(index, ranges) {\n        this.index = index;\n        this.ranges = ranges;\n    }\n    mov(fwd) {\n        const index = this.index + (fwd ? 1 : -1);\n        if (index < 0 || index >= this.ranges.length) {\n            return this;\n        }\n        const res = new SelectionRanges(index, this.ranges);\n        if (res.ranges[index].equalsRange(this.ranges[this.index])) {\n            // next range equals this range, retry with next-next\n            return res.mov(fwd);\n        }\n        return res;\n    }\n}\nlet SmartSelectController = class SmartSelectController {\n    static get(editor) {\n        return editor.getContribution(SmartSelectController.ID);\n    }\n    constructor(_editor, _languageFeaturesService) {\n        this._editor = _editor;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._ignoreSelection = false;\n    }\n    dispose() {\n        var _a;\n        (_a = this._selectionListener) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n    run(forward) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._editor.hasModel()) {\n                return;\n            }\n            const selections = this._editor.getSelections();\n            const model = this._editor.getModel();\n            if (!this._state) {\n                yield provideSelectionRanges(this._languageFeaturesService.selectionRangeProvider, model, selections.map(s => s.getPosition()), this._editor.getOption(107 /* EditorOption.smartSelect */), CancellationToken.None).then(ranges => {\n                    var _a;\n                    if (!arrays.isNonEmptyArray(ranges) || ranges.length !== selections.length) {\n                        // invalid result\n                        return;\n                    }\n                    if (!this._editor.hasModel() || !arrays.equals(this._editor.getSelections(), selections, (a, b) => a.equalsSelection(b))) {\n                        // invalid editor state\n                        return;\n                    }\n                    for (let i = 0; i < ranges.length; i++) {\n                        ranges[i] = ranges[i].filter(range => {\n                            // filter ranges inside the selection\n                            return range.containsPosition(selections[i].getStartPosition()) && range.containsPosition(selections[i].getEndPosition());\n                        });\n                        // prepend current selection\n                        ranges[i].unshift(selections[i]);\n                    }\n                    this._state = ranges.map(ranges => new SelectionRanges(0, ranges));\n                    // listen to caret move and forget about state\n                    (_a = this._selectionListener) === null || _a === void 0 ? void 0 : _a.dispose();\n                    this._selectionListener = this._editor.onDidChangeCursorPosition(() => {\n                        var _a;\n                        if (!this._ignoreSelection) {\n                            (_a = this._selectionListener) === null || _a === void 0 ? void 0 : _a.dispose();\n                            this._state = undefined;\n                        }\n                    });\n                });\n            }\n            if (!this._state) {\n                // no state\n                return;\n            }\n            this._state = this._state.map(state => state.mov(forward));\n            const newSelections = this._state.map(state => Selection.fromPositions(state.ranges[state.index].getStartPosition(), state.ranges[state.index].getEndPosition()));\n            this._ignoreSelection = true;\n            try {\n                this._editor.setSelections(newSelections);\n            }\n            finally {\n                this._ignoreSelection = false;\n            }\n        });\n    }\n};\nSmartSelectController.ID = 'editor.contrib.smartSelectController';\nSmartSelectController = __decorate([\n    __param(1, ILanguageFeaturesService)\n], SmartSelectController);\nclass AbstractSmartSelect extends EditorAction {\n    constructor(forward, opts) {\n        super(opts);\n        this._forward = forward;\n    }\n    run(_accessor, editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const controller = SmartSelectController.get(editor);\n            if (controller) {\n                yield controller.run(this._forward);\n            }\n        });\n    }\n}\nclass GrowSelectionAction extends AbstractSmartSelect {\n    constructor() {\n        super(true, {\n            id: 'editor.action.smartSelect.expand',\n            label: nls.localize('smartSelect.expand', \"Expand Selection\"),\n            alias: 'Expand Selection',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 17 /* KeyCode.RightArrow */,\n                mac: {\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */,\n                    secondary: [256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */],\n                },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '1_basic',\n                title: nls.localize({ key: 'miSmartSelectGrow', comment: ['&& denotes a mnemonic'] }, \"&&Expand Selection\"),\n                order: 2\n            }\n        });\n    }\n}\n// renamed command id\nCommandsRegistry.registerCommandAlias('editor.action.smartSelect.grow', 'editor.action.smartSelect.expand');\nclass ShrinkSelectionAction extends AbstractSmartSelect {\n    constructor() {\n        super(false, {\n            id: 'editor.action.smartSelect.shrink',\n            label: nls.localize('smartSelect.shrink', \"Shrink Selection\"),\n            alias: 'Shrink Selection',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 15 /* KeyCode.LeftArrow */,\n                mac: {\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */,\n                    secondary: [256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */],\n                },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '1_basic',\n                title: nls.localize({ key: 'miSmartSelectShrink', comment: ['&& denotes a mnemonic'] }, \"&&Shrink Selection\"),\n                order: 3\n            }\n        });\n    }\n}\nregisterEditorContribution(SmartSelectController.ID, SmartSelectController, 4 /* EditorContributionInstantiation.Lazy */);\nregisterEditorAction(GrowSelectionAction);\nregisterEditorAction(ShrinkSelectionAction);\nexport function provideSelectionRanges(registry, model, positions, options, token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const providers = registry.all(model)\n            .concat(new WordSelectionRangeProvider()); // ALWAYS have word based selection range\n        if (providers.length === 1) {\n            // add word selection and bracket selection when no provider exists\n            providers.unshift(new BracketSelectionRangeProvider());\n        }\n        const work = [];\n        const allRawRanges = [];\n        for (const provider of providers) {\n            work.push(Promise.resolve(provider.provideSelectionRanges(model, positions, token)).then(allProviderRanges => {\n                if (arrays.isNonEmptyArray(allProviderRanges) && allProviderRanges.length === positions.length) {\n                    for (let i = 0; i < positions.length; i++) {\n                        if (!allRawRanges[i]) {\n                            allRawRanges[i] = [];\n                        }\n                        for (const oneProviderRanges of allProviderRanges[i]) {\n                            if (Range.isIRange(oneProviderRanges.range) && Range.containsPosition(oneProviderRanges.range, positions[i])) {\n                                allRawRanges[i].push(Range.lift(oneProviderRanges.range));\n                            }\n                        }\n                    }\n                }\n            }, onUnexpectedExternalError));\n        }\n        yield Promise.all(work);\n        return allRawRanges.map(oneRawRanges => {\n            if (oneRawRanges.length === 0) {\n                return [];\n            }\n            // sort all by start/end position\n            oneRawRanges.sort((a, b) => {\n                if (Position.isBefore(a.getStartPosition(), b.getStartPosition())) {\n                    return 1;\n                }\n                else if (Position.isBefore(b.getStartPosition(), a.getStartPosition())) {\n                    return -1;\n                }\n                else if (Position.isBefore(a.getEndPosition(), b.getEndPosition())) {\n                    return -1;\n                }\n                else if (Position.isBefore(b.getEndPosition(), a.getEndPosition())) {\n                    return 1;\n                }\n                else {\n                    return 0;\n                }\n            });\n            // remove ranges that don't contain the former range or that are equal to the\n            // former range\n            const oneRanges = [];\n            let last;\n            for (const range of oneRawRanges) {\n                if (!last || (Range.containsRange(range, last) && !Range.equalsRange(range, last))) {\n                    oneRanges.push(range);\n                    last = range;\n                }\n            }\n            if (!options.selectLeadingAndTrailingWhitespace) {\n                return oneRanges;\n            }\n            // add ranges that expand trivia at line starts and ends whenever a range\n            // wraps onto the a new line\n            const oneRangesWithTrivia = [oneRanges[0]];\n            for (let i = 1; i < oneRanges.length; i++) {\n                const prev = oneRanges[i - 1];\n                const cur = oneRanges[i];\n                if (cur.startLineNumber !== prev.startLineNumber || cur.endLineNumber !== prev.endLineNumber) {\n                    // add line/block range without leading/failing whitespace\n                    const rangeNoWhitespace = new Range(prev.startLineNumber, model.getLineFirstNonWhitespaceColumn(prev.startLineNumber), prev.endLineNumber, model.getLineLastNonWhitespaceColumn(prev.endLineNumber));\n                    if (rangeNoWhitespace.containsRange(prev) && !rangeNoWhitespace.equalsRange(prev) && cur.containsRange(rangeNoWhitespace) && !cur.equalsRange(rangeNoWhitespace)) {\n                        oneRangesWithTrivia.push(rangeNoWhitespace);\n                    }\n                    // add line/block range\n                    const rangeFull = new Range(prev.startLineNumber, 1, prev.endLineNumber, model.getLineMaxColumn(prev.endLineNumber));\n                    if (rangeFull.containsRange(prev) && !rangeFull.equalsRange(rangeNoWhitespace) && cur.containsRange(rangeFull) && !cur.equalsRange(rangeFull)) {\n                        oneRangesWithTrivia.push(rangeFull);\n                    }\n                }\n                oneRangesWithTrivia.push(cur);\n            }\n            return oneRangesWithTrivia;\n        });\n    });\n}\nCommandsRegistry.registerCommand('_executeSelectionRangeProvider', function (accessor, ...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [resource, positions] = args;\n        assertType(URI.isUri(resource));\n        const registry = accessor.get(ILanguageFeaturesService).selectionRangeProvider;\n        const reference = yield accessor.get(ITextModelService).createModelReference(resource);\n        try {\n            return provideSelectionRanges(registry, reference.object.textEditorModel, positions, { selectLeadingAndTrailingWhitespace: true }, CancellationToken.None);\n        }\n        finally {\n            reference.dispose();\n        }\n    });\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { EditorCommand, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { showSimpleSuggestions } from '../../suggest/browser/suggest.js';\nimport { localize } from '../../../../nls.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { SnippetSession } from './snippetSession.js';\nconst _defaultOptions = {\n    overwriteBefore: 0,\n    overwriteAfter: 0,\n    undoStopBefore: true,\n    undoStopAfter: true,\n    adjustWhitespace: true,\n    clipboardText: undefined,\n    overtypingCapturer: undefined\n};\nlet SnippetController2 = class SnippetController2 {\n    static get(editor) {\n        return editor.getContribution(SnippetController2.ID);\n    }\n    constructor(_editor, _logService, _languageFeaturesService, contextKeyService, _languageConfigurationService) {\n        this._editor = _editor;\n        this._logService = _logService;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._snippetListener = new DisposableStore();\n        this._modelVersionId = -1;\n        this._inSnippet = SnippetController2.InSnippetMode.bindTo(contextKeyService);\n        this._hasNextTabstop = SnippetController2.HasNextTabstop.bindTo(contextKeyService);\n        this._hasPrevTabstop = SnippetController2.HasPrevTabstop.bindTo(contextKeyService);\n    }\n    dispose() {\n        var _a;\n        this._inSnippet.reset();\n        this._hasPrevTabstop.reset();\n        this._hasNextTabstop.reset();\n        (_a = this._session) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._snippetListener.dispose();\n    }\n    insert(template, opts) {\n        // this is here to find out more about the yet-not-understood\n        // error that sometimes happens when we fail to inserted a nested\n        // snippet\n        try {\n            this._doInsert(template, typeof opts === 'undefined' ? _defaultOptions : Object.assign(Object.assign({}, _defaultOptions), opts));\n        }\n        catch (e) {\n            this.cancel();\n            this._logService.error(e);\n            this._logService.error('snippet_error');\n            this._logService.error('insert_template=', template);\n            this._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');\n        }\n    }\n    _doInsert(template, opts) {\n        var _a;\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        // don't listen while inserting the snippet\n        // as that is the inflight state causing cancelation\n        this._snippetListener.clear();\n        if (opts.undoStopBefore) {\n            this._editor.getModel().pushStackElement();\n        }\n        // don't merge\n        if (this._session && typeof template !== 'string') {\n            this.cancel();\n        }\n        if (!this._session) {\n            this._modelVersionId = this._editor.getModel().getAlternativeVersionId();\n            this._session = new SnippetSession(this._editor, template, opts, this._languageConfigurationService);\n            this._session.insert();\n        }\n        else {\n            assertType(typeof template === 'string');\n            this._session.merge(template, opts);\n        }\n        if (opts.undoStopAfter) {\n            this._editor.getModel().pushStackElement();\n        }\n        // regster completion item provider when there is any choice element\n        if ((_a = this._session) === null || _a === void 0 ? void 0 : _a.hasChoice) {\n            this._choiceCompletionItemProvider = {\n                provideCompletionItems: (model, position) => {\n                    if (!this._session || model !== this._editor.getModel() || !Position.equals(this._editor.getPosition(), position)) {\n                        return undefined;\n                    }\n                    const { activeChoice } = this._session;\n                    if (!activeChoice || activeChoice.choice.options.length === 0) {\n                        return undefined;\n                    }\n                    const word = model.getValueInRange(activeChoice.range);\n                    const isAnyOfOptions = Boolean(activeChoice.choice.options.find(o => o.value === word));\n                    const suggestions = [];\n                    for (let i = 0; i < activeChoice.choice.options.length; i++) {\n                        const option = activeChoice.choice.options[i];\n                        suggestions.push({\n                            kind: 13 /* CompletionItemKind.Value */,\n                            label: option.value,\n                            insertText: option.value,\n                            sortText: 'a'.repeat(i + 1),\n                            range: activeChoice.range,\n                            filterText: isAnyOfOptions ? `${word}_${option.value}` : undefined,\n                            command: { id: 'jumpToNextSnippetPlaceholder', title: localize('next', 'Go to next placeholder...') }\n                        });\n                    }\n                    return { suggestions };\n                }\n            };\n            const registration = this._languageFeaturesService.completionProvider.register({\n                language: this._editor.getModel().getLanguageId(),\n                pattern: this._editor.getModel().uri.fsPath,\n                scheme: this._editor.getModel().uri.scheme,\n                exclusive: true\n            }, this._choiceCompletionItemProvider);\n            this._snippetListener.add(registration);\n        }\n        this._updateState();\n        this._snippetListener.add(this._editor.onDidChangeModelContent(e => e.isFlush && this.cancel()));\n        this._snippetListener.add(this._editor.onDidChangeModel(() => this.cancel()));\n        this._snippetListener.add(this._editor.onDidChangeCursorSelection(() => this._updateState()));\n    }\n    _updateState() {\n        if (!this._session || !this._editor.hasModel()) {\n            // canceled in the meanwhile\n            return;\n        }\n        if (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) {\n            // undo until the 'before' state happened\n            // and makes use cancel snippet mode\n            return this.cancel();\n        }\n        if (!this._session.hasPlaceholder) {\n            // don't listen for selection changes and don't\n            // update context keys when the snippet is plain text\n            return this.cancel();\n        }\n        if (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) {\n            this._editor.getModel().pushStackElement();\n            return this.cancel();\n        }\n        this._inSnippet.set(true);\n        this._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);\n        this._hasNextTabstop.set(!this._session.isAtLastPlaceholder);\n        this._handleChoice();\n    }\n    _handleChoice() {\n        if (!this._session || !this._editor.hasModel()) {\n            this._currentChoice = undefined;\n            return;\n        }\n        const { activeChoice } = this._session;\n        if (!activeChoice || !this._choiceCompletionItemProvider) {\n            this._currentChoice = undefined;\n            return;\n        }\n        if (this._currentChoice !== activeChoice.choice) {\n            this._currentChoice = activeChoice.choice;\n            // trigger suggest with the special choice completion provider\n            queueMicrotask(() => {\n                showSimpleSuggestions(this._editor, this._choiceCompletionItemProvider);\n            });\n        }\n    }\n    finish() {\n        while (this._inSnippet.get()) {\n            this.next();\n        }\n    }\n    cancel(resetSelection = false) {\n        var _a;\n        this._inSnippet.reset();\n        this._hasPrevTabstop.reset();\n        this._hasNextTabstop.reset();\n        this._snippetListener.clear();\n        this._currentChoice = undefined;\n        (_a = this._session) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._session = undefined;\n        this._modelVersionId = -1;\n        if (resetSelection) {\n            // reset selection to the primary cursor when being asked\n            // for. this happens when explicitly cancelling snippet mode,\n            // e.g. when pressing ESC\n            this._editor.setSelections([this._editor.getSelection()]);\n        }\n    }\n    prev() {\n        var _a;\n        (_a = this._session) === null || _a === void 0 ? void 0 : _a.prev();\n        this._updateState();\n    }\n    next() {\n        var _a;\n        (_a = this._session) === null || _a === void 0 ? void 0 : _a.next();\n        this._updateState();\n    }\n    isInSnippet() {\n        return Boolean(this._inSnippet.get());\n    }\n};\nSnippetController2.ID = 'snippetController2';\nSnippetController2.InSnippetMode = new RawContextKey('inSnippetMode', false, localize('inSnippetMode', \"Whether the editor in current in snippet mode\"));\nSnippetController2.HasNextTabstop = new RawContextKey('hasNextTabstop', false, localize('hasNextTabstop', \"Whether there is a next tab stop when in snippet mode\"));\nSnippetController2.HasPrevTabstop = new RawContextKey('hasPrevTabstop', false, localize('hasPrevTabstop', \"Whether there is a previous tab stop when in snippet mode\"));\nSnippetController2 = __decorate([\n    __param(1, ILogService),\n    __param(2, ILanguageFeaturesService),\n    __param(3, IContextKeyService),\n    __param(4, ILanguageConfigurationService)\n], SnippetController2);\nexport { SnippetController2 };\nregisterEditorContribution(SnippetController2.ID, SnippetController2, 4 /* EditorContributionInstantiation.Lazy */);\nconst CommandCtor = EditorCommand.bindToContribution(SnippetController2.get);\nregisterEditorCommand(new CommandCtor({\n    id: 'jumpToNextSnippetPlaceholder',\n    precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasNextTabstop),\n    handler: ctrl => ctrl.next(),\n    kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2 /* KeyCode.Tab */\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'jumpToPrevSnippetPlaceholder',\n    precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasPrevTabstop),\n    handler: ctrl => ctrl.prev(),\n    kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024 /* KeyMod.Shift */ | 2 /* KeyCode.Tab */\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'leaveSnippet',\n    precondition: SnippetController2.InSnippetMode,\n    handler: ctrl => ctrl.cancel(true),\n    kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 9 /* KeyCode.Escape */,\n        secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'acceptSnippet',\n    precondition: SnippetController2.InSnippetMode,\n    handler: ctrl => ctrl.finish(),\n    // kbOpts: {\n    // \tweight: KeybindingWeight.EditorContrib + 30,\n    // \tkbExpr: EditorContextKeys.textFocus,\n    // \tprimary: KeyCode.Enter,\n    // }\n}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass Scanner {\n    constructor() {\n        this.value = '';\n        this.pos = 0;\n    }\n    static isDigitCharacter(ch) {\n        return ch >= 48 /* CharCode.Digit0 */ && ch <= 57 /* CharCode.Digit9 */;\n    }\n    static isVariableCharacter(ch) {\n        return ch === 95 /* CharCode.Underline */\n            || (ch >= 97 /* CharCode.a */ && ch <= 122 /* CharCode.z */)\n            || (ch >= 65 /* CharCode.A */ && ch <= 90 /* CharCode.Z */);\n    }\n    text(value) {\n        this.value = value;\n        this.pos = 0;\n    }\n    tokenText(token) {\n        return this.value.substr(token.pos, token.len);\n    }\n    next() {\n        if (this.pos >= this.value.length) {\n            return { type: 14 /* TokenType.EOF */, pos: this.pos, len: 0 };\n        }\n        const pos = this.pos;\n        let len = 0;\n        let ch = this.value.charCodeAt(pos);\n        let type;\n        // static types\n        type = Scanner._table[ch];\n        if (typeof type === 'number') {\n            this.pos += 1;\n            return { type, pos, len: 1 };\n        }\n        // number\n        if (Scanner.isDigitCharacter(ch)) {\n            type = 8 /* TokenType.Int */;\n            do {\n                len += 1;\n                ch = this.value.charCodeAt(pos + len);\n            } while (Scanner.isDigitCharacter(ch));\n            this.pos += len;\n            return { type, pos, len };\n        }\n        // variable name\n        if (Scanner.isVariableCharacter(ch)) {\n            type = 9 /* TokenType.VariableName */;\n            do {\n                ch = this.value.charCodeAt(pos + (++len));\n            } while (Scanner.isVariableCharacter(ch) || Scanner.isDigitCharacter(ch));\n            this.pos += len;\n            return { type, pos, len };\n        }\n        // format\n        type = 10 /* TokenType.Format */;\n        do {\n            len += 1;\n            ch = this.value.charCodeAt(pos + len);\n        } while (!isNaN(ch)\n            && typeof Scanner._table[ch] === 'undefined' // not static token\n            && !Scanner.isDigitCharacter(ch) // not number\n            && !Scanner.isVariableCharacter(ch) // not variable\n        );\n        this.pos += len;\n        return { type, pos, len };\n    }\n}\nScanner._table = {\n    [36 /* CharCode.DollarSign */]: 0 /* TokenType.Dollar */,\n    [58 /* CharCode.Colon */]: 1 /* TokenType.Colon */,\n    [44 /* CharCode.Comma */]: 2 /* TokenType.Comma */,\n    [123 /* CharCode.OpenCurlyBrace */]: 3 /* TokenType.CurlyOpen */,\n    [125 /* CharCode.CloseCurlyBrace */]: 4 /* TokenType.CurlyClose */,\n    [92 /* CharCode.Backslash */]: 5 /* TokenType.Backslash */,\n    [47 /* CharCode.Slash */]: 6 /* TokenType.Forwardslash */,\n    [124 /* CharCode.Pipe */]: 7 /* TokenType.Pipe */,\n    [43 /* CharCode.Plus */]: 11 /* TokenType.Plus */,\n    [45 /* CharCode.Dash */]: 12 /* TokenType.Dash */,\n    [63 /* CharCode.QuestionMark */]: 13 /* TokenType.QuestionMark */,\n};\nexport { Scanner };\nexport class Marker {\n    constructor() {\n        this._children = [];\n    }\n    appendChild(child) {\n        if (child instanceof Text && this._children[this._children.length - 1] instanceof Text) {\n            // this and previous child are text -> merge them\n            this._children[this._children.length - 1].value += child.value;\n        }\n        else {\n            // normal adoption of child\n            child.parent = this;\n            this._children.push(child);\n        }\n        return this;\n    }\n    replace(child, others) {\n        const { parent } = child;\n        const idx = parent.children.indexOf(child);\n        const newChildren = parent.children.slice(0);\n        newChildren.splice(idx, 1, ...others);\n        parent._children = newChildren;\n        (function _fixParent(children, parent) {\n            for (const child of children) {\n                child.parent = parent;\n                _fixParent(child.children, child);\n            }\n        })(others, parent);\n    }\n    get children() {\n        return this._children;\n    }\n    get rightMostDescendant() {\n        if (this._children.length > 0) {\n            return this._children[this._children.length - 1].rightMostDescendant;\n        }\n        return this;\n    }\n    get snippet() {\n        let candidate = this;\n        while (true) {\n            if (!candidate) {\n                return undefined;\n            }\n            if (candidate instanceof TextmateSnippet) {\n                return candidate;\n            }\n            candidate = candidate.parent;\n        }\n    }\n    toString() {\n        return this.children.reduce((prev, cur) => prev + cur.toString(), '');\n    }\n    len() {\n        return 0;\n    }\n}\nexport class Text extends Marker {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n    len() {\n        return this.value.length;\n    }\n    clone() {\n        return new Text(this.value);\n    }\n}\nexport class TransformableMarker extends Marker {\n}\nexport class Placeholder extends TransformableMarker {\n    static compareByIndex(a, b) {\n        if (a.index === b.index) {\n            return 0;\n        }\n        else if (a.isFinalTabstop) {\n            return 1;\n        }\n        else if (b.isFinalTabstop) {\n            return -1;\n        }\n        else if (a.index < b.index) {\n            return -1;\n        }\n        else if (a.index > b.index) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    constructor(index) {\n        super();\n        this.index = index;\n    }\n    get isFinalTabstop() {\n        return this.index === 0;\n    }\n    get choice() {\n        return this._children.length === 1 && this._children[0] instanceof Choice\n            ? this._children[0]\n            : undefined;\n    }\n    clone() {\n        const ret = new Placeholder(this.index);\n        if (this.transform) {\n            ret.transform = this.transform.clone();\n        }\n        ret._children = this.children.map(child => child.clone());\n        return ret;\n    }\n}\nexport class Choice extends Marker {\n    constructor() {\n        super(...arguments);\n        this.options = [];\n    }\n    appendChild(marker) {\n        if (marker instanceof Text) {\n            marker.parent = this;\n            this.options.push(marker);\n        }\n        return this;\n    }\n    toString() {\n        return this.options[0].value;\n    }\n    len() {\n        return this.options[0].len();\n    }\n    clone() {\n        const ret = new Choice();\n        this.options.forEach(ret.appendChild, ret);\n        return ret;\n    }\n}\nexport class Transform extends Marker {\n    constructor() {\n        super(...arguments);\n        this.regexp = new RegExp('');\n    }\n    resolve(value) {\n        const _this = this;\n        let didMatch = false;\n        let ret = value.replace(this.regexp, function () {\n            didMatch = true;\n            return _this._replace(Array.prototype.slice.call(arguments, 0, -2));\n        });\n        // when the regex didn't match and when the transform has\n        // else branches, then run those\n        if (!didMatch && this._children.some(child => child instanceof FormatString && Boolean(child.elseValue))) {\n            ret = this._replace([]);\n        }\n        return ret;\n    }\n    _replace(groups) {\n        let ret = '';\n        for (const marker of this._children) {\n            if (marker instanceof FormatString) {\n                let value = groups[marker.index] || '';\n                value = marker.resolve(value);\n                ret += value;\n            }\n            else {\n                ret += marker.toString();\n            }\n        }\n        return ret;\n    }\n    toString() {\n        return '';\n    }\n    clone() {\n        const ret = new Transform();\n        ret.regexp = new RegExp(this.regexp.source, '' + (this.regexp.ignoreCase ? 'i' : '') + (this.regexp.global ? 'g' : ''));\n        ret._children = this.children.map(child => child.clone());\n        return ret;\n    }\n}\nexport class FormatString extends Marker {\n    constructor(index, shorthandName, ifValue, elseValue) {\n        super();\n        this.index = index;\n        this.shorthandName = shorthandName;\n        this.ifValue = ifValue;\n        this.elseValue = elseValue;\n    }\n    resolve(value) {\n        if (this.shorthandName === 'upcase') {\n            return !value ? '' : value.toLocaleUpperCase();\n        }\n        else if (this.shorthandName === 'downcase') {\n            return !value ? '' : value.toLocaleLowerCase();\n        }\n        else if (this.shorthandName === 'capitalize') {\n            return !value ? '' : (value[0].toLocaleUpperCase() + value.substr(1));\n        }\n        else if (this.shorthandName === 'pascalcase') {\n            return !value ? '' : this._toPascalCase(value);\n        }\n        else if (this.shorthandName === 'camelcase') {\n            return !value ? '' : this._toCamelCase(value);\n        }\n        else if (Boolean(value) && typeof this.ifValue === 'string') {\n            return this.ifValue;\n        }\n        else if (!Boolean(value) && typeof this.elseValue === 'string') {\n            return this.elseValue;\n        }\n        else {\n            return value || '';\n        }\n    }\n    _toPascalCase(value) {\n        const match = value.match(/[a-z0-9]+/gi);\n        if (!match) {\n            return value;\n        }\n        return match.map(word => {\n            return word.charAt(0).toUpperCase() + word.substr(1);\n        })\n            .join('');\n    }\n    _toCamelCase(value) {\n        const match = value.match(/[a-z0-9]+/gi);\n        if (!match) {\n            return value;\n        }\n        return match.map((word, index) => {\n            if (index === 0) {\n                return word.charAt(0).toLowerCase() + word.substr(1);\n            }\n            return word.charAt(0).toUpperCase() + word.substr(1);\n        })\n            .join('');\n    }\n    clone() {\n        const ret = new FormatString(this.index, this.shorthandName, this.ifValue, this.elseValue);\n        return ret;\n    }\n}\nexport class Variable extends TransformableMarker {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    resolve(resolver) {\n        let value = resolver.resolve(this);\n        if (this.transform) {\n            value = this.transform.resolve(value || '');\n        }\n        if (value !== undefined) {\n            this._children = [new Text(value)];\n            return true;\n        }\n        return false;\n    }\n    clone() {\n        const ret = new Variable(this.name);\n        if (this.transform) {\n            ret.transform = this.transform.clone();\n        }\n        ret._children = this.children.map(child => child.clone());\n        return ret;\n    }\n}\nfunction walk(marker, visitor) {\n    const stack = [...marker];\n    while (stack.length > 0) {\n        const marker = stack.shift();\n        const recurse = visitor(marker);\n        if (!recurse) {\n            break;\n        }\n        stack.unshift(...marker.children);\n    }\n}\nexport class TextmateSnippet extends Marker {\n    get placeholderInfo() {\n        if (!this._placeholders) {\n            // fill in placeholders\n            const all = [];\n            let last;\n            this.walk(function (candidate) {\n                if (candidate instanceof Placeholder) {\n                    all.push(candidate);\n                    last = !last || last.index < candidate.index ? candidate : last;\n                }\n                return true;\n            });\n            this._placeholders = { all, last };\n        }\n        return this._placeholders;\n    }\n    get placeholders() {\n        const { all } = this.placeholderInfo;\n        return all;\n    }\n    offset(marker) {\n        let pos = 0;\n        let found = false;\n        this.walk(candidate => {\n            if (candidate === marker) {\n                found = true;\n                return false;\n            }\n            pos += candidate.len();\n            return true;\n        });\n        if (!found) {\n            return -1;\n        }\n        return pos;\n    }\n    fullLen(marker) {\n        let ret = 0;\n        walk([marker], marker => {\n            ret += marker.len();\n            return true;\n        });\n        return ret;\n    }\n    enclosingPlaceholders(placeholder) {\n        const ret = [];\n        let { parent } = placeholder;\n        while (parent) {\n            if (parent instanceof Placeholder) {\n                ret.push(parent);\n            }\n            parent = parent.parent;\n        }\n        return ret;\n    }\n    resolveVariables(resolver) {\n        this.walk(candidate => {\n            if (candidate instanceof Variable) {\n                if (candidate.resolve(resolver)) {\n                    this._placeholders = undefined;\n                }\n            }\n            return true;\n        });\n        return this;\n    }\n    appendChild(child) {\n        this._placeholders = undefined;\n        return super.appendChild(child);\n    }\n    replace(child, others) {\n        this._placeholders = undefined;\n        return super.replace(child, others);\n    }\n    clone() {\n        const ret = new TextmateSnippet();\n        this._children = this.children.map(child => child.clone());\n        return ret;\n    }\n    walk(visitor) {\n        walk(this.children, visitor);\n    }\n}\nexport class SnippetParser {\n    constructor() {\n        this._scanner = new Scanner();\n        this._token = { type: 14 /* TokenType.EOF */, pos: 0, len: 0 };\n    }\n    static escape(value) {\n        return value.replace(/\\$|}|\\\\/g, '\\\\$&');\n    }\n    static guessNeedsClipboard(template) {\n        return /\\${?CLIPBOARD/.test(template);\n    }\n    parse(value, insertFinalTabstop, enforceFinalTabstop) {\n        const snippet = new TextmateSnippet();\n        this.parseFragment(value, snippet);\n        this.ensureFinalTabstop(snippet, enforceFinalTabstop !== null && enforceFinalTabstop !== void 0 ? enforceFinalTabstop : false, insertFinalTabstop !== null && insertFinalTabstop !== void 0 ? insertFinalTabstop : false);\n        return snippet;\n    }\n    parseFragment(value, snippet) {\n        const offset = snippet.children.length;\n        this._scanner.text(value);\n        this._token = this._scanner.next();\n        while (this._parse(snippet)) {\n            // nothing\n        }\n        // fill in values for placeholders. the first placeholder of an index\n        // that has a value defines the value for all placeholders with that index\n        const placeholderDefaultValues = new Map();\n        const incompletePlaceholders = [];\n        snippet.walk(marker => {\n            if (marker instanceof Placeholder) {\n                if (marker.isFinalTabstop) {\n                    placeholderDefaultValues.set(0, undefined);\n                }\n                else if (!placeholderDefaultValues.has(marker.index) && marker.children.length > 0) {\n                    placeholderDefaultValues.set(marker.index, marker.children);\n                }\n                else {\n                    incompletePlaceholders.push(marker);\n                }\n            }\n            return true;\n        });\n        const fillInIncompletePlaceholder = (placeholder, stack) => {\n            const defaultValues = placeholderDefaultValues.get(placeholder.index);\n            if (!defaultValues) {\n                return;\n            }\n            const clone = new Placeholder(placeholder.index);\n            clone.transform = placeholder.transform;\n            for (const child of defaultValues) {\n                const newChild = child.clone();\n                clone.appendChild(newChild);\n                // \"recurse\" on children that are again placeholders\n                if (newChild instanceof Placeholder && placeholderDefaultValues.has(newChild.index) && !stack.has(newChild.index)) {\n                    stack.add(newChild.index);\n                    fillInIncompletePlaceholder(newChild, stack);\n                    stack.delete(newChild.index);\n                }\n            }\n            snippet.replace(placeholder, [clone]);\n        };\n        const stack = new Set();\n        for (const placeholder of incompletePlaceholders) {\n            fillInIncompletePlaceholder(placeholder, stack);\n        }\n        return snippet.children.slice(offset);\n    }\n    ensureFinalTabstop(snippet, enforceFinalTabstop, insertFinalTabstop) {\n        if (enforceFinalTabstop || insertFinalTabstop && snippet.placeholders.length > 0) {\n            const finalTabstop = snippet.placeholders.find(p => p.index === 0);\n            if (!finalTabstop) {\n                // the snippet uses placeholders but has no\n                // final tabstop defined -> insert at the end\n                snippet.appendChild(new Placeholder(0));\n            }\n        }\n    }\n    _accept(type, value) {\n        if (type === undefined || this._token.type === type) {\n            const ret = !value ? true : this._scanner.tokenText(this._token);\n            this._token = this._scanner.next();\n            return ret;\n        }\n        return false;\n    }\n    _backTo(token) {\n        this._scanner.pos = token.pos + token.len;\n        this._token = token;\n        return false;\n    }\n    _until(type) {\n        const start = this._token;\n        while (this._token.type !== type) {\n            if (this._token.type === 14 /* TokenType.EOF */) {\n                return false;\n            }\n            else if (this._token.type === 5 /* TokenType.Backslash */) {\n                const nextToken = this._scanner.next();\n                if (nextToken.type !== 0 /* TokenType.Dollar */\n                    && nextToken.type !== 4 /* TokenType.CurlyClose */\n                    && nextToken.type !== 5 /* TokenType.Backslash */) {\n                    return false;\n                }\n            }\n            this._token = this._scanner.next();\n        }\n        const value = this._scanner.value.substring(start.pos, this._token.pos).replace(/\\\\(\\$|}|\\\\)/g, '$1');\n        this._token = this._scanner.next();\n        return value;\n    }\n    _parse(marker) {\n        return this._parseEscaped(marker)\n            || this._parseTabstopOrVariableName(marker)\n            || this._parseComplexPlaceholder(marker)\n            || this._parseComplexVariable(marker)\n            || this._parseAnything(marker);\n    }\n    // \\$, \\\\, \\} -> just text\n    _parseEscaped(marker) {\n        let value;\n        if (value = this._accept(5 /* TokenType.Backslash */, true)) {\n            // saw a backslash, append escaped token or that backslash\n            value = this._accept(0 /* TokenType.Dollar */, true)\n                || this._accept(4 /* TokenType.CurlyClose */, true)\n                || this._accept(5 /* TokenType.Backslash */, true)\n                || value;\n            marker.appendChild(new Text(value));\n            return true;\n        }\n        return false;\n    }\n    // $foo -> variable, $1 -> tabstop\n    _parseTabstopOrVariableName(parent) {\n        let value;\n        const token = this._token;\n        const match = this._accept(0 /* TokenType.Dollar */)\n            && (value = this._accept(9 /* TokenType.VariableName */, true) || this._accept(8 /* TokenType.Int */, true));\n        if (!match) {\n            return this._backTo(token);\n        }\n        parent.appendChild(/^\\d+$/.test(value)\n            ? new Placeholder(Number(value))\n            : new Variable(value));\n        return true;\n    }\n    // ${1:<children>}, ${1} -> placeholder\n    _parseComplexPlaceholder(parent) {\n        let index;\n        const token = this._token;\n        const match = this._accept(0 /* TokenType.Dollar */)\n            && this._accept(3 /* TokenType.CurlyOpen */)\n            && (index = this._accept(8 /* TokenType.Int */, true));\n        if (!match) {\n            return this._backTo(token);\n        }\n        const placeholder = new Placeholder(Number(index));\n        if (this._accept(1 /* TokenType.Colon */)) {\n            // ${1:<children>}\n            while (true) {\n                // ...} -> done\n                if (this._accept(4 /* TokenType.CurlyClose */)) {\n                    parent.appendChild(placeholder);\n                    return true;\n                }\n                if (this._parse(placeholder)) {\n                    continue;\n                }\n                // fallback\n                parent.appendChild(new Text('${' + index + ':'));\n                placeholder.children.forEach(parent.appendChild, parent);\n                return true;\n            }\n        }\n        else if (placeholder.index > 0 && this._accept(7 /* TokenType.Pipe */)) {\n            // ${1|one,two,three|}\n            const choice = new Choice();\n            while (true) {\n                if (this._parseChoiceElement(choice)) {\n                    if (this._accept(2 /* TokenType.Comma */)) {\n                        // opt, -> more\n                        continue;\n                    }\n                    if (this._accept(7 /* TokenType.Pipe */)) {\n                        placeholder.appendChild(choice);\n                        if (this._accept(4 /* TokenType.CurlyClose */)) {\n                            // ..|} -> done\n                            parent.appendChild(placeholder);\n                            return true;\n                        }\n                    }\n                }\n                this._backTo(token);\n                return false;\n            }\n        }\n        else if (this._accept(6 /* TokenType.Forwardslash */)) {\n            // ${1/<regex>/<format>/<options>}\n            if (this._parseTransform(placeholder)) {\n                parent.appendChild(placeholder);\n                return true;\n            }\n            this._backTo(token);\n            return false;\n        }\n        else if (this._accept(4 /* TokenType.CurlyClose */)) {\n            // ${1}\n            parent.appendChild(placeholder);\n            return true;\n        }\n        else {\n            // ${1 <- missing curly or colon\n            return this._backTo(token);\n        }\n    }\n    _parseChoiceElement(parent) {\n        const token = this._token;\n        const values = [];\n        while (true) {\n            if (this._token.type === 2 /* TokenType.Comma */ || this._token.type === 7 /* TokenType.Pipe */) {\n                break;\n            }\n            let value;\n            if (value = this._accept(5 /* TokenType.Backslash */, true)) {\n                // \\, \\|, or \\\\\n                value = this._accept(2 /* TokenType.Comma */, true)\n                    || this._accept(7 /* TokenType.Pipe */, true)\n                    || this._accept(5 /* TokenType.Backslash */, true)\n                    || value;\n            }\n            else {\n                value = this._accept(undefined, true);\n            }\n            if (!value) {\n                // EOF\n                this._backTo(token);\n                return false;\n            }\n            values.push(value);\n        }\n        if (values.length === 0) {\n            this._backTo(token);\n            return false;\n        }\n        parent.appendChild(new Text(values.join('')));\n        return true;\n    }\n    // ${foo:<children>}, ${foo} -> variable\n    _parseComplexVariable(parent) {\n        let name;\n        const token = this._token;\n        const match = this._accept(0 /* TokenType.Dollar */)\n            && this._accept(3 /* TokenType.CurlyOpen */)\n            && (name = this._accept(9 /* TokenType.VariableName */, true));\n        if (!match) {\n            return this._backTo(token);\n        }\n        const variable = new Variable(name);\n        if (this._accept(1 /* TokenType.Colon */)) {\n            // ${foo:<children>}\n            while (true) {\n                // ...} -> done\n                if (this._accept(4 /* TokenType.CurlyClose */)) {\n                    parent.appendChild(variable);\n                    return true;\n                }\n                if (this._parse(variable)) {\n                    continue;\n                }\n                // fallback\n                parent.appendChild(new Text('${' + name + ':'));\n                variable.children.forEach(parent.appendChild, parent);\n                return true;\n            }\n        }\n        else if (this._accept(6 /* TokenType.Forwardslash */)) {\n            // ${foo/<regex>/<format>/<options>}\n            if (this._parseTransform(variable)) {\n                parent.appendChild(variable);\n                return true;\n            }\n            this._backTo(token);\n            return false;\n        }\n        else if (this._accept(4 /* TokenType.CurlyClose */)) {\n            // ${foo}\n            parent.appendChild(variable);\n            return true;\n        }\n        else {\n            // ${foo <- missing curly or colon\n            return this._backTo(token);\n        }\n    }\n    _parseTransform(parent) {\n        // ...<regex>/<format>/<options>}\n        const transform = new Transform();\n        let regexValue = '';\n        let regexOptions = '';\n        // (1) /regex\n        while (true) {\n            if (this._accept(6 /* TokenType.Forwardslash */)) {\n                break;\n            }\n            let escaped;\n            if (escaped = this._accept(5 /* TokenType.Backslash */, true)) {\n                escaped = this._accept(6 /* TokenType.Forwardslash */, true) || escaped;\n                regexValue += escaped;\n                continue;\n            }\n            if (this._token.type !== 14 /* TokenType.EOF */) {\n                regexValue += this._accept(undefined, true);\n                continue;\n            }\n            return false;\n        }\n        // (2) /format\n        while (true) {\n            if (this._accept(6 /* TokenType.Forwardslash */)) {\n                break;\n            }\n            let escaped;\n            if (escaped = this._accept(5 /* TokenType.Backslash */, true)) {\n                escaped = this._accept(5 /* TokenType.Backslash */, true) || this._accept(6 /* TokenType.Forwardslash */, true) || escaped;\n                transform.appendChild(new Text(escaped));\n                continue;\n            }\n            if (this._parseFormatString(transform) || this._parseAnything(transform)) {\n                continue;\n            }\n            return false;\n        }\n        // (3) /option\n        while (true) {\n            if (this._accept(4 /* TokenType.CurlyClose */)) {\n                break;\n            }\n            if (this._token.type !== 14 /* TokenType.EOF */) {\n                regexOptions += this._accept(undefined, true);\n                continue;\n            }\n            return false;\n        }\n        try {\n            transform.regexp = new RegExp(regexValue, regexOptions);\n        }\n        catch (e) {\n            // invalid regexp\n            return false;\n        }\n        parent.transform = transform;\n        return true;\n    }\n    _parseFormatString(parent) {\n        const token = this._token;\n        if (!this._accept(0 /* TokenType.Dollar */)) {\n            return false;\n        }\n        let complex = false;\n        if (this._accept(3 /* TokenType.CurlyOpen */)) {\n            complex = true;\n        }\n        const index = this._accept(8 /* TokenType.Int */, true);\n        if (!index) {\n            this._backTo(token);\n            return false;\n        }\n        else if (!complex) {\n            // $1\n            parent.appendChild(new FormatString(Number(index)));\n            return true;\n        }\n        else if (this._accept(4 /* TokenType.CurlyClose */)) {\n            // ${1}\n            parent.appendChild(new FormatString(Number(index)));\n            return true;\n        }\n        else if (!this._accept(1 /* TokenType.Colon */)) {\n            this._backTo(token);\n            return false;\n        }\n        if (this._accept(6 /* TokenType.Forwardslash */)) {\n            // ${1:/upcase}\n            const shorthand = this._accept(9 /* TokenType.VariableName */, true);\n            if (!shorthand || !this._accept(4 /* TokenType.CurlyClose */)) {\n                this._backTo(token);\n                return false;\n            }\n            else {\n                parent.appendChild(new FormatString(Number(index), shorthand));\n                return true;\n            }\n        }\n        else if (this._accept(11 /* TokenType.Plus */)) {\n            // ${1:+<if>}\n            const ifValue = this._until(4 /* TokenType.CurlyClose */);\n            if (ifValue) {\n                parent.appendChild(new FormatString(Number(index), undefined, ifValue, undefined));\n                return true;\n            }\n        }\n        else if (this._accept(12 /* TokenType.Dash */)) {\n            // ${2:-<else>}\n            const elseValue = this._until(4 /* TokenType.CurlyClose */);\n            if (elseValue) {\n                parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n                return true;\n            }\n        }\n        else if (this._accept(13 /* TokenType.QuestionMark */)) {\n            // ${2:?<if>:<else>}\n            const ifValue = this._until(1 /* TokenType.Colon */);\n            if (ifValue) {\n                const elseValue = this._until(4 /* TokenType.CurlyClose */);\n                if (elseValue) {\n                    parent.appendChild(new FormatString(Number(index), undefined, ifValue, elseValue));\n                    return true;\n                }\n            }\n        }\n        else {\n            // ${1:<else>}\n            const elseValue = this._until(4 /* TokenType.CurlyClose */);\n            if (elseValue) {\n                parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n                return true;\n            }\n        }\n        this._backTo(token);\n        return false;\n    }\n    _parseAnything(marker) {\n        if (this._token.type !== 14 /* TokenType.EOF */) {\n            marker.appendChild(new Text(this._scanner.tokenText(this._token)));\n            this._accept(undefined);\n            return true;\n        }\n        return false;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { normalizeDriveLetter } from '../../../../base/common/labels.js';\nimport * as path from '../../../../base/common/path.js';\nimport { dirname } from '../../../../base/common/resources.js';\nimport { commonPrefixLength, getLeadingWhitespace, isFalsyOrWhitespace, splitLines } from '../../../../base/common/strings.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { Text } from './snippetParser.js';\nimport * as nls from '../../../../nls.js';\nimport { WORKSPACE_EXTENSION, isSingleFolderWorkspaceIdentifier, toWorkspaceIdentifier, isEmptyWorkspaceIdentifier } from '../../../../platform/workspace/common/workspace.js';\nexport const KnownSnippetVariableNames = Object.freeze({\n    'CURRENT_YEAR': true,\n    'CURRENT_YEAR_SHORT': true,\n    'CURRENT_MONTH': true,\n    'CURRENT_DATE': true,\n    'CURRENT_HOUR': true,\n    'CURRENT_MINUTE': true,\n    'CURRENT_SECOND': true,\n    'CURRENT_DAY_NAME': true,\n    'CURRENT_DAY_NAME_SHORT': true,\n    'CURRENT_MONTH_NAME': true,\n    'CURRENT_MONTH_NAME_SHORT': true,\n    'CURRENT_SECONDS_UNIX': true,\n    'SELECTION': true,\n    'CLIPBOARD': true,\n    'TM_SELECTED_TEXT': true,\n    'TM_CURRENT_LINE': true,\n    'TM_CURRENT_WORD': true,\n    'TM_LINE_INDEX': true,\n    'TM_LINE_NUMBER': true,\n    'TM_FILENAME': true,\n    'TM_FILENAME_BASE': true,\n    'TM_DIRECTORY': true,\n    'TM_FILEPATH': true,\n    'CURSOR_INDEX': true,\n    'CURSOR_NUMBER': true,\n    'RELATIVE_FILEPATH': true,\n    'BLOCK_COMMENT_START': true,\n    'BLOCK_COMMENT_END': true,\n    'LINE_COMMENT': true,\n    'WORKSPACE_NAME': true,\n    'WORKSPACE_FOLDER': true,\n    'RANDOM': true,\n    'RANDOM_HEX': true,\n    'UUID': true\n});\nexport class CompositeSnippetVariableResolver {\n    constructor(_delegates) {\n        this._delegates = _delegates;\n        //\n    }\n    resolve(variable) {\n        for (const delegate of this._delegates) {\n            const value = delegate.resolve(variable);\n            if (value !== undefined) {\n                return value;\n            }\n        }\n        return undefined;\n    }\n}\nexport class SelectionBasedVariableResolver {\n    constructor(_model, _selection, _selectionIdx, _overtypingCapturer) {\n        this._model = _model;\n        this._selection = _selection;\n        this._selectionIdx = _selectionIdx;\n        this._overtypingCapturer = _overtypingCapturer;\n        //\n    }\n    resolve(variable) {\n        const { name } = variable;\n        if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\n            let value = this._model.getValueInRange(this._selection) || undefined;\n            let isMultiline = this._selection.startLineNumber !== this._selection.endLineNumber;\n            // If there was no selected text, try to get last overtyped text\n            if (!value && this._overtypingCapturer) {\n                const info = this._overtypingCapturer.getLastOvertypedInfo(this._selectionIdx);\n                if (info) {\n                    value = info.value;\n                    isMultiline = info.multiline;\n                }\n            }\n            if (value && isMultiline && variable.snippet) {\n                // Selection is a multiline string which we indentation we now\n                // need to adjust. We compare the indentation of this variable\n                // with the indentation at the editor position and add potential\n                // extra indentation to the value\n                const line = this._model.getLineContent(this._selection.startLineNumber);\n                const lineLeadingWhitespace = getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\n                let varLeadingWhitespace = lineLeadingWhitespace;\n                variable.snippet.walk(marker => {\n                    if (marker === variable) {\n                        return false;\n                    }\n                    if (marker instanceof Text) {\n                        varLeadingWhitespace = getLeadingWhitespace(splitLines(marker.value).pop());\n                    }\n                    return true;\n                });\n                const whitespaceCommonLength = commonPrefixLength(varLeadingWhitespace, lineLeadingWhitespace);\n                value = value.replace(/(\\r\\n|\\r|\\n)(.*)/g, (m, newline, rest) => `${newline}${varLeadingWhitespace.substr(whitespaceCommonLength)}${rest}`);\n            }\n            return value;\n        }\n        else if (name === 'TM_CURRENT_LINE') {\n            return this._model.getLineContent(this._selection.positionLineNumber);\n        }\n        else if (name === 'TM_CURRENT_WORD') {\n            const info = this._model.getWordAtPosition({\n                lineNumber: this._selection.positionLineNumber,\n                column: this._selection.positionColumn\n            });\n            return info && info.word || undefined;\n        }\n        else if (name === 'TM_LINE_INDEX') {\n            return String(this._selection.positionLineNumber - 1);\n        }\n        else if (name === 'TM_LINE_NUMBER') {\n            return String(this._selection.positionLineNumber);\n        }\n        else if (name === 'CURSOR_INDEX') {\n            return String(this._selectionIdx);\n        }\n        else if (name === 'CURSOR_NUMBER') {\n            return String(this._selectionIdx + 1);\n        }\n        return undefined;\n    }\n}\nexport class ModelBasedVariableResolver {\n    constructor(_labelService, _model) {\n        this._labelService = _labelService;\n        this._model = _model;\n        //\n    }\n    resolve(variable) {\n        const { name } = variable;\n        if (name === 'TM_FILENAME') {\n            return path.basename(this._model.uri.fsPath);\n        }\n        else if (name === 'TM_FILENAME_BASE') {\n            const name = path.basename(this._model.uri.fsPath);\n            const idx = name.lastIndexOf('.');\n            if (idx <= 0) {\n                return name;\n            }\n            else {\n                return name.slice(0, idx);\n            }\n        }\n        else if (name === 'TM_DIRECTORY') {\n            if (path.dirname(this._model.uri.fsPath) === '.') {\n                return '';\n            }\n            return this._labelService.getUriLabel(dirname(this._model.uri));\n        }\n        else if (name === 'TM_FILEPATH') {\n            return this._labelService.getUriLabel(this._model.uri);\n        }\n        else if (name === 'RELATIVE_FILEPATH') {\n            return this._labelService.getUriLabel(this._model.uri, { relative: true, noPrefix: true });\n        }\n        return undefined;\n    }\n}\nexport class ClipboardBasedVariableResolver {\n    constructor(_readClipboardText, _selectionIdx, _selectionCount, _spread) {\n        this._readClipboardText = _readClipboardText;\n        this._selectionIdx = _selectionIdx;\n        this._selectionCount = _selectionCount;\n        this._spread = _spread;\n        //\n    }\n    resolve(variable) {\n        if (variable.name !== 'CLIPBOARD') {\n            return undefined;\n        }\n        const clipboardText = this._readClipboardText();\n        if (!clipboardText) {\n            return undefined;\n        }\n        // `spread` is assigning each cursor a line of the clipboard\n        // text whenever there the line count equals the cursor count\n        // and when enabled\n        if (this._spread) {\n            const lines = clipboardText.split(/\\r\\n|\\n|\\r/).filter(s => !isFalsyOrWhitespace(s));\n            if (lines.length === this._selectionCount) {\n                return lines[this._selectionIdx];\n            }\n        }\n        return clipboardText;\n    }\n}\nlet CommentBasedVariableResolver = class CommentBasedVariableResolver {\n    constructor(_model, _selection, _languageConfigurationService) {\n        this._model = _model;\n        this._selection = _selection;\n        this._languageConfigurationService = _languageConfigurationService;\n        //\n    }\n    resolve(variable) {\n        const { name } = variable;\n        const langId = this._model.getLanguageIdAtPosition(this._selection.selectionStartLineNumber, this._selection.selectionStartColumn);\n        const config = this._languageConfigurationService.getLanguageConfiguration(langId).comments;\n        if (!config) {\n            return undefined;\n        }\n        if (name === 'LINE_COMMENT') {\n            return config.lineCommentToken || undefined;\n        }\n        else if (name === 'BLOCK_COMMENT_START') {\n            return config.blockCommentStartToken || undefined;\n        }\n        else if (name === 'BLOCK_COMMENT_END') {\n            return config.blockCommentEndToken || undefined;\n        }\n        return undefined;\n    }\n};\nCommentBasedVariableResolver = __decorate([\n    __param(2, ILanguageConfigurationService)\n], CommentBasedVariableResolver);\nexport { CommentBasedVariableResolver };\nclass TimeBasedVariableResolver {\n    constructor() {\n        this._date = new Date();\n    }\n    resolve(variable) {\n        const { name } = variable;\n        if (name === 'CURRENT_YEAR') {\n            return String(this._date.getFullYear());\n        }\n        else if (name === 'CURRENT_YEAR_SHORT') {\n            return String(this._date.getFullYear()).slice(-2);\n        }\n        else if (name === 'CURRENT_MONTH') {\n            return String(this._date.getMonth().valueOf() + 1).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_DATE') {\n            return String(this._date.getDate().valueOf()).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_HOUR') {\n            return String(this._date.getHours().valueOf()).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_MINUTE') {\n            return String(this._date.getMinutes().valueOf()).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_SECOND') {\n            return String(this._date.getSeconds().valueOf()).padStart(2, '0');\n        }\n        else if (name === 'CURRENT_DAY_NAME') {\n            return TimeBasedVariableResolver.dayNames[this._date.getDay()];\n        }\n        else if (name === 'CURRENT_DAY_NAME_SHORT') {\n            return TimeBasedVariableResolver.dayNamesShort[this._date.getDay()];\n        }\n        else if (name === 'CURRENT_MONTH_NAME') {\n            return TimeBasedVariableResolver.monthNames[this._date.getMonth()];\n        }\n        else if (name === 'CURRENT_MONTH_NAME_SHORT') {\n            return TimeBasedVariableResolver.monthNamesShort[this._date.getMonth()];\n        }\n        else if (name === 'CURRENT_SECONDS_UNIX') {\n            return String(Math.floor(this._date.getTime() / 1000));\n        }\n        return undefined;\n    }\n}\nTimeBasedVariableResolver.dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")];\nTimeBasedVariableResolver.dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")];\nTimeBasedVariableResolver.monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")];\nTimeBasedVariableResolver.monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")];\nexport { TimeBasedVariableResolver };\nexport class WorkspaceBasedVariableResolver {\n    constructor(_workspaceService) {\n        this._workspaceService = _workspaceService;\n        //\n    }\n    resolve(variable) {\n        if (!this._workspaceService) {\n            return undefined;\n        }\n        const workspaceIdentifier = toWorkspaceIdentifier(this._workspaceService.getWorkspace());\n        if (isEmptyWorkspaceIdentifier(workspaceIdentifier)) {\n            return undefined;\n        }\n        if (variable.name === 'WORKSPACE_NAME') {\n            return this._resolveWorkspaceName(workspaceIdentifier);\n        }\n        else if (variable.name === 'WORKSPACE_FOLDER') {\n            return this._resoveWorkspacePath(workspaceIdentifier);\n        }\n        return undefined;\n    }\n    _resolveWorkspaceName(workspaceIdentifier) {\n        if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n            return path.basename(workspaceIdentifier.uri.path);\n        }\n        let filename = path.basename(workspaceIdentifier.configPath.path);\n        if (filename.endsWith(WORKSPACE_EXTENSION)) {\n            filename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n        }\n        return filename;\n    }\n    _resoveWorkspacePath(workspaceIdentifier) {\n        if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n            return normalizeDriveLetter(workspaceIdentifier.uri.fsPath);\n        }\n        const filename = path.basename(workspaceIdentifier.configPath.path);\n        let folderpath = workspaceIdentifier.configPath.fsPath;\n        if (folderpath.endsWith(filename)) {\n            folderpath = folderpath.substr(0, folderpath.length - filename.length - 1);\n        }\n        return (folderpath ? normalizeDriveLetter(folderpath) : '/');\n    }\n}\nexport class RandomBasedVariableResolver {\n    resolve(variable) {\n        const { name } = variable;\n        if (name === 'RANDOM') {\n            return Math.random().toString().slice(-6);\n        }\n        else if (name === 'RANDOM_HEX') {\n            return Math.random().toString(16).slice(-6);\n        }\n        else if (name === 'UUID') {\n            return generateUuid();\n        }\n        return undefined;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { groupBy } from '../../../../base/common/arrays.js';\nimport { dispose } from '../../../../base/common/lifecycle.js';\nimport { getLeadingWhitespace } from '../../../../base/common/strings.js';\nimport './snippetSession.css';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { Choice, Placeholder, SnippetParser, Text, TextmateSnippet } from './snippetParser.js';\nimport { ClipboardBasedVariableResolver, CommentBasedVariableResolver, CompositeSnippetVariableResolver, ModelBasedVariableResolver, RandomBasedVariableResolver, SelectionBasedVariableResolver, TimeBasedVariableResolver, WorkspaceBasedVariableResolver } from './snippetVariables.js';\nclass OneSnippet {\n    constructor(_editor, _snippet, _snippetLineLeadingWhitespace) {\n        this._editor = _editor;\n        this._snippet = _snippet;\n        this._snippetLineLeadingWhitespace = _snippetLineLeadingWhitespace;\n        this._offset = -1;\n        this._nestingLevel = 1;\n        this._placeholderGroups = groupBy(_snippet.placeholders, Placeholder.compareByIndex);\n        this._placeholderGroupsIdx = -1;\n    }\n    initialize(textChange) {\n        this._offset = textChange.newPosition;\n    }\n    dispose() {\n        if (this._placeholderDecorations) {\n            this._editor.removeDecorations([...this._placeholderDecorations.values()]);\n        }\n        this._placeholderGroups.length = 0;\n    }\n    _initDecorations() {\n        if (this._offset === -1) {\n            throw new Error(`Snippet not initialized!`);\n        }\n        if (this._placeholderDecorations) {\n            // already initialized\n            return;\n        }\n        this._placeholderDecorations = new Map();\n        const model = this._editor.getModel();\n        this._editor.changeDecorations(accessor => {\n            // create a decoration for each placeholder\n            for (const placeholder of this._snippet.placeholders) {\n                const placeholderOffset = this._snippet.offset(placeholder);\n                const placeholderLen = this._snippet.fullLen(placeholder);\n                const range = Range.fromPositions(model.getPositionAt(this._offset + placeholderOffset), model.getPositionAt(this._offset + placeholderOffset + placeholderLen));\n                const options = placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive;\n                const handle = accessor.addDecoration(range, options);\n                this._placeholderDecorations.set(placeholder, handle);\n            }\n        });\n    }\n    move(fwd) {\n        if (!this._editor.hasModel()) {\n            return [];\n        }\n        this._initDecorations();\n        // Transform placeholder text if necessary\n        if (this._placeholderGroupsIdx >= 0) {\n            const operations = [];\n            for (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n                // Check if the placeholder has a transformation\n                if (placeholder.transform) {\n                    const id = this._placeholderDecorations.get(placeholder);\n                    const range = this._editor.getModel().getDecorationRange(id);\n                    const currentValue = this._editor.getModel().getValueInRange(range);\n                    const transformedValueLines = placeholder.transform.resolve(currentValue).split(/\\r\\n|\\r|\\n/);\n                    // fix indentation for transformed lines\n                    for (let i = 1; i < transformedValueLines.length; i++) {\n                        transformedValueLines[i] = this._editor.getModel().normalizeIndentation(this._snippetLineLeadingWhitespace + transformedValueLines[i]);\n                    }\n                    operations.push(EditOperation.replace(range, transformedValueLines.join(this._editor.getModel().getEOL())));\n                }\n            }\n            if (operations.length > 0) {\n                this._editor.executeEdits('snippet.placeholderTransform', operations);\n            }\n        }\n        let couldSkipThisPlaceholder = false;\n        if (fwd === true && this._placeholderGroupsIdx < this._placeholderGroups.length - 1) {\n            this._placeholderGroupsIdx += 1;\n            couldSkipThisPlaceholder = true;\n        }\n        else if (fwd === false && this._placeholderGroupsIdx > 0) {\n            this._placeholderGroupsIdx -= 1;\n            couldSkipThisPlaceholder = true;\n        }\n        else {\n            // the selection of the current placeholder might\n            // not acurate any more -> simply restore it\n        }\n        const newSelections = this._editor.getModel().changeDecorations(accessor => {\n            const activePlaceholders = new Set();\n            // change stickiness to always grow when typing at its edges\n            // because these decorations represent the currently active\n            // tabstop.\n            // Special case #1: reaching the final tabstop\n            // Special case #2: placeholders enclosing active placeholders\n            const selections = [];\n            for (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n                const id = this._placeholderDecorations.get(placeholder);\n                const range = this._editor.getModel().getDecorationRange(id);\n                selections.push(new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn));\n                // consider to skip this placeholder index when the decoration\n                // range is empty but when the placeholder wasn't. that's a strong\n                // hint that the placeholder has been deleted. (all placeholder must match this)\n                couldSkipThisPlaceholder = couldSkipThisPlaceholder && this._hasPlaceholderBeenCollapsed(placeholder);\n                accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n                activePlaceholders.add(placeholder);\n                for (const enclosingPlaceholder of this._snippet.enclosingPlaceholders(placeholder)) {\n                    const id = this._placeholderDecorations.get(enclosingPlaceholder);\n                    accessor.changeDecorationOptions(id, enclosingPlaceholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n                    activePlaceholders.add(enclosingPlaceholder);\n                }\n            }\n            // change stickness to never grow when typing at its edges\n            // so that in-active tabstops never grow\n            for (const [placeholder, id] of this._placeholderDecorations) {\n                if (!activePlaceholders.has(placeholder)) {\n                    accessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive);\n                }\n            }\n            return selections;\n        });\n        return !couldSkipThisPlaceholder ? newSelections !== null && newSelections !== void 0 ? newSelections : [] : this.move(fwd);\n    }\n    _hasPlaceholderBeenCollapsed(placeholder) {\n        // A placeholder is empty when it wasn't empty when authored but\n        // when its tracking decoration is empty. This also applies to all\n        // potential parent placeholders\n        let marker = placeholder;\n        while (marker) {\n            if (marker instanceof Placeholder) {\n                const id = this._placeholderDecorations.get(marker);\n                const range = this._editor.getModel().getDecorationRange(id);\n                if (range.isEmpty() && marker.toString().length > 0) {\n                    return true;\n                }\n            }\n            marker = marker.parent;\n        }\n        return false;\n    }\n    get isAtFirstPlaceholder() {\n        return this._placeholderGroupsIdx <= 0 || this._placeholderGroups.length === 0;\n    }\n    get isAtLastPlaceholder() {\n        return this._placeholderGroupsIdx === this._placeholderGroups.length - 1;\n    }\n    get hasPlaceholder() {\n        return this._snippet.placeholders.length > 0;\n    }\n    /**\n     * A snippet is trivial when it has no placeholder or only a final placeholder at\n     * its very end\n     */\n    get isTrivialSnippet() {\n        if (this._snippet.placeholders.length === 0) {\n            return true;\n        }\n        if (this._snippet.placeholders.length === 1) {\n            const [placeholder] = this._snippet.placeholders;\n            if (placeholder.isFinalTabstop) {\n                if (this._snippet.rightMostDescendant === placeholder) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    computePossibleSelections() {\n        const result = new Map();\n        for (const placeholdersWithEqualIndex of this._placeholderGroups) {\n            let ranges;\n            for (const placeholder of placeholdersWithEqualIndex) {\n                if (placeholder.isFinalTabstop) {\n                    // ignore those\n                    break;\n                }\n                if (!ranges) {\n                    ranges = [];\n                    result.set(placeholder.index, ranges);\n                }\n                const id = this._placeholderDecorations.get(placeholder);\n                const range = this._editor.getModel().getDecorationRange(id);\n                if (!range) {\n                    // one of the placeholder lost its decoration and\n                    // therefore we bail out and pretend the placeholder\n                    // (with its mirrors) doesn't exist anymore.\n                    result.delete(placeholder.index);\n                    break;\n                }\n                ranges.push(range);\n            }\n        }\n        return result;\n    }\n    get activeChoice() {\n        if (!this._placeholderDecorations) {\n            return undefined;\n        }\n        const placeholder = this._placeholderGroups[this._placeholderGroupsIdx][0];\n        if (!(placeholder === null || placeholder === void 0 ? void 0 : placeholder.choice)) {\n            return undefined;\n        }\n        const id = this._placeholderDecorations.get(placeholder);\n        if (!id) {\n            return undefined;\n        }\n        const range = this._editor.getModel().getDecorationRange(id);\n        if (!range) {\n            return undefined;\n        }\n        return { range, choice: placeholder.choice };\n    }\n    get hasChoice() {\n        let result = false;\n        this._snippet.walk(marker => {\n            result = marker instanceof Choice;\n            return !result;\n        });\n        return result;\n    }\n    merge(others) {\n        const model = this._editor.getModel();\n        this._nestingLevel *= 10;\n        this._editor.changeDecorations(accessor => {\n            // For each active placeholder take one snippet and merge it\n            // in that the placeholder (can be many for `$1foo$1foo`). Because\n            // everything is sorted by editor selection we can simply remove\n            // elements from the beginning of the array\n            for (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n                const nested = others.shift();\n                console.assert(nested._offset !== -1);\n                console.assert(!nested._placeholderDecorations);\n                // Massage placeholder-indicies of the nested snippet to be\n                // sorted right after the insertion point. This ensures we move\n                // through the placeholders in the correct order\n                const indexLastPlaceholder = nested._snippet.placeholderInfo.last.index;\n                for (const nestedPlaceholder of nested._snippet.placeholderInfo.all) {\n                    if (nestedPlaceholder.isFinalTabstop) {\n                        nestedPlaceholder.index = placeholder.index + ((indexLastPlaceholder + 1) / this._nestingLevel);\n                    }\n                    else {\n                        nestedPlaceholder.index = placeholder.index + (nestedPlaceholder.index / this._nestingLevel);\n                    }\n                }\n                this._snippet.replace(placeholder, nested._snippet.children);\n                // Remove the placeholder at which position are inserting\n                // the snippet and also remove its decoration.\n                const id = this._placeholderDecorations.get(placeholder);\n                accessor.removeDecoration(id);\n                this._placeholderDecorations.delete(placeholder);\n                // For each *new* placeholder we create decoration to monitor\n                // how and if it grows/shrinks.\n                for (const placeholder of nested._snippet.placeholders) {\n                    const placeholderOffset = nested._snippet.offset(placeholder);\n                    const placeholderLen = nested._snippet.fullLen(placeholder);\n                    const range = Range.fromPositions(model.getPositionAt(nested._offset + placeholderOffset), model.getPositionAt(nested._offset + placeholderOffset + placeholderLen));\n                    const handle = accessor.addDecoration(range, OneSnippet._decor.inactive);\n                    this._placeholderDecorations.set(placeholder, handle);\n                }\n            }\n            // Last, re-create the placeholder groups by sorting placeholders by their index.\n            this._placeholderGroups = groupBy(this._snippet.placeholders, Placeholder.compareByIndex);\n        });\n    }\n}\nOneSnippet._decor = {\n    active: ModelDecorationOptions.register({ description: 'snippet-placeholder-1', stickiness: 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */, className: 'snippet-placeholder' }),\n    inactive: ModelDecorationOptions.register({ description: 'snippet-placeholder-2', stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */, className: 'snippet-placeholder' }),\n    activeFinal: ModelDecorationOptions.register({ description: 'snippet-placeholder-3', stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */, className: 'finish-snippet-placeholder' }),\n    inactiveFinal: ModelDecorationOptions.register({ description: 'snippet-placeholder-4', stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */, className: 'finish-snippet-placeholder' }),\n};\nexport { OneSnippet };\nconst _defaultOptions = {\n    overwriteBefore: 0,\n    overwriteAfter: 0,\n    adjustWhitespace: true,\n    clipboardText: undefined,\n    overtypingCapturer: undefined\n};\nlet SnippetSession = class SnippetSession {\n    static adjustWhitespace(model, position, adjustIndentation, snippet, filter) {\n        const line = model.getLineContent(position.lineNumber);\n        const lineLeadingWhitespace = getLeadingWhitespace(line, 0, position.column - 1);\n        // the snippet as inserted\n        let snippetTextString;\n        snippet.walk(marker => {\n            // all text elements that are not inside choice\n            if (!(marker instanceof Text) || marker.parent instanceof Choice) {\n                return true;\n            }\n            // check with filter (iff provided)\n            if (filter && !filter.has(marker)) {\n                return true;\n            }\n            const lines = marker.value.split(/\\r\\n|\\r|\\n/);\n            if (adjustIndentation) {\n                // adjust indentation of snippet test\n                // -the snippet-start doesn't get extra-indented (lineLeadingWhitespace), only normalized\n                // -all N+1 lines get extra-indented and normalized\n                // -the text start get extra-indented and normalized when following a linebreak\n                const offset = snippet.offset(marker);\n                if (offset === 0) {\n                    // snippet start\n                    lines[0] = model.normalizeIndentation(lines[0]);\n                }\n                else {\n                    // check if text start is after a linebreak\n                    snippetTextString = snippetTextString !== null && snippetTextString !== void 0 ? snippetTextString : snippet.toString();\n                    const prevChar = snippetTextString.charCodeAt(offset - 1);\n                    if (prevChar === 10 /* CharCode.LineFeed */ || prevChar === 13 /* CharCode.CarriageReturn */) {\n                        lines[0] = model.normalizeIndentation(lineLeadingWhitespace + lines[0]);\n                    }\n                }\n                for (let i = 1; i < lines.length; i++) {\n                    lines[i] = model.normalizeIndentation(lineLeadingWhitespace + lines[i]);\n                }\n            }\n            const newValue = lines.join(model.getEOL());\n            if (newValue !== marker.value) {\n                marker.parent.replace(marker, [new Text(newValue)]);\n                snippetTextString = undefined;\n            }\n            return true;\n        });\n        return lineLeadingWhitespace;\n    }\n    static adjustSelection(model, selection, overwriteBefore, overwriteAfter) {\n        if (overwriteBefore !== 0 || overwriteAfter !== 0) {\n            // overwrite[Before|After] is compute using the position, not the whole\n            // selection. therefore we adjust the selection around that position\n            const { positionLineNumber, positionColumn } = selection;\n            const positionColumnBefore = positionColumn - overwriteBefore;\n            const positionColumnAfter = positionColumn + overwriteAfter;\n            const range = model.validateRange({\n                startLineNumber: positionLineNumber,\n                startColumn: positionColumnBefore,\n                endLineNumber: positionLineNumber,\n                endColumn: positionColumnAfter\n            });\n            selection = Selection.createWithDirection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn, selection.getDirection());\n        }\n        return selection;\n    }\n    static createEditsAndSnippetsFromSelections(editor, template, overwriteBefore, overwriteAfter, enforceFinalTabstop, adjustWhitespace, clipboardText, overtypingCapturer, languageConfigurationService) {\n        const edits = [];\n        const snippets = [];\n        if (!editor.hasModel()) {\n            return { edits, snippets };\n        }\n        const model = editor.getModel();\n        const workspaceService = editor.invokeWithinContext(accessor => accessor.get(IWorkspaceContextService));\n        const modelBasedVariableResolver = editor.invokeWithinContext(accessor => new ModelBasedVariableResolver(accessor.get(ILabelService), model));\n        const readClipboardText = () => clipboardText;\n        // know what text the overwrite[Before|After] extensions\n        // of the primary curser have selected because only when\n        // secondary selections extend to the same text we can grow them\n        const firstBeforeText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), overwriteBefore, 0));\n        const firstAfterText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), 0, overwriteAfter));\n        // remember the first non-whitespace column to decide if\n        // `keepWhitespace` should be overruled for secondary selections\n        const firstLineFirstNonWhitespace = model.getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber);\n        // sort selections by their start position but remeber\n        // the original index. that allows you to create correct\n        // offset-based selection logic without changing the\n        // primary selection\n        const indexedSelections = editor.getSelections()\n            .map((selection, idx) => ({ selection, idx }))\n            .sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n        for (const { selection, idx } of indexedSelections) {\n            // extend selection with the `overwriteBefore` and `overwriteAfter` and then\n            // compare if this matches the extensions of the primary selection\n            let extensionBefore = SnippetSession.adjustSelection(model, selection, overwriteBefore, 0);\n            let extensionAfter = SnippetSession.adjustSelection(model, selection, 0, overwriteAfter);\n            if (firstBeforeText !== model.getValueInRange(extensionBefore)) {\n                extensionBefore = selection;\n            }\n            if (firstAfterText !== model.getValueInRange(extensionAfter)) {\n                extensionAfter = selection;\n            }\n            // merge the before and after selection into one\n            const snippetSelection = selection\n                .setStartPosition(extensionBefore.startLineNumber, extensionBefore.startColumn)\n                .setEndPosition(extensionAfter.endLineNumber, extensionAfter.endColumn);\n            const snippet = new SnippetParser().parse(template, true, enforceFinalTabstop);\n            // adjust the template string to match the indentation and\n            // whitespace rules of this insert location (can be different for each cursor)\n            // happens when being asked for (default) or when this is a secondary\n            // cursor and the leading whitespace is different\n            const start = snippetSelection.getStartPosition();\n            const snippetLineLeadingWhitespace = SnippetSession.adjustWhitespace(model, start, adjustWhitespace || (idx > 0 && firstLineFirstNonWhitespace !== model.getLineFirstNonWhitespaceColumn(selection.positionLineNumber)), snippet);\n            snippet.resolveVariables(new CompositeSnippetVariableResolver([\n                modelBasedVariableResolver,\n                new ClipboardBasedVariableResolver(readClipboardText, idx, indexedSelections.length, editor.getOption(75 /* EditorOption.multiCursorPaste */) === 'spread'),\n                new SelectionBasedVariableResolver(model, selection, idx, overtypingCapturer),\n                new CommentBasedVariableResolver(model, selection, languageConfigurationService),\n                new TimeBasedVariableResolver,\n                new WorkspaceBasedVariableResolver(workspaceService),\n                new RandomBasedVariableResolver,\n            ]));\n            // store snippets with the index of their originating selection.\n            // that ensures the primiary cursor stays primary despite not being\n            // the one with lowest start position\n            edits[idx] = EditOperation.replace(snippetSelection, snippet.toString());\n            edits[idx].identifier = { major: idx, minor: 0 }; // mark the edit so only our undo edits will be used to generate end cursors\n            edits[idx]._isTracked = true;\n            snippets[idx] = new OneSnippet(editor, snippet, snippetLineLeadingWhitespace);\n        }\n        return { edits, snippets };\n    }\n    static createEditsAndSnippetsFromEdits(editor, snippetEdits, enforceFinalTabstop, adjustWhitespace, clipboardText, overtypingCapturer, languageConfigurationService) {\n        if (!editor.hasModel() || snippetEdits.length === 0) {\n            return { edits: [], snippets: [] };\n        }\n        const edits = [];\n        const model = editor.getModel();\n        const parser = new SnippetParser();\n        const snippet = new TextmateSnippet();\n        // snippet variables resolver\n        const resolver = new CompositeSnippetVariableResolver([\n            editor.invokeWithinContext(accessor => new ModelBasedVariableResolver(accessor.get(ILabelService), model)),\n            new ClipboardBasedVariableResolver(() => clipboardText, 0, editor.getSelections().length, editor.getOption(75 /* EditorOption.multiCursorPaste */) === 'spread'),\n            new SelectionBasedVariableResolver(model, editor.getSelection(), 0, overtypingCapturer),\n            new CommentBasedVariableResolver(model, editor.getSelection(), languageConfigurationService),\n            new TimeBasedVariableResolver,\n            new WorkspaceBasedVariableResolver(editor.invokeWithinContext(accessor => accessor.get(IWorkspaceContextService))),\n            new RandomBasedVariableResolver,\n        ]);\n        //\n        snippetEdits = snippetEdits.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n        let offset = 0;\n        for (let i = 0; i < snippetEdits.length; i++) {\n            const { range, template } = snippetEdits[i];\n            // gaps between snippet edits are appended as text nodes. this\n            // ensures placeholder-offsets are later correct\n            if (i > 0) {\n                const lastRange = snippetEdits[i - 1].range;\n                const textRange = Range.fromPositions(lastRange.getEndPosition(), range.getStartPosition());\n                const textNode = new Text(model.getValueInRange(textRange));\n                snippet.appendChild(textNode);\n                offset += textNode.value.length;\n            }\n            const newNodes = parser.parseFragment(template, snippet);\n            SnippetSession.adjustWhitespace(model, range.getStartPosition(), true, snippet, new Set(newNodes));\n            snippet.resolveVariables(resolver);\n            const snippetText = snippet.toString();\n            const snippetFragmentText = snippetText.slice(offset);\n            offset = snippetText.length;\n            // make edit\n            const edit = EditOperation.replace(range, snippetFragmentText);\n            edit.identifier = { major: i, minor: 0 }; // mark the edit so only our undo edits will be used to generate end cursors\n            edit._isTracked = true;\n            edits.push(edit);\n        }\n        //\n        parser.ensureFinalTabstop(snippet, enforceFinalTabstop, true);\n        return {\n            edits,\n            snippets: [new OneSnippet(editor, snippet, '')]\n        };\n    }\n    constructor(_editor, _template, _options = _defaultOptions, _languageConfigurationService) {\n        this._editor = _editor;\n        this._template = _template;\n        this._options = _options;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._templateMerges = [];\n        this._snippets = [];\n    }\n    dispose() {\n        dispose(this._snippets);\n    }\n    _logInfo() {\n        return `template=\"${this._template}\", merged_templates=\"${this._templateMerges.join(' -> ')}\"`;\n    }\n    insert() {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        // make insert edit and start with first selections\n        const { edits, snippets } = typeof this._template === 'string'\n            ? SnippetSession.createEditsAndSnippetsFromSelections(this._editor, this._template, this._options.overwriteBefore, this._options.overwriteAfter, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer, this._languageConfigurationService)\n            : SnippetSession.createEditsAndSnippetsFromEdits(this._editor, this._template, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer, this._languageConfigurationService);\n        this._snippets = snippets;\n        this._editor.executeEdits('snippet', edits, _undoEdits => {\n            // Sometimes, the text buffer will remove automatic whitespace when doing any edits,\n            // so we need to look only at the undo edits relevant for us.\n            // Our edits have an identifier set so that's how we can distinguish them\n            const undoEdits = _undoEdits.filter(edit => !!edit.identifier);\n            for (let idx = 0; idx < snippets.length; idx++) {\n                snippets[idx].initialize(undoEdits[idx].textChange);\n            }\n            if (this._snippets[0].hasPlaceholder) {\n                return this._move(true);\n            }\n            else {\n                return undoEdits\n                    .map(edit => Selection.fromPositions(edit.range.getEndPosition()));\n            }\n        });\n        this._editor.revealRange(this._editor.getSelections()[0]);\n    }\n    merge(template, options = _defaultOptions) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        this._templateMerges.push([this._snippets[0]._nestingLevel, this._snippets[0]._placeholderGroupsIdx, template]);\n        const { edits, snippets } = SnippetSession.createEditsAndSnippetsFromSelections(this._editor, template, options.overwriteBefore, options.overwriteAfter, true, options.adjustWhitespace, options.clipboardText, options.overtypingCapturer, this._languageConfigurationService);\n        this._editor.executeEdits('snippet', edits, _undoEdits => {\n            // Sometimes, the text buffer will remove automatic whitespace when doing any edits,\n            // so we need to look only at the undo edits relevant for us.\n            // Our edits have an identifier set so that's how we can distinguish them\n            const undoEdits = _undoEdits.filter(edit => !!edit.identifier);\n            for (let idx = 0; idx < snippets.length; idx++) {\n                snippets[idx].initialize(undoEdits[idx].textChange);\n            }\n            // Trivial snippets have no placeholder or are just the final placeholder. That means they\n            // are just text insertions and we don't need to merge the nested snippet into the existing\n            // snippet\n            const isTrivialSnippet = snippets[0].isTrivialSnippet;\n            if (!isTrivialSnippet) {\n                for (const snippet of this._snippets) {\n                    snippet.merge(snippets);\n                }\n                console.assert(snippets.length === 0);\n            }\n            if (this._snippets[0].hasPlaceholder && !isTrivialSnippet) {\n                return this._move(undefined);\n            }\n            else {\n                return undoEdits.map(edit => Selection.fromPositions(edit.range.getEndPosition()));\n            }\n        });\n    }\n    next() {\n        const newSelections = this._move(true);\n        this._editor.setSelections(newSelections);\n        this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n    }\n    prev() {\n        const newSelections = this._move(false);\n        this._editor.setSelections(newSelections);\n        this._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n    }\n    _move(fwd) {\n        const selections = [];\n        for (const snippet of this._snippets) {\n            const oneSelection = snippet.move(fwd);\n            selections.push(...oneSelection);\n        }\n        return selections;\n    }\n    get isAtFirstPlaceholder() {\n        return this._snippets[0].isAtFirstPlaceholder;\n    }\n    get isAtLastPlaceholder() {\n        return this._snippets[0].isAtLastPlaceholder;\n    }\n    get hasPlaceholder() {\n        return this._snippets[0].hasPlaceholder;\n    }\n    get hasChoice() {\n        return this._snippets[0].hasChoice;\n    }\n    get activeChoice() {\n        return this._snippets[0].activeChoice;\n    }\n    isSelectionWithinPlaceholders() {\n        if (!this.hasPlaceholder) {\n            return false;\n        }\n        const selections = this._editor.getSelections();\n        if (selections.length < this._snippets.length) {\n            // this means we started snippet mode with N\n            // selections and have M (N > M) selections.\n            // So one snippet is without selection -> cancel\n            return false;\n        }\n        const allPossibleSelections = new Map();\n        for (const snippet of this._snippets) {\n            const possibleSelections = snippet.computePossibleSelections();\n            // for the first snippet find the placeholder (and its ranges)\n            // that contain at least one selection. for all remaining snippets\n            // the same placeholder (and their ranges) must be used.\n            if (allPossibleSelections.size === 0) {\n                for (const [index, ranges] of possibleSelections) {\n                    ranges.sort(Range.compareRangesUsingStarts);\n                    for (const selection of selections) {\n                        if (ranges[0].containsRange(selection)) {\n                            allPossibleSelections.set(index, []);\n                            break;\n                        }\n                    }\n                }\n            }\n            if (allPossibleSelections.size === 0) {\n                // return false if we couldn't associate a selection to\n                // this (the first) snippet\n                return false;\n            }\n            // add selections from 'this' snippet so that we know all\n            // selections for this placeholder\n            allPossibleSelections.forEach((array, index) => {\n                array.push(...possibleSelections.get(index));\n            });\n        }\n        // sort selections (and later placeholder-ranges). then walk both\n        // arrays and make sure the placeholder-ranges contain the corresponding\n        // selection\n        selections.sort(Range.compareRangesUsingStarts);\n        for (const [index, ranges] of allPossibleSelections) {\n            if (ranges.length !== selections.length) {\n                allPossibleSelections.delete(index);\n                continue;\n            }\n            ranges.sort(Range.compareRangesUsingStarts);\n            for (let i = 0; i < ranges.length; i++) {\n                if (!ranges[i].containsRange(selections[i])) {\n                    allPossibleSelections.delete(index);\n                    continue;\n                }\n            }\n        }\n        // from all possible selections we have deleted those\n        // that don't match with the current selection. if we don't\n        // have any left, we don't have a selection anymore\n        return allPossibleSelections.size > 0;\n    }\n};\nSnippetSession = __decorate([\n    __param(3, ILanguageConfigurationService)\n], SnippetSession);\nexport { SnippetSession };\n"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","BracketSelectionRangeProvider","_classCallCheck","_createClass","key","model","positions","this","_regeneratorRuntime","mark","_callee","_iterator","_step","_loop","wrap","_context2","prev","_createForOfIteratorHelper","position","bucket","ranges","_context","push","Map","_bracketsRightYield","_bracketsLeftYield","stop","s","n","delegateYield","t1","f","finish","abrupt","round","pos","counts","Date","now","_maxRounds","bracket","bracketPairs","findNextBracket","_maxDuration","setTimeout","bracketInfo","isOpeningBracket","bracketText","val","has","get","set","getOpeningBrackets","Math","max","list","LinkedList","range","getEndPosition","size","findPrevBracket","closing","shift","delete","innerBracket","Range","getStartPosition","outerBracket","_addBracketLeading","startLineNumber","endLineNumber","startLine","column","getLineFirstNonWhitespaceColumn","startColumn","Position","aboveLine","getLineLastNonWhitespaceColumn","WordSelectionRangeProvider","_addInWordRanges","_addWordRanges","_addWhitespaceLine","getFullModelRange","err","obj","getWordAtPosition","word","offset","start","end","lastCh","ch","charCodeAt","isLowerAsciiLetter","isUpperAsciiLetter","length","lineNumber","endColumn","getLineLength","getLineMaxColumn","__decorate","decorators","target","desc","d","c","arguments","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","SelectionRanges","index","fwd","res","equalsRange","mov","SmartSelectController","_editor","_languageFeaturesService","_ignoreSelection","_a","_selectionListener","dispose","forward","selections","newSelections","_this","hasModel","getSelections","getModel","_state","provideSelectionRanges","selectionRangeProvider","map","getPosition","getOption","CancellationToken","arrays","a","b","equalsSelection","filter","containsPosition","unshift","onDidChangeCursorPosition","undefined","state","Selection","setSelections","editor","getContribution","ID","ILanguageFeaturesService","AbstractSmartSelect","_EditorAction","_inherits","_super","_createSuper","opts","_this2","call","_forward","_accessor","_callee2","controller","run","EditorAction","GrowSelectionAction","_AbstractSmartSelect","_super2","id","label","nls","alias","precondition","kbOpts","kbExpr","EditorContextKeys","primary","mac","secondary","weight","menuOpts","menuId","MenuId","group","title","comment","order","CommandsRegistry","ShrinkSelectionAction","_AbstractSmartSelect2","_super3","registry","options","token","_callee3","providers","work","allRawRanges","provider","_context3","all","concat","allProviderRanges","_step3","_iterator3","oneProviderRanges","onUnexpectedExternalError","oneRawRanges","sort","last","_step2","oneRanges","_iterator2","selectLeadingAndTrailingWhitespace","oneRangesWithTrivia","cur","rangeNoWhitespace","containsRange","rangeFull","registerEditorContribution","registerEditorAction","accessor","_len","args","Array","_key","_callee4","resource","reference","_context4","assertType","URI","ITextModelService","createModelReference","sent","object","textEditorModel","_defaultOptions","overwriteBefore","overwriteAfter","undoStopBefore","undoStopAfter","adjustWhitespace","clipboardText","overtypingCapturer","SnippetController2","_logService","contextKeyService","_languageConfigurationService","_snippetListener","DisposableStore","_modelVersionId","_inSnippet","InSnippetMode","bindTo","_hasNextTabstop","HasNextTabstop","_hasPrevTabstop","HasPrevTabstop","reset","_session","template","_doInsert","assign","cancel","error","_logInfo","clear","pushStackElement","merge","getAlternativeVersionId","SnippetSession","insert","hasChoice","_choiceCompletionItemProvider","provideCompletionItems","activeChoice","choice","getValueInRange","isAnyOfOptions","Boolean","find","o","suggestions","option","kind","insertText","sortText","repeat","filterText","command","localize","registration","completionProvider","register","language","getLanguageId","pattern","uri","fsPath","scheme","exclusive","add","_updateState","onDidChangeModelContent","isFlush","onDidChangeModel","onDidChangeCursorSelection","hasPlaceholder","isAtLastPlaceholder","isSelectionWithinPlaceholders","isAtFirstPlaceholder","_handleChoice","_currentChoice","queueMicrotask","showSimpleSuggestions","resetSelection","getSelection","RawContextKey","ILogService","IContextKeyService","ILanguageConfigurationService","CommandCtor","EditorCommand","registerEditorCommand","ContextKeyExpr","handler","ctrl","Scanner","substr","len","type","_table","isDigitCharacter","isVariableCharacter","isNaN","_Scanner$_table","_defineProperty","Marker","_children","child","Text","parent","others","idx","children","indexOf","newChildren","slice","splice","_toConsumableArray","_fixParent","rightMostDescendant","candidate","TextmateSnippet","reduce","toString","_Marker","TransformableMarker","_Marker2","Placeholder","_TransformableMarker","_this3","Choice","ret","transform","clone","isFinalTabstop","_Marker3","_super4","_this4","marker","forEach","appendChild","Transform","_Marker4","_super5","_this5","regexp","RegExp","didMatch","replace","_replace","prototype","some","FormatString","elseValue","groups","source","ignoreCase","global","_Marker5","_super6","shorthandName","ifValue","_this6","toLocaleUpperCase","toLocaleLowerCase","_toPascalCase","_toCamelCase","match","charAt","toUpperCase","join","toLowerCase","Variable","_TransformableMarker2","_super7","name","_this7","resolver","walk","visitor","stack","_Marker6","_super8","_placeholders","placeholderInfo","found","placeholder","_this8","_get","_getPrototypeOf","SnippetParser","_scanner","_token","insertFinalTabstop","enforceFinalTabstop","snippet","parseFragment","ensureFinalTabstop","text","_parse","placeholderDefaultValues","incompletePlaceholders","fillInIncompletePlaceholder","defaultValues","newChild","Set","_i","_incompletePlaceholde","placeholders","p","tokenText","nextToken","substring","_parseEscaped","_parseTabstopOrVariableName","_parseComplexPlaceholder","_parseComplexVariable","_parseAnything","_accept","test","Number","_backTo","_parseTransform","_parseChoiceElement","values","variable","regexValue","regexOptions","escaped","_parseFormatString","complex","shorthand","_until","CompositeSnippetVariableResolver","freeze","_delegates","SelectionBasedVariableResolver","_model","_selection","_selectionIdx","_overtypingCapturer","isMultiline","info","getLastOvertypedInfo","multiline","line","getLineContent","lineLeadingWhitespace","getLeadingWhitespace","varLeadingWhitespace","splitLines","pop","whitespaceCommonLength","commonPrefixLength","m","newline","rest","positionLineNumber","positionColumn","String","ModelBasedVariableResolver","_labelService","path","lastIndexOf","getUriLabel","dirname","relative","noPrefix","ClipboardBasedVariableResolver","_readClipboardText","_selectionCount","_spread","lines","split","isFalsyOrWhitespace","CommentBasedVariableResolver","langId","getLanguageIdAtPosition","selectionStartLineNumber","selectionStartColumn","config","getLanguageConfiguration","comments","lineCommentToken","blockCommentStartToken","blockCommentEndToken","TimeBasedVariableResolver","_date","getFullYear","getMonth","valueOf","padStart","getDate","getHours","getMinutes","getSeconds","dayNames","getDay","dayNamesShort","monthNames","monthNamesShort","floor","getTime","WorkspaceBasedVariableResolver","_workspaceService","workspaceIdentifier","toWorkspaceIdentifier","getWorkspace","isEmptyWorkspaceIdentifier","_resolveWorkspaceName","_resoveWorkspacePath","isSingleFolderWorkspaceIdentifier","filename","configPath","endsWith","WORKSPACE_EXTENSION","normalizeDriveLetter","folderpath","RandomBasedVariableResolver","random","generateUuid","OneSnippet","_snippet","_snippetLineLeadingWhitespace","_offset","_nestingLevel","_placeholderGroups","groupBy","_placeholderGroupsIdx","textChange","newPosition","_placeholderDecorations","removeDecorations","Error","changeDecorations","placeholderOffset","placeholderLen","fullLen","getPositionAt","_decor","inactiveFinal","inactive","handle","addDecoration","_initDecorations","operations","getDecorationRange","currentValue","transformedValueLines","normalizeIndentation","EditOperation","getEOL","executeEdits","couldSkipThisPlaceholder","activePlaceholders","_hasPlaceholderBeenCollapsed","changeDecorationOptions","activeFinal","active","_step5","_iterator5","enclosingPlaceholders","enclosingPlaceholder","_step4","_iterator4","_step4$value","_slicedToArray","move","isEmpty","_step6","_iterator6","_step7","placeholdersWithEqualIndex","_iterator7","_step8","_iterator8","nested","console","assert","_step9","indexLastPlaceholder","_iterator9","nestedPlaceholder","removeDecoration","_step10","_iterator10","ModelDecorationOptions","description","stickiness","className","_template","_options","_templateMerges","_snippets","_ref","createEditsAndSnippetsFromSelections","createEditsAndSnippetsFromEdits","edits","snippets","_undoEdits","undoEdits","edit","identifier","initialize","_move","revealRange","_SnippetSession$creat","isTrivialSnippet","_step11","_iterator11","revealPositionInCenterIfOutsideViewport","_step12","_iterator12","oneSelection","_step13","allPossibleSelections","_iterator13","possibleSelections","computePossibleSelections","_step15","_iterator15","_step15$value","_step16","_iterator16","selection","v","array","_ret","_step14","_iterator14","_step14$value","adjustIndentation","snippetTextString","prevChar","newValue","positionColumnBefore","positionColumnAfter","validateRange","getDirection","languageConfigurationService","_step17","workspaceService","invokeWithinContext","IWorkspaceContextService","modelBasedVariableResolver","ILabelService","readClipboardText","firstBeforeText","adjustSelection","firstAfterText","firstLineFirstNonWhitespace","indexedSelections","_iterator17","_step17$value","extensionBefore","extensionAfter","snippetSelection","setStartPosition","setEndPosition","parse","snippetLineLeadingWhitespace","resolveVariables","major","minor","_isTracked","snippetEdits","parser","_snippetEdits$i","lastRange","textRange","textNode","newNodes","snippetText","snippetFragmentText"],"sourceRoot":""}