{"version":3,"file":"static/js/monaco-editor-vendor.4ec6fe68.b71e2edb.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/common/config/diffEditor.js","../node_modules/monaco-editor/esm/vs/editor/common/config/editorConfigurationSchema.js","../node_modules/monaco-editor/esm/vs/editor/common/config/editorOptions.js","../node_modules/monaco-editor/esm/vs/editor/common/config/editorZoom.js","../node_modules/monaco-editor/esm/vs/editor/common/config/fontInfo.js","../node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js","../node_modules/monaco-editor/esm/vs/editor/common/core/cursorColumns.js","../node_modules/monaco-editor/esm/vs/editor/common/core/editOperation.js","../node_modules/monaco-editor/esm/vs/editor/common/core/editorColorRegistry.js","../node_modules/monaco-editor/esm/vs/editor/common/core/eolCounter.js","../node_modules/monaco-editor/esm/vs/editor/common/core/indentation.js","../node_modules/monaco-editor/esm/vs/editor/common/core/lineRange.js","../node_modules/monaco-editor/esm/vs/editor/common/core/offsetRange.js","../node_modules/monaco-editor/esm/vs/editor/common/core/position.js","../node_modules/monaco-editor/esm/vs/editor/common/core/range.js","../node_modules/monaco-editor/esm/vs/editor/common/core/rgba.js","../node_modules/monaco-editor/esm/vs/editor/common/core/selection.js","../node_modules/monaco-editor/esm/vs/editor/common/core/stringBuilder.js","../node_modules/monaco-editor/esm/vs/editor/common/core/textChange.js","../node_modules/monaco-editor/esm/vs/editor/common/core/textModelDefaults.js","../node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js","../node_modules/monaco-editor/esm/vs/editor/common/core/wordHelper.js","../node_modules/monaco-editor/esm/vs/editor/common/cursor/oneCursor.js","../node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorCollection.js","../node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorContext.js","../node_modules/monaco-editor/esm/vs/editor/common/cursor/cursor.js","../node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorAtomicMoveOperations.js","../node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorColumnSelection.js","../node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorDeleteOperations.js","../node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorMoveCommands.js","../node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorMoveOperations.js","../node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorTypeOperations.js","../node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorWordOperations.js","../node_modules/monaco-editor/esm/vs/editor/common/cursorCommon.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const diffEditorDefaultOptions = {\n    enableSplitViewResizing: true,\n    splitViewDefaultRatio: 0.5,\n    renderSideBySide: true,\n    renderMarginRevertIcon: true,\n    maxComputationTime: 5000,\n    maxFileSize: 50,\n    ignoreTrimWhitespace: true,\n    renderIndicators: true,\n    originalEditable: false,\n    diffCodeLens: false,\n    renderOverviewRuler: true,\n    diffWordWrap: 'inherit',\n    diffAlgorithm: 'advanced',\n    accessibilityVerbose: false,\n    experimental: {\n        showMoves: false,\n        showEmptyDecorations: true,\n    },\n    hideUnchangedRegions: {\n        enabled: false,\n        contextLineCount: 3,\n        minimumLineCount: 3,\n        revealLineCount: 20,\n    },\n    isInEmbeddedEditor: false,\n    onlyShowAccessibleDiffViewer: false,\n    renderSideBySideInlineBreakpoint: 900,\n    useInlineViewWhenSpaceIsLimited: true,\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { diffEditorDefaultOptions } from './diffEditor.js';\nimport { editorOptionsRegistry } from './editorOptions.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nexport const editorConfigurationBaseNode = Object.freeze({\n    id: 'editor',\n    order: 5,\n    type: 'object',\n    title: nls.localize('editorConfigurationTitle', \"Editor\"),\n    scope: 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */,\n});\nconst editorConfiguration = Object.assign(Object.assign({}, editorConfigurationBaseNode), { properties: {\n        'editor.tabSize': {\n            type: 'number',\n            default: EDITOR_MODEL_DEFAULTS.tabSize,\n            minimum: 1,\n            markdownDescription: nls.localize('tabSize', \"The number of spaces a tab is equal to. This setting is overridden based on the file contents when {0} is on.\", '`#editor.detectIndentation#`')\n        },\n        'editor.indentSize': {\n            'anyOf': [\n                {\n                    type: 'string',\n                    enum: ['tabSize']\n                },\n                {\n                    type: 'number',\n                    minimum: 1\n                }\n            ],\n            default: 'tabSize',\n            markdownDescription: nls.localize('indentSize', \"The number of spaces used for indentation or `\\\"tabSize\\\"` to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.\")\n        },\n        'editor.insertSpaces': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.insertSpaces,\n            markdownDescription: nls.localize('insertSpaces', \"Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when {0} is on.\", '`#editor.detectIndentation#`')\n        },\n        'editor.detectIndentation': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.detectIndentation,\n            markdownDescription: nls.localize('detectIndentation', \"Controls whether {0} and {1} will be automatically detected when a file is opened based on the file contents.\", '`#editor.tabSize#`', '`#editor.insertSpaces#`')\n        },\n        'editor.trimAutoWhitespace': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n            description: nls.localize('trimAutoWhitespace', \"Remove trailing auto inserted whitespace.\")\n        },\n        'editor.largeFileOptimizations': {\n            type: 'boolean',\n            default: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n            description: nls.localize('largeFileOptimizations', \"Special handling for large files to disable certain memory intensive features.\")\n        },\n        'editor.wordBasedSuggestions': {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('wordBasedSuggestions', \"Controls whether completions should be computed based on words in the document.\")\n        },\n        'editor.wordBasedSuggestionsMode': {\n            enum: ['currentDocument', 'matchingDocuments', 'allDocuments'],\n            default: 'matchingDocuments',\n            enumDescriptions: [\n                nls.localize('wordBasedSuggestionsMode.currentDocument', 'Only suggest words from the active document.'),\n                nls.localize('wordBasedSuggestionsMode.matchingDocuments', 'Suggest words from all open documents of the same language.'),\n                nls.localize('wordBasedSuggestionsMode.allDocuments', 'Suggest words from all open documents.')\n            ],\n            description: nls.localize('wordBasedSuggestionsMode', \"Controls from which documents word based completions are computed.\")\n        },\n        'editor.semanticHighlighting.enabled': {\n            enum: [true, false, 'configuredByTheme'],\n            enumDescriptions: [\n                nls.localize('semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'),\n                nls.localize('semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'),\n                nls.localize('semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\\'s `semanticHighlighting` setting.')\n            ],\n            default: 'configuredByTheme',\n            description: nls.localize('semanticHighlighting.enabled', \"Controls whether the semanticHighlighting is shown for the languages that support it.\")\n        },\n        'editor.stablePeek': {\n            type: 'boolean',\n            default: false,\n            markdownDescription: nls.localize('stablePeek', \"Keep peek editors open even when double-clicking their content or when hitting `Escape`.\")\n        },\n        'editor.maxTokenizationLineLength': {\n            type: 'integer',\n            default: 20000,\n            description: nls.localize('maxTokenizationLineLength', \"Lines above this length will not be tokenized for performance reasons\")\n        },\n        'editor.experimental.asyncTokenization': {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('editor.experimental.asyncTokenization', \"Controls whether the tokenization should happen asynchronously on a web worker.\"),\n            tags: ['experimental'],\n        },\n        'editor.experimental.asyncTokenizationLogging': {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('editor.experimental.asyncTokenizationLogging', \"Controls whether async tokenization should be logged. For debugging only.\"),\n        },\n        'editor.experimental.asyncTokenizationVerification': {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('editor.experimental.asyncTokenizationVerification', \"Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only.\"),\n            tags: ['experimental'],\n        },\n        'editor.language.brackets': {\n            type: ['array', 'null'],\n            default: null, // We want to distinguish the empty array from not configured.\n            description: nls.localize('schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'),\n            items: {\n                type: 'array',\n                items: [\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n                    },\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n                    }\n                ]\n            }\n        },\n        'editor.language.colorizedBracketPairs': {\n            type: ['array', 'null'],\n            default: null, // We want to distinguish the empty array from not configured.\n            description: nls.localize('schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'),\n            items: {\n                type: 'array',\n                items: [\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n                    },\n                    {\n                        type: 'string',\n                        description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n                    }\n                ]\n            }\n        },\n        'diffEditor.maxComputationTime': {\n            type: 'number',\n            default: diffEditorDefaultOptions.maxComputationTime,\n            description: nls.localize('maxComputationTime', \"Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.\")\n        },\n        'diffEditor.maxFileSize': {\n            type: 'number',\n            default: diffEditorDefaultOptions.maxFileSize,\n            description: nls.localize('maxFileSize', \"Maximum file size in MB for which to compute diffs. Use 0 for no limit.\")\n        },\n        'diffEditor.renderSideBySide': {\n            type: 'boolean',\n            default: diffEditorDefaultOptions.renderSideBySide,\n            description: nls.localize('sideBySide', \"Controls whether the diff editor shows the diff side by side or inline.\")\n        },\n        'diffEditor.renderSideBySideInlineBreakpoint': {\n            type: 'number',\n            default: diffEditorDefaultOptions.renderSideBySideInlineBreakpoint,\n            description: nls.localize('renderSideBySideInlineBreakpoint', \"If the diff editor width is smaller than this value, the inline view is used.\")\n        },\n        'diffEditor.useInlineViewWhenSpaceIsLimited': {\n            type: 'boolean',\n            default: diffEditorDefaultOptions.useInlineViewWhenSpaceIsLimited,\n            description: nls.localize('useInlineViewWhenSpaceIsLimited', \"If enabled and the editor width is too small, the inline view is used.\")\n        },\n        'diffEditor.renderMarginRevertIcon': {\n            type: 'boolean',\n            default: diffEditorDefaultOptions.renderMarginRevertIcon,\n            description: nls.localize('renderMarginRevertIcon', \"When enabled, the diff editor shows arrows in its glyph margin to revert changes.\")\n        },\n        'diffEditor.ignoreTrimWhitespace': {\n            type: 'boolean',\n            default: diffEditorDefaultOptions.ignoreTrimWhitespace,\n            description: nls.localize('ignoreTrimWhitespace', \"When enabled, the diff editor ignores changes in leading or trailing whitespace.\")\n        },\n        'diffEditor.renderIndicators': {\n            type: 'boolean',\n            default: diffEditorDefaultOptions.renderIndicators,\n            description: nls.localize('renderIndicators', \"Controls whether the diff editor shows +/- indicators for added/removed changes.\")\n        },\n        'diffEditor.codeLens': {\n            type: 'boolean',\n            default: diffEditorDefaultOptions.diffCodeLens,\n            description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\")\n        },\n        'diffEditor.wordWrap': {\n            type: 'string',\n            enum: ['off', 'on', 'inherit'],\n            default: diffEditorDefaultOptions.diffWordWrap,\n            markdownEnumDescriptions: [\n                nls.localize('wordWrap.off', \"Lines will never wrap.\"),\n                nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"),\n                nls.localize('wordWrap.inherit', \"Lines will wrap according to the {0} setting.\", '`#editor.wordWrap#`'),\n            ]\n        },\n        'diffEditor.diffAlgorithm': {\n            type: 'string',\n            enum: ['legacy', 'advanced'],\n            default: diffEditorDefaultOptions.diffAlgorithm,\n            markdownEnumDescriptions: [\n                nls.localize('diffAlgorithm.legacy', \"Uses the legacy diffing algorithm.\"),\n                nls.localize('diffAlgorithm.advanced', \"Uses the advanced diffing algorithm.\"),\n            ],\n            tags: ['experimental'],\n        },\n        'diffEditor.hideUnchangedRegions.enabled': {\n            type: 'boolean',\n            default: diffEditorDefaultOptions.hideUnchangedRegions.enabled,\n            markdownDescription: nls.localize('hideUnchangedRegions.enabled', \"Controls whether the diff editor shows unchanged regions.\"),\n        },\n        'diffEditor.hideUnchangedRegions.revealLineCount': {\n            type: 'integer',\n            default: diffEditorDefaultOptions.hideUnchangedRegions.revealLineCount,\n            markdownDescription: nls.localize('hideUnchangedRegions.revealLineCount', \"Controls how many lines are used for unchanged regions.\"),\n            minimum: 1,\n        },\n        'diffEditor.hideUnchangedRegions.minimumLineCount': {\n            type: 'integer',\n            default: diffEditorDefaultOptions.hideUnchangedRegions.minimumLineCount,\n            markdownDescription: nls.localize('hideUnchangedRegions.minimumLineCount', \"Controls how many lines are used as a minimum for unchanged regions.\"),\n            minimum: 1,\n        },\n        'diffEditor.hideUnchangedRegions.contextLineCount': {\n            type: 'integer',\n            default: diffEditorDefaultOptions.hideUnchangedRegions.contextLineCount,\n            markdownDescription: nls.localize('hideUnchangedRegions.contextLineCount', \"Controls how many lines are used as context when comparing unchanged regions.\"),\n            minimum: 1,\n        },\n        'diffEditor.experimental.showMoves': {\n            type: 'boolean',\n            default: diffEditorDefaultOptions.experimental.showMoves,\n            markdownDescription: nls.localize('showMoves', \"Controls whether the diff editor should show detected code moves.\")\n        },\n        'diffEditor.experimental.showEmptyDecorations': {\n            type: 'boolean',\n            default: diffEditorDefaultOptions.experimental.showEmptyDecorations,\n            description: nls.localize('showEmptyDecorations', \"Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted.\"),\n        }\n    } });\nfunction isConfigurationPropertySchema(x) {\n    return (typeof x.type !== 'undefined' || typeof x.anyOf !== 'undefined');\n}\n// Add properties from the Editor Option Registry\nfor (const editorOption of editorOptionsRegistry) {\n    const schema = editorOption.schema;\n    if (typeof schema !== 'undefined') {\n        if (isConfigurationPropertySchema(schema)) {\n            // This is a single schema contribution\n            editorConfiguration.properties[`editor.${editorOption.name}`] = schema;\n        }\n        else {\n            for (const key in schema) {\n                if (Object.hasOwnProperty.call(schema, key)) {\n                    editorConfiguration.properties[key] = schema[key];\n                }\n            }\n        }\n    }\n}\nlet cachedEditorConfigurationKeys = null;\nfunction getEditorConfigurationKeys() {\n    if (cachedEditorConfigurationKeys === null) {\n        cachedEditorConfigurationKeys = Object.create(null);\n        Object.keys(editorConfiguration.properties).forEach((prop) => {\n            cachedEditorConfigurationKeys[prop] = true;\n        });\n    }\n    return cachedEditorConfigurationKeys;\n}\nexport function isEditorConfigurationKey(key) {\n    const editorConfigurationKeys = getEditorConfigurationKeys();\n    return (editorConfigurationKeys[`editor.${key}`] || false);\n}\nexport function isDiffEditorConfigurationKey(key) {\n    const editorConfigurationKeys = getEditorConfigurationKeys();\n    return (editorConfigurationKeys[`diffEditor.${key}`] || false);\n}\nconst configurationRegistry = Registry.as(Extensions.Configuration);\nconfigurationRegistry.registerConfiguration(editorConfiguration);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { USUAL_WORD_SEPARATORS } from '../core/wordHelper.js';\nimport * as nls from '../../../nls.js';\n/**\n * @internal\n * The width of the minimap gutter, in pixels.\n */\nexport const MINIMAP_GUTTER_WIDTH = 8;\n//#endregion\n/**\n * An event describing that the configuration of the editor has changed.\n */\nexport class ConfigurationChangedEvent {\n    /**\n     * @internal\n     */\n    constructor(values) {\n        this._values = values;\n    }\n    hasChanged(id) {\n        return this._values[id];\n    }\n}\n/**\n * @internal\n */\nexport class ComputeOptionsMemory {\n    constructor() {\n        this.stableMinimapLayoutInput = null;\n        this.stableFitMaxMinimapScale = 0;\n        this.stableFitRemainingWidth = 0;\n    }\n}\n/**\n * @internal\n */\nclass BaseEditorOption {\n    constructor(id, name, defaultValue, schema) {\n        this.id = id;\n        this.name = name;\n        this.defaultValue = defaultValue;\n        this.schema = schema;\n    }\n    applyUpdate(value, update) {\n        return applyUpdate(value, update);\n    }\n    compute(env, options, value) {\n        return value;\n    }\n}\nexport class ApplyUpdateResult {\n    constructor(newValue, didChange) {\n        this.newValue = newValue;\n        this.didChange = didChange;\n    }\n}\nfunction applyUpdate(value, update) {\n    if (typeof value !== 'object' || typeof update !== 'object' || !value || !update) {\n        return new ApplyUpdateResult(update, value !== update);\n    }\n    if (Array.isArray(value) || Array.isArray(update)) {\n        const arrayEquals = Array.isArray(value) && Array.isArray(update) && arrays.equals(value, update);\n        return new ApplyUpdateResult(update, !arrayEquals);\n    }\n    let didChange = false;\n    for (const key in update) {\n        if (update.hasOwnProperty(key)) {\n            const result = applyUpdate(value[key], update[key]);\n            if (result.didChange) {\n                value[key] = result.newValue;\n                didChange = true;\n            }\n        }\n    }\n    return new ApplyUpdateResult(value, didChange);\n}\n/**\n * @internal\n */\nclass ComputedEditorOption {\n    constructor(id) {\n        this.schema = undefined;\n        this.id = id;\n        this.name = '_never_';\n        this.defaultValue = undefined;\n    }\n    applyUpdate(value, update) {\n        return applyUpdate(value, update);\n    }\n    validate(input) {\n        return this.defaultValue;\n    }\n}\nclass SimpleEditorOption {\n    constructor(id, name, defaultValue, schema) {\n        this.id = id;\n        this.name = name;\n        this.defaultValue = defaultValue;\n        this.schema = schema;\n    }\n    applyUpdate(value, update) {\n        return applyUpdate(value, update);\n    }\n    validate(input) {\n        if (typeof input === 'undefined') {\n            return this.defaultValue;\n        }\n        return input;\n    }\n    compute(env, options, value) {\n        return value;\n    }\n}\n/**\n * @internal\n */\nexport function boolean(value, defaultValue) {\n    if (typeof value === 'undefined') {\n        return defaultValue;\n    }\n    if (value === 'false') {\n        // treat the string 'false' as false\n        return false;\n    }\n    return Boolean(value);\n}\nclass EditorBooleanOption extends SimpleEditorOption {\n    constructor(id, name, defaultValue, schema = undefined) {\n        if (typeof schema !== 'undefined') {\n            schema.type = 'boolean';\n            schema.default = defaultValue;\n        }\n        super(id, name, defaultValue, schema);\n    }\n    validate(input) {\n        return boolean(input, this.defaultValue);\n    }\n}\n/**\n * @internal\n */\nexport function clampedInt(value, defaultValue, minimum, maximum) {\n    if (typeof value === 'undefined') {\n        return defaultValue;\n    }\n    let r = parseInt(value, 10);\n    if (isNaN(r)) {\n        return defaultValue;\n    }\n    r = Math.max(minimum, r);\n    r = Math.min(maximum, r);\n    return r | 0;\n}\nclass EditorIntOption extends SimpleEditorOption {\n    static clampedInt(value, defaultValue, minimum, maximum) {\n        return clampedInt(value, defaultValue, minimum, maximum);\n    }\n    constructor(id, name, defaultValue, minimum, maximum, schema = undefined) {\n        if (typeof schema !== 'undefined') {\n            schema.type = 'integer';\n            schema.default = defaultValue;\n            schema.minimum = minimum;\n            schema.maximum = maximum;\n        }\n        super(id, name, defaultValue, schema);\n        this.minimum = minimum;\n        this.maximum = maximum;\n    }\n    validate(input) {\n        return EditorIntOption.clampedInt(input, this.defaultValue, this.minimum, this.maximum);\n    }\n}\n/**\n * @internal\n */\nexport function clampedFloat(value, defaultValue, minimum, maximum) {\n    if (typeof value === 'undefined') {\n        return defaultValue;\n    }\n    const r = EditorFloatOption.float(value, defaultValue);\n    return EditorFloatOption.clamp(r, minimum, maximum);\n}\nclass EditorFloatOption extends SimpleEditorOption {\n    static clamp(n, min, max) {\n        if (n < min) {\n            return min;\n        }\n        if (n > max) {\n            return max;\n        }\n        return n;\n    }\n    static float(value, defaultValue) {\n        if (typeof value === 'number') {\n            return value;\n        }\n        if (typeof value === 'undefined') {\n            return defaultValue;\n        }\n        const r = parseFloat(value);\n        return (isNaN(r) ? defaultValue : r);\n    }\n    constructor(id, name, defaultValue, validationFn, schema) {\n        if (typeof schema !== 'undefined') {\n            schema.type = 'number';\n            schema.default = defaultValue;\n        }\n        super(id, name, defaultValue, schema);\n        this.validationFn = validationFn;\n    }\n    validate(input) {\n        return this.validationFn(EditorFloatOption.float(input, this.defaultValue));\n    }\n}\nclass EditorStringOption extends SimpleEditorOption {\n    static string(value, defaultValue) {\n        if (typeof value !== 'string') {\n            return defaultValue;\n        }\n        return value;\n    }\n    constructor(id, name, defaultValue, schema = undefined) {\n        if (typeof schema !== 'undefined') {\n            schema.type = 'string';\n            schema.default = defaultValue;\n        }\n        super(id, name, defaultValue, schema);\n    }\n    validate(input) {\n        return EditorStringOption.string(input, this.defaultValue);\n    }\n}\n/**\n * @internal\n */\nexport function stringSet(value, defaultValue, allowedValues, renamedValues) {\n    if (typeof value !== 'string') {\n        return defaultValue;\n    }\n    if (renamedValues && value in renamedValues) {\n        return renamedValues[value];\n    }\n    if (allowedValues.indexOf(value) === -1) {\n        return defaultValue;\n    }\n    return value;\n}\nclass EditorStringEnumOption extends SimpleEditorOption {\n    constructor(id, name, defaultValue, allowedValues, schema = undefined) {\n        if (typeof schema !== 'undefined') {\n            schema.type = 'string';\n            schema.enum = allowedValues;\n            schema.default = defaultValue;\n        }\n        super(id, name, defaultValue, schema);\n        this._allowedValues = allowedValues;\n    }\n    validate(input) {\n        return stringSet(input, this.defaultValue, this._allowedValues);\n    }\n}\nclass EditorEnumOption extends BaseEditorOption {\n    constructor(id, name, defaultValue, defaultStringValue, allowedValues, convert, schema = undefined) {\n        if (typeof schema !== 'undefined') {\n            schema.type = 'string';\n            schema.enum = allowedValues;\n            schema.default = defaultStringValue;\n        }\n        super(id, name, defaultValue, schema);\n        this._allowedValues = allowedValues;\n        this._convert = convert;\n    }\n    validate(input) {\n        if (typeof input !== 'string') {\n            return this.defaultValue;\n        }\n        if (this._allowedValues.indexOf(input) === -1) {\n            return this.defaultValue;\n        }\n        return this._convert(input);\n    }\n}\n//#endregion\n//#region autoIndent\nfunction _autoIndentFromString(autoIndent) {\n    switch (autoIndent) {\n        case 'none': return 0 /* EditorAutoIndentStrategy.None */;\n        case 'keep': return 1 /* EditorAutoIndentStrategy.Keep */;\n        case 'brackets': return 2 /* EditorAutoIndentStrategy.Brackets */;\n        case 'advanced': return 3 /* EditorAutoIndentStrategy.Advanced */;\n        case 'full': return 4 /* EditorAutoIndentStrategy.Full */;\n    }\n}\n//#endregion\n//#region accessibilitySupport\nclass EditorAccessibilitySupport extends BaseEditorOption {\n    constructor() {\n        super(2 /* EditorOption.accessibilitySupport */, 'accessibilitySupport', 0 /* AccessibilitySupport.Unknown */, {\n            type: 'string',\n            enum: ['auto', 'on', 'off'],\n            enumDescriptions: [\n                nls.localize('accessibilitySupport.auto', \"Use platform APIs to detect when a Screen Reader is attached\"),\n                nls.localize('accessibilitySupport.on', \"Optimize for usage with a Screen Reader\"),\n                nls.localize('accessibilitySupport.off', \"Assume a screen reader is not attached\"),\n            ],\n            default: 'auto',\n            tags: ['accessibility'],\n            description: nls.localize('accessibilitySupport', \"Controls if the UI should run in a mode where it is optimized for screen readers.\")\n        });\n    }\n    validate(input) {\n        switch (input) {\n            case 'auto': return 0 /* AccessibilitySupport.Unknown */;\n            case 'off': return 1 /* AccessibilitySupport.Disabled */;\n            case 'on': return 2 /* AccessibilitySupport.Enabled */;\n        }\n        return this.defaultValue;\n    }\n    compute(env, options, value) {\n        if (value === 0 /* AccessibilitySupport.Unknown */) {\n            // The editor reads the `accessibilitySupport` from the environment\n            return env.accessibilitySupport;\n        }\n        return value;\n    }\n}\nclass EditorComments extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            insertSpace: true,\n            ignoreEmptyLines: true,\n        };\n        super(23 /* EditorOption.comments */, 'comments', defaults, {\n            'editor.comments.insertSpace': {\n                type: 'boolean',\n                default: defaults.insertSpace,\n                description: nls.localize('comments.insertSpace', \"Controls whether a space character is inserted when commenting.\")\n            },\n            'editor.comments.ignoreEmptyLines': {\n                type: 'boolean',\n                default: defaults.ignoreEmptyLines,\n                description: nls.localize('comments.ignoreEmptyLines', 'Controls if empty lines should be ignored with toggle, add or remove actions for line comments.')\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            insertSpace: boolean(input.insertSpace, this.defaultValue.insertSpace),\n            ignoreEmptyLines: boolean(input.ignoreEmptyLines, this.defaultValue.ignoreEmptyLines),\n        };\n    }\n}\nfunction _cursorBlinkingStyleFromString(cursorBlinkingStyle) {\n    switch (cursorBlinkingStyle) {\n        case 'blink': return 1 /* TextEditorCursorBlinkingStyle.Blink */;\n        case 'smooth': return 2 /* TextEditorCursorBlinkingStyle.Smooth */;\n        case 'phase': return 3 /* TextEditorCursorBlinkingStyle.Phase */;\n        case 'expand': return 4 /* TextEditorCursorBlinkingStyle.Expand */;\n        case 'solid': return 5 /* TextEditorCursorBlinkingStyle.Solid */;\n    }\n}\n//#endregion\n//#region cursorStyle\n/**\n * The style in which the editor's cursor should be rendered.\n */\nexport var TextEditorCursorStyle;\n(function (TextEditorCursorStyle) {\n    /**\n     * As a vertical line (sitting between two characters).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Line\"] = 1] = \"Line\";\n    /**\n     * As a block (sitting on top of a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Block\"] = 2] = \"Block\";\n    /**\n     * As a horizontal line (sitting under a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"Underline\"] = 3] = \"Underline\";\n    /**\n     * As a thin vertical line (sitting between two characters).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"LineThin\"] = 4] = \"LineThin\";\n    /**\n     * As an outlined block (sitting on top of a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"BlockOutline\"] = 5] = \"BlockOutline\";\n    /**\n     * As a thin horizontal line (sitting under a character).\n     */\n    TextEditorCursorStyle[TextEditorCursorStyle[\"UnderlineThin\"] = 6] = \"UnderlineThin\";\n})(TextEditorCursorStyle || (TextEditorCursorStyle = {}));\nfunction _cursorStyleFromString(cursorStyle) {\n    switch (cursorStyle) {\n        case 'line': return TextEditorCursorStyle.Line;\n        case 'block': return TextEditorCursorStyle.Block;\n        case 'underline': return TextEditorCursorStyle.Underline;\n        case 'line-thin': return TextEditorCursorStyle.LineThin;\n        case 'block-outline': return TextEditorCursorStyle.BlockOutline;\n        case 'underline-thin': return TextEditorCursorStyle.UnderlineThin;\n    }\n}\n//#endregion\n//#region editorClassName\nclass EditorClassName extends ComputedEditorOption {\n    constructor() {\n        super(140 /* EditorOption.editorClassName */);\n    }\n    compute(env, options, _) {\n        const classNames = ['monaco-editor'];\n        if (options.get(39 /* EditorOption.extraEditorClassName */)) {\n            classNames.push(options.get(39 /* EditorOption.extraEditorClassName */));\n        }\n        if (env.extraEditorClassName) {\n            classNames.push(env.extraEditorClassName);\n        }\n        if (options.get(73 /* EditorOption.mouseStyle */) === 'default') {\n            classNames.push('mouse-default');\n        }\n        else if (options.get(73 /* EditorOption.mouseStyle */) === 'copy') {\n            classNames.push('mouse-copy');\n        }\n        if (options.get(110 /* EditorOption.showUnused */)) {\n            classNames.push('showUnused');\n        }\n        if (options.get(138 /* EditorOption.showDeprecated */)) {\n            classNames.push('showDeprecated');\n        }\n        return classNames.join(' ');\n    }\n}\n//#endregion\n//#region emptySelectionClipboard\nclass EditorEmptySelectionClipboard extends EditorBooleanOption {\n    constructor() {\n        super(37 /* EditorOption.emptySelectionClipboard */, 'emptySelectionClipboard', true, { description: nls.localize('emptySelectionClipboard', \"Controls whether copying without a selection copies the current line.\") });\n    }\n    compute(env, options, value) {\n        return value && env.emptySelectionClipboard;\n    }\n}\nclass EditorFind extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            cursorMoveOnType: true,\n            seedSearchStringFromSelection: 'always',\n            autoFindInSelection: 'never',\n            globalFindClipboard: false,\n            addExtraSpaceOnTop: true,\n            loop: true\n        };\n        super(41 /* EditorOption.find */, 'find', defaults, {\n            'editor.find.cursorMoveOnType': {\n                type: 'boolean',\n                default: defaults.cursorMoveOnType,\n                description: nls.localize('find.cursorMoveOnType', \"Controls whether the cursor should jump to find matches while typing.\")\n            },\n            'editor.find.seedSearchStringFromSelection': {\n                type: 'string',\n                enum: ['never', 'always', 'selection'],\n                default: defaults.seedSearchStringFromSelection,\n                enumDescriptions: [\n                    nls.localize('editor.find.seedSearchStringFromSelection.never', 'Never seed search string from the editor selection.'),\n                    nls.localize('editor.find.seedSearchStringFromSelection.always', 'Always seed search string from the editor selection, including word at cursor position.'),\n                    nls.localize('editor.find.seedSearchStringFromSelection.selection', 'Only seed search string from the editor selection.')\n                ],\n                description: nls.localize('find.seedSearchStringFromSelection', \"Controls whether the search string in the Find Widget is seeded from the editor selection.\")\n            },\n            'editor.find.autoFindInSelection': {\n                type: 'string',\n                enum: ['never', 'always', 'multiline'],\n                default: defaults.autoFindInSelection,\n                enumDescriptions: [\n                    nls.localize('editor.find.autoFindInSelection.never', 'Never turn on Find in Selection automatically (default).'),\n                    nls.localize('editor.find.autoFindInSelection.always', 'Always turn on Find in Selection automatically.'),\n                    nls.localize('editor.find.autoFindInSelection.multiline', 'Turn on Find in Selection automatically when multiple lines of content are selected.')\n                ],\n                description: nls.localize('find.autoFindInSelection', \"Controls the condition for turning on Find in Selection automatically.\")\n            },\n            'editor.find.globalFindClipboard': {\n                type: 'boolean',\n                default: defaults.globalFindClipboard,\n                description: nls.localize('find.globalFindClipboard', \"Controls whether the Find Widget should read or modify the shared find clipboard on macOS.\"),\n                included: platform.isMacintosh\n            },\n            'editor.find.addExtraSpaceOnTop': {\n                type: 'boolean',\n                default: defaults.addExtraSpaceOnTop,\n                description: nls.localize('find.addExtraSpaceOnTop', \"Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.\")\n            },\n            'editor.find.loop': {\n                type: 'boolean',\n                default: defaults.loop,\n                description: nls.localize('find.loop', \"Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.\")\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            cursorMoveOnType: boolean(input.cursorMoveOnType, this.defaultValue.cursorMoveOnType),\n            seedSearchStringFromSelection: typeof _input.seedSearchStringFromSelection === 'boolean'\n                ? (_input.seedSearchStringFromSelection ? 'always' : 'never')\n                : stringSet(input.seedSearchStringFromSelection, this.defaultValue.seedSearchStringFromSelection, ['never', 'always', 'selection']),\n            autoFindInSelection: typeof _input.autoFindInSelection === 'boolean'\n                ? (_input.autoFindInSelection ? 'always' : 'never')\n                : stringSet(input.autoFindInSelection, this.defaultValue.autoFindInSelection, ['never', 'always', 'multiline']),\n            globalFindClipboard: boolean(input.globalFindClipboard, this.defaultValue.globalFindClipboard),\n            addExtraSpaceOnTop: boolean(input.addExtraSpaceOnTop, this.defaultValue.addExtraSpaceOnTop),\n            loop: boolean(input.loop, this.defaultValue.loop),\n        };\n    }\n}\n//#endregion\n//#region fontLigatures\n/**\n * @internal\n */\nexport class EditorFontLigatures extends BaseEditorOption {\n    constructor() {\n        super(51 /* EditorOption.fontLigatures */, 'fontLigatures', EditorFontLigatures.OFF, {\n            anyOf: [\n                {\n                    type: 'boolean',\n                    description: nls.localize('fontLigatures', \"Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property.\"),\n                },\n                {\n                    type: 'string',\n                    description: nls.localize('fontFeatureSettings', \"Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures.\")\n                }\n            ],\n            description: nls.localize('fontLigaturesGeneral', \"Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.\"),\n            default: false\n        });\n    }\n    validate(input) {\n        if (typeof input === 'undefined') {\n            return this.defaultValue;\n        }\n        if (typeof input === 'string') {\n            if (input === 'false') {\n                return EditorFontLigatures.OFF;\n            }\n            if (input === 'true') {\n                return EditorFontLigatures.ON;\n            }\n            return input;\n        }\n        if (Boolean(input)) {\n            return EditorFontLigatures.ON;\n        }\n        return EditorFontLigatures.OFF;\n    }\n}\nEditorFontLigatures.OFF = '\"liga\" off, \"calt\" off';\nEditorFontLigatures.ON = '\"liga\" on, \"calt\" on';\n//#endregion\n//#region fontVariations\n/**\n * @internal\n */\nexport class EditorFontVariations extends BaseEditorOption {\n    constructor() {\n        super(54 /* EditorOption.fontVariations */, 'fontVariations', EditorFontVariations.OFF, {\n            anyOf: [\n                {\n                    type: 'boolean',\n                    description: nls.localize('fontVariations', \"Enables/Disables the translation from font-weight to font-variation-settings. Change this to a string for fine-grained control of the 'font-variation-settings' CSS property.\"),\n                },\n                {\n                    type: 'string',\n                    description: nls.localize('fontVariationSettings', \"Explicit 'font-variation-settings' CSS property. A boolean can be passed instead if one only needs to translate font-weight to font-variation-settings.\")\n                }\n            ],\n            description: nls.localize('fontVariationsGeneral', \"Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property.\"),\n            default: false\n        });\n    }\n    validate(input) {\n        if (typeof input === 'undefined') {\n            return this.defaultValue;\n        }\n        if (typeof input === 'string') {\n            if (input === 'false') {\n                return EditorFontVariations.OFF;\n            }\n            if (input === 'true') {\n                return EditorFontVariations.TRANSLATE;\n            }\n            return input;\n        }\n        if (Boolean(input)) {\n            return EditorFontVariations.TRANSLATE;\n        }\n        return EditorFontVariations.OFF;\n    }\n    compute(env, options, value) {\n        // The value is computed from the fontWeight if it is true.\n        // So take the result from env.fontInfo\n        return env.fontInfo.fontVariationSettings;\n    }\n}\n// Text is laid out using default settings.\nEditorFontVariations.OFF = 'normal';\n// Translate `fontWeight` config to the `font-variation-settings` CSS property.\nEditorFontVariations.TRANSLATE = 'translate';\n//#endregion\n//#region fontInfo\nclass EditorFontInfo extends ComputedEditorOption {\n    constructor() {\n        super(50 /* EditorOption.fontInfo */);\n    }\n    compute(env, options, _) {\n        return env.fontInfo;\n    }\n}\n//#endregion\n//#region fontSize\nclass EditorFontSize extends SimpleEditorOption {\n    constructor() {\n        super(52 /* EditorOption.fontSize */, 'fontSize', EDITOR_FONT_DEFAULTS.fontSize, {\n            type: 'number',\n            minimum: 6,\n            maximum: 100,\n            default: EDITOR_FONT_DEFAULTS.fontSize,\n            description: nls.localize('fontSize', \"Controls the font size in pixels.\")\n        });\n    }\n    validate(input) {\n        const r = EditorFloatOption.float(input, this.defaultValue);\n        if (r === 0) {\n            return EDITOR_FONT_DEFAULTS.fontSize;\n        }\n        return EditorFloatOption.clamp(r, 6, 100);\n    }\n    compute(env, options, value) {\n        // The final fontSize respects the editor zoom level.\n        // So take the result from env.fontInfo\n        return env.fontInfo.fontSize;\n    }\n}\n//#endregion\n//#region fontWeight\nclass EditorFontWeight extends BaseEditorOption {\n    constructor() {\n        super(53 /* EditorOption.fontWeight */, 'fontWeight', EDITOR_FONT_DEFAULTS.fontWeight, {\n            anyOf: [\n                {\n                    type: 'number',\n                    minimum: EditorFontWeight.MINIMUM_VALUE,\n                    maximum: EditorFontWeight.MAXIMUM_VALUE,\n                    errorMessage: nls.localize('fontWeightErrorMessage', \"Only \\\"normal\\\" and \\\"bold\\\" keywords or numbers between 1 and 1000 are allowed.\")\n                },\n                {\n                    type: 'string',\n                    pattern: '^(normal|bold|1000|[1-9][0-9]{0,2})$'\n                },\n                {\n                    enum: EditorFontWeight.SUGGESTION_VALUES\n                }\n            ],\n            default: EDITOR_FONT_DEFAULTS.fontWeight,\n            description: nls.localize('fontWeight', \"Controls the font weight. Accepts \\\"normal\\\" and \\\"bold\\\" keywords or numbers between 1 and 1000.\")\n        });\n    }\n    validate(input) {\n        if (input === 'normal' || input === 'bold') {\n            return input;\n        }\n        return String(EditorIntOption.clampedInt(input, EDITOR_FONT_DEFAULTS.fontWeight, EditorFontWeight.MINIMUM_VALUE, EditorFontWeight.MAXIMUM_VALUE));\n    }\n}\nEditorFontWeight.SUGGESTION_VALUES = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\nEditorFontWeight.MINIMUM_VALUE = 1;\nEditorFontWeight.MAXIMUM_VALUE = 1000;\nclass EditorGoToLocation extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            multiple: 'peek',\n            multipleDefinitions: 'peek',\n            multipleTypeDefinitions: 'peek',\n            multipleDeclarations: 'peek',\n            multipleImplementations: 'peek',\n            multipleReferences: 'peek',\n            alternativeDefinitionCommand: 'editor.action.goToReferences',\n            alternativeTypeDefinitionCommand: 'editor.action.goToReferences',\n            alternativeDeclarationCommand: 'editor.action.goToReferences',\n            alternativeImplementationCommand: '',\n            alternativeReferenceCommand: '',\n        };\n        const jsonSubset = {\n            type: 'string',\n            enum: ['peek', 'gotoAndPeek', 'goto'],\n            default: defaults.multiple,\n            enumDescriptions: [\n                nls.localize('editor.gotoLocation.multiple.peek', 'Show Peek view of the results (default)'),\n                nls.localize('editor.gotoLocation.multiple.gotoAndPeek', 'Go to the primary result and show a Peek view'),\n                nls.localize('editor.gotoLocation.multiple.goto', 'Go to the primary result and enable Peek-less navigation to others')\n            ]\n        };\n        const alternativeCommandOptions = ['', 'editor.action.referenceSearch.trigger', 'editor.action.goToReferences', 'editor.action.peekImplementation', 'editor.action.goToImplementation', 'editor.action.peekTypeDefinition', 'editor.action.goToTypeDefinition', 'editor.action.peekDeclaration', 'editor.action.revealDeclaration', 'editor.action.peekDefinition', 'editor.action.revealDefinitionAside', 'editor.action.revealDefinition'];\n        super(58 /* EditorOption.gotoLocation */, 'gotoLocation', defaults, {\n            'editor.gotoLocation.multiple': {\n                deprecationMessage: nls.localize('editor.gotoLocation.multiple.deprecated', \"This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.\"),\n            },\n            'editor.gotoLocation.multipleDefinitions': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleDefinitions', \"Controls the behavior the 'Go to Definition'-command when multiple target locations exist.\") }, jsonSubset),\n            'editor.gotoLocation.multipleTypeDefinitions': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleTypeDefinitions', \"Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.\") }, jsonSubset),\n            'editor.gotoLocation.multipleDeclarations': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleDeclarations', \"Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.\") }, jsonSubset),\n            'editor.gotoLocation.multipleImplementations': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleImplemenattions', \"Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.\") }, jsonSubset),\n            'editor.gotoLocation.multipleReferences': Object.assign({ description: nls.localize('editor.editor.gotoLocation.multipleReferences', \"Controls the behavior the 'Go to References'-command when multiple target locations exist.\") }, jsonSubset),\n            'editor.gotoLocation.alternativeDefinitionCommand': {\n                type: 'string',\n                default: defaults.alternativeDefinitionCommand,\n                enum: alternativeCommandOptions,\n                description: nls.localize('alternativeDefinitionCommand', \"Alternative command id that is being executed when the result of 'Go to Definition' is the current location.\")\n            },\n            'editor.gotoLocation.alternativeTypeDefinitionCommand': {\n                type: 'string',\n                default: defaults.alternativeTypeDefinitionCommand,\n                enum: alternativeCommandOptions,\n                description: nls.localize('alternativeTypeDefinitionCommand', \"Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.\")\n            },\n            'editor.gotoLocation.alternativeDeclarationCommand': {\n                type: 'string',\n                default: defaults.alternativeDeclarationCommand,\n                enum: alternativeCommandOptions,\n                description: nls.localize('alternativeDeclarationCommand', \"Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.\")\n            },\n            'editor.gotoLocation.alternativeImplementationCommand': {\n                type: 'string',\n                default: defaults.alternativeImplementationCommand,\n                enum: alternativeCommandOptions,\n                description: nls.localize('alternativeImplementationCommand', \"Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.\")\n            },\n            'editor.gotoLocation.alternativeReferenceCommand': {\n                type: 'string',\n                default: defaults.alternativeReferenceCommand,\n                enum: alternativeCommandOptions,\n                description: nls.localize('alternativeReferenceCommand', \"Alternative command id that is being executed when the result of 'Go to Reference' is the current location.\")\n            },\n        });\n    }\n    validate(_input) {\n        var _a, _b, _c, _d, _e;\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            multiple: stringSet(input.multiple, this.defaultValue.multiple, ['peek', 'gotoAndPeek', 'goto']),\n            multipleDefinitions: (_a = input.multipleDefinitions) !== null && _a !== void 0 ? _a : stringSet(input.multipleDefinitions, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n            multipleTypeDefinitions: (_b = input.multipleTypeDefinitions) !== null && _b !== void 0 ? _b : stringSet(input.multipleTypeDefinitions, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n            multipleDeclarations: (_c = input.multipleDeclarations) !== null && _c !== void 0 ? _c : stringSet(input.multipleDeclarations, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n            multipleImplementations: (_d = input.multipleImplementations) !== null && _d !== void 0 ? _d : stringSet(input.multipleImplementations, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n            multipleReferences: (_e = input.multipleReferences) !== null && _e !== void 0 ? _e : stringSet(input.multipleReferences, 'peek', ['peek', 'gotoAndPeek', 'goto']),\n            alternativeDefinitionCommand: EditorStringOption.string(input.alternativeDefinitionCommand, this.defaultValue.alternativeDefinitionCommand),\n            alternativeTypeDefinitionCommand: EditorStringOption.string(input.alternativeTypeDefinitionCommand, this.defaultValue.alternativeTypeDefinitionCommand),\n            alternativeDeclarationCommand: EditorStringOption.string(input.alternativeDeclarationCommand, this.defaultValue.alternativeDeclarationCommand),\n            alternativeImplementationCommand: EditorStringOption.string(input.alternativeImplementationCommand, this.defaultValue.alternativeImplementationCommand),\n            alternativeReferenceCommand: EditorStringOption.string(input.alternativeReferenceCommand, this.defaultValue.alternativeReferenceCommand),\n        };\n    }\n}\nclass EditorHover extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            enabled: true,\n            delay: 300,\n            hidingDelay: 300,\n            sticky: true,\n            above: true,\n        };\n        super(60 /* EditorOption.hover */, 'hover', defaults, {\n            'editor.hover.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                description: nls.localize('hover.enabled', \"Controls whether the hover is shown.\")\n            },\n            'editor.hover.delay': {\n                type: 'number',\n                default: defaults.delay,\n                minimum: 0,\n                maximum: 10000,\n                description: nls.localize('hover.delay', \"Controls the delay in milliseconds after which the hover is shown.\")\n            },\n            'editor.hover.sticky': {\n                type: 'boolean',\n                default: defaults.sticky,\n                description: nls.localize('hover.sticky', \"Controls whether the hover should remain visible when mouse is moved over it.\")\n            },\n            'editor.hover.hidingDelay': {\n                type: 'integer',\n                minimum: 0,\n                default: defaults.hidingDelay,\n                description: nls.localize('hover.hidingDelay', \"Controls the delay in milliseconds after thich the hover is hidden. Requires `editor.hover.sticky` to be enabled.\")\n            },\n            'editor.hover.above': {\n                type: 'boolean',\n                default: defaults.above,\n                description: nls.localize('hover.above', \"Prefer showing hovers above the line, if there's space.\")\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\n            delay: EditorIntOption.clampedInt(input.delay, this.defaultValue.delay, 0, 10000),\n            sticky: boolean(input.sticky, this.defaultValue.sticky),\n            hidingDelay: EditorIntOption.clampedInt(input.hidingDelay, this.defaultValue.hidingDelay, 0, 600000),\n            above: boolean(input.above, this.defaultValue.above),\n        };\n    }\n}\n/**\n * @internal\n */\nexport class EditorLayoutInfoComputer extends ComputedEditorOption {\n    constructor() {\n        super(143 /* EditorOption.layoutInfo */);\n    }\n    compute(env, options, _) {\n        return EditorLayoutInfoComputer.computeLayout(options, {\n            memory: env.memory,\n            outerWidth: env.outerWidth,\n            outerHeight: env.outerHeight,\n            isDominatedByLongLines: env.isDominatedByLongLines,\n            lineHeight: env.fontInfo.lineHeight,\n            viewLineCount: env.viewLineCount,\n            lineNumbersDigitCount: env.lineNumbersDigitCount,\n            typicalHalfwidthCharacterWidth: env.fontInfo.typicalHalfwidthCharacterWidth,\n            maxDigitWidth: env.fontInfo.maxDigitWidth,\n            pixelRatio: env.pixelRatio,\n            glyphMarginDecorationLaneCount: env.glyphMarginDecorationLaneCount\n        });\n    }\n    static computeContainedMinimapLineCount(input) {\n        const typicalViewportLineCount = input.height / input.lineHeight;\n        const extraLinesBeforeFirstLine = Math.floor(input.paddingTop / input.lineHeight);\n        let extraLinesBeyondLastLine = Math.floor(input.paddingBottom / input.lineHeight);\n        if (input.scrollBeyondLastLine) {\n            extraLinesBeyondLastLine = Math.max(extraLinesBeyondLastLine, typicalViewportLineCount - 1);\n        }\n        const desiredRatio = (extraLinesBeforeFirstLine + input.viewLineCount + extraLinesBeyondLastLine) / (input.pixelRatio * input.height);\n        const minimapLineCount = Math.floor(input.viewLineCount / desiredRatio);\n        return { typicalViewportLineCount, extraLinesBeforeFirstLine, extraLinesBeyondLastLine, desiredRatio, minimapLineCount };\n    }\n    static _computeMinimapLayout(input, memory) {\n        const outerWidth = input.outerWidth;\n        const outerHeight = input.outerHeight;\n        const pixelRatio = input.pixelRatio;\n        if (!input.minimap.enabled) {\n            return {\n                renderMinimap: 0 /* RenderMinimap.None */,\n                minimapLeft: 0,\n                minimapWidth: 0,\n                minimapHeightIsEditorHeight: false,\n                minimapIsSampling: false,\n                minimapScale: 1,\n                minimapLineHeight: 1,\n                minimapCanvasInnerWidth: 0,\n                minimapCanvasInnerHeight: Math.floor(pixelRatio * outerHeight),\n                minimapCanvasOuterWidth: 0,\n                minimapCanvasOuterHeight: outerHeight,\n            };\n        }\n        // Can use memory if only the `viewLineCount` and `remainingWidth` have changed\n        const stableMinimapLayoutInput = memory.stableMinimapLayoutInput;\n        const couldUseMemory = (stableMinimapLayoutInput\n            // && input.outerWidth === lastMinimapLayoutInput.outerWidth !!! INTENTIONAL OMITTED\n            && input.outerHeight === stableMinimapLayoutInput.outerHeight\n            && input.lineHeight === stableMinimapLayoutInput.lineHeight\n            && input.typicalHalfwidthCharacterWidth === stableMinimapLayoutInput.typicalHalfwidthCharacterWidth\n            && input.pixelRatio === stableMinimapLayoutInput.pixelRatio\n            && input.scrollBeyondLastLine === stableMinimapLayoutInput.scrollBeyondLastLine\n            && input.paddingTop === stableMinimapLayoutInput.paddingTop\n            && input.paddingBottom === stableMinimapLayoutInput.paddingBottom\n            && input.minimap.enabled === stableMinimapLayoutInput.minimap.enabled\n            && input.minimap.side === stableMinimapLayoutInput.minimap.side\n            && input.minimap.size === stableMinimapLayoutInput.minimap.size\n            && input.minimap.showSlider === stableMinimapLayoutInput.minimap.showSlider\n            && input.minimap.renderCharacters === stableMinimapLayoutInput.minimap.renderCharacters\n            && input.minimap.maxColumn === stableMinimapLayoutInput.minimap.maxColumn\n            && input.minimap.scale === stableMinimapLayoutInput.minimap.scale\n            && input.verticalScrollbarWidth === stableMinimapLayoutInput.verticalScrollbarWidth\n            // && input.viewLineCount === lastMinimapLayoutInput.viewLineCount !!! INTENTIONAL OMITTED\n            // && input.remainingWidth === lastMinimapLayoutInput.remainingWidth !!! INTENTIONAL OMITTED\n            && input.isViewportWrapping === stableMinimapLayoutInput.isViewportWrapping);\n        const lineHeight = input.lineHeight;\n        const typicalHalfwidthCharacterWidth = input.typicalHalfwidthCharacterWidth;\n        const scrollBeyondLastLine = input.scrollBeyondLastLine;\n        const minimapRenderCharacters = input.minimap.renderCharacters;\n        let minimapScale = (pixelRatio >= 2 ? Math.round(input.minimap.scale * 2) : input.minimap.scale);\n        const minimapMaxColumn = input.minimap.maxColumn;\n        const minimapSize = input.minimap.size;\n        const minimapSide = input.minimap.side;\n        const verticalScrollbarWidth = input.verticalScrollbarWidth;\n        const viewLineCount = input.viewLineCount;\n        const remainingWidth = input.remainingWidth;\n        const isViewportWrapping = input.isViewportWrapping;\n        const baseCharHeight = minimapRenderCharacters ? 2 : 3;\n        let minimapCanvasInnerHeight = Math.floor(pixelRatio * outerHeight);\n        const minimapCanvasOuterHeight = minimapCanvasInnerHeight / pixelRatio;\n        let minimapHeightIsEditorHeight = false;\n        let minimapIsSampling = false;\n        let minimapLineHeight = baseCharHeight * minimapScale;\n        let minimapCharWidth = minimapScale / pixelRatio;\n        let minimapWidthMultiplier = 1;\n        if (minimapSize === 'fill' || minimapSize === 'fit') {\n            const { typicalViewportLineCount, extraLinesBeforeFirstLine, extraLinesBeyondLastLine, desiredRatio, minimapLineCount } = EditorLayoutInfoComputer.computeContainedMinimapLineCount({\n                viewLineCount: viewLineCount,\n                scrollBeyondLastLine: scrollBeyondLastLine,\n                paddingTop: input.paddingTop,\n                paddingBottom: input.paddingBottom,\n                height: outerHeight,\n                lineHeight: lineHeight,\n                pixelRatio: pixelRatio\n            });\n            // ratio is intentionally not part of the layout to avoid the layout changing all the time\n            // when doing sampling\n            const ratio = viewLineCount / minimapLineCount;\n            if (ratio > 1) {\n                minimapHeightIsEditorHeight = true;\n                minimapIsSampling = true;\n                minimapScale = 1;\n                minimapLineHeight = 1;\n                minimapCharWidth = minimapScale / pixelRatio;\n            }\n            else {\n                let fitBecomesFill = false;\n                let maxMinimapScale = minimapScale + 1;\n                if (minimapSize === 'fit') {\n                    const effectiveMinimapHeight = Math.ceil((extraLinesBeforeFirstLine + viewLineCount + extraLinesBeyondLastLine) * minimapLineHeight);\n                    if (isViewportWrapping && couldUseMemory && remainingWidth <= memory.stableFitRemainingWidth) {\n                        // There is a loop when using `fit` and viewport wrapping:\n                        // - view line count impacts minimap layout\n                        // - minimap layout impacts viewport width\n                        // - viewport width impacts view line count\n                        // To break the loop, once we go to a smaller minimap scale, we try to stick with it.\n                        fitBecomesFill = true;\n                        maxMinimapScale = memory.stableFitMaxMinimapScale;\n                    }\n                    else {\n                        fitBecomesFill = (effectiveMinimapHeight > minimapCanvasInnerHeight);\n                    }\n                }\n                if (minimapSize === 'fill' || fitBecomesFill) {\n                    minimapHeightIsEditorHeight = true;\n                    const configuredMinimapScale = minimapScale;\n                    minimapLineHeight = Math.min(lineHeight * pixelRatio, Math.max(1, Math.floor(1 / desiredRatio)));\n                    if (isViewportWrapping && couldUseMemory && remainingWidth <= memory.stableFitRemainingWidth) {\n                        // There is a loop when using `fill` and viewport wrapping:\n                        // - view line count impacts minimap layout\n                        // - minimap layout impacts viewport width\n                        // - viewport width impacts view line count\n                        // To break the loop, once we go to a smaller minimap scale, we try to stick with it.\n                        maxMinimapScale = memory.stableFitMaxMinimapScale;\n                    }\n                    minimapScale = Math.min(maxMinimapScale, Math.max(1, Math.floor(minimapLineHeight / baseCharHeight)));\n                    if (minimapScale > configuredMinimapScale) {\n                        minimapWidthMultiplier = Math.min(2, minimapScale / configuredMinimapScale);\n                    }\n                    minimapCharWidth = minimapScale / pixelRatio / minimapWidthMultiplier;\n                    minimapCanvasInnerHeight = Math.ceil((Math.max(typicalViewportLineCount, extraLinesBeforeFirstLine + viewLineCount + extraLinesBeyondLastLine)) * minimapLineHeight);\n                    if (isViewportWrapping) {\n                        // remember for next time\n                        memory.stableMinimapLayoutInput = input;\n                        memory.stableFitRemainingWidth = remainingWidth;\n                        memory.stableFitMaxMinimapScale = minimapScale;\n                    }\n                    else {\n                        memory.stableMinimapLayoutInput = null;\n                        memory.stableFitRemainingWidth = 0;\n                    }\n                }\n            }\n        }\n        // Given:\n        // (leaving 2px for the cursor to have space after the last character)\n        // viewportColumn = (contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth\n        // minimapWidth = viewportColumn * minimapCharWidth\n        // contentWidth = remainingWidth - minimapWidth\n        // What are good values for contentWidth and minimapWidth ?\n        // minimapWidth = ((contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth) * minimapCharWidth\n        // typicalHalfwidthCharacterWidth * minimapWidth = (contentWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n        // typicalHalfwidthCharacterWidth * minimapWidth = (remainingWidth - minimapWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n        // (typicalHalfwidthCharacterWidth + minimapCharWidth) * minimapWidth = (remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n        // minimapWidth = ((remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth) / (typicalHalfwidthCharacterWidth + minimapCharWidth)\n        const minimapMaxWidth = Math.floor(minimapMaxColumn * minimapCharWidth);\n        const minimapWidth = Math.min(minimapMaxWidth, Math.max(0, Math.floor(((remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth) / (typicalHalfwidthCharacterWidth + minimapCharWidth))) + MINIMAP_GUTTER_WIDTH);\n        let minimapCanvasInnerWidth = Math.floor(pixelRatio * minimapWidth);\n        const minimapCanvasOuterWidth = minimapCanvasInnerWidth / pixelRatio;\n        minimapCanvasInnerWidth = Math.floor(minimapCanvasInnerWidth * minimapWidthMultiplier);\n        const renderMinimap = (minimapRenderCharacters ? 1 /* RenderMinimap.Text */ : 2 /* RenderMinimap.Blocks */);\n        const minimapLeft = (minimapSide === 'left' ? 0 : (outerWidth - minimapWidth - verticalScrollbarWidth));\n        return {\n            renderMinimap,\n            minimapLeft,\n            minimapWidth,\n            minimapHeightIsEditorHeight,\n            minimapIsSampling,\n            minimapScale,\n            minimapLineHeight,\n            minimapCanvasInnerWidth,\n            minimapCanvasInnerHeight,\n            minimapCanvasOuterWidth,\n            minimapCanvasOuterHeight,\n        };\n    }\n    static computeLayout(options, env) {\n        const outerWidth = env.outerWidth | 0;\n        const outerHeight = env.outerHeight | 0;\n        const lineHeight = env.lineHeight | 0;\n        const lineNumbersDigitCount = env.lineNumbersDigitCount | 0;\n        const typicalHalfwidthCharacterWidth = env.typicalHalfwidthCharacterWidth;\n        const maxDigitWidth = env.maxDigitWidth;\n        const pixelRatio = env.pixelRatio;\n        const viewLineCount = env.viewLineCount;\n        const wordWrapOverride2 = options.get(135 /* EditorOption.wordWrapOverride2 */);\n        const wordWrapOverride1 = (wordWrapOverride2 === 'inherit' ? options.get(134 /* EditorOption.wordWrapOverride1 */) : wordWrapOverride2);\n        const wordWrap = (wordWrapOverride1 === 'inherit' ? options.get(130 /* EditorOption.wordWrap */) : wordWrapOverride1);\n        const wordWrapColumn = options.get(133 /* EditorOption.wordWrapColumn */);\n        const isDominatedByLongLines = env.isDominatedByLongLines;\n        const showGlyphMargin = options.get(57 /* EditorOption.glyphMargin */);\n        const showLineNumbers = (options.get(67 /* EditorOption.lineNumbers */).renderType !== 0 /* RenderLineNumbersType.Off */);\n        const lineNumbersMinChars = options.get(68 /* EditorOption.lineNumbersMinChars */);\n        const scrollBeyondLastLine = options.get(104 /* EditorOption.scrollBeyondLastLine */);\n        const padding = options.get(83 /* EditorOption.padding */);\n        const minimap = options.get(72 /* EditorOption.minimap */);\n        const scrollbar = options.get(102 /* EditorOption.scrollbar */);\n        const verticalScrollbarWidth = scrollbar.verticalScrollbarSize;\n        const verticalScrollbarHasArrows = scrollbar.verticalHasArrows;\n        const scrollbarArrowSize = scrollbar.arrowSize;\n        const horizontalScrollbarHeight = scrollbar.horizontalScrollbarSize;\n        const folding = options.get(43 /* EditorOption.folding */);\n        const showFoldingDecoration = options.get(109 /* EditorOption.showFoldingControls */) !== 'never';\n        let lineDecorationsWidth = options.get(65 /* EditorOption.lineDecorationsWidth */);\n        if (folding && showFoldingDecoration) {\n            lineDecorationsWidth += 16;\n        }\n        let lineNumbersWidth = 0;\n        if (showLineNumbers) {\n            const digitCount = Math.max(lineNumbersDigitCount, lineNumbersMinChars);\n            lineNumbersWidth = Math.round(digitCount * maxDigitWidth);\n        }\n        let glyphMarginWidth = 0;\n        if (showGlyphMargin) {\n            glyphMarginWidth = lineHeight * env.glyphMarginDecorationLaneCount;\n        }\n        let glyphMarginLeft = 0;\n        let lineNumbersLeft = glyphMarginLeft + glyphMarginWidth;\n        let decorationsLeft = lineNumbersLeft + lineNumbersWidth;\n        let contentLeft = decorationsLeft + lineDecorationsWidth;\n        const remainingWidth = outerWidth - glyphMarginWidth - lineNumbersWidth - lineDecorationsWidth;\n        let isWordWrapMinified = false;\n        let isViewportWrapping = false;\n        let wrappingColumn = -1;\n        if (wordWrapOverride1 === 'inherit' && isDominatedByLongLines) {\n            // Force viewport width wrapping if model is dominated by long lines\n            isWordWrapMinified = true;\n            isViewportWrapping = true;\n        }\n        else if (wordWrap === 'on' || wordWrap === 'bounded') {\n            isViewportWrapping = true;\n        }\n        else if (wordWrap === 'wordWrapColumn') {\n            wrappingColumn = wordWrapColumn;\n        }\n        const minimapLayout = EditorLayoutInfoComputer._computeMinimapLayout({\n            outerWidth: outerWidth,\n            outerHeight: outerHeight,\n            lineHeight: lineHeight,\n            typicalHalfwidthCharacterWidth: typicalHalfwidthCharacterWidth,\n            pixelRatio: pixelRatio,\n            scrollBeyondLastLine: scrollBeyondLastLine,\n            paddingTop: padding.top,\n            paddingBottom: padding.bottom,\n            minimap: minimap,\n            verticalScrollbarWidth: verticalScrollbarWidth,\n            viewLineCount: viewLineCount,\n            remainingWidth: remainingWidth,\n            isViewportWrapping: isViewportWrapping,\n        }, env.memory || new ComputeOptionsMemory());\n        if (minimapLayout.renderMinimap !== 0 /* RenderMinimap.None */ && minimapLayout.minimapLeft === 0) {\n            // the minimap is rendered to the left, so move everything to the right\n            glyphMarginLeft += minimapLayout.minimapWidth;\n            lineNumbersLeft += minimapLayout.minimapWidth;\n            decorationsLeft += minimapLayout.minimapWidth;\n            contentLeft += minimapLayout.minimapWidth;\n        }\n        const contentWidth = remainingWidth - minimapLayout.minimapWidth;\n        // (leaving 2px for the cursor to have space after the last character)\n        const viewportColumn = Math.max(1, Math.floor((contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth));\n        const verticalArrowSize = (verticalScrollbarHasArrows ? scrollbarArrowSize : 0);\n        if (isViewportWrapping) {\n            // compute the actual wrappingColumn\n            wrappingColumn = Math.max(1, viewportColumn);\n            if (wordWrap === 'bounded') {\n                wrappingColumn = Math.min(wrappingColumn, wordWrapColumn);\n            }\n        }\n        return {\n            width: outerWidth,\n            height: outerHeight,\n            glyphMarginLeft: glyphMarginLeft,\n            glyphMarginWidth: glyphMarginWidth,\n            glyphMarginDecorationLaneCount: env.glyphMarginDecorationLaneCount,\n            lineNumbersLeft: lineNumbersLeft,\n            lineNumbersWidth: lineNumbersWidth,\n            decorationsLeft: decorationsLeft,\n            decorationsWidth: lineDecorationsWidth,\n            contentLeft: contentLeft,\n            contentWidth: contentWidth,\n            minimap: minimapLayout,\n            viewportColumn: viewportColumn,\n            isWordWrapMinified: isWordWrapMinified,\n            isViewportWrapping: isViewportWrapping,\n            wrappingColumn: wrappingColumn,\n            verticalScrollbarWidth: verticalScrollbarWidth,\n            horizontalScrollbarHeight: horizontalScrollbarHeight,\n            overviewRuler: {\n                top: verticalArrowSize,\n                width: verticalScrollbarWidth,\n                height: (outerHeight - 2 * verticalArrowSize),\n                right: 0\n            }\n        };\n    }\n}\n//#endregion\n//#region WrappingStrategy\nclass WrappingStrategy extends BaseEditorOption {\n    constructor() {\n        super(137 /* EditorOption.wrappingStrategy */, 'wrappingStrategy', 'simple', {\n            'editor.wrappingStrategy': {\n                enumDescriptions: [\n                    nls.localize('wrappingStrategy.simple', \"Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.\"),\n                    nls.localize('wrappingStrategy.advanced', \"Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.\")\n                ],\n                type: 'string',\n                enum: ['simple', 'advanced'],\n                default: 'simple',\n                description: nls.localize('wrappingStrategy', \"Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.\")\n            }\n        });\n    }\n    validate(input) {\n        return stringSet(input, 'simple', ['simple', 'advanced']);\n    }\n    compute(env, options, value) {\n        const accessibilitySupport = options.get(2 /* EditorOption.accessibilitySupport */);\n        if (accessibilitySupport === 2 /* AccessibilitySupport.Enabled */) {\n            // if we know for a fact that a screen reader is attached, we switch our strategy to advanced to\n            // help that the editor's wrapping points match the textarea's wrapping points\n            return 'advanced';\n        }\n        return value;\n    }\n}\nclass EditorLightbulb extends BaseEditorOption {\n    constructor() {\n        const defaults = { enabled: true };\n        super(64 /* EditorOption.lightbulb */, 'lightbulb', defaults, {\n            'editor.lightbulb.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                description: nls.localize('codeActions', \"Enables the Code Action lightbulb in the editor.\")\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled)\n        };\n    }\n}\nclass EditorStickyScroll extends BaseEditorOption {\n    constructor() {\n        const defaults = { enabled: false, maxLineCount: 5, defaultModel: 'outlineModel', scrollWithEditor: true };\n        super(114 /* EditorOption.stickyScroll */, 'stickyScroll', defaults, {\n            'editor.stickyScroll.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                description: nls.localize('editor.stickyScroll.enabled', \"Shows the nested current scopes during the scroll at the top of the editor.\")\n            },\n            'editor.stickyScroll.maxLineCount': {\n                type: 'number',\n                default: defaults.maxLineCount,\n                minimum: 1,\n                maximum: 10,\n                description: nls.localize('editor.stickyScroll.maxLineCount', \"Defines the maximum number of sticky lines to show.\")\n            },\n            'editor.stickyScroll.defaultModel': {\n                type: 'string',\n                enum: ['outlineModel', 'foldingProviderModel', 'indentationModel'],\n                default: defaults.defaultModel,\n                description: nls.localize('editor.stickyScroll.defaultModel', \"Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases.\")\n            },\n            'editor.stickyScroll.scrollWithEditor': {\n                type: 'boolean',\n                default: defaults.scrollWithEditor,\n                description: nls.localize('editor.stickyScroll.scrollWithEditor', \"Enable scrolling of the sticky scroll widget with the editor's horizontal scrollbar.\")\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\n            maxLineCount: EditorIntOption.clampedInt(input.maxLineCount, this.defaultValue.maxLineCount, 1, 10),\n            defaultModel: stringSet(input.defaultModel, this.defaultValue.defaultModel, ['outlineModel', 'foldingProviderModel', 'indentationModel']),\n            scrollWithEditor: boolean(input.scrollWithEditor, this.defaultValue.scrollWithEditor)\n        };\n    }\n}\nclass EditorInlayHints extends BaseEditorOption {\n    constructor() {\n        const defaults = { enabled: 'on', fontSize: 0, fontFamily: '', padding: false };\n        super(139 /* EditorOption.inlayHints */, 'inlayHints', defaults, {\n            'editor.inlayHints.enabled': {\n                type: 'string',\n                default: defaults.enabled,\n                description: nls.localize('inlayHints.enable', \"Enables the inlay hints in the editor.\"),\n                enum: ['on', 'onUnlessPressed', 'offUnlessPressed', 'off'],\n                markdownEnumDescriptions: [\n                    nls.localize('editor.inlayHints.on', \"Inlay hints are enabled\"),\n                    nls.localize('editor.inlayHints.onUnlessPressed', \"Inlay hints are showing by default and hide when holding {0}\", platform.isMacintosh ? `Ctrl+Option` : `Ctrl+Alt`),\n                    nls.localize('editor.inlayHints.offUnlessPressed', \"Inlay hints are hidden by default and show when holding {0}\", platform.isMacintosh ? `Ctrl+Option` : `Ctrl+Alt`),\n                    nls.localize('editor.inlayHints.off', \"Inlay hints are disabled\"),\n                ],\n            },\n            'editor.inlayHints.fontSize': {\n                type: 'number',\n                default: defaults.fontSize,\n                markdownDescription: nls.localize('inlayHints.fontSize', \"Controls font size of inlay hints in the editor. As default the {0} is used when the configured value is less than {1} or greater than the editor font size.\", '`#editor.fontSize#`', '`5`')\n            },\n            'editor.inlayHints.fontFamily': {\n                type: 'string',\n                default: defaults.fontFamily,\n                markdownDescription: nls.localize('inlayHints.fontFamily', \"Controls font family of inlay hints in the editor. When set to empty, the {0} is used.\", '`#editor.fontFamily#`')\n            },\n            'editor.inlayHints.padding': {\n                type: 'boolean',\n                default: defaults.padding,\n                description: nls.localize('inlayHints.padding', \"Enables the padding around the inlay hints in the editor.\")\n            }\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        if (typeof input.enabled === 'boolean') {\n            input.enabled = input.enabled ? 'on' : 'off';\n        }\n        return {\n            enabled: stringSet(input.enabled, this.defaultValue.enabled, ['on', 'off', 'offUnlessPressed', 'onUnlessPressed']),\n            fontSize: EditorIntOption.clampedInt(input.fontSize, this.defaultValue.fontSize, 0, 100),\n            fontFamily: EditorStringOption.string(input.fontFamily, this.defaultValue.fontFamily),\n            padding: boolean(input.padding, this.defaultValue.padding)\n        };\n    }\n}\n//#endregion\n//#region lineDecorationsWidth\nclass EditorLineDecorationsWidth extends BaseEditorOption {\n    constructor() {\n        super(65 /* EditorOption.lineDecorationsWidth */, 'lineDecorationsWidth', 10);\n    }\n    validate(input) {\n        if (typeof input === 'string' && /^\\d+(\\.\\d+)?ch$/.test(input)) {\n            const multiple = parseFloat(input.substring(0, input.length - 2));\n            return -multiple; // negative numbers signal a multiple\n        }\n        else {\n            return EditorIntOption.clampedInt(input, this.defaultValue, 0, 1000);\n        }\n    }\n    compute(env, options, value) {\n        if (value < 0) {\n            // negative numbers signal a multiple\n            return EditorIntOption.clampedInt(-value * env.fontInfo.typicalHalfwidthCharacterWidth, this.defaultValue, 0, 1000);\n        }\n        else {\n            return value;\n        }\n    }\n}\n//#endregion\n//#region lineHeight\nclass EditorLineHeight extends EditorFloatOption {\n    constructor() {\n        super(66 /* EditorOption.lineHeight */, 'lineHeight', EDITOR_FONT_DEFAULTS.lineHeight, x => EditorFloatOption.clamp(x, 0, 150), { markdownDescription: nls.localize('lineHeight', \"Controls the line height. \\n - Use 0 to automatically compute the line height from the font size.\\n - Values between 0 and 8 will be used as a multiplier with the font size.\\n - Values greater than or equal to 8 will be used as effective values.\") });\n    }\n    compute(env, options, value) {\n        // The lineHeight is computed from the fontSize if it is 0.\n        // Moreover, the final lineHeight respects the editor zoom level.\n        // So take the result from env.fontInfo\n        return env.fontInfo.lineHeight;\n    }\n}\nclass EditorMinimap extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            enabled: true,\n            size: 'proportional',\n            side: 'right',\n            showSlider: 'mouseover',\n            autohide: false,\n            renderCharacters: true,\n            maxColumn: 120,\n            scale: 1,\n        };\n        super(72 /* EditorOption.minimap */, 'minimap', defaults, {\n            'editor.minimap.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                description: nls.localize('minimap.enabled', \"Controls whether the minimap is shown.\")\n            },\n            'editor.minimap.autohide': {\n                type: 'boolean',\n                default: defaults.autohide,\n                description: nls.localize('minimap.autohide', \"Controls whether the minimap is hidden automatically.\")\n            },\n            'editor.minimap.size': {\n                type: 'string',\n                enum: ['proportional', 'fill', 'fit'],\n                enumDescriptions: [\n                    nls.localize('minimap.size.proportional', \"The minimap has the same size as the editor contents (and might scroll).\"),\n                    nls.localize('minimap.size.fill', \"The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).\"),\n                    nls.localize('minimap.size.fit', \"The minimap will shrink as necessary to never be larger than the editor (no scrolling).\"),\n                ],\n                default: defaults.size,\n                description: nls.localize('minimap.size', \"Controls the size of the minimap.\")\n            },\n            'editor.minimap.side': {\n                type: 'string',\n                enum: ['left', 'right'],\n                default: defaults.side,\n                description: nls.localize('minimap.side', \"Controls the side where to render the minimap.\")\n            },\n            'editor.minimap.showSlider': {\n                type: 'string',\n                enum: ['always', 'mouseover'],\n                default: defaults.showSlider,\n                description: nls.localize('minimap.showSlider', \"Controls when the minimap slider is shown.\")\n            },\n            'editor.minimap.scale': {\n                type: 'number',\n                default: defaults.scale,\n                minimum: 1,\n                maximum: 3,\n                enum: [1, 2, 3],\n                description: nls.localize('minimap.scale', \"Scale of content drawn in the minimap: 1, 2 or 3.\")\n            },\n            'editor.minimap.renderCharacters': {\n                type: 'boolean',\n                default: defaults.renderCharacters,\n                description: nls.localize('minimap.renderCharacters', \"Render the actual characters on a line as opposed to color blocks.\")\n            },\n            'editor.minimap.maxColumn': {\n                type: 'number',\n                default: defaults.maxColumn,\n                description: nls.localize('minimap.maxColumn', \"Limit the width of the minimap to render at most a certain number of columns.\")\n            }\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\n            autohide: boolean(input.autohide, this.defaultValue.autohide),\n            size: stringSet(input.size, this.defaultValue.size, ['proportional', 'fill', 'fit']),\n            side: stringSet(input.side, this.defaultValue.side, ['right', 'left']),\n            showSlider: stringSet(input.showSlider, this.defaultValue.showSlider, ['always', 'mouseover']),\n            renderCharacters: boolean(input.renderCharacters, this.defaultValue.renderCharacters),\n            scale: EditorIntOption.clampedInt(input.scale, 1, 1, 3),\n            maxColumn: EditorIntOption.clampedInt(input.maxColumn, this.defaultValue.maxColumn, 1, 10000),\n        };\n    }\n}\n//#endregion\n//#region multiCursorModifier\nfunction _multiCursorModifierFromString(multiCursorModifier) {\n    if (multiCursorModifier === 'ctrlCmd') {\n        return (platform.isMacintosh ? 'metaKey' : 'ctrlKey');\n    }\n    return 'altKey';\n}\nclass EditorPadding extends BaseEditorOption {\n    constructor() {\n        super(83 /* EditorOption.padding */, 'padding', { top: 0, bottom: 0 }, {\n            'editor.padding.top': {\n                type: 'number',\n                default: 0,\n                minimum: 0,\n                maximum: 1000,\n                description: nls.localize('padding.top', \"Controls the amount of space between the top edge of the editor and the first line.\")\n            },\n            'editor.padding.bottom': {\n                type: 'number',\n                default: 0,\n                minimum: 0,\n                maximum: 1000,\n                description: nls.localize('padding.bottom', \"Controls the amount of space between the bottom edge of the editor and the last line.\")\n            }\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            top: EditorIntOption.clampedInt(input.top, 0, 0, 1000),\n            bottom: EditorIntOption.clampedInt(input.bottom, 0, 0, 1000)\n        };\n    }\n}\nclass EditorParameterHints extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            enabled: true,\n            cycle: true\n        };\n        super(85 /* EditorOption.parameterHints */, 'parameterHints', defaults, {\n            'editor.parameterHints.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                description: nls.localize('parameterHints.enabled', \"Enables a pop-up that shows parameter documentation and type information as you type.\")\n            },\n            'editor.parameterHints.cycle': {\n                type: 'boolean',\n                default: defaults.cycle,\n                description: nls.localize('parameterHints.cycle', \"Controls whether the parameter hints menu cycles or closes when reaching the end of the list.\")\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\n            cycle: boolean(input.cycle, this.defaultValue.cycle)\n        };\n    }\n}\n//#endregion\n//#region pixelRatio\nclass EditorPixelRatio extends ComputedEditorOption {\n    constructor() {\n        super(141 /* EditorOption.pixelRatio */);\n    }\n    compute(env, options, _) {\n        return env.pixelRatio;\n    }\n}\nclass EditorQuickSuggestions extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            other: 'on',\n            comments: 'off',\n            strings: 'off'\n        };\n        const types = [\n            { type: 'boolean' },\n            {\n                type: 'string',\n                enum: ['on', 'inline', 'off'],\n                enumDescriptions: [nls.localize('on', \"Quick suggestions show inside the suggest widget\"), nls.localize('inline', \"Quick suggestions show as ghost text\"), nls.localize('off', \"Quick suggestions are disabled\")]\n            }\n        ];\n        super(88 /* EditorOption.quickSuggestions */, 'quickSuggestions', defaults, {\n            type: 'object',\n            additionalProperties: false,\n            properties: {\n                strings: {\n                    anyOf: types,\n                    default: defaults.strings,\n                    description: nls.localize('quickSuggestions.strings', \"Enable quick suggestions inside strings.\")\n                },\n                comments: {\n                    anyOf: types,\n                    default: defaults.comments,\n                    description: nls.localize('quickSuggestions.comments', \"Enable quick suggestions inside comments.\")\n                },\n                other: {\n                    anyOf: types,\n                    default: defaults.other,\n                    description: nls.localize('quickSuggestions.other', \"Enable quick suggestions outside of strings and comments.\")\n                },\n            },\n            default: defaults,\n            markdownDescription: nls.localize('quickSuggestions', \"Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the '{0}'-setting which controls if suggestions are triggered by special characters.\", `#editor.suggestOnTriggerCharacters#`)\n        });\n        this.defaultValue = defaults;\n    }\n    validate(input) {\n        if (typeof input === 'boolean') {\n            // boolean -> all on/off\n            const value = input ? 'on' : 'off';\n            return { comments: value, strings: value, other: value };\n        }\n        if (!input || typeof input !== 'object') {\n            // invalid object\n            return this.defaultValue;\n        }\n        const { other, comments, strings } = input;\n        const allowedValues = ['on', 'inline', 'off'];\n        let validatedOther;\n        let validatedComments;\n        let validatedStrings;\n        if (typeof other === 'boolean') {\n            validatedOther = other ? 'on' : 'off';\n        }\n        else {\n            validatedOther = stringSet(other, this.defaultValue.other, allowedValues);\n        }\n        if (typeof comments === 'boolean') {\n            validatedComments = comments ? 'on' : 'off';\n        }\n        else {\n            validatedComments = stringSet(comments, this.defaultValue.comments, allowedValues);\n        }\n        if (typeof strings === 'boolean') {\n            validatedStrings = strings ? 'on' : 'off';\n        }\n        else {\n            validatedStrings = stringSet(strings, this.defaultValue.strings, allowedValues);\n        }\n        return {\n            other: validatedOther,\n            comments: validatedComments,\n            strings: validatedStrings\n        };\n    }\n}\nclass EditorRenderLineNumbersOption extends BaseEditorOption {\n    constructor() {\n        super(67 /* EditorOption.lineNumbers */, 'lineNumbers', { renderType: 1 /* RenderLineNumbersType.On */, renderFn: null }, {\n            type: 'string',\n            enum: ['off', 'on', 'relative', 'interval'],\n            enumDescriptions: [\n                nls.localize('lineNumbers.off', \"Line numbers are not rendered.\"),\n                nls.localize('lineNumbers.on', \"Line numbers are rendered as absolute number.\"),\n                nls.localize('lineNumbers.relative', \"Line numbers are rendered as distance in lines to cursor position.\"),\n                nls.localize('lineNumbers.interval', \"Line numbers are rendered every 10 lines.\")\n            ],\n            default: 'on',\n            description: nls.localize('lineNumbers', \"Controls the display of line numbers.\")\n        });\n    }\n    validate(lineNumbers) {\n        let renderType = this.defaultValue.renderType;\n        let renderFn = this.defaultValue.renderFn;\n        if (typeof lineNumbers !== 'undefined') {\n            if (typeof lineNumbers === 'function') {\n                renderType = 4 /* RenderLineNumbersType.Custom */;\n                renderFn = lineNumbers;\n            }\n            else if (lineNumbers === 'interval') {\n                renderType = 3 /* RenderLineNumbersType.Interval */;\n            }\n            else if (lineNumbers === 'relative') {\n                renderType = 2 /* RenderLineNumbersType.Relative */;\n            }\n            else if (lineNumbers === 'on') {\n                renderType = 1 /* RenderLineNumbersType.On */;\n            }\n            else {\n                renderType = 0 /* RenderLineNumbersType.Off */;\n            }\n        }\n        return {\n            renderType,\n            renderFn\n        };\n    }\n}\n//#endregion\n//#region renderValidationDecorations\n/**\n * @internal\n */\nexport function filterValidationDecorations(options) {\n    const renderValidationDecorations = options.get(97 /* EditorOption.renderValidationDecorations */);\n    if (renderValidationDecorations === 'editable') {\n        return options.get(90 /* EditorOption.readOnly */);\n    }\n    return renderValidationDecorations === 'on' ? false : true;\n}\nclass EditorRulers extends BaseEditorOption {\n    constructor() {\n        const defaults = [];\n        const columnSchema = { type: 'number', description: nls.localize('rulers.size', \"Number of monospace characters at which this editor ruler will render.\") };\n        super(101 /* EditorOption.rulers */, 'rulers', defaults, {\n            type: 'array',\n            items: {\n                anyOf: [\n                    columnSchema,\n                    {\n                        type: [\n                            'object'\n                        ],\n                        properties: {\n                            column: columnSchema,\n                            color: {\n                                type: 'string',\n                                description: nls.localize('rulers.color', \"Color of this editor ruler.\"),\n                                format: 'color-hex'\n                            }\n                        }\n                    }\n                ]\n            },\n            default: defaults,\n            description: nls.localize('rulers', \"Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.\")\n        });\n    }\n    validate(input) {\n        if (Array.isArray(input)) {\n            const rulers = [];\n            for (const _element of input) {\n                if (typeof _element === 'number') {\n                    rulers.push({\n                        column: EditorIntOption.clampedInt(_element, 0, 0, 10000),\n                        color: null\n                    });\n                }\n                else if (_element && typeof _element === 'object') {\n                    const element = _element;\n                    rulers.push({\n                        column: EditorIntOption.clampedInt(element.column, 0, 0, 10000),\n                        color: element.color\n                    });\n                }\n            }\n            rulers.sort((a, b) => a.column - b.column);\n            return rulers;\n        }\n        return this.defaultValue;\n    }\n}\n//#endregion\n//#region readonly\n/**\n * Configuration options for readonly message\n */\nclass ReadonlyMessage extends BaseEditorOption {\n    constructor() {\n        const defaults = undefined;\n        super(91 /* EditorOption.readOnlyMessage */, 'readOnlyMessage', defaults);\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        return _input;\n    }\n}\nfunction _scrollbarVisibilityFromString(visibility, defaultValue) {\n    if (typeof visibility !== 'string') {\n        return defaultValue;\n    }\n    switch (visibility) {\n        case 'hidden': return 2 /* ScrollbarVisibility.Hidden */;\n        case 'visible': return 3 /* ScrollbarVisibility.Visible */;\n        default: return 1 /* ScrollbarVisibility.Auto */;\n    }\n}\nclass EditorScrollbar extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            vertical: 1 /* ScrollbarVisibility.Auto */,\n            horizontal: 1 /* ScrollbarVisibility.Auto */,\n            arrowSize: 11,\n            useShadows: true,\n            verticalHasArrows: false,\n            horizontalHasArrows: false,\n            horizontalScrollbarSize: 12,\n            horizontalSliderSize: 12,\n            verticalScrollbarSize: 14,\n            verticalSliderSize: 14,\n            handleMouseWheel: true,\n            alwaysConsumeMouseWheel: true,\n            scrollByPage: false\n        };\n        super(102 /* EditorOption.scrollbar */, 'scrollbar', defaults, {\n            'editor.scrollbar.vertical': {\n                type: 'string',\n                enum: ['auto', 'visible', 'hidden'],\n                enumDescriptions: [\n                    nls.localize('scrollbar.vertical.auto', \"The vertical scrollbar will be visible only when necessary.\"),\n                    nls.localize('scrollbar.vertical.visible', \"The vertical scrollbar will always be visible.\"),\n                    nls.localize('scrollbar.vertical.fit', \"The vertical scrollbar will always be hidden.\"),\n                ],\n                default: 'auto',\n                description: nls.localize('scrollbar.vertical', \"Controls the visibility of the vertical scrollbar.\")\n            },\n            'editor.scrollbar.horizontal': {\n                type: 'string',\n                enum: ['auto', 'visible', 'hidden'],\n                enumDescriptions: [\n                    nls.localize('scrollbar.horizontal.auto', \"The horizontal scrollbar will be visible only when necessary.\"),\n                    nls.localize('scrollbar.horizontal.visible', \"The horizontal scrollbar will always be visible.\"),\n                    nls.localize('scrollbar.horizontal.fit', \"The horizontal scrollbar will always be hidden.\"),\n                ],\n                default: 'auto',\n                description: nls.localize('scrollbar.horizontal', \"Controls the visibility of the horizontal scrollbar.\")\n            },\n            'editor.scrollbar.verticalScrollbarSize': {\n                type: 'number',\n                default: defaults.verticalScrollbarSize,\n                description: nls.localize('scrollbar.verticalScrollbarSize', \"The width of the vertical scrollbar.\")\n            },\n            'editor.scrollbar.horizontalScrollbarSize': {\n                type: 'number',\n                default: defaults.horizontalScrollbarSize,\n                description: nls.localize('scrollbar.horizontalScrollbarSize', \"The height of the horizontal scrollbar.\")\n            },\n            'editor.scrollbar.scrollByPage': {\n                type: 'boolean',\n                default: defaults.scrollByPage,\n                description: nls.localize('scrollbar.scrollByPage', \"Controls whether clicks scroll by page or jump to click position.\")\n            }\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        const horizontalScrollbarSize = EditorIntOption.clampedInt(input.horizontalScrollbarSize, this.defaultValue.horizontalScrollbarSize, 0, 1000);\n        const verticalScrollbarSize = EditorIntOption.clampedInt(input.verticalScrollbarSize, this.defaultValue.verticalScrollbarSize, 0, 1000);\n        return {\n            arrowSize: EditorIntOption.clampedInt(input.arrowSize, this.defaultValue.arrowSize, 0, 1000),\n            vertical: _scrollbarVisibilityFromString(input.vertical, this.defaultValue.vertical),\n            horizontal: _scrollbarVisibilityFromString(input.horizontal, this.defaultValue.horizontal),\n            useShadows: boolean(input.useShadows, this.defaultValue.useShadows),\n            verticalHasArrows: boolean(input.verticalHasArrows, this.defaultValue.verticalHasArrows),\n            horizontalHasArrows: boolean(input.horizontalHasArrows, this.defaultValue.horizontalHasArrows),\n            handleMouseWheel: boolean(input.handleMouseWheel, this.defaultValue.handleMouseWheel),\n            alwaysConsumeMouseWheel: boolean(input.alwaysConsumeMouseWheel, this.defaultValue.alwaysConsumeMouseWheel),\n            horizontalScrollbarSize: horizontalScrollbarSize,\n            horizontalSliderSize: EditorIntOption.clampedInt(input.horizontalSliderSize, horizontalScrollbarSize, 0, 1000),\n            verticalScrollbarSize: verticalScrollbarSize,\n            verticalSliderSize: EditorIntOption.clampedInt(input.verticalSliderSize, verticalScrollbarSize, 0, 1000),\n            scrollByPage: boolean(input.scrollByPage, this.defaultValue.scrollByPage),\n        };\n    }\n}\n/**\n * @internal\n*/\nexport const inUntrustedWorkspace = 'inUntrustedWorkspace';\n/**\n * @internal\n */\nexport const unicodeHighlightConfigKeys = {\n    allowedCharacters: 'editor.unicodeHighlight.allowedCharacters',\n    invisibleCharacters: 'editor.unicodeHighlight.invisibleCharacters',\n    nonBasicASCII: 'editor.unicodeHighlight.nonBasicASCII',\n    ambiguousCharacters: 'editor.unicodeHighlight.ambiguousCharacters',\n    includeComments: 'editor.unicodeHighlight.includeComments',\n    includeStrings: 'editor.unicodeHighlight.includeStrings',\n    allowedLocales: 'editor.unicodeHighlight.allowedLocales',\n};\nclass UnicodeHighlight extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            nonBasicASCII: inUntrustedWorkspace,\n            invisibleCharacters: true,\n            ambiguousCharacters: true,\n            includeComments: inUntrustedWorkspace,\n            includeStrings: true,\n            allowedCharacters: {},\n            allowedLocales: { _os: true, _vscode: true },\n        };\n        super(124 /* EditorOption.unicodeHighlighting */, 'unicodeHighlight', defaults, {\n            [unicodeHighlightConfigKeys.nonBasicASCII]: {\n                restricted: true,\n                type: ['boolean', 'string'],\n                enum: [true, false, inUntrustedWorkspace],\n                default: defaults.nonBasicASCII,\n                description: nls.localize('unicodeHighlight.nonBasicASCII', \"Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.\")\n            },\n            [unicodeHighlightConfigKeys.invisibleCharacters]: {\n                restricted: true,\n                type: 'boolean',\n                default: defaults.invisibleCharacters,\n                description: nls.localize('unicodeHighlight.invisibleCharacters', \"Controls whether characters that just reserve space or have no width at all are highlighted.\")\n            },\n            [unicodeHighlightConfigKeys.ambiguousCharacters]: {\n                restricted: true,\n                type: 'boolean',\n                default: defaults.ambiguousCharacters,\n                description: nls.localize('unicodeHighlight.ambiguousCharacters', \"Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.\")\n            },\n            [unicodeHighlightConfigKeys.includeComments]: {\n                restricted: true,\n                type: ['boolean', 'string'],\n                enum: [true, false, inUntrustedWorkspace],\n                default: defaults.includeComments,\n                description: nls.localize('unicodeHighlight.includeComments', \"Controls whether characters in comments should also be subject to Unicode highlighting.\")\n            },\n            [unicodeHighlightConfigKeys.includeStrings]: {\n                restricted: true,\n                type: ['boolean', 'string'],\n                enum: [true, false, inUntrustedWorkspace],\n                default: defaults.includeStrings,\n                description: nls.localize('unicodeHighlight.includeStrings', \"Controls whether characters in strings should also be subject to Unicode highlighting.\")\n            },\n            [unicodeHighlightConfigKeys.allowedCharacters]: {\n                restricted: true,\n                type: 'object',\n                default: defaults.allowedCharacters,\n                description: nls.localize('unicodeHighlight.allowedCharacters', \"Defines allowed characters that are not being highlighted.\"),\n                additionalProperties: {\n                    type: 'boolean'\n                }\n            },\n            [unicodeHighlightConfigKeys.allowedLocales]: {\n                restricted: true,\n                type: 'object',\n                additionalProperties: {\n                    type: 'boolean'\n                },\n                default: defaults.allowedLocales,\n                description: nls.localize('unicodeHighlight.allowedLocales', \"Unicode characters that are common in allowed locales are not being highlighted.\")\n            },\n        });\n    }\n    applyUpdate(value, update) {\n        let didChange = false;\n        if (update.allowedCharacters && value) {\n            // Treat allowedCharacters atomically\n            if (!objects.equals(value.allowedCharacters, update.allowedCharacters)) {\n                value = Object.assign(Object.assign({}, value), { allowedCharacters: update.allowedCharacters });\n                didChange = true;\n            }\n        }\n        if (update.allowedLocales && value) {\n            // Treat allowedLocales atomically\n            if (!objects.equals(value.allowedLocales, update.allowedLocales)) {\n                value = Object.assign(Object.assign({}, value), { allowedLocales: update.allowedLocales });\n                didChange = true;\n            }\n        }\n        const result = super.applyUpdate(value, update);\n        if (didChange) {\n            return new ApplyUpdateResult(result.newValue, true);\n        }\n        return result;\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            nonBasicASCII: primitiveSet(input.nonBasicASCII, inUntrustedWorkspace, [true, false, inUntrustedWorkspace]),\n            invisibleCharacters: boolean(input.invisibleCharacters, this.defaultValue.invisibleCharacters),\n            ambiguousCharacters: boolean(input.ambiguousCharacters, this.defaultValue.ambiguousCharacters),\n            includeComments: primitiveSet(input.includeComments, inUntrustedWorkspace, [true, false, inUntrustedWorkspace]),\n            includeStrings: primitiveSet(input.includeStrings, inUntrustedWorkspace, [true, false, inUntrustedWorkspace]),\n            allowedCharacters: this.validateBooleanMap(_input.allowedCharacters, this.defaultValue.allowedCharacters),\n            allowedLocales: this.validateBooleanMap(_input.allowedLocales, this.defaultValue.allowedLocales),\n        };\n    }\n    validateBooleanMap(map, defaultValue) {\n        if ((typeof map !== 'object') || !map) {\n            return defaultValue;\n        }\n        const result = {};\n        for (const [key, value] of Object.entries(map)) {\n            if (value === true) {\n                result[key] = true;\n            }\n        }\n        return result;\n    }\n}\n/**\n * Configuration options for inline suggestions\n */\nclass InlineEditorSuggest extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            enabled: true,\n            mode: 'subwordSmart',\n            showToolbar: 'onHover',\n            suppressSuggestions: false,\n            keepOnBlur: false,\n        };\n        super(62 /* EditorOption.inlineSuggest */, 'inlineSuggest', defaults, {\n            'editor.inlineSuggest.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                description: nls.localize('inlineSuggest.enabled', \"Controls whether to automatically show inline suggestions in the editor.\")\n            },\n            'editor.inlineSuggest.showToolbar': {\n                type: 'string',\n                default: defaults.showToolbar,\n                enum: ['always', 'onHover'],\n                enumDescriptions: [\n                    nls.localize('inlineSuggest.showToolbar.always', \"Show the inline suggestion toolbar whenever an inline suggestion is shown.\"),\n                    nls.localize('inlineSuggest.showToolbar.onHover', \"Show the inline suggestion toolbar when hovering over an inline suggestion.\"),\n                ],\n                description: nls.localize('inlineSuggest.showToolbar', \"Controls when to show the inline suggestion toolbar.\"),\n            },\n            'editor.inlineSuggest.suppressSuggestions': {\n                type: 'boolean',\n                default: defaults.suppressSuggestions,\n                description: nls.localize('inlineSuggest.suppressSuggestions', \"Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available.\")\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\n            mode: stringSet(input.mode, this.defaultValue.mode, ['prefix', 'subword', 'subwordSmart']),\n            showToolbar: stringSet(input.showToolbar, this.defaultValue.showToolbar, ['always', 'onHover']),\n            suppressSuggestions: boolean(input.suppressSuggestions, this.defaultValue.suppressSuggestions),\n            keepOnBlur: boolean(input.keepOnBlur, this.defaultValue.keepOnBlur),\n        };\n    }\n}\n/**\n * Configuration options for inline suggestions\n */\nclass BracketPairColorization extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            enabled: EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions.enabled,\n            independentColorPoolPerBracketType: EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions.independentColorPoolPerBracketType,\n        };\n        super(15 /* EditorOption.bracketPairColorization */, 'bracketPairColorization', defaults, {\n            'editor.bracketPairColorization.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                markdownDescription: nls.localize('bracketPairColorization.enabled', \"Controls whether bracket pair colorization is enabled or not. Use {0} to override the bracket highlight colors.\", '`#workbench.colorCustomizations#`')\n            },\n            'editor.bracketPairColorization.independentColorPoolPerBracketType': {\n                type: 'boolean',\n                default: defaults.independentColorPoolPerBracketType,\n                description: nls.localize('bracketPairColorization.independentColorPoolPerBracketType', \"Controls whether each bracket type has its own independent color pool.\")\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\n            independentColorPoolPerBracketType: boolean(input.independentColorPoolPerBracketType, this.defaultValue.independentColorPoolPerBracketType),\n        };\n    }\n}\n/**\n * Configuration options for inline suggestions\n */\nclass GuideOptions extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            bracketPairs: false,\n            bracketPairsHorizontal: 'active',\n            highlightActiveBracketPair: true,\n            indentation: true,\n            highlightActiveIndentation: true\n        };\n        super(16 /* EditorOption.guides */, 'guides', defaults, {\n            'editor.guides.bracketPairs': {\n                type: ['boolean', 'string'],\n                enum: [true, 'active', false],\n                enumDescriptions: [\n                    nls.localize('editor.guides.bracketPairs.true', \"Enables bracket pair guides.\"),\n                    nls.localize('editor.guides.bracketPairs.active', \"Enables bracket pair guides only for the active bracket pair.\"),\n                    nls.localize('editor.guides.bracketPairs.false', \"Disables bracket pair guides.\"),\n                ],\n                default: defaults.bracketPairs,\n                description: nls.localize('editor.guides.bracketPairs', \"Controls whether bracket pair guides are enabled or not.\")\n            },\n            'editor.guides.bracketPairsHorizontal': {\n                type: ['boolean', 'string'],\n                enum: [true, 'active', false],\n                enumDescriptions: [\n                    nls.localize('editor.guides.bracketPairsHorizontal.true', \"Enables horizontal guides as addition to vertical bracket pair guides.\"),\n                    nls.localize('editor.guides.bracketPairsHorizontal.active', \"Enables horizontal guides only for the active bracket pair.\"),\n                    nls.localize('editor.guides.bracketPairsHorizontal.false', \"Disables horizontal bracket pair guides.\"),\n                ],\n                default: defaults.bracketPairsHorizontal,\n                description: nls.localize('editor.guides.bracketPairsHorizontal', \"Controls whether horizontal bracket pair guides are enabled or not.\")\n            },\n            'editor.guides.highlightActiveBracketPair': {\n                type: 'boolean',\n                default: defaults.highlightActiveBracketPair,\n                description: nls.localize('editor.guides.highlightActiveBracketPair', \"Controls whether the editor should highlight the active bracket pair.\")\n            },\n            'editor.guides.indentation': {\n                type: 'boolean',\n                default: defaults.indentation,\n                description: nls.localize('editor.guides.indentation', \"Controls whether the editor should render indent guides.\")\n            },\n            'editor.guides.highlightActiveIndentation': {\n                type: ['boolean', 'string'],\n                enum: [true, 'always', false],\n                enumDescriptions: [\n                    nls.localize('editor.guides.highlightActiveIndentation.true', \"Highlights the active indent guide.\"),\n                    nls.localize('editor.guides.highlightActiveIndentation.always', \"Highlights the active indent guide even if bracket guides are highlighted.\"),\n                    nls.localize('editor.guides.highlightActiveIndentation.false', \"Do not highlight the active indent guide.\"),\n                ],\n                default: defaults.highlightActiveIndentation,\n                description: nls.localize('editor.guides.highlightActiveIndentation', \"Controls whether the editor should highlight the active indent guide.\")\n            }\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            bracketPairs: primitiveSet(input.bracketPairs, this.defaultValue.bracketPairs, [true, false, 'active']),\n            bracketPairsHorizontal: primitiveSet(input.bracketPairsHorizontal, this.defaultValue.bracketPairsHorizontal, [true, false, 'active']),\n            highlightActiveBracketPair: boolean(input.highlightActiveBracketPair, this.defaultValue.highlightActiveBracketPair),\n            indentation: boolean(input.indentation, this.defaultValue.indentation),\n            highlightActiveIndentation: primitiveSet(input.highlightActiveIndentation, this.defaultValue.highlightActiveIndentation, [true, false, 'always']),\n        };\n    }\n}\nfunction primitiveSet(value, defaultValue, allowedValues) {\n    const idx = allowedValues.indexOf(value);\n    if (idx === -1) {\n        return defaultValue;\n    }\n    return allowedValues[idx];\n}\nclass EditorSuggest extends BaseEditorOption {\n    constructor() {\n        const defaults = {\n            insertMode: 'insert',\n            filterGraceful: true,\n            snippetsPreventQuickSuggestions: false,\n            localityBonus: false,\n            shareSuggestSelections: false,\n            selectionMode: 'always',\n            showIcons: true,\n            showStatusBar: false,\n            preview: false,\n            previewMode: 'subwordSmart',\n            showInlineDetails: true,\n            showMethods: true,\n            showFunctions: true,\n            showConstructors: true,\n            showDeprecated: true,\n            matchOnWordStartOnly: true,\n            showFields: true,\n            showVariables: true,\n            showClasses: true,\n            showStructs: true,\n            showInterfaces: true,\n            showModules: true,\n            showProperties: true,\n            showEvents: true,\n            showOperators: true,\n            showUnits: true,\n            showValues: true,\n            showConstants: true,\n            showEnums: true,\n            showEnumMembers: true,\n            showKeywords: true,\n            showWords: true,\n            showColors: true,\n            showFiles: true,\n            showReferences: true,\n            showFolders: true,\n            showTypeParameters: true,\n            showSnippets: true,\n            showUsers: true,\n            showIssues: true,\n        };\n        super(117 /* EditorOption.suggest */, 'suggest', defaults, {\n            'editor.suggest.insertMode': {\n                type: 'string',\n                enum: ['insert', 'replace'],\n                enumDescriptions: [\n                    nls.localize('suggest.insertMode.insert', \"Insert suggestion without overwriting text right of the cursor.\"),\n                    nls.localize('suggest.insertMode.replace', \"Insert suggestion and overwrite text right of the cursor.\"),\n                ],\n                default: defaults.insertMode,\n                description: nls.localize('suggest.insertMode', \"Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.\")\n            },\n            'editor.suggest.filterGraceful': {\n                type: 'boolean',\n                default: defaults.filterGraceful,\n                description: nls.localize('suggest.filterGraceful', \"Controls whether filtering and sorting suggestions accounts for small typos.\")\n            },\n            'editor.suggest.localityBonus': {\n                type: 'boolean',\n                default: defaults.localityBonus,\n                description: nls.localize('suggest.localityBonus', \"Controls whether sorting favors words that appear close to the cursor.\")\n            },\n            'editor.suggest.shareSuggestSelections': {\n                type: 'boolean',\n                default: defaults.shareSuggestSelections,\n                markdownDescription: nls.localize('suggest.shareSuggestSelections', \"Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).\")\n            },\n            'editor.suggest.selectionMode': {\n                type: 'string',\n                enum: ['always', 'never', 'whenTriggerCharacter', 'whenQuickSuggestion'],\n                enumDescriptions: [\n                    nls.localize('suggest.insertMode.always', \"Always select a suggestion when automatically triggering IntelliSense.\"),\n                    nls.localize('suggest.insertMode.never', \"Never select a suggestion when automatically triggering IntelliSense.\"),\n                    nls.localize('suggest.insertMode.whenTriggerCharacter', \"Select a suggestion only when triggering IntelliSense from a trigger character.\"),\n                    nls.localize('suggest.insertMode.whenQuickSuggestion', \"Select a suggestion only when triggering IntelliSense as you type.\"),\n                ],\n                default: defaults.selectionMode,\n                markdownDescription: nls.localize('suggest.selectionMode', \"Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions (`#editor.quickSuggestions#` and `#editor.suggestOnTriggerCharacters#`) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`.\")\n            },\n            'editor.suggest.snippetsPreventQuickSuggestions': {\n                type: 'boolean',\n                default: defaults.snippetsPreventQuickSuggestions,\n                description: nls.localize('suggest.snippetsPreventQuickSuggestions', \"Controls whether an active snippet prevents quick suggestions.\")\n            },\n            'editor.suggest.showIcons': {\n                type: 'boolean',\n                default: defaults.showIcons,\n                description: nls.localize('suggest.showIcons', \"Controls whether to show or hide icons in suggestions.\")\n            },\n            'editor.suggest.showStatusBar': {\n                type: 'boolean',\n                default: defaults.showStatusBar,\n                description: nls.localize('suggest.showStatusBar', \"Controls the visibility of the status bar at the bottom of the suggest widget.\")\n            },\n            'editor.suggest.preview': {\n                type: 'boolean',\n                default: defaults.preview,\n                description: nls.localize('suggest.preview', \"Controls whether to preview the suggestion outcome in the editor.\")\n            },\n            'editor.suggest.showInlineDetails': {\n                type: 'boolean',\n                default: defaults.showInlineDetails,\n                description: nls.localize('suggest.showInlineDetails', \"Controls whether suggest details show inline with the label or only in the details widget.\")\n            },\n            'editor.suggest.maxVisibleSuggestions': {\n                type: 'number',\n                deprecationMessage: nls.localize('suggest.maxVisibleSuggestions.dep', \"This setting is deprecated. The suggest widget can now be resized.\"),\n            },\n            'editor.suggest.filteredTypes': {\n                type: 'object',\n                deprecationMessage: nls.localize('deprecated', \"This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.\")\n            },\n            'editor.suggest.showMethods': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showMethods', \"When enabled IntelliSense shows `method`-suggestions.\")\n            },\n            'editor.suggest.showFunctions': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showFunctions', \"When enabled IntelliSense shows `function`-suggestions.\")\n            },\n            'editor.suggest.showConstructors': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showConstructors', \"When enabled IntelliSense shows `constructor`-suggestions.\")\n            },\n            'editor.suggest.showDeprecated': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showDeprecated', \"When enabled IntelliSense shows `deprecated`-suggestions.\")\n            },\n            'editor.suggest.matchOnWordStartOnly': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.matchOnWordStartOnly', \"When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.\")\n            },\n            'editor.suggest.showFields': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showFields', \"When enabled IntelliSense shows `field`-suggestions.\")\n            },\n            'editor.suggest.showVariables': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showVariables', \"When enabled IntelliSense shows `variable`-suggestions.\")\n            },\n            'editor.suggest.showClasses': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showClasss', \"When enabled IntelliSense shows `class`-suggestions.\")\n            },\n            'editor.suggest.showStructs': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showStructs', \"When enabled IntelliSense shows `struct`-suggestions.\")\n            },\n            'editor.suggest.showInterfaces': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showInterfaces', \"When enabled IntelliSense shows `interface`-suggestions.\")\n            },\n            'editor.suggest.showModules': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showModules', \"When enabled IntelliSense shows `module`-suggestions.\")\n            },\n            'editor.suggest.showProperties': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showPropertys', \"When enabled IntelliSense shows `property`-suggestions.\")\n            },\n            'editor.suggest.showEvents': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showEvents', \"When enabled IntelliSense shows `event`-suggestions.\")\n            },\n            'editor.suggest.showOperators': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showOperators', \"When enabled IntelliSense shows `operator`-suggestions.\")\n            },\n            'editor.suggest.showUnits': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showUnits', \"When enabled IntelliSense shows `unit`-suggestions.\")\n            },\n            'editor.suggest.showValues': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showValues', \"When enabled IntelliSense shows `value`-suggestions.\")\n            },\n            'editor.suggest.showConstants': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showConstants', \"When enabled IntelliSense shows `constant`-suggestions.\")\n            },\n            'editor.suggest.showEnums': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showEnums', \"When enabled IntelliSense shows `enum`-suggestions.\")\n            },\n            'editor.suggest.showEnumMembers': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showEnumMembers', \"When enabled IntelliSense shows `enumMember`-suggestions.\")\n            },\n            'editor.suggest.showKeywords': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showKeywords', \"When enabled IntelliSense shows `keyword`-suggestions.\")\n            },\n            'editor.suggest.showWords': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showTexts', \"When enabled IntelliSense shows `text`-suggestions.\")\n            },\n            'editor.suggest.showColors': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showColors', \"When enabled IntelliSense shows `color`-suggestions.\")\n            },\n            'editor.suggest.showFiles': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showFiles', \"When enabled IntelliSense shows `file`-suggestions.\")\n            },\n            'editor.suggest.showReferences': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showReferences', \"When enabled IntelliSense shows `reference`-suggestions.\")\n            },\n            'editor.suggest.showCustomcolors': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showCustomcolors', \"When enabled IntelliSense shows `customcolor`-suggestions.\")\n            },\n            'editor.suggest.showFolders': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showFolders', \"When enabled IntelliSense shows `folder`-suggestions.\")\n            },\n            'editor.suggest.showTypeParameters': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showTypeParameters', \"When enabled IntelliSense shows `typeParameter`-suggestions.\")\n            },\n            'editor.suggest.showSnippets': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showSnippets', \"When enabled IntelliSense shows `snippet`-suggestions.\")\n            },\n            'editor.suggest.showUsers': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showUsers', \"When enabled IntelliSense shows `user`-suggestions.\")\n            },\n            'editor.suggest.showIssues': {\n                type: 'boolean',\n                default: true,\n                markdownDescription: nls.localize('editor.suggest.showIssues', \"When enabled IntelliSense shows `issues`-suggestions.\")\n            }\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            insertMode: stringSet(input.insertMode, this.defaultValue.insertMode, ['insert', 'replace']),\n            filterGraceful: boolean(input.filterGraceful, this.defaultValue.filterGraceful),\n            snippetsPreventQuickSuggestions: boolean(input.snippetsPreventQuickSuggestions, this.defaultValue.filterGraceful),\n            localityBonus: boolean(input.localityBonus, this.defaultValue.localityBonus),\n            shareSuggestSelections: boolean(input.shareSuggestSelections, this.defaultValue.shareSuggestSelections),\n            selectionMode: stringSet(input.selectionMode, this.defaultValue.selectionMode, ['always', 'never', 'whenQuickSuggestion', 'whenTriggerCharacter']),\n            showIcons: boolean(input.showIcons, this.defaultValue.showIcons),\n            showStatusBar: boolean(input.showStatusBar, this.defaultValue.showStatusBar),\n            preview: boolean(input.preview, this.defaultValue.preview),\n            previewMode: stringSet(input.previewMode, this.defaultValue.previewMode, ['prefix', 'subword', 'subwordSmart']),\n            showInlineDetails: boolean(input.showInlineDetails, this.defaultValue.showInlineDetails),\n            showMethods: boolean(input.showMethods, this.defaultValue.showMethods),\n            showFunctions: boolean(input.showFunctions, this.defaultValue.showFunctions),\n            showConstructors: boolean(input.showConstructors, this.defaultValue.showConstructors),\n            showDeprecated: boolean(input.showDeprecated, this.defaultValue.showDeprecated),\n            matchOnWordStartOnly: boolean(input.matchOnWordStartOnly, this.defaultValue.matchOnWordStartOnly),\n            showFields: boolean(input.showFields, this.defaultValue.showFields),\n            showVariables: boolean(input.showVariables, this.defaultValue.showVariables),\n            showClasses: boolean(input.showClasses, this.defaultValue.showClasses),\n            showStructs: boolean(input.showStructs, this.defaultValue.showStructs),\n            showInterfaces: boolean(input.showInterfaces, this.defaultValue.showInterfaces),\n            showModules: boolean(input.showModules, this.defaultValue.showModules),\n            showProperties: boolean(input.showProperties, this.defaultValue.showProperties),\n            showEvents: boolean(input.showEvents, this.defaultValue.showEvents),\n            showOperators: boolean(input.showOperators, this.defaultValue.showOperators),\n            showUnits: boolean(input.showUnits, this.defaultValue.showUnits),\n            showValues: boolean(input.showValues, this.defaultValue.showValues),\n            showConstants: boolean(input.showConstants, this.defaultValue.showConstants),\n            showEnums: boolean(input.showEnums, this.defaultValue.showEnums),\n            showEnumMembers: boolean(input.showEnumMembers, this.defaultValue.showEnumMembers),\n            showKeywords: boolean(input.showKeywords, this.defaultValue.showKeywords),\n            showWords: boolean(input.showWords, this.defaultValue.showWords),\n            showColors: boolean(input.showColors, this.defaultValue.showColors),\n            showFiles: boolean(input.showFiles, this.defaultValue.showFiles),\n            showReferences: boolean(input.showReferences, this.defaultValue.showReferences),\n            showFolders: boolean(input.showFolders, this.defaultValue.showFolders),\n            showTypeParameters: boolean(input.showTypeParameters, this.defaultValue.showTypeParameters),\n            showSnippets: boolean(input.showSnippets, this.defaultValue.showSnippets),\n            showUsers: boolean(input.showUsers, this.defaultValue.showUsers),\n            showIssues: boolean(input.showIssues, this.defaultValue.showIssues),\n        };\n    }\n}\nclass SmartSelect extends BaseEditorOption {\n    constructor() {\n        super(112 /* EditorOption.smartSelect */, 'smartSelect', {\n            selectLeadingAndTrailingWhitespace: true,\n            selectSubwords: true,\n        }, {\n            'editor.smartSelect.selectLeadingAndTrailingWhitespace': {\n                description: nls.localize('selectLeadingAndTrailingWhitespace', \"Whether leading and trailing whitespace should always be selected.\"),\n                default: true,\n                type: 'boolean'\n            },\n            'editor.smartSelect.selectSubwords': {\n                description: nls.localize('selectSubwords', \"Whether subwords (like 'foo' in 'fooBar' or 'foo_bar') should be selected.\"),\n                default: true,\n                type: 'boolean'\n            }\n        });\n    }\n    validate(input) {\n        if (!input || typeof input !== 'object') {\n            return this.defaultValue;\n        }\n        return {\n            selectLeadingAndTrailingWhitespace: boolean(input.selectLeadingAndTrailingWhitespace, this.defaultValue.selectLeadingAndTrailingWhitespace),\n            selectSubwords: boolean(input.selectSubwords, this.defaultValue.selectSubwords),\n        };\n    }\n}\nclass WrappingIndentOption extends BaseEditorOption {\n    constructor() {\n        super(136 /* EditorOption.wrappingIndent */, 'wrappingIndent', 1 /* WrappingIndent.Same */, {\n            'editor.wrappingIndent': {\n                type: 'string',\n                enum: ['none', 'same', 'indent', 'deepIndent'],\n                enumDescriptions: [\n                    nls.localize('wrappingIndent.none', \"No indentation. Wrapped lines begin at column 1.\"),\n                    nls.localize('wrappingIndent.same', \"Wrapped lines get the same indentation as the parent.\"),\n                    nls.localize('wrappingIndent.indent', \"Wrapped lines get +1 indentation toward the parent.\"),\n                    nls.localize('wrappingIndent.deepIndent', \"Wrapped lines get +2 indentation toward the parent.\"),\n                ],\n                description: nls.localize('wrappingIndent', \"Controls the indentation of wrapped lines.\"),\n                default: 'same'\n            }\n        });\n    }\n    validate(input) {\n        switch (input) {\n            case 'none': return 0 /* WrappingIndent.None */;\n            case 'same': return 1 /* WrappingIndent.Same */;\n            case 'indent': return 2 /* WrappingIndent.Indent */;\n            case 'deepIndent': return 3 /* WrappingIndent.DeepIndent */;\n        }\n        return 1 /* WrappingIndent.Same */;\n    }\n    compute(env, options, value) {\n        const accessibilitySupport = options.get(2 /* EditorOption.accessibilitySupport */);\n        if (accessibilitySupport === 2 /* AccessibilitySupport.Enabled */) {\n            // if we know for a fact that a screen reader is attached, we use no indent wrapping to\n            // help that the editor's wrapping points match the textarea's wrapping points\n            return 0 /* WrappingIndent.None */;\n        }\n        return value;\n    }\n}\nclass EditorWrappingInfoComputer extends ComputedEditorOption {\n    constructor() {\n        super(144 /* EditorOption.wrappingInfo */);\n    }\n    compute(env, options, _) {\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        return {\n            isDominatedByLongLines: env.isDominatedByLongLines,\n            isWordWrapMinified: layoutInfo.isWordWrapMinified,\n            isViewportWrapping: layoutInfo.isViewportWrapping,\n            wrappingColumn: layoutInfo.wrappingColumn,\n        };\n    }\n}\nclass EditorDropIntoEditor extends BaseEditorOption {\n    constructor() {\n        const defaults = { enabled: true, showDropSelector: 'afterDrop' };\n        super(36 /* EditorOption.dropIntoEditor */, 'dropIntoEditor', defaults, {\n            'editor.dropIntoEditor.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                markdownDescription: nls.localize('dropIntoEditor.enabled', \"Controls whether you can drag and drop a file into a text editor by holding down `shift` (instead of opening the file in an editor).\"),\n            },\n            'editor.dropIntoEditor.showDropSelector': {\n                type: 'string',\n                markdownDescription: nls.localize('dropIntoEditor.showDropSelector', \"Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped.\"),\n                enum: [\n                    'afterDrop',\n                    'never'\n                ],\n                enumDescriptions: [\n                    nls.localize('dropIntoEditor.showDropSelector.afterDrop', \"Show the drop selector widget after a file is dropped into the editor.\"),\n                    nls.localize('dropIntoEditor.showDropSelector.never', \"Never show the drop selector widget. Instead the default drop provider is always used.\"),\n                ],\n                default: 'afterDrop',\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\n            showDropSelector: stringSet(input.showDropSelector, this.defaultValue.showDropSelector, ['afterDrop', 'never']),\n        };\n    }\n}\nclass EditorPasteAs extends BaseEditorOption {\n    constructor() {\n        const defaults = { enabled: true, showPasteSelector: 'afterPaste' };\n        super(84 /* EditorOption.pasteAs */, 'pasteAs', defaults, {\n            'editor.pasteAs.enabled': {\n                type: 'boolean',\n                default: defaults.enabled,\n                markdownDescription: nls.localize('pasteAs.enabled', \"Controls whether you can paste content in different ways.\"),\n            },\n            'editor.pasteAs.showPasteSelector': {\n                type: 'string',\n                markdownDescription: nls.localize('pasteAs.showPasteSelector', \"Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted.\"),\n                enum: [\n                    'afterPaste',\n                    'never'\n                ],\n                enumDescriptions: [\n                    nls.localize('pasteAs.showPasteSelector.afterPaste', \"Show the paste selector widget after content is pasted into the editor.\"),\n                    nls.localize('pasteAs.showPasteSelector.never', \"Never show the paste selector widget. Instead the default pasting behavior is always used.\"),\n                ],\n                default: 'afterPaste',\n            },\n        });\n    }\n    validate(_input) {\n        if (!_input || typeof _input !== 'object') {\n            return this.defaultValue;\n        }\n        const input = _input;\n        return {\n            enabled: boolean(input.enabled, this.defaultValue.enabled),\n            showPasteSelector: stringSet(input.showPasteSelector, this.defaultValue.showPasteSelector, ['afterPaste', 'never']),\n        };\n    }\n}\n//#endregion\nconst DEFAULT_WINDOWS_FONT_FAMILY = 'Consolas, \\'Courier New\\', monospace';\nconst DEFAULT_MAC_FONT_FAMILY = 'Menlo, Monaco, \\'Courier New\\', monospace';\nconst DEFAULT_LINUX_FONT_FAMILY = '\\'Droid Sans Mono\\', \\'monospace\\', monospace';\n/**\n * @internal\n */\nexport const EDITOR_FONT_DEFAULTS = {\n    fontFamily: (platform.isMacintosh ? DEFAULT_MAC_FONT_FAMILY : (platform.isLinux ? DEFAULT_LINUX_FONT_FAMILY : DEFAULT_WINDOWS_FONT_FAMILY)),\n    fontWeight: 'normal',\n    fontSize: (platform.isMacintosh ? 12 : 14),\n    lineHeight: 0,\n    letterSpacing: 0,\n};\n/**\n * @internal\n */\nexport const editorOptionsRegistry = [];\nfunction register(option) {\n    editorOptionsRegistry[option.id] = option;\n    return option;\n}\nexport const EditorOptions = {\n    acceptSuggestionOnCommitCharacter: register(new EditorBooleanOption(0 /* EditorOption.acceptSuggestionOnCommitCharacter */, 'acceptSuggestionOnCommitCharacter', true, { markdownDescription: nls.localize('acceptSuggestionOnCommitCharacter', \"Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.\") })),\n    acceptSuggestionOnEnter: register(new EditorStringEnumOption(1 /* EditorOption.acceptSuggestionOnEnter */, 'acceptSuggestionOnEnter', 'on', ['on', 'smart', 'off'], {\n        markdownEnumDescriptions: [\n            '',\n            nls.localize('acceptSuggestionOnEnterSmart', \"Only accept a suggestion with `Enter` when it makes a textual change.\"),\n            ''\n        ],\n        markdownDescription: nls.localize('acceptSuggestionOnEnter', \"Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.\")\n    })),\n    accessibilitySupport: register(new EditorAccessibilitySupport()),\n    accessibilityPageSize: register(new EditorIntOption(3 /* EditorOption.accessibilityPageSize */, 'accessibilityPageSize', 10, 1, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, {\n        description: nls.localize('accessibilityPageSize', \"Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.\"),\n        tags: ['accessibility']\n    })),\n    ariaLabel: register(new EditorStringOption(4 /* EditorOption.ariaLabel */, 'ariaLabel', nls.localize('editorViewAccessibleLabel', \"Editor content\"))),\n    ariaRequired: register(new EditorBooleanOption(5 /* EditorOption.ariaRequired */, 'ariaRequired', false, undefined)),\n    screenReaderAnnounceInlineSuggestion: register(new EditorBooleanOption(8 /* EditorOption.screenReaderAnnounceInlineSuggestion */, 'screenReaderAnnounceInlineSuggestion', true, {\n        description: nls.localize('screenReaderAnnounceInlineSuggestion', \"Control whether inline suggestions are announced by a screen reader.\"),\n        tags: ['accessibility']\n    })),\n    autoClosingBrackets: register(new EditorStringEnumOption(6 /* EditorOption.autoClosingBrackets */, 'autoClosingBrackets', 'languageDefined', ['always', 'languageDefined', 'beforeWhitespace', 'never'], {\n        enumDescriptions: [\n            '',\n            nls.localize('editor.autoClosingBrackets.languageDefined', \"Use language configurations to determine when to autoclose brackets.\"),\n            nls.localize('editor.autoClosingBrackets.beforeWhitespace', \"Autoclose brackets only when the cursor is to the left of whitespace.\"),\n            '',\n        ],\n        description: nls.localize('autoClosingBrackets', \"Controls whether the editor should automatically close brackets after the user adds an opening bracket.\")\n    })),\n    autoClosingComments: register(new EditorStringEnumOption(7 /* EditorOption.autoClosingComments */, 'autoClosingComments', 'languageDefined', ['always', 'languageDefined', 'beforeWhitespace', 'never'], {\n        enumDescriptions: [\n            '',\n            nls.localize('editor.autoClosingComments.languageDefined', \"Use language configurations to determine when to autoclose comments.\"),\n            nls.localize('editor.autoClosingComments.beforeWhitespace', \"Autoclose comments only when the cursor is to the left of whitespace.\"),\n            '',\n        ],\n        description: nls.localize('autoClosingComments', \"Controls whether the editor should automatically close comments after the user adds an opening comment.\")\n    })),\n    autoClosingDelete: register(new EditorStringEnumOption(9 /* EditorOption.autoClosingDelete */, 'autoClosingDelete', 'auto', ['always', 'auto', 'never'], {\n        enumDescriptions: [\n            '',\n            nls.localize('editor.autoClosingDelete.auto', \"Remove adjacent closing quotes or brackets only if they were automatically inserted.\"),\n            '',\n        ],\n        description: nls.localize('autoClosingDelete', \"Controls whether the editor should remove adjacent closing quotes or brackets when deleting.\")\n    })),\n    autoClosingOvertype: register(new EditorStringEnumOption(10 /* EditorOption.autoClosingOvertype */, 'autoClosingOvertype', 'auto', ['always', 'auto', 'never'], {\n        enumDescriptions: [\n            '',\n            nls.localize('editor.autoClosingOvertype.auto', \"Type over closing quotes or brackets only if they were automatically inserted.\"),\n            '',\n        ],\n        description: nls.localize('autoClosingOvertype', \"Controls whether the editor should type over closing quotes or brackets.\")\n    })),\n    autoClosingQuotes: register(new EditorStringEnumOption(11 /* EditorOption.autoClosingQuotes */, 'autoClosingQuotes', 'languageDefined', ['always', 'languageDefined', 'beforeWhitespace', 'never'], {\n        enumDescriptions: [\n            '',\n            nls.localize('editor.autoClosingQuotes.languageDefined', \"Use language configurations to determine when to autoclose quotes.\"),\n            nls.localize('editor.autoClosingQuotes.beforeWhitespace', \"Autoclose quotes only when the cursor is to the left of whitespace.\"),\n            '',\n        ],\n        description: nls.localize('autoClosingQuotes', \"Controls whether the editor should automatically close quotes after the user adds an opening quote.\")\n    })),\n    autoIndent: register(new EditorEnumOption(12 /* EditorOption.autoIndent */, 'autoIndent', 4 /* EditorAutoIndentStrategy.Full */, 'full', ['none', 'keep', 'brackets', 'advanced', 'full'], _autoIndentFromString, {\n        enumDescriptions: [\n            nls.localize('editor.autoIndent.none', \"The editor will not insert indentation automatically.\"),\n            nls.localize('editor.autoIndent.keep', \"The editor will keep the current line's indentation.\"),\n            nls.localize('editor.autoIndent.brackets', \"The editor will keep the current line's indentation and honor language defined brackets.\"),\n            nls.localize('editor.autoIndent.advanced', \"The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.\"),\n            nls.localize('editor.autoIndent.full', \"The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.\"),\n        ],\n        description: nls.localize('autoIndent', \"Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.\")\n    })),\n    automaticLayout: register(new EditorBooleanOption(13 /* EditorOption.automaticLayout */, 'automaticLayout', false)),\n    autoSurround: register(new EditorStringEnumOption(14 /* EditorOption.autoSurround */, 'autoSurround', 'languageDefined', ['languageDefined', 'quotes', 'brackets', 'never'], {\n        enumDescriptions: [\n            nls.localize('editor.autoSurround.languageDefined', \"Use language configurations to determine when to automatically surround selections.\"),\n            nls.localize('editor.autoSurround.quotes', \"Surround with quotes but not brackets.\"),\n            nls.localize('editor.autoSurround.brackets', \"Surround with brackets but not quotes.\"),\n            ''\n        ],\n        description: nls.localize('autoSurround', \"Controls whether the editor should automatically surround selections when typing quotes or brackets.\")\n    })),\n    bracketPairColorization: register(new BracketPairColorization()),\n    bracketPairGuides: register(new GuideOptions()),\n    stickyTabStops: register(new EditorBooleanOption(115 /* EditorOption.stickyTabStops */, 'stickyTabStops', false, { description: nls.localize('stickyTabStops', \"Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.\") })),\n    codeLens: register(new EditorBooleanOption(17 /* EditorOption.codeLens */, 'codeLens', true, { description: nls.localize('codeLens', \"Controls whether the editor shows CodeLens.\") })),\n    codeLensFontFamily: register(new EditorStringOption(18 /* EditorOption.codeLensFontFamily */, 'codeLensFontFamily', '', { description: nls.localize('codeLensFontFamily', \"Controls the font family for CodeLens.\") })),\n    codeLensFontSize: register(new EditorIntOption(19 /* EditorOption.codeLensFontSize */, 'codeLensFontSize', 0, 0, 100, {\n        type: 'number',\n        default: 0,\n        minimum: 0,\n        maximum: 100,\n        markdownDescription: nls.localize('codeLensFontSize', \"Controls the font size in pixels for CodeLens. When set to 0, 90% of `#editor.fontSize#` is used.\")\n    })),\n    colorDecorators: register(new EditorBooleanOption(20 /* EditorOption.colorDecorators */, 'colorDecorators', true, { description: nls.localize('colorDecorators', \"Controls whether the editor should render the inline color decorators and color picker.\") })),\n    colorDecoratorActivatedOn: register(new EditorStringEnumOption(146 /* EditorOption.colorDecoratorsActivatedOn */, 'colorDecoratorsActivatedOn', 'clickAndHover', ['clickAndHover', 'hover', 'click'], {\n        enumDescriptions: [\n            nls.localize('editor.colorDecoratorActivatedOn.clickAndHover', \"Make the color picker appear both on click and hover of the color decorator\"),\n            nls.localize('editor.colorDecoratorActivatedOn.hover', \"Make the color picker appear on hover of the color decorator\"),\n            nls.localize('editor.colorDecoratorActivatedOn.click', \"Make the color picker appear on click of the color decorator\")\n        ],\n        description: nls.localize('colorDecoratorActivatedOn', \"Controls the condition to make a color picker appear from a color decorator\")\n    })),\n    colorDecoratorsLimit: register(new EditorIntOption(21 /* EditorOption.colorDecoratorsLimit */, 'colorDecoratorsLimit', 500, 1, 1000000, {\n        markdownDescription: nls.localize('colorDecoratorsLimit', \"Controls the max number of color decorators that can be rendered in an editor at once.\")\n    })),\n    columnSelection: register(new EditorBooleanOption(22 /* EditorOption.columnSelection */, 'columnSelection', false, { description: nls.localize('columnSelection', \"Enable that the selection with the mouse and keys is doing column selection.\") })),\n    comments: register(new EditorComments()),\n    contextmenu: register(new EditorBooleanOption(24 /* EditorOption.contextmenu */, 'contextmenu', true)),\n    copyWithSyntaxHighlighting: register(new EditorBooleanOption(25 /* EditorOption.copyWithSyntaxHighlighting */, 'copyWithSyntaxHighlighting', true, { description: nls.localize('copyWithSyntaxHighlighting', \"Controls whether syntax highlighting should be copied into the clipboard.\") })),\n    cursorBlinking: register(new EditorEnumOption(26 /* EditorOption.cursorBlinking */, 'cursorBlinking', 1 /* TextEditorCursorBlinkingStyle.Blink */, 'blink', ['blink', 'smooth', 'phase', 'expand', 'solid'], _cursorBlinkingStyleFromString, { description: nls.localize('cursorBlinking', \"Control the cursor animation style.\") })),\n    cursorSmoothCaretAnimation: register(new EditorStringEnumOption(27 /* EditorOption.cursorSmoothCaretAnimation */, 'cursorSmoothCaretAnimation', 'off', ['off', 'explicit', 'on'], {\n        enumDescriptions: [\n            nls.localize('cursorSmoothCaretAnimation.off', \"Smooth caret animation is disabled.\"),\n            nls.localize('cursorSmoothCaretAnimation.explicit', \"Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture.\"),\n            nls.localize('cursorSmoothCaretAnimation.on', \"Smooth caret animation is always enabled.\")\n        ],\n        description: nls.localize('cursorSmoothCaretAnimation', \"Controls whether the smooth caret animation should be enabled.\")\n    })),\n    cursorStyle: register(new EditorEnumOption(28 /* EditorOption.cursorStyle */, 'cursorStyle', TextEditorCursorStyle.Line, 'line', ['line', 'block', 'underline', 'line-thin', 'block-outline', 'underline-thin'], _cursorStyleFromString, { description: nls.localize('cursorStyle', \"Controls the cursor style.\") })),\n    cursorSurroundingLines: register(new EditorIntOption(29 /* EditorOption.cursorSurroundingLines */, 'cursorSurroundingLines', 0, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('cursorSurroundingLines', \"Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.\") })),\n    cursorSurroundingLinesStyle: register(new EditorStringEnumOption(30 /* EditorOption.cursorSurroundingLinesStyle */, 'cursorSurroundingLinesStyle', 'default', ['default', 'all'], {\n        enumDescriptions: [\n            nls.localize('cursorSurroundingLinesStyle.default', \"`cursorSurroundingLines` is enforced only when triggered via the keyboard or API.\"),\n            nls.localize('cursorSurroundingLinesStyle.all', \"`cursorSurroundingLines` is enforced always.\")\n        ],\n        markdownDescription: nls.localize('cursorSurroundingLinesStyle', \"Controls when `#cursorSurroundingLines#` should be enforced.\")\n    })),\n    cursorWidth: register(new EditorIntOption(31 /* EditorOption.cursorWidth */, 'cursorWidth', 0, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { markdownDescription: nls.localize('cursorWidth', \"Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.\") })),\n    disableLayerHinting: register(new EditorBooleanOption(32 /* EditorOption.disableLayerHinting */, 'disableLayerHinting', false)),\n    disableMonospaceOptimizations: register(new EditorBooleanOption(33 /* EditorOption.disableMonospaceOptimizations */, 'disableMonospaceOptimizations', false)),\n    domReadOnly: register(new EditorBooleanOption(34 /* EditorOption.domReadOnly */, 'domReadOnly', false)),\n    dragAndDrop: register(new EditorBooleanOption(35 /* EditorOption.dragAndDrop */, 'dragAndDrop', true, { description: nls.localize('dragAndDrop', \"Controls whether the editor should allow moving selections via drag and drop.\") })),\n    emptySelectionClipboard: register(new EditorEmptySelectionClipboard()),\n    dropIntoEditor: register(new EditorDropIntoEditor()),\n    stickyScroll: register(new EditorStickyScroll()),\n    experimentalWhitespaceRendering: register(new EditorStringEnumOption(38 /* EditorOption.experimentalWhitespaceRendering */, 'experimentalWhitespaceRendering', 'svg', ['svg', 'font', 'off'], {\n        enumDescriptions: [\n            nls.localize('experimentalWhitespaceRendering.svg', \"Use a new rendering method with svgs.\"),\n            nls.localize('experimentalWhitespaceRendering.font', \"Use a new rendering method with font characters.\"),\n            nls.localize('experimentalWhitespaceRendering.off', \"Use the stable rendering method.\"),\n        ],\n        description: nls.localize('experimentalWhitespaceRendering', \"Controls whether whitespace is rendered with a new, experimental method.\")\n    })),\n    extraEditorClassName: register(new EditorStringOption(39 /* EditorOption.extraEditorClassName */, 'extraEditorClassName', '')),\n    fastScrollSensitivity: register(new EditorFloatOption(40 /* EditorOption.fastScrollSensitivity */, 'fastScrollSensitivity', 5, x => (x <= 0 ? 5 : x), { markdownDescription: nls.localize('fastScrollSensitivity', \"Scrolling speed multiplier when pressing `Alt`.\") })),\n    find: register(new EditorFind()),\n    fixedOverflowWidgets: register(new EditorBooleanOption(42 /* EditorOption.fixedOverflowWidgets */, 'fixedOverflowWidgets', false)),\n    folding: register(new EditorBooleanOption(43 /* EditorOption.folding */, 'folding', true, { description: nls.localize('folding', \"Controls whether the editor has code folding enabled.\") })),\n    foldingStrategy: register(new EditorStringEnumOption(44 /* EditorOption.foldingStrategy */, 'foldingStrategy', 'auto', ['auto', 'indentation'], {\n        enumDescriptions: [\n            nls.localize('foldingStrategy.auto', \"Use a language-specific folding strategy if available, else the indentation-based one.\"),\n            nls.localize('foldingStrategy.indentation', \"Use the indentation-based folding strategy.\"),\n        ],\n        description: nls.localize('foldingStrategy', \"Controls the strategy for computing folding ranges.\")\n    })),\n    foldingHighlight: register(new EditorBooleanOption(45 /* EditorOption.foldingHighlight */, 'foldingHighlight', true, { description: nls.localize('foldingHighlight', \"Controls whether the editor should highlight folded ranges.\") })),\n    foldingImportsByDefault: register(new EditorBooleanOption(46 /* EditorOption.foldingImportsByDefault */, 'foldingImportsByDefault', false, { description: nls.localize('foldingImportsByDefault', \"Controls whether the editor automatically collapses import ranges.\") })),\n    foldingMaximumRegions: register(new EditorIntOption(47 /* EditorOption.foldingMaximumRegions */, 'foldingMaximumRegions', 5000, 10, 65000, // limit must be less than foldingRanges MAX_FOLDING_REGIONS\n    { description: nls.localize('foldingMaximumRegions', \"The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.\") })),\n    unfoldOnClickAfterEndOfLine: register(new EditorBooleanOption(48 /* EditorOption.unfoldOnClickAfterEndOfLine */, 'unfoldOnClickAfterEndOfLine', false, { description: nls.localize('unfoldOnClickAfterEndOfLine', \"Controls whether clicking on the empty content after a folded line will unfold the line.\") })),\n    fontFamily: register(new EditorStringOption(49 /* EditorOption.fontFamily */, 'fontFamily', EDITOR_FONT_DEFAULTS.fontFamily, { description: nls.localize('fontFamily', \"Controls the font family.\") })),\n    fontInfo: register(new EditorFontInfo()),\n    fontLigatures2: register(new EditorFontLigatures()),\n    fontSize: register(new EditorFontSize()),\n    fontWeight: register(new EditorFontWeight()),\n    fontVariations: register(new EditorFontVariations()),\n    formatOnPaste: register(new EditorBooleanOption(55 /* EditorOption.formatOnPaste */, 'formatOnPaste', false, { description: nls.localize('formatOnPaste', \"Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.\") })),\n    formatOnType: register(new EditorBooleanOption(56 /* EditorOption.formatOnType */, 'formatOnType', false, { description: nls.localize('formatOnType', \"Controls whether the editor should automatically format the line after typing.\") })),\n    glyphMargin: register(new EditorBooleanOption(57 /* EditorOption.glyphMargin */, 'glyphMargin', true, { description: nls.localize('glyphMargin', \"Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.\") })),\n    gotoLocation: register(new EditorGoToLocation()),\n    hideCursorInOverviewRuler: register(new EditorBooleanOption(59 /* EditorOption.hideCursorInOverviewRuler */, 'hideCursorInOverviewRuler', false, { description: nls.localize('hideCursorInOverviewRuler', \"Controls whether the cursor should be hidden in the overview ruler.\") })),\n    hover: register(new EditorHover()),\n    inDiffEditor: register(new EditorBooleanOption(61 /* EditorOption.inDiffEditor */, 'inDiffEditor', false)),\n    letterSpacing: register(new EditorFloatOption(63 /* EditorOption.letterSpacing */, 'letterSpacing', EDITOR_FONT_DEFAULTS.letterSpacing, x => EditorFloatOption.clamp(x, -5, 20), { description: nls.localize('letterSpacing', \"Controls the letter spacing in pixels.\") })),\n    lightbulb: register(new EditorLightbulb()),\n    lineDecorationsWidth: register(new EditorLineDecorationsWidth()),\n    lineHeight: register(new EditorLineHeight()),\n    lineNumbers: register(new EditorRenderLineNumbersOption()),\n    lineNumbersMinChars: register(new EditorIntOption(68 /* EditorOption.lineNumbersMinChars */, 'lineNumbersMinChars', 5, 1, 300)),\n    linkedEditing: register(new EditorBooleanOption(69 /* EditorOption.linkedEditing */, 'linkedEditing', false, { description: nls.localize('linkedEditing', \"Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing.\") })),\n    links: register(new EditorBooleanOption(70 /* EditorOption.links */, 'links', true, { description: nls.localize('links', \"Controls whether the editor should detect links and make them clickable.\") })),\n    matchBrackets: register(new EditorStringEnumOption(71 /* EditorOption.matchBrackets */, 'matchBrackets', 'always', ['always', 'near', 'never'], { description: nls.localize('matchBrackets', \"Highlight matching brackets.\") })),\n    minimap: register(new EditorMinimap()),\n    mouseStyle: register(new EditorStringEnumOption(73 /* EditorOption.mouseStyle */, 'mouseStyle', 'text', ['text', 'default', 'copy'])),\n    mouseWheelScrollSensitivity: register(new EditorFloatOption(74 /* EditorOption.mouseWheelScrollSensitivity */, 'mouseWheelScrollSensitivity', 1, x => (x === 0 ? 1 : x), { markdownDescription: nls.localize('mouseWheelScrollSensitivity', \"A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.\") })),\n    mouseWheelZoom: register(new EditorBooleanOption(75 /* EditorOption.mouseWheelZoom */, 'mouseWheelZoom', false, { markdownDescription: nls.localize('mouseWheelZoom', \"Zoom the font of the editor when using mouse wheel and holding `Ctrl`.\") })),\n    multiCursorMergeOverlapping: register(new EditorBooleanOption(76 /* EditorOption.multiCursorMergeOverlapping */, 'multiCursorMergeOverlapping', true, { description: nls.localize('multiCursorMergeOverlapping', \"Merge multiple cursors when they are overlapping.\") })),\n    multiCursorModifier: register(new EditorEnumOption(77 /* EditorOption.multiCursorModifier */, 'multiCursorModifier', 'altKey', 'alt', ['ctrlCmd', 'alt'], _multiCursorModifierFromString, {\n        markdownEnumDescriptions: [\n            nls.localize('multiCursorModifier.ctrlCmd', \"Maps to `Control` on Windows and Linux and to `Command` on macOS.\"),\n            nls.localize('multiCursorModifier.alt', \"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\")\n        ],\n        markdownDescription: nls.localize({\n            key: 'multiCursorModifier',\n            comment: [\n                '- `ctrlCmd` refers to a value the setting can take and should not be localized.',\n                '- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.'\n            ]\n        }, \"The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).\")\n    })),\n    multiCursorPaste: register(new EditorStringEnumOption(78 /* EditorOption.multiCursorPaste */, 'multiCursorPaste', 'spread', ['spread', 'full'], {\n        markdownEnumDescriptions: [\n            nls.localize('multiCursorPaste.spread', \"Each cursor pastes a single line of the text.\"),\n            nls.localize('multiCursorPaste.full', \"Each cursor pastes the full text.\")\n        ],\n        markdownDescription: nls.localize('multiCursorPaste', \"Controls pasting when the line count of the pasted text matches the cursor count.\")\n    })),\n    multiCursorLimit: register(new EditorIntOption(79 /* EditorOption.multiCursorLimit */, 'multiCursorLimit', 10000, 1, 100000, {\n        markdownDescription: nls.localize('multiCursorLimit', \"Controls the max number of cursors that can be in an active editor at once.\")\n    })),\n    occurrencesHighlight: register(new EditorBooleanOption(80 /* EditorOption.occurrencesHighlight */, 'occurrencesHighlight', true, { description: nls.localize('occurrencesHighlight', \"Controls whether the editor should highlight semantic symbol occurrences.\") })),\n    overviewRulerBorder: register(new EditorBooleanOption(81 /* EditorOption.overviewRulerBorder */, 'overviewRulerBorder', true, { description: nls.localize('overviewRulerBorder', \"Controls whether a border should be drawn around the overview ruler.\") })),\n    overviewRulerLanes: register(new EditorIntOption(82 /* EditorOption.overviewRulerLanes */, 'overviewRulerLanes', 3, 0, 3)),\n    padding: register(new EditorPadding()),\n    pasteAs: register(new EditorPasteAs()),\n    parameterHints: register(new EditorParameterHints()),\n    peekWidgetDefaultFocus: register(new EditorStringEnumOption(86 /* EditorOption.peekWidgetDefaultFocus */, 'peekWidgetDefaultFocus', 'tree', ['tree', 'editor'], {\n        enumDescriptions: [\n            nls.localize('peekWidgetDefaultFocus.tree', \"Focus the tree when opening peek\"),\n            nls.localize('peekWidgetDefaultFocus.editor', \"Focus the editor when opening peek\")\n        ],\n        description: nls.localize('peekWidgetDefaultFocus', \"Controls whether to focus the inline editor or the tree in the peek widget.\")\n    })),\n    definitionLinkOpensInPeek: register(new EditorBooleanOption(87 /* EditorOption.definitionLinkOpensInPeek */, 'definitionLinkOpensInPeek', false, { description: nls.localize('definitionLinkOpensInPeek', \"Controls whether the Go to Definition mouse gesture always opens the peek widget.\") })),\n    quickSuggestions: register(new EditorQuickSuggestions()),\n    quickSuggestionsDelay: register(new EditorIntOption(89 /* EditorOption.quickSuggestionsDelay */, 'quickSuggestionsDelay', 10, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('quickSuggestionsDelay', \"Controls the delay in milliseconds after which quick suggestions will show up.\") })),\n    readOnly: register(new EditorBooleanOption(90 /* EditorOption.readOnly */, 'readOnly', false)),\n    readOnlyMessage: register(new ReadonlyMessage()),\n    renameOnType: register(new EditorBooleanOption(92 /* EditorOption.renameOnType */, 'renameOnType', false, { description: nls.localize('renameOnType', \"Controls whether the editor auto renames on type.\"), markdownDeprecationMessage: nls.localize('renameOnTypeDeprecate', \"Deprecated, use `editor.linkedEditing` instead.\") })),\n    renderControlCharacters: register(new EditorBooleanOption(93 /* EditorOption.renderControlCharacters */, 'renderControlCharacters', true, { description: nls.localize('renderControlCharacters', \"Controls whether the editor should render control characters.\"), restricted: true })),\n    renderFinalNewline: register(new EditorStringEnumOption(94 /* EditorOption.renderFinalNewline */, 'renderFinalNewline', (platform.isLinux ? 'dimmed' : 'on'), ['off', 'on', 'dimmed'], { description: nls.localize('renderFinalNewline', \"Render last line number when the file ends with a newline.\") })),\n    renderLineHighlight: register(new EditorStringEnumOption(95 /* EditorOption.renderLineHighlight */, 'renderLineHighlight', 'line', ['none', 'gutter', 'line', 'all'], {\n        enumDescriptions: [\n            '',\n            '',\n            '',\n            nls.localize('renderLineHighlight.all', \"Highlights both the gutter and the current line.\"),\n        ],\n        description: nls.localize('renderLineHighlight', \"Controls how the editor should render the current line highlight.\")\n    })),\n    renderLineHighlightOnlyWhenFocus: register(new EditorBooleanOption(96 /* EditorOption.renderLineHighlightOnlyWhenFocus */, 'renderLineHighlightOnlyWhenFocus', false, { description: nls.localize('renderLineHighlightOnlyWhenFocus', \"Controls if the editor should render the current line highlight only when the editor is focused.\") })),\n    renderValidationDecorations: register(new EditorStringEnumOption(97 /* EditorOption.renderValidationDecorations */, 'renderValidationDecorations', 'editable', ['editable', 'on', 'off'])),\n    renderWhitespace: register(new EditorStringEnumOption(98 /* EditorOption.renderWhitespace */, 'renderWhitespace', 'selection', ['none', 'boundary', 'selection', 'trailing', 'all'], {\n        enumDescriptions: [\n            '',\n            nls.localize('renderWhitespace.boundary', \"Render whitespace characters except for single spaces between words.\"),\n            nls.localize('renderWhitespace.selection', \"Render whitespace characters only on selected text.\"),\n            nls.localize('renderWhitespace.trailing', \"Render only trailing whitespace characters.\"),\n            ''\n        ],\n        description: nls.localize('renderWhitespace', \"Controls how the editor should render whitespace characters.\")\n    })),\n    revealHorizontalRightPadding: register(new EditorIntOption(99 /* EditorOption.revealHorizontalRightPadding */, 'revealHorizontalRightPadding', 15, 0, 1000)),\n    roundedSelection: register(new EditorBooleanOption(100 /* EditorOption.roundedSelection */, 'roundedSelection', true, { description: nls.localize('roundedSelection', \"Controls whether selections should have rounded corners.\") })),\n    rulers: register(new EditorRulers()),\n    scrollbar: register(new EditorScrollbar()),\n    scrollBeyondLastColumn: register(new EditorIntOption(103 /* EditorOption.scrollBeyondLastColumn */, 'scrollBeyondLastColumn', 4, 0, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, { description: nls.localize('scrollBeyondLastColumn', \"Controls the number of extra characters beyond which the editor will scroll horizontally.\") })),\n    scrollBeyondLastLine: register(new EditorBooleanOption(104 /* EditorOption.scrollBeyondLastLine */, 'scrollBeyondLastLine', true, { description: nls.localize('scrollBeyondLastLine', \"Controls whether the editor will scroll beyond the last line.\") })),\n    scrollPredominantAxis: register(new EditorBooleanOption(105 /* EditorOption.scrollPredominantAxis */, 'scrollPredominantAxis', true, { description: nls.localize('scrollPredominantAxis', \"Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.\") })),\n    selectionClipboard: register(new EditorBooleanOption(106 /* EditorOption.selectionClipboard */, 'selectionClipboard', true, {\n        description: nls.localize('selectionClipboard', \"Controls whether the Linux primary clipboard should be supported.\"),\n        included: platform.isLinux\n    })),\n    selectionHighlight: register(new EditorBooleanOption(107 /* EditorOption.selectionHighlight */, 'selectionHighlight', true, { description: nls.localize('selectionHighlight', \"Controls whether the editor should highlight matches similar to the selection.\") })),\n    selectOnLineNumbers: register(new EditorBooleanOption(108 /* EditorOption.selectOnLineNumbers */, 'selectOnLineNumbers', true)),\n    showFoldingControls: register(new EditorStringEnumOption(109 /* EditorOption.showFoldingControls */, 'showFoldingControls', 'mouseover', ['always', 'never', 'mouseover'], {\n        enumDescriptions: [\n            nls.localize('showFoldingControls.always', \"Always show the folding controls.\"),\n            nls.localize('showFoldingControls.never', \"Never show the folding controls and reduce the gutter size.\"),\n            nls.localize('showFoldingControls.mouseover', \"Only show the folding controls when the mouse is over the gutter.\"),\n        ],\n        description: nls.localize('showFoldingControls', \"Controls when the folding controls on the gutter are shown.\")\n    })),\n    showUnused: register(new EditorBooleanOption(110 /* EditorOption.showUnused */, 'showUnused', true, { description: nls.localize('showUnused', \"Controls fading out of unused code.\") })),\n    showDeprecated: register(new EditorBooleanOption(138 /* EditorOption.showDeprecated */, 'showDeprecated', true, { description: nls.localize('showDeprecated', \"Controls strikethrough deprecated variables.\") })),\n    inlayHints: register(new EditorInlayHints()),\n    snippetSuggestions: register(new EditorStringEnumOption(111 /* EditorOption.snippetSuggestions */, 'snippetSuggestions', 'inline', ['top', 'bottom', 'inline', 'none'], {\n        enumDescriptions: [\n            nls.localize('snippetSuggestions.top', \"Show snippet suggestions on top of other suggestions.\"),\n            nls.localize('snippetSuggestions.bottom', \"Show snippet suggestions below other suggestions.\"),\n            nls.localize('snippetSuggestions.inline', \"Show snippets suggestions with other suggestions.\"),\n            nls.localize('snippetSuggestions.none', \"Do not show snippet suggestions.\"),\n        ],\n        description: nls.localize('snippetSuggestions', \"Controls whether snippets are shown with other suggestions and how they are sorted.\")\n    })),\n    smartSelect: register(new SmartSelect()),\n    smoothScrolling: register(new EditorBooleanOption(113 /* EditorOption.smoothScrolling */, 'smoothScrolling', false, { description: nls.localize('smoothScrolling', \"Controls whether the editor will scroll using an animation.\") })),\n    stopRenderingLineAfter: register(new EditorIntOption(116 /* EditorOption.stopRenderingLineAfter */, 'stopRenderingLineAfter', 10000, -1, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */)),\n    suggest: register(new EditorSuggest()),\n    inlineSuggest: register(new InlineEditorSuggest()),\n    inlineCompletionsAccessibilityVerbose: register(new EditorBooleanOption(147 /* EditorOption.inlineCompletionsAccessibilityVerbose */, 'inlineCompletionsAccessibilityVerbose', false, { description: nls.localize('inlineCompletionsAccessibilityVerbose', \"Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown.\") })),\n    suggestFontSize: register(new EditorIntOption(118 /* EditorOption.suggestFontSize */, 'suggestFontSize', 0, 0, 1000, { markdownDescription: nls.localize('suggestFontSize', \"Font size for the suggest widget. When set to {0}, the value of {1} is used.\", '`0`', '`#editor.fontSize#`') })),\n    suggestLineHeight: register(new EditorIntOption(119 /* EditorOption.suggestLineHeight */, 'suggestLineHeight', 0, 0, 1000, { markdownDescription: nls.localize('suggestLineHeight', \"Line height for the suggest widget. When set to {0}, the value of {1} is used. The minimum value is 8.\", '`0`', '`#editor.lineHeight#`') })),\n    suggestOnTriggerCharacters: register(new EditorBooleanOption(120 /* EditorOption.suggestOnTriggerCharacters */, 'suggestOnTriggerCharacters', true, { description: nls.localize('suggestOnTriggerCharacters', \"Controls whether suggestions should automatically show up when typing trigger characters.\") })),\n    suggestSelection: register(new EditorStringEnumOption(121 /* EditorOption.suggestSelection */, 'suggestSelection', 'first', ['first', 'recentlyUsed', 'recentlyUsedByPrefix'], {\n        markdownEnumDescriptions: [\n            nls.localize('suggestSelection.first', \"Always select the first suggestion.\"),\n            nls.localize('suggestSelection.recentlyUsed', \"Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.\"),\n            nls.localize('suggestSelection.recentlyUsedByPrefix', \"Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.\"),\n        ],\n        description: nls.localize('suggestSelection', \"Controls how suggestions are pre-selected when showing the suggest list.\")\n    })),\n    tabCompletion: register(new EditorStringEnumOption(122 /* EditorOption.tabCompletion */, 'tabCompletion', 'off', ['on', 'off', 'onlySnippets'], {\n        enumDescriptions: [\n            nls.localize('tabCompletion.on', \"Tab complete will insert the best matching suggestion when pressing tab.\"),\n            nls.localize('tabCompletion.off', \"Disable tab completions.\"),\n            nls.localize('tabCompletion.onlySnippets', \"Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.\"),\n        ],\n        description: nls.localize('tabCompletion', \"Enables tab completions.\")\n    })),\n    tabIndex: register(new EditorIntOption(123 /* EditorOption.tabIndex */, 'tabIndex', 0, -1, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */)),\n    unicodeHighlight: register(new UnicodeHighlight()),\n    unusualLineTerminators: register(new EditorStringEnumOption(125 /* EditorOption.unusualLineTerminators */, 'unusualLineTerminators', 'prompt', ['auto', 'off', 'prompt'], {\n        enumDescriptions: [\n            nls.localize('unusualLineTerminators.auto', \"Unusual line terminators are automatically removed.\"),\n            nls.localize('unusualLineTerminators.off', \"Unusual line terminators are ignored.\"),\n            nls.localize('unusualLineTerminators.prompt', \"Unusual line terminators prompt to be removed.\"),\n        ],\n        description: nls.localize('unusualLineTerminators', \"Remove unusual line terminators that might cause problems.\")\n    })),\n    useShadowDOM: register(new EditorBooleanOption(126 /* EditorOption.useShadowDOM */, 'useShadowDOM', true)),\n    useTabStops: register(new EditorBooleanOption(127 /* EditorOption.useTabStops */, 'useTabStops', true, { description: nls.localize('useTabStops', \"Inserting and deleting whitespace follows tab stops.\") })),\n    wordBreak: register(new EditorStringEnumOption(128 /* EditorOption.wordBreak */, 'wordBreak', 'normal', ['normal', 'keepAll'], {\n        markdownEnumDescriptions: [\n            nls.localize('wordBreak.normal', \"Use the default line break rule.\"),\n            nls.localize('wordBreak.keepAll', \"Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal.\"),\n        ],\n        description: nls.localize('wordBreak', \"Controls the word break rules used for Chinese/Japanese/Korean (CJK) text.\")\n    })),\n    wordSeparators: register(new EditorStringOption(129 /* EditorOption.wordSeparators */, 'wordSeparators', USUAL_WORD_SEPARATORS, { description: nls.localize('wordSeparators', \"Characters that will be used as word separators when doing word related navigations or operations.\") })),\n    wordWrap: register(new EditorStringEnumOption(130 /* EditorOption.wordWrap */, 'wordWrap', 'off', ['off', 'on', 'wordWrapColumn', 'bounded'], {\n        markdownEnumDescriptions: [\n            nls.localize('wordWrap.off', \"Lines will never wrap.\"),\n            nls.localize('wordWrap.on', \"Lines will wrap at the viewport width.\"),\n            nls.localize({\n                key: 'wordWrap.wordWrapColumn',\n                comment: [\n                    '- `editor.wordWrapColumn` refers to a different setting and should not be localized.'\n                ]\n            }, \"Lines will wrap at `#editor.wordWrapColumn#`.\"),\n            nls.localize({\n                key: 'wordWrap.bounded',\n                comment: [\n                    '- viewport means the edge of the visible window size.',\n                    '- `editor.wordWrapColumn` refers to a different setting and should not be localized.'\n                ]\n            }, \"Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`.\"),\n        ],\n        description: nls.localize({\n            key: 'wordWrap',\n            comment: [\n                '- \\'off\\', \\'on\\', \\'wordWrapColumn\\' and \\'bounded\\' refer to values the setting can take and should not be localized.',\n                '- `editor.wordWrapColumn` refers to a different setting and should not be localized.'\n            ]\n        }, \"Controls how lines should wrap.\")\n    })),\n    wordWrapBreakAfterCharacters: register(new EditorStringOption(131 /* EditorOption.wordWrapBreakAfterCharacters */, 'wordWrapBreakAfterCharacters', \n    // allow-any-unicode-next-line\n    ' \\t})]?|/&.,;¢°′″‰℃、。｡､￠，．：；？！％・･ゝゞヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻ｧｨｩｪｫｬｭｮｯｰ”〉》」』】〕）］｝｣')),\n    wordWrapBreakBeforeCharacters: register(new EditorStringOption(132 /* EditorOption.wordWrapBreakBeforeCharacters */, 'wordWrapBreakBeforeCharacters', \n    // allow-any-unicode-next-line\n    '([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋')),\n    wordWrapColumn: register(new EditorIntOption(133 /* EditorOption.wordWrapColumn */, 'wordWrapColumn', 80, 1, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */, {\n        markdownDescription: nls.localize({\n            key: 'wordWrapColumn',\n            comment: [\n                '- `editor.wordWrap` refers to a different setting and should not be localized.',\n                '- \\'wordWrapColumn\\' and \\'bounded\\' refer to values the different setting can take and should not be localized.'\n            ]\n        }, \"Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`.\")\n    })),\n    wordWrapOverride1: register(new EditorStringEnumOption(134 /* EditorOption.wordWrapOverride1 */, 'wordWrapOverride1', 'inherit', ['off', 'on', 'inherit'])),\n    wordWrapOverride2: register(new EditorStringEnumOption(135 /* EditorOption.wordWrapOverride2 */, 'wordWrapOverride2', 'inherit', ['off', 'on', 'inherit'])),\n    // Leave these at the end (because they have dependencies!)\n    editorClassName: register(new EditorClassName()),\n    defaultColorDecorators: register(new EditorBooleanOption(145 /* EditorOption.defaultColorDecorators */, 'defaultColorDecorators', false, { markdownDescription: nls.localize('defaultColorDecorators', \"Controls whether inline color decorations should be shown using the default document color provider\") })),\n    pixelRatio: register(new EditorPixelRatio()),\n    tabFocusMode: register(new EditorBooleanOption(142 /* EditorOption.tabFocusMode */, 'tabFocusMode', false, { markdownDescription: nls.localize('tabFocusMode', \"Controls whether the editor receives tabs or defers them to the workbench for navigation.\") })),\n    layoutInfo: register(new EditorLayoutInfoComputer()),\n    wrappingInfo: register(new EditorWrappingInfoComputer()),\n    wrappingIndent: register(new WrappingIndentOption()),\n    wrappingStrategy: register(new WrappingStrategy())\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nexport const EditorZoom = new class {\n    constructor() {\n        this._zoomLevel = 0;\n        this._onDidChangeZoomLevel = new Emitter();\n        this.onDidChangeZoomLevel = this._onDidChangeZoomLevel.event;\n    }\n    getZoomLevel() {\n        return this._zoomLevel;\n    }\n    setZoomLevel(zoomLevel) {\n        zoomLevel = Math.min(Math.max(-5, zoomLevel), 20);\n        if (this._zoomLevel === zoomLevel) {\n            return;\n        }\n        this._zoomLevel = zoomLevel;\n        this._onDidChangeZoomLevel.fire(this._zoomLevel);\n    }\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as platform from '../../../base/common/platform.js';\nimport { EditorFontVariations, EDITOR_FONT_DEFAULTS } from './editorOptions.js';\nimport { EditorZoom } from './editorZoom.js';\n/**\n * Determined from empirical observations.\n * @internal\n */\nconst GOLDEN_LINE_HEIGHT_RATIO = platform.isMacintosh ? 1.5 : 1.35;\n/**\n * @internal\n */\nconst MINIMUM_LINE_HEIGHT = 8;\nexport class BareFontInfo {\n    /**\n     * @internal\n     */\n    static createFromValidatedSettings(options, pixelRatio, ignoreEditorZoom) {\n        const fontFamily = options.get(49 /* EditorOption.fontFamily */);\n        const fontWeight = options.get(53 /* EditorOption.fontWeight */);\n        const fontSize = options.get(52 /* EditorOption.fontSize */);\n        const fontFeatureSettings = options.get(51 /* EditorOption.fontLigatures */);\n        const fontVariationSettings = options.get(54 /* EditorOption.fontVariations */);\n        const lineHeight = options.get(66 /* EditorOption.lineHeight */);\n        const letterSpacing = options.get(63 /* EditorOption.letterSpacing */);\n        return BareFontInfo._create(fontFamily, fontWeight, fontSize, fontFeatureSettings, fontVariationSettings, lineHeight, letterSpacing, pixelRatio, ignoreEditorZoom);\n    }\n    /**\n     * @internal\n     */\n    static _create(fontFamily, fontWeight, fontSize, fontFeatureSettings, fontVariationSettings, lineHeight, letterSpacing, pixelRatio, ignoreEditorZoom) {\n        if (lineHeight === 0) {\n            lineHeight = GOLDEN_LINE_HEIGHT_RATIO * fontSize;\n        }\n        else if (lineHeight < MINIMUM_LINE_HEIGHT) {\n            // Values too small to be line heights in pixels are in ems.\n            lineHeight = lineHeight * fontSize;\n        }\n        // Enforce integer, minimum constraints\n        lineHeight = Math.round(lineHeight);\n        if (lineHeight < MINIMUM_LINE_HEIGHT) {\n            lineHeight = MINIMUM_LINE_HEIGHT;\n        }\n        const editorZoomLevelMultiplier = 1 + (ignoreEditorZoom ? 0 : EditorZoom.getZoomLevel() * 0.1);\n        fontSize *= editorZoomLevelMultiplier;\n        lineHeight *= editorZoomLevelMultiplier;\n        if (fontVariationSettings === EditorFontVariations.TRANSLATE) {\n            if (fontWeight === 'normal' || fontWeight === 'bold') {\n                fontVariationSettings = EditorFontVariations.OFF;\n            }\n            else {\n                const fontWeightAsNumber = parseInt(fontWeight, 10);\n                fontVariationSettings = `'wght' ${fontWeightAsNumber}`;\n                fontWeight = 'normal';\n            }\n        }\n        return new BareFontInfo({\n            pixelRatio: pixelRatio,\n            fontFamily: fontFamily,\n            fontWeight: fontWeight,\n            fontSize: fontSize,\n            fontFeatureSettings: fontFeatureSettings,\n            fontVariationSettings,\n            lineHeight: lineHeight,\n            letterSpacing: letterSpacing\n        });\n    }\n    /**\n     * @internal\n     */\n    constructor(opts) {\n        this._bareFontInfoBrand = undefined;\n        this.pixelRatio = opts.pixelRatio;\n        this.fontFamily = String(opts.fontFamily);\n        this.fontWeight = String(opts.fontWeight);\n        this.fontSize = opts.fontSize;\n        this.fontFeatureSettings = opts.fontFeatureSettings;\n        this.fontVariationSettings = opts.fontVariationSettings;\n        this.lineHeight = opts.lineHeight | 0;\n        this.letterSpacing = opts.letterSpacing;\n    }\n    /**\n     * @internal\n     */\n    getId() {\n        return `${this.pixelRatio}-${this.fontFamily}-${this.fontWeight}-${this.fontSize}-${this.fontFeatureSettings}-${this.fontVariationSettings}-${this.lineHeight}-${this.letterSpacing}`;\n    }\n    /**\n     * @internal\n     */\n    getMassagedFontFamily() {\n        const fallbackFontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n        const fontFamily = BareFontInfo._wrapInQuotes(this.fontFamily);\n        if (fallbackFontFamily && this.fontFamily !== fallbackFontFamily) {\n            return `${fontFamily}, ${fallbackFontFamily}`;\n        }\n        return fontFamily;\n    }\n    static _wrapInQuotes(fontFamily) {\n        if (/[,\"']/.test(fontFamily)) {\n            // Looks like the font family might be already escaped\n            return fontFamily;\n        }\n        if (/[+ ]/.test(fontFamily)) {\n            // Wrap a font family using + or <space> with quotes\n            return `\"${fontFamily}\"`;\n        }\n        return fontFamily;\n    }\n}\n// change this whenever `FontInfo` members are changed\nexport const SERIALIZED_FONT_INFO_VERSION = 2;\nexport class FontInfo extends BareFontInfo {\n    /**\n     * @internal\n     */\n    constructor(opts, isTrusted) {\n        super(opts);\n        this._editorStylingBrand = undefined;\n        this.version = SERIALIZED_FONT_INFO_VERSION;\n        this.isTrusted = isTrusted;\n        this.isMonospace = opts.isMonospace;\n        this.typicalHalfwidthCharacterWidth = opts.typicalHalfwidthCharacterWidth;\n        this.typicalFullwidthCharacterWidth = opts.typicalFullwidthCharacterWidth;\n        this.canUseHalfwidthRightwardsArrow = opts.canUseHalfwidthRightwardsArrow;\n        this.spaceWidth = opts.spaceWidth;\n        this.middotWidth = opts.middotWidth;\n        this.wsmiddotWidth = opts.wsmiddotWidth;\n        this.maxDigitWidth = opts.maxDigitWidth;\n    }\n    /**\n     * @internal\n     */\n    equals(other) {\n        return (this.fontFamily === other.fontFamily\n            && this.fontWeight === other.fontWeight\n            && this.fontSize === other.fontSize\n            && this.fontFeatureSettings === other.fontFeatureSettings\n            && this.fontVariationSettings === other.fontVariationSettings\n            && this.lineHeight === other.lineHeight\n            && this.letterSpacing === other.letterSpacing\n            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n            && this.typicalFullwidthCharacterWidth === other.typicalFullwidthCharacterWidth\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.maxDigitWidth === other.maxDigitWidth);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { toUint8 } from '../../../base/common/uint.js';\n/**\n * A fast character classifier that uses a compact array for ASCII values.\n */\nexport class CharacterClassifier {\n    constructor(_defaultValue) {\n        const defaultValue = toUint8(_defaultValue);\n        this._defaultValue = defaultValue;\n        this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n        this._map = new Map();\n    }\n    static _createAsciiMap(defaultValue) {\n        const asciiMap = new Uint8Array(256);\n        asciiMap.fill(defaultValue);\n        return asciiMap;\n    }\n    set(charCode, _value) {\n        const value = toUint8(_value);\n        if (charCode >= 0 && charCode < 256) {\n            this._asciiMap[charCode] = value;\n        }\n        else {\n            this._map.set(charCode, value);\n        }\n    }\n    get(charCode) {\n        if (charCode >= 0 && charCode < 256) {\n            return this._asciiMap[charCode];\n        }\n        else {\n            return (this._map.get(charCode) || this._defaultValue);\n        }\n    }\n    clear() {\n        this._asciiMap.fill(this._defaultValue);\n        this._map.clear();\n    }\n}\nexport class CharacterSet {\n    constructor() {\n        this._actual = new CharacterClassifier(0 /* Boolean.False */);\n    }\n    add(charCode) {\n        this._actual.set(charCode, 1 /* Boolean.True */);\n    }\n    has(charCode) {\n        return (this._actual.get(charCode) === 1 /* Boolean.True */);\n    }\n    clear() {\n        return this._actual.clear();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\n/**\n * A column in a position is the gap between two adjacent characters. The methods here\n * work with a concept called \"visible column\". A visible column is a very rough approximation\n * of the horizontal screen position of a column. For example, using a tab size of 4:\n * ```txt\n * |<TAB>|<TAB>|T|ext\n * |     |     | \\---- column = 4, visible column = 9\n * |     |     \\------ column = 3, visible column = 8\n * |     \\------------ column = 2, visible column = 4\n * \\------------------ column = 1, visible column = 0\n * ```\n *\n * **NOTE**: Visual columns do not work well for RTL text or variable-width fonts or characters.\n *\n * **NOTE**: These methods work and make sense both on the model and on the view model.\n */\nexport class CursorColumns {\n    static _nextVisibleColumn(codePoint, visibleColumn, tabSize) {\n        if (codePoint === 9 /* CharCode.Tab */) {\n            return CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n        }\n        if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n            return visibleColumn + 2;\n        }\n        return visibleColumn + 1;\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    static visibleColumnFromColumn(lineContent, column, tabSize) {\n        const textLen = Math.min(column - 1, lineContent.length);\n        const text = lineContent.substring(0, textLen);\n        const iterator = new strings.GraphemeIterator(text);\n        let result = 0;\n        while (!iterator.eol()) {\n            const codePoint = strings.getNextCodePoint(text, textLen, iterator.offset);\n            iterator.nextGraphemeLength();\n            result = this._nextVisibleColumn(codePoint, result, tabSize);\n        }\n        return result;\n    }\n    /**\n     * Returns a column from a visible column.\n     * @see {@link CursorColumns}\n     */\n    static columnFromVisibleColumn(lineContent, visibleColumn, tabSize) {\n        if (visibleColumn <= 0) {\n            return 1;\n        }\n        const lineContentLength = lineContent.length;\n        const iterator = new strings.GraphemeIterator(lineContent);\n        let beforeVisibleColumn = 0;\n        let beforeColumn = 1;\n        while (!iterator.eol()) {\n            const codePoint = strings.getNextCodePoint(lineContent, lineContentLength, iterator.offset);\n            iterator.nextGraphemeLength();\n            const afterVisibleColumn = this._nextVisibleColumn(codePoint, beforeVisibleColumn, tabSize);\n            const afterColumn = iterator.offset + 1;\n            if (afterVisibleColumn >= visibleColumn) {\n                const beforeDelta = visibleColumn - beforeVisibleColumn;\n                const afterDelta = afterVisibleColumn - visibleColumn;\n                if (afterDelta < beforeDelta) {\n                    return afterColumn;\n                }\n                else {\n                    return beforeColumn;\n                }\n            }\n            beforeVisibleColumn = afterVisibleColumn;\n            beforeColumn = afterColumn;\n        }\n        // walked the entire string\n        return lineContentLength + 1;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static nextRenderTabStop(visibleColumn, tabSize) {\n        return visibleColumn + tabSize - visibleColumn % tabSize;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static nextIndentTabStop(visibleColumn, indentSize) {\n        return visibleColumn + indentSize - visibleColumn % indentSize;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static prevRenderTabStop(column, tabSize) {\n        return Math.max(0, column - 1 - (column - 1) % tabSize);\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static prevIndentTabStop(column, indentSize) {\n        return Math.max(0, column - 1 - (column - 1) % indentSize);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from './range.js';\nexport class EditOperation {\n    static insert(position, text) {\n        return {\n            range: new Range(position.lineNumber, position.column, position.lineNumber, position.column),\n            text: text,\n            forceMoveMarkers: true\n        };\n    }\n    static delete(range) {\n        return {\n            range: range,\n            text: null\n        };\n    }\n    static replace(range, text) {\n        return {\n            range: range,\n            text: text\n        };\n    }\n    static replaceMove(range, text) {\n        return {\n            range: range,\n            text: text,\n            forceMoveMarkers: true\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { activeContrastBorder, editorBackground, registerColor, editorWarningForeground, editorInfoForeground, editorWarningBorder, editorInfoBorder, contrastBorder, editorFindMatchHighlight } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\n/**\n * Definition of the editor colors\n */\nexport const editorLineHighlight = registerColor('editor.lineHighlightBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('lineHighlight', 'Background color for the highlight of line at the cursor position.'));\nexport const editorLineHighlightBorder = registerColor('editor.lineHighlightBorder', { dark: '#282828', light: '#eeeeee', hcDark: '#f38518', hcLight: contrastBorder }, nls.localize('lineHighlightBorderBox', 'Background color for the border around the line at the cursor position.'));\nexport const editorRangeHighlight = registerColor('editor.rangeHighlightBackground', { dark: '#ffffff0b', light: '#fdff0033', hcDark: null, hcLight: null }, nls.localize('rangeHighlight', 'Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorRangeHighlightBorder = registerColor('editor.rangeHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('rangeHighlightBorder', 'Background color of the border around highlighted ranges.'), true);\nexport const editorSymbolHighlight = registerColor('editor.symbolHighlightBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('symbolHighlight', 'Background color of highlighted symbol, like for go to definition or go next/previous symbol. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSymbolHighlightBorder = registerColor('editor.symbolHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('symbolHighlightBorder', 'Background color of the border around highlighted symbols.'), true);\nexport const editorCursorForeground = registerColor('editorCursor.foreground', { dark: '#AEAFAD', light: Color.black, hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('caret', 'Color of the editor cursor.'));\nexport const editorCursorBackground = registerColor('editorCursor.background', null, nls.localize('editorCursorBackground', 'The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.'));\nexport const editorWhitespaces = registerColor('editorWhitespace.foreground', { dark: '#e3e4e229', light: '#33333333', hcDark: '#e3e4e229', hcLight: '#CCCCCC' }, nls.localize('editorWhitespaces', 'Color of whitespace characters in the editor.'));\nexport const editorLineNumbers = registerColor('editorLineNumber.foreground', { dark: '#858585', light: '#237893', hcDark: Color.white, hcLight: '#292929' }, nls.localize('editorLineNumbers', 'Color of editor line numbers.'));\nexport const deprecatedEditorIndentGuides = registerColor('editorIndentGuide.background', { dark: editorWhitespaces, light: editorWhitespaces, hcDark: editorWhitespaces, hcLight: editorWhitespaces }, nls.localize('editorIndentGuides', 'Color of the editor indentation guides.'), false, nls.localize('deprecatedEditorIndentGuides', '\\'editorIndentGuide.background\\' is deprecated. Use \\'editorIndentGuide.background1\\' instead.'));\nexport const deprecatedEditorActiveIndentGuides = registerColor('editorIndentGuide.activeBackground', { dark: editorWhitespaces, light: editorWhitespaces, hcDark: editorWhitespaces, hcLight: editorWhitespaces }, nls.localize('editorActiveIndentGuide', 'Color of the active editor indentation guides.'), false, nls.localize('deprecatedEditorActiveIndentGuide', '\\'editorIndentGuide.activeBackground\\' is deprecated. Use \\'editorIndentGuide.activeBackground1\\' instead.'));\nexport const editorIndentGuide1 = registerColor('editorIndentGuide.background1', { dark: deprecatedEditorIndentGuides, light: deprecatedEditorIndentGuides, hcDark: deprecatedEditorIndentGuides, hcLight: deprecatedEditorIndentGuides }, nls.localize('editorIndentGuides1', 'Color of the editor indentation guides (1).'));\nexport const editorIndentGuide2 = registerColor('editorIndentGuide.background2', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorIndentGuides2', 'Color of the editor indentation guides (2).'));\nexport const editorIndentGuide3 = registerColor('editorIndentGuide.background3', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorIndentGuides3', 'Color of the editor indentation guides (3).'));\nexport const editorIndentGuide4 = registerColor('editorIndentGuide.background4', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorIndentGuides4', 'Color of the editor indentation guides (4).'));\nexport const editorIndentGuide5 = registerColor('editorIndentGuide.background5', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorIndentGuides5', 'Color of the editor indentation guides (5).'));\nexport const editorIndentGuide6 = registerColor('editorIndentGuide.background6', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorIndentGuides6', 'Color of the editor indentation guides (6).'));\nexport const editorActiveIndentGuide1 = registerColor('editorIndentGuide.activeBackground1', { dark: deprecatedEditorActiveIndentGuides, light: deprecatedEditorActiveIndentGuides, hcDark: deprecatedEditorActiveIndentGuides, hcLight: deprecatedEditorActiveIndentGuides }, nls.localize('editorActiveIndentGuide1', 'Color of the active editor indentation guides (1).'));\nexport const editorActiveIndentGuide2 = registerColor('editorIndentGuide.activeBackground2', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorActiveIndentGuide2', 'Color of the active editor indentation guides (2).'));\nexport const editorActiveIndentGuide3 = registerColor('editorIndentGuide.activeBackground3', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorActiveIndentGuide3', 'Color of the active editor indentation guides (3).'));\nexport const editorActiveIndentGuide4 = registerColor('editorIndentGuide.activeBackground4', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorActiveIndentGuide4', 'Color of the active editor indentation guides (4).'));\nexport const editorActiveIndentGuide5 = registerColor('editorIndentGuide.activeBackground5', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorActiveIndentGuide5', 'Color of the active editor indentation guides (5).'));\nexport const editorActiveIndentGuide6 = registerColor('editorIndentGuide.activeBackground6', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorActiveIndentGuide6', 'Color of the active editor indentation guides (6).'));\nconst deprecatedEditorActiveLineNumber = registerColor('editorActiveLineNumber.foreground', { dark: '#c6c6c6', light: '#0B216F', hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorActiveLineNumber', 'Color of editor active line number'), false, nls.localize('deprecatedEditorActiveLineNumber', 'Id is deprecated. Use \\'editorLineNumber.activeForeground\\' instead.'));\nexport const editorActiveLineNumber = registerColor('editorLineNumber.activeForeground', { dark: deprecatedEditorActiveLineNumber, light: deprecatedEditorActiveLineNumber, hcDark: deprecatedEditorActiveLineNumber, hcLight: deprecatedEditorActiveLineNumber }, nls.localize('editorActiveLineNumber', 'Color of editor active line number'));\nexport const editorDimmedLineNumber = registerColor('editorLineNumber.dimmedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorDimmedLineNumber', 'Color of the final editor line when editor.renderFinalNewline is set to dimmed.'));\nexport const editorRuler = registerColor('editorRuler.foreground', { dark: '#5A5A5A', light: Color.lightgrey, hcDark: Color.white, hcLight: '#292929' }, nls.localize('editorRuler', 'Color of the editor rulers.'));\nexport const editorCodeLensForeground = registerColor('editorCodeLens.foreground', { dark: '#999999', light: '#919191', hcDark: '#999999', hcLight: '#292929' }, nls.localize('editorCodeLensForeground', 'Foreground color of editor CodeLens'));\nexport const editorBracketMatchBackground = registerColor('editorBracketMatch.background', { dark: '#0064001a', light: '#0064001a', hcDark: '#0064001a', hcLight: '#0000' }, nls.localize('editorBracketMatchBackground', 'Background color behind matching brackets'));\nexport const editorBracketMatchBorder = registerColor('editorBracketMatch.border', { dark: '#888', light: '#B9B9B9', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorBracketMatchBorder', 'Color for matching brackets boxes'));\nexport const editorOverviewRulerBorder = registerColor('editorOverviewRuler.border', { dark: '#7f7f7f4d', light: '#7f7f7f4d', hcDark: '#7f7f7f4d', hcLight: '#666666' }, nls.localize('editorOverviewRulerBorder', 'Color of the overview ruler border.'));\nexport const editorOverviewRulerBackground = registerColor('editorOverviewRuler.background', null, nls.localize('editorOverviewRulerBackground', 'Background color of the editor overview ruler.'));\nexport const editorGutter = registerColor('editorGutter.background', { dark: editorBackground, light: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('editorGutter', 'Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.'));\nexport const editorUnnecessaryCodeBorder = registerColor('editorUnnecessaryCode.border', { dark: null, light: null, hcDark: Color.fromHex('#fff').transparent(0.8), hcLight: contrastBorder }, nls.localize('unnecessaryCodeBorder', 'Border color of unnecessary (unused) source code in the editor.'));\nexport const editorUnnecessaryCodeOpacity = registerColor('editorUnnecessaryCode.opacity', { dark: Color.fromHex('#000a'), light: Color.fromHex('#0007'), hcDark: null, hcLight: null }, nls.localize('unnecessaryCodeOpacity', 'Opacity of unnecessary (unused) source code in the editor. For example, \"#000000c0\" will render the code with 75% opacity. For high contrast themes, use the  \\'editorUnnecessaryCode.border\\' theme color to underline unnecessary code instead of fading it out.'));\nexport const ghostTextBorder = registerColor('editorGhostText.border', { dark: null, light: null, hcDark: Color.fromHex('#fff').transparent(0.8), hcLight: Color.fromHex('#292929').transparent(0.8) }, nls.localize('editorGhostTextBorder', 'Border color of ghost text in the editor.'));\nexport const ghostTextForeground = registerColor('editorGhostText.foreground', { dark: Color.fromHex('#ffffff56'), light: Color.fromHex('#0007'), hcDark: null, hcLight: null }, nls.localize('editorGhostTextForeground', 'Foreground color of the ghost text in the editor.'));\nexport const ghostTextBackground = registerColor('editorGhostText.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorGhostTextBackground', 'Background color of the ghost text in the editor.'));\nconst rulerRangeDefault = new Color(new RGBA(0, 122, 204, 0.6));\nexport const overviewRulerRangeHighlight = registerColor('editorOverviewRuler.rangeHighlightForeground', { dark: rulerRangeDefault, light: rulerRangeDefault, hcDark: rulerRangeDefault, hcLight: rulerRangeDefault }, nls.localize('overviewRulerRangeHighlight', 'Overview ruler marker color for range highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerError = registerColor('editorOverviewRuler.errorForeground', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('overviewRuleError', 'Overview ruler marker color for errors.'));\nexport const overviewRulerWarning = registerColor('editorOverviewRuler.warningForeground', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Overview ruler marker color for warnings.'));\nexport const overviewRulerInfo = registerColor('editorOverviewRuler.infoForeground', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoBorder, hcLight: editorInfoBorder }, nls.localize('overviewRuleInfo', 'Overview ruler marker color for infos.'));\nexport const editorBracketHighlightingForeground1 = registerColor('editorBracketHighlight.foreground1', { dark: '#FFD700', light: '#0431FAFF', hcDark: '#FFD700', hcLight: '#0431FAFF' }, nls.localize('editorBracketHighlightForeground1', 'Foreground color of brackets (1). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground2 = registerColor('editorBracketHighlight.foreground2', { dark: '#DA70D6', light: '#319331FF', hcDark: '#DA70D6', hcLight: '#319331FF' }, nls.localize('editorBracketHighlightForeground2', 'Foreground color of brackets (2). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground3 = registerColor('editorBracketHighlight.foreground3', { dark: '#179FFF', light: '#7B3814FF', hcDark: '#87CEFA', hcLight: '#7B3814FF' }, nls.localize('editorBracketHighlightForeground3', 'Foreground color of brackets (3). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground4 = registerColor('editorBracketHighlight.foreground4', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketHighlightForeground4', 'Foreground color of brackets (4). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground5 = registerColor('editorBracketHighlight.foreground5', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketHighlightForeground5', 'Foreground color of brackets (5). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingForeground6 = registerColor('editorBracketHighlight.foreground6', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketHighlightForeground6', 'Foreground color of brackets (6). Requires enabling bracket pair colorization.'));\nexport const editorBracketHighlightingUnexpectedBracketForeground = registerColor('editorBracketHighlight.unexpectedBracket.foreground', { dark: new Color(new RGBA(255, 18, 18, 0.8)), light: new Color(new RGBA(255, 18, 18, 0.8)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '' }, nls.localize('editorBracketHighlightUnexpectedBracketForeground', 'Foreground color of unexpected brackets.'));\nexport const editorBracketPairGuideBackground1 = registerColor('editorBracketPairGuide.background1', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.background1', 'Background color of inactive bracket pair guides (1). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground2 = registerColor('editorBracketPairGuide.background2', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.background2', 'Background color of inactive bracket pair guides (2). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground3 = registerColor('editorBracketPairGuide.background3', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.background3', 'Background color of inactive bracket pair guides (3). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground4 = registerColor('editorBracketPairGuide.background4', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.background4', 'Background color of inactive bracket pair guides (4). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground5 = registerColor('editorBracketPairGuide.background5', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.background5', 'Background color of inactive bracket pair guides (5). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideBackground6 = registerColor('editorBracketPairGuide.background6', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.background6', 'Background color of inactive bracket pair guides (6). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground1 = registerColor('editorBracketPairGuide.activeBackground1', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.activeBackground1', 'Background color of active bracket pair guides (1). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground2 = registerColor('editorBracketPairGuide.activeBackground2', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.activeBackground2', 'Background color of active bracket pair guides (2). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground3 = registerColor('editorBracketPairGuide.activeBackground3', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.activeBackground3', 'Background color of active bracket pair guides (3). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground4 = registerColor('editorBracketPairGuide.activeBackground4', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.activeBackground4', 'Background color of active bracket pair guides (4). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground5 = registerColor('editorBracketPairGuide.activeBackground5', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.activeBackground5', 'Background color of active bracket pair guides (5). Requires enabling bracket pair guides.'));\nexport const editorBracketPairGuideActiveBackground6 = registerColor('editorBracketPairGuide.activeBackground6', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.activeBackground6', 'Background color of active bracket pair guides (6). Requires enabling bracket pair guides.'));\nexport const editorUnicodeHighlightBorder = registerColor('editorUnicodeHighlight.border', { dark: '#BD9B03', light: '#CEA33D', hcDark: '#ff0000', hcLight: '#CEA33D' }, nls.localize('editorUnicodeHighlight.border', 'Border color used to highlight unicode characters.'));\nexport const editorUnicodeHighlightBackground = registerColor('editorUnicodeHighlight.background', { dark: '#bd9b0326', light: '#cea33d14', hcDark: '#00000000', hcLight: '#cea33d14' }, nls.localize('editorUnicodeHighlight.background', 'Background color used to highlight unicode characters.'));\n// contains all color rules that used to defined in editor/browser/widget/editor.css\nregisterThemingParticipant((theme, collector) => {\n    const background = theme.getColor(editorBackground);\n    const lineHighlight = theme.getColor(editorLineHighlight);\n    const imeBackground = (lineHighlight && !lineHighlight.isTransparent() ? lineHighlight : background);\n    if (imeBackground) {\n        collector.addRule(`.monaco-editor .inputarea.ime-input { background-color: ${imeBackground}; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function countEOL(text) {\n    let eolCount = 0;\n    let firstLineLength = 0;\n    let lastLineStart = 0;\n    let eol = 0 /* StringEOL.Unknown */;\n    for (let i = 0, len = text.length; i < len; i++) {\n        const chr = text.charCodeAt(i);\n        if (chr === 13 /* CharCode.CarriageReturn */) {\n            if (eolCount === 0) {\n                firstLineLength = i;\n            }\n            eolCount++;\n            if (i + 1 < len && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                // \\r\\n... case\n                eol |= 2 /* StringEOL.CRLF */;\n                i++; // skip \\n\n            }\n            else {\n                // \\r... case\n                eol |= 3 /* StringEOL.Invalid */;\n            }\n            lastLineStart = i + 1;\n        }\n        else if (chr === 10 /* CharCode.LineFeed */) {\n            // \\n... case\n            eol |= 1 /* StringEOL.LF */;\n            if (eolCount === 0) {\n                firstLineLength = i;\n            }\n            eolCount++;\n            lastLineStart = i + 1;\n        }\n    }\n    if (eolCount === 0) {\n        firstLineLength = text.length;\n    }\n    return [eolCount, firstLineLength, text.length - lastLineStart, eol];\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorColumns } from './cursorColumns.js';\nfunction _normalizeIndentationFromWhitespace(str, indentSize, insertSpaces) {\n    let spacesCnt = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) === '\\t') {\n            spacesCnt = CursorColumns.nextIndentTabStop(spacesCnt, indentSize);\n        }\n        else {\n            spacesCnt++;\n        }\n    }\n    let result = '';\n    if (!insertSpaces) {\n        const tabsCnt = Math.floor(spacesCnt / indentSize);\n        spacesCnt = spacesCnt % indentSize;\n        for (let i = 0; i < tabsCnt; i++) {\n            result += '\\t';\n        }\n    }\n    for (let i = 0; i < spacesCnt; i++) {\n        result += ' ';\n    }\n    return result;\n}\nexport function normalizeIndentation(str, indentSize, insertSpaces) {\n    let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(str);\n    if (firstNonWhitespaceIndex === -1) {\n        firstNonWhitespaceIndex = str.length;\n    }\n    return _normalizeIndentationFromWhitespace(str.substring(0, firstNonWhitespaceIndex), indentSize, insertSpaces) + str.substring(firstNonWhitespaceIndex);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nimport { OffsetRange } from './offsetRange.js';\nimport { Range } from './range.js';\nimport { findFirstIdxMonotonousOrArrLen, findLastIdxMonotonous, findLastMonotonous } from '../../../base/common/arraysFind.js';\n/**\n * A range of lines (1-based).\n */\nexport class LineRange {\n    static fromRange(range) {\n        return new LineRange(range.startLineNumber, range.endLineNumber);\n    }\n    /**\n     * @param lineRanges An array of sorted line ranges.\n     */\n    static joinMany(lineRanges) {\n        if (lineRanges.length === 0) {\n            return [];\n        }\n        let result = new LineRangeSet(lineRanges[0].slice());\n        for (let i = 1; i < lineRanges.length; i++) {\n            result = result.getUnion(new LineRangeSet(lineRanges[i].slice()));\n        }\n        return result.ranges;\n    }\n    static ofLength(startLineNumber, length) {\n        return new LineRange(startLineNumber, startLineNumber + length);\n    }\n    /**\n     * @internal\n     */\n    static deserialize(lineRange) {\n        return new LineRange(lineRange[0], lineRange[1]);\n    }\n    constructor(startLineNumber, endLineNumberExclusive) {\n        if (startLineNumber > endLineNumberExclusive) {\n            throw new BugIndicatingError(`startLineNumber ${startLineNumber} cannot be after endLineNumberExclusive ${endLineNumberExclusive}`);\n        }\n        this.startLineNumber = startLineNumber;\n        this.endLineNumberExclusive = endLineNumberExclusive;\n    }\n    /**\n     * Indicates if this line range contains the given line number.\n     */\n    contains(lineNumber) {\n        return this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;\n    }\n    /**\n     * Indicates if this line range is empty.\n     */\n    get isEmpty() {\n        return this.startLineNumber === this.endLineNumberExclusive;\n    }\n    /**\n     * Moves this line range by the given offset of line numbers.\n     */\n    delta(offset) {\n        return new LineRange(this.startLineNumber + offset, this.endLineNumberExclusive + offset);\n    }\n    deltaLength(offset) {\n        return new LineRange(this.startLineNumber, this.endLineNumberExclusive + offset);\n    }\n    /**\n     * The number of lines this line range spans.\n     */\n    get length() {\n        return this.endLineNumberExclusive - this.startLineNumber;\n    }\n    /**\n     * Creates a line range that combines this and the given line range.\n     */\n    join(other) {\n        return new LineRange(Math.min(this.startLineNumber, other.startLineNumber), Math.max(this.endLineNumberExclusive, other.endLineNumberExclusive));\n    }\n    toString() {\n        return `[${this.startLineNumber},${this.endLineNumberExclusive})`;\n    }\n    /**\n     * The resulting range is empty if the ranges do not intersect, but touch.\n     * If the ranges don't even touch, the result is undefined.\n     */\n    intersect(other) {\n        const startLineNumber = Math.max(this.startLineNumber, other.startLineNumber);\n        const endLineNumberExclusive = Math.min(this.endLineNumberExclusive, other.endLineNumberExclusive);\n        if (startLineNumber <= endLineNumberExclusive) {\n            return new LineRange(startLineNumber, endLineNumberExclusive);\n        }\n        return undefined;\n    }\n    intersectsStrict(other) {\n        return this.startLineNumber < other.endLineNumberExclusive && other.startLineNumber < this.endLineNumberExclusive;\n    }\n    overlapOrTouch(other) {\n        return this.startLineNumber <= other.endLineNumberExclusive && other.startLineNumber <= this.endLineNumberExclusive;\n    }\n    equals(b) {\n        return this.startLineNumber === b.startLineNumber && this.endLineNumberExclusive === b.endLineNumberExclusive;\n    }\n    toInclusiveRange() {\n        if (this.isEmpty) {\n            return null;\n        }\n        return new Range(this.startLineNumber, 1, this.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER);\n    }\n    toExclusiveRange() {\n        return new Range(this.startLineNumber, 1, this.endLineNumberExclusive, 1);\n    }\n    mapToLineArray(f) {\n        const result = [];\n        for (let lineNumber = this.startLineNumber; lineNumber < this.endLineNumberExclusive; lineNumber++) {\n            result.push(f(lineNumber));\n        }\n        return result;\n    }\n    forEach(f) {\n        for (let lineNumber = this.startLineNumber; lineNumber < this.endLineNumberExclusive; lineNumber++) {\n            f(lineNumber);\n        }\n    }\n    /**\n     * @internal\n     */\n    serialize() {\n        return [this.startLineNumber, this.endLineNumberExclusive];\n    }\n    includes(lineNumber) {\n        return this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;\n    }\n    /**\n     * Converts this 1-based line range to a 0-based offset range (subtracts 1!).\n     * @internal\n     */\n    toOffsetRange() {\n        return new OffsetRange(this.startLineNumber - 1, this.endLineNumberExclusive - 1);\n    }\n}\nexport class LineRangeSet {\n    constructor(\n    /**\n     * Sorted by start line number.\n     * No two line ranges are touching or intersecting.\n     */\n    _normalizedRanges = []) {\n        this._normalizedRanges = _normalizedRanges;\n    }\n    get ranges() {\n        return this._normalizedRanges;\n    }\n    addRange(range) {\n        if (range.length === 0) {\n            return;\n        }\n        // Idea: Find joinRange such that:\n        // replaceRange = _normalizedRanges.replaceRange(joinRange, range.joinAll(joinRange.map(idx => this._normalizedRanges[idx])))\n        // idx of first element that touches range or that is after range\n        const joinRangeStartIdx = findFirstIdxMonotonousOrArrLen(this._normalizedRanges, r => r.endLineNumberExclusive >= range.startLineNumber);\n        // idx of element after { last element that touches range or that is before range }\n        const joinRangeEndIdxExclusive = findLastIdxMonotonous(this._normalizedRanges, r => r.startLineNumber <= range.endLineNumberExclusive) + 1;\n        if (joinRangeStartIdx === joinRangeEndIdxExclusive) {\n            // If there is no element that touches range, then joinRangeStartIdx === joinRangeEndIdxExclusive and that value is the index of the element after range\n            this._normalizedRanges.splice(joinRangeStartIdx, 0, range);\n        }\n        else if (joinRangeStartIdx === joinRangeEndIdxExclusive - 1) {\n            // Else, there is an element that touches range and in this case it is both the first and last element. Thus we can replace it\n            const joinRange = this._normalizedRanges[joinRangeStartIdx];\n            this._normalizedRanges[joinRangeStartIdx] = joinRange.join(range);\n        }\n        else {\n            // First and last element are different - we need to replace the entire range\n            const joinRange = this._normalizedRanges[joinRangeStartIdx].join(this._normalizedRanges[joinRangeEndIdxExclusive - 1]).join(range);\n            this._normalizedRanges.splice(joinRangeStartIdx, joinRangeEndIdxExclusive - joinRangeStartIdx, joinRange);\n        }\n    }\n    contains(lineNumber) {\n        const rangeThatStartsBeforeEnd = findLastMonotonous(this._normalizedRanges, r => r.startLineNumber <= lineNumber);\n        return !!rangeThatStartsBeforeEnd && rangeThatStartsBeforeEnd.endLineNumberExclusive > lineNumber;\n    }\n    getUnion(other) {\n        if (this._normalizedRanges.length === 0) {\n            return other;\n        }\n        if (other._normalizedRanges.length === 0) {\n            return this;\n        }\n        const result = [];\n        let i1 = 0;\n        let i2 = 0;\n        let current = null;\n        while (i1 < this._normalizedRanges.length || i2 < other._normalizedRanges.length) {\n            let next = null;\n            if (i1 < this._normalizedRanges.length && i2 < other._normalizedRanges.length) {\n                const lineRange1 = this._normalizedRanges[i1];\n                const lineRange2 = other._normalizedRanges[i2];\n                if (lineRange1.startLineNumber < lineRange2.startLineNumber) {\n                    next = lineRange1;\n                    i1++;\n                }\n                else {\n                    next = lineRange2;\n                    i2++;\n                }\n            }\n            else if (i1 < this._normalizedRanges.length) {\n                next = this._normalizedRanges[i1];\n                i1++;\n            }\n            else {\n                next = other._normalizedRanges[i2];\n                i2++;\n            }\n            if (current === null) {\n                current = next;\n            }\n            else {\n                if (current.endLineNumberExclusive >= next.startLineNumber) {\n                    // merge\n                    current = new LineRange(current.startLineNumber, Math.max(current.endLineNumberExclusive, next.endLineNumberExclusive));\n                }\n                else {\n                    // push\n                    result.push(current);\n                    current = next;\n                }\n            }\n        }\n        if (current !== null) {\n            result.push(current);\n        }\n        return new LineRangeSet(result);\n    }\n    /**\n     * Subtracts all ranges in this set from `range` and returns the result.\n     */\n    subtractFrom(range) {\n        // idx of first element that touches range or that is after range\n        const joinRangeStartIdx = findFirstIdxMonotonousOrArrLen(this._normalizedRanges, r => r.endLineNumberExclusive >= range.startLineNumber);\n        // idx of element after { last element that touches range or that is before range }\n        const joinRangeEndIdxExclusive = findLastIdxMonotonous(this._normalizedRanges, r => r.startLineNumber <= range.endLineNumberExclusive) + 1;\n        if (joinRangeStartIdx === joinRangeEndIdxExclusive) {\n            return new LineRangeSet([range]);\n        }\n        const result = [];\n        let startLineNumber = range.startLineNumber;\n        for (let i = joinRangeStartIdx; i < joinRangeEndIdxExclusive; i++) {\n            const r = this._normalizedRanges[i];\n            if (r.startLineNumber > startLineNumber) {\n                result.push(new LineRange(startLineNumber, r.startLineNumber));\n            }\n            startLineNumber = r.endLineNumberExclusive;\n        }\n        if (startLineNumber < range.endLineNumberExclusive) {\n            result.push(new LineRange(startLineNumber, range.endLineNumberExclusive));\n        }\n        return new LineRangeSet(result);\n    }\n    toString() {\n        return this._normalizedRanges.map(r => r.toString()).join(', ');\n    }\n    getIntersection(other) {\n        const result = [];\n        let i1 = 0;\n        let i2 = 0;\n        while (i1 < this._normalizedRanges.length && i2 < other._normalizedRanges.length) {\n            const r1 = this._normalizedRanges[i1];\n            const r2 = other._normalizedRanges[i2];\n            const i = r1.intersect(r2);\n            if (i && !i.isEmpty) {\n                result.push(i);\n            }\n            if (r1.endLineNumberExclusive < r2.endLineNumberExclusive) {\n                i1++;\n            }\n            else {\n                i2++;\n            }\n        }\n        return new LineRangeSet(result);\n    }\n    getWithDelta(value) {\n        return new LineRangeSet(this._normalizedRanges.map(r => r.delta(value)));\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BugIndicatingError } from '../../../base/common/errors.js';\n/**\n * A range of offsets (0-based).\n*/\nexport class OffsetRange {\n    static addRange(range, sortedRanges) {\n        let i = 0;\n        while (i < sortedRanges.length && sortedRanges[i].endExclusive < range.start) {\n            i++;\n        }\n        let j = i;\n        while (j < sortedRanges.length && sortedRanges[j].start <= range.endExclusive) {\n            j++;\n        }\n        if (i === j) {\n            sortedRanges.splice(i, 0, range);\n        }\n        else {\n            const start = Math.min(range.start, sortedRanges[i].start);\n            const end = Math.max(range.endExclusive, sortedRanges[j - 1].endExclusive);\n            sortedRanges.splice(i, j - i, new OffsetRange(start, end));\n        }\n    }\n    static tryCreate(start, endExclusive) {\n        if (start > endExclusive) {\n            return undefined;\n        }\n        return new OffsetRange(start, endExclusive);\n    }\n    static ofLength(length) {\n        return new OffsetRange(0, length);\n    }\n    constructor(start, endExclusive) {\n        this.start = start;\n        this.endExclusive = endExclusive;\n        if (start > endExclusive) {\n            throw new BugIndicatingError(`Invalid range: ${this.toString()}`);\n        }\n    }\n    get isEmpty() {\n        return this.start === this.endExclusive;\n    }\n    delta(offset) {\n        return new OffsetRange(this.start + offset, this.endExclusive + offset);\n    }\n    deltaStart(offset) {\n        return new OffsetRange(this.start + offset, this.endExclusive);\n    }\n    deltaEnd(offset) {\n        return new OffsetRange(this.start, this.endExclusive + offset);\n    }\n    get length() {\n        return this.endExclusive - this.start;\n    }\n    toString() {\n        return `[${this.start}, ${this.endExclusive})`;\n    }\n    equals(other) {\n        return this.start === other.start && this.endExclusive === other.endExclusive;\n    }\n    containsRange(other) {\n        return this.start <= other.start && other.endExclusive <= this.endExclusive;\n    }\n    contains(offset) {\n        return this.start <= offset && offset < this.endExclusive;\n    }\n    /**\n     * for all numbers n: range1.contains(n) or range2.contains(n) => range1.join(range2).contains(n)\n     * The joined range is the smallest range that contains both ranges.\n     */\n    join(other) {\n        return new OffsetRange(Math.min(this.start, other.start), Math.max(this.endExclusive, other.endExclusive));\n    }\n    /**\n     * for all numbers n: range1.contains(n) and range2.contains(n) <=> range1.intersect(range2).contains(n)\n     *\n     * The resulting range is empty if the ranges do not intersect, but touch.\n     * If the ranges don't even touch, the result is undefined.\n     */\n    intersect(other) {\n        const start = Math.max(this.start, other.start);\n        const end = Math.min(this.endExclusive, other.endExclusive);\n        if (start <= end) {\n            return new OffsetRange(start, end);\n        }\n        return undefined;\n    }\n    slice(arr) {\n        return arr.slice(this.start, this.endExclusive);\n    }\n    /**\n     * Returns the given value if it is contained in this instance, otherwise the closest value that is contained.\n     * The range must not be empty.\n     */\n    clip(value) {\n        if (this.isEmpty) {\n            throw new BugIndicatingError(`Invalid clipping range: ${this.toString()}`);\n        }\n        return Math.max(this.start, Math.min(this.endExclusive - 1, value));\n    }\n    /**\n     * Returns `r := value + k * length` such that `r` is contained in this range.\n     * The range must not be empty.\n     *\n     * E.g. `[5, 10).clipCyclic(10) === 5`, `[5, 10).clipCyclic(11) === 6` and `[5, 10).clipCyclic(4) === 9`.\n     */\n    clipCyclic(value) {\n        if (this.isEmpty) {\n            throw new BugIndicatingError(`Invalid clipping range: ${this.toString()}`);\n        }\n        if (value < this.start) {\n            return this.endExclusive - ((this.start - value) % this.length);\n        }\n        if (value >= this.endExclusive) {\n            return this.start + ((value - this.start) % this.length);\n        }\n        return value;\n    }\n    forEach(f) {\n        for (let i = this.start; i < this.endExclusive; i++) {\n            f(i);\n        }\n    }\n}\nexport class OffsetRangeSet {\n    constructor() {\n        this._sortedRanges = [];\n    }\n    addRange(range) {\n        let i = 0;\n        while (i < this._sortedRanges.length && this._sortedRanges[i].endExclusive < range.start) {\n            i++;\n        }\n        let j = i;\n        while (j < this._sortedRanges.length && this._sortedRanges[j].start <= range.endExclusive) {\n            j++;\n        }\n        if (i === j) {\n            this._sortedRanges.splice(i, 0, range);\n        }\n        else {\n            const start = Math.min(range.start, this._sortedRanges[i].start);\n            const end = Math.max(range.endExclusive, this._sortedRanges[j - 1].endExclusive);\n            this._sortedRanges.splice(i, j - i, new OffsetRange(start, end));\n        }\n    }\n    toString() {\n        return this._sortedRanges.map(r => r.toString()).join(', ');\n    }\n    /**\n     * Returns of there is a value that is contained in this instance and the given range.\n     */\n    intersectsStrict(other) {\n        // TODO use binary search\n        let i = 0;\n        while (i < this._sortedRanges.length && this._sortedRanges[i].endExclusive <= other.start) {\n            i++;\n        }\n        return i < this._sortedRanges.length && this._sortedRanges[i].start < other.endExclusive;\n    }\n    intersectWithRange(other) {\n        // TODO use binary search + slice\n        const result = new OffsetRangeSet();\n        for (const range of this._sortedRanges) {\n            const intersection = range.intersect(other);\n            if (intersection) {\n                result.addRange(intersection);\n            }\n        }\n        return result;\n    }\n    intersectWithRangeLength(other) {\n        return this.intersectWithRange(other).length;\n    }\n    get length() {\n        return this._sortedRanges.reduce((prev, cur) => prev + cur.length, 0);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * A position in the editor.\n */\nexport class Position {\n    constructor(lineNumber, column) {\n        this.lineNumber = lineNumber;\n        this.column = column;\n    }\n    /**\n     * Create a new position from this position.\n     *\n     * @param newLineNumber new line number\n     * @param newColumn new column\n     */\n    with(newLineNumber = this.lineNumber, newColumn = this.column) {\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\n            return this;\n        }\n        else {\n            return new Position(newLineNumber, newColumn);\n        }\n    }\n    /**\n     * Derive a new position from this position.\n     *\n     * @param deltaLineNumber line number delta\n     * @param deltaColumn column delta\n     */\n    delta(deltaLineNumber = 0, deltaColumn = 0) {\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n    }\n    /**\n     * Test if this position equals other position\n     */\n    equals(other) {\n        return Position.equals(this, other);\n    }\n    /**\n     * Test if position `a` equals position `b`\n     */\n    static equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        return (!!a &&\n            !!b &&\n            a.lineNumber === b.lineNumber &&\n            a.column === b.column);\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be false.\n     */\n    isBefore(other) {\n        return Position.isBefore(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be false.\n     */\n    static isBefore(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column < b.column;\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be true.\n     */\n    isBeforeOrEqual(other) {\n        return Position.isBeforeOrEqual(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be true.\n     */\n    static isBeforeOrEqual(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column <= b.column;\n    }\n    /**\n     * A function that compares positions, useful for sorting\n     */\n    static compare(a, b) {\n        const aLineNumber = a.lineNumber | 0;\n        const bLineNumber = b.lineNumber | 0;\n        if (aLineNumber === bLineNumber) {\n            const aColumn = a.column | 0;\n            const bColumn = b.column | 0;\n            return aColumn - bColumn;\n        }\n        return aLineNumber - bLineNumber;\n    }\n    /**\n     * Clone this position.\n     */\n    clone() {\n        return new Position(this.lineNumber, this.column);\n    }\n    /**\n     * Convert to a human-readable representation.\n     */\n    toString() {\n        return '(' + this.lineNumber + ',' + this.column + ')';\n    }\n    // ---\n    /**\n     * Create a `Position` from an `IPosition`.\n     */\n    static lift(pos) {\n        return new Position(pos.lineNumber, pos.column);\n    }\n    /**\n     * Test if `obj` is an `IPosition`.\n     */\n    static isIPosition(obj) {\n        return (obj\n            && (typeof obj.lineNumber === 'number')\n            && (typeof obj.column === 'number'));\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './position.js';\n/**\n * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\n */\nexport class Range {\n    constructor(startLineNumber, startColumn, endLineNumber, endColumn) {\n        if ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {\n            this.startLineNumber = endLineNumber;\n            this.startColumn = endColumn;\n            this.endLineNumber = startLineNumber;\n            this.endColumn = startColumn;\n        }\n        else {\n            this.startLineNumber = startLineNumber;\n            this.startColumn = startColumn;\n            this.endLineNumber = endLineNumber;\n            this.endColumn = endColumn;\n        }\n    }\n    /**\n     * Test if this range is empty.\n     */\n    isEmpty() {\n        return Range.isEmpty(this);\n    }\n    /**\n     * Test if `range` is empty.\n     */\n    static isEmpty(range) {\n        return (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);\n    }\n    /**\n     * Test if position is in this range. If the position is at the edges, will return true.\n     */\n    containsPosition(position) {\n        return Range.containsPosition(this, position);\n    }\n    /**\n     * Test if `position` is in `range`. If the position is at the edges, will return true.\n     */\n    static containsPosition(range, position) {\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\n            return false;\n        }\n        if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if `position` is in `range`. If the position is at the edges, will return false.\n     * @internal\n     */\n    static strictContainsPosition(range, position) {\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (position.lineNumber === range.startLineNumber && position.column <= range.startColumn) {\n            return false;\n        }\n        if (position.lineNumber === range.endLineNumber && position.column >= range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if range is in this range. If the range is equal to this range, will return true.\n     */\n    containsRange(range) {\n        return Range.containsRange(this, range);\n    }\n    /**\n     * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\n     */\n    static containsRange(range, otherRange) {\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\n            return false;\n        }\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\n     */\n    strictContainsRange(range) {\n        return Range.strictContainsRange(this, range);\n    }\n    /**\n     * Test if `otherRange` is strictly in `range` (must start after, and end before). If the ranges are equal, will return false.\n     */\n    static strictContainsRange(range, otherRange) {\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {\n            return false;\n        }\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * A reunion of the two ranges.\n     * The smallest position will be used as the start point, and the largest one as the end point.\n     */\n    plusRange(range) {\n        return Range.plusRange(this, range);\n    }\n    /**\n     * A reunion of the two ranges.\n     * The smallest position will be used as the start point, and the largest one as the end point.\n     */\n    static plusRange(a, b) {\n        let startLineNumber;\n        let startColumn;\n        let endLineNumber;\n        let endColumn;\n        if (b.startLineNumber < a.startLineNumber) {\n            startLineNumber = b.startLineNumber;\n            startColumn = b.startColumn;\n        }\n        else if (b.startLineNumber === a.startLineNumber) {\n            startLineNumber = b.startLineNumber;\n            startColumn = Math.min(b.startColumn, a.startColumn);\n        }\n        else {\n            startLineNumber = a.startLineNumber;\n            startColumn = a.startColumn;\n        }\n        if (b.endLineNumber > a.endLineNumber) {\n            endLineNumber = b.endLineNumber;\n            endColumn = b.endColumn;\n        }\n        else if (b.endLineNumber === a.endLineNumber) {\n            endLineNumber = b.endLineNumber;\n            endColumn = Math.max(b.endColumn, a.endColumn);\n        }\n        else {\n            endLineNumber = a.endLineNumber;\n            endColumn = a.endColumn;\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    /**\n     * A intersection of the two ranges.\n     */\n    intersectRanges(range) {\n        return Range.intersectRanges(this, range);\n    }\n    /**\n     * A intersection of the two ranges.\n     */\n    static intersectRanges(a, b) {\n        let resultStartLineNumber = a.startLineNumber;\n        let resultStartColumn = a.startColumn;\n        let resultEndLineNumber = a.endLineNumber;\n        let resultEndColumn = a.endColumn;\n        const otherStartLineNumber = b.startLineNumber;\n        const otherStartColumn = b.startColumn;\n        const otherEndLineNumber = b.endLineNumber;\n        const otherEndColumn = b.endColumn;\n        if (resultStartLineNumber < otherStartLineNumber) {\n            resultStartLineNumber = otherStartLineNumber;\n            resultStartColumn = otherStartColumn;\n        }\n        else if (resultStartLineNumber === otherStartLineNumber) {\n            resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\n        }\n        if (resultEndLineNumber > otherEndLineNumber) {\n            resultEndLineNumber = otherEndLineNumber;\n            resultEndColumn = otherEndColumn;\n        }\n        else if (resultEndLineNumber === otherEndLineNumber) {\n            resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\n        }\n        // Check if selection is now empty\n        if (resultStartLineNumber > resultEndLineNumber) {\n            return null;\n        }\n        if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\n            return null;\n        }\n        return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\n    }\n    /**\n     * Test if this range equals other.\n     */\n    equalsRange(other) {\n        return Range.equalsRange(this, other);\n    }\n    /**\n     * Test if range `a` equals `b`.\n     */\n    static equalsRange(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        return (!!a &&\n            !!b &&\n            a.startLineNumber === b.startLineNumber &&\n            a.startColumn === b.startColumn &&\n            a.endLineNumber === b.endLineNumber &&\n            a.endColumn === b.endColumn);\n    }\n    /**\n     * Return the end position (which will be after or equal to the start position)\n     */\n    getEndPosition() {\n        return Range.getEndPosition(this);\n    }\n    /**\n     * Return the end position (which will be after or equal to the start position)\n     */\n    static getEndPosition(range) {\n        return new Position(range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Return the start position (which will be before or equal to the end position)\n     */\n    getStartPosition() {\n        return Range.getStartPosition(this);\n    }\n    /**\n     * Return the start position (which will be before or equal to the end position)\n     */\n    static getStartPosition(range) {\n        return new Position(range.startLineNumber, range.startColumn);\n    }\n    /**\n     * Transform to a user presentable string representation.\n     */\n    toString() {\n        return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\n    }\n    /**\n     * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\n     */\n    setEndPosition(endLineNumber, endColumn) {\n        return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n    }\n    /**\n     * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\n     */\n    setStartPosition(startLineNumber, startColumn) {\n        return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n    }\n    /**\n     * Create a new empty range using this range's start position.\n     */\n    collapseToStart() {\n        return Range.collapseToStart(this);\n    }\n    /**\n     * Create a new empty range using this range's start position.\n     */\n    static collapseToStart(range) {\n        return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n    }\n    /**\n     * Create a new empty range using this range's end position.\n     */\n    collapseToEnd() {\n        return Range.collapseToEnd(this);\n    }\n    /**\n     * Create a new empty range using this range's end position.\n     */\n    static collapseToEnd(range) {\n        return new Range(range.endLineNumber, range.endColumn, range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Moves the range by the given amount of lines.\n     */\n    delta(lineCount) {\n        return new Range(this.startLineNumber + lineCount, this.startColumn, this.endLineNumber + lineCount, this.endColumn);\n    }\n    // ---\n    static fromPositions(start, end = start) {\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    static lift(range) {\n        if (!range) {\n            return null;\n        }\n        return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Test if `obj` is an `IRange`.\n     */\n    static isIRange(obj) {\n        return (obj\n            && (typeof obj.startLineNumber === 'number')\n            && (typeof obj.startColumn === 'number')\n            && (typeof obj.endLineNumber === 'number')\n            && (typeof obj.endColumn === 'number'));\n    }\n    /**\n     * Test if the two ranges are touching in any way.\n     */\n    static areIntersectingOrTouching(a, b) {\n        // Check if `a` is before `b`\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {\n            return false;\n        }\n        // Check if `b` is before `a`\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {\n            return false;\n        }\n        // These ranges must intersect\n        return true;\n    }\n    /**\n     * Test if the two ranges are intersecting. If the ranges are touching it returns true.\n     */\n    static areIntersecting(a, b) {\n        // Check if `a` is before `b`\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn)) {\n            return false;\n        }\n        // Check if `b` is before `a`\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn)) {\n            return false;\n        }\n        // These ranges must intersect\n        return true;\n    }\n    /**\n     * A function that compares ranges, useful for sorting ranges\n     * It will first compare ranges on the startPosition and then on the endPosition\n     */\n    static compareRangesUsingStarts(a, b) {\n        if (a && b) {\n            const aStartLineNumber = a.startLineNumber | 0;\n            const bStartLineNumber = b.startLineNumber | 0;\n            if (aStartLineNumber === bStartLineNumber) {\n                const aStartColumn = a.startColumn | 0;\n                const bStartColumn = b.startColumn | 0;\n                if (aStartColumn === bStartColumn) {\n                    const aEndLineNumber = a.endLineNumber | 0;\n                    const bEndLineNumber = b.endLineNumber | 0;\n                    if (aEndLineNumber === bEndLineNumber) {\n                        const aEndColumn = a.endColumn | 0;\n                        const bEndColumn = b.endColumn | 0;\n                        return aEndColumn - bEndColumn;\n                    }\n                    return aEndLineNumber - bEndLineNumber;\n                }\n                return aStartColumn - bStartColumn;\n            }\n            return aStartLineNumber - bStartLineNumber;\n        }\n        const aExists = (a ? 1 : 0);\n        const bExists = (b ? 1 : 0);\n        return aExists - bExists;\n    }\n    /**\n     * A function that compares ranges, useful for sorting ranges\n     * It will first compare ranges on the endPosition and then on the startPosition\n     */\n    static compareRangesUsingEnds(a, b) {\n        if (a.endLineNumber === b.endLineNumber) {\n            if (a.endColumn === b.endColumn) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.startColumn - b.startColumn;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return a.endColumn - b.endColumn;\n        }\n        return a.endLineNumber - b.endLineNumber;\n    }\n    /**\n     * Test if the range spans multiple lines.\n     */\n    static spansMultipleLines(range) {\n        return range.endLineNumber > range.startLineNumber;\n    }\n    toJSON() {\n        return this;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * A very VM friendly rgba datastructure.\n * Please don't touch unless you take a look at the IR.\n */\nexport class RGBA8 {\n    constructor(r, g, b, a) {\n        this._rgba8Brand = undefined;\n        this.r = RGBA8._clamp(r);\n        this.g = RGBA8._clamp(g);\n        this.b = RGBA8._clamp(b);\n        this.a = RGBA8._clamp(a);\n    }\n    equals(other) {\n        return (this.r === other.r\n            && this.g === other.g\n            && this.b === other.b\n            && this.a === other.a);\n    }\n    static _clamp(c) {\n        if (c < 0) {\n            return 0;\n        }\n        if (c > 255) {\n            return 255;\n        }\n        return c | 0;\n    }\n}\nRGBA8.Empty = new RGBA8(0, 0, 0, 0);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './position.js';\nimport { Range } from './range.js';\n/**\n * A selection in the editor.\n * The selection is a range that has an orientation.\n */\nexport class Selection extends Range {\n    constructor(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn) {\n        super(selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn);\n        this.selectionStartLineNumber = selectionStartLineNumber;\n        this.selectionStartColumn = selectionStartColumn;\n        this.positionLineNumber = positionLineNumber;\n        this.positionColumn = positionColumn;\n    }\n    /**\n     * Transform to a human-readable representation.\n     */\n    toString() {\n        return '[' + this.selectionStartLineNumber + ',' + this.selectionStartColumn + ' -> ' + this.positionLineNumber + ',' + this.positionColumn + ']';\n    }\n    /**\n     * Test if equals other selection.\n     */\n    equalsSelection(other) {\n        return (Selection.selectionsEqual(this, other));\n    }\n    /**\n     * Test if the two selections are equal.\n     */\n    static selectionsEqual(a, b) {\n        return (a.selectionStartLineNumber === b.selectionStartLineNumber &&\n            a.selectionStartColumn === b.selectionStartColumn &&\n            a.positionLineNumber === b.positionLineNumber &&\n            a.positionColumn === b.positionColumn);\n    }\n    /**\n     * Get directions (LTR or RTL).\n     */\n    getDirection() {\n        if (this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn) {\n            return 0 /* SelectionDirection.LTR */;\n        }\n        return 1 /* SelectionDirection.RTL */;\n    }\n    /**\n     * Create a new selection with a different `positionLineNumber` and `positionColumn`.\n     */\n    setEndPosition(endLineNumber, endColumn) {\n        if (this.getDirection() === 0 /* SelectionDirection.LTR */) {\n            return new Selection(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n        }\n        return new Selection(endLineNumber, endColumn, this.startLineNumber, this.startColumn);\n    }\n    /**\n     * Get the position at `positionLineNumber` and `positionColumn`.\n     */\n    getPosition() {\n        return new Position(this.positionLineNumber, this.positionColumn);\n    }\n    /**\n     * Get the position at the start of the selection.\n    */\n    getSelectionStart() {\n        return new Position(this.selectionStartLineNumber, this.selectionStartColumn);\n    }\n    /**\n     * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\n     */\n    setStartPosition(startLineNumber, startColumn) {\n        if (this.getDirection() === 0 /* SelectionDirection.LTR */) {\n            return new Selection(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n        }\n        return new Selection(this.endLineNumber, this.endColumn, startLineNumber, startColumn);\n    }\n    // ----\n    /**\n     * Create a `Selection` from one or two positions\n     */\n    static fromPositions(start, end = start) {\n        return new Selection(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    /**\n     * Creates a `Selection` from a range, given a direction.\n     */\n    static fromRange(range, direction) {\n        if (direction === 0 /* SelectionDirection.LTR */) {\n            return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n        }\n        else {\n            return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n        }\n    }\n    /**\n     * Create a `Selection` from an `ISelection`.\n     */\n    static liftSelection(sel) {\n        return new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\n    }\n    /**\n     * `a` equals `b`.\n     */\n    static selectionsArrEqual(a, b) {\n        if (a && !b || !a && b) {\n            return false;\n        }\n        if (!a && !b) {\n            return true;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0, len = a.length; i < len; i++) {\n            if (!this.selectionsEqual(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Test if `obj` is an `ISelection`.\n     */\n    static isISelection(obj) {\n        return (obj\n            && (typeof obj.selectionStartLineNumber === 'number')\n            && (typeof obj.selectionStartColumn === 'number')\n            && (typeof obj.positionLineNumber === 'number')\n            && (typeof obj.positionColumn === 'number'));\n    }\n    /**\n     * Create with a direction.\n     */\n    static createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, direction) {\n        if (direction === 0 /* SelectionDirection.LTR */) {\n            return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return new Selection(endLineNumber, endColumn, startLineNumber, startColumn);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as buffer from '../../../base/common/buffer.js';\nlet _utf16LE_TextDecoder;\nfunction getUTF16LE_TextDecoder() {\n    if (!_utf16LE_TextDecoder) {\n        _utf16LE_TextDecoder = new TextDecoder('UTF-16LE');\n    }\n    return _utf16LE_TextDecoder;\n}\nlet _utf16BE_TextDecoder;\nfunction getUTF16BE_TextDecoder() {\n    if (!_utf16BE_TextDecoder) {\n        _utf16BE_TextDecoder = new TextDecoder('UTF-16BE');\n    }\n    return _utf16BE_TextDecoder;\n}\nlet _platformTextDecoder;\nexport function getPlatformTextDecoder() {\n    if (!_platformTextDecoder) {\n        _platformTextDecoder = platform.isLittleEndian() ? getUTF16LE_TextDecoder() : getUTF16BE_TextDecoder();\n    }\n    return _platformTextDecoder;\n}\nexport function decodeUTF16LE(source, offset, len) {\n    const view = new Uint16Array(source.buffer, offset, len);\n    if (len > 0 && (view[0] === 0xFEFF || view[0] === 0xFFFE)) {\n        // UTF16 sometimes starts with a BOM https://de.wikipedia.org/wiki/Byte_Order_Mark\n        // It looks like TextDecoder.decode will eat up a leading BOM (0xFEFF or 0xFFFE)\n        // We don't want that behavior because we know the string is UTF16LE and the BOM should be maintained\n        // So we use the manual decoder\n        return compatDecodeUTF16LE(source, offset, len);\n    }\n    return getUTF16LE_TextDecoder().decode(view);\n}\nfunction compatDecodeUTF16LE(source, offset, len) {\n    const result = [];\n    let resultLen = 0;\n    for (let i = 0; i < len; i++) {\n        const charCode = buffer.readUInt16LE(source, offset);\n        offset += 2;\n        result[resultLen++] = String.fromCharCode(charCode);\n    }\n    return result.join('');\n}\nexport class StringBuilder {\n    constructor(capacity) {\n        this._capacity = capacity | 0;\n        this._buffer = new Uint16Array(this._capacity);\n        this._completedStrings = null;\n        this._bufferLength = 0;\n    }\n    reset() {\n        this._completedStrings = null;\n        this._bufferLength = 0;\n    }\n    build() {\n        if (this._completedStrings !== null) {\n            this._flushBuffer();\n            return this._completedStrings.join('');\n        }\n        return this._buildBuffer();\n    }\n    _buildBuffer() {\n        if (this._bufferLength === 0) {\n            return '';\n        }\n        const view = new Uint16Array(this._buffer.buffer, 0, this._bufferLength);\n        return getPlatformTextDecoder().decode(view);\n    }\n    _flushBuffer() {\n        const bufferString = this._buildBuffer();\n        this._bufferLength = 0;\n        if (this._completedStrings === null) {\n            this._completedStrings = [bufferString];\n        }\n        else {\n            this._completedStrings[this._completedStrings.length] = bufferString;\n        }\n    }\n    /**\n     * Append a char code (<2^16)\n     */\n    appendCharCode(charCode) {\n        const remainingSpace = this._capacity - this._bufferLength;\n        if (remainingSpace <= 1) {\n            if (remainingSpace === 0 || strings.isHighSurrogate(charCode)) {\n                this._flushBuffer();\n            }\n        }\n        this._buffer[this._bufferLength++] = charCode;\n    }\n    /**\n     * Append an ASCII char code (<2^8)\n     */\n    appendASCIICharCode(charCode) {\n        if (this._bufferLength === this._capacity) {\n            // buffer is full\n            this._flushBuffer();\n        }\n        this._buffer[this._bufferLength++] = charCode;\n    }\n    appendString(str) {\n        const strLen = str.length;\n        if (this._bufferLength + strLen >= this._capacity) {\n            // This string does not fit in the remaining buffer space\n            this._flushBuffer();\n            this._completedStrings[this._completedStrings.length] = str;\n            return;\n        }\n        for (let i = 0; i < strLen; i++) {\n            this._buffer[this._bufferLength++] = str.charCodeAt(i);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as buffer from '../../../base/common/buffer.js';\nimport { decodeUTF16LE } from './stringBuilder.js';\nfunction escapeNewLine(str) {\n    return (str\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r'));\n}\nexport class TextChange {\n    get oldLength() {\n        return this.oldText.length;\n    }\n    get oldEnd() {\n        return this.oldPosition + this.oldText.length;\n    }\n    get newLength() {\n        return this.newText.length;\n    }\n    get newEnd() {\n        return this.newPosition + this.newText.length;\n    }\n    constructor(oldPosition, oldText, newPosition, newText) {\n        this.oldPosition = oldPosition;\n        this.oldText = oldText;\n        this.newPosition = newPosition;\n        this.newText = newText;\n    }\n    toString() {\n        if (this.oldText.length === 0) {\n            return `(insert@${this.oldPosition} \"${escapeNewLine(this.newText)}\")`;\n        }\n        if (this.newText.length === 0) {\n            return `(delete@${this.oldPosition} \"${escapeNewLine(this.oldText)}\")`;\n        }\n        return `(replace@${this.oldPosition} \"${escapeNewLine(this.oldText)}\" with \"${escapeNewLine(this.newText)}\")`;\n    }\n    static _writeStringSize(str) {\n        return (4 + 2 * str.length);\n    }\n    static _writeString(b, str, offset) {\n        const len = str.length;\n        buffer.writeUInt32BE(b, len, offset);\n        offset += 4;\n        for (let i = 0; i < len; i++) {\n            buffer.writeUInt16LE(b, str.charCodeAt(i), offset);\n            offset += 2;\n        }\n        return offset;\n    }\n    static _readString(b, offset) {\n        const len = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        return decodeUTF16LE(b, offset, len);\n    }\n    writeSize() {\n        return (+4 // oldPosition\n            + 4 // newPosition\n            + TextChange._writeStringSize(this.oldText)\n            + TextChange._writeStringSize(this.newText));\n    }\n    write(b, offset) {\n        buffer.writeUInt32BE(b, this.oldPosition, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, this.newPosition, offset);\n        offset += 4;\n        offset = TextChange._writeString(b, this.oldText, offset);\n        offset = TextChange._writeString(b, this.newText, offset);\n        return offset;\n    }\n    static read(b, offset, dest) {\n        const oldPosition = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const newPosition = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const oldText = TextChange._readString(b, offset);\n        offset += TextChange._writeStringSize(oldText);\n        const newText = TextChange._readString(b, offset);\n        offset += TextChange._writeStringSize(newText);\n        dest.push(new TextChange(oldPosition, oldText, newPosition, newText));\n        return offset;\n    }\n}\nexport function compressConsecutiveTextChanges(prevEdits, currEdits) {\n    if (prevEdits === null || prevEdits.length === 0) {\n        return currEdits;\n    }\n    const compressor = new TextChangeCompressor(prevEdits, currEdits);\n    return compressor.compress();\n}\nclass TextChangeCompressor {\n    constructor(prevEdits, currEdits) {\n        this._prevEdits = prevEdits;\n        this._currEdits = currEdits;\n        this._result = [];\n        this._resultLen = 0;\n        this._prevLen = this._prevEdits.length;\n        this._prevDeltaOffset = 0;\n        this._currLen = this._currEdits.length;\n        this._currDeltaOffset = 0;\n    }\n    compress() {\n        let prevIndex = 0;\n        let currIndex = 0;\n        let prevEdit = this._getPrev(prevIndex);\n        let currEdit = this._getCurr(currIndex);\n        while (prevIndex < this._prevLen || currIndex < this._currLen) {\n            if (prevEdit === null) {\n                this._acceptCurr(currEdit);\n                currEdit = this._getCurr(++currIndex);\n                continue;\n            }\n            if (currEdit === null) {\n                this._acceptPrev(prevEdit);\n                prevEdit = this._getPrev(++prevIndex);\n                continue;\n            }\n            if (currEdit.oldEnd <= prevEdit.newPosition) {\n                this._acceptCurr(currEdit);\n                currEdit = this._getCurr(++currIndex);\n                continue;\n            }\n            if (prevEdit.newEnd <= currEdit.oldPosition) {\n                this._acceptPrev(prevEdit);\n                prevEdit = this._getPrev(++prevIndex);\n                continue;\n            }\n            if (currEdit.oldPosition < prevEdit.newPosition) {\n                const [e1, e2] = TextChangeCompressor._splitCurr(currEdit, prevEdit.newPosition - currEdit.oldPosition);\n                this._acceptCurr(e1);\n                currEdit = e2;\n                continue;\n            }\n            if (prevEdit.newPosition < currEdit.oldPosition) {\n                const [e1, e2] = TextChangeCompressor._splitPrev(prevEdit, currEdit.oldPosition - prevEdit.newPosition);\n                this._acceptPrev(e1);\n                prevEdit = e2;\n                continue;\n            }\n            // At this point, currEdit.oldPosition === prevEdit.newPosition\n            let mergePrev;\n            let mergeCurr;\n            if (currEdit.oldEnd === prevEdit.newEnd) {\n                mergePrev = prevEdit;\n                mergeCurr = currEdit;\n                prevEdit = this._getPrev(++prevIndex);\n                currEdit = this._getCurr(++currIndex);\n            }\n            else if (currEdit.oldEnd < prevEdit.newEnd) {\n                const [e1, e2] = TextChangeCompressor._splitPrev(prevEdit, currEdit.oldLength);\n                mergePrev = e1;\n                mergeCurr = currEdit;\n                prevEdit = e2;\n                currEdit = this._getCurr(++currIndex);\n            }\n            else {\n                const [e1, e2] = TextChangeCompressor._splitCurr(currEdit, prevEdit.newLength);\n                mergePrev = prevEdit;\n                mergeCurr = e1;\n                prevEdit = this._getPrev(++prevIndex);\n                currEdit = e2;\n            }\n            this._result[this._resultLen++] = new TextChange(mergePrev.oldPosition, mergePrev.oldText, mergeCurr.newPosition, mergeCurr.newText);\n            this._prevDeltaOffset += mergePrev.newLength - mergePrev.oldLength;\n            this._currDeltaOffset += mergeCurr.newLength - mergeCurr.oldLength;\n        }\n        const merged = TextChangeCompressor._merge(this._result);\n        const cleaned = TextChangeCompressor._removeNoOps(merged);\n        return cleaned;\n    }\n    _acceptCurr(currEdit) {\n        this._result[this._resultLen++] = TextChangeCompressor._rebaseCurr(this._prevDeltaOffset, currEdit);\n        this._currDeltaOffset += currEdit.newLength - currEdit.oldLength;\n    }\n    _getCurr(currIndex) {\n        return (currIndex < this._currLen ? this._currEdits[currIndex] : null);\n    }\n    _acceptPrev(prevEdit) {\n        this._result[this._resultLen++] = TextChangeCompressor._rebasePrev(this._currDeltaOffset, prevEdit);\n        this._prevDeltaOffset += prevEdit.newLength - prevEdit.oldLength;\n    }\n    _getPrev(prevIndex) {\n        return (prevIndex < this._prevLen ? this._prevEdits[prevIndex] : null);\n    }\n    static _rebaseCurr(prevDeltaOffset, currEdit) {\n        return new TextChange(currEdit.oldPosition - prevDeltaOffset, currEdit.oldText, currEdit.newPosition, currEdit.newText);\n    }\n    static _rebasePrev(currDeltaOffset, prevEdit) {\n        return new TextChange(prevEdit.oldPosition, prevEdit.oldText, prevEdit.newPosition + currDeltaOffset, prevEdit.newText);\n    }\n    static _splitPrev(edit, offset) {\n        const preText = edit.newText.substr(0, offset);\n        const postText = edit.newText.substr(offset);\n        return [\n            new TextChange(edit.oldPosition, edit.oldText, edit.newPosition, preText),\n            new TextChange(edit.oldEnd, '', edit.newPosition + offset, postText)\n        ];\n    }\n    static _splitCurr(edit, offset) {\n        const preText = edit.oldText.substr(0, offset);\n        const postText = edit.oldText.substr(offset);\n        return [\n            new TextChange(edit.oldPosition, preText, edit.newPosition, edit.newText),\n            new TextChange(edit.oldPosition + offset, postText, edit.newEnd, '')\n        ];\n    }\n    static _merge(edits) {\n        if (edits.length === 0) {\n            return edits;\n        }\n        const result = [];\n        let resultLen = 0;\n        let prev = edits[0];\n        for (let i = 1; i < edits.length; i++) {\n            const curr = edits[i];\n            if (prev.oldEnd === curr.oldPosition) {\n                // Merge into `prev`\n                prev = new TextChange(prev.oldPosition, prev.oldText + curr.oldText, prev.newPosition, prev.newText + curr.newText);\n            }\n            else {\n                result[resultLen++] = prev;\n                prev = curr;\n            }\n        }\n        result[resultLen++] = prev;\n        return result;\n    }\n    static _removeNoOps(edits) {\n        if (edits.length === 0) {\n            return edits;\n        }\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0; i < edits.length; i++) {\n            const edit = edits[i];\n            if (edit.oldText === edit.newText) {\n                continue;\n            }\n            result[resultLen++] = edit;\n        }\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const EDITOR_MODEL_DEFAULTS = {\n    tabSize: 4,\n    indentSize: 4,\n    insertSpaces: true,\n    detectIndentation: true,\n    trimAutoWhitespace: true,\n    largeFileOptimizations: true,\n    bracketPairColorizationOptions: {\n        enabled: true,\n        independentColorPoolPerBracketType: false,\n    },\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from './characterClassifier.js';\nexport class WordCharacterClassifier extends CharacterClassifier {\n    constructor(wordSeparators) {\n        super(0 /* WordCharacterClass.Regular */);\n        for (let i = 0, len = wordSeparators.length; i < len; i++) {\n            this.set(wordSeparators.charCodeAt(i), 2 /* WordCharacterClass.WordSeparator */);\n        }\n        this.set(32 /* CharCode.Space */, 1 /* WordCharacterClass.Whitespace */);\n        this.set(9 /* CharCode.Tab */, 1 /* WordCharacterClass.Whitespace */);\n    }\n}\nfunction once(computeFn) {\n    const cache = {}; // TODO@Alex unbounded cache\n    return (input) => {\n        if (!cache.hasOwnProperty(input)) {\n            cache[input] = computeFn(input);\n        }\n        return cache[input];\n    };\n}\nexport const getMapForWordSeparators = once((input) => new WordCharacterClassifier(input));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\nexport const USUAL_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\\'\",.<>/?';\n/**\n * Create a word definition regular expression based on default word separators.\n * Optionally provide allowed separators that should be included in words.\n *\n * The default would look like this:\n * /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g\n */\nfunction createWordRegExp(allowInWords = '') {\n    let source = '(-?\\\\d*\\\\.\\\\d\\\\w*)|([^';\n    for (const sep of USUAL_WORD_SEPARATORS) {\n        if (allowInWords.indexOf(sep) >= 0) {\n            continue;\n        }\n        source += '\\\\' + sep;\n    }\n    source += '\\\\s]+)';\n    return new RegExp(source, 'g');\n}\n// catches numbers (including floating numbers) in the first group, and alphanum in the second\nexport const DEFAULT_WORD_REGEXP = createWordRegExp();\nexport function ensureValidWordDefinition(wordDefinition) {\n    let result = DEFAULT_WORD_REGEXP;\n    if (wordDefinition && (wordDefinition instanceof RegExp)) {\n        if (!wordDefinition.global) {\n            let flags = 'g';\n            if (wordDefinition.ignoreCase) {\n                flags += 'i';\n            }\n            if (wordDefinition.multiline) {\n                flags += 'm';\n            }\n            if (wordDefinition.unicode) {\n                flags += 'u';\n            }\n            result = new RegExp(wordDefinition.source, flags);\n        }\n        else {\n            result = wordDefinition;\n        }\n    }\n    result.lastIndex = 0;\n    return result;\n}\nconst _defaultConfig = new LinkedList();\n_defaultConfig.unshift({\n    maxLen: 1000,\n    windowSize: 15,\n    timeBudget: 150\n});\nexport function getWordAtText(column, wordDefinition, text, textOffset, config) {\n    if (!config) {\n        config = Iterable.first(_defaultConfig);\n    }\n    if (text.length > config.maxLen) {\n        // don't throw strings that long at the regexp\n        // but use a sub-string in which a word must occur\n        let start = column - config.maxLen / 2;\n        if (start < 0) {\n            start = 0;\n        }\n        else {\n            textOffset += start;\n        }\n        text = text.substring(start, column + config.maxLen / 2);\n        return getWordAtText(column, wordDefinition, text, textOffset, config);\n    }\n    const t1 = Date.now();\n    const pos = column - 1 - textOffset;\n    let prevRegexIndex = -1;\n    let match = null;\n    for (let i = 1;; i++) {\n        // check time budget\n        if (Date.now() - t1 >= config.timeBudget) {\n            break;\n        }\n        // reset the index at which the regexp should start matching, also know where it\n        // should stop so that subsequent search don't repeat previous searches\n        const regexIndex = pos - config.windowSize * i;\n        wordDefinition.lastIndex = Math.max(0, regexIndex);\n        const thisMatch = _findRegexMatchEnclosingPosition(wordDefinition, text, pos, prevRegexIndex);\n        if (!thisMatch && match) {\n            // stop: we have something\n            break;\n        }\n        match = thisMatch;\n        // stop: searched at start\n        if (regexIndex <= 0) {\n            break;\n        }\n        prevRegexIndex = regexIndex;\n    }\n    if (match) {\n        const result = {\n            word: match[0],\n            startColumn: textOffset + 1 + match.index,\n            endColumn: textOffset + 1 + match.index + match[0].length\n        };\n        wordDefinition.lastIndex = 0;\n        return result;\n    }\n    return null;\n}\nfunction _findRegexMatchEnclosingPosition(wordDefinition, text, pos, stopPos) {\n    let match;\n    while (match = wordDefinition.exec(text)) {\n        const matchIndex = match.index || 0;\n        if (matchIndex <= pos && wordDefinition.lastIndex >= pos) {\n            return match;\n        }\n        else if (stopPos > 0 && matchIndex > stopPos) {\n            return null;\n        }\n    }\n    return null;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorState, SingleCursorState } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\n/**\n * Represents a single cursor.\n*/\nexport class Cursor {\n    constructor(context) {\n        this._selTrackedRange = null;\n        this._trackSelection = true;\n        this._setState(context, new SingleCursorState(new Range(1, 1, 1, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(1, 1), 0), new SingleCursorState(new Range(1, 1, 1, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(1, 1), 0));\n    }\n    dispose(context) {\n        this._removeTrackedRange(context);\n    }\n    startTrackingSelection(context) {\n        this._trackSelection = true;\n        this._updateTrackedRange(context);\n    }\n    stopTrackingSelection(context) {\n        this._trackSelection = false;\n        this._removeTrackedRange(context);\n    }\n    _updateTrackedRange(context) {\n        if (!this._trackSelection) {\n            // don't track the selection\n            return;\n        }\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */);\n    }\n    _removeTrackedRange(context) {\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, null, 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */);\n    }\n    asCursorState() {\n        return new CursorState(this.modelState, this.viewState);\n    }\n    readSelectionFromMarkers(context) {\n        const range = context.model._getTrackedRange(this._selTrackedRange);\n        if (this.modelState.selection.isEmpty() && !range.isEmpty()) {\n            // Avoid selecting text when recovering from markers\n            return Selection.fromRange(range.collapseToEnd(), this.modelState.selection.getDirection());\n        }\n        return Selection.fromRange(range, this.modelState.selection.getDirection());\n    }\n    ensureValidState(context) {\n        this._setState(context, this.modelState, this.viewState);\n    }\n    setState(context, modelState, viewState) {\n        this._setState(context, modelState, viewState);\n    }\n    static _validatePositionWithCache(viewModel, position, cacheInput, cacheOutput) {\n        if (position.equals(cacheInput)) {\n            return cacheOutput;\n        }\n        return viewModel.normalizePosition(position, 2 /* PositionAffinity.None */);\n    }\n    static _validateViewState(viewModel, viewState) {\n        const position = viewState.position;\n        const sStartPosition = viewState.selectionStart.getStartPosition();\n        const sEndPosition = viewState.selectionStart.getEndPosition();\n        const validPosition = viewModel.normalizePosition(position, 2 /* PositionAffinity.None */);\n        const validSStartPosition = this._validatePositionWithCache(viewModel, sStartPosition, position, validPosition);\n        const validSEndPosition = this._validatePositionWithCache(viewModel, sEndPosition, sStartPosition, validSStartPosition);\n        if (position.equals(validPosition) && sStartPosition.equals(validSStartPosition) && sEndPosition.equals(validSEndPosition)) {\n            // fast path: the state is valid\n            return viewState;\n        }\n        return new SingleCursorState(Range.fromPositions(validSStartPosition, validSEndPosition), viewState.selectionStartKind, viewState.selectionStartLeftoverVisibleColumns + sStartPosition.column - validSStartPosition.column, validPosition, viewState.leftoverVisibleColumns + position.column - validPosition.column);\n    }\n    _setState(context, modelState, viewState) {\n        if (viewState) {\n            viewState = Cursor._validateViewState(context.viewModel, viewState);\n        }\n        if (!modelState) {\n            if (!viewState) {\n                return;\n            }\n            // We only have the view state => compute the model state\n            const selectionStart = context.model.validateRange(context.coordinatesConverter.convertViewRangeToModelRange(viewState.selectionStart));\n            const position = context.model.validatePosition(context.coordinatesConverter.convertViewPositionToModelPosition(viewState.position));\n            modelState = new SingleCursorState(selectionStart, viewState.selectionStartKind, viewState.selectionStartLeftoverVisibleColumns, position, viewState.leftoverVisibleColumns);\n        }\n        else {\n            // Validate new model state\n            const selectionStart = context.model.validateRange(modelState.selectionStart);\n            const selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;\n            const position = context.model.validatePosition(modelState.position);\n            const leftoverVisibleColumns = modelState.position.equals(position) ? modelState.leftoverVisibleColumns : 0;\n            modelState = new SingleCursorState(selectionStart, modelState.selectionStartKind, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns);\n        }\n        if (!viewState) {\n            // We only have the model state => compute the view state\n            const viewSelectionStart1 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.startLineNumber, modelState.selectionStart.startColumn));\n            const viewSelectionStart2 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.endLineNumber, modelState.selectionStart.endColumn));\n            const viewSelectionStart = new Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);\n            const viewPosition = context.coordinatesConverter.convertModelPositionToViewPosition(modelState.position);\n            viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartKind, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n        }\n        else {\n            // Validate new view state\n            const viewSelectionStart = context.coordinatesConverter.validateViewRange(viewState.selectionStart, modelState.selectionStart);\n            const viewPosition = context.coordinatesConverter.validateViewPosition(viewState.position, modelState.position);\n            viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartKind, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n        }\n        this.modelState = modelState;\n        this.viewState = viewState;\n        this._updateTrackedRange(context);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { compareBy } from '../../../base/common/arrays.js';\nimport { findLastMaxBy, findFirstMinBy } from '../../../base/common/arraysFind.js';\nimport { CursorState } from '../cursorCommon.js';\nimport { Cursor } from './oneCursor.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nexport class CursorCollection {\n    constructor(context) {\n        this.context = context;\n        this.cursors = [new Cursor(context)];\n        this.lastAddedCursorIndex = 0;\n    }\n    dispose() {\n        for (const cursor of this.cursors) {\n            cursor.dispose(this.context);\n        }\n    }\n    startTrackingSelections() {\n        for (const cursor of this.cursors) {\n            cursor.startTrackingSelection(this.context);\n        }\n    }\n    stopTrackingSelections() {\n        for (const cursor of this.cursors) {\n            cursor.stopTrackingSelection(this.context);\n        }\n    }\n    updateContext(context) {\n        this.context = context;\n    }\n    ensureValidState() {\n        for (const cursor of this.cursors) {\n            cursor.ensureValidState(this.context);\n        }\n    }\n    readSelectionFromMarkers() {\n        return this.cursors.map(c => c.readSelectionFromMarkers(this.context));\n    }\n    getAll() {\n        return this.cursors.map(c => c.asCursorState());\n    }\n    getViewPositions() {\n        return this.cursors.map(c => c.viewState.position);\n    }\n    getTopMostViewPosition() {\n        return findFirstMinBy(this.cursors, compareBy(c => c.viewState.position, Position.compare)).viewState.position;\n    }\n    getBottomMostViewPosition() {\n        return findLastMaxBy(this.cursors, compareBy(c => c.viewState.position, Position.compare)).viewState.position;\n    }\n    getSelections() {\n        return this.cursors.map(c => c.modelState.selection);\n    }\n    getViewSelections() {\n        return this.cursors.map(c => c.viewState.selection);\n    }\n    setSelections(selections) {\n        this.setStates(CursorState.fromModelSelections(selections));\n    }\n    getPrimaryCursor() {\n        return this.cursors[0].asCursorState();\n    }\n    setStates(states) {\n        if (states === null) {\n            return;\n        }\n        this.cursors[0].setState(this.context, states[0].modelState, states[0].viewState);\n        this._setSecondaryStates(states.slice(1));\n    }\n    /**\n     * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\n     */\n    _setSecondaryStates(secondaryStates) {\n        const secondaryCursorsLength = this.cursors.length - 1;\n        const secondaryStatesLength = secondaryStates.length;\n        if (secondaryCursorsLength < secondaryStatesLength) {\n            const createCnt = secondaryStatesLength - secondaryCursorsLength;\n            for (let i = 0; i < createCnt; i++) {\n                this._addSecondaryCursor();\n            }\n        }\n        else if (secondaryCursorsLength > secondaryStatesLength) {\n            const removeCnt = secondaryCursorsLength - secondaryStatesLength;\n            for (let i = 0; i < removeCnt; i++) {\n                this._removeSecondaryCursor(this.cursors.length - 2);\n            }\n        }\n        for (let i = 0; i < secondaryStatesLength; i++) {\n            this.cursors[i + 1].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\n        }\n    }\n    killSecondaryCursors() {\n        this._setSecondaryStates([]);\n    }\n    _addSecondaryCursor() {\n        this.cursors.push(new Cursor(this.context));\n        this.lastAddedCursorIndex = this.cursors.length - 1;\n    }\n    getLastAddedCursorIndex() {\n        if (this.cursors.length === 1 || this.lastAddedCursorIndex === 0) {\n            return 0;\n        }\n        return this.lastAddedCursorIndex;\n    }\n    _removeSecondaryCursor(removeIndex) {\n        if (this.lastAddedCursorIndex >= removeIndex + 1) {\n            this.lastAddedCursorIndex--;\n        }\n        this.cursors[removeIndex + 1].dispose(this.context);\n        this.cursors.splice(removeIndex + 1, 1);\n    }\n    normalize() {\n        if (this.cursors.length === 1) {\n            return;\n        }\n        const cursors = this.cursors.slice(0);\n        const sortedCursors = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            sortedCursors.push({\n                index: i,\n                selection: cursors[i].modelState.selection,\n            });\n        }\n        sortedCursors.sort(compareBy(s => s.selection, Range.compareRangesUsingStarts));\n        for (let sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\n            const current = sortedCursors[sortedCursorIndex];\n            const next = sortedCursors[sortedCursorIndex + 1];\n            const currentSelection = current.selection;\n            const nextSelection = next.selection;\n            if (!this.context.cursorConfig.multiCursorMergeOverlapping) {\n                continue;\n            }\n            let shouldMergeCursors;\n            if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n                // Merge touching cursors if one of them is collapsed\n                shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\n            }\n            else {\n                // Merge only overlapping cursors (i.e. allow touching ranges)\n                shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\n            }\n            if (shouldMergeCursors) {\n                const winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\n                const looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\n                const looserIndex = sortedCursors[looserSortedCursorIndex].index;\n                const winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\n                const looserSelection = sortedCursors[looserSortedCursorIndex].selection;\n                const winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\n                if (!looserSelection.equalsSelection(winnerSelection)) {\n                    const resultingRange = looserSelection.plusRange(winnerSelection);\n                    const looserSelectionIsLTR = (looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn);\n                    const winnerSelectionIsLTR = (winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn);\n                    // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n                    let resultingSelectionIsLTR;\n                    if (looserIndex === this.lastAddedCursorIndex) {\n                        resultingSelectionIsLTR = looserSelectionIsLTR;\n                        this.lastAddedCursorIndex = winnerIndex;\n                    }\n                    else {\n                        // Winner takes it all\n                        resultingSelectionIsLTR = winnerSelectionIsLTR;\n                    }\n                    let resultingSelection;\n                    if (resultingSelectionIsLTR) {\n                        resultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\n                    }\n                    else {\n                        resultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\n                    }\n                    sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\n                    const resultingState = CursorState.fromModelSelection(resultingSelection);\n                    cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\n                }\n                for (const sortedCursor of sortedCursors) {\n                    if (sortedCursor.index > looserIndex) {\n                        sortedCursor.index--;\n                    }\n                }\n                cursors.splice(looserIndex, 1);\n                sortedCursors.splice(looserSortedCursorIndex, 1);\n                this._removeSecondaryCursor(looserIndex - 1);\n                sortedCursorIndex--;\n            }\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class CursorContext {\n    constructor(model, viewModel, coordinatesConverter, cursorConfig) {\n        this._cursorContextBrand = undefined;\n        this.model = model;\n        this.viewModel = viewModel;\n        this.coordinatesConverter = coordinatesConverter;\n        this.cursorConfig = cursorConfig;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorCollection } from './cursorCollection.js';\nimport { CursorState, EditOperationResult } from '../cursorCommon.js';\nimport { CursorContext } from './cursorContext.js';\nimport { DeleteOperations } from './cursorDeleteOperations.js';\nimport { CompositionOutcome, TypeOperations, TypeWithAutoClosingCommand } from './cursorTypeOperations.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { ModelInjectedTextChangedEvent } from '../textModelEvents.js';\nimport { ViewCursorStateChangedEvent, ViewRevealRangeRequestEvent } from '../viewEvents.js';\nimport { dispose, Disposable } from '../../../base/common/lifecycle.js';\nimport { CursorStateChangedEvent } from '../viewModelEventDispatcher.js';\nexport class CursorsController extends Disposable {\n    constructor(model, viewModel, coordinatesConverter, cursorConfig) {\n        super();\n        this._model = model;\n        this._knownModelVersionId = this._model.getVersionId();\n        this._viewModel = viewModel;\n        this._coordinatesConverter = coordinatesConverter;\n        this.context = new CursorContext(this._model, this._viewModel, this._coordinatesConverter, cursorConfig);\n        this._cursors = new CursorCollection(this.context);\n        this._hasFocus = false;\n        this._isHandling = false;\n        this._compositionState = null;\n        this._columnSelectData = null;\n        this._autoClosedActions = [];\n        this._prevEditOperationType = 0 /* EditOperationType.Other */;\n    }\n    dispose() {\n        this._cursors.dispose();\n        this._autoClosedActions = dispose(this._autoClosedActions);\n        super.dispose();\n    }\n    updateConfiguration(cursorConfig) {\n        this.context = new CursorContext(this._model, this._viewModel, this._coordinatesConverter, cursorConfig);\n        this._cursors.updateContext(this.context);\n    }\n    onLineMappingChanged(eventsCollector) {\n        if (this._knownModelVersionId !== this._model.getVersionId()) {\n            // There are model change events that I didn't yet receive.\n            //\n            // This can happen when editing the model, and the view model receives the change events first,\n            // and the view model emits line mapping changed events, all before the cursor gets a chance to\n            // recover from markers.\n            //\n            // The model change listener above will be called soon and we'll ensure a valid cursor state there.\n            return;\n        }\n        // Ensure valid state\n        this.setStates(eventsCollector, 'viewModel', 0 /* CursorChangeReason.NotSet */, this.getCursorStates());\n    }\n    setHasFocus(hasFocus) {\n        this._hasFocus = hasFocus;\n    }\n    _validateAutoClosedActions() {\n        if (this._autoClosedActions.length > 0) {\n            const selections = this._cursors.getSelections();\n            for (let i = 0; i < this._autoClosedActions.length; i++) {\n                const autoClosedAction = this._autoClosedActions[i];\n                if (!autoClosedAction.isValid(selections)) {\n                    autoClosedAction.dispose();\n                    this._autoClosedActions.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n    }\n    // ------ some getters/setters\n    getPrimaryCursorState() {\n        return this._cursors.getPrimaryCursor();\n    }\n    getLastAddedCursorIndex() {\n        return this._cursors.getLastAddedCursorIndex();\n    }\n    getCursorStates() {\n        return this._cursors.getAll();\n    }\n    setStates(eventsCollector, source, reason, states) {\n        let reachedMaxCursorCount = false;\n        const multiCursorLimit = this.context.cursorConfig.multiCursorLimit;\n        if (states !== null && states.length > multiCursorLimit) {\n            states = states.slice(0, multiCursorLimit);\n            reachedMaxCursorCount = true;\n        }\n        const oldState = CursorModelState.from(this._model, this);\n        this._cursors.setStates(states);\n        this._cursors.normalize();\n        this._columnSelectData = null;\n        this._validateAutoClosedActions();\n        return this._emitStateChangedIfNecessary(eventsCollector, source, reason, oldState, reachedMaxCursorCount);\n    }\n    setCursorColumnSelectData(columnSelectData) {\n        this._columnSelectData = columnSelectData;\n    }\n    revealPrimary(eventsCollector, source, minimalReveal, verticalType, revealHorizontal, scrollType) {\n        const viewPositions = this._cursors.getViewPositions();\n        let revealViewRange = null;\n        let revealViewSelections = null;\n        if (viewPositions.length > 1) {\n            revealViewSelections = this._cursors.getViewSelections();\n        }\n        else {\n            revealViewRange = Range.fromPositions(viewPositions[0], viewPositions[0]);\n        }\n        eventsCollector.emitViewEvent(new ViewRevealRangeRequestEvent(source, minimalReveal, revealViewRange, revealViewSelections, verticalType, revealHorizontal, scrollType));\n    }\n    saveState() {\n        const result = [];\n        const selections = this._cursors.getSelections();\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            result.push({\n                inSelectionMode: !selection.isEmpty(),\n                selectionStart: {\n                    lineNumber: selection.selectionStartLineNumber,\n                    column: selection.selectionStartColumn,\n                },\n                position: {\n                    lineNumber: selection.positionLineNumber,\n                    column: selection.positionColumn,\n                }\n            });\n        }\n        return result;\n    }\n    restoreState(eventsCollector, states) {\n        const desiredSelections = [];\n        for (let i = 0, len = states.length; i < len; i++) {\n            const state = states[i];\n            let positionLineNumber = 1;\n            let positionColumn = 1;\n            // Avoid missing properties on the literal\n            if (state.position && state.position.lineNumber) {\n                positionLineNumber = state.position.lineNumber;\n            }\n            if (state.position && state.position.column) {\n                positionColumn = state.position.column;\n            }\n            let selectionStartLineNumber = positionLineNumber;\n            let selectionStartColumn = positionColumn;\n            // Avoid missing properties on the literal\n            if (state.selectionStart && state.selectionStart.lineNumber) {\n                selectionStartLineNumber = state.selectionStart.lineNumber;\n            }\n            if (state.selectionStart && state.selectionStart.column) {\n                selectionStartColumn = state.selectionStart.column;\n            }\n            desiredSelections.push({\n                selectionStartLineNumber: selectionStartLineNumber,\n                selectionStartColumn: selectionStartColumn,\n                positionLineNumber: positionLineNumber,\n                positionColumn: positionColumn\n            });\n        }\n        this.setStates(eventsCollector, 'restoreState', 0 /* CursorChangeReason.NotSet */, CursorState.fromModelSelections(desiredSelections));\n        this.revealPrimary(eventsCollector, 'restoreState', false, 0 /* VerticalRevealType.Simple */, true, 1 /* editorCommon.ScrollType.Immediate */);\n    }\n    onModelContentChanged(eventsCollector, event) {\n        if (event instanceof ModelInjectedTextChangedEvent) {\n            // If injected texts change, the view positions of all cursors need to be updated.\n            if (this._isHandling) {\n                // The view positions will be updated when handling finishes\n                return;\n            }\n            // setStates might remove markers, which could trigger a decoration change.\n            // If there are injected text decorations for that line, `onModelContentChanged` is emitted again\n            // and an endless recursion happens.\n            // _isHandling prevents that.\n            this._isHandling = true;\n            try {\n                this.setStates(eventsCollector, 'modelChange', 0 /* CursorChangeReason.NotSet */, this.getCursorStates());\n            }\n            finally {\n                this._isHandling = false;\n            }\n        }\n        else {\n            const e = event.rawContentChangedEvent;\n            this._knownModelVersionId = e.versionId;\n            if (this._isHandling) {\n                return;\n            }\n            const hadFlushEvent = e.containsEvent(1 /* RawContentChangedType.Flush */);\n            this._prevEditOperationType = 0 /* EditOperationType.Other */;\n            if (hadFlushEvent) {\n                // a model.setValue() was called\n                this._cursors.dispose();\n                this._cursors = new CursorCollection(this.context);\n                this._validateAutoClosedActions();\n                this._emitStateChangedIfNecessary(eventsCollector, 'model', 1 /* CursorChangeReason.ContentFlush */, null, false);\n            }\n            else {\n                if (this._hasFocus && e.resultingSelection && e.resultingSelection.length > 0) {\n                    const cursorState = CursorState.fromModelSelections(e.resultingSelection);\n                    if (this.setStates(eventsCollector, 'modelChange', e.isUndoing ? 5 /* CursorChangeReason.Undo */ : e.isRedoing ? 6 /* CursorChangeReason.Redo */ : 2 /* CursorChangeReason.RecoverFromMarkers */, cursorState)) {\n                        this.revealPrimary(eventsCollector, 'modelChange', false, 0 /* VerticalRevealType.Simple */, true, 0 /* editorCommon.ScrollType.Smooth */);\n                    }\n                }\n                else {\n                    const selectionsFromMarkers = this._cursors.readSelectionFromMarkers();\n                    this.setStates(eventsCollector, 'modelChange', 2 /* CursorChangeReason.RecoverFromMarkers */, CursorState.fromModelSelections(selectionsFromMarkers));\n                }\n            }\n        }\n    }\n    getSelection() {\n        return this._cursors.getPrimaryCursor().modelState.selection;\n    }\n    getTopMostViewPosition() {\n        return this._cursors.getTopMostViewPosition();\n    }\n    getBottomMostViewPosition() {\n        return this._cursors.getBottomMostViewPosition();\n    }\n    getCursorColumnSelectData() {\n        if (this._columnSelectData) {\n            return this._columnSelectData;\n        }\n        const primaryCursor = this._cursors.getPrimaryCursor();\n        const viewSelectionStart = primaryCursor.viewState.selectionStart.getStartPosition();\n        const viewPosition = primaryCursor.viewState.position;\n        return {\n            isReal: false,\n            fromViewLineNumber: viewSelectionStart.lineNumber,\n            fromViewVisualColumn: this.context.cursorConfig.visibleColumnFromColumn(this._viewModel, viewSelectionStart),\n            toViewLineNumber: viewPosition.lineNumber,\n            toViewVisualColumn: this.context.cursorConfig.visibleColumnFromColumn(this._viewModel, viewPosition),\n        };\n    }\n    getSelections() {\n        return this._cursors.getSelections();\n    }\n    setSelections(eventsCollector, source, selections, reason) {\n        this.setStates(eventsCollector, source, reason, CursorState.fromModelSelections(selections));\n    }\n    getPrevEditOperationType() {\n        return this._prevEditOperationType;\n    }\n    setPrevEditOperationType(type) {\n        this._prevEditOperationType = type;\n    }\n    // ------ auxiliary handling logic\n    _pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges) {\n        const autoClosedCharactersDeltaDecorations = [];\n        const autoClosedEnclosingDeltaDecorations = [];\n        for (let i = 0, len = autoClosedCharactersRanges.length; i < len; i++) {\n            autoClosedCharactersDeltaDecorations.push({\n                range: autoClosedCharactersRanges[i],\n                options: {\n                    description: 'auto-closed-character',\n                    inlineClassName: 'auto-closed-character',\n                    stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */\n                }\n            });\n            autoClosedEnclosingDeltaDecorations.push({\n                range: autoClosedEnclosingRanges[i],\n                options: {\n                    description: 'auto-closed-enclosing',\n                    stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */\n                }\n            });\n        }\n        const autoClosedCharactersDecorations = this._model.deltaDecorations([], autoClosedCharactersDeltaDecorations);\n        const autoClosedEnclosingDecorations = this._model.deltaDecorations([], autoClosedEnclosingDeltaDecorations);\n        this._autoClosedActions.push(new AutoClosedAction(this._model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations));\n    }\n    _executeEditOperation(opResult) {\n        if (!opResult) {\n            // Nothing to execute\n            return;\n        }\n        if (opResult.shouldPushStackElementBefore) {\n            this._model.pushStackElement();\n        }\n        const result = CommandExecutor.executeCommands(this._model, this._cursors.getSelections(), opResult.commands);\n        if (result) {\n            // The commands were applied correctly\n            this._interpretCommandResult(result);\n            // Check for auto-closing closed characters\n            const autoClosedCharactersRanges = [];\n            const autoClosedEnclosingRanges = [];\n            for (let i = 0; i < opResult.commands.length; i++) {\n                const command = opResult.commands[i];\n                if (command instanceof TypeWithAutoClosingCommand && command.enclosingRange && command.closeCharacterRange) {\n                    autoClosedCharactersRanges.push(command.closeCharacterRange);\n                    autoClosedEnclosingRanges.push(command.enclosingRange);\n                }\n            }\n            if (autoClosedCharactersRanges.length > 0) {\n                this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\n            }\n            this._prevEditOperationType = opResult.type;\n        }\n        if (opResult.shouldPushStackElementAfter) {\n            this._model.pushStackElement();\n        }\n    }\n    _interpretCommandResult(cursorState) {\n        if (!cursorState || cursorState.length === 0) {\n            cursorState = this._cursors.readSelectionFromMarkers();\n        }\n        this._columnSelectData = null;\n        this._cursors.setSelections(cursorState);\n        this._cursors.normalize();\n    }\n    // -----------------------------------------------------------------------------------------------------------\n    // ----- emitting events\n    _emitStateChangedIfNecessary(eventsCollector, source, reason, oldState, reachedMaxCursorCount) {\n        const newState = CursorModelState.from(this._model, this);\n        if (newState.equals(oldState)) {\n            return false;\n        }\n        const selections = this._cursors.getSelections();\n        const viewSelections = this._cursors.getViewSelections();\n        // Let the view get the event first.\n        eventsCollector.emitViewEvent(new ViewCursorStateChangedEvent(viewSelections, selections, reason));\n        // Only after the view has been notified, let the rest of the world know...\n        if (!oldState\n            || oldState.cursorState.length !== newState.cursorState.length\n            || newState.cursorState.some((newCursorState, i) => !newCursorState.modelState.equals(oldState.cursorState[i].modelState))) {\n            const oldSelections = oldState ? oldState.cursorState.map(s => s.modelState.selection) : null;\n            const oldModelVersionId = oldState ? oldState.modelVersionId : 0;\n            eventsCollector.emitOutgoingEvent(new CursorStateChangedEvent(oldSelections, selections, oldModelVersionId, newState.modelVersionId, source || 'keyboard', reason, reachedMaxCursorCount));\n        }\n        return true;\n    }\n    // -----------------------------------------------------------------------------------------------------------\n    // ----- handlers beyond this point\n    _findAutoClosingPairs(edits) {\n        if (!edits.length) {\n            return null;\n        }\n        const indices = [];\n        for (let i = 0, len = edits.length; i < len; i++) {\n            const edit = edits[i];\n            if (!edit.text || edit.text.indexOf('\\n') >= 0) {\n                return null;\n            }\n            const m = edit.text.match(/([)\\]}>'\"`])([^)\\]}>'\"`]*)$/);\n            if (!m) {\n                return null;\n            }\n            const closeChar = m[1];\n            const autoClosingPairsCandidates = this.context.cursorConfig.autoClosingPairs.autoClosingPairsCloseSingleChar.get(closeChar);\n            if (!autoClosingPairsCandidates || autoClosingPairsCandidates.length !== 1) {\n                return null;\n            }\n            const openChar = autoClosingPairsCandidates[0].open;\n            const closeCharIndex = edit.text.length - m[2].length - 1;\n            const openCharIndex = edit.text.lastIndexOf(openChar, closeCharIndex - 1);\n            if (openCharIndex === -1) {\n                return null;\n            }\n            indices.push([openCharIndex, closeCharIndex]);\n        }\n        return indices;\n    }\n    executeEdits(eventsCollector, source, edits, cursorStateComputer) {\n        let autoClosingIndices = null;\n        if (source === 'snippet') {\n            autoClosingIndices = this._findAutoClosingPairs(edits);\n        }\n        if (autoClosingIndices) {\n            edits[0]._isTracked = true;\n        }\n        const autoClosedCharactersRanges = [];\n        const autoClosedEnclosingRanges = [];\n        const selections = this._model.pushEditOperations(this.getSelections(), edits, (undoEdits) => {\n            if (autoClosingIndices) {\n                for (let i = 0, len = autoClosingIndices.length; i < len; i++) {\n                    const [openCharInnerIndex, closeCharInnerIndex] = autoClosingIndices[i];\n                    const undoEdit = undoEdits[i];\n                    const lineNumber = undoEdit.range.startLineNumber;\n                    const openCharIndex = undoEdit.range.startColumn - 1 + openCharInnerIndex;\n                    const closeCharIndex = undoEdit.range.startColumn - 1 + closeCharInnerIndex;\n                    autoClosedCharactersRanges.push(new Range(lineNumber, closeCharIndex + 1, lineNumber, closeCharIndex + 2));\n                    autoClosedEnclosingRanges.push(new Range(lineNumber, openCharIndex + 1, lineNumber, closeCharIndex + 2));\n                }\n            }\n            const selections = cursorStateComputer(undoEdits);\n            if (selections) {\n                // Don't recover the selection from markers because\n                // we know what it should be.\n                this._isHandling = true;\n            }\n            return selections;\n        });\n        if (selections) {\n            this._isHandling = false;\n            this.setSelections(eventsCollector, source, selections, 0 /* CursorChangeReason.NotSet */);\n        }\n        if (autoClosedCharactersRanges.length > 0) {\n            this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\n        }\n    }\n    _executeEdit(callback, eventsCollector, source, cursorChangeReason = 0 /* CursorChangeReason.NotSet */) {\n        if (this.context.cursorConfig.readOnly) {\n            // we cannot edit when read only...\n            return;\n        }\n        const oldState = CursorModelState.from(this._model, this);\n        this._cursors.stopTrackingSelections();\n        this._isHandling = true;\n        try {\n            this._cursors.ensureValidState();\n            callback();\n        }\n        catch (err) {\n            onUnexpectedError(err);\n        }\n        this._isHandling = false;\n        this._cursors.startTrackingSelections();\n        this._validateAutoClosedActions();\n        if (this._emitStateChangedIfNecessary(eventsCollector, source, cursorChangeReason, oldState, false)) {\n            this.revealPrimary(eventsCollector, source, false, 0 /* VerticalRevealType.Simple */, true, 0 /* editorCommon.ScrollType.Smooth */);\n        }\n    }\n    getAutoClosedCharacters() {\n        return AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions);\n    }\n    startComposition(eventsCollector) {\n        this._compositionState = new CompositionState(this._model, this.getSelections());\n    }\n    endComposition(eventsCollector, source) {\n        const compositionOutcome = this._compositionState ? this._compositionState.deduceOutcome(this._model, this.getSelections()) : null;\n        this._compositionState = null;\n        this._executeEdit(() => {\n            if (source === 'keyboard') {\n                // composition finishes, let's check if we need to auto complete if necessary.\n                this._executeEditOperation(TypeOperations.compositionEndWithInterceptors(this._prevEditOperationType, this.context.cursorConfig, this._model, compositionOutcome, this.getSelections(), this.getAutoClosedCharacters()));\n            }\n        }, eventsCollector, source);\n    }\n    type(eventsCollector, text, source) {\n        this._executeEdit(() => {\n            if (source === 'keyboard') {\n                // If this event is coming straight from the keyboard, look for electric characters and enter\n                const len = text.length;\n                let offset = 0;\n                while (offset < len) {\n                    const charLength = strings.nextCharLength(text, offset);\n                    const chr = text.substr(offset, charLength);\n                    // Here we must interpret each typed character individually\n                    this._executeEditOperation(TypeOperations.typeWithInterceptors(!!this._compositionState, this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), this.getAutoClosedCharacters(), chr));\n                    offset += charLength;\n                }\n            }\n            else {\n                this._executeEditOperation(TypeOperations.typeWithoutInterceptors(this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), text));\n            }\n        }, eventsCollector, source);\n    }\n    compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source) {\n        if (text.length === 0 && replacePrevCharCnt === 0 && replaceNextCharCnt === 0) {\n            // this edit is a no-op\n            if (positionDelta !== 0) {\n                // but it still wants to move the cursor\n                const newSelections = this.getSelections().map(selection => {\n                    const position = selection.getPosition();\n                    return new Selection(position.lineNumber, position.column + positionDelta, position.lineNumber, position.column + positionDelta);\n                });\n                this.setSelections(eventsCollector, source, newSelections, 0 /* CursorChangeReason.NotSet */);\n            }\n            return;\n        }\n        this._executeEdit(() => {\n            this._executeEditOperation(TypeOperations.compositionType(this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), text, replacePrevCharCnt, replaceNextCharCnt, positionDelta));\n        }, eventsCollector, source);\n    }\n    paste(eventsCollector, text, pasteOnNewLine, multicursorText, source) {\n        this._executeEdit(() => {\n            this._executeEditOperation(TypeOperations.paste(this.context.cursorConfig, this._model, this.getSelections(), text, pasteOnNewLine, multicursorText || []));\n        }, eventsCollector, source, 4 /* CursorChangeReason.Paste */);\n    }\n    cut(eventsCollector, source) {\n        this._executeEdit(() => {\n            this._executeEditOperation(DeleteOperations.cut(this.context.cursorConfig, this._model, this.getSelections()));\n        }, eventsCollector, source);\n    }\n    executeCommand(eventsCollector, command, source) {\n        this._executeEdit(() => {\n            this._cursors.killSecondaryCursors();\n            this._executeEditOperation(new EditOperationResult(0 /* EditOperationType.Other */, [command], {\n                shouldPushStackElementBefore: false,\n                shouldPushStackElementAfter: false\n            }));\n        }, eventsCollector, source);\n    }\n    executeCommands(eventsCollector, commands, source) {\n        this._executeEdit(() => {\n            this._executeEditOperation(new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n                shouldPushStackElementBefore: false,\n                shouldPushStackElementAfter: false\n            }));\n        }, eventsCollector, source);\n    }\n}\n/**\n * A snapshot of the cursor and the model state\n */\nclass CursorModelState {\n    static from(model, cursor) {\n        return new CursorModelState(model.getVersionId(), cursor.getCursorStates());\n    }\n    constructor(modelVersionId, cursorState) {\n        this.modelVersionId = modelVersionId;\n        this.cursorState = cursorState;\n    }\n    equals(other) {\n        if (!other) {\n            return false;\n        }\n        if (this.modelVersionId !== other.modelVersionId) {\n            return false;\n        }\n        if (this.cursorState.length !== other.cursorState.length) {\n            return false;\n        }\n        for (let i = 0, len = this.cursorState.length; i < len; i++) {\n            if (!this.cursorState[i].equals(other.cursorState[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nclass AutoClosedAction {\n    static getAllAutoClosedCharacters(autoClosedActions) {\n        let autoClosedCharacters = [];\n        for (const autoClosedAction of autoClosedActions) {\n            autoClosedCharacters = autoClosedCharacters.concat(autoClosedAction.getAutoClosedCharactersRanges());\n        }\n        return autoClosedCharacters;\n    }\n    constructor(model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations) {\n        this._model = model;\n        this._autoClosedCharactersDecorations = autoClosedCharactersDecorations;\n        this._autoClosedEnclosingDecorations = autoClosedEnclosingDecorations;\n    }\n    dispose() {\n        this._autoClosedCharactersDecorations = this._model.deltaDecorations(this._autoClosedCharactersDecorations, []);\n        this._autoClosedEnclosingDecorations = this._model.deltaDecorations(this._autoClosedEnclosingDecorations, []);\n    }\n    getAutoClosedCharactersRanges() {\n        const result = [];\n        for (let i = 0; i < this._autoClosedCharactersDecorations.length; i++) {\n            const decorationRange = this._model.getDecorationRange(this._autoClosedCharactersDecorations[i]);\n            if (decorationRange) {\n                result.push(decorationRange);\n            }\n        }\n        return result;\n    }\n    isValid(selections) {\n        const enclosingRanges = [];\n        for (let i = 0; i < this._autoClosedEnclosingDecorations.length; i++) {\n            const decorationRange = this._model.getDecorationRange(this._autoClosedEnclosingDecorations[i]);\n            if (decorationRange) {\n                enclosingRanges.push(decorationRange);\n                if (decorationRange.startLineNumber !== decorationRange.endLineNumber) {\n                    // Stop tracking if the range becomes multiline...\n                    return false;\n                }\n            }\n        }\n        enclosingRanges.sort(Range.compareRangesUsingStarts);\n        selections.sort(Range.compareRangesUsingStarts);\n        for (let i = 0; i < selections.length; i++) {\n            if (i >= enclosingRanges.length) {\n                return false;\n            }\n            if (!enclosingRanges[i].strictContainsRange(selections[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nclass CommandExecutor {\n    static executeCommands(model, selectionsBefore, commands) {\n        const ctx = {\n            model: model,\n            selectionsBefore: selectionsBefore,\n            trackedRanges: [],\n            trackedRangesDirection: []\n        };\n        const result = this._innerExecuteCommands(ctx, commands);\n        for (let i = 0, len = ctx.trackedRanges.length; i < len; i++) {\n            ctx.model._setTrackedRange(ctx.trackedRanges[i], null, 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */);\n        }\n        return result;\n    }\n    static _innerExecuteCommands(ctx, commands) {\n        if (this._arrayIsEmpty(commands)) {\n            return null;\n        }\n        const commandsData = this._getEditOperations(ctx, commands);\n        if (commandsData.operations.length === 0) {\n            return null;\n        }\n        const rawOperations = commandsData.operations;\n        const loserCursorsMap = this._getLoserCursorMap(rawOperations);\n        if (loserCursorsMap.hasOwnProperty('0')) {\n            // These commands are very messed up\n            console.warn('Ignoring commands');\n            return null;\n        }\n        // Remove operations belonging to losing cursors\n        const filteredOperations = [];\n        for (let i = 0, len = rawOperations.length; i < len; i++) {\n            if (!loserCursorsMap.hasOwnProperty(rawOperations[i].identifier.major.toString())) {\n                filteredOperations.push(rawOperations[i]);\n            }\n        }\n        // TODO@Alex: find a better way to do this.\n        // give the hint that edit operations are tracked to the model\n        if (commandsData.hadTrackedEditOperation && filteredOperations.length > 0) {\n            filteredOperations[0]._isTracked = true;\n        }\n        let selectionsAfter = ctx.model.pushEditOperations(ctx.selectionsBefore, filteredOperations, (inverseEditOperations) => {\n            const groupedInverseEditOperations = [];\n            for (let i = 0; i < ctx.selectionsBefore.length; i++) {\n                groupedInverseEditOperations[i] = [];\n            }\n            for (const op of inverseEditOperations) {\n                if (!op.identifier) {\n                    // perhaps auto whitespace trim edits\n                    continue;\n                }\n                groupedInverseEditOperations[op.identifier.major].push(op);\n            }\n            const minorBasedSorter = (a, b) => {\n                return a.identifier.minor - b.identifier.minor;\n            };\n            const cursorSelections = [];\n            for (let i = 0; i < ctx.selectionsBefore.length; i++) {\n                if (groupedInverseEditOperations[i].length > 0) {\n                    groupedInverseEditOperations[i].sort(minorBasedSorter);\n                    cursorSelections[i] = commands[i].computeCursorState(ctx.model, {\n                        getInverseEditOperations: () => {\n                            return groupedInverseEditOperations[i];\n                        },\n                        getTrackedSelection: (id) => {\n                            const idx = parseInt(id, 10);\n                            const range = ctx.model._getTrackedRange(ctx.trackedRanges[idx]);\n                            if (ctx.trackedRangesDirection[idx] === 0 /* SelectionDirection.LTR */) {\n                                return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n                            }\n                            return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n                        }\n                    });\n                }\n                else {\n                    cursorSelections[i] = ctx.selectionsBefore[i];\n                }\n            }\n            return cursorSelections;\n        });\n        if (!selectionsAfter) {\n            selectionsAfter = ctx.selectionsBefore;\n        }\n        // Extract losing cursors\n        const losingCursors = [];\n        for (const losingCursorIndex in loserCursorsMap) {\n            if (loserCursorsMap.hasOwnProperty(losingCursorIndex)) {\n                losingCursors.push(parseInt(losingCursorIndex, 10));\n            }\n        }\n        // Sort losing cursors descending\n        losingCursors.sort((a, b) => {\n            return b - a;\n        });\n        // Remove losing cursors\n        for (const losingCursor of losingCursors) {\n            selectionsAfter.splice(losingCursor, 1);\n        }\n        return selectionsAfter;\n    }\n    static _arrayIsEmpty(commands) {\n        for (let i = 0, len = commands.length; i < len; i++) {\n            if (commands[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static _getEditOperations(ctx, commands) {\n        let operations = [];\n        let hadTrackedEditOperation = false;\n        for (let i = 0, len = commands.length; i < len; i++) {\n            const command = commands[i];\n            if (command) {\n                const r = this._getEditOperationsFromCommand(ctx, i, command);\n                operations = operations.concat(r.operations);\n                hadTrackedEditOperation = hadTrackedEditOperation || r.hadTrackedEditOperation;\n            }\n        }\n        return {\n            operations: operations,\n            hadTrackedEditOperation: hadTrackedEditOperation\n        };\n    }\n    static _getEditOperationsFromCommand(ctx, majorIdentifier, command) {\n        // This method acts as a transaction, if the command fails\n        // everything it has done is ignored\n        const operations = [];\n        let operationMinor = 0;\n        const addEditOperation = (range, text, forceMoveMarkers = false) => {\n            if (Range.isEmpty(range) && text === '') {\n                // This command wants to add a no-op => no thank you\n                return;\n            }\n            operations.push({\n                identifier: {\n                    major: majorIdentifier,\n                    minor: operationMinor++\n                },\n                range: range,\n                text: text,\n                forceMoveMarkers: forceMoveMarkers,\n                isAutoWhitespaceEdit: command.insertsAutoWhitespace\n            });\n        };\n        let hadTrackedEditOperation = false;\n        const addTrackedEditOperation = (selection, text, forceMoveMarkers) => {\n            hadTrackedEditOperation = true;\n            addEditOperation(selection, text, forceMoveMarkers);\n        };\n        const trackSelection = (_selection, trackPreviousOnEmpty) => {\n            const selection = Selection.liftSelection(_selection);\n            let stickiness;\n            if (selection.isEmpty()) {\n                if (typeof trackPreviousOnEmpty === 'boolean') {\n                    if (trackPreviousOnEmpty) {\n                        stickiness = 2 /* TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */;\n                    }\n                    else {\n                        stickiness = 3 /* TrackedRangeStickiness.GrowsOnlyWhenTypingAfter */;\n                    }\n                }\n                else {\n                    // Try to lock it with surrounding text\n                    const maxLineColumn = ctx.model.getLineMaxColumn(selection.startLineNumber);\n                    if (selection.startColumn === maxLineColumn) {\n                        stickiness = 2 /* TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */;\n                    }\n                    else {\n                        stickiness = 3 /* TrackedRangeStickiness.GrowsOnlyWhenTypingAfter */;\n                    }\n                }\n            }\n            else {\n                stickiness = 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */;\n            }\n            const l = ctx.trackedRanges.length;\n            const id = ctx.model._setTrackedRange(null, selection, stickiness);\n            ctx.trackedRanges[l] = id;\n            ctx.trackedRangesDirection[l] = selection.getDirection();\n            return l.toString();\n        };\n        const editOperationBuilder = {\n            addEditOperation: addEditOperation,\n            addTrackedEditOperation: addTrackedEditOperation,\n            trackSelection: trackSelection\n        };\n        try {\n            command.getEditOperations(ctx.model, editOperationBuilder);\n        }\n        catch (e) {\n            // TODO@Alex use notification service if this should be user facing\n            // e.friendlyMessage = nls.localize('corrupt.commands', \"Unexpected exception while executing command.\");\n            onUnexpectedError(e);\n            return {\n                operations: [],\n                hadTrackedEditOperation: false\n            };\n        }\n        return {\n            operations: operations,\n            hadTrackedEditOperation: hadTrackedEditOperation\n        };\n    }\n    static _getLoserCursorMap(operations) {\n        // This is destructive on the array\n        operations = operations.slice(0);\n        // Sort operations with last one first\n        operations.sort((a, b) => {\n            // Note the minus!\n            return -(Range.compareRangesUsingEnds(a.range, b.range));\n        });\n        // Operations can not overlap!\n        const loserCursorsMap = {};\n        for (let i = 1; i < operations.length; i++) {\n            const previousOp = operations[i - 1];\n            const currentOp = operations[i];\n            if (Range.getStartPosition(previousOp.range).isBefore(Range.getEndPosition(currentOp.range))) {\n                let loserMajor;\n                if (previousOp.identifier.major > currentOp.identifier.major) {\n                    // previousOp loses the battle\n                    loserMajor = previousOp.identifier.major;\n                }\n                else {\n                    loserMajor = currentOp.identifier.major;\n                }\n                loserCursorsMap[loserMajor.toString()] = true;\n                for (let j = 0; j < operations.length; j++) {\n                    if (operations[j].identifier.major === loserMajor) {\n                        operations.splice(j, 1);\n                        if (j < i) {\n                            i--;\n                        }\n                        j--;\n                    }\n                }\n                if (i > 0) {\n                    i--;\n                }\n            }\n        }\n        return loserCursorsMap;\n    }\n}\nclass CompositionLineState {\n    constructor(text, startSelection, endSelection) {\n        this.text = text;\n        this.startSelection = startSelection;\n        this.endSelection = endSelection;\n    }\n}\nclass CompositionState {\n    static _capture(textModel, selections) {\n        const result = [];\n        for (const selection of selections) {\n            if (selection.startLineNumber !== selection.endLineNumber) {\n                return null;\n            }\n            result.push(new CompositionLineState(textModel.getLineContent(selection.startLineNumber), selection.startColumn - 1, selection.endColumn - 1));\n        }\n        return result;\n    }\n    constructor(textModel, selections) {\n        this._original = CompositionState._capture(textModel, selections);\n    }\n    /**\n     * Returns the inserted text during this composition.\n     * If the composition resulted in existing text being changed (i.e. not a pure insertion) it returns null.\n     */\n    deduceOutcome(textModel, selections) {\n        if (!this._original) {\n            return null;\n        }\n        const current = CompositionState._capture(textModel, selections);\n        if (!current) {\n            return null;\n        }\n        if (this._original.length !== current.length) {\n            return null;\n        }\n        const result = [];\n        for (let i = 0, len = this._original.length; i < len; i++) {\n            result.push(CompositionState._deduceOutcome(this._original[i], current[i]));\n        }\n        return result;\n    }\n    static _deduceOutcome(original, current) {\n        const commonPrefix = Math.min(original.startSelection, current.startSelection, strings.commonPrefixLength(original.text, current.text));\n        const commonSuffix = Math.min(original.text.length - original.endSelection, current.text.length - current.endSelection, strings.commonSuffixLength(original.text, current.text));\n        const deletedText = original.text.substring(commonPrefix, original.text.length - commonSuffix);\n        const insertedText = current.text.substring(commonPrefix, current.text.length - commonSuffix);\n        return new CompositionOutcome(deletedText, original.startSelection - commonPrefix, original.endSelection - commonPrefix, insertedText, current.startSelection - commonPrefix, current.endSelection - commonPrefix);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns } from '../core/cursorColumns.js';\nexport class AtomicTabMoveOperations {\n    /**\n     * Get the visible column at the position. If we get to a non-whitespace character first\n     * or past the end of string then return -1.\n     *\n     * **Note** `position` and the return value are 0-based.\n     */\n    static whitespaceVisibleColumn(lineContent, position, tabSize) {\n        const lineLength = lineContent.length;\n        let visibleColumn = 0;\n        let prevTabStopPosition = -1;\n        let prevTabStopVisibleColumn = -1;\n        for (let i = 0; i < lineLength; i++) {\n            if (i === position) {\n                return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n            }\n            if (visibleColumn % tabSize === 0) {\n                prevTabStopPosition = i;\n                prevTabStopVisibleColumn = visibleColumn;\n            }\n            const chCode = lineContent.charCodeAt(i);\n            switch (chCode) {\n                case 32 /* CharCode.Space */:\n                    visibleColumn += 1;\n                    break;\n                case 9 /* CharCode.Tab */:\n                    // Skip to the next multiple of tabSize.\n                    visibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n                    break;\n                default:\n                    return [-1, -1, -1];\n            }\n        }\n        if (position === lineLength) {\n            return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n        }\n        return [-1, -1, -1];\n    }\n    /**\n     * Return the position that should result from a move left, right or to the\n     * nearest tab, if atomic tabs are enabled. Left and right are used for the\n     * arrow key movements, nearest is used for mouse selection. It returns\n     * -1 if atomic tabs are not relevant and you should fall back to normal\n     * behaviour.\n     *\n     * **Note**: `position` and the return value are 0-based.\n     */\n    static atomicPosition(lineContent, position, tabSize, direction) {\n        const lineLength = lineContent.length;\n        // Get the 0-based visible column corresponding to the position, or return\n        // -1 if it is not in the initial whitespace.\n        const [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn] = AtomicTabMoveOperations.whitespaceVisibleColumn(lineContent, position, tabSize);\n        if (visibleColumn === -1) {\n            return -1;\n        }\n        // Is the output left or right of the current position. The case for nearest\n        // where it is the same as the current position is handled in the switch.\n        let left;\n        switch (direction) {\n            case 0 /* Direction.Left */:\n                left = true;\n                break;\n            case 1 /* Direction.Right */:\n                left = false;\n                break;\n            case 2 /* Direction.Nearest */:\n                // The code below assumes the output position is either left or right\n                // of the input position. If it is the same, return immediately.\n                if (visibleColumn % tabSize === 0) {\n                    return position;\n                }\n                // Go to the nearest indentation.\n                left = visibleColumn % tabSize <= (tabSize / 2);\n                break;\n        }\n        // If going left, we can just use the info about the last tab stop position and\n        // last tab stop visible column that we computed in the first walk over the whitespace.\n        if (left) {\n            if (prevTabStopPosition === -1) {\n                return -1;\n            }\n            // If the direction is left, we need to keep scanning right to ensure\n            // that targetVisibleColumn + tabSize is before non-whitespace.\n            // This is so that when we press left at the end of a partial\n            // indentation it only goes one character. For example '      foo' with\n            // tabSize 4, should jump from position 6 to position 5, not 4.\n            let currentVisibleColumn = prevTabStopVisibleColumn;\n            for (let i = prevTabStopPosition; i < lineLength; ++i) {\n                if (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n                    // It is a full indentation.\n                    return prevTabStopPosition;\n                }\n                const chCode = lineContent.charCodeAt(i);\n                switch (chCode) {\n                    case 32 /* CharCode.Space */:\n                        currentVisibleColumn += 1;\n                        break;\n                    case 9 /* CharCode.Tab */:\n                        currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n                        break;\n                    default:\n                        return -1;\n                }\n            }\n            if (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n                return prevTabStopPosition;\n            }\n            // It must have been a partial indentation.\n            return -1;\n        }\n        // We are going right.\n        const targetVisibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n        // We can just continue from where whitespaceVisibleColumn got to.\n        let currentVisibleColumn = visibleColumn;\n        for (let i = position; i < lineLength; i++) {\n            if (currentVisibleColumn === targetVisibleColumn) {\n                return i;\n            }\n            const chCode = lineContent.charCodeAt(i);\n            switch (chCode) {\n                case 32 /* CharCode.Space */:\n                    currentVisibleColumn += 1;\n                    break;\n                case 9 /* CharCode.Tab */:\n                    currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n                    break;\n                default:\n                    return -1;\n            }\n        }\n        // This condition handles when the target column is at the end of the line.\n        if (currentVisibleColumn === targetVisibleColumn) {\n            return lineLength;\n        }\n        return -1;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { SingleCursorState } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class ColumnSelection {\n    static columnSelect(config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\n        const lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n        const reversed = (fromLineNumber > toLineNumber);\n        const isRTL = (fromVisibleColumn > toVisibleColumn);\n        const isLTR = (fromVisibleColumn < toVisibleColumn);\n        const result = [];\n        // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n        for (let i = 0; i < lineCount; i++) {\n            const lineNumber = fromLineNumber + (reversed ? -i : i);\n            const startColumn = config.columnFromVisibleColumn(model, lineNumber, fromVisibleColumn);\n            const endColumn = config.columnFromVisibleColumn(model, lineNumber, toVisibleColumn);\n            const visibleStartColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, startColumn));\n            const visibleEndColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, endColumn));\n            // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n            if (isLTR) {\n                if (visibleStartColumn > toVisibleColumn) {\n                    continue;\n                }\n                if (visibleEndColumn < fromVisibleColumn) {\n                    continue;\n                }\n            }\n            if (isRTL) {\n                if (visibleEndColumn > fromVisibleColumn) {\n                    continue;\n                }\n                if (visibleStartColumn < toVisibleColumn) {\n                    continue;\n                }\n            }\n            result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, endColumn), 0));\n        }\n        if (result.length === 0) {\n            // We are after all the lines, so add cursor at the end of each line\n            for (let i = 0; i < lineCount; i++) {\n                const lineNumber = fromLineNumber + (reversed ? -i : i);\n                const maxColumn = model.getLineMaxColumn(lineNumber);\n                result.push(new SingleCursorState(new Range(lineNumber, maxColumn, lineNumber, maxColumn), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, maxColumn), 0));\n            }\n        }\n        return {\n            viewStates: result,\n            reversed: reversed,\n            fromLineNumber: fromLineNumber,\n            fromVisualColumn: fromVisibleColumn,\n            toLineNumber: toLineNumber,\n            toVisualColumn: toVisibleColumn\n        };\n    }\n    static columnSelectLeft(config, model, prevColumnSelectData) {\n        let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n        if (toViewVisualColumn > 0) {\n            toViewVisualColumn--;\n        }\n        return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n    }\n    static columnSelectRight(config, model, prevColumnSelectData) {\n        let maxVisualViewColumn = 0;\n        const minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n        const maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n        for (let lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n            const lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n            const lineMaxVisualViewColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, lineMaxViewColumn));\n            maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n        }\n        let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n        if (toViewVisualColumn < maxVisualViewColumn) {\n            toViewVisualColumn++;\n        }\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n    }\n    static columnSelectUp(config, model, prevColumnSelectData, isPaged) {\n        const linesCount = isPaged ? config.pageSize : 1;\n        const toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n    }\n    static columnSelectDown(config, model, prevColumnSelectData, isPaged) {\n        const linesCount = isPaged ? config.pageSize : 1;\n        const toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { ReplaceCommand } from '../commands/replaceCommand.js';\nimport { EditOperationResult, isQuote } from '../cursorCommon.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { Range } from '../core/range.js';\nimport { Position } from '../core/position.js';\nexport class DeleteOperations {\n    static deleteRight(prevEditOperationType, config, model, selections) {\n        const commands = [];\n        let shouldPushStackElementBefore = (prevEditOperationType !== 3 /* EditOperationType.DeletingRight */);\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            let deleteSelection = selection;\n            if (deleteSelection.isEmpty()) {\n                const position = selection.getPosition();\n                const rightOfPosition = MoveOperations.right(config, model, position);\n                deleteSelection = new Range(rightOfPosition.lineNumber, rightOfPosition.column, position.lineNumber, position.column);\n            }\n            if (deleteSelection.isEmpty()) {\n                // Probably at end of file => ignore\n                commands[i] = null;\n                continue;\n            }\n            if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\n                shouldPushStackElementBefore = true;\n            }\n            commands[i] = new ReplaceCommand(deleteSelection, '');\n        }\n        return [shouldPushStackElementBefore, commands];\n    }\n    static isAutoClosingPairDelete(autoClosingDelete, autoClosingBrackets, autoClosingQuotes, autoClosingPairsOpen, model, selections, autoClosedCharacters) {\n        if (autoClosingBrackets === 'never' && autoClosingQuotes === 'never') {\n            return false;\n        }\n        if (autoClosingDelete === 'never') {\n            return false;\n        }\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            const position = selection.getPosition();\n            if (!selection.isEmpty()) {\n                return false;\n            }\n            const lineText = model.getLineContent(position.lineNumber);\n            if (position.column < 2 || position.column >= lineText.length + 1) {\n                return false;\n            }\n            const character = lineText.charAt(position.column - 2);\n            const autoClosingPairCandidates = autoClosingPairsOpen.get(character);\n            if (!autoClosingPairCandidates) {\n                return false;\n            }\n            if (isQuote(character)) {\n                if (autoClosingQuotes === 'never') {\n                    return false;\n                }\n            }\n            else {\n                if (autoClosingBrackets === 'never') {\n                    return false;\n                }\n            }\n            const afterCharacter = lineText.charAt(position.column - 1);\n            let foundAutoClosingPair = false;\n            for (const autoClosingPairCandidate of autoClosingPairCandidates) {\n                if (autoClosingPairCandidate.open === character && autoClosingPairCandidate.close === afterCharacter) {\n                    foundAutoClosingPair = true;\n                }\n            }\n            if (!foundAutoClosingPair) {\n                return false;\n            }\n            // Must delete the pair only if it was automatically inserted by the editor\n            if (autoClosingDelete === 'auto') {\n                let found = false;\n                for (let j = 0, lenJ = autoClosedCharacters.length; j < lenJ; j++) {\n                    const autoClosedCharacter = autoClosedCharacters[j];\n                    if (position.lineNumber === autoClosedCharacter.startLineNumber && position.column === autoClosedCharacter.startColumn) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    static _runAutoClosingPairDelete(config, model, selections) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const position = selections[i].getPosition();\n            const deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column + 1);\n            commands[i] = new ReplaceCommand(deleteSelection, '');\n        }\n        return [true, commands];\n    }\n    static deleteLeft(prevEditOperationType, config, model, selections, autoClosedCharacters) {\n        if (this.isAutoClosingPairDelete(config.autoClosingDelete, config.autoClosingBrackets, config.autoClosingQuotes, config.autoClosingPairs.autoClosingPairsOpenByEnd, model, selections, autoClosedCharacters)) {\n            return this._runAutoClosingPairDelete(config, model, selections);\n        }\n        const commands = [];\n        let shouldPushStackElementBefore = (prevEditOperationType !== 2 /* EditOperationType.DeletingLeft */);\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const deleteRange = DeleteOperations.getDeleteRange(selections[i], model, config);\n            // Ignore empty delete ranges, as they have no effect\n            // They happen if the cursor is at the beginning of the file.\n            if (deleteRange.isEmpty()) {\n                commands[i] = null;\n                continue;\n            }\n            if (deleteRange.startLineNumber !== deleteRange.endLineNumber) {\n                shouldPushStackElementBefore = true;\n            }\n            commands[i] = new ReplaceCommand(deleteRange, '');\n        }\n        return [shouldPushStackElementBefore, commands];\n    }\n    static getDeleteRange(selection, model, config) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const position = selection.getPosition();\n        // Unintend when using tab stops and cursor is within indentation\n        if (config.useTabStops && position.column > 1) {\n            const lineContent = model.getLineContent(position.lineNumber);\n            const firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n            const lastIndentationColumn = (firstNonWhitespaceIndex === -1\n                ? /* entire string is whitespace */ lineContent.length + 1\n                : firstNonWhitespaceIndex + 1);\n            if (position.column <= lastIndentationColumn) {\n                const fromVisibleColumn = config.visibleColumnFromColumn(model, position);\n                const toVisibleColumn = CursorColumns.prevIndentTabStop(fromVisibleColumn, config.indentSize);\n                const toColumn = config.columnFromVisibleColumn(model, position.lineNumber, toVisibleColumn);\n                return new Range(position.lineNumber, toColumn, position.lineNumber, position.column);\n            }\n        }\n        return Range.fromPositions(DeleteOperations.getPositionAfterDeleteLeft(position, model), position);\n    }\n    static getPositionAfterDeleteLeft(position, model) {\n        if (position.column > 1) {\n            // Convert 1-based columns to 0-based offsets and back.\n            const idx = strings.getLeftDeleteOffset(position.column - 1, model.getLineContent(position.lineNumber));\n            return position.with(undefined, idx + 1);\n        }\n        else if (position.lineNumber > 1) {\n            const newLine = position.lineNumber - 1;\n            return new Position(newLine, model.getLineMaxColumn(newLine));\n        }\n        else {\n            return position;\n        }\n    }\n    static cut(config, model, selections) {\n        const commands = [];\n        let lastCutRange = null;\n        selections.sort((a, b) => Position.compare(a.getStartPosition(), b.getEndPosition()));\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            if (selection.isEmpty()) {\n                if (config.emptySelectionClipboard) {\n                    // This is a full line cut\n                    const position = selection.getPosition();\n                    let startLineNumber, startColumn, endLineNumber, endColumn;\n                    if (position.lineNumber < model.getLineCount()) {\n                        // Cutting a line in the middle of the model\n                        startLineNumber = position.lineNumber;\n                        startColumn = 1;\n                        endLineNumber = position.lineNumber + 1;\n                        endColumn = 1;\n                    }\n                    else if (position.lineNumber > 1 && (lastCutRange === null || lastCutRange === void 0 ? void 0 : lastCutRange.endLineNumber) !== position.lineNumber) {\n                        // Cutting the last line & there are more than 1 lines in the model & a previous cut operation does not touch the current cut operation\n                        startLineNumber = position.lineNumber - 1;\n                        startColumn = model.getLineMaxColumn(position.lineNumber - 1);\n                        endLineNumber = position.lineNumber;\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\n                    }\n                    else {\n                        // Cutting the single line that the model contains\n                        startLineNumber = position.lineNumber;\n                        startColumn = 1;\n                        endLineNumber = position.lineNumber;\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\n                    }\n                    const deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n                    lastCutRange = deleteSelection;\n                    if (!deleteSelection.isEmpty()) {\n                        commands[i] = new ReplaceCommand(deleteSelection, '');\n                    }\n                    else {\n                        commands[i] = null;\n                    }\n                }\n                else {\n                    // Cannot cut empty selection\n                    commands[i] = null;\n                }\n            }\n            else {\n                commands[i] = new ReplaceCommand(selection, '');\n            }\n        }\n        return new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: true\n        });\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as types from '../../../base/common/types.js';\nimport { CursorState, SingleCursorState } from '../cursorCommon.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { WordOperations } from './cursorWordOperations.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class CursorMoveCommands {\n    static addCursorDown(viewModel, cursors, useLogicalLine) {\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n            if (useLogicalLine) {\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n            }\n            else {\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel, cursor.viewState));\n            }\n        }\n        return result;\n    }\n    static addCursorUp(viewModel, cursors, useLogicalLine) {\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n            if (useLogicalLine) {\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n            }\n            else {\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel, cursor.viewState));\n            }\n        }\n        return result;\n    }\n    static moveToBeginningOfLine(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = this._moveToLineStart(viewModel, cursor, inSelectionMode);\n        }\n        return result;\n    }\n    static _moveToLineStart(viewModel, cursor, inSelectionMode) {\n        const currentViewStateColumn = cursor.viewState.position.column;\n        const currentModelStateColumn = cursor.modelState.position.column;\n        const isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\n        const currentViewStatelineNumber = cursor.viewState.position.lineNumber;\n        const firstNonBlankColumn = viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\n        const isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\n        if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\n            return this._moveToLineStartByView(viewModel, cursor, inSelectionMode);\n        }\n        else {\n            return this._moveToLineStartByModel(viewModel, cursor, inSelectionMode);\n        }\n    }\n    static _moveToLineStartByView(viewModel, cursor, inSelectionMode) {\n        return CursorState.fromViewState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode));\n    }\n    static _moveToLineStartByModel(viewModel, cursor, inSelectionMode) {\n        return CursorState.fromModelState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n    }\n    static moveToEndOfLine(viewModel, cursors, inSelectionMode, sticky) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = this._moveToLineEnd(viewModel, cursor, inSelectionMode, sticky);\n        }\n        return result;\n    }\n    static _moveToLineEnd(viewModel, cursor, inSelectionMode, sticky) {\n        const viewStatePosition = cursor.viewState.position;\n        const viewModelMaxColumn = viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\n        const isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\n        const modelStatePosition = cursor.modelState.position;\n        const modelMaxColumn = viewModel.model.getLineMaxColumn(modelStatePosition.lineNumber);\n        const isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\n        if (isEndOfViewLine || isEndLineOfWrappedLine) {\n            return this._moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky);\n        }\n        else {\n            return this._moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky);\n        }\n    }\n    static _moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky) {\n        return CursorState.fromViewState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, sticky));\n    }\n    static _moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky) {\n        return CursorState.fromModelState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, sticky));\n    }\n    static expandLineSelection(viewModel, cursors) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const startLineNumber = cursor.modelState.selection.startLineNumber;\n            const lineCount = viewModel.model.getLineCount();\n            let endLineNumber = cursor.modelState.selection.endLineNumber;\n            let endColumn;\n            if (endLineNumber === lineCount) {\n                endColumn = viewModel.model.getLineMaxColumn(lineCount);\n            }\n            else {\n                endLineNumber++;\n                endColumn = 1;\n            }\n            result[i] = CursorState.fromModelState(new SingleCursorState(new Range(startLineNumber, 1, startLineNumber, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(endLineNumber, endColumn), 0));\n        }\n        return result;\n    }\n    static moveToBeginningOfBuffer(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n        }\n        return result;\n    }\n    static moveToEndOfBuffer(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n        }\n        return result;\n    }\n    static selectAll(viewModel, cursor) {\n        const lineCount = viewModel.model.getLineCount();\n        const maxColumn = viewModel.model.getLineMaxColumn(lineCount);\n        return CursorState.fromModelState(new SingleCursorState(new Range(1, 1, 1, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(lineCount, maxColumn), 0));\n    }\n    static line(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\n        const position = viewModel.model.validatePosition(_position);\n        const viewPosition = (_viewPosition\n            ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\n            : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position));\n        if (!inSelectionMode) {\n            // Entering line selection for the first time\n            const lineCount = viewModel.model.getLineCount();\n            let selectToLineNumber = position.lineNumber + 1;\n            let selectToColumn = 1;\n            if (selectToLineNumber > lineCount) {\n                selectToLineNumber = lineCount;\n                selectToColumn = viewModel.model.getLineMaxColumn(selectToLineNumber);\n            }\n            return CursorState.fromModelState(new SingleCursorState(new Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 2 /* SelectionStartKind.Line */, 0, new Position(selectToLineNumber, selectToColumn), 0));\n        }\n        // Continuing line selection\n        const enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\n        if (position.lineNumber < enteringLineNumber) {\n            return CursorState.fromViewState(cursor.viewState.move(true, viewPosition.lineNumber, 1, 0));\n        }\n        else if (position.lineNumber > enteringLineNumber) {\n            const lineCount = viewModel.getLineCount();\n            let selectToViewLineNumber = viewPosition.lineNumber + 1;\n            let selectToViewColumn = 1;\n            if (selectToViewLineNumber > lineCount) {\n                selectToViewLineNumber = lineCount;\n                selectToViewColumn = viewModel.getLineMaxColumn(selectToViewLineNumber);\n            }\n            return CursorState.fromViewState(cursor.viewState.move(true, selectToViewLineNumber, selectToViewColumn, 0));\n        }\n        else {\n            const endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\n            return CursorState.fromModelState(cursor.modelState.move(true, endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\n        }\n    }\n    static word(viewModel, cursor, inSelectionMode, _position) {\n        const position = viewModel.model.validatePosition(_position);\n        return CursorState.fromModelState(WordOperations.word(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, position));\n    }\n    static cancelSelection(viewModel, cursor) {\n        if (!cursor.modelState.hasSelection()) {\n            return new CursorState(cursor.modelState, cursor.viewState);\n        }\n        const lineNumber = cursor.viewState.position.lineNumber;\n        const column = cursor.viewState.position.column;\n        return CursorState.fromViewState(new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, column), 0));\n    }\n    static moveTo(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\n        if (inSelectionMode) {\n            if (cursor.modelState.selectionStartKind === 1 /* SelectionStartKind.Word */) {\n                return this.word(viewModel, cursor, inSelectionMode, _position);\n            }\n            if (cursor.modelState.selectionStartKind === 2 /* SelectionStartKind.Line */) {\n                return this.line(viewModel, cursor, inSelectionMode, _position, _viewPosition);\n            }\n        }\n        const position = viewModel.model.validatePosition(_position);\n        const viewPosition = (_viewPosition\n            ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\n            : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position));\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\n    }\n    static simpleMove(viewModel, cursors, direction, inSelectionMode, value, unit) {\n        switch (direction) {\n            case 0 /* CursorMove.Direction.Left */: {\n                if (unit === 4 /* CursorMove.Unit.HalfLine */) {\n                    // Move left by half the current line length\n                    return this._moveHalfLineLeft(viewModel, cursors, inSelectionMode);\n                }\n                else {\n                    // Move left by `moveParams.value` columns\n                    return this._moveLeft(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 1 /* CursorMove.Direction.Right */: {\n                if (unit === 4 /* CursorMove.Unit.HalfLine */) {\n                    // Move right by half the current line length\n                    return this._moveHalfLineRight(viewModel, cursors, inSelectionMode);\n                }\n                else {\n                    // Move right by `moveParams.value` columns\n                    return this._moveRight(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 2 /* CursorMove.Direction.Up */: {\n                if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n                    // Move up by view lines\n                    return this._moveUpByViewLines(viewModel, cursors, inSelectionMode, value);\n                }\n                else {\n                    // Move up by model lines\n                    return this._moveUpByModelLines(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 3 /* CursorMove.Direction.Down */: {\n                if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n                    // Move down by view lines\n                    return this._moveDownByViewLines(viewModel, cursors, inSelectionMode, value);\n                }\n                else {\n                    // Move down by model lines\n                    return this._moveDownByModelLines(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 4 /* CursorMove.Direction.PrevBlankLine */: {\n                if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n                    return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveToPrevBlankLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode)));\n                }\n                else {\n                    return cursors.map(cursor => CursorState.fromModelState(MoveOperations.moveToPrevBlankLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode)));\n                }\n            }\n            case 5 /* CursorMove.Direction.NextBlankLine */: {\n                if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n                    return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveToNextBlankLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode)));\n                }\n                else {\n                    return cursors.map(cursor => CursorState.fromModelState(MoveOperations.moveToNextBlankLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode)));\n                }\n            }\n            case 6 /* CursorMove.Direction.WrappedLineStart */: {\n                // Move to the beginning of the current view line\n                return this._moveToViewMinColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 7 /* CursorMove.Direction.WrappedLineFirstNonWhitespaceCharacter */: {\n                // Move to the first non-whitespace column of the current view line\n                return this._moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 8 /* CursorMove.Direction.WrappedLineColumnCenter */: {\n                // Move to the \"center\" of the current view line\n                return this._moveToViewCenterColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 9 /* CursorMove.Direction.WrappedLineEnd */: {\n                // Move to the end of the current view line\n                return this._moveToViewMaxColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 10 /* CursorMove.Direction.WrappedLineLastNonWhitespaceCharacter */: {\n                // Move to the last non-whitespace column of the current view line\n                return this._moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n            }\n            default:\n                return null;\n        }\n    }\n    static viewportMove(viewModel, cursors, direction, inSelectionMode, value) {\n        const visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n        const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        switch (direction) {\n            case 11 /* CursorMove.Direction.ViewPortTop */: {\n                // Move to the nth line start in the viewport (from the top)\n                const modelLineNumber = this._firstLineNumberInRange(viewModel.model, visibleModelRange, value);\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case 13 /* CursorMove.Direction.ViewPortBottom */: {\n                // Move to the nth line start in the viewport (from the bottom)\n                const modelLineNumber = this._lastLineNumberInRange(viewModel.model, visibleModelRange, value);\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case 12 /* CursorMove.Direction.ViewPortCenter */: {\n                // Move to the line start in the viewport center\n                const modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case 14 /* CursorMove.Direction.ViewPortIfOutside */: {\n                // Move to a position inside the viewport\n                const result = [];\n                for (let i = 0, len = cursors.length; i < len; i++) {\n                    const cursor = cursors[i];\n                    result[i] = this.findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode);\n                }\n                return result;\n            }\n            default:\n                return null;\n        }\n    }\n    static findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode) {\n        const viewLineNumber = cursor.viewState.position.lineNumber;\n        if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\n            // Nothing to do, cursor is in viewport\n            return new CursorState(cursor.modelState, cursor.viewState);\n        }\n        else {\n            let newViewLineNumber;\n            if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\n                newViewLineNumber = visibleViewRange.endLineNumber - 1;\n            }\n            else if (viewLineNumber < visibleViewRange.startLineNumber) {\n                newViewLineNumber = visibleViewRange.startLineNumber;\n            }\n            else {\n                newViewLineNumber = viewLineNumber;\n            }\n            const position = MoveOperations.vertical(viewModel.cursorConfig, viewModel, viewLineNumber, cursor.viewState.position.column, cursor.viewState.leftoverVisibleColumns, newViewLineNumber, false);\n            return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, position.lineNumber, position.column, position.leftoverVisibleColumns));\n        }\n    }\n    /**\n     * Find the nth line start included in the range (from the start).\n     */\n    static _firstLineNumberInRange(model, range, count) {\n        let startLineNumber = range.startLineNumber;\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n            // Move on to the second line if the first line start is not included in the range\n            startLineNumber++;\n        }\n        return Math.min(range.endLineNumber, startLineNumber + count - 1);\n    }\n    /**\n     * Find the nth line start included in the range (from the end).\n     */\n    static _lastLineNumberInRange(model, range, count) {\n        let startLineNumber = range.startLineNumber;\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n            // Move on to the second line if the first line start is not included in the range\n            startLineNumber++;\n        }\n        return Math.max(startLineNumber, range.endLineNumber - count + 1);\n    }\n    static _moveLeft(viewModel, cursors, inSelectionMode, noOfColumns) {\n        return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns)));\n    }\n    static _moveHalfLineLeft(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const halfLine = Math.round(viewModel.getLineContent(viewLineNumber).length / 2);\n            result[i] = CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n        }\n        return result;\n    }\n    static _moveRight(viewModel, cursors, inSelectionMode, noOfColumns) {\n        return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns)));\n    }\n    static _moveHalfLineRight(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const halfLine = Math.round(viewModel.getLineContent(viewLineNumber).length / 2);\n            result[i] = CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n        }\n        return result;\n    }\n    static _moveDownByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromViewState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveDownByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveUpByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromViewState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveUpByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveToViewPosition(viewModel, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\n    }\n    static _moveToModelPosition(viewModel, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\n        return CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\n    }\n    static _moveToViewMinColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineMinColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewCenterColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = Math.round((viewModel.getLineMaxColumn(viewLineNumber) + viewModel.getLineMinColumn(viewLineNumber)) / 2);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewMaxColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineMaxColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n}\nexport var CursorMove;\n(function (CursorMove) {\n    const isCursorMoveArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const cursorMoveArg = arg;\n        if (!types.isString(cursorMoveArg.to)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\n            return false;\n        }\n        return true;\n    };\n    CursorMove.description = {\n        description: 'Move cursor to a logical position in the view',\n        args: [\n            {\n                name: 'Cursor move argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory logical position value providing where to move the cursor.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine',\n\t\t\t\t\t\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\n\t\t\t\t\t\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\n\t\t\t\t\t\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'character', 'halfLine'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'select': If 'true' makes the selection. Default is 'false'.\n\t\t\t\t`,\n                constraint: isCursorMoveArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['to'],\n                    'properties': {\n                        'to': {\n                            'type': 'string',\n                            'enum': ['left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\n                        },\n                        'by': {\n                            'type': 'string',\n                            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\n                        },\n                        'value': {\n                            'type': 'number',\n                            'default': 1\n                        },\n                        'select': {\n                            'type': 'boolean',\n                            'default': false\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Positions in the view for cursor move command.\n     */\n    CursorMove.RawDirection = {\n        Left: 'left',\n        Right: 'right',\n        Up: 'up',\n        Down: 'down',\n        PrevBlankLine: 'prevBlankLine',\n        NextBlankLine: 'nextBlankLine',\n        WrappedLineStart: 'wrappedLineStart',\n        WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\n        WrappedLineColumnCenter: 'wrappedLineColumnCenter',\n        WrappedLineEnd: 'wrappedLineEnd',\n        WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\n        ViewPortTop: 'viewPortTop',\n        ViewPortCenter: 'viewPortCenter',\n        ViewPortBottom: 'viewPortBottom',\n        ViewPortIfOutside: 'viewPortIfOutside'\n    };\n    /**\n     * Units for Cursor move 'by' argument\n     */\n    CursorMove.RawUnit = {\n        Line: 'line',\n        WrappedLine: 'wrappedLine',\n        Character: 'character',\n        HalfLine: 'halfLine'\n    };\n    function parse(args) {\n        if (!args.to) {\n            // illegal arguments\n            return null;\n        }\n        let direction;\n        switch (args.to) {\n            case CursorMove.RawDirection.Left:\n                direction = 0 /* Direction.Left */;\n                break;\n            case CursorMove.RawDirection.Right:\n                direction = 1 /* Direction.Right */;\n                break;\n            case CursorMove.RawDirection.Up:\n                direction = 2 /* Direction.Up */;\n                break;\n            case CursorMove.RawDirection.Down:\n                direction = 3 /* Direction.Down */;\n                break;\n            case CursorMove.RawDirection.PrevBlankLine:\n                direction = 4 /* Direction.PrevBlankLine */;\n                break;\n            case CursorMove.RawDirection.NextBlankLine:\n                direction = 5 /* Direction.NextBlankLine */;\n                break;\n            case CursorMove.RawDirection.WrappedLineStart:\n                direction = 6 /* Direction.WrappedLineStart */;\n                break;\n            case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\n                direction = 7 /* Direction.WrappedLineFirstNonWhitespaceCharacter */;\n                break;\n            case CursorMove.RawDirection.WrappedLineColumnCenter:\n                direction = 8 /* Direction.WrappedLineColumnCenter */;\n                break;\n            case CursorMove.RawDirection.WrappedLineEnd:\n                direction = 9 /* Direction.WrappedLineEnd */;\n                break;\n            case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\n                direction = 10 /* Direction.WrappedLineLastNonWhitespaceCharacter */;\n                break;\n            case CursorMove.RawDirection.ViewPortTop:\n                direction = 11 /* Direction.ViewPortTop */;\n                break;\n            case CursorMove.RawDirection.ViewPortBottom:\n                direction = 13 /* Direction.ViewPortBottom */;\n                break;\n            case CursorMove.RawDirection.ViewPortCenter:\n                direction = 12 /* Direction.ViewPortCenter */;\n                break;\n            case CursorMove.RawDirection.ViewPortIfOutside:\n                direction = 14 /* Direction.ViewPortIfOutside */;\n                break;\n            default:\n                // illegal arguments\n                return null;\n        }\n        let unit = 0 /* Unit.None */;\n        switch (args.by) {\n            case CursorMove.RawUnit.Line:\n                unit = 1 /* Unit.Line */;\n                break;\n            case CursorMove.RawUnit.WrappedLine:\n                unit = 2 /* Unit.WrappedLine */;\n                break;\n            case CursorMove.RawUnit.Character:\n                unit = 3 /* Unit.Character */;\n                break;\n            case CursorMove.RawUnit.HalfLine:\n                unit = 4 /* Unit.HalfLine */;\n                break;\n        }\n        return {\n            direction: direction,\n            unit: unit,\n            select: (!!args.select),\n            value: (args.value || 1)\n        };\n    }\n    CursorMove.parse = parse;\n})(CursorMove || (CursorMove = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { CursorColumns } from '../core/cursorColumns.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { AtomicTabMoveOperations } from './cursorAtomicMoveOperations.js';\nimport { SingleCursorState } from '../cursorCommon.js';\nexport class CursorPosition {\n    constructor(lineNumber, column, leftoverVisibleColumns) {\n        this._cursorPositionBrand = undefined;\n        this.lineNumber = lineNumber;\n        this.column = column;\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\n    }\n}\nexport class MoveOperations {\n    static leftPosition(model, position) {\n        if (position.column > model.getLineMinColumn(position.lineNumber)) {\n            return position.delta(undefined, -strings.prevCharLength(model.getLineContent(position.lineNumber), position.column - 1));\n        }\n        else if (position.lineNumber > 1) {\n            const newLineNumber = position.lineNumber - 1;\n            return new Position(newLineNumber, model.getLineMaxColumn(newLineNumber));\n        }\n        else {\n            return position;\n        }\n    }\n    static leftPositionAtomicSoftTabs(model, position, tabSize) {\n        if (position.column <= model.getLineIndentColumn(position.lineNumber)) {\n            const minColumn = model.getLineMinColumn(position.lineNumber);\n            const lineContent = model.getLineContent(position.lineNumber);\n            const newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, position.column - 1, tabSize, 0 /* Direction.Left */);\n            if (newPosition !== -1 && newPosition + 1 >= minColumn) {\n                return new Position(position.lineNumber, newPosition + 1);\n            }\n        }\n        return this.leftPosition(model, position);\n    }\n    static left(config, model, position) {\n        const pos = config.stickyTabStops\n            ? MoveOperations.leftPositionAtomicSoftTabs(model, position, config.tabSize)\n            : MoveOperations.leftPosition(model, position);\n        return new CursorPosition(pos.lineNumber, pos.column, 0);\n    }\n    /**\n     * @param noOfColumns Must be either `1`\n     * or `Math.round(viewModel.getLineContent(viewLineNumber).length / 2)` (for half lines).\n    */\n    static moveLeft(config, model, cursor, inSelectionMode, noOfColumns) {\n        let lineNumber, column;\n        if (cursor.hasSelection() && !inSelectionMode) {\n            // If the user has a selection and does not want to extend it,\n            // put the cursor at the beginning of the selection.\n            lineNumber = cursor.selection.startLineNumber;\n            column = cursor.selection.startColumn;\n        }\n        else {\n            // This has no effect if noOfColumns === 1.\n            // It is ok to do so in the half-line scenario.\n            const pos = cursor.position.delta(undefined, -(noOfColumns - 1));\n            // We clip the position before normalization, as normalization is not defined\n            // for possibly negative columns.\n            const normalizedPos = model.normalizePosition(MoveOperations.clipPositionColumn(pos, model), 0 /* PositionAffinity.Left */);\n            const p = MoveOperations.left(config, model, normalizedPos);\n            lineNumber = p.lineNumber;\n            column = p.column;\n        }\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\n    }\n    /**\n     * Adjusts the column so that it is within min/max of the line.\n    */\n    static clipPositionColumn(position, model) {\n        return new Position(position.lineNumber, MoveOperations.clipRange(position.column, model.getLineMinColumn(position.lineNumber), model.getLineMaxColumn(position.lineNumber)));\n    }\n    static clipRange(value, min, max) {\n        if (value < min) {\n            return min;\n        }\n        if (value > max) {\n            return max;\n        }\n        return value;\n    }\n    static rightPosition(model, lineNumber, column) {\n        if (column < model.getLineMaxColumn(lineNumber)) {\n            column = column + strings.nextCharLength(model.getLineContent(lineNumber), column - 1);\n        }\n        else if (lineNumber < model.getLineCount()) {\n            lineNumber = lineNumber + 1;\n            column = model.getLineMinColumn(lineNumber);\n        }\n        return new Position(lineNumber, column);\n    }\n    static rightPositionAtomicSoftTabs(model, lineNumber, column, tabSize, indentSize) {\n        if (column < model.getLineIndentColumn(lineNumber)) {\n            const lineContent = model.getLineContent(lineNumber);\n            const newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, column - 1, tabSize, 1 /* Direction.Right */);\n            if (newPosition !== -1) {\n                return new Position(lineNumber, newPosition + 1);\n            }\n        }\n        return this.rightPosition(model, lineNumber, column);\n    }\n    static right(config, model, position) {\n        const pos = config.stickyTabStops\n            ? MoveOperations.rightPositionAtomicSoftTabs(model, position.lineNumber, position.column, config.tabSize, config.indentSize)\n            : MoveOperations.rightPosition(model, position.lineNumber, position.column);\n        return new CursorPosition(pos.lineNumber, pos.column, 0);\n    }\n    static moveRight(config, model, cursor, inSelectionMode, noOfColumns) {\n        let lineNumber, column;\n        if (cursor.hasSelection() && !inSelectionMode) {\n            // If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\n            lineNumber = cursor.selection.endLineNumber;\n            column = cursor.selection.endColumn;\n        }\n        else {\n            const pos = cursor.position.delta(undefined, noOfColumns - 1);\n            const normalizedPos = model.normalizePosition(MoveOperations.clipPositionColumn(pos, model), 1 /* PositionAffinity.Right */);\n            const r = MoveOperations.right(config, model, normalizedPos);\n            lineNumber = r.lineNumber;\n            column = r.column;\n        }\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\n    }\n    static vertical(config, model, lineNumber, column, leftoverVisibleColumns, newLineNumber, allowMoveOnEdgeLine, normalizationAffinity) {\n        const currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n        const lineCount = model.getLineCount();\n        const wasOnFirstPosition = (lineNumber === 1 && column === 1);\n        const wasOnLastPosition = (lineNumber === lineCount && column === model.getLineMaxColumn(lineNumber));\n        const wasAtEdgePosition = (newLineNumber < lineNumber ? wasOnFirstPosition : wasOnLastPosition);\n        lineNumber = newLineNumber;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            if (allowMoveOnEdgeLine) {\n                column = model.getLineMinColumn(lineNumber);\n            }\n            else {\n                column = Math.min(model.getLineMaxColumn(lineNumber), column);\n            }\n        }\n        else if (lineNumber > lineCount) {\n            lineNumber = lineCount;\n            if (allowMoveOnEdgeLine) {\n                column = model.getLineMaxColumn(lineNumber);\n            }\n            else {\n                column = Math.min(model.getLineMaxColumn(lineNumber), column);\n            }\n        }\n        else {\n            column = config.columnFromVisibleColumn(model, lineNumber, currentVisibleColumn);\n        }\n        if (wasAtEdgePosition) {\n            leftoverVisibleColumns = 0;\n        }\n        else {\n            leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n        }\n        if (normalizationAffinity !== undefined) {\n            const position = new Position(lineNumber, column);\n            const newPosition = model.normalizePosition(position, normalizationAffinity);\n            leftoverVisibleColumns = leftoverVisibleColumns + (column - newPosition.column);\n            lineNumber = newPosition.lineNumber;\n            column = newPosition.column;\n        }\n        return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n    }\n    static down(config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnLastLine) {\n        return this.vertical(config, model, lineNumber, column, leftoverVisibleColumns, lineNumber + count, allowMoveOnLastLine, 4 /* PositionAffinity.RightOfInjectedText */);\n    }\n    static moveDown(config, model, cursor, inSelectionMode, linesCount) {\n        let lineNumber, column;\n        if (cursor.hasSelection() && !inSelectionMode) {\n            // If we are in selection mode, move down acts relative to the end of selection\n            lineNumber = cursor.selection.endLineNumber;\n            column = cursor.selection.endColumn;\n        }\n        else {\n            lineNumber = cursor.position.lineNumber;\n            column = cursor.position.column;\n        }\n        let i = 0;\n        let r;\n        do {\n            r = MoveOperations.down(config, model, lineNumber + i, column, cursor.leftoverVisibleColumns, linesCount, true);\n            const np = model.normalizePosition(new Position(r.lineNumber, r.column), 2 /* PositionAffinity.None */);\n            if (np.lineNumber > lineNumber) {\n                break;\n            }\n        } while (i++ < 10 && lineNumber + i < model.getLineCount());\n        return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n    }\n    static translateDown(config, model, cursor) {\n        const selection = cursor.selection;\n        const selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n        const position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n        return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), 0 /* SelectionStartKind.Simple */, selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n    }\n    static up(config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnFirstLine) {\n        return this.vertical(config, model, lineNumber, column, leftoverVisibleColumns, lineNumber - count, allowMoveOnFirstLine, 3 /* PositionAffinity.LeftOfInjectedText */);\n    }\n    static moveUp(config, model, cursor, inSelectionMode, linesCount) {\n        let lineNumber, column;\n        if (cursor.hasSelection() && !inSelectionMode) {\n            // If we are in selection mode, move up acts relative to the beginning of selection\n            lineNumber = cursor.selection.startLineNumber;\n            column = cursor.selection.startColumn;\n        }\n        else {\n            lineNumber = cursor.position.lineNumber;\n            column = cursor.position.column;\n        }\n        const r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n        return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n    }\n    static translateUp(config, model, cursor) {\n        const selection = cursor.selection;\n        const selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n        const position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n        return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), 0 /* SelectionStartKind.Simple */, selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n    }\n    static _isBlankLine(model, lineNumber) {\n        if (model.getLineFirstNonWhitespaceColumn(lineNumber) === 0) {\n            // empty or contains only whitespace\n            return true;\n        }\n        return false;\n    }\n    static moveToPrevBlankLine(config, model, cursor, inSelectionMode) {\n        let lineNumber = cursor.position.lineNumber;\n        // If our current line is blank, move to the previous non-blank line\n        while (lineNumber > 1 && this._isBlankLine(model, lineNumber)) {\n            lineNumber--;\n        }\n        // Find the previous blank line\n        while (lineNumber > 1 && !this._isBlankLine(model, lineNumber)) {\n            lineNumber--;\n        }\n        return cursor.move(inSelectionMode, lineNumber, model.getLineMinColumn(lineNumber), 0);\n    }\n    static moveToNextBlankLine(config, model, cursor, inSelectionMode) {\n        const lineCount = model.getLineCount();\n        let lineNumber = cursor.position.lineNumber;\n        // If our current line is blank, move to the next non-blank line\n        while (lineNumber < lineCount && this._isBlankLine(model, lineNumber)) {\n            lineNumber++;\n        }\n        // Find the next blank line\n        while (lineNumber < lineCount && !this._isBlankLine(model, lineNumber)) {\n            lineNumber++;\n        }\n        return cursor.move(inSelectionMode, lineNumber, model.getLineMinColumn(lineNumber), 0);\n    }\n    static moveToBeginningOfLine(config, model, cursor, inSelectionMode) {\n        const lineNumber = cursor.position.lineNumber;\n        const minColumn = model.getLineMinColumn(lineNumber);\n        const firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\n        let column;\n        const relevantColumnNumber = cursor.position.column;\n        if (relevantColumnNumber === firstNonBlankColumn) {\n            column = minColumn;\n        }\n        else {\n            column = firstNonBlankColumn;\n        }\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\n    }\n    static moveToEndOfLine(config, model, cursor, inSelectionMode, sticky) {\n        const lineNumber = cursor.position.lineNumber;\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        return cursor.move(inSelectionMode, lineNumber, maxColumn, sticky ? 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */ - maxColumn : 0);\n    }\n    static moveToBeginningOfBuffer(config, model, cursor, inSelectionMode) {\n        return cursor.move(inSelectionMode, 1, 1, 0);\n    }\n    static moveToEndOfBuffer(config, model, cursor, inSelectionMode) {\n        const lastLineNumber = model.getLineCount();\n        const lastColumn = model.getLineMaxColumn(lastLineNumber);\n        return cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { ReplaceCommand, ReplaceCommandWithOffsetCursorState, ReplaceCommandWithoutChangingPosition, ReplaceCommandThatPreservesSelection } from '../commands/replaceCommand.js';\nimport { ShiftCommand } from '../commands/shiftCommand.js';\nimport { CompositionSurroundSelectionCommand, SurroundSelectionCommand } from '../commands/surroundSelectionCommand.js';\nimport { EditOperationResult, isQuote } from '../cursorCommon.js';\nimport { getMapForWordSeparators } from '../core/wordCharacterClassifier.js';\nimport { Range } from '../core/range.js';\nimport { Position } from '../core/position.js';\nimport { IndentAction } from '../languages/languageConfiguration.js';\nimport { getIndentationAtPosition } from '../languages/languageConfigurationRegistry.js';\nimport { createScopedLineTokens } from '../languages/supports.js';\nimport { getIndentActionForType, getIndentForEnter, getInheritIndentForLine } from '../languages/autoIndent.js';\nimport { getEnterAction } from '../languages/enterAction.js';\nexport class TypeOperations {\n    static indent(config, model, selections) {\n        if (model === null || selections === null) {\n            return [];\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ShiftCommand(selections[i], {\n                isUnshift: false,\n                tabSize: config.tabSize,\n                indentSize: config.indentSize,\n                insertSpaces: config.insertSpaces,\n                useTabStops: config.useTabStops,\n                autoIndent: config.autoIndent\n            }, config.languageConfigurationService);\n        }\n        return commands;\n    }\n    static outdent(config, model, selections) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ShiftCommand(selections[i], {\n                isUnshift: true,\n                tabSize: config.tabSize,\n                indentSize: config.indentSize,\n                insertSpaces: config.insertSpaces,\n                useTabStops: config.useTabStops,\n                autoIndent: config.autoIndent\n            }, config.languageConfigurationService);\n        }\n        return commands;\n    }\n    static shiftIndent(config, indentation, count) {\n        count = count || 1;\n        return ShiftCommand.shiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\n    }\n    static unshiftIndent(config, indentation, count) {\n        count = count || 1;\n        return ShiftCommand.unshiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\n    }\n    static _distributedPaste(config, model, selections, text) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ReplaceCommand(selections[i], text[i]);\n        }\n        return new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: true\n        });\n    }\n    static _simplePaste(config, model, selections, text, pasteOnNewLine) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            const position = selection.getPosition();\n            if (pasteOnNewLine && !selection.isEmpty()) {\n                pasteOnNewLine = false;\n            }\n            if (pasteOnNewLine && text.indexOf('\\n') !== text.length - 1) {\n                pasteOnNewLine = false;\n            }\n            if (pasteOnNewLine) {\n                // Paste entire line at the beginning of line\n                const typeSelection = new Range(position.lineNumber, 1, position.lineNumber, 1);\n                commands[i] = new ReplaceCommandThatPreservesSelection(typeSelection, text, selection, true);\n            }\n            else {\n                commands[i] = new ReplaceCommand(selection, text);\n            }\n        }\n        return new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: true\n        });\n    }\n    static _distributePasteToCursors(config, selections, text, pasteOnNewLine, multicursorText) {\n        if (pasteOnNewLine) {\n            return null;\n        }\n        if (selections.length === 1) {\n            return null;\n        }\n        if (multicursorText && multicursorText.length === selections.length) {\n            return multicursorText;\n        }\n        if (config.multiCursorPaste === 'spread') {\n            // Try to spread the pasted text in case the line count matches the cursor count\n            // Remove trailing \\n if present\n            if (text.charCodeAt(text.length - 1) === 10 /* CharCode.LineFeed */) {\n                text = text.substr(0, text.length - 1);\n            }\n            // Remove trailing \\r if present\n            if (text.charCodeAt(text.length - 1) === 13 /* CharCode.CarriageReturn */) {\n                text = text.substr(0, text.length - 1);\n            }\n            const lines = strings.splitLines(text);\n            if (lines.length === selections.length) {\n                return lines;\n            }\n        }\n        return null;\n    }\n    static paste(config, model, selections, text, pasteOnNewLine, multicursorText) {\n        const distributedPaste = this._distributePasteToCursors(config, selections, text, pasteOnNewLine, multicursorText);\n        if (distributedPaste) {\n            selections = selections.sort(Range.compareRangesUsingStarts);\n            return this._distributedPaste(config, model, selections, distributedPaste);\n        }\n        else {\n            return this._simplePaste(config, model, selections, text, pasteOnNewLine);\n        }\n    }\n    static _goodIndentForLine(config, model, lineNumber) {\n        let action = null;\n        let indentation = '';\n        const expectedIndentAction = getInheritIndentForLine(config.autoIndent, model, lineNumber, false, config.languageConfigurationService);\n        if (expectedIndentAction) {\n            action = expectedIndentAction.action;\n            indentation = expectedIndentAction.indentation;\n        }\n        else if (lineNumber > 1) {\n            let lastLineNumber;\n            for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n                const lineText = model.getLineContent(lastLineNumber);\n                const nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineText);\n                if (nonWhitespaceIdx >= 0) {\n                    break;\n                }\n            }\n            if (lastLineNumber < 1) {\n                // No previous line with content found\n                return null;\n            }\n            const maxColumn = model.getLineMaxColumn(lastLineNumber);\n            const expectedEnterAction = getEnterAction(config.autoIndent, model, new Range(lastLineNumber, maxColumn, lastLineNumber, maxColumn), config.languageConfigurationService);\n            if (expectedEnterAction) {\n                indentation = expectedEnterAction.indentation + expectedEnterAction.appendText;\n            }\n        }\n        if (action) {\n            if (action === IndentAction.Indent) {\n                indentation = TypeOperations.shiftIndent(config, indentation);\n            }\n            if (action === IndentAction.Outdent) {\n                indentation = TypeOperations.unshiftIndent(config, indentation);\n            }\n            indentation = config.normalizeIndentation(indentation);\n        }\n        if (!indentation) {\n            return null;\n        }\n        return indentation;\n    }\n    static _replaceJumpToNextIndent(config, model, selection, insertsAutoWhitespace) {\n        let typeText = '';\n        const position = selection.getStartPosition();\n        if (config.insertSpaces) {\n            const visibleColumnFromColumn = config.visibleColumnFromColumn(model, position);\n            const indentSize = config.indentSize;\n            const spacesCnt = indentSize - (visibleColumnFromColumn % indentSize);\n            for (let i = 0; i < spacesCnt; i++) {\n                typeText += ' ';\n            }\n        }\n        else {\n            typeText = '\\t';\n        }\n        return new ReplaceCommand(selection, typeText, insertsAutoWhitespace);\n    }\n    static tab(config, model, selections) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            if (selection.isEmpty()) {\n                const lineText = model.getLineContent(selection.startLineNumber);\n                if (/^\\s*$/.test(lineText) && model.tokenization.isCheapToTokenize(selection.startLineNumber)) {\n                    let goodIndent = this._goodIndentForLine(config, model, selection.startLineNumber);\n                    goodIndent = goodIndent || '\\t';\n                    const possibleTypeText = config.normalizeIndentation(goodIndent);\n                    if (!lineText.startsWith(possibleTypeText)) {\n                        commands[i] = new ReplaceCommand(new Range(selection.startLineNumber, 1, selection.startLineNumber, lineText.length + 1), possibleTypeText, true);\n                        continue;\n                    }\n                }\n                commands[i] = this._replaceJumpToNextIndent(config, model, selection, true);\n            }\n            else {\n                if (selection.startLineNumber === selection.endLineNumber) {\n                    const lineMaxColumn = model.getLineMaxColumn(selection.startLineNumber);\n                    if (selection.startColumn !== 1 || selection.endColumn !== lineMaxColumn) {\n                        // This is a single line selection that is not the entire line\n                        commands[i] = this._replaceJumpToNextIndent(config, model, selection, false);\n                        continue;\n                    }\n                }\n                commands[i] = new ShiftCommand(selection, {\n                    isUnshift: false,\n                    tabSize: config.tabSize,\n                    indentSize: config.indentSize,\n                    insertSpaces: config.insertSpaces,\n                    useTabStops: config.useTabStops,\n                    autoIndent: config.autoIndent\n                }, config.languageConfigurationService);\n            }\n        }\n        return commands;\n    }\n    static compositionType(prevEditOperationType, config, model, selections, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n        const commands = selections.map(selection => this._compositionType(model, selection, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta));\n        return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n            shouldPushStackElementBefore: shouldPushStackElementBetween(prevEditOperationType, 4 /* EditOperationType.TypingOther */),\n            shouldPushStackElementAfter: false\n        });\n    }\n    static _compositionType(model, selection, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n        if (!selection.isEmpty()) {\n            // looks like https://github.com/microsoft/vscode/issues/2773\n            // where a cursor operation occurred before a canceled composition\n            // => ignore composition\n            return null;\n        }\n        const pos = selection.getPosition();\n        const startColumn = Math.max(1, pos.column - replacePrevCharCnt);\n        const endColumn = Math.min(model.getLineMaxColumn(pos.lineNumber), pos.column + replaceNextCharCnt);\n        const range = new Range(pos.lineNumber, startColumn, pos.lineNumber, endColumn);\n        const oldText = model.getValueInRange(range);\n        if (oldText === text && positionDelta === 0) {\n            // => ignore composition that doesn't do anything\n            return null;\n        }\n        return new ReplaceCommandWithOffsetCursorState(range, text, 0, positionDelta);\n    }\n    static _typeCommand(range, text, keepPosition) {\n        if (keepPosition) {\n            return new ReplaceCommandWithoutChangingPosition(range, text, true);\n        }\n        else {\n            return new ReplaceCommand(range, text, true);\n        }\n    }\n    static _enter(config, model, keepPosition, range) {\n        if (config.autoIndent === 0 /* EditorAutoIndentStrategy.None */) {\n            return TypeOperations._typeCommand(range, '\\n', keepPosition);\n        }\n        if (!model.tokenization.isCheapToTokenize(range.getStartPosition().lineNumber) || config.autoIndent === 1 /* EditorAutoIndentStrategy.Keep */) {\n            const lineText = model.getLineContent(range.startLineNumber);\n            const indentation = strings.getLeadingWhitespace(lineText).substring(0, range.startColumn - 1);\n            return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation), keepPosition);\n        }\n        const r = getEnterAction(config.autoIndent, model, range, config.languageConfigurationService);\n        if (r) {\n            if (r.indentAction === IndentAction.None) {\n                // Nothing special\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\n            }\n            else if (r.indentAction === IndentAction.Indent) {\n                // Indent once\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\n            }\n            else if (r.indentAction === IndentAction.IndentOutdent) {\n                // Ultra special\n                const normalIndent = config.normalizeIndentation(r.indentation);\n                const increasedIndent = config.normalizeIndentation(r.indentation + r.appendText);\n                const typeText = '\\n' + increasedIndent + '\\n' + normalIndent;\n                if (keepPosition) {\n                    return new ReplaceCommandWithoutChangingPosition(range, typeText, true);\n                }\n                else {\n                    return new ReplaceCommandWithOffsetCursorState(range, typeText, -1, increasedIndent.length - normalIndent.length, true);\n                }\n            }\n            else if (r.indentAction === IndentAction.Outdent) {\n                const actualIndentation = TypeOperations.unshiftIndent(config, r.indentation);\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(actualIndentation + r.appendText), keepPosition);\n            }\n        }\n        const lineText = model.getLineContent(range.startLineNumber);\n        const indentation = strings.getLeadingWhitespace(lineText).substring(0, range.startColumn - 1);\n        if (config.autoIndent >= 4 /* EditorAutoIndentStrategy.Full */) {\n            const ir = getIndentForEnter(config.autoIndent, model, range, {\n                unshiftIndent: (indent) => {\n                    return TypeOperations.unshiftIndent(config, indent);\n                },\n                shiftIndent: (indent) => {\n                    return TypeOperations.shiftIndent(config, indent);\n                },\n                normalizeIndentation: (indent) => {\n                    return config.normalizeIndentation(indent);\n                }\n            }, config.languageConfigurationService);\n            if (ir) {\n                let oldEndViewColumn = config.visibleColumnFromColumn(model, range.getEndPosition());\n                const oldEndColumn = range.endColumn;\n                const newLineContent = model.getLineContent(range.endLineNumber);\n                const firstNonWhitespace = strings.firstNonWhitespaceIndex(newLineContent);\n                if (firstNonWhitespace >= 0) {\n                    range = range.setEndPosition(range.endLineNumber, Math.max(range.endColumn, firstNonWhitespace + 1));\n                }\n                else {\n                    range = range.setEndPosition(range.endLineNumber, model.getLineMaxColumn(range.endLineNumber));\n                }\n                if (keepPosition) {\n                    return new ReplaceCommandWithoutChangingPosition(range, '\\n' + config.normalizeIndentation(ir.afterEnter), true);\n                }\n                else {\n                    let offset = 0;\n                    if (oldEndColumn <= firstNonWhitespace + 1) {\n                        if (!config.insertSpaces) {\n                            oldEndViewColumn = Math.ceil(oldEndViewColumn / config.indentSize);\n                        }\n                        offset = Math.min(oldEndViewColumn + 1 - config.normalizeIndentation(ir.afterEnter).length - 1, 0);\n                    }\n                    return new ReplaceCommandWithOffsetCursorState(range, '\\n' + config.normalizeIndentation(ir.afterEnter), 0, offset, true);\n                }\n            }\n        }\n        return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation), keepPosition);\n    }\n    static _isAutoIndentType(config, model, selections) {\n        if (config.autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n            return false;\n        }\n        for (let i = 0, len = selections.length; i < len; i++) {\n            if (!model.tokenization.isCheapToTokenize(selections[i].getEndPosition().lineNumber)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static _runAutoIndentType(config, model, range, ch) {\n        const currentIndentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n        const actualIndentation = getIndentActionForType(config.autoIndent, model, range, ch, {\n            shiftIndent: (indentation) => {\n                return TypeOperations.shiftIndent(config, indentation);\n            },\n            unshiftIndent: (indentation) => {\n                return TypeOperations.unshiftIndent(config, indentation);\n            },\n        }, config.languageConfigurationService);\n        if (actualIndentation === null) {\n            return null;\n        }\n        if (actualIndentation !== config.normalizeIndentation(currentIndentation)) {\n            const firstNonWhitespace = model.getLineFirstNonWhitespaceColumn(range.startLineNumber);\n            if (firstNonWhitespace === 0) {\n                return TypeOperations._typeCommand(new Range(range.startLineNumber, 1, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) + ch, false);\n            }\n            else {\n                return TypeOperations._typeCommand(new Range(range.startLineNumber, 1, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) +\n                    model.getLineContent(range.startLineNumber).substring(firstNonWhitespace - 1, range.startColumn - 1) + ch, false);\n            }\n        }\n        return null;\n    }\n    static _isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch) {\n        if (config.autoClosingOvertype === 'never') {\n            return false;\n        }\n        if (!config.autoClosingPairs.autoClosingPairsCloseSingleChar.has(ch)) {\n            return false;\n        }\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            if (!selection.isEmpty()) {\n                return false;\n            }\n            const position = selection.getPosition();\n            const lineText = model.getLineContent(position.lineNumber);\n            const afterCharacter = lineText.charAt(position.column - 1);\n            if (afterCharacter !== ch) {\n                return false;\n            }\n            // Do not over-type quotes after a backslash\n            const chIsQuote = isQuote(ch);\n            const beforeCharacter = position.column > 2 ? lineText.charCodeAt(position.column - 2) : 0 /* CharCode.Null */;\n            if (beforeCharacter === 92 /* CharCode.Backslash */ && chIsQuote) {\n                return false;\n            }\n            // Must over-type a closing character typed by the editor\n            if (config.autoClosingOvertype === 'auto') {\n                let found = false;\n                for (let j = 0, lenJ = autoClosedCharacters.length; j < lenJ; j++) {\n                    const autoClosedCharacter = autoClosedCharacters[j];\n                    if (position.lineNumber === autoClosedCharacter.startLineNumber && position.column === autoClosedCharacter.startColumn) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    static _runAutoClosingOvertype(prevEditOperationType, config, model, selections, ch) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            const position = selection.getPosition();\n            const typeSelection = new Range(position.lineNumber, position.column, position.lineNumber, position.column + 1);\n            commands[i] = new ReplaceCommand(typeSelection, ch);\n        }\n        return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n            shouldPushStackElementBefore: shouldPushStackElementBetween(prevEditOperationType, 4 /* EditOperationType.TypingOther */),\n            shouldPushStackElementAfter: false\n        });\n    }\n    static _isBeforeClosingBrace(config, lineAfter) {\n        // If the start of lineAfter can be interpretted as both a starting or ending brace, default to returning false\n        const nextChar = lineAfter.charAt(0);\n        const potentialStartingBraces = config.autoClosingPairs.autoClosingPairsOpenByStart.get(nextChar) || [];\n        const potentialClosingBraces = config.autoClosingPairs.autoClosingPairsCloseByStart.get(nextChar) || [];\n        const isBeforeStartingBrace = potentialStartingBraces.some(x => lineAfter.startsWith(x.open));\n        const isBeforeClosingBrace = potentialClosingBraces.some(x => lineAfter.startsWith(x.close));\n        return !isBeforeStartingBrace && isBeforeClosingBrace;\n    }\n    /**\n     * Determine if typing `ch` at all `positions` in the `model` results in an\n     * auto closing open sequence being typed.\n     *\n     * Auto closing open sequences can consist of multiple characters, which\n     * can lead to ambiguities. In such a case, the longest auto-closing open\n     * sequence is returned.\n     */\n    static _findAutoClosingPairOpen(config, model, positions, ch) {\n        const candidates = config.autoClosingPairs.autoClosingPairsOpenByEnd.get(ch);\n        if (!candidates) {\n            return null;\n        }\n        // Determine which auto-closing pair it is\n        let result = null;\n        for (const candidate of candidates) {\n            if (result === null || candidate.open.length > result.open.length) {\n                let candidateIsMatch = true;\n                for (const position of positions) {\n                    const relevantText = model.getValueInRange(new Range(position.lineNumber, position.column - candidate.open.length + 1, position.lineNumber, position.column));\n                    if (relevantText + ch !== candidate.open) {\n                        candidateIsMatch = false;\n                        break;\n                    }\n                }\n                if (candidateIsMatch) {\n                    result = candidate;\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Find another auto-closing pair that is contained by the one passed in.\n     *\n     * e.g. when having [(,)] and [(*,*)] as auto-closing pairs\n     * this method will find [(,)] as a containment pair for [(*,*)]\n     */\n    static _findContainedAutoClosingPair(config, pair) {\n        if (pair.open.length <= 1) {\n            return null;\n        }\n        const lastChar = pair.close.charAt(pair.close.length - 1);\n        // get candidates with the same last character as close\n        const candidates = config.autoClosingPairs.autoClosingPairsCloseByEnd.get(lastChar) || [];\n        let result = null;\n        for (const candidate of candidates) {\n            if (candidate.open !== pair.open && pair.open.includes(candidate.open) && pair.close.endsWith(candidate.close)) {\n                if (!result || candidate.open.length > result.open.length) {\n                    result = candidate;\n                }\n            }\n        }\n        return result;\n    }\n    static _getAutoClosingPairClose(config, model, selections, ch, chIsAlreadyTyped) {\n        for (const selection of selections) {\n            if (!selection.isEmpty()) {\n                return null;\n            }\n        }\n        // This method is called both when typing (regularly) and when composition ends\n        // This means that we need to work with a text buffer where sometimes `ch` is not\n        // there (it is being typed right now) or with a text buffer where `ch` has already been typed\n        //\n        // In order to avoid adding checks for `chIsAlreadyTyped` in all places, we will work\n        // with two conceptual positions, the position before `ch` and the position after `ch`\n        //\n        const positions = selections.map((s) => {\n            const position = s.getPosition();\n            if (chIsAlreadyTyped) {\n                return { lineNumber: position.lineNumber, beforeColumn: position.column - ch.length, afterColumn: position.column };\n            }\n            else {\n                return { lineNumber: position.lineNumber, beforeColumn: position.column, afterColumn: position.column };\n            }\n        });\n        // Find the longest auto-closing open pair in case of multiple ending in `ch`\n        // e.g. when having [f\",\"] and [\",\"], it picks [f\",\"] if the character before is f\n        const pair = this._findAutoClosingPairOpen(config, model, positions.map(p => new Position(p.lineNumber, p.beforeColumn)), ch);\n        if (!pair) {\n            return null;\n        }\n        let autoCloseConfig;\n        let shouldAutoCloseBefore;\n        const chIsQuote = isQuote(ch);\n        if (chIsQuote) {\n            autoCloseConfig = config.autoClosingQuotes;\n            shouldAutoCloseBefore = config.shouldAutoCloseBefore.quote;\n        }\n        else {\n            const pairIsForComments = config.blockCommentStartToken ? pair.open.includes(config.blockCommentStartToken) : false;\n            if (pairIsForComments) {\n                autoCloseConfig = config.autoClosingComments;\n                shouldAutoCloseBefore = config.shouldAutoCloseBefore.comment;\n            }\n            else {\n                autoCloseConfig = config.autoClosingBrackets;\n                shouldAutoCloseBefore = config.shouldAutoCloseBefore.bracket;\n            }\n        }\n        if (autoCloseConfig === 'never') {\n            return null;\n        }\n        // Sometimes, it is possible to have two auto-closing pairs that have a containment relationship\n        // e.g. when having [(,)] and [(*,*)]\n        // - when typing (, the resulting state is (|)\n        // - when typing *, the desired resulting state is (*|*), not (*|*))\n        const containedPair = this._findContainedAutoClosingPair(config, pair);\n        const containedPairClose = containedPair ? containedPair.close : '';\n        let isContainedPairPresent = true;\n        for (const position of positions) {\n            const { lineNumber, beforeColumn, afterColumn } = position;\n            const lineText = model.getLineContent(lineNumber);\n            const lineBefore = lineText.substring(0, beforeColumn - 1);\n            const lineAfter = lineText.substring(afterColumn - 1);\n            if (!lineAfter.startsWith(containedPairClose)) {\n                isContainedPairPresent = false;\n            }\n            // Only consider auto closing the pair if an allowed character follows or if another autoclosed pair closing brace follows\n            if (lineAfter.length > 0) {\n                const characterAfter = lineAfter.charAt(0);\n                const isBeforeCloseBrace = TypeOperations._isBeforeClosingBrace(config, lineAfter);\n                if (!isBeforeCloseBrace && !shouldAutoCloseBefore(characterAfter)) {\n                    return null;\n                }\n            }\n            // Do not auto-close ' or \" after a word character\n            if (pair.open.length === 1 && (ch === '\\'' || ch === '\"') && autoCloseConfig !== 'always') {\n                const wordSeparators = getMapForWordSeparators(config.wordSeparators);\n                if (lineBefore.length > 0) {\n                    const characterBefore = lineBefore.charCodeAt(lineBefore.length - 1);\n                    if (wordSeparators.get(characterBefore) === 0 /* WordCharacterClass.Regular */) {\n                        return null;\n                    }\n                }\n            }\n            if (!model.tokenization.isCheapToTokenize(lineNumber)) {\n                // Do not force tokenization\n                return null;\n            }\n            model.tokenization.forceTokenization(lineNumber);\n            const lineTokens = model.tokenization.getLineTokens(lineNumber);\n            const scopedLineTokens = createScopedLineTokens(lineTokens, beforeColumn - 1);\n            if (!pair.shouldAutoClose(scopedLineTokens, beforeColumn - scopedLineTokens.firstCharOffset)) {\n                return null;\n            }\n            // Typing for example a quote could either start a new string, in which case auto-closing is desirable\n            // or it could end a previously started string, in which case auto-closing is not desirable\n            //\n            // In certain cases, it is really not possible to look at the previous token to determine\n            // what would happen. That's why we do something really unusual, we pretend to type a different\n            // character and ask the tokenizer what the outcome of doing that is: after typing a neutral\n            // character, are we in a string (i.e. the quote would most likely end a string) or not?\n            //\n            const neutralCharacter = pair.findNeutralCharacter();\n            if (neutralCharacter) {\n                const tokenType = model.tokenization.getTokenTypeIfInsertingCharacter(lineNumber, beforeColumn, neutralCharacter);\n                if (!pair.isOK(tokenType)) {\n                    return null;\n                }\n            }\n        }\n        if (isContainedPairPresent) {\n            return pair.close.substring(0, pair.close.length - containedPairClose.length);\n        }\n        else {\n            return pair.close;\n        }\n    }\n    static _runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, chIsAlreadyTyped, autoClosingPairClose) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            commands[i] = new TypeWithAutoClosingCommand(selection, ch, !chIsAlreadyTyped, autoClosingPairClose);\n        }\n        return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: false\n        });\n    }\n    static _shouldSurroundChar(config, ch) {\n        if (isQuote(ch)) {\n            return (config.autoSurround === 'quotes' || config.autoSurround === 'languageDefined');\n        }\n        else {\n            // Character is a bracket\n            return (config.autoSurround === 'brackets' || config.autoSurround === 'languageDefined');\n        }\n    }\n    static _isSurroundSelectionType(config, model, selections, ch) {\n        if (!TypeOperations._shouldSurroundChar(config, ch) || !config.surroundingPairs.hasOwnProperty(ch)) {\n            return false;\n        }\n        const isTypingAQuoteCharacter = isQuote(ch);\n        for (const selection of selections) {\n            if (selection.isEmpty()) {\n                return false;\n            }\n            let selectionContainsOnlyWhitespace = true;\n            for (let lineNumber = selection.startLineNumber; lineNumber <= selection.endLineNumber; lineNumber++) {\n                const lineText = model.getLineContent(lineNumber);\n                const startIndex = (lineNumber === selection.startLineNumber ? selection.startColumn - 1 : 0);\n                const endIndex = (lineNumber === selection.endLineNumber ? selection.endColumn - 1 : lineText.length);\n                const selectedText = lineText.substring(startIndex, endIndex);\n                if (/[^ \\t]/.test(selectedText)) {\n                    // this selected text contains something other than whitespace\n                    selectionContainsOnlyWhitespace = false;\n                    break;\n                }\n            }\n            if (selectionContainsOnlyWhitespace) {\n                return false;\n            }\n            if (isTypingAQuoteCharacter && selection.startLineNumber === selection.endLineNumber && selection.startColumn + 1 === selection.endColumn) {\n                const selectionText = model.getValueInRange(selection);\n                if (isQuote(selectionText)) {\n                    // Typing a quote character on top of another quote character\n                    // => disable surround selection type\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    static _runSurroundSelectionType(prevEditOperationType, config, model, selections, ch) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            const closeCharacter = config.surroundingPairs[ch];\n            commands[i] = new SurroundSelectionCommand(selection, ch, closeCharacter);\n        }\n        return new EditOperationResult(0 /* EditOperationType.Other */, commands, {\n            shouldPushStackElementBefore: true,\n            shouldPushStackElementAfter: true\n        });\n    }\n    static _isTypeInterceptorElectricChar(config, model, selections) {\n        if (selections.length === 1 && model.tokenization.isCheapToTokenize(selections[0].getEndPosition().lineNumber)) {\n            return true;\n        }\n        return false;\n    }\n    static _typeInterceptorElectricChar(prevEditOperationType, config, model, selection, ch) {\n        if (!config.electricChars.hasOwnProperty(ch) || !selection.isEmpty()) {\n            return null;\n        }\n        const position = selection.getPosition();\n        model.tokenization.forceTokenization(position.lineNumber);\n        const lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n        let electricAction;\n        try {\n            electricAction = config.onElectricCharacter(ch, lineTokens, position.column);\n        }\n        catch (e) {\n            onUnexpectedError(e);\n            return null;\n        }\n        if (!electricAction) {\n            return null;\n        }\n        if (electricAction.matchOpenBracket) {\n            const endColumn = (lineTokens.getLineContent() + ch).lastIndexOf(electricAction.matchOpenBracket) + 1;\n            const match = model.bracketPairs.findMatchingBracketUp(electricAction.matchOpenBracket, {\n                lineNumber: position.lineNumber,\n                column: endColumn\n            }, 500 /* give at most 500ms to compute */);\n            if (match) {\n                if (match.startLineNumber === position.lineNumber) {\n                    // matched something on the same line => no change in indentation\n                    return null;\n                }\n                const matchLine = model.getLineContent(match.startLineNumber);\n                const matchLineIndentation = strings.getLeadingWhitespace(matchLine);\n                const newIndentation = config.normalizeIndentation(matchLineIndentation);\n                const lineText = model.getLineContent(position.lineNumber);\n                const lineFirstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(position.lineNumber) || position.column;\n                const prefix = lineText.substring(lineFirstNonBlankColumn - 1, position.column - 1);\n                const typeText = newIndentation + prefix + ch;\n                const typeSelection = new Range(position.lineNumber, 1, position.lineNumber, position.column);\n                const command = new ReplaceCommand(typeSelection, typeText);\n                return new EditOperationResult(getTypingOperation(typeText, prevEditOperationType), [command], {\n                    shouldPushStackElementBefore: false,\n                    shouldPushStackElementAfter: true\n                });\n            }\n        }\n        return null;\n    }\n    /**\n     * This is very similar with typing, but the character is already in the text buffer!\n     */\n    static compositionEndWithInterceptors(prevEditOperationType, config, model, compositions, selections, autoClosedCharacters) {\n        if (!compositions) {\n            // could not deduce what the composition did\n            return null;\n        }\n        let insertedText = null;\n        for (const composition of compositions) {\n            if (insertedText === null) {\n                insertedText = composition.insertedText;\n            }\n            else if (insertedText !== composition.insertedText) {\n                // not all selections agree on what was typed\n                return null;\n            }\n        }\n        if (!insertedText || insertedText.length !== 1) {\n            // we're only interested in the case where a single character was inserted\n            return null;\n        }\n        const ch = insertedText;\n        let hasDeletion = false;\n        for (const composition of compositions) {\n            if (composition.deletedText.length !== 0) {\n                hasDeletion = true;\n                break;\n            }\n        }\n        if (hasDeletion) {\n            // Check if this could have been a surround selection\n            if (!TypeOperations._shouldSurroundChar(config, ch) || !config.surroundingPairs.hasOwnProperty(ch)) {\n                return null;\n            }\n            const isTypingAQuoteCharacter = isQuote(ch);\n            for (const composition of compositions) {\n                if (composition.deletedSelectionStart !== 0 || composition.deletedSelectionEnd !== composition.deletedText.length) {\n                    // more text was deleted than was selected, so this could not have been a surround selection\n                    return null;\n                }\n                if (/^[ \\t]+$/.test(composition.deletedText)) {\n                    // deleted text was only whitespace\n                    return null;\n                }\n                if (isTypingAQuoteCharacter && isQuote(composition.deletedText)) {\n                    // deleted text was a quote\n                    return null;\n                }\n            }\n            const positions = [];\n            for (const selection of selections) {\n                if (!selection.isEmpty()) {\n                    return null;\n                }\n                positions.push(selection.getPosition());\n            }\n            if (positions.length !== compositions.length) {\n                return null;\n            }\n            const commands = [];\n            for (let i = 0, len = positions.length; i < len; i++) {\n                commands.push(new CompositionSurroundSelectionCommand(positions[i], compositions[i].deletedText, config.surroundingPairs[ch]));\n            }\n            return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n                shouldPushStackElementBefore: true,\n                shouldPushStackElementAfter: false\n            });\n        }\n        if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\n            // Unfortunately, the close character is at this point \"doubled\", so we need to delete it...\n            const commands = selections.map(s => new ReplaceCommand(new Range(s.positionLineNumber, s.positionColumn, s.positionLineNumber, s.positionColumn + 1), '', false));\n            return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n                shouldPushStackElementBefore: true,\n                shouldPushStackElementAfter: false\n            });\n        }\n        const autoClosingPairClose = this._getAutoClosingPairClose(config, model, selections, ch, true);\n        if (autoClosingPairClose !== null) {\n            return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, true, autoClosingPairClose);\n        }\n        return null;\n    }\n    static typeWithInterceptors(isDoingComposition, prevEditOperationType, config, model, selections, autoClosedCharacters, ch) {\n        if (!isDoingComposition && ch === '\\n') {\n            const commands = [];\n            for (let i = 0, len = selections.length; i < len; i++) {\n                commands[i] = TypeOperations._enter(config, model, false, selections[i]);\n            }\n            return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n                shouldPushStackElementBefore: true,\n                shouldPushStackElementAfter: false,\n            });\n        }\n        if (!isDoingComposition && this._isAutoIndentType(config, model, selections)) {\n            const commands = [];\n            let autoIndentFails = false;\n            for (let i = 0, len = selections.length; i < len; i++) {\n                commands[i] = this._runAutoIndentType(config, model, selections[i], ch);\n                if (!commands[i]) {\n                    autoIndentFails = true;\n                    break;\n                }\n            }\n            if (!autoIndentFails) {\n                return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n                    shouldPushStackElementBefore: true,\n                    shouldPushStackElementAfter: false,\n                });\n            }\n        }\n        if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\n            return this._runAutoClosingOvertype(prevEditOperationType, config, model, selections, ch);\n        }\n        if (!isDoingComposition) {\n            const autoClosingPairClose = this._getAutoClosingPairClose(config, model, selections, ch, false);\n            if (autoClosingPairClose) {\n                return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, false, autoClosingPairClose);\n            }\n        }\n        if (!isDoingComposition && this._isSurroundSelectionType(config, model, selections, ch)) {\n            return this._runSurroundSelectionType(prevEditOperationType, config, model, selections, ch);\n        }\n        // Electric characters make sense only when dealing with a single cursor,\n        // as multiple cursors typing brackets for example would interfer with bracket matching\n        if (!isDoingComposition && this._isTypeInterceptorElectricChar(config, model, selections)) {\n            const r = this._typeInterceptorElectricChar(prevEditOperationType, config, model, selections[0], ch);\n            if (r) {\n                return r;\n            }\n        }\n        // A simple character type\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ReplaceCommand(selections[i], ch);\n        }\n        const opType = getTypingOperation(ch, prevEditOperationType);\n        return new EditOperationResult(opType, commands, {\n            shouldPushStackElementBefore: shouldPushStackElementBetween(prevEditOperationType, opType),\n            shouldPushStackElementAfter: false\n        });\n    }\n    static typeWithoutInterceptors(prevEditOperationType, config, model, selections, str) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ReplaceCommand(selections[i], str);\n        }\n        const opType = getTypingOperation(str, prevEditOperationType);\n        return new EditOperationResult(opType, commands, {\n            shouldPushStackElementBefore: shouldPushStackElementBetween(prevEditOperationType, opType),\n            shouldPushStackElementAfter: false\n        });\n    }\n    static lineInsertBefore(config, model, selections) {\n        if (model === null || selections === null) {\n            return [];\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            let lineNumber = selections[i].positionLineNumber;\n            if (lineNumber === 1) {\n                commands[i] = new ReplaceCommandWithoutChangingPosition(new Range(1, 1, 1, 1), '\\n');\n            }\n            else {\n                lineNumber--;\n                const column = model.getLineMaxColumn(lineNumber);\n                commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\n            }\n        }\n        return commands;\n    }\n    static lineInsertAfter(config, model, selections) {\n        if (model === null || selections === null) {\n            return [];\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const lineNumber = selections[i].positionLineNumber;\n            const column = model.getLineMaxColumn(lineNumber);\n            commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\n        }\n        return commands;\n    }\n    static lineBreakInsert(config, model, selections) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = this._enter(config, model, true, selections[i]);\n        }\n        return commands;\n    }\n}\nexport class TypeWithAutoClosingCommand extends ReplaceCommandWithOffsetCursorState {\n    constructor(selection, openCharacter, insertOpenCharacter, closeCharacter) {\n        super(selection, (insertOpenCharacter ? openCharacter : '') + closeCharacter, 0, -closeCharacter.length);\n        this._openCharacter = openCharacter;\n        this._closeCharacter = closeCharacter;\n        this.closeCharacterRange = null;\n        this.enclosingRange = null;\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        const range = inverseEditOperations[0].range;\n        this.closeCharacterRange = new Range(range.startLineNumber, range.endColumn - this._closeCharacter.length, range.endLineNumber, range.endColumn);\n        this.enclosingRange = new Range(range.startLineNumber, range.endColumn - this._openCharacter.length - this._closeCharacter.length, range.endLineNumber, range.endColumn);\n        return super.computeCursorState(model, helper);\n    }\n}\nexport class CompositionOutcome {\n    constructor(deletedText, deletedSelectionStart, deletedSelectionEnd, insertedText, insertedSelectionStart, insertedSelectionEnd) {\n        this.deletedText = deletedText;\n        this.deletedSelectionStart = deletedSelectionStart;\n        this.deletedSelectionEnd = deletedSelectionEnd;\n        this.insertedText = insertedText;\n        this.insertedSelectionStart = insertedSelectionStart;\n        this.insertedSelectionEnd = insertedSelectionEnd;\n    }\n}\nfunction getTypingOperation(typedText, previousTypingOperation) {\n    if (typedText === ' ') {\n        return previousTypingOperation === 5 /* EditOperationType.TypingFirstSpace */\n            || previousTypingOperation === 6 /* EditOperationType.TypingConsecutiveSpace */\n            ? 6 /* EditOperationType.TypingConsecutiveSpace */\n            : 5 /* EditOperationType.TypingFirstSpace */;\n    }\n    return 4 /* EditOperationType.TypingOther */;\n}\nfunction shouldPushStackElementBetween(previousTypingOperation, typingOperation) {\n    if (isTypingOperation(previousTypingOperation) && !isTypingOperation(typingOperation)) {\n        // Always set an undo stop before non-type operations\n        return true;\n    }\n    if (previousTypingOperation === 5 /* EditOperationType.TypingFirstSpace */) {\n        // `abc |d`: No undo stop\n        // `abc  |d`: Undo stop\n        return false;\n    }\n    // Insert undo stop between different operation types\n    return normalizeOperationType(previousTypingOperation) !== normalizeOperationType(typingOperation);\n}\nfunction normalizeOperationType(type) {\n    return (type === 6 /* EditOperationType.TypingConsecutiveSpace */ || type === 5 /* EditOperationType.TypingFirstSpace */)\n        ? 'space'\n        : type;\n}\nfunction isTypingOperation(type) {\n    return type === 4 /* EditOperationType.TypingOther */\n        || type === 5 /* EditOperationType.TypingFirstSpace */\n        || type === 6 /* EditOperationType.TypingConsecutiveSpace */;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { SingleCursorState } from '../cursorCommon.js';\nimport { DeleteOperations } from './cursorDeleteOperations.js';\nimport { getMapForWordSeparators } from '../core/wordCharacterClassifier.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class WordOperations {\n    static _createWord(lineContent, wordType, nextCharClass, start, end) {\n        // console.log('WORD ==> ' + start + ' => ' + end + ':::: <<<' + lineContent.substring(start, end) + '>>>');\n        return { start: start, end: end, wordType: wordType, nextCharClass: nextCharClass };\n    }\n    static _findPreviousWordOnLine(wordSeparators, model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        return this._doFindPreviousWordOnLine(lineContent, wordSeparators, position);\n    }\n    static _doFindPreviousWordOnLine(lineContent, wordSeparators, position) {\n        let wordType = 0 /* WordType.None */;\n        for (let chIndex = position.column - 2; chIndex >= 0; chIndex--) {\n            const chCode = lineContent.charCodeAt(chIndex);\n            const chClass = wordSeparators.get(chCode);\n            if (chClass === 0 /* WordCharacterClass.Regular */) {\n                if (wordType === 2 /* WordType.Separator */) {\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n                }\n                wordType = 1 /* WordType.Regular */;\n            }\n            else if (chClass === 2 /* WordCharacterClass.WordSeparator */) {\n                if (wordType === 1 /* WordType.Regular */) {\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n                }\n                wordType = 2 /* WordType.Separator */;\n            }\n            else if (chClass === 1 /* WordCharacterClass.Whitespace */) {\n                if (wordType !== 0 /* WordType.None */) {\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\n                }\n            }\n        }\n        if (wordType !== 0 /* WordType.None */) {\n            return this._createWord(lineContent, wordType, 1 /* WordCharacterClass.Whitespace */, 0, this._findEndOfWord(lineContent, wordSeparators, wordType, 0));\n        }\n        return null;\n    }\n    static _findEndOfWord(lineContent, wordSeparators, wordType, startIndex) {\n        const len = lineContent.length;\n        for (let chIndex = startIndex; chIndex < len; chIndex++) {\n            const chCode = lineContent.charCodeAt(chIndex);\n            const chClass = wordSeparators.get(chCode);\n            if (chClass === 1 /* WordCharacterClass.Whitespace */) {\n                return chIndex;\n            }\n            if (wordType === 1 /* WordType.Regular */ && chClass === 2 /* WordCharacterClass.WordSeparator */) {\n                return chIndex;\n            }\n            if (wordType === 2 /* WordType.Separator */ && chClass === 0 /* WordCharacterClass.Regular */) {\n                return chIndex;\n            }\n        }\n        return len;\n    }\n    static _findNextWordOnLine(wordSeparators, model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        return this._doFindNextWordOnLine(lineContent, wordSeparators, position);\n    }\n    static _doFindNextWordOnLine(lineContent, wordSeparators, position) {\n        let wordType = 0 /* WordType.None */;\n        const len = lineContent.length;\n        for (let chIndex = position.column - 1; chIndex < len; chIndex++) {\n            const chCode = lineContent.charCodeAt(chIndex);\n            const chClass = wordSeparators.get(chCode);\n            if (chClass === 0 /* WordCharacterClass.Regular */) {\n                if (wordType === 2 /* WordType.Separator */) {\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n                }\n                wordType = 1 /* WordType.Regular */;\n            }\n            else if (chClass === 2 /* WordCharacterClass.WordSeparator */) {\n                if (wordType === 1 /* WordType.Regular */) {\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n                }\n                wordType = 2 /* WordType.Separator */;\n            }\n            else if (chClass === 1 /* WordCharacterClass.Whitespace */) {\n                if (wordType !== 0 /* WordType.None */) {\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\n                }\n            }\n        }\n        if (wordType !== 0 /* WordType.None */) {\n            return this._createWord(lineContent, wordType, 1 /* WordCharacterClass.Whitespace */, this._findStartOfWord(lineContent, wordSeparators, wordType, len - 1), len);\n        }\n        return null;\n    }\n    static _findStartOfWord(lineContent, wordSeparators, wordType, startIndex) {\n        for (let chIndex = startIndex; chIndex >= 0; chIndex--) {\n            const chCode = lineContent.charCodeAt(chIndex);\n            const chClass = wordSeparators.get(chCode);\n            if (chClass === 1 /* WordCharacterClass.Whitespace */) {\n                return chIndex + 1;\n            }\n            if (wordType === 1 /* WordType.Regular */ && chClass === 2 /* WordCharacterClass.WordSeparator */) {\n                return chIndex + 1;\n            }\n            if (wordType === 2 /* WordType.Separator */ && chClass === 0 /* WordCharacterClass.Regular */) {\n                return chIndex + 1;\n            }\n        }\n        return 0;\n    }\n    static moveWordLeft(wordSeparators, model, position, wordNavigationType) {\n        let lineNumber = position.lineNumber;\n        let column = position.column;\n        if (column === 1) {\n            if (lineNumber > 1) {\n                lineNumber = lineNumber - 1;\n                column = model.getLineMaxColumn(lineNumber);\n            }\n        }\n        let prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, column));\n        if (wordNavigationType === 0 /* WordNavigationType.WordStart */) {\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n        }\n        if (wordNavigationType === 1 /* WordNavigationType.WordStartFast */) {\n            if (prevWordOnLine\n                && prevWordOnLine.wordType === 2 /* WordType.Separator */\n                && prevWordOnLine.end - prevWordOnLine.start === 1\n                && prevWordOnLine.nextCharClass === 0 /* WordCharacterClass.Regular */) {\n                // Skip over a word made up of one single separator and followed by a regular character\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n            }\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n        }\n        if (wordNavigationType === 3 /* WordNavigationType.WordAccessibility */) {\n            while (prevWordOnLine\n                && prevWordOnLine.wordType === 2 /* WordType.Separator */) {\n                // Skip over words made up of only separators\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n            }\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\n        }\n        // We are stopping at the ending of words\n        if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\n            prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n        }\n        return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.end + 1 : 1);\n    }\n    static _moveWordPartLeft(model, position) {\n        const lineNumber = position.lineNumber;\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (position.column === 1) {\n            return (lineNumber > 1 ? new Position(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)) : position);\n        }\n        const lineContent = model.getLineContent(lineNumber);\n        for (let column = position.column - 1; column > 1; column--) {\n            const left = lineContent.charCodeAt(column - 2);\n            const right = lineContent.charCodeAt(column - 1);\n            if (left === 95 /* CharCode.Underline */ && right !== 95 /* CharCode.Underline */) {\n                // snake_case_variables\n                return new Position(lineNumber, column);\n            }\n            if (left === 45 /* CharCode.Dash */ && right !== 45 /* CharCode.Dash */) {\n                // kebab-case-variables\n                return new Position(lineNumber, column);\n            }\n            if ((strings.isLowerAsciiLetter(left) || strings.isAsciiDigit(left)) && strings.isUpperAsciiLetter(right)) {\n                // camelCaseVariables\n                return new Position(lineNumber, column);\n            }\n            if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\n                // thisIsACamelCaseWithOneLetterWords\n                if (column + 1 < maxColumn) {\n                    const rightRight = lineContent.charCodeAt(column);\n                    if (strings.isLowerAsciiLetter(rightRight) || strings.isAsciiDigit(rightRight)) {\n                        return new Position(lineNumber, column);\n                    }\n                }\n            }\n        }\n        return new Position(lineNumber, 1);\n    }\n    static moveWordRight(wordSeparators, model, position, wordNavigationType) {\n        let lineNumber = position.lineNumber;\n        let column = position.column;\n        let movedDown = false;\n        if (column === model.getLineMaxColumn(lineNumber)) {\n            if (lineNumber < model.getLineCount()) {\n                movedDown = true;\n                lineNumber = lineNumber + 1;\n                column = 1;\n            }\n        }\n        let nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, column));\n        if (wordNavigationType === 2 /* WordNavigationType.WordEnd */) {\n            if (nextWordOnLine && nextWordOnLine.wordType === 2 /* WordType.Separator */) {\n                if (nextWordOnLine.end - nextWordOnLine.start === 1 && nextWordOnLine.nextCharClass === 0 /* WordCharacterClass.Regular */) {\n                    // Skip over a word made up of one single separator and followed by a regular character\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n                }\n            }\n            if (nextWordOnLine) {\n                column = nextWordOnLine.end + 1;\n            }\n            else {\n                column = model.getLineMaxColumn(lineNumber);\n            }\n        }\n        else if (wordNavigationType === 3 /* WordNavigationType.WordAccessibility */) {\n            if (movedDown) {\n                // If we move to the next line, pretend that the cursor is right before the first character.\n                // This is needed when the first word starts right at the first character - and in order not to miss it,\n                // we need to start before.\n                column = 0;\n            }\n            while (nextWordOnLine\n                && (nextWordOnLine.wordType === 2 /* WordType.Separator */\n                    || nextWordOnLine.start + 1 <= column)) {\n                // Skip over a word made up of one single separator\n                // Also skip over word if it begins before current cursor position to ascertain we're moving forward at least 1 character.\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n            }\n            if (nextWordOnLine) {\n                column = nextWordOnLine.start + 1;\n            }\n            else {\n                column = model.getLineMaxColumn(lineNumber);\n            }\n        }\n        else {\n            if (nextWordOnLine && !movedDown && column >= nextWordOnLine.start + 1) {\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n            }\n            if (nextWordOnLine) {\n                column = nextWordOnLine.start + 1;\n            }\n            else {\n                column = model.getLineMaxColumn(lineNumber);\n            }\n        }\n        return new Position(lineNumber, column);\n    }\n    static _moveWordPartRight(model, position) {\n        const lineNumber = position.lineNumber;\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (position.column === maxColumn) {\n            return (lineNumber < model.getLineCount() ? new Position(lineNumber + 1, 1) : position);\n        }\n        const lineContent = model.getLineContent(lineNumber);\n        for (let column = position.column + 1; column < maxColumn; column++) {\n            const left = lineContent.charCodeAt(column - 2);\n            const right = lineContent.charCodeAt(column - 1);\n            if (left !== 95 /* CharCode.Underline */ && right === 95 /* CharCode.Underline */) {\n                // snake_case_variables\n                return new Position(lineNumber, column);\n            }\n            if (left !== 45 /* CharCode.Dash */ && right === 45 /* CharCode.Dash */) {\n                // kebab-case-variables\n                return new Position(lineNumber, column);\n            }\n            if ((strings.isLowerAsciiLetter(left) || strings.isAsciiDigit(left)) && strings.isUpperAsciiLetter(right)) {\n                // camelCaseVariables\n                return new Position(lineNumber, column);\n            }\n            if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\n                // thisIsACamelCaseWithOneLetterWords\n                if (column + 1 < maxColumn) {\n                    const rightRight = lineContent.charCodeAt(column);\n                    if (strings.isLowerAsciiLetter(rightRight) || strings.isAsciiDigit(rightRight)) {\n                        return new Position(lineNumber, column);\n                    }\n                }\n            }\n        }\n        return new Position(lineNumber, maxColumn);\n    }\n    static _deleteWordLeftWhitespace(model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        const startIndex = position.column - 2;\n        const lastNonWhitespace = strings.lastNonWhitespaceIndex(lineContent, startIndex);\n        if (lastNonWhitespace + 1 < startIndex) {\n            return new Range(position.lineNumber, lastNonWhitespace + 2, position.lineNumber, position.column);\n        }\n        return null;\n    }\n    static deleteWordLeft(ctx, wordNavigationType) {\n        const wordSeparators = ctx.wordSeparators;\n        const model = ctx.model;\n        const selection = ctx.selection;\n        const whitespaceHeuristics = ctx.whitespaceHeuristics;\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        if (DeleteOperations.isAutoClosingPairDelete(ctx.autoClosingDelete, ctx.autoClosingBrackets, ctx.autoClosingQuotes, ctx.autoClosingPairs.autoClosingPairsOpenByEnd, ctx.model, [ctx.selection], ctx.autoClosedCharacters)) {\n            const position = ctx.selection.getPosition();\n            return new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column + 1);\n        }\n        const position = new Position(selection.positionLineNumber, selection.positionColumn);\n        let lineNumber = position.lineNumber;\n        let column = position.column;\n        if (lineNumber === 1 && column === 1) {\n            // Ignore deleting at beginning of file\n            return null;\n        }\n        if (whitespaceHeuristics) {\n            const r = this._deleteWordLeftWhitespace(model, position);\n            if (r) {\n                return r;\n            }\n        }\n        let prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n        if (wordNavigationType === 0 /* WordNavigationType.WordStart */) {\n            if (prevWordOnLine) {\n                column = prevWordOnLine.start + 1;\n            }\n            else {\n                if (column > 1) {\n                    column = 1;\n                }\n                else {\n                    lineNumber--;\n                    column = model.getLineMaxColumn(lineNumber);\n                }\n            }\n        }\n        else {\n            if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\n            }\n            if (prevWordOnLine) {\n                column = prevWordOnLine.end + 1;\n            }\n            else {\n                if (column > 1) {\n                    column = 1;\n                }\n                else {\n                    lineNumber--;\n                    column = model.getLineMaxColumn(lineNumber);\n                }\n            }\n        }\n        return new Range(lineNumber, column, position.lineNumber, position.column);\n    }\n    static deleteInsideWord(wordSeparators, model, selection) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const position = new Position(selection.positionLineNumber, selection.positionColumn);\n        const r = this._deleteInsideWordWhitespace(model, position);\n        if (r) {\n            return r;\n        }\n        return this._deleteInsideWordDetermineDeleteRange(wordSeparators, model, position);\n    }\n    static _charAtIsWhitespace(str, index) {\n        const charCode = str.charCodeAt(index);\n        return (charCode === 32 /* CharCode.Space */ || charCode === 9 /* CharCode.Tab */);\n    }\n    static _deleteInsideWordWhitespace(model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        const lineContentLength = lineContent.length;\n        if (lineContentLength === 0) {\n            // empty line\n            return null;\n        }\n        let leftIndex = Math.max(position.column - 2, 0);\n        if (!this._charAtIsWhitespace(lineContent, leftIndex)) {\n            // touches a non-whitespace character to the left\n            return null;\n        }\n        let rightIndex = Math.min(position.column - 1, lineContentLength - 1);\n        if (!this._charAtIsWhitespace(lineContent, rightIndex)) {\n            // touches a non-whitespace character to the right\n            return null;\n        }\n        // walk over whitespace to the left\n        while (leftIndex > 0 && this._charAtIsWhitespace(lineContent, leftIndex - 1)) {\n            leftIndex--;\n        }\n        // walk over whitespace to the right\n        while (rightIndex + 1 < lineContentLength && this._charAtIsWhitespace(lineContent, rightIndex + 1)) {\n            rightIndex++;\n        }\n        return new Range(position.lineNumber, leftIndex + 1, position.lineNumber, rightIndex + 2);\n    }\n    static _deleteInsideWordDetermineDeleteRange(wordSeparators, model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        const lineLength = lineContent.length;\n        if (lineLength === 0) {\n            // empty line\n            if (position.lineNumber > 1) {\n                return new Range(position.lineNumber - 1, model.getLineMaxColumn(position.lineNumber - 1), position.lineNumber, 1);\n            }\n            else {\n                if (position.lineNumber < model.getLineCount()) {\n                    return new Range(position.lineNumber, 1, position.lineNumber + 1, 1);\n                }\n                else {\n                    // empty model\n                    return new Range(position.lineNumber, 1, position.lineNumber, 1);\n                }\n            }\n        }\n        const touchesWord = (word) => {\n            return (word.start + 1 <= position.column && position.column <= word.end + 1);\n        };\n        const createRangeWithPosition = (startColumn, endColumn) => {\n            startColumn = Math.min(startColumn, position.column);\n            endColumn = Math.max(endColumn, position.column);\n            return new Range(position.lineNumber, startColumn, position.lineNumber, endColumn);\n        };\n        const deleteWordAndAdjacentWhitespace = (word) => {\n            let startColumn = word.start + 1;\n            let endColumn = word.end + 1;\n            let expandedToTheRight = false;\n            while (endColumn - 1 < lineLength && this._charAtIsWhitespace(lineContent, endColumn - 1)) {\n                expandedToTheRight = true;\n                endColumn++;\n            }\n            if (!expandedToTheRight) {\n                while (startColumn > 1 && this._charAtIsWhitespace(lineContent, startColumn - 2)) {\n                    startColumn--;\n                }\n            }\n            return createRangeWithPosition(startColumn, endColumn);\n        };\n        const prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n        if (prevWordOnLine && touchesWord(prevWordOnLine)) {\n            return deleteWordAndAdjacentWhitespace(prevWordOnLine);\n        }\n        const nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n        if (nextWordOnLine && touchesWord(nextWordOnLine)) {\n            return deleteWordAndAdjacentWhitespace(nextWordOnLine);\n        }\n        if (prevWordOnLine && nextWordOnLine) {\n            return createRangeWithPosition(prevWordOnLine.end + 1, nextWordOnLine.start + 1);\n        }\n        if (prevWordOnLine) {\n            return createRangeWithPosition(prevWordOnLine.start + 1, prevWordOnLine.end + 1);\n        }\n        if (nextWordOnLine) {\n            return createRangeWithPosition(nextWordOnLine.start + 1, nextWordOnLine.end + 1);\n        }\n        return createRangeWithPosition(1, lineLength + 1);\n    }\n    static _deleteWordPartLeft(model, selection) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const pos = selection.getPosition();\n        const toPosition = WordOperations._moveWordPartLeft(model, pos);\n        return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\n    }\n    static _findFirstNonWhitespaceChar(str, startIndex) {\n        const len = str.length;\n        for (let chIndex = startIndex; chIndex < len; chIndex++) {\n            const ch = str.charAt(chIndex);\n            if (ch !== ' ' && ch !== '\\t') {\n                return chIndex;\n            }\n        }\n        return len;\n    }\n    static _deleteWordRightWhitespace(model, position) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        const startIndex = position.column - 1;\n        const firstNonWhitespace = this._findFirstNonWhitespaceChar(lineContent, startIndex);\n        if (startIndex + 1 < firstNonWhitespace) {\n            // bingo\n            return new Range(position.lineNumber, position.column, position.lineNumber, firstNonWhitespace + 1);\n        }\n        return null;\n    }\n    static deleteWordRight(ctx, wordNavigationType) {\n        const wordSeparators = ctx.wordSeparators;\n        const model = ctx.model;\n        const selection = ctx.selection;\n        const whitespaceHeuristics = ctx.whitespaceHeuristics;\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const position = new Position(selection.positionLineNumber, selection.positionColumn);\n        let lineNumber = position.lineNumber;\n        let column = position.column;\n        const lineCount = model.getLineCount();\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (lineNumber === lineCount && column === maxColumn) {\n            // Ignore deleting at end of file\n            return null;\n        }\n        if (whitespaceHeuristics) {\n            const r = this._deleteWordRightWhitespace(model, position);\n            if (r) {\n                return r;\n            }\n        }\n        let nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n        if (wordNavigationType === 2 /* WordNavigationType.WordEnd */) {\n            if (nextWordOnLine) {\n                column = nextWordOnLine.end + 1;\n            }\n            else {\n                if (column < maxColumn || lineNumber === lineCount) {\n                    column = maxColumn;\n                }\n                else {\n                    lineNumber++;\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\n                    if (nextWordOnLine) {\n                        column = nextWordOnLine.start + 1;\n                    }\n                    else {\n                        column = model.getLineMaxColumn(lineNumber);\n                    }\n                }\n            }\n        }\n        else {\n            if (nextWordOnLine && column >= nextWordOnLine.start + 1) {\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\n            }\n            if (nextWordOnLine) {\n                column = nextWordOnLine.start + 1;\n            }\n            else {\n                if (column < maxColumn || lineNumber === lineCount) {\n                    column = maxColumn;\n                }\n                else {\n                    lineNumber++;\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\n                    if (nextWordOnLine) {\n                        column = nextWordOnLine.start + 1;\n                    }\n                    else {\n                        column = model.getLineMaxColumn(lineNumber);\n                    }\n                }\n            }\n        }\n        return new Range(lineNumber, column, position.lineNumber, position.column);\n    }\n    static _deleteWordPartRight(model, selection) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        const pos = selection.getPosition();\n        const toPosition = WordOperations._moveWordPartRight(model, pos);\n        return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\n    }\n    static _createWordAtPosition(model, lineNumber, word) {\n        const range = new Range(lineNumber, word.start + 1, lineNumber, word.end + 1);\n        return {\n            word: model.getValueInRange(range),\n            startColumn: range.startColumn,\n            endColumn: range.endColumn\n        };\n    }\n    static getWordAtPosition(model, _wordSeparators, position) {\n        const wordSeparators = getMapForWordSeparators(_wordSeparators);\n        const prevWord = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n        if (prevWord && prevWord.wordType === 1 /* WordType.Regular */ && prevWord.start <= position.column - 1 && position.column - 1 <= prevWord.end) {\n            return WordOperations._createWordAtPosition(model, position.lineNumber, prevWord);\n        }\n        const nextWord = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n        if (nextWord && nextWord.wordType === 1 /* WordType.Regular */ && nextWord.start <= position.column - 1 && position.column - 1 <= nextWord.end) {\n            return WordOperations._createWordAtPosition(model, position.lineNumber, nextWord);\n        }\n        return null;\n    }\n    static word(config, model, cursor, inSelectionMode, position) {\n        const wordSeparators = getMapForWordSeparators(config.wordSeparators);\n        const prevWord = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\n        const nextWord = WordOperations._findNextWordOnLine(wordSeparators, model, position);\n        if (!inSelectionMode) {\n            // Entering word selection for the first time\n            let startColumn;\n            let endColumn;\n            if (prevWord && prevWord.wordType === 1 /* WordType.Regular */ && prevWord.start <= position.column - 1 && position.column - 1 <= prevWord.end) {\n                // isTouchingPrevWord\n                startColumn = prevWord.start + 1;\n                endColumn = prevWord.end + 1;\n            }\n            else if (nextWord && nextWord.wordType === 1 /* WordType.Regular */ && nextWord.start <= position.column - 1 && position.column - 1 <= nextWord.end) {\n                // isTouchingNextWord\n                startColumn = nextWord.start + 1;\n                endColumn = nextWord.end + 1;\n            }\n            else {\n                if (prevWord) {\n                    startColumn = prevWord.end + 1;\n                }\n                else {\n                    startColumn = 1;\n                }\n                if (nextWord) {\n                    endColumn = nextWord.start + 1;\n                }\n                else {\n                    endColumn = model.getLineMaxColumn(position.lineNumber);\n                }\n            }\n            return new SingleCursorState(new Range(position.lineNumber, startColumn, position.lineNumber, endColumn), 1 /* SelectionStartKind.Word */, 0, new Position(position.lineNumber, endColumn), 0);\n        }\n        let startColumn;\n        let endColumn;\n        if (prevWord && prevWord.wordType === 1 /* WordType.Regular */ && prevWord.start < position.column - 1 && position.column - 1 < prevWord.end) {\n            // isInsidePrevWord\n            startColumn = prevWord.start + 1;\n            endColumn = prevWord.end + 1;\n        }\n        else if (nextWord && nextWord.wordType === 1 /* WordType.Regular */ && nextWord.start < position.column - 1 && position.column - 1 < nextWord.end) {\n            // isInsideNextWord\n            startColumn = nextWord.start + 1;\n            endColumn = nextWord.end + 1;\n        }\n        else {\n            startColumn = position.column;\n            endColumn = position.column;\n        }\n        const lineNumber = position.lineNumber;\n        let column;\n        if (cursor.selectionStart.containsPosition(position)) {\n            column = cursor.selectionStart.endColumn;\n        }\n        else if (position.isBeforeOrEqual(cursor.selectionStart.getStartPosition())) {\n            column = startColumn;\n            const possiblePosition = new Position(lineNumber, column);\n            if (cursor.selectionStart.containsPosition(possiblePosition)) {\n                column = cursor.selectionStart.endColumn;\n            }\n        }\n        else {\n            column = endColumn;\n            const possiblePosition = new Position(lineNumber, column);\n            if (cursor.selectionStart.containsPosition(possiblePosition)) {\n                column = cursor.selectionStart.startColumn;\n            }\n        }\n        return cursor.move(true, lineNumber, column, 0);\n    }\n}\nexport class WordPartOperations extends WordOperations {\n    static deleteWordPartLeft(ctx) {\n        const candidates = enforceDefined([\n            WordOperations.deleteWordLeft(ctx, 0 /* WordNavigationType.WordStart */),\n            WordOperations.deleteWordLeft(ctx, 2 /* WordNavigationType.WordEnd */),\n            WordOperations._deleteWordPartLeft(ctx.model, ctx.selection)\n        ]);\n        candidates.sort(Range.compareRangesUsingEnds);\n        return candidates[2];\n    }\n    static deleteWordPartRight(ctx) {\n        const candidates = enforceDefined([\n            WordOperations.deleteWordRight(ctx, 0 /* WordNavigationType.WordStart */),\n            WordOperations.deleteWordRight(ctx, 2 /* WordNavigationType.WordEnd */),\n            WordOperations._deleteWordPartRight(ctx.model, ctx.selection)\n        ]);\n        candidates.sort(Range.compareRangesUsingStarts);\n        return candidates[0];\n    }\n    static moveWordPartLeft(wordSeparators, model, position) {\n        const candidates = enforceDefined([\n            WordOperations.moveWordLeft(wordSeparators, model, position, 0 /* WordNavigationType.WordStart */),\n            WordOperations.moveWordLeft(wordSeparators, model, position, 2 /* WordNavigationType.WordEnd */),\n            WordOperations._moveWordPartLeft(model, position)\n        ]);\n        candidates.sort(Position.compare);\n        return candidates[2];\n    }\n    static moveWordPartRight(wordSeparators, model, position) {\n        const candidates = enforceDefined([\n            WordOperations.moveWordRight(wordSeparators, model, position, 0 /* WordNavigationType.WordStart */),\n            WordOperations.moveWordRight(wordSeparators, model, position, 2 /* WordNavigationType.WordEnd */),\n            WordOperations._moveWordPartRight(model, position)\n        ]);\n        candidates.sort(Position.compare);\n        return candidates[0];\n    }\n}\nfunction enforceDefined(arr) {\n    return arr.filter(el => Boolean(el));\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { createScopedLineTokens } from './languages/supports.js';\nimport { CursorColumns } from './core/cursorColumns.js';\nimport { normalizeIndentation } from './core/indentation.js';\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr) => (chr === ' ' || chr === '\\t');\nexport class CursorConfiguration {\n    static shouldRecreate(e) {\n        return (e.hasChanged(143 /* EditorOption.layoutInfo */)\n            || e.hasChanged(129 /* EditorOption.wordSeparators */)\n            || e.hasChanged(37 /* EditorOption.emptySelectionClipboard */)\n            || e.hasChanged(76 /* EditorOption.multiCursorMergeOverlapping */)\n            || e.hasChanged(78 /* EditorOption.multiCursorPaste */)\n            || e.hasChanged(79 /* EditorOption.multiCursorLimit */)\n            || e.hasChanged(6 /* EditorOption.autoClosingBrackets */)\n            || e.hasChanged(7 /* EditorOption.autoClosingComments */)\n            || e.hasChanged(11 /* EditorOption.autoClosingQuotes */)\n            || e.hasChanged(9 /* EditorOption.autoClosingDelete */)\n            || e.hasChanged(10 /* EditorOption.autoClosingOvertype */)\n            || e.hasChanged(14 /* EditorOption.autoSurround */)\n            || e.hasChanged(127 /* EditorOption.useTabStops */)\n            || e.hasChanged(50 /* EditorOption.fontInfo */)\n            || e.hasChanged(90 /* EditorOption.readOnly */));\n    }\n    constructor(languageId, modelOptions, configuration, languageConfigurationService) {\n        var _a;\n        this.languageConfigurationService = languageConfigurationService;\n        this._cursorMoveConfigurationBrand = undefined;\n        this._languageId = languageId;\n        const options = configuration.options;\n        const layoutInfo = options.get(143 /* EditorOption.layoutInfo */);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this.readOnly = options.get(90 /* EditorOption.readOnly */);\n        this.tabSize = modelOptions.tabSize;\n        this.indentSize = modelOptions.indentSize;\n        this.insertSpaces = modelOptions.insertSpaces;\n        this.stickyTabStops = options.get(115 /* EditorOption.stickyTabStops */);\n        this.lineHeight = fontInfo.lineHeight;\n        this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n        this.useTabStops = options.get(127 /* EditorOption.useTabStops */);\n        this.wordSeparators = options.get(129 /* EditorOption.wordSeparators */);\n        this.emptySelectionClipboard = options.get(37 /* EditorOption.emptySelectionClipboard */);\n        this.copyWithSyntaxHighlighting = options.get(25 /* EditorOption.copyWithSyntaxHighlighting */);\n        this.multiCursorMergeOverlapping = options.get(76 /* EditorOption.multiCursorMergeOverlapping */);\n        this.multiCursorPaste = options.get(78 /* EditorOption.multiCursorPaste */);\n        this.multiCursorLimit = options.get(79 /* EditorOption.multiCursorLimit */);\n        this.autoClosingBrackets = options.get(6 /* EditorOption.autoClosingBrackets */);\n        this.autoClosingComments = options.get(7 /* EditorOption.autoClosingComments */);\n        this.autoClosingQuotes = options.get(11 /* EditorOption.autoClosingQuotes */);\n        this.autoClosingDelete = options.get(9 /* EditorOption.autoClosingDelete */);\n        this.autoClosingOvertype = options.get(10 /* EditorOption.autoClosingOvertype */);\n        this.autoSurround = options.get(14 /* EditorOption.autoSurround */);\n        this.autoIndent = options.get(12 /* EditorOption.autoIndent */);\n        this.surroundingPairs = {};\n        this._electricChars = null;\n        this.shouldAutoCloseBefore = {\n            quote: this._getShouldAutoClose(languageId, this.autoClosingQuotes, true),\n            comment: this._getShouldAutoClose(languageId, this.autoClosingComments, false),\n            bracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets, false),\n        };\n        this.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n        const surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n        if (surroundingPairs) {\n            for (const pair of surroundingPairs) {\n                this.surroundingPairs[pair.open] = pair.close;\n            }\n        }\n        const commentsConfiguration = this.languageConfigurationService.getLanguageConfiguration(languageId).comments;\n        this.blockCommentStartToken = (_a = commentsConfiguration === null || commentsConfiguration === void 0 ? void 0 : commentsConfiguration.blockCommentStartToken) !== null && _a !== void 0 ? _a : null;\n    }\n    get electricChars() {\n        var _a;\n        if (!this._electricChars) {\n            this._electricChars = {};\n            const electricChars = (_a = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter) === null || _a === void 0 ? void 0 : _a.getElectricCharacters();\n            if (electricChars) {\n                for (const char of electricChars) {\n                    this._electricChars[char] = true;\n                }\n            }\n        }\n        return this._electricChars;\n    }\n    /**\n     * Should return opening bracket type to match indentation with\n     */\n    onElectricCharacter(character, context, column) {\n        const scopedLineTokens = createScopedLineTokens(context, column - 1);\n        const electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n        if (!electricCharacterSupport) {\n            return null;\n        }\n        return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n    }\n    normalizeIndentation(str) {\n        return normalizeIndentation(str, this.indentSize, this.insertSpaces);\n    }\n    _getShouldAutoClose(languageId, autoCloseConfig, forQuotes) {\n        switch (autoCloseConfig) {\n            case 'beforeWhitespace':\n                return autoCloseBeforeWhitespace;\n            case 'languageDefined':\n                return this._getLanguageDefinedShouldAutoClose(languageId, forQuotes);\n            case 'always':\n                return autoCloseAlways;\n            case 'never':\n                return autoCloseNever;\n        }\n    }\n    _getLanguageDefinedShouldAutoClose(languageId, forQuotes) {\n        const autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet(forQuotes);\n        return c => autoCloseBeforeSet.indexOf(c) !== -1;\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    visibleColumnFromColumn(model, position) {\n        return CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    columnFromVisibleColumn(model, lineNumber, visibleColumn) {\n        const result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n        const minColumn = model.getLineMinColumn(lineNumber);\n        if (result < minColumn) {\n            return minColumn;\n        }\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (result > maxColumn) {\n            return maxColumn;\n        }\n        return result;\n    }\n}\nexport class CursorState {\n    static fromModelState(modelState) {\n        return new PartialModelCursorState(modelState);\n    }\n    static fromViewState(viewState) {\n        return new PartialViewCursorState(viewState);\n    }\n    static fromModelSelection(modelSelection) {\n        const selection = Selection.liftSelection(modelSelection);\n        const modelState = new SingleCursorState(Range.fromPositions(selection.getSelectionStart()), 0 /* SelectionStartKind.Simple */, 0, selection.getPosition(), 0);\n        return CursorState.fromModelState(modelState);\n    }\n    static fromModelSelections(modelSelections) {\n        const states = [];\n        for (let i = 0, len = modelSelections.length; i < len; i++) {\n            states[i] = this.fromModelSelection(modelSelections[i]);\n        }\n        return states;\n    }\n    constructor(modelState, viewState) {\n        this._cursorStateBrand = undefined;\n        this.modelState = modelState;\n        this.viewState = viewState;\n    }\n    equals(other) {\n        return (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n    }\n}\nexport class PartialModelCursorState {\n    constructor(modelState) {\n        this.modelState = modelState;\n        this.viewState = null;\n    }\n}\nexport class PartialViewCursorState {\n    constructor(viewState) {\n        this.modelState = null;\n        this.viewState = viewState;\n    }\n}\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n    constructor(selectionStart, selectionStartKind, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n        this.selectionStart = selectionStart;\n        this.selectionStartKind = selectionStartKind;\n        this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n        this.position = position;\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\n        this._singleCursorStateBrand = undefined;\n        this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n    }\n    equals(other) {\n        return (this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n            && this.leftoverVisibleColumns === other.leftoverVisibleColumns\n            && this.selectionStartKind === other.selectionStartKind\n            && this.position.equals(other.position)\n            && this.selectionStart.equalsRange(other.selectionStart));\n    }\n    hasSelection() {\n        return (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n    }\n    move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n        if (inSelectionMode) {\n            // move just position\n            return new SingleCursorState(this.selectionStart, this.selectionStartKind, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n        else {\n            // move everything\n            return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0 /* SelectionStartKind.Simple */, leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n    }\n    static _computeSelection(selectionStart, position) {\n        if (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n            return Selection.fromPositions(selectionStart.getStartPosition(), position);\n        }\n        else {\n            return Selection.fromPositions(selectionStart.getEndPosition(), position);\n        }\n    }\n}\nexport class EditOperationResult {\n    constructor(type, commands, opts) {\n        this._editOperationResultBrand = undefined;\n        this.type = type;\n        this.commands = commands;\n        this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n        this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n    }\n}\nexport function isQuote(ch) {\n    return (ch === '\\'' || ch === '\"' || ch === '`');\n}\n"],"names":["diffEditorDefaultOptions","enableSplitViewResizing","splitViewDefaultRatio","renderSideBySide","renderMarginRevertIcon","maxComputationTime","maxFileSize","ignoreTrimWhitespace","renderIndicators","originalEditable","diffCodeLens","renderOverviewRuler","diffWordWrap","diffAlgorithm","accessibilityVerbose","experimental","showMoves","showEmptyDecorations","hideUnchangedRegions","enabled","contextLineCount","minimumLineCount","revealLineCount","isInEmbeddedEditor","onlyShowAccessibleDiffViewer","renderSideBySideInlineBreakpoint","useInlineViewWhenSpaceIsLimited","editorConfigurationBaseNode","Object","freeze","id","order","type","title","nls","scope","editorConfiguration","assign","properties","default","EDITOR_MODEL_DEFAULTS","tabSize","minimum","markdownDescription","enum","insertSpaces","detectIndentation","trimAutoWhitespace","description","largeFileOptimizations","enumDescriptions","tags","items","markdownEnumDescriptions","editorOption","editorOptionsRegistry","schema","x","anyOf","concat","name","key","hasOwnProperty","call","cachedEditorConfigurationKeys","getEditorConfigurationKeys","create","keys","forEach","prop","isEditorConfigurationKey","isDiffEditorConfigurationKey","Registry","as","Extensions","Configuration","registerConfiguration","MINIMAP_GUTTER_WIDTH","ConfigurationChangedEvent","constructor","values","this","_values","hasChanged","ComputeOptionsMemory","stableMinimapLayoutInput","stableFitMaxMinimapScale","stableFitRemainingWidth","BaseEditorOption","defaultValue","applyUpdate","value","update","compute","env","options","ApplyUpdateResult","newValue","didChange","Array","isArray","arrayEquals","arrays","result","ComputedEditorOption","undefined","validate","input","SimpleEditorOption","boolean","Boolean","EditorBooleanOption","arguments","length","super","clampedInt","maximum","r","parseInt","isNaN","Math","max","min","EditorIntOption","clampedFloat","EditorFloatOption","float","clamp","n","parseFloat","validationFn","EditorStringOption","string","stringSet","allowedValues","renamedValues","indexOf","EditorStringEnumOption","_allowedValues","EditorEnumOption","defaultStringValue","convert","_convert","TextEditorCursorStyle","EditorFontLigatures","OFF","ON","EditorFontVariations","TRANSLATE","fontInfo","fontVariationSettings","EditorFontWeight","EDITOR_FONT_DEFAULTS","fontWeight","MINIMUM_VALUE","MAXIMUM_VALUE","errorMessage","pattern","SUGGESTION_VALUES","String","EditorLayoutInfoComputer","_","computeLayout","memory","outerWidth","outerHeight","isDominatedByLongLines","lineHeight","viewLineCount","lineNumbersDigitCount","typicalHalfwidthCharacterWidth","maxDigitWidth","pixelRatio","glyphMarginDecorationLaneCount","computeContainedMinimapLineCount","typicalViewportLineCount","height","extraLinesBeforeFirstLine","floor","paddingTop","extraLinesBeyondLastLine","paddingBottom","scrollBeyondLastLine","desiredRatio","minimapLineCount","_computeMinimapLayout","minimap","renderMinimap","minimapLeft","minimapWidth","minimapHeightIsEditorHeight","minimapIsSampling","minimapScale","minimapLineHeight","minimapCanvasInnerWidth","minimapCanvasInnerHeight","minimapCanvasOuterWidth","minimapCanvasOuterHeight","couldUseMemory","side","size","showSlider","renderCharacters","maxColumn","scale","verticalScrollbarWidth","isViewportWrapping","minimapRenderCharacters","round","minimapMaxColumn","minimapSize","minimapSide","remainingWidth","baseCharHeight","minimapCharWidth","minimapWidthMultiplier","fitBecomesFill","maxMinimapScale","effectiveMinimapHeight","ceil","configuredMinimapScale","minimapMaxWidth","wordWrapOverride2","get","wordWrapOverride1","wordWrap","wordWrapColumn","showGlyphMargin","showLineNumbers","renderType","lineNumbersMinChars","padding","scrollbar","verticalScrollbarSize","verticalScrollbarHasArrows","verticalHasArrows","scrollbarArrowSize","arrowSize","horizontalScrollbarHeight","horizontalScrollbarSize","folding","showFoldingDecoration","lineDecorationsWidth","lineNumbersWidth","digitCount","glyphMarginWidth","glyphMarginLeft","lineNumbersLeft","decorationsLeft","contentLeft","isWordWrapMinified","wrappingColumn","minimapLayout","top","bottom","contentWidth","viewportColumn","verticalArrowSize","width","decorationsWidth","overviewRuler","right","filterValidationDecorations","renderValidationDecorations","_scrollbarVisibilityFromString","visibility","inUntrustedWorkspace","unicodeHighlightConfigKeys","allowedCharacters","invisibleCharacters","nonBasicASCII","ambiguousCharacters","includeComments","includeStrings","allowedLocales","primitiveSet","idx","fontFamily","platform","fontSize","letterSpacing","register","option","EditorOptions","acceptSuggestionOnCommitCharacter","acceptSuggestionOnEnter","accessibilitySupport","accessibilityPageSize","ariaLabel","ariaRequired","screenReaderAnnounceInlineSuggestion","autoClosingBrackets","autoClosingComments","autoClosingDelete","autoClosingOvertype","autoClosingQuotes","autoIndent","automaticLayout","autoSurround","bracketPairColorization","defaults","bracketPairColorizationOptions","independentColorPoolPerBracketType","_input","bracketPairGuides","bracketPairs","bracketPairsHorizontal","highlightActiveBracketPair","indentation","highlightActiveIndentation","stickyTabStops","codeLens","codeLensFontFamily","codeLensFontSize","colorDecorators","colorDecoratorActivatedOn","colorDecoratorsLimit","columnSelection","comments","insertSpace","ignoreEmptyLines","contextmenu","copyWithSyntaxHighlighting","cursorBlinking","cursorBlinkingStyle","cursorSmoothCaretAnimation","cursorStyle","Line","Block","Underline","LineThin","BlockOutline","UnderlineThin","cursorSurroundingLines","cursorSurroundingLinesStyle","cursorWidth","disableLayerHinting","disableMonospaceOptimizations","domReadOnly","dragAndDrop","emptySelectionClipboard","dropIntoEditor","showDropSelector","stickyScroll","maxLineCount","defaultModel","scrollWithEditor","experimentalWhitespaceRendering","extraEditorClassName","fastScrollSensitivity","find","cursorMoveOnType","seedSearchStringFromSelection","autoFindInSelection","globalFindClipboard","addExtraSpaceOnTop","loop","included","fixedOverflowWidgets","foldingStrategy","foldingHighlight","foldingImportsByDefault","foldingMaximumRegions","unfoldOnClickAfterEndOfLine","fontLigatures2","fontVariations","formatOnPaste","formatOnType","glyphMargin","gotoLocation","multiple","multipleDefinitions","multipleTypeDefinitions","multipleDeclarations","multipleImplementations","multipleReferences","alternativeDefinitionCommand","alternativeTypeDefinitionCommand","alternativeDeclarationCommand","alternativeImplementationCommand","alternativeReferenceCommand","jsonSubset","alternativeCommandOptions","deprecationMessage","_a","_b","_c","_d","_e","hideCursorInOverviewRuler","hover","delay","hidingDelay","sticky","above","inDiffEditor","lightbulb","test","substring","lineNumbers","renderFn","linkedEditing","links","matchBrackets","autohide","mouseStyle","mouseWheelScrollSensitivity","mouseWheelZoom","multiCursorMergeOverlapping","multiCursorModifier","comment","multiCursorPaste","multiCursorLimit","occurrencesHighlight","overviewRulerBorder","overviewRulerLanes","pasteAs","showPasteSelector","parameterHints","cycle","peekWidgetDefaultFocus","definitionLinkOpensInPeek","quickSuggestions","other","strings","types","additionalProperties","validatedOther","validatedComments","validatedStrings","quickSuggestionsDelay","readOnly","readOnlyMessage","renameOnType","markdownDeprecationMessage","renderControlCharacters","restricted","renderFinalNewline","renderLineHighlight","renderLineHighlightOnlyWhenFocus","renderWhitespace","revealHorizontalRightPadding","roundedSelection","rulers","columnSchema","column","color","format","_element","push","element","sort","a","b","vertical","horizontal","useShadows","horizontalHasArrows","horizontalSliderSize","verticalSliderSize","handleMouseWheel","alwaysConsumeMouseWheel","scrollByPage","scrollBeyondLastColumn","scrollPredominantAxis","selectionClipboard","selectionHighlight","selectOnLineNumbers","showFoldingControls","showUnused","showDeprecated","inlayHints","snippetSuggestions","smartSelect","selectLeadingAndTrailingWhitespace","selectSubwords","smoothScrolling","stopRenderingLineAfter","suggest","insertMode","filterGraceful","snippetsPreventQuickSuggestions","localityBonus","shareSuggestSelections","selectionMode","showIcons","showStatusBar","preview","previewMode","showInlineDetails","showMethods","showFunctions","showConstructors","matchOnWordStartOnly","showFields","showVariables","showClasses","showStructs","showInterfaces","showModules","showProperties","showEvents","showOperators","showUnits","showValues","showConstants","showEnums","showEnumMembers","showKeywords","showWords","showColors","showFiles","showReferences","showFolders","showTypeParameters","showSnippets","showUsers","showIssues","inlineSuggest","mode","showToolbar","suppressSuggestions","keepOnBlur","inlineCompletionsAccessibilityVerbose","suggestFontSize","suggestLineHeight","suggestOnTriggerCharacters","suggestSelection","tabCompletion","tabIndex","unicodeHighlight","_os","_vscode","objects","validateBooleanMap","map","entries","unusualLineTerminators","useShadowDOM","useTabStops","wordBreak","wordSeparators","USUAL_WORD_SEPARATORS","wordWrapBreakAfterCharacters","wordWrapBreakBeforeCharacters","editorClassName","classNames","join","defaultColorDecorators","tabFocusMode","layoutInfo","wrappingInfo","wrappingIndent","wrappingStrategy","EditorZoom","_zoomLevel","_onDidChangeZoomLevel","Emitter","onDidChangeZoomLevel","event","getZoomLevel","setZoomLevel","zoomLevel","fire","GOLDEN_LINE_HEIGHT_RATIO","BareFontInfo","createFromValidatedSettings","ignoreEditorZoom","fontFeatureSettings","_create","editorZoomLevelMultiplier","fontWeightAsNumber","opts","_bareFontInfoBrand","getId","getMassagedFontFamily","fallbackFontFamily","_wrapInQuotes","FontInfo","isTrusted","_editorStylingBrand","version","isMonospace","typicalFullwidthCharacterWidth","canUseHalfwidthRightwardsArrow","spaceWidth","middotWidth","wsmiddotWidth","equals","CharacterClassifier","_defaultValue","toUint8","_asciiMap","_createAsciiMap","_map","Map","asciiMap","Uint8Array","fill","set","charCode","_value","clear","CharacterSet","_actual","add","has","CursorColumns","_nextVisibleColumn","codePoint","visibleColumn","nextRenderTabStop","visibleColumnFromColumn","lineContent","textLen","text","iterator","eol","offset","nextGraphemeLength","columnFromVisibleColumn","lineContentLength","beforeVisibleColumn","beforeColumn","afterVisibleColumn","afterColumn","nextIndentTabStop","indentSize","prevRenderTabStop","prevIndentTabStop","EditOperation","insert","position","range","Range","lineNumber","forceMoveMarkers","delete","replace","replaceMove","editorLineHighlight","registerColor","dark","light","hcDark","hcLight","editorLineHighlightBorder","contrastBorder","editorCursorForeground","activeContrastBorder","editorFindMatchHighlight","Color","black","white","editorCursorBackground","editorWhitespaces","editorLineNumbers","deprecatedEditorIndentGuides","deprecatedEditorActiveIndentGuides","editorIndentGuide1","editorIndentGuide2","editorIndentGuide3","editorIndentGuide4","editorIndentGuide5","editorIndentGuide6","editorActiveIndentGuide1","editorActiveIndentGuide2","editorActiveIndentGuide3","editorActiveIndentGuide4","editorActiveIndentGuide5","editorActiveIndentGuide6","deprecatedEditorActiveLineNumber","editorDimmedLineNumber","editorOverviewRulerBorder","lightgrey","editorOverviewRulerBackground","editorUnnecessaryCodeOpacity","editorBackground","fromHex","transparent","rulerRangeDefault","RGBA","overviewRulerRangeHighlight","overviewRulerError","overviewRulerWarning","editorWarningForeground","editorWarningBorder","overviewRulerInfo","editorInfoForeground","editorInfoBorder","editorBracketHighlightingForeground1","editorBracketHighlightingForeground2","editorBracketHighlightingForeground3","editorBracketHighlightingForeground4","editorBracketHighlightingForeground5","editorBracketHighlightingForeground6","editorBracketHighlightingUnexpectedBracketForeground","editorBracketPairGuideBackground1","editorBracketPairGuideBackground2","editorBracketPairGuideBackground3","editorBracketPairGuideBackground4","editorBracketPairGuideBackground5","editorBracketPairGuideBackground6","editorBracketPairGuideActiveBackground1","editorBracketPairGuideActiveBackground2","editorBracketPairGuideActiveBackground3","editorBracketPairGuideActiveBackground4","editorBracketPairGuideActiveBackground5","editorBracketPairGuideActiveBackground6","registerThemingParticipant","theme","collector","background","getColor","lineHighlight","imeBackground","isTransparent","addRule","countEOL","eolCount","firstLineLength","lastLineStart","i","len","chr","charCodeAt","normalizeIndentation","str","firstNonWhitespaceIndex","spacesCnt","charAt","tabsCnt","_normalizeIndentationFromWhitespace","LineRange","fromRange","startLineNumber","endLineNumber","joinMany","lineRanges","LineRangeSet","slice","getUnion","ranges","ofLength","deserialize","lineRange","endLineNumberExclusive","BugIndicatingError","contains","isEmpty","delta","deltaLength","toString","intersect","intersectsStrict","overlapOrTouch","toInclusiveRange","Number","MAX_SAFE_INTEGER","toExclusiveRange","mapToLineArray","f","serialize","includes","toOffsetRange","OffsetRange","_normalizedRanges","addRange","joinRangeStartIdx","findFirstIdxMonotonousOrArrLen","joinRangeEndIdxExclusive","findLastIdxMonotonous","splice","joinRange","rangeThatStartsBeforeEnd","findLastMonotonous","i1","i2","current","next","lineRange1","lineRange2","subtractFrom","getIntersection","r1","r2","getWithDelta","sortedRanges","endExclusive","start","j","end","tryCreate","deltaStart","deltaEnd","containsRange","arr","clip","clipCyclic","OffsetRangeSet","_sortedRanges","intersectWithRange","intersection","intersectWithRangeLength","reduce","prev","cur","Position","with","newLineNumber","newColumn","deltaLineNumber","deltaColumn","isBefore","isBeforeOrEqual","compare","aLineNumber","bLineNumber","clone","lift","pos","isIPosition","obj","startColumn","endColumn","containsPosition","strictContainsPosition","otherRange","strictContainsRange","plusRange","intersectRanges","resultStartLineNumber","resultStartColumn","resultEndLineNumber","resultEndColumn","otherStartLineNumber","otherStartColumn","otherEndLineNumber","otherEndColumn","equalsRange","getEndPosition","getStartPosition","setEndPosition","setStartPosition","collapseToStart","collapseToEnd","lineCount","fromPositions","isIRange","areIntersectingOrTouching","areIntersecting","compareRangesUsingStarts","aStartLineNumber","bStartLineNumber","aStartColumn","bStartColumn","aEndLineNumber","bEndLineNumber","compareRangesUsingEnds","spansMultipleLines","toJSON","RGBA8","g","_rgba8Brand","_clamp","c","Empty","Selection","selectionStartLineNumber","selectionStartColumn","positionLineNumber","positionColumn","equalsSelection","selectionsEqual","getDirection","getPosition","getSelectionStart","direction","liftSelection","sel","selectionsArrEqual","isISelection","createWithDirection","_utf16LE_TextDecoder","_utf16BE_TextDecoder","_platformTextDecoder","getUTF16LE_TextDecoder","TextDecoder","getPlatformTextDecoder","decodeUTF16LE","source","view","Uint16Array","buffer","resultLen","fromCharCode","compatDecodeUTF16LE","decode","StringBuilder","capacity","_capacity","_buffer","_completedStrings","_bufferLength","reset","build","_flushBuffer","_buildBuffer","bufferString","appendCharCode","remainingSpace","appendASCIICharCode","appendString","strLen","escapeNewLine","TextChange","oldLength","oldText","oldEnd","oldPosition","newLength","newText","newEnd","newPosition","_writeStringSize","_writeString","_readString","writeSize","write","read","dest","compressConsecutiveTextChanges","prevEdits","currEdits","TextChangeCompressor","compress","_prevEdits","_currEdits","_result","_resultLen","_prevLen","_prevDeltaOffset","_currLen","_currDeltaOffset","prevIndex","currIndex","prevEdit","_getPrev","currEdit","_getCurr","_acceptCurr","_acceptPrev","e1","e2","_splitCurr","_splitPrev","mergePrev","mergeCurr","merged","_merge","_removeNoOps","_rebaseCurr","_rebasePrev","prevDeltaOffset","currDeltaOffset","edit","preText","substr","postText","edits","curr","WordCharacterClassifier","getMapForWordSeparators","computeFn","cache","once","DEFAULT_WORD_REGEXP","allowInWords","sep","RegExp","createWordRegExp","ensureValidWordDefinition","wordDefinition","global","flags","ignoreCase","multiline","unicode","lastIndex","_defaultConfig","LinkedList","getWordAtText","textOffset","config","Iterable","first","maxLen","t1","Date","now","prevRegexIndex","match","timeBudget","regexIndex","windowSize","thisMatch","_findRegexMatchEnclosingPosition","word","index","stopPos","exec","matchIndex","unshift","Cursor","context","_selTrackedRange","_trackSelection","_setState","SingleCursorState","dispose","_removeTrackedRange","startTrackingSelection","_updateTrackedRange","stopTrackingSelection","model","_setTrackedRange","modelState","selection","asCursorState","CursorState","viewState","readSelectionFromMarkers","_getTrackedRange","ensureValidState","setState","_validatePositionWithCache","viewModel","cacheInput","cacheOutput","normalizePosition","_validateViewState","sStartPosition","selectionStart","sEndPosition","validPosition","validSStartPosition","validSEndPosition","selectionStartKind","selectionStartLeftoverVisibleColumns","leftoverVisibleColumns","validateRange","validatePosition","coordinatesConverter","convertViewRangeToModelRange","convertViewPositionToModelPosition","viewSelectionStart","validateViewRange","viewPosition","validateViewPosition","viewSelectionStart1","convertModelPositionToViewPosition","viewSelectionStart2","CursorCollection","cursors","lastAddedCursorIndex","cursor","startTrackingSelections","stopTrackingSelections","updateContext","getAll","getViewPositions","getTopMostViewPosition","findFirstMinBy","compareBy","getBottomMostViewPosition","findLastMaxBy","getSelections","getViewSelections","setSelections","selections","setStates","fromModelSelections","getPrimaryCursor","states","_setSecondaryStates","secondaryStates","secondaryCursorsLength","secondaryStatesLength","createCnt","_addSecondaryCursor","removeCnt","_removeSecondaryCursor","killSecondaryCursors","getLastAddedCursorIndex","removeIndex","normalize","sortedCursors","s","sortedCursorIndex","currentSelection","nextSelection","cursorConfig","shouldMergeCursors","winnerSortedCursorIndex","looserSortedCursorIndex","looserIndex","winnerIndex","looserSelection","winnerSelection","resultingRange","looserSelectionIsLTR","winnerSelectionIsLTR","resultingSelectionIsLTR","resultingSelection","resultingState","fromModelSelection","sortedCursor","CursorContext","_cursorContextBrand","CursorsController","Disposable","_model","_knownModelVersionId","getVersionId","_viewModel","_coordinatesConverter","_cursors","_hasFocus","_isHandling","_compositionState","_columnSelectData","_autoClosedActions","_prevEditOperationType","updateConfiguration","onLineMappingChanged","eventsCollector","getCursorStates","setHasFocus","hasFocus","_validateAutoClosedActions","autoClosedAction","isValid","getPrimaryCursorState","reason","reachedMaxCursorCount","oldState","CursorModelState","from","_emitStateChangedIfNecessary","setCursorColumnSelectData","columnSelectData","revealPrimary","minimalReveal","verticalType","revealHorizontal","scrollType","viewPositions","revealViewRange","revealViewSelections","emitViewEvent","ViewRevealRangeRequestEvent","saveState","inSelectionMode","restoreState","desiredSelections","state","onModelContentChanged","ModelInjectedTextChangedEvent","e","rawContentChangedEvent","versionId","hadFlushEvent","containsEvent","cursorState","isUndoing","isRedoing","selectionsFromMarkers","getSelection","getCursorColumnSelectData","primaryCursor","isReal","fromViewLineNumber","fromViewVisualColumn","toViewLineNumber","toViewVisualColumn","getPrevEditOperationType","setPrevEditOperationType","_pushAutoClosedAction","autoClosedCharactersRanges","autoClosedEnclosingRanges","autoClosedCharactersDeltaDecorations","autoClosedEnclosingDeltaDecorations","inlineClassName","stickiness","autoClosedCharactersDecorations","deltaDecorations","autoClosedEnclosingDecorations","AutoClosedAction","_executeEditOperation","opResult","shouldPushStackElementBefore","pushStackElement","CommandExecutor","executeCommands","commands","_interpretCommandResult","command","TypeWithAutoClosingCommand","enclosingRange","closeCharacterRange","shouldPushStackElementAfter","newState","viewSelections","ViewCursorStateChangedEvent","some","newCursorState","oldSelections","oldModelVersionId","modelVersionId","emitOutgoingEvent","CursorStateChangedEvent","_findAutoClosingPairs","indices","m","closeChar","autoClosingPairsCandidates","autoClosingPairs","autoClosingPairsCloseSingleChar","openChar","open","closeCharIndex","openCharIndex","lastIndexOf","executeEdits","cursorStateComputer","autoClosingIndices","_isTracked","pushEditOperations","undoEdits","openCharInnerIndex","closeCharInnerIndex","undoEdit","_executeEdit","callback","cursorChangeReason","err","onUnexpectedError","getAutoClosedCharacters","getAllAutoClosedCharacters","startComposition","CompositionState","endComposition","compositionOutcome","deduceOutcome","TypeOperations","compositionEndWithInterceptors","charLength","typeWithInterceptors","typeWithoutInterceptors","compositionType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","newSelections","paste","pasteOnNewLine","multicursorText","cut","DeleteOperations","executeCommand","EditOperationResult","autoClosedActions","autoClosedCharacters","getAutoClosedCharactersRanges","_autoClosedCharactersDecorations","_autoClosedEnclosingDecorations","decorationRange","getDecorationRange","enclosingRanges","selectionsBefore","ctx","trackedRanges","trackedRangesDirection","_innerExecuteCommands","_arrayIsEmpty","commandsData","_getEditOperations","operations","rawOperations","loserCursorsMap","_getLoserCursorMap","console","warn","filteredOperations","identifier","major","hadTrackedEditOperation","selectionsAfter","inverseEditOperations","groupedInverseEditOperations","op","minorBasedSorter","minor","cursorSelections","computeCursorState","getInverseEditOperations","getTrackedSelection","losingCursors","losingCursorIndex","losingCursor","_getEditOperationsFromCommand","majorIdentifier","operationMinor","addEditOperation","isAutoWhitespaceEdit","insertsAutoWhitespace","editOperationBuilder","addTrackedEditOperation","trackSelection","_selection","trackPreviousOnEmpty","maxLineColumn","getLineMaxColumn","l","getEditOperations","previousOp","currentOp","loserMajor","CompositionLineState","startSelection","endSelection","_capture","textModel","getLineContent","_original","_deduceOutcome","original","commonPrefix","commonSuffix","deletedText","insertedText","CompositionOutcome","AtomicTabMoveOperations","whitespaceVisibleColumn","lineLength","prevTabStopPosition","prevTabStopVisibleColumn","atomicPosition","left","currentVisibleColumn","targetVisibleColumn","ColumnSelection","columnSelect","fromLineNumber","fromVisibleColumn","toLineNumber","toVisibleColumn","abs","reversed","isRTL","isLTR","visibleStartColumn","visibleEndColumn","viewStates","fromVisualColumn","toVisualColumn","columnSelectLeft","prevColumnSelectData","columnSelectRight","maxVisualViewColumn","minViewLineNumber","maxViewLineNumber","lineMaxViewColumn","lineMaxVisualViewColumn","columnSelectUp","isPaged","linesCount","pageSize","columnSelectDown","getLineCount","deleteRight","prevEditOperationType","deleteSelection","rightOfPosition","MoveOperations","ReplaceCommand","isAutoClosingPairDelete","autoClosingPairsOpen","lineText","character","autoClosingPairCandidates","isQuote","afterCharacter","foundAutoClosingPair","autoClosingPairCandidate","close","found","lenJ","autoClosedCharacter","_runAutoClosingPairDelete","deleteLeft","autoClosingPairsOpenByEnd","deleteRange","getDeleteRange","lastIndentationColumn","toColumn","getPositionAfterDeleteLeft","newLine","lastCutRange","CursorMove","CursorMoveCommands","addCursorDown","useLogicalLine","fromModelState","translateDown","fromViewState","addCursorUp","translateUp","moveToBeginningOfLine","_moveToLineStart","currentViewStateColumn","isFirstLineOfWrappedLine","currentViewStatelineNumber","firstNonBlankColumn","getLineFirstNonWhitespaceColumn","_moveToLineStartByModel","_moveToLineStartByView","moveToEndOfLine","_moveToLineEnd","viewStatePosition","viewModelMaxColumn","isEndOfViewLine","modelStatePosition","modelMaxColumn","isEndLineOfWrappedLine","_moveToLineEndByModel","_moveToLineEndByView","expandLineSelection","moveToBeginningOfBuffer","moveToEndOfBuffer","selectAll","line","_position","_viewPosition","selectToLineNumber","selectToColumn","enteringLineNumber","move","selectToViewLineNumber","selectToViewColumn","endPositionOfSelectionStart","WordOperations","cancelSelection","hasSelection","moveTo","simpleMove","unit","_moveHalfLineLeft","_moveLeft","_moveHalfLineRight","_moveRight","_moveUpByViewLines","_moveUpByModelLines","_moveDownByViewLines","_moveDownByModelLines","moveToPrevBlankLine","moveToNextBlankLine","_moveToViewMinColumn","_moveToViewFirstNonWhitespaceColumn","_moveToViewCenterColumn","_moveToViewMaxColumn","_moveToViewLastNonWhitespaceColumn","viewportMove","visibleViewRange","getCompletelyVisibleViewRange","visibleModelRange","modelLineNumber","_firstLineNumberInRange","modelColumn","_moveToModelPosition","_lastLineNumberInRange","findPositionInViewportIfOutside","viewLineNumber","newViewLineNumber","count","getLineMinColumn","noOfColumns","moveLeft","halfLine","moveRight","moveDown","moveUp","_moveToViewPosition","toViewColumn","toModelLineNumber","toModelColumn","viewColumn","getLineLastNonWhitespaceColumn","args","constraint","arg","cursorMoveArg","to","select","by","RawDirection","Left","Right","Up","Down","PrevBlankLine","NextBlankLine","WrappedLineStart","WrappedLineFirstNonWhitespaceCharacter","WrappedLineColumnCenter","WrappedLineEnd","WrappedLineLastNonWhitespaceCharacter","ViewPortTop","ViewPortCenter","ViewPortBottom","ViewPortIfOutside","RawUnit","WrappedLine","Character","HalfLine","parse","CursorPosition","_cursorPositionBrand","leftPosition","leftPositionAtomicSoftTabs","getLineIndentColumn","minColumn","normalizedPos","clipPositionColumn","p","clipRange","rightPosition","rightPositionAtomicSoftTabs","allowMoveOnEdgeLine","normalizationAffinity","wasOnFirstPosition","wasOnLastPosition","wasAtEdgePosition","down","allowMoveOnLastLine","up","allowMoveOnFirstLine","_isBlankLine","lastLineNumber","lastColumn","indent","ShiftCommand","isUnshift","languageConfigurationService","outdent","shiftIndent","unshiftIndent","_distributedPaste","_simplePaste","typeSelection","ReplaceCommandThatPreservesSelection","_distributePasteToCursors","lines","distributedPaste","_goodIndentForLine","action","expectedIndentAction","getInheritIndentForLine","expectedEnterAction","getEnterAction","appendText","IndentAction","Indent","Outdent","_replaceJumpToNextIndent","typeText","tab","tokenization","isCheapToTokenize","goodIndent","possibleTypeText","startsWith","lineMaxColumn","_compositionType","shouldPushStackElementBetween","getValueInRange","ReplaceCommandWithOffsetCursorState","_typeCommand","keepPosition","ReplaceCommandWithoutChangingPosition","_enter","indentAction","None","IndentOutdent","normalIndent","increasedIndent","actualIndentation","ir","getIndentForEnter","oldEndViewColumn","oldEndColumn","newLineContent","firstNonWhitespace","afterEnter","_isAutoIndentType","_runAutoIndentType","ch","currentIndentation","getIndentationAtPosition","getIndentActionForType","_isAutoClosingOvertype","chIsQuote","_runAutoClosingOvertype","_isBeforeClosingBrace","lineAfter","nextChar","potentialStartingBraces","autoClosingPairsOpenByStart","potentialClosingBraces","autoClosingPairsCloseByStart","isBeforeStartingBrace","isBeforeClosingBrace","_findAutoClosingPairOpen","positions","candidates","candidate","candidateIsMatch","_findContainedAutoClosingPair","pair","lastChar","autoClosingPairsCloseByEnd","endsWith","_getAutoClosingPairClose","chIsAlreadyTyped","autoCloseConfig","shouldAutoCloseBefore","quote","blockCommentStartToken","bracket","containedPair","containedPairClose","isContainedPairPresent","lineBefore","characterAfter","characterBefore","forceTokenization","lineTokens","getLineTokens","scopedLineTokens","createScopedLineTokens","shouldAutoClose","firstCharOffset","neutralCharacter","findNeutralCharacter","tokenType","getTokenTypeIfInsertingCharacter","isOK","_runAutoClosingOpenCharType","autoClosingPairClose","_shouldSurroundChar","_isSurroundSelectionType","surroundingPairs","isTypingAQuoteCharacter","selectionContainsOnlyWhitespace","startIndex","endIndex","selectedText","selectionText","_runSurroundSelectionType","closeCharacter","SurroundSelectionCommand","_isTypeInterceptorElectricChar","_typeInterceptorElectricChar","electricChars","electricAction","onElectricCharacter","matchOpenBracket","findMatchingBracketUp","matchLine","matchLineIndentation","newIndentation","lineFirstNonBlankColumn","getTypingOperation","compositions","composition","hasDeletion","deletedSelectionStart","deletedSelectionEnd","CompositionSurroundSelectionCommand","isDoingComposition","autoIndentFails","opType","lineInsertBefore","lineInsertAfter","lineBreakInsert","openCharacter","insertOpenCharacter","_openCharacter","_closeCharacter","helper","insertedSelectionStart","insertedSelectionEnd","typedText","previousTypingOperation","typingOperation","isTypingOperation","normalizeOperationType","_createWord","wordType","nextCharClass","_findPreviousWordOnLine","_doFindPreviousWordOnLine","chIndex","chCode","chClass","_findEndOfWord","_findNextWordOnLine","_doFindNextWordOnLine","_findStartOfWord","moveWordLeft","wordNavigationType","prevWordOnLine","_moveWordPartLeft","rightRight","moveWordRight","movedDown","nextWordOnLine","_moveWordPartRight","_deleteWordLeftWhitespace","lastNonWhitespace","deleteWordLeft","whitespaceHeuristics","deleteInsideWord","_deleteInsideWordWhitespace","_deleteInsideWordDetermineDeleteRange","_charAtIsWhitespace","leftIndex","rightIndex","touchesWord","createRangeWithPosition","deleteWordAndAdjacentWhitespace","expandedToTheRight","_deleteWordPartLeft","toPosition","_findFirstNonWhitespaceChar","_deleteWordRightWhitespace","deleteWordRight","_deleteWordPartRight","_createWordAtPosition","getWordAtPosition","_wordSeparators","prevWord","nextWord","possiblePosition","WordPartOperations","deleteWordPartLeft","enforceDefined","deleteWordPartRight","moveWordPartLeft","moveWordPartRight","filter","el","autoCloseAlways","autoCloseNever","autoCloseBeforeWhitespace","CursorConfiguration","shouldRecreate","languageId","modelOptions","configuration","_cursorMoveConfigurationBrand","_languageId","_electricChars","_getShouldAutoClose","getLanguageConfiguration","getAutoClosingPairs","getSurroundingPairs","commentsConfiguration","electricCharacter","getElectricCharacters","char","electricCharacterSupport","forQuotes","_getLanguageDefinedShouldAutoClose","autoCloseBeforeSet","getAutoCloseBeforeSet","PartialModelCursorState","PartialViewCursorState","modelSelection","modelSelections","_cursorStateBrand","_singleCursorStateBrand","_computeSelection","_editOperationResultBrand"],"sourceRoot":""}