{"version":3,"file":"static/js/monaco-editor-vendor.96a37e40.61e509bd.js","mappings":"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","sources":["../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/blockDecorations/blockDecorations.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/contentWidgets/contentWidgets.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/currentLineHighlight/currentLineHighlight.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/decorations/decorations.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/editorScrollbar/editorScrollbar.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/glyphMargin/glyphMargin.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/indentGuides/indentGuides.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/domReadingContext.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLines.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/linesDecorations/linesDecorations.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/marginDecorations/marginDecorations.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharSheet.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRenderer.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapPreBaked.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimapCharRendererFactory.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/minimap/minimap.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overlayWidgets/overlayWidgets.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursor.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/overviewRuler.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/rulers/rulers.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/scrollDecoration/scrollDecoration.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/selections/selections.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewCursors/viewCursors.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/viewZones/viewZones.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/whitespace/whitespace.js","../../node_modules/monaco-editor/esm/vs/editor/browser/view.js","../../node_modules/monaco-editor/esm/vs/editor/browser/view/domLineBreaksComputer.js","../../node_modules/monaco-editor/esm/vs/editor/browser/view/dynamicViewOverlay.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lineNumbers/lineNumbers.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/rangeUtil.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/lines/viewLine.js","../../node_modules/monaco-editor/esm/vs/editor/browser/viewParts/margin/margin.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport './blockDecorations.css';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class BlockDecorations extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.blocks = [];\n        this.contentWidth = -1;\n        this.contentLeft = 0;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.domNode.setClassName('blockDecorations-container');\n        this.update();\n    }\n    update() {\n        let didChange = false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        const newContentWidth = layoutInfo.contentWidth - layoutInfo.verticalScrollbarWidth;\n        if (this.contentWidth !== newContentWidth) {\n            this.contentWidth = newContentWidth;\n            didChange = true;\n        }\n        const newContentLeft = layoutInfo.contentLeft;\n        if (this.contentLeft !== newContentLeft) {\n            this.contentLeft = newContentLeft;\n            didChange = true;\n        }\n        return didChange;\n    }\n    dispose() {\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return this.update();\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollLeftChanged;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        var _a;\n        let count = 0;\n        const decorations = ctx.getDecorationsInViewport();\n        for (const decoration of decorations) {\n            if (!decoration.options.blockClassName) {\n                continue;\n            }\n            let block = this.blocks[count];\n            if (!block) {\n                block = this.blocks[count] = createFastDomNode(document.createElement('div'));\n                this.domNode.appendChild(block);\n            }\n            let top;\n            let bottom;\n            if (decoration.options.blockIsAfterEnd) {\n                // range must be empty\n                top = ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, false);\n                bottom = ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, true);\n            }\n            else {\n                top = ctx.getVerticalOffsetForLineNumber(decoration.range.startLineNumber, true);\n                bottom = decoration.range.isEmpty() && !decoration.options.blockDoesNotCollapse\n                    ? ctx.getVerticalOffsetForLineNumber(decoration.range.startLineNumber, false)\n                    : ctx.getVerticalOffsetAfterLineNumber(decoration.range.endLineNumber, true);\n            }\n            const [paddingTop, paddingRight, paddingBottom, paddingLeft] = (_a = decoration.options.blockPadding) !== null && _a !== void 0 ? _a : [0, 0, 0, 0];\n            block.setClassName('blockDecorations-block ' + decoration.options.blockClassName);\n            block.setLeft(this.contentLeft - paddingLeft);\n            block.setWidth(this.contentWidth + paddingLeft + paddingRight);\n            block.setTop(top - ctx.scrollTop - paddingTop);\n            block.setHeight(bottom - top + paddingTop + paddingBottom);\n            count++;\n        }\n        for (let i = count; i < this.blocks.length; i++) {\n            this.blocks[i].domNode.remove();\n        }\n        this.blocks.length = count;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nexport class ViewContentWidgets extends ViewPart {\n    constructor(context, viewDomNode) {\n        super(context);\n        this._viewDomNode = viewDomNode;\n        this._widgets = {};\n        this.domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.domNode, 1 /* PartFingerprint.ContentWidgets */);\n        this.domNode.setClassName('contentWidgets');\n        this.domNode.setPosition('absolute');\n        this.domNode.setTop(0);\n        this.overflowingContentWidgetsDomNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.overflowingContentWidgetsDomNode, 2 /* PartFingerprint.OverflowingContentWidgets */);\n        this.overflowingContentWidgetsDomNode.setClassName('overflowingContentWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLineMappingChanged(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesChanged(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesDeleted(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onLinesInserted(e) {\n        this._updateAnchorsViewPositions();\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    _updateAnchorsViewPositions() {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].updateAnchorViewPosition();\n        }\n    }\n    addWidget(_widget) {\n        const myWidget = new Widget(this._context, this._viewDomNode, _widget);\n        this._widgets[myWidget.id] = myWidget;\n        if (myWidget.allowEditorOverflow) {\n            this.overflowingContentWidgetsDomNode.appendChild(myWidget.domNode);\n        }\n        else {\n            this.domNode.appendChild(myWidget.domNode);\n        }\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, primaryAnchor, secondaryAnchor, preference, affinity) {\n        const myWidget = this._widgets[widget.getId()];\n        myWidget.setPosition(primaryAnchor, secondaryAnchor, preference, affinity);\n        this.setShouldRender();\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const myWidget = this._widgets[widgetId];\n            delete this._widgets[widgetId];\n            const domNode = myWidget.domNode.domNode;\n            domNode.parentNode.removeChild(domNode);\n            domNode.removeAttribute('monaco-visible-content-widget');\n            this.setShouldRender();\n        }\n    }\n    shouldSuppressMouseDownOnWidget(widgetId) {\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            return this._widgets[widgetId].suppressMouseDown;\n        }\n        return false;\n    }\n    onBeforeRender(viewportData) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].onBeforeRender(viewportData);\n        }\n    }\n    prepareRender(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const keys = Object.keys(this._widgets);\n        for (const widgetId of keys) {\n            this._widgets[widgetId].render(ctx);\n        }\n    }\n}\nclass Widget {\n    constructor(context, viewDomNode, actual) {\n        this._primaryAnchor = new PositionPair(null, null);\n        this._secondaryAnchor = new PositionPair(null, null);\n        this._context = context;\n        this._viewDomNode = viewDomNode;\n        this._actual = actual;\n        this.domNode = createFastDomNode(this._actual.getDomNode());\n        this.id = this._actual.getId();\n        this.allowEditorOverflow = this._actual.allowEditorOverflow || false;\n        this.suppressMouseDown = this._actual.suppressMouseDown || false;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._fixedOverflowWidgets = options.get(42 /* EditorOption.fixedOverflowWidgets */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._affinity = null;\n        this._preference = [];\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n        this._maxWidth = this._getMaxWidth();\n        this._isVisible = false;\n        this._renderData = null;\n        this.domNode.setPosition((this._fixedOverflowWidgets && this.allowEditorOverflow) ? 'fixed' : 'absolute');\n        this.domNode.setDisplay('none');\n        this.domNode.setVisibility('hidden');\n        this.domNode.setAttribute('widgetId', this.id);\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        if (e.hasChanged(145 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n            this._contentLeft = layoutInfo.contentLeft;\n            this._contentWidth = layoutInfo.contentWidth;\n            this._maxWidth = this._getMaxWidth();\n        }\n    }\n    updateAnchorViewPosition() {\n        this._setPosition(this._affinity, this._primaryAnchor.modelPosition, this._secondaryAnchor.modelPosition);\n    }\n    _setPosition(affinity, primaryAnchor, secondaryAnchor) {\n        this._affinity = affinity;\n        this._primaryAnchor = getValidPositionPair(primaryAnchor, this._context.viewModel, this._affinity);\n        this._secondaryAnchor = getValidPositionPair(secondaryAnchor, this._context.viewModel, this._affinity);\n        function getValidPositionPair(position, viewModel, affinity) {\n            if (!position) {\n                return new PositionPair(null, null);\n            }\n            // Do not trust that widgets give a valid position\n            const validModelPosition = viewModel.model.validatePosition(position);\n            if (viewModel.coordinatesConverter.modelPositionIsVisible(validModelPosition)) {\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(validModelPosition, affinity !== null && affinity !== void 0 ? affinity : undefined);\n                return new PositionPair(position, viewPosition);\n            }\n            return new PositionPair(position, null);\n        }\n    }\n    _getMaxWidth() {\n        const elDocument = this.domNode.domNode.ownerDocument;\n        const elWindow = elDocument.defaultView;\n        return (this.allowEditorOverflow\n            ? (elWindow === null || elWindow === void 0 ? void 0 : elWindow.innerWidth) || elDocument.documentElement.offsetWidth || elDocument.body.offsetWidth\n            : this._contentWidth);\n    }\n    setPosition(primaryAnchor, secondaryAnchor, preference, affinity) {\n        this._setPosition(affinity, primaryAnchor, secondaryAnchor);\n        this._preference = preference;\n        if (this._primaryAnchor.viewPosition && this._preference && this._preference.length > 0) {\n            // this content widget would like to be visible if possible\n            // we change it from `display:none` to `display:block` even if it\n            // might be outside the viewport such that we can measure its size\n            // in `prepareRender`\n            this.domNode.setDisplay('block');\n        }\n        else {\n            this.domNode.setDisplay('none');\n        }\n        this._cachedDomNodeOffsetWidth = -1;\n        this._cachedDomNodeOffsetHeight = -1;\n    }\n    _layoutBoxInViewport(anchor, width, height, ctx) {\n        // Our visible box is split horizontally by the current line => 2 boxes\n        // a) the box above the line\n        const aboveLineTop = anchor.top;\n        const heightAvailableAboveLine = aboveLineTop;\n        // b) the box under the line\n        const underLineTop = anchor.top + anchor.height;\n        const heightAvailableUnderLine = ctx.viewportHeight - underLineTop;\n        const aboveTop = aboveLineTop - height;\n        const fitsAbove = (heightAvailableAboveLine >= height);\n        const belowTop = underLineTop;\n        const fitsBelow = (heightAvailableUnderLine >= height);\n        // And its left\n        let left = anchor.left;\n        if (left + width > ctx.scrollLeft + ctx.viewportWidth) {\n            left = ctx.scrollLeft + ctx.viewportWidth - width;\n        }\n        if (left < ctx.scrollLeft) {\n            left = ctx.scrollLeft;\n        }\n        return { fitsAbove, aboveTop, fitsBelow, belowTop, left };\n    }\n    _layoutHorizontalSegmentInPage(windowSize, domNodePosition, left, width) {\n        var _a;\n        // Leave some clearance to the left/right\n        const LEFT_PADDING = 15;\n        const RIGHT_PADDING = 15;\n        // Initially, the limits are defined as the dom node limits\n        const MIN_LIMIT = Math.max(LEFT_PADDING, domNodePosition.left - width);\n        const MAX_LIMIT = Math.min(domNodePosition.left + domNodePosition.width + width, windowSize.width - RIGHT_PADDING);\n        const elDocument = this._viewDomNode.domNode.ownerDocument;\n        const elWindow = elDocument.defaultView;\n        let absoluteLeft = domNodePosition.left + left - ((_a = elWindow === null || elWindow === void 0 ? void 0 : elWindow.scrollX) !== null && _a !== void 0 ? _a : 0);\n        if (absoluteLeft + width > MAX_LIMIT) {\n            const delta = absoluteLeft - (MAX_LIMIT - width);\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        if (absoluteLeft < MIN_LIMIT) {\n            const delta = absoluteLeft - MIN_LIMIT;\n            absoluteLeft -= delta;\n            left -= delta;\n        }\n        return [left, absoluteLeft];\n    }\n    _layoutBoxInPage(anchor, width, height, ctx) {\n        var _a, _b;\n        const aboveTop = anchor.top - height;\n        const belowTop = anchor.top + anchor.height;\n        const domNodePosition = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n        const elDocument = this._viewDomNode.domNode.ownerDocument;\n        const elWindow = elDocument.defaultView;\n        const absoluteAboveTop = domNodePosition.top + aboveTop - ((_a = elWindow === null || elWindow === void 0 ? void 0 : elWindow.scrollY) !== null && _a !== void 0 ? _a : 0);\n        const absoluteBelowTop = domNodePosition.top + belowTop - ((_b = elWindow === null || elWindow === void 0 ? void 0 : elWindow.scrollY) !== null && _b !== void 0 ? _b : 0);\n        const windowSize = dom.getClientArea(elDocument.body);\n        const [left, absoluteAboveLeft] = this._layoutHorizontalSegmentInPage(windowSize, domNodePosition, anchor.left - ctx.scrollLeft + this._contentLeft, width);\n        // Leave some clearance to the top/bottom\n        const TOP_PADDING = 22;\n        const BOTTOM_PADDING = 22;\n        const fitsAbove = (absoluteAboveTop >= TOP_PADDING);\n        const fitsBelow = (absoluteBelowTop + height <= windowSize.height - BOTTOM_PADDING);\n        if (this._fixedOverflowWidgets) {\n            return {\n                fitsAbove,\n                aboveTop: Math.max(absoluteAboveTop, TOP_PADDING),\n                fitsBelow,\n                belowTop: absoluteBelowTop,\n                left: absoluteAboveLeft\n            };\n        }\n        return { fitsAbove, aboveTop, fitsBelow, belowTop, left };\n    }\n    _prepareRenderWidgetAtExactPositionOverflowing(topLeft) {\n        return new Coordinate(topLeft.top, topLeft.left + this._contentLeft);\n    }\n    /**\n     * Compute the coordinates above and below the primary and secondary anchors.\n     * The content widget *must* touch the primary anchor.\n     * The content widget should touch if possible the secondary anchor.\n     */\n    _getAnchorsCoordinates(ctx) {\n        var _a, _b;\n        const primary = getCoordinates(this._primaryAnchor.viewPosition, this._affinity, this._lineHeight);\n        const secondaryViewPosition = (((_a = this._secondaryAnchor.viewPosition) === null || _a === void 0 ? void 0 : _a.lineNumber) === ((_b = this._primaryAnchor.viewPosition) === null || _b === void 0 ? void 0 : _b.lineNumber) ? this._secondaryAnchor.viewPosition : null);\n        const secondary = getCoordinates(secondaryViewPosition, this._affinity, this._lineHeight);\n        return { primary, secondary };\n        function getCoordinates(position, affinity, lineHeight) {\n            if (!position) {\n                return null;\n            }\n            const horizontalPosition = ctx.visibleRangeForPosition(position);\n            if (!horizontalPosition) {\n                return null;\n            }\n            // Left-align widgets that should appear :before content\n            const left = (position.column === 1 && affinity === 3 /* PositionAffinity.LeftOfInjectedText */ ? 0 : horizontalPosition.left);\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.scrollTop;\n            return new AnchorCoordinate(top, left, lineHeight);\n        }\n    }\n    _reduceAnchorCoordinates(primary, secondary, width) {\n        if (!secondary) {\n            return primary;\n        }\n        const fontInfo = this._context.configuration.options.get(50 /* EditorOption.fontInfo */);\n        let left = secondary.left;\n        if (left < primary.left) {\n            left = Math.max(left, primary.left - width + fontInfo.typicalFullwidthCharacterWidth);\n        }\n        else {\n            left = Math.min(left, primary.left + width - fontInfo.typicalFullwidthCharacterWidth);\n        }\n        return new AnchorCoordinate(primary.top, left, primary.height);\n    }\n    _prepareRenderWidget(ctx) {\n        if (!this._preference || this._preference.length === 0) {\n            return null;\n        }\n        const { primary, secondary } = this._getAnchorsCoordinates(ctx);\n        if (!primary) {\n            return null;\n        }\n        if (this._cachedDomNodeOffsetWidth === -1 || this._cachedDomNodeOffsetHeight === -1) {\n            let preferredDimensions = null;\n            if (typeof this._actual.beforeRender === 'function') {\n                preferredDimensions = safeInvoke(this._actual.beforeRender, this._actual);\n            }\n            if (preferredDimensions) {\n                this._cachedDomNodeOffsetWidth = preferredDimensions.width;\n                this._cachedDomNodeOffsetHeight = preferredDimensions.height;\n            }\n            else {\n                const domNode = this.domNode.domNode;\n                const clientRect = domNode.getBoundingClientRect();\n                this._cachedDomNodeOffsetWidth = Math.round(clientRect.width);\n                this._cachedDomNodeOffsetHeight = Math.round(clientRect.height);\n            }\n        }\n        const anchor = this._reduceAnchorCoordinates(primary, secondary, this._cachedDomNodeOffsetWidth);\n        let placement;\n        if (this.allowEditorOverflow) {\n            placement = this._layoutBoxInPage(anchor, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        else {\n            placement = this._layoutBoxInViewport(anchor, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, ctx);\n        }\n        // Do two passes, first for perfect fit, second picks first option\n        for (let pass = 1; pass <= 2; pass++) {\n            for (const pref of this._preference) {\n                // placement\n                if (pref === 1 /* ContentWidgetPositionPreference.ABOVE */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsAbove) {\n                        return { coordinate: new Coordinate(placement.aboveTop, placement.left), position: 1 /* ContentWidgetPositionPreference.ABOVE */ };\n                    }\n                }\n                else if (pref === 2 /* ContentWidgetPositionPreference.BELOW */) {\n                    if (!placement) {\n                        // Widget outside of viewport\n                        return null;\n                    }\n                    if (pass === 2 || placement.fitsBelow) {\n                        return { coordinate: new Coordinate(placement.belowTop, placement.left), position: 2 /* ContentWidgetPositionPreference.BELOW */ };\n                    }\n                }\n                else {\n                    if (this.allowEditorOverflow) {\n                        return { coordinate: this._prepareRenderWidgetAtExactPositionOverflowing(new Coordinate(anchor.top, anchor.left)), position: 0 /* ContentWidgetPositionPreference.EXACT */ };\n                    }\n                    else {\n                        return { coordinate: new Coordinate(anchor.top, anchor.left), position: 0 /* ContentWidgetPositionPreference.EXACT */ };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * On this first pass, we ensure that the content widget (if it is in the viewport) has the max width set correctly.\n     */\n    onBeforeRender(viewportData) {\n        if (!this._primaryAnchor.viewPosition || !this._preference) {\n            return;\n        }\n        if (this._primaryAnchor.viewPosition.lineNumber < viewportData.startLineNumber || this._primaryAnchor.viewPosition.lineNumber > viewportData.endLineNumber) {\n            // Outside of viewport\n            return;\n        }\n        this.domNode.setMaxWidth(this._maxWidth);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRenderWidget(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            // This widget should be invisible\n            if (this._isVisible) {\n                this.domNode.removeAttribute('monaco-visible-content-widget');\n                this._isVisible = false;\n                this.domNode.setVisibility('hidden');\n            }\n            if (typeof this._actual.afterRender === 'function') {\n                safeInvoke(this._actual.afterRender, this._actual, null);\n            }\n            return;\n        }\n        // This widget should be visible\n        if (this.allowEditorOverflow) {\n            this.domNode.setTop(this._renderData.coordinate.top);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        else {\n            this.domNode.setTop(this._renderData.coordinate.top + ctx.scrollTop - ctx.bigNumbersDelta);\n            this.domNode.setLeft(this._renderData.coordinate.left);\n        }\n        if (!this._isVisible) {\n            this.domNode.setVisibility('inherit');\n            this.domNode.setAttribute('monaco-visible-content-widget', 'true');\n            this._isVisible = true;\n        }\n        if (typeof this._actual.afterRender === 'function') {\n            safeInvoke(this._actual.afterRender, this._actual, this._renderData.position);\n        }\n    }\n}\nclass PositionPair {\n    constructor(modelPosition, viewPosition) {\n        this.modelPosition = modelPosition;\n        this.viewPosition = viewPosition;\n    }\n}\nclass Coordinate {\n    constructor(top, left) {\n        this.top = top;\n        this.left = left;\n        this._coordinateBrand = undefined;\n    }\n}\nclass AnchorCoordinate {\n    constructor(top, left, height) {\n        this.top = top;\n        this.left = left;\n        this.height = height;\n        this._anchorCoordinateBrand = undefined;\n    }\n}\nfunction safeInvoke(fn, thisArg, ...args) {\n    try {\n        return fn.call(thisArg, ...args);\n    }\n    catch (_a) {\n        // ignore\n        return null;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { Position } from '../../../common/core/position.js';\nexport class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._renderLineHighlight = options.get(96 /* EditorOption.renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(97 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n        this._wordWrap = layoutInfo.isViewportWrapping;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._selectionIsEmpty = true;\n        this._focused = false;\n        this._cursorLineNumbers = [1];\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderData = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    _readFromSelections() {\n        let hasChanged = false;\n        const lineNumbers = new Set();\n        for (const selection of this._selections) {\n            lineNumbers.add(selection.positionLineNumber);\n        }\n        const cursorsLineNumbers = Array.from(lineNumbers);\n        cursorsLineNumbers.sort((a, b) => a - b);\n        if (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n            this._cursorLineNumbers = cursorsLineNumbers;\n            hasChanged = true;\n        }\n        const selectionIsEmpty = this._selections.every(s => s.isEmpty());\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            hasChanged = true;\n        }\n        return hasChanged;\n    }\n    // --- begin event handlers\n    onThemeChanged(e) {\n        return this._readFromSelections();\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._renderLineHighlight = options.get(96 /* EditorOption.renderLineHighlight */);\n        this._renderLineHighlightOnlyWhenFocus = options.get(97 /* EditorOption.renderLineHighlightOnlyWhenFocus */);\n        this._wordWrap = layoutInfo.isViewportWrapping;\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return this._readFromSelections();\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollWidthChanged || e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        if (!this._renderLineHighlightOnlyWhenFocus) {\n            return false;\n        }\n        this._focused = e.isFocused;\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (!this._shouldRenderThis()) {\n            this._renderData = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        // initialize renderData\n        const renderData = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            renderData[lineIndex] = '';\n        }\n        if (this._wordWrap) {\n            // do a first pass to render wrapped lines\n            const renderedLineWrapped = this._renderOne(ctx, false);\n            for (const cursorLineNumber of this._cursorLineNumbers) {\n                const coordinatesConverter = this._context.viewModel.coordinatesConverter;\n                const modelLineNumber = coordinatesConverter.convertViewPositionToModelPosition(new Position(cursorLineNumber, 1)).lineNumber;\n                const firstViewLineNumber = coordinatesConverter.convertModelPositionToViewPosition(new Position(modelLineNumber, 1)).lineNumber;\n                const lastViewLineNumber = coordinatesConverter.convertModelPositionToViewPosition(new Position(modelLineNumber, this._context.viewModel.model.getLineMaxColumn(modelLineNumber))).lineNumber;\n                const firstLine = Math.max(firstViewLineNumber, visibleStartLineNumber);\n                const lastLine = Math.min(lastViewLineNumber, visibleEndLineNumber);\n                for (let lineNumber = firstLine; lineNumber <= lastLine; lineNumber++) {\n                    const lineIndex = lineNumber - visibleStartLineNumber;\n                    renderData[lineIndex] = renderedLineWrapped;\n                }\n            }\n        }\n        // do a second pass to render exact lines\n        const renderedLineExact = this._renderOne(ctx, true);\n        for (const cursorLineNumber of this._cursorLineNumbers) {\n            if (cursorLineNumber < visibleStartLineNumber || cursorLineNumber > visibleEndLineNumber) {\n                continue;\n            }\n            const lineIndex = cursorLineNumber - visibleStartLineNumber;\n            renderData[lineIndex] = renderedLineExact;\n        }\n        this._renderData = renderData;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderData) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex >= this._renderData.length) {\n            return '';\n        }\n        return this._renderData[lineIndex];\n    }\n    _shouldRenderInMargin() {\n        return ((this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n    _shouldRenderInContent() {\n        return ((this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n            && this._selectionIsEmpty\n            && (!this._renderLineHighlightOnlyWhenFocus || this._focused));\n    }\n}\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx, exact) {\n        const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-both' : '') + (exact ? ' current-line-exact' : '');\n        return `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px;\"></div>`;\n    }\n    _shouldRenderThis() {\n        return this._shouldRenderInContent();\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInMargin();\n    }\n}\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n    _renderOne(ctx, exact) {\n        const className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '') + (this._shouldRenderInMargin() && exact ? ' current-line-exact-margin' : '');\n        return `<div class=\"${className}\" style=\"width:${this._contentLeft}px\"></div>`;\n    }\n    _shouldRenderThis() {\n        return true;\n    }\n    _shouldRenderOther() {\n        return this._shouldRenderInContent();\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const lineHighlight = theme.getColor(editorLineHighlight);\n    if (lineHighlight) {\n        collector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n        collector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n    }\n    if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n        const lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n        if (lineHighlightBorder) {\n            collector.addRule(`.monaco-editor .view-overlays .current-line-exact { border: 2px solid ${lineHighlightBorder}; }`);\n            collector.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border: 2px solid ${lineHighlightBorder}; }`);\n            if (isHighContrast(theme.type)) {\n                collector.addRule(`.monaco-editor .view-overlays .current-line-exact { border-width: 1px; }`);\n                collector.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border-width: 1px; }`);\n            }\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { HorizontalRange } from '../../view/renderingContext.js';\nimport { Range } from '../../../common/core/range.js';\nexport class DecorationsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        const _decorations = ctx.getDecorationsInViewport();\n        // Keep only decorations with `className`\n        let decorations = [];\n        let decorationsLen = 0;\n        for (let i = 0, len = _decorations.length; i < len; i++) {\n            const d = _decorations[i];\n            if (d.options.className) {\n                decorations[decorationsLen++] = d;\n            }\n        }\n        // Sort decorations for consistent render output\n        decorations = decorations.sort((a, b) => {\n            if (a.options.zIndex < b.options.zIndex) {\n                return -1;\n            }\n            if (a.options.zIndex > b.options.zIndex) {\n                return 1;\n            }\n            const aClassName = a.options.className;\n            const bClassName = b.options.className;\n            if (aClassName < bClassName) {\n                return -1;\n            }\n            if (aClassName > bClassName) {\n                return 1;\n            }\n            return Range.compareRangesUsingStarts(a.range, b.range);\n        });\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = '';\n        }\n        // Render first whole line decorations and then regular decorations\n        this._renderWholeLineDecorations(ctx, decorations, output);\n        this._renderNormalDecorations(ctx, decorations, output);\n        this._renderResult = output;\n    }\n    _renderWholeLineDecorations(ctx, decorations, output) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (!d.options.isWholeLine) {\n                continue;\n            }\n            const decorationOutput = ('<div class=\"cdr '\n                + d.options.className\n                + '\" style=\"left:0;width:100%;\"></div>');\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            for (let j = startLineNumber; j <= endLineNumber; j++) {\n                const lineIndex = j - visibleStartLineNumber;\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    _renderNormalDecorations(ctx, decorations, output) {\n        var _a;\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        let prevClassName = null;\n        let prevShowIfCollapsed = false;\n        let prevRange = null;\n        let prevShouldFillLineOnLineBreak = false;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (d.options.isWholeLine) {\n                continue;\n            }\n            const className = d.options.className;\n            const showIfCollapsed = Boolean(d.options.showIfCollapsed);\n            let range = d.range;\n            if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n                range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.viewModel.getLineMaxColumn(range.endLineNumber - 1));\n            }\n            if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n                // merge into previous decoration\n                prevRange = Range.plusRange(prevRange, range);\n                continue;\n            }\n            // flush previous decoration\n            if (prevClassName !== null) {\n                this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, visibleStartLineNumber, output);\n            }\n            prevClassName = className;\n            prevShowIfCollapsed = showIfCollapsed;\n            prevRange = range;\n            prevShouldFillLineOnLineBreak = (_a = d.options.shouldFillLineOnLineBreak) !== null && _a !== void 0 ? _a : false;\n        }\n        if (prevClassName !== null) {\n            this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, visibleStartLineNumber, output);\n        }\n    }\n    _renderNormalDecoration(ctx, range, className, shouldFillLineOnLineBreak, showIfCollapsed, visibleStartLineNumber, output) {\n        const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/ className === 'findMatch');\n        if (!linesVisibleRanges) {\n            return;\n        }\n        for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n            const lineVisibleRanges = linesVisibleRanges[j];\n            if (lineVisibleRanges.outsideRenderedLine) {\n                continue;\n            }\n            const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n            if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n                const singleVisibleRange = lineVisibleRanges.ranges[0];\n                if (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n                    // collapsed/very small range case => make the decoration visible by expanding its width\n                    // expand its size on both sides (both to the left and to the right, keeping it centered)\n                    const center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n                    const left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n                    lineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n                }\n            }\n            for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n                const expandToLeft = shouldFillLineOnLineBreak && lineVisibleRanges.continuesOnNextLine && lenK === 1;\n                const visibleRange = lineVisibleRanges.ranges[k];\n                const decorationOutput = ('<div class=\"cdr '\n                    + className\n                    + '\" style=\"left:'\n                    + String(visibleRange.left)\n                    + 'px;width:'\n                    + (expandToLeft ?\n                        '100%;' :\n                        (String(visibleRange.width) + 'px;'))\n                    + '\"></div>');\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { SmoothScrollableElement } from '../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { getThemeTypeSelector } from '../../../../platform/theme/common/themeService.js';\nexport class EditorScrollbar extends ViewPart {\n    constructor(context, linesContent, viewDomNode, overflowGuardDomNode) {\n        super(context);\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(103 /* EditorOption.scrollbar */);\n        const mouseWheelScrollSensitivity = options.get(75 /* EditorOption.mouseWheelScrollSensitivity */);\n        const fastScrollSensitivity = options.get(40 /* EditorOption.fastScrollSensitivity */);\n        const scrollPredominantAxis = options.get(106 /* EditorOption.scrollPredominantAxis */);\n        const scrollbarOptions = {\n            listenOnDomNode: viewDomNode.domNode,\n            className: 'editor-scrollable' + ' ' + getThemeTypeSelector(context.theme.type),\n            useShadows: false,\n            lazyRender: true,\n            vertical: scrollbar.vertical,\n            horizontal: scrollbar.horizontal,\n            verticalHasArrows: scrollbar.verticalHasArrows,\n            horizontalHasArrows: scrollbar.horizontalHasArrows,\n            verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n            verticalSliderSize: scrollbar.verticalSliderSize,\n            horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n            horizontalSliderSize: scrollbar.horizontalSliderSize,\n            handleMouseWheel: scrollbar.handleMouseWheel,\n            alwaysConsumeMouseWheel: scrollbar.alwaysConsumeMouseWheel,\n            arrowSize: scrollbar.arrowSize,\n            mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n            fastScrollSensitivity: fastScrollSensitivity,\n            scrollPredominantAxis: scrollPredominantAxis,\n            scrollByPage: scrollbar.scrollByPage,\n        };\n        this.scrollbar = this._register(new SmoothScrollableElement(linesContent.domNode, scrollbarOptions, this._context.viewLayout.getScrollable()));\n        PartFingerprints.write(this.scrollbar.getDomNode(), 6 /* PartFingerprint.ScrollableElement */);\n        this.scrollbarDomNode = createFastDomNode(this.scrollbar.getDomNode());\n        this.scrollbarDomNode.setPosition('absolute');\n        this._setLayout();\n        // When having a zone widget that calls .focus() on one of its dom elements,\n        // the browser will try desperately to reveal that dom node, unexpectedly\n        // changing the .scrollTop of this.linesContent\n        const onBrowserDesperateReveal = (domNode, lookAtScrollTop, lookAtScrollLeft) => {\n            const newScrollPosition = {};\n            if (lookAtScrollTop) {\n                const deltaTop = domNode.scrollTop;\n                if (deltaTop) {\n                    newScrollPosition.scrollTop = this._context.viewLayout.getCurrentScrollTop() + deltaTop;\n                    domNode.scrollTop = 0;\n                }\n            }\n            if (lookAtScrollLeft) {\n                const deltaLeft = domNode.scrollLeft;\n                if (deltaLeft) {\n                    newScrollPosition.scrollLeft = this._context.viewLayout.getCurrentScrollLeft() + deltaLeft;\n                    domNode.scrollLeft = 0;\n                }\n            }\n            this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, 1 /* ScrollType.Immediate */);\n        };\n        // I've seen this happen both on the view dom node & on the lines content dom node.\n        this._register(dom.addDisposableListener(viewDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(viewDomNode.domNode, true, true)));\n        this._register(dom.addDisposableListener(linesContent.domNode, 'scroll', (e) => onBrowserDesperateReveal(linesContent.domNode, true, false)));\n        this._register(dom.addDisposableListener(overflowGuardDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(overflowGuardDomNode.domNode, true, false)));\n        this._register(dom.addDisposableListener(this.scrollbarDomNode.domNode, 'scroll', (e) => onBrowserDesperateReveal(this.scrollbarDomNode.domNode, true, false)));\n    }\n    dispose() {\n        super.dispose();\n    }\n    _setLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this.scrollbarDomNode.setLeft(layoutInfo.contentLeft);\n        const minimap = options.get(73 /* EditorOption.minimap */);\n        const side = minimap.side;\n        if (side === 'right') {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth + layoutInfo.minimap.minimapWidth);\n        }\n        else {\n            this.scrollbarDomNode.setWidth(layoutInfo.contentWidth);\n        }\n        this.scrollbarDomNode.setHeight(layoutInfo.height);\n    }\n    getOverviewRulerLayoutInfo() {\n        return this.scrollbar.getOverviewRulerLayoutInfo();\n    }\n    getDomNode() {\n        return this.scrollbarDomNode;\n    }\n    delegateVerticalScrollbarPointerDown(browserEvent) {\n        this.scrollbar.delegateVerticalScrollbarPointerDown(browserEvent);\n    }\n    delegateScrollFromMouseWheelEvent(browserEvent) {\n        this.scrollbar.delegateScrollFromMouseWheelEvent(browserEvent);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(103 /* EditorOption.scrollbar */)\n            || e.hasChanged(75 /* EditorOption.mouseWheelScrollSensitivity */)\n            || e.hasChanged(40 /* EditorOption.fastScrollSensitivity */)) {\n            const options = this._context.configuration.options;\n            const scrollbar = options.get(103 /* EditorOption.scrollbar */);\n            const mouseWheelScrollSensitivity = options.get(75 /* EditorOption.mouseWheelScrollSensitivity */);\n            const fastScrollSensitivity = options.get(40 /* EditorOption.fastScrollSensitivity */);\n            const scrollPredominantAxis = options.get(106 /* EditorOption.scrollPredominantAxis */);\n            const newOpts = {\n                vertical: scrollbar.vertical,\n                horizontal: scrollbar.horizontal,\n                verticalScrollbarSize: scrollbar.verticalScrollbarSize,\n                horizontalScrollbarSize: scrollbar.horizontalScrollbarSize,\n                scrollByPage: scrollbar.scrollByPage,\n                handleMouseWheel: scrollbar.handleMouseWheel,\n                mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n                fastScrollSensitivity: fastScrollSensitivity,\n                scrollPredominantAxis: scrollPredominantAxis\n            };\n            this.scrollbar.updateOptions(newOpts);\n        }\n        if (e.hasChanged(145 /* EditorOption.layoutInfo */)) {\n            this._setLayout();\n        }\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onThemeChanged(e) {\n        this.scrollbar.updateClassName('editor-scrollable' + ' ' + getThemeTypeSelector(this._context.theme.type));\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to do\n    }\n    render(ctx) {\n        this.scrollbar.renderNow();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ArrayQueue } from '../../../../base/common/arrays.js';\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { GlyphMarginLane } from '../../../common/model.js';\n/**\n * Represents a decoration that should be shown along the lines from `startLineNumber` to `endLineNumber`.\n * This can end up producing multiple `LineDecorationToRender`.\n */\nexport class DecorationToRender {\n    constructor(startLineNumber, endLineNumber, className, tooltip, zIndex) {\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n        this.className = className;\n        this.tooltip = tooltip;\n        this._decorationToRenderBrand = undefined;\n        this.zIndex = zIndex !== null && zIndex !== void 0 ? zIndex : 0;\n    }\n}\n/**\n * A decoration that should be shown along a line.\n */\nexport class LineDecorationToRender {\n    constructor(className, zIndex, tooltip) {\n        this.className = className;\n        this.zIndex = zIndex;\n        this.tooltip = tooltip;\n    }\n}\n/**\n * Decorations to render on a visible line.\n */\nexport class VisibleLineDecorationsToRender {\n    constructor() {\n        this.decorations = [];\n    }\n    add(decoration) {\n        this.decorations.push(decoration);\n    }\n    getDecorations() {\n        return this.decorations;\n    }\n}\nexport class DedupOverlay extends DynamicViewOverlay {\n    /**\n     * Returns an array with an element for each visible line number.\n     */\n    _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = new VisibleLineDecorationsToRender();\n        }\n        if (decorations.length === 0) {\n            return output;\n        }\n        // Sort decorations by className, then by startLineNumber and then by endLineNumber\n        decorations.sort((a, b) => {\n            if (a.className === b.className) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return (a.className < b.className ? -1 : 1);\n        });\n        let prevClassName = null;\n        let prevEndLineIndex = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const className = d.className;\n            const zIndex = d.zIndex;\n            let startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n            const endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n            if (prevClassName === className) {\n                // Here we avoid rendering the same className multiple times on the same line\n                startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n                prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n            }\n            else {\n                prevClassName = className;\n                prevEndLineIndex = endLineIndex;\n            }\n            for (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n                output[i].add(new LineDecorationToRender(className, zIndex, d.tooltip));\n            }\n        }\n        return output;\n    }\n}\nexport class GlyphMarginWidgets extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._widgets = {};\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName('glyph-margin-widgets');\n        this.domNode.setPosition('absolute');\n        this.domNode.setTop(0);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(57 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._glyphMarginDecorationLaneCount = layoutInfo.glyphMarginDecorationLaneCount;\n        this._managedDomNodes = [];\n        this._decorationGlyphsToRender = [];\n    }\n    dispose() {\n        this._managedDomNodes = [];\n        this._decorationGlyphsToRender = [];\n        this._widgets = {};\n        super.dispose();\n    }\n    getWidgets() {\n        return Object.values(this._widgets);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(57 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._glyphMarginDecorationLaneCount = layoutInfo.glyphMarginDecorationLaneCount;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // --- begin widget management\n    addWidget(widget) {\n        const domNode = createFastDomNode(widget.getDomNode());\n        this._widgets[widget.getId()] = {\n            widget: widget,\n            preference: widget.getPosition(),\n            domNode: domNode,\n            renderInfo: null\n        };\n        domNode.setPosition('absolute');\n        domNode.setDisplay('none');\n        domNode.setAttribute('widgetId', widget.getId());\n        this.domNode.appendChild(domNode);\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, preference) {\n        const myWidget = this._widgets[widget.getId()];\n        if (myWidget.preference.lane === preference.lane\n            && myWidget.preference.zIndex === preference.zIndex\n            && Range.equalsRange(myWidget.preference.range, preference.range)) {\n            return false;\n        }\n        myWidget.preference = preference;\n        this.setShouldRender();\n        return true;\n    }\n    removeWidget(widget) {\n        var _a;\n        const widgetId = widget.getId();\n        if (this._widgets[widgetId]) {\n            const widgetData = this._widgets[widgetId];\n            const domNode = widgetData.domNode.domNode;\n            delete this._widgets[widgetId];\n            (_a = domNode.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(domNode);\n            this.setShouldRender();\n        }\n    }\n    // --- end widget management\n    _collectDecorationBasedGlyphRenderRequest(ctx, requests) {\n        var _a, _b, _c;\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const decorations = ctx.getDecorationsInViewport();\n        for (const d of decorations) {\n            const glyphMarginClassName = d.options.glyphMarginClassName;\n            if (!glyphMarginClassName) {\n                continue;\n            }\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            const lane = (_b = (_a = d.options.glyphMargin) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : GlyphMarginLane.Center;\n            const zIndex = (_c = d.options.zIndex) !== null && _c !== void 0 ? _c : 0;\n            for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n                const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, 0));\n                const laneIndex = this._context.viewModel.glyphLanes.getLanesAtLine(modelPosition.lineNumber).indexOf(lane);\n                requests.push(new DecorationBasedGlyphRenderRequest(lineNumber, laneIndex, zIndex, glyphMarginClassName));\n            }\n        }\n    }\n    _collectWidgetBasedGlyphRenderRequest(ctx, requests) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (const widget of Object.values(this._widgets)) {\n            const range = widget.preference.range;\n            const { startLineNumber, endLineNumber } = this._context.viewModel.coordinatesConverter.convertModelRangeToViewRange(Range.lift(range));\n            if (!startLineNumber || !endLineNumber || endLineNumber < visibleStartLineNumber || startLineNumber > visibleEndLineNumber) {\n                // The widget is not in the viewport\n                continue;\n            }\n            // The widget is in the viewport, find a good line for it\n            const widgetLineNumber = Math.max(startLineNumber, visibleStartLineNumber);\n            const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(widgetLineNumber, 0));\n            const laneIndex = this._context.viewModel.glyphLanes.getLanesAtLine(modelPosition.lineNumber).indexOf(widget.preference.lane);\n            requests.push(new WidgetBasedGlyphRenderRequest(widgetLineNumber, laneIndex, widget.preference.zIndex, widget));\n        }\n    }\n    _collectSortedGlyphRenderRequests(ctx) {\n        const requests = [];\n        this._collectDecorationBasedGlyphRenderRequest(ctx, requests);\n        this._collectWidgetBasedGlyphRenderRequest(ctx, requests);\n        // sort requests by lineNumber ASC, lane  ASC, zIndex DESC, type DESC (widgets first), className ASC\n        // don't change this sort unless you understand `prepareRender` below.\n        requests.sort((a, b) => {\n            if (a.lineNumber === b.lineNumber) {\n                if (a.laneIndex === b.laneIndex) {\n                    if (a.zIndex === b.zIndex) {\n                        if (b.type === a.type) {\n                            if (a.type === 0 /* GlyphRenderRequestType.Decoration */ && b.type === 0 /* GlyphRenderRequestType.Decoration */) {\n                                return (a.className < b.className ? -1 : 1);\n                            }\n                            return 0;\n                        }\n                        return b.type - a.type;\n                    }\n                    return b.zIndex - a.zIndex;\n                }\n                return a.laneIndex - b.laneIndex;\n            }\n            return a.lineNumber - b.lineNumber;\n        });\n        return requests;\n    }\n    /**\n     * Will store render information in each widget's renderInfo and in `_decorationGlyphsToRender`.\n     */\n    prepareRender(ctx) {\n        if (!this._glyphMargin) {\n            this._decorationGlyphsToRender = [];\n            return;\n        }\n        for (const widget of Object.values(this._widgets)) {\n            widget.renderInfo = null;\n        }\n        const requests = new ArrayQueue(this._collectSortedGlyphRenderRequests(ctx));\n        const decorationGlyphsToRender = [];\n        while (requests.length > 0) {\n            const first = requests.peek();\n            if (!first) {\n                // not possible\n                break;\n            }\n            // Requests are sorted by lineNumber and lane, so we read all requests for this particular location\n            const requestsAtLocation = requests.takeWhile((el) => el.lineNumber === first.lineNumber && el.laneIndex === first.laneIndex);\n            if (!requestsAtLocation || requestsAtLocation.length === 0) {\n                // not possible\n                break;\n            }\n            const winner = requestsAtLocation[0];\n            if (winner.type === 0 /* GlyphRenderRequestType.Decoration */) {\n                // combine all decorations with the same z-index\n                const classNames = [];\n                // requests are sorted by zIndex, type, and className so we can dedup className by looking at the previous one\n                for (const request of requestsAtLocation) {\n                    if (request.zIndex !== winner.zIndex || request.type !== winner.type) {\n                        break;\n                    }\n                    if (classNames.length === 0 || classNames[classNames.length - 1] !== request.className) {\n                        classNames.push(request.className);\n                    }\n                }\n                decorationGlyphsToRender.push(winner.accept(classNames.join(' '))); // TODO@joyceerhl Implement overflow for remaining decorations\n            }\n            else {\n                // widgets cannot be combined\n                winner.widget.renderInfo = {\n                    lineNumber: winner.lineNumber,\n                    laneIndex: winner.laneIndex,\n                };\n            }\n        }\n        this._decorationGlyphsToRender = decorationGlyphsToRender;\n    }\n    render(ctx) {\n        if (!this._glyphMargin) {\n            for (const widget of Object.values(this._widgets)) {\n                widget.domNode.setDisplay('none');\n            }\n            while (this._managedDomNodes.length > 0) {\n                const domNode = this._managedDomNodes.pop();\n                domNode === null || domNode === void 0 ? void 0 : domNode.domNode.remove();\n            }\n            return;\n        }\n        const width = (Math.round(this._glyphMarginWidth / this._glyphMarginDecorationLaneCount));\n        // Render widgets\n        for (const widget of Object.values(this._widgets)) {\n            if (!widget.renderInfo) {\n                // this widget is not visible\n                widget.domNode.setDisplay('none');\n            }\n            else {\n                const top = ctx.viewportData.relativeVerticalOffset[widget.renderInfo.lineNumber - ctx.viewportData.startLineNumber];\n                const left = this._glyphMarginLeft + widget.renderInfo.laneIndex * this._lineHeight;\n                widget.domNode.setDisplay('block');\n                widget.domNode.setTop(top);\n                widget.domNode.setLeft(left);\n                widget.domNode.setWidth(width);\n                widget.domNode.setHeight(this._lineHeight);\n            }\n        }\n        // Render decorations, reusing previous dom nodes as possible\n        for (let i = 0; i < this._decorationGlyphsToRender.length; i++) {\n            const dec = this._decorationGlyphsToRender[i];\n            const top = ctx.viewportData.relativeVerticalOffset[dec.lineNumber - ctx.viewportData.startLineNumber];\n            const left = this._glyphMarginLeft + dec.laneIndex * this._lineHeight;\n            let domNode;\n            if (i < this._managedDomNodes.length) {\n                domNode = this._managedDomNodes[i];\n            }\n            else {\n                domNode = createFastDomNode(document.createElement('div'));\n                this._managedDomNodes.push(domNode);\n                this.domNode.appendChild(domNode);\n            }\n            domNode.setClassName(`cgmr codicon ` + dec.combinedClassName);\n            domNode.setPosition(`absolute`);\n            domNode.setTop(top);\n            domNode.setLeft(left);\n            domNode.setWidth(width);\n            domNode.setHeight(this._lineHeight);\n        }\n        // remove extra dom nodes\n        while (this._managedDomNodes.length > this._decorationGlyphsToRender.length) {\n            const domNode = this._managedDomNodes.pop();\n            domNode === null || domNode === void 0 ? void 0 : domNode.domNode.remove();\n        }\n    }\n}\n/**\n * A request to render a decoration in the glyph margin at a certain location.\n */\nclass DecorationBasedGlyphRenderRequest {\n    constructor(lineNumber, laneIndex, zIndex, className) {\n        this.lineNumber = lineNumber;\n        this.laneIndex = laneIndex;\n        this.zIndex = zIndex;\n        this.className = className;\n        this.type = 0 /* GlyphRenderRequestType.Decoration */;\n    }\n    accept(combinedClassName) {\n        return new DecorationBasedGlyph(this.lineNumber, this.laneIndex, combinedClassName);\n    }\n}\n/**\n * A request to render a widget in the glyph margin at a certain location.\n */\nclass WidgetBasedGlyphRenderRequest {\n    constructor(lineNumber, laneIndex, zIndex, widget) {\n        this.lineNumber = lineNumber;\n        this.laneIndex = laneIndex;\n        this.zIndex = zIndex;\n        this.widget = widget;\n        this.type = 1 /* GlyphRenderRequestType.Widget */;\n    }\n}\nclass DecorationBasedGlyph {\n    constructor(lineNumber, laneIndex, combinedClassName) {\n        this.lineNumber = lineNumber;\n        this.laneIndex = laneIndex;\n        this.combinedClassName = combinedClassName;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './indentGuides.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorBracketHighlightingForeground1, editorBracketHighlightingForeground2, editorBracketHighlightingForeground3, editorBracketHighlightingForeground4, editorBracketHighlightingForeground5, editorBracketHighlightingForeground6, editorBracketPairGuideActiveBackground1, editorBracketPairGuideActiveBackground2, editorBracketPairGuideActiveBackground3, editorBracketPairGuideActiveBackground4, editorBracketPairGuideActiveBackground5, editorBracketPairGuideActiveBackground6, editorBracketPairGuideBackground1, editorBracketPairGuideBackground2, editorBracketPairGuideBackground3, editorBracketPairGuideBackground4, editorBracketPairGuideBackground5, editorBracketPairGuideBackground6, editorIndentGuide1, editorIndentGuide2, editorIndentGuide3, editorIndentGuide4, editorIndentGuide5, editorIndentGuide6, editorActiveIndentGuide1, editorActiveIndentGuide2, editorActiveIndentGuide3, editorActiveIndentGuide4, editorActiveIndentGuide5, editorActiveIndentGuide6 } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Position } from '../../../common/core/position.js';\nimport { ArrayQueue } from '../../../../base/common/arrays.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { BracketPairGuidesClassNames } from '../../../common/model/guidesTextModelPart.js';\nimport { IndentGuide, HorizontalGuidesState } from '../../../common/textModelGuides.js';\nexport class IndentGuidesOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._primaryPosition = null;\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(146 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(16 /* EditorOption.guides */);\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const wrappingInfo = options.get(146 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._spaceWidth = fontInfo.spaceWidth;\n        this._maxIndentLeft = wrappingInfo.wrappingColumn === -1 ? -1 : (wrappingInfo.wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        this._bracketPairGuideOptions = options.get(16 /* EditorOption.guides */);\n        return true;\n    }\n    onCursorStateChanged(e) {\n        var _a;\n        const selection = e.selections[0];\n        const newPosition = selection.getPosition();\n        if (!((_a = this._primaryPosition) === null || _a === void 0 ? void 0 : _a.equals(newPosition))) {\n            this._primaryPosition = newPosition;\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged; // || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLanguageConfigurationChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        var _a, _b, _c, _d;\n        if (!this._bracketPairGuideOptions.indentation && this._bracketPairGuideOptions.bracketPairs === false) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const scrollWidth = ctx.scrollWidth;\n        const activeCursorPosition = this._primaryPosition;\n        const indents = this.getGuidesByLine(visibleStartLineNumber, Math.min(visibleEndLineNumber + 1, this._context.viewModel.getLineCount()), activeCursorPosition);\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const indent = indents[lineIndex];\n            let result = '';\n            const leftOffset = (_b = (_a = ctx.visibleRangeForPosition(new Position(lineNumber, 1))) === null || _a === void 0 ? void 0 : _a.left) !== null && _b !== void 0 ? _b : 0;\n            for (const guide of indent) {\n                const left = guide.column === -1\n                    ? leftOffset + (guide.visibleColumn - 1) * this._spaceWidth\n                    : ctx.visibleRangeForPosition(new Position(lineNumber, guide.column)).left;\n                if (left > scrollWidth || (this._maxIndentLeft > 0 && left > this._maxIndentLeft)) {\n                    break;\n                }\n                const className = guide.horizontalLine ? (guide.horizontalLine.top ? 'horizontal-top' : 'horizontal-bottom') : 'vertical';\n                const width = guide.horizontalLine\n                    ? ((_d = (_c = ctx.visibleRangeForPosition(new Position(lineNumber, guide.horizontalLine.endColumn))) === null || _c === void 0 ? void 0 : _c.left) !== null && _d !== void 0 ? _d : (left + this._spaceWidth)) - left\n                    : this._spaceWidth;\n                result += `<div class=\"core-guide ${guide.className} ${className}\" style=\"left:${left}px;width:${width}px\"></div>`;\n            }\n            output[lineIndex] = result;\n        }\n        this._renderResult = output;\n    }\n    getGuidesByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition) {\n        const bracketGuides = this._bracketPairGuideOptions.bracketPairs !== false\n            ? this._context.viewModel.getBracketGuidesInRangeByLine(visibleStartLineNumber, visibleEndLineNumber, activeCursorPosition, {\n                highlightActive: this._bracketPairGuideOptions.highlightActiveBracketPair,\n                horizontalGuides: this._bracketPairGuideOptions.bracketPairsHorizontal === true\n                    ? HorizontalGuidesState.Enabled\n                    : this._bracketPairGuideOptions.bracketPairsHorizontal === 'active'\n                        ? HorizontalGuidesState.EnabledForActive\n                        : HorizontalGuidesState.Disabled,\n                includeInactive: this._bracketPairGuideOptions.bracketPairs === true,\n            })\n            : null;\n        const indentGuides = this._bracketPairGuideOptions.indentation\n            ? this._context.viewModel.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber)\n            : null;\n        let activeIndentStartLineNumber = 0;\n        let activeIndentEndLineNumber = 0;\n        let activeIndentLevel = 0;\n        if (this._bracketPairGuideOptions.highlightActiveIndentation !== false && activeCursorPosition) {\n            const activeIndentInfo = this._context.viewModel.getActiveIndentGuide(activeCursorPosition.lineNumber, visibleStartLineNumber, visibleEndLineNumber);\n            activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\n            activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\n            activeIndentLevel = activeIndentInfo.indent;\n        }\n        const { indentSize } = this._context.viewModel.model.getOptions();\n        const result = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineGuides = new Array();\n            result.push(lineGuides);\n            const bracketGuidesInLine = bracketGuides ? bracketGuides[lineNumber - visibleStartLineNumber] : [];\n            const bracketGuidesInLineQueue = new ArrayQueue(bracketGuidesInLine);\n            const indentGuidesInLine = indentGuides ? indentGuides[lineNumber - visibleStartLineNumber] : 0;\n            for (let indentLvl = 1; indentLvl <= indentGuidesInLine; indentLvl++) {\n                const indentGuide = (indentLvl - 1) * indentSize + 1;\n                const isActive = \n                // Disable active indent guide if there are bracket guides.\n                (this._bracketPairGuideOptions.highlightActiveIndentation === 'always' || bracketGuidesInLine.length === 0) &&\n                    activeIndentStartLineNumber <= lineNumber &&\n                    lineNumber <= activeIndentEndLineNumber &&\n                    indentLvl === activeIndentLevel;\n                lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => g.visibleColumn < indentGuide) || []);\n                const peeked = bracketGuidesInLineQueue.peek();\n                if (!peeked || peeked.visibleColumn !== indentGuide || peeked.horizontalLine) {\n                    lineGuides.push(new IndentGuide(indentGuide, -1, `core-guide-indent lvl-${(indentLvl - 1) % 30}` + (isActive ? ' indent-active' : ''), null, -1, -1));\n                }\n            }\n            lineGuides.push(...bracketGuidesInLineQueue.takeWhile(g => true) || []);\n        }\n        return result;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nfunction transparentToUndefined(color) {\n    if (color && color.isTransparent()) {\n        return undefined;\n    }\n    return color;\n}\nregisterThemingParticipant((theme, collector) => {\n    const colors = [\n        { bracketColor: editorBracketHighlightingForeground1, guideColor: editorBracketPairGuideBackground1, guideColorActive: editorBracketPairGuideActiveBackground1 },\n        { bracketColor: editorBracketHighlightingForeground2, guideColor: editorBracketPairGuideBackground2, guideColorActive: editorBracketPairGuideActiveBackground2 },\n        { bracketColor: editorBracketHighlightingForeground3, guideColor: editorBracketPairGuideBackground3, guideColorActive: editorBracketPairGuideActiveBackground3 },\n        { bracketColor: editorBracketHighlightingForeground4, guideColor: editorBracketPairGuideBackground4, guideColorActive: editorBracketPairGuideActiveBackground4 },\n        { bracketColor: editorBracketHighlightingForeground5, guideColor: editorBracketPairGuideBackground5, guideColorActive: editorBracketPairGuideActiveBackground5 },\n        { bracketColor: editorBracketHighlightingForeground6, guideColor: editorBracketPairGuideBackground6, guideColorActive: editorBracketPairGuideActiveBackground6 }\n    ];\n    const colorProvider = new BracketPairGuidesClassNames();\n    const indentColors = [\n        { indentColor: editorIndentGuide1, indentColorActive: editorActiveIndentGuide1 },\n        { indentColor: editorIndentGuide2, indentColorActive: editorActiveIndentGuide2 },\n        { indentColor: editorIndentGuide3, indentColorActive: editorActiveIndentGuide3 },\n        { indentColor: editorIndentGuide4, indentColorActive: editorActiveIndentGuide4 },\n        { indentColor: editorIndentGuide5, indentColorActive: editorActiveIndentGuide5 },\n        { indentColor: editorIndentGuide6, indentColorActive: editorActiveIndentGuide6 },\n    ];\n    const colorValues = colors\n        .map(c => {\n        var _a, _b;\n        const bracketColor = theme.getColor(c.bracketColor);\n        const guideColor = theme.getColor(c.guideColor);\n        const guideColorActive = theme.getColor(c.guideColorActive);\n        const effectiveGuideColor = transparentToUndefined((_a = transparentToUndefined(guideColor)) !== null && _a !== void 0 ? _a : bracketColor === null || bracketColor === void 0 ? void 0 : bracketColor.transparent(0.3));\n        const effectiveGuideColorActive = transparentToUndefined((_b = transparentToUndefined(guideColorActive)) !== null && _b !== void 0 ? _b : bracketColor);\n        if (!effectiveGuideColor || !effectiveGuideColorActive) {\n            return undefined;\n        }\n        return {\n            guideColor: effectiveGuideColor,\n            guideColorActive: effectiveGuideColorActive,\n        };\n    })\n        .filter(isDefined);\n    const indentColorValues = indentColors\n        .map(c => {\n        const indentColor = theme.getColor(c.indentColor);\n        const indentColorActive = theme.getColor(c.indentColorActive);\n        const effectiveIndentColor = transparentToUndefined(indentColor);\n        const effectiveIndentColorActive = transparentToUndefined(indentColorActive);\n        if (!effectiveIndentColor || !effectiveIndentColorActive) {\n            return undefined;\n        }\n        return {\n            indentColor: effectiveIndentColor,\n            indentColorActive: effectiveIndentColorActive,\n        };\n    })\n        .filter(isDefined);\n    if (colorValues.length > 0) {\n        for (let level = 0; level < 30; level++) {\n            const colors = colorValues[level % colorValues.length];\n            collector.addRule(`.monaco-editor .${colorProvider.getInlineClassNameOfLevel(level).replace(/ /g, '.')} { --guide-color: ${colors.guideColor}; --guide-color-active: ${colors.guideColorActive}; }`);\n        }\n        collector.addRule(`.monaco-editor .vertical { box-shadow: 1px 0 0 0 var(--guide-color) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top { border-top: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom { border-bottom: 1px solid var(--guide-color); }`);\n        collector.addRule(`.monaco-editor .vertical.${colorProvider.activeClassName} { box-shadow: 1px 0 0 0 var(--guide-color-active) inset; }`);\n        collector.addRule(`.monaco-editor .horizontal-top.${colorProvider.activeClassName} { border-top: 1px solid var(--guide-color-active); }`);\n        collector.addRule(`.monaco-editor .horizontal-bottom.${colorProvider.activeClassName} { border-bottom: 1px solid var(--guide-color-active); }`);\n    }\n    if (indentColorValues.length > 0) {\n        for (let level = 0; level < 30; level++) {\n            const colors = indentColorValues[level % indentColorValues.length];\n            collector.addRule(`.monaco-editor .lines-content .core-guide-indent.lvl-${level} { --indent-color: ${colors.indentColor}; --indent-color-active: ${colors.indentColorActive}; }`);\n        }\n        collector.addRule(`.monaco-editor .lines-content .core-guide-indent { box-shadow: 1px 0 0 0 var(--indent-color) inset; }`);\n        collector.addRule(`.monaco-editor .lines-content .core-guide-indent.indent-active { box-shadow: 1px 0 0 0 var(--indent-color-active) inset; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class DomReadingContext {\n    get didDomLayout() {\n        return this._didDomLayout;\n    }\n    readClientRect() {\n        if (!this._clientRectRead) {\n            this._clientRectRead = true;\n            const rect = this._domNode.getBoundingClientRect();\n            this.markDidDomLayout();\n            this._clientRectDeltaLeft = rect.left;\n            this._clientRectScale = rect.width / this._domNode.offsetWidth;\n        }\n    }\n    get clientRectDeltaLeft() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectDeltaLeft;\n    }\n    get clientRectScale() {\n        if (!this._clientRectRead) {\n            this.readClientRect();\n        }\n        return this._clientRectScale;\n    }\n    constructor(_domNode, endNode) {\n        this._domNode = _domNode;\n        this.endNode = endNode;\n        this._didDomLayout = false;\n        this._clientRectDeltaLeft = 0;\n        this._clientRectScale = 1;\n        this._clientRectRead = false;\n    }\n    markDidDomLayout() {\n        this._didDomLayout = true;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport './viewLines.css';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { HorizontalPosition, HorizontalRange, LineVisibleRanges } from '../../view/renderingContext.js';\nimport { VisibleLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { DomReadingContext } from './domReadingContext.js';\nimport { ViewLine, ViewLineOptions } from './viewLine.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nclass LastRenderedData {\n    constructor() {\n        this._currentVisibleRange = new Range(1, 1, 1, 1);\n    }\n    getCurrentVisibleRange() {\n        return this._currentVisibleRange;\n    }\n    setCurrentVisibleRange(currentVisibleRange) {\n        this._currentVisibleRange = currentVisibleRange;\n    }\n}\nclass HorizontalRevealRangeRequest {\n    constructor(minimalReveal, lineNumber, startColumn, endColumn, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.lineNumber = lineNumber;\n        this.startColumn = startColumn;\n        this.endColumn = endColumn;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'range';\n        this.minLineNumber = lineNumber;\n        this.maxLineNumber = lineNumber;\n    }\n}\nclass HorizontalRevealSelectionsRequest {\n    constructor(minimalReveal, selections, startScrollTop, stopScrollTop, scrollType) {\n        this.minimalReveal = minimalReveal;\n        this.selections = selections;\n        this.startScrollTop = startScrollTop;\n        this.stopScrollTop = stopScrollTop;\n        this.scrollType = scrollType;\n        this.type = 'selections';\n        let minLineNumber = selections[0].startLineNumber;\n        let maxLineNumber = selections[0].endLineNumber;\n        for (let i = 1, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n            maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n        }\n        this.minLineNumber = minLineNumber;\n        this.maxLineNumber = maxLineNumber;\n    }\n}\nexport class ViewLines extends ViewPart {\n    constructor(context, linesContent) {\n        super(context);\n        this._linesContent = linesContent;\n        this._textRangeRestingSpot = document.createElement('div');\n        this._visibleLines = new VisibleLinesCollection(this);\n        this.domNode = this._visibleLines.domNode;\n        const conf = this._context.configuration;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(146 /* EditorOption.wrappingInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(100 /* EditorOption.revealHorizontalRightPadding */);\n        this._cursorSurroundingLines = options.get(29 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(30 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        this._viewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        PartFingerprints.write(this.domNode, 8 /* PartFingerprint.ViewLines */);\n        this.domNode.setClassName(`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        applyFontInfo(this.domNode, fontInfo);\n        // --- width & height\n        this._maxLineWidth = 0;\n        this._asyncUpdateLineWidths = new RunOnceScheduler(() => {\n            this._updateLineWidthsSlow();\n        }, 200);\n        this._asyncCheckMonospaceFontAssumptions = new RunOnceScheduler(() => {\n            this._checkMonospaceFontAssumptions();\n        }, 2000);\n        this._lastRenderedData = new LastRenderedData();\n        this._horizontalRevealRequest = null;\n        // sticky scroll widget\n        this._stickyScrollEnabled = options.get(115 /* EditorOption.stickyScroll */).enabled;\n        this._maxNumberStickyLines = options.get(115 /* EditorOption.stickyScroll */).maxLineCount;\n    }\n    dispose() {\n        this._asyncUpdateLineWidths.dispose();\n        this._asyncCheckMonospaceFontAssumptions.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    // ---- begin IVisibleLinesHost\n    createVisibleLine() {\n        return new ViewLine(this._viewLineOptions);\n    }\n    // ---- end IVisibleLinesHost\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        if (e.hasChanged(146 /* EditorOption.wrappingInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingInfo = options.get(146 /* EditorOption.wrappingInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._isViewportWrapping = wrappingInfo.isViewportWrapping;\n        this._revealHorizontalRightPadding = options.get(100 /* EditorOption.revealHorizontalRightPadding */);\n        this._cursorSurroundingLines = options.get(29 /* EditorOption.cursorSurroundingLines */);\n        this._cursorSurroundingLinesStyle = options.get(30 /* EditorOption.cursorSurroundingLinesStyle */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        // sticky scroll\n        this._stickyScrollEnabled = options.get(115 /* EditorOption.stickyScroll */).enabled;\n        this._maxNumberStickyLines = options.get(115 /* EditorOption.stickyScroll */).maxLineCount;\n        applyFontInfo(this.domNode, fontInfo);\n        this._onOptionsMaybeChanged();\n        if (e.hasChanged(145 /* EditorOption.layoutInfo */)) {\n            this._maxLineWidth = 0;\n        }\n        return true;\n    }\n    _onOptionsMaybeChanged() {\n        const conf = this._context.configuration;\n        const newViewLineOptions = new ViewLineOptions(conf, this._context.theme.type);\n        if (!this._viewLineOptions.equals(newViewLineOptions)) {\n            this._viewLineOptions = newViewLineOptions;\n            const startLineNumber = this._visibleLines.getStartLineNumber();\n            const endLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n                const line = this._visibleLines.getVisibleLine(lineNumber);\n                line.onOptionsChanged(this._viewLineOptions);\n            }\n            return true;\n        }\n        return false;\n    }\n    onCursorStateChanged(e) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let r = false;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            r = this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged() || r;\n        }\n        return r;\n    }\n    onDecorationsChanged(e) {\n        if (true /*e.inlineDecorationsChanged*/) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged();\n            }\n        }\n        return true;\n    }\n    onFlushed(e) {\n        const shouldRender = this._visibleLines.onFlushed(e);\n        this._maxLineWidth = 0;\n        return shouldRender;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onRevealRangeRequest(e) {\n        // Using the future viewport here in order to handle multiple\n        // incoming reveal range requests that might all desire to be animated\n        const desiredScrollTop = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e.source, e.minimalReveal, e.range, e.selections, e.verticalType);\n        if (desiredScrollTop === -1) {\n            // marker to abort the reveal range request\n            return false;\n        }\n        // validate the new desired scroll top\n        let newScrollPosition = this._context.viewLayout.validateScrollPosition({ scrollTop: desiredScrollTop });\n        if (e.revealHorizontal) {\n            if (e.range && e.range.startLineNumber !== e.range.endLineNumber) {\n                // Two or more lines? => scroll to base (That's how you see most of the two lines)\n                newScrollPosition = {\n                    scrollTop: newScrollPosition.scrollTop,\n                    scrollLeft: 0\n                };\n            }\n            else if (e.range) {\n                // We don't necessarily know the horizontal offset of this range since the line might not be in the view...\n                this._horizontalRevealRequest = new HorizontalRevealRangeRequest(e.minimalReveal, e.range.startLineNumber, e.range.startColumn, e.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n            else if (e.selections && e.selections.length > 0) {\n                this._horizontalRevealRequest = new HorizontalRevealSelectionsRequest(e.minimalReveal, e.selections, this._context.viewLayout.getCurrentScrollTop(), newScrollPosition.scrollTop, e.scrollType);\n            }\n        }\n        else {\n            this._horizontalRevealRequest = null;\n        }\n        const scrollTopDelta = Math.abs(this._context.viewLayout.getCurrentScrollTop() - newScrollPosition.scrollTop);\n        const scrollType = (scrollTopDelta <= this._lineHeight ? 1 /* ScrollType.Immediate */ : e.scrollType);\n        this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition, scrollType);\n        return true;\n    }\n    onScrollChanged(e) {\n        if (this._horizontalRevealRequest && e.scrollLeftChanged) {\n            // cancel any outstanding horizontal reveal request if someone else scrolls horizontally.\n            this._horizontalRevealRequest = null;\n        }\n        if (this._horizontalRevealRequest && e.scrollTopChanged) {\n            const min = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            const max = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);\n            if (e.scrollTop < min || e.scrollTop > max) {\n                // cancel any outstanding horizontal reveal request if someone else scrolls vertically.\n                this._horizontalRevealRequest = null;\n            }\n        }\n        this.domNode.setWidth(e.scrollWidth);\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        return this._visibleLines.onZonesChanged(e);\n    }\n    onThemeChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    // ---- end view event handlers\n    // ----------- HELPERS FOR OTHERS\n    getPositionFromDOMInfo(spanNode, offset) {\n        const viewLineDomNode = this._getViewLineDomNode(spanNode);\n        if (viewLineDomNode === null) {\n            // Couldn't find view line node\n            return null;\n        }\n        const lineNumber = this._getLineNumberFor(viewLineDomNode);\n        if (lineNumber === -1) {\n            // Couldn't find view line node\n            return null;\n        }\n        if (lineNumber < 1 || lineNumber > this._context.viewModel.getLineCount()) {\n            // lineNumber is outside range\n            return null;\n        }\n        if (this._context.viewModel.getLineMaxColumn(lineNumber) === 1) {\n            // Line is empty\n            return new Position(lineNumber, 1);\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return null;\n        }\n        let column = this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(spanNode, offset);\n        const minColumn = this._context.viewModel.getLineMinColumn(lineNumber);\n        if (column < minColumn) {\n            column = minColumn;\n        }\n        return new Position(lineNumber, column);\n    }\n    _getViewLineDomNode(node) {\n        while (node && node.nodeType === 1) {\n            if (node.className === ViewLine.CLASS_NAME) {\n                return node;\n            }\n            node = node.parentElement;\n        }\n        return null;\n    }\n    /**\n     * @returns the line number of this view line dom node.\n     */\n    _getLineNumberFor(domNode) {\n        const startLineNumber = this._visibleLines.getStartLineNumber();\n        const endLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const line = this._visibleLines.getVisibleLine(lineNumber);\n            if (domNode === line.getDomNode()) {\n                return lineNumber;\n            }\n        }\n        return -1;\n    }\n    getLineWidth(lineNumber) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n            // Couldn't find line\n            return -1;\n        }\n        const context = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        const result = this._visibleLines.getVisibleLine(lineNumber).getWidth(context);\n        this._updateLineWidthsSlowIfDomDidLayout(context);\n        return result;\n    }\n    linesVisibleRangesForRange(_range, includeNewLines) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        const originalEndLineNumber = _range.endLineNumber;\n        const range = Range.intersectRanges(_range, this._lastRenderedData.getCurrentVisibleRange());\n        if (!range) {\n            return null;\n        }\n        const visibleRanges = [];\n        let visibleRangesLen = 0;\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        let nextLineModelLineNumber = 0;\n        if (includeNewLines) {\n            nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;\n        }\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = range.startLineNumber; lineNumber <= range.endLineNumber; lineNumber++) {\n            if (lineNumber < rendStartLineNumber || lineNumber > rendEndLineNumber) {\n                continue;\n            }\n            const startColumn = lineNumber === range.startLineNumber ? range.startColumn : 1;\n            const continuesInNextLine = lineNumber !== range.endLineNumber;\n            const endColumn = continuesInNextLine ? this._context.viewModel.getLineMaxColumn(lineNumber) : range.endColumn;\n            const visibleRangesForLine = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n            if (!visibleRangesForLine) {\n                continue;\n            }\n            if (includeNewLines && lineNumber < originalEndLineNumber) {\n                const currentLineModelLineNumber = nextLineModelLineNumber;\n                nextLineModelLineNumber = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber + 1, 1)).lineNumber;\n                if (currentLineModelLineNumber !== nextLineModelLineNumber) {\n                    visibleRangesForLine.ranges[visibleRangesForLine.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth;\n                }\n            }\n            visibleRanges[visibleRangesLen++] = new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine, lineNumber, HorizontalRange.from(visibleRangesForLine.ranges), continuesInNextLine);\n        }\n        this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n        if (visibleRangesLen === 0) {\n            return null;\n        }\n        return visibleRanges;\n    }\n    _visibleRangesForLineRange(lineNumber, startColumn, endColumn) {\n        if (this.shouldRender()) {\n            // Cannot read from the DOM because it is dirty\n            // i.e. the model & the dom are out of sync, so I'd be reading something stale\n            return null;\n        }\n        if (lineNumber < this._visibleLines.getStartLineNumber() || lineNumber > this._visibleLines.getEndLineNumber()) {\n            return null;\n        }\n        const domReadingContext = new DomReadingContext(this.domNode.domNode, this._textRangeRestingSpot);\n        const result = this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber, startColumn, endColumn, domReadingContext);\n        this._updateLineWidthsSlowIfDomDidLayout(domReadingContext);\n        return result;\n    }\n    visibleRangeForPosition(position) {\n        const visibleRanges = this._visibleRangesForLineRange(position.lineNumber, position.column, position.column);\n        if (!visibleRanges) {\n            return null;\n        }\n        return new HorizontalPosition(visibleRanges.outsideRenderedLine, visibleRanges.ranges[0].left);\n    }\n    /**\n     * Updates the max line width if it is fast to compute.\n     * Returns true if all lines were taken into account.\n     * Returns false if some lines need to be reevaluated (in a slow fashion).\n     */\n    _updateLineWidthsFast() {\n        return this._updateLineWidths(true);\n    }\n    _updateLineWidthsSlow() {\n        this._updateLineWidths(false);\n    }\n    /**\n     * Update the line widths using DOM layout information after someone else\n     * has caused a synchronous layout.\n     */\n    _updateLineWidthsSlowIfDomDidLayout(domReadingContext) {\n        if (!domReadingContext.didDomLayout) {\n            // only proceed if we just did a layout\n            return;\n        }\n        if (this._asyncUpdateLineWidths.isScheduled()) {\n            // reading widths is not scheduled => widths are up-to-date\n            return;\n        }\n        this._asyncUpdateLineWidths.cancel();\n        this._updateLineWidthsSlow();\n    }\n    _updateLineWidths(fast) {\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        let localMaxLineWidth = 1;\n        let allWidthsComputed = true;\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (fast && !visibleLine.getWidthIsFast()) {\n                // Cannot compute width in a fast way for this line\n                allWidthsComputed = false;\n                continue;\n            }\n            localMaxLineWidth = Math.max(localMaxLineWidth, visibleLine.getWidth(null));\n        }\n        if (allWidthsComputed && rendStartLineNumber === 1 && rendEndLineNumber === this._context.viewModel.getLineCount()) {\n            // we know the max line width for all the lines\n            this._maxLineWidth = 0;\n        }\n        this._ensureMaxLineWidth(localMaxLineWidth);\n        return allWidthsComputed;\n    }\n    _checkMonospaceFontAssumptions() {\n        // Problems with monospace assumptions are more apparent for longer lines,\n        // as small rounding errors start to sum up, so we will select the longest\n        // line for a closer inspection\n        let longestLineNumber = -1;\n        let longestWidth = -1;\n        const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n        const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n        for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n            const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n            if (visibleLine.needsMonospaceFontCheck()) {\n                const lineWidth = visibleLine.getWidth(null);\n                if (lineWidth > longestWidth) {\n                    longestWidth = lineWidth;\n                    longestLineNumber = lineNumber;\n                }\n            }\n        }\n        if (longestLineNumber === -1) {\n            return;\n        }\n        if (!this._visibleLines.getVisibleLine(longestLineNumber).monospaceAssumptionsAreValid()) {\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                visibleLine.onMonospaceAssumptionsInvalidated();\n            }\n        }\n    }\n    prepareRender() {\n        throw new Error('Not supported');\n    }\n    render() {\n        throw new Error('Not supported');\n    }\n    renderText(viewportData) {\n        // (1) render lines - ensures lines are in the DOM\n        this._visibleLines.renderLines(viewportData);\n        this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange);\n        this.domNode.setWidth(this._context.viewLayout.getScrollWidth());\n        this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1000000));\n        // (2) compute horizontal scroll position:\n        //  - this must happen after the lines are in the DOM since it might need a line that rendered just now\n        //  - it might change `scrollWidth` and `scrollLeft`\n        if (this._horizontalRevealRequest) {\n            const horizontalRevealRequest = this._horizontalRevealRequest;\n            // Check that we have the line that contains the horizontal range in the viewport\n            if (viewportData.startLineNumber <= horizontalRevealRequest.minLineNumber && horizontalRevealRequest.maxLineNumber <= viewportData.endLineNumber) {\n                this._horizontalRevealRequest = null;\n                // allow `visibleRangesForRange2` to work\n                this.onDidRender();\n                // compute new scroll position\n                const newScrollLeft = this._computeScrollLeftToReveal(horizontalRevealRequest);\n                if (newScrollLeft) {\n                    if (!this._isViewportWrapping) {\n                        // ensure `scrollWidth` is large enough\n                        this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset);\n                    }\n                    // set `scrollLeft`\n                    this._context.viewModel.viewLayout.setScrollPosition({\n                        scrollLeft: newScrollLeft.scrollLeft\n                    }, horizontalRevealRequest.scrollType);\n                }\n            }\n        }\n        // Update max line width (not so important, it is just so the horizontal scrollbar doesn't get too small)\n        if (!this._updateLineWidthsFast()) {\n            // Computing the width of some lines would be slow => delay it\n            this._asyncUpdateLineWidths.schedule();\n        }\n        else {\n            this._asyncUpdateLineWidths.cancel();\n        }\n        if (platform.isLinux && !this._asyncCheckMonospaceFontAssumptions.isScheduled()) {\n            const rendStartLineNumber = this._visibleLines.getStartLineNumber();\n            const rendEndLineNumber = this._visibleLines.getEndLineNumber();\n            for (let lineNumber = rendStartLineNumber; lineNumber <= rendEndLineNumber; lineNumber++) {\n                const visibleLine = this._visibleLines.getVisibleLine(lineNumber);\n                if (visibleLine.needsMonospaceFontCheck()) {\n                    this._asyncCheckMonospaceFontAssumptions.schedule();\n                    break;\n                }\n            }\n        }\n        // (3) handle scrolling\n        this._linesContent.setLayerHinting(this._canUseLayerHinting);\n        this._linesContent.setContain('strict');\n        const adjustedScrollTop = this._context.viewLayout.getCurrentScrollTop() - viewportData.bigNumbersDelta;\n        this._linesContent.setTop(-adjustedScrollTop);\n        this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());\n    }\n    // --- width\n    _ensureMaxLineWidth(lineWidth) {\n        const iLineWidth = Math.ceil(lineWidth);\n        if (this._maxLineWidth < iLineWidth) {\n            this._maxLineWidth = iLineWidth;\n            this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth);\n        }\n    }\n    _computeScrollTopToRevealRange(viewport, source, minimalReveal, range, selections, verticalType) {\n        const viewportStartY = viewport.top;\n        const viewportHeight = viewport.height;\n        const viewportEndY = viewportStartY + viewportHeight;\n        let boxIsSingleRange;\n        let boxStartY;\n        let boxEndY;\n        if (selections && selections.length > 0) {\n            let minLineNumber = selections[0].startLineNumber;\n            let maxLineNumber = selections[0].endLineNumber;\n            for (let i = 1, len = selections.length; i < len; i++) {\n                const selection = selections[i];\n                minLineNumber = Math.min(minLineNumber, selection.startLineNumber);\n                maxLineNumber = Math.max(maxLineNumber, selection.endLineNumber);\n            }\n            boxIsSingleRange = false;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(minLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(maxLineNumber) + this._lineHeight;\n        }\n        else if (range) {\n            boxIsSingleRange = true;\n            boxStartY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber);\n            boxEndY = this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber) + this._lineHeight;\n        }\n        else {\n            return -1;\n        }\n        const shouldIgnoreScrollOff = (source === 'mouse' || minimalReveal) && this._cursorSurroundingLinesStyle === 'default';\n        let paddingTop = 0;\n        let paddingBottom = 0;\n        if (!shouldIgnoreScrollOff) {\n            const context = Math.min((viewportHeight / this._lineHeight) / 2, this._cursorSurroundingLines);\n            if (this._stickyScrollEnabled) {\n                paddingTop = Math.max(context, this._maxNumberStickyLines) * this._lineHeight;\n            }\n            else {\n                paddingTop = context * this._lineHeight;\n            }\n            paddingBottom = Math.max(0, (context - 1)) * this._lineHeight;\n        }\n        else {\n            if (!minimalReveal) {\n                // Reveal one more line above (this case is hit when dragging)\n                paddingTop = this._lineHeight;\n            }\n        }\n        if (!minimalReveal) {\n            if (verticalType === 0 /* viewEvents.VerticalRevealType.Simple */ || verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */) {\n                // Reveal one line more when the last line would be covered by the scrollbar - arrow down case or revealing a line explicitly at bottom\n                paddingBottom += this._lineHeight;\n            }\n        }\n        boxStartY -= paddingTop;\n        boxEndY += paddingBottom;\n        let newScrollTop;\n        if (boxEndY - boxStartY > viewportHeight) {\n            // the box is larger than the viewport ... scroll to its top\n            if (!boxIsSingleRange) {\n                // do not reveal multiple cursors if there are more than fit the viewport\n                return -1;\n            }\n            newScrollTop = boxStartY;\n        }\n        else if (verticalType === 5 /* viewEvents.VerticalRevealType.NearTop */ || verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */) {\n            if (verticalType === 6 /* viewEvents.VerticalRevealType.NearTopIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // We want a gap that is 20% of the viewport, but with a minimum of 5 lines\n                const desiredGapAbove = Math.max(5 * this._lineHeight, viewportHeight * 0.2);\n                // Try to scroll just above the box with the desired gap\n                const desiredScrollTop = boxStartY - desiredGapAbove;\n                // But ensure that the box is not pushed out of viewport\n                const minScrollTop = boxEndY - viewportHeight;\n                newScrollTop = Math.max(minScrollTop, desiredScrollTop);\n            }\n        }\n        else if (verticalType === 1 /* viewEvents.VerticalRevealType.Center */ || verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */) {\n            if (verticalType === 2 /* viewEvents.VerticalRevealType.CenterIfOutsideViewport */ && viewportStartY <= boxStartY && boxEndY <= viewportEndY) {\n                // Box is already in the viewport... do nothing\n                newScrollTop = viewportStartY;\n            }\n            else {\n                // Box is outside the viewport... center it\n                const boxMiddleY = (boxStartY + boxEndY) / 2;\n                newScrollTop = Math.max(0, boxMiddleY - viewportHeight / 2);\n            }\n        }\n        else {\n            newScrollTop = this._computeMinimumScrolling(viewportStartY, viewportEndY, boxStartY, boxEndY, verticalType === 3 /* viewEvents.VerticalRevealType.Top */, verticalType === 4 /* viewEvents.VerticalRevealType.Bottom */);\n        }\n        return newScrollTop;\n    }\n    _computeScrollLeftToReveal(horizontalRevealRequest) {\n        const viewport = this._context.viewLayout.getCurrentViewport();\n        const layoutInfo = this._context.configuration.options.get(145 /* EditorOption.layoutInfo */);\n        const viewportStartX = viewport.left;\n        const viewportEndX = viewportStartX + viewport.width - layoutInfo.verticalScrollbarWidth;\n        let boxStartX = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n        let boxEndX = 0;\n        if (horizontalRevealRequest.type === 'range') {\n            const visibleRanges = this._visibleRangesForLineRange(horizontalRevealRequest.lineNumber, horizontalRevealRequest.startColumn, horizontalRevealRequest.endColumn);\n            if (!visibleRanges) {\n                return null;\n            }\n            for (const visibleRange of visibleRanges.ranges) {\n                boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n            }\n        }\n        else {\n            for (const selection of horizontalRevealRequest.selections) {\n                if (selection.startLineNumber !== selection.endLineNumber) {\n                    return null;\n                }\n                const visibleRanges = this._visibleRangesForLineRange(selection.startLineNumber, selection.startColumn, selection.endColumn);\n                if (!visibleRanges) {\n                    return null;\n                }\n                for (const visibleRange of visibleRanges.ranges) {\n                    boxStartX = Math.min(boxStartX, Math.round(visibleRange.left));\n                    boxEndX = Math.max(boxEndX, Math.round(visibleRange.left + visibleRange.width));\n                }\n            }\n        }\n        if (!horizontalRevealRequest.minimalReveal) {\n            boxStartX = Math.max(0, boxStartX - ViewLines.HORIZONTAL_EXTRA_PX);\n            boxEndX += this._revealHorizontalRightPadding;\n        }\n        if (horizontalRevealRequest.type === 'selections' && boxEndX - boxStartX > viewport.width) {\n            return null;\n        }\n        const newScrollLeft = this._computeMinimumScrolling(viewportStartX, viewportEndX, boxStartX, boxEndX);\n        return {\n            scrollLeft: newScrollLeft,\n            maxHorizontalOffset: boxEndX\n        };\n    }\n    _computeMinimumScrolling(viewportStart, viewportEnd, boxStart, boxEnd, revealAtStart, revealAtEnd) {\n        viewportStart = viewportStart | 0;\n        viewportEnd = viewportEnd | 0;\n        boxStart = boxStart | 0;\n        boxEnd = boxEnd | 0;\n        revealAtStart = !!revealAtStart;\n        revealAtEnd = !!revealAtEnd;\n        const viewportLength = viewportEnd - viewportStart;\n        const boxLength = boxEnd - boxStart;\n        if (boxLength < viewportLength) {\n            // The box would fit in the viewport\n            if (revealAtStart) {\n                return boxStart;\n            }\n            if (revealAtEnd) {\n                return Math.max(0, boxEnd - viewportLength);\n            }\n            if (boxStart < viewportStart) {\n                // The box is above the viewport\n                return boxStart;\n            }\n            else if (boxEnd > viewportEnd) {\n                // The box is below the viewport\n                return Math.max(0, boxEnd - viewportLength);\n            }\n        }\n        else {\n            // The box would not fit in the viewport\n            // Reveal the beginning of the box\n            return boxStart;\n        }\n        return viewportStart;\n    }\n}\n/**\n * Adds this amount of pixels to the right of lines (no-one wants to type near the edge of the viewport)\n */\nViewLines.HORIZONTAL_EXTRA_PX = 30;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './linesDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class LinesDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._decorationsLeft = layoutInfo.decorationsLeft;\n        this._decorationsWidth = layoutInfo.decorationsWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        var _a, _b;\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const linesDecorationsClassName = d.options.linesDecorationsClassName;\n            const zIndex = d.options.zIndex;\n            if (linesDecorationsClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, linesDecorationsClassName, (_a = d.options.linesDecorationsTooltip) !== null && _a !== void 0 ? _a : null, zIndex);\n            }\n            const firstLineDecorationClassName = d.options.firstLineDecorationClassName;\n            if (firstLineDecorationClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.startLineNumber, firstLineDecorationClassName, (_b = d.options.linesDecorationsTooltip) !== null && _b !== void 0 ? _b : null, zIndex);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const left = this._decorationsLeft.toString();\n        const width = this._decorationsWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const decorations = toRender[lineIndex].getDecorations();\n            let lineOutput = '';\n            for (const decoration of decorations) {\n                let addition = '<div class=\"cldr ' + decoration.className;\n                if (decoration.tooltip !== null) {\n                    addition += '\" title=\"' + decoration.tooltip; // The tooltip is already escaped.\n                }\n                addition += common;\n                lineOutput += addition;\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './marginDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\nexport class MarginViewLineDecorationsOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const marginClassName = d.options.marginClassName;\n            const zIndex = d.options.zIndex;\n            if (marginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, marginClassName, null, zIndex);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const decorations = toRender[lineIndex].getDecorations();\n            let lineOutput = '';\n            for (const decoration of decorations) {\n                lineOutput += '<div class=\"cmdr ' + decoration.className + '\" style=\"\"></div>';\n            }\n            output[lineIndex] = lineOutput;\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        return this._renderResult[lineNumber - startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const allCharCodes = (() => {\n    const v = [];\n    for (let i = 32 /* Constants.START_CH_CODE */; i <= 126 /* Constants.END_CH_CODE */; i++) {\n        v.push(i);\n    }\n    v.push(65533 /* Constants.UNKNOWN_CODE */);\n    return v;\n})();\nexport const getCharIndex = (chCode, fontScale) => {\n    chCode -= 32 /* Constants.START_CH_CODE */;\n    if (chCode < 0 || chCode > 96 /* Constants.CHAR_COUNT */) {\n        if (fontScale <= 2) {\n            // for smaller scales, we can get away with using any ASCII character...\n            return (chCode + 96 /* Constants.CHAR_COUNT */) % 96 /* Constants.CHAR_COUNT */;\n        }\n        return 96 /* Constants.CHAR_COUNT */ - 1; // unknown symbol\n    }\n    return chCode;\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getCharIndex } from './minimapCharSheet.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\nexport class MinimapCharRenderer {\n    constructor(charData, scale) {\n        this.scale = scale;\n        this._minimapCharRendererBrand = undefined;\n        this.charDataNormal = MinimapCharRenderer.soften(charData, 12 / 15);\n        this.charDataLight = MinimapCharRenderer.soften(charData, 50 / 60);\n    }\n    static soften(input, ratio) {\n        const result = new Uint8ClampedArray(input.length);\n        for (let i = 0, len = input.length; i < len; i++) {\n            result[i] = toUint8(input[i] * ratio);\n        }\n        return result;\n    }\n    renderChar(target, dx, dy, chCode, color, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight) {\n        const charWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* Constants.BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const charData = useLighterFont ? this.charDataLight : this.charDataNormal;\n        const charIndex = getCharIndex(chCode, fontScale);\n        const destWidth = target.width * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let sourceOffset = charIndex * charWidth * charHeight;\n        let row = dy * destWidth + dx * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                const c = (charData[sourceOffset++] / 255) * (foregroundAlpha / 255);\n                dest[column++] = backgroundR + deltaR * c;\n                dest[column++] = backgroundG + deltaG * c;\n                dest[column++] = backgroundB + deltaB * c;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n    blockRenderChar(target, dx, dy, color, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight) {\n        const charWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.scale;\n        const charHeight = 2 /* Constants.BASE_CHAR_HEIGHT */ * this.scale;\n        const renderHeight = (force1pxHeight ? 1 : charHeight);\n        if (dx + charWidth > target.width || dy + renderHeight > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        const destWidth = target.width * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        const c = 0.5 * (foregroundAlpha / 255);\n        const backgroundR = backgroundColor.r;\n        const backgroundG = backgroundColor.g;\n        const backgroundB = backgroundColor.b;\n        const deltaR = color.r - backgroundR;\n        const deltaG = color.g - backgroundG;\n        const deltaB = color.b - backgroundB;\n        const colorR = backgroundR + deltaR * c;\n        const colorG = backgroundG + deltaG * c;\n        const colorB = backgroundB + deltaB * c;\n        const destAlpha = Math.max(foregroundAlpha, backgroundAlpha);\n        const dest = target.data;\n        let row = dy * destWidth + dx * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        for (let y = 0; y < renderHeight; y++) {\n            let column = row;\n            for (let x = 0; x < charWidth; x++) {\n                dest[column++] = colorR;\n                dest[column++] = colorG;\n                dest[column++] = colorB;\n                dest[column++] = destAlpha;\n            }\n            row += destWidth;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nconst charTable = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    A: 10,\n    B: 11,\n    C: 12,\n    D: 13,\n    E: 14,\n    F: 15\n};\nconst decodeData = (str) => {\n    const output = new Uint8ClampedArray(str.length / 2);\n    for (let i = 0; i < str.length; i += 2) {\n        output[i >> 1] = (charTable[str[i]] << 4) | (charTable[str[i + 1]] & 0xF);\n    }\n    return output;\n};\n/*\nconst encodeData = (data: Uint8ClampedArray, length: string) => {\n    const chars = '0123456789ABCDEF';\n    let output = '';\n    for (let i = 0; i < data.length; i++) {\n        output += chars[data[i] >> 4] + chars[data[i] & 0xf];\n    }\n    return output;\n};\n*/\n/**\n * Map of minimap scales to prebaked sample data at those scales. We don't\n * sample much larger data, because then font family becomes visible, which\n * is use-configurable.\n */\nexport const prebakedMiniMaps = {\n    1: createSingleCallFunction(() => decodeData('0000511D6300CF609C709645A78432005642574171487021003C451900274D35D762755E8B629C5BA856AF57BA649530C167D1512A272A3F6038604460398526BCA2A968DB6F8957C768BE5FBE2FB467CF5D8D5B795DC7625B5DFF50DE64C466DB2FC47CD860A65E9A2EB96CB54CE06DA763AB2EA26860524D3763536601005116008177A8705E53AB738E6A982F88BAA35B5F5B626D9C636B449B737E5B7B678598869A662F6B5B8542706C704C80736A607578685B70594A49715A4522E792')),\n    2: createSingleCallFunction(() => decodeDatan};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { MinimapCharRenderer } from './minimapCharRenderer.js';\nimport { allCharCodes } from './minimapCharSheet.js';\nimport { prebakedMiniMaps } from './minimapPreBaked.js';\nimport { toUint8 } from '../../../../base/common/uint.js';\n/**\n * Creates character renderers. It takes a 'scale' that determines how large\n * characters should be drawn. Using this, it draws data into a canvas and\n * then downsamples the characters as necessary for the current display.\n * This makes rendering more efficient, rather than drawing a full (tiny)\n * font, or downsampling in real-time.\n */\nexport class MinimapCharRendererFactory {\n    /**\n     * Creates a new character renderer factory with the given scale.\n     */\n    static create(scale, fontFamily) {\n        // renderers are immutable. By default we'll 'create' a new minimap\n        // character renderer whenever we switch editors, no need to do extra work.\n        if (this.lastCreated && scale === this.lastCreated.scale && fontFamily === this.lastFontFamily) {\n            return this.lastCreated;\n        }\n        let factory;\n        if (prebakedMiniMaps[scale]) {\n            factory = new MinimapCharRenderer(prebakedMiniMaps[scale](), scale);\n        }\n        else {\n            factory = MinimapCharRendererFactory.createFromSampleData(MinimapCharRendererFactory.createSampleData(fontFamily).data, scale);\n        }\n        this.lastFontFamily = fontFamily;\n        this.lastCreated = factory;\n        return factory;\n    }\n    /**\n     * Creates the font sample data, writing to a canvas.\n     */\n    static createSampleData(fontFamily) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.style.height = `${16 /* Constants.SAMPLED_CHAR_HEIGHT */}px`;\n        canvas.height = 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n        canvas.width = 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n        canvas.style.width = 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */ + 'px';\n        ctx.fillStyle = '#ffffff';\n        ctx.font = `bold ${16 /* Constants.SAMPLED_CHAR_HEIGHT */}px ${fontFamily}`;\n        ctx.textBaseline = 'middle';\n        let x = 0;\n        for (const code of allCharCodes) {\n            ctx.fillText(String.fromCharCode(code), x, 16 /* Constants.SAMPLED_CHAR_HEIGHT */ / 2);\n            x += 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n        }\n        return ctx.getImageData(0, 0, 96 /* Constants.CHAR_COUNT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */, 16 /* Constants.SAMPLED_CHAR_HEIGHT */);\n    }\n    /**\n     * Creates a character renderer from the canvas sample data.\n     */\n    static createFromSampleData(source, scale) {\n        const expectedLength = 16 /* Constants.SAMPLED_CHAR_HEIGHT */ * 10 /* Constants.SAMPLED_CHAR_WIDTH */ * 4 /* Constants.RGBA_CHANNELS_CNT */ * 96 /* Constants.CHAR_COUNT */;\n        if (source.length !== expectedLength) {\n            throw new Error('Unexpected source in MinimapCharRenderer');\n        }\n        const charData = MinimapCharRendererFactory._downsample(source, scale);\n        return new MinimapCharRenderer(charData, scale);\n    }\n    static _downsampleChar(source, sourceOffset, dest, destOffset, scale) {\n        const width = 1 /* Constants.BASE_CHAR_WIDTH */ * scale;\n        const height = 2 /* Constants.BASE_CHAR_HEIGHT */ * scale;\n        let targetIndex = destOffset;\n        let brightest = 0;\n        // This is essentially an ad-hoc rescaling algorithm. Standard approaches\n        // like bicubic interpolation are awesome for scaling between image sizes,\n        // but don't work so well when scaling to very small pixel values, we end\n        // up with blurry, indistinct forms.\n        //\n        // The approach taken here is simply mapping each source pixel to the target\n        // pixels, and taking the weighted values for all pixels in each, and then\n        // averaging them out. Finally we apply an intensity boost in _downsample,\n        // since when scaling to the smallest pixel sizes there's more black space\n        // which causes characters to be much less distinct.\n        for (let y = 0; y < height; y++) {\n            // 1. For this destination pixel, get the source pixels we're sampling\n            // from (x1, y1) to the next pixel (x2, y2)\n            const sourceY1 = (y / height) * 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n            const sourceY2 = ((y + 1) / height) * 16 /* Constants.SAMPLED_CHAR_HEIGHT */;\n            for (let x = 0; x < width; x++) {\n                const sourceX1 = (x / width) * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n                const sourceX2 = ((x + 1) / width) * 10 /* Constants.SAMPLED_CHAR_WIDTH */;\n                // 2. Sample all of them, summing them up and weighting them. Similar\n                // to bilinear interpolation.\n                let value = 0;\n                let samples = 0;\n                for (let sy = sourceY1; sy < sourceY2; sy++) {\n                    const sourceRow = sourceOffset + Math.floor(sy) * 3840 /* Constants.RGBA_SAMPLED_ROW_WIDTH */;\n                    const yBalance = 1 - (sy - Math.floor(sy));\n                    for (let sx = sourceX1; sx < sourceX2; sx++) {\n                        const xBalance = 1 - (sx - Math.floor(sx));\n                        const sourceIndex = sourceRow + Math.floor(sx) * 4 /* Constants.RGBA_CHANNELS_CNT */;\n                        const weight = xBalance * yBalance;\n                        samples += weight;\n                        value += ((source[sourceIndex] * source[sourceIndex + 3]) / 255) * weight;\n                    }\n                }\n                const final = value / samples;\n                brightest = Math.max(brightest, final);\n                dest[targetIndex++] = toUint8(final);\n            }\n        }\n        return brightest;\n    }\n    static _downsample(data, scale) {\n        const pixelsPerCharacter = 2 /* Constants.BASE_CHAR_HEIGHT */ * scale * 1 /* Constants.BASE_CHAR_WIDTH */ * scale;\n        const resultLen = pixelsPerCharacter * 96 /* Constants.CHAR_COUNT */;\n        const result = new Uint8ClampedArray(resultLen);\n        let resultOffset = 0;\n        let sourceOffset = 0;\n        let brightest = 0;\n        for (let charIndex = 0; charIndex < 96 /* Constants.CHAR_COUNT */; charIndex++) {\n            brightest = Math.max(brightest, this._downsampleChar(data, sourceOffset, result, resultOffset, scale));\n            resultOffset += pixelsPerCharacter;\n            sourceOffset += 10 /* Constants.SAMPLED_CHAR_WIDTH */ * 4 /* Constants.RGBA_CHANNELS_CNT */;\n        }\n        if (brightest > 0) {\n            const adjust = 255 / brightest;\n            for (let i = 0; i < resultLen; i++) {\n                result[i] *= adjust;\n            }\n        }\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './minimap.css';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { GlobalPointerMoveMonitor } from '../../../../base/browser/globalPointerMoveMonitor.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { RenderedLinesCollection } from '../../view/viewLayer.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { MINIMAP_GUTTER_WIDTH, EditorLayoutInfoComputer } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { RGBA8 } from '../../../common/core/rgba.js';\nimport { MinimapTokensColorTracker } from '../../../common/viewModel/minimapTokensColorTracker.js';\nimport { ViewModelDecoration } from '../../../common/viewModel.js';\nimport { minimapSelection, minimapBackground, minimapForegroundOpacity, editorForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EventType, Gesture } from '../../../../base/browser/touch.js';\nimport { MinimapCharRendererFactory } from './minimapCharRendererFactory.js';\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { DEFAULT_FONT_FAMILY } from '../../../../base/browser/fonts.js';\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\nconst POINTER_DRAG_RESET_DISTANCE = 140;\nconst GUTTER_DECORATION_WIDTH = 2;\nclass MinimapOptions {\n    constructor(configuration, theme, tokensColorTracker) {\n        const options = configuration.options;\n        const pixelRatio = options.get(143 /* EditorOption.pixelRatio */);\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        const minimapLayout = layoutInfo.minimap;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const minimapOpts = options.get(73 /* EditorOption.minimap */);\n        this.renderMinimap = minimapLayout.renderMinimap;\n        this.size = minimapOpts.size;\n        this.minimapHeightIsEditorHeight = minimapLayout.minimapHeightIsEditorHeight;\n        this.scrollBeyondLastLine = options.get(105 /* EditorOption.scrollBeyondLastLine */);\n        this.paddingTop = options.get(84 /* EditorOption.padding */).top;\n        this.paddingBottom = options.get(84 /* EditorOption.padding */).bottom;\n        this.showSlider = minimapOpts.showSlider;\n        this.autohide = minimapOpts.autohide;\n        this.pixelRatio = pixelRatio;\n        this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this.minimapLeft = minimapLayout.minimapLeft;\n        this.minimapWidth = minimapLayout.minimapWidth;\n        this.minimapHeight = layoutInfo.height;\n        this.canvasInnerWidth = minimapLayout.minimapCanvasInnerWidth;\n        this.canvasInnerHeight = minimapLayout.minimapCanvasInnerHeight;\n        this.canvasOuterWidth = minimapLayout.minimapCanvasOuterWidth;\n        this.canvasOuterHeight = minimapLayout.minimapCanvasOuterHeight;\n        this.isSampling = minimapLayout.minimapIsSampling;\n        this.editorHeight = layoutInfo.height;\n        this.fontScale = minimapLayout.minimapScale;\n        this.minimapLineHeight = minimapLayout.minimapLineHeight;\n        this.minimapCharWidth = 1 /* Constants.BASE_CHAR_WIDTH */ * this.fontScale;\n        this.sectionHeaderFontFamily = DEFAULT_FONT_FAMILY;\n        this.sectionHeaderFontSize = minimapOpts.sectionHeaderFontSize * pixelRatio;\n        this.sectionHeaderFontColor = MinimapOptions._getSectionHeaderColor(theme, tokensColorTracker.getColor(1 /* ColorId.DefaultForeground */));\n        this.charRenderer = createSingleCallFunction(() => MinimapCharRendererFactory.create(this.fontScale, fontInfo.fontFamily));\n        this.defaultBackgroundColor = tokensColorTracker.getColor(2 /* ColorId.DefaultBackground */);\n        this.backgroundColor = MinimapOptions._getMinimapBackground(theme, this.defaultBackgroundColor);\n        this.foregroundAlpha = MinimapOptions._getMinimapForegroundOpacity(theme);\n    }\n    static _getMinimapBackground(theme, defaultBackgroundColor) {\n        const themeColor = theme.getColor(minimapBackground);\n        if (themeColor) {\n            return new RGBA8(themeColor.rgba.r, themeColor.rgba.g, themeColor.rgba.b, Math.round(255 * themeColor.rgba.a));\n        }\n        return defaultBackgroundColor;\n    }\n    static _getMinimapForegroundOpacity(theme) {\n        const themeColor = theme.getColor(minimapForegroundOpacity);\n        if (themeColor) {\n            return RGBA8._clamp(Math.round(255 * themeColor.rgba.a));\n        }\n        return 255;\n    }\n    static _getSectionHeaderColor(theme, defaultForegroundColor) {\n        const themeColor = theme.getColor(editorForeground);\n        if (themeColor) {\n            return new RGBA8(themeColor.rgba.r, themeColor.rgba.g, themeColor.rgba.b, Math.round(255 * themeColor.rgba.a));\n        }\n        return defaultForegroundColor;\n    }\n    equals(other) {\n        return (this.renderMinimap === other.renderMinimap\n            && this.size === other.size\n            && this.minimapHeightIsEditorHeight === other.minimapHeightIsEditorHeight\n            && this.scrollBeyondLastLine === other.scrollBeyondLastLine\n            && this.paddingTop === other.paddingTop\n            && this.paddingBottom === other.paddingBottom\n            && this.showSlider === other.showSlider\n            && this.autohide === other.autohide\n            && this.pixelRatio === other.pixelRatio\n            && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n            && this.lineHeight === other.lineHeight\n            && this.minimapLeft === other.minimapLeft\n            && this.minimapWidth === other.minimapWidth\n            && this.minimapHeight === other.minimapHeight\n            && this.canvasInnerWidth === other.canvasInnerWidth\n            && this.canvasInnerHeight === other.canvasInnerHeight\n            && this.canvasOuterWidth === other.canvasOuterWidth\n            && this.canvasOuterHeight === other.canvasOuterHeight\n            && this.isSampling === other.isSampling\n            && this.editorHeight === other.editorHeight\n            && this.fontScale === other.fontScale\n            && this.minimapLineHeight === other.minimapLineHeight\n            && this.minimapCharWidth === other.minimapCharWidth\n            && this.sectionHeaderFontSize === other.sectionHeaderFontSize\n            && this.defaultBackgroundColor && this.defaultBackgroundColor.equals(other.defaultBackgroundColor)\n            && this.backgroundColor && this.backgroundColor.equals(other.backgroundColor)\n            && this.foregroundAlpha === other.foregroundAlpha);\n    }\n}\nclass MinimapLayout {\n    constructor(\n    /**\n     * The given editor scrollTop (input).\n     */\n    scrollTop, \n    /**\n     * The given editor scrollHeight (input).\n     */\n    scrollHeight, sliderNeeded, _computedSliderRatio, \n    /**\n     * slider dom node top (in CSS px)\n     */\n    sliderTop, \n    /**\n     * slider dom node height (in CSS px)\n     */\n    sliderHeight, \n    /**\n     * empty lines to reserve at the top of the minimap.\n     */\n    topPaddingLineCount, \n    /**\n     * minimap render start line number.\n     */\n    startLineNumber, \n    /**\n     * minimap render end line number.\n     */\n    endLineNumber) {\n        this.scrollTop = scrollTop;\n        this.scrollHeight = scrollHeight;\n        this.sliderNeeded = sliderNeeded;\n        this._computedSliderRatio = _computedSliderRatio;\n        this.sliderTop = sliderTop;\n        this.sliderHeight = sliderHeight;\n        this.topPaddingLineCount = topPaddingLineCount;\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n    }\n    /**\n     * Compute a desired `scrollPosition` such that the slider moves by `delta`.\n     */\n    getDesiredScrollTopFromDelta(delta) {\n        return Math.round(this.scrollTop + delta / this._computedSliderRatio);\n    }\n    getDesiredScrollTopFromTouchLocation(pageY) {\n        return Math.round((pageY - this.sliderHeight / 2) / this._computedSliderRatio);\n    }\n    /**\n     * Intersect a line range with `this.startLineNumber` and `this.endLineNumber`.\n     */\n    intersectWithViewport(range) {\n        const startLineNumber = Math.max(this.startLineNumber, range.startLineNumber);\n        const endLineNumber = Math.min(this.endLineNumber, range.endLineNumber);\n        if (startLineNumber > endLineNumber) {\n            // entirely outside minimap's viewport\n            return null;\n        }\n        return [startLineNumber, endLineNumber];\n    }\n    /**\n     * Get the inner minimap y coordinate for a line number.\n     */\n    getYForLineNumber(lineNumber, minimapLineHeight) {\n        return +(lineNumber - this.startLineNumber + this.topPaddingLineCount) * minimapLineHeight;\n    }\n    static create(options, viewportStartLineNumber, viewportEndLineNumber, viewportStartLineNumberVerticalOffset, viewportHeight, viewportContainsWhitespaceGaps, lineCount, realLineCount, scrollTop, scrollHeight, previousLayout) {\n        const pixelRatio = options.pixelRatio;\n        const minimapLineHeight = options.minimapLineHeight;\n        const minimapLinesFitting = Math.floor(options.canvasInnerHeight / minimapLineHeight);\n        const lineHeight = options.lineHeight;\n        if (options.minimapHeightIsEditorHeight) {\n            let logicalScrollHeight = (realLineCount * options.lineHeight\n                + options.paddingTop\n                + options.paddingBottom);\n            if (options.scrollBeyondLastLine) {\n                logicalScrollHeight += Math.max(0, viewportHeight - options.lineHeight - options.paddingBottom);\n            }\n            const sliderHeight = Math.max(1, Math.floor(viewportHeight * viewportHeight / logicalScrollHeight));\n            const maxMinimapSliderTop = Math.max(0, options.minimapHeight - sliderHeight);\n            // The slider can move from 0 to `maxMinimapSliderTop`\n            // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n            const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n            const sliderTop = (scrollTop * computedSliderRatio);\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            const maxLinesFitting = Math.floor(options.canvasInnerHeight / options.minimapLineHeight);\n            const topPaddingLineCount = Math.floor(options.paddingTop / options.lineHeight);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, topPaddingLineCount, 1, Math.min(lineCount, maxLinesFitting));\n        }\n        // The visible line count in a viewport can change due to a number of reasons:\n        //  a) with the same viewport width, different scroll positions can result in partial lines being visible:\n        //    e.g. for a line height of 20, and a viewport height of 600\n        //          * scrollTop = 0  => visible lines are [1, 30]\n        //          * scrollTop = 10 => visible lines are [1, 31] (with lines 1 and 31 partially visible)\n        //          * scrollTop = 20 => visible lines are [2, 31]\n        //  b) whitespace gaps might make their way in the viewport (which results in a decrease in the visible line count)\n        //  c) we could be in the scroll beyond last line case (which also results in a decrease in the visible line count, down to possibly only one line being visible)\n        // We must first establish a desirable slider height.\n        let sliderHeight;\n        if (viewportContainsWhitespaceGaps && viewportEndLineNumber !== lineCount) {\n            // case b) from above: there are whitespace gaps in the viewport.\n            // In this case, the height of the slider directly reflects the visible line count.\n            const viewportLineCount = viewportEndLineNumber - viewportStartLineNumber + 1;\n            sliderHeight = Math.floor(viewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        else {\n            // The slider has a stable height\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            sliderHeight = Math.floor(expectedViewportLineCount * minimapLineHeight / pixelRatio);\n        }\n        const extraLinesAtTheTop = Math.floor(options.paddingTop / lineHeight);\n        let extraLinesAtTheBottom = Math.floor(options.paddingBottom / lineHeight);\n        if (options.scrollBeyondLastLine) {\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            extraLinesAtTheBottom = Math.max(extraLinesAtTheBottom, expectedViewportLineCount - 1);\n        }\n        let maxMinimapSliderTop;\n        if (extraLinesAtTheBottom > 0) {\n            const expectedViewportLineCount = viewportHeight / lineHeight;\n            // The minimap slider, when dragged all the way down, will contain the last line at its top\n            maxMinimapSliderTop = (extraLinesAtTheTop + lineCount + extraLinesAtTheBottom - expectedViewportLineCount - 1) * minimapLineHeight / pixelRatio;\n        }\n        else {\n            // The minimap slider, when dragged all the way down, will contain the last line at its bottom\n            maxMinimapSliderTop = Math.max(0, (extraLinesAtTheTop + lineCount) * minimapLineHeight / pixelRatio - sliderHeight);\n        }\n        maxMinimapSliderTop = Math.min(options.minimapHeight - sliderHeight, maxMinimapSliderTop);\n        // The slider can move from 0 to `maxMinimapSliderTop`\n        // in the same way `scrollTop` can move from 0 to `scrollHeight` - `viewportHeight`.\n        const computedSliderRatio = (maxMinimapSliderTop) / (scrollHeight - viewportHeight);\n        const sliderTop = (scrollTop * computedSliderRatio);\n        if (minimapLinesFitting >= extraLinesAtTheTop + lineCount + extraLinesAtTheBottom) {\n            // All lines fit in the minimap\n            const sliderNeeded = (maxMinimapSliderTop > 0);\n            return new MinimapLayout(scrollTop, scrollHeight, sliderNeeded, computedSliderRatio, sliderTop, sliderHeight, extraLinesAtTheTop, 1, lineCount);\n        }\n        else {\n            let consideringStartLineNumber;\n            if (viewportStartLineNumber > 1) {\n                consideringStartLineNumber = viewportStartLineNumber + extraLinesAtTheTop;\n            }\n            else {\n                consideringStartLineNumber = Math.max(1, scrollTop / lineHeight);\n            }\n            let topPaddingLineCount;\n            let startLineNumber = Math.max(1, Math.floor(consideringStartLineNumber - sliderTop * pixelRatio / minimapLineHeight));\n            if (startLineNumber < extraLinesAtTheTop) {\n                topPaddingLineCount = extraLinesAtTheTop - startLineNumber + 1;\n                startLineNumber = 1;\n            }\n            else {\n                topPaddingLineCount = 0;\n                startLineNumber = Math.max(1, startLineNumber - extraLinesAtTheTop);\n            }\n            // Avoid flickering caused by a partial viewport start line\n            // by being consistent w.r.t. the previous layout decision\n            if (previousLayout && previousLayout.scrollHeight === scrollHeight) {\n                if (previousLayout.scrollTop > scrollTop) {\n                    // Scrolling up => never increase `startLineNumber`\n                    startLineNumber = Math.min(startLineNumber, previousLayout.startLineNumber);\n                    topPaddingLineCount = Math.max(topPaddingLineCount, previousLayout.topPaddingLineCount);\n                }\n                if (previousLayout.scrollTop < scrollTop) {\n                    // Scrolling down => never decrease `startLineNumber`\n                    startLineNumber = Math.max(startLineNumber, previousLayout.startLineNumber);\n                    topPaddingLineCount = Math.min(topPaddingLineCount, previousLayout.topPaddingLineCount);\n                }\n            }\n            const endLineNumber = Math.min(lineCount, startLineNumber - topPaddingLineCount + minimapLinesFitting - 1);\n            const partialLine = (scrollTop - viewportStartLineNumberVerticalOffset) / lineHeight;\n            let sliderTopAligned;\n            if (scrollTop >= options.paddingTop) {\n                sliderTopAligned = (viewportStartLineNumber - startLineNumber + topPaddingLineCount + partialLine) * minimapLineHeight / pixelRatio;\n            }\n            else {\n                sliderTopAligned = (scrollTop / options.paddingTop) * (topPaddingLineCount + partialLine) * minimapLineHeight / pixelRatio;\n            }\n            return new MinimapLayout(scrollTop, scrollHeight, true, computedSliderRatio, sliderTopAligned, sliderHeight, topPaddingLineCount, startLineNumber, endLineNumber);\n        }\n    }\n}\nclass MinimapLine {\n    constructor(dy) {\n        this.dy = dy;\n    }\n    onContentChanged() {\n        this.dy = -1;\n    }\n    onTokensChanged() {\n        this.dy = -1;\n    }\n}\nMinimapLine.INVALID = new MinimapLine(-1);\nclass RenderData {\n    constructor(renderedLayout, imageData, lines) {\n        this.renderedLayout = renderedLayout;\n        this._imageData = imageData;\n        this._renderedLines = new RenderedLinesCollection(() => MinimapLine.INVALID);\n        this._renderedLines._set(renderedLayout.startLineNumber, lines);\n    }\n    /**\n     * Check if the current RenderData matches accurately the new desired layout and no painting is needed.\n     */\n    linesEquals(layout) {\n        if (!this.scrollEquals(layout)) {\n            return false;\n        }\n        const tmp = this._renderedLines._get();\n        const lines = tmp.lines;\n        for (let i = 0, len = lines.length; i < len; i++) {\n            if (lines[i].dy === -1) {\n                // This line is invalid\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Check if the current RenderData matches the new layout's scroll position\n     */\n    scrollEquals(layout) {\n        return this.renderedLayout.startLineNumber === layout.startLineNumber\n            && this.renderedLayout.endLineNumber === layout.endLineNumber;\n    }\n    _get() {\n        const tmp = this._renderedLines._get();\n        return {\n            imageData: this._imageData,\n            rendLineNumberStart: tmp.rendLineNumberStart,\n            lines: tmp.lines\n        };\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        return this._renderedLines.onLinesChanged(changeFromLineNumber, changeCount);\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        this._renderedLines.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        this._renderedLines.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n    }\n    onTokensChanged(ranges) {\n        return this._renderedLines.onTokensChanged(ranges);\n    }\n}\n/**\n * Some sort of double buffering.\n *\n * Keeps two buffers around that will be rotated for painting.\n * Always gives a buffer that is filled with the background color.\n */\nclass MinimapBuffers {\n    constructor(ctx, WIDTH, HEIGHT, background) {\n        this._backgroundFillData = MinimapBuffers._createBackgroundFillData(WIDTH, HEIGHT, background);\n        this._buffers = [\n            ctx.createImageData(WIDTH, HEIGHT),\n            ctx.createImageData(WIDTH, HEIGHT)\n        ];\n        this._lastUsedBuffer = 0;\n    }\n    getBuffer() {\n        // rotate buffers\n        this._lastUsedBuffer = 1 - this._lastUsedBuffer;\n        const result = this._buffers[this._lastUsedBuffer];\n        // fill with background color\n        result.data.set(this._backgroundFillData);\n        return result;\n    }\n    static _createBackgroundFillData(WIDTH, HEIGHT, background) {\n        const backgroundR = background.r;\n        const backgroundG = background.g;\n        const backgroundB = background.b;\n        const backgroundA = background.a;\n        const result = new Uint8ClampedArray(WIDTH * HEIGHT * 4);\n        let offset = 0;\n        for (let i = 0; i < HEIGHT; i++) {\n            for (let j = 0; j < WIDTH; j++) {\n                result[offset] = backgroundR;\n                result[offset + 1] = backgroundG;\n                result[offset + 2] = backgroundB;\n                result[offset + 3] = backgroundA;\n                offset += 4;\n            }\n        }\n        return result;\n    }\n}\nclass MinimapSamplingState {\n    static compute(options, viewLineCount, oldSamplingState) {\n        if (options.renderMinimap === 0 /* RenderMinimap.None */ || !options.isSampling) {\n            return [null, []];\n        }\n        // ratio is intentionally not part of the layout to avoid the layout changing all the time\n        // so we need to recompute it again...\n        const { minimapLineCount } = EditorLayoutInfoComputer.computeContainedMinimapLineCount({\n            viewLineCount: viewLineCount,\n            scrollBeyondLastLine: options.scrollBeyondLastLine,\n            paddingTop: options.paddingTop,\n            paddingBottom: options.paddingBottom,\n            height: options.editorHeight,\n            lineHeight: options.lineHeight,\n            pixelRatio: options.pixelRatio\n        });\n        const ratio = viewLineCount / minimapLineCount;\n        const halfRatio = ratio / 2;\n        if (!oldSamplingState || oldSamplingState.minimapLines.length === 0) {\n            const result = [];\n            result[0] = 1;\n            if (minimapLineCount > 1) {\n                for (let i = 0, lastIndex = minimapLineCount - 1; i < lastIndex; i++) {\n                    result[i] = Math.round(i * ratio + halfRatio);\n                }\n                result[minimapLineCount - 1] = viewLineCount;\n            }\n            return [new MinimapSamplingState(ratio, result), []];\n        }\n        const oldMinimapLines = oldSamplingState.minimapLines;\n        const oldLength = oldMinimapLines.length;\n        const result = [];\n        let oldIndex = 0;\n        let oldDeltaLineCount = 0;\n        let minViewLineNumber = 1;\n        const MAX_EVENT_COUNT = 10; // generate at most 10 events, if there are more than 10 changes, just flush all previous data\n        let events = [];\n        let lastEvent = null;\n        for (let i = 0; i < minimapLineCount; i++) {\n            const fromViewLineNumber = Math.max(minViewLineNumber, Math.round(i * ratio));\n            const toViewLineNumber = Math.max(fromViewLineNumber, Math.round((i + 1) * ratio));\n            while (oldIndex < oldLength && oldMinimapLines[oldIndex] < fromViewLineNumber) {\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                        lastEvent.deleteToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount--;\n                }\n                oldIndex++;\n            }\n            let selectedViewLineNumber;\n            if (oldIndex < oldLength && oldMinimapLines[oldIndex] <= toViewLineNumber) {\n                // reuse the old sampled line\n                selectedViewLineNumber = oldMinimapLines[oldIndex];\n                oldIndex++;\n            }\n            else {\n                if (i === 0) {\n                    selectedViewLineNumber = 1;\n                }\n                else if (i + 1 === minimapLineCount) {\n                    selectedViewLineNumber = viewLineCount;\n                }\n                else {\n                    selectedViewLineNumber = Math.round(i * ratio + halfRatio);\n                }\n                if (events.length < MAX_EVENT_COUNT) {\n                    const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                    if (lastEvent && lastEvent.type === 'inserted' && lastEvent._i === i - 1) {\n                        lastEvent.insertToLineNumber++;\n                    }\n                    else {\n                        lastEvent = { type: 'inserted', _i: i, insertFromLineNumber: oldMinimapLineNumber, insertToLineNumber: oldMinimapLineNumber };\n                        events.push(lastEvent);\n                    }\n                    oldDeltaLineCount++;\n                }\n            }\n            result[i] = selectedViewLineNumber;\n            minViewLineNumber = selectedViewLineNumber;\n        }\n        if (events.length < MAX_EVENT_COUNT) {\n            while (oldIndex < oldLength) {\n                const oldMinimapLineNumber = oldIndex + 1 + oldDeltaLineCount;\n                if (lastEvent && lastEvent.type === 'deleted' && lastEvent._oldIndex === oldIndex - 1) {\n                    lastEvent.deleteToLineNumber++;\n                }\n                else {\n                    lastEvent = { type: 'deleted', _oldIndex: oldIndex, deleteFromLineNumber: oldMinimapLineNumber, deleteToLineNumber: oldMinimapLineNumber };\n                    events.push(lastEvent);\n                }\n                oldDeltaLineCount--;\n                oldIndex++;\n            }\n        }\n        else {\n            // too many events, just give up\n            events = [{ type: 'flush' }];\n        }\n        return [new MinimapSamplingState(ratio, result), events];\n    }\n    constructor(samplingRatio, minimapLines // a map of 0-based minimap line indexes to 1-based view line numbers\n    ) {\n        this.samplingRatio = samplingRatio;\n        this.minimapLines = minimapLines;\n    }\n    modelLineToMinimapLine(lineNumber) {\n        return Math.min(this.minimapLines.length, Math.max(1, Math.round(lineNumber / this.samplingRatio)));\n    }\n    /**\n     * Will return null if the model line ranges are not intersecting with a sampled model line.\n     */\n    modelLineRangeToMinimapLineRange(fromLineNumber, toLineNumber) {\n        let fromLineIndex = this.modelLineToMinimapLine(fromLineNumber) - 1;\n        while (fromLineIndex > 0 && this.minimapLines[fromLineIndex - 1] >= fromLineNumber) {\n            fromLineIndex--;\n        }\n        let toLineIndex = this.modelLineToMinimapLine(toLineNumber) - 1;\n        while (toLineIndex + 1 < this.minimapLines.length && this.minimapLines[toLineIndex + 1] <= toLineNumber) {\n            toLineIndex++;\n        }\n        if (fromLineIndex === toLineIndex) {\n            const sampledLineNumber = this.minimapLines[fromLineIndex];\n            if (sampledLineNumber < fromLineNumber || sampledLineNumber > toLineNumber) {\n                // This line is not part of the sampled lines ==> nothing to do\n                return null;\n            }\n        }\n        return [fromLineIndex + 1, toLineIndex + 1];\n    }\n    /**\n     * Will always return a range, even if it is not intersecting with a sampled model line.\n     */\n    decorationLineRangeToMinimapLineRange(startLineNumber, endLineNumber) {\n        let minimapLineStart = this.modelLineToMinimapLine(startLineNumber);\n        let minimapLineEnd = this.modelLineToMinimapLine(endLineNumber);\n        if (startLineNumber !== endLineNumber && minimapLineEnd === minimapLineStart) {\n            if (minimapLineEnd === this.minimapLines.length) {\n                if (minimapLineStart > 1) {\n                    minimapLineStart--;\n                }\n            }\n            else {\n                minimapLineEnd++;\n            }\n        }\n        return [minimapLineStart, minimapLineEnd];\n    }\n    onLinesDeleted(e) {\n        // have the mapping be sticky\n        const deletedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        let changeStartIndex = this.minimapLines.length;\n        let changeEndIndex = 0;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            if (this.minimapLines[i] <= e.toLineNumber) {\n                // this line got deleted => move to previous available\n                this.minimapLines[i] = Math.max(1, e.fromLineNumber - 1);\n                changeStartIndex = Math.min(changeStartIndex, i);\n                changeEndIndex = Math.max(changeEndIndex, i);\n            }\n            else {\n                this.minimapLines[i] -= deletedLineCount;\n            }\n        }\n        return [changeStartIndex, changeEndIndex];\n    }\n    onLinesInserted(e) {\n        // have the mapping be sticky\n        const insertedLineCount = e.toLineNumber - e.fromLineNumber + 1;\n        for (let i = this.minimapLines.length - 1; i >= 0; i--) {\n            if (this.minimapLines[i] < e.fromLineNumber) {\n                break;\n            }\n            this.minimapLines[i] += insertedLineCount;\n        }\n    }\n}\nexport class Minimap extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._sectionHeaderCache = new LRUCache(10, 1.5);\n        this.tokensColorTracker = MinimapTokensColorTracker.getInstance();\n        this._selections = [];\n        this._minimapSelections = null;\n        this.options = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        const [samplingState,] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), null);\n        this._samplingState = samplingState;\n        this._shouldCheckSampling = false;\n        this._actual = new InnerMinimap(context.theme, this);\n    }\n    dispose() {\n        this._actual.dispose();\n        super.dispose();\n    }\n    getDomNode() {\n        return this._actual.getDomNode();\n    }\n    _onOptionsMaybeChanged() {\n        const opts = new MinimapOptions(this._context.configuration, this._context.theme, this.tokensColorTracker);\n        if (this.options.equals(opts)) {\n            return false;\n        }\n        this.options = opts;\n        this._recreateLineSampling();\n        this._actual.onDidChangeOptions();\n        return true;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        return this._onOptionsMaybeChanged();\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        this._minimapSelections = null;\n        return this._actual.onSelectionChanged();\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsMinimap) {\n            return this._actual.onDecorationsChanged();\n        }\n        return false;\n    }\n    onFlushed(e) {\n        if (this._samplingState) {\n            this._shouldCheckSampling = true;\n        }\n        return this._actual.onFlushed();\n    }\n    onLinesChanged(e) {\n        if (this._samplingState) {\n            const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(e.fromLineNumber, e.fromLineNumber + e.count - 1);\n            if (minimapLineRange) {\n                return this._actual.onLinesChanged(minimapLineRange[0], minimapLineRange[1] - minimapLineRange[0] + 1);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onLinesChanged(e.fromLineNumber, e.count);\n        }\n    }\n    onLinesDeleted(e) {\n        if (this._samplingState) {\n            const [changeStartIndex, changeEndIndex] = this._samplingState.onLinesDeleted(e);\n            if (changeStartIndex <= changeEndIndex) {\n                this._actual.onLinesChanged(changeStartIndex + 1, changeEndIndex - changeStartIndex + 1);\n            }\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onLinesInserted(e) {\n        if (this._samplingState) {\n            this._samplingState.onLinesInserted(e);\n            this._shouldCheckSampling = true;\n            return true;\n        }\n        else {\n            return this._actual.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n        }\n    }\n    onScrollChanged(e) {\n        return this._actual.onScrollChanged();\n    }\n    onThemeChanged(e) {\n        this._actual.onThemeChanged();\n        this._onOptionsMaybeChanged();\n        return true;\n    }\n    onTokensChanged(e) {\n        if (this._samplingState) {\n            const ranges = [];\n            for (const range of e.ranges) {\n                const minimapLineRange = this._samplingState.modelLineRangeToMinimapLineRange(range.fromLineNumber, range.toLineNumber);\n                if (minimapLineRange) {\n                    ranges.push({ fromLineNumber: minimapLineRange[0], toLineNumber: minimapLineRange[1] });\n                }\n            }\n            if (ranges.length) {\n                return this._actual.onTokensChanged(ranges);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return this._actual.onTokensChanged(e.ranges);\n        }\n    }\n    onTokensColorsChanged(e) {\n        this._onOptionsMaybeChanged();\n        return this._actual.onTokensColorsChanged();\n    }\n    onZonesChanged(e) {\n        return this._actual.onZonesChanged();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._shouldCheckSampling) {\n            this._shouldCheckSampling = false;\n            this._recreateLineSampling();\n        }\n    }\n    render(ctx) {\n        let viewportStartLineNumber = ctx.visibleRange.startLineNumber;\n        let viewportEndLineNumber = ctx.visibleRange.endLineNumber;\n        if (this._samplingState) {\n            viewportStartLineNumber = this._samplingState.modelLineToMinimapLine(viewportStartLineNumber);\n            viewportEndLineNumber = this._samplingState.modelLineToMinimapLine(viewportEndLineNumber);\n        }\n        const minimapCtx = {\n            viewportContainsWhitespaceGaps: (ctx.viewportData.whitespaceViewportData.length > 0),\n            scrollWidth: ctx.scrollWidth,\n            scrollHeight: ctx.scrollHeight,\n            viewportStartLineNumber: viewportStartLineNumber,\n            viewportEndLineNumber: viewportEndLineNumber,\n            viewportStartLineNumberVerticalOffset: ctx.getVerticalOffsetForLineNumber(viewportStartLineNumber),\n            scrollTop: ctx.scrollTop,\n            scrollLeft: ctx.scrollLeft,\n            viewportWidth: ctx.viewportWidth,\n            viewportHeight: ctx.viewportHeight,\n        };\n        this._actual.render(minimapCtx);\n    }\n    //#region IMinimapModel\n    _recreateLineSampling() {\n        this._minimapSelections = null;\n        const wasSampling = Boolean(this._samplingState);\n        const [samplingState, events] = MinimapSamplingState.compute(this.options, this._context.viewModel.getLineCount(), this._samplingState);\n        this._samplingState = samplingState;\n        if (wasSampling && this._samplingState) {\n            // was sampling, is sampling\n            for (const event of events) {\n                switch (event.type) {\n                    case 'deleted':\n                        this._actual.onLinesDeleted(event.deleteFromLineNumber, event.deleteToLineNumber);\n                        break;\n                    case 'inserted':\n                        this._actual.onLinesInserted(event.insertFromLineNumber, event.insertToLineNumber);\n                        break;\n                    case 'flush':\n                        this._actual.onFlushed();\n                        break;\n                }\n            }\n        }\n    }\n    getLineCount() {\n        if (this._samplingState) {\n            return this._samplingState.minimapLines.length;\n        }\n        return this._context.viewModel.getLineCount();\n    }\n    getRealLineCount() {\n        return this._context.viewModel.getLineCount();\n    }\n    getLineContent(lineNumber) {\n        if (this._samplingState) {\n            return this._context.viewModel.getLineContent(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.viewModel.getLineContent(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        if (this._samplingState) {\n            return this._context.viewModel.getLineMaxColumn(this._samplingState.minimapLines[lineNumber - 1]);\n        }\n        return this._context.viewModel.getLineMaxColumn(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        if (this._samplingState) {\n            const result = [];\n            for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n                if (needed[lineIndex]) {\n                    result[lineIndex] = this._context.viewModel.getViewLineData(this._samplingState.minimapLines[startLineNumber + lineIndex - 1]);\n                }\n                else {\n                    result[lineIndex] = null;\n                }\n            }\n            return result;\n        }\n        return this._context.viewModel.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed).data;\n    }\n    getSelections() {\n        if (this._minimapSelections === null) {\n            if (this._samplingState) {\n                this._minimapSelections = [];\n                for (const selection of this._selections) {\n                    const [minimapLineStart, minimapLineEnd] = this._samplingState.decorationLineRangeToMinimapLineRange(selection.startLineNumber, selection.endLineNumber);\n                    this._minimapSelections.push(new Selection(minimapLineStart, selection.startColumn, minimapLineEnd, selection.endColumn));\n                }\n            }\n            else {\n                this._minimapSelections = this._selections;\n            }\n        }\n        return this._minimapSelections;\n    }\n    getMinimapDecorationsInViewport(startLineNumber, endLineNumber) {\n        const decorations = this._getMinimapDecorationsInViewport(startLineNumber, endLineNumber)\n            .filter(decoration => { var _a; return !((_a = decoration.options.minimap) === null || _a === void 0 ? void 0 : _a.sectionHeaderStyle); });\n        if (this._samplingState) {\n            const result = [];\n            for (const decoration of decorations) {\n                if (!decoration.options.minimap) {\n                    continue;\n                }\n                const range = decoration.range;\n                const minimapStartLineNumber = this._samplingState.modelLineToMinimapLine(range.startLineNumber);\n                const minimapEndLineNumber = this._samplingState.modelLineToMinimapLine(range.endLineNumber);\n                result.push(new ViewModelDecoration(new Range(minimapStartLineNumber, range.startColumn, minimapEndLineNumber, range.endColumn), decoration.options));\n            }\n            return result;\n        }\n        return decorations;\n    }\n    getSectionHeaderDecorationsInViewport(startLineNumber, endLineNumber) {\n        const minimapLineHeight = this.options.minimapLineHeight;\n        const sectionHeaderFontSize = this.options.sectionHeaderFontSize;\n        const headerHeightInMinimapLines = sectionHeaderFontSize / minimapLineHeight;\n        startLineNumber = Math.floor(Math.max(1, startLineNumber - headerHeightInMinimapLines));\n        return this._getMinimapDecorationsInViewport(startLineNumber, endLineNumber)\n            .filter(decoration => { var _a; return !!((_a = decoration.options.minimap) === null || _a === void 0 ? void 0 : _a.sectionHeaderStyle); });\n    }\n    _getMinimapDecorationsInViewport(startLineNumber, endLineNumber) {\n        let visibleRange;\n        if (this._samplingState) {\n            const modelStartLineNumber = this._samplingState.minimapLines[startLineNumber - 1];\n            const modelEndLineNumber = this._samplingState.minimapLines[endLineNumber - 1];\n            visibleRange = new Range(modelStartLineNumber, 1, modelEndLineNumber, this._context.viewModel.getLineMaxColumn(modelEndLineNumber));\n        }\n        else {\n            visibleRange = new Range(startLineNumber, 1, endLineNumber, this._context.viewModel.getLineMaxColumn(endLineNumber));\n        }\n        return this._context.viewModel.getMinimapDecorationsInRange(visibleRange);\n    }\n    getSectionHeaderText(decoration, fitWidth) {\n        var _a;\n        const headerText = (_a = decoration.options.minimap) === null || _a === void 0 ? void 0 : _a.sectionHeaderText;\n        if (!headerText) {\n            return null;\n        }\n        const cachedText = this._sectionHeaderCache.get(headerText);\n        if (cachedText) {\n            return cachedText;\n        }\n        const fittedText = fitWidth(headerText);\n        this._sectionHeaderCache.set(headerText, fittedText);\n        return fittedText;\n    }\n    getOptions() {\n        return this._context.viewModel.model.getOptions();\n    }\n    revealLineNumber(lineNumber) {\n        if (this._samplingState) {\n            lineNumber = this._samplingState.minimapLines[lineNumber - 1];\n        }\n        this._context.viewModel.revealRange('mouse', false, new Range(lineNumber, 1, lineNumber, 1), 1 /* viewEvents.VerticalRevealType.Center */, 0 /* ScrollType.Smooth */);\n    }\n    setScrollTop(scrollTop) {\n        this._context.viewModel.viewLayout.setScrollPosition({\n            scrollTop: scrollTop\n        }, 1 /* ScrollType.Immediate */);\n    }\n}\nclass InnerMinimap extends Disposable {\n    constructor(theme, model) {\n        super();\n        this._renderDecorations = false;\n        this._gestureInProgress = false;\n        this._theme = theme;\n        this._model = model;\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 9 /* PartFingerprint.Minimap */);\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._shadow = createFastDomNode(document.createElement('div'));\n        this._shadow.setClassName('minimap-shadow-hidden');\n        this._domNode.appendChild(this._shadow);\n        this._canvas = createFastDomNode(document.createElement('canvas'));\n        this._canvas.setPosition('absolute');\n        this._canvas.setLeft(0);\n        this._domNode.appendChild(this._canvas);\n        this._decorationsCanvas = createFastDomNode(document.createElement('canvas'));\n        this._decorationsCanvas.setPosition('absolute');\n        this._decorationsCanvas.setClassName('minimap-decorations-layer');\n        this._decorationsCanvas.setLeft(0);\n        this._domNode.appendChild(this._decorationsCanvas);\n        this._slider = createFastDomNode(document.createElement('div'));\n        this._slider.setPosition('absolute');\n        this._slider.setClassName('minimap-slider');\n        this._slider.setLayerHinting(true);\n        this._slider.setContain('strict');\n        this._domNode.appendChild(this._slider);\n        this._sliderHorizontal = createFastDomNode(document.createElement('div'));\n        this._sliderHorizontal.setPosition('absolute');\n        this._sliderHorizontal.setClassName('minimap-slider-horizontal');\n        this._slider.appendChild(this._sliderHorizontal);\n        this._applyLayout();\n        this._pointerDownListener = dom.addStandardDisposableListener(this._domNode.domNode, dom.EventType.POINTER_DOWN, (e) => {\n            e.preventDefault();\n            const renderMinimap = this._model.options.renderMinimap;\n            if (renderMinimap === 0 /* RenderMinimap.None */) {\n                return;\n            }\n            if (!this._lastRenderData) {\n                return;\n            }\n            if (this._model.options.size !== 'proportional') {\n                if (e.button === 0 && this._lastRenderData) {\n                    // pretend the click occurred in the center of the slider\n                    const position = dom.getDomNodePagePosition(this._slider.domNode);\n                    const initialPosY = position.top + position.height / 2;\n                    this._startSliderDragging(e, initialPosY, this._lastRenderData.renderedLayout);\n                }\n                return;\n            }\n            const minimapLineHeight = this._model.options.minimapLineHeight;\n            const internalOffsetY = (this._model.options.canvasInnerHeight / this._model.options.canvasOuterHeight) * e.offsetY;\n            const lineIndex = Math.floor(internalOffsetY / minimapLineHeight);\n            let lineNumber = lineIndex + this._lastRenderData.renderedLayout.startLineNumber - this._lastRenderData.renderedLayout.topPaddingLineCount;\n            lineNumber = Math.min(lineNumber, this._model.getLineCount());\n            this._model.revealLineNumber(lineNumber);\n        });\n        this._sliderPointerMoveMonitor = new GlobalPointerMoveMonitor();\n        this._sliderPointerDownListener = dom.addStandardDisposableListener(this._slider.domNode, dom.EventType.POINTER_DOWN, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (e.button === 0 && this._lastRenderData) {\n                this._startSliderDragging(e, e.pageY, this._lastRenderData.renderedLayout);\n            }\n        });\n        this._gestureDisposable = Gesture.addTarget(this._domNode.domNode);\n        this._sliderTouchStartListener = dom.addDisposableListener(this._domNode.domNode, EventType.Start, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData) {\n                this._slider.toggleClassName('active', true);\n                this._gestureInProgress = true;\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchMoveListener = dom.addDisposableListener(this._domNode.domNode, EventType.Change, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            if (this._lastRenderData && this._gestureInProgress) {\n                this.scrollDueToTouchEvent(e);\n            }\n        }, { passive: false });\n        this._sliderTouchEndListener = dom.addStandardDisposableListener(this._domNode.domNode, EventType.End, (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            this._gestureInProgress = false;\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    _startSliderDragging(e, initialPosY, initialSliderState) {\n        if (!e.target || !(e.target instanceof Element)) {\n            return;\n        }\n        const initialPosX = e.pageX;\n        this._slider.toggleClassName('active', true);\n        const handlePointerMove = (posy, posx) => {\n            const minimapPosition = dom.getDomNodePagePosition(this._domNode.domNode);\n            const pointerOrthogonalDelta = Math.min(Math.abs(posx - initialPosX), Math.abs(posx - minimapPosition.left), Math.abs(posx - minimapPosition.left - minimapPosition.width));\n            if (platform.isWindows && pointerOrthogonalDelta > POINTER_DRAG_RESET_DISTANCE) {\n                // The pointer has wondered away from the scrollbar => reset dragging\n                this._model.setScrollTop(initialSliderState.scrollTop);\n                return;\n            }\n            const pointerDelta = posy - initialPosY;\n            this._model.setScrollTop(initialSliderState.getDesiredScrollTopFromDelta(pointerDelta));\n        };\n        if (e.pageY !== initialPosY) {\n            handlePointerMove(e.pageY, initialPosX);\n        }\n        this._sliderPointerMoveMonitor.startMonitoring(e.target, e.pointerId, e.buttons, pointerMoveData => handlePointerMove(pointerMoveData.pageY, pointerMoveData.pageX), () => {\n            this._slider.toggleClassName('active', false);\n        });\n    }\n    scrollDueToTouchEvent(touch) {\n        const startY = this._domNode.domNode.getBoundingClientRect().top;\n        const scrollTop = this._lastRenderData.renderedLayout.getDesiredScrollTopFromTouchLocation(touch.pageY - startY);\n        this._model.setScrollTop(scrollTop);\n    }\n    dispose() {\n        this._pointerDownListener.dispose();\n        this._sliderPointerMoveMonitor.dispose();\n        this._sliderPointerDownListener.dispose();\n        this._gestureDisposable.dispose();\n        this._sliderTouchStartListener.dispose();\n        this._sliderTouchMoveListener.dispose();\n        this._sliderTouchEndListener.dispose();\n        super.dispose();\n    }\n    _getMinimapDomNodeClassName() {\n        const class_ = ['minimap'];\n        if (this._model.options.showSlider === 'always') {\n            class_.push('slider-always');\n        }\n        else {\n            class_.push('slider-mouseover');\n        }\n        if (this._model.options.autohide) {\n            class_.push('autohide');\n        }\n        return class_.join(' ');\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _applyLayout() {\n        this._domNode.setLeft(this._model.options.minimapLeft);\n        this._domNode.setWidth(this._model.options.minimapWidth);\n        this._domNode.setHeight(this._model.options.minimapHeight);\n        this._shadow.setHeight(this._model.options.minimapHeight);\n        this._canvas.setWidth(this._model.options.canvasOuterWidth);\n        this._canvas.setHeight(this._model.options.canvasOuterHeight);\n        this._canvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._canvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._decorationsCanvas.setWidth(this._model.options.canvasOuterWidth);\n        this._decorationsCanvas.setHeight(this._model.options.canvasOuterHeight);\n        this._decorationsCanvas.domNode.width = this._model.options.canvasInnerWidth;\n        this._decorationsCanvas.domNode.height = this._model.options.canvasInnerHeight;\n        this._slider.setWidth(this._model.options.minimapWidth);\n    }\n    _getBuffer() {\n        if (!this._buffers) {\n            if (this._model.options.canvasInnerWidth > 0 && this._model.options.canvasInnerHeight > 0) {\n                this._buffers = new MinimapBuffers(this._canvas.domNode.getContext('2d'), this._model.options.canvasInnerWidth, this._model.options.canvasInnerHeight, this._model.options.backgroundColor);\n            }\n        }\n        return this._buffers ? this._buffers.getBuffer() : null;\n    }\n    // ---- begin view event handlers\n    onDidChangeOptions() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        this._applyLayout();\n        this._domNode.setClassName(this._getMinimapDomNodeClassName());\n    }\n    onSelectionChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onDecorationsChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onFlushed() {\n        this._lastRenderData = null;\n        return true;\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onLinesChanged(changeFromLineNumber, changeCount);\n        }\n        return false;\n    }\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        var _a;\n        (_a = this._lastRenderData) === null || _a === void 0 ? void 0 : _a.onLinesDeleted(deleteFromLineNumber, deleteToLineNumber);\n        return true;\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        var _a;\n        (_a = this._lastRenderData) === null || _a === void 0 ? void 0 : _a.onLinesInserted(insertFromLineNumber, insertToLineNumber);\n        return true;\n    }\n    onScrollChanged() {\n        this._renderDecorations = true;\n        return true;\n    }\n    onThemeChanged() {\n        this._selectionColor = this._theme.getColor(minimapSelection);\n        this._renderDecorations = true;\n        return true;\n    }\n    onTokensChanged(ranges) {\n        if (this._lastRenderData) {\n            return this._lastRenderData.onTokensChanged(ranges);\n        }\n        return false;\n    }\n    onTokensColorsChanged() {\n        this._lastRenderData = null;\n        this._buffers = null;\n        return true;\n    }\n    onZonesChanged() {\n        this._lastRenderData = null;\n        return true;\n    }\n    // --- end event handlers\n    render(renderingCtx) {\n        const renderMinimap = this._model.options.renderMinimap;\n        if (renderMinimap === 0 /* RenderMinimap.None */) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n            this._sliderHorizontal.setWidth(0);\n            this._sliderHorizontal.setHeight(0);\n            return;\n        }\n        if (renderingCtx.scrollLeft + renderingCtx.viewportWidth >= renderingCtx.scrollWidth) {\n            this._shadow.setClassName('minimap-shadow-hidden');\n        }\n        else {\n            this._shadow.setClassName('minimap-shadow-visible');\n        }\n        const layout = MinimapLayout.create(this._model.options, renderingCtx.viewportStartLineNumber, renderingCtx.viewportEndLineNumber, renderingCtx.viewportStartLineNumberVerticalOffset, renderingCtx.viewportHeight, renderingCtx.viewportContainsWhitespaceGaps, this._model.getLineCount(), this._model.getRealLineCount(), renderingCtx.scrollTop, renderingCtx.scrollHeight, this._lastRenderData ? this._lastRenderData.renderedLayout : null);\n        this._slider.setDisplay(layout.sliderNeeded ? 'block' : 'none');\n        this._slider.setTop(layout.sliderTop);\n        this._slider.setHeight(layout.sliderHeight);\n        // Compute horizontal slider coordinates\n        this._sliderHorizontal.setLeft(0);\n        this._sliderHorizontal.setWidth(this._model.options.minimapWidth);\n        this._sliderHorizontal.setTop(0);\n        this._sliderHorizontal.setHeight(layout.sliderHeight);\n        this.renderDecorations(layout);\n        this._lastRenderData = this.renderLines(layout);\n    }\n    renderDecorations(layout) {\n        if (this._renderDecorations) {\n            this._renderDecorations = false;\n            const selections = this._model.getSelections();\n            selections.sort(Range.compareRangesUsingStarts);\n            const decorations = this._model.getMinimapDecorationsInViewport(layout.startLineNumber, layout.endLineNumber);\n            decorations.sort((a, b) => (a.options.zIndex || 0) - (b.options.zIndex || 0));\n            const { canvasInnerWidth, canvasInnerHeight } = this._model.options;\n            const minimapLineHeight = this._model.options.minimapLineHeight;\n            const minimapCharWidth = this._model.options.minimapCharWidth;\n            const tabSize = this._model.getOptions().tabSize;\n            const canvasContext = this._decorationsCanvas.domNode.getContext('2d');\n            canvasContext.clearRect(0, 0, canvasInnerWidth, canvasInnerHeight);\n            // We first need to render line highlights and then render decorations on top of those.\n            // But we need to pick a single color for each line, and use that as a line highlight.\n            // This needs to be the color of the decoration with the highest `zIndex`, but priority\n            // is given to the selection.\n            const highlightedLines = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, false);\n            this._renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, minimapLineHeight);\n            this._renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, minimapLineHeight);\n            const lineOffsetMap = new ContiguousLineMap(layout.startLineNumber, layout.endLineNumber, null);\n            this._renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, minimapLineHeight, tabSize, minimapCharWidth, canvasInnerWidth);\n            this._renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, minimapLineHeight, tabSize, minimapCharWidth, canvasInnerWidth);\n            this._renderSectionHeaders(layout);\n        }\n    }\n    _renderSelectionLineHighlights(canvasContext, selections, highlightedLines, layout, minimapLineHeight) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        canvasContext.fillStyle = this._selectionColor.transparent(0.5).toString();\n        let y1 = 0;\n        let y2 = 0;\n        for (const selection of selections) {\n            const intersection = layout.intersectWithViewport(selection);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                highlightedLines.set(line, true);\n            }\n            const yy1 = layout.getYForLineNumber(startLineNumber, minimapLineHeight);\n            const yy2 = layout.getYForLineNumber(endLineNumber, minimapLineHeight);\n            if (y2 >= yy1) {\n                // merge into previous\n                y2 = yy2;\n            }\n            else {\n                if (y2 > y1) {\n                    // flush\n                    canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n                }\n                y1 = yy1;\n                y2 = yy2;\n            }\n        }\n        if (y2 > y1) {\n            // flush\n            canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y1, canvasContext.canvas.width, y2 - y1);\n        }\n    }\n    _renderDecorationsLineHighlights(canvasContext, decorations, highlightedLines, layout, minimapLineHeight) {\n        const highlightColors = new Map();\n        // Loop backwards to hit first decorations with higher `zIndex`\n        for (let i = decorations.length - 1; i >= 0; i--) {\n            const decoration = decorations[i];\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions || minimapOptions.position !== 1 /* MinimapPosition.Inline */) {\n                continue;\n            }\n            const intersection = layout.intersectWithViewport(decoration.range);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            let highlightColor = highlightColors.get(decorationColor.toString());\n            if (!highlightColor) {\n                highlightColor = decorationColor.transparent(0.5).toString();\n                highlightColors.set(decorationColor.toString(), highlightColor);\n            }\n            canvasContext.fillStyle = highlightColor;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                if (highlightedLines.has(line)) {\n                    continue;\n                }\n                highlightedLines.set(line, true);\n                const y = layout.getYForLineNumber(startLineNumber, minimapLineHeight);\n                canvasContext.fillRect(MINIMAP_GUTTER_WIDTH, y, canvasContext.canvas.width, minimapLineHeight);\n            }\n        }\n    }\n    _renderSelectionsHighlights(canvasContext, selections, lineOffsetMap, layout, lineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        if (!this._selectionColor || this._selectionColor.isTransparent()) {\n            return;\n        }\n        for (const selection of selections) {\n            const intersection = layout.intersectWithViewport(selection);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                this.renderDecorationOnLine(canvasContext, lineOffsetMap, selection, this._selectionColor, layout, line, lineHeight, lineHeight, tabSize, characterWidth, canvasInnerWidth);\n            }\n        }\n    }\n    _renderDecorationsHighlights(canvasContext, decorations, lineOffsetMap, layout, minimapLineHeight, tabSize, characterWidth, canvasInnerWidth) {\n        // Loop forwards to hit first decorations with lower `zIndex`\n        for (const decoration of decorations) {\n            const minimapOptions = decoration.options.minimap;\n            if (!minimapOptions) {\n                continue;\n            }\n            const intersection = layout.intersectWithViewport(decoration.range);\n            if (!intersection) {\n                // entirely outside minimap's viewport\n                continue;\n            }\n            const [startLineNumber, endLineNumber] = intersection;\n            const decorationColor = minimapOptions.getColor(this._theme.value);\n            if (!decorationColor || decorationColor.isTransparent()) {\n                continue;\n            }\n            for (let line = startLineNumber; line <= endLineNumber; line++) {\n                switch (minimapOptions.position) {\n                    case 1 /* MinimapPosition.Inline */:\n                        this.renderDecorationOnLine(canvasContext, lineOffsetMap, decoration.range, decorationColor, layout, line, minimapLineHeight, minimapLineHeight, tabSize, characterWidth, canvasInnerWidth);\n                        continue;\n                    case 2 /* MinimapPosition.Gutter */: {\n                        const y = layout.getYForLineNumber(line, minimapLineHeight);\n                        const x = 2;\n                        this.renderDecoration(canvasContext, decorationColor, x, y, GUTTER_DECORATION_WIDTH, minimapLineHeight);\n                        continue;\n                    }\n                }\n            }\n        }\n    }\n    renderDecorationOnLine(canvasContext, lineOffsetMap, decorationRange, decorationColor, layout, lineNumber, height, minimapLineHeight, tabSize, charWidth, canvasInnerWidth) {\n        const y = layout.getYForLineNumber(lineNumber, minimapLineHeight);\n        // Skip rendering the line if it's vertically outside our viewport\n        if (y + height < 0 || y > this._model.options.canvasInnerHeight) {\n            return;\n        }\n        const { startLineNumber, endLineNumber } = decorationRange;\n        const startColumn = (startLineNumber === lineNumber ? decorationRange.startColumn : 1);\n        const endColumn = (endLineNumber === lineNumber ? decorationRange.endColumn : this._model.getLineMaxColumn(lineNumber));\n        const x1 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, startColumn, tabSize, charWidth, canvasInnerWidth);\n        const x2 = this.getXOffsetForPosition(lineOffsetMap, lineNumber, endColumn, tabSize, charWidth, canvasInnerWidth);\n        this.renderDecoration(canvasContext, decorationColor, x1, y, x2 - x1, height);\n    }\n    getXOffsetForPosition(lineOffsetMap, lineNumber, column, tabSize, charWidth, canvasInnerWidth) {\n        if (column === 1) {\n            return MINIMAP_GUTTER_WIDTH;\n        }\n        const minimumXOffset = (column - 1) * charWidth;\n        if (minimumXOffset >= canvasInnerWidth) {\n            // there is no need to look at actual characters,\n            // as this column is certainly after the minimap width\n            return canvasInnerWidth;\n        }\n        // Cache line offset data so that it is only read once per line\n        let lineIndexToXOffset = lineOffsetMap.get(lineNumber);\n        if (!lineIndexToXOffset) {\n            const lineData = this._model.getLineContent(lineNumber);\n            lineIndexToXOffset = [MINIMAP_GUTTER_WIDTH];\n            let prevx = MINIMAP_GUTTER_WIDTH;\n            for (let i = 1; i < lineData.length + 1; i++) {\n                const charCode = lineData.charCodeAt(i - 1);\n                const dx = charCode === 9 /* CharCode.Tab */\n                    ? tabSize * charWidth\n                    : strings.isFullWidthCharacter(charCode)\n                        ? 2 * charWidth\n                        : charWidth;\n                const x = prevx + dx;\n                if (x >= canvasInnerWidth) {\n                    // no need to keep on going, as we've hit the canvas width\n                    lineIndexToXOffset[i] = canvasInnerWidth;\n                    break;\n                }\n                lineIndexToXOffset[i] = x;\n                prevx = x;\n            }\n            lineOffsetMap.set(lineNumber, lineIndexToXOffset);\n        }\n        if (column - 1 < lineIndexToXOffset.length) {\n            return lineIndexToXOffset[column - 1];\n        }\n        // goes over the canvas width\n        return canvasInnerWidth;\n    }\n    renderDecoration(canvasContext, decorationColor, x, y, width, height) {\n        canvasContext.fillStyle = decorationColor && decorationColor.toString() || '';\n        canvasContext.fillRect(x, y, width, height);\n    }\n    _renderSectionHeaders(layout) {\n        var _a;\n        const minimapLineHeight = this._model.options.minimapLineHeight;\n        const sectionHeaderFontSize = this._model.options.sectionHeaderFontSize;\n        const backgroundFillHeight = sectionHeaderFontSize * 1.5;\n        const { canvasInnerWidth } = this._model.options;\n        const backgroundColor = this._model.options.backgroundColor;\n        const backgroundFill = `rgb(${backgroundColor.r} ${backgroundColor.g} ${backgroundColor.b} / .7)`;\n        const foregroundColor = this._model.options.sectionHeaderFontColor;\n        const foregroundFill = `rgb(${foregroundColor.r} ${foregroundColor.g} ${foregroundColor.b})`;\n        const separatorStroke = foregroundFill;\n        const canvasContext = this._decorationsCanvas.domNode.getContext('2d');\n        canvasContext.font = sectionHeaderFontSize + 'px ' + this._model.options.sectionHeaderFontFamily;\n        canvasContext.strokeStyle = separatorStroke;\n        canvasContext.lineWidth = 0.2;\n        const decorations = this._model.getSectionHeaderDecorationsInViewport(layout.startLineNumber, layout.endLineNumber);\n        decorations.sort((a, b) => a.range.startLineNumber - b.range.startLineNumber);\n        const fitWidth = InnerMinimap._fitSectionHeader.bind(null, canvasContext, canvasInnerWidth - MINIMAP_GUTTER_WIDTH);\n        for (const decoration of decorations) {\n            const y = layout.getYForLineNumber(decoration.range.startLineNumber, minimapLineHeight) + sectionHeaderFontSize;\n            const backgroundFillY = y - sectionHeaderFontSize;\n            const separatorY = backgroundFillY + 2;\n            const headerText = this._model.getSectionHeaderText(decoration, fitWidth);\n            InnerMinimap._renderSectionLabel(canvasContext, headerText, ((_a = decoration.options.minimap) === null || _a === void 0 ? void 0 : _a.sectionHeaderStyle) === 2 /* MinimapSectionHeaderStyle.Underlined */, backgroundFill, foregroundFill, canvasInnerWidth, backgroundFillY, backgroundFillHeight, y, separatorY);\n        }\n    }\n    static _fitSectionHeader(target, maxWidth, headerText) {\n        if (!headerText) {\n            return headerText;\n        }\n        const ellipsis = '…';\n        const width = target.measureText(headerText).width;\n        const ellipsisWidth = target.measureText(ellipsis).width;\n        if (width <= maxWidth || width <= ellipsisWidth) {\n            return headerText;\n        }\n        const len = headerText.length;\n        const averageCharWidth = width / headerText.length;\n        const maxCharCount = Math.floor((maxWidth - ellipsisWidth) / averageCharWidth) - 1;\n        // Find a halfway point that isn't after whitespace\n        let halfCharCount = Math.ceil(maxCharCount / 2);\n        while (halfCharCount > 0 && /\\s/.test(headerText[halfCharCount - 1])) {\n            --halfCharCount;\n        }\n        // Split with ellipsis\n        return headerText.substring(0, halfCharCount)\n            + ellipsis + headerText.substring(len - (maxCharCount - halfCharCount));\n    }\n    static _renderSectionLabel(target, headerText, hasSeparatorLine, backgroundFill, foregroundFill, minimapWidth, backgroundFillY, backgroundFillHeight, textY, separatorY) {\n        if (headerText) {\n            target.fillStyle = backgroundFill;\n            target.fillRect(0, backgroundFillY, minimapWidth, backgroundFillHeight);\n            target.fillStyle = foregroundFill;\n            target.fillText(headerText, MINIMAP_GUTTER_WIDTH, textY);\n        }\n        if (hasSeparatorLine) {\n            target.beginPath();\n            target.moveTo(0, separatorY);\n            target.lineTo(minimapWidth, separatorY);\n            target.closePath();\n            target.stroke();\n        }\n    }\n    renderLines(layout) {\n        const startLineNumber = layout.startLineNumber;\n        const endLineNumber = layout.endLineNumber;\n        const minimapLineHeight = this._model.options.minimapLineHeight;\n        // Check if nothing changed w.r.t. lines from last frame\n        if (this._lastRenderData && this._lastRenderData.linesEquals(layout)) {\n            const _lastData = this._lastRenderData._get();\n            // Nice!! Nothing changed from last frame\n            return new RenderData(layout, _lastData.imageData, _lastData.lines);\n        }\n        // Oh well!! We need to repaint some lines...\n        const imageData = this._getBuffer();\n        if (!imageData) {\n            // 0 width or 0 height canvas, nothing to do\n            return null;\n        }\n        // Render untouched lines by using last rendered data.\n        const [_dirtyY1, _dirtyY2, needed] = InnerMinimap._renderUntouchedLines(imageData, layout.topPaddingLineCount, startLineNumber, endLineNumber, minimapLineHeight, this._lastRenderData);\n        // Fetch rendering info from view model for rest of lines that need rendering.\n        const lineInfo = this._model.getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed);\n        const tabSize = this._model.getOptions().tabSize;\n        const defaultBackground = this._model.options.defaultBackgroundColor;\n        const background = this._model.options.backgroundColor;\n        const foregroundAlpha = this._model.options.foregroundAlpha;\n        const tokensColorTracker = this._model.tokensColorTracker;\n        const useLighterFont = tokensColorTracker.backgroundIsLight();\n        const renderMinimap = this._model.options.renderMinimap;\n        const charRenderer = this._model.options.charRenderer();\n        const fontScale = this._model.options.fontScale;\n        const minimapCharWidth = this._model.options.minimapCharWidth;\n        const baseCharHeight = (renderMinimap === 1 /* RenderMinimap.Text */ ? 2 /* Constants.BASE_CHAR_HEIGHT */ : 2 /* Constants.BASE_CHAR_HEIGHT */ + 1);\n        const renderMinimapLineHeight = baseCharHeight * fontScale;\n        const innerLinePadding = (minimapLineHeight > renderMinimapLineHeight ? Math.floor((minimapLineHeight - renderMinimapLineHeight) / 2) : 0);\n        // Render the rest of lines\n        const backgroundA = background.a / 255;\n        const renderBackground = new RGBA8(Math.round((background.r - defaultBackground.r) * backgroundA + defaultBackground.r), Math.round((background.g - defaultBackground.g) * backgroundA + defaultBackground.g), Math.round((background.b - defaultBackground.b) * backgroundA + defaultBackground.b), 255);\n        let dy = layout.topPaddingLineCount * minimapLineHeight;\n        const renderedLines = [];\n        for (let lineIndex = 0, lineCount = endLineNumber - startLineNumber + 1; lineIndex < lineCount; lineIndex++) {\n            if (needed[lineIndex]) {\n                InnerMinimap._renderLine(imageData, renderBackground, background.a, useLighterFont, renderMinimap, minimapCharWidth, tokensColorTracker, foregroundAlpha, charRenderer, dy, innerLinePadding, tabSize, lineInfo[lineIndex], fontScale, minimapLineHeight);\n            }\n            renderedLines[lineIndex] = new MinimapLine(dy);\n            dy += minimapLineHeight;\n        }\n        const dirtyY1 = (_dirtyY1 === -1 ? 0 : _dirtyY1);\n        const dirtyY2 = (_dirtyY2 === -1 ? imageData.height : _dirtyY2);\n        const dirtyHeight = dirtyY2 - dirtyY1;\n        // Finally, paint to the canvas\n        const ctx = this._canvas.domNode.getContext('2d');\n        ctx.putImageData(imageData, 0, 0, 0, dirtyY1, imageData.width, dirtyHeight);\n        // Save rendered data for reuse on next frame if possible\n        return new RenderData(layout, imageData, renderedLines);\n    }\n    static _renderUntouchedLines(target, topPaddingLineCount, startLineNumber, endLineNumber, minimapLineHeight, lastRenderData) {\n        const needed = [];\n        if (!lastRenderData) {\n            for (let i = 0, len = endLineNumber - startLineNumber + 1; i < len; i++) {\n                needed[i] = true;\n            }\n            return [-1, -1, needed];\n        }\n        const _lastData = lastRenderData._get();\n        const lastTargetData = _lastData.imageData.data;\n        const lastStartLineNumber = _lastData.rendLineNumberStart;\n        const lastLines = _lastData.lines;\n        const lastLinesLength = lastLines.length;\n        const WIDTH = target.width;\n        const targetData = target.data;\n        const maxDestPixel = (endLineNumber - startLineNumber + 1) * minimapLineHeight * WIDTH * 4;\n        let dirtyPixel1 = -1; // the pixel offset up to which all the data is equal to the prev frame\n        let dirtyPixel2 = -1; // the pixel offset after which all the data is equal to the prev frame\n        let copySourceStart = -1;\n        let copySourceEnd = -1;\n        let copyDestStart = -1;\n        let copyDestEnd = -1;\n        let dest_dy = topPaddingLineCount * minimapLineHeight;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - startLineNumber;\n            const lastLineIndex = lineNumber - lastStartLineNumber;\n            const source_dy = (lastLineIndex >= 0 && lastLineIndex < lastLinesLength ? lastLines[lastLineIndex].dy : -1);\n            if (source_dy === -1) {\n                needed[lineIndex] = true;\n                dest_dy += minimapLineHeight;\n                continue;\n            }\n            const sourceStart = source_dy * WIDTH * 4;\n            const sourceEnd = (source_dy + minimapLineHeight) * WIDTH * 4;\n            const destStart = dest_dy * WIDTH * 4;\n            const destEnd = (dest_dy + minimapLineHeight) * WIDTH * 4;\n            if (copySourceEnd === sourceStart && copyDestEnd === destStart) {\n                // contiguous zone => extend copy request\n                copySourceEnd = sourceEnd;\n                copyDestEnd = destEnd;\n            }\n            else {\n                if (copySourceStart !== -1) {\n                    // flush existing copy request\n                    targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n                    if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                        dirtyPixel1 = copySourceEnd;\n                    }\n                    if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                        dirtyPixel2 = copySourceStart;\n                    }\n                }\n                copySourceStart = sourceStart;\n                copySourceEnd = sourceEnd;\n                copyDestStart = destStart;\n                copyDestEnd = destEnd;\n            }\n            needed[lineIndex] = false;\n            dest_dy += minimapLineHeight;\n        }\n        if (copySourceStart !== -1) {\n            // flush existing copy request\n            targetData.set(lastTargetData.subarray(copySourceStart, copySourceEnd), copyDestStart);\n            if (dirtyPixel1 === -1 && copySourceStart === 0 && copySourceStart === copyDestStart) {\n                dirtyPixel1 = copySourceEnd;\n            }\n            if (dirtyPixel2 === -1 && copySourceEnd === maxDestPixel && copySourceStart === copyDestStart) {\n                dirtyPixel2 = copySourceStart;\n            }\n        }\n        const dirtyY1 = (dirtyPixel1 === -1 ? -1 : dirtyPixel1 / (WIDTH * 4));\n        const dirtyY2 = (dirtyPixel2 === -1 ? -1 : dirtyPixel2 / (WIDTH * 4));\n        return [dirtyY1, dirtyY2, needed];\n    }\n    static _renderLine(target, backgroundColor, backgroundAlpha, useLighterFont, renderMinimap, charWidth, colorTracker, foregroundAlpha, minimapCharRenderer, dy, innerLinePadding, tabSize, lineData, fontScale, minimapLineHeight) {\n        const content = lineData.content;\n        const tokens = lineData.tokens;\n        const maxDx = target.width - charWidth;\n        const force1pxHeight = (minimapLineHeight === 1);\n        let dx = MINIMAP_GUTTER_WIDTH;\n        let charIndex = 0;\n        let tabsCharDelta = 0;\n        for (let tokenIndex = 0, tokensLen = tokens.getCount(); tokenIndex < tokensLen; tokenIndex++) {\n            const tokenEndIndex = tokens.getEndOffset(tokenIndex);\n            const tokenColorId = tokens.getForeground(tokenIndex);\n            const tokenColor = colorTracker.getColor(tokenColorId);\n            for (; charIndex < tokenEndIndex; charIndex++) {\n                if (dx > maxDx) {\n                    // hit edge of minimap\n                    return;\n                }\n                const charCode = content.charCodeAt(charIndex);\n                if (charCode === 9 /* CharCode.Tab */) {\n                    const insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n                    tabsCharDelta += insertSpacesCount - 1;\n                    // No need to render anything since tab is invisible\n                    dx += insertSpacesCount * charWidth;\n                }\n                else if (charCode === 32 /* CharCode.Space */) {\n                    // No need to render anything since space is invisible\n                    dx += charWidth;\n                }\n                else {\n                    // Render twice for a full width character\n                    const count = strings.isFullWidthCharacter(charCode) ? 2 : 1;\n                    for (let i = 0; i < count; i++) {\n                        if (renderMinimap === 2 /* RenderMinimap.Blocks */) {\n                            minimapCharRenderer.blockRenderChar(target, dx, dy + innerLinePadding, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, force1pxHeight);\n                        }\n                        else { // RenderMinimap.Text\n                            minimapCharRenderer.renderChar(target, dx, dy + innerLinePadding, charCode, tokenColor, foregroundAlpha, backgroundColor, backgroundAlpha, fontScale, useLighterFont, force1pxHeight);\n                        }\n                        dx += charWidth;\n                        if (dx > maxDx) {\n                            // hit edge of minimap\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nclass ContiguousLineMap {\n    constructor(startLineNumber, endLineNumber, defaultValue) {\n        this._startLineNumber = startLineNumber;\n        this._endLineNumber = endLineNumber;\n        this._defaultValue = defaultValue;\n        this._values = [];\n        for (let i = 0, count = this._endLineNumber - this._startLineNumber + 1; i < count; i++) {\n            this._values[i] = defaultValue;\n        }\n    }\n    has(lineNumber) {\n        return (this.get(lineNumber) !== this._defaultValue);\n    }\n    set(lineNumber, value) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return;\n        }\n        this._values[lineNumber - this._startLineNumber] = value;\n    }\n    get(lineNumber) {\n        if (lineNumber < this._startLineNumber || lineNumber > this._endLineNumber) {\n            return this._defaultValue;\n        }\n        return this._values[lineNumber - this._startLineNumber];\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './overlayWidgets.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport * as dom from '../../../../base/browser/dom.js';\nexport class ViewOverlayWidgets extends ViewPart {\n    constructor(context, viewDomNode) {\n        super(context);\n        this._viewDomNode = viewDomNode;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._widgets = {};\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        this._viewDomNodeRect = { top: 0, left: 0, width: 0, height: 0 };\n        this._domNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._domNode, 4 /* PartFingerprint.OverlayWidgets */);\n        this._domNode.setClassName('overlayWidgets');\n        this.overflowingOverlayWidgetsDomNode = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this.overflowingOverlayWidgetsDomNode, 5 /* PartFingerprint.OverflowingOverlayWidgets */);\n        this.overflowingOverlayWidgetsDomNode.setClassName('overflowingOverlayWidgets');\n    }\n    dispose() {\n        super.dispose();\n        this._widgets = {};\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._verticalScrollbarWidth = layoutInfo.verticalScrollbarWidth;\n        this._minimapWidth = layoutInfo.minimap.minimapWidth;\n        this._horizontalScrollbarHeight = layoutInfo.horizontalScrollbarHeight;\n        this._editorHeight = layoutInfo.height;\n        this._editorWidth = layoutInfo.width;\n        return true;\n    }\n    // ---- end view event handlers\n    addWidget(widget) {\n        const domNode = createFastDomNode(widget.getDomNode());\n        this._widgets[widget.getId()] = {\n            widget: widget,\n            preference: null,\n            domNode: domNode\n        };\n        // This is sync because a widget wants to be in the dom\n        domNode.setPosition('absolute');\n        domNode.setAttribute('widgetId', widget.getId());\n        if (widget.allowEditorOverflow) {\n            this.overflowingOverlayWidgetsDomNode.appendChild(domNode);\n        }\n        else {\n            this._domNode.appendChild(domNode);\n        }\n        this.setShouldRender();\n        this._updateMaxMinWidth();\n    }\n    setWidgetPosition(widget, preference) {\n        const widgetData = this._widgets[widget.getId()];\n        if (widgetData.preference === preference) {\n            this._updateMaxMinWidth();\n            return false;\n        }\n        widgetData.preference = preference;\n        this.setShouldRender();\n        this._updateMaxMinWidth();\n        return true;\n    }\n    removeWidget(widget) {\n        const widgetId = widget.getId();\n        if (this._widgets.hasOwnProperty(widgetId)) {\n            const widgetData = this._widgets[widgetId];\n            const domNode = widgetData.domNode.domNode;\n            delete this._widgets[widgetId];\n            domNode.remove();\n            this.setShouldRender();\n            this._updateMaxMinWidth();\n        }\n    }\n    _updateMaxMinWidth() {\n        var _a, _b;\n        let maxMinWidth = 0;\n        const keys = Object.keys(this._widgets);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const widgetId = keys[i];\n            const widget = this._widgets[widgetId];\n            const widgetMinWidthInPx = (_b = (_a = widget.widget).getMinContentWidthInPx) === null || _b === void 0 ? void 0 : _b.call(_a);\n            if (typeof widgetMinWidthInPx !== 'undefined') {\n                maxMinWidth = Math.max(maxMinWidth, widgetMinWidthInPx);\n            }\n        }\n        this._context.viewLayout.setOverlayWidgetsMinWidth(maxMinWidth);\n    }\n    _renderWidget(widgetData) {\n        const domNode = widgetData.domNode;\n        if (widgetData.preference === null) {\n            domNode.setTop('');\n            return;\n        }\n        if (widgetData.preference === 0 /* OverlayWidgetPositionPreference.TOP_RIGHT_CORNER */) {\n            domNode.setTop(0);\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 1 /* OverlayWidgetPositionPreference.BOTTOM_RIGHT_CORNER */) {\n            const widgetHeight = domNode.domNode.clientHeight;\n            domNode.setTop((this._editorHeight - widgetHeight - 2 * this._horizontalScrollbarHeight));\n            domNode.setRight((2 * this._verticalScrollbarWidth) + this._minimapWidth);\n        }\n        else if (widgetData.preference === 2 /* OverlayWidgetPositionPreference.TOP_CENTER */) {\n            domNode.setTop(0);\n            domNode.domNode.style.right = '50%';\n        }\n        else {\n            const { top, left } = widgetData.preference;\n            const fixedOverflowWidgets = this._context.configuration.options.get(42 /* EditorOption.fixedOverflowWidgets */);\n            if (fixedOverflowWidgets && widgetData.widget.allowEditorOverflow) {\n                // top, left are computed relative to the editor and we need them relative to the page\n                const editorBoundingBox = this._viewDomNodeRect;\n                domNode.setTop(top + editorBoundingBox.top);\n                domNode.setLeft(left + editorBoundingBox.left);\n                domNode.setPosition('fixed');\n            }\n            else {\n                domNode.setTop(top);\n                domNode.setLeft(left);\n                domNode.setPosition('absolute');\n            }\n        }\n    }\n    prepareRender(ctx) {\n        this._viewDomNodeRect = dom.getDomNodePagePosition(this._viewDomNode.domNode);\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._editorWidth);\n        const keys = Object.keys(this._widgets);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const widgetId = keys[i];\n            this._renderWidget(this._widgets[widgetId]);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground, editorMultiCursorSecondaryForeground, editorMultiCursorPrimaryForeground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';\nimport { equals } from '../../../../base/common/arrays.js';\nclass Settings {\n    constructor(config, theme) {\n        const options = config.options;\n        this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this.pixelRatio = options.get(143 /* EditorOption.pixelRatio */);\n        this.overviewRulerLanes = options.get(83 /* EditorOption.overviewRulerLanes */);\n        this.renderBorder = options.get(82 /* EditorOption.overviewRulerBorder */);\n        const borderColor = theme.getColor(editorOverviewRulerBorder);\n        this.borderColor = borderColor ? borderColor.toString() : null;\n        this.hideCursor = options.get(59 /* EditorOption.hideCursorInOverviewRuler */);\n        const cursorColorSingle = theme.getColor(editorCursorForeground);\n        this.cursorColorSingle = cursorColorSingle ? cursorColorSingle.transparent(0.7).toString() : null;\n        const cursorColorPrimary = theme.getColor(editorMultiCursorPrimaryForeground);\n        this.cursorColorPrimary = cursorColorPrimary ? cursorColorPrimary.transparent(0.7).toString() : null;\n        const cursorColorSecondary = theme.getColor(editorMultiCursorSecondaryForeground);\n        this.cursorColorSecondary = cursorColorSecondary ? cursorColorSecondary.transparent(0.7).toString() : null;\n        this.themeType = theme.type;\n        const minimapOpts = options.get(73 /* EditorOption.minimap */);\n        const minimapEnabled = minimapOpts.enabled;\n        const minimapSide = minimapOpts.side;\n        const themeColor = theme.getColor(editorOverviewRulerBackground);\n        const defaultBackground = TokenizationRegistry.getDefaultBackground();\n        if (themeColor) {\n            this.backgroundColor = themeColor;\n        }\n        else if (minimapEnabled && minimapSide === 'right') {\n            this.backgroundColor = defaultBackground;\n        }\n        else {\n            this.backgroundColor = null;\n        }\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        const position = layoutInfo.overviewRuler;\n        this.top = position.top;\n        this.right = position.right;\n        this.domWidth = position.width;\n        this.domHeight = position.height;\n        if (this.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this.canvasWidth = 0;\n            this.canvasHeight = 0;\n        }\n        else {\n            this.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n            this.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n        }\n        const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n        this.x = x;\n        this.w = w;\n    }\n    _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n        const remainingWidth = canvasWidth - canvasLeftOffset;\n        if (laneCount >= 3) {\n            const leftWidth = Math.floor(remainingWidth / 3);\n            const rightWidth = Math.floor(remainingWidth / 3);\n            const centerWidth = remainingWidth - leftWidth - rightWidth;\n            const leftOffset = canvasLeftOffset;\n            const centerOffset = leftOffset + leftWidth;\n            const rightOffset = leftOffset + leftWidth + centerWidth;\n            return [\n                [\n                    0,\n                    leftOffset, // Left\n                    centerOffset, // Center\n                    leftOffset, // Left | Center\n                    rightOffset, // Right\n                    leftOffset, // Left | Right\n                    centerOffset, // Center | Right\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth, // Left\n                    centerWidth, // Center\n                    leftWidth + centerWidth, // Left | Center\n                    rightWidth, // Right\n                    leftWidth + centerWidth + rightWidth, // Left | Right\n                    centerWidth + rightWidth, // Center | Right\n                    leftWidth + centerWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else if (laneCount === 2) {\n            const leftWidth = Math.floor(remainingWidth / 2);\n            const rightWidth = remainingWidth - leftWidth;\n            const leftOffset = canvasLeftOffset;\n            const rightOffset = leftOffset + leftWidth;\n            return [\n                [\n                    0,\n                    leftOffset, // Left\n                    leftOffset, // Center\n                    leftOffset, // Left | Center\n                    rightOffset, // Right\n                    leftOffset, // Left | Right\n                    leftOffset, // Center | Right\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth, // Left\n                    leftWidth, // Center\n                    leftWidth, // Left | Center\n                    rightWidth, // Right\n                    leftWidth + rightWidth, // Left | Right\n                    leftWidth + rightWidth, // Center | Right\n                    leftWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else {\n            const offset = canvasLeftOffset;\n            const width = remainingWidth;\n            return [\n                [\n                    0,\n                    offset, // Left\n                    offset, // Center\n                    offset, // Left | Center\n                    offset, // Right\n                    offset, // Left | Right\n                    offset, // Center | Right\n                    offset, // Left | Center | Right\n                ], [\n                    0,\n                    width, // Left\n                    width, // Center\n                    width, // Left | Center\n                    width, // Right\n                    width, // Left | Right\n                    width, // Center | Right\n                    width, // Left | Center | Right\n                ]\n            ];\n        }\n    }\n    equals(other) {\n        return (this.lineHeight === other.lineHeight\n            && this.pixelRatio === other.pixelRatio\n            && this.overviewRulerLanes === other.overviewRulerLanes\n            && this.renderBorder === other.renderBorder\n            && this.borderColor === other.borderColor\n            && this.hideCursor === other.hideCursor\n            && this.cursorColorSingle === other.cursorColorSingle\n            && this.cursorColorPrimary === other.cursorColorPrimary\n            && this.cursorColorSecondary === other.cursorColorSecondary\n            && this.themeType === other.themeType\n            && Color.equals(this.backgroundColor, other.backgroundColor)\n            && this.top === other.top\n            && this.right === other.right\n            && this.domWidth === other.domWidth\n            && this.domHeight === other.domHeight\n            && this.canvasWidth === other.canvasWidth\n            && this.canvasHeight === other.canvasHeight);\n    }\n}\nexport class DecorationsOverviewRuler extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._actualShouldRender = 0 /* ShouldRenderValue.NotNeeded */;\n        this._renderedDecorations = [];\n        this._renderedCursorPositions = [];\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName('decorationsOverviewRuler');\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateSettings(false);\n        this._tokensColorTrackerListener = TokenizationRegistry.onDidChange((e) => {\n            if (e.changedColorMap) {\n                this._updateSettings(true);\n            }\n        });\n        this._cursorPositions = [{ position: new Position(1, 1), color: this._settings.cursorColorSingle }];\n    }\n    dispose() {\n        super.dispose();\n        this._tokensColorTrackerListener.dispose();\n    }\n    _updateSettings(renderNow) {\n        const newSettings = new Settings(this._context.configuration, this._context.theme);\n        if (this._settings && this._settings.equals(newSettings)) {\n            // nothing to do\n            return false;\n        }\n        this._settings = newSettings;\n        this._domNode.setTop(this._settings.top);\n        this._domNode.setRight(this._settings.right);\n        this._domNode.setWidth(this._settings.domWidth);\n        this._domNode.setHeight(this._settings.domHeight);\n        this._domNode.domNode.width = this._settings.canvasWidth;\n        this._domNode.domNode.height = this._settings.canvasHeight;\n        if (renderNow) {\n            this._render();\n        }\n        return true;\n    }\n    // ---- begin view event handlers\n    _markRenderingIsNeeded() {\n        this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        return true;\n    }\n    _markRenderingIsMaybeNeeded() {\n        this._actualShouldRender = 1 /* ShouldRenderValue.Maybe */;\n        return true;\n    }\n    onConfigurationChanged(e) {\n        return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n    }\n    onCursorStateChanged(e) {\n        this._cursorPositions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            let color = this._settings.cursorColorSingle;\n            if (len > 1) {\n                color = i === 0 ? this._settings.cursorColorPrimary : this._settings.cursorColorSecondary;\n            }\n            this._cursorPositions.push({ position: e.selections[i].getPosition(), color });\n        }\n        this._cursorPositions.sort((a, b) => Position.compare(a.position, b.position));\n        return this._markRenderingIsMaybeNeeded();\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsOverviewRuler) {\n            return this._markRenderingIsMaybeNeeded();\n        }\n        return false;\n    }\n    onFlushed(e) {\n        return this._markRenderingIsNeeded();\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged ? this._markRenderingIsNeeded() : false;\n    }\n    onZonesChanged(e) {\n        return this._markRenderingIsNeeded();\n    }\n    onThemeChanged(e) {\n        return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(editorCtx) {\n        this._render();\n        this._actualShouldRender = 0 /* ShouldRenderValue.NotNeeded */;\n    }\n    _render() {\n        const backgroundColor = this._settings.backgroundColor;\n        if (this._settings.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this._domNode.setBackgroundColor(backgroundColor ? Color.Format.CSS.formatHexA(backgroundColor) : '');\n            this._domNode.setDisplay('none');\n            return;\n        }\n        const decorations = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);\n        decorations.sort(OverviewRulerDecorationsGroup.compareByRenderingProps);\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */ && !OverviewRulerDecorationsGroup.equalsArr(this._renderedDecorations, decorations)) {\n            this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        }\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */ && !equals(this._renderedCursorPositions, this._cursorPositions, (a, b) => a.position.lineNumber === b.position.lineNumber && a.color === b.color)) {\n            this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        }\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */) {\n            // both decorations and cursor positions are unchanged, nothing to do\n            return;\n        }\n        this._renderedDecorations = decorations;\n        this._renderedCursorPositions = this._cursorPositions;\n        this._domNode.setDisplay('block');\n        const canvasWidth = this._settings.canvasWidth;\n        const canvasHeight = this._settings.canvasHeight;\n        const lineHeight = this._settings.lineHeight;\n        const viewLayout = this._context.viewLayout;\n        const outerHeight = this._context.viewLayout.getScrollHeight();\n        const heightRatio = canvasHeight / outerHeight;\n        const minDecorationHeight = (6 /* Constants.MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio) | 0;\n        const halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n        const canvasCtx = this._domNode.domNode.getContext('2d');\n        if (backgroundColor) {\n            if (backgroundColor.isOpaque()) {\n                // We have a background color which is opaque, we can just paint the entire surface with it\n                canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n            }\n            else {\n                // We have a background color which is transparent, we need to first clear the surface and\n                // then fill it\n                canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n                canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n            }\n        }\n        else {\n            // We don't have a background color\n            canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        }\n        const x = this._settings.x;\n        const w = this._settings.w;\n        for (const decorationGroup of decorations) {\n            const color = decorationGroup.color;\n            const decorationGroupData = decorationGroup.data;\n            canvasCtx.fillStyle = color;\n            let prevLane = 0;\n            let prevY1 = 0;\n            let prevY2 = 0;\n            for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n                const lane = decorationGroupData[3 * i];\n                const startLineNumber = decorationGroupData[3 * i + 1];\n                const endLineNumber = decorationGroupData[3 * i + 2];\n                let y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n                let y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n                const height = y2 - y1;\n                if (height < minDecorationHeight) {\n                    let yCenter = ((y1 + y2) / 2) | 0;\n                    if (yCenter < halfMinDecorationHeight) {\n                        yCenter = halfMinDecorationHeight;\n                    }\n                    else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n                        yCenter = canvasHeight - halfMinDecorationHeight;\n                    }\n                    y1 = yCenter - halfMinDecorationHeight;\n                    y2 = yCenter + halfMinDecorationHeight;\n                }\n                if (y1 > prevY2 + 1 || lane !== prevLane) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n                    }\n                    prevLane = lane;\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n        }\n        // Draw cursors\n        if (!this._settings.hideCursor) {\n            const cursorHeight = (2 * this._settings.pixelRatio) | 0;\n            const halfCursorHeight = (cursorHeight / 2) | 0;\n            const cursorX = this._settings.x[7 /* OverviewRulerLane.Full */];\n            const cursorW = this._settings.w[7 /* OverviewRulerLane.Full */];\n            let prevY1 = -100;\n            let prevY2 = -100;\n            let prevColor = null;\n            for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n                const color = this._cursorPositions[i].color;\n                if (!color) {\n                    continue;\n                }\n                const cursor = this._cursorPositions[i].position;\n                let yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n                if (yCenter < halfCursorHeight) {\n                    yCenter = halfCursorHeight;\n                }\n                else if (yCenter + halfCursorHeight > canvasHeight) {\n                    yCenter = canvasHeight - halfCursorHeight;\n                }\n                const y1 = yCenter - halfCursorHeight;\n                const y2 = y1 + cursorHeight;\n                if (y1 > prevY2 + 1 || color !== prevColor) {\n                    // flush prev\n                    if (i !== 0 && prevColor) {\n                        canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n                    }\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n                prevColor = color;\n                canvasCtx.fillStyle = color;\n            }\n            if (prevColor) {\n                canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n            }\n        }\n        if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n            canvasCtx.beginPath();\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = this._settings.borderColor;\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(0, canvasHeight);\n            canvasCtx.stroke();\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(canvasWidth, 0);\n            canvasCtx.stroke();\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { applyFontInfo } from '../../config/domFontInfo.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../../base/browser/ui/mouseCursor/mouseCursor.js';\nclass ViewCursorRenderData {\n    constructor(top, left, paddingLeft, width, height, textContent, textContentClassName) {\n        this.top = top;\n        this.left = left;\n        this.paddingLeft = paddingLeft;\n        this.width = width;\n        this.height = height;\n        this.textContent = textContent;\n        this.textContentClassName = textContentClassName;\n    }\n}\nexport var CursorPlurality;\n(function (CursorPlurality) {\n    CursorPlurality[CursorPlurality[\"Single\"] = 0] = \"Single\";\n    CursorPlurality[CursorPlurality[\"MultiPrimary\"] = 1] = \"MultiPrimary\";\n    CursorPlurality[CursorPlurality[\"MultiSecondary\"] = 2] = \"MultiSecondary\";\n})(CursorPlurality || (CursorPlurality = {}));\nexport class ViewCursor {\n    constructor(context, plurality) {\n        this._context = context;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._cursorStyle = options.get(28 /* EditorOption.cursorStyle */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(31 /* EditorOption.cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        this._isVisible = true;\n        // Create the dom node\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this._domNode.setHeight(this._lineHeight);\n        this._domNode.setTop(0);\n        this._domNode.setLeft(0);\n        applyFontInfo(this._domNode, fontInfo);\n        this._domNode.setDisplay('none');\n        this._position = new Position(1, 1);\n        this._pluralityClass = '';\n        this.setPlurality(plurality);\n        this._lastRenderedContent = '';\n        this._renderData = null;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return this._position;\n    }\n    setPlurality(plurality) {\n        switch (plurality) {\n            default:\n            case CursorPlurality.Single:\n                this._pluralityClass = '';\n                break;\n            case CursorPlurality.MultiPrimary:\n                this._pluralityClass = 'cursor-primary';\n                break;\n            case CursorPlurality.MultiSecondary:\n                this._pluralityClass = 'cursor-secondary';\n                break;\n        }\n    }\n    show() {\n        if (!this._isVisible) {\n            this._domNode.setVisibility('inherit');\n            this._isVisible = true;\n        }\n    }\n    hide() {\n        if (this._isVisible) {\n            this._domNode.setVisibility('hidden');\n            this._isVisible = false;\n        }\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._cursorStyle = options.get(28 /* EditorOption.cursorStyle */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this._lineCursorWidth = Math.min(options.get(31 /* EditorOption.cursorWidth */), this._typicalHalfwidthCharacterWidth);\n        applyFontInfo(this._domNode, fontInfo);\n        return true;\n    }\n    onCursorPositionChanged(position, pauseAnimation) {\n        if (pauseAnimation) {\n            this._domNode.domNode.style.transitionProperty = 'none';\n        }\n        else {\n            this._domNode.domNode.style.transitionProperty = '';\n        }\n        this._position = position;\n        return true;\n    }\n    /**\n     * If `this._position` is inside a grapheme, returns the position where the grapheme starts.\n     * Also returns the next grapheme.\n     */\n    _getGraphemeAwarePosition() {\n        const { lineNumber, column } = this._position;\n        const lineContent = this._context.viewModel.getLineContent(lineNumber);\n        const [startOffset, endOffset] = strings.getCharContainingOffset(lineContent, column - 1);\n        return [new Position(lineNumber, startOffset + 1), lineContent.substring(startOffset, endOffset)];\n    }\n    _prepareRender(ctx) {\n        let textContent = '';\n        let textContentClassName = '';\n        const [position, nextGrapheme] = this._getGraphemeAwarePosition();\n        if (this._cursorStyle === TextEditorCursorStyle.Line || this._cursorStyle === TextEditorCursorStyle.LineThin) {\n            const visibleRange = ctx.visibleRangeForPosition(position);\n            if (!visibleRange || visibleRange.outsideRenderedLine) {\n                // Outside viewport\n                return null;\n            }\n            const window = dom.getWindow(this._domNode.domNode);\n            let width;\n            if (this._cursorStyle === TextEditorCursorStyle.Line) {\n                width = dom.computeScreenAwareSize(window, this._lineCursorWidth > 0 ? this._lineCursorWidth : 2);\n                if (width > 2) {\n                    textContent = nextGrapheme;\n                    textContentClassName = this._getTokenClassName(position);\n                }\n            }\n            else {\n                width = dom.computeScreenAwareSize(window, 1);\n            }\n            let left = visibleRange.left;\n            let paddingLeft = 0;\n            if (width >= 2 && left >= 1) {\n                // shift the cursor a bit between the characters\n                paddingLeft = 1;\n                left -= paddingLeft;\n            }\n            const top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n            return new ViewCursorRenderData(top, left, paddingLeft, width, this._lineHeight, textContent, textContentClassName);\n        }\n        const visibleRangeForCharacter = ctx.linesVisibleRangesForRange(new Range(position.lineNumber, position.column, position.lineNumber, position.column + nextGrapheme.length), false);\n        if (!visibleRangeForCharacter || visibleRangeForCharacter.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const firstVisibleRangeForCharacter = visibleRangeForCharacter[0];\n        if (firstVisibleRangeForCharacter.outsideRenderedLine || firstVisibleRangeForCharacter.ranges.length === 0) {\n            // Outside viewport\n            return null;\n        }\n        const range = firstVisibleRangeForCharacter.ranges[0];\n        const width = (nextGrapheme === '\\t'\n            ? this._typicalHalfwidthCharacterWidth\n            : (range.width < 1\n                ? this._typicalHalfwidthCharacterWidth\n                : range.width));\n        if (this._cursorStyle === TextEditorCursorStyle.Block) {\n            textContent = nextGrapheme;\n            textContentClassName = this._getTokenClassName(position);\n        }\n        let top = ctx.getVerticalOffsetForLineNumber(position.lineNumber) - ctx.bigNumbersDelta;\n        let height = this._lineHeight;\n        // Underline might interfere with clicking\n        if (this._cursorStyle === TextEditorCursorStyle.Underline || this._cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n            top += this._lineHeight - 2;\n            height = 2;\n        }\n        return new ViewCursorRenderData(top, range.left, 0, width, height, textContent, textContentClassName);\n    }\n    _getTokenClassName(position) {\n        const lineData = this._context.viewModel.getViewLineData(position.lineNumber);\n        const tokenIndex = lineData.tokens.findTokenIndexAtOffset(position.column - 1);\n        return lineData.tokens.getClassName(tokenIndex);\n    }\n    prepareRender(ctx) {\n        this._renderData = this._prepareRender(ctx);\n    }\n    render(ctx) {\n        if (!this._renderData) {\n            this._domNode.setDisplay('none');\n            return null;\n        }\n        if (this._lastRenderedContent !== this._renderData.textContent) {\n            this._lastRenderedContent = this._renderData.textContent;\n            this._domNode.domNode.textContent = this._lastRenderedContent;\n        }\n        this._domNode.setClassName(`cursor ${this._pluralityClass} ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ${this._renderData.textContentClassName}`);\n        this._domNode.setDisplay('block');\n        this._domNode.setTop(this._renderData.top);\n        this._domNode.setLeft(this._renderData.left);\n        this._domNode.setPaddingLeft(this._renderData.paddingLeft);\n        this._domNode.setWidth(this._renderData.width);\n        this._domNode.setLineHeight(this._renderData.height);\n        this._domNode.setHeight(this._renderData.height);\n        return {\n            domNode: this._domNode.domNode,\n            position: this._position,\n            contentLeft: this._renderData.left,\n            height: this._renderData.height,\n            width: 2\n        };\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { OverviewZoneManager } from '../../../common/viewModel/overviewZoneManager.js';\nimport { ViewEventHandler } from '../../../common/viewEventHandler.js';\nexport class OverviewRuler extends ViewEventHandler {\n    constructor(context, cssClassName) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName(cssClassName);\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._zoneManager = new OverviewZoneManager((lineNumber) => this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber));\n        this._zoneManager.setDOMWidth(0);\n        this._zoneManager.setDOMHeight(0);\n        this._zoneManager.setOuterHeight(this._context.viewLayout.getScrollHeight());\n        this._zoneManager.setLineHeight(options.get(67 /* EditorOption.lineHeight */));\n        this._zoneManager.setPixelRatio(options.get(143 /* EditorOption.pixelRatio */));\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        super.dispose();\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        if (e.hasChanged(67 /* EditorOption.lineHeight */)) {\n            this._zoneManager.setLineHeight(options.get(67 /* EditorOption.lineHeight */));\n            this._render();\n        }\n        if (e.hasChanged(143 /* EditorOption.pixelRatio */)) {\n            this._zoneManager.setPixelRatio(options.get(143 /* EditorOption.pixelRatio */));\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n        return true;\n    }\n    onFlushed(e) {\n        this._render();\n        return true;\n    }\n    onScrollChanged(e) {\n        if (e.scrollHeightChanged) {\n            this._zoneManager.setOuterHeight(e.scrollHeight);\n            this._render();\n        }\n        return true;\n    }\n    onZonesChanged(e) {\n        this._render();\n        return true;\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    setLayout(position) {\n        this._domNode.setTop(position.top);\n        this._domNode.setRight(position.right);\n        let hasChanged = false;\n        hasChanged = this._zoneManager.setDOMWidth(position.width) || hasChanged;\n        hasChanged = this._zoneManager.setDOMHeight(position.height) || hasChanged;\n        if (hasChanged) {\n            this._domNode.setWidth(this._zoneManager.getDOMWidth());\n            this._domNode.setHeight(this._zoneManager.getDOMHeight());\n            this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n            this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n            this._render();\n        }\n    }\n    setZones(zones) {\n        this._zoneManager.setZones(zones);\n        this._render();\n    }\n    _render() {\n        if (this._zoneManager.getOuterHeight() === 0) {\n            return false;\n        }\n        const width = this._zoneManager.getCanvasWidth();\n        const height = this._zoneManager.getCanvasHeight();\n        const colorZones = this._zoneManager.resolveColorZones();\n        const id2Color = this._zoneManager.getId2Color();\n        const ctx = this._domNode.domNode.getContext('2d');\n        ctx.clearRect(0, 0, width, height);\n        if (colorZones.length > 0) {\n            this._renderOneLane(ctx, colorZones, id2Color, width);\n        }\n        return true;\n    }\n    _renderOneLane(ctx, colorZones, id2Color, width) {\n        let currentColorId = 0;\n        let currentFrom = 0;\n        let currentTo = 0;\n        for (const zone of colorZones) {\n            const zoneColorId = zone.colorId;\n            const zoneFrom = zone.from;\n            const zoneTo = zone.to;\n            if (zoneColorId !== currentColorId) {\n                ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                currentColorId = zoneColorId;\n                ctx.fillStyle = id2Color[currentColorId];\n                currentFrom = zoneFrom;\n                currentTo = zoneTo;\n            }\n            else {\n                if (currentTo >= zoneFrom) {\n                    currentTo = Math.max(currentTo, zoneTo);\n                }\n                else {\n                    ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n                    currentFrom = zoneFrom;\n                    currentTo = zoneTo;\n                }\n            }\n        }\n        ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './rulers.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class Rulers extends ViewPart {\n    constructor(context) {\n        super(context);\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.domNode.setClassName('view-rulers');\n        this._renderedRulers = [];\n        const options = this._context.configuration.options;\n        this._rulers = options.get(102 /* EditorOption.rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n    }\n    dispose() {\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._rulers = options.get(102 /* EditorOption.rulers */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    _ensureRulersCount() {\n        const currentCount = this._renderedRulers.length;\n        const desiredCount = this._rulers.length;\n        if (currentCount === desiredCount) {\n            // Nothing to do\n            return;\n        }\n        if (currentCount < desiredCount) {\n            const { tabSize } = this._context.viewModel.model.getOptions();\n            const rulerWidth = tabSize;\n            let addCount = desiredCount - currentCount;\n            while (addCount > 0) {\n                const node = createFastDomNode(document.createElement('div'));\n                node.setClassName('view-ruler');\n                node.setWidth(rulerWidth);\n                this.domNode.appendChild(node);\n                this._renderedRulers.push(node);\n                addCount--;\n            }\n            return;\n        }\n        let removeCount = currentCount - desiredCount;\n        while (removeCount > 0) {\n            const node = this._renderedRulers.pop();\n            this.domNode.removeChild(node);\n            removeCount--;\n        }\n    }\n    render(ctx) {\n        this._ensureRulersCount();\n        for (let i = 0, len = this._rulers.length; i < len; i++) {\n            const node = this._renderedRulers[i];\n            const ruler = this._rulers[i];\n            node.setBoxShadow(ruler.color ? `1px 0 0 0 ${ruler.color} inset` : ``);\n            node.setHeight(Math.min(ctx.scrollHeight, 1000000));\n            node.setLeft(ruler.column * this._typicalHalfwidthCharacterWidth);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './scrollDecoration.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class ScrollDecorationViewPart extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._scrollTop = 0;\n        this._width = 0;\n        this._updateWidth();\n        this._shouldShow = false;\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(103 /* EditorOption.scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n    }\n    dispose() {\n        super.dispose();\n    }\n    _updateShouldShow() {\n        const newShouldShow = (this._useShadows && this._scrollTop > 0);\n        if (this._shouldShow !== newShouldShow) {\n            this._shouldShow = newShouldShow;\n            return true;\n        }\n        return false;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    _updateWidth() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        if (layoutInfo.minimap.renderMinimap === 0 || (layoutInfo.minimap.minimapWidth > 0 && layoutInfo.minimap.minimapLeft === 0)) {\n            this._width = layoutInfo.width;\n        }\n        else {\n            this._width = layoutInfo.width - layoutInfo.verticalScrollbarWidth;\n        }\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const scrollbar = options.get(103 /* EditorOption.scrollbar */);\n        this._useShadows = scrollbar.useShadows;\n        this._updateWidth();\n        this._updateShouldShow();\n        return true;\n    }\n    onScrollChanged(e) {\n        this._scrollTop = e.scrollTop;\n        return this._updateShouldShow();\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setWidth(this._width);\n        this._domNode.setClassName(this._shouldShow ? 'scroll-decoration' : '');\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './selections.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorSelectionForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nclass HorizontalRangeWithStyle {\n    constructor(other) {\n        this.left = other.left;\n        this.width = other.width;\n        this.startStyle = null;\n        this.endStyle = null;\n    }\n}\nclass LineVisibleRangesWithStyle {\n    constructor(lineNumber, ranges) {\n        this.lineNumber = lineNumber;\n        this.ranges = ranges;\n    }\n}\nfunction toStyledRange(item) {\n    return new HorizontalRangeWithStyle(item);\n}\nfunction toStyled(item) {\n    return new LineVisibleRangesWithStyle(item.lineNumber, item.ranges.map(toStyledRange));\n}\nexport class SelectionsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._previousFrameVisibleRangesWithStyle = [];\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._roundedSelection = options.get(101 /* EditorOption.roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._selections = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._roundedSelection = options.get(101 /* EditorOption.roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections.slice(0);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true; //e.inlineDecorationsChanged;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _visibleRangesHaveGaps(linesVisibleRanges) {\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = linesVisibleRanges[i];\n            if (lineVisibleRanges.ranges.length > 1) {\n                // There are two ranges on the same line\n                return true;\n            }\n        }\n        return false;\n    }\n    _enrichVisibleRangesWithStyle(viewport, linesVisibleRanges, previousFrame) {\n        const epsilon = this._typicalHalfwidthCharacterWidth / 4;\n        let previousFrameTop = null;\n        let previousFrameBottom = null;\n        if (previousFrame && previousFrame.length > 0 && linesVisibleRanges.length > 0) {\n            const topLineNumber = linesVisibleRanges[0].lineNumber;\n            if (topLineNumber === viewport.startLineNumber) {\n                for (let i = 0; !previousFrameTop && i < previousFrame.length; i++) {\n                    if (previousFrame[i].lineNumber === topLineNumber) {\n                        previousFrameTop = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            const bottomLineNumber = linesVisibleRanges[linesVisibleRanges.length - 1].lineNumber;\n            if (bottomLineNumber === viewport.endLineNumber) {\n                for (let i = previousFrame.length - 1; !previousFrameBottom && i >= 0; i--) {\n                    if (previousFrame[i].lineNumber === bottomLineNumber) {\n                        previousFrameBottom = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            if (previousFrameTop && !previousFrameTop.startStyle) {\n                previousFrameTop = null;\n            }\n            if (previousFrameBottom && !previousFrameBottom.startStyle) {\n                previousFrameBottom = null;\n            }\n        }\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            // We know for a fact that there is precisely one range on each line\n            const curLineRange = linesVisibleRanges[i].ranges[0];\n            const curLeft = curLineRange.left;\n            const curRight = curLineRange.left + curLineRange.width;\n            const startStyle = {\n                top: 0 /* CornerStyle.EXTERN */,\n                bottom: 0 /* CornerStyle.EXTERN */\n            };\n            const endStyle = {\n                top: 0 /* CornerStyle.EXTERN */,\n                bottom: 0 /* CornerStyle.EXTERN */\n            };\n            if (i > 0) {\n                // Look above\n                const prevLeft = linesVisibleRanges[i - 1].ranges[0].left;\n                const prevRight = linesVisibleRanges[i - 1].ranges[0].left + linesVisibleRanges[i - 1].ranges[0].width;\n                if (abs(curLeft - prevLeft) < epsilon) {\n                    startStyle.top = 2 /* CornerStyle.FLAT */;\n                }\n                else if (curLeft > prevLeft) {\n                    startStyle.top = 1 /* CornerStyle.INTERN */;\n                }\n                if (abs(curRight - prevRight) < epsilon) {\n                    endStyle.top = 2 /* CornerStyle.FLAT */;\n                }\n                else if (prevLeft < curRight && curRight < prevRight) {\n                    endStyle.top = 1 /* CornerStyle.INTERN */;\n                }\n            }\n            else if (previousFrameTop) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.top = previousFrameTop.startStyle.top;\n                endStyle.top = previousFrameTop.endStyle.top;\n            }\n            if (i + 1 < len) {\n                // Look below\n                const nextLeft = linesVisibleRanges[i + 1].ranges[0].left;\n                const nextRight = linesVisibleRanges[i + 1].ranges[0].left + linesVisibleRanges[i + 1].ranges[0].width;\n                if (abs(curLeft - nextLeft) < epsilon) {\n                    startStyle.bottom = 2 /* CornerStyle.FLAT */;\n                }\n                else if (nextLeft < curLeft && curLeft < nextRight) {\n                    startStyle.bottom = 1 /* CornerStyle.INTERN */;\n                }\n                if (abs(curRight - nextRight) < epsilon) {\n                    endStyle.bottom = 2 /* CornerStyle.FLAT */;\n                }\n                else if (curRight < nextRight) {\n                    endStyle.bottom = 1 /* CornerStyle.INTERN */;\n                }\n            }\n            else if (previousFrameBottom) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.bottom = previousFrameBottom.startStyle.bottom;\n                endStyle.bottom = previousFrameBottom.endStyle.bottom;\n            }\n            curLineRange.startStyle = startStyle;\n            curLineRange.endStyle = endStyle;\n        }\n    }\n    _getVisibleRangesWithStyle(selection, ctx, previousFrame) {\n        const _linesVisibleRanges = ctx.linesVisibleRangesForRange(selection, true) || [];\n        const linesVisibleRanges = _linesVisibleRanges.map(toStyled);\n        const visibleRangesHaveGaps = this._visibleRangesHaveGaps(linesVisibleRanges);\n        if (!visibleRangesHaveGaps && this._roundedSelection) {\n            this._enrichVisibleRangesWithStyle(ctx.visibleRange, linesVisibleRanges, previousFrame);\n        }\n        // The visible ranges are sorted TOP-BOTTOM and LEFT-RIGHT\n        return linesVisibleRanges;\n    }\n    _createSelectionPiece(top, bottom, className, left, width) {\n        return ('<div class=\"cslr '\n            + className\n            + '\" style=\"'\n            + 'top:' + top.toString() + 'px;'\n            + 'bottom:' + bottom.toString() + 'px;'\n            + 'left:' + left.toString() + 'px;'\n            + 'width:' + width.toString() + 'px;'\n            + '\"></div>');\n    }\n    _actualRenderOneSelection(output2, visibleStartLineNumber, hasMultipleSelections, visibleRanges) {\n        if (visibleRanges.length === 0) {\n            return;\n        }\n        const visibleRangesHaveStyle = !!visibleRanges[0].ranges[0].startStyle;\n        const firstLineNumber = visibleRanges[0].lineNumber;\n        const lastLineNumber = visibleRanges[visibleRanges.length - 1].lineNumber;\n        for (let i = 0, len = visibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = visibleRanges[i];\n            const lineNumber = lineVisibleRanges.lineNumber;\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const top = hasMultipleSelections ? (lineNumber === firstLineNumber ? 1 : 0) : 0;\n            const bottom = hasMultipleSelections ? (lineNumber !== firstLineNumber && lineNumber === lastLineNumber ? 1 : 0) : 0;\n            let innerCornerOutput = '';\n            let restOfSelectionOutput = '';\n            for (let j = 0, lenJ = lineVisibleRanges.ranges.length; j < lenJ; j++) {\n                const visibleRange = lineVisibleRanges.ranges[j];\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 1 /* CornerStyle.INTERN */ || startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                        // Reverse rounded corner to the left\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, bottom, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (startStyle.top === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                        }\n                        if (startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                    if (endStyle.top === 1 /* CornerStyle.INTERN */ || endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                        // Reverse rounded corner to the right\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, bottom, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (endStyle.top === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                        }\n                        if (endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                }\n                let className = SelectionsOverlay.SELECTION_CLASS_NAME;\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                    }\n                    if (startStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                    }\n                    if (endStyle.top === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                    }\n                    if (endStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                    }\n                }\n                restOfSelectionOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left, visibleRange.width);\n            }\n            output2[lineIndex][0] += innerCornerOutput;\n            output2[lineIndex][1] += restOfSelectionOutput;\n        }\n    }\n    prepareRender(ctx) {\n        // Build HTML for inner corners separate from HTML for the rest of selections,\n        // as the inner corner HTML can interfere with that of other selections.\n        // In final render, make sure to place the inner corner HTML before the rest of selection HTML. See issue #77777.\n        const output = [];\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = ['', ''];\n        }\n        const thisFrameVisibleRangesWithStyle = [];\n        for (let i = 0, len = this._selections.length; i < len; i++) {\n            const selection = this._selections[i];\n            if (selection.isEmpty()) {\n                thisFrameVisibleRangesWithStyle[i] = null;\n                continue;\n            }\n            const visibleRangesWithStyle = this._getVisibleRangesWithStyle(selection, ctx, this._previousFrameVisibleRangesWithStyle[i]);\n            thisFrameVisibleRangesWithStyle[i] = visibleRangesWithStyle;\n            this._actualRenderOneSelection(output, visibleStartLineNumber, this._selections.length > 1, visibleRangesWithStyle);\n        }\n        this._previousFrameVisibleRangesWithStyle = thisFrameVisibleRangesWithStyle;\n        this._renderResult = output.map(([internalCorners, restOfSelection]) => internalCorners + restOfSelection);\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nSelectionsOverlay.SELECTION_CLASS_NAME = 'selected-text';\nSelectionsOverlay.SELECTION_TOP_LEFT = 'top-left-radius';\nSelectionsOverlay.SELECTION_BOTTOM_LEFT = 'bottom-left-radius';\nSelectionsOverlay.SELECTION_TOP_RIGHT = 'top-right-radius';\nSelectionsOverlay.SELECTION_BOTTOM_RIGHT = 'bottom-right-radius';\nSelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME = 'monaco-editor-background';\nSelectionsOverlay.ROUNDED_PIECE_WIDTH = 10;\nregisterThemingParticipant((theme, collector) => {\n    const editorSelectionForegroundColor = theme.getColor(editorSelectionForeground);\n    if (editorSelectionForegroundColor && !editorSelectionForegroundColor.isTransparent()) {\n        collector.addRule(`.monaco-editor .view-line span.inline-selected-text { color: ${editorSelectionForegroundColor}; }`);\n    }\n});\nfunction abs(n) {\n    return n < 0 ? -n : n;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './viewCursors.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { TimeoutTimer } from '../../../../base/common/async.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { ViewCursor, CursorPlurality } from './viewCursor.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { editorCursorBackground, editorCursorForeground, editorMultiCursorPrimaryForeground, editorMultiCursorPrimaryBackground, editorMultiCursorSecondaryForeground, editorMultiCursorSecondaryBackground } from '../../../common/core/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { WindowIntervalTimer, getWindow } from '../../../../base/browser/dom.js';\nexport class ViewCursors extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(91 /* EditorOption.readOnly */);\n        this._cursorBlinking = options.get(26 /* EditorOption.cursorBlinking */);\n        this._cursorStyle = options.get(28 /* EditorOption.cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(27 /* EditorOption.cursorSmoothCaretAnimation */);\n        this._selectionIsEmpty = true;\n        this._isComposingInput = false;\n        this._isVisible = false;\n        this._primaryCursor = new ViewCursor(this._context, CursorPlurality.Single);\n        this._secondaryCursors = [];\n        this._renderData = [];\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateDomClassName();\n        this._domNode.appendChild(this._primaryCursor.getDomNode());\n        this._startCursorBlinkAnimation = new TimeoutTimer();\n        this._cursorFlatBlinkInterval = new WindowIntervalTimer();\n        this._blinkingEnabled = false;\n        this._editorHasFocus = false;\n        this._updateBlinking();\n    }\n    dispose() {\n        super.dispose();\n        this._startCursorBlinkAnimation.dispose();\n        this._cursorFlatBlinkInterval.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onCompositionStart(e) {\n        this._isComposingInput = true;\n        this._updateBlinking();\n        return true;\n    }\n    onCompositionEnd(e) {\n        this._isComposingInput = false;\n        this._updateBlinking();\n        return true;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._readOnly = options.get(91 /* EditorOption.readOnly */);\n        this._cursorBlinking = options.get(26 /* EditorOption.cursorBlinking */);\n        this._cursorStyle = options.get(28 /* EditorOption.cursorStyle */);\n        this._cursorSmoothCaretAnimation = options.get(27 /* EditorOption.cursorSmoothCaretAnimation */);\n        this._updateBlinking();\n        this._updateDomClassName();\n        this._primaryCursor.onConfigurationChanged(e);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].onConfigurationChanged(e);\n        }\n        return true;\n    }\n    _onCursorPositionChanged(position, secondaryPositions, reason) {\n        const pauseAnimation = (this._secondaryCursors.length !== secondaryPositions.length\n            || (this._cursorSmoothCaretAnimation === 'explicit' && reason !== 3 /* CursorChangeReason.Explicit */));\n        this._primaryCursor.setPlurality(secondaryPositions.length ? CursorPlurality.MultiPrimary : CursorPlurality.Single);\n        this._primaryCursor.onCursorPositionChanged(position, pauseAnimation);\n        this._updateBlinking();\n        if (this._secondaryCursors.length < secondaryPositions.length) {\n            // Create new cursors\n            const addCnt = secondaryPositions.length - this._secondaryCursors.length;\n            for (let i = 0; i < addCnt; i++) {\n                const newCursor = new ViewCursor(this._context, CursorPlurality.MultiSecondary);\n                this._domNode.domNode.insertBefore(newCursor.getDomNode().domNode, this._primaryCursor.getDomNode().domNode.nextSibling);\n                this._secondaryCursors.push(newCursor);\n            }\n        }\n        else if (this._secondaryCursors.length > secondaryPositions.length) {\n            // Remove some cursors\n            const removeCnt = this._secondaryCursors.length - secondaryPositions.length;\n            for (let i = 0; i < removeCnt; i++) {\n                this._domNode.removeChild(this._secondaryCursors[0].getDomNode());\n                this._secondaryCursors.splice(0, 1);\n            }\n        }\n        for (let i = 0; i < secondaryPositions.length; i++) {\n            this._secondaryCursors[i].onCursorPositionChanged(secondaryPositions[i], pauseAnimation);\n        }\n    }\n    onCursorStateChanged(e) {\n        const positions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            positions[i] = e.selections[i].getPosition();\n        }\n        this._onCursorPositionChanged(positions[0], positions.slice(1), e.reason);\n        const selectionIsEmpty = e.selections[0].isEmpty();\n        if (this._selectionIsEmpty !== selectionIsEmpty) {\n            this._selectionIsEmpty = selectionIsEmpty;\n            this._updateDomClassName();\n        }\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onFocusChanged(e) {\n        this._editorHasFocus = e.isFocused;\n        this._updateBlinking();\n        return false;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return true;\n    }\n    onTokensChanged(e) {\n        const shouldRender = (position) => {\n            for (let i = 0, len = e.ranges.length; i < len; i++) {\n                if (e.ranges[i].fromLineNumber <= position.lineNumber && position.lineNumber <= e.ranges[i].toLineNumber) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        if (shouldRender(this._primaryCursor.getPosition())) {\n            return true;\n        }\n        for (const secondaryCursor of this._secondaryCursors) {\n            if (shouldRender(secondaryCursor.getPosition())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // ---- blinking logic\n    _getCursorBlinking() {\n        if (this._isComposingInput) {\n            // avoid double cursors\n            return 0 /* TextEditorCursorBlinkingStyle.Hidden */;\n        }\n        if (!this._editorHasFocus) {\n            return 0 /* TextEditorCursorBlinkingStyle.Hidden */;\n        }\n        if (this._readOnly) {\n            return 5 /* TextEditorCursorBlinkingStyle.Solid */;\n        }\n        return this._cursorBlinking;\n    }\n    _updateBlinking() {\n        this._startCursorBlinkAnimation.cancel();\n        this._cursorFlatBlinkInterval.cancel();\n        const blinkingStyle = this._getCursorBlinking();\n        // hidden and solid are special as they involve no animations\n        const isHidden = (blinkingStyle === 0 /* TextEditorCursorBlinkingStyle.Hidden */);\n        const isSolid = (blinkingStyle === 5 /* TextEditorCursorBlinkingStyle.Solid */);\n        if (isHidden) {\n            this._hide();\n        }\n        else {\n            this._show();\n        }\n        this._blinkingEnabled = false;\n        this._updateDomClassName();\n        if (!isHidden && !isSolid) {\n            if (blinkingStyle === 1 /* TextEditorCursorBlinkingStyle.Blink */) {\n                // flat blinking is handled by JavaScript to save battery life due to Chromium step timing issue https://bugs.chromium.org/p/chromium/issues/detail?id=361587\n                this._cursorFlatBlinkInterval.cancelAndSet(() => {\n                    if (this._isVisible) {\n                        this._hide();\n                    }\n                    else {\n                        this._show();\n                    }\n                }, ViewCursors.BLINK_INTERVAL, getWindow(this._domNode.domNode));\n            }\n            else {\n                this._startCursorBlinkAnimation.setIfNotSet(() => {\n                    this._blinkingEnabled = true;\n                    this._updateDomClassName();\n                }, ViewCursors.BLINK_INTERVAL);\n            }\n        }\n    }\n    // --- end blinking logic\n    _updateDomClassName() {\n        this._domNode.setClassName(this._getClassName());\n    }\n    _getClassName() {\n        let result = 'cursors-layer';\n        if (!this._selectionIsEmpty) {\n            result += ' has-selection';\n        }\n        switch (this._cursorStyle) {\n            case TextEditorCursorStyle.Line:\n                result += ' cursor-line-style';\n                break;\n            case TextEditorCursorStyle.Block:\n                result += ' cursor-block-style';\n                break;\n            case TextEditorCursorStyle.Underline:\n                result += ' cursor-underline-style';\n                break;\n            case TextEditorCursorStyle.LineThin:\n                result += ' cursor-line-thin-style';\n                break;\n            case TextEditorCursorStyle.BlockOutline:\n                result += ' cursor-block-outline-style';\n                break;\n            case TextEditorCursorStyle.UnderlineThin:\n                result += ' cursor-underline-thin-style';\n                break;\n            default:\n                result += ' cursor-line-style';\n        }\n        if (this._blinkingEnabled) {\n            switch (this._getCursorBlinking()) {\n                case 1 /* TextEditorCursorBlinkingStyle.Blink */:\n                    result += ' cursor-blink';\n                    break;\n                case 2 /* TextEditorCursorBlinkingStyle.Smooth */:\n                    result += ' cursor-smooth';\n                    break;\n                case 3 /* TextEditorCursorBlinkingStyle.Phase */:\n                    result += ' cursor-phase';\n                    break;\n                case 4 /* TextEditorCursorBlinkingStyle.Expand */:\n                    result += ' cursor-expand';\n                    break;\n                case 5 /* TextEditorCursorBlinkingStyle.Solid */:\n                    result += ' cursor-solid';\n                    break;\n                default:\n                    result += ' cursor-solid';\n            }\n        }\n        else {\n            result += ' cursor-solid';\n        }\n        if (this._cursorSmoothCaretAnimation === 'on' || this._cursorSmoothCaretAnimation === 'explicit') {\n            result += ' cursor-smooth-caret-animation';\n        }\n        return result;\n    }\n    _show() {\n        this._primaryCursor.show();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].show();\n        }\n        this._isVisible = true;\n    }\n    _hide() {\n        this._primaryCursor.hide();\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].hide();\n        }\n        this._isVisible = false;\n    }\n    // ---- IViewPart implementation\n    prepareRender(ctx) {\n        this._primaryCursor.prepareRender(ctx);\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            this._secondaryCursors[i].prepareRender(ctx);\n        }\n    }\n    render(ctx) {\n        const renderData = [];\n        let renderDataLen = 0;\n        const primaryRenderData = this._primaryCursor.render(ctx);\n        if (primaryRenderData) {\n            renderData[renderDataLen++] = primaryRenderData;\n        }\n        for (let i = 0, len = this._secondaryCursors.length; i < len; i++) {\n            const secondaryRenderData = this._secondaryCursors[i].render(ctx);\n            if (secondaryRenderData) {\n                renderData[renderDataLen++] = secondaryRenderData;\n            }\n        }\n        this._renderData = renderData;\n    }\n    getLastRenderData() {\n        return this._renderData;\n    }\n}\nViewCursors.BLINK_INTERVAL = 500;\nregisterThemingParticipant((theme, collector) => {\n    const cursorThemes = [\n        { class: '.cursor', foreground: editorCursorForeground, background: editorCursorBackground },\n        { class: '.cursor-primary', foreground: editorMultiCursorPrimaryForeground, background: editorMultiCursorPrimaryBackground },\n        { class: '.cursor-secondary', foreground: editorMultiCursorSecondaryForeground, background: editorMultiCursorSecondaryBackground },\n    ];\n    for (const cursorTheme of cursorThemes) {\n        const caret = theme.getColor(cursorTheme.foreground);\n        if (caret) {\n            let caretBackground = theme.getColor(cursorTheme.background);\n            if (!caretBackground) {\n                caretBackground = caret.opposite();\n            }\n            collector.addRule(`.monaco-editor .cursors-layer ${cursorTheme.class} { background-color: ${caret}; border-color: ${caret}; color: ${caretBackground}; }`);\n            if (isHighContrast(theme.type)) {\n                collector.addRule(`.monaco-editor .cursors-layer.has-selection ${cursorTheme.class} { border-left: 1px solid ${caretBackground}; border-right: 1px solid ${caretBackground}; }`);\n            }\n        }\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\nexport class ViewZones extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName('view-zones');\n        this.domNode.setPosition('absolute');\n        this.domNode.setAttribute('role', 'presentation');\n        this.domNode.setAttribute('aria-hidden', 'true');\n        this.marginDomNode = createFastDomNode(document.createElement('div'));\n        this.marginDomNode.setClassName('margin-view-zones');\n        this.marginDomNode.setPosition('absolute');\n        this.marginDomNode.setAttribute('role', 'presentation');\n        this.marginDomNode.setAttribute('aria-hidden', 'true');\n        this._zones = {};\n    }\n    dispose() {\n        super.dispose();\n        this._zones = {};\n    }\n    // ---- begin view event handlers\n    _recomputeWhitespacesProps() {\n        const whitespaces = this._context.viewLayout.getWhitespaces();\n        const oldWhitespaces = new Map();\n        for (const whitespace of whitespaces) {\n            oldWhitespaces.set(whitespace.id, whitespace);\n        }\n        let hadAChange = false;\n        this._context.viewModel.changeWhitespace((whitespaceAccessor) => {\n            const keys = Object.keys(this._zones);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const id = keys[i];\n                const zone = this._zones[id];\n                const props = this._computeWhitespaceProps(zone.delegate);\n                zone.isInHiddenArea = props.isInHiddenArea;\n                const oldWhitespace = oldWhitespaces.get(id);\n                if (oldWhitespace && (oldWhitespace.afterLineNumber !== props.afterViewLineNumber || oldWhitespace.height !== props.heightInPx)) {\n                    whitespaceAccessor.changeOneWhitespace(id, props.afterViewLineNumber, props.heightInPx);\n                    this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n                    hadAChange = true;\n                }\n            }\n        });\n        return hadAChange;\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentLeft = layoutInfo.contentLeft;\n        if (e.hasChanged(67 /* EditorOption.lineHeight */)) {\n            this._recomputeWhitespacesProps();\n        }\n        return true;\n    }\n    onLineMappingChanged(e) {\n        return this._recomputeWhitespacesProps();\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    _getZoneOrdinal(zone) {\n        var _a, _b;\n        return (_b = (_a = zone.ordinal) !== null && _a !== void 0 ? _a : zone.afterColumn) !== null && _b !== void 0 ? _b : 10000;\n    }\n    _computeWhitespaceProps(zone) {\n        if (zone.afterLineNumber === 0) {\n            return {\n                isInHiddenArea: false,\n                afterViewLineNumber: 0,\n                heightInPx: this._heightInPixels(zone),\n                minWidthInPx: this._minWidthInPixels(zone)\n            };\n        }\n        let zoneAfterModelPosition;\n        if (typeof zone.afterColumn !== 'undefined') {\n            zoneAfterModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zone.afterLineNumber,\n                column: zone.afterColumn\n            });\n        }\n        else {\n            const validAfterLineNumber = this._context.viewModel.model.validatePosition({\n                lineNumber: zone.afterLineNumber,\n                column: 1\n            }).lineNumber;\n            zoneAfterModelPosition = new Position(validAfterLineNumber, this._context.viewModel.model.getLineMaxColumn(validAfterLineNumber));\n        }\n        let zoneBeforeModelPosition;\n        if (zoneAfterModelPosition.column === this._context.viewModel.model.getLineMaxColumn(zoneAfterModelPosition.lineNumber)) {\n            zoneBeforeModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zoneAfterModelPosition.lineNumber + 1,\n                column: 1\n            });\n        }\n        else {\n            zoneBeforeModelPosition = this._context.viewModel.model.validatePosition({\n                lineNumber: zoneAfterModelPosition.lineNumber,\n                column: zoneAfterModelPosition.column + 1\n            });\n        }\n        const viewPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(zoneAfterModelPosition, zone.afterColumnAffinity, true);\n        const isVisible = zone.showInHiddenAreas || this._context.viewModel.coordinatesConverter.modelPositionIsVisible(zoneBeforeModelPosition);\n        return {\n            isInHiddenArea: !isVisible,\n            afterViewLineNumber: viewPosition.lineNumber,\n            heightInPx: (isVisible ? this._heightInPixels(zone) : 0),\n            minWidthInPx: this._minWidthInPixels(zone)\n        };\n    }\n    changeViewZones(callback) {\n        let zonesHaveChanged = false;\n        this._context.viewModel.changeWhitespace((whitespaceAccessor) => {\n            const changeAccessor = {\n                addZone: (zone) => {\n                    zonesHaveChanged = true;\n                    return this._addZone(whitespaceAccessor, zone);\n                },\n                removeZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._removeZone(whitespaceAccessor, id) || zonesHaveChanged;\n                },\n                layoutZone: (id) => {\n                    if (!id) {\n                        return;\n                    }\n                    zonesHaveChanged = this._layoutZone(whitespaceAccessor, id) || zonesHaveChanged;\n                }\n            };\n            safeInvoke1Arg(callback, changeAccessor);\n            // Invalidate changeAccessor\n            changeAccessor.addZone = invalidFunc;\n            changeAccessor.removeZone = invalidFunc;\n            changeAccessor.layoutZone = invalidFunc;\n        });\n        return zonesHaveChanged;\n    }\n    _addZone(whitespaceAccessor, zone) {\n        const props = this._computeWhitespaceProps(zone);\n        const whitespaceId = whitespaceAccessor.insertWhitespace(props.afterViewLineNumber, this._getZoneOrdinal(zone), props.heightInPx, props.minWidthInPx);\n        const myZone = {\n            whitespaceId: whitespaceId,\n            delegate: zone,\n            isInHiddenArea: props.isInHiddenArea,\n            isVisible: false,\n            domNode: createFastDomNode(zone.domNode),\n            marginDomNode: zone.marginDomNode ? createFastDomNode(zone.marginDomNode) : null\n        };\n        this._safeCallOnComputedHeight(myZone.delegate, props.heightInPx);\n        myZone.domNode.setPosition('absolute');\n        myZone.domNode.domNode.style.width = '100%';\n        myZone.domNode.setDisplay('none');\n        myZone.domNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n        this.domNode.appendChild(myZone.domNode);\n        if (myZone.marginDomNode) {\n            myZone.marginDomNode.setPosition('absolute');\n            myZone.marginDomNode.domNode.style.width = '100%';\n            myZone.marginDomNode.setDisplay('none');\n            myZone.marginDomNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n            this.marginDomNode.appendChild(myZone.marginDomNode);\n        }\n        this._zones[myZone.whitespaceId] = myZone;\n        this.setShouldRender();\n        return myZone.whitespaceId;\n    }\n    _removeZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            delete this._zones[id];\n            whitespaceAccessor.removeWhitespace(zone.whitespaceId);\n            zone.domNode.removeAttribute('monaco-visible-view-zone');\n            zone.domNode.removeAttribute('monaco-view-zone');\n            zone.domNode.domNode.parentNode.removeChild(zone.domNode.domNode);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.removeAttribute('monaco-visible-view-zone');\n                zone.marginDomNode.removeAttribute('monaco-view-zone');\n                zone.marginDomNode.domNode.parentNode.removeChild(zone.marginDomNode.domNode);\n            }\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    _layoutZone(whitespaceAccessor, id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            const props = this._computeWhitespaceProps(zone.delegate);\n            zone.isInHiddenArea = props.isInHiddenArea;\n            // const newOrdinal = this._getZoneOrdinal(zone.delegate);\n            whitespaceAccessor.changeOneWhitespace(zone.whitespaceId, props.afterViewLineNumber, props.heightInPx);\n            // TODO@Alex: change `newOrdinal` too\n            this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n            this.setShouldRender();\n            return true;\n        }\n        return false;\n    }\n    shouldSuppressMouseDownOnViewZone(id) {\n        if (this._zones.hasOwnProperty(id)) {\n            const zone = this._zones[id];\n            return Boolean(zone.delegate.suppressMouseDown);\n        }\n        return false;\n    }\n    _heightInPixels(zone) {\n        if (typeof zone.heightInPx === 'number') {\n            return zone.heightInPx;\n        }\n        if (typeof zone.heightInLines === 'number') {\n            return this._lineHeight * zone.heightInLines;\n        }\n        return this._lineHeight;\n    }\n    _minWidthInPixels(zone) {\n        if (typeof zone.minWidthInPx === 'number') {\n            return zone.minWidthInPx;\n        }\n        return 0;\n    }\n    _safeCallOnComputedHeight(zone, height) {\n        if (typeof zone.onComputedHeight === 'function') {\n            try {\n                zone.onComputedHeight(height);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    _safeCallOnDomNodeTop(zone, top) {\n        if (typeof zone.onDomNodeTop === 'function') {\n            try {\n                zone.onDomNodeTop(top);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        const visibleWhitespaces = ctx.viewportData.whitespaceViewportData;\n        const visibleZones = {};\n        let hasVisibleZone = false;\n        for (const visibleWhitespace of visibleWhitespaces) {\n            if (this._zones[visibleWhitespace.id].isInHiddenArea) {\n                continue;\n            }\n            visibleZones[visibleWhitespace.id] = visibleWhitespace;\n            hasVisibleZone = true;\n        }\n        const keys = Object.keys(this._zones);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const id = keys[i];\n            const zone = this._zones[id];\n            let newTop = 0;\n            let newHeight = 0;\n            let newDisplay = 'none';\n            if (visibleZones.hasOwnProperty(id)) {\n                newTop = visibleZones[id].verticalOffset - ctx.bigNumbersDelta;\n                newHeight = visibleZones[id].height;\n                newDisplay = 'block';\n                // zone is visible\n                if (!zone.isVisible) {\n                    zone.domNode.setAttribute('monaco-visible-view-zone', 'true');\n                    zone.isVisible = true;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(visibleZones[id].verticalOffset));\n            }\n            else {\n                if (zone.isVisible) {\n                    zone.domNode.removeAttribute('monaco-visible-view-zone');\n                    zone.isVisible = false;\n                }\n                this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(-1000000));\n            }\n            zone.domNode.setTop(newTop);\n            zone.domNode.setHeight(newHeight);\n            zone.domNode.setDisplay(newDisplay);\n            if (zone.marginDomNode) {\n                zone.marginDomNode.setTop(newTop);\n                zone.marginDomNode.setHeight(newHeight);\n                zone.marginDomNode.setDisplay(newDisplay);\n            }\n        }\n        if (hasVisibleZone) {\n            this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n            this.marginDomNode.setWidth(this._contentLeft);\n        }\n    }\n}\nfunction safeInvoke1Arg(func, arg1) {\n    try {\n        return func(arg1);\n    }\n    catch (e) {\n        onUnexpectedError(e);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './whitespace.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { LineRange } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorWhitespaces } from '../../../common/core/editorColorRegistry.js';\nexport class WhitespaceOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._options = new WhitespaceOptions(this._context.configuration);\n        this._selection = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const newOptions = new WhitespaceOptions(this._context.configuration);\n        if (this._options.equals(newOptions)) {\n            return e.hasChanged(145 /* EditorOption.layoutInfo */);\n        }\n        this._options = newOptions;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selection = e.selections;\n        if (this._options.renderWhitespace === 'selection') {\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._options.renderWhitespace === 'none') {\n            this._renderResult = null;\n            return;\n        }\n        const startLineNumber = ctx.visibleRange.startLineNumber;\n        const endLineNumber = ctx.visibleRange.endLineNumber;\n        const lineCount = endLineNumber - startLineNumber + 1;\n        const needed = new Array(lineCount);\n        for (let i = 0; i < lineCount; i++) {\n            needed[i] = true;\n        }\n        const viewportData = this._context.viewModel.getMinimapLinesRenderingData(ctx.viewportData.startLineNumber, ctx.viewportData.endLineNumber, needed);\n        this._renderResult = [];\n        for (let lineNumber = ctx.viewportData.startLineNumber; lineNumber <= ctx.viewportData.endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - ctx.viewportData.startLineNumber;\n            const lineData = viewportData.data[lineIndex];\n            let selectionsOnLine = null;\n            if (this._options.renderWhitespace === 'selection') {\n                const selections = this._selection;\n                for (const selection of selections) {\n                    if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                        // Selection does not intersect line\n                        continue;\n                    }\n                    const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                    const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                    if (startColumn < endColumn) {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n            this._renderResult[lineIndex] = this._applyRenderWhitespace(ctx, lineNumber, selectionsOnLine, lineData);\n        }\n    }\n    _applyRenderWhitespace(ctx, lineNumber, selections, lineData) {\n        if (this._options.renderWhitespace === 'selection' && !selections) {\n            return '';\n        }\n        if (this._options.renderWhitespace === 'trailing' && lineData.continuesWithWrappedLine) {\n            return '';\n        }\n        const color = this._context.theme.getColor(editorWhitespaces);\n        const USE_SVG = this._options.renderWithSVG;\n        const lineContent = lineData.content;\n        const len = (this._options.stopRenderingLineAfter === -1 ? lineContent.length : Math.min(this._options.stopRenderingLineAfter, lineContent.length));\n        const continuesWithWrappedLine = lineData.continuesWithWrappedLine;\n        const fauxIndentLength = lineData.minColumn - 1;\n        const onlyBoundary = (this._options.renderWhitespace === 'boundary');\n        const onlyTrailing = (this._options.renderWhitespace === 'trailing');\n        const lineHeight = this._options.lineHeight;\n        const middotWidth = this._options.middotWidth;\n        const wsmiddotWidth = this._options.wsmiddotWidth;\n        const spaceWidth = this._options.spaceWidth;\n        const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n        const middotDiff = Math.abs(middotWidth - spaceWidth);\n        // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        // U+00B7 - MIDDLE DOT\n        const renderSpaceCharCode = (wsmiddotDiff < middotDiff ? 0x2E31 : 0xB7);\n        const canUseHalfwidthRightwardsArrow = this._options.canUseHalfwidthRightwardsArrow;\n        let result = '';\n        let lineIsEmptyOrWhitespace = false;\n        let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n        let lastNonWhitespaceIndex;\n        if (firstNonWhitespaceIndex === -1) {\n            lineIsEmptyOrWhitespace = true;\n            firstNonWhitespaceIndex = len;\n            lastNonWhitespaceIndex = len;\n        }\n        else {\n            lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n        }\n        let currentSelectionIndex = 0;\n        let currentSelection = selections && selections[currentSelectionIndex];\n        let maxLeft = 0;\n        for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n            const chCode = lineContent.charCodeAt(charIndex);\n            if (currentSelection && charIndex >= currentSelection.endOffset) {\n                currentSelectionIndex++;\n                currentSelection = selections && selections[currentSelectionIndex];\n            }\n            if (chCode !== 9 /* CharCode.Tab */ && chCode !== 32 /* CharCode.Space */) {\n                continue;\n            }\n            if (onlyTrailing && !lineIsEmptyOrWhitespace && charIndex <= lastNonWhitespaceIndex) {\n                // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n                continue;\n            }\n            if (onlyBoundary && charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex && chCode === 32 /* CharCode.Space */) {\n                // rendering only boundary whitespace\n                const prevChCode = (charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */);\n                const nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n                if (prevChCode !== 32 /* CharCode.Space */ && nextChCode !== 32 /* CharCode.Space */) {\n                    continue;\n                }\n            }\n            if (onlyBoundary && continuesWithWrappedLine && charIndex === len - 1) {\n                const prevCharCode = (charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */);\n                const isSingleTrailingSpace = (chCode === 32 /* CharCode.Space */ && (prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */));\n                if (isSingleTrailingSpace) {\n                    continue;\n                }\n            }\n            if (selections && (!currentSelection || currentSelection.startOffset > charIndex || currentSelection.endOffset <= charIndex)) {\n                // If rendering whitespace on selection, check that the charIndex falls within a selection\n                continue;\n            }\n            const visibleRange = ctx.visibleRangeForPosition(new Position(lineNumber, charIndex + 1));\n            if (!visibleRange) {\n                continue;\n            }\n            if (USE_SVG) {\n                maxLeft = Math.max(maxLeft, visibleRange.left);\n                if (chCode === 9 /* CharCode.Tab */) {\n                    result += this._renderArrow(lineHeight, spaceWidth, visibleRange.left);\n                }\n                else {\n                    result += `<circle cx=\"${(visibleRange.left + spaceWidth / 2).toFixed(2)}\" cy=\"${(lineHeight / 2).toFixed(2)}\" r=\"${(spaceWidth / 7).toFixed(2)}\" />`;\n                }\n            }\n            else {\n                if (chCode === 9 /* CharCode.Tab */) {\n                    result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${canUseHalfwidthRightwardsArrow ? String.fromCharCode(0xFFEB) : String.fromCharCode(0x2192)}</div>`;\n                }\n                else {\n                    result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${String.fromCharCode(renderSpaceCharCode)}</div>`;\n                }\n            }\n        }\n        if (USE_SVG) {\n            maxLeft = Math.round(maxLeft + spaceWidth);\n            return (`<svg style=\"bottom:0;position:absolute;width:${maxLeft}px;height:${lineHeight}px\" viewBox=\"0 0 ${maxLeft} ${lineHeight}\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"${color}\">`\n                + result\n                + `</svg>`);\n        }\n        return result;\n    }\n    _renderArrow(lineHeight, spaceWidth, left) {\n        const strokeWidth = spaceWidth / 7;\n        const width = spaceWidth;\n        const dy = lineHeight / 2;\n        const dx = left;\n        const p1 = { x: 0, y: strokeWidth / 2 };\n        const p2 = { x: 100 / 125 * width, y: p1.y };\n        const p3 = { x: p2.x - 0.2 * p2.x, y: p2.y + 0.2 * p2.x };\n        const p4 = { x: p3.x + 0.1 * p2.x, y: p3.y + 0.1 * p2.x };\n        const p5 = { x: p4.x + 0.35 * p2.x, y: p4.y - 0.35 * p2.x };\n        const p6 = { x: p5.x, y: -p5.y };\n        const p7 = { x: p4.x, y: -p4.y };\n        const p8 = { x: p3.x, y: -p3.y };\n        const p9 = { x: p2.x, y: -p2.y };\n        const p10 = { x: p1.x, y: -p1.y };\n        const p = [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10];\n        const parts = p.map((p) => `${(dx + p.x).toFixed(2)} ${(dy + p.y).toFixed(2)}`).join(' L ');\n        return `<path d=\"M ${parts}\" />`;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nclass WhitespaceOptions {\n    constructor(config) {\n        const options = config.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const experimentalWhitespaceRendering = options.get(38 /* EditorOption.experimentalWhitespaceRendering */);\n        if (experimentalWhitespaceRendering === 'off') {\n            // whitespace is rendered in the view line\n            this.renderWhitespace = 'none';\n            this.renderWithSVG = false;\n        }\n        else if (experimentalWhitespaceRendering === 'svg') {\n            this.renderWhitespace = options.get(99 /* EditorOption.renderWhitespace */);\n            this.renderWithSVG = true;\n        }\n        else {\n            this.renderWhitespace = options.get(99 /* EditorOption.renderWhitespace */);\n            this.renderWithSVG = false;\n        }\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this.stopRenderingLineAfter = options.get(117 /* EditorOption.stopRenderingLineAfter */);\n    }\n    equals(other) {\n        return (this.renderWhitespace === other.renderWhitespace\n            && this.renderWithSVG === other.renderWithSVG\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as dom from '../../base/browser/dom.js';\nimport { createFastDomNode } from '../../base/browser/fastDomNode.js';\nimport { inputLatency } from '../../base/browser/performance.js';\nimport { BugIndicatingError, onUnexpectedError } from '../../base/common/errors.js';\nimport { PointerHandlerLastRenderData } from './controller/mouseTarget.js';\nimport { PointerHandler } from './controller/pointerHandler.js';\nimport { TextAreaHandler } from './controller/textAreaHandler.js';\nimport { RenderingContext } from './view/renderingContext.js';\nimport { ViewController } from './view/viewController.js';\nimport { ContentViewOverlays, MarginViewOverlays } from './view/viewOverlays.js';\nimport { PartFingerprints } from './view/viewPart.js';\nimport { ViewUserInputEvents } from './view/viewUserInputEvents.js';\nimport { BlockDecorations } from './viewParts/blockDecorations/blockDecorations.js';\nimport { ViewContentWidgets } from './viewParts/contentWidgets/contentWidgets.js';\nimport { CurrentLineHighlightOverlay, CurrentLineMarginHighlightOverlay } from './viewParts/currentLineHighlight/currentLineHighlight.js';\nimport { DecorationsOverlay } from './viewParts/decorations/decorations.js';\nimport { EditorScrollbar } from './viewParts/editorScrollbar/editorScrollbar.js';\nimport { GlyphMarginWidgets } from './viewParts/glyphMargin/glyphMargin.js';\nimport { IndentGuidesOverlay } from './viewParts/indentGuides/indentGuides.js';\nimport { LineNumbersOverlay } from './viewParts/lineNumbers/lineNumbers.js';\nimport { ViewLines } from './viewParts/lines/viewLines.js';\nimport { LinesDecorationsOverlay } from './viewParts/linesDecorations/linesDecorations.js';\nimport { Margin } from './viewParts/margin/margin.js';\nimport { MarginViewLineDecorationsOverlay } from './viewParts/marginDecorations/marginDecorations.js';\nimport { Minimap } from './viewParts/minimap/minimap.js';\nimport { ViewOverlayWidgets } from './viewParts/overlayWidgets/overlayWidgets.js';\nimport { DecorationsOverviewRuler } from './viewParts/overviewRuler/decorationsOverviewRuler.js';\nimport { OverviewRuler } from './viewParts/overviewRuler/overviewRuler.js';\nimport { Rulers } from './viewParts/rulers/rulers.js';\nimport { ScrollDecorationViewPart } from './viewParts/scrollDecoration/scrollDecoration.js';\nimport { SelectionsOverlay } from './viewParts/selections/selections.js';\nimport { ViewCursors } from './viewParts/viewCursors/viewCursors.js';\nimport { ViewZones } from './viewParts/viewZones/viewZones.js';\nimport { WhitespaceOverlay } from './viewParts/whitespace/whitespace.js';\nimport { Position } from '../common/core/position.js';\nimport { Range } from '../common/core/range.js';\nimport { Selection } from '../common/core/selection.js';\nimport { GlyphMarginLane } from '../common/model.js';\nimport { ViewEventHandler } from '../common/viewEventHandler.js';\nimport { ViewportData } from '../common/viewLayout/viewLinesViewportData.js';\nimport { ViewContext } from '../common/viewModel/viewContext.js';\nimport { IInstantiationService } from '../../platform/instantiation/common/instantiation.js';\nimport { getThemeTypeSelector } from '../../platform/theme/common/themeService.js';\nlet View = class View extends ViewEventHandler {\n    constructor(commandDelegate, configuration, colorTheme, model, userInputEvents, overflowWidgetsDomNode, _instantiationService) {\n        super();\n        this._instantiationService = _instantiationService;\n        // Actual mutable state\n        this._shouldRecomputeGlyphMarginLanes = false;\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._renderAnimationFrame = null;\n        const viewController = new ViewController(configuration, model, userInputEvents, commandDelegate);\n        // The view context is passed on to most classes (basically to reduce param. counts in ctors)\n        this._context = new ViewContext(configuration, colorTheme, model);\n        // Ensure the view is the first event handler in order to update the layout\n        this._context.addEventHandler(this);\n        this._viewParts = [];\n        // Keyboard handler\n        this._textAreaHandler = this._instantiationService.createInstance(TextAreaHandler, this._context, viewController, this._createTextAreaHandlerHelper());\n        this._viewParts.push(this._textAreaHandler);\n        // These two dom nodes must be constructed up front, since references are needed in the layout provider (scrolling & co.)\n        this._linesContent = createFastDomNode(document.createElement('div'));\n        this._linesContent.setClassName('lines-content' + ' monaco-editor-background');\n        this._linesContent.setPosition('absolute');\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName(this._getEditorClassName());\n        // Set role 'code' for better screen reader support https://github.com/microsoft/vscode/issues/93438\n        this.domNode.setAttribute('role', 'code');\n        this._overflowGuardContainer = createFastDomNode(document.createElement('div'));\n        PartFingerprints.write(this._overflowGuardContainer, 3 /* PartFingerprint.OverflowGuard */);\n        this._overflowGuardContainer.setClassName('overflow-guard');\n        this._scrollbar = new EditorScrollbar(this._context, this._linesContent, this.domNode, this._overflowGuardContainer);\n        this._viewParts.push(this._scrollbar);\n        // View Lines\n        this._viewLines = new ViewLines(this._context, this._linesContent);\n        // View Zones\n        this._viewZones = new ViewZones(this._context);\n        this._viewParts.push(this._viewZones);\n        // Decorations overview ruler\n        const decorationsOverviewRuler = new DecorationsOverviewRuler(this._context);\n        this._viewParts.push(decorationsOverviewRuler);\n        const scrollDecoration = new ScrollDecorationViewPart(this._context);\n        this._viewParts.push(scrollDecoration);\n        const contentViewOverlays = new ContentViewOverlays(this._context);\n        this._viewParts.push(contentViewOverlays);\n        contentViewOverlays.addDynamicOverlay(new CurrentLineHighlightOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new SelectionsOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new IndentGuidesOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new DecorationsOverlay(this._context));\n        contentViewOverlays.addDynamicOverlay(new WhitespaceOverlay(this._context));\n        const marginViewOverlays = new MarginViewOverlays(this._context);\n        this._viewParts.push(marginViewOverlays);\n        marginViewOverlays.addDynamicOverlay(new CurrentLineMarginHighlightOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new MarginViewLineDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LinesDecorationsOverlay(this._context));\n        marginViewOverlays.addDynamicOverlay(new LineNumbersOverlay(this._context));\n        // Glyph margin widgets\n        this._glyphMarginWidgets = new GlyphMarginWidgets(this._context);\n        this._viewParts.push(this._glyphMarginWidgets);\n        const margin = new Margin(this._context);\n        margin.getDomNode().appendChild(this._viewZones.marginDomNode);\n        margin.getDomNode().appendChild(marginViewOverlays.getDomNode());\n        margin.getDomNode().appendChild(this._glyphMarginWidgets.domNode);\n        this._viewParts.push(margin);\n        // Content widgets\n        this._contentWidgets = new ViewContentWidgets(this._context, this.domNode);\n        this._viewParts.push(this._contentWidgets);\n        this._viewCursors = new ViewCursors(this._context);\n        this._viewParts.push(this._viewCursors);\n        // Overlay widgets\n        this._overlayWidgets = new ViewOverlayWidgets(this._context, this.domNode);\n        this._viewParts.push(this._overlayWidgets);\n        const rulers = new Rulers(this._context);\n        this._viewParts.push(rulers);\n        const blockOutline = new BlockDecorations(this._context);\n        this._viewParts.push(blockOutline);\n        const minimap = new Minimap(this._context);\n        this._viewParts.push(minimap);\n        // -------------- Wire dom nodes up\n        if (decorationsOverviewRuler) {\n            const overviewRulerData = this._scrollbar.getOverviewRulerLayoutInfo();\n            overviewRulerData.parent.insertBefore(decorationsOverviewRuler.getDomNode(), overviewRulerData.insertBefore);\n        }\n        this._linesContent.appendChild(contentViewOverlays.getDomNode());\n        this._linesContent.appendChild(rulers.domNode);\n        this._linesContent.appendChild(this._viewZones.domNode);\n        this._linesContent.appendChild(this._viewLines.getDomNode());\n        this._linesContent.appendChild(this._contentWidgets.domNode);\n        this._linesContent.appendChild(this._viewCursors.getDomNode());\n        this._overflowGuardContainer.appendChild(margin.getDomNode());\n        this._overflowGuardContainer.appendChild(this._scrollbar.getDomNode());\n        this._overflowGuardContainer.appendChild(scrollDecoration.getDomNode());\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textArea);\n        this._overflowGuardContainer.appendChild(this._textAreaHandler.textAreaCover);\n        this._overflowGuardContainer.appendChild(this._overlayWidgets.getDomNode());\n        this._overflowGuardContainer.appendChild(minimap.getDomNode());\n        this._overflowGuardContainer.appendChild(blockOutline.domNode);\n        this.domNode.appendChild(this._overflowGuardContainer);\n        if (overflowWidgetsDomNode) {\n            overflowWidgetsDomNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode.domNode);\n            overflowWidgetsDomNode.appendChild(this._overlayWidgets.overflowingOverlayWidgetsDomNode.domNode);\n        }\n        else {\n            this.domNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode);\n            this.domNode.appendChild(this._overlayWidgets.overflowingOverlayWidgetsDomNode);\n        }\n        this._applyLayout();\n        // Pointer handler\n        this._pointerHandler = this._register(new PointerHandler(this._context, viewController, this._createPointerHandlerHelper()));\n    }\n    _computeGlyphMarginLanes() {\n        const model = this._context.viewModel.model;\n        const laneModel = this._context.viewModel.glyphLanes;\n        let glyphs = [];\n        let maxLineNumber = 0;\n        // Add all margin decorations\n        glyphs = glyphs.concat(model.getAllMarginDecorations().map((decoration) => {\n            var _a, _b, _c;\n            const lane = (_b = (_a = decoration.options.glyphMargin) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : GlyphMarginLane.Center;\n            maxLineNumber = Math.max(maxLineNumber, decoration.range.endLineNumber);\n            return { range: decoration.range, lane, persist: (_c = decoration.options.glyphMargin) === null || _c === void 0 ? void 0 : _c.persistLane };\n        }));\n        // Add all glyph margin widgets\n        glyphs = glyphs.concat(this._glyphMarginWidgets.getWidgets().map((widget) => {\n            const range = model.validateRange(widget.preference.range);\n            maxLineNumber = Math.max(maxLineNumber, range.endLineNumber);\n            return { range, lane: widget.preference.lane };\n        }));\n        // Sorted by their start position\n        glyphs.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n        laneModel.reset(maxLineNumber);\n        for (const glyph of glyphs) {\n            laneModel.push(glyph.lane, glyph.range, glyph.persist);\n        }\n        return laneModel;\n    }\n    _createPointerHandlerHelper() {\n        return {\n            viewDomNode: this.domNode.domNode,\n            linesContentDomNode: this._linesContent.domNode,\n            viewLinesDomNode: this._viewLines.getDomNode().domNode,\n            focusTextArea: () => {\n                this.focus();\n            },\n            dispatchTextAreaEvent: (event) => {\n                this._textAreaHandler.textArea.domNode.dispatchEvent(event);\n            },\n            getLastRenderData: () => {\n                const lastViewCursorsRenderData = this._viewCursors.getLastRenderData() || [];\n                const lastTextareaPosition = this._textAreaHandler.getLastRenderData();\n                return new PointerHandlerLastRenderData(lastViewCursorsRenderData, lastTextareaPosition);\n            },\n            renderNow: () => {\n                this.render(true, false);\n            },\n            shouldSuppressMouseDownOnViewZone: (viewZoneId) => {\n                return this._viewZones.shouldSuppressMouseDownOnViewZone(viewZoneId);\n            },\n            shouldSuppressMouseDownOnWidget: (widgetId) => {\n                return this._contentWidgets.shouldSuppressMouseDownOnWidget(widgetId);\n            },\n            getPositionFromDOMInfo: (spanNode, offset) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getPositionFromDOMInfo(spanNode, offset);\n            },\n            visibleRangeForPosition: (lineNumber, column) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(new Position(lineNumber, column));\n            },\n            getLineWidth: (lineNumber) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.getLineWidth(lineNumber);\n            }\n        };\n    }\n    _createTextAreaHandlerHelper() {\n        return {\n            visibleRangeForPosition: (position) => {\n                this._flushAccumulatedAndRenderNow();\n                return this._viewLines.visibleRangeForPosition(position);\n            }\n        };\n    }\n    _applyLayout() {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this.domNode.setWidth(layoutInfo.width);\n        this.domNode.setHeight(layoutInfo.height);\n        this._overflowGuardContainer.setWidth(layoutInfo.width);\n        this._overflowGuardContainer.setHeight(layoutInfo.height);\n        // https://stackoverflow.com/questions/38905916/content-in-google-chrome-larger-than-16777216-px-not-being-rendered\n        this._linesContent.setWidth(16777216);\n        this._linesContent.setHeight(16777216);\n    }\n    _getEditorClassName() {\n        const focused = this._textAreaHandler.isFocused() ? ' focused' : '';\n        return this._context.configuration.options.get(142 /* EditorOption.editorClassName */) + ' ' + getThemeTypeSelector(this._context.theme.type) + focused;\n    }\n    // --- begin event handlers\n    handleEvents(events) {\n        super.handleEvents(events);\n        this._scheduleRender();\n    }\n    onConfigurationChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        this._applyLayout();\n        return false;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections;\n        return false;\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsGlyphMargin) {\n            this._shouldRecomputeGlyphMarginLanes = true;\n        }\n        return false;\n    }\n    onFocusChanged(e) {\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    onThemeChanged(e) {\n        this._context.theme.update(e.theme);\n        this.domNode.setClassName(this._getEditorClassName());\n        return false;\n    }\n    // --- end event handlers\n    dispose() {\n        if (this._renderAnimationFrame !== null) {\n            this._renderAnimationFrame.dispose();\n            this._renderAnimationFrame = null;\n        }\n        this._contentWidgets.overflowingContentWidgetsDomNode.domNode.remove();\n        this._context.removeEventHandler(this);\n        this._viewLines.dispose();\n        // Destroy view parts\n        for (const viewPart of this._viewParts) {\n            viewPart.dispose();\n        }\n        super.dispose();\n    }\n    _scheduleRender() {\n        if (this._store.isDisposed) {\n            throw new BugIndicatingError();\n        }\n        if (this._renderAnimationFrame === null) {\n            const rendering = this._createCoordinatedRendering();\n            this._renderAnimationFrame = EditorRenderingCoordinator.INSTANCE.scheduleCoordinatedRendering({\n                window: dom.getWindow(this.domNode.domNode),\n                prepareRenderText: () => {\n                    if (this._store.isDisposed) {\n                        throw new BugIndicatingError();\n                    }\n                    try {\n                        return rendering.prepareRenderText();\n                    }\n                    finally {\n                        this._renderAnimationFrame = null;\n                    }\n                },\n                renderText: () => {\n                    if (this._store.isDisposed) {\n                        throw new BugIndicatingError();\n                    }\n                    return rendering.renderText();\n                },\n                prepareRender: (viewParts, ctx) => {\n                    if (this._store.isDisposed) {\n                        throw new BugIndicatingError();\n                    }\n                    return rendering.prepareRender(viewParts, ctx);\n                },\n                render: (viewParts, ctx) => {\n                    if (this._store.isDisposed) {\n                        throw new BugIndicatingError();\n                    }\n                    return rendering.render(viewParts, ctx);\n                }\n            });\n        }\n    }\n    _flushAccumulatedAndRenderNow() {\n        const rendering = this._createCoordinatedRendering();\n        safeInvokeNoArg(() => rendering.prepareRenderText());\n        const data = safeInvokeNoArg(() => rendering.renderText());\n        if (data) {\n            const [viewParts, ctx] = data;\n            safeInvokeNoArg(() => rendering.prepareRender(viewParts, ctx));\n            safeInvokeNoArg(() => rendering.render(viewParts, ctx));\n        }\n    }\n    _getViewPartsToRender() {\n        const result = [];\n        let resultLen = 0;\n        for (const viewPart of this._viewParts) {\n            if (viewPart.shouldRender()) {\n                result[resultLen++] = viewPart;\n            }\n        }\n        return result;\n    }\n    _createCoordinatedRendering() {\n        return {\n            prepareRenderText: () => {\n                if (this._shouldRecomputeGlyphMarginLanes) {\n                    this._shouldRecomputeGlyphMarginLanes = false;\n                    const model = this._computeGlyphMarginLanes();\n                    this._context.configuration.setGlyphMarginDecorationLaneCount(model.requiredLanes);\n                }\n                inputLatency.onRenderStart();\n            },\n            renderText: () => {\n                if (!this.domNode.domNode.isConnected) {\n                    return null;\n                }\n                let viewPartsToRender = this._getViewPartsToRender();\n                if (!this._viewLines.shouldRender() && viewPartsToRender.length === 0) {\n                    // Nothing to render\n                    return null;\n                }\n                const partialViewportData = this._context.viewLayout.getLinesViewportData();\n                this._context.viewModel.setViewport(partialViewportData.startLineNumber, partialViewportData.endLineNumber, partialViewportData.centeredLineNumber);\n                const viewportData = new ViewportData(this._selections, partialViewportData, this._context.viewLayout.getWhitespaceViewportData(), this._context.viewModel);\n                if (this._contentWidgets.shouldRender()) {\n                    // Give the content widgets a chance to set their max width before a possible synchronous layout\n                    this._contentWidgets.onBeforeRender(viewportData);\n                }\n                if (this._viewLines.shouldRender()) {\n                    this._viewLines.renderText(viewportData);\n                    this._viewLines.onDidRender();\n                    // Rendering of viewLines might cause scroll events to occur, so collect view parts to render again\n                    viewPartsToRender = this._getViewPartsToRender();\n                }\n                return [viewPartsToRender, new RenderingContext(this._context.viewLayout, viewportData, this._viewLines)];\n            },\n            prepareRender: (viewPartsToRender, ctx) => {\n                for (const viewPart of viewPartsToRender) {\n                    viewPart.prepareRender(ctx);\n                }\n            },\n            render: (viewPartsToRender, ctx) => {\n                for (const viewPart of viewPartsToRender) {\n                    viewPart.render(ctx);\n                    viewPart.onDidRender();\n                }\n            }\n        };\n    }\n    // --- BEGIN CodeEditor helpers\n    delegateVerticalScrollbarPointerDown(browserEvent) {\n        this._scrollbar.delegateVerticalScrollbarPointerDown(browserEvent);\n    }\n    delegateScrollFromMouseWheelEvent(browserEvent) {\n        this._scrollbar.delegateScrollFromMouseWheelEvent(browserEvent);\n    }\n    restoreState(scrollPosition) {\n        this._context.viewModel.viewLayout.setScrollPosition({\n            scrollTop: scrollPosition.scrollTop,\n            scrollLeft: scrollPosition.scrollLeft\n        }, 1 /* ScrollType.Immediate */);\n        this._context.viewModel.visibleLinesStabilized();\n    }\n    getOffsetForColumn(modelLineNumber, modelColumn) {\n        const modelPosition = this._context.viewModel.model.validatePosition({\n            lineNumber: modelLineNumber,\n            column: modelColumn\n        });\n        const viewPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        this._flushAccumulatedAndRenderNow();\n        const visibleRange = this._viewLines.visibleRangeForPosition(new Position(viewPosition.lineNumber, viewPosition.column));\n        if (!visibleRange) {\n            return -1;\n        }\n        return visibleRange.left;\n    }\n    getTargetAtClientPoint(clientX, clientY) {\n        const mouseTarget = this._pointerHandler.getTargetAtClientPoint(clientX, clientY);\n        if (!mouseTarget) {\n            return null;\n        }\n        return ViewUserInputEvents.convertViewToModelMouseTarget(mouseTarget, this._context.viewModel.coordinatesConverter);\n    }\n    createOverviewRuler(cssClassName) {\n        return new OverviewRuler(this._context, cssClassName);\n    }\n    change(callback) {\n        this._viewZones.changeViewZones(callback);\n        this._scheduleRender();\n    }\n    render(now, everything) {\n        if (everything) {\n            // Force everything to render...\n            this._viewLines.forceShouldRender();\n            for (const viewPart of this._viewParts) {\n                viewPart.forceShouldRender();\n            }\n        }\n        if (now) {\n            this._flushAccumulatedAndRenderNow();\n        }\n        else {\n            this._scheduleRender();\n        }\n    }\n    writeScreenReaderContent(reason) {\n        this._textAreaHandler.writeScreenReaderContent(reason);\n    }\n    focus() {\n        this._textAreaHandler.focusTextArea();\n    }\n    isFocused() {\n        return this._textAreaHandler.isFocused();\n    }\n    setAriaOptions(options) {\n        this._textAreaHandler.setAriaOptions(options);\n    }\n    addContentWidget(widgetData) {\n        this._contentWidgets.addWidget(widgetData.widget);\n        this.layoutContentWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutContentWidget(widgetData) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        this._contentWidgets.setWidgetPosition(widgetData.widget, (_b = (_a = widgetData.position) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : null, (_d = (_c = widgetData.position) === null || _c === void 0 ? void 0 : _c.secondaryPosition) !== null && _d !== void 0 ? _d : null, (_f = (_e = widgetData.position) === null || _e === void 0 ? void 0 : _e.preference) !== null && _f !== void 0 ? _f : null, (_h = (_g = widgetData.position) === null || _g === void 0 ? void 0 : _g.positionAffinity) !== null && _h !== void 0 ? _h : null);\n        this._scheduleRender();\n    }\n    removeContentWidget(widgetData) {\n        this._contentWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n    addOverlayWidget(widgetData) {\n        this._overlayWidgets.addWidget(widgetData.widget);\n        this.layoutOverlayWidget(widgetData);\n        this._scheduleRender();\n    }\n    layoutOverlayWidget(widgetData) {\n        const newPreference = widgetData.position ? widgetData.position.preference : null;\n        const shouldRender = this._overlayWidgets.setWidgetPosition(widgetData.widget, newPreference);\n        if (shouldRender) {\n            this._scheduleRender();\n        }\n    }\n    removeOverlayWidget(widgetData) {\n        this._overlayWidgets.removeWidget(widgetData.widget);\n        this._scheduleRender();\n    }\n    addGlyphMarginWidget(widgetData) {\n        this._glyphMarginWidgets.addWidget(widgetData.widget);\n        this._shouldRecomputeGlyphMarginLanes = true;\n        this._scheduleRender();\n    }\n    layoutGlyphMarginWidget(widgetData) {\n        const newPreference = widgetData.position;\n        const shouldRender = this._glyphMarginWidgets.setWidgetPosition(widgetData.widget, newPreference);\n        if (shouldRender) {\n            this._shouldRecomputeGlyphMarginLanes = true;\n            this._scheduleRender();\n        }\n    }\n    removeGlyphMarginWidget(widgetData) {\n        this._glyphMarginWidgets.removeWidget(widgetData.widget);\n        this._shouldRecomputeGlyphMarginLanes = true;\n        this._scheduleRender();\n    }\n};\nView = __decorate([\n    __param(6, IInstantiationService)\n], View);\nexport { View };\nfunction safeInvokeNoArg(func) {\n    try {\n        return func();\n    }\n    catch (e) {\n        onUnexpectedError(e);\n        return null;\n    }\n}\nclass EditorRenderingCoordinator {\n    constructor() {\n        this._coordinatedRenderings = [];\n        this._animationFrameRunners = new Map();\n    }\n    scheduleCoordinatedRendering(rendering) {\n        this._coordinatedRenderings.push(rendering);\n        this._scheduleRender(rendering.window);\n        return {\n            dispose: () => {\n                const renderingIndex = this._coordinatedRenderings.indexOf(rendering);\n                if (renderingIndex === -1) {\n                    return;\n                }\n                this._coordinatedRenderings.splice(renderingIndex, 1);\n                if (this._coordinatedRenderings.length === 0) {\n                    // There are no more renderings to coordinate => cancel animation frames\n                    for (const [_, disposable] of this._animationFrameRunners) {\n                        disposable.dispose();\n                    }\n                    this._animationFrameRunners.clear();\n                }\n            }\n        };\n    }\n    _scheduleRender(window) {\n        if (!this._animationFrameRunners.has(window)) {\n            const runner = () => {\n                this._animationFrameRunners.delete(window);\n                this._onRenderScheduled();\n            };\n            this._animationFrameRunners.set(window, dom.runAtThisOrScheduleAtNextAnimationFrame(window, runner, 100));\n        }\n    }\n    _onRenderScheduled() {\n        const coordinatedRenderings = this._coordinatedRenderings.slice(0);\n        this._coordinatedRenderings = [];\n        for (const rendering of coordinatedRenderings) {\n            safeInvokeNoArg(() => rendering.prepareRenderText());\n        }\n        const datas = [];\n        for (let i = 0, len = coordinatedRenderings.length; i < len; i++) {\n            const rendering = coordinatedRenderings[i];\n            datas[i] = safeInvokeNoArg(() => rendering.renderText());\n        }\n        for (let i = 0, len = coordinatedRenderings.length; i < len; i++) {\n            const rendering = coordinatedRenderings[i];\n            const data = datas[i];\n            if (!data) {\n                continue;\n            }\n            const [viewParts, ctx] = data;\n            safeInvokeNoArg(() => rendering.prepareRender(viewParts, ctx));\n        }\n        for (let i = 0, len = coordinatedRenderings.length; i < len; i++) {\n            const rendering = coordinatedRenderings[i];\n            const data = datas[i];\n            if (!data) {\n                continue;\n            }\n            const [viewParts, ctx] = data;\n            safeInvokeNoArg(() => rendering.render(viewParts, ctx));\n        }\n    }\n}\nEditorRenderingCoordinator.INSTANCE = new EditorRenderingCoordinator();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { assertIsDefined } from '../../../base/common/types.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { StringBuilder } from '../../common/core/stringBuilder.js';\nimport { ModelLineProjectionData } from '../../common/modelLineProjectionData.js';\nimport { LineInjectedText } from '../../common/textModelEvents.js';\nconst ttPolicy = createTrustedTypesPolicy('domLineBreaksComputer', { createHTML: value => value });\nexport class DOMLineBreaksComputerFactory {\n    static create(targetWindow) {\n        return new DOMLineBreaksComputerFactory(new WeakRef(targetWindow));\n    }\n    constructor(targetWindow) {\n        this.targetWindow = targetWindow;\n    }\n    createLineBreaksComputer(fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak) {\n        const requests = [];\n        const injectedTexts = [];\n        return {\n            addRequest: (lineText, injectedText, previousLineBreakData) => {\n                requests.push(lineText);\n                injectedTexts.push(injectedText);\n            },\n            finalize: () => {\n                return createLineBreaks(assertIsDefined(this.targetWindow.deref()), requests, fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak, injectedTexts);\n            }\n        };\n    }\n}\nfunction createLineBreaks(targetWindow, requests, fontInfo, tabSize, firstLineBreakColumn, wrappingIndent, wordBreak, injectedTextsPerLine) {\n    var _a;\n    function createEmptyLineBreakWithPossiblyInjectedText(requestIdx) {\n        const injectedTexts = injectedTextsPerLine[requestIdx];\n        if (injectedTexts) {\n            const lineText = LineInjectedText.applyInjectedText(requests[requestIdx], injectedTexts);\n            const injectionOptions = injectedTexts.map(t => t.options);\n            const injectionOffsets = injectedTexts.map(text => text.column - 1);\n            // creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n            // because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n            return new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n        }\n        else {\n            return null;\n        }\n    }\n    if (firstLineBreakColumn === -1) {\n        const result = [];\n        for (let i = 0, len = requests.length; i < len; i++) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n        }\n        return result;\n    }\n    const overallWidth = Math.round(firstLineBreakColumn * fontInfo.typicalHalfwidthCharacterWidth);\n    const additionalIndent = (wrappingIndent === 3 /* WrappingIndent.DeepIndent */ ? 2 : wrappingIndent === 2 /* WrappingIndent.Indent */ ? 1 : 0);\n    const additionalIndentSize = Math.round(tabSize * additionalIndent);\n    const additionalIndentLength = Math.ceil(fontInfo.spaceWidth * additionalIndentSize);\n    const containerDomNode = document.createElement('div');\n    applyFontInfo(containerDomNode, fontInfo);\n    const sb = new StringBuilder(10000);\n    const firstNonWhitespaceIndices = [];\n    const wrappedTextIndentLengths = [];\n    const renderLineContents = [];\n    const allCharOffsets = [];\n    const allVisibleColumns = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineContent = LineInjectedText.applyInjectedText(requests[i], injectedTextsPerLine[i]);\n        let firstNonWhitespaceIndex = 0;\n        let wrappedTextIndentLength = 0;\n        let width = overallWidth;\n        if (wrappingIndent !== 0 /* WrappingIndent.None */) {\n            firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n            if (firstNonWhitespaceIndex === -1) {\n                // all whitespace line\n                firstNonWhitespaceIndex = 0;\n            }\n            else {\n                // Track existing indent\n                for (let i = 0; i < firstNonWhitespaceIndex; i++) {\n                    const charWidth = (lineContent.charCodeAt(i) === 9 /* CharCode.Tab */\n                        ? (tabSize - (wrappedTextIndentLength % tabSize))\n                        : 1);\n                    wrappedTextIndentLength += charWidth;\n                }\n                const indentWidth = Math.ceil(fontInfo.spaceWidth * wrappedTextIndentLength);\n                // Force sticking to beginning of line if no character would fit except for the indentation\n                if (indentWidth + fontInfo.typicalFullwidthCharacterWidth > overallWidth) {\n                    firstNonWhitespaceIndex = 0;\n                    wrappedTextIndentLength = 0;\n                }\n                else {\n                    width = overallWidth - indentWidth;\n                }\n            }\n        }\n        const renderLineContent = lineContent.substr(firstNonWhitespaceIndex);\n        const tmp = renderLine(renderLineContent, wrappedTextIndentLength, tabSize, width, sb, additionalIndentLength);\n        firstNonWhitespaceIndices[i] = firstNonWhitespaceIndex;\n        wrappedTextIndentLengths[i] = wrappedTextIndentLength;\n        renderLineContents[i] = renderLineContent;\n        allCharOffsets[i] = tmp[0];\n        allVisibleColumns[i] = tmp[1];\n    }\n    const html = sb.build();\n    const trustedhtml = (_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(html)) !== null && _a !== void 0 ? _a : html;\n    containerDomNode.innerHTML = trustedhtml;\n    containerDomNode.style.position = 'absolute';\n    containerDomNode.style.top = '10000';\n    if (wordBreak === 'keepAll') {\n        // word-break: keep-all; overflow-wrap: anywhere\n        containerDomNode.style.wordBreak = 'keep-all';\n        containerDomNode.style.overflowWrap = 'anywhere';\n    }\n    else {\n        // overflow-wrap: break-word\n        containerDomNode.style.wordBreak = 'inherit';\n        containerDomNode.style.overflowWrap = 'break-word';\n    }\n    targetWindow.document.body.appendChild(containerDomNode);\n    const range = document.createRange();\n    const lineDomNodes = Array.prototype.slice.call(containerDomNode.children, 0);\n    const result = [];\n    for (let i = 0; i < requests.length; i++) {\n        const lineDomNode = lineDomNodes[i];\n        const breakOffsets = readLineBreaks(range, lineDomNode, renderLineContents[i], allCharOffsets[i]);\n        if (breakOffsets === null) {\n            result[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n            continue;\n        }\n        const firstNonWhitespaceIndex = firstNonWhitespaceIndices[i];\n        const wrappedTextIndentLength = wrappedTextIndentLengths[i] + additionalIndentSize;\n        const visibleColumns = allVisibleColumns[i];\n        const breakOffsetsVisibleColumn = [];\n        for (let j = 0, len = breakOffsets.length; j < len; j++) {\n            breakOffsetsVisibleColumn[j] = visibleColumns[breakOffsets[j]];\n        }\n        if (firstNonWhitespaceIndex !== 0) {\n            // All break offsets are relative to the renderLineContent, make them absolute again\n            for (let j = 0, len = breakOffsets.length; j < len; j++) {\n                breakOffsets[j] += firstNonWhitespaceIndex;\n            }\n        }\n        let injectionOptions;\n        let injectionOffsets;\n        const curInjectedTexts = injectedTextsPerLine[i];\n        if (curInjectedTexts) {\n            injectionOptions = curInjectedTexts.map(t => t.options);\n            injectionOffsets = curInjectedTexts.map(text => text.column - 1);\n        }\n        else {\n            injectionOptions = null;\n            injectionOffsets = null;\n        }\n        result[i] = new ModelLineProjectionData(injectionOffsets, injectionOptions, breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength);\n    }\n    targetWindow.document.body.removeChild(containerDomNode);\n    return result;\n}\nfunction renderLine(lineContent, initialVisibleColumn, tabSize, width, sb, wrappingIndentLength) {\n    if (wrappingIndentLength !== 0) {\n        const hangingOffset = String(wrappingIndentLength);\n        sb.appendString('<div style=\"text-indent: -');\n        sb.appendString(hangingOffset);\n        sb.appendString('px; padding-left: ');\n        sb.appendString(hangingOffset);\n        sb.appendString('px; box-sizing: border-box; width:');\n    }\n    else {\n        sb.appendString('<div style=\"width:');\n    }\n    sb.appendString(String(width));\n    sb.appendString('px;\">');\n    // if (containsRTL) {\n    // \tsb.appendASCIIString('\" dir=\"ltr');\n    // }\n    const len = lineContent.length;\n    let visibleColumn = initialVisibleColumn;\n    let charOffset = 0;\n    const charOffsets = [];\n    const visibleColumns = [];\n    let nextCharCode = (0 < len ? lineContent.charCodeAt(0) : 0 /* CharCode.Null */);\n    sb.appendString('<span>');\n    for (let charIndex = 0; charIndex < len; charIndex++) {\n        if (charIndex !== 0 && charIndex % 16384 /* Constants.SPAN_MODULO_LIMIT */ === 0) {\n            sb.appendString('</span><span>');\n        }\n        charOffsets[charIndex] = charOffset;\n        visibleColumns[charIndex] = visibleColumn;\n        const charCode = nextCharCode;\n        nextCharCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n        let producedCharacters = 1;\n        let charWidth = 1;\n        switch (charCode) {\n            case 9 /* CharCode.Tab */:\n                producedCharacters = (tabSize - (visibleColumn % tabSize));\n                charWidth = producedCharacters;\n                for (let space = 1; space <= producedCharacters; space++) {\n                    if (space < producedCharacters) {\n                        sb.appendCharCode(0xA0); // &nbsp;\n                    }\n                    else {\n                        sb.appendASCIICharCode(32 /* CharCode.Space */);\n                    }\n                }\n                break;\n            case 32 /* CharCode.Space */:\n                if (nextCharCode === 32 /* CharCode.Space */) {\n                    sb.appendCharCode(0xA0); // &nbsp;\n                }\n                else {\n                    sb.appendASCIICharCode(32 /* CharCode.Space */);\n                }\n                break;\n            case 60 /* CharCode.LessThan */:\n                sb.appendString('&lt;');\n                break;\n            case 62 /* CharCode.GreaterThan */:\n                sb.appendString('&gt;');\n                break;\n            case 38 /* CharCode.Ampersand */:\n                sb.appendString('&amp;');\n                break;\n            case 0 /* CharCode.Null */:\n                sb.appendString('&#00;');\n                break;\n            case 65279 /* CharCode.UTF8_BOM */:\n            case 8232 /* CharCode.LINE_SEPARATOR */:\n            case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n            case 133 /* CharCode.NEXT_LINE */:\n                sb.appendCharCode(0xFFFD);\n                break;\n            default:\n                if (strings.isFullWidthCharacter(charCode)) {\n                    charWidth++;\n                }\n                if (charCode < 32) {\n                    sb.appendCharCode(9216 + charCode);\n                }\n                else {\n                    sb.appendCharCode(charCode);\n                }\n        }\n        charOffset += producedCharacters;\n        visibleColumn += charWidth;\n    }\n    sb.appendString('</span>');\n    charOffsets[lineContent.length] = charOffset;\n    visibleColumns[lineContent.length] = visibleColumn;\n    sb.appendString('</div>');\n    return [charOffsets, visibleColumns];\n}\nfunction readLineBreaks(range, lineDomNode, lineContent, charOffsets) {\n    if (lineContent.length <= 1) {\n        return null;\n    }\n    const spans = Array.prototype.slice.call(lineDomNode.children, 0);\n    const breakOffsets = [];\n    try {\n        discoverBreaks(range, spans, charOffsets, 0, null, lineContent.length - 1, null, breakOffsets);\n    }\n    catch (err) {\n        console.log(err);\n        return null;\n    }\n    if (breakOffsets.length === 0) {\n        return null;\n    }\n    breakOffsets.push(lineContent.length);\n    return breakOffsets;\n}\nfunction discoverBreaks(range, spans, charOffsets, low, lowRects, high, highRects, result) {\n    if (low === high) {\n        return;\n    }\n    lowRects = lowRects || readClientRect(range, spans, charOffsets[low], charOffsets[low + 1]);\n    highRects = highRects || readClientRect(range, spans, charOffsets[high], charOffsets[high + 1]);\n    if (Math.abs(lowRects[0].top - highRects[0].top) <= 0.1) {\n        // same line\n        return;\n    }\n    // there is at least one line break between these two offsets\n    if (low + 1 === high) {\n        // the two characters are adjacent, so the line break must be exactly between them\n        result.push(high);\n        return;\n    }\n    const mid = low + ((high - low) / 2) | 0;\n    const midRects = readClientRect(range, spans, charOffsets[mid], charOffsets[mid + 1]);\n    discoverBreaks(range, spans, charOffsets, low, lowRects, mid, midRects, result);\n    discoverBreaks(range, spans, charOffsets, mid, midRects, high, highRects, result);\n}\nfunction readClientRect(range, spans, startOffset, endOffset) {\n    range.setStart(spans[(startOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */) | 0].firstChild, startOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n    range.setEnd(spans[(endOffset / 16384 /* Constants.SPAN_MODULO_LIMIT */) | 0].firstChild, endOffset % 16384 /* Constants.SPAN_MODULO_LIMIT */);\n    return range.getClientRects();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ViewEventHandler } from '../../common/viewEventHandler.js';\nexport class DynamicViewOverlay extends ViewEventHandler {\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { editorDimmedLineNumber, editorLineNumbers } from '../../../common/core/editorColorRegistry.js';\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._readConfig();\n        this._lastCursorModelPosition = new Position(1, 1);\n        this._renderResult = null;\n        this._activeLineNumber = 1;\n        this._context.addEventHandler(this);\n    }\n    _readConfig() {\n        const options = this._context.configuration.options;\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        const lineNumbers = options.get(68 /* EditorOption.lineNumbers */);\n        this._renderLineNumbers = lineNumbers.renderType;\n        this._renderCustomLineNumbers = lineNumbers.renderFn;\n        this._renderFinalNewline = options.get(95 /* EditorOption.renderFinalNewline */);\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._lineNumbersLeft = layoutInfo.lineNumbersLeft;\n        this._lineNumbersWidth = layoutInfo.lineNumbersWidth;\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        this._readConfig();\n        return true;\n    }\n    onCursorStateChanged(e) {\n        const primaryViewPosition = e.selections[0].getPosition();\n        this._lastCursorModelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n        let shouldRender = false;\n        if (this._activeLineNumber !== primaryViewPosition.lineNumber) {\n            this._activeLineNumber = primaryViewPosition.lineNumber;\n            shouldRender = true;\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */ || this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            shouldRender = true;\n        }\n        return shouldRender;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return e.affectsLineNumber;\n    }\n    // --- end event handlers\n    _getLineRenderLineNumber(viewLineNumber) {\n        const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n        if (modelPosition.column !== 1) {\n            return '';\n        }\n        const modelLineNumber = modelPosition.lineNumber;\n        if (this._renderCustomLineNumbers) {\n            return this._renderCustomLineNumbers(modelLineNumber);\n        }\n        if (this._renderLineNumbers === 2 /* RenderLineNumbersType.Relative */) {\n            const diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n            if (diff === 0) {\n                return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n            }\n            return String(diff);\n        }\n        if (this._renderLineNumbers === 3 /* RenderLineNumbersType.Interval */) {\n            if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n                return String(modelLineNumber);\n            }\n            if (modelLineNumber % 10 === 0) {\n                return String(modelLineNumber);\n            }\n            const finalLineNumber = this._context.viewModel.getLineCount();\n            if (modelLineNumber === finalLineNumber) {\n                return String(modelLineNumber);\n            }\n            return '';\n        }\n        return String(modelLineNumber);\n    }\n    prepareRender(ctx) {\n        if (this._renderLineNumbers === 0 /* RenderLineNumbersType.Off */) {\n            this._renderResult = null;\n            return;\n        }\n        const lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const lineNoDecorations = this._context.viewModel.getDecorationsInViewport(ctx.visibleRange).filter(d => !!d.options.lineNumberClassName);\n        lineNoDecorations.sort((a, b) => Range.compareRangesUsingEnds(a.range, b.range));\n        let decorationStartIndex = 0;\n        const lineCount = this._context.viewModel.getLineCount();\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            let renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n            let extraClassNames = '';\n            // skip decorations whose end positions we've already passed\n            while (decorationStartIndex < lineNoDecorations.length && lineNoDecorations[decorationStartIndex].range.endLineNumber < lineNumber) {\n                decorationStartIndex++;\n            }\n            for (let i = decorationStartIndex; i < lineNoDecorations.length; i++) {\n                const { range, options } = lineNoDecorations[i];\n                if (range.startLineNumber <= lineNumber) {\n                    extraClassNames += ' ' + options.lineNumberClassName;\n                }\n            }\n            if (!renderLineNumber && !extraClassNames) {\n                output[lineIndex] = '';\n                continue;\n            }\n            if (lineNumber === lineCount && this._context.viewModel.getLineLength(lineNumber) === 0) {\n                // this is the last line\n                if (this._renderFinalNewline === 'off') {\n                    renderLineNumber = '';\n                }\n                if (this._renderFinalNewline === 'dimmed') {\n                    extraClassNames += ' dimmed-line-number';\n                }\n            }\n            if (lineNumber === this._activeLineNumber) {\n                extraClassNames += ' active-line-number';\n            }\n            output[lineIndex] = (`<div class=\"${LineNumbersOverlay.CLASS_NAME}${lineHeightClassName}${extraClassNames}\" style=\"left:${this._lineNumbersLeft}px;width:${this._lineNumbersWidth}px;\">${renderLineNumber}</div>`);\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nLineNumbersOverlay.CLASS_NAME = 'line-numbers';\nregisterThemingParticipant((theme, collector) => {\n    const editorLineNumbersColor = theme.getColor(editorLineNumbers);\n    const editorDimmedLineNumberColor = theme.getColor(editorDimmedLineNumber);\n    if (editorDimmedLineNumberColor) {\n        collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorDimmedLineNumberColor}; }`);\n    }\n    else if (editorLineNumbersColor) {\n        collector.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${editorLineNumbersColor.transparent(0.4)}; }`);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { FloatHorizontalRange } from '../../view/renderingContext.js';\nexport class RangeUtil {\n    static _createRange() {\n        if (!this._handyReadyRange) {\n            this._handyReadyRange = document.createRange();\n        }\n        return this._handyReadyRange;\n    }\n    static _detachRange(range, endNode) {\n        // Move range out of the span node, IE doesn't like having many ranges in\n        // the same spot and will act badly for lines containing dashes ('-')\n        range.selectNodeContents(endNode);\n    }\n    static _readClientRects(startElement, startOffset, endElement, endOffset, endNode) {\n        const range = this._createRange();\n        try {\n            range.setStart(startElement, startOffset);\n            range.setEnd(endElement, endOffset);\n            return range.getClientRects();\n        }\n        catch (e) {\n            // This is life ...\n            return null;\n        }\n        finally {\n            this._detachRange(range, endNode);\n        }\n    }\n    static _mergeAdjacentRanges(ranges) {\n        if (ranges.length === 1) {\n            // There is nothing to merge\n            return ranges;\n        }\n        ranges.sort(FloatHorizontalRange.compare);\n        const result = [];\n        let resultLen = 0;\n        let prev = ranges[0];\n        for (let i = 1, len = ranges.length; i < len; i++) {\n            const range = ranges[i];\n            if (prev.left + prev.width + 0.9 /* account for browser's rounding errors*/ >= range.left) {\n                prev.width = Math.max(prev.width, range.left + range.width - prev.left);\n            }\n            else {\n                result[resultLen++] = prev;\n                prev = range;\n            }\n        }\n        result[resultLen++] = prev;\n        return result;\n    }\n    static _createHorizontalRangesFromClientRects(clientRects, clientRectDeltaLeft, clientRectScale) {\n        if (!clientRects || clientRects.length === 0) {\n            return null;\n        }\n        // We go through FloatHorizontalRange because it has been observed in bi-di text\n        // that the clientRects are not coming in sorted from the browser\n        const result = [];\n        for (let i = 0, len = clientRects.length; i < len; i++) {\n            const clientRect = clientRects[i];\n            result[i] = new FloatHorizontalRange(Math.max(0, (clientRect.left - clientRectDeltaLeft) / clientRectScale), clientRect.width / clientRectScale);\n        }\n        return this._mergeAdjacentRanges(result);\n    }\n    static readHorizontalRanges(domNode, startChildIndex, startOffset, endChildIndex, endOffset, context) {\n        // Panic check\n        const min = 0;\n        const max = domNode.children.length - 1;\n        if (min > max) {\n            return null;\n        }\n        startChildIndex = Math.min(max, Math.max(min, startChildIndex));\n        endChildIndex = Math.min(max, Math.max(min, endChildIndex));\n        if (startChildIndex === endChildIndex && startOffset === endOffset && startOffset === 0 && !domNode.children[startChildIndex].firstChild) {\n            // We must find the position at the beginning of a <span>\n            // To cover cases of empty <span>s, avoid using a range and use the <span>'s bounding box\n            const clientRects = domNode.children[startChildIndex].getClientRects();\n            context.markDidDomLayout();\n            return this._createHorizontalRangesFromClientRects(clientRects, context.clientRectDeltaLeft, context.clientRectScale);\n        }\n        // If crossing over to a span only to select offset 0, then use the previous span's maximum offset\n        // Chrome is buggy and doesn't handle 0 offsets well sometimes.\n        if (startChildIndex !== endChildIndex) {\n            if (endChildIndex > 0 && endOffset === 0) {\n                endChildIndex--;\n                endOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        let startElement = domNode.children[startChildIndex].firstChild;\n        let endElement = domNode.children[endChildIndex].firstChild;\n        if (!startElement || !endElement) {\n            // When having an empty <span> (without any text content), try to move to the previous <span>\n            if (!startElement && startOffset === 0 && startChildIndex > 0) {\n                startElement = domNode.children[startChildIndex - 1].firstChild;\n                startOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n            if (!endElement && endOffset === 0 && endChildIndex > 0) {\n                endElement = domNode.children[endChildIndex - 1].firstChild;\n                endOffset = 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */;\n            }\n        }\n        if (!startElement || !endElement) {\n            return null;\n        }\n        startOffset = Math.min(startElement.textContent.length, Math.max(0, startOffset));\n        endOffset = Math.min(endElement.textContent.length, Math.max(0, endOffset));\n        const clientRects = this._readClientRects(startElement, startOffset, endElement, endOffset, context.endNode);\n        context.markDidDomLayout();\n        return this._createHorizontalRangesFromClientRects(clientRects, context.clientRectDeltaLeft, context.clientRectScale);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { RangeUtil } from './rangeUtil.js';\nimport { FloatHorizontalRange, VisibleRanges } from '../../view/renderingContext.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine, LineRange, DomPosition } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nconst canUseFastRenderedViewLine = (function () {\n    if (platform.isNative) {\n        // In VSCode we know very well when the zoom level changes\n        return true;\n    }\n    if (platform.isLinux || browser.isFirefox || browser.isSafari) {\n        // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n        // --\n        // Even though we read character widths correctly, having read them at a specific zoom level\n        // does not mean they are the same at the current zoom level.\n        // --\n        // This could be improved if we ever figure out how to get an event when browsers zoom,\n        // but until then we have to stick with reading client rects.\n        // --\n        // The same has been observed with Firefox on Windows7\n        // --\n        // The same has been oversved with Safari\n        return false;\n    }\n    return true;\n})();\nlet monospaceAssumptionsAreValid = true;\nexport class ViewLineOptions {\n    constructor(config, themeType) {\n        this.themeType = themeType;\n        const options = config.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const experimentalWhitespaceRendering = options.get(38 /* EditorOption.experimentalWhitespaceRendering */);\n        if (experimentalWhitespaceRendering === 'off') {\n            this.renderWhitespace = options.get(99 /* EditorOption.renderWhitespace */);\n        }\n        else {\n            // whitespace is rendered in a different layer\n            this.renderWhitespace = 'none';\n        }\n        this.renderControlCharacters = options.get(94 /* EditorOption.renderControlCharacters */);\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.useMonospaceOptimizations = (fontInfo.isMonospace\n            && !options.get(33 /* EditorOption.disableMonospaceOptimizations */));\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this.stopRenderingLineAfter = options.get(117 /* EditorOption.stopRenderingLineAfter */);\n        this.fontLigatures = options.get(51 /* EditorOption.fontLigatures */);\n    }\n    equals(other) {\n        return (this.themeType === other.themeType\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.fontLigatures === other.fontLigatures);\n    }\n}\nexport class ViewLine {\n    constructor(options) {\n        this._options = options;\n        this._isMaybeInvalid = true;\n        this._renderedViewLine = null;\n    }\n    // --- begin IVisibleLineData\n    getDomNode() {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            return this._renderedViewLine.domNode.domNode;\n        }\n        return null;\n    }\n    setDomNode(domNode) {\n        if (this._renderedViewLine) {\n            this._renderedViewLine.domNode = createFastDomNode(domNode);\n        }\n        else {\n            throw new Error('I have no rendered view line to set the dom node to...');\n        }\n    }\n    onContentChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onTokensChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onDecorationsChanged() {\n        this._isMaybeInvalid = true;\n    }\n    onOptionsChanged(newOptions) {\n        this._isMaybeInvalid = true;\n        this._options = newOptions;\n    }\n    onSelectionChanged() {\n        if (isHighContrast(this._options.themeType) || this._options.renderWhitespace === 'selection') {\n            this._isMaybeInvalid = true;\n            return true;\n        }\n        return false;\n    }\n    renderLine(lineNumber, deltaTop, lineHeight, viewportData, sb) {\n        if (this._isMaybeInvalid === false) {\n            // it appears that nothing relevant has changed\n            return false;\n        }\n        this._isMaybeInvalid = false;\n        const lineData = viewportData.getViewLineRenderingData(lineNumber);\n        const options = this._options;\n        const actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\n        // Only send selection information when needed for rendering whitespace\n        let selectionsOnLine = null;\n        if (isHighContrast(options.themeType) || this._options.renderWhitespace === 'selection') {\n            const selections = viewportData.selections;\n            for (const selection of selections) {\n                if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                    // Selection does not intersect line\n                    continue;\n                }\n                const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                if (startColumn < endColumn) {\n                    if (isHighContrast(options.themeType)) {\n                        actualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', 0 /* InlineDecorationType.Regular */));\n                    }\n                    if (this._options.renderWhitespace === 'selection') {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n        }\n        const renderLineInput = new RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, lineData.startVisibleColumn, options.spaceWidth, options.middotWidth, options.wsmiddotWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures !== EditorFontLigatures.OFF, selectionsOnLine);\n        if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n            // no need to do anything, we have the same render input\n            return false;\n        }\n        sb.appendString('<div style=\"top:');\n        sb.appendString(String(deltaTop));\n        sb.appendString('px;height:');\n        sb.appendString(String(lineHeight));\n        sb.appendString('px;\" class=\"');\n        sb.appendString(ViewLine.CLASS_NAME);\n        sb.appendString('\">');\n        const output = renderViewLine(renderLineInput, sb);\n        sb.appendString('</div>');\n        let renderedViewLine = null;\n        if (monospaceAssumptionsAreValid && canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === 0 /* ForeignElementType.None */) {\n            renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\n        }\n        if (!renderedViewLine) {\n            renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\n        }\n        this._renderedViewLine = renderedViewLine;\n        return true;\n    }\n    layoutLine(lineNumber, deltaTop, lineHeight) {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            this._renderedViewLine.domNode.setTop(deltaTop);\n            this._renderedViewLine.domNode.setHeight(lineHeight);\n        }\n    }\n    // --- end IVisibleLineData\n    getWidth(context) {\n        if (!this._renderedViewLine) {\n            return 0;\n        }\n        return this._renderedViewLine.getWidth(context);\n    }\n    getWidthIsFast() {\n        if (!this._renderedViewLine) {\n            return true;\n        }\n        return this._renderedViewLine.getWidthIsFast();\n    }\n    needsMonospaceFontCheck() {\n        if (!this._renderedViewLine) {\n            return false;\n        }\n        return (this._renderedViewLine instanceof FastRenderedViewLine);\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this._renderedViewLine) {\n            return monospaceAssumptionsAreValid;\n        }\n        if (this._renderedViewLine instanceof FastRenderedViewLine) {\n            return this._renderedViewLine.monospaceAssumptionsAreValid();\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    onMonospaceAssumptionsInvalidated() {\n        if (this._renderedViewLine && this._renderedViewLine instanceof FastRenderedViewLine) {\n            this._renderedViewLine = this._renderedViewLine.toSlowRenderedLine();\n        }\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this._renderedViewLine) {\n            return null;\n        }\n        startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n        endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n        const stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter;\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1 && endColumn > stopRenderingLineAfter + 1) {\n            // This range is obviously not visible\n            return new VisibleRanges(true, [new FloatHorizontalRange(this.getWidth(context), 0)]);\n        }\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter + 1) {\n            startColumn = stopRenderingLineAfter + 1;\n        }\n        if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter + 1) {\n            endColumn = stopRenderingLineAfter + 1;\n        }\n        const horizontalRanges = this._renderedViewLine.getVisibleRangesForRange(lineNumber, startColumn, endColumn, context);\n        if (horizontalRanges && horizontalRanges.length > 0) {\n            return new VisibleRanges(false, horizontalRanges);\n        }\n        return null;\n    }\n    getColumnOfNodeOffset(spanNode, offset) {\n        if (!this._renderedViewLine) {\n            return 1;\n        }\n        return this._renderedViewLine.getColumnOfNodeOffset(spanNode, offset);\n    }\n}\nViewLine.CLASS_NAME = 'view-line';\n/**\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\n */\nclass FastRenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping) {\n        this._cachedWidth = -1;\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        const keyColumnCount = Math.floor(renderLineInput.lineContent.length / 300 /* Constants.MaxMonospaceDistance */);\n        if (keyColumnCount > 0) {\n            this._keyColumnPixelOffsetCache = new Float32Array(keyColumnCount);\n            for (let i = 0; i < keyColumnCount; i++) {\n                this._keyColumnPixelOffsetCache[i] = -1;\n            }\n        }\n        else {\n            this._keyColumnPixelOffsetCache = null;\n        }\n        this._characterMapping = characterMapping;\n        this._charWidth = renderLineInput.spaceWidth;\n    }\n    getWidth(context) {\n        if (!this.domNode || this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(this._characterMapping.length);\n            return Math.round(this._charWidth * horizontalOffset);\n        }\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n            context === null || context === void 0 ? void 0 : context.markDidDomLayout();\n        }\n        return this._cachedWidth;\n    }\n    getWidthIsFast() {\n        return (this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) || this._cachedWidth !== -1;\n    }\n    monospaceAssumptionsAreValid() {\n        if (!this.domNode) {\n            return monospaceAssumptionsAreValid;\n        }\n        if (this.input.lineContent.length < 300 /* Constants.MaxMonospaceDistance */) {\n            const expectedWidth = this.getWidth(null);\n            const actualWidth = this.domNode.domNode.firstChild.offsetWidth;\n            if (Math.abs(expectedWidth - actualWidth) >= 2) {\n                // more than 2px off\n                console.warn(`monospace assumptions have been violated, therefore disabling monospace optimizations!`);\n                monospaceAssumptionsAreValid = false;\n            }\n        }\n        return monospaceAssumptionsAreValid;\n    }\n    toSlowRenderedLine() {\n        return createRenderedLine(this.domNode, this.input, this._characterMapping, false, 0 /* ForeignElementType.None */);\n    }\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        const startPosition = this._getColumnPixelOffset(lineNumber, startColumn, context);\n        const endPosition = this._getColumnPixelOffset(lineNumber, endColumn, context);\n        return [new FloatHorizontalRange(startPosition, endPosition - startPosition)];\n    }\n    _getColumnPixelOffset(lineNumber, column, context) {\n        if (column <= 300 /* Constants.MaxMonospaceDistance */) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            return this._charWidth * horizontalOffset;\n        }\n        const keyColumnOrdinal = Math.floor((column - 1) / 300 /* Constants.MaxMonospaceDistance */) - 1;\n        const keyColumn = (keyColumnOrdinal + 1) * 300 /* Constants.MaxMonospaceDistance */ + 1;\n        let keyColumnPixelOffset = -1;\n        if (this._keyColumnPixelOffsetCache) {\n            keyColumnPixelOffset = this._keyColumnPixelOffsetCache[keyColumnOrdinal];\n            if (keyColumnPixelOffset === -1) {\n                keyColumnPixelOffset = this._actualReadPixelOffset(lineNumber, keyColumn, context);\n                this._keyColumnPixelOffsetCache[keyColumnOrdinal] = keyColumnPixelOffset;\n            }\n        }\n        if (keyColumnPixelOffset === -1) {\n            // Could not read actual key column pixel offset\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            return this._charWidth * horizontalOffset;\n        }\n        const keyColumnHorizontalOffset = this._characterMapping.getHorizontalOffset(keyColumn);\n        const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n        return keyColumnPixelOffset + this._charWidth * (horizontalOffset - keyColumnHorizontalOffset);\n    }\n    _getReadingTarget(myDomNode) {\n        return myDomNode.domNode.firstChild;\n    }\n    _actualReadPixelOffset(lineNumber, column, context) {\n        if (!this.domNode) {\n            return -1;\n        }\n        const domPosition = this._characterMapping.getDomPosition(column);\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(this.domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        return r[0].left;\n    }\n    getColumnOfNodeOffset(spanNode, offset) {\n        return getColumnOfNodeOffset(this._characterMapping, spanNode, offset);\n    }\n}\n/**\n * Every time we render a line, we save what we have rendered in an instance of this class.\n */\nclass RenderedViewLine {\n    constructor(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n        this._containsForeignElements = containsForeignElements;\n        this._cachedWidth = -1;\n        this._pixelOffsetCache = null;\n        if (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\n            this._pixelOffsetCache = new Float32Array(Math.max(2, this._characterMapping.length + 1));\n            for (let column = 0, len = this._characterMapping.length; column <= len; column++) {\n                this._pixelOffsetCache[column] = -1;\n            }\n        }\n    }\n    // --- Reading from the DOM methods\n    _getReadingTarget(myDomNode) {\n        return myDomNode.domNode.firstChild;\n    }\n    /**\n     * Width of the line in pixels\n     */\n    getWidth(context) {\n        if (!this.domNode) {\n            return 0;\n        }\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth;\n            context === null || context === void 0 ? void 0 : context.markDidDomLayout();\n        }\n        return this._cachedWidth;\n    }\n    getWidthIsFast() {\n        if (this._cachedWidth === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Visible ranges for a model range\n     */\n    getVisibleRangesForRange(lineNumber, startColumn, endColumn, context) {\n        if (!this.domNode) {\n            return null;\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const startOffset = this._readPixelOffset(this.domNode, lineNumber, startColumn, context);\n            if (startOffset === -1) {\n                return null;\n            }\n            const endOffset = this._readPixelOffset(this.domNode, lineNumber, endColumn, context);\n            if (endOffset === -1) {\n                return null;\n            }\n            return [new FloatHorizontalRange(startOffset, endOffset - startOffset)];\n        }\n        return this._readVisibleRangesForRange(this.domNode, lineNumber, startColumn, endColumn, context);\n    }\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        if (startColumn === endColumn) {\n            const pixelOffset = this._readPixelOffset(domNode, lineNumber, startColumn, context);\n            if (pixelOffset === -1) {\n                return null;\n            }\n            else {\n                return [new FloatHorizontalRange(pixelOffset, 0)];\n            }\n        }\n        else {\n            return this._readRawVisibleRangesForRange(domNode, startColumn, endColumn, context);\n        }\n    }\n    _readPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            if (this._containsForeignElements === 0 /* ForeignElementType.None */) {\n                // We can assume the line is really empty\n                return 0;\n            }\n            if (this._containsForeignElements === 2 /* ForeignElementType.After */) {\n                // We have foreign elements after the (empty) line\n                return 0;\n            }\n            if (this._containsForeignElements === 1 /* ForeignElementType.Before */) {\n                // We have foreign elements before the (empty) line\n                return this.getWidth(context);\n            }\n            // We have foreign elements before & after the (empty) line\n            const readingTarget = this._getReadingTarget(domNode);\n            if (readingTarget.firstChild) {\n                context.markDidDomLayout();\n                return readingTarget.firstChild.offsetWidth;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            const cachedPixelOffset = this._pixelOffsetCache[column];\n            if (cachedPixelOffset !== -1) {\n                return cachedPixelOffset;\n            }\n            const result = this._actualReadPixelOffset(domNode, lineNumber, column, context);\n            this._pixelOffsetCache[column] = result;\n            return result;\n        }\n        return this._actualReadPixelOffset(domNode, lineNumber, column, context);\n    }\n    _actualReadPixelOffset(domNode, lineNumber, column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), 0, 0, 0, 0, context);\n            if (!r || r.length === 0) {\n                return -1;\n            }\n            return r[0].left;\n        }\n        if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0 /* ForeignElementType.None */) {\n            // This branch helps in the case of whitespace only lines which have a width set\n            return this.getWidth(context);\n        }\n        const domPosition = this._characterMapping.getDomPosition(column);\n        const r = RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), domPosition.partIndex, domPosition.charIndex, domPosition.partIndex, domPosition.charIndex, context);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        const result = r[0].left;\n        if (this.input.isBasicASCII) {\n            const horizontalOffset = this._characterMapping.getHorizontalOffset(column);\n            const expectedResult = Math.round(this.input.spaceWidth * horizontalOffset);\n            if (Math.abs(expectedResult - result) <= 1) {\n                return expectedResult;\n            }\n        }\n        return result;\n    }\n    _readRawVisibleRangesForRange(domNode, startColumn, endColumn, context) {\n        if (startColumn === 1 && endColumn === this._characterMapping.length) {\n            // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n            return [new FloatHorizontalRange(0, this.getWidth(context))];\n        }\n        const startDomPosition = this._characterMapping.getDomPosition(startColumn);\n        const endDomPosition = this._characterMapping.getDomPosition(endColumn);\n        return RangeUtil.readHorizontalRanges(this._getReadingTarget(domNode), startDomPosition.partIndex, startDomPosition.charIndex, endDomPosition.partIndex, endDomPosition.charIndex, context);\n    }\n    /**\n     * Returns the column for the text found at a specific offset inside a rendered dom node\n     */\n    getColumnOfNodeOffset(spanNode, offset) {\n        return getColumnOfNodeOffset(this._characterMapping, spanNode, offset);\n    }\n}\nclass WebKitRenderedViewLine extends RenderedViewLine {\n    _readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context) {\n        const output = super._readVisibleRangesForRange(domNode, lineNumber, startColumn, endColumn, context);\n        if (!output || output.length === 0 || startColumn === endColumn || (startColumn === 1 && endColumn === this._characterMapping.length)) {\n            return output;\n        }\n        // WebKit is buggy and returns an expanded range (to contain words in some cases)\n        // The last client rect is enlarged (I think)\n        if (!this.input.containsRTL) {\n            // This is an attempt to patch things up\n            // Find position of last column\n            const endPixelOffset = this._readPixelOffset(domNode, lineNumber, endColumn, context);\n            if (endPixelOffset !== -1) {\n                const lastRange = output[output.length - 1];\n                if (lastRange.left < endPixelOffset) {\n                    // Trim down the width of the last visible range to not go after the last column's position\n                    lastRange.width = endPixelOffset - lastRange.left;\n                }\n            }\n        }\n        return output;\n    }\n}\nconst createRenderedLine = (function () {\n    if (browser.isWebKit) {\n        return createWebKitRenderedLine;\n    }\n    return createNormalRenderedLine;\n})();\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\nexport function getColumnOfNodeOffset(characterMapping, spanNode, offset) {\n    const spanNodeTextContentLength = spanNode.textContent.length;\n    let spanIndex = -1;\n    while (spanNode) {\n        spanNode = spanNode.previousSibling;\n        spanIndex++;\n    }\n    return characterMapping.getColumn(new DomPosition(spanIndex, offset), spanNodeTextContentLength);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './margin.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nexport class Margin extends ViewPart {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._domNode = createFastDomNode(document.createElement('div'));\n        this._domNode.setClassName(Margin.OUTER_CLASS_NAME);\n        this._domNode.setPosition('absolute');\n        this._domNode.setAttribute('role', 'presentation');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._glyphMarginBackgroundDomNode = createFastDomNode(document.createElement('div'));\n        this._glyphMarginBackgroundDomNode.setClassName(Margin.CLASS_NAME);\n        this._domNode.appendChild(this._glyphMarginBackgroundDomNode);\n    }\n    dispose() {\n        super.dispose();\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._canUseLayerHinting = !options.get(32 /* EditorOption.disableLayerHinting */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        return true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollTopChanged;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(ctx) {\n        this._domNode.setLayerHinting(this._canUseLayerHinting);\n        this._domNode.setContain('strict');\n        const adjustedScrollTop = ctx.scrollTop - ctx.bigNumbersDelta;\n        this._domNode.setTop(-adjustedScrollTop);\n        const height = Math.min(ctx.scrollHeight, 1000000);\n        this._domNode.setHeight(height);\n        this._domNode.setWidth(this._contentLeft);\n        this._glyphMarginBackgroundDomNode.setLeft(this._glyphMarginLeft);\n        this._glyphMarginBackgroundDomNode.setWidth(this._glyphMarginWidth);\n        this._glyphMarginBackgroundDomNode.setHeight(height);\n    }\n}\nMargin.CLASS_NAME = 'glyph-margin';\nMargin.OUTER_CLASS_NAME = 'margin';\n"],"names":["BlockDecorations","ViewPart","constructor","context","super","this","blocks","contentWidth","contentLeft","domNode","createFastDomNode","document","createElement","setAttribute","setClassName","update","didChange","layoutInfo","_context","configuration","options","get","newContentWidth","verticalScrollbarWidth","newContentLeft","dispose","onConfigurationChanged","e","onScrollChanged","scrollTopChanged","scrollLeftChanged","onDecorationsChanged","onZonesChanged","prepareRender","ctx","render","_a","count","decorations","getDecorationsInViewport","decoration","blockClassName","top","bottom","block","appendChild","blockIsAfterEnd","getVerticalOffsetAfterLineNumber","range","endLineNumber","getVerticalOffsetForLineNumber","startLineNumber","isEmpty","blockDoesNotCollapse","paddingTop","paddingRight","paddingBottom","paddingLeft","blockPadding","setLeft","setWidth","setTop","scrollTop","setHeight","i","length","remove","ViewContentWidgets","viewDomNode","_viewDomNode","_widgets","PartFingerprints","write","setPosition","overflowingContentWidgetsDomNode","keys","Object","widgetId","onFlushed","onLineMappingChanged","_updateAnchorsViewPositions","onLinesChanged","onLinesDeleted","onLinesInserted","updateAnchorViewPosition","addWidget","_widget","myWidget","Widget","id","allowEditorOverflow","setShouldRender","setWidgetPosition","widget","primaryAnchor","secondaryAnchor","preference","affinity","getId","removeWidget","hasOwnProperty","parentNode","removeChild","removeAttribute","shouldSuppressMouseDownOnWidget","suppressMouseDown","onBeforeRender","viewportData","actual","_primaryAnchor","PositionPair","_secondaryAnchor","_actual","getDomNode","_fixedOverflowWidgets","_contentWidth","_contentLeft","_lineHeight","_affinity","_preference","_cachedDomNodeOffsetWidth","_cachedDomNodeOffsetHeight","_maxWidth","_getMaxWidth","_isVisible","_renderData","setDisplay","setVisibility","setMaxWidth","hasChanged","_setPosition","modelPosition","getValidPositionPair","position","viewModel","validModelPosition","model","validatePosition","coordinatesConverter","modelPositionIsVisible","viewPosition","convertModelPositionToViewPosition","undefined","elDocument","ownerDocument","elWindow","defaultView","innerWidth","documentElement","offsetWidth","body","_layoutBoxInViewport","anchor","width","height","aboveLineTop","heightAvailableAboveLine","underLineTop","aboveTop","fitsAbove","belowTop","fitsBelow","viewportHeight","left","scrollLeft","viewportWidth","_layoutHorizontalSegmentInPage","windowSize","domNodePosition","MIN_LIMIT","Math","max","MAX_LIMIT","min","absoluteLeft","scrollX","delta","_layoutBoxInPage","_b","dom","absoluteAboveTop","scrollY","absoluteBelowTop","absoluteAboveLeft","_prepareRenderWidgetAtExactPositionOverflowing","topLeft","Coordinate","_getAnchorsCoordinates","primary","getCoordinates","secondary","lineNumber","lineHeight","horizontalPosition","visibleRangeForPosition","column","AnchorCoordinate","_reduceAnchorCoordinates","fontInfo","typicalFullwidthCharacterWidth","_prepareRenderWidget","preferredDimensions","beforeRender","safeInvoke","clientRect","getBoundingClientRect","round","placement","pass","pref","coordinate","afterRender","bigNumbersDelta","_coordinateBrand","_anchorCoordinateBrand","fn","thisArg","_len","arguments","args","Array","_key","call","AbstractLineHighlightOverlay","DynamicViewOverlay","_renderLineHighlight","_renderLineHighlightOnlyWhenFocus","_wordWrap","isViewportWrapping","_selectionIsEmpty","_focused","_cursorLineNumbers","_selections","Selection","addEventHandler","removeEventHandler","_readFromSelections","lineNumbers","Set","selection","add","positionLineNumber","cursorsLineNumbers","from","sort","a","b","arrays","selectionIsEmpty","every","s","onThemeChanged","onCursorStateChanged","selections","scrollWidthChanged","onFocusChanged","isFocused","_shouldRenderThis","visibleStartLineNumber","visibleRange","visibleEndLineNumber","renderData","renderedLineWrapped","_renderOne","cursorLineNumber","modelLineNumber","convertViewPositionToModelPosition","Position","firstViewLineNumber","lastViewLineNumber","getLineMaxColumn","firstLine","lastLine","renderedLineExact","lineIndex","_shouldRenderInMargin","_shouldRenderInContent","CurrentLineHighlightOverlay","exact","className","concat","scrollWidth","_shouldRenderOther","CurrentLineMarginHighlightOverlay","registerThemingParticipant","theme","collector","lineHighlight","getColor","editorLineHighlight","addRule","isTransparent","defines","editorLineHighlightBorder","lineHighlightBorder","isHighContrast","type","DecorationsOverlay","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_renderResult","_decorations","decorationsLen","len","d","zIndex","aClassName","bClassName","Range","compareRangesUsingStarts","output","_renderWholeLineDecorations","_renderNormalDecorations","lenI","isWholeLine","decorationOutput","j","prevClassName","prevShowIfCollapsed","prevRange","prevShouldFillLineOnLineBreak","showIfCollapsed","Boolean","endColumn","startColumn","areIntersectingOrTouching","plusRange","_renderNormalDecoration","shouldFillLineOnLineBreak","linesVisibleRanges","linesVisibleRangesForRange","lenJ","lineVisibleRanges","outsideRenderedLine","ranges","singleVisibleRange","center","HorizontalRange","k","lenK","expandToLeft","continuesOnNextLine","String","EditorScrollbar","linesContent","overflowGuardDomNode","scrollbar","mouseWheelScrollSensitivity","fastScrollSensitivity","scrollPredominantAxis","scrollbarOptions","listenOnDomNode","getThemeTypeSelector","useShadows","lazyRender","vertical","horizontal","verticalHasArrows","horizontalHasArrows","verticalScrollbarSize","verticalSliderSize","horizontalScrollbarSize","horizontalSliderSize","handleMouseWheel","alwaysConsumeMouseWheel","arrowSize","scrollByPage","_register","SmoothScrollableElement","viewLayout","getScrollable","scrollbarDomNode","_setLayout","onBrowserDesperateReveal","lookAtScrollTop","lookAtScrollLeft","newScrollPosition","deltaTop","getCurrentScrollTop","deltaLeft","getCurrentScrollLeft","setScrollPosition","side","minimap","minimapWidth","getOverviewRulerLayoutInfo","delegateVerticalScrollbarPointerDown","browserEvent","delegateScrollFromMouseWheelEvent","newOpts","updateOptions","updateClassName","renderNow","DecorationToRender","tooltip","_decorationToRenderBrand","LineDecorationToRender","VisibleLineDecorationsToRender","push","getDecorations","DedupOverlay","_render","prevEndLineIndex","startLineIndex","endLineIndex","GlyphMarginWidgets","_glyphMargin","_glyphMarginLeft","glyphMarginLeft","_glyphMarginWidth","glyphMarginWidth","_glyphMarginDecorationLaneCount","glyphMarginDecorationLaneCount","_managedDomNodes","_decorationGlyphsToRender","getWidgets","values","getPosition","renderInfo","lane","equalsRange","_collectDecorationBasedGlyphRenderRequest","requests","_c","glyphMarginClassName","glyphMargin","GlyphMarginLane","Center","laneIndex","glyphLanes","getLanesAtLine","indexOf","DecorationBasedGlyphRenderRequest","_collectWidgetBasedGlyphRenderRequest","convertModelRangeToViewRange","lift","widgetLineNumber","WidgetBasedGlyphRenderRequest","_collectSortedGlyphRenderRequests","ArrayQueue","decorationGlyphsToRender","first","peek","requestsAtLocation","takeWhile","el","winner","classNames","request","accept","join","pop","relativeVerticalOffset","dec","combinedClassName","DecorationBasedGlyph","IndentGuidesOverlay","_primaryPosition","wrappingInfo","_spaceWidth","spaceWidth","_maxIndentLeft","wrappingColumn","_bracketPairGuideOptions","newPosition","equals","onLanguageConfigurationChanged","_d","indentation","bracketPairs","activeCursorPosition","indents","getGuidesByLine","getLineCount","indent","result","leftOffset","guide","visibleColumn","horizontalLine","bracketGuides","getBracketGuidesInRangeByLine","highlightActive","highlightActiveBracketPair","horizontalGuides","bracketPairsHorizontal","HorizontalGuidesState","Enabled","EnabledForActive","Disabled","includeInactive","indentGuides","getLinesIndentGuides","activeIndentStartLineNumber","activeIndentEndLineNumber","activeIndentLevel","highlightActiveIndentation","activeIndentInfo","getActiveIndentGuide","indentSize","getOptions","lineGuides","bracketGuidesInLine","bracketGuidesInLineQueue","indentGuidesInLine","indentLvl","indentGuide","isActive","g","peeked","IndentGuide","transparentToUndefined","color","colors","bracketColor","editorBracketHighlightingForeground1","guideColor","editorBracketPairGuideBackground1","guideColorActive","editorBracketPairGuideActiveBackground1","editorBracketHighlightingForeground2","editorBracketPairGuideBackground2","editorBracketPairGuideActiveBackground2","editorBracketHighlightingForeground3","editorBracketPairGuideBackground3","editorBracketPairGuideActiveBackground3","editorBracketHighlightingForeground4","editorBracketPairGuideBackground4","editorBracketPairGuideActiveBackground4","editorBracketHighlightingForeground5","editorBracketPairGuideBackground5","editorBracketPairGuideActiveBackground5","editorBracketHighlightingForeground6","editorBracketPairGuideBackground6","editorBracketPairGuideActiveBackground6","colorProvider","BracketPairGuidesClassNames","indentColors","indentColor","editorIndentGuide1","indentColorActive","editorActiveIndentGuide1","editorIndentGuide2","editorActiveIndentGuide2","editorIndentGuide3","editorActiveIndentGuide3","editorIndentGuide4","editorActiveIndentGuide4","editorIndentGuide5","editorActiveIndentGuide5","editorIndentGuide6","editorActiveIndentGuide6","colorValues","map","c","effectiveGuideColor","transparent","effectiveGuideColorActive","filter","isDefined","indentColorValues","effectiveIndentColor","effectiveIndentColorActive","level","getInlineClassNameOfLevel","replace","activeClassName","DomReadingContext","didDomLayout","_didDomLayout","readClientRect","_clientRectRead","rect","_domNode","markDidDomLayout","_clientRectDeltaLeft","_clientRectScale","clientRectDeltaLeft","clientRectScale","endNode","LastRenderedData","_currentVisibleRange","getCurrentVisibleRange","setCurrentVisibleRange","currentVisibleRange","HorizontalRevealRangeRequest","minimalReveal","startScrollTop","stopScrollTop","scrollType","minLineNumber","maxLineNumber","HorizontalRevealSelectionsRequest","ViewLines","_linesContent","_textRangeRestingSpot","_visibleLines","VisibleLinesCollection","conf","_isViewportWrapping","_revealHorizontalRightPadding","_cursorSurroundingLines","_cursorSurroundingLinesStyle","_canUseLayerHinting","_viewLineOptions","ViewLineOptions","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","applyFontInfo","_maxLineWidth","_asyncUpdateLineWidths","RunOnceScheduler","_updateLineWidthsSlow","_asyncCheckMonospaceFontAssumptions","_checkMonospaceFontAssumptions","_lastRenderedData","_horizontalRevealRequest","_stickyScrollEnabled","enabled","_maxNumberStickyLines","maxLineCount","createVisibleLine","ViewLine","_onOptionsMaybeChanged","newViewLineOptions","getStartLineNumber","getEndLineNumber","getVisibleLine","onOptionsChanged","rendStartLineNumber","rendEndLineNumber","r","onSelectionChanged","shouldRender","onRevealRangeRequest","desiredScrollTop","_computeScrollTopToRevealRange","getFutureViewport","source","verticalType","validateScrollPosition","revealHorizontal","abs","onTokensChanged","setMaxLineWidth","getPositionFromDOMInfo","spanNode","offset","viewLineDomNode","_getViewLineDomNode","_getLineNumberFor","getColumnOfNodeOffset","minColumn","getLineMinColumn","node","nodeType","CLASS_NAME","parentElement","getLineWidth","getWidth","_updateLineWidthsSlowIfDomDidLayout","_range","includeNewLines","originalEndLineNumber","intersectRanges","visibleRanges","visibleRangesLen","domReadingContext","nextLineModelLineNumber","continuesInNextLine","visibleRangesForLine","getVisibleRangesForRange","currentLineModelLineNumber","LineVisibleRanges","_visibleRangesForLineRange","HorizontalPosition","_updateLineWidthsFast","_updateLineWidths","isScheduled","cancel","fast","localMaxLineWidth","allWidthsComputed","visibleLine","getWidthIsFast","_ensureMaxLineWidth","longestLineNumber","longestWidth","needsMonospaceFontCheck","lineWidth","monospaceAssumptionsAreValid","onMonospaceAssumptionsInvalidated","Error","renderText","renderLines","getScrollWidth","getScrollHeight","horizontalRevealRequest","onDidRender","newScrollLeft","_computeScrollLeftToReveal","maxHorizontalOffset","schedule","platform","setLayerHinting","setContain","adjustedScrollTop","iLineWidth","ceil","viewport","viewportStartY","viewportEndY","boxIsSingleRange","boxStartY","boxEndY","newScrollTop","minScrollTop","boxMiddleY","_computeMinimumScrolling","getCurrentViewport","viewportStartX","viewportEndX","boxStartX","boxEndX","HORIZONTAL_EXTRA_PX","viewportStart","viewportEnd","boxStart","boxEnd","revealAtStart","revealAtEnd","viewportLength","LinesDecorationsOverlay","_decorationsLeft","decorationsLeft","_decorationsWidth","decorationsWidth","_getDecorations","rLen","linesDecorationsClassName","linesDecorationsTooltip","firstLineDecorationClassName","toRender","common","toString","lineOutput","addition","MarginViewLineDecorationsOverlay","marginClassName","allCharCodes","v","MinimapCharRenderer","charData","scale","_minimapCharRendererBrand","charDataNormal","soften","charDataLight","input","ratio","Uint8ClampedArray","toUint8","renderChar","target","dx","dy","chCode","foregroundAlpha","backgroundColor","backgroundAlpha","fontScale","useLighterFont","force1pxHeight","charWidth","charHeight","renderHeight","console","warn","charIndex","getCharIndex","destWidth","backgroundR","backgroundG","backgroundB","deltaR","deltaG","deltaB","destAlpha","dest","data","sourceOffset","row","y","x","blockRenderChar","colorR","colorG","colorB","charTable","A","B","C","D","E","F","decodeData","str","prebakedMiniMaps","createSingleCallFunction","MinimapCharRendererFactory","create","fontFamily","lastCreated","lastFontFamily","factory","createFromSampleData","createSampleData","canvas","getContext","style","fillStyle","font","textBaseline","code","fillText","fromCharCode","getImageData","_downsample","_downsampleChar","destOffset","targetIndex","brightest","sourceY1","sourceY2","sourceX1","sourceX2","value","samples","sy","sourceRow","floor","yBalance","sx","xBalance","sourceIndex","weight","final","pixelsPerCharacter","resultLen","resultOffset","adjust","MinimapOptions","tokensColorTracker","pixelRatio","minimapLayout","minimapOpts","renderMinimap","size","minimapHeightIsEditorHeight","scrollBeyondLastLine","showSlider","autohide","minimapLeft","minimapHeight","canvasInnerWidth","minimapCanvasInnerWidth","canvasInnerHeight","minimapCanvasInnerHeight","canvasOuterWidth","minimapCanvasOuterWidth","canvasOuterHeight","minimapCanvasOuterHeight","isSampling","minimapIsSampling","editorHeight","minimapScale","minimapLineHeight","minimapCharWidth","sectionHeaderFontFamily","DEFAULT_FONT_FAMILY","sectionHeaderFontSize","sectionHeaderFontColor","_getSectionHeaderColor","charRenderer","defaultBackgroundColor","_getMinimapBackground","_getMinimapForegroundOpacity","themeColor","minimapBackground","RGBA8","rgba","minimapForegroundOpacity","_clamp","defaultForegroundColor","editorForeground","other","MinimapLayout","scrollHeight","sliderNeeded","_computedSliderRatio","sliderTop","sliderHeight","topPaddingLineCount","getDesiredScrollTopFromDelta","getDesiredScrollTopFromTouchLocation","pageY","intersectWithViewport","getYForLineNumber","viewportStartLineNumber","viewportEndLineNumber","viewportStartLineNumberVerticalOffset","viewportContainsWhitespaceGaps","lineCount","realLineCount","previousLayout","minimapLinesFitting","logicalScrollHeight","maxMinimapSliderTop","computedSliderRatio","maxLinesFitting","viewportLineCount","expectedViewportLineCount","extraLinesAtTheTop","extraLinesAtTheBottom","consideringStartLineNumber","partialLine","sliderTopAligned","MinimapLine","onContentChanged","INVALID","RenderData","renderedLayout","imageData","lines","_imageData","_renderedLines","RenderedLinesCollection","_set","linesEquals","layout","scrollEquals","_get","tmp","rendLineNumberStart","changeFromLineNumber","changeCount","deleteFromLineNumber","deleteToLineNumber","insertFromLineNumber","insertToLineNumber","MinimapBuffers","WIDTH","HEIGHT","background","_backgroundFillData","_createBackgroundFillData","_buffers","createImageData","_lastUsedBuffer","getBuffer","set","backgroundA","MinimapSamplingState","compute","viewLineCount","oldSamplingState","minimapLineCount","EditorLayoutInfoComputer","computeContainedMinimapLineCount","halfRatio","minimapLines","lastIndex","oldMinimapLines","oldLength","oldIndex","oldDeltaLineCount","minViewLineNumber","events","lastEvent","fromViewLineNumber","toViewLineNumber","oldMinimapLineNumber","_oldIndex","selectedViewLineNumber","_i","samplingRatio","modelLineToMinimapLine","modelLineRangeToMinimapLineRange","fromLineNumber","toLineNumber","fromLineIndex","toLineIndex","sampledLineNumber","decorationLineRangeToMinimapLineRange","minimapLineStart","minimapLineEnd","deletedLineCount","changeStartIndex","changeEndIndex","insertedLineCount","Minimap","_sectionHeaderCache","LRUCache","MinimapTokensColorTracker","getInstance","_minimapSelections","samplingState","_samplingState","_shouldCheckSampling","InnerMinimap","opts","_recreateLineSampling","onDidChangeOptions","affectsMinimap","minimapLineRange","onTokensColorsChanged","minimapCtx","whitespaceViewportData","wasSampling","event","getRealLineCount","getLineContent","getMinimapLinesRenderingData","needed","getViewLineData","getSelections","getMinimapDecorationsInViewport","_getMinimapDecorationsInViewport","sectionHeaderStyle","minimapStartLineNumber","minimapEndLineNumber","ViewModelDecoration","getSectionHeaderDecorationsInViewport","headerHeightInMinimapLines","modelStartLineNumber","modelEndLineNumber","getMinimapDecorationsInRange","getSectionHeaderText","fitWidth","headerText","sectionHeaderText","cachedText","fittedText","revealLineNumber","revealRange","setScrollTop","Disposable","_renderDecorations","_gestureInProgress","_theme","_model","_lastRenderData","_selectionColor","minimapSelection","_getMinimapDomNodeClassName","_shadow","_canvas","_decorationsCanvas","_slider","_sliderHorizontal","_applyLayout","_pointerDownListener","POINTER_DOWN","preventDefault","button","initialPosY","_startSliderDragging","internalOffsetY","offsetY","_sliderPointerMoveMonitor","GlobalPointerMoveMonitor","_sliderPointerDownListener","stopPropagation","_gestureDisposable","Gesture","addTarget","_sliderTouchStartListener","EventType","Start","toggleClassName","scrollDueToTouchEvent","passive","_sliderTouchMoveListener","Change","_sliderTouchEndListener","End","initialSliderState","Element","initialPosX","pageX","handlePointerMove","posy","posx","minimapPosition","pointerOrthogonalDelta","pointerDelta","startMonitoring","pointerId","buttons","pointerMoveData","touch","startY","class_","_getBuffer","renderingCtx","renderDecorations","tabSize","canvasContext","clearRect","highlightedLines","ContiguousLineMap","_renderSelectionLineHighlights","_renderDecorationsLineHighlights","lineOffsetMap","_renderSelectionsHighlights","_renderDecorationsHighlights","_renderSectionHeaders","y1","y2","intersection","line","yy1","yy2","fillRect","MINIMAP_GUTTER_WIDTH","highlightColors","Map","minimapOptions","decorationColor","highlightColor","has","characterWidth","renderDecorationOnLine","renderDecoration","decorationRange","x1","getXOffsetForPosition","x2","lineIndexToXOffset","lineData","prevx","charCode","charCodeAt","strings","backgroundFillHeight","backgroundFill","foregroundColor","foregroundFill","separatorStroke","strokeStyle","_fitSectionHeader","bind","backgroundFillY","separatorY","_renderSectionLabel","maxWidth","measureText","ellipsisWidth","averageCharWidth","maxCharCount","halfCharCount","test","substring","hasSeparatorLine","textY","beginPath","moveTo","lineTo","closePath","stroke","_lastData","_dirtyY1","_dirtyY2","_renderUntouchedLines","lineInfo","defaultBackground","backgroundIsLight","renderMinimapLineHeight","innerLinePadding","renderBackground","renderedLines","_renderLine","dirtyY1","dirtyHeight","putImageData","lastRenderData","lastTargetData","lastStartLineNumber","lastLines","lastLinesLength","targetData","maxDestPixel","dirtyPixel1","dirtyPixel2","copySourceStart","copySourceEnd","copyDestStart","copyDestEnd","dest_dy","lastLineIndex","source_dy","sourceStart","sourceEnd","destStart","destEnd","subarray","colorTracker","minimapCharRenderer","content","tokens","maxDx","tabsCharDelta","tokenIndex","tokensLen","getCount","tokenEndIndex","getEndOffset","tokenColorId","getForeground","tokenColor","insertSpacesCount","defaultValue","_startLineNumber","_endLineNumber","_defaultValue","_values","ViewOverlayWidgets","_verticalScrollbarWidth","_minimapWidth","_horizontalScrollbarHeight","horizontalScrollbarHeight","_editorHeight","_editorWidth","_viewDomNodeRect","overflowingOverlayWidgetsDomNode","_updateMaxMinWidth","widgetData","maxMinWidth","widgetMinWidthInPx","getMinContentWidthInPx","setOverlayWidgetsMinWidth","_renderWidget","setRight","widgetHeight","clientHeight","right","editorBoundingBox","Settings","config","overviewRulerLanes","renderBorder","borderColor","editorOverviewRulerBorder","hideCursor","cursorColorSingle","editorCursorForeground","cursorColorPrimary","editorMultiCursorPrimaryForeground","cursorColorSecondary","editorMultiCursorSecondaryForeground","themeType","minimapEnabled","minimapSide","editorOverviewRulerBackground","TokenizationRegistry","getDefaultBackground","overviewRuler","domWidth","domHeight","canvasWidth","canvasHeight","w","_initLanes","canvasLeftOffset","laneCount","remainingWidth","leftWidth","rightWidth","centerWidth","centerOffset","Color","DecorationsOverviewRuler","_actualShouldRender","_renderedDecorations","_renderedCursorPositions","_updateSettings","_tokensColorTrackerListener","onDidChange","changedColorMap","_cursorPositions","_settings","newSettings","_markRenderingIsNeeded","_markRenderingIsMaybeNeeded","compare","affectsOverviewRuler","scrollHeightChanged","editorCtx","setBackgroundColor","Format","CSS","formatHexA","getAllOverviewRulerDecorations","OverviewRulerDecorationsGroup","compareByRenderingProps","equalsArr","heightRatio","minDecorationHeight","halfMinDecorationHeight","canvasCtx","isOpaque","decorationGroup","decorationGroupData","prevLane","prevY1","prevY2","yCenter","cursorHeight","halfCursorHeight","cursorX","cursorW","prevColor","cursor","CursorPlurality","OverviewRuler","ViewEventHandler","cssClassName","_zoneManager","OverviewZoneManager","setDOMWidth","setDOMHeight","setOuterHeight","setLineHeight","setPixelRatio","getDOMWidth","getDOMHeight","getCanvasWidth","getCanvasHeight","setLayout","setZones","zones","getOuterHeight","colorZones","resolveColorZones","id2Color","getId2Color","_renderOneLane","currentColorId","currentFrom","currentTo","zone","zoneColorId","colorId","zoneFrom","zoneTo","to","Rulers","_renderedRulers","_rulers","_ensureRulersCount","currentCount","desiredCount","rulerWidth","addCount","removeCount","ruler","setBoxShadow","ScrollDecorationViewPart","_scrollTop","_width","_updateWidth","_shouldShow","_useShadows","_updateShouldShow","newShouldShow","HorizontalRangeWithStyle","startStyle","endStyle","LineVisibleRangesWithStyle","toStyledRange","item","toStyled","SelectionsOverlay","_previousFrameVisibleRangesWithStyle","_roundedSelection","slice","_visibleRangesHaveGaps","_enrichVisibleRangesWithStyle","previousFrame","epsilon","previousFrameTop","previousFrameBottom","topLineNumber","bottomLineNumber","curLineRange","curLeft","curRight","prevLeft","prevRight","nextLeft","nextRight","_getVisibleRangesWithStyle","_createSelectionPiece","_actualRenderOneSelection","output2","hasMultipleSelections","visibleRangesHaveStyle","firstLineNumber","lastLineNumber","innerCornerOutput","restOfSelectionOutput","SELECTION_CLASS_NAME","ROUNDED_PIECE_WIDTH","EDITOR_BACKGROUND_CLASS_NAME","SELECTION_TOP_RIGHT","SELECTION_BOTTOM_RIGHT","SELECTION_TOP_LEFT","SELECTION_BOTTOM_LEFT","thisFrameVisibleRangesWithStyle","visibleRangesWithStyle","_ref","internalCorners","restOfSelection","n","editorSelectionForegroundColor","editorSelectionForeground","ViewCursorRenderData","textContent","textContentClassName","ViewCursor","plurality","_cursorStyle","_lineCursorWidth","_position","_pluralityClass","setPlurality","_lastRenderedContent","Single","MultiPrimary","MultiSecondary","show","hide","onCursorPositionChanged","pauseAnimation","transitionProperty","_getGraphemeAwarePosition","lineContent","startOffset","endOffset","_prepareRender","nextGrapheme","TextEditorCursorStyle","Line","LineThin","window","_getTokenClassName","visibleRangeForCharacter","firstVisibleRangeForCharacter","Block","Underline","UnderlineThin","findTokenIndexAtOffset","getClassName","setPaddingLeft","ViewCursors","_readOnly","_cursorBlinking","_cursorSmoothCaretAnimation","_isComposingInput","_primaryCursor","_secondaryCursors","_updateDomClassName","_startCursorBlinkAnimation","TimeoutTimer","_cursorFlatBlinkInterval","WindowIntervalTimer","_blinkingEnabled","_editorHasFocus","_updateBlinking","onCompositionStart","onCompositionEnd","_onCursorPositionChanged","secondaryPositions","reason","addCnt","newCursor","insertBefore","nextSibling","removeCnt","splice","positions","secondaryCursor","_getCursorBlinking","blinkingStyle","isHidden","isSolid","_hide","_show","cancelAndSet","BLINK_INTERVAL","getWindow","setIfNotSet","_getClassName","BlockOutline","renderDataLen","primaryRenderData","secondaryRenderData","getLastRenderData","cursorThemes","class","foreground","editorCursorBackground","editorMultiCursorPrimaryBackground","editorMultiCursorSecondaryBackground","cursorTheme","caret","caretBackground","opposite","invalidFunc","ViewZones","marginDomNode","_zones","_recomputeWhitespacesProps","whitespaces","getWhitespaces","oldWhitespaces","whitespace","hadAChange","changeWhitespace","whitespaceAccessor","props","_computeWhitespaceProps","delegate","isInHiddenArea","oldWhitespace","afterLineNumber","afterViewLineNumber","heightInPx","changeOneWhitespace","_safeCallOnComputedHeight","_getZoneOrdinal","ordinal","afterColumn","_heightInPixels","minWidthInPx","_minWidthInPixels","zoneAfterModelPosition","zoneBeforeModelPosition","validAfterLineNumber","afterColumnAffinity","isVisible","showInHiddenAreas","changeViewZones","callback","zonesHaveChanged","changeAccessor","addZone","_addZone","removeZone","_removeZone","layoutZone","_layoutZone","func","arg1","onUnexpectedError","safeInvoke1Arg","myZone","whitespaceId","insertWhitespace","removeWhitespace","shouldSuppressMouseDownOnViewZone","heightInLines","onComputedHeight","_safeCallOnDomNodeTop","onDomNodeTop","visibleWhitespaces","visibleZones","hasVisibleZone","visibleWhitespace","newTop","newHeight","newDisplay","verticalOffset","getScrolledTopFromAbsoluteTop","WhitespaceOverlay","_options","WhitespaceOptions","_selection","newOptions","renderWhitespace","selectionsOnLine","maxColumn","LineRange","_applyRenderWhitespace","continuesWithWrappedLine","editorWhitespaces","USE_SVG","renderWithSVG","stopRenderingLineAfter","fauxIndentLength","onlyBoundary","onlyTrailing","middotWidth","wsmiddotWidth","renderSpaceCharCode","canUseHalfwidthRightwardsArrow","lastNonWhitespaceIndex","lineIsEmptyOrWhitespace","firstNonWhitespaceIndex","currentSelectionIndex","currentSelection","maxLeft","prevChCode","nextChCode","prevCharCode","_renderArrow","toFixed","p1","p2","p3","p4","p5","parts","p","experimentalWhitespaceRendering","__decorate","decorators","key","desc","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","View","commandDelegate","colorTheme","userInputEvents","overflowWidgetsDomNode","_instantiationService","_shouldRecomputeGlyphMarginLanes","_renderAnimationFrame","viewController","ViewController","ViewContext","_viewParts","_textAreaHandler","createInstance","TextAreaHandler","_createTextAreaHandlerHelper","_getEditorClassName","_overflowGuardContainer","_scrollbar","_viewLines","_viewZones","decorationsOverviewRuler","scrollDecoration","contentViewOverlays","ContentViewOverlays","addDynamicOverlay","marginViewOverlays","MarginViewOverlays","LineNumbersOverlay","_glyphMarginWidgets","margin","Margin","_contentWidgets","_viewCursors","_overlayWidgets","rulers","blockOutline","overviewRulerData","parent","textArea","textAreaCover","_pointerHandler","PointerHandler","_createPointerHandlerHelper","_computeGlyphMarginLanes","laneModel","glyphs","getAllMarginDecorations","persist","persistLane","validateRange","reset","glyph","linesContentDomNode","viewLinesDomNode","focusTextArea","focus","dispatchTextAreaEvent","dispatchEvent","lastViewCursorsRenderData","lastTextareaPosition","PointerHandlerLastRenderData","viewZoneId","_flushAccumulatedAndRenderNow","focused","handleEvents","_scheduleRender","affectsGlyphMargin","viewPart","_store","isDisposed","BugIndicatingError","rendering","_createCoordinatedRendering","EditorRenderingCoordinator","INSTANCE","scheduleCoordinatedRendering","prepareRenderText","viewParts","safeInvokeNoArg","_getViewPartsToRender","setGlyphMarginDecorationLaneCount","requiredLanes","inputLatency","onRenderStart","isConnected","viewPartsToRender","partialViewportData","getLinesViewportData","setViewport","centeredLineNumber","ViewportData","getWhitespaceViewportData","RenderingContext","restoreState","scrollPosition","visibleLinesStabilized","getOffsetForColumn","modelColumn","getTargetAtClientPoint","clientX","clientY","mouseTarget","ViewUserInputEvents","convertViewToModelMouseTarget","createOverviewRuler","change","now","everything","forceShouldRender","writeScreenReaderContent","setAriaOptions","addContentWidget","layoutContentWidget","_e","_f","_g","_h","secondaryPosition","positionAffinity","removeContentWidget","addOverlayWidget","layoutOverlayWidget","newPreference","removeOverlayWidget","addGlyphMarginWidget","layoutGlyphMarginWidget","removeGlyphMarginWidget","IInstantiationService","_coordinatedRenderings","_animationFrameRunners","renderingIndex","_","disposable","clear","runner","delete","_onRenderScheduled","coordinatedRenderings","datas","ttPolicy","createTrustedTypesPolicy","createHTML","DOMLineBreaksComputerFactory","targetWindow","WeakRef","createLineBreaksComputer","wrappingIndent","wordBreak","injectedTexts","addRequest","lineText","injectedText","previousLineBreakData","finalize","firstLineBreakColumn","injectedTextsPerLine","createEmptyLineBreakWithPossiblyInjectedText","requestIdx","LineInjectedText","applyInjectedText","injectionOptions","t","injectionOffsets","text","ModelLineProjectionData","overallWidth","additionalIndent","additionalIndentSize","additionalIndentLength","containerDomNode","sb","StringBuilder","firstNonWhitespaceIndices","wrappedTextIndentLengths","renderLineContents","allCharOffsets","allVisibleColumns","wrappedTextIndentLength","indentWidth","renderLineContent","substr","renderLine","html","build","trustedhtml","innerHTML","overflowWrap","createRange","lineDomNodes","prototype","children","breakOffsets","readLineBreaks","visibleColumns","breakOffsetsVisibleColumn","curInjectedTexts","createLineBreaks","assertIsDefined","deref","initialVisibleColumn","wrappingIndentLength","hangingOffset","appendString","charOffset","charOffsets","nextCharCode","producedCharacters","space","appendCharCode","appendASCIICharCode","lineDomNode","spans","discoverBreaks","err","log","low","lowRects","high","highRects","mid","midRects","setStart","firstChild","setEnd","getClientRects","_readConfig","_lastCursorModelPosition","_activeLineNumber","_renderLineNumbers","renderType","_renderCustomLineNumbers","renderFn","_renderFinalNewline","_lineNumbersLeft","lineNumbersLeft","_lineNumbersWidth","lineNumbersWidth","primaryViewPosition","affectsLineNumber","_getLineRenderLineNumber","viewLineNumber","diff","lineHeightClassName","lineNoDecorations","lineNumberClassName","compareRangesUsingEnds","decorationStartIndex","renderLineNumber","extraClassNames","getLineLength","editorLineNumbersColor","editorLineNumbers","editorDimmedLineNumberColor","editorDimmedLineNumber","RangeUtil","_createRange","_handyReadyRange","_detachRange","selectNodeContents","_readClientRects","startElement","endElement","_mergeAdjacentRanges","FloatHorizontalRange","prev","_createHorizontalRangesFromClientRects","clientRects","readHorizontalRanges","startChildIndex","endChildIndex","canUseFastRenderedViewLine","browser","renderControlCharacters","useMonospaceOptimizations","isMonospace","fontLigatures","_isMaybeInvalid","_renderedViewLine","setDomNode","getViewLineRenderingData","actualInlineDecorations","LineDecoration","inlineDecorations","renderLineInput","RenderLineInput","isBasicASCII","containsRTL","startVisibleColumn","EditorFontLigatures","OFF","renderViewLine","renderedViewLine","containsForeignElements","FastRenderedViewLine","characterMapping","createRenderedLine","layoutLine","toSlowRenderedLine","VisibleRanges","horizontalRanges","_cachedWidth","keyColumnCount","_keyColumnPixelOffsetCache","Float32Array","_characterMapping","_charWidth","horizontalOffset","getHorizontalOffset","_getReadingTarget","expectedWidth","actualWidth","startPosition","_getColumnPixelOffset","endPosition","keyColumnOrdinal","keyColumn","keyColumnPixelOffset","_actualReadPixelOffset","keyColumnHorizontalOffset","myDomNode","domPosition","getDomPosition","partIndex","RenderedViewLine","_isWhitespaceOnly","_containsForeignElements","_pixelOffsetCache","_readPixelOffset","_readVisibleRangesForRange","pixelOffset","_readRawVisibleRangesForRange","readingTarget","cachedPixelOffset","expectedResult","startDomPosition","endDomPosition","WebKitRenderedViewLine","endPixelOffset","lastRange","createWebKitRenderedLine","createNormalRenderedLine","spanNodeTextContentLength","spanIndex","previousSibling","getColumn","DomPosition","OUTER_CLASS_NAME","_glyphMarginBackgroundDomNode"],"sourceRoot":""}