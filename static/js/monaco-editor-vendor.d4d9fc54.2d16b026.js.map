{"version":3,"file":"static/js/monaco-editor-vendor.d4d9fc54.2d16b026.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/commandIds.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/ghostText.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/ghostTextWidget.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/inlineCompletionContextKeys.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/provideInlineCompletions.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/singleTextEdit.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/inlineCompletionsSource.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/inlineCompletionsModel.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/suggestWidgetInlineCompletionProvider.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/inlineCompletionsController.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/commands.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/hoverParticipant.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/inlineCompletions.contribution.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/inlineCompletionsHintsWidget.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/utils.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineEdit/browser/ghostTextWidget.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineEdit/browser/inlineEditHintsWidget.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineEdit/browser/inlineEditController.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineEdit/browser/commands.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineEdit/browser/commandIds.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineEdit/browser/hoverParticipant.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineEdit/browser/inlineEdit.contribution.js","../node_modules/monaco-editor/esm/vs/editor/contrib/inlineProgress/browser/inlineProgress.js","../node_modules/monaco-editor/esm/vs/editor/contrib/lineSelection/browser/lineSelection.js","../node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/browser/copyLinesCommand.js","../node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/browser/moveLinesCommand.js","../node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/browser/sortLinesCommand.js","../node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/browser/linesOperations.js","../node_modules/monaco-editor/esm/vs/editor/contrib/linkedEditing/browser/linkedEditing.js","../node_modules/monaco-editor/esm/vs/editor/contrib/links/browser/getLinks.js","../node_modules/monaco-editor/esm/vs/editor/contrib/links/browser/links.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const inlineSuggestCommitId = 'editor.action.inlineSuggest.commit';\nexport const showPreviousInlineSuggestionActionId = 'editor.action.inlineSuggest.showPrevious';\nexport const showNextInlineSuggestionActionId = 'editor.action.inlineSuggest.showNext';\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../../../base/common/arrays.js';\nimport { splitLines } from '../../../../base/common/strings.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { SingleTextEdit, TextEdit } from '../../../common/core/textEdit.js';\nexport class GhostText {\n    constructor(lineNumber, parts) {\n        this.lineNumber = lineNumber;\n        this.parts = parts;\n    }\n    equals(other) {\n        return this.lineNumber === other.lineNumber &&\n            this.parts.length === other.parts.length &&\n            this.parts.every((part, index) => part.equals(other.parts[index]));\n    }\n    renderForScreenReader(lineText) {\n        if (this.parts.length === 0) {\n            return '';\n        }\n        const lastPart = this.parts[this.parts.length - 1];\n        const cappedLineText = lineText.substr(0, lastPart.column - 1);\n        const text = new TextEdit([\n            ...this.parts.map(p => new SingleTextEdit(Range.fromPositions(new Position(1, p.column)), p.lines.join('\\n'))),\n        ]).applyToString(cappedLineText);\n        return text.substring(this.parts[0].column - 1);\n    }\n    isEmpty() {\n        return this.parts.every(p => p.lines.length === 0);\n    }\n    get lineCount() {\n        return 1 + this.parts.reduce((r, p) => r + p.lines.length - 1, 0);\n    }\n}\nexport class GhostTextPart {\n    constructor(column, text, \n    /**\n     * Indicates if this part is a preview of an inline suggestion when a suggestion is previewed.\n    */\n    preview) {\n        this.column = column;\n        this.text = text;\n        this.preview = preview;\n        this.lines = splitLines(this.text);\n    }\n    ;\n    equals(other) {\n        return this.column === other.column &&\n            this.lines.length === other.lines.length &&\n            this.lines.every((line, index) => line === other.lines[index]);\n    }\n}\nexport class GhostTextReplacement {\n    constructor(lineNumber, columnRange, text, additionalReservedLineCount = 0) {\n        this.lineNumber = lineNumber;\n        this.columnRange = columnRange;\n        this.text = text;\n        this.additionalReservedLineCount = additionalReservedLineCount;\n        this.parts = [\n            new GhostTextPart(this.columnRange.endColumnExclusive, this.text, false),\n        ];\n        this.newLines = splitLines(this.text);\n    }\n    renderForScreenReader(_lineText) {\n        return this.newLines.join('\\n');\n    }\n    get lineCount() {\n        return this.newLines.length;\n    }\n    isEmpty() {\n        return this.parts.every(p => p.lines.length === 0);\n    }\n    equals(other) {\n        return this.lineNumber === other.lineNumber &&\n            this.columnRange.equals(other.columnRange) &&\n            this.newLines.length === other.newLines.length &&\n            this.newLines.every((line, index) => line === other.newLines[index]) &&\n            this.additionalReservedLineCount === other.additionalReservedLineCount;\n    }\n}\nexport function ghostTextsOrReplacementsEqual(a, b) {\n    return equals(a, b, ghostTextOrReplacementEquals);\n}\nexport function ghostTextOrReplacementEquals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!a || !b) {\n        return false;\n    }\n    if (a instanceof GhostText && b instanceof GhostText) {\n        return a.equals(b);\n    }\n    if (a instanceof GhostTextReplacement && b instanceof GhostTextReplacement) {\n        return a.equals(b);\n    }\n    return false;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { createTrustedTypesPolicy } from '../../../../base/browser/trustedTypes.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, derived, observableFromEvent, observableSignalFromEvent, observableValue } from '../../../../base/common/observable.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport './ghostText.css';\nimport { applyFontInfo } from '../../../browser/config/domFontInfo.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { StringBuilder } from '../../../common/core/stringBuilder.js';\nimport { ILanguageService } from '../../../common/languages/language.js';\nimport { InjectedTextCursorStops } from '../../../common/model.js';\nimport { LineTokens } from '../../../common/tokens/lineTokens.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { GhostTextReplacement } from './ghostText.js';\nimport { ColumnRange, applyObservableDecorations } from './utils.js';\nexport const GHOST_TEXT_DESCRIPTION = 'ghost-text';\nlet GhostTextWidget = class GhostTextWidget extends Disposable {\n    constructor(editor, model, languageService) {\n        super();\n        this.editor = editor;\n        this.model = model;\n        this.languageService = languageService;\n        this.isDisposed = observableValue(this, false);\n        this.currentTextModel = observableFromEvent(this.editor.onDidChangeModel, () => /** @description editor.model */ this.editor.getModel());\n        this.uiState = derived(this, reader => {\n            if (this.isDisposed.read(reader)) {\n                return undefined;\n            }\n            const textModel = this.currentTextModel.read(reader);\n            if (textModel !== this.model.targetTextModel.read(reader)) {\n                return undefined;\n            }\n            const ghostText = this.model.ghostText.read(reader);\n            if (!ghostText) {\n                return undefined;\n            }\n            const replacedRange = ghostText instanceof GhostTextReplacement ? ghostText.columnRange : undefined;\n            const inlineTexts = [];\n            const additionalLines = [];\n            function addToAdditionalLines(lines, className) {\n                if (additionalLines.length > 0) {\n                    const lastLine = additionalLines[additionalLines.length - 1];\n                    if (className) {\n                        lastLine.decorations.push(new LineDecoration(lastLine.content.length + 1, lastLine.content.length + 1 + lines[0].length, className, 0 /* InlineDecorationType.Regular */));\n                    }\n                    lastLine.content += lines[0];\n                    lines = lines.slice(1);\n                }\n                for (const line of lines) {\n                    additionalLines.push({\n                        content: line,\n                        decorations: className ? [new LineDecoration(1, line.length + 1, className, 0 /* InlineDecorationType.Regular */)] : []\n                    });\n                }\n            }\n            const textBufferLine = textModel.getLineContent(ghostText.lineNumber);\n            let hiddenTextStartColumn = undefined;\n            let lastIdx = 0;\n            for (const part of ghostText.parts) {\n                let lines = part.lines;\n                if (hiddenTextStartColumn === undefined) {\n                    inlineTexts.push({\n                        column: part.column,\n                        text: lines[0],\n                        preview: part.preview,\n                    });\n                    lines = lines.slice(1);\n                }\n                else {\n                    addToAdditionalLines([textBufferLine.substring(lastIdx, part.column - 1)], undefined);\n                }\n                if (lines.length > 0) {\n                    addToAdditionalLines(lines, GHOST_TEXT_DESCRIPTION);\n                    if (hiddenTextStartColumn === undefined && part.column <= textBufferLine.length) {\n                        hiddenTextStartColumn = part.column;\n                    }\n                }\n                lastIdx = part.column - 1;\n            }\n            if (hiddenTextStartColumn !== undefined) {\n                addToAdditionalLines([textBufferLine.substring(lastIdx)], undefined);\n            }\n            const hiddenRange = hiddenTextStartColumn !== undefined ? new ColumnRange(hiddenTextStartColumn, textBufferLine.length + 1) : undefined;\n            return {\n                replacedRange,\n                inlineTexts,\n                additionalLines,\n                hiddenRange,\n                lineNumber: ghostText.lineNumber,\n                additionalReservedLineCount: this.model.minReservedLineCount.read(reader),\n                targetTextModel: textModel,\n            };\n        });\n        this.decorations = derived(this, reader => {\n            const uiState = this.uiState.read(reader);\n            if (!uiState) {\n                return [];\n            }\n            const decorations = [];\n            if (uiState.replacedRange) {\n                decorations.push({\n                    range: uiState.replacedRange.toRange(uiState.lineNumber),\n                    options: { inlineClassName: 'inline-completion-text-to-replace', description: 'GhostTextReplacement' }\n                });\n            }\n            if (uiState.hiddenRange) {\n                decorations.push({\n                    range: uiState.hiddenRange.toRange(uiState.lineNumber),\n                    options: { inlineClassName: 'ghost-text-hidden', description: 'ghost-text-hidden', }\n                });\n            }\n            for (const p of uiState.inlineTexts) {\n                decorations.push({\n                    range: Range.fromPositions(new Position(uiState.lineNumber, p.column)),\n                    options: {\n                        description: GHOST_TEXT_DESCRIPTION,\n                        after: { content: p.text, inlineClassName: p.preview ? 'ghost-text-decoration-preview' : 'ghost-text-decoration', cursorStops: InjectedTextCursorStops.Left },\n                        showIfCollapsed: true,\n                    }\n                });\n            }\n            return decorations;\n        });\n        this.additionalLinesWidget = this._register(new AdditionalLinesWidget(this.editor, this.languageService.languageIdCodec, derived(reader => {\n            /** @description lines */\n            const uiState = this.uiState.read(reader);\n            return uiState ? {\n                lineNumber: uiState.lineNumber,\n                additionalLines: uiState.additionalLines,\n                minReservedLineCount: uiState.additionalReservedLineCount,\n                targetTextModel: uiState.targetTextModel,\n            } : undefined;\n        })));\n        this._register(toDisposable(() => { this.isDisposed.set(true, undefined); }));\n        this._register(applyObservableDecorations(this.editor, this.decorations));\n    }\n    ownsViewZone(viewZoneId) {\n        return this.additionalLinesWidget.viewZoneId === viewZoneId;\n    }\n};\nGhostTextWidget = __decorate([\n    __param(2, ILanguageService)\n], GhostTextWidget);\nexport { GhostTextWidget };\nexport class AdditionalLinesWidget extends Disposable {\n    get viewZoneId() { return this._viewZoneId; }\n    constructor(editor, languageIdCodec, lines) {\n        super();\n        this.editor = editor;\n        this.languageIdCodec = languageIdCodec;\n        this.lines = lines;\n        this._viewZoneId = undefined;\n        this.editorOptionsChanged = observableSignalFromEvent('editorOptionChanged', Event.filter(this.editor.onDidChangeConfiguration, e => e.hasChanged(33 /* EditorOption.disableMonospaceOptimizations */)\n            || e.hasChanged(117 /* EditorOption.stopRenderingLineAfter */)\n            || e.hasChanged(99 /* EditorOption.renderWhitespace */)\n            || e.hasChanged(94 /* EditorOption.renderControlCharacters */)\n            || e.hasChanged(51 /* EditorOption.fontLigatures */)\n            || e.hasChanged(50 /* EditorOption.fontInfo */)\n            || e.hasChanged(67 /* EditorOption.lineHeight */)));\n        this._register(autorun(reader => {\n            /** @description update view zone */\n            const lines = this.lines.read(reader);\n            this.editorOptionsChanged.read(reader);\n            if (lines) {\n                this.updateLines(lines.lineNumber, lines.additionalLines, lines.minReservedLineCount);\n            }\n            else {\n                this.clear();\n            }\n        }));\n    }\n    dispose() {\n        super.dispose();\n        this.clear();\n    }\n    clear() {\n        this.editor.changeViewZones((changeAccessor) => {\n            if (this._viewZoneId) {\n                changeAccessor.removeZone(this._viewZoneId);\n                this._viewZoneId = undefined;\n            }\n        });\n    }\n    updateLines(lineNumber, additionalLines, minReservedLineCount) {\n        const textModel = this.editor.getModel();\n        if (!textModel) {\n            return;\n        }\n        const { tabSize } = textModel.getOptions();\n        this.editor.changeViewZones((changeAccessor) => {\n            if (this._viewZoneId) {\n                changeAccessor.removeZone(this._viewZoneId);\n                this._viewZoneId = undefined;\n            }\n            const heightInLines = Math.max(additionalLines.length, minReservedLineCount);\n            if (heightInLines > 0) {\n                const domNode = document.createElement('div');\n                renderLines(domNode, tabSize, additionalLines, this.editor.getOptions(), this.languageIdCodec);\n                this._viewZoneId = changeAccessor.addZone({\n                    afterLineNumber: lineNumber,\n                    heightInLines: heightInLines,\n                    domNode,\n                    afterColumnAffinity: 1 /* PositionAffinity.Right */\n                });\n            }\n        });\n    }\n}\nfunction renderLines(domNode, tabSize, lines, opts, languageIdCodec) {\n    const disableMonospaceOptimizations = opts.get(33 /* EditorOption.disableMonospaceOptimizations */);\n    const stopRenderingLineAfter = opts.get(117 /* EditorOption.stopRenderingLineAfter */);\n    // To avoid visual confusion, we don't want to render visible whitespace\n    const renderWhitespace = 'none';\n    const renderControlCharacters = opts.get(94 /* EditorOption.renderControlCharacters */);\n    const fontLigatures = opts.get(51 /* EditorOption.fontLigatures */);\n    const fontInfo = opts.get(50 /* EditorOption.fontInfo */);\n    const lineHeight = opts.get(67 /* EditorOption.lineHeight */);\n    const sb = new StringBuilder(10000);\n    sb.appendString('<div class=\"suggest-preview-text\">');\n    for (let i = 0, len = lines.length; i < len; i++) {\n        const lineData = lines[i];\n        const line = lineData.content;\n        sb.appendString('<div class=\"view-line');\n        sb.appendString('\" style=\"top:');\n        sb.appendString(String(i * lineHeight));\n        sb.appendString('px;width:1000000px;\">');\n        const isBasicASCII = strings.isBasicASCII(line);\n        const containsRTL = strings.containsRTL(line);\n        const lineTokens = LineTokens.createEmpty(line, languageIdCodec);\n        renderViewLine(new RenderLineInput((fontInfo.isMonospace && !disableMonospaceOptimizations), fontInfo.canUseHalfwidthRightwardsArrow, line, false, isBasicASCII, containsRTL, 0, lineTokens, lineData.decorations, tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures !== EditorFontLigatures.OFF, null), sb);\n        sb.appendString('</div>');\n    }\n    sb.appendString('</div>');\n    applyFontInfo(domNode, fontInfo);\n    const html = sb.build();\n    const trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n    domNode.innerHTML = trustedhtml;\n}\nexport const ttPolicy = createTrustedTypesPolicy('editorGhostText', { createHTML: value => value });\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { autorun } from '../../../../base/common/observable.js';\nimport { firstNonWhitespaceIndex } from '../../../../base/common/strings.js';\nimport { CursorColumns } from '../../../common/core/cursorColumns.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { localize } from '../../../../nls.js';\nexport class InlineCompletionContextKeys extends Disposable {\n    constructor(contextKeyService, model) {\n        super();\n        this.contextKeyService = contextKeyService;\n        this.model = model;\n        this.inlineCompletionVisible = InlineCompletionContextKeys.inlineSuggestionVisible.bindTo(this.contextKeyService);\n        this.inlineCompletionSuggestsIndentation = InlineCompletionContextKeys.inlineSuggestionHasIndentation.bindTo(this.contextKeyService);\n        this.inlineCompletionSuggestsIndentationLessThanTabSize = InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize.bindTo(this.contextKeyService);\n        this.suppressSuggestions = InlineCompletionContextKeys.suppressSuggestions.bindTo(this.contextKeyService);\n        this._register(autorun(reader => {\n            /** @description update context key: inlineCompletionVisible, suppressSuggestions */\n            const model = this.model.read(reader);\n            const state = model === null || model === void 0 ? void 0 : model.state.read(reader);\n            const isInlineCompletionVisible = !!(state === null || state === void 0 ? void 0 : state.inlineCompletion) && (state === null || state === void 0 ? void 0 : state.primaryGhostText) !== undefined && !(state === null || state === void 0 ? void 0 : state.primaryGhostText.isEmpty());\n            this.inlineCompletionVisible.set(isInlineCompletionVisible);\n            if ((state === null || state === void 0 ? void 0 : state.primaryGhostText) && (state === null || state === void 0 ? void 0 : state.inlineCompletion)) {\n                this.suppressSuggestions.set(state.inlineCompletion.inlineCompletion.source.inlineCompletions.suppressSuggestions);\n            }\n        }));\n        this._register(autorun(reader => {\n            /** @description update context key: inlineCompletionSuggestsIndentation, inlineCompletionSuggestsIndentationLessThanTabSize */\n            const model = this.model.read(reader);\n            let startsWithIndentation = false;\n            let startsWithIndentationLessThanTabSize = true;\n            const ghostText = model === null || model === void 0 ? void 0 : model.primaryGhostText.read(reader);\n            if (!!(model === null || model === void 0 ? void 0 : model.selectedSuggestItem) && ghostText && ghostText.parts.length > 0) {\n                const { column, lines } = ghostText.parts[0];\n                const firstLine = lines[0];\n                const indentationEndColumn = model.textModel.getLineIndentColumn(ghostText.lineNumber);\n                const inIndentation = column <= indentationEndColumn;\n                if (inIndentation) {\n                    let firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n                    if (firstNonWsIdx === -1) {\n                        firstNonWsIdx = firstLine.length - 1;\n                    }\n                    startsWithIndentation = firstNonWsIdx > 0;\n                    const tabSize = model.textModel.getOptions().tabSize;\n                    const visibleColumnIndentation = CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);\n                    startsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;\n                }\n            }\n            this.inlineCompletionSuggestsIndentation.set(startsWithIndentation);\n            this.inlineCompletionSuggestsIndentationLessThanTabSize.set(startsWithIndentationLessThanTabSize);\n        }));\n    }\n}\nInlineCompletionContextKeys.inlineSuggestionVisible = new RawContextKey('inlineSuggestionVisible', false, localize('inlineSuggestionVisible', \"Whether an inline suggestion is visible\"));\nInlineCompletionContextKeys.inlineSuggestionHasIndentation = new RawContextKey('inlineSuggestionHasIndentation', false, localize('inlineSuggestionHasIndentation', \"Whether the inline suggestion starts with whitespace\"));\nInlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize = new RawContextKey('inlineSuggestionHasIndentationLessThanTabSize', true, localize('inlineSuggestionHasIndentationLessThanTabSize', \"Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab\"));\nInlineCompletionContextKeys.suppressSuggestions = new RawContextKey('inlineSuggestionSuppressSuggestions', undefined, localize('suppressSuggestions', \"Whether suggestions should be suppressed for the current suggestion\"));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertNever } from '../../../../base/common/assert.js';\nimport { DeferredPromise } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { SetMap } from '../../../../base/common/map.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Range } from '../../../common/core/range.js';\nimport { fixBracketsInLine } from '../../../common/model/bracketPairsTextModelPart/fixBrackets.js';\nimport { getReadonlyEmptyArray } from './utils.js';\nimport { SnippetParser, Text } from '../../snippet/browser/snippetParser.js';\nexport async function provideInlineCompletions(registry, position, model, context, token = CancellationToken.None, languageConfigurationService) {\n    // Important: Don't use position after the await calls, as the model could have been changed in the meantime!\n    const defaultReplaceRange = getDefaultRange(position, model);\n    const providers = registry.all(model);\n    const multiMap = new SetMap();\n    for (const provider of providers) {\n        if (provider.groupId) {\n            multiMap.add(provider.groupId, provider);\n        }\n    }\n    function getPreferredProviders(provider) {\n        if (!provider.yieldsToGroupIds) {\n            return [];\n        }\n        const result = [];\n        for (const groupId of provider.yieldsToGroupIds || []) {\n            const providers = multiMap.get(groupId);\n            for (const p of providers) {\n                result.push(p);\n            }\n        }\n        return result;\n    }\n    const states = new Map();\n    const seen = new Set();\n    function findPreferredProviderCircle(provider, stack) {\n        stack = [...stack, provider];\n        if (seen.has(provider)) {\n            return stack;\n        }\n        seen.add(provider);\n        try {\n            const preferred = getPreferredProviders(provider);\n            for (const p of preferred) {\n                const c = findPreferredProviderCircle(p, stack);\n                if (c) {\n                    return c;\n                }\n            }\n        }\n        finally {\n            seen.delete(provider);\n        }\n        return undefined;\n    }\n    function processProvider(provider) {\n        const state = states.get(provider);\n        if (state) {\n            return state;\n        }\n        const circle = findPreferredProviderCircle(provider, []);\n        if (circle) {\n            onUnexpectedExternalError(new Error(`Inline completions: cyclic yield-to dependency detected. Path: ${circle.map(s => s.toString ? s.toString() : ('' + s)).join(' -> ')}`));\n        }\n        const deferredPromise = new DeferredPromise();\n        states.set(provider, deferredPromise.p);\n        (async () => {\n            if (!circle) {\n                const preferred = getPreferredProviders(provider);\n                for (const p of preferred) {\n                    const result = await processProvider(p);\n                    if (result && result.items.length > 0) {\n                        // Skip provider\n                        return undefined;\n                    }\n                }\n            }\n            try {\n                const completions = await provider.provideInlineCompletions(model, position, context, token);\n                return completions;\n            }\n            catch (e) {\n                onUnexpectedExternalError(e);\n                return undefined;\n            }\n        })().then(c => deferredPromise.complete(c), e => deferredPromise.error(e));\n        return deferredPromise.p;\n    }\n    const providerResults = await Promise.all(providers.map(async (provider) => ({ provider, completions: await processProvider(provider) })));\n    const itemsByHash = new Map();\n    const lists = [];\n    for (const result of providerResults) {\n        const completions = result.completions;\n        if (!completions) {\n            continue;\n        }\n        const list = new InlineCompletionList(completions, result.provider);\n        lists.push(list);\n        for (const item of completions.items) {\n            const inlineCompletionItem = InlineCompletionItem.from(item, list, defaultReplaceRange, model, languageConfigurationService);\n            itemsByHash.set(inlineCompletionItem.hash(), inlineCompletionItem);\n        }\n    }\n    return new InlineCompletionProviderResult(Array.from(itemsByHash.values()), new Set(itemsByHash.keys()), lists);\n}\nexport class InlineCompletionProviderResult {\n    constructor(\n    /**\n     * Free of duplicates.\n     */\n    completions, hashs, providerResults) {\n        this.completions = completions;\n        this.hashs = hashs;\n        this.providerResults = providerResults;\n    }\n    has(item) {\n        return this.hashs.has(item.hash());\n    }\n    dispose() {\n        for (const result of this.providerResults) {\n            result.removeRef();\n        }\n    }\n}\n/**\n * A ref counted pointer to the computed `InlineCompletions` and the `InlineCompletionsProvider` that\n * computed them.\n */\nexport class InlineCompletionList {\n    constructor(inlineCompletions, provider) {\n        this.inlineCompletions = inlineCompletions;\n        this.provider = provider;\n        this.refCount = 1;\n    }\n    addRef() {\n        this.refCount++;\n    }\n    removeRef() {\n        this.refCount--;\n        if (this.refCount === 0) {\n            this.provider.freeInlineCompletions(this.inlineCompletions);\n        }\n    }\n}\nexport class InlineCompletionItem {\n    static from(inlineCompletion, source, defaultReplaceRange, textModel, languageConfigurationService) {\n        let insertText;\n        let snippetInfo;\n        let range = inlineCompletion.range ? Range.lift(inlineCompletion.range) : defaultReplaceRange;\n        if (typeof inlineCompletion.insertText === 'string') {\n            insertText = inlineCompletion.insertText;\n            if (languageConfigurationService && inlineCompletion.completeBracketPairs) {\n                insertText = closeBrackets(insertText, range.getStartPosition(), textModel, languageConfigurationService);\n                // Modify range depending on if brackets are added or removed\n                const diff = insertText.length - inlineCompletion.insertText.length;\n                if (diff !== 0) {\n                    range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn + diff);\n                }\n            }\n            snippetInfo = undefined;\n        }\n        else if ('snippet' in inlineCompletion.insertText) {\n            const preBracketCompletionLength = inlineCompletion.insertText.snippet.length;\n            if (languageConfigurationService && inlineCompletion.completeBracketPairs) {\n                inlineCompletion.insertText.snippet = closeBrackets(inlineCompletion.insertText.snippet, range.getStartPosition(), textModel, languageConfigurationService);\n                // Modify range depending on if brackets are added or removed\n                const diff = inlineCompletion.insertText.snippet.length - preBracketCompletionLength;\n                if (diff !== 0) {\n                    range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn + diff);\n                }\n            }\n            const snippet = new SnippetParser().parse(inlineCompletion.insertText.snippet);\n            if (snippet.children.length === 1 && snippet.children[0] instanceof Text) {\n                insertText = snippet.children[0].value;\n                snippetInfo = undefined;\n            }\n            else {\n                insertText = snippet.toString();\n                snippetInfo = {\n                    snippet: inlineCompletion.insertText.snippet,\n                    range: range\n                };\n            }\n        }\n        else {\n            assertNever(inlineCompletion.insertText);\n        }\n        return new InlineCompletionItem(insertText, inlineCompletion.command, range, insertText, snippetInfo, inlineCompletion.additionalTextEdits || getReadonlyEmptyArray(), inlineCompletion, source);\n    }\n    constructor(filterText, command, range, insertText, snippetInfo, additionalTextEdits, \n    /**\n     * A reference to the original inline completion this inline completion has been constructed from.\n     * Used for event data to ensure referential equality.\n    */\n    sourceInlineCompletion, \n    /**\n     * A reference to the original inline completion list this inline completion has been constructed from.\n     * Used for event data to ensure referential equality.\n    */\n    source) {\n        this.filterText = filterText;\n        this.command = command;\n        this.range = range;\n        this.insertText = insertText;\n        this.snippetInfo = snippetInfo;\n        this.additionalTextEdits = additionalTextEdits;\n        this.sourceInlineCompletion = sourceInlineCompletion;\n        this.source = source;\n        filterText = filterText.replace(/\\r\\n|\\r/g, '\\n');\n        insertText = filterText.replace(/\\r\\n|\\r/g, '\\n');\n    }\n    withRange(updatedRange) {\n        return new InlineCompletionItem(this.filterText, this.command, updatedRange, this.insertText, this.snippetInfo, this.additionalTextEdits, this.sourceInlineCompletion, this.source);\n    }\n    hash() {\n        return JSON.stringify({ insertText: this.insertText, range: this.range.toString() });\n    }\n}\nfunction getDefaultRange(position, model) {\n    const word = model.getWordAtPosition(position);\n    const maxColumn = model.getLineMaxColumn(position.lineNumber);\n    // By default, always replace up until the end of the current line.\n    // This default might be subject to change!\n    return word\n        ? new Range(position.lineNumber, word.startColumn, position.lineNumber, maxColumn)\n        : Range.fromPositions(position, position.with(undefined, maxColumn));\n}\nfunction closeBrackets(text, position, model, languageConfigurationService) {\n    const lineStart = model.getLineContent(position.lineNumber).substring(0, position.column - 1);\n    const newLine = lineStart + text;\n    const newTokens = model.tokenization.tokenizeLineWithEdit(position, newLine.length - (position.column - 1), text);\n    const slicedTokens = newTokens === null || newTokens === void 0 ? void 0 : newTokens.sliceAndInflate(position.column - 1, newLine.length, 0);\n    if (!slicedTokens) {\n        return text;\n    }\n    const newText = fixBracketsInLine(slicedTokens, languageConfigurationService);\n    return newText;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LcsDiff } from '../../../../base/common/diff/diff.js';\nimport { commonPrefixLength, getLeadingWhitespace } from '../../../../base/common/strings.js';\nimport { Range } from '../../../common/core/range.js';\nimport { TextLength } from '../../../common/core/textLength.js';\nimport { SingleTextEdit } from '../../../common/core/textEdit.js';\nimport { GhostText, GhostTextPart } from './ghostText.js';\nexport function singleTextRemoveCommonPrefix(edit, model, validModelRange) {\n    const modelRange = validModelRange ? edit.range.intersectRanges(validModelRange) : edit.range;\n    if (!modelRange) {\n        return edit;\n    }\n    const valueToReplace = model.getValueInRange(modelRange, 1 /* EndOfLinePreference.LF */);\n    const commonPrefixLen = commonPrefixLength(valueToReplace, edit.text);\n    const start = TextLength.ofText(valueToReplace.substring(0, commonPrefixLen)).addToPosition(edit.range.getStartPosition());\n    const text = edit.text.substring(commonPrefixLen);\n    const range = Range.fromPositions(start, edit.range.getEndPosition());\n    return new SingleTextEdit(range, text);\n}\nexport function singleTextEditAugments(edit, base) {\n    // The augmented completion must replace the base range, but can replace even more\n    return edit.text.startsWith(base.text) && rangeExtends(edit.range, base.range);\n}\n/**\n * @param previewSuffixLength Sets where to split `inlineCompletion.text`.\n * \tIf the text is `hello` and the suffix length is 2, the non-preview part is `hel` and the preview-part is `lo`.\n*/\nexport function computeGhostText(edit, model, mode, cursorPosition, previewSuffixLength = 0) {\n    let e = singleTextRemoveCommonPrefix(edit, model);\n    if (e.range.endLineNumber !== e.range.startLineNumber) {\n        // This edit might span multiple lines, but the first lines must be a common prefix.\n        return undefined;\n    }\n    const sourceLine = model.getLineContent(e.range.startLineNumber);\n    const sourceIndentationLength = getLeadingWhitespace(sourceLine).length;\n    const suggestionTouchesIndentation = e.range.startColumn - 1 <= sourceIndentationLength;\n    if (suggestionTouchesIndentation) {\n        // source:      ··········[······abc]\n        //                         ^^^^^^^^^ inlineCompletion.range\n        //              ^^^^^^^^^^ ^^^^^^ sourceIndentationLength\n        //                         ^^^^^^ replacedIndentation.length\n        //                               ^^^ rangeThatDoesNotReplaceIndentation\n        // inlineCompletion.text: '··foo'\n        //                         ^^ suggestionAddedIndentationLength\n        const suggestionAddedIndentationLength = getLeadingWhitespace(e.text).length;\n        const replacedIndentation = sourceLine.substring(e.range.startColumn - 1, sourceIndentationLength);\n        const [startPosition, endPosition] = [e.range.getStartPosition(), e.range.getEndPosition()];\n        const newStartPosition = startPosition.column + replacedIndentation.length <= endPosition.column\n            ? startPosition.delta(0, replacedIndentation.length)\n            : endPosition;\n        const rangeThatDoesNotReplaceIndentation = Range.fromPositions(newStartPosition, endPosition);\n        const suggestionWithoutIndentationChange = e.text.startsWith(replacedIndentation)\n            // Adds more indentation without changing existing indentation: We can add ghost text for this\n            ? e.text.substring(replacedIndentation.length)\n            // Changes or removes existing indentation. Only add ghost text for the non-indentation part.\n            : e.text.substring(suggestionAddedIndentationLength);\n        e = new SingleTextEdit(rangeThatDoesNotReplaceIndentation, suggestionWithoutIndentationChange);\n    }\n    // This is a single line string\n    const valueToBeReplaced = model.getValueInRange(e.range);\n    const changes = cachingDiff(valueToBeReplaced, e.text);\n    if (!changes) {\n        // No ghost text in case the diff would be too slow to compute\n        return undefined;\n    }\n    const lineNumber = e.range.startLineNumber;\n    const parts = new Array();\n    if (mode === 'prefix') {\n        const filteredChanges = changes.filter(c => c.originalLength === 0);\n        if (filteredChanges.length > 1 || filteredChanges.length === 1 && filteredChanges[0].originalStart !== valueToBeReplaced.length) {\n            // Prefixes only have a single change.\n            return undefined;\n        }\n    }\n    const previewStartInCompletionText = e.text.length - previewSuffixLength;\n    for (const c of changes) {\n        const insertColumn = e.range.startColumn + c.originalStart + c.originalLength;\n        if (mode === 'subwordSmart' && cursorPosition && cursorPosition.lineNumber === e.range.startLineNumber && insertColumn < cursorPosition.column) {\n            // No ghost text before cursor\n            return undefined;\n        }\n        if (c.originalLength > 0) {\n            return undefined;\n        }\n        if (c.modifiedLength === 0) {\n            continue;\n        }\n        const modifiedEnd = c.modifiedStart + c.modifiedLength;\n        const nonPreviewTextEnd = Math.max(c.modifiedStart, Math.min(modifiedEnd, previewStartInCompletionText));\n        const nonPreviewText = e.text.substring(c.modifiedStart, nonPreviewTextEnd);\n        const italicText = e.text.substring(nonPreviewTextEnd, Math.max(c.modifiedStart, modifiedEnd));\n        if (nonPreviewText.length > 0) {\n            parts.push(new GhostTextPart(insertColumn, nonPreviewText, false));\n        }\n        if (italicText.length > 0) {\n            parts.push(new GhostTextPart(insertColumn, italicText, true));\n        }\n    }\n    return new GhostText(lineNumber, parts);\n}\nfunction rangeExtends(extendingRange, rangeToExtend) {\n    return rangeToExtend.getStartPosition().equals(extendingRange.getStartPosition())\n        && rangeToExtend.getEndPosition().isBeforeOrEqual(extendingRange.getEndPosition());\n}\nlet lastRequest = undefined;\nfunction cachingDiff(originalValue, newValue) {\n    if ((lastRequest === null || lastRequest === void 0 ? void 0 : lastRequest.originalValue) === originalValue && (lastRequest === null || lastRequest === void 0 ? void 0 : lastRequest.newValue) === newValue) {\n        return lastRequest === null || lastRequest === void 0 ? void 0 : lastRequest.changes;\n    }\n    else {\n        let changes = smartDiff(originalValue, newValue, true);\n        if (changes) {\n            const deletedChars = deletedCharacters(changes);\n            if (deletedChars > 0) {\n                // For performance reasons, don't compute diff if there is nothing to improve\n                const newChanges = smartDiff(originalValue, newValue, false);\n                if (newChanges && deletedCharacters(newChanges) < deletedChars) {\n                    // Disabling smartness seems to be better here\n                    changes = newChanges;\n                }\n            }\n        }\n        lastRequest = {\n            originalValue,\n            newValue,\n            changes\n        };\n        return changes;\n    }\n}\nfunction deletedCharacters(changes) {\n    let sum = 0;\n    for (const c of changes) {\n        sum += c.originalLength;\n    }\n    return sum;\n}\n/**\n * When matching `if ()` with `if (f() = 1) { g(); }`,\n * align it like this:        `if (       )`\n * Not like this:\t\t\t  `if (  )`\n * Also not like this:\t\t  `if (             )`.\n *\n * The parenthesis are preprocessed to ensure that they match correctly.\n */\nfunction smartDiff(originalValue, newValue, smartBracketMatching) {\n    if (originalValue.length > 5000 || newValue.length > 5000) {\n        // We don't want to work on strings that are too big\n        return undefined;\n    }\n    function getMaxCharCode(val) {\n        let maxCharCode = 0;\n        for (let i = 0, len = val.length; i < len; i++) {\n            const charCode = val.charCodeAt(i);\n            if (charCode > maxCharCode) {\n                maxCharCode = charCode;\n            }\n        }\n        return maxCharCode;\n    }\n    const maxCharCode = Math.max(getMaxCharCode(originalValue), getMaxCharCode(newValue));\n    function getUniqueCharCode(id) {\n        if (id < 0) {\n            throw new Error('unexpected');\n        }\n        return maxCharCode + id + 1;\n    }\n    function getElements(source) {\n        let level = 0;\n        let group = 0;\n        const characters = new Int32Array(source.length);\n        for (let i = 0, len = source.length; i < len; i++) {\n            // TODO support more brackets\n            if (smartBracketMatching && source[i] === '(') {\n                const id = group * 100 + level;\n                characters[i] = getUniqueCharCode(2 * id);\n                level++;\n            }\n            else if (smartBracketMatching && source[i] === ')') {\n                level = Math.max(level - 1, 0);\n                const id = group * 100 + level;\n                characters[i] = getUniqueCharCode(2 * id + 1);\n                if (level === 0) {\n                    group++;\n                }\n            }\n            else {\n                characters[i] = source.charCodeAt(i);\n            }\n        }\n        return characters;\n    }\n    const elements1 = getElements(originalValue);\n    const elements2 = getElements(newValue);\n    return new LcsDiff({ getElements: () => elements1 }, { getElements: () => elements2 }).ComputeDiff(false).changes;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { equalsIfDefined, itemEquals } from '../../../../base/common/equals.js';\nimport { matchesSubString } from '../../../../base/common/filters.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { derivedOpts, disposableObservableValue, transaction } from '../../../../base/common/observable.js';\nimport { Range } from '../../../common/core/range.js';\nimport { SingleTextEdit } from '../../../common/core/textEdit.js';\nimport { TextLength } from '../../../common/core/textLength.js';\nimport { InlineCompletionTriggerKind } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { provideInlineCompletions } from './provideInlineCompletions.js';\nimport { singleTextRemoveCommonPrefix } from './singleTextEdit.js';\nlet InlineCompletionsSource = class InlineCompletionsSource extends Disposable {\n    constructor(textModel, versionId, _debounceValue, languageFeaturesService, languageConfigurationService) {\n        super();\n        this.textModel = textModel;\n        this.versionId = versionId;\n        this._debounceValue = _debounceValue;\n        this.languageFeaturesService = languageFeaturesService;\n        this.languageConfigurationService = languageConfigurationService;\n        this._updateOperation = this._register(new MutableDisposable());\n        this.inlineCompletions = disposableObservableValue('inlineCompletions', undefined);\n        this.suggestWidgetInlineCompletions = disposableObservableValue('suggestWidgetInlineCompletions', undefined);\n        this._register(this.textModel.onDidChangeContent(() => {\n            this._updateOperation.clear();\n        }));\n    }\n    fetch(position, context, activeInlineCompletion) {\n        var _a, _b;\n        const request = new UpdateRequest(position, context, this.textModel.getVersionId());\n        const target = context.selectedSuggestionInfo ? this.suggestWidgetInlineCompletions : this.inlineCompletions;\n        if ((_a = this._updateOperation.value) === null || _a === void 0 ? void 0 : _a.request.satisfies(request)) {\n            return this._updateOperation.value.promise;\n        }\n        else if ((_b = target.get()) === null || _b === void 0 ? void 0 : _b.request.satisfies(request)) {\n            return Promise.resolve(true);\n        }\n        const updateOngoing = !!this._updateOperation.value;\n        this._updateOperation.clear();\n        const source = new CancellationTokenSource();\n        const promise = (async () => {\n            const shouldDebounce = updateOngoing || context.triggerKind === InlineCompletionTriggerKind.Automatic;\n            if (shouldDebounce) {\n                // This debounces the operation\n                await wait(this._debounceValue.get(this.textModel), source.token);\n            }\n            if (source.token.isCancellationRequested || this.textModel.getVersionId() !== request.versionId) {\n                return false;\n            }\n            const startTime = new Date();\n            const updatedCompletions = await provideInlineCompletions(this.languageFeaturesService.inlineCompletionsProvider, position, this.textModel, context, source.token, this.languageConfigurationService);\n            if (source.token.isCancellationRequested || this.textModel.getVersionId() !== request.versionId) {\n                return false;\n            }\n            const endTime = new Date();\n            this._debounceValue.update(this.textModel, endTime.getTime() - startTime.getTime());\n            const completions = new UpToDateInlineCompletions(updatedCompletions, request, this.textModel, this.versionId);\n            if (activeInlineCompletion) {\n                const asInlineCompletion = activeInlineCompletion.toInlineCompletion(undefined);\n                if (activeInlineCompletion.canBeReused(this.textModel, position) && !updatedCompletions.has(asInlineCompletion)) {\n                    completions.prepend(activeInlineCompletion.inlineCompletion, asInlineCompletion.range, true);\n                }\n            }\n            this._updateOperation.clear();\n            transaction(tx => {\n                /** @description Update completions with provider result */\n                target.set(completions, tx);\n            });\n            return true;\n        })();\n        const updateOperation = new UpdateOperation(request, source, promise);\n        this._updateOperation.value = updateOperation;\n        return promise;\n    }\n    clear(tx) {\n        this._updateOperation.clear();\n        this.inlineCompletions.set(undefined, tx);\n        this.suggestWidgetInlineCompletions.set(undefined, tx);\n    }\n    clearSuggestWidgetInlineCompletions(tx) {\n        var _a;\n        if ((_a = this._updateOperation.value) === null || _a === void 0 ? void 0 : _a.request.context.selectedSuggestionInfo) {\n            this._updateOperation.clear();\n        }\n        this.suggestWidgetInlineCompletions.set(undefined, tx);\n    }\n    cancelUpdate() {\n        this._updateOperation.clear();\n    }\n};\nInlineCompletionsSource = __decorate([\n    __param(3, ILanguageFeaturesService),\n    __param(4, ILanguageConfigurationService)\n], InlineCompletionsSource);\nexport { InlineCompletionsSource };\nfunction wait(ms, cancellationToken) {\n    return new Promise(resolve => {\n        let d = undefined;\n        const handle = setTimeout(() => {\n            if (d) {\n                d.dispose();\n            }\n            resolve();\n        }, ms);\n        if (cancellationToken) {\n            d = cancellationToken.onCancellationRequested(() => {\n                clearTimeout(handle);\n                if (d) {\n                    d.dispose();\n                }\n                resolve();\n            });\n        }\n    });\n}\nclass UpdateRequest {\n    constructor(position, context, versionId) {\n        this.position = position;\n        this.context = context;\n        this.versionId = versionId;\n    }\n    satisfies(other) {\n        return this.position.equals(other.position)\n            && equalsIfDefined(this.context.selectedSuggestionInfo, other.context.selectedSuggestionInfo, itemEquals())\n            && (other.context.triggerKind === InlineCompletionTriggerKind.Automatic\n                || this.context.triggerKind === InlineCompletionTriggerKind.Explicit)\n            && this.versionId === other.versionId;\n    }\n}\nclass UpdateOperation {\n    constructor(request, cancellationTokenSource, promise) {\n        this.request = request;\n        this.cancellationTokenSource = cancellationTokenSource;\n        this.promise = promise;\n    }\n    dispose() {\n        this.cancellationTokenSource.cancel();\n    }\n}\nexport class UpToDateInlineCompletions {\n    get inlineCompletions() { return this._inlineCompletions; }\n    constructor(inlineCompletionProviderResult, request, _textModel, _versionId) {\n        this.inlineCompletionProviderResult = inlineCompletionProviderResult;\n        this.request = request;\n        this._textModel = _textModel;\n        this._versionId = _versionId;\n        this._refCount = 1;\n        this._prependedInlineCompletionItems = [];\n        const ids = _textModel.deltaDecorations([], inlineCompletionProviderResult.completions.map(i => ({\n            range: i.range,\n            options: {\n                description: 'inline-completion-tracking-range'\n            },\n        })));\n        this._inlineCompletions = inlineCompletionProviderResult.completions.map((i, index) => new InlineCompletionWithUpdatedRange(i, ids[index], this._textModel, this._versionId));\n    }\n    clone() {\n        this._refCount++;\n        return this;\n    }\n    dispose() {\n        this._refCount--;\n        if (this._refCount === 0) {\n            setTimeout(() => {\n                // To fix https://github.com/microsoft/vscode/issues/188348\n                if (!this._textModel.isDisposed()) {\n                    // This is just cleanup. It's ok if it happens with a delay.\n                    this._textModel.deltaDecorations(this._inlineCompletions.map(i => i.decorationId), []);\n                }\n            }, 0);\n            this.inlineCompletionProviderResult.dispose();\n            for (const i of this._prependedInlineCompletionItems) {\n                i.source.removeRef();\n            }\n        }\n    }\n    prepend(inlineCompletion, range, addRefToSource) {\n        if (addRefToSource) {\n            inlineCompletion.source.addRef();\n        }\n        const id = this._textModel.deltaDecorations([], [{\n                range,\n                options: {\n                    description: 'inline-completion-tracking-range'\n                },\n            }])[0];\n        this._inlineCompletions.unshift(new InlineCompletionWithUpdatedRange(inlineCompletion, id, this._textModel, this._versionId));\n        this._prependedInlineCompletionItems.push(inlineCompletion);\n    }\n}\nexport class InlineCompletionWithUpdatedRange {\n    get forwardStable() {\n        var _a;\n        return (_a = this.inlineCompletion.source.inlineCompletions.enableForwardStability) !== null && _a !== void 0 ? _a : false;\n    }\n    constructor(inlineCompletion, decorationId, _textModel, _modelVersion) {\n        this.inlineCompletion = inlineCompletion;\n        this.decorationId = decorationId;\n        this._textModel = _textModel;\n        this._modelVersion = _modelVersion;\n        this.semanticId = JSON.stringify([\n            this.inlineCompletion.filterText,\n            this.inlineCompletion.insertText,\n            this.inlineCompletion.range.getStartPosition().toString()\n        ]);\n        this._updatedRange = derivedOpts({ owner: this, equalsFn: Range.equalsRange }, reader => {\n            this._modelVersion.read(reader);\n            return this._textModel.getDecorationRange(this.decorationId);\n        });\n    }\n    toInlineCompletion(reader) {\n        var _a;\n        return this.inlineCompletion.withRange((_a = this._updatedRange.read(reader)) !== null && _a !== void 0 ? _a : emptyRange);\n    }\n    toSingleTextEdit(reader) {\n        var _a;\n        return new SingleTextEdit((_a = this._updatedRange.read(reader)) !== null && _a !== void 0 ? _a : emptyRange, this.inlineCompletion.insertText);\n    }\n    isVisible(model, cursorPosition, reader) {\n        const minimizedReplacement = singleTextRemoveCommonPrefix(this._toFilterTextReplacement(reader), model);\n        const updatedRange = this._updatedRange.read(reader);\n        if (!updatedRange\n            || !this.inlineCompletion.range.getStartPosition().equals(updatedRange.getStartPosition())\n            || cursorPosition.lineNumber !== minimizedReplacement.range.startLineNumber) {\n            return false;\n        }\n        // We might consider comparing by .toLowerText, but this requires GhostTextReplacement\n        const originalValue = model.getValueInRange(minimizedReplacement.range, 1 /* EndOfLinePreference.LF */);\n        const filterText = minimizedReplacement.text;\n        const cursorPosIndex = Math.max(0, cursorPosition.column - minimizedReplacement.range.startColumn);\n        let filterTextBefore = filterText.substring(0, cursorPosIndex);\n        let filterTextAfter = filterText.substring(cursorPosIndex);\n        let originalValueBefore = originalValue.substring(0, cursorPosIndex);\n        let originalValueAfter = originalValue.substring(cursorPosIndex);\n        const originalValueIndent = model.getLineIndentColumn(minimizedReplacement.range.startLineNumber);\n        if (minimizedReplacement.range.startColumn <= originalValueIndent) {\n            // Remove indentation\n            originalValueBefore = originalValueBefore.trimStart();\n            if (originalValueBefore.length === 0) {\n                originalValueAfter = originalValueAfter.trimStart();\n            }\n            filterTextBefore = filterTextBefore.trimStart();\n            if (filterTextBefore.length === 0) {\n                filterTextAfter = filterTextAfter.trimStart();\n            }\n        }\n        return filterTextBefore.startsWith(originalValueBefore)\n            && !!matchesSubString(originalValueAfter, filterTextAfter);\n    }\n    canBeReused(model, position) {\n        const updatedRange = this._updatedRange.read(undefined);\n        const result = !!updatedRange\n            && updatedRange.containsPosition(position)\n            && this.isVisible(model, position, undefined)\n            && TextLength.ofRange(updatedRange).isGreaterThanOrEqualTo(TextLength.ofRange(this.inlineCompletion.range));\n        return result;\n    }\n    _toFilterTextReplacement(reader) {\n        var _a;\n        return new SingleTextEdit((_a = this._updatedRange.read(reader)) !== null && _a !== void 0 ? _a : emptyRange, this.inlineCompletion.filterText);\n    }\n}\nconst emptyRange = new Range(1, 1, 1, 1);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Permutation } from '../../../../base/common/arrays.js';\nimport { mapFindFirst } from '../../../../base/common/arraysFind.js';\nimport { itemsEquals } from '../../../../base/common/equals.js';\nimport { BugIndicatingError, onUnexpectedError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, derived, derivedHandleChanges, derivedOpts, observableSignal, observableValue, recomputeInitiallyAndOnChange, subtransaction, transaction } from '../../../../base/common/observable.js';\nimport { commonPrefixLength, splitLinesIncludeSeparators } from '../../../../base/common/strings.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { SingleTextEdit, TextEdit } from '../../../common/core/textEdit.js';\nimport { TextLength } from '../../../common/core/textLength.js';\nimport { InlineCompletionTriggerKind } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { GhostText, ghostTextOrReplacementEquals, ghostTextsOrReplacementsEqual } from './ghostText.js';\nimport { InlineCompletionsSource } from './inlineCompletionsSource.js';\nimport { computeGhostText, singleTextEditAugments, singleTextRemoveCommonPrefix } from './singleTextEdit.js';\nimport { addPositions, subtractPositions } from './utils.js';\nimport { SnippetController2 } from '../../snippet/browser/snippetController2.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nexport var VersionIdChangeReason;\n(function (VersionIdChangeReason) {\n    VersionIdChangeReason[VersionIdChangeReason[\"Undo\"] = 0] = \"Undo\";\n    VersionIdChangeReason[VersionIdChangeReason[\"Redo\"] = 1] = \"Redo\";\n    VersionIdChangeReason[VersionIdChangeReason[\"AcceptWord\"] = 2] = \"AcceptWord\";\n    VersionIdChangeReason[VersionIdChangeReason[\"Other\"] = 3] = \"Other\";\n})(VersionIdChangeReason || (VersionIdChangeReason = {}));\nlet InlineCompletionsModel = class InlineCompletionsModel extends Disposable {\n    get isAcceptingPartially() { return this._isAcceptingPartially; }\n    constructor(textModel, selectedSuggestItem, textModelVersionId, _positions, _debounceValue, _suggestPreviewEnabled, _suggestPreviewMode, _inlineSuggestMode, _enabled, _instantiationService, _commandService, _languageConfigurationService) {\n        super();\n        this.textModel = textModel;\n        this.selectedSuggestItem = selectedSuggestItem;\n        this.textModelVersionId = textModelVersionId;\n        this._positions = _positions;\n        this._debounceValue = _debounceValue;\n        this._suggestPreviewEnabled = _suggestPreviewEnabled;\n        this._suggestPreviewMode = _suggestPreviewMode;\n        this._inlineSuggestMode = _inlineSuggestMode;\n        this._enabled = _enabled;\n        this._instantiationService = _instantiationService;\n        this._commandService = _commandService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._source = this._register(this._instantiationService.createInstance(InlineCompletionsSource, this.textModel, this.textModelVersionId, this._debounceValue));\n        this._isActive = observableValue(this, false);\n        this._forceUpdateExplicitlySignal = observableSignal(this);\n        // We use a semantic id to keep the same inline completion selected even if the provider reorders the completions.\n        this._selectedInlineCompletionId = observableValue(this, undefined);\n        this._primaryPosition = derived(this, reader => { var _a; return (_a = this._positions.read(reader)[0]) !== null && _a !== void 0 ? _a : new Position(1, 1); });\n        this._isAcceptingPartially = false;\n        this._preserveCurrentCompletionReasons = new Set([\n            VersionIdChangeReason.Redo,\n            VersionIdChangeReason.Undo,\n            VersionIdChangeReason.AcceptWord,\n        ]);\n        this._fetchInlineCompletionsPromise = derivedHandleChanges({\n            owner: this,\n            createEmptyChangeSummary: () => ({\n                preserveCurrentCompletion: false,\n                inlineCompletionTriggerKind: InlineCompletionTriggerKind.Automatic\n            }),\n            handleChange: (ctx, changeSummary) => {\n                /** @description fetch inline completions */\n                if (ctx.didChange(this.textModelVersionId) && this._preserveCurrentCompletionReasons.has(ctx.change)) {\n                    changeSummary.preserveCurrentCompletion = true;\n                }\n                else if (ctx.didChange(this._forceUpdateExplicitlySignal)) {\n                    changeSummary.inlineCompletionTriggerKind = InlineCompletionTriggerKind.Explicit;\n                }\n                return true;\n            },\n        }, (reader, changeSummary) => {\n            this._forceUpdateExplicitlySignal.read(reader);\n            const shouldUpdate = (this._enabled.read(reader) && this.selectedSuggestItem.read(reader)) || this._isActive.read(reader);\n            if (!shouldUpdate) {\n                this._source.cancelUpdate();\n                return undefined;\n            }\n            this.textModelVersionId.read(reader); // Refetch on text change\n            const suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.get();\n            const suggestItem = this.selectedSuggestItem.read(reader);\n            if (suggestWidgetInlineCompletions && !suggestItem) {\n                const inlineCompletions = this._source.inlineCompletions.get();\n                transaction(tx => {\n                    /** @description Seed inline completions with (newer) suggest widget inline completions */\n                    if (!inlineCompletions || suggestWidgetInlineCompletions.request.versionId > inlineCompletions.request.versionId) {\n                        this._source.inlineCompletions.set(suggestWidgetInlineCompletions.clone(), tx);\n                    }\n                    this._source.clearSuggestWidgetInlineCompletions(tx);\n                });\n            }\n            const cursorPosition = this._primaryPosition.read(reader);\n            const context = {\n                triggerKind: changeSummary.inlineCompletionTriggerKind,\n                selectedSuggestionInfo: suggestItem === null || suggestItem === void 0 ? void 0 : suggestItem.toSelectedSuggestionInfo(),\n            };\n            const itemToPreserveCandidate = this.selectedInlineCompletion.get();\n            const itemToPreserve = changeSummary.preserveCurrentCompletion || (itemToPreserveCandidate === null || itemToPreserveCandidate === void 0 ? void 0 : itemToPreserveCandidate.forwardStable)\n                ? itemToPreserveCandidate : undefined;\n            return this._source.fetch(cursorPosition, context, itemToPreserve);\n        });\n        this._filteredInlineCompletionItems = derivedOpts({ owner: this, equalsFn: itemsEquals() }, reader => {\n            const c = this._source.inlineCompletions.read(reader);\n            if (!c) {\n                return [];\n            }\n            const cursorPosition = this._primaryPosition.read(reader);\n            const filteredCompletions = c.inlineCompletions.filter(c => c.isVisible(this.textModel, cursorPosition, reader));\n            return filteredCompletions;\n        });\n        this.selectedInlineCompletionIndex = derived(this, (reader) => {\n            const selectedInlineCompletionId = this._selectedInlineCompletionId.read(reader);\n            const filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n            const idx = this._selectedInlineCompletionId === undefined ? -1\n                : filteredCompletions.findIndex(v => v.semanticId === selectedInlineCompletionId);\n            if (idx === -1) {\n                // Reset the selection so that the selection does not jump back when it appears again\n                this._selectedInlineCompletionId.set(undefined, undefined);\n                return 0;\n            }\n            return idx;\n        });\n        this.selectedInlineCompletion = derived(this, (reader) => {\n            const filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n            const idx = this.selectedInlineCompletionIndex.read(reader);\n            return filteredCompletions[idx];\n        });\n        this.activeCommands = derivedOpts({ owner: this, equalsFn: itemsEquals() }, r => { var _a, _b; return (_b = (_a = this.selectedInlineCompletion.read(r)) === null || _a === void 0 ? void 0 : _a.inlineCompletion.source.inlineCompletions.commands) !== null && _b !== void 0 ? _b : []; });\n        this.lastTriggerKind = this._source.inlineCompletions.map(this, v => v === null || v === void 0 ? void 0 : v.request.context.triggerKind);\n        this.inlineCompletionsCount = derived(this, reader => {\n            if (this.lastTriggerKind.read(reader) === InlineCompletionTriggerKind.Explicit) {\n                return this._filteredInlineCompletionItems.read(reader).length;\n            }\n            else {\n                return undefined;\n            }\n        });\n        this.state = derivedOpts({\n            owner: this,\n            equalsFn: (a, b) => {\n                if (!a || !b) {\n                    return a === b;\n                }\n                return ghostTextsOrReplacementsEqual(a.ghostTexts, b.ghostTexts)\n                    && a.inlineCompletion === b.inlineCompletion\n                    && a.suggestItem === b.suggestItem;\n            }\n        }, (reader) => {\n            var _a, _b;\n            const model = this.textModel;\n            const suggestItem = this.selectedSuggestItem.read(reader);\n            if (suggestItem) {\n                const suggestCompletionEdit = singleTextRemoveCommonPrefix(suggestItem.toSingleTextEdit(), model);\n                const augmentation = this._computeAugmentation(suggestCompletionEdit, reader);\n                const isSuggestionPreviewEnabled = this._suggestPreviewEnabled.read(reader);\n                if (!isSuggestionPreviewEnabled && !augmentation) {\n                    return undefined;\n                }\n                const fullEdit = (_a = augmentation === null || augmentation === void 0 ? void 0 : augmentation.edit) !== null && _a !== void 0 ? _a : suggestCompletionEdit;\n                const fullEditPreviewLength = augmentation ? augmentation.edit.text.length - suggestCompletionEdit.text.length : 0;\n                const mode = this._suggestPreviewMode.read(reader);\n                const positions = this._positions.read(reader);\n                const edits = [fullEdit, ...getSecondaryEdits(this.textModel, positions, fullEdit)];\n                const ghostTexts = edits\n                    .map((edit, idx) => computeGhostText(edit, model, mode, positions[idx], fullEditPreviewLength))\n                    .filter(isDefined);\n                const primaryGhostText = (_b = ghostTexts[0]) !== null && _b !== void 0 ? _b : new GhostText(fullEdit.range.endLineNumber, []);\n                return { edits, primaryGhostText, ghostTexts, inlineCompletion: augmentation === null || augmentation === void 0 ? void 0 : augmentation.completion, suggestItem };\n            }\n            else {\n                if (!this._isActive.read(reader)) {\n                    return undefined;\n                }\n                const inlineCompletion = this.selectedInlineCompletion.read(reader);\n                if (!inlineCompletion) {\n                    return undefined;\n                }\n                const replacement = inlineCompletion.toSingleTextEdit(reader);\n                const mode = this._inlineSuggestMode.read(reader);\n                const positions = this._positions.read(reader);\n                const edits = [replacement, ...getSecondaryEdits(this.textModel, positions, replacement)];\n                const ghostTexts = edits\n                    .map((edit, idx) => computeGhostText(edit, model, mode, positions[idx], 0))\n                    .filter(isDefined);\n                if (!ghostTexts[0]) {\n                    return undefined;\n                }\n                return { edits, primaryGhostText: ghostTexts[0], ghostTexts, inlineCompletion, suggestItem: undefined };\n            }\n        });\n        this.ghostTexts = derivedOpts({\n            owner: this,\n            equalsFn: ghostTextsOrReplacementsEqual\n        }, reader => {\n            const v = this.state.read(reader);\n            if (!v) {\n                return undefined;\n            }\n            return v.ghostTexts;\n        });\n        this.primaryGhostText = derivedOpts({\n            owner: this,\n            equalsFn: ghostTextOrReplacementEquals\n        }, reader => {\n            const v = this.state.read(reader);\n            if (!v) {\n                return undefined;\n            }\n            return v === null || v === void 0 ? void 0 : v.primaryGhostText;\n        });\n        this._register(recomputeInitiallyAndOnChange(this._fetchInlineCompletionsPromise));\n        let lastItem = undefined;\n        this._register(autorun(reader => {\n            var _a, _b;\n            /** @description call handleItemDidShow */\n            const item = this.state.read(reader);\n            const completion = item === null || item === void 0 ? void 0 : item.inlineCompletion;\n            if ((completion === null || completion === void 0 ? void 0 : completion.semanticId) !== (lastItem === null || lastItem === void 0 ? void 0 : lastItem.semanticId)) {\n                lastItem = completion;\n                if (completion) {\n                    const i = completion.inlineCompletion;\n                    const src = i.source;\n                    (_b = (_a = src.provider).handleItemDidShow) === null || _b === void 0 ? void 0 : _b.call(_a, src.inlineCompletions, i.sourceInlineCompletion, i.insertText);\n                }\n            }\n        }));\n    }\n    async trigger(tx) {\n        this._isActive.set(true, tx);\n        await this._fetchInlineCompletionsPromise.get();\n    }\n    async triggerExplicitly(tx) {\n        subtransaction(tx, tx => {\n            this._isActive.set(true, tx);\n            this._forceUpdateExplicitlySignal.trigger(tx);\n        });\n        await this._fetchInlineCompletionsPromise.get();\n    }\n    stop(tx) {\n        subtransaction(tx, tx => {\n            this._isActive.set(false, tx);\n            this._source.clear(tx);\n        });\n    }\n    _computeAugmentation(suggestCompletion, reader) {\n        const model = this.textModel;\n        const suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.read(reader);\n        const candidateInlineCompletions = suggestWidgetInlineCompletions\n            ? suggestWidgetInlineCompletions.inlineCompletions\n            : [this.selectedInlineCompletion.read(reader)].filter(isDefined);\n        const augmentedCompletion = mapFindFirst(candidateInlineCompletions, completion => {\n            let r = completion.toSingleTextEdit(reader);\n            r = singleTextRemoveCommonPrefix(r, model, Range.fromPositions(r.range.getStartPosition(), suggestCompletion.range.getEndPosition()));\n            return singleTextEditAugments(r, suggestCompletion) ? { completion, edit: r } : undefined;\n        });\n        return augmentedCompletion;\n    }\n    async _deltaSelectedInlineCompletionIndex(delta) {\n        await this.triggerExplicitly();\n        const completions = this._filteredInlineCompletionItems.get() || [];\n        if (completions.length > 0) {\n            const newIdx = (this.selectedInlineCompletionIndex.get() + delta + completions.length) % completions.length;\n            this._selectedInlineCompletionId.set(completions[newIdx].semanticId, undefined);\n        }\n        else {\n            this._selectedInlineCompletionId.set(undefined, undefined);\n        }\n    }\n    async next() {\n        await this._deltaSelectedInlineCompletionIndex(1);\n    }\n    async previous() {\n        await this._deltaSelectedInlineCompletionIndex(-1);\n    }\n    async accept(editor) {\n        var _a;\n        if (editor.getModel() !== this.textModel) {\n            throw new BugIndicatingError();\n        }\n        const state = this.state.get();\n        if (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n            return;\n        }\n        const completion = state.inlineCompletion.toInlineCompletion(undefined);\n        editor.pushUndoStop();\n        if (completion.snippetInfo) {\n            editor.executeEdits('inlineSuggestion.accept', [\n                EditOperation.replace(completion.range, ''),\n                ...completion.additionalTextEdits\n            ]);\n            editor.setPosition(completion.snippetInfo.range.getStartPosition(), 'inlineCompletionAccept');\n            (_a = SnippetController2.get(editor)) === null || _a === void 0 ? void 0 : _a.insert(completion.snippetInfo.snippet, { undoStopBefore: false });\n        }\n        else {\n            const edits = state.edits;\n            const selections = getEndPositionsAfterApplying(edits).map(p => Selection.fromPositions(p));\n            editor.executeEdits('inlineSuggestion.accept', [\n                ...edits.map(edit => EditOperation.replace(edit.range, edit.text)),\n                ...completion.additionalTextEdits\n            ]);\n            editor.setSelections(selections, 'inlineCompletionAccept');\n        }\n        if (completion.command) {\n            // Make sure the completion list will not be disposed.\n            completion.source.addRef();\n        }\n        // Reset before invoking the command, since the command might cause a follow up trigger.\n        transaction(tx => {\n            this._source.clear(tx);\n            // Potentially, isActive will get set back to true by the typing or accept inline suggest event\n            // if automatic inline suggestions are enabled.\n            this._isActive.set(false, tx);\n        });\n        if (completion.command) {\n            await this._commandService\n                .executeCommand(completion.command.id, ...(completion.command.arguments || []))\n                .then(undefined, onUnexpectedExternalError);\n            completion.source.removeRef();\n        }\n    }\n    async acceptNextWord(editor) {\n        await this._acceptNext(editor, (pos, text) => {\n            const langId = this.textModel.getLanguageIdAtPosition(pos.lineNumber, pos.column);\n            const config = this._languageConfigurationService.getLanguageConfiguration(langId);\n            const wordRegExp = new RegExp(config.wordDefinition.source, config.wordDefinition.flags.replace('g', ''));\n            const m1 = text.match(wordRegExp);\n            let acceptUntilIndexExclusive = 0;\n            if (m1 && m1.index !== undefined) {\n                if (m1.index === 0) {\n                    acceptUntilIndexExclusive = m1[0].length;\n                }\n                else {\n                    acceptUntilIndexExclusive = m1.index;\n                }\n            }\n            else {\n                acceptUntilIndexExclusive = text.length;\n            }\n            const wsRegExp = /\\s+/g;\n            const m2 = wsRegExp.exec(text);\n            if (m2 && m2.index !== undefined) {\n                if (m2.index + m2[0].length < acceptUntilIndexExclusive) {\n                    acceptUntilIndexExclusive = m2.index + m2[0].length;\n                }\n            }\n            return acceptUntilIndexExclusive;\n        }, 0 /* PartialAcceptTriggerKind.Word */);\n    }\n    async acceptNextLine(editor) {\n        await this._acceptNext(editor, (pos, text) => {\n            const m = text.match(/\\n/);\n            if (m && m.index !== undefined) {\n                return m.index + 1;\n            }\n            return text.length;\n        }, 1 /* PartialAcceptTriggerKind.Line */);\n    }\n    async _acceptNext(editor, getAcceptUntilIndex, kind) {\n        if (editor.getModel() !== this.textModel) {\n            throw new BugIndicatingError();\n        }\n        const state = this.state.get();\n        if (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n            return;\n        }\n        const ghostText = state.primaryGhostText;\n        const completion = state.inlineCompletion.toInlineCompletion(undefined);\n        if (completion.snippetInfo || completion.filterText !== completion.insertText) {\n            // not in WYSIWYG mode, partial commit might change completion, thus it is not supported\n            await this.accept(editor);\n            return;\n        }\n        const firstPart = ghostText.parts[0];\n        const ghostTextPos = new Position(ghostText.lineNumber, firstPart.column);\n        const ghostTextVal = firstPart.text;\n        const acceptUntilIndexExclusive = getAcceptUntilIndex(ghostTextPos, ghostTextVal);\n        if (acceptUntilIndexExclusive === ghostTextVal.length && ghostText.parts.length === 1) {\n            this.accept(editor);\n            return;\n        }\n        const partialGhostTextVal = ghostTextVal.substring(0, acceptUntilIndexExclusive);\n        const positions = this._positions.get();\n        const cursorPosition = positions[0];\n        // Executing the edit might free the completion, so we have to hold a reference on it.\n        completion.source.addRef();\n        try {\n            this._isAcceptingPartially = true;\n            try {\n                editor.pushUndoStop();\n                const replaceRange = Range.fromPositions(cursorPosition, ghostTextPos);\n                const newText = editor.getModel().getValueInRange(replaceRange) + partialGhostTextVal;\n                const primaryEdit = new SingleTextEdit(replaceRange, newText);\n                const edits = [primaryEdit, ...getSecondaryEdits(this.textModel, positions, primaryEdit)];\n                const selections = getEndPositionsAfterApplying(edits).map(p => Selection.fromPositions(p));\n                editor.executeEdits('inlineSuggestion.accept', edits.map(edit => EditOperation.replace(edit.range, edit.text)));\n                editor.setSelections(selections, 'inlineCompletionPartialAccept');\n            }\n            finally {\n                this._isAcceptingPartially = false;\n            }\n            if (completion.source.provider.handlePartialAccept) {\n                const acceptedRange = Range.fromPositions(completion.range.getStartPosition(), TextLength.ofText(partialGhostTextVal).addToPosition(ghostTextPos));\n                // This assumes that the inline completion and the model use the same EOL style.\n                const text = editor.getModel().getValueInRange(acceptedRange, 1 /* EndOfLinePreference.LF */);\n                completion.source.provider.handlePartialAccept(completion.source.inlineCompletions, completion.sourceInlineCompletion, text.length, {\n                    kind,\n                });\n            }\n        }\n        finally {\n            completion.source.removeRef();\n        }\n    }\n    handleSuggestAccepted(item) {\n        var _a, _b;\n        const itemEdit = singleTextRemoveCommonPrefix(item.toSingleTextEdit(), this.textModel);\n        const augmentedCompletion = this._computeAugmentation(itemEdit, undefined);\n        if (!augmentedCompletion) {\n            return;\n        }\n        const inlineCompletion = augmentedCompletion.completion.inlineCompletion;\n        (_b = (_a = inlineCompletion.source.provider).handlePartialAccept) === null || _b === void 0 ? void 0 : _b.call(_a, inlineCompletion.source.inlineCompletions, inlineCompletion.sourceInlineCompletion, itemEdit.text.length, {\n            kind: 2 /* PartialAcceptTriggerKind.Suggest */,\n        });\n    }\n};\nInlineCompletionsModel = __decorate([\n    __param(9, IInstantiationService),\n    __param(10, ICommandService),\n    __param(11, ILanguageConfigurationService)\n], InlineCompletionsModel);\nexport { InlineCompletionsModel };\nexport function getSecondaryEdits(textModel, positions, primaryEdit) {\n    if (positions.length === 1) {\n        // No secondary cursor positions\n        return [];\n    }\n    const primaryPosition = positions[0];\n    const secondaryPositions = positions.slice(1);\n    const primaryEditStartPosition = primaryEdit.range.getStartPosition();\n    const primaryEditEndPosition = primaryEdit.range.getEndPosition();\n    const replacedTextAfterPrimaryCursor = textModel.getValueInRange(Range.fromPositions(primaryPosition, primaryEditEndPosition));\n    const positionWithinTextEdit = subtractPositions(primaryPosition, primaryEditStartPosition);\n    if (positionWithinTextEdit.lineNumber < 1) {\n        onUnexpectedError(new BugIndicatingError(`positionWithinTextEdit line number should be bigger than 0.\n\t\t\tInvalid subtraction between ${primaryPosition.toString()} and ${primaryEditStartPosition.toString()}`));\n        return [];\n    }\n    const secondaryEditText = substringPos(primaryEdit.text, positionWithinTextEdit);\n    return secondaryPositions.map(pos => {\n        const posEnd = addPositions(subtractPositions(pos, primaryEditStartPosition), primaryEditEndPosition);\n        const textAfterSecondaryCursor = textModel.getValueInRange(Range.fromPositions(pos, posEnd));\n        const l = commonPrefixLength(replacedTextAfterPrimaryCursor, textAfterSecondaryCursor);\n        const range = Range.fromPositions(pos, pos.delta(0, l));\n        return new SingleTextEdit(range, secondaryEditText);\n    });\n}\nfunction substringPos(text, pos) {\n    let subtext = '';\n    const lines = splitLinesIncludeSeparators(text);\n    for (let i = pos.lineNumber - 1; i < lines.length; i++) {\n        subtext += lines[i].substring(i === pos.lineNumber - 1 ? pos.column - 1 : 0);\n    }\n    return subtext;\n}\nfunction getEndPositionsAfterApplying(edits) {\n    const sortPerm = Permutation.createSortPermutation(edits, (edit1, edit2) => Range.compareRangesUsingStarts(edit1.range, edit2.range));\n    const edit = new TextEdit(sortPerm.apply(edits));\n    const sortedNewRanges = edit.getNewRanges();\n    const newRanges = sortPerm.inverse().apply(sortedNewRanges);\n    return newRanges.map(range => range.getEndPosition());\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Event } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { SelectedSuggestionInfo } from '../../../common/languages.js';\nimport { SnippetParser } from '../../snippet/browser/snippetParser.js';\nimport { SnippetSession } from '../../snippet/browser/snippetSession.js';\nimport { SuggestController } from '../../suggest/browser/suggestController.js';\nimport { observableValue, transaction } from '../../../../base/common/observable.js';\nimport { SingleTextEdit } from '../../../common/core/textEdit.js';\nimport { compareBy, numberComparator } from '../../../../base/common/arrays.js';\nimport { findFirstMax } from '../../../../base/common/arraysFind.js';\nimport { singleTextEditAugments, singleTextRemoveCommonPrefix } from './singleTextEdit.js';\nexport class SuggestWidgetAdaptor extends Disposable {\n    get selectedItem() {\n        return this._selectedItem;\n    }\n    constructor(editor, suggestControllerPreselector, checkModelVersion, onWillAccept) {\n        super();\n        this.editor = editor;\n        this.suggestControllerPreselector = suggestControllerPreselector;\n        this.checkModelVersion = checkModelVersion;\n        this.onWillAccept = onWillAccept;\n        this.isSuggestWidgetVisible = false;\n        this.isShiftKeyPressed = false;\n        this._isActive = false;\n        this._currentSuggestItemInfo = undefined;\n        this._selectedItem = observableValue(this, undefined);\n        // See the command acceptAlternativeSelectedSuggestion that is bound to shift+tab\n        this._register(editor.onKeyDown(e => {\n            if (e.shiftKey && !this.isShiftKeyPressed) {\n                this.isShiftKeyPressed = true;\n                this.update(this._isActive);\n            }\n        }));\n        this._register(editor.onKeyUp(e => {\n            if (e.shiftKey && this.isShiftKeyPressed) {\n                this.isShiftKeyPressed = false;\n                this.update(this._isActive);\n            }\n        }));\n        const suggestController = SuggestController.get(this.editor);\n        if (suggestController) {\n            this._register(suggestController.registerSelector({\n                priority: 100,\n                select: (model, pos, suggestItems) => {\n                    transaction(tx => this.checkModelVersion(tx));\n                    const textModel = this.editor.getModel();\n                    if (!textModel) {\n                        // Should not happen\n                        return -1;\n                    }\n                    const i = this.suggestControllerPreselector();\n                    const itemToPreselect = i ? singleTextRemoveCommonPrefix(i, textModel) : undefined;\n                    if (!itemToPreselect) {\n                        return -1;\n                    }\n                    const position = Position.lift(pos);\n                    const candidates = suggestItems\n                        .map((suggestItem, index) => {\n                        const suggestItemInfo = SuggestItemInfo.fromSuggestion(suggestController, textModel, position, suggestItem, this.isShiftKeyPressed);\n                        const suggestItemTextEdit = singleTextRemoveCommonPrefix(suggestItemInfo.toSingleTextEdit(), textModel);\n                        const valid = singleTextEditAugments(itemToPreselect, suggestItemTextEdit);\n                        return { index, valid, prefixLength: suggestItemTextEdit.text.length, suggestItem };\n                    })\n                        .filter(item => item && item.valid && item.prefixLength > 0);\n                    const result = findFirstMax(candidates, compareBy(s => s.prefixLength, numberComparator));\n                    return result ? result.index : -1;\n                }\n            }));\n            let isBoundToSuggestWidget = false;\n            const bindToSuggestWidget = () => {\n                if (isBoundToSuggestWidget) {\n                    return;\n                }\n                isBoundToSuggestWidget = true;\n                this._register(suggestController.widget.value.onDidShow(() => {\n                    this.isSuggestWidgetVisible = true;\n                    this.update(true);\n                }));\n                this._register(suggestController.widget.value.onDidHide(() => {\n                    this.isSuggestWidgetVisible = false;\n                    this.update(false);\n                }));\n                this._register(suggestController.widget.value.onDidFocus(() => {\n                    this.isSuggestWidgetVisible = true;\n                    this.update(true);\n                }));\n            };\n            this._register(Event.once(suggestController.model.onDidTrigger)(e => {\n                bindToSuggestWidget();\n            }));\n            this._register(suggestController.onWillInsertSuggestItem(e => {\n                const position = this.editor.getPosition();\n                const model = this.editor.getModel();\n                if (!position || !model) {\n                    return undefined;\n                }\n                const suggestItemInfo = SuggestItemInfo.fromSuggestion(suggestController, model, position, e.item, this.isShiftKeyPressed);\n                this.onWillAccept(suggestItemInfo);\n            }));\n        }\n        this.update(this._isActive);\n    }\n    update(newActive) {\n        const newInlineCompletion = this.getSuggestItemInfo();\n        if (this._isActive !== newActive || !suggestItemInfoEquals(this._currentSuggestItemInfo, newInlineCompletion)) {\n            this._isActive = newActive;\n            this._currentSuggestItemInfo = newInlineCompletion;\n            transaction(tx => {\n                /** @description Update state from suggest widget */\n                this.checkModelVersion(tx);\n                this._selectedItem.set(this._isActive ? this._currentSuggestItemInfo : undefined, tx);\n            });\n        }\n    }\n    getSuggestItemInfo() {\n        const suggestController = SuggestController.get(this.editor);\n        if (!suggestController || !this.isSuggestWidgetVisible) {\n            return undefined;\n        }\n        const focusedItem = suggestController.widget.value.getFocusedItem();\n        const position = this.editor.getPosition();\n        const model = this.editor.getModel();\n        if (!focusedItem || !position || !model) {\n            return undefined;\n        }\n        return SuggestItemInfo.fromSuggestion(suggestController, model, position, focusedItem.item, this.isShiftKeyPressed);\n    }\n    stopForceRenderingAbove() {\n        const suggestController = SuggestController.get(this.editor);\n        suggestController === null || suggestController === void 0 ? void 0 : suggestController.stopForceRenderingAbove();\n    }\n    forceRenderingAbove() {\n        const suggestController = SuggestController.get(this.editor);\n        suggestController === null || suggestController === void 0 ? void 0 : suggestController.forceRenderingAbove();\n    }\n}\nexport class SuggestItemInfo {\n    static fromSuggestion(suggestController, model, position, item, toggleMode) {\n        let { insertText } = item.completion;\n        let isSnippetText = false;\n        if (item.completion.insertTextRules & 4 /* CompletionItemInsertTextRule.InsertAsSnippet */) {\n            const snippet = new SnippetParser().parse(insertText);\n            if (snippet.children.length < 100) {\n                // Adjust whitespace is expensive.\n                SnippetSession.adjustWhitespace(model, position, true, snippet);\n            }\n            insertText = snippet.toString();\n            isSnippetText = true;\n        }\n        const info = suggestController.getOverwriteInfo(item, toggleMode);\n        return new SuggestItemInfo(Range.fromPositions(position.delta(0, -info.overwriteBefore), position.delta(0, Math.max(info.overwriteAfter, 0))), insertText, item.completion.kind, isSnippetText);\n    }\n    constructor(range, insertText, completionItemKind, isSnippetText) {\n        this.range = range;\n        this.insertText = insertText;\n        this.completionItemKind = completionItemKind;\n        this.isSnippetText = isSnippetText;\n    }\n    equals(other) {\n        return this.range.equalsRange(other.range)\n            && this.insertText === other.insertText\n            && this.completionItemKind === other.completionItemKind\n            && this.isSnippetText === other.isSnippetText;\n    }\n    toSelectedSuggestionInfo() {\n        return new SelectedSuggestionInfo(this.range, this.insertText, this.completionItemKind, this.isSnippetText);\n    }\n    toSingleTextEdit() {\n        return new SingleTextEdit(this.range, this.insertText);\n    }\n}\nfunction suggestItemInfoEquals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!a || !b) {\n        return false;\n    }\n    return a.equals(b);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar InlineCompletionsController_1;\nimport { createStyleSheet2 } from '../../../../base/browser/dom.js';\nimport { alert } from '../../../../base/browser/ui/aria/aria.js';\nimport { timeout } from '../../../../base/common/async.js';\nimport { cancelOnDispose } from '../../../../base/common/cancellation.js';\nimport { itemEquals, itemsEquals } from '../../../../base/common/equals.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, autorunHandleChanges, constObservable, derived, disposableObservableValue, observableFromEvent, observableSignal, observableValue, transaction, waitForState } from '../../../../base/common/observable.js';\nimport { observableValueOpts } from '../../../../base/common/observableInternal/base.js';\nimport { mapObservableArrayCached } from '../../../../base/common/observableInternal/utils.js';\nimport { isUndefined } from '../../../../base/common/types.js';\nimport { CoreEditingCommands } from '../../../browser/coreCommands.js';\nimport { Position } from '../../../common/core/position.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { inlineSuggestCommitId } from './commandIds.js';\nimport { GhostTextWidget } from './ghostTextWidget.js';\nimport { InlineCompletionContextKeys } from './inlineCompletionContextKeys.js';\nimport { InlineCompletionsHintsWidget, InlineSuggestionHintsContentWidget } from './inlineCompletionsHintsWidget.js';\nimport { InlineCompletionsModel, VersionIdChangeReason } from './inlineCompletionsModel.js';\nimport { SuggestWidgetAdaptor } from './suggestWidgetInlineCompletionProvider.js';\nimport { localize } from '../../../../nls.js';\nimport { IAccessibilityService } from '../../../../platform/accessibility/common/accessibility.js';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nlet InlineCompletionsController = InlineCompletionsController_1 = class InlineCompletionsController extends Disposable {\n    static get(editor) {\n        return editor.getContribution(InlineCompletionsController_1.ID);\n    }\n    constructor(editor, _instantiationService, _contextKeyService, _configurationService, _commandService, _debounceService, _languageFeaturesService, _accessibilitySignalService, _keybindingService, _accessibilityService) {\n        super();\n        this.editor = editor;\n        this._instantiationService = _instantiationService;\n        this._contextKeyService = _contextKeyService;\n        this._configurationService = _configurationService;\n        this._commandService = _commandService;\n        this._debounceService = _debounceService;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._accessibilitySignalService = _accessibilitySignalService;\n        this._keybindingService = _keybindingService;\n        this._accessibilityService = _accessibilityService;\n        this.model = this._register(disposableObservableValue('inlineCompletionModel', undefined));\n        this._textModelVersionId = observableValue(this, -1);\n        this._positions = observableValueOpts({ owner: this, equalsFn: itemsEquals(itemEquals()) }, [new Position(1, 1)]);\n        this._suggestWidgetAdaptor = this._register(new SuggestWidgetAdaptor(this.editor, () => { var _a, _b; return (_b = (_a = this.model.get()) === null || _a === void 0 ? void 0 : _a.selectedInlineCompletion.get()) === null || _b === void 0 ? void 0 : _b.toSingleTextEdit(undefined); }, (tx) => this.updateObservables(tx, VersionIdChangeReason.Other), (item) => {\n            transaction(tx => {\n                var _a;\n                /** @description InlineCompletionsController.handleSuggestAccepted */\n                this.updateObservables(tx, VersionIdChangeReason.Other);\n                (_a = this.model.get()) === null || _a === void 0 ? void 0 : _a.handleSuggestAccepted(item);\n            });\n        }));\n        this._enabledInConfig = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(62 /* EditorOption.inlineSuggest */).enabled);\n        this._isScreenReaderEnabled = observableFromEvent(this._accessibilityService.onDidChangeScreenReaderOptimized, () => this._accessibilityService.isScreenReaderOptimized());\n        this._editorDictationInProgress = observableFromEvent(this._contextKeyService.onDidChangeContext, () => this._contextKeyService.getContext(this.editor.getDomNode()).getValue('editorDictation.inProgress') === true);\n        this._enabled = derived(this, reader => this._enabledInConfig.read(reader) && (!this._isScreenReaderEnabled.read(reader) || !this._editorDictationInProgress.read(reader)));\n        this._fontFamily = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(62 /* EditorOption.inlineSuggest */).fontFamily);\n        this._ghostTexts = derived(this, (reader) => {\n            var _a;\n            const model = this.model.read(reader);\n            return (_a = model === null || model === void 0 ? void 0 : model.ghostTexts.read(reader)) !== null && _a !== void 0 ? _a : [];\n        });\n        this._stablizedGhostTexts = convertItemsToStableObservables(this._ghostTexts, this._store);\n        this._ghostTextWidgets = mapObservableArrayCached(this, this._stablizedGhostTexts, (ghostText, store) => {\n            return store.add(this._instantiationService.createInstance(GhostTextWidget, this.editor, {\n                ghostText: ghostText,\n                minReservedLineCount: constObservable(0),\n                targetTextModel: this.model.map(v => v === null || v === void 0 ? void 0 : v.textModel),\n            }));\n        }).recomputeInitiallyAndOnChange(this._store);\n        this._debounceValue = this._debounceService.for(this._languageFeaturesService.inlineCompletionsProvider, 'InlineCompletionsDebounce', { min: 50, max: 50 });\n        this._playAccessibilitySignal = observableSignal(this);\n        this._isReadonly = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(91 /* EditorOption.readOnly */));\n        this._textModel = observableFromEvent(this.editor.onDidChangeModel, () => this.editor.getModel());\n        this._textModelIfWritable = derived(reader => this._isReadonly.read(reader) ? undefined : this._textModel.read(reader));\n        this._register(new InlineCompletionContextKeys(this._contextKeyService, this.model));\n        this._register(autorun(reader => {\n            /** @description InlineCompletionsController.update model */\n            const textModel = this._textModelIfWritable.read(reader);\n            transaction(tx => {\n                /** @description InlineCompletionsController.onDidChangeModel/readonly */\n                this.model.set(undefined, tx);\n                this.updateObservables(tx, VersionIdChangeReason.Other);\n                if (textModel) {\n                    const model = _instantiationService.createInstance(InlineCompletionsModel, textModel, this._suggestWidgetAdaptor.selectedItem, this._textModelVersionId, this._positions, this._debounceValue, observableFromEvent(editor.onDidChangeConfiguration, () => editor.getOption(118 /* EditorOption.suggest */).preview), observableFromEvent(editor.onDidChangeConfiguration, () => editor.getOption(118 /* EditorOption.suggest */).previewMode), observableFromEvent(editor.onDidChangeConfiguration, () => editor.getOption(62 /* EditorOption.inlineSuggest */).mode), this._enabled);\n                    this.model.set(model, tx);\n                }\n            });\n        }));\n        const styleElement = this._register(createStyleSheet2());\n        this._register(autorun(reader => {\n            const fontFamily = this._fontFamily.read(reader);\n            styleElement.setStyle(fontFamily === '' || fontFamily === 'default' ? `` : `\n.monaco-editor .ghost-text-decoration,\n.monaco-editor .ghost-text-decoration-preview,\n.monaco-editor .ghost-text {\n\tfont-family: ${fontFamily};\n}`);\n        }));\n        const getReason = (e) => {\n            var _a;\n            if (e.isUndoing) {\n                return VersionIdChangeReason.Undo;\n            }\n            if (e.isRedoing) {\n                return VersionIdChangeReason.Redo;\n            }\n            if ((_a = this.model.get()) === null || _a === void 0 ? void 0 : _a.isAcceptingPartially) {\n                return VersionIdChangeReason.AcceptWord;\n            }\n            return VersionIdChangeReason.Other;\n        };\n        this._register(editor.onDidChangeModelContent((e) => transaction(tx => \n        /** @description InlineCompletionsController.onDidChangeModelContent */\n        this.updateObservables(tx, getReason(e)))));\n        this._register(editor.onDidChangeCursorPosition(e => transaction(tx => {\n            var _a;\n            /** @description InlineCompletionsController.onDidChangeCursorPosition */\n            this.updateObservables(tx, VersionIdChangeReason.Other);\n            if (e.reason === 3 /* CursorChangeReason.Explicit */ || e.source === 'api') {\n                (_a = this.model.get()) === null || _a === void 0 ? void 0 : _a.stop(tx);\n            }\n        })));\n        this._register(editor.onDidType(() => transaction(tx => {\n            var _a;\n            /** @description InlineCompletionsController.onDidType */\n            this.updateObservables(tx, VersionIdChangeReason.Other);\n            if (this._enabled.get()) {\n                (_a = this.model.get()) === null || _a === void 0 ? void 0 : _a.trigger(tx);\n            }\n        })));\n        this._register(this._commandService.onDidExecuteCommand((e) => {\n            // These commands don't trigger onDidType.\n            const commands = new Set([\n                CoreEditingCommands.Tab.id,\n                CoreEditingCommands.DeleteLeft.id,\n                CoreEditingCommands.DeleteRight.id,\n                inlineSuggestCommitId,\n                'acceptSelectedSuggestion',\n            ]);\n            if (commands.has(e.commandId) && editor.hasTextFocus() && this._enabled.get()) {\n                transaction(tx => {\n                    var _a;\n                    /** @description onDidExecuteCommand */\n                    (_a = this.model.get()) === null || _a === void 0 ? void 0 : _a.trigger(tx);\n                });\n            }\n        }));\n        this._register(this.editor.onDidBlurEditorWidget(() => {\n            // This is a hidden setting very useful for debugging\n            if (this._contextKeyService.getContextKeyValue('accessibleViewIsShown') || this._configurationService.getValue('editor.inlineSuggest.keepOnBlur') ||\n                editor.getOption(62 /* EditorOption.inlineSuggest */).keepOnBlur) {\n                return;\n            }\n            if (InlineSuggestionHintsContentWidget.dropDownVisible) {\n                return;\n            }\n            transaction(tx => {\n                var _a;\n                /** @description InlineCompletionsController.onDidBlurEditorWidget */\n                (_a = this.model.get()) === null || _a === void 0 ? void 0 : _a.stop(tx);\n            });\n        }));\n        this._register(autorun(reader => {\n            var _a;\n            /** @description InlineCompletionsController.forceRenderingAbove */\n            const state = (_a = this.model.read(reader)) === null || _a === void 0 ? void 0 : _a.state.read(reader);\n            if (state === null || state === void 0 ? void 0 : state.suggestItem) {\n                if (state.primaryGhostText.lineCount >= 2) {\n                    this._suggestWidgetAdaptor.forceRenderingAbove();\n                }\n            }\n            else {\n                this._suggestWidgetAdaptor.stopForceRenderingAbove();\n            }\n        }));\n        this._register(toDisposable(() => {\n            this._suggestWidgetAdaptor.stopForceRenderingAbove();\n        }));\n        const cancellationStore = this._register(new DisposableStore());\n        let lastInlineCompletionId = undefined;\n        this._register(autorunHandleChanges({\n            handleChange: (context, changeSummary) => {\n                if (context.didChange(this._playAccessibilitySignal)) {\n                    lastInlineCompletionId = undefined;\n                }\n                return true;\n            },\n        }, async (reader, _) => {\n            /** @description InlineCompletionsController.playAccessibilitySignalAndReadSuggestion */\n            this._playAccessibilitySignal.read(reader);\n            const model = this.model.read(reader);\n            const state = model === null || model === void 0 ? void 0 : model.state.read(reader);\n            if (!model || !state || !state.inlineCompletion) {\n                lastInlineCompletionId = undefined;\n                return;\n            }\n            if (state.inlineCompletion.semanticId !== lastInlineCompletionId) {\n                cancellationStore.clear();\n                lastInlineCompletionId = state.inlineCompletion.semanticId;\n                const lineText = model.textModel.getLineContent(state.primaryGhostText.lineNumber);\n                await timeout(50, cancelOnDispose(cancellationStore));\n                await waitForState(this._suggestWidgetAdaptor.selectedItem, isUndefined, () => false, cancelOnDispose(cancellationStore));\n                await this._accessibilitySignalService.playSignal(AccessibilitySignal.inlineSuggestion);\n                if (this.editor.getOption(8 /* EditorOption.screenReaderAnnounceInlineSuggestion */)) {\n                    this.provideScreenReaderUpdate(state.primaryGhostText.renderForScreenReader(lineText));\n                }\n            }\n        }));\n        this._register(new InlineCompletionsHintsWidget(this.editor, this.model, this._instantiationService));\n        this._register(this._configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration('accessibility.verbosity.inlineCompletions')) {\n                this.editor.updateOptions({ inlineCompletionsAccessibilityVerbose: this._configurationService.getValue('accessibility.verbosity.inlineCompletions') });\n            }\n        }));\n        this.editor.updateOptions({ inlineCompletionsAccessibilityVerbose: this._configurationService.getValue('accessibility.verbosity.inlineCompletions') });\n    }\n    playAccessibilitySignal(tx) {\n        this._playAccessibilitySignal.trigger(tx);\n    }\n    provideScreenReaderUpdate(content) {\n        const accessibleViewShowing = this._contextKeyService.getContextKeyValue('accessibleViewIsShown');\n        const accessibleViewKeybinding = this._keybindingService.lookupKeybinding('editor.action.accessibleView');\n        let hint;\n        if (!accessibleViewShowing && accessibleViewKeybinding && this.editor.getOption(149 /* EditorOption.inlineCompletionsAccessibilityVerbose */)) {\n            hint = localize('showAccessibleViewHint', \"Inspect this in the accessible view ({0})\", accessibleViewKeybinding.getAriaLabel());\n        }\n        hint ? alert(content + ', ' + hint) : alert(content);\n    }\n    /**\n     * Copies over the relevant state from the text model to observables.\n     * This solves all kind of eventing issues, as we make sure we always operate on the latest state,\n     * regardless of who calls into us.\n     */\n    updateObservables(tx, changeReason) {\n        var _a, _b, _c;\n        const newModel = this.editor.getModel();\n        this._textModelVersionId.set((_a = newModel === null || newModel === void 0 ? void 0 : newModel.getVersionId()) !== null && _a !== void 0 ? _a : -1, tx, changeReason);\n        this._positions.set((_c = (_b = this.editor.getSelections()) === null || _b === void 0 ? void 0 : _b.map(selection => selection.getPosition())) !== null && _c !== void 0 ? _c : [new Position(1, 1)], tx);\n    }\n    shouldShowHoverAt(range) {\n        var _a;\n        const ghostText = (_a = this.model.get()) === null || _a === void 0 ? void 0 : _a.primaryGhostText.get();\n        if (ghostText) {\n            return ghostText.parts.some(p => range.containsPosition(new Position(ghostText.lineNumber, p.column)));\n        }\n        return false;\n    }\n    shouldShowHoverAtViewZone(viewZoneId) {\n        var _a, _b;\n        return (_b = (_a = this._ghostTextWidgets.get()[0]) === null || _a === void 0 ? void 0 : _a.ownsViewZone(viewZoneId)) !== null && _b !== void 0 ? _b : false;\n    }\n};\nInlineCompletionsController.ID = 'editor.contrib.inlineCompletionsController';\nInlineCompletionsController = InlineCompletionsController_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IContextKeyService),\n    __param(3, IConfigurationService),\n    __param(4, ICommandService),\n    __param(5, ILanguageFeatureDebounceService),\n    __param(6, ILanguageFeaturesService),\n    __param(7, IAccessibilitySignalService),\n    __param(8, IKeybindingService),\n    __param(9, IAccessibilityService)\n], InlineCompletionsController);\nexport { InlineCompletionsController };\nfunction convertItemsToStableObservables(items, store) {\n    const result = observableValue('result', []);\n    const innerObservables = [];\n    store.add(autorun(reader => {\n        const itemsValue = items.read(reader);\n        transaction(tx => {\n            if (itemsValue.length !== innerObservables.length) {\n                innerObservables.length = itemsValue.length;\n                for (let i = 0; i < innerObservables.length; i++) {\n                    if (!innerObservables[i]) {\n                        innerObservables[i] = observableValue('item', itemsValue[i]);\n                    }\n                }\n                result.set([...innerObservables], tx);\n            }\n            innerObservables.forEach((o, i) => o.set(itemsValue[i], tx));\n        });\n    }));\n    return result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { transaction } from '../../../../base/common/observable.js';\nimport { asyncTransaction } from '../../../../base/common/observableInternal/base.js';\nimport { EditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { showNextInlineSuggestionActionId, showPreviousInlineSuggestionActionId, inlineSuggestCommitId } from './commandIds.js';\nimport { InlineCompletionContextKeys } from './inlineCompletionContextKeys.js';\nimport { InlineCompletionsController } from './inlineCompletionsController.js';\nimport { Context as SuggestContext } from '../../suggest/browser/suggest.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId, Action2 } from '../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nexport class ShowNextInlineSuggestionAction extends EditorAction {\n    constructor() {\n        super({\n            id: ShowNextInlineSuggestionAction.ID,\n            label: nls.localize('action.inlineSuggest.showNext', \"Show Next Inline Suggestion\"),\n            alias: 'Show Next Inline Suggestion',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            kbOpts: {\n                weight: 100,\n                primary: 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */,\n            },\n        });\n    }\n    async run(accessor, editor) {\n        var _a;\n        const controller = InlineCompletionsController.get(editor);\n        (_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.next();\n    }\n}\nShowNextInlineSuggestionAction.ID = showNextInlineSuggestionActionId;\nexport class ShowPreviousInlineSuggestionAction extends EditorAction {\n    constructor() {\n        super({\n            id: ShowPreviousInlineSuggestionAction.ID,\n            label: nls.localize('action.inlineSuggest.showPrevious', \"Show Previous Inline Suggestion\"),\n            alias: 'Show Previous Inline Suggestion',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            kbOpts: {\n                weight: 100,\n                primary: 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */,\n            },\n        });\n    }\n    async run(accessor, editor) {\n        var _a;\n        const controller = InlineCompletionsController.get(editor);\n        (_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.previous();\n    }\n}\nShowPreviousInlineSuggestionAction.ID = showPreviousInlineSuggestionActionId;\nexport class TriggerInlineSuggestionAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineSuggest.trigger',\n            label: nls.localize('action.inlineSuggest.trigger', \"Trigger Inline Suggestion\"),\n            alias: 'Trigger Inline Suggestion',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineCompletionsController.get(editor);\n        await asyncTransaction(async (tx) => {\n            var _a;\n            /** @description triggerExplicitly from command */\n            await ((_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.triggerExplicitly(tx));\n            controller === null || controller === void 0 ? void 0 : controller.playAccessibilitySignal(tx);\n        });\n    }\n}\nexport class AcceptNextWordOfInlineCompletion extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineSuggest.acceptNextWord',\n            label: nls.localize('action.inlineSuggest.acceptNextWord', \"Accept Next Word Of Inline Suggestion\"),\n            alias: 'Accept Next Word Of Inline Suggestion',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */,\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            },\n            menuOpts: [{\n                    menuId: MenuId.InlineSuggestionToolbar,\n                    title: nls.localize('acceptWord', 'Accept Word'),\n                    group: 'primary',\n                    order: 2,\n                }],\n        });\n    }\n    async run(accessor, editor) {\n        var _a;\n        const controller = InlineCompletionsController.get(editor);\n        await ((_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.acceptNextWord(controller.editor));\n    }\n}\nexport class AcceptNextLineOfInlineCompletion extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineSuggest.acceptNextLine',\n            label: nls.localize('action.inlineSuggest.acceptNextLine', \"Accept Next Line Of Inline Suggestion\"),\n            alias: 'Accept Next Line Of Inline Suggestion',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n            },\n            menuOpts: [{\n                    menuId: MenuId.InlineSuggestionToolbar,\n                    title: nls.localize('acceptLine', 'Accept Line'),\n                    group: 'secondary',\n                    order: 2,\n                }],\n        });\n    }\n    async run(accessor, editor) {\n        var _a;\n        const controller = InlineCompletionsController.get(editor);\n        await ((_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.acceptNextLine(controller.editor));\n    }\n}\nexport class AcceptInlineCompletion extends EditorAction {\n    constructor() {\n        super({\n            id: inlineSuggestCommitId,\n            label: nls.localize('action.inlineSuggest.accept', \"Accept Inline Suggestion\"),\n            alias: 'Accept Inline Suggestion',\n            precondition: InlineCompletionContextKeys.inlineSuggestionVisible,\n            menuOpts: [{\n                    menuId: MenuId.InlineSuggestionToolbar,\n                    title: nls.localize('accept', \"Accept\"),\n                    group: 'primary',\n                    order: 1,\n                }],\n            kbOpts: {\n                primary: 2 /* KeyCode.Tab */,\n                weight: 200,\n                kbExpr: ContextKeyExpr.and(InlineCompletionContextKeys.inlineSuggestionVisible, EditorContextKeys.tabMovesFocus.toNegated(), InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize, SuggestContext.Visible.toNegated(), EditorContextKeys.hoverFocused.toNegated()),\n            }\n        });\n    }\n    async run(accessor, editor) {\n        var _a;\n        const controller = InlineCompletionsController.get(editor);\n        if (controller) {\n            (_a = controller.model.get()) === null || _a === void 0 ? void 0 : _a.accept(controller.editor);\n            controller.editor.focus();\n        }\n    }\n}\nexport class HideInlineCompletion extends EditorAction {\n    constructor() {\n        super({\n            id: HideInlineCompletion.ID,\n            label: nls.localize('action.inlineSuggest.hide', \"Hide Inline Suggestion\"),\n            alias: 'Hide Inline Suggestion',\n            precondition: InlineCompletionContextKeys.inlineSuggestionVisible,\n            kbOpts: {\n                weight: 100,\n                primary: 9 /* KeyCode.Escape */,\n            }\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineCompletionsController.get(editor);\n        transaction(tx => {\n            var _a;\n            (_a = controller === null || controller === void 0 ? void 0 : controller.model.get()) === null || _a === void 0 ? void 0 : _a.stop(tx);\n        });\n    }\n}\nHideInlineCompletion.ID = 'editor.action.inlineSuggest.hide';\nexport class ToggleAlwaysShowInlineSuggestionToolbar extends Action2 {\n    constructor() {\n        super({\n            id: ToggleAlwaysShowInlineSuggestionToolbar.ID,\n            title: nls.localize('action.inlineSuggest.alwaysShowToolbar', \"Always Show Toolbar\"),\n            f1: false,\n            precondition: undefined,\n            menu: [{\n                    id: MenuId.InlineSuggestionToolbar,\n                    group: 'secondary',\n                    order: 10,\n                }],\n            toggled: ContextKeyExpr.equals('config.editor.inlineSuggest.showToolbar', 'always')\n        });\n    }\n    async run(accessor, editor) {\n        const configService = accessor.get(IConfigurationService);\n        const currentValue = configService.getValue('editor.inlineSuggest.showToolbar');\n        const newValue = currentValue === 'always' ? 'onHover' : 'always';\n        configService.updateValue('editor.inlineSuggest.showToolbar', newValue);\n    }\n}\nToggleAlwaysShowInlineSuggestionToolbar.ID = 'editor.action.inlineSuggest.toggleAlwaysShowToolbar';\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as dom from '../../../../base/browser/dom.js';\nimport { MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { autorun, constObservable } from '../../../../base/common/observable.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ILanguageService } from '../../../common/languages/language.js';\nimport { HoverForeignElementAnchor } from '../../hover/browser/hoverTypes.js';\nimport { InlineCompletionsController } from './inlineCompletionsController.js';\nimport { InlineSuggestionHintsContentWidget } from './inlineCompletionsHintsWidget.js';\nimport { MarkdownRenderer } from '../../../browser/widget/markdownRenderer/browser/markdownRenderer.js';\nimport * as nls from '../../../../nls.js';\nimport { IAccessibilityService } from '../../../../platform/accessibility/common/accessibility.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nexport class InlineCompletionsHover {\n    constructor(owner, range, controller) {\n        this.owner = owner;\n        this.range = range;\n        this.controller = controller;\n    }\n    isValidForHoverAnchor(anchor) {\n        return (anchor.type === 1 /* HoverAnchorType.Range */\n            && this.range.startColumn <= anchor.range.startColumn\n            && this.range.endColumn >= anchor.range.endColumn);\n    }\n}\nlet InlineCompletionsHoverParticipant = class InlineCompletionsHoverParticipant {\n    constructor(_editor, _languageService, _openerService, accessibilityService, _instantiationService, _telemetryService) {\n        this._editor = _editor;\n        this._languageService = _languageService;\n        this._openerService = _openerService;\n        this.accessibilityService = accessibilityService;\n        this._instantiationService = _instantiationService;\n        this._telemetryService = _telemetryService;\n        this.hoverOrdinal = 4;\n    }\n    suggestHoverAnchor(mouseEvent) {\n        const controller = InlineCompletionsController.get(this._editor);\n        if (!controller) {\n            return null;\n        }\n        const target = mouseEvent.target;\n        if (target.type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */) {\n            // handle the case where the mouse is over the view zone\n            const viewZoneData = target.detail;\n            if (controller.shouldShowHoverAtViewZone(viewZoneData.viewZoneId)) {\n                return new HoverForeignElementAnchor(1000, this, Range.fromPositions(this._editor.getModel().validatePosition(viewZoneData.positionBefore || viewZoneData.position)), mouseEvent.event.posx, mouseEvent.event.posy, false);\n            }\n        }\n        if (target.type === 7 /* MouseTargetType.CONTENT_EMPTY */) {\n            // handle the case where the mouse is over the empty portion of a line following ghost text\n            if (controller.shouldShowHoverAt(target.range)) {\n                return new HoverForeignElementAnchor(1000, this, target.range, mouseEvent.event.posx, mouseEvent.event.posy, false);\n            }\n        }\n        if (target.type === 6 /* MouseTargetType.CONTENT_TEXT */) {\n            // handle the case where the mouse is directly over ghost text\n            const mightBeForeignElement = target.detail.mightBeForeignElement;\n            if (mightBeForeignElement && controller.shouldShowHoverAt(target.range)) {\n                return new HoverForeignElementAnchor(1000, this, target.range, mouseEvent.event.posx, mouseEvent.event.posy, false);\n            }\n        }\n        return null;\n    }\n    computeSync(anchor, lineDecorations) {\n        if (this._editor.getOption(62 /* EditorOption.inlineSuggest */).showToolbar !== 'onHover') {\n            return [];\n        }\n        const controller = InlineCompletionsController.get(this._editor);\n        if (controller && controller.shouldShowHoverAt(anchor.range)) {\n            return [new InlineCompletionsHover(this, anchor.range, controller)];\n        }\n        return [];\n    }\n    renderHoverParts(context, hoverParts) {\n        const disposableStore = new DisposableStore();\n        const part = hoverParts[0];\n        this._telemetryService.publicLog2('inlineCompletionHover.shown');\n        if (this.accessibilityService.isScreenReaderOptimized() && !this._editor.getOption(8 /* EditorOption.screenReaderAnnounceInlineSuggestion */)) {\n            this.renderScreenReaderText(context, part, disposableStore);\n        }\n        const model = part.controller.model.get();\n        const w = this._instantiationService.createInstance(InlineSuggestionHintsContentWidget, this._editor, false, constObservable(null), model.selectedInlineCompletionIndex, model.inlineCompletionsCount, model.activeCommands);\n        context.fragment.appendChild(w.getDomNode());\n        model.triggerExplicitly();\n        disposableStore.add(w);\n        return disposableStore;\n    }\n    renderScreenReaderText(context, part, disposableStore) {\n        const $ = dom.$;\n        const markdownHoverElement = $('div.hover-row.markdown-hover');\n        const hoverContentsElement = dom.append(markdownHoverElement, $('div.hover-contents', { ['aria-live']: 'assertive' }));\n        const renderer = disposableStore.add(new MarkdownRenderer({ editor: this._editor }, this._languageService, this._openerService));\n        const render = (code) => {\n            disposableStore.add(renderer.onDidRenderAsync(() => {\n                hoverContentsElement.className = 'hover-contents code-hover-contents';\n                context.onContentsChanged();\n            }));\n            const inlineSuggestionAvailable = nls.localize('inlineSuggestionFollows', \"Suggestion:\");\n            const renderedContents = disposableStore.add(renderer.render(new MarkdownString().appendText(inlineSuggestionAvailable).appendCodeblock('text', code)));\n            hoverContentsElement.replaceChildren(renderedContents.element);\n        };\n        disposableStore.add(autorun(reader => {\n            var _a;\n            /** @description update hover */\n            const ghostText = (_a = part.controller.model.read(reader)) === null || _a === void 0 ? void 0 : _a.primaryGhostText.read(reader);\n            if (ghostText) {\n                const lineText = this._editor.getModel().getLineContent(ghostText.lineNumber);\n                render(ghostText.renderForScreenReader(lineText));\n            }\n            else {\n                dom.reset(hoverContentsElement);\n            }\n        }));\n        context.fragment.appendChild(markdownHoverElement);\n    }\n};\nInlineCompletionsHoverParticipant = __decorate([\n    __param(1, ILanguageService),\n    __param(2, IOpenerService),\n    __param(3, IAccessibilityService),\n    __param(4, IInstantiationService),\n    __param(5, ITelemetryService)\n], InlineCompletionsHoverParticipant);\nexport { InlineCompletionsHoverParticipant };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { HoverParticipantRegistry } from '../../hover/browser/hoverTypes.js';\nimport { TriggerInlineSuggestionAction, ShowNextInlineSuggestionAction, ShowPreviousInlineSuggestionAction, AcceptNextWordOfInlineCompletion, AcceptInlineCompletion, HideInlineCompletion, ToggleAlwaysShowInlineSuggestionToolbar, AcceptNextLineOfInlineCompletion } from './commands.js';\nimport { InlineCompletionsHoverParticipant } from './hoverParticipant.js';\nimport { InlineCompletionsController } from './inlineCompletionsController.js';\nimport { registerAction2 } from '../../../../platform/actions/common/actions.js';\nregisterEditorContribution(InlineCompletionsController.ID, InlineCompletionsController, 3 /* EditorContributionInstantiation.Eventually */);\nregisterEditorAction(TriggerInlineSuggestionAction);\nregisterEditorAction(ShowNextInlineSuggestionAction);\nregisterEditorAction(ShowPreviousInlineSuggestionAction);\nregisterEditorAction(AcceptNextWordOfInlineCompletion);\nregisterEditorAction(AcceptNextLineOfInlineCompletion);\nregisterEditorAction(AcceptInlineCompletion);\nregisterEditorAction(HideInlineCompletion);\nregisterAction2(ToggleAlwaysShowInlineSuggestionToolbar);\nHoverParticipantRegistry.register(InlineCompletionsHoverParticipant);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar InlineSuggestionHintsContentWidget_1;\nimport { h } from '../../../../base/browser/dom.js';\nimport { ActionViewItem } from '../../../../base/browser/ui/actionbar/actionViewItems.js';\nimport { KeybindingLabel, unthemedKeybindingLabelOptions } from '../../../../base/browser/ui/keybindingLabel/keybindingLabel.js';\nimport { Action, Separator } from '../../../../base/common/actions.js';\nimport { equals } from '../../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, autorunWithStore, derived, observableFromEvent } from '../../../../base/common/observable.js';\nimport { OS } from '../../../../base/common/platform.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport './inlineCompletionsHintsWidget.css';\nimport { Position } from '../../../common/core/position.js';\nimport { InlineCompletionTriggerKind } from '../../../common/languages.js';\nimport { showNextInlineSuggestionActionId, showPreviousInlineSuggestionActionId } from './commandIds.js';\nimport { localize } from '../../../../nls.js';\nimport { MenuEntryActionViewItem, createAndFillInActionBarActions } from '../../../../platform/actions/browser/menuEntryActionViewItem.js';\nimport { WorkbenchToolBar } from '../../../../platform/actions/browser/toolbar.js';\nimport { IMenuService, MenuId, MenuItemAction } from '../../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { registerIcon } from '../../../../platform/theme/common/iconRegistry.js';\nlet InlineCompletionsHintsWidget = class InlineCompletionsHintsWidget extends Disposable {\n    constructor(editor, model, instantiationService) {\n        super();\n        this.editor = editor;\n        this.model = model;\n        this.instantiationService = instantiationService;\n        this.alwaysShowToolbar = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(62 /* EditorOption.inlineSuggest */).showToolbar === 'always');\n        this.sessionPosition = undefined;\n        this.position = derived(this, reader => {\n            var _a, _b, _c;\n            const ghostText = (_a = this.model.read(reader)) === null || _a === void 0 ? void 0 : _a.primaryGhostText.read(reader);\n            if (!this.alwaysShowToolbar.read(reader) || !ghostText || ghostText.parts.length === 0) {\n                this.sessionPosition = undefined;\n                return null;\n            }\n            const firstColumn = ghostText.parts[0].column;\n            if (this.sessionPosition && this.sessionPosition.lineNumber !== ghostText.lineNumber) {\n                this.sessionPosition = undefined;\n            }\n            const position = new Position(ghostText.lineNumber, Math.min(firstColumn, (_c = (_b = this.sessionPosition) === null || _b === void 0 ? void 0 : _b.column) !== null && _c !== void 0 ? _c : Number.MAX_SAFE_INTEGER));\n            this.sessionPosition = position;\n            return position;\n        });\n        this._register(autorunWithStore((reader, store) => {\n            /** @description setup content widget */\n            const model = this.model.read(reader);\n            if (!model || !this.alwaysShowToolbar.read(reader)) {\n                return;\n            }\n            const contentWidget = store.add(this.instantiationService.createInstance(InlineSuggestionHintsContentWidget, this.editor, true, this.position, model.selectedInlineCompletionIndex, model.inlineCompletionsCount, model.activeCommands));\n            editor.addContentWidget(contentWidget);\n            store.add(toDisposable(() => editor.removeContentWidget(contentWidget)));\n            store.add(autorun(reader => {\n                /** @description request explicit */\n                const position = this.position.read(reader);\n                if (!position) {\n                    return;\n                }\n                if (model.lastTriggerKind.read(reader) !== InlineCompletionTriggerKind.Explicit) {\n                    model.triggerExplicitly();\n                }\n            }));\n        }));\n    }\n};\nInlineCompletionsHintsWidget = __decorate([\n    __param(2, IInstantiationService)\n], InlineCompletionsHintsWidget);\nexport { InlineCompletionsHintsWidget };\nconst inlineSuggestionHintsNextIcon = registerIcon('inline-suggestion-hints-next', Codicon.chevronRight, localize('parameterHintsNextIcon', 'Icon for show next parameter hint.'));\nconst inlineSuggestionHintsPreviousIcon = registerIcon('inline-suggestion-hints-previous', Codicon.chevronLeft, localize('parameterHintsPreviousIcon', 'Icon for show previous parameter hint.'));\nlet InlineSuggestionHintsContentWidget = InlineSuggestionHintsContentWidget_1 = class InlineSuggestionHintsContentWidget extends Disposable {\n    static get dropDownVisible() { return this._dropDownVisible; }\n    createCommandAction(commandId, label, iconClassName) {\n        const action = new Action(commandId, label, iconClassName, true, () => this._commandService.executeCommand(commandId));\n        const kb = this.keybindingService.lookupKeybinding(commandId, this._contextKeyService);\n        let tooltip = label;\n        if (kb) {\n            tooltip = localize({ key: 'content', comment: ['A label', 'A keybinding'] }, '{0} ({1})', label, kb.getLabel());\n        }\n        action.tooltip = tooltip;\n        return action;\n    }\n    constructor(editor, withBorder, _position, _currentSuggestionIdx, _suggestionCount, _extraCommands, _commandService, instantiationService, keybindingService, _contextKeyService, _menuService) {\n        super();\n        this.editor = editor;\n        this.withBorder = withBorder;\n        this._position = _position;\n        this._currentSuggestionIdx = _currentSuggestionIdx;\n        this._suggestionCount = _suggestionCount;\n        this._extraCommands = _extraCommands;\n        this._commandService = _commandService;\n        this.keybindingService = keybindingService;\n        this._contextKeyService = _contextKeyService;\n        this._menuService = _menuService;\n        this.id = `InlineSuggestionHintsContentWidget${InlineSuggestionHintsContentWidget_1.id++}`;\n        this.allowEditorOverflow = true;\n        this.suppressMouseDown = false;\n        this.nodes = h('div.inlineSuggestionsHints', { className: this.withBorder ? '.withBorder' : '' }, [\n            h('div@toolBar'),\n        ]);\n        this.previousAction = this.createCommandAction(showPreviousInlineSuggestionActionId, localize('previous', 'Previous'), ThemeIcon.asClassName(inlineSuggestionHintsPreviousIcon));\n        this.availableSuggestionCountAction = new Action('inlineSuggestionHints.availableSuggestionCount', '', undefined, false);\n        this.nextAction = this.createCommandAction(showNextInlineSuggestionActionId, localize('next', 'Next'), ThemeIcon.asClassName(inlineSuggestionHintsNextIcon));\n        // TODO@hediet: deprecate MenuId.InlineCompletionsActions\n        this.inlineCompletionsActionsMenus = this._register(this._menuService.createMenu(MenuId.InlineCompletionsActions, this._contextKeyService));\n        this.clearAvailableSuggestionCountLabelDebounced = this._register(new RunOnceScheduler(() => {\n            this.availableSuggestionCountAction.label = '';\n        }, 100));\n        this.disableButtonsDebounced = this._register(new RunOnceScheduler(() => {\n            this.previousAction.enabled = this.nextAction.enabled = false;\n        }, 100));\n        this.toolBar = this._register(instantiationService.createInstance(CustomizedMenuWorkbenchToolBar, this.nodes.toolBar, MenuId.InlineSuggestionToolbar, {\n            menuOptions: { renderShortTitle: true },\n            toolbarOptions: { primaryGroup: g => g.startsWith('primary') },\n            actionViewItemProvider: (action, options) => {\n                if (action instanceof MenuItemAction) {\n                    return instantiationService.createInstance(StatusBarViewItem, action, undefined);\n                }\n                if (action === this.availableSuggestionCountAction) {\n                    const a = new ActionViewItemWithClassName(undefined, action, { label: true, icon: false });\n                    a.setClass('availableSuggestionCount');\n                    return a;\n                }\n                return undefined;\n            },\n            telemetrySource: 'InlineSuggestionToolbar',\n        }));\n        this.toolBar.setPrependedPrimaryActions([\n            this.previousAction,\n            this.availableSuggestionCountAction,\n            this.nextAction,\n        ]);\n        this._register(this.toolBar.onDidChangeDropdownVisibility(e => {\n            InlineSuggestionHintsContentWidget_1._dropDownVisible = e;\n        }));\n        this._register(autorun(reader => {\n            /** @description update position */\n            this._position.read(reader);\n            this.editor.layoutContentWidget(this);\n        }));\n        this._register(autorun(reader => {\n            /** @description counts */\n            const suggestionCount = this._suggestionCount.read(reader);\n            const currentSuggestionIdx = this._currentSuggestionIdx.read(reader);\n            if (suggestionCount !== undefined) {\n                this.clearAvailableSuggestionCountLabelDebounced.cancel();\n                this.availableSuggestionCountAction.label = `${currentSuggestionIdx + 1}/${suggestionCount}`;\n            }\n            else {\n                this.clearAvailableSuggestionCountLabelDebounced.schedule();\n            }\n            if (suggestionCount !== undefined && suggestionCount > 1) {\n                this.disableButtonsDebounced.cancel();\n                this.previousAction.enabled = this.nextAction.enabled = true;\n            }\n            else {\n                this.disableButtonsDebounced.schedule();\n            }\n        }));\n        this._register(autorun(reader => {\n            /** @description extra commands */\n            const extraCommands = this._extraCommands.read(reader);\n            const extraActions = extraCommands.map(c => ({\n                class: undefined,\n                id: c.id,\n                enabled: true,\n                tooltip: c.tooltip || '',\n                label: c.title,\n                run: (event) => {\n                    return this._commandService.executeCommand(c.id);\n                },\n            }));\n            for (const [_, group] of this.inlineCompletionsActionsMenus.getActions()) {\n                for (const action of group) {\n                    if (action instanceof MenuItemAction) {\n                        extraActions.push(action);\n                    }\n                }\n            }\n            if (extraActions.length > 0) {\n                extraActions.unshift(new Separator());\n            }\n            this.toolBar.setAdditionalSecondaryActions(extraActions);\n        }));\n    }\n    getId() { return this.id; }\n    getDomNode() {\n        return this.nodes.root;\n    }\n    getPosition() {\n        return {\n            position: this._position.get(),\n            preference: [1 /* ContentWidgetPositionPreference.ABOVE */, 2 /* ContentWidgetPositionPreference.BELOW */],\n            positionAffinity: 3 /* PositionAffinity.LeftOfInjectedText */,\n        };\n    }\n};\nInlineSuggestionHintsContentWidget._dropDownVisible = false;\nInlineSuggestionHintsContentWidget.id = 0;\nInlineSuggestionHintsContentWidget = InlineSuggestionHintsContentWidget_1 = __decorate([\n    __param(6, ICommandService),\n    __param(7, IInstantiationService),\n    __param(8, IKeybindingService),\n    __param(9, IContextKeyService),\n    __param(10, IMenuService)\n], InlineSuggestionHintsContentWidget);\nexport { InlineSuggestionHintsContentWidget };\nclass ActionViewItemWithClassName extends ActionViewItem {\n    constructor() {\n        super(...arguments);\n        this._className = undefined;\n    }\n    setClass(className) {\n        this._className = className;\n    }\n    render(container) {\n        super.render(container);\n        if (this._className) {\n            container.classList.add(this._className);\n        }\n    }\n    updateTooltip() {\n        // NOOP, disable tooltip\n    }\n}\nclass StatusBarViewItem extends MenuEntryActionViewItem {\n    updateLabel() {\n        const kb = this._keybindingService.lookupKeybinding(this._action.id, this._contextKeyService);\n        if (!kb) {\n            return super.updateLabel();\n        }\n        if (this.label) {\n            const div = h('div.keybinding').root;\n            const k = this._register(new KeybindingLabel(div, OS, { disableTitle: true, ...unthemedKeybindingLabelOptions }));\n            k.set(kb);\n            this.label.textContent = this._action.label;\n            this.label.appendChild(div);\n            this.label.classList.add('inlineSuggestionStatusBarItemLabel');\n        }\n    }\n    updateTooltip() {\n        // NOOP, disable tooltip\n    }\n}\nlet CustomizedMenuWorkbenchToolBar = class CustomizedMenuWorkbenchToolBar extends WorkbenchToolBar {\n    constructor(container, menuId, options2, menuService, contextKeyService, contextMenuService, keybindingService, commandService, telemetryService) {\n        super(container, { resetMenu: menuId, ...options2 }, menuService, contextKeyService, contextMenuService, keybindingService, commandService, telemetryService);\n        this.menuId = menuId;\n        this.options2 = options2;\n        this.menuService = menuService;\n        this.contextKeyService = contextKeyService;\n        this.menu = this._store.add(this.menuService.createMenu(this.menuId, this.contextKeyService, { emitEventsForSubmenuChanges: true }));\n        this.additionalActions = [];\n        this.prependedPrimaryActions = [];\n        this._store.add(this.menu.onDidChange(() => this.updateToolbar()));\n        this.updateToolbar();\n    }\n    updateToolbar() {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const primary = [];\n        const secondary = [];\n        createAndFillInActionBarActions(this.menu, (_a = this.options2) === null || _a === void 0 ? void 0 : _a.menuOptions, { primary, secondary }, (_c = (_b = this.options2) === null || _b === void 0 ? void 0 : _b.toolbarOptions) === null || _c === void 0 ? void 0 : _c.primaryGroup, (_e = (_d = this.options2) === null || _d === void 0 ? void 0 : _d.toolbarOptions) === null || _e === void 0 ? void 0 : _e.shouldInlineSubmenu, (_g = (_f = this.options2) === null || _f === void 0 ? void 0 : _f.toolbarOptions) === null || _g === void 0 ? void 0 : _g.useSeparatorsInPrimaryActions);\n        secondary.push(...this.additionalActions);\n        primary.unshift(...this.prependedPrimaryActions);\n        this.setActions(primary, secondary);\n    }\n    setPrependedPrimaryActions(actions) {\n        if (equals(this.prependedPrimaryActions, actions, (a, b) => a === b)) {\n            return;\n        }\n        this.prependedPrimaryActions = actions;\n        this.updateToolbar();\n    }\n    setAdditionalSecondaryActions(actions) {\n        if (equals(this.additionalActions, actions, (a, b) => a === b)) {\n            return;\n        }\n        this.additionalActions = actions;\n        this.updateToolbar();\n    }\n};\nCustomizedMenuWorkbenchToolBar = __decorate([\n    __param(3, IMenuService),\n    __param(4, IContextKeyService),\n    __param(5, IContextMenuService),\n    __param(6, IKeybindingService),\n    __param(7, ICommandService),\n    __param(8, ITelemetryService)\n], CustomizedMenuWorkbenchToolBar);\nexport { CustomizedMenuWorkbenchToolBar };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { autorunOpts } from '../../../../base/common/observable.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nconst array = [];\nexport function getReadonlyEmptyArray() {\n    return array;\n}\nexport class ColumnRange {\n    constructor(startColumn, endColumnExclusive) {\n        this.startColumn = startColumn;\n        this.endColumnExclusive = endColumnExclusive;\n        if (startColumn > endColumnExclusive) {\n            throw new BugIndicatingError(`startColumn ${startColumn} cannot be after endColumnExclusive ${endColumnExclusive}`);\n        }\n    }\n    toRange(lineNumber) {\n        return new Range(lineNumber, this.startColumn, lineNumber, this.endColumnExclusive);\n    }\n    equals(other) {\n        return this.startColumn === other.startColumn\n            && this.endColumnExclusive === other.endColumnExclusive;\n    }\n}\nexport function applyObservableDecorations(editor, decorations) {\n    const d = new DisposableStore();\n    const decorationsCollection = editor.createDecorationsCollection();\n    d.add(autorunOpts({ debugName: () => `Apply decorations from ${decorations.debugName}` }, reader => {\n        const d = decorations.read(reader);\n        decorationsCollection.set(d);\n    }));\n    d.add({\n        dispose: () => {\n            decorationsCollection.clear();\n        }\n    });\n    return d;\n}\nexport function addPositions(pos1, pos2) {\n    return new Position(pos1.lineNumber + pos2.lineNumber - 1, pos2.lineNumber === 1 ? pos1.column + pos2.column - 1 : pos2.column);\n}\nexport function subtractPositions(pos1, pos2) {\n    return new Position(pos1.lineNumber - pos2.lineNumber + 1, pos1.lineNumber - pos2.lineNumber === 0 ? pos1.column - pos2.column + 1 : pos1.column);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { derived, observableFromEvent, observableValue } from '../../../../base/common/observable.js';\nimport './inlineEdit.css';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ILanguageService } from '../../../common/languages/language.js';\nimport { InjectedTextCursorStops } from '../../../common/model.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { AdditionalLinesWidget } from '../../inlineCompletions/browser/ghostTextWidget.js';\nimport { ColumnRange, applyObservableDecorations } from '../../inlineCompletions/browser/utils.js';\nexport const INLINE_EDIT_DESCRIPTION = 'inline-edit';\nlet GhostTextWidget = class GhostTextWidget extends Disposable {\n    constructor(editor, model, languageService) {\n        super();\n        this.editor = editor;\n        this.model = model;\n        this.languageService = languageService;\n        this.isDisposed = observableValue(this, false);\n        this.currentTextModel = observableFromEvent(this.editor.onDidChangeModel, () => /** @description editor.model */ this.editor.getModel());\n        this.uiState = derived(this, reader => {\n            var _a;\n            if (this.isDisposed.read(reader)) {\n                return undefined;\n            }\n            const textModel = this.currentTextModel.read(reader);\n            if (textModel !== this.model.targetTextModel.read(reader)) {\n                return undefined;\n            }\n            const ghostText = this.model.ghostText.read(reader);\n            if (!ghostText) {\n                return undefined;\n            }\n            let range = (_a = this.model.range) === null || _a === void 0 ? void 0 : _a.read(reader);\n            //if range is empty, we want to remove it\n            if (range && range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n                range = undefined;\n            }\n            //check if both range and text are single line - in this case we want to do inline replacement\n            //rather than replacing whole lines\n            const isSingleLine = (range ? range.startLineNumber === range.endLineNumber : true) && ghostText.parts.length === 1 && ghostText.parts[0].lines.length === 1;\n            //check if we're just removing code\n            const isPureRemove = ghostText.parts.length === 1 && ghostText.parts[0].lines.every(l => l.length === 0);\n            const inlineTexts = [];\n            const additionalLines = [];\n            function addToAdditionalLines(lines, className) {\n                if (additionalLines.length > 0) {\n                    const lastLine = additionalLines[additionalLines.length - 1];\n                    if (className) {\n                        lastLine.decorations.push(new LineDecoration(lastLine.content.length + 1, lastLine.content.length + 1 + lines[0].length, className, 0 /* InlineDecorationType.Regular */));\n                    }\n                    lastLine.content += lines[0];\n                    lines = lines.slice(1);\n                }\n                for (const line of lines) {\n                    additionalLines.push({\n                        content: line,\n                        decorations: className ? [new LineDecoration(1, line.length + 1, className, 0 /* InlineDecorationType.Regular */)] : []\n                    });\n                }\n            }\n            const textBufferLine = textModel.getLineContent(ghostText.lineNumber);\n            let hiddenTextStartColumn = undefined;\n            let lastIdx = 0;\n            if (!isPureRemove) {\n                for (const part of ghostText.parts) {\n                    let lines = part.lines;\n                    //If remove range is set, we want to push all new liens to virtual area\n                    if (range && !isSingleLine) {\n                        addToAdditionalLines(lines, INLINE_EDIT_DESCRIPTION);\n                        lines = [];\n                    }\n                    if (hiddenTextStartColumn === undefined) {\n                        inlineTexts.push({\n                            column: part.column,\n                            text: lines[0],\n                            preview: part.preview,\n                        });\n                        lines = lines.slice(1);\n                    }\n                    else {\n                        addToAdditionalLines([textBufferLine.substring(lastIdx, part.column - 1)], undefined);\n                    }\n                    if (lines.length > 0) {\n                        addToAdditionalLines(lines, INLINE_EDIT_DESCRIPTION);\n                        if (hiddenTextStartColumn === undefined && part.column <= textBufferLine.length) {\n                            hiddenTextStartColumn = part.column;\n                        }\n                    }\n                    lastIdx = part.column - 1;\n                }\n                if (hiddenTextStartColumn !== undefined) {\n                    addToAdditionalLines([textBufferLine.substring(lastIdx)], undefined);\n                }\n            }\n            const hiddenRange = hiddenTextStartColumn !== undefined ? new ColumnRange(hiddenTextStartColumn, textBufferLine.length + 1) : undefined;\n            const lineNumber = (isSingleLine || !range) ? ghostText.lineNumber : range.endLineNumber - 1;\n            return {\n                inlineTexts,\n                additionalLines,\n                hiddenRange,\n                lineNumber,\n                additionalReservedLineCount: this.model.minReservedLineCount.read(reader),\n                targetTextModel: textModel,\n                range,\n                isSingleLine,\n                isPureRemove,\n                backgroundColoring: this.model.backgroundColoring.read(reader)\n            };\n        });\n        this.decorations = derived(this, reader => {\n            const uiState = this.uiState.read(reader);\n            if (!uiState) {\n                return [];\n            }\n            const decorations = [];\n            if (uiState.hiddenRange) {\n                decorations.push({\n                    range: uiState.hiddenRange.toRange(uiState.lineNumber),\n                    options: { inlineClassName: 'inline-edit-hidden', description: 'inline-edit-hidden', }\n                });\n            }\n            if (uiState.range) {\n                const ranges = [];\n                if (uiState.isSingleLine) {\n                    ranges.push(uiState.range);\n                }\n                else if (uiState.isPureRemove) {\n                    const lines = uiState.range.endLineNumber - uiState.range.startLineNumber;\n                    for (let i = 0; i < lines; i++) {\n                        const line = uiState.range.startLineNumber + i;\n                        const firstNonWhitespace = uiState.targetTextModel.getLineFirstNonWhitespaceColumn(line);\n                        const lastNonWhitespace = uiState.targetTextModel.getLineLastNonWhitespaceColumn(line);\n                        const range = new Range(line, firstNonWhitespace, line, lastNonWhitespace);\n                        ranges.push(range);\n                    }\n                }\n                else {\n                    const lines = uiState.range.endLineNumber - uiState.range.startLineNumber;\n                    for (let i = 0; i < lines; i++) {\n                        const line = uiState.range.startLineNumber + i;\n                        const firstNonWhitespace = uiState.targetTextModel.getLineFirstNonWhitespaceColumn(line);\n                        const lastNonWhitespace = uiState.targetTextModel.getLineLastNonWhitespaceColumn(line);\n                        const range = new Range(line, firstNonWhitespace, line, lastNonWhitespace);\n                        ranges.push(range);\n                    }\n                }\n                const className = uiState.backgroundColoring ? 'inline-edit-remove backgroundColoring' : 'inline-edit-remove';\n                for (const range of ranges) {\n                    decorations.push({\n                        range,\n                        options: { inlineClassName: className, description: 'inline-edit-remove', }\n                    });\n                }\n            }\n            for (const p of uiState.inlineTexts) {\n                decorations.push({\n                    range: Range.fromPositions(new Position(uiState.lineNumber, p.column)),\n                    options: {\n                        description: INLINE_EDIT_DESCRIPTION,\n                        after: { content: p.text, inlineClassName: p.preview ? 'inline-edit-decoration-preview' : 'inline-edit-decoration', cursorStops: InjectedTextCursorStops.Left },\n                        showIfCollapsed: true,\n                    }\n                });\n            }\n            return decorations;\n        });\n        this.additionalLinesWidget = this._register(new AdditionalLinesWidget(this.editor, this.languageService.languageIdCodec, derived(reader => {\n            /** @description lines */\n            const uiState = this.uiState.read(reader);\n            return uiState && !uiState.isPureRemove ? {\n                lineNumber: uiState.lineNumber,\n                additionalLines: uiState.additionalLines,\n                minReservedLineCount: uiState.additionalReservedLineCount,\n                targetTextModel: uiState.targetTextModel,\n            } : undefined;\n        })));\n        this._register(toDisposable(() => { this.isDisposed.set(true, undefined); }));\n        this._register(applyObservableDecorations(this.editor, this.decorations));\n    }\n    ownsViewZone(viewZoneId) {\n        return this.additionalLinesWidget.viewZoneId === viewZoneId;\n    }\n};\nGhostTextWidget = __decorate([\n    __param(2, ILanguageService)\n], GhostTextWidget);\nexport { GhostTextWidget };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar InlineEditHintsContentWidget_1;\nimport { h } from '../../../../base/browser/dom.js';\nimport { KeybindingLabel, unthemedKeybindingLabelOptions } from '../../../../base/browser/ui/keybindingLabel/keybindingLabel.js';\nimport { Separator } from '../../../../base/common/actions.js';\nimport { equals } from '../../../../base/common/arrays.js';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, autorunWithStore, derived, observableFromEvent } from '../../../../base/common/observable.js';\nimport { OS } from '../../../../base/common/platform.js';\nimport './inlineEditHintsWidget.css';\nimport { Position } from '../../../common/core/position.js';\nimport { MenuEntryActionViewItem, createAndFillInActionBarActions } from '../../../../platform/actions/browser/menuEntryActionViewItem.js';\nimport { WorkbenchToolBar } from '../../../../platform/actions/browser/toolbar.js';\nimport { IMenuService, MenuId, MenuItemAction } from '../../../../platform/actions/common/actions.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nlet InlineEditHintsWidget = class InlineEditHintsWidget extends Disposable {\n    constructor(editor, model, instantiationService) {\n        super();\n        this.editor = editor;\n        this.model = model;\n        this.instantiationService = instantiationService;\n        this.alwaysShowToolbar = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(63 /* EditorOption.inlineEdit */).showToolbar === 'always');\n        this.sessionPosition = undefined;\n        this.position = derived(this, reader => {\n            var _a, _b, _c;\n            const ghostText = (_a = this.model.read(reader)) === null || _a === void 0 ? void 0 : _a.widget.model.ghostText.read(reader);\n            if (!this.alwaysShowToolbar.read(reader) || !ghostText || ghostText.parts.length === 0) {\n                this.sessionPosition = undefined;\n                return null;\n            }\n            const firstColumn = ghostText.parts[0].column;\n            if (this.sessionPosition && this.sessionPosition.lineNumber !== ghostText.lineNumber) {\n                this.sessionPosition = undefined;\n            }\n            const position = new Position(ghostText.lineNumber, Math.min(firstColumn, (_c = (_b = this.sessionPosition) === null || _b === void 0 ? void 0 : _b.column) !== null && _c !== void 0 ? _c : Number.MAX_SAFE_INTEGER));\n            this.sessionPosition = position;\n            return position;\n        });\n        this._register(autorunWithStore((reader, store) => {\n            /** @description setup content widget */\n            const model = this.model.read(reader);\n            if (!model || !this.alwaysShowToolbar.read(reader)) {\n                return;\n            }\n            const contentWidget = store.add(this.instantiationService.createInstance(InlineEditHintsContentWidget, this.editor, true, this.position));\n            editor.addContentWidget(contentWidget);\n            store.add(toDisposable(() => editor.removeContentWidget(contentWidget)));\n        }));\n    }\n};\nInlineEditHintsWidget = __decorate([\n    __param(2, IInstantiationService)\n], InlineEditHintsWidget);\nexport { InlineEditHintsWidget };\nlet InlineEditHintsContentWidget = InlineEditHintsContentWidget_1 = class InlineEditHintsContentWidget extends Disposable {\n    constructor(editor, withBorder, _position, instantiationService, _contextKeyService, _menuService) {\n        super();\n        this.editor = editor;\n        this.withBorder = withBorder;\n        this._position = _position;\n        this._contextKeyService = _contextKeyService;\n        this._menuService = _menuService;\n        this.id = `InlineEditHintsContentWidget${InlineEditHintsContentWidget_1.id++}`;\n        this.allowEditorOverflow = true;\n        this.suppressMouseDown = false;\n        this.nodes = h('div.inlineEditHints', { className: this.withBorder ? '.withBorder' : '' }, [\n            h('div@toolBar'),\n        ]);\n        this.inlineCompletionsActionsMenus = this._register(this._menuService.createMenu(MenuId.InlineEditActions, this._contextKeyService));\n        this.toolBar = this._register(instantiationService.createInstance(CustomizedMenuWorkbenchToolBar, this.nodes.toolBar, this.editor, MenuId.InlineEditToolbar, {\n            menuOptions: { renderShortTitle: true },\n            toolbarOptions: { primaryGroup: g => g.startsWith('primary') },\n            actionViewItemProvider: (action, options) => {\n                if (action instanceof MenuItemAction) {\n                    return instantiationService.createInstance(StatusBarViewItem, action, undefined);\n                }\n                return undefined;\n            },\n            telemetrySource: 'InlineEditToolbar',\n        }));\n        this._register(this.toolBar.onDidChangeDropdownVisibility(e => {\n            InlineEditHintsContentWidget_1._dropDownVisible = e;\n        }));\n        this._register(autorun(reader => {\n            /** @description update position */\n            this._position.read(reader);\n            this.editor.layoutContentWidget(this);\n        }));\n        this._register(autorun(reader => {\n            /** @description actions menu */\n            const extraActions = [];\n            for (const [_, group] of this.inlineCompletionsActionsMenus.getActions()) {\n                for (const action of group) {\n                    if (action instanceof MenuItemAction) {\n                        extraActions.push(action);\n                    }\n                }\n            }\n            if (extraActions.length > 0) {\n                extraActions.unshift(new Separator());\n            }\n            this.toolBar.setAdditionalSecondaryActions(extraActions);\n        }));\n    }\n    getId() { return this.id; }\n    getDomNode() {\n        return this.nodes.root;\n    }\n    getPosition() {\n        return {\n            position: this._position.get(),\n            preference: [1 /* ContentWidgetPositionPreference.ABOVE */, 2 /* ContentWidgetPositionPreference.BELOW */],\n            positionAffinity: 3 /* PositionAffinity.LeftOfInjectedText */,\n        };\n    }\n};\nInlineEditHintsContentWidget._dropDownVisible = false;\nInlineEditHintsContentWidget.id = 0;\nInlineEditHintsContentWidget = InlineEditHintsContentWidget_1 = __decorate([\n    __param(3, IInstantiationService),\n    __param(4, IContextKeyService),\n    __param(5, IMenuService)\n], InlineEditHintsContentWidget);\nexport { InlineEditHintsContentWidget };\nclass StatusBarViewItem extends MenuEntryActionViewItem {\n    updateLabel() {\n        const kb = this._keybindingService.lookupKeybinding(this._action.id, this._contextKeyService);\n        if (!kb) {\n            return super.updateLabel();\n        }\n        if (this.label) {\n            const div = h('div.keybinding').root;\n            const k = this._register(new KeybindingLabel(div, OS, { disableTitle: true, ...unthemedKeybindingLabelOptions }));\n            k.set(kb);\n            this.label.textContent = this._action.label;\n            this.label.appendChild(div);\n            this.label.classList.add('inlineEditStatusBarItemLabel');\n        }\n    }\n    updateTooltip() {\n        // NOOP, disable tooltip\n    }\n}\nlet CustomizedMenuWorkbenchToolBar = class CustomizedMenuWorkbenchToolBar extends WorkbenchToolBar {\n    constructor(container, editor, menuId, options2, menuService, contextKeyService, contextMenuService, keybindingService, commandService, telemetryService) {\n        super(container, { resetMenu: menuId, ...options2 }, menuService, contextKeyService, contextMenuService, keybindingService, commandService, telemetryService);\n        this.editor = editor;\n        this.menuId = menuId;\n        this.options2 = options2;\n        this.menuService = menuService;\n        this.contextKeyService = contextKeyService;\n        this.menu = this._store.add(this.menuService.createMenu(this.menuId, this.contextKeyService, { emitEventsForSubmenuChanges: true }));\n        this.additionalActions = [];\n        this.prependedPrimaryActions = [];\n        this._store.add(this.menu.onDidChange(() => this.updateToolbar()));\n        this._store.add(this.editor.onDidChangeCursorPosition(() => this.updateToolbar()));\n        this.updateToolbar();\n    }\n    updateToolbar() {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const primary = [];\n        const secondary = [];\n        createAndFillInActionBarActions(this.menu, (_a = this.options2) === null || _a === void 0 ? void 0 : _a.menuOptions, { primary, secondary }, (_c = (_b = this.options2) === null || _b === void 0 ? void 0 : _b.toolbarOptions) === null || _c === void 0 ? void 0 : _c.primaryGroup, (_e = (_d = this.options2) === null || _d === void 0 ? void 0 : _d.toolbarOptions) === null || _e === void 0 ? void 0 : _e.shouldInlineSubmenu, (_g = (_f = this.options2) === null || _f === void 0 ? void 0 : _f.toolbarOptions) === null || _g === void 0 ? void 0 : _g.useSeparatorsInPrimaryActions);\n        secondary.push(...this.additionalActions);\n        primary.unshift(...this.prependedPrimaryActions);\n        this.setActions(primary, secondary);\n    }\n    setAdditionalSecondaryActions(actions) {\n        if (equals(this.additionalActions, actions, (a, b) => a === b)) {\n            return;\n        }\n        this.additionalActions = actions;\n        this.updateToolbar();\n    }\n};\nCustomizedMenuWorkbenchToolBar = __decorate([\n    __param(4, IMenuService),\n    __param(5, IContextKeyService),\n    __param(6, IContextMenuService),\n    __param(7, IKeybindingService),\n    __param(8, ICommandService),\n    __param(9, ITelemetryService)\n], CustomizedMenuWorkbenchToolBar);\nexport { CustomizedMenuWorkbenchToolBar };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar InlineEditController_1;\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, constObservable, disposableObservableValue, observableFromEvent, observableSignalFromEvent, observableValue, transaction } from '../../../../base/common/observable.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { GhostTextWidget } from './ghostTextWidget.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { InlineEditTriggerKind } from '../../../common/languages.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { GhostText, GhostTextPart } from '../../inlineCompletions/browser/ghostText.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { InlineEditHintsWidget } from './inlineEditHintsWidget.js';\nimport { createStyleSheet2 } from '../../../../base/browser/dom.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nexport class InlineEditWidget {\n    constructor(widget, edit) {\n        this.widget = widget;\n        this.edit = edit;\n    }\n    dispose() {\n        this.widget.dispose();\n    }\n}\nlet InlineEditController = InlineEditController_1 = class InlineEditController extends Disposable {\n    static get(editor) {\n        return editor.getContribution(InlineEditController_1.ID);\n    }\n    constructor(editor, instantiationService, contextKeyService, languageFeaturesService, _commandService, _configurationService) {\n        super();\n        this.editor = editor;\n        this.instantiationService = instantiationService;\n        this.contextKeyService = contextKeyService;\n        this.languageFeaturesService = languageFeaturesService;\n        this._commandService = _commandService;\n        this._configurationService = _configurationService;\n        this._isVisibleContext = InlineEditController_1.inlineEditVisibleContext.bindTo(this.contextKeyService);\n        this._isCursorAtInlineEditContext = InlineEditController_1.cursorAtInlineEditContext.bindTo(this.contextKeyService);\n        this._currentEdit = this._register(disposableObservableValue(this, undefined));\n        this._isAccepting = observableValue(this, false);\n        this._enabled = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(63 /* EditorOption.inlineEdit */).enabled);\n        this._fontFamily = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(63 /* EditorOption.inlineEdit */).fontFamily);\n        this._backgroundColoring = observableFromEvent(this.editor.onDidChangeConfiguration, () => this.editor.getOption(63 /* EditorOption.inlineEdit */).backgroundColoring);\n        //Automatically request inline edit when the content was changed\n        //Cancel the previous request if there is one\n        //Remove the previous ghost text\n        const modelChangedSignal = observableSignalFromEvent('InlineEditController.modelContentChangedSignal', editor.onDidChangeModelContent);\n        this._register(autorun(reader => {\n            /** @description InlineEditController.modelContentChanged model */\n            if (!this._enabled.read(reader)) {\n                return;\n            }\n            modelChangedSignal.read(reader);\n            if (this._isAccepting.read(reader)) {\n                return;\n            }\n            this.getInlineEdit(editor, true);\n        }));\n        //Check if the cursor is at the ghost text\n        const cursorPosition = observableFromEvent(editor.onDidChangeCursorPosition, () => editor.getPosition());\n        this._register(autorun(reader => {\n            /** @description InlineEditController.cursorPositionChanged model */\n            if (!this._enabled.read(reader)) {\n                return;\n            }\n            const pos = cursorPosition.read(reader);\n            if (pos) {\n                this.checkCursorPosition(pos);\n            }\n        }));\n        //Perform stuff when the current edit has changed\n        this._register(autorun((reader) => {\n            /** @description InlineEditController.update model */\n            const currentEdit = this._currentEdit.read(reader);\n            this._isCursorAtInlineEditContext.set(false);\n            if (!currentEdit) {\n                this._isVisibleContext.set(false);\n                return;\n            }\n            this._isVisibleContext.set(true);\n            const pos = editor.getPosition();\n            if (pos) {\n                this.checkCursorPosition(pos);\n            }\n        }));\n        //Clear suggestions on lost focus\n        const editorBlurSingal = observableSignalFromEvent('InlineEditController.editorBlurSignal', editor.onDidBlurEditorWidget);\n        this._register(autorun(async (reader) => {\n            var _a;\n            /** @description InlineEditController.editorBlur */\n            if (!this._enabled.read(reader)) {\n                return;\n            }\n            editorBlurSingal.read(reader);\n            // This is a hidden setting very useful for debugging\n            if (this._configurationService.getValue('editor.experimentalInlineEdit.keepOnBlur') || editor.getOption(63 /* EditorOption.inlineEdit */).keepOnBlur) {\n                return;\n            }\n            (_a = this._currentRequestCts) === null || _a === void 0 ? void 0 : _a.dispose(true);\n            this._currentRequestCts = undefined;\n            await this.clear(false);\n        }));\n        //Invoke provider on focus\n        const editorFocusSignal = observableSignalFromEvent('InlineEditController.editorFocusSignal', editor.onDidFocusEditorText);\n        this._register(autorun(reader => {\n            /** @description InlineEditController.editorFocus */\n            if (!this._enabled.read(reader)) {\n                return;\n            }\n            editorFocusSignal.read(reader);\n            this.getInlineEdit(editor, true);\n        }));\n        //handle changes of font setting\n        const styleElement = this._register(createStyleSheet2());\n        this._register(autorun(reader => {\n            const fontFamily = this._fontFamily.read(reader);\n            styleElement.setStyle(fontFamily === '' || fontFamily === 'default' ? `` : `\n.monaco-editor .inline-edit-decoration,\n.monaco-editor .inline-edit-decoration-preview,\n.monaco-editor .inline-edit {\n\tfont-family: ${fontFamily};\n}`);\n        }));\n        this._register(new InlineEditHintsWidget(this.editor, this._currentEdit, this.instantiationService));\n    }\n    checkCursorPosition(position) {\n        var _a;\n        if (!this._currentEdit) {\n            this._isCursorAtInlineEditContext.set(false);\n            return;\n        }\n        const gt = (_a = this._currentEdit.get()) === null || _a === void 0 ? void 0 : _a.edit;\n        if (!gt) {\n            this._isCursorAtInlineEditContext.set(false);\n            return;\n        }\n        this._isCursorAtInlineEditContext.set(Range.containsPosition(gt.range, position));\n    }\n    validateInlineEdit(editor, edit) {\n        var _a, _b;\n        //Multiline inline replacing edit must replace whole lines\n        if (edit.text.includes('\\n') && edit.range.startLineNumber !== edit.range.endLineNumber && edit.range.startColumn !== edit.range.endColumn) {\n            const firstColumn = edit.range.startColumn;\n            if (firstColumn !== 1) {\n                return false;\n            }\n            const lastLine = edit.range.endLineNumber;\n            const lastColumn = edit.range.endColumn;\n            const lineLength = (_b = (_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.getLineLength(lastLine)) !== null && _b !== void 0 ? _b : 0;\n            if (lastColumn !== lineLength + 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    async fetchInlineEdit(editor, auto) {\n        if (this._currentRequestCts) {\n            this._currentRequestCts.dispose(true);\n        }\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const modelVersion = model.getVersionId();\n        const providers = this.languageFeaturesService.inlineEditProvider.all(model);\n        if (providers.length === 0) {\n            return;\n        }\n        const provider = providers[0];\n        this._currentRequestCts = new CancellationTokenSource();\n        const token = this._currentRequestCts.token;\n        const triggerKind = auto ? InlineEditTriggerKind.Automatic : InlineEditTriggerKind.Invoke;\n        const shouldDebounce = auto;\n        if (shouldDebounce) {\n            await wait(50, token);\n        }\n        if (token.isCancellationRequested || model.isDisposed() || model.getVersionId() !== modelVersion) {\n            return;\n        }\n        const edit = await provider.provideInlineEdit(model, { triggerKind }, token);\n        if (!edit) {\n            return;\n        }\n        if (token.isCancellationRequested || model.isDisposed() || model.getVersionId() !== modelVersion) {\n            return;\n        }\n        if (!this.validateInlineEdit(editor, edit)) {\n            return;\n        }\n        return edit;\n    }\n    async getInlineEdit(editor, auto) {\n        var _a;\n        this._isCursorAtInlineEditContext.set(false);\n        await this.clear();\n        const edit = await this.fetchInlineEdit(editor, auto);\n        if (!edit) {\n            return;\n        }\n        const line = edit.range.endLineNumber;\n        const column = edit.range.endColumn;\n        const textToDisplay = edit.text.endsWith('\\n') && !(edit.range.startLineNumber === edit.range.endLineNumber && edit.range.startColumn === edit.range.endColumn) ? edit.text.slice(0, -1) : edit.text;\n        const ghostText = new GhostText(line, [new GhostTextPart(column, textToDisplay, false)]);\n        const instance = this.instantiationService.createInstance(GhostTextWidget, this.editor, {\n            ghostText: constObservable(ghostText),\n            minReservedLineCount: constObservable(0),\n            targetTextModel: constObservable((_a = this.editor.getModel()) !== null && _a !== void 0 ? _a : undefined),\n            range: constObservable(edit.range),\n            backgroundColoring: this._backgroundColoring\n        });\n        this._currentEdit.set(new InlineEditWidget(instance, edit), undefined);\n    }\n    async trigger() {\n        await this.getInlineEdit(this.editor, false);\n    }\n    async jumpBack() {\n        if (!this._jumpBackPosition) {\n            return;\n        }\n        this.editor.setPosition(this._jumpBackPosition);\n        //if position is outside viewports, scroll to it\n        this.editor.revealPositionInCenterIfOutsideViewport(this._jumpBackPosition);\n    }\n    async accept() {\n        var _a;\n        this._isAccepting.set(true, undefined);\n        const data = (_a = this._currentEdit.get()) === null || _a === void 0 ? void 0 : _a.edit;\n        if (!data) {\n            return;\n        }\n        //It should only happen in case of last line suggestion\n        let text = data.text;\n        if (data.text.startsWith('\\n')) {\n            text = data.text.substring(1);\n        }\n        this.editor.pushUndoStop();\n        this.editor.executeEdits('acceptCurrent', [EditOperation.replace(Range.lift(data.range), text)]);\n        if (data.accepted) {\n            await this._commandService\n                .executeCommand(data.accepted.id, ...(data.accepted.arguments || []))\n                .then(undefined, onUnexpectedExternalError);\n        }\n        this.freeEdit(data);\n        transaction((tx) => {\n            this._currentEdit.set(undefined, tx);\n            this._isAccepting.set(false, tx);\n        });\n    }\n    jumpToCurrent() {\n        var _a, _b;\n        this._jumpBackPosition = (_a = this.editor.getSelection()) === null || _a === void 0 ? void 0 : _a.getStartPosition();\n        const data = (_b = this._currentEdit.get()) === null || _b === void 0 ? void 0 : _b.edit;\n        if (!data) {\n            return;\n        }\n        const position = Position.lift({ lineNumber: data.range.startLineNumber, column: data.range.startColumn });\n        this.editor.setPosition(position);\n        //if position is outside viewports, scroll to it\n        this.editor.revealPositionInCenterIfOutsideViewport(position);\n    }\n    async clear(sendRejection = true) {\n        var _a;\n        const edit = (_a = this._currentEdit.get()) === null || _a === void 0 ? void 0 : _a.edit;\n        if (edit && (edit === null || edit === void 0 ? void 0 : edit.rejected) && sendRejection) {\n            await this._commandService\n                .executeCommand(edit.rejected.id, ...(edit.rejected.arguments || []))\n                .then(undefined, onUnexpectedExternalError);\n        }\n        if (edit) {\n            this.freeEdit(edit);\n        }\n        this._currentEdit.set(undefined, undefined);\n    }\n    freeEdit(edit) {\n        const model = this.editor.getModel();\n        if (!model) {\n            return;\n        }\n        const providers = this.languageFeaturesService.inlineEditProvider.all(model);\n        if (providers.length === 0) {\n            return;\n        }\n        providers[0].freeInlineEdit(edit);\n    }\n    shouldShowHoverAt(range) {\n        const currentEdit = this._currentEdit.get();\n        if (!currentEdit) {\n            return false;\n        }\n        const edit = currentEdit.edit;\n        const model = currentEdit.widget.model;\n        const overReplaceRange = Range.containsPosition(edit.range, range.getStartPosition()) || Range.containsPosition(edit.range, range.getEndPosition());\n        if (overReplaceRange) {\n            return true;\n        }\n        const ghostText = model.ghostText.get();\n        if (ghostText) {\n            return ghostText.parts.some(p => range.containsPosition(new Position(ghostText.lineNumber, p.column)));\n        }\n        return false;\n    }\n    shouldShowHoverAtViewZone(viewZoneId) {\n        var _a, _b;\n        return (_b = (_a = this._currentEdit.get()) === null || _a === void 0 ? void 0 : _a.widget.ownsViewZone(viewZoneId)) !== null && _b !== void 0 ? _b : false;\n    }\n};\nInlineEditController.ID = 'editor.contrib.inlineEditController';\nInlineEditController.inlineEditVisibleKey = 'inlineEditVisible';\nInlineEditController.inlineEditVisibleContext = new RawContextKey(InlineEditController_1.inlineEditVisibleKey, false);\nInlineEditController.cursorAtInlineEditKey = 'cursorAtInlineEdit';\nInlineEditController.cursorAtInlineEditContext = new RawContextKey(InlineEditController_1.cursorAtInlineEditKey, false);\nInlineEditController = InlineEditController_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IContextKeyService),\n    __param(3, ILanguageFeaturesService),\n    __param(4, ICommandService),\n    __param(5, IConfigurationService)\n], InlineEditController);\nexport { InlineEditController };\nfunction wait(ms, cancellationToken) {\n    return new Promise(resolve => {\n        let d = undefined;\n        const handle = setTimeout(() => {\n            if (d) {\n                d.dispose();\n            }\n            resolve();\n        }, ms);\n        if (cancellationToken) {\n            d = cancellationToken.onCancellationRequested(() => {\n                clearTimeout(handle);\n                if (d) {\n                    d.dispose();\n                }\n                resolve();\n            });\n        }\n    });\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { inlineEditAcceptId, inlineEditJumpBackId, inlineEditJumpToId, inlineEditRejectId } from './commandIds.js';\nimport { InlineEditController } from './inlineEditController.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nexport class AcceptInlineEdit extends EditorAction {\n    constructor() {\n        super({\n            id: inlineEditAcceptId,\n            label: 'Accept Inline Edit',\n            alias: 'Accept Inline Edit',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext),\n            kbOpts: [\n                {\n                    weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n                    primary: 2 /* KeyCode.Tab */,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext, InlineEditController.cursorAtInlineEditContext)\n                }\n            ],\n            menuOpts: [{\n                    menuId: MenuId.InlineEditToolbar,\n                    title: 'Accept',\n                    group: 'primary',\n                    order: 1,\n                }],\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditController.get(editor);\n        await (controller === null || controller === void 0 ? void 0 : controller.accept());\n    }\n}\nexport class TriggerInlineEdit extends EditorAction {\n    constructor() {\n        const activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, ContextKeyExpr.not(InlineEditController.inlineEditVisibleKey));\n        super({\n            id: 'editor.action.inlineEdit.trigger',\n            label: 'Trigger Inline Edit',\n            alias: 'Trigger Inline Edit',\n            precondition: activeExpr,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 86 /* KeyCode.Equal */,\n                kbExpr: activeExpr\n            },\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditController.get(editor);\n        controller === null || controller === void 0 ? void 0 : controller.trigger();\n    }\n}\nexport class JumpToInlineEdit extends EditorAction {\n    constructor() {\n        const activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext, ContextKeyExpr.not(InlineEditController.cursorAtInlineEditKey));\n        super({\n            id: inlineEditJumpToId,\n            label: 'Jump to Inline Edit',\n            alias: 'Jump to Inline Edit',\n            precondition: activeExpr,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 86 /* KeyCode.Equal */,\n                kbExpr: activeExpr\n            },\n            menuOpts: [{\n                    menuId: MenuId.InlineEditToolbar,\n                    title: 'Jump To Edit',\n                    group: 'primary',\n                    order: 3,\n                    when: activeExpr\n                }],\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditController.get(editor);\n        controller === null || controller === void 0 ? void 0 : controller.jumpToCurrent();\n    }\n}\nexport class JumpBackInlineEdit extends EditorAction {\n    constructor() {\n        const activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.cursorAtInlineEditContext);\n        super({\n            id: inlineEditJumpBackId,\n            label: 'Jump Back from Inline Edit',\n            alias: 'Jump Back from Inline Edit',\n            precondition: activeExpr,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */ + 10,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 86 /* KeyCode.Equal */,\n                kbExpr: activeExpr\n            },\n            menuOpts: [{\n                    menuId: MenuId.InlineEditToolbar,\n                    title: 'Jump Back',\n                    group: 'primary',\n                    order: 3,\n                    when: activeExpr\n                }],\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditController.get(editor);\n        controller === null || controller === void 0 ? void 0 : controller.jumpBack();\n    }\n}\nexport class RejectInlineEdit extends EditorAction {\n    constructor() {\n        const activeExpr = ContextKeyExpr.and(EditorContextKeys.writable, InlineEditController.inlineEditVisibleContext);\n        super({\n            id: inlineEditRejectId,\n            label: 'Reject Inline Edit',\n            alias: 'Reject Inline Edit',\n            precondition: activeExpr,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 9 /* KeyCode.Escape */,\n                kbExpr: activeExpr\n            },\n            menuOpts: [{\n                    menuId: MenuId.InlineEditToolbar,\n                    title: 'Reject',\n                    group: 'secondary',\n                    order: 2,\n                }],\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditController.get(editor);\n        await (controller === null || controller === void 0 ? void 0 : controller.clear());\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport const inlineEditAcceptId = 'editor.action.inlineEdit.accept';\nexport const inlineEditRejectId = 'editor.action.inlineEdit.reject';\nexport const inlineEditJumpToId = 'editor.action.inlineEdit.jumpTo';\nexport const inlineEditJumpBackId = 'editor.action.inlineEdit.jumpBack';\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { constObservable } from '../../../../base/common/observable.js';\nimport { HoverForeignElementAnchor } from '../../hover/browser/hoverTypes.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { InlineEditController } from './inlineEditController.js';\nimport { InlineEditHintsContentWidget } from './inlineEditHintsWidget.js';\nexport class InlineEditHover {\n    constructor(owner, range, controller) {\n        this.owner = owner;\n        this.range = range;\n        this.controller = controller;\n    }\n    isValidForHoverAnchor(anchor) {\n        return (anchor.type === 1 /* HoverAnchorType.Range */\n            && this.range.startColumn <= anchor.range.startColumn\n            && this.range.endColumn >= anchor.range.endColumn);\n    }\n}\nlet InlineEditHoverParticipant = class InlineEditHoverParticipant {\n    constructor(_editor, _instantiationService, _telemetryService) {\n        this._editor = _editor;\n        this._instantiationService = _instantiationService;\n        this._telemetryService = _telemetryService;\n        this.hoverOrdinal = 5;\n    }\n    suggestHoverAnchor(mouseEvent) {\n        const controller = InlineEditController.get(this._editor);\n        if (!controller) {\n            return null;\n        }\n        const target = mouseEvent.target;\n        if (target.type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */) {\n            // handle the case where the mouse is over the view zone\n            const viewZoneData = target.detail;\n            if (controller.shouldShowHoverAtViewZone(viewZoneData.viewZoneId)) {\n                // const range = Range.fromPositions(this._editor.getModel()!.validatePosition(viewZoneData.positionBefore || viewZoneData.position));\n                const range = target.range;\n                return new HoverForeignElementAnchor(1000, this, range, mouseEvent.event.posx, mouseEvent.event.posy, false);\n            }\n        }\n        if (target.type === 7 /* MouseTargetType.CONTENT_EMPTY */) {\n            // handle the case where the mouse is over the empty portion of a line following ghost text\n            if (controller.shouldShowHoverAt(target.range)) {\n                return new HoverForeignElementAnchor(1000, this, target.range, mouseEvent.event.posx, mouseEvent.event.posy, false);\n            }\n        }\n        if (target.type === 6 /* MouseTargetType.CONTENT_TEXT */) {\n            // handle the case where the mouse is directly over ghost text\n            const mightBeForeignElement = target.detail.mightBeForeignElement;\n            if (mightBeForeignElement && controller.shouldShowHoverAt(target.range)) {\n                return new HoverForeignElementAnchor(1000, this, target.range, mouseEvent.event.posx, mouseEvent.event.posy, false);\n            }\n        }\n        return null;\n    }\n    computeSync(anchor, lineDecorations) {\n        if (this._editor.getOption(63 /* EditorOption.inlineEdit */).showToolbar !== 'onHover') {\n            return [];\n        }\n        const controller = InlineEditController.get(this._editor);\n        if (controller && controller.shouldShowHoverAt(anchor.range)) {\n            return [new InlineEditHover(this, anchor.range, controller)];\n        }\n        return [];\n    }\n    renderHoverParts(context, hoverParts) {\n        const disposableStore = new DisposableStore();\n        this._telemetryService.publicLog2('inlineEditHover.shown');\n        const w = this._instantiationService.createInstance(InlineEditHintsContentWidget, this._editor, false, constObservable(null));\n        context.fragment.appendChild(w.getDomNode());\n        disposableStore.add(w);\n        return disposableStore;\n    }\n};\nInlineEditHoverParticipant = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, ITelemetryService)\n], InlineEditHoverParticipant);\nexport { InlineEditHoverParticipant };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { HoverParticipantRegistry } from '../../hover/browser/hoverTypes.js';\nimport { AcceptInlineEdit, JumpBackInlineEdit, JumpToInlineEdit, RejectInlineEdit, TriggerInlineEdit } from './commands.js';\nimport { InlineEditHoverParticipant } from './hoverParticipant.js';\nimport { InlineEditController } from './inlineEditController.js';\nregisterEditorAction(AcceptInlineEdit);\nregisterEditorAction(RejectInlineEdit);\nregisterEditorAction(JumpToInlineEdit);\nregisterEditorAction(JumpBackInlineEdit);\nregisterEditorAction(TriggerInlineEdit);\nregisterEditorContribution(InlineEditController.ID, InlineEditController, 3 /* EditorContributionInstantiation.Eventually */);\nHoverParticipantRegistry.register(InlineEditHoverParticipant);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as dom from '../../../../base/browser/dom.js';\nimport { disposableTimeout } from '../../../../base/common/async.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { noBreakWhitespace } from '../../../../base/common/strings.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport './inlineProgressWidget.css';\nimport { Range } from '../../../common/core/range.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nconst inlineProgressDecoration = ModelDecorationOptions.register({\n    description: 'inline-progress-widget',\n    stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */,\n    showIfCollapsed: true,\n    after: {\n        content: noBreakWhitespace,\n        inlineClassName: 'inline-editor-progress-decoration',\n        inlineClassNameAffectsLetterSpacing: true,\n    }\n});\nclass InlineProgressWidget extends Disposable {\n    constructor(typeId, editor, range, title, delegate) {\n        super();\n        this.typeId = typeId;\n        this.editor = editor;\n        this.range = range;\n        this.delegate = delegate;\n        this.allowEditorOverflow = false;\n        this.suppressMouseDown = true;\n        this.create(title);\n        this.editor.addContentWidget(this);\n        this.editor.layoutContentWidget(this);\n    }\n    create(title) {\n        this.domNode = dom.$('.inline-progress-widget');\n        this.domNode.role = 'button';\n        this.domNode.title = title;\n        const iconElement = dom.$('span.icon');\n        this.domNode.append(iconElement);\n        iconElement.classList.add(...ThemeIcon.asClassNameArray(Codicon.loading), 'codicon-modifier-spin');\n        const updateSize = () => {\n            const lineHeight = this.editor.getOption(67 /* EditorOption.lineHeight */);\n            this.domNode.style.height = `${lineHeight}px`;\n            this.domNode.style.width = `${Math.ceil(0.8 * lineHeight)}px`;\n        };\n        updateSize();\n        this._register(this.editor.onDidChangeConfiguration(c => {\n            if (c.hasChanged(52 /* EditorOption.fontSize */) || c.hasChanged(67 /* EditorOption.lineHeight */)) {\n                updateSize();\n            }\n        }));\n        this._register(dom.addDisposableListener(this.domNode, dom.EventType.CLICK, e => {\n            this.delegate.cancel();\n        }));\n    }\n    getId() {\n        return InlineProgressWidget.baseId + '.' + this.typeId;\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    getPosition() {\n        return {\n            position: { lineNumber: this.range.startLineNumber, column: this.range.startColumn },\n            preference: [0 /* ContentWidgetPositionPreference.EXACT */]\n        };\n    }\n    dispose() {\n        super.dispose();\n        this.editor.removeContentWidget(this);\n    }\n}\nInlineProgressWidget.baseId = 'editor.widget.inlineProgressWidget';\nlet InlineProgressManager = class InlineProgressManager extends Disposable {\n    constructor(id, _editor, _instantiationService) {\n        super();\n        this.id = id;\n        this._editor = _editor;\n        this._instantiationService = _instantiationService;\n        /** Delay before showing the progress widget */\n        this._showDelay = 500; // ms\n        this._showPromise = this._register(new MutableDisposable());\n        this._currentWidget = new MutableDisposable();\n        this._operationIdPool = 0;\n        this._currentDecorations = _editor.createDecorationsCollection();\n    }\n    async showWhile(position, title, promise) {\n        const operationId = this._operationIdPool++;\n        this._currentOperation = operationId;\n        this.clear();\n        this._showPromise.value = disposableTimeout(() => {\n            const range = Range.fromPositions(position);\n            const decorationIds = this._currentDecorations.set([{\n                    range: range,\n                    options: inlineProgressDecoration,\n                }]);\n            if (decorationIds.length > 0) {\n                this._currentWidget.value = this._instantiationService.createInstance(InlineProgressWidget, this.id, this._editor, range, title, promise);\n            }\n        }, this._showDelay);\n        try {\n            return await promise;\n        }\n        finally {\n            if (this._currentOperation === operationId) {\n                this.clear();\n                this._currentOperation = undefined;\n            }\n        }\n    }\n    clear() {\n        this._showPromise.clear();\n        this._currentDecorations.clear();\n        this._currentWidget.clear();\n    }\n};\nInlineProgressManager = __decorate([\n    __param(2, IInstantiationService)\n], InlineProgressManager);\nexport { InlineProgressManager };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { CursorMoveCommands } from '../../../common/cursor/cursorMoveCommands.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport * as nls from '../../../../nls.js';\nexport class ExpandLineSelectionAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'expandLineSelection',\n            label: nls.localize('expandLineSelection', \"Expand Line Selection\"),\n            alias: 'Expand Line Selection',\n            precondition: undefined,\n            kbOpts: {\n                weight: 0 /* KeybindingWeight.EditorCore */,\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 42 /* KeyCode.KeyL */\n            },\n        });\n    }\n    run(_accessor, editor, args) {\n        args = args || {};\n        if (!editor.hasModel()) {\n            return;\n        }\n        const viewModel = editor._getViewModel();\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.expandLineSelection(viewModel, viewModel.getCursorStates()));\n        viewModel.revealAllCursors(args.source, true);\n    }\n}\nregisterEditorAction(ExpandLineSelectionAction);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nexport class CopyLinesCommand {\n    constructor(selection, isCopyingDown, noop) {\n        this._selection = selection;\n        this._isCopyingDown = isCopyingDown;\n        this._noop = noop || false;\n        this._selectionDirection = 0 /* SelectionDirection.LTR */;\n        this._selectionId = null;\n        this._startLineNumberDelta = 0;\n        this._endLineNumberDelta = 0;\n    }\n    getEditOperations(model, builder) {\n        let s = this._selection;\n        this._startLineNumberDelta = 0;\n        this._endLineNumberDelta = 0;\n        if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n            this._endLineNumberDelta = 1;\n            s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n        }\n        const sourceLines = [];\n        for (let i = s.startLineNumber; i <= s.endLineNumber; i++) {\n            sourceLines.push(model.getLineContent(i));\n        }\n        const sourceText = sourceLines.join('\\n');\n        if (sourceText === '') {\n            // Duplicating empty line\n            if (this._isCopyingDown) {\n                this._startLineNumberDelta++;\n                this._endLineNumberDelta++;\n            }\n        }\n        if (this._noop) {\n            builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber + 1, 1), s.endLineNumber === model.getLineCount() ? '' : '\\n');\n        }\n        else {\n            if (!this._isCopyingDown) {\n                builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + sourceText);\n            }\n            else {\n                builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), sourceText + '\\n');\n            }\n        }\n        this._selectionId = builder.trackSelection(s);\n        this._selectionDirection = this._selection.getDirection();\n    }\n    computeCursorState(model, helper) {\n        let result = helper.getTrackedSelection(this._selectionId);\n        if (this._startLineNumberDelta !== 0 || this._endLineNumberDelta !== 0) {\n            let startLineNumber = result.startLineNumber;\n            let startColumn = result.startColumn;\n            let endLineNumber = result.endLineNumber;\n            let endColumn = result.endColumn;\n            if (this._startLineNumberDelta !== 0) {\n                startLineNumber = startLineNumber + this._startLineNumberDelta;\n                startColumn = 1;\n            }\n            if (this._endLineNumberDelta !== 0) {\n                endLineNumber = endLineNumber + this._endLineNumberDelta;\n                endColumn = 1;\n            }\n            result = Selection.createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, this._selectionDirection);\n        }\n        return result;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as strings from '../../../../base/common/strings.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { IndentAction } from '../../../common/languages/languageConfiguration.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport * as indentUtils from '../../indentation/common/indentUtils.js';\nimport { getGoodIndentForLine, getIndentMetadata } from '../../../common/languages/autoIndent.js';\nimport { getEnterAction } from '../../../common/languages/enterAction.js';\nlet MoveLinesCommand = class MoveLinesCommand {\n    constructor(selection, isMovingDown, autoIndent, _languageConfigurationService) {\n        this._languageConfigurationService = _languageConfigurationService;\n        this._selection = selection;\n        this._isMovingDown = isMovingDown;\n        this._autoIndent = autoIndent;\n        this._selectionId = null;\n        this._moveEndLineSelectionShrink = false;\n    }\n    getEditOperations(model, builder) {\n        const modelLineCount = model.getLineCount();\n        if (this._isMovingDown && this._selection.endLineNumber === modelLineCount) {\n            this._selectionId = builder.trackSelection(this._selection);\n            return;\n        }\n        if (!this._isMovingDown && this._selection.startLineNumber === 1) {\n            this._selectionId = builder.trackSelection(this._selection);\n            return;\n        }\n        this._moveEndPositionDown = false;\n        let s = this._selection;\n        if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n            this._moveEndPositionDown = true;\n            s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n        }\n        const { tabSize, indentSize, insertSpaces } = model.getOptions();\n        const indentConverter = this.buildIndentConverter(tabSize, indentSize, insertSpaces);\n        const virtualModel = {\n            tokenization: {\n                getLineTokens: (lineNumber) => {\n                    return model.tokenization.getLineTokens(lineNumber);\n                },\n                getLanguageId: () => {\n                    return model.getLanguageId();\n                },\n                getLanguageIdAtPosition: (lineNumber, column) => {\n                    return model.getLanguageIdAtPosition(lineNumber, column);\n                },\n            },\n            getLineContent: null,\n        };\n        if (s.startLineNumber === s.endLineNumber && model.getLineMaxColumn(s.startLineNumber) === 1) {\n            // Current line is empty\n            const lineNumber = s.startLineNumber;\n            const otherLineNumber = (this._isMovingDown ? lineNumber + 1 : lineNumber - 1);\n            if (model.getLineMaxColumn(otherLineNumber) === 1) {\n                // Other line number is empty too, so no editing is needed\n                // Add a no-op to force running by the model\n                builder.addEditOperation(new Range(1, 1, 1, 1), null);\n            }\n            else {\n                // Type content from other line number on line number\n                builder.addEditOperation(new Range(lineNumber, 1, lineNumber, 1), model.getLineContent(otherLineNumber));\n                // Remove content from other line number\n                builder.addEditOperation(new Range(otherLineNumber, 1, otherLineNumber, model.getLineMaxColumn(otherLineNumber)), null);\n            }\n            // Track selection at the other line number\n            s = new Selection(otherLineNumber, 1, otherLineNumber, 1);\n        }\n        else {\n            let movingLineNumber;\n            let movingLineText;\n            if (this._isMovingDown) {\n                movingLineNumber = s.endLineNumber + 1;\n                movingLineText = model.getLineContent(movingLineNumber);\n                // Delete line that needs to be moved\n                builder.addEditOperation(new Range(movingLineNumber - 1, model.getLineMaxColumn(movingLineNumber - 1), movingLineNumber, model.getLineMaxColumn(movingLineNumber)), null);\n                let insertingText = movingLineText;\n                if (this.shouldAutoIndent(model, s)) {\n                    const movingLineMatchResult = this.matchEnterRule(model, indentConverter, tabSize, movingLineNumber, s.startLineNumber - 1);\n                    // if s.startLineNumber - 1 matches onEnter rule, we still honor that.\n                    if (movingLineMatchResult !== null) {\n                        const oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber));\n                        const newSpaceCnt = movingLineMatchResult + indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                        const newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n                        insertingText = newIndentation + this.trimStart(movingLineText);\n                    }\n                    else {\n                        // no enter rule matches, let's check indentatin rules then.\n                        virtualModel.getLineContent = (lineNumber) => {\n                            if (lineNumber === s.startLineNumber) {\n                                return model.getLineContent(movingLineNumber);\n                            }\n                            else {\n                                return model.getLineContent(lineNumber);\n                            }\n                        };\n                        const indentOfMovingLine = getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber, 1), s.startLineNumber, indentConverter, this._languageConfigurationService);\n                        if (indentOfMovingLine !== null) {\n                            const oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber));\n                            const newSpaceCnt = indentUtils.getSpaceCnt(indentOfMovingLine, tabSize);\n                            const oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                            if (newSpaceCnt !== oldSpaceCnt) {\n                                const newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n                                insertingText = newIndentation + this.trimStart(movingLineText);\n                            }\n                        }\n                    }\n                    // add edit operations for moving line first to make sure it's executed after we make indentation change\n                    // to s.startLineNumber\n                    builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText + '\\n');\n                    const ret = this.matchEnterRuleMovingDown(model, indentConverter, tabSize, s.startLineNumber, movingLineNumber, insertingText);\n                    // check if the line being moved before matches onEnter rules, if so let's adjust the indentation by onEnter rules.\n                    if (ret !== null) {\n                        if (ret !== 0) {\n                            this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n                        }\n                    }\n                    else {\n                        // it doesn't match onEnter rules, let's check indentation rules then.\n                        virtualModel.getLineContent = (lineNumber) => {\n                            if (lineNumber === s.startLineNumber) {\n                                return insertingText;\n                            }\n                            else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) {\n                                return model.getLineContent(lineNumber - 1);\n                            }\n                            else {\n                                return model.getLineContent(lineNumber);\n                            }\n                        };\n                        const newIndentatOfMovingBlock = getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(movingLineNumber, 1), s.startLineNumber + 1, indentConverter, this._languageConfigurationService);\n                        if (newIndentatOfMovingBlock !== null) {\n                            const oldIndentation = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n                            const newSpaceCnt = indentUtils.getSpaceCnt(newIndentatOfMovingBlock, tabSize);\n                            const oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                            if (newSpaceCnt !== oldSpaceCnt) {\n                                const spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n                                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Insert line that needs to be moved before\n                    builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText + '\\n');\n                }\n            }\n            else {\n                movingLineNumber = s.startLineNumber - 1;\n                movingLineText = model.getLineContent(movingLineNumber);\n                // Delete line that needs to be moved\n                builder.addEditOperation(new Range(movingLineNumber, 1, movingLineNumber + 1, 1), null);\n                // Insert line that needs to be moved after\n                builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + movingLineText);\n                if (this.shouldAutoIndent(model, s)) {\n                    virtualModel.getLineContent = (lineNumber) => {\n                        if (lineNumber === movingLineNumber) {\n                            return model.getLineContent(s.startLineNumber);\n                        }\n                        else {\n                            return model.getLineContent(lineNumber);\n                        }\n                    };\n                    const ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber - 2);\n                    // check if s.startLineNumber - 2 matches onEnter rules, if so adjust the moving block by onEnter rules.\n                    if (ret !== null) {\n                        if (ret !== 0) {\n                            this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n                        }\n                    }\n                    else {\n                        // it doesn't match any onEnter rule, let's check indentation rules then.\n                        const indentOfFirstLine = getGoodIndentForLine(this._autoIndent, virtualModel, model.getLanguageIdAtPosition(s.startLineNumber, 1), movingLineNumber, indentConverter, this._languageConfigurationService);\n                        if (indentOfFirstLine !== null) {\n                            // adjust the indentation of the moving block\n                            const oldIndent = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n                            const newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n                            const oldSpaceCnt = indentUtils.getSpaceCnt(oldIndent, tabSize);\n                            if (newSpaceCnt !== oldSpaceCnt) {\n                                const spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n                                this.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this._selectionId = builder.trackSelection(s);\n    }\n    buildIndentConverter(tabSize, indentSize, insertSpaces) {\n        return {\n            shiftIndent: (indentation) => {\n                return ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n            },\n            unshiftIndent: (indentation) => {\n                return ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n            }\n        };\n    }\n    parseEnterResult(model, indentConverter, tabSize, line, enter) {\n        if (enter) {\n            let enterPrefix = enter.indentation;\n            if (enter.indentAction === IndentAction.None) {\n                enterPrefix = enter.indentation + enter.appendText;\n            }\n            else if (enter.indentAction === IndentAction.Indent) {\n                enterPrefix = enter.indentation + enter.appendText;\n            }\n            else if (enter.indentAction === IndentAction.IndentOutdent) {\n                enterPrefix = enter.indentation;\n            }\n            else if (enter.indentAction === IndentAction.Outdent) {\n                enterPrefix = indentConverter.unshiftIndent(enter.indentation) + enter.appendText;\n            }\n            const movingLineText = model.getLineContent(line);\n            if (this.trimStart(movingLineText).indexOf(this.trimStart(enterPrefix)) >= 0) {\n                const oldIndentation = strings.getLeadingWhitespace(model.getLineContent(line));\n                let newIndentation = strings.getLeadingWhitespace(enterPrefix);\n                const indentMetadataOfMovelingLine = getIndentMetadata(model, line, this._languageConfigurationService);\n                if (indentMetadataOfMovelingLine !== null && indentMetadataOfMovelingLine & 2 /* IndentConsts.DECREASE_MASK */) {\n                    newIndentation = indentConverter.unshiftIndent(newIndentation);\n                }\n                const newSpaceCnt = indentUtils.getSpaceCnt(newIndentation, tabSize);\n                const oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                return newSpaceCnt - oldSpaceCnt;\n            }\n        }\n        return null;\n    }\n    /**\n     *\n     * @param model\n     * @param indentConverter\n     * @param tabSize\n     * @param line the line moving down\n     * @param futureAboveLineNumber the line which will be at the `line` position\n     * @param futureAboveLineText\n     */\n    matchEnterRuleMovingDown(model, indentConverter, tabSize, line, futureAboveLineNumber, futureAboveLineText) {\n        if (strings.lastNonWhitespaceIndex(futureAboveLineText) >= 0) {\n            // break\n            const maxColumn = model.getLineMaxColumn(futureAboveLineNumber);\n            const enter = getEnterAction(this._autoIndent, model, new Range(futureAboveLineNumber, maxColumn, futureAboveLineNumber, maxColumn), this._languageConfigurationService);\n            return this.parseEnterResult(model, indentConverter, tabSize, line, enter);\n        }\n        else {\n            // go upwards, starting from `line - 1`\n            let validPrecedingLine = line - 1;\n            while (validPrecedingLine >= 1) {\n                const lineContent = model.getLineContent(validPrecedingLine);\n                const nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);\n                if (nonWhitespaceIdx >= 0) {\n                    break;\n                }\n                validPrecedingLine--;\n            }\n            if (validPrecedingLine < 1 || line > model.getLineCount()) {\n                return null;\n            }\n            const maxColumn = model.getLineMaxColumn(validPrecedingLine);\n            const enter = getEnterAction(this._autoIndent, model, new Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn), this._languageConfigurationService);\n            return this.parseEnterResult(model, indentConverter, tabSize, line, enter);\n        }\n    }\n    matchEnterRule(model, indentConverter, tabSize, line, oneLineAbove, previousLineText) {\n        let validPrecedingLine = oneLineAbove;\n        while (validPrecedingLine >= 1) {\n            // ship empty lines as empty lines just inherit indentation\n            let lineContent;\n            if (validPrecedingLine === oneLineAbove && previousLineText !== undefined) {\n                lineContent = previousLineText;\n            }\n            else {\n                lineContent = model.getLineContent(validPrecedingLine);\n            }\n            const nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);\n            if (nonWhitespaceIdx >= 0) {\n                break;\n            }\n            validPrecedingLine--;\n        }\n        if (validPrecedingLine < 1 || line > model.getLineCount()) {\n            return null;\n        }\n        const maxColumn = model.getLineMaxColumn(validPrecedingLine);\n        const enter = getEnterAction(this._autoIndent, model, new Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn), this._languageConfigurationService);\n        return this.parseEnterResult(model, indentConverter, tabSize, line, enter);\n    }\n    trimStart(str) {\n        return str.replace(/^\\s+/, '');\n    }\n    shouldAutoIndent(model, selection) {\n        if (this._autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n            return false;\n        }\n        // if it's not easy to tokenize, we stop auto indent.\n        if (!model.tokenization.isCheapToTokenize(selection.startLineNumber)) {\n            return false;\n        }\n        const languageAtSelectionStart = model.getLanguageIdAtPosition(selection.startLineNumber, 1);\n        const languageAtSelectionEnd = model.getLanguageIdAtPosition(selection.endLineNumber, 1);\n        if (languageAtSelectionStart !== languageAtSelectionEnd) {\n            return false;\n        }\n        if (this._languageConfigurationService.getLanguageConfiguration(languageAtSelectionStart).indentRulesSupport === null) {\n            return false;\n        }\n        return true;\n    }\n    getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, offset) {\n        for (let i = s.startLineNumber; i <= s.endLineNumber; i++) {\n            const lineContent = model.getLineContent(i);\n            const originalIndent = strings.getLeadingWhitespace(lineContent);\n            const originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n            const newSpacesCnt = originalSpacesCnt + offset;\n            const newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n            if (newIndent !== originalIndent) {\n                builder.addEditOperation(new Range(i, 1, i, originalIndent.length + 1), newIndent);\n                if (i === s.endLineNumber && s.endColumn <= originalIndent.length + 1 && newIndent === '') {\n                    // as users select part of the original indent white spaces\n                    // when we adjust the indentation of endLine, we should adjust the cursor position as well.\n                    this._moveEndLineSelectionShrink = true;\n                }\n            }\n        }\n    }\n    computeCursorState(model, helper) {\n        let result = helper.getTrackedSelection(this._selectionId);\n        if (this._moveEndPositionDown) {\n            result = result.setEndPosition(result.endLineNumber + 1, 1);\n        }\n        if (this._moveEndLineSelectionShrink && result.startLineNumber < result.endLineNumber) {\n            result = result.setEndPosition(result.endLineNumber, 2);\n        }\n        return result;\n    }\n};\nMoveLinesCommand = __decorate([\n    __param(3, ILanguageConfigurationService)\n], MoveLinesCommand);\nexport { MoveLinesCommand };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nexport class SortLinesCommand {\n    static getCollator() {\n        if (!SortLinesCommand._COLLATOR) {\n            SortLinesCommand._COLLATOR = new Intl.Collator();\n        }\n        return SortLinesCommand._COLLATOR;\n    }\n    constructor(selection, descending) {\n        this.selection = selection;\n        this.descending = descending;\n        this.selectionId = null;\n    }\n    getEditOperations(model, builder) {\n        const op = sortLines(model, this.selection, this.descending);\n        if (op) {\n            builder.addEditOperation(op.range, op.text);\n        }\n        this.selectionId = builder.trackSelection(this.selection);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this.selectionId);\n    }\n    static canRun(model, selection, descending) {\n        if (model === null) {\n            return false;\n        }\n        const data = getSortData(model, selection, descending);\n        if (!data) {\n            return false;\n        }\n        for (let i = 0, len = data.before.length; i < len; i++) {\n            if (data.before[i] !== data.after[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nSortLinesCommand._COLLATOR = null;\nfunction getSortData(model, selection, descending) {\n    const startLineNumber = selection.startLineNumber;\n    let endLineNumber = selection.endLineNumber;\n    if (selection.endColumn === 1) {\n        endLineNumber--;\n    }\n    // Nothing to sort if user didn't select anything.\n    if (startLineNumber >= endLineNumber) {\n        return null;\n    }\n    const linesToSort = [];\n    // Get the contents of the selection to be sorted.\n    for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        linesToSort.push(model.getLineContent(lineNumber));\n    }\n    let sorted = linesToSort.slice(0);\n    sorted.sort(SortLinesCommand.getCollator().compare);\n    // If descending, reverse the order.\n    if (descending === true) {\n        sorted = sorted.reverse();\n    }\n    return {\n        startLineNumber: startLineNumber,\n        endLineNumber: endLineNumber,\n        before: linesToSort,\n        after: sorted\n    };\n}\n/**\n * Generate commands for sorting lines on a model.\n */\nfunction sortLines(model, selection, descending) {\n    const data = getSortData(model, selection, descending);\n    if (!data) {\n        return null;\n    }\n    return EditOperation.replace(new Range(data.startLineNumber, 1, data.endLineNumber, model.getLineMaxColumn(data.endLineNumber)), data.after.join('\\n'));\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { CoreEditingCommands } from '../../../browser/coreCommands.js';\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection, ReplaceCommandThatSelectsText } from '../../../common/commands/replaceCommand.js';\nimport { TrimTrailingWhitespaceCommand } from '../../../common/commands/trimTrailingWhitespaceCommand.js';\nimport { TypeOperations } from '../../../common/cursor/cursorTypeOperations.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { CopyLinesCommand } from './copyLinesCommand.js';\nimport { MoveLinesCommand } from './moveLinesCommand.js';\nimport { SortLinesCommand } from './sortLinesCommand.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\n// copy lines\nclass AbstractCopyLinesAction extends EditorAction {\n    constructor(down, opts) {\n        super(opts);\n        this.down = down;\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const selections = editor.getSelections().map((selection, index) => ({ selection, index, ignore: false }));\n        selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n        // Remove selections that would result in copying the same line\n        let prev = selections[0];\n        for (let i = 1; i < selections.length; i++) {\n            const curr = selections[i];\n            if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n                // these two selections would copy the same line\n                if (prev.index < curr.index) {\n                    // prev wins\n                    curr.ignore = true;\n                }\n                else {\n                    // curr wins\n                    prev.ignore = true;\n                    prev = curr;\n                }\n            }\n        }\n        const commands = [];\n        for (const selection of selections) {\n            commands.push(new CopyLinesCommand(selection.selection, this.down, selection.ignore));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nclass CopyLinesUpAction extends AbstractCopyLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.copyLinesUpAction',\n            label: nls.localize('lines.copyUp', \"Copy Line Up\"),\n            alias: 'Copy Line Up',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n                linux: { primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miCopyLinesUp', comment: ['&& denotes a mnemonic'] }, \"&&Copy Line Up\"),\n                order: 1\n            }\n        });\n    }\n}\nclass CopyLinesDownAction extends AbstractCopyLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.copyLinesDownAction',\n            label: nls.localize('lines.copyDown', \"Copy Line Down\"),\n            alias: 'Copy Line Down',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n                linux: { primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miCopyLinesDown', comment: ['&& denotes a mnemonic'] }, \"Co&&py Line Down\"),\n                order: 2\n            }\n        });\n    }\n}\nexport class DuplicateSelectionAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.duplicateSelection',\n            label: nls.localize('duplicateSelection', \"Duplicate Selection\"),\n            alias: 'Duplicate Selection',\n            precondition: EditorContextKeys.writable,\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miDuplicateSelection', comment: ['&& denotes a mnemonic'] }, \"&&Duplicate Selection\"),\n                order: 5\n            }\n        });\n    }\n    run(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const commands = [];\n        const selections = editor.getSelections();\n        const model = editor.getModel();\n        for (const selection of selections) {\n            if (selection.isEmpty()) {\n                commands.push(new CopyLinesCommand(selection, true));\n            }\n            else {\n                const insertSelection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);\n                commands.push(new ReplaceCommandThatSelectsText(insertSelection, model.getValueInRange(selection)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\n// move lines\nclass AbstractMoveLinesAction extends EditorAction {\n    constructor(down, opts) {\n        super(opts);\n        this.down = down;\n    }\n    run(accessor, editor) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        const commands = [];\n        const selections = editor.getSelections() || [];\n        const autoIndent = editor.getOption(12 /* EditorOption.autoIndent */);\n        for (const selection of selections) {\n            commands.push(new MoveLinesCommand(selection, this.down, autoIndent, languageConfigurationService));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nclass MoveLinesUpAction extends AbstractMoveLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.moveLinesUpAction',\n            label: nls.localize('lines.moveUp', \"Move Line Up\"),\n            alias: 'Move Line Up',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n                linux: { primary: 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miMoveLinesUp', comment: ['&& denotes a mnemonic'] }, \"Mo&&ve Line Up\"),\n                order: 3\n            }\n        });\n    }\n}\nclass MoveLinesDownAction extends AbstractMoveLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.moveLinesDownAction',\n            label: nls.localize('lines.moveDown', \"Move Line Down\"),\n            alias: 'Move Line Down',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n                linux: { primary: 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miMoveLinesDown', comment: ['&& denotes a mnemonic'] }, \"Move &&Line Down\"),\n                order: 4\n            }\n        });\n    }\n}\nexport class AbstractSortLinesAction extends EditorAction {\n    constructor(descending, opts) {\n        super(opts);\n        this.descending = descending;\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const model = editor.getModel();\n        let selections = editor.getSelections();\n        if (selections.length === 1 && selections[0].isEmpty()) {\n            // Apply to whole document.\n            selections = [new Selection(1, 1, model.getLineCount(), model.getLineMaxColumn(model.getLineCount()))];\n        }\n        for (const selection of selections) {\n            if (!SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {\n                return;\n            }\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new SortLinesCommand(selections[i], this.descending);\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nexport class SortLinesAscendingAction extends AbstractSortLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.sortLinesAscending',\n            label: nls.localize('lines.sortAscending', \"Sort Lines Ascending\"),\n            alias: 'Sort Lines Ascending',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class SortLinesDescendingAction extends AbstractSortLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.sortLinesDescending',\n            label: nls.localize('lines.sortDescending', \"Sort Lines Descending\"),\n            alias: 'Sort Lines Descending',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteDuplicateLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.removeDuplicateLines',\n            label: nls.localize('lines.deleteDuplicates', \"Delete Duplicate Lines\"),\n            alias: 'Delete Duplicate Lines',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const model = editor.getModel();\n        if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n            return;\n        }\n        const edits = [];\n        const endCursorState = [];\n        let linesDeleted = 0;\n        let updateSelection = true;\n        let selections = editor.getSelections();\n        if (selections.length === 1 && selections[0].isEmpty()) {\n            // Apply to whole document.\n            selections = [new Selection(1, 1, model.getLineCount(), model.getLineMaxColumn(model.getLineCount()))];\n            updateSelection = false;\n        }\n        for (const selection of selections) {\n            const uniqueLines = new Set();\n            const lines = [];\n            for (let i = selection.startLineNumber; i <= selection.endLineNumber; i++) {\n                const line = model.getLineContent(i);\n                if (uniqueLines.has(line)) {\n                    continue;\n                }\n                lines.push(line);\n                uniqueLines.add(line);\n            }\n            const selectionToReplace = new Selection(selection.startLineNumber, 1, selection.endLineNumber, model.getLineMaxColumn(selection.endLineNumber));\n            const adjustedSelectionStart = selection.startLineNumber - linesDeleted;\n            const finalSelection = new Selection(adjustedSelectionStart, 1, adjustedSelectionStart + lines.length - 1, lines[lines.length - 1].length);\n            edits.push(EditOperation.replace(selectionToReplace, lines.join('\\n')));\n            endCursorState.push(finalSelection);\n            linesDeleted += (selection.endLineNumber - selection.startLineNumber + 1) - lines.length;\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, updateSelection ? endCursorState : undefined);\n        editor.pushUndoStop();\n    }\n}\nexport class TrimTrailingWhitespaceAction extends EditorAction {\n    constructor() {\n        super({\n            id: TrimTrailingWhitespaceAction.ID,\n            label: nls.localize('lines.trimTrailingWhitespace', \"Trim Trailing Whitespace\"),\n            alias: 'Trim Trailing Whitespace',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 54 /* KeyCode.KeyX */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor, args) {\n        let cursors = [];\n        if (args.reason === 'auto-save') {\n            // See https://github.com/editorconfig/editorconfig-vscode/issues/47\n            // It is very convenient for the editor config extension to invoke this action.\n            // So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\n            cursors = (editor.getSelections() || []).map(s => new Position(s.positionLineNumber, s.positionColumn));\n        }\n        const selection = editor.getSelection();\n        if (selection === null) {\n            return;\n        }\n        const config = _accessor.get(IConfigurationService);\n        const model = editor.getModel();\n        const trimInRegexAndStrings = config.getValue('files.trimTrailingWhitespaceInRegexAndStrings', { overrideIdentifier: model === null || model === void 0 ? void 0 : model.getLanguageId(), resource: model === null || model === void 0 ? void 0 : model.uri });\n        const command = new TrimTrailingWhitespaceCommand(selection, cursors, trimInRegexAndStrings);\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, [command]);\n        editor.pushUndoStop();\n    }\n}\nTrimTrailingWhitespaceAction.ID = 'editor.action.trimTrailingWhitespace';\nexport class DeleteLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.deleteLines',\n            label: nls.localize('lines.delete', \"Delete Line\"),\n            alias: 'Delete Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 41 /* KeyCode.KeyK */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const ops = this._getLinesToRemove(editor);\n        const model = editor.getModel();\n        if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n            // Model is empty\n            return;\n        }\n        let linesDeleted = 0;\n        const edits = [];\n        const cursorState = [];\n        for (let i = 0, len = ops.length; i < len; i++) {\n            const op = ops[i];\n            let startLineNumber = op.startLineNumber;\n            let endLineNumber = op.endLineNumber;\n            let startColumn = 1;\n            let endColumn = model.getLineMaxColumn(endLineNumber);\n            if (endLineNumber < model.getLineCount()) {\n                endLineNumber += 1;\n                endColumn = 1;\n            }\n            else if (startLineNumber > 1) {\n                startLineNumber -= 1;\n                startColumn = model.getLineMaxColumn(startLineNumber);\n            }\n            edits.push(EditOperation.replace(new Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));\n            cursorState.push(new Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));\n            linesDeleted += (op.endLineNumber - op.startLineNumber + 1);\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, cursorState);\n        editor.pushUndoStop();\n    }\n    _getLinesToRemove(editor) {\n        // Construct delete operations\n        const operations = editor.getSelections().map((s) => {\n            let endLineNumber = s.endLineNumber;\n            if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n                endLineNumber -= 1;\n            }\n            return {\n                startLineNumber: s.startLineNumber,\n                selectionStartColumn: s.selectionStartColumn,\n                endLineNumber: endLineNumber,\n                positionColumn: s.positionColumn\n            };\n        });\n        // Sort delete operations\n        operations.sort((a, b) => {\n            if (a.startLineNumber === b.startLineNumber) {\n                return a.endLineNumber - b.endLineNumber;\n            }\n            return a.startLineNumber - b.startLineNumber;\n        });\n        // Merge delete operations which are adjacent or overlapping\n        const mergedOperations = [];\n        let previousOperation = operations[0];\n        for (let i = 1; i < operations.length; i++) {\n            if (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {\n                // Merge current operations into the previous one\n                previousOperation.endLineNumber = operations[i].endLineNumber;\n            }\n            else {\n                // Push previous operation\n                mergedOperations.push(previousOperation);\n                previousOperation = operations[i];\n            }\n        }\n        // Push the last operation\n        mergedOperations.push(previousOperation);\n        return mergedOperations;\n    }\n}\nexport class IndentLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.indentLines',\n            label: nls.localize('lines.indent', \"Indent Line\"),\n            alias: 'Indent Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 94 /* KeyCode.BracketRight */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n        editor.pushUndoStop();\n    }\n}\nclass OutdentLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.outdentLines',\n            label: nls.localize('lines.outdent', \"Outdent Line\"),\n            alias: 'Outdent Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 92 /* KeyCode.BracketLeft */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        CoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\n    }\n}\nexport class InsertLineBeforeAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertLineBefore',\n            label: nls.localize('lines.insertBefore', \"Insert Line Above\"),\n            alias: 'Insert Line Above',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 3 /* KeyCode.Enter */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.lineInsertBefore(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    }\n}\nexport class InsertLineAfterAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertLineAfter',\n            label: nls.localize('lines.insertAfter', \"Insert Line Below\"),\n            alias: 'Insert Line Below',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 3 /* KeyCode.Enter */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.lineInsertAfter(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    }\n}\nexport class AbstractDeleteAllToBoundaryAction extends EditorAction {\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const primaryCursor = editor.getSelection();\n        const rangesToDelete = this._getRangesToDelete(editor);\n        // merge overlapping selections\n        const effectiveRanges = [];\n        for (let i = 0, count = rangesToDelete.length - 1; i < count; i++) {\n            const range = rangesToDelete[i];\n            const nextRange = rangesToDelete[i + 1];\n            if (Range.intersectRanges(range, nextRange) === null) {\n                effectiveRanges.push(range);\n            }\n            else {\n                rangesToDelete[i + 1] = Range.plusRange(range, nextRange);\n            }\n        }\n        effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\n        const endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);\n        const edits = effectiveRanges.map(range => {\n            return EditOperation.replace(range, '');\n        });\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, endCursorState);\n        editor.pushUndoStop();\n    }\n}\nexport class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction {\n    constructor() {\n        super({\n            id: 'deleteAllLeft',\n            label: nls.localize('lines.deleteAllLeft', \"Delete All Left\"),\n            alias: 'Delete All Left',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1 /* KeyCode.Backspace */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    _getEndCursorState(primaryCursor, rangesToDelete) {\n        let endPrimaryCursor = null;\n        const endCursorState = [];\n        let deletedLines = 0;\n        rangesToDelete.forEach(range => {\n            let endCursor;\n            if (range.endColumn === 1 && deletedLines > 0) {\n                const newStartLine = range.startLineNumber - deletedLines;\n                endCursor = new Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);\n            }\n            else {\n                endCursor = new Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n            }\n            deletedLines += range.endLineNumber - range.startLineNumber;\n            if (range.intersectRanges(primaryCursor)) {\n                endPrimaryCursor = endCursor;\n            }\n            else {\n                endCursorState.push(endCursor);\n            }\n        });\n        if (endPrimaryCursor) {\n            endCursorState.unshift(endPrimaryCursor);\n        }\n        return endCursorState;\n    }\n    _getRangesToDelete(editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return [];\n        }\n        let rangesToDelete = selections;\n        const model = editor.getModel();\n        if (model === null) {\n            return [];\n        }\n        rangesToDelete.sort(Range.compareRangesUsingStarts);\n        rangesToDelete = rangesToDelete.map(selection => {\n            if (selection.isEmpty()) {\n                if (selection.startColumn === 1) {\n                    const deleteFromLine = Math.max(1, selection.startLineNumber - 1);\n                    const deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineLength(deleteFromLine) + 1;\n                    return new Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);\n                }\n                else {\n                    return new Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);\n                }\n            }\n            else {\n                return new Range(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);\n            }\n        });\n        return rangesToDelete;\n    }\n}\nexport class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction {\n    constructor() {\n        super({\n            id: 'deleteAllRight',\n            label: nls.localize('lines.deleteAllRight', \"Delete All Right\"),\n            alias: 'Delete All Right',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: 256 /* KeyMod.WinCtrl */ | 41 /* KeyCode.KeyK */, secondary: [2048 /* KeyMod.CtrlCmd */ | 20 /* KeyCode.Delete */] },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    _getEndCursorState(primaryCursor, rangesToDelete) {\n        let endPrimaryCursor = null;\n        const endCursorState = [];\n        for (let i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\n            const range = rangesToDelete[i];\n            const endCursor = new Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);\n            if (range.intersectRanges(primaryCursor)) {\n                endPrimaryCursor = endCursor;\n            }\n            else {\n                endCursorState.push(endCursor);\n            }\n        }\n        if (endPrimaryCursor) {\n            endCursorState.unshift(endPrimaryCursor);\n        }\n        return endCursorState;\n    }\n    _getRangesToDelete(editor) {\n        const model = editor.getModel();\n        if (model === null) {\n            return [];\n        }\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return [];\n        }\n        const rangesToDelete = selections.map((sel) => {\n            if (sel.isEmpty()) {\n                const maxColumn = model.getLineMaxColumn(sel.startLineNumber);\n                if (sel.startColumn === maxColumn) {\n                    return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);\n                }\n                else {\n                    return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);\n                }\n            }\n            return sel;\n        });\n        rangesToDelete.sort(Range.compareRangesUsingStarts);\n        return rangesToDelete;\n    }\n}\nexport class JoinLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.joinLines',\n            label: nls.localize('lines.joinLines', \"Join Lines\"),\n            alias: 'Join Lines',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 0,\n                mac: { primary: 256 /* KeyMod.WinCtrl */ | 40 /* KeyCode.KeyJ */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        let primaryCursor = editor.getSelection();\n        if (primaryCursor === null) {\n            return;\n        }\n        selections.sort(Range.compareRangesUsingStarts);\n        const reducedSelections = [];\n        const lastSelection = selections.reduce((previousValue, currentValue) => {\n            if (previousValue.isEmpty()) {\n                if (previousValue.endLineNumber === currentValue.startLineNumber) {\n                    if (primaryCursor.equalsSelection(previousValue)) {\n                        primaryCursor = currentValue;\n                    }\n                    return currentValue;\n                }\n                if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {\n                    reducedSelections.push(previousValue);\n                    return currentValue;\n                }\n                else {\n                    return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n                }\n            }\n            else {\n                if (currentValue.startLineNumber > previousValue.endLineNumber) {\n                    reducedSelections.push(previousValue);\n                    return currentValue;\n                }\n                else {\n                    return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n                }\n            }\n        });\n        reducedSelections.push(lastSelection);\n        const model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        const edits = [];\n        const endCursorState = [];\n        let endPrimaryCursor = primaryCursor;\n        let lineOffset = 0;\n        for (let i = 0, len = reducedSelections.length; i < len; i++) {\n            const selection = reducedSelections[i];\n            const startLineNumber = selection.startLineNumber;\n            const startColumn = 1;\n            let columnDeltaOffset = 0;\n            let endLineNumber, endColumn;\n            const selectionEndPositionOffset = model.getLineLength(selection.endLineNumber) - selection.endColumn;\n            if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {\n                const position = selection.getStartPosition();\n                if (position.lineNumber < model.getLineCount()) {\n                    endLineNumber = startLineNumber + 1;\n                    endColumn = model.getLineMaxColumn(endLineNumber);\n                }\n                else {\n                    endLineNumber = position.lineNumber;\n                    endColumn = model.getLineMaxColumn(position.lineNumber);\n                }\n            }\n            else {\n                endLineNumber = selection.endLineNumber;\n                endColumn = model.getLineMaxColumn(endLineNumber);\n            }\n            let trimmedLinesContent = model.getLineContent(startLineNumber);\n            for (let i = startLineNumber + 1; i <= endLineNumber; i++) {\n                const lineText = model.getLineContent(i);\n                const firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);\n                if (firstNonWhitespaceIdx >= 1) {\n                    let insertSpace = true;\n                    if (trimmedLinesContent === '') {\n                        insertSpace = false;\n                    }\n                    if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||\n                        trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\\t')) {\n                        insertSpace = false;\n                        trimmedLinesContent = trimmedLinesContent.replace(/[\\s\\uFEFF\\xA0]+$/g, ' ');\n                    }\n                    const lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);\n                    trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;\n                    if (insertSpace) {\n                        columnDeltaOffset = lineTextWithoutIndent.length + 1;\n                    }\n                    else {\n                        columnDeltaOffset = lineTextWithoutIndent.length;\n                    }\n                }\n                else {\n                    columnDeltaOffset = 0;\n                }\n            }\n            const deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            if (!deleteSelection.isEmpty()) {\n                let resultSelection;\n                if (selection.isEmpty()) {\n                    edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                    resultSelection = new Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);\n                }\n                else {\n                    if (selection.startLineNumber === selection.endLineNumber) {\n                        edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                        resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);\n                    }\n                    else {\n                        edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                        resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);\n                    }\n                }\n                if (Range.intersectRanges(deleteSelection, primaryCursor) !== null) {\n                    endPrimaryCursor = resultSelection;\n                }\n                else {\n                    endCursorState.push(resultSelection);\n                }\n            }\n            lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;\n        }\n        endCursorState.unshift(endPrimaryCursor);\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, endCursorState);\n        editor.pushUndoStop();\n    }\n}\nexport class TransposeAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.transpose',\n            label: nls.localize('editor.transpose', \"Transpose Characters around the Cursor\"),\n            alias: 'Transpose Characters around the Cursor',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(_accessor, editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        const model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            if (!selection.isEmpty()) {\n                continue;\n            }\n            const cursor = selection.getStartPosition();\n            const maxColumn = model.getLineMaxColumn(cursor.lineNumber);\n            if (cursor.column >= maxColumn) {\n                if (cursor.lineNumber === model.getLineCount()) {\n                    continue;\n                }\n                // The cursor is at the end of current line and current line is not empty\n                // then we transpose the character before the cursor and the line break if there is any following line.\n                const deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);\n                const chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n                commands.push(new ReplaceCommand(new Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));\n            }\n            else {\n                const deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);\n                const chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n                commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars, new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nexport class AbstractCaseAction extends EditorAction {\n    run(_accessor, editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        const model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        const wordSeparators = editor.getOption(131 /* EditorOption.wordSeparators */);\n        const textEdits = [];\n        for (const selection of selections) {\n            if (selection.isEmpty()) {\n                const cursor = selection.getStartPosition();\n                const word = editor.getConfiguredWordAtPosition(cursor);\n                if (!word) {\n                    continue;\n                }\n                const wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);\n                const text = model.getValueInRange(wordRange);\n                textEdits.push(EditOperation.replace(wordRange, this._modifyText(text, wordSeparators)));\n            }\n            else {\n                const text = model.getValueInRange(selection);\n                textEdits.push(EditOperation.replace(selection, this._modifyText(text, wordSeparators)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, textEdits);\n        editor.pushUndoStop();\n    }\n}\nexport class UpperCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToUppercase',\n            label: nls.localize('editor.transformToUppercase', \"Transform to Uppercase\"),\n            alias: 'Transform to Uppercase',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        return text.toLocaleUpperCase();\n    }\n}\nexport class LowerCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToLowercase',\n            label: nls.localize('editor.transformToLowercase', \"Transform to Lowercase\"),\n            alias: 'Transform to Lowercase',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        return text.toLocaleLowerCase();\n    }\n}\nclass BackwardsCompatibleRegExp {\n    constructor(_pattern, _flags) {\n        this._pattern = _pattern;\n        this._flags = _flags;\n        this._actual = null;\n        this._evaluated = false;\n    }\n    get() {\n        if (!this._evaluated) {\n            this._evaluated = true;\n            try {\n                this._actual = new RegExp(this._pattern, this._flags);\n            }\n            catch (err) {\n                // this browser does not support this regular expression\n            }\n        }\n        return this._actual;\n    }\n    isSupported() {\n        return (this.get() !== null);\n    }\n}\nexport class TitleCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToTitlecase',\n            label: nls.localize('editor.transformToTitlecase', \"Transform to Title Case\"),\n            alias: 'Transform to Title Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const titleBoundary = TitleCaseAction.titleBoundary.get();\n        if (!titleBoundary) {\n            // cannot support this\n            return text;\n        }\n        return text\n            .toLocaleLowerCase()\n            .replace(titleBoundary, (b) => b.toLocaleUpperCase());\n    }\n}\nTitleCaseAction.titleBoundary = new BackwardsCompatibleRegExp('(^|[^\\\\p{L}\\\\p{N}\\']|((^|\\\\P{L})\\'))\\\\p{L}', 'gmu');\nexport class SnakeCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToSnakecase',\n            label: nls.localize('editor.transformToSnakecase', \"Transform to Snake Case\"),\n            alias: 'Transform to Snake Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const caseBoundary = SnakeCaseAction.caseBoundary.get();\n        const singleLetters = SnakeCaseAction.singleLetters.get();\n        if (!caseBoundary || !singleLetters) {\n            // cannot support this\n            return text;\n        }\n        return (text\n            .replace(caseBoundary, '$1_$2')\n            .replace(singleLetters, '$1_$2$3')\n            .toLocaleLowerCase());\n    }\n}\nSnakeCaseAction.caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu');\nSnakeCaseAction.singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu})(\\\\p{Ll})', 'gmu');\nexport class CamelCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToCamelcase',\n            label: nls.localize('editor.transformToCamelcase', \"Transform to Camel Case\"),\n            alias: 'Transform to Camel Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const wordBoundary = CamelCaseAction.wordBoundary.get();\n        if (!wordBoundary) {\n            // cannot support this\n            return text;\n        }\n        const words = text.split(wordBoundary);\n        const firstWord = words.shift();\n        return firstWord + words.map((word) => word.substring(0, 1).toLocaleUpperCase() + word.substring(1))\n            .join('');\n    }\n}\nCamelCaseAction.wordBoundary = new BackwardsCompatibleRegExp('[_\\\\s-]', 'gm');\nexport class PascalCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToPascalcase',\n            label: nls.localize('editor.transformToPascalcase', \"Transform to Pascal Case\"),\n            alias: 'Transform to Pascal Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const wordBoundary = PascalCaseAction.wordBoundary.get();\n        const wordBoundaryToMaintain = PascalCaseAction.wordBoundaryToMaintain.get();\n        if (!wordBoundary || !wordBoundaryToMaintain) {\n            // cannot support this\n            return text;\n        }\n        const wordsWithMaintainBoundaries = text.split(wordBoundaryToMaintain);\n        const words = wordsWithMaintainBoundaries.map((word) => word.split(wordBoundary)).flat();\n        return words.map((word) => word.substring(0, 1).toLocaleUpperCase() + word.substring(1))\n            .join('');\n    }\n}\nPascalCaseAction.wordBoundary = new BackwardsCompatibleRegExp('[_\\\\s-]', 'gm');\nPascalCaseAction.wordBoundaryToMaintain = new BackwardsCompatibleRegExp('(?<=\\\\.)', 'gm');\nexport class KebabCaseAction extends AbstractCaseAction {\n    static isSupported() {\n        const areAllRegexpsSupported = [\n            this.caseBoundary,\n            this.singleLetters,\n            this.underscoreBoundary,\n        ].every((regexp) => regexp.isSupported());\n        return areAllRegexpsSupported;\n    }\n    constructor() {\n        super({\n            id: 'editor.action.transformToKebabcase',\n            label: nls.localize('editor.transformToKebabcase', 'Transform to Kebab Case'),\n            alias: 'Transform to Kebab Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, _) {\n        const caseBoundary = KebabCaseAction.caseBoundary.get();\n        const singleLetters = KebabCaseAction.singleLetters.get();\n        const underscoreBoundary = KebabCaseAction.underscoreBoundary.get();\n        if (!caseBoundary || !singleLetters || !underscoreBoundary) {\n            // one or more regexps aren't supported\n            return text;\n        }\n        return text\n            .replace(underscoreBoundary, '$1-$3')\n            .replace(caseBoundary, '$1-$2')\n            .replace(singleLetters, '$1-$2')\n            .toLocaleLowerCase();\n    }\n}\nKebabCaseAction.caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu');\nKebabCaseAction.singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu}\\\\p{Ll})', 'gmu');\nKebabCaseAction.underscoreBoundary = new BackwardsCompatibleRegExp('(\\\\S)(_)(\\\\S)', 'gm');\nregisterEditorAction(CopyLinesUpAction);\nregisterEditorAction(CopyLinesDownAction);\nregisterEditorAction(DuplicateSelectionAction);\nregisterEditorAction(MoveLinesUpAction);\nregisterEditorAction(MoveLinesDownAction);\nregisterEditorAction(SortLinesAscendingAction);\nregisterEditorAction(SortLinesDescendingAction);\nregisterEditorAction(DeleteDuplicateLinesAction);\nregisterEditorAction(TrimTrailingWhitespaceAction);\nregisterEditorAction(DeleteLinesAction);\nregisterEditorAction(IndentLinesAction);\nregisterEditorAction(OutdentLinesAction);\nregisterEditorAction(InsertLineBeforeAction);\nregisterEditorAction(InsertLineAfterAction);\nregisterEditorAction(DeleteAllLeftAction);\nregisterEditorAction(DeleteAllRightAction);\nregisterEditorAction(JoinLinesAction);\nregisterEditorAction(TransposeAction);\nregisterEditorAction(UpperCaseAction);\nregisterEditorAction(LowerCaseAction);\nif (SnakeCaseAction.caseBoundary.isSupported() && SnakeCaseAction.singleLetters.isSupported()) {\n    registerEditorAction(SnakeCaseAction);\n}\nif (CamelCaseAction.wordBoundary.isSupported()) {\n    registerEditorAction(CamelCaseAction);\n}\nif (PascalCaseAction.wordBoundary.isSupported()) {\n    registerEditorAction(PascalCaseAction);\n}\nif (TitleCaseAction.titleBoundary.isSupported()) {\n    registerEditorAction(TitleCaseAction);\n}\nif (KebabCaseAction.isSupported()) {\n    registerEditorAction(KebabCaseAction);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar LinkedEditingContribution_1;\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { Delayer, first } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { isCancellationError, onUnexpectedError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution, registerModelAndPositionCommand } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport * as nls from '../../../../nls.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { registerColor } from '../../../../platform/theme/common/colorRegistry.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport './linkedEditing.css';\nexport const CONTEXT_ONTYPE_RENAME_INPUT_VISIBLE = new RawContextKey('LinkedEditingInputVisible', false);\nconst DECORATION_CLASS_NAME = 'linked-editing-decoration';\nlet LinkedEditingContribution = LinkedEditingContribution_1 = class LinkedEditingContribution extends Disposable {\n    static get(editor) {\n        return editor.getContribution(LinkedEditingContribution_1.ID);\n    }\n    constructor(editor, contextKeyService, languageFeaturesService, languageConfigurationService, languageFeatureDebounceService) {\n        super();\n        this.languageConfigurationService = languageConfigurationService;\n        this._syncRangesToken = 0;\n        this._localToDispose = this._register(new DisposableStore());\n        this._editor = editor;\n        this._providers = languageFeaturesService.linkedEditingRangeProvider;\n        this._enabled = false;\n        this._visibleContextKey = CONTEXT_ONTYPE_RENAME_INPUT_VISIBLE.bindTo(contextKeyService);\n        this._debounceInformation = languageFeatureDebounceService.for(this._providers, 'Linked Editing', { max: 200 });\n        this._currentDecorations = this._editor.createDecorationsCollection();\n        this._languageWordPattern = null;\n        this._currentWordPattern = null;\n        this._ignoreChangeEvent = false;\n        this._localToDispose = this._register(new DisposableStore());\n        this._rangeUpdateTriggerPromise = null;\n        this._rangeSyncTriggerPromise = null;\n        this._currentRequestCts = null;\n        this._currentRequestPosition = null;\n        this._currentRequestModelVersion = null;\n        this._register(this._editor.onDidChangeModel(() => this.reinitialize(true)));\n        this._register(this._editor.onDidChangeConfiguration(e => {\n            if (e.hasChanged(70 /* EditorOption.linkedEditing */) || e.hasChanged(93 /* EditorOption.renameOnType */)) {\n                this.reinitialize(false);\n            }\n        }));\n        this._register(this._providers.onDidChange(() => this.reinitialize(false)));\n        this._register(this._editor.onDidChangeModelLanguage(() => this.reinitialize(true)));\n        this.reinitialize(true);\n    }\n    reinitialize(forceRefresh) {\n        const model = this._editor.getModel();\n        const isEnabled = model !== null && (this._editor.getOption(70 /* EditorOption.linkedEditing */) || this._editor.getOption(93 /* EditorOption.renameOnType */)) && this._providers.has(model);\n        if (isEnabled === this._enabled && !forceRefresh) {\n            return;\n        }\n        this._enabled = isEnabled;\n        this.clearRanges();\n        this._localToDispose.clear();\n        if (!isEnabled || model === null) {\n            return;\n        }\n        this._localToDispose.add(Event.runAndSubscribe(model.onDidChangeLanguageConfiguration, () => {\n            this._languageWordPattern = this.languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n        }));\n        const rangeUpdateScheduler = new Delayer(this._debounceInformation.get(model));\n        const triggerRangeUpdate = () => {\n            var _a;\n            this._rangeUpdateTriggerPromise = rangeUpdateScheduler.trigger(() => this.updateRanges(), (_a = this._debounceDuration) !== null && _a !== void 0 ? _a : this._debounceInformation.get(model));\n        };\n        const rangeSyncScheduler = new Delayer(0);\n        const triggerRangeSync = (token) => {\n            this._rangeSyncTriggerPromise = rangeSyncScheduler.trigger(() => this._syncRanges(token));\n        };\n        this._localToDispose.add(this._editor.onDidChangeCursorPosition(() => {\n            triggerRangeUpdate();\n        }));\n        this._localToDispose.add(this._editor.onDidChangeModelContent((e) => {\n            if (!this._ignoreChangeEvent) {\n                if (this._currentDecorations.length > 0) {\n                    const referenceRange = this._currentDecorations.getRange(0);\n                    if (referenceRange && e.changes.every(c => referenceRange.intersectRanges(c.range))) {\n                        triggerRangeSync(this._syncRangesToken);\n                        return;\n                    }\n                }\n            }\n            triggerRangeUpdate();\n        }));\n        this._localToDispose.add({\n            dispose: () => {\n                rangeUpdateScheduler.dispose();\n                rangeSyncScheduler.dispose();\n            }\n        });\n        this.updateRanges();\n    }\n    _syncRanges(token) {\n        // delayed invocation, make sure we're still on\n        if (!this._editor.hasModel() || token !== this._syncRangesToken || this._currentDecorations.length === 0) {\n            // nothing to do\n            return;\n        }\n        const model = this._editor.getModel();\n        const referenceRange = this._currentDecorations.getRange(0);\n        if (!referenceRange || referenceRange.startLineNumber !== referenceRange.endLineNumber) {\n            return this.clearRanges();\n        }\n        const referenceValue = model.getValueInRange(referenceRange);\n        if (this._currentWordPattern) {\n            const match = referenceValue.match(this._currentWordPattern);\n            const matchLength = match ? match[0].length : 0;\n            if (matchLength !== referenceValue.length) {\n                return this.clearRanges();\n            }\n        }\n        const edits = [];\n        for (let i = 1, len = this._currentDecorations.length; i < len; i++) {\n            const mirrorRange = this._currentDecorations.getRange(i);\n            if (!mirrorRange) {\n                continue;\n            }\n            if (mirrorRange.startLineNumber !== mirrorRange.endLineNumber) {\n                edits.push({\n                    range: mirrorRange,\n                    text: referenceValue\n                });\n            }\n            else {\n                let oldValue = model.getValueInRange(mirrorRange);\n                let newValue = referenceValue;\n                let rangeStartColumn = mirrorRange.startColumn;\n                let rangeEndColumn = mirrorRange.endColumn;\n                const commonPrefixLength = strings.commonPrefixLength(oldValue, newValue);\n                rangeStartColumn += commonPrefixLength;\n                oldValue = oldValue.substr(commonPrefixLength);\n                newValue = newValue.substr(commonPrefixLength);\n                const commonSuffixLength = strings.commonSuffixLength(oldValue, newValue);\n                rangeEndColumn -= commonSuffixLength;\n                oldValue = oldValue.substr(0, oldValue.length - commonSuffixLength);\n                newValue = newValue.substr(0, newValue.length - commonSuffixLength);\n                if (rangeStartColumn !== rangeEndColumn || newValue.length !== 0) {\n                    edits.push({\n                        range: new Range(mirrorRange.startLineNumber, rangeStartColumn, mirrorRange.endLineNumber, rangeEndColumn),\n                        text: newValue\n                    });\n                }\n            }\n        }\n        if (edits.length === 0) {\n            return;\n        }\n        try {\n            this._editor.popUndoStop();\n            this._ignoreChangeEvent = true;\n            const prevEditOperationType = this._editor._getViewModel().getPrevEditOperationType();\n            this._editor.executeEdits('linkedEditing', edits);\n            this._editor._getViewModel().setPrevEditOperationType(prevEditOperationType);\n        }\n        finally {\n            this._ignoreChangeEvent = false;\n        }\n    }\n    dispose() {\n        this.clearRanges();\n        super.dispose();\n    }\n    clearRanges() {\n        this._visibleContextKey.set(false);\n        this._currentDecorations.clear();\n        if (this._currentRequestCts) {\n            this._currentRequestCts.cancel();\n            this._currentRequestCts = null;\n            this._currentRequestPosition = null;\n        }\n    }\n    async updateRanges(force = false) {\n        if (!this._editor.hasModel()) {\n            this.clearRanges();\n            return;\n        }\n        const position = this._editor.getPosition();\n        if (!this._enabled && !force || this._editor.getSelections().length > 1) {\n            // disabled or multicursor\n            this.clearRanges();\n            return;\n        }\n        const model = this._editor.getModel();\n        const modelVersionId = model.getVersionId();\n        if (this._currentRequestPosition && this._currentRequestModelVersion === modelVersionId) {\n            if (position.equals(this._currentRequestPosition)) {\n                return; // same position\n            }\n            if (this._currentDecorations.length > 0) {\n                const range = this._currentDecorations.getRange(0);\n                if (range && range.containsPosition(position)) {\n                    return; // just moving inside the existing primary range\n                }\n            }\n        }\n        // Clear existing decorations while we compute new ones\n        this.clearRanges();\n        this._currentRequestPosition = position;\n        this._currentRequestModelVersion = modelVersionId;\n        const currentRequestCts = this._currentRequestCts = new CancellationTokenSource();\n        try {\n            const sw = new StopWatch(false);\n            const response = await getLinkedEditingRanges(this._providers, model, position, currentRequestCts.token);\n            this._debounceInformation.update(model, sw.elapsed());\n            if (currentRequestCts !== this._currentRequestCts) {\n                return;\n            }\n            this._currentRequestCts = null;\n            if (modelVersionId !== model.getVersionId()) {\n                return;\n            }\n            let ranges = [];\n            if (response === null || response === void 0 ? void 0 : response.ranges) {\n                ranges = response.ranges;\n            }\n            this._currentWordPattern = (response === null || response === void 0 ? void 0 : response.wordPattern) || this._languageWordPattern;\n            let foundReferenceRange = false;\n            for (let i = 0, len = ranges.length; i < len; i++) {\n                if (Range.containsPosition(ranges[i], position)) {\n                    foundReferenceRange = true;\n                    if (i !== 0) {\n                        const referenceRange = ranges[i];\n                        ranges.splice(i, 1);\n                        ranges.unshift(referenceRange);\n                    }\n                    break;\n                }\n            }\n            if (!foundReferenceRange) {\n                // Cannot do linked editing if the ranges are not where the cursor is...\n                this.clearRanges();\n                return;\n            }\n            const decorations = ranges.map(range => ({ range: range, options: LinkedEditingContribution_1.DECORATION }));\n            this._visibleContextKey.set(true);\n            this._currentDecorations.set(decorations);\n            this._syncRangesToken++; // cancel any pending syncRanges call\n        }\n        catch (err) {\n            if (!isCancellationError(err)) {\n                onUnexpectedError(err);\n            }\n            if (this._currentRequestCts === currentRequestCts || !this._currentRequestCts) {\n                // stop if we are still the latest request\n                this.clearRanges();\n            }\n        }\n    }\n};\nLinkedEditingContribution.ID = 'editor.contrib.linkedEditing';\nLinkedEditingContribution.DECORATION = ModelDecorationOptions.register({\n    description: 'linked-editing',\n    stickiness: 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */,\n    className: DECORATION_CLASS_NAME\n});\nLinkedEditingContribution = LinkedEditingContribution_1 = __decorate([\n    __param(1, IContextKeyService),\n    __param(2, ILanguageFeaturesService),\n    __param(3, ILanguageConfigurationService),\n    __param(4, ILanguageFeatureDebounceService)\n], LinkedEditingContribution);\nexport { LinkedEditingContribution };\nexport class LinkedEditingAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.linkedEditing',\n            label: nls.localize('linkedEditing.label', \"Start Linked Editing\"),\n            alias: 'Start Linked Editing',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasRenameProvider),\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 60 /* KeyCode.F2 */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    runCommand(accessor, args) {\n        const editorService = accessor.get(ICodeEditorService);\n        const [uri, pos] = Array.isArray(args) && args || [undefined, undefined];\n        if (URI.isUri(uri) && Position.isIPosition(pos)) {\n            return editorService.openCodeEditor({ resource: uri }, editorService.getActiveCodeEditor()).then(editor => {\n                if (!editor) {\n                    return;\n                }\n                editor.setPosition(pos);\n                editor.invokeWithinContext(accessor => {\n                    this.reportTelemetry(accessor, editor);\n                    return this.run(accessor, editor);\n                });\n            }, onUnexpectedError);\n        }\n        return super.runCommand(accessor, args);\n    }\n    run(_accessor, editor) {\n        const controller = LinkedEditingContribution.get(editor);\n        if (controller) {\n            return Promise.resolve(controller.updateRanges(true));\n        }\n        return Promise.resolve();\n    }\n}\nconst LinkedEditingCommand = EditorCommand.bindToContribution(LinkedEditingContribution.get);\nregisterEditorCommand(new LinkedEditingCommand({\n    id: 'cancelLinkedEditingInput',\n    precondition: CONTEXT_ONTYPE_RENAME_INPUT_VISIBLE,\n    handler: x => x.clearRanges(),\n    kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 99,\n        primary: 9 /* KeyCode.Escape */,\n        secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n    }\n}));\nfunction getLinkedEditingRanges(providers, model, position, token) {\n    const orderedByScore = providers.ordered(model);\n    // in order of score ask the linked editing range provider\n    // until someone response with a good result\n    // (good = not null)\n    return first(orderedByScore.map(provider => async () => {\n        try {\n            return await provider.provideLinkedEditingRanges(model, position, token);\n        }\n        catch (e) {\n            onUnexpectedExternalError(e);\n            return undefined;\n        }\n    }), result => !!result && arrays.isNonEmptyArray(result === null || result === void 0 ? void 0 : result.ranges));\n}\nexport const editorLinkedEditingBackground = registerColor('editor.linkedEditingBackground', { dark: Color.fromHex('#f00').transparent(0.3), light: Color.fromHex('#f00').transparent(0.3), hcDark: Color.fromHex('#f00').transparent(0.3), hcLight: Color.white }, nls.localize('editorLinkedEditingBackground', 'Background color when the editor auto renames on type.'));\nregisterModelAndPositionCommand('_executeLinkedEditingProvider', (_accessor, model, position) => {\n    const { linkedEditingRangeProvider } = _accessor.get(ILanguageFeaturesService);\n    return getLinkedEditingRanges(linkedEditingRangeProvider, model, position, CancellationToken.None);\n});\nregisterEditorContribution(LinkedEditingContribution.ID, LinkedEditingContribution, 1 /* EditorContributionInstantiation.AfterFirstRender */);\nregisterEditorAction(LinkedEditingAction);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { DisposableStore, isDisposable } from '../../../../base/common/lifecycle.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Range } from '../../../common/core/range.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nexport class Link {\n    constructor(link, provider) {\n        this._link = link;\n        this._provider = provider;\n    }\n    toJSON() {\n        return {\n            range: this.range,\n            url: this.url,\n            tooltip: this.tooltip\n        };\n    }\n    get range() {\n        return this._link.range;\n    }\n    get url() {\n        return this._link.url;\n    }\n    get tooltip() {\n        return this._link.tooltip;\n    }\n    async resolve(token) {\n        if (this._link.url) {\n            return this._link.url;\n        }\n        if (typeof this._provider.resolveLink === 'function') {\n            return Promise.resolve(this._provider.resolveLink(this._link, token)).then(value => {\n                this._link = value || this._link;\n                if (this._link.url) {\n                    // recurse\n                    return this.resolve(token);\n                }\n                return Promise.reject(new Error('missing'));\n            });\n        }\n        return Promise.reject(new Error('missing'));\n    }\n}\nexport class LinksList {\n    constructor(tuples) {\n        this._disposables = new DisposableStore();\n        let links = [];\n        for (const [list, provider] of tuples) {\n            // merge all links\n            const newLinks = list.links.map(link => new Link(link, provider));\n            links = LinksList._union(links, newLinks);\n            // register disposables\n            if (isDisposable(list)) {\n                this._disposables.add(list);\n            }\n        }\n        this.links = links;\n    }\n    dispose() {\n        this._disposables.dispose();\n        this.links.length = 0;\n    }\n    static _union(oldLinks, newLinks) {\n        // reunite oldLinks with newLinks and remove duplicates\n        const result = [];\n        let oldIndex;\n        let oldLen;\n        let newIndex;\n        let newLen;\n        for (oldIndex = 0, newIndex = 0, oldLen = oldLinks.length, newLen = newLinks.length; oldIndex < oldLen && newIndex < newLen;) {\n            const oldLink = oldLinks[oldIndex];\n            const newLink = newLinks[newIndex];\n            if (Range.areIntersectingOrTouching(oldLink.range, newLink.range)) {\n                // Remove the oldLink\n                oldIndex++;\n                continue;\n            }\n            const comparisonResult = Range.compareRangesUsingStarts(oldLink.range, newLink.range);\n            if (comparisonResult < 0) {\n                // oldLink is before\n                result.push(oldLink);\n                oldIndex++;\n            }\n            else {\n                // newLink is before\n                result.push(newLink);\n                newIndex++;\n            }\n        }\n        for (; oldIndex < oldLen; oldIndex++) {\n            result.push(oldLinks[oldIndex]);\n        }\n        for (; newIndex < newLen; newIndex++) {\n            result.push(newLinks[newIndex]);\n        }\n        return result;\n    }\n}\nexport function getLinks(providers, model, token) {\n    const lists = [];\n    // ask all providers for links in parallel\n    const promises = providers.ordered(model).reverse().map((provider, i) => {\n        return Promise.resolve(provider.provideLinks(model, token)).then(result => {\n            if (result) {\n                lists[i] = [result, provider];\n            }\n        }, onUnexpectedExternalError);\n    });\n    return Promise.all(promises).then(() => {\n        const result = new LinksList(coalesce(lists));\n        if (!token.isCancellationRequested) {\n            return result;\n        }\n        result.dispose();\n        return new LinksList([]);\n    });\n}\nCommandsRegistry.registerCommand('_executeLinkProvider', async (accessor, ...args) => {\n    let [uri, resolveCount] = args;\n    assertType(uri instanceof URI);\n    if (typeof resolveCount !== 'number') {\n        resolveCount = 0;\n    }\n    const { linkProvider } = accessor.get(ILanguageFeaturesService);\n    const model = accessor.get(IModelService).getModel(uri);\n    if (!model) {\n        return [];\n    }\n    const list = await getLinks(linkProvider, model, CancellationToken.None);\n    if (!list) {\n        return [];\n    }\n    // resolve links\n    for (let i = 0; i < Math.min(resolveCount, list.links.length); i++) {\n        await list.links[i].resolve(CancellationToken.None);\n    }\n    const result = list.links.slice(0);\n    list.dispose();\n    return result;\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar LinkDetector_1;\nimport { createCancelablePromise, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { MarkdownString } from '../../../../base/common/htmlContent.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport * as resources from '../../../../base/common/resources.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport './links.css';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { ClickLinkGesture } from '../../gotoSymbol/browser/link/clickLinkGesture.js';\nimport { getLinks } from './getLinks.js';\nimport * as nls from '../../../../nls.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nlet LinkDetector = LinkDetector_1 = class LinkDetector extends Disposable {\n    static get(editor) {\n        return editor.getContribution(LinkDetector_1.ID);\n    }\n    constructor(editor, openerService, notificationService, languageFeaturesService, languageFeatureDebounceService) {\n        super();\n        this.editor = editor;\n        this.openerService = openerService;\n        this.notificationService = notificationService;\n        this.languageFeaturesService = languageFeaturesService;\n        this.providers = this.languageFeaturesService.linkProvider;\n        this.debounceInformation = languageFeatureDebounceService.for(this.providers, 'Links', { min: 1000, max: 4000 });\n        this.computeLinks = this._register(new RunOnceScheduler(() => this.computeLinksNow(), 1000));\n        this.computePromise = null;\n        this.activeLinksList = null;\n        this.currentOccurrences = {};\n        this.activeLinkDecorationId = null;\n        const clickLinkGesture = this._register(new ClickLinkGesture(editor));\n        this._register(clickLinkGesture.onMouseMoveOrRelevantKeyDown(([mouseEvent, keyboardEvent]) => {\n            this._onEditorMouseMove(mouseEvent, keyboardEvent);\n        }));\n        this._register(clickLinkGesture.onExecute((e) => {\n            this.onEditorMouseUp(e);\n        }));\n        this._register(clickLinkGesture.onCancel((e) => {\n            this.cleanUpActiveLinkDecoration();\n        }));\n        this._register(editor.onDidChangeConfiguration((e) => {\n            if (!e.hasChanged(71 /* EditorOption.links */)) {\n                return;\n            }\n            // Remove any links (for the getting disabled case)\n            this.updateDecorations([]);\n            // Stop any computation (for the getting disabled case)\n            this.stop();\n            // Start computing (for the getting enabled case)\n            this.computeLinks.schedule(0);\n        }));\n        this._register(editor.onDidChangeModelContent((e) => {\n            if (!this.editor.hasModel()) {\n                return;\n            }\n            this.computeLinks.schedule(this.debounceInformation.get(this.editor.getModel()));\n        }));\n        this._register(editor.onDidChangeModel((e) => {\n            this.currentOccurrences = {};\n            this.activeLinkDecorationId = null;\n            this.stop();\n            this.computeLinks.schedule(0);\n        }));\n        this._register(editor.onDidChangeModelLanguage((e) => {\n            this.stop();\n            this.computeLinks.schedule(0);\n        }));\n        this._register(this.providers.onDidChange((e) => {\n            this.stop();\n            this.computeLinks.schedule(0);\n        }));\n        this.computeLinks.schedule(0);\n    }\n    async computeLinksNow() {\n        if (!this.editor.hasModel() || !this.editor.getOption(71 /* EditorOption.links */)) {\n            return;\n        }\n        const model = this.editor.getModel();\n        if (model.isTooLargeForSyncing()) {\n            return;\n        }\n        if (!this.providers.has(model)) {\n            return;\n        }\n        if (this.activeLinksList) {\n            this.activeLinksList.dispose();\n            this.activeLinksList = null;\n        }\n        this.computePromise = createCancelablePromise(token => getLinks(this.providers, model, token));\n        try {\n            const sw = new StopWatch(false);\n            this.activeLinksList = await this.computePromise;\n            this.debounceInformation.update(model, sw.elapsed());\n            if (model.isDisposed()) {\n                return;\n            }\n            this.updateDecorations(this.activeLinksList.links);\n        }\n        catch (err) {\n            onUnexpectedError(err);\n        }\n        finally {\n            this.computePromise = null;\n        }\n    }\n    updateDecorations(links) {\n        const useMetaKey = (this.editor.getOption(78 /* EditorOption.multiCursorModifier */) === 'altKey');\n        const oldDecorations = [];\n        const keys = Object.keys(this.currentOccurrences);\n        for (const decorationId of keys) {\n            const occurence = this.currentOccurrences[decorationId];\n            oldDecorations.push(occurence.decorationId);\n        }\n        const newDecorations = [];\n        if (links) {\n            // Not sure why this is sometimes null\n            for (const link of links) {\n                newDecorations.push(LinkOccurrence.decoration(link, useMetaKey));\n            }\n        }\n        this.editor.changeDecorations((changeAccessor) => {\n            const decorations = changeAccessor.deltaDecorations(oldDecorations, newDecorations);\n            this.currentOccurrences = {};\n            this.activeLinkDecorationId = null;\n            for (let i = 0, len = decorations.length; i < len; i++) {\n                const occurence = new LinkOccurrence(links[i], decorations[i]);\n                this.currentOccurrences[occurence.decorationId] = occurence;\n            }\n        });\n    }\n    _onEditorMouseMove(mouseEvent, withKey) {\n        const useMetaKey = (this.editor.getOption(78 /* EditorOption.multiCursorModifier */) === 'altKey');\n        if (this.isEnabled(mouseEvent, withKey)) {\n            this.cleanUpActiveLinkDecoration(); // always remove previous link decoration as their can only be one\n            const occurrence = this.getLinkOccurrence(mouseEvent.target.position);\n            if (occurrence) {\n                this.editor.changeDecorations((changeAccessor) => {\n                    occurrence.activate(changeAccessor, useMetaKey);\n                    this.activeLinkDecorationId = occurrence.decorationId;\n                });\n            }\n        }\n        else {\n            this.cleanUpActiveLinkDecoration();\n        }\n    }\n    cleanUpActiveLinkDecoration() {\n        const useMetaKey = (this.editor.getOption(78 /* EditorOption.multiCursorModifier */) === 'altKey');\n        if (this.activeLinkDecorationId) {\n            const occurrence = this.currentOccurrences[this.activeLinkDecorationId];\n            if (occurrence) {\n                this.editor.changeDecorations((changeAccessor) => {\n                    occurrence.deactivate(changeAccessor, useMetaKey);\n                });\n            }\n            this.activeLinkDecorationId = null;\n        }\n    }\n    onEditorMouseUp(mouseEvent) {\n        if (!this.isEnabled(mouseEvent)) {\n            return;\n        }\n        const occurrence = this.getLinkOccurrence(mouseEvent.target.position);\n        if (!occurrence) {\n            return;\n        }\n        this.openLinkOccurrence(occurrence, mouseEvent.hasSideBySideModifier, true /* from user gesture */);\n    }\n    openLinkOccurrence(occurrence, openToSide, fromUserGesture = false) {\n        if (!this.openerService) {\n            return;\n        }\n        const { link } = occurrence;\n        link.resolve(CancellationToken.None).then(uri => {\n            // Support for relative file URIs of the shape file://./relativeFile.txt or file:///./relativeFile.txt\n            if (typeof uri === 'string' && this.editor.hasModel()) {\n                const modelUri = this.editor.getModel().uri;\n                if (modelUri.scheme === Schemas.file && uri.startsWith(`${Schemas.file}:`)) {\n                    const parsedUri = URI.parse(uri);\n                    if (parsedUri.scheme === Schemas.file) {\n                        const fsPath = resources.originalFSPath(parsedUri);\n                        let relativePath = null;\n                        if (fsPath.startsWith('/./') || fsPath.startsWith('\\\\.\\\\')) {\n                            relativePath = `.${fsPath.substr(1)}`;\n                        }\n                        else if (fsPath.startsWith('//./') || fsPath.startsWith('\\\\\\\\.\\\\')) {\n                            relativePath = `.${fsPath.substr(2)}`;\n                        }\n                        if (relativePath) {\n                            uri = resources.joinPath(modelUri, relativePath);\n                        }\n                    }\n                }\n            }\n            return this.openerService.open(uri, { openToSide, fromUserGesture, allowContributedOpeners: true, allowCommands: true, fromWorkspace: true });\n        }, err => {\n            const messageOrError = err instanceof Error ? err.message : err;\n            // different error cases\n            if (messageOrError === 'invalid') {\n                this.notificationService.warn(nls.localize('invalid.url', 'Failed to open this link because it is not well-formed: {0}', link.url.toString()));\n            }\n            else if (messageOrError === 'missing') {\n                this.notificationService.warn(nls.localize('missing.url', 'Failed to open this link because its target is missing.'));\n            }\n            else {\n                onUnexpectedError(err);\n            }\n        });\n    }\n    getLinkOccurrence(position) {\n        if (!this.editor.hasModel() || !position) {\n            return null;\n        }\n        const decorations = this.editor.getModel().getDecorationsInRange({\n            startLineNumber: position.lineNumber,\n            startColumn: position.column,\n            endLineNumber: position.lineNumber,\n            endColumn: position.column\n        }, 0, true);\n        for (const decoration of decorations) {\n            const currentOccurrence = this.currentOccurrences[decoration.id];\n            if (currentOccurrence) {\n                return currentOccurrence;\n            }\n        }\n        return null;\n    }\n    isEnabled(mouseEvent, withKey) {\n        return Boolean((mouseEvent.target.type === 6 /* MouseTargetType.CONTENT_TEXT */)\n            && (mouseEvent.hasTriggerModifier || (withKey && withKey.keyCodeIsTriggerKey)));\n    }\n    stop() {\n        var _a;\n        this.computeLinks.cancel();\n        if (this.activeLinksList) {\n            (_a = this.activeLinksList) === null || _a === void 0 ? void 0 : _a.dispose();\n            this.activeLinksList = null;\n        }\n        if (this.computePromise) {\n            this.computePromise.cancel();\n            this.computePromise = null;\n        }\n    }\n    dispose() {\n        super.dispose();\n        this.stop();\n    }\n};\nLinkDetector.ID = 'editor.linkDetector';\nLinkDetector = LinkDetector_1 = __decorate([\n    __param(1, IOpenerService),\n    __param(2, INotificationService),\n    __param(3, ILanguageFeaturesService),\n    __param(4, ILanguageFeatureDebounceService)\n], LinkDetector);\nexport { LinkDetector };\nconst decoration = {\n    general: ModelDecorationOptions.register({\n        description: 'detected-link',\n        stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */,\n        collapseOnReplaceEdit: true,\n        inlineClassName: 'detected-link'\n    }),\n    active: ModelDecorationOptions.register({\n        description: 'detected-link-active',\n        stickiness: 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */,\n        collapseOnReplaceEdit: true,\n        inlineClassName: 'detected-link-active'\n    })\n};\nclass LinkOccurrence {\n    static decoration(link, useMetaKey) {\n        return {\n            range: link.range,\n            options: LinkOccurrence._getOptions(link, useMetaKey, false)\n        };\n    }\n    static _getOptions(link, useMetaKey, isActive) {\n        const options = { ...(isActive ? decoration.active : decoration.general) };\n        options.hoverMessage = getHoverMessage(link, useMetaKey);\n        return options;\n    }\n    constructor(link, decorationId) {\n        this.link = link;\n        this.decorationId = decorationId;\n    }\n    activate(changeAccessor, useMetaKey) {\n        changeAccessor.changeDecorationOptions(this.decorationId, LinkOccurrence._getOptions(this.link, useMetaKey, true));\n    }\n    deactivate(changeAccessor, useMetaKey) {\n        changeAccessor.changeDecorationOptions(this.decorationId, LinkOccurrence._getOptions(this.link, useMetaKey, false));\n    }\n}\nfunction getHoverMessage(link, useMetaKey) {\n    const executeCmd = link.url && /^command:/i.test(link.url.toString());\n    const label = link.tooltip\n        ? link.tooltip\n        : executeCmd\n            ? nls.localize('links.navigate.executeCmd', 'Execute command')\n            : nls.localize('links.navigate.follow', 'Follow link');\n    const kb = useMetaKey\n        ? platform.isMacintosh\n            ? nls.localize('links.navigate.kb.meta.mac', \"cmd + click\")\n            : nls.localize('links.navigate.kb.meta', \"ctrl + click\")\n        : platform.isMacintosh\n            ? nls.localize('links.navigate.kb.alt.mac', \"option + click\")\n            : nls.localize('links.navigate.kb.alt', \"alt + click\");\n    if (link.url) {\n        let nativeLabel = '';\n        if (/^command:/i.test(link.url.toString())) {\n            // Don't show complete command arguments in the native tooltip\n            const match = link.url.toString().match(/^command:([^?#]+)/);\n            if (match) {\n                const commandId = match[1];\n                nativeLabel = nls.localize('tooltip.explanation', \"Execute command {0}\", commandId);\n            }\n        }\n        const hoverMessage = new MarkdownString('', true)\n            .appendLink(link.url.toString(true).replace(/ /g, '%20'), label, nativeLabel)\n            .appendMarkdown(` (${kb})`);\n        return hoverMessage;\n    }\n    else {\n        return new MarkdownString().appendText(`${label} (${kb})`);\n    }\n}\nclass OpenLinkAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.openLink',\n            label: nls.localize('label', \"Open Link\"),\n            alias: 'Open Link',\n            precondition: undefined\n        });\n    }\n    run(accessor, editor) {\n        const linkDetector = LinkDetector.get(editor);\n        if (!linkDetector) {\n            return;\n        }\n        if (!editor.hasModel()) {\n            return;\n        }\n        const selections = editor.getSelections();\n        for (const sel of selections) {\n            const link = linkDetector.getLinkOccurrence(sel.getEndPosition());\n            if (link) {\n                linkDetector.openLinkOccurrence(link, false);\n            }\n        }\n    }\n}\nregisterEditorContribution(LinkDetector.ID, LinkDetector, 1 /* EditorContributionInstantiation.AfterFirstRender */);\nregisterEditorAction(OpenLinkAction);\n"],"names":["inlineSuggestCommitId","showPreviousInlineSuggestionActionId","showNextInlineSuggestionActionId","GhostText","constructor","lineNumber","parts","this","equals","other","length","every","part","index","renderForScreenReader","lineText","lastPart","cappedLineText","substr","column","TextEdit","map","p","SingleTextEdit","Range","fromPositions","Position","lines","join","applyToString","substring","isEmpty","lineCount","reduce","r","GhostTextPart","text","preview","splitLines","line","GhostTextReplacement","columnRange","additionalReservedLineCount","arguments","undefined","endColumnExclusive","newLines","_lineText","ghostTextsOrReplacementsEqual","a","b","ghostTextOrReplacementEquals","__decorate","decorators","target","key","desc","d","c","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","GHOST_TEXT_DESCRIPTION","GhostTextWidget","Disposable","editor","model","languageService","super","isDisposed","observableValue","currentTextModel","observableFromEvent","onDidChangeModel","getModel","uiState","derived","reader","read","textModel","targetTextModel","ghostText","replacedRange","inlineTexts","additionalLines","addToAdditionalLines","className","lastLine","decorations","push","LineDecoration","content","slice","textBufferLine","getLineContent","hiddenTextStartColumn","lastIdx","hiddenRange","ColumnRange","minReservedLineCount","range","toRange","options","inlineClassName","description","after","cursorStops","InjectedTextCursorStops","Left","showIfCollapsed","additionalLinesWidget","_register","AdditionalLinesWidget","languageIdCodec","toDisposable","set","applyObservableDecorations","ownsViewZone","viewZoneId","ILanguageService","_viewZoneId","editorOptionsChanged","observableSignalFromEvent","Event","filter","onDidChangeConfiguration","e","hasChanged","autorun","updateLines","clear","dispose","changeViewZones","changeAccessor","removeZone","tabSize","getOptions","heightInLines","Math","max","domNode","document","createElement","opts","disableMonospaceOptimizations","get","stopRenderingLineAfter","renderWhitespace","renderControlCharacters","fontLigatures","fontInfo","lineHeight","sb","StringBuilder","appendString","len","lineData","String","isBasicASCII","strings","containsRTL","lineTokens","LineTokens","createEmpty","renderViewLine","RenderLineInput","isMonospace","canUseHalfwidthRightwardsArrow","spaceWidth","middotWidth","wsmiddotWidth","EditorFontLigatures","OFF","applyFontInfo","html","build","trustedhtml","ttPolicy","createHTML","innerHTML","renderLines","addZone","afterLineNumber","afterColumnAffinity","createTrustedTypesPolicy","value","InlineCompletionContextKeys","contextKeyService","inlineCompletionVisible","inlineSuggestionVisible","bindTo","inlineCompletionSuggestsIndentation","inlineSuggestionHasIndentation","inlineCompletionSuggestsIndentationLessThanTabSize","inlineSuggestionHasIndentationLessThanTabSize","suppressSuggestions","state","isInlineCompletionVisible","inlineCompletion","primaryGhostText","source","inlineCompletions","startsWithIndentation","startsWithIndentationLessThanTabSize","selectedSuggestItem","firstLine","getLineIndentColumn","firstNonWsIdx","firstNonWhitespaceIndex","CursorColumns","visibleColumnFromColumn","RawContextKey","localize","async","provideInlineCompletions","registry","position","context","token","CancellationToken","None","languageConfigurationService","defaultReplaceRange","word","getWordAtPosition","maxColumn","getLineMaxColumn","startColumn","with","getDefaultRange","providers","all","multiMap","SetMap","provider","groupId","add","getPreferredProviders","yieldsToGroupIds","result","states","Map","seen","Set","findPreferredProviderCircle","stack","has","preferred","delete","processProvider","circle","onUnexpectedExternalError","Error","concat","s","toString","deferredPromise","DeferredPromise","items","then","complete","error","providerResults","Promise","completions","itemsByHash","lists","list","InlineCompletionList","item","inlineCompletionItem","InlineCompletionItem","from","hash","InlineCompletionProviderResult","Array","values","keys","hashs","removeRef","refCount","addRef","freeInlineCompletions","insertText","snippetInfo","lift","completeBracketPairs","closeBrackets","getStartPosition","diff","startLineNumber","endLineNumber","endColumn","preBracketCompletionLength","snippet","SnippetParser","parse","children","Text","assertNever","command","additionalTextEdits","getReadonlyEmptyArray","filterText","sourceInlineCompletion","replace","withRange","updatedRange","JSON","stringify","newLine","newTokens","tokenization","tokenizeLineWithEdit","slicedTokens","sliceAndInflate","fixBracketsInLine","singleTextRemoveCommonPrefix","edit","validModelRange","modelRange","intersectRanges","valueToReplace","getValueInRange","commonPrefixLen","commonPrefixLength","start","TextLength","ofText","addToPosition","getEndPosition","singleTextEditAugments","base","startsWith","extendingRange","rangeToExtend","isBeforeOrEqual","computeGhostText","mode","cursorPosition","previewSuffixLength","sourceLine","sourceIndentationLength","getLeadingWhitespace","suggestionAddedIndentationLength","replacedIndentation","startPosition","endPosition","newStartPosition","delta","rangeThatDoesNotReplaceIndentation","suggestionWithoutIndentationChange","valueToBeReplaced","changes","originalValue","newValue","lastRequest","smartDiff","deletedChars","deletedCharacters","newChanges","cachingDiff","filteredChanges","originalLength","originalStart","previewStartInCompletionText","insertColumn","modifiedLength","modifiedEnd","modifiedStart","nonPreviewTextEnd","min","nonPreviewText","italicText","sum","smartBracketMatching","getMaxCharCode","val","maxCharCode","charCode","charCodeAt","getUniqueCharCode","id","getElements","level","group","characters","Int32Array","elements1","elements2","LcsDiff","ComputeDiff","InlineCompletionsSource","versionId","_debounceValue","languageFeaturesService","_updateOperation","MutableDisposable","disposableObservableValue","suggestWidgetInlineCompletions","onDidChangeContent","fetch","activeInlineCompletion","_a","_b","request","UpdateRequest","getVersionId","selectedSuggestionInfo","satisfies","promise","resolve","updateOngoing","CancellationTokenSource","ms","cancellationToken","triggerKind","InlineCompletionTriggerKind","Automatic","handle","setTimeout","onCancellationRequested","clearTimeout","isCancellationRequested","startTime","Date","updatedCompletions","inlineCompletionsProvider","endTime","update","getTime","UpToDateInlineCompletions","asInlineCompletion","toInlineCompletion","canBeReused","prepend","transaction","tx","updateOperation","UpdateOperation","clearSuggestWidgetInlineCompletions","cancelUpdate","ILanguageFeaturesService","ILanguageConfigurationService","equalsIfDefined","itemEquals","Explicit","cancellationTokenSource","cancel","_inlineCompletions","inlineCompletionProviderResult","_textModel","_versionId","_refCount","_prependedInlineCompletionItems","ids","deltaDecorations","InlineCompletionWithUpdatedRange","clone","decorationId","addRefToSource","unshift","forwardStable","enableForwardStability","_modelVersion","semanticId","_updatedRange","derivedOpts","owner","equalsFn","equalsRange","getDecorationRange","emptyRange","toSingleTextEdit","isVisible","minimizedReplacement","_toFilterTextReplacement","cursorPosIndex","filterTextBefore","filterTextAfter","originalValueBefore","originalValueAfter","originalValueIndent","trimStart","matchesSubString","containsPosition","ofRange","isGreaterThanOrEqualTo","VersionIdChangeReason","InlineCompletionsModel","isAcceptingPartially","_isAcceptingPartially","textModelVersionId","_positions","_suggestPreviewEnabled","_suggestPreviewMode","_inlineSuggestMode","_enabled","_instantiationService","_commandService","_languageConfigurationService","lastItem","_source","createInstance","_isActive","_forceUpdateExplicitlySignal","observableSignal","_selectedInlineCompletionId","_primaryPosition","_preserveCurrentCompletionReasons","Redo","Undo","AcceptWord","_fetchInlineCompletionsPromise","derivedHandleChanges","createEmptyChangeSummary","preserveCurrentCompletion","inlineCompletionTriggerKind","handleChange","ctx","changeSummary","didChange","change","suggestItem","toSelectedSuggestionInfo","itemToPreserveCandidate","selectedInlineCompletion","itemToPreserve","_filteredInlineCompletionItems","itemsEquals","filteredCompletions","selectedInlineCompletionIndex","selectedInlineCompletionId","idx","findIndex","v","activeCommands","commands","lastTriggerKind","inlineCompletionsCount","ghostTexts","suggestCompletionEdit","augmentation","_computeAugmentation","fullEdit","fullEditPreviewLength","positions","edits","getSecondaryEdits","isDefined","completion","replacement","recomputeInitiallyAndOnChange","src","handleItemDidShow","call","trigger","triggerExplicitly","subtransaction","stop","suggestCompletion","candidateInlineCompletions","mapFindFirst","_deltaSelectedInlineCompletionIndex","newIdx","next","previous","accept","BugIndicatingError","pushUndoStop","executeEdits","EditOperation","setPosition","SnippetController2","insert","undoStopBefore","selections","getEndPositionsAfterApplying","Selection","setSelections","executeCommand","acceptNextWord","_acceptNext","pos","langId","getLanguageIdAtPosition","config","getLanguageConfiguration","wordRegExp","RegExp","wordDefinition","flags","m1","match","acceptUntilIndexExclusive","m2","exec","acceptNextLine","m","getAcceptUntilIndex","kind","firstPart","ghostTextPos","ghostTextVal","partialGhostTextVal","replaceRange","newText","primaryEdit","handlePartialAccept","acceptedRange","handleSuggestAccepted","itemEdit","augmentedCompletion","primaryPosition","secondaryPositions","primaryEditStartPosition","primaryEditEndPosition","replacedTextAfterPrimaryCursor","positionWithinTextEdit","subtractPositions","onUnexpectedError","secondaryEditText","subtext","splitLinesIncludeSeparators","substringPos","posEnd","addPositions","textAfterSecondaryCursor","l","sortPerm","Permutation","createSortPermutation","edit1","edit2","compareRangesUsingStarts","sortedNewRanges","apply","getNewRanges","inverse","IInstantiationService","ICommandService","SuggestWidgetAdaptor","selectedItem","_selectedItem","suggestControllerPreselector","checkModelVersion","onWillAccept","isSuggestWidgetVisible","isShiftKeyPressed","_currentSuggestItemInfo","onKeyDown","shiftKey","onKeyUp","suggestController","SuggestController","registerSelector","priority","select","suggestItems","itemToPreselect","candidates","suggestItemTextEdit","SuggestItemInfo","fromSuggestion","valid","prefixLength","findFirstMax","compareBy","numberComparator","isBoundToSuggestWidget","bindToSuggestWidget","widget","onDidShow","onDidHide","onDidFocus","once","onDidTrigger","onWillInsertSuggestItem","getPosition","suggestItemInfo","newActive","newInlineCompletion","getSuggestItemInfo","suggestItemInfoEquals","focusedItem","getFocusedItem","stopForceRenderingAbove","forceRenderingAbove","toggleMode","isSnippetText","insertTextRules","SnippetSession","adjustWhitespace","info","getOverwriteInfo","overwriteBefore","overwriteAfter","completionItemKind","SelectedSuggestionInfo","InlineCompletionsController_1","InlineCompletionsController","getContribution","ID","_contextKeyService","_configurationService","_debounceService","_languageFeaturesService","_accessibilitySignalService","_keybindingService","_accessibilityService","_textModelVersionId","observableValueOpts","_suggestWidgetAdaptor","updateObservables","Other","_enabledInConfig","getOption","enabled","_isScreenReaderEnabled","onDidChangeScreenReaderOptimized","isScreenReaderOptimized","_editorDictationInProgress","onDidChangeContext","getContext","getDomNode","getValue","_fontFamily","fontFamily","_ghostTexts","_stablizedGhostTexts","store","innerObservables","itemsValue","forEach","o","convertItemsToStableObservables","_store","_ghostTextWidgets","mapObservableArrayCached","constObservable","for","_playAccessibilitySignal","_isReadonly","_textModelIfWritable","previewMode","styleElement","createStyleSheet2","setStyle","getReason","isUndoing","isRedoing","onDidChangeModelContent","onDidChangeCursorPosition","reason","onDidType","onDidExecuteCommand","CoreEditingCommands","Tab","DeleteLeft","DeleteRight","commandId","hasTextFocus","onDidBlurEditorWidget","getContextKeyValue","keepOnBlur","InlineSuggestionHintsContentWidget","dropDownVisible","cancellationStore","DisposableStore","lastInlineCompletionId","autorunHandleChanges","_","timeout","cancelOnDispose","waitForState","isUndefined","playSignal","AccessibilitySignal","inlineSuggestion","provideScreenReaderUpdate","InlineCompletionsHintsWidget","affectsConfiguration","updateOptions","inlineCompletionsAccessibilityVerbose","playAccessibilitySignal","accessibleViewShowing","accessibleViewKeybinding","lookupKeybinding","hint","getAriaLabel","alert","changeReason","_c","newModel","getSelections","selection","shouldShowHoverAt","some","shouldShowHoverAtViewZone","IContextKeyService","IConfigurationService","ILanguageFeatureDebounceService","IAccessibilitySignalService","IKeybindingService","IAccessibilityService","ShowNextInlineSuggestionAction","EditorAction","label","nls","alias","precondition","ContextKeyExpr","and","EditorContextKeys","writable","kbOpts","weight","primary","run","accessor","controller","ShowPreviousInlineSuggestionAction","TriggerInlineSuggestionAction","asyncTransaction","AcceptNextWordOfInlineCompletion","kbExpr","menuOpts","menuId","MenuId","InlineSuggestionToolbar","title","order","AcceptNextLineOfInlineCompletion","AcceptInlineCompletion","tabMovesFocus","toNegated","SuggestContext","Visible","hoverFocused","focus","HideInlineCompletion","ToggleAlwaysShowInlineSuggestionToolbar","Action2","f1","menu","toggled","configService","updateValue","InlineCompletionsHover","isValidForHoverAnchor","anchor","type","InlineCompletionsHoverParticipant","_editor","_languageService","_openerService","accessibilityService","_telemetryService","hoverOrdinal","suggestHoverAnchor","mouseEvent","viewZoneData","detail","HoverForeignElementAnchor","validatePosition","positionBefore","event","posx","posy","mightBeForeignElement","computeSync","lineDecorations","showToolbar","renderHoverParts","hoverParts","disposableStore","publicLog2","renderScreenReaderText","w","fragment","appendChild","$","dom","markdownHoverElement","hoverContentsElement","renderer","MarkdownRenderer","code","onDidRenderAsync","onContentsChanged","inlineSuggestionAvailable","renderedContents","render","MarkdownString","appendText","appendCodeblock","replaceChildren","element","IOpenerService","ITelemetryService","registerEditorContribution","registerEditorAction","registerAction2","HoverParticipantRegistry","register","InlineSuggestionHintsContentWidget_1","instantiationService","alwaysShowToolbar","sessionPosition","firstColumn","Number","MAX_SAFE_INTEGER","autorunWithStore","contentWidget","addContentWidget","removeContentWidget","inlineSuggestionHintsNextIcon","registerIcon","Codicon","chevronRight","inlineSuggestionHintsPreviousIcon","chevronLeft","_dropDownVisible","createCommandAction","iconClassName","action","Action","kb","keybindingService","tooltip","comment","getLabel","withBorder","_position","_currentSuggestionIdx","_suggestionCount","_extraCommands","_menuService","allowEditorOverflow","suppressMouseDown","nodes","h","previousAction","ThemeIcon","asClassName","availableSuggestionCountAction","nextAction","inlineCompletionsActionsMenus","createMenu","InlineCompletionsActions","clearAvailableSuggestionCountLabelDebounced","RunOnceScheduler","disableButtonsDebounced","toolBar","CustomizedMenuWorkbenchToolBar","menuOptions","renderShortTitle","toolbarOptions","primaryGroup","g","actionViewItemProvider","MenuItemAction","StatusBarViewItem","ActionViewItemWithClassName","icon","setClass","telemetrySource","setPrependedPrimaryActions","onDidChangeDropdownVisibility","layoutContentWidget","suggestionCount","currentSuggestionIdx","schedule","extraActions","class","getActions","Separator","setAdditionalSecondaryActions","getId","root","preference","positionAffinity","IMenuService","ActionViewItem","_className","container","classList","updateTooltip","MenuEntryActionViewItem","updateLabel","_action","div","KeybindingLabel","OS","disableTitle","unthemedKeybindingLabelOptions","textContent","WorkbenchToolBar","options2","menuService","contextMenuService","commandService","telemetryService","resetMenu","emitEventsForSubmenuChanges","additionalActions","prependedPrimaryActions","onDidChange","updateToolbar","_d","_e","_f","_g","secondary","createAndFillInActionBarActions","shouldInlineSubmenu","useSeparatorsInPrimaryActions","setActions","actions","IContextMenuService","array","decorationsCollection","createDecorationsCollection","autorunOpts","debugName","pos1","pos2","INLINE_EDIT_DESCRIPTION","isSingleLine","isPureRemove","backgroundColoring","ranges","firstNonWhitespace","getLineFirstNonWhitespaceColumn","lastNonWhitespace","getLineLastNonWhitespaceColumn","InlineEditHintsContentWidget_1","InlineEditHintsWidget","InlineEditHintsContentWidget","InlineEditActions","InlineEditToolbar","InlineEditController_1","InlineEditWidget","InlineEditController","_isVisibleContext","inlineEditVisibleContext","_isCursorAtInlineEditContext","cursorAtInlineEditContext","_currentEdit","_isAccepting","_backgroundColoring","modelChangedSignal","getInlineEdit","checkCursorPosition","currentEdit","editorBlurSingal","_currentRequestCts","editorFocusSignal","onDidFocusEditorText","gt","validateInlineEdit","includes","getLineLength","fetchInlineEdit","auto","modelVersion","inlineEditProvider","InlineEditTriggerKind","Invoke","provideInlineEdit","textToDisplay","endsWith","instance","jumpBack","_jumpBackPosition","revealPositionInCenterIfOutsideViewport","data","accepted","freeEdit","jumpToCurrent","getSelection","sendRejection","rejected","freeInlineEdit","inlineEditVisibleKey","cursorAtInlineEditKey","AcceptInlineEdit","TriggerInlineEdit","activeExpr","not","JumpToInlineEdit","when","JumpBackInlineEdit","RejectInlineEdit","InlineEditHover","InlineEditHoverParticipant","inlineProgressDecoration","ModelDecorationOptions","stickiness","noBreakWhitespace","inlineClassNameAffectsLetterSpacing","InlineProgressWidget","typeId","delegate","create","role","iconElement","append","asClassNameArray","loading","updateSize","style","height","width","ceil","CLICK","baseId","InlineProgressManager","_showDelay","_showPromise","_currentWidget","_operationIdPool","_currentDecorations","showWhile","operationId","_currentOperation","disposableTimeout","ExpandLineSelectionAction","textInputFocus","_accessor","args","hasModel","viewModel","_getViewModel","pushStackElement","setCursorStates","CursorMoveCommands","expandLineSelection","getCursorStates","revealAllCursors","CopyLinesCommand","isCopyingDown","noop","_selection","_isCopyingDown","_noop","_selectionDirection","_selectionId","_startLineNumberDelta","_endLineNumberDelta","getEditOperations","builder","setEndPosition","sourceLines","sourceText","addEditOperation","getLineCount","trackSelection","getDirection","computeCursorState","helper","getTrackedSelection","createWithDirection","MoveLinesCommand","isMovingDown","autoIndent","_isMovingDown","_autoIndent","_moveEndLineSelectionShrink","modelLineCount","_moveEndPositionDown","indentSize","insertSpaces","indentConverter","buildIndentConverter","virtualModel","getLineTokens","getLanguageId","otherLineNumber","movingLineNumber","movingLineText","insertingText","shouldAutoIndent","movingLineMatchResult","matchEnterRule","oldIndentation","newSpaceCnt","indentUtils","newIndentation","indentOfMovingLine","getGoodIndentForLine","ret","matchEnterRuleMovingDown","getIndentEditsOfMovingBlock","newIndentatOfMovingBlock","oldSpaceCnt","spaceCntOffset","indentOfFirstLine","oldIndent","shiftIndent","indentation","ShiftCommand","unshiftIndent","parseEnterResult","enter","enterPrefix","indentAction","IndentAction","Indent","IndentOutdent","Outdent","indexOf","indentMetadataOfMovelingLine","getIndentMetadata","futureAboveLineNumber","futureAboveLineText","getEnterAction","validPrecedingLine","lineContent","oneLineAbove","previousLineText","str","isCheapToTokenize","languageAtSelectionStart","indentRulesSupport","offset","originalIndent","newSpacesCnt","newIndent","SortLinesCommand","getCollator","_COLLATOR","Intl","Collator","descending","selectionId","op","getSortData","sortLines","canRun","before","linesToSort","sorted","sort","compare","reverse","AbstractCopyLinesAction","down","ignore","prev","curr","executeCommands","DuplicateSelectionAction","MenubarSelectionMenu","insertSelection","ReplaceCommandThatSelectsText","AbstractMoveLinesAction","AbstractSortLinesAction","SortLinesAscendingAction","SortLinesDescendingAction","DeleteDuplicateLinesAction","endCursorState","linesDeleted","updateSelection","uniqueLines","selectionToReplace","adjustedSelectionStart","finalSelection","TrimTrailingWhitespaceAction","editorTextFocus","KeyChord","cursors","positionLineNumber","positionColumn","trimInRegexAndStrings","overrideIdentifier","resource","uri","TrimTrailingWhitespaceCommand","DeleteLinesAction","ops","_getLinesToRemove","cursorState","operations","selectionStartColumn","mergedOperations","previousOperation","IndentLinesAction","TypeOperations","indent","cursorConfig","OutdentLinesAction","runEditorCommand","InsertLineBeforeAction","lineInsertBefore","InsertLineAfterAction","lineInsertAfter","AbstractDeleteAllToBoundaryAction","primaryCursor","rangesToDelete","_getRangesToDelete","effectiveRanges","count","nextRange","plusRange","_getEndCursorState","DeleteAllLeftAction","mac","endPrimaryCursor","deletedLines","endCursor","newStartLine","deleteFromLine","deleteFromColumn","DeleteAllRightAction","sel","JoinLinesAction","reducedSelections","lastSelection","previousValue","currentValue","equalsSelection","lineOffset","columnDeltaOffset","selectionEndPositionOffset","trimmedLinesContent","firstNonWhitespaceIdx","insertSpace","charAt","lineTextWithoutIndent","deleteSelection","resultSelection","TransposeAction","cursor","chars","split","ReplaceCommand","ReplaceCommandThatPreservesSelection","AbstractCaseAction","wordSeparators","textEdits","getConfiguredWordAtPosition","wordRange","_modifyText","UpperCaseAction","toLocaleUpperCase","LowerCaseAction","toLocaleLowerCase","BackwardsCompatibleRegExp","_pattern","_flags","_actual","_evaluated","err","isSupported","TitleCaseAction","titleBoundary","SnakeCaseAction","caseBoundary","singleLetters","CamelCaseAction","wordBoundary","words","shift","PascalCaseAction","wordBoundaryToMaintain","flat","KebabCaseAction","underscoreBoundary","regexp","linux","LinkedEditingContribution_1","CONTEXT_ONTYPE_RENAME_INPUT_VISIBLE","LinkedEditingContribution","languageFeatureDebounceService","_syncRangesToken","_localToDispose","_providers","linkedEditingRangeProvider","_visibleContextKey","_debounceInformation","_languageWordPattern","_currentWordPattern","_ignoreChangeEvent","_rangeUpdateTriggerPromise","_rangeSyncTriggerPromise","_currentRequestPosition","_currentRequestModelVersion","reinitialize","onDidChangeModelLanguage","forceRefresh","isEnabled","clearRanges","runAndSubscribe","onDidChangeLanguageConfiguration","getWordDefinition","rangeUpdateScheduler","Delayer","triggerRangeUpdate","updateRanges","_debounceDuration","rangeSyncScheduler","triggerRangeSync","_syncRanges","referenceRange","getRange","referenceValue","mirrorRange","oldValue","rangeStartColumn","rangeEndColumn","commonSuffixLength","popUndoStop","prevEditOperationType","getPrevEditOperationType","setPrevEditOperationType","force","modelVersionId","currentRequestCts","sw","StopWatch","response","getLinkedEditingRanges","elapsed","wordPattern","foundReferenceRange","splice","DECORATION","isCancellationError","LinkedEditingAction","hasRenameProvider","runCommand","editorService","ICodeEditorService","isArray","URI","isUri","isIPosition","openCodeEditor","getActiveCodeEditor","invokeWithinContext","reportTelemetry","LinkedEditingCommand","EditorCommand","bindToContribution","orderedByScore","ordered","first","provideLinkedEditingRanges","arrays","registerEditorCommand","handler","x","editorLinkedEditingBackground","registerColor","dark","Color","fromHex","transparent","light","hcDark","hcLight","white","registerModelAndPositionCommand","Link","link","_link","_provider","toJSON","url","resolveLink","reject","LinksList","tuples","_disposables","links","newLinks","_union","isDisposable","oldLinks","oldIndex","oldLen","newIndex","newLen","oldLink","newLink","areIntersectingOrTouching","getLinks","promises","provideLinks","coalesce","CommandsRegistry","registerCommand","_len","_key","resolveCount","assertType","linkProvider","IModelService","LinkDetector_1","LinkDetector","openerService","notificationService","debounceInformation","computeLinks","computeLinksNow","computePromise","activeLinksList","currentOccurrences","activeLinkDecorationId","clickLinkGesture","ClickLinkGesture","onMouseMoveOrRelevantKeyDown","_ref","keyboardEvent","_onEditorMouseMove","onExecute","onEditorMouseUp","onCancel","cleanUpActiveLinkDecoration","updateDecorations","isTooLargeForSyncing","createCancelablePromise","useMetaKey","oldDecorations","occurence","newDecorations","LinkOccurrence","decoration","changeDecorations","withKey","occurrence","getLinkOccurrence","activate","deactivate","openLinkOccurrence","hasSideBySideModifier","openToSide","fromUserGesture","modelUri","scheme","Schemas","file","parsedUri","fsPath","resources","relativePath","open","allowContributedOpeners","allowCommands","fromWorkspace","messageOrError","message","warn","getDecorationsInRange","currentOccurrence","Boolean","hasTriggerModifier","keyCodeIsTriggerKey","INotificationService","collapseOnReplaceEdit","_getOptions","isActive","hoverMessage","executeCmd","test","platform","nativeLabel","appendLink","appendMarkdown","getHoverMessage","changeDecorationOptions","OpenLinkAction","linkDetector"],"sourceRoot":""}