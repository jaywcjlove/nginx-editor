{"version":3,"file":"static/js/monaco-editor-vendor.c0aa0059.4bda6a91.js","mappings":"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","sources":["../node_modules/monaco-editor/esm/vs/editor/browser/config/domFontInfo.js","../node_modules/monaco-editor/esm/vs/editor/browser/config/migrateOptions.js","../node_modules/monaco-editor/esm/vs/editor/browser/config/editorConfiguration.js","../node_modules/monaco-editor/esm/vs/editor/browser/config/elementSizeObserver.js","../node_modules/monaco-editor/esm/vs/editor/browser/config/charWidthReader.js","../node_modules/monaco-editor/esm/vs/editor/browser/config/fontMeasurements.js","../node_modules/monaco-editor/esm/vs/editor/browser/config/tabFocus.js","../node_modules/monaco-editor/esm/vs/editor/browser/controller/mouseTarget.js","../node_modules/monaco-editor/esm/vs/editor/browser/controller/mouseHandler.js","../node_modules/monaco-editor/esm/vs/editor/browser/controller/pointerHandler.js","../node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaHandler.js","../node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaInput.js","../node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaState.js","../node_modules/monaco-editor/esm/vs/editor/browser/coreCommands.js","../node_modules/monaco-editor/esm/vs/editor/browser/dnd.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { FastDomNode } from '../../../base/browser/fastDomNode.js';\nexport function applyFontInfo(domNode, fontInfo) {\n    if (domNode instanceof FastDomNode) {\n        domNode.setFontFamily(fontInfo.getMassagedFontFamily());\n        domNode.setFontWeight(fontInfo.fontWeight);\n        domNode.setFontSize(fontInfo.fontSize);\n        domNode.setFontFeatureSettings(fontInfo.fontFeatureSettings);\n        domNode.setLineHeight(fontInfo.lineHeight);\n        domNode.setLetterSpacing(fontInfo.letterSpacing);\n    }\n    else {\n        domNode.style.fontFamily = fontInfo.getMassagedFontFamily();\n        domNode.style.fontWeight = fontInfo.fontWeight;\n        domNode.style.fontSize = fontInfo.fontSize + 'px';\n        domNode.style.fontFeatureSettings = fontInfo.fontFeatureSettings;\n        domNode.style.lineHeight = fontInfo.lineHeight + 'px';\n        domNode.style.letterSpacing = fontInfo.letterSpacing + 'px';\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class EditorSettingMigration {\n    constructor(key, migrate) {\n        this.key = key;\n        this.migrate = migrate;\n    }\n    apply(options) {\n        const value = EditorSettingMigration._read(options, this.key);\n        const read = (key) => EditorSettingMigration._read(options, key);\n        const write = (key, value) => EditorSettingMigration._write(options, key, value);\n        this.migrate(value, read, write);\n    }\n    static _read(source, key) {\n        if (typeof source === 'undefined') {\n            return undefined;\n        }\n        const firstDotIndex = key.indexOf('.');\n        if (firstDotIndex >= 0) {\n            const firstSegment = key.substring(0, firstDotIndex);\n            return this._read(source[firstSegment], key.substring(firstDotIndex + 1));\n        }\n        return source[key];\n    }\n    static _write(target, key, value) {\n        const firstDotIndex = key.indexOf('.');\n        if (firstDotIndex >= 0) {\n            const firstSegment = key.substring(0, firstDotIndex);\n            target[firstSegment] = target[firstSegment] || {};\n            this._write(target[firstSegment], key.substring(firstDotIndex + 1), value);\n            return;\n        }\n        target[key] = value;\n    }\n}\nEditorSettingMigration.items = [];\nfunction registerEditorSettingMigration(key, migrate) {\n    EditorSettingMigration.items.push(new EditorSettingMigration(key, migrate));\n}\nfunction registerSimpleEditorSettingMigration(key, values) {\n    registerEditorSettingMigration(key, (value, read, write) => {\n        if (typeof value !== 'undefined') {\n            for (const [oldValue, newValue] of values) {\n                if (value === oldValue) {\n                    write(key, newValue);\n                    return;\n                }\n            }\n        }\n    });\n}\n/**\n * Compatibility with old options\n */\nexport function migrateOptions(options) {\n    EditorSettingMigration.items.forEach(migration => migration.apply(options));\n}\nregisterSimpleEditorSettingMigration('wordWrap', [[true, 'on'], [false, 'off']]);\nregisterSimpleEditorSettingMigration('lineNumbers', [[true, 'on'], [false, 'off']]);\nregisterSimpleEditorSettingMigration('cursorBlinking', [['visible', 'solid']]);\nregisterSimpleEditorSettingMigration('renderWhitespace', [[true, 'boundary'], [false, 'none']]);\nregisterSimpleEditorSettingMigration('renderLineHighlight', [[true, 'line'], [false, 'none']]);\nregisterSimpleEditorSettingMigration('acceptSuggestionOnEnter', [[true, 'on'], [false, 'off']]);\nregisterSimpleEditorSettingMigration('tabCompletion', [[false, 'off'], [true, 'onlySnippets']]);\nregisterSimpleEditorSettingMigration('hover', [[true, { enabled: true }], [false, { enabled: false }]]);\nregisterSimpleEditorSettingMigration('parameterHints', [[true, { enabled: true }], [false, { enabled: false }]]);\nregisterSimpleEditorSettingMigration('autoIndent', [[false, 'advanced'], [true, 'full']]);\nregisterSimpleEditorSettingMigration('matchBrackets', [[true, 'always'], [false, 'never']]);\nregisterEditorSettingMigration('autoClosingBrackets', (value, read, write) => {\n    if (value === false) {\n        write('autoClosingBrackets', 'never');\n        if (typeof read('autoClosingQuotes') === 'undefined') {\n            write('autoClosingQuotes', 'never');\n        }\n        if (typeof read('autoSurround') === 'undefined') {\n            write('autoSurround', 'never');\n        }\n    }\n});\nregisterEditorSettingMigration('renderIndentGuides', (value, read, write) => {\n    if (typeof value !== 'undefined') {\n        write('renderIndentGuides', undefined);\n        if (typeof read('guides.indentation') === 'undefined') {\n            write('guides.indentation', !!value);\n        }\n    }\n});\nregisterEditorSettingMigration('highlightActiveIndentGuide', (value, read, write) => {\n    if (typeof value !== 'undefined') {\n        write('highlightActiveIndentGuide', undefined);\n        if (typeof read('guides.highlightActiveIndentation') === 'undefined') {\n            write('guides.highlightActiveIndentation', !!value);\n        }\n    }\n});\nconst suggestFilteredTypesMapping = {\n    method: 'showMethods',\n    function: 'showFunctions',\n    constructor: 'showConstructors',\n    deprecated: 'showDeprecated',\n    field: 'showFields',\n    variable: 'showVariables',\n    class: 'showClasses',\n    struct: 'showStructs',\n    interface: 'showInterfaces',\n    module: 'showModules',\n    property: 'showProperties',\n    event: 'showEvents',\n    operator: 'showOperators',\n    unit: 'showUnits',\n    value: 'showValues',\n    constant: 'showConstants',\n    enum: 'showEnums',\n    enumMember: 'showEnumMembers',\n    keyword: 'showKeywords',\n    text: 'showWords',\n    color: 'showColors',\n    file: 'showFiles',\n    reference: 'showReferences',\n    folder: 'showFolders',\n    typeParameter: 'showTypeParameters',\n    snippet: 'showSnippets',\n};\nregisterEditorSettingMigration('suggest.filteredTypes', (value, read, write) => {\n    if (value && typeof value === 'object') {\n        for (const entry of Object.entries(suggestFilteredTypesMapping)) {\n            const v = value[entry[0]];\n            if (v === false) {\n                if (typeof read(`suggest.${entry[1]}`) === 'undefined') {\n                    write(`suggest.${entry[1]}`, false);\n                }\n            }\n        }\n        write('suggest.filteredTypes', undefined);\n    }\n});\nregisterEditorSettingMigration('quickSuggestions', (input, read, write) => {\n    if (typeof input === 'boolean') {\n        const value = input ? 'on' : 'off';\n        const newValue = { comments: value, strings: value, other: value };\n        write('quickSuggestions', newValue);\n    }\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as browser from '../../../base/browser/browser.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { ElementSizeObserver } from './elementSizeObserver.js';\nimport { FontMeasurements } from './fontMeasurements.js';\nimport { migrateOptions } from './migrateOptions.js';\nimport { TabFocus } from './tabFocus.js';\nimport { ComputeOptionsMemory, ConfigurationChangedEvent, editorOptionsRegistry } from '../../common/config/editorOptions.js';\nimport { EditorZoom } from '../../common/config/editorZoom.js';\nimport { BareFontInfo } from '../../common/config/fontInfo.js';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\nlet EditorConfiguration = class EditorConfiguration extends Disposable {\n    constructor(isSimpleWidget, options, container, _accessibilityService) {\n        super();\n        this._accessibilityService = _accessibilityService;\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._onDidChangeFast = this._register(new Emitter());\n        this.onDidChangeFast = this._onDidChangeFast.event;\n        this._isDominatedByLongLines = false;\n        this._viewLineCount = 1;\n        this._lineNumbersDigitCount = 1;\n        this._reservedHeight = 0;\n        this._computeOptionsMemory = new ComputeOptionsMemory();\n        this.isSimpleWidget = isSimpleWidget;\n        this._containerObserver = this._register(new ElementSizeObserver(container, options.dimension));\n        this._rawOptions = deepCloneAndMigrateOptions(options);\n        this._validatedOptions = EditorOptionsUtil.validateOptions(this._rawOptions);\n        this.options = this._computeOptions();\n        if (this.options.get(10 /* EditorOption.automaticLayout */)) {\n            this._containerObserver.startObserving();\n        }\n        this._register(EditorZoom.onDidChangeZoomLevel(() => this._recomputeOptions()));\n        this._register(TabFocus.onDidChangeTabFocus(() => this._recomputeOptions()));\n        this._register(this._containerObserver.onDidChange(() => this._recomputeOptions()));\n        this._register(FontMeasurements.onDidChange(() => this._recomputeOptions()));\n        this._register(browser.PixelRatio.onDidChange(() => this._recomputeOptions()));\n        this._register(this._accessibilityService.onDidChangeScreenReaderOptimized(() => this._recomputeOptions()));\n    }\n    _recomputeOptions() {\n        const newOptions = this._computeOptions();\n        const changeEvent = EditorOptionsUtil.checkEquals(this.options, newOptions);\n        if (changeEvent === null) {\n            // nothing changed!\n            return;\n        }\n        this.options = newOptions;\n        this._onDidChangeFast.fire(changeEvent);\n        this._onDidChange.fire(changeEvent);\n    }\n    _computeOptions() {\n        const partialEnv = this._readEnvConfiguration();\n        const bareFontInfo = BareFontInfo.createFromValidatedSettings(this._validatedOptions, partialEnv.pixelRatio, this.isSimpleWidget);\n        const fontInfo = this._readFontInfo(bareFontInfo);\n        const env = {\n            memory: this._computeOptionsMemory,\n            outerWidth: partialEnv.outerWidth,\n            outerHeight: partialEnv.outerHeight - this._reservedHeight,\n            fontInfo: fontInfo,\n            extraEditorClassName: partialEnv.extraEditorClassName,\n            isDominatedByLongLines: this._isDominatedByLongLines,\n            viewLineCount: this._viewLineCount,\n            lineNumbersDigitCount: this._lineNumbersDigitCount,\n            emptySelectionClipboard: partialEnv.emptySelectionClipboard,\n            pixelRatio: partialEnv.pixelRatio,\n            tabFocusMode: TabFocus.getTabFocusMode(),\n            accessibilitySupport: partialEnv.accessibilitySupport\n        };\n        return EditorOptionsUtil.computeOptions(this._validatedOptions, env);\n    }\n    _readEnvConfiguration() {\n        return {\n            extraEditorClassName: getExtraEditorClassName(),\n            outerWidth: this._containerObserver.getWidth(),\n            outerHeight: this._containerObserver.getHeight(),\n            emptySelectionClipboard: browser.isWebKit || browser.isFirefox,\n            pixelRatio: browser.PixelRatio.value,\n            accessibilitySupport: (this._accessibilityService.isScreenReaderOptimized()\n                ? 2 /* AccessibilitySupport.Enabled */\n                : this._accessibilityService.getAccessibilitySupport())\n        };\n    }\n    _readFontInfo(bareFontInfo) {\n        return FontMeasurements.readFontInfo(bareFontInfo);\n    }\n    getRawOptions() {\n        return this._rawOptions;\n    }\n    updateOptions(_newOptions) {\n        const newOptions = deepCloneAndMigrateOptions(_newOptions);\n        const didChange = EditorOptionsUtil.applyUpdate(this._rawOptions, newOptions);\n        if (!didChange) {\n            return;\n        }\n        this._validatedOptions = EditorOptionsUtil.validateOptions(this._rawOptions);\n        this._recomputeOptions();\n    }\n    observeContainer(dimension) {\n        this._containerObserver.observe(dimension);\n    }\n    setIsDominatedByLongLines(isDominatedByLongLines) {\n        if (this._isDominatedByLongLines === isDominatedByLongLines) {\n            return;\n        }\n        this._isDominatedByLongLines = isDominatedByLongLines;\n        this._recomputeOptions();\n    }\n    setModelLineCount(modelLineCount) {\n        const lineNumbersDigitCount = digitCount(modelLineCount);\n        if (this._lineNumbersDigitCount === lineNumbersDigitCount) {\n            return;\n        }\n        this._lineNumbersDigitCount = lineNumbersDigitCount;\n        this._recomputeOptions();\n    }\n    setViewLineCount(viewLineCount) {\n        if (this._viewLineCount === viewLineCount) {\n            return;\n        }\n        this._viewLineCount = viewLineCount;\n        this._recomputeOptions();\n    }\n    setReservedHeight(reservedHeight) {\n        if (this._reservedHeight === reservedHeight) {\n            return;\n        }\n        this._reservedHeight = reservedHeight;\n        this._recomputeOptions();\n    }\n};\nEditorConfiguration = __decorate([\n    __param(3, IAccessibilityService)\n], EditorConfiguration);\nexport { EditorConfiguration };\nfunction digitCount(n) {\n    let r = 0;\n    while (n) {\n        n = Math.floor(n / 10);\n        r++;\n    }\n    return r ? r : 1;\n}\nfunction getExtraEditorClassName() {\n    let extra = '';\n    if (!browser.isSafari && !browser.isWebkitWebView) {\n        // Use user-select: none in all browsers except Safari and native macOS WebView\n        extra += 'no-user-select ';\n    }\n    if (browser.isSafari) {\n        // See https://github.com/microsoft/vscode/issues/108822\n        extra += 'no-minimap-shadow ';\n        extra += 'enable-user-select ';\n    }\n    if (platform.isMacintosh) {\n        extra += 'mac ';\n    }\n    return extra;\n}\nclass ValidatedEditorOptions {\n    constructor() {\n        this._values = [];\n    }\n    _read(option) {\n        return this._values[option];\n    }\n    get(id) {\n        return this._values[id];\n    }\n    _write(option, value) {\n        this._values[option] = value;\n    }\n}\nexport class ComputedEditorOptions {\n    constructor() {\n        this._values = [];\n    }\n    _read(id) {\n        if (id >= this._values.length) {\n            throw new Error('Cannot read uninitialized value');\n        }\n        return this._values[id];\n    }\n    get(id) {\n        return this._read(id);\n    }\n    _write(id, value) {\n        this._values[id] = value;\n    }\n}\nclass EditorOptionsUtil {\n    static validateOptions(options) {\n        const result = new ValidatedEditorOptions();\n        for (const editorOption of editorOptionsRegistry) {\n            const value = (editorOption.name === '_never_' ? undefined : options[editorOption.name]);\n            result._write(editorOption.id, editorOption.validate(value));\n        }\n        return result;\n    }\n    static computeOptions(options, env) {\n        const result = new ComputedEditorOptions();\n        for (const editorOption of editorOptionsRegistry) {\n            result._write(editorOption.id, editorOption.compute(env, result, options._read(editorOption.id)));\n        }\n        return result;\n    }\n    static _deepEquals(a, b) {\n        if (typeof a !== 'object' || typeof b !== 'object' || !a || !b) {\n            return a === b;\n        }\n        if (Array.isArray(a) || Array.isArray(b)) {\n            return (Array.isArray(a) && Array.isArray(b) ? arrays.equals(a, b) : false);\n        }\n        if (Object.keys(a).length !== Object.keys(b).length) {\n            return false;\n        }\n        for (const key in a) {\n            if (!EditorOptionsUtil._deepEquals(a[key], b[key])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static checkEquals(a, b) {\n        const result = [];\n        let somethingChanged = false;\n        for (const editorOption of editorOptionsRegistry) {\n            const changed = !EditorOptionsUtil._deepEquals(a._read(editorOption.id), b._read(editorOption.id));\n            result[editorOption.id] = changed;\n            if (changed) {\n                somethingChanged = true;\n            }\n        }\n        return (somethingChanged ? new ConfigurationChangedEvent(result) : null);\n    }\n    /**\n     * Returns true if something changed.\n     * Modifies `options`.\n    */\n    static applyUpdate(options, update) {\n        let changed = false;\n        for (const editorOption of editorOptionsRegistry) {\n            if (update.hasOwnProperty(editorOption.name)) {\n                const result = editorOption.applyUpdate(options[editorOption.name], update[editorOption.name]);\n                options[editorOption.name] = result.newValue;\n                changed = changed || result.didChange;\n            }\n        }\n        return changed;\n    }\n}\nfunction deepCloneAndMigrateOptions(_options) {\n    const options = objects.deepClone(_options);\n    migrateOptions(options);\n    return options;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Emitter } from '../../../base/common/event.js';\nexport class ElementSizeObserver extends Disposable {\n    constructor(referenceDomElement, dimension) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._referenceDomElement = referenceDomElement;\n        this._width = -1;\n        this._height = -1;\n        this._resizeObserver = null;\n        this.measureReferenceDomElement(false, dimension);\n    }\n    dispose() {\n        this.stopObserving();\n        super.dispose();\n    }\n    getWidth() {\n        return this._width;\n    }\n    getHeight() {\n        return this._height;\n    }\n    startObserving() {\n        if (!this._resizeObserver && this._referenceDomElement) {\n            this._resizeObserver = new ResizeObserver((entries) => {\n                if (entries && entries[0] && entries[0].contentRect) {\n                    this.observe({ width: entries[0].contentRect.width, height: entries[0].contentRect.height });\n                }\n                else {\n                    this.observe();\n                }\n            });\n            this._resizeObserver.observe(this._referenceDomElement);\n        }\n    }\n    stopObserving() {\n        if (this._resizeObserver) {\n            this._resizeObserver.disconnect();\n            this._resizeObserver = null;\n        }\n    }\n    observe(dimension) {\n        this.measureReferenceDomElement(true, dimension);\n    }\n    measureReferenceDomElement(emitEvent, dimension) {\n        let observedWidth = 0;\n        let observedHeight = 0;\n        if (dimension) {\n            observedWidth = dimension.width;\n            observedHeight = dimension.height;\n        }\n        else if (this._referenceDomElement) {\n            observedWidth = this._referenceDomElement.clientWidth;\n            observedHeight = this._referenceDomElement.clientHeight;\n        }\n        observedWidth = Math.max(5, observedWidth);\n        observedHeight = Math.max(5, observedHeight);\n        if (this._width !== observedWidth || this._height !== observedHeight) {\n            this._width = observedWidth;\n            this._height = observedHeight;\n            if (emitEvent) {\n                this._onDidChange.fire();\n            }\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { applyFontInfo } from './domFontInfo.js';\nexport class CharWidthRequest {\n    constructor(chr, type) {\n        this.chr = chr;\n        this.type = type;\n        this.width = 0;\n    }\n    fulfill(width) {\n        this.width = width;\n    }\n}\nclass DomCharWidthReader {\n    constructor(bareFontInfo, requests) {\n        this._bareFontInfo = bareFontInfo;\n        this._requests = requests;\n        this._container = null;\n        this._testElements = null;\n    }\n    read() {\n        // Create a test container with all these test elements\n        this._createDomElements();\n        // Add the container to the DOM\n        document.body.appendChild(this._container);\n        // Read character widths\n        this._readFromDomElements();\n        // Remove the container from the DOM\n        document.body.removeChild(this._container);\n        this._container = null;\n        this._testElements = null;\n    }\n    _createDomElements() {\n        const container = document.createElement('div');\n        container.style.position = 'absolute';\n        container.style.top = '-50000px';\n        container.style.width = '50000px';\n        const regularDomNode = document.createElement('div');\n        applyFontInfo(regularDomNode, this._bareFontInfo);\n        container.appendChild(regularDomNode);\n        const boldDomNode = document.createElement('div');\n        applyFontInfo(boldDomNode, this._bareFontInfo);\n        boldDomNode.style.fontWeight = 'bold';\n        container.appendChild(boldDomNode);\n        const italicDomNode = document.createElement('div');\n        applyFontInfo(italicDomNode, this._bareFontInfo);\n        italicDomNode.style.fontStyle = 'italic';\n        container.appendChild(italicDomNode);\n        const testElements = [];\n        for (const request of this._requests) {\n            let parent;\n            if (request.type === 0 /* CharWidthRequestType.Regular */) {\n                parent = regularDomNode;\n            }\n            if (request.type === 2 /* CharWidthRequestType.Bold */) {\n                parent = boldDomNode;\n            }\n            if (request.type === 1 /* CharWidthRequestType.Italic */) {\n                parent = italicDomNode;\n            }\n            parent.appendChild(document.createElement('br'));\n            const testElement = document.createElement('span');\n            DomCharWidthReader._render(testElement, request);\n            parent.appendChild(testElement);\n            testElements.push(testElement);\n        }\n        this._container = container;\n        this._testElements = testElements;\n    }\n    static _render(testElement, request) {\n        if (request.chr === ' ') {\n            let htmlString = '\\u00a0';\n            // Repeat character 256 (2^8) times\n            for (let i = 0; i < 8; i++) {\n                htmlString += htmlString;\n            }\n            testElement.innerText = htmlString;\n        }\n        else {\n            let testString = request.chr;\n            // Repeat character 256 (2^8) times\n            for (let i = 0; i < 8; i++) {\n                testString += testString;\n            }\n            testElement.textContent = testString;\n        }\n    }\n    _readFromDomElements() {\n        for (let i = 0, len = this._requests.length; i < len; i++) {\n            const request = this._requests[i];\n            const testElement = this._testElements[i];\n            request.fulfill(testElement.offsetWidth / 256);\n        }\n    }\n}\nexport function readCharWidths(bareFontInfo, requests) {\n    const reader = new DomCharWidthReader(bareFontInfo, requests);\n    reader.read();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../base/browser/browser.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { CharWidthRequest, readCharWidths } from './charWidthReader.js';\nimport { EditorFontLigatures } from '../../common/config/editorOptions.js';\nimport { FontInfo } from '../../common/config/fontInfo.js';\nclass FontMeasurementsImpl extends Disposable {\n    constructor() {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._cache = new FontMeasurementsCache();\n        this._evictUntrustedReadingsTimeout = -1;\n    }\n    dispose() {\n        if (this._evictUntrustedReadingsTimeout !== -1) {\n            window.clearTimeout(this._evictUntrustedReadingsTimeout);\n            this._evictUntrustedReadingsTimeout = -1;\n        }\n        super.dispose();\n    }\n    /**\n     * Clear all cached font information and trigger a change event.\n     */\n    clearAllFontInfos() {\n        this._cache = new FontMeasurementsCache();\n        this._onDidChange.fire();\n    }\n    _writeToCache(item, value) {\n        this._cache.put(item, value);\n        if (!value.isTrusted && this._evictUntrustedReadingsTimeout === -1) {\n            // Try reading again after some time\n            this._evictUntrustedReadingsTimeout = window.setTimeout(() => {\n                this._evictUntrustedReadingsTimeout = -1;\n                this._evictUntrustedReadings();\n            }, 5000);\n        }\n    }\n    _evictUntrustedReadings() {\n        const values = this._cache.getValues();\n        let somethingRemoved = false;\n        for (const item of values) {\n            if (!item.isTrusted) {\n                somethingRemoved = true;\n                this._cache.remove(item);\n            }\n        }\n        if (somethingRemoved) {\n            this._onDidChange.fire();\n        }\n    }\n    /**\n     * Read font information.\n     */\n    readFontInfo(bareFontInfo) {\n        if (!this._cache.has(bareFontInfo)) {\n            let readConfig = this._actualReadFontInfo(bareFontInfo);\n            if (readConfig.typicalHalfwidthCharacterWidth <= 2 || readConfig.typicalFullwidthCharacterWidth <= 2 || readConfig.spaceWidth <= 2 || readConfig.maxDigitWidth <= 2) {\n                // Hey, it's Bug 14341 ... we couldn't read\n                readConfig = new FontInfo({\n                    pixelRatio: browser.PixelRatio.value,\n                    fontFamily: readConfig.fontFamily,\n                    fontWeight: readConfig.fontWeight,\n                    fontSize: readConfig.fontSize,\n                    fontFeatureSettings: readConfig.fontFeatureSettings,\n                    lineHeight: readConfig.lineHeight,\n                    letterSpacing: readConfig.letterSpacing,\n                    isMonospace: readConfig.isMonospace,\n                    typicalHalfwidthCharacterWidth: Math.max(readConfig.typicalHalfwidthCharacterWidth, 5),\n                    typicalFullwidthCharacterWidth: Math.max(readConfig.typicalFullwidthCharacterWidth, 5),\n                    canUseHalfwidthRightwardsArrow: readConfig.canUseHalfwidthRightwardsArrow,\n                    spaceWidth: Math.max(readConfig.spaceWidth, 5),\n                    middotWidth: Math.max(readConfig.middotWidth, 5),\n                    wsmiddotWidth: Math.max(readConfig.wsmiddotWidth, 5),\n                    maxDigitWidth: Math.max(readConfig.maxDigitWidth, 5),\n                }, false);\n            }\n            this._writeToCache(bareFontInfo, readConfig);\n        }\n        return this._cache.get(bareFontInfo);\n    }\n    _createRequest(chr, type, all, monospace) {\n        const result = new CharWidthRequest(chr, type);\n        all.push(result);\n        monospace === null || monospace === void 0 ? void 0 : monospace.push(result);\n        return result;\n    }\n    _actualReadFontInfo(bareFontInfo) {\n        const all = [];\n        const monospace = [];\n        const typicalHalfwidthCharacter = this._createRequest('n', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const typicalFullwidthCharacter = this._createRequest('\\uff4d', 0 /* CharWidthRequestType.Regular */, all, null);\n        const space = this._createRequest(' ', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit0 = this._createRequest('0', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit1 = this._createRequest('1', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit2 = this._createRequest('2', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit3 = this._createRequest('3', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit4 = this._createRequest('4', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit5 = this._createRequest('5', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit6 = this._createRequest('6', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit7 = this._createRequest('7', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit8 = this._createRequest('8', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const digit9 = this._createRequest('9', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        // monospace test: used for whitespace rendering\n        const rightwardsArrow = this._createRequest('→', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        const halfwidthRightwardsArrow = this._createRequest('￫', 0 /* CharWidthRequestType.Regular */, all, null);\n        // U+00B7 - MIDDLE DOT\n        const middot = this._createRequest('·', 0 /* CharWidthRequestType.Regular */, all, monospace);\n        // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        const wsmiddotWidth = this._createRequest(String.fromCharCode(0x2E31), 0 /* CharWidthRequestType.Regular */, all, null);\n        // monospace test: some characters\n        const monospaceTestChars = '|/-_ilm%';\n        for (let i = 0, len = monospaceTestChars.length; i < len; i++) {\n            this._createRequest(monospaceTestChars.charAt(i), 0 /* CharWidthRequestType.Regular */, all, monospace);\n            this._createRequest(monospaceTestChars.charAt(i), 1 /* CharWidthRequestType.Italic */, all, monospace);\n            this._createRequest(monospaceTestChars.charAt(i), 2 /* CharWidthRequestType.Bold */, all, monospace);\n        }\n        readCharWidths(bareFontInfo, all);\n        const maxDigitWidth = Math.max(digit0.width, digit1.width, digit2.width, digit3.width, digit4.width, digit5.width, digit6.width, digit7.width, digit8.width, digit9.width);\n        let isMonospace = (bareFontInfo.fontFeatureSettings === EditorFontLigatures.OFF);\n        const referenceWidth = monospace[0].width;\n        for (let i = 1, len = monospace.length; isMonospace && i < len; i++) {\n            const diff = referenceWidth - monospace[i].width;\n            if (diff < -0.001 || diff > 0.001) {\n                isMonospace = false;\n                break;\n            }\n        }\n        let canUseHalfwidthRightwardsArrow = true;\n        if (isMonospace && halfwidthRightwardsArrow.width !== referenceWidth) {\n            // using a halfwidth rightwards arrow would break monospace...\n            canUseHalfwidthRightwardsArrow = false;\n        }\n        if (halfwidthRightwardsArrow.width > rightwardsArrow.width) {\n            // using a halfwidth rightwards arrow would paint a larger arrow than a regular rightwards arrow\n            canUseHalfwidthRightwardsArrow = false;\n        }\n        return new FontInfo({\n            pixelRatio: browser.PixelRatio.value,\n            fontFamily: bareFontInfo.fontFamily,\n            fontWeight: bareFontInfo.fontWeight,\n            fontSize: bareFontInfo.fontSize,\n            fontFeatureSettings: bareFontInfo.fontFeatureSettings,\n            lineHeight: bareFontInfo.lineHeight,\n            letterSpacing: bareFontInfo.letterSpacing,\n            isMonospace: isMonospace,\n            typicalHalfwidthCharacterWidth: typicalHalfwidthCharacter.width,\n            typicalFullwidthCharacterWidth: typicalFullwidthCharacter.width,\n            canUseHalfwidthRightwardsArrow: canUseHalfwidthRightwardsArrow,\n            spaceWidth: space.width,\n            middotWidth: middot.width,\n            wsmiddotWidth: wsmiddotWidth.width,\n            maxDigitWidth: maxDigitWidth\n        }, true);\n    }\n}\nclass FontMeasurementsCache {\n    constructor() {\n        this._keys = Object.create(null);\n        this._values = Object.create(null);\n    }\n    has(item) {\n        const itemId = item.getId();\n        return !!this._values[itemId];\n    }\n    get(item) {\n        const itemId = item.getId();\n        return this._values[itemId];\n    }\n    put(item, value) {\n        const itemId = item.getId();\n        this._keys[itemId] = item;\n        this._values[itemId] = value;\n    }\n    remove(item) {\n        const itemId = item.getId();\n        delete this._keys[itemId];\n        delete this._values[itemId];\n    }\n    getValues() {\n        return Object.keys(this._keys).map(id => this._values[id]);\n    }\n}\nexport const FontMeasurements = new FontMeasurementsImpl();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nclass TabFocusImpl {\n    constructor() {\n        this._tabFocus = false;\n        this._onDidChangeTabFocus = new Emitter();\n        this.onDidChangeTabFocus = this._onDidChangeTabFocus.event;\n    }\n    getTabFocusMode() {\n        return this._tabFocus;\n    }\n    setTabFocusMode(tabFocusMode) {\n        if (this._tabFocus === tabFocusMode) {\n            return;\n        }\n        this._tabFocus = tabFocusMode;\n        this._onDidChangeTabFocus.fire(this._tabFocus);\n    }\n}\n/**\n * Control what pressing Tab does.\n * If it is false, pressing Tab or Shift-Tab will be handled by the editor.\n * If it is true, pressing Tab or Shift-Tab will move the browser focus.\n * Defaults to false.\n */\nexport const TabFocus = new TabFocusImpl();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { PageCoordinates } from '../editorDom.js';\nimport { PartFingerprints } from '../view/viewPart.js';\nimport { ViewLine } from '../viewParts/lines/viewLine.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range as EditorRange } from '../../common/core/range.js';\nimport { CursorColumns } from '../../common/core/cursorColumns.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { AtomicTabMoveOperations } from '../../common/cursor/cursorAtomicMoveOperations.js';\nclass UnknownHitTestResult {\n    constructor(hitTarget = null) {\n        this.hitTarget = hitTarget;\n        this.type = 0 /* HitTestResultType.Unknown */;\n    }\n}\nclass ContentHitTestResult {\n    constructor(position, spanNode, injectedText) {\n        this.position = position;\n        this.spanNode = spanNode;\n        this.injectedText = injectedText;\n        this.type = 1 /* HitTestResultType.Content */;\n    }\n}\nvar HitTestResult;\n(function (HitTestResult) {\n    function createFromDOMInfo(ctx, spanNode, offset) {\n        const position = ctx.getPositionFromDOMInfo(spanNode, offset);\n        if (position) {\n            return new ContentHitTestResult(position, spanNode, null);\n        }\n        return new UnknownHitTestResult(spanNode);\n    }\n    HitTestResult.createFromDOMInfo = createFromDOMInfo;\n})(HitTestResult || (HitTestResult = {}));\nexport class PointerHandlerLastRenderData {\n    constructor(lastViewCursorsRenderData, lastTextareaPosition) {\n        this.lastViewCursorsRenderData = lastViewCursorsRenderData;\n        this.lastTextareaPosition = lastTextareaPosition;\n    }\n}\nexport class MouseTarget {\n    static _deduceRage(position, range = null) {\n        if (!range && position) {\n            return new EditorRange(position.lineNumber, position.column, position.lineNumber, position.column);\n        }\n        return range !== null && range !== void 0 ? range : null;\n    }\n    static createUnknown(element, mouseColumn, position) {\n        return { type: 0 /* MouseTargetType.UNKNOWN */, element, mouseColumn, position, range: this._deduceRage(position) };\n    }\n    static createTextarea(element, mouseColumn) {\n        return { type: 1 /* MouseTargetType.TEXTAREA */, element, mouseColumn, position: null, range: null };\n    }\n    static createMargin(type, element, mouseColumn, position, range, detail) {\n        return { type, element, mouseColumn, position, range, detail };\n    }\n    static createViewZone(type, element, mouseColumn, position, detail) {\n        return { type, element, mouseColumn, position, range: this._deduceRage(position), detail };\n    }\n    static createContentText(element, mouseColumn, position, range, detail) {\n        return { type: 6 /* MouseTargetType.CONTENT_TEXT */, element, mouseColumn, position, range: this._deduceRage(position, range), detail };\n    }\n    static createContentEmpty(element, mouseColumn, position, detail) {\n        return { type: 7 /* MouseTargetType.CONTENT_EMPTY */, element, mouseColumn, position, range: this._deduceRage(position), detail };\n    }\n    static createContentWidget(element, mouseColumn, detail) {\n        return { type: 9 /* MouseTargetType.CONTENT_WIDGET */, element, mouseColumn, position: null, range: null, detail };\n    }\n    static createScrollbar(element, mouseColumn, position) {\n        return { type: 11 /* MouseTargetType.SCROLLBAR */, element, mouseColumn, position, range: this._deduceRage(position) };\n    }\n    static createOverlayWidget(element, mouseColumn, detail) {\n        return { type: 12 /* MouseTargetType.OVERLAY_WIDGET */, element, mouseColumn, position: null, range: null, detail };\n    }\n    static createOutsideEditor(mouseColumn, position) {\n        return { type: 13 /* MouseTargetType.OUTSIDE_EDITOR */, element: null, mouseColumn, position, range: this._deduceRage(position) };\n    }\n    static _typeToString(type) {\n        if (type === 1 /* MouseTargetType.TEXTAREA */) {\n            return 'TEXTAREA';\n        }\n        if (type === 2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */) {\n            return 'GUTTER_GLYPH_MARGIN';\n        }\n        if (type === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */) {\n            return 'GUTTER_LINE_NUMBERS';\n        }\n        if (type === 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */) {\n            return 'GUTTER_LINE_DECORATIONS';\n        }\n        if (type === 5 /* MouseTargetType.GUTTER_VIEW_ZONE */) {\n            return 'GUTTER_VIEW_ZONE';\n        }\n        if (type === 6 /* MouseTargetType.CONTENT_TEXT */) {\n            return 'CONTENT_TEXT';\n        }\n        if (type === 7 /* MouseTargetType.CONTENT_EMPTY */) {\n            return 'CONTENT_EMPTY';\n        }\n        if (type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */) {\n            return 'CONTENT_VIEW_ZONE';\n        }\n        if (type === 9 /* MouseTargetType.CONTENT_WIDGET */) {\n            return 'CONTENT_WIDGET';\n        }\n        if (type === 10 /* MouseTargetType.OVERVIEW_RULER */) {\n            return 'OVERVIEW_RULER';\n        }\n        if (type === 11 /* MouseTargetType.SCROLLBAR */) {\n            return 'SCROLLBAR';\n        }\n        if (type === 12 /* MouseTargetType.OVERLAY_WIDGET */) {\n            return 'OVERLAY_WIDGET';\n        }\n        return 'UNKNOWN';\n    }\n    static toString(target) {\n        return this._typeToString(target.type) + ': ' + target.position + ' - ' + target.range + ' - ' + JSON.stringify(target.detail);\n    }\n}\nclass ElementPath {\n    static isTextArea(path) {\n        return (path.length === 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 6 /* PartFingerprint.TextArea */);\n    }\n    static isChildOfViewLines(path) {\n        return (path.length >= 4\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[3] === 7 /* PartFingerprint.ViewLines */);\n    }\n    static isStrictChildOfViewLines(path) {\n        return (path.length > 4\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[3] === 7 /* PartFingerprint.ViewLines */);\n    }\n    static isChildOfScrollableElement(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 5 /* PartFingerprint.ScrollableElement */);\n    }\n    static isChildOfMinimap(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 8 /* PartFingerprint.Minimap */);\n    }\n    static isChildOfContentWidgets(path) {\n        return (path.length >= 4\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[3] === 1 /* PartFingerprint.ContentWidgets */);\n    }\n    static isChildOfOverflowingContentWidgets(path) {\n        return (path.length >= 1\n            && path[0] === 2 /* PartFingerprint.OverflowingContentWidgets */);\n    }\n    static isChildOfOverlayWidgets(path) {\n        return (path.length >= 2\n            && path[0] === 3 /* PartFingerprint.OverflowGuard */\n            && path[1] === 4 /* PartFingerprint.OverlayWidgets */);\n    }\n}\nexport class HitTestContext {\n    constructor(context, viewHelper, lastRenderData) {\n        this.viewModel = context.viewModel;\n        const options = context.configuration.options;\n        this.layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this.viewDomNode = viewHelper.viewDomNode;\n        this.lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this.stickyTabStops = options.get(106 /* EditorOption.stickyTabStops */);\n        this.typicalHalfwidthCharacterWidth = options.get(46 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this.lastRenderData = lastRenderData;\n        this._context = context;\n        this._viewHelper = viewHelper;\n    }\n    getZoneAtCoord(mouseVerticalOffset) {\n        return HitTestContext.getZoneAtCoord(this._context, mouseVerticalOffset);\n    }\n    static getZoneAtCoord(context, mouseVerticalOffset) {\n        // The target is either a view zone or the empty space after the last view-line\n        const viewZoneWhitespace = context.viewLayout.getWhitespaceAtVerticalOffset(mouseVerticalOffset);\n        if (viewZoneWhitespace) {\n            const viewZoneMiddle = viewZoneWhitespace.verticalOffset + viewZoneWhitespace.height / 2;\n            const lineCount = context.viewModel.getLineCount();\n            let positionBefore = null;\n            let position;\n            let positionAfter = null;\n            if (viewZoneWhitespace.afterLineNumber !== lineCount) {\n                // There are more lines after this view zone\n                positionAfter = new Position(viewZoneWhitespace.afterLineNumber + 1, 1);\n            }\n            if (viewZoneWhitespace.afterLineNumber > 0) {\n                // There are more lines above this view zone\n                positionBefore = new Position(viewZoneWhitespace.afterLineNumber, context.viewModel.getLineMaxColumn(viewZoneWhitespace.afterLineNumber));\n            }\n            if (positionAfter === null) {\n                position = positionBefore;\n            }\n            else if (positionBefore === null) {\n                position = positionAfter;\n            }\n            else if (mouseVerticalOffset < viewZoneMiddle) {\n                position = positionBefore;\n            }\n            else {\n                position = positionAfter;\n            }\n            return {\n                viewZoneId: viewZoneWhitespace.id,\n                afterLineNumber: viewZoneWhitespace.afterLineNumber,\n                positionBefore: positionBefore,\n                positionAfter: positionAfter,\n                position: position\n            };\n        }\n        return null;\n    }\n    getFullLineRangeAtCoord(mouseVerticalOffset) {\n        if (this._context.viewLayout.isAfterLines(mouseVerticalOffset)) {\n            // Below the last line\n            const lineNumber = this._context.viewModel.getLineCount();\n            const maxLineColumn = this._context.viewModel.getLineMaxColumn(lineNumber);\n            return {\n                range: new EditorRange(lineNumber, maxLineColumn, lineNumber, maxLineColumn),\n                isAfterLines: true\n            };\n        }\n        const lineNumber = this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n        const maxLineColumn = this._context.viewModel.getLineMaxColumn(lineNumber);\n        return {\n            range: new EditorRange(lineNumber, 1, lineNumber, maxLineColumn),\n            isAfterLines: false\n        };\n    }\n    getLineNumberAtVerticalOffset(mouseVerticalOffset) {\n        return this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n    }\n    isAfterLines(mouseVerticalOffset) {\n        return this._context.viewLayout.isAfterLines(mouseVerticalOffset);\n    }\n    isInTopPadding(mouseVerticalOffset) {\n        return this._context.viewLayout.isInTopPadding(mouseVerticalOffset);\n    }\n    isInBottomPadding(mouseVerticalOffset) {\n        return this._context.viewLayout.isInBottomPadding(mouseVerticalOffset);\n    }\n    getVerticalOffsetForLineNumber(lineNumber) {\n        return this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n    }\n    findAttribute(element, attr) {\n        return HitTestContext._findAttribute(element, attr, this._viewHelper.viewDomNode);\n    }\n    static _findAttribute(element, attr, stopAt) {\n        while (element && element !== document.body) {\n            if (element.hasAttribute && element.hasAttribute(attr)) {\n                return element.getAttribute(attr);\n            }\n            if (element === stopAt) {\n                return null;\n            }\n            element = element.parentNode;\n        }\n        return null;\n    }\n    getLineWidth(lineNumber) {\n        return this._viewHelper.getLineWidth(lineNumber);\n    }\n    visibleRangeForPosition(lineNumber, column) {\n        return this._viewHelper.visibleRangeForPosition(lineNumber, column);\n    }\n    getPositionFromDOMInfo(spanNode, offset) {\n        return this._viewHelper.getPositionFromDOMInfo(spanNode, offset);\n    }\n    getCurrentScrollTop() {\n        return this._context.viewLayout.getCurrentScrollTop();\n    }\n    getCurrentScrollLeft() {\n        return this._context.viewLayout.getCurrentScrollLeft();\n    }\n}\nclass BareHitTestRequest {\n    constructor(ctx, editorPos, pos, relativePos) {\n        this.editorPos = editorPos;\n        this.pos = pos;\n        this.relativePos = relativePos;\n        this.mouseVerticalOffset = Math.max(0, ctx.getCurrentScrollTop() + this.relativePos.y);\n        this.mouseContentHorizontalOffset = ctx.getCurrentScrollLeft() + this.relativePos.x - ctx.layoutInfo.contentLeft;\n        this.isInMarginArea = (this.relativePos.x < ctx.layoutInfo.contentLeft && this.relativePos.x >= ctx.layoutInfo.glyphMarginLeft);\n        this.isInContentArea = !this.isInMarginArea;\n        this.mouseColumn = Math.max(0, MouseTargetFactory._getMouseColumn(this.mouseContentHorizontalOffset, ctx.typicalHalfwidthCharacterWidth));\n    }\n}\nclass HitTestRequest extends BareHitTestRequest {\n    constructor(ctx, editorPos, pos, relativePos, target) {\n        super(ctx, editorPos, pos, relativePos);\n        this._ctx = ctx;\n        if (target) {\n            this.target = target;\n            this.targetPath = PartFingerprints.collect(target, ctx.viewDomNode);\n        }\n        else {\n            this.target = null;\n            this.targetPath = new Uint8Array(0);\n        }\n    }\n    toString() {\n        return `pos(${this.pos.x},${this.pos.y}), editorPos(${this.editorPos.x},${this.editorPos.y}), relativePos(${this.relativePos.x},${this.relativePos.y}), mouseVerticalOffset: ${this.mouseVerticalOffset}, mouseContentHorizontalOffset: ${this.mouseContentHorizontalOffset}\\n\\ttarget: ${this.target ? this.target.outerHTML : null}`;\n    }\n    _getMouseColumn(position = null) {\n        if (position && position.column < this._ctx.viewModel.getLineMaxColumn(position.lineNumber)) {\n            // Most likely, the line contains foreign decorations...\n            return CursorColumns.visibleColumnFromColumn(this._ctx.viewModel.getLineContent(position.lineNumber), position.column, this._ctx.viewModel.model.getOptions().tabSize) + 1;\n        }\n        return this.mouseColumn;\n    }\n    fulfillUnknown(position = null) {\n        return MouseTarget.createUnknown(this.target, this._getMouseColumn(position), position);\n    }\n    fulfillTextarea() {\n        return MouseTarget.createTextarea(this.target, this._getMouseColumn());\n    }\n    fulfillMargin(type, position, range, detail) {\n        return MouseTarget.createMargin(type, this.target, this._getMouseColumn(position), position, range, detail);\n    }\n    fulfillViewZone(type, position, detail) {\n        return MouseTarget.createViewZone(type, this.target, this._getMouseColumn(position), position, detail);\n    }\n    fulfillContentText(position, range, detail) {\n        return MouseTarget.createContentText(this.target, this._getMouseColumn(position), position, range, detail);\n    }\n    fulfillContentEmpty(position, detail) {\n        return MouseTarget.createContentEmpty(this.target, this._getMouseColumn(position), position, detail);\n    }\n    fulfillContentWidget(detail) {\n        return MouseTarget.createContentWidget(this.target, this._getMouseColumn(), detail);\n    }\n    fulfillScrollbar(position) {\n        return MouseTarget.createScrollbar(this.target, this._getMouseColumn(position), position);\n    }\n    fulfillOverlayWidget(detail) {\n        return MouseTarget.createOverlayWidget(this.target, this._getMouseColumn(), detail);\n    }\n    withTarget(target) {\n        return new HitTestRequest(this._ctx, this.editorPos, this.pos, this.relativePos, target);\n    }\n}\nconst EMPTY_CONTENT_AFTER_LINES = { isAfterLines: true };\nfunction createEmptyContentDataInLines(horizontalDistanceToText) {\n    return {\n        isAfterLines: false,\n        horizontalDistanceToText: horizontalDistanceToText\n    };\n}\nexport class MouseTargetFactory {\n    constructor(context, viewHelper) {\n        this._context = context;\n        this._viewHelper = viewHelper;\n    }\n    mouseTargetIsWidget(e) {\n        const t = e.target;\n        const path = PartFingerprints.collect(t, this._viewHelper.viewDomNode);\n        // Is it a content widget?\n        if (ElementPath.isChildOfContentWidgets(path) || ElementPath.isChildOfOverflowingContentWidgets(path)) {\n            return true;\n        }\n        // Is it an overlay widget?\n        if (ElementPath.isChildOfOverlayWidgets(path)) {\n            return true;\n        }\n        return false;\n    }\n    createMouseTarget(lastRenderData, editorPos, pos, relativePos, target) {\n        const ctx = new HitTestContext(this._context, this._viewHelper, lastRenderData);\n        const request = new HitTestRequest(ctx, editorPos, pos, relativePos, target);\n        try {\n            const r = MouseTargetFactory._createMouseTarget(ctx, request, false);\n            // console.log(MouseTarget.toString(r));\n            return r;\n        }\n        catch (err) {\n            // console.log(err);\n            return request.fulfillUnknown();\n        }\n    }\n    static _createMouseTarget(ctx, request, domHitTestExecuted) {\n        // console.log(`${domHitTestExecuted ? '=>' : ''}CAME IN REQUEST: ${request}`);\n        // First ensure the request has a target\n        if (request.target === null) {\n            if (domHitTestExecuted) {\n                // Still no target... and we have already executed hit test...\n                return request.fulfillUnknown();\n            }\n            const hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n            if (hitTestResult.type === 1 /* HitTestResultType.Content */) {\n                return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n            }\n            return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n        }\n        // we know for a fact that request.target is not null\n        const resolvedRequest = request;\n        let result = null;\n        result = result || MouseTargetFactory._hitTestContentWidget(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestOverlayWidget(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestMinimap(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestScrollbarSlider(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewZone(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestMargin(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewCursor(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestTextArea(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewLines(ctx, resolvedRequest, domHitTestExecuted);\n        result = result || MouseTargetFactory._hitTestScrollbar(ctx, resolvedRequest);\n        return (result || request.fulfillUnknown());\n    }\n    static _hitTestContentWidget(ctx, request) {\n        // Is it a content widget?\n        if (ElementPath.isChildOfContentWidgets(request.targetPath) || ElementPath.isChildOfOverflowingContentWidgets(request.targetPath)) {\n            const widgetId = ctx.findAttribute(request.target, 'widgetId');\n            if (widgetId) {\n                return request.fulfillContentWidget(widgetId);\n            }\n            else {\n                return request.fulfillUnknown();\n            }\n        }\n        return null;\n    }\n    static _hitTestOverlayWidget(ctx, request) {\n        // Is it an overlay widget?\n        if (ElementPath.isChildOfOverlayWidgets(request.targetPath)) {\n            const widgetId = ctx.findAttribute(request.target, 'widgetId');\n            if (widgetId) {\n                return request.fulfillOverlayWidget(widgetId);\n            }\n            else {\n                return request.fulfillUnknown();\n            }\n        }\n        return null;\n    }\n    static _hitTestViewCursor(ctx, request) {\n        if (request.target) {\n            // Check if we've hit a painted cursor\n            const lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n            for (const d of lastViewCursorsRenderData) {\n                if (request.target === d.domNode) {\n                    return request.fulfillContentText(d.position, null, { mightBeForeignElement: false, injectedText: null });\n                }\n            }\n        }\n        if (request.isInContentArea) {\n            // Edge has a bug when hit-testing the exact position of a cursor,\n            // instead of returning the correct dom node, it returns the\n            // first or last rendered view line dom node, therefore help it out\n            // and first check if we are on top of a cursor\n            const lastViewCursorsRenderData = ctx.lastRenderData.lastViewCursorsRenderData;\n            const mouseContentHorizontalOffset = request.mouseContentHorizontalOffset;\n            const mouseVerticalOffset = request.mouseVerticalOffset;\n            for (const d of lastViewCursorsRenderData) {\n                if (mouseContentHorizontalOffset < d.contentLeft) {\n                    // mouse position is to the left of the cursor\n                    continue;\n                }\n                if (mouseContentHorizontalOffset > d.contentLeft + d.width) {\n                    // mouse position is to the right of the cursor\n                    continue;\n                }\n                const cursorVerticalOffset = ctx.getVerticalOffsetForLineNumber(d.position.lineNumber);\n                if (cursorVerticalOffset <= mouseVerticalOffset\n                    && mouseVerticalOffset <= cursorVerticalOffset + d.height) {\n                    return request.fulfillContentText(d.position, null, { mightBeForeignElement: false, injectedText: null });\n                }\n            }\n        }\n        return null;\n    }\n    static _hitTestViewZone(ctx, request) {\n        const viewZoneData = ctx.getZoneAtCoord(request.mouseVerticalOffset);\n        if (viewZoneData) {\n            const mouseTargetType = (request.isInContentArea ? 8 /* MouseTargetType.CONTENT_VIEW_ZONE */ : 5 /* MouseTargetType.GUTTER_VIEW_ZONE */);\n            return request.fulfillViewZone(mouseTargetType, viewZoneData.position, viewZoneData);\n        }\n        return null;\n    }\n    static _hitTestTextArea(ctx, request) {\n        // Is it the textarea?\n        if (ElementPath.isTextArea(request.targetPath)) {\n            if (ctx.lastRenderData.lastTextareaPosition) {\n                return request.fulfillContentText(ctx.lastRenderData.lastTextareaPosition, null, { mightBeForeignElement: false, injectedText: null });\n            }\n            return request.fulfillTextarea();\n        }\n        return null;\n    }\n    static _hitTestMargin(ctx, request) {\n        if (request.isInMarginArea) {\n            const res = ctx.getFullLineRangeAtCoord(request.mouseVerticalOffset);\n            const pos = res.range.getStartPosition();\n            let offset = Math.abs(request.relativePos.x);\n            const detail = {\n                isAfterLines: res.isAfterLines,\n                glyphMarginLeft: ctx.layoutInfo.glyphMarginLeft,\n                glyphMarginWidth: ctx.layoutInfo.glyphMarginWidth,\n                lineNumbersWidth: ctx.layoutInfo.lineNumbersWidth,\n                offsetX: offset\n            };\n            offset -= ctx.layoutInfo.glyphMarginLeft;\n            if (offset <= ctx.layoutInfo.glyphMarginWidth) {\n                // On the glyph margin\n                return request.fulfillMargin(2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */, pos, res.range, detail);\n            }\n            offset -= ctx.layoutInfo.glyphMarginWidth;\n            if (offset <= ctx.layoutInfo.lineNumbersWidth) {\n                // On the line numbers\n                return request.fulfillMargin(3 /* MouseTargetType.GUTTER_LINE_NUMBERS */, pos, res.range, detail);\n            }\n            offset -= ctx.layoutInfo.lineNumbersWidth;\n            // On the line decorations\n            return request.fulfillMargin(4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */, pos, res.range, detail);\n        }\n        return null;\n    }\n    static _hitTestViewLines(ctx, request, domHitTestExecuted) {\n        if (!ElementPath.isChildOfViewLines(request.targetPath)) {\n            return null;\n        }\n        if (ctx.isInTopPadding(request.mouseVerticalOffset)) {\n            return request.fulfillContentEmpty(new Position(1, 1), EMPTY_CONTENT_AFTER_LINES);\n        }\n        // Check if it is below any lines and any view zones\n        if (ctx.isAfterLines(request.mouseVerticalOffset) || ctx.isInBottomPadding(request.mouseVerticalOffset)) {\n            // This most likely indicates it happened after the last view-line\n            const lineCount = ctx.viewModel.getLineCount();\n            const maxLineColumn = ctx.viewModel.getLineMaxColumn(lineCount);\n            return request.fulfillContentEmpty(new Position(lineCount, maxLineColumn), EMPTY_CONTENT_AFTER_LINES);\n        }\n        if (domHitTestExecuted) {\n            // Check if we are hitting a view-line (can happen in the case of inline decorations on empty lines)\n            // See https://github.com/microsoft/vscode/issues/46942\n            if (ElementPath.isStrictChildOfViewLines(request.targetPath)) {\n                const lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n                if (ctx.viewModel.getLineLength(lineNumber) === 0) {\n                    const lineWidth = ctx.getLineWidth(lineNumber);\n                    const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n                    return request.fulfillContentEmpty(new Position(lineNumber, 1), detail);\n                }\n                const lineWidth = ctx.getLineWidth(lineNumber);\n                if (request.mouseContentHorizontalOffset >= lineWidth) {\n                    const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n                    const pos = new Position(lineNumber, ctx.viewModel.getLineMaxColumn(lineNumber));\n                    return request.fulfillContentEmpty(pos, detail);\n                }\n            }\n            // We have already executed hit test...\n            return request.fulfillUnknown();\n        }\n        const hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n        if (hitTestResult.type === 1 /* HitTestResultType.Content */) {\n            return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.spanNode, hitTestResult.position, hitTestResult.injectedText);\n        }\n        return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n    }\n    static _hitTestMinimap(ctx, request) {\n        if (ElementPath.isChildOfMinimap(request.targetPath)) {\n            const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n            const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n            return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n        }\n        return null;\n    }\n    static _hitTestScrollbarSlider(ctx, request) {\n        if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n            if (request.target && request.target.nodeType === 1) {\n                const className = request.target.className;\n                if (className && /\\b(slider|scrollbar)\\b/.test(className)) {\n                    const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n                    const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n                    return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n                }\n            }\n        }\n        return null;\n    }\n    static _hitTestScrollbar(ctx, request) {\n        // Is it the overview ruler?\n        // Is it a child of the scrollable element?\n        if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n            const possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n            const maxColumn = ctx.viewModel.getLineMaxColumn(possibleLineNumber);\n            return request.fulfillScrollbar(new Position(possibleLineNumber, maxColumn));\n        }\n        return null;\n    }\n    getMouseColumn(relativePos) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        const mouseContentHorizontalOffset = this._context.viewLayout.getCurrentScrollLeft() + relativePos.x - layoutInfo.contentLeft;\n        return MouseTargetFactory._getMouseColumn(mouseContentHorizontalOffset, options.get(46 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth);\n    }\n    static _getMouseColumn(mouseContentHorizontalOffset, typicalHalfwidthCharacterWidth) {\n        if (mouseContentHorizontalOffset < 0) {\n            return 1;\n        }\n        const chars = Math.round(mouseContentHorizontalOffset / typicalHalfwidthCharacterWidth);\n        return (chars + 1);\n    }\n    static createMouseTargetFromHitTestPosition(ctx, request, spanNode, pos, injectedText) {\n        const lineNumber = pos.lineNumber;\n        const column = pos.column;\n        const lineWidth = ctx.getLineWidth(lineNumber);\n        if (request.mouseContentHorizontalOffset > lineWidth) {\n            const detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n            return request.fulfillContentEmpty(pos, detail);\n        }\n        const visibleRange = ctx.visibleRangeForPosition(lineNumber, column);\n        if (!visibleRange) {\n            return request.fulfillUnknown(pos);\n        }\n        const columnHorizontalOffset = visibleRange.left;\n        if (request.mouseContentHorizontalOffset === columnHorizontalOffset) {\n            return request.fulfillContentText(pos, null, { mightBeForeignElement: !!injectedText, injectedText });\n        }\n        const points = [];\n        points.push({ offset: visibleRange.left, column: column });\n        if (column > 1) {\n            const visibleRange = ctx.visibleRangeForPosition(lineNumber, column - 1);\n            if (visibleRange) {\n                points.push({ offset: visibleRange.left, column: column - 1 });\n            }\n        }\n        const lineMaxColumn = ctx.viewModel.getLineMaxColumn(lineNumber);\n        if (column < lineMaxColumn) {\n            const visibleRange = ctx.visibleRangeForPosition(lineNumber, column + 1);\n            if (visibleRange) {\n                points.push({ offset: visibleRange.left, column: column + 1 });\n            }\n        }\n        points.sort((a, b) => a.offset - b.offset);\n        const mouseCoordinates = request.pos.toClientCoordinates();\n        const spanNodeClientRect = spanNode.getBoundingClientRect();\n        const mouseIsOverSpanNode = (spanNodeClientRect.left <= mouseCoordinates.clientX && mouseCoordinates.clientX <= spanNodeClientRect.right);\n        for (let i = 1; i < points.length; i++) {\n            const prev = points[i - 1];\n            const curr = points[i];\n            if (prev.offset <= request.mouseContentHorizontalOffset && request.mouseContentHorizontalOffset <= curr.offset) {\n                const rng = new EditorRange(lineNumber, prev.column, lineNumber, curr.column);\n                // See https://github.com/microsoft/vscode/issues/152819\n                // Due to the use of zwj, the browser's hit test result is skewed towards the left\n                // Here we try to correct that if the mouse horizontal offset is closer to the right than the left\n                const prevDelta = Math.abs(prev.offset - request.mouseContentHorizontalOffset);\n                const nextDelta = Math.abs(curr.offset - request.mouseContentHorizontalOffset);\n                const resultPos = (prevDelta < nextDelta\n                    ? new Position(lineNumber, prev.column)\n                    : new Position(lineNumber, curr.column));\n                return request.fulfillContentText(resultPos, rng, { mightBeForeignElement: !mouseIsOverSpanNode || !!injectedText, injectedText });\n            }\n        }\n        return request.fulfillContentText(pos, null, { mightBeForeignElement: !mouseIsOverSpanNode || !!injectedText, injectedText });\n    }\n    /**\n     * Most probably WebKit browsers and Edge\n     */\n    static _doHitTestWithCaretRangeFromPoint(ctx, request) {\n        // In Chrome, especially on Linux it is possible to click between lines,\n        // so try to adjust the `hity` below so that it lands in the center of a line\n        const lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n        const lineVerticalOffset = ctx.getVerticalOffsetForLineNumber(lineNumber);\n        const lineCenteredVerticalOffset = lineVerticalOffset + Math.floor(ctx.lineHeight / 2);\n        let adjustedPageY = request.pos.y + (lineCenteredVerticalOffset - request.mouseVerticalOffset);\n        if (adjustedPageY <= request.editorPos.y) {\n            adjustedPageY = request.editorPos.y + 1;\n        }\n        if (adjustedPageY >= request.editorPos.y + request.editorPos.height) {\n            adjustedPageY = request.editorPos.y + request.editorPos.height - 1;\n        }\n        const adjustedPage = new PageCoordinates(request.pos.x, adjustedPageY);\n        const r = this._actualDoHitTestWithCaretRangeFromPoint(ctx, adjustedPage.toClientCoordinates());\n        if (r.type === 1 /* HitTestResultType.Content */) {\n            return r;\n        }\n        // Also try to hit test without the adjustment (for the edge cases that we are near the top or bottom)\n        return this._actualDoHitTestWithCaretRangeFromPoint(ctx, request.pos.toClientCoordinates());\n    }\n    static _actualDoHitTestWithCaretRangeFromPoint(ctx, coords) {\n        const shadowRoot = dom.getShadowRoot(ctx.viewDomNode);\n        let range;\n        if (shadowRoot) {\n            if (typeof shadowRoot.caretRangeFromPoint === 'undefined') {\n                range = shadowCaretRangeFromPoint(shadowRoot, coords.clientX, coords.clientY);\n            }\n            else {\n                range = shadowRoot.caretRangeFromPoint(coords.clientX, coords.clientY);\n            }\n        }\n        else {\n            range = document.caretRangeFromPoint(coords.clientX, coords.clientY);\n        }\n        if (!range || !range.startContainer) {\n            return new UnknownHitTestResult();\n        }\n        // Chrome always hits a TEXT_NODE, while Edge sometimes hits a token span\n        const startContainer = range.startContainer;\n        if (startContainer.nodeType === startContainer.TEXT_NODE) {\n            // startContainer is expected to be the token text\n            const parent1 = startContainer.parentNode; // expected to be the token span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n            const parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n            const parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n            if (parent3ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, parent1, range.startOffset);\n            }\n            else {\n                return new UnknownHitTestResult(startContainer.parentNode);\n            }\n        }\n        else if (startContainer.nodeType === startContainer.ELEMENT_NODE) {\n            // startContainer is expected to be the token span\n            const parent1 = startContainer.parentNode; // expected to be the view line container span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line div\n            const parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n            if (parent2ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, startContainer, startContainer.textContent.length);\n            }\n            else {\n                return new UnknownHitTestResult(startContainer);\n            }\n        }\n        return new UnknownHitTestResult();\n    }\n    /**\n     * Most probably Gecko\n     */\n    static _doHitTestWithCaretPositionFromPoint(ctx, coords) {\n        const hitResult = document.caretPositionFromPoint(coords.clientX, coords.clientY);\n        if (hitResult.offsetNode.nodeType === hitResult.offsetNode.TEXT_NODE) {\n            // offsetNode is expected to be the token text\n            const parent1 = hitResult.offsetNode.parentNode; // expected to be the token span\n            const parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n            const parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n            const parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n            if (parent3ClassName === ViewLine.CLASS_NAME) {\n                return HitTestResult.createFromDOMInfo(ctx, hitResult.offsetNode.parentNode, hitResult.offset);\n            }\n            else {\n                return new UnknownHitTestResult(hitResult.offsetNode.parentNode);\n            }\n        }\n        // For inline decorations, Gecko sometimes returns the `<span>` of the line and the offset is the `<span>` with the inline decoration\n        // Some other times, it returns the `<span>` with the inline decoration\n        if (hitResult.offsetNode.nodeType === hitResult.offsetNode.ELEMENT_NODE) {\n            const parent1 = hitResult.offsetNode.parentNode;\n            const parent1ClassName = parent1 && parent1.nodeType === parent1.ELEMENT_NODE ? parent1.className : null;\n            const parent2 = parent1 ? parent1.parentNode : null;\n            const parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n            if (parent1ClassName === ViewLine.CLASS_NAME) {\n                // it returned the `<span>` of the line and the offset is the `<span>` with the inline decoration\n                const tokenSpan = hitResult.offsetNode.childNodes[Math.min(hitResult.offset, hitResult.offsetNode.childNodes.length - 1)];\n                if (tokenSpan) {\n                    return HitTestResult.createFromDOMInfo(ctx, tokenSpan, 0);\n                }\n            }\n            else if (parent2ClassName === ViewLine.CLASS_NAME) {\n                // it returned the `<span>` with the inline decoration\n                return HitTestResult.createFromDOMInfo(ctx, hitResult.offsetNode, 0);\n            }\n        }\n        return new UnknownHitTestResult(hitResult.offsetNode);\n    }\n    static _snapToSoftTabBoundary(position, viewModel) {\n        const lineContent = viewModel.getLineContent(position.lineNumber);\n        const { tabSize } = viewModel.model.getOptions();\n        const newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, position.column - 1, tabSize, 2 /* Direction.Nearest */);\n        if (newPosition !== -1) {\n            return new Position(position.lineNumber, newPosition + 1);\n        }\n        return position;\n    }\n    static _doHitTest(ctx, request) {\n        let result = new UnknownHitTestResult();\n        if (typeof document.caretRangeFromPoint === 'function') {\n            result = this._doHitTestWithCaretRangeFromPoint(ctx, request);\n        }\n        else if (document.caretPositionFromPoint) {\n            result = this._doHitTestWithCaretPositionFromPoint(ctx, request.pos.toClientCoordinates());\n        }\n        if (result.type === 1 /* HitTestResultType.Content */) {\n            const injectedText = ctx.viewModel.getInjectedTextAt(result.position);\n            const normalizedPosition = ctx.viewModel.normalizePosition(result.position, 2 /* PositionAffinity.None */);\n            if (injectedText || !normalizedPosition.equals(result.position)) {\n                result = new ContentHitTestResult(normalizedPosition, result.spanNode, injectedText);\n            }\n        }\n        // Snap to the nearest soft tab boundary if atomic soft tabs are enabled.\n        if (result.type === 1 /* HitTestResultType.Content */ && ctx.stickyTabStops) {\n            result = new ContentHitTestResult(this._snapToSoftTabBoundary(result.position, ctx.viewModel), result.spanNode, result.injectedText);\n        }\n        return result;\n    }\n}\nexport function shadowCaretRangeFromPoint(shadowRoot, x, y) {\n    const range = document.createRange();\n    // Get the element under the point\n    let el = shadowRoot.elementFromPoint(x, y);\n    if (el !== null) {\n        // Get the last child of the element until its firstChild is a text node\n        // This assumes that the pointer is on the right of the line, out of the tokens\n        // and that we want to get the offset of the last token of the line\n        while (el && el.firstChild && el.firstChild.nodeType !== el.firstChild.TEXT_NODE && el.lastChild && el.lastChild.firstChild) {\n            el = el.lastChild;\n        }\n        // Grab its rect\n        const rect = el.getBoundingClientRect();\n        // And its font\n        const font = window.getComputedStyle(el, null).getPropertyValue('font');\n        // And also its txt content\n        const text = el.innerText;\n        // Position the pixel cursor at the left of the element\n        let pixelCursor = rect.left;\n        let offset = 0;\n        let step;\n        // If the point is on the right of the box put the cursor after the last character\n        if (x > rect.left + rect.width) {\n            offset = text.length;\n        }\n        else {\n            const charWidthReader = CharWidthReader.getInstance();\n            // Goes through all the characters of the innerText, and checks if the x of the point\n            // belongs to the character.\n            for (let i = 0; i < text.length + 1; i++) {\n                // The step is half the width of the character\n                step = charWidthReader.getCharWidth(text.charAt(i), font) / 2;\n                // Move to the center of the character\n                pixelCursor += step;\n                // If the x of the point is smaller that the position of the cursor, the point is over that character\n                if (x < pixelCursor) {\n                    offset = i;\n                    break;\n                }\n                // Move between the current character and the next\n                pixelCursor += step;\n            }\n        }\n        // Creates a range with the text node of the element and set the offset found\n        range.setStart(el.firstChild, offset);\n        range.setEnd(el.firstChild, offset);\n    }\n    return range;\n}\nclass CharWidthReader {\n    constructor() {\n        this._cache = {};\n        this._canvas = document.createElement('canvas');\n    }\n    static getInstance() {\n        if (!CharWidthReader._INSTANCE) {\n            CharWidthReader._INSTANCE = new CharWidthReader();\n        }\n        return CharWidthReader._INSTANCE;\n    }\n    getCharWidth(char, font) {\n        const cacheKey = char + font;\n        if (this._cache[cacheKey]) {\n            return this._cache[cacheKey];\n        }\n        const context = this._canvas.getContext('2d');\n        context.font = font;\n        const metrics = context.measureText(char);\n        const width = metrics.width;\n        this._cache[cacheKey] = width;\n        return width;\n    }\n}\nCharWidthReader._INSTANCE = null;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { StandardWheelEvent } from '../../../base/browser/mouseEvent.js';\nimport { TimeoutTimer } from '../../../base/common/async.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { HitTestContext, MouseTarget, MouseTargetFactory } from './mouseTarget.js';\nimport { ClientCoordinates, EditorMouseEvent, EditorMouseEventFactory, GlobalEditorPointerMoveMonitor, createEditorPagePosition, createCoordinatesRelativeToEditor } from '../editorDom.js';\nimport { EditorZoom } from '../../common/config/editorZoom.js';\nimport { Position } from '../../common/core/position.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { ViewEventHandler } from '../../common/viewEventHandler.js';\nexport class MouseHandler extends ViewEventHandler {\n    constructor(context, viewController, viewHelper) {\n        super();\n        this._mouseLeaveMonitor = null;\n        this._context = context;\n        this.viewController = viewController;\n        this.viewHelper = viewHelper;\n        this.mouseTargetFactory = new MouseTargetFactory(this._context, viewHelper);\n        this._mouseDownOperation = this._register(new MouseDownOperation(this._context, this.viewController, this.viewHelper, (e, testEventTarget) => this._createMouseTarget(e, testEventTarget), (e) => this._getMouseColumn(e)));\n        this.lastMouseLeaveTime = -1;\n        this._height = this._context.configuration.options.get(133 /* EditorOption.layoutInfo */).height;\n        const mouseEvents = new EditorMouseEventFactory(this.viewHelper.viewDomNode);\n        this._register(mouseEvents.onContextMenu(this.viewHelper.viewDomNode, (e) => this._onContextMenu(e, true)));\n        this._register(mouseEvents.onMouseMove(this.viewHelper.viewDomNode, (e) => {\n            this._onMouseMove(e);\n            // See https://github.com/microsoft/vscode/issues/138789\n            // When moving the mouse really quickly, the browser sometimes forgets to\n            // send us a `mouseleave` or `mouseout` event. We therefore install here\n            // a global `mousemove` listener to manually recover if the mouse goes outside\n            // the editor. As soon as the mouse leaves outside of the editor, we\n            // remove this listener\n            if (!this._mouseLeaveMonitor) {\n                this._mouseLeaveMonitor = dom.addDisposableListener(document, 'mousemove', (e) => {\n                    if (!this.viewHelper.viewDomNode.contains(e.target)) {\n                        // went outside the editor!\n                        this._onMouseLeave(new EditorMouseEvent(e, false, this.viewHelper.viewDomNode));\n                    }\n                });\n            }\n        }));\n        this._register(mouseEvents.onMouseUp(this.viewHelper.viewDomNode, (e) => this._onMouseUp(e)));\n        this._register(mouseEvents.onMouseLeave(this.viewHelper.viewDomNode, (e) => this._onMouseLeave(e)));\n        // `pointerdown` events can't be used to determine if there's a double click, or triple click\n        // because their `e.detail` is always 0.\n        // We will therefore save the pointer id for the mouse and then reuse it in the `mousedown` event\n        // for `element.setPointerCapture`.\n        let capturePointerId = 0;\n        this._register(mouseEvents.onPointerDown(this.viewHelper.viewDomNode, (e, pointerId) => {\n            capturePointerId = pointerId;\n        }));\n        // The `pointerup` listener registered by `GlobalEditorPointerMoveMonitor` does not get invoked 100% of the times.\n        // I speculate that this is because the `pointerup` listener is only registered during the `mousedown` event, and perhaps\n        // the `pointerup` event is already queued for dispatching, which makes it that the new listener doesn't get fired.\n        // See https://github.com/microsoft/vscode/issues/146486 for repro steps.\n        // To compensate for that, we simply register here a `pointerup` listener and just communicate it.\n        this._register(dom.addDisposableListener(this.viewHelper.viewDomNode, dom.EventType.POINTER_UP, (e) => {\n            this._mouseDownOperation.onPointerUp();\n        }));\n        this._register(mouseEvents.onMouseDown(this.viewHelper.viewDomNode, (e) => this._onMouseDown(e, capturePointerId)));\n        const onMouseWheel = (browserEvent) => {\n            this.viewController.emitMouseWheel(browserEvent);\n            if (!this._context.configuration.options.get(70 /* EditorOption.mouseWheelZoom */)) {\n                return;\n            }\n            const e = new StandardWheelEvent(browserEvent);\n            const doMouseWheelZoom = (platform.isMacintosh\n                // on macOS we support cmd + two fingers scroll (`metaKey` set)\n                // and also the two fingers pinch gesture (`ctrKey` set)\n                ? ((browserEvent.metaKey || browserEvent.ctrlKey) && !browserEvent.shiftKey && !browserEvent.altKey)\n                : (browserEvent.ctrlKey && !browserEvent.metaKey && !browserEvent.shiftKey && !browserEvent.altKey));\n            if (doMouseWheelZoom) {\n                const zoomLevel = EditorZoom.getZoomLevel();\n                const delta = e.deltaY > 0 ? 1 : -1;\n                EditorZoom.setZoomLevel(zoomLevel + delta);\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        };\n        this._register(dom.addDisposableListener(this.viewHelper.viewDomNode, dom.EventType.MOUSE_WHEEL, onMouseWheel, { capture: true, passive: false }));\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        if (this._mouseLeaveMonitor) {\n            this._mouseLeaveMonitor.dispose();\n            this._mouseLeaveMonitor = null;\n        }\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(133 /* EditorOption.layoutInfo */)) {\n            // layout change\n            const height = this._context.configuration.options.get(133 /* EditorOption.layoutInfo */).height;\n            if (this._height !== height) {\n                this._height = height;\n                this._mouseDownOperation.onHeightChanged();\n            }\n        }\n        return false;\n    }\n    onCursorStateChanged(e) {\n        this._mouseDownOperation.onCursorStateChanged(e);\n        return false;\n    }\n    onFocusChanged(e) {\n        return false;\n    }\n    onScrollChanged(e) {\n        this._mouseDownOperation.onScrollChanged();\n        return false;\n    }\n    // --- end event handlers\n    getTargetAtClientPoint(clientX, clientY) {\n        const clientPos = new ClientCoordinates(clientX, clientY);\n        const pos = clientPos.toPageCoordinates();\n        const editorPos = createEditorPagePosition(this.viewHelper.viewDomNode);\n        if (pos.y < editorPos.y || pos.y > editorPos.y + editorPos.height || pos.x < editorPos.x || pos.x > editorPos.x + editorPos.width) {\n            return null;\n        }\n        const relativePos = createCoordinatesRelativeToEditor(this.viewHelper.viewDomNode, editorPos, pos);\n        return this.mouseTargetFactory.createMouseTarget(this.viewHelper.getLastRenderData(), editorPos, pos, relativePos, null);\n    }\n    _createMouseTarget(e, testEventTarget) {\n        let target = e.target;\n        if (!this.viewHelper.viewDomNode.contains(target)) {\n            const shadowRoot = dom.getShadowRoot(this.viewHelper.viewDomNode);\n            if (shadowRoot) {\n                target = shadowRoot.elementsFromPoint(e.posx, e.posy).find((el) => this.viewHelper.viewDomNode.contains(el));\n            }\n        }\n        return this.mouseTargetFactory.createMouseTarget(this.viewHelper.getLastRenderData(), e.editorPos, e.pos, e.relativePos, testEventTarget ? target : null);\n    }\n    _getMouseColumn(e) {\n        return this.mouseTargetFactory.getMouseColumn(e.relativePos);\n    }\n    _onContextMenu(e, testEventTarget) {\n        this.viewController.emitContextMenu({\n            event: e,\n            target: this._createMouseTarget(e, testEventTarget)\n        });\n    }\n    _onMouseMove(e) {\n        const targetIsWidget = this.mouseTargetFactory.mouseTargetIsWidget(e);\n        if (!targetIsWidget) {\n            e.preventDefault();\n        }\n        if (this._mouseDownOperation.isActive()) {\n            // In selection/drag operation\n            return;\n        }\n        const actualMouseMoveTime = e.timestamp;\n        if (actualMouseMoveTime < this.lastMouseLeaveTime) {\n            // Due to throttling, this event occurred before the mouse left the editor, therefore ignore it.\n            return;\n        }\n        this.viewController.emitMouseMove({\n            event: e,\n            target: this._createMouseTarget(e, true)\n        });\n    }\n    _onMouseLeave(e) {\n        if (this._mouseLeaveMonitor) {\n            this._mouseLeaveMonitor.dispose();\n            this._mouseLeaveMonitor = null;\n        }\n        this.lastMouseLeaveTime = (new Date()).getTime();\n        this.viewController.emitMouseLeave({\n            event: e,\n            target: null\n        });\n    }\n    _onMouseUp(e) {\n        this.viewController.emitMouseUp({\n            event: e,\n            target: this._createMouseTarget(e, true)\n        });\n    }\n    _onMouseDown(e, pointerId) {\n        const t = this._createMouseTarget(e, true);\n        const targetIsContent = (t.type === 6 /* MouseTargetType.CONTENT_TEXT */ || t.type === 7 /* MouseTargetType.CONTENT_EMPTY */);\n        const targetIsGutter = (t.type === 2 /* MouseTargetType.GUTTER_GLYPH_MARGIN */ || t.type === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */ || t.type === 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */);\n        const targetIsLineNumbers = (t.type === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */);\n        const selectOnLineNumbers = this._context.configuration.options.get(100 /* EditorOption.selectOnLineNumbers */);\n        const targetIsViewZone = (t.type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */ || t.type === 5 /* MouseTargetType.GUTTER_VIEW_ZONE */);\n        const targetIsWidget = (t.type === 9 /* MouseTargetType.CONTENT_WIDGET */);\n        let shouldHandle = e.leftButton || e.middleButton;\n        if (platform.isMacintosh && e.leftButton && e.ctrlKey) {\n            shouldHandle = false;\n        }\n        const focus = () => {\n            e.preventDefault();\n            this.viewHelper.focusTextArea();\n        };\n        if (shouldHandle && (targetIsContent || (targetIsLineNumbers && selectOnLineNumbers))) {\n            focus();\n            this._mouseDownOperation.start(t.type, e, pointerId);\n        }\n        else if (targetIsGutter) {\n            // Do not steal focus\n            e.preventDefault();\n        }\n        else if (targetIsViewZone) {\n            const viewZoneData = t.detail;\n            if (shouldHandle && this.viewHelper.shouldSuppressMouseDownOnViewZone(viewZoneData.viewZoneId)) {\n                focus();\n                this._mouseDownOperation.start(t.type, e, pointerId);\n                e.preventDefault();\n            }\n        }\n        else if (targetIsWidget && this.viewHelper.shouldSuppressMouseDownOnWidget(t.detail)) {\n            focus();\n            e.preventDefault();\n        }\n        this.viewController.emitMouseDown({\n            event: e,\n            target: t\n        });\n    }\n}\nclass MouseDownOperation extends Disposable {\n    constructor(context, viewController, viewHelper, createMouseTarget, getMouseColumn) {\n        super();\n        this._context = context;\n        this._viewController = viewController;\n        this._viewHelper = viewHelper;\n        this._createMouseTarget = createMouseTarget;\n        this._getMouseColumn = getMouseColumn;\n        this._mouseMoveMonitor = this._register(new GlobalEditorPointerMoveMonitor(this._viewHelper.viewDomNode));\n        this._onScrollTimeout = this._register(new TimeoutTimer());\n        this._mouseState = new MouseDownState();\n        this._currentSelection = new Selection(1, 1, 1, 1);\n        this._isActive = false;\n        this._lastMouseEvent = null;\n    }\n    dispose() {\n        super.dispose();\n    }\n    isActive() {\n        return this._isActive;\n    }\n    _onMouseDownThenMove(e) {\n        this._lastMouseEvent = e;\n        this._mouseState.setModifiers(e);\n        const position = this._findMousePosition(e, false);\n        if (!position) {\n            // Ignoring because position is unknown\n            return;\n        }\n        if (this._mouseState.isDragAndDrop) {\n            this._viewController.emitMouseDrag({\n                event: e,\n                target: position\n            });\n        }\n        else {\n            this._dispatchMouse(position, true);\n        }\n    }\n    start(targetType, e, pointerId) {\n        this._lastMouseEvent = e;\n        this._mouseState.setStartedOnLineNumbers(targetType === 3 /* MouseTargetType.GUTTER_LINE_NUMBERS */);\n        this._mouseState.setStartButtons(e);\n        this._mouseState.setModifiers(e);\n        const position = this._findMousePosition(e, true);\n        if (!position || !position.position) {\n            // Ignoring because position is unknown\n            return;\n        }\n        this._mouseState.trySetCount(e.detail, position.position);\n        // Overwrite the detail of the MouseEvent, as it will be sent out in an event and contributions might rely on it.\n        e.detail = this._mouseState.count;\n        const options = this._context.configuration.options;\n        if (!options.get(83 /* EditorOption.readOnly */)\n            && options.get(31 /* EditorOption.dragAndDrop */)\n            && !options.get(18 /* EditorOption.columnSelection */)\n            && !this._mouseState.altKey // we don't support multiple mouse\n            && e.detail < 2 // only single click on a selection can work\n            && !this._isActive // the mouse is not down yet\n            && !this._currentSelection.isEmpty() // we don't drag single cursor\n            && (position.type === 6 /* MouseTargetType.CONTENT_TEXT */) // single click on text\n            && position.position && this._currentSelection.containsPosition(position.position) // single click on a selection\n        ) {\n            this._mouseState.isDragAndDrop = true;\n            this._isActive = true;\n            this._mouseMoveMonitor.startMonitoring(this._viewHelper.viewLinesDomNode, pointerId, e.buttons, (e) => this._onMouseDownThenMove(e), (browserEvent) => {\n                const position = this._findMousePosition(this._lastMouseEvent, false);\n                if (browserEvent && browserEvent instanceof KeyboardEvent) {\n                    // cancel\n                    this._viewController.emitMouseDropCanceled();\n                }\n                else {\n                    this._viewController.emitMouseDrop({\n                        event: this._lastMouseEvent,\n                        target: (position ? this._createMouseTarget(this._lastMouseEvent, true) : null) // Ignoring because position is unknown, e.g., Content View Zone\n                    });\n                }\n                this._stop();\n            });\n            return;\n        }\n        this._mouseState.isDragAndDrop = false;\n        this._dispatchMouse(position, e.shiftKey);\n        if (!this._isActive) {\n            this._isActive = true;\n            this._mouseMoveMonitor.startMonitoring(this._viewHelper.viewLinesDomNode, pointerId, e.buttons, (e) => this._onMouseDownThenMove(e), () => this._stop());\n        }\n    }\n    _stop() {\n        this._isActive = false;\n        this._onScrollTimeout.cancel();\n    }\n    onHeightChanged() {\n        this._mouseMoveMonitor.stopMonitoring();\n    }\n    onPointerUp() {\n        this._mouseMoveMonitor.stopMonitoring();\n    }\n    onScrollChanged() {\n        if (!this._isActive) {\n            return;\n        }\n        this._onScrollTimeout.setIfNotSet(() => {\n            if (!this._lastMouseEvent) {\n                return;\n            }\n            const position = this._findMousePosition(this._lastMouseEvent, false);\n            if (!position) {\n                // Ignoring because position is unknown\n                return;\n            }\n            if (this._mouseState.isDragAndDrop) {\n                // Ignoring because users are dragging the text\n                return;\n            }\n            this._dispatchMouse(position, true);\n        }, 10);\n    }\n    onCursorStateChanged(e) {\n        this._currentSelection = e.selections[0];\n    }\n    _getPositionOutsideEditor(e) {\n        const editorContent = e.editorPos;\n        const model = this._context.viewModel;\n        const viewLayout = this._context.viewLayout;\n        const mouseColumn = this._getMouseColumn(e);\n        if (e.posy < editorContent.y) {\n            const verticalOffset = Math.max(viewLayout.getCurrentScrollTop() - (editorContent.y - e.posy), 0);\n            const viewZoneData = HitTestContext.getZoneAtCoord(this._context, verticalOffset);\n            if (viewZoneData) {\n                const newPosition = this._helpPositionJumpOverViewZone(viewZoneData);\n                if (newPosition) {\n                    return MouseTarget.createOutsideEditor(mouseColumn, newPosition);\n                }\n            }\n            const aboveLineNumber = viewLayout.getLineNumberAtVerticalOffset(verticalOffset);\n            return MouseTarget.createOutsideEditor(mouseColumn, new Position(aboveLineNumber, 1));\n        }\n        if (e.posy > editorContent.y + editorContent.height) {\n            const verticalOffset = viewLayout.getCurrentScrollTop() + e.relativePos.y;\n            const viewZoneData = HitTestContext.getZoneAtCoord(this._context, verticalOffset);\n            if (viewZoneData) {\n                const newPosition = this._helpPositionJumpOverViewZone(viewZoneData);\n                if (newPosition) {\n                    return MouseTarget.createOutsideEditor(mouseColumn, newPosition);\n                }\n            }\n            const belowLineNumber = viewLayout.getLineNumberAtVerticalOffset(verticalOffset);\n            return MouseTarget.createOutsideEditor(mouseColumn, new Position(belowLineNumber, model.getLineMaxColumn(belowLineNumber)));\n        }\n        const possibleLineNumber = viewLayout.getLineNumberAtVerticalOffset(viewLayout.getCurrentScrollTop() + e.relativePos.y);\n        if (e.posx < editorContent.x) {\n            return MouseTarget.createOutsideEditor(mouseColumn, new Position(possibleLineNumber, 1));\n        }\n        if (e.posx > editorContent.x + editorContent.width) {\n            return MouseTarget.createOutsideEditor(mouseColumn, new Position(possibleLineNumber, model.getLineMaxColumn(possibleLineNumber)));\n        }\n        return null;\n    }\n    _findMousePosition(e, testEventTarget) {\n        const positionOutsideEditor = this._getPositionOutsideEditor(e);\n        if (positionOutsideEditor) {\n            return positionOutsideEditor;\n        }\n        const t = this._createMouseTarget(e, testEventTarget);\n        const hintedPosition = t.position;\n        if (!hintedPosition) {\n            return null;\n        }\n        if (t.type === 8 /* MouseTargetType.CONTENT_VIEW_ZONE */ || t.type === 5 /* MouseTargetType.GUTTER_VIEW_ZONE */) {\n            const newPosition = this._helpPositionJumpOverViewZone(t.detail);\n            if (newPosition) {\n                return MouseTarget.createViewZone(t.type, t.element, t.mouseColumn, newPosition, t.detail);\n            }\n        }\n        return t;\n    }\n    _helpPositionJumpOverViewZone(viewZoneData) {\n        // Force position on view zones to go above or below depending on where selection started from\n        const selectionStart = new Position(this._currentSelection.selectionStartLineNumber, this._currentSelection.selectionStartColumn);\n        const positionBefore = viewZoneData.positionBefore;\n        const positionAfter = viewZoneData.positionAfter;\n        if (positionBefore && positionAfter) {\n            if (positionBefore.isBefore(selectionStart)) {\n                return positionBefore;\n            }\n            else {\n                return positionAfter;\n            }\n        }\n        return null;\n    }\n    _dispatchMouse(position, inSelectionMode) {\n        if (!position.position) {\n            return;\n        }\n        this._viewController.dispatchMouse({\n            position: position.position,\n            mouseColumn: position.mouseColumn,\n            startedOnLineNumbers: this._mouseState.startedOnLineNumbers,\n            inSelectionMode: inSelectionMode,\n            mouseDownCount: this._mouseState.count,\n            altKey: this._mouseState.altKey,\n            ctrlKey: this._mouseState.ctrlKey,\n            metaKey: this._mouseState.metaKey,\n            shiftKey: this._mouseState.shiftKey,\n            leftButton: this._mouseState.leftButton,\n            middleButton: this._mouseState.middleButton,\n            onInjectedText: position.type === 6 /* MouseTargetType.CONTENT_TEXT */ && position.detail.injectedText !== null\n        });\n    }\n}\nclass MouseDownState {\n    constructor() {\n        this._altKey = false;\n        this._ctrlKey = false;\n        this._metaKey = false;\n        this._shiftKey = false;\n        this._leftButton = false;\n        this._middleButton = false;\n        this._startedOnLineNumbers = false;\n        this._lastMouseDownPosition = null;\n        this._lastMouseDownPositionEqualCount = 0;\n        this._lastMouseDownCount = 0;\n        this._lastSetMouseDownCountTime = 0;\n        this.isDragAndDrop = false;\n    }\n    get altKey() { return this._altKey; }\n    get ctrlKey() { return this._ctrlKey; }\n    get metaKey() { return this._metaKey; }\n    get shiftKey() { return this._shiftKey; }\n    get leftButton() { return this._leftButton; }\n    get middleButton() { return this._middleButton; }\n    get startedOnLineNumbers() { return this._startedOnLineNumbers; }\n    get count() {\n        return this._lastMouseDownCount;\n    }\n    setModifiers(source) {\n        this._altKey = source.altKey;\n        this._ctrlKey = source.ctrlKey;\n        this._metaKey = source.metaKey;\n        this._shiftKey = source.shiftKey;\n    }\n    setStartButtons(source) {\n        this._leftButton = source.leftButton;\n        this._middleButton = source.middleButton;\n    }\n    setStartedOnLineNumbers(startedOnLineNumbers) {\n        this._startedOnLineNumbers = startedOnLineNumbers;\n    }\n    trySetCount(setMouseDownCount, newMouseDownPosition) {\n        // a. Invalidate multiple clicking if too much time has passed (will be hit by IE because the detail field of mouse events contains garbage in IE10)\n        const currentTime = (new Date()).getTime();\n        if (currentTime - this._lastSetMouseDownCountTime > MouseDownState.CLEAR_MOUSE_DOWN_COUNT_TIME) {\n            setMouseDownCount = 1;\n        }\n        this._lastSetMouseDownCountTime = currentTime;\n        // b. Ensure that we don't jump from single click to triple click in one go (will be hit by IE because the detail field of mouse events contains garbage in IE10)\n        if (setMouseDownCount > this._lastMouseDownCount + 1) {\n            setMouseDownCount = this._lastMouseDownCount + 1;\n        }\n        // c. Invalidate multiple clicking if the logical position is different\n        if (this._lastMouseDownPosition && this._lastMouseDownPosition.equals(newMouseDownPosition)) {\n            this._lastMouseDownPositionEqualCount++;\n        }\n        else {\n            this._lastMouseDownPositionEqualCount = 1;\n        }\n        this._lastMouseDownPosition = newMouseDownPosition;\n        // Finally set the lastMouseDownCount\n        this._lastMouseDownCount = Math.min(setMouseDownCount, this._lastMouseDownPositionEqualCount);\n    }\n}\nMouseDownState.CLEAR_MOUSE_DOWN_COUNT_TIME = 400; // ms\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { EventType, Gesture } from '../../../base/browser/touch.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { MouseHandler } from './mouseHandler.js';\nimport { EditorMouseEvent, EditorPointerEventFactory } from '../editorDom.js';\nimport { BrowserFeatures } from '../../../base/browser/canIUse.js';\nimport { TextAreaSyntethicEvents } from './textAreaInput.js';\n/**\n * Currently only tested on iOS 13/ iPadOS.\n */\nexport class PointerEventHandler extends MouseHandler {\n    constructor(context, viewController, viewHelper) {\n        super(context, viewController, viewHelper);\n        this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, (e) => this.onTap(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, (e) => this.onChange(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, (e) => this._onContextMenu(new EditorMouseEvent(e, false, this.viewHelper.viewDomNode), false)));\n        this._lastPointerType = 'mouse';\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, 'pointerdown', (e) => {\n            const pointerType = e.pointerType;\n            if (pointerType === 'mouse') {\n                this._lastPointerType = 'mouse';\n                return;\n            }\n            else if (pointerType === 'touch') {\n                this._lastPointerType = 'touch';\n            }\n            else {\n                this._lastPointerType = 'pen';\n            }\n        }));\n        // PonterEvents\n        const pointerEvents = new EditorPointerEventFactory(this.viewHelper.viewDomNode);\n        this._register(pointerEvents.onPointerMove(this.viewHelper.viewDomNode, (e) => this._onMouseMove(e)));\n        this._register(pointerEvents.onPointerUp(this.viewHelper.viewDomNode, (e) => this._onMouseUp(e)));\n        this._register(pointerEvents.onPointerLeave(this.viewHelper.viewDomNode, (e) => this._onMouseLeave(e)));\n        this._register(pointerEvents.onPointerDown(this.viewHelper.viewDomNode, (e, pointerId) => this._onMouseDown(e, pointerId)));\n    }\n    onTap(event) {\n        if (!event.initialTarget || !this.viewHelper.linesContentDomNode.contains(event.initialTarget)) {\n            return;\n        }\n        event.preventDefault();\n        this.viewHelper.focusTextArea();\n        const target = this._createMouseTarget(new EditorMouseEvent(event, false, this.viewHelper.viewDomNode), false);\n        if (target.position) {\n            // this.viewController.moveTo(target.position);\n            this.viewController.dispatchMouse({\n                position: target.position,\n                mouseColumn: target.position.column,\n                startedOnLineNumbers: false,\n                mouseDownCount: event.tapCount,\n                inSelectionMode: false,\n                altKey: false,\n                ctrlKey: false,\n                metaKey: false,\n                shiftKey: false,\n                leftButton: false,\n                middleButton: false,\n                onInjectedText: target.type === 6 /* MouseTargetType.CONTENT_TEXT */ && target.detail.injectedText !== null\n            });\n        }\n    }\n    onChange(e) {\n        if (this._lastPointerType === 'touch') {\n            this._context.viewModel.viewLayout.deltaScrollNow(-e.translationX, -e.translationY);\n        }\n    }\n    _onMouseDown(e, pointerId) {\n        if (e.browserEvent.pointerType === 'touch') {\n            return;\n        }\n        super._onMouseDown(e, pointerId);\n    }\n}\nclass TouchHandler extends MouseHandler {\n    constructor(context, viewController, viewHelper) {\n        super(context, viewController, viewHelper);\n        this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, (e) => this.onTap(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, (e) => this.onChange(e)));\n        this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, (e) => this._onContextMenu(new EditorMouseEvent(e, false, this.viewHelper.viewDomNode), false)));\n    }\n    onTap(event) {\n        event.preventDefault();\n        this.viewHelper.focusTextArea();\n        const target = this._createMouseTarget(new EditorMouseEvent(event, false, this.viewHelper.viewDomNode), false);\n        if (target.position) {\n            // Send the tap event also to the <textarea> (for input purposes)\n            const event = document.createEvent('CustomEvent');\n            event.initEvent(TextAreaSyntethicEvents.Tap, false, true);\n            this.viewHelper.dispatchTextAreaEvent(event);\n            this.viewController.moveTo(target.position);\n        }\n    }\n    onChange(e) {\n        this._context.viewModel.viewLayout.deltaScrollNow(-e.translationX, -e.translationY);\n    }\n}\nexport class PointerHandler extends Disposable {\n    constructor(context, viewController, viewHelper) {\n        super();\n        if ((platform.isIOS && BrowserFeatures.pointerEvents)) {\n            this.handler = this._register(new PointerEventHandler(context, viewController, viewHelper));\n        }\n        else if (window.TouchEvent) {\n            this.handler = this._register(new TouchHandler(context, viewController, viewHelper));\n        }\n        else {\n            this.handler = this._register(new MouseHandler(context, viewController, viewHelper));\n        }\n    }\n    getTargetAtClientPoint(clientX, clientY) {\n        return this.handler.getTargetAtClientPoint(clientX, clientY);\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './textAreaHandler.css';\nimport * as nls from '../../../nls.js';\nimport * as browser from '../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { CopyOptions, TextAreaInput, TextAreaWrapper } from './textAreaInput.js';\nimport { PagedScreenReaderStrategy, TextAreaState, _debugComposition } from './textAreaState.js';\nimport { PartFingerprints, ViewPart } from '../view/viewPart.js';\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\nimport { Margin } from '../viewParts/margin/margin.js';\nimport { EditorOptions } from '../../common/config/editorOptions.js';\nimport { getMapForWordSeparators } from '../../common/core/wordCharacterClassifier.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { TokenizationRegistry } from '../../common/languages.js';\nimport { Color } from '../../../base/common/color.js';\nclass VisibleTextAreaData {\n    constructor(_context, modelLineNumber, distanceToModelLineStart, widthOfHiddenLineTextBefore, distanceToModelLineEnd) {\n        this._context = _context;\n        this.modelLineNumber = modelLineNumber;\n        this.distanceToModelLineStart = distanceToModelLineStart;\n        this.widthOfHiddenLineTextBefore = widthOfHiddenLineTextBefore;\n        this.distanceToModelLineEnd = distanceToModelLineEnd;\n        this._visibleTextAreaBrand = undefined;\n        this.startPosition = null;\n        this.endPosition = null;\n        this.visibleTextareaStart = null;\n        this.visibleTextareaEnd = null;\n        /**\n         * When doing composition, the currently composed text might be split up into\n         * multiple tokens, then merged again into a single token, etc. Here we attempt\n         * to keep the presentation of the <textarea> stable by using the previous used\n         * style if multiple tokens come into play. This avoids flickering.\n         */\n        this._previousPresentation = null;\n    }\n    prepareRender(visibleRangeProvider) {\n        const startModelPosition = new Position(this.modelLineNumber, this.distanceToModelLineStart + 1);\n        const endModelPosition = new Position(this.modelLineNumber, this._context.viewModel.model.getLineMaxColumn(this.modelLineNumber) - this.distanceToModelLineEnd);\n        this.startPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(startModelPosition);\n        this.endPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(endModelPosition);\n        if (this.startPosition.lineNumber === this.endPosition.lineNumber) {\n            this.visibleTextareaStart = visibleRangeProvider.visibleRangeForPosition(this.startPosition);\n            this.visibleTextareaEnd = visibleRangeProvider.visibleRangeForPosition(this.endPosition);\n        }\n        else {\n            // TODO: what if the view positions are not on the same line?\n            this.visibleTextareaStart = null;\n            this.visibleTextareaEnd = null;\n        }\n    }\n    definePresentation(tokenPresentation) {\n        if (!this._previousPresentation) {\n            // To avoid flickering, once set, always reuse a presentation throughout the entire IME session\n            if (tokenPresentation) {\n                this._previousPresentation = tokenPresentation;\n            }\n            else {\n                this._previousPresentation = {\n                    foreground: 1 /* ColorId.DefaultForeground */,\n                    italic: false,\n                    bold: false,\n                    underline: false,\n                    strikethrough: false,\n                };\n            }\n        }\n        return this._previousPresentation;\n    }\n}\nconst canUseZeroSizeTextarea = (browser.isFirefox);\nexport class TextAreaHandler extends ViewPart {\n    constructor(context, viewController, visibleRangeProvider) {\n        super(context);\n        // --- end view API\n        this._primaryCursorPosition = new Position(1, 1);\n        this._primaryCursorVisibleRange = null;\n        this._viewController = viewController;\n        this._visibleRangeProvider = visibleRangeProvider;\n        this._scrollLeft = 0;\n        this._scrollTop = 0;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._setAccessibilityOptions(options);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentHeight = layoutInfo.height;\n        this._fontInfo = options.get(46 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._emptySelectionClipboard = options.get(33 /* EditorOption.emptySelectionClipboard */);\n        this._copyWithSyntaxHighlighting = options.get(21 /* EditorOption.copyWithSyntaxHighlighting */);\n        this._visibleTextArea = null;\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._modelSelections = [new Selection(1, 1, 1, 1)];\n        this._lastRenderPosition = null;\n        // Text Area (The focus will always be in the textarea when the cursor is blinking)\n        this.textArea = createFastDomNode(document.createElement('textarea'));\n        PartFingerprints.write(this.textArea, 6 /* PartFingerprint.TextArea */);\n        this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this.textArea.setAttribute('wrap', 'off');\n        this.textArea.setAttribute('autocorrect', 'off');\n        this.textArea.setAttribute('autocapitalize', 'off');\n        this.textArea.setAttribute('autocomplete', 'off');\n        this.textArea.setAttribute('spellcheck', 'false');\n        this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n        this.textArea.setAttribute('tabindex', String(options.get(114 /* EditorOption.tabIndex */)));\n        this.textArea.setAttribute('role', 'textbox');\n        this.textArea.setAttribute('aria-roledescription', nls.localize('editor', \"editor\"));\n        this.textArea.setAttribute('aria-multiline', 'true');\n        this.textArea.setAttribute('aria-haspopup', 'false');\n        this.textArea.setAttribute('aria-autocomplete', 'both');\n        if (options.get(30 /* EditorOption.domReadOnly */) && options.get(83 /* EditorOption.readOnly */)) {\n            this.textArea.setAttribute('readonly', 'true');\n        }\n        this.textAreaCover = createFastDomNode(document.createElement('div'));\n        this.textAreaCover.setPosition('absolute');\n        const simpleModel = {\n            getLineCount: () => {\n                return this._context.viewModel.getLineCount();\n            },\n            getLineMaxColumn: (lineNumber) => {\n                return this._context.viewModel.getLineMaxColumn(lineNumber);\n            },\n            getValueInRange: (range, eol) => {\n                return this._context.viewModel.getValueInRange(range, eol);\n            }\n        };\n        const textAreaInputHost = {\n            getDataToCopy: () => {\n                const rawTextToCopy = this._context.viewModel.getPlainTextToCopy(this._modelSelections, this._emptySelectionClipboard, platform.isWindows);\n                const newLineCharacter = this._context.viewModel.model.getEOL();\n                const isFromEmptySelection = (this._emptySelectionClipboard && this._modelSelections.length === 1 && this._modelSelections[0].isEmpty());\n                const multicursorText = (Array.isArray(rawTextToCopy) ? rawTextToCopy : null);\n                const text = (Array.isArray(rawTextToCopy) ? rawTextToCopy.join(newLineCharacter) : rawTextToCopy);\n                let html = undefined;\n                let mode = null;\n                if (CopyOptions.forceCopyWithSyntaxHighlighting || (this._copyWithSyntaxHighlighting && text.length < 65536)) {\n                    const richText = this._context.viewModel.getRichTextToCopy(this._modelSelections, this._emptySelectionClipboard);\n                    if (richText) {\n                        html = richText.html;\n                        mode = richText.mode;\n                    }\n                }\n                return {\n                    isFromEmptySelection,\n                    multicursorText,\n                    text,\n                    html,\n                    mode\n                };\n            },\n            getScreenReaderContent: (currentState) => {\n                if (this._accessibilitySupport === 1 /* AccessibilitySupport.Disabled */) {\n                    // We know for a fact that a screen reader is not attached\n                    // On OSX, we write the character before the cursor to allow for \"long-press\" composition\n                    // Also on OSX, we write the word before the cursor to allow for the Accessibility Keyboard to give good hints\n                    const selection = this._selections[0];\n                    if (platform.isMacintosh && selection.isEmpty()) {\n                        const position = selection.getStartPosition();\n                        let textBefore = this._getWordBeforePosition(position);\n                        if (textBefore.length === 0) {\n                            textBefore = this._getCharacterBeforePosition(position);\n                        }\n                        if (textBefore.length > 0) {\n                            return new TextAreaState(textBefore, textBefore.length, textBefore.length, position, position);\n                        }\n                    }\n                    // on Safari, document.execCommand('cut') and document.execCommand('copy') will just not work\n                    // if the textarea has no content selected. So if there is an editor selection, ensure something\n                    // is selected in the textarea.\n                    if (browser.isSafari && !selection.isEmpty()) {\n                        const placeholderText = 'vscode-placeholder';\n                        return new TextAreaState(placeholderText, 0, placeholderText.length, null, null);\n                    }\n                    return TextAreaState.EMPTY;\n                }\n                if (browser.isAndroid) {\n                    // when tapping in the editor on a word, Android enters composition mode.\n                    // in the `compositionstart` event we cannot clear the textarea, because\n                    // it then forgets to ever send a `compositionend`.\n                    // we therefore only write the current word in the textarea\n                    const selection = this._selections[0];\n                    if (selection.isEmpty()) {\n                        const position = selection.getStartPosition();\n                        const [wordAtPosition, positionOffsetInWord] = this._getAndroidWordAtPosition(position);\n                        if (wordAtPosition.length > 0) {\n                            return new TextAreaState(wordAtPosition, positionOffsetInWord, positionOffsetInWord, position, position);\n                        }\n                    }\n                    return TextAreaState.EMPTY;\n                }\n                return PagedScreenReaderStrategy.fromEditorSelection(currentState, simpleModel, this._selections[0], this._accessibilityPageSize, this._accessibilitySupport === 0 /* AccessibilitySupport.Unknown */);\n            },\n            deduceModelPosition: (viewAnchorPosition, deltaOffset, lineFeedCnt) => {\n                return this._context.viewModel.deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt);\n            }\n        };\n        const textAreaWrapper = this._register(new TextAreaWrapper(this.textArea.domNode));\n        this._textAreaInput = this._register(new TextAreaInput(textAreaInputHost, textAreaWrapper, platform.OS, browser));\n        this._register(this._textAreaInput.onKeyDown((e) => {\n            this._viewController.emitKeyDown(e);\n        }));\n        this._register(this._textAreaInput.onKeyUp((e) => {\n            this._viewController.emitKeyUp(e);\n        }));\n        this._register(this._textAreaInput.onPaste((e) => {\n            let pasteOnNewLine = false;\n            let multicursorText = null;\n            let mode = null;\n            if (e.metadata) {\n                pasteOnNewLine = (this._emptySelectionClipboard && !!e.metadata.isFromEmptySelection);\n                multicursorText = (typeof e.metadata.multicursorText !== 'undefined' ? e.metadata.multicursorText : null);\n                mode = e.metadata.mode;\n            }\n            this._viewController.paste(e.text, pasteOnNewLine, multicursorText, mode);\n        }));\n        this._register(this._textAreaInput.onCut(() => {\n            this._viewController.cut();\n        }));\n        this._register(this._textAreaInput.onType((e) => {\n            if (e.replacePrevCharCnt || e.replaceNextCharCnt || e.positionDelta) {\n                // must be handled through the new command\n                if (_debugComposition) {\n                    console.log(` => compositionType: <<${e.text}>>, ${e.replacePrevCharCnt}, ${e.replaceNextCharCnt}, ${e.positionDelta}`);\n                }\n                this._viewController.compositionType(e.text, e.replacePrevCharCnt, e.replaceNextCharCnt, e.positionDelta);\n            }\n            else {\n                if (_debugComposition) {\n                    console.log(` => type: <<${e.text}>>`);\n                }\n                this._viewController.type(e.text);\n            }\n        }));\n        this._register(this._textAreaInput.onSelectionChangeRequest((modelSelection) => {\n            this._viewController.setSelection(modelSelection);\n        }));\n        this._register(this._textAreaInput.onCompositionStart((e) => {\n            // The textarea might contain some content when composition starts.\n            //\n            // When we make the textarea visible, it always has a height of 1 line,\n            // so we don't need to worry too much about content on lines above or below\n            // the selection.\n            //\n            // However, the text on the current line needs to be made visible because\n            // some IME methods allow to move to other glyphs on the current line\n            // (by pressing arrow keys).\n            //\n            // (1) The textarea might contain only some parts of the current line,\n            // like the word before the selection. Also, the content inside the textarea\n            // can grow or shrink as composition occurs. We therefore anchor the textarea\n            // in terms of distance to a certain line start and line end.\n            //\n            // (2) Also, we should not make \\t characters visible, because their rendering\n            // inside the <textarea> will not align nicely with our rendering. We therefore\n            // will hide (if necessary) some of the leading text on the current line.\n            const ta = this.textArea.domNode;\n            const modelSelection = this._modelSelections[0];\n            const { distanceToModelLineStart, widthOfHiddenTextBefore } = (() => {\n                // Find the text that is on the current line before the selection\n                const textBeforeSelection = ta.value.substring(0, Math.min(ta.selectionStart, ta.selectionEnd));\n                const lineFeedOffset1 = textBeforeSelection.lastIndexOf('\\n');\n                const lineTextBeforeSelection = textBeforeSelection.substring(lineFeedOffset1 + 1);\n                // We now search to see if we should hide some part of it (if it contains \\t)\n                const tabOffset1 = lineTextBeforeSelection.lastIndexOf('\\t');\n                const desiredVisibleBeforeCharCount = lineTextBeforeSelection.length - tabOffset1 - 1;\n                const startModelPosition = modelSelection.getStartPosition();\n                const visibleBeforeCharCount = Math.min(startModelPosition.column - 1, desiredVisibleBeforeCharCount);\n                const distanceToModelLineStart = startModelPosition.column - 1 - visibleBeforeCharCount;\n                const hiddenLineTextBefore = lineTextBeforeSelection.substring(0, lineTextBeforeSelection.length - visibleBeforeCharCount);\n                const widthOfHiddenTextBefore = measureText(hiddenLineTextBefore, this._fontInfo);\n                return { distanceToModelLineStart, widthOfHiddenTextBefore };\n            })();\n            const { distanceToModelLineEnd } = (() => {\n                // Find the text that is on the current line after the selection\n                const textAfterSelection = ta.value.substring(Math.max(ta.selectionStart, ta.selectionEnd));\n                const lineFeedOffset2 = textAfterSelection.indexOf('\\n');\n                const lineTextAfterSelection = lineFeedOffset2 === -1 ? textAfterSelection : textAfterSelection.substring(0, lineFeedOffset2);\n                const tabOffset2 = lineTextAfterSelection.indexOf('\\t');\n                const desiredVisibleAfterCharCount = (tabOffset2 === -1 ? lineTextAfterSelection.length : lineTextAfterSelection.length - tabOffset2 - 1);\n                const endModelPosition = modelSelection.getEndPosition();\n                const visibleAfterCharCount = Math.min(this._context.viewModel.model.getLineMaxColumn(endModelPosition.lineNumber) - endModelPosition.column, desiredVisibleAfterCharCount);\n                const distanceToModelLineEnd = this._context.viewModel.model.getLineMaxColumn(endModelPosition.lineNumber) - endModelPosition.column - visibleAfterCharCount;\n                return { distanceToModelLineEnd };\n            })();\n            // Scroll to reveal the location in the editor where composition occurs\n            this._context.viewModel.revealRange('keyboard', true, Range.fromPositions(this._selections[0].getStartPosition()), 0 /* viewEvents.VerticalRevealType.Simple */, 1 /* ScrollType.Immediate */);\n            this._visibleTextArea = new VisibleTextAreaData(this._context, modelSelection.startLineNumber, distanceToModelLineStart, widthOfHiddenTextBefore, distanceToModelLineEnd);\n            this._visibleTextArea.prepareRender(this._visibleRangeProvider);\n            this._render();\n            // Show the textarea\n            this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ime-input`);\n            this._viewController.compositionStart();\n            this._context.viewModel.onCompositionStart();\n        }));\n        this._register(this._textAreaInput.onCompositionUpdate((e) => {\n            if (!this._visibleTextArea) {\n                return;\n            }\n            this._visibleTextArea.prepareRender(this._visibleRangeProvider);\n            this._render();\n        }));\n        this._register(this._textAreaInput.onCompositionEnd(() => {\n            this._visibleTextArea = null;\n            this._render();\n            this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n            this._viewController.compositionEnd();\n            this._context.viewModel.onCompositionEnd();\n        }));\n        this._register(this._textAreaInput.onFocus(() => {\n            this._context.viewModel.setHasFocus(true);\n        }));\n        this._register(this._textAreaInput.onBlur(() => {\n            this._context.viewModel.setHasFocus(false);\n        }));\n    }\n    dispose() {\n        super.dispose();\n    }\n    _getAndroidWordAtPosition(position) {\n        const ANDROID_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\",.<>/?';\n        const lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n        const wordSeparators = getMapForWordSeparators(ANDROID_WORD_SEPARATORS);\n        let goingLeft = true;\n        let startColumn = position.column;\n        let goingRight = true;\n        let endColumn = position.column;\n        let distance = 0;\n        while (distance < 50 && (goingLeft || goingRight)) {\n            if (goingLeft && startColumn <= 1) {\n                goingLeft = false;\n            }\n            if (goingLeft) {\n                const charCode = lineContent.charCodeAt(startColumn - 2);\n                const charClass = wordSeparators.get(charCode);\n                if (charClass !== 0 /* WordCharacterClass.Regular */) {\n                    goingLeft = false;\n                }\n                else {\n                    startColumn--;\n                }\n            }\n            if (goingRight && endColumn > lineContent.length) {\n                goingRight = false;\n            }\n            if (goingRight) {\n                const charCode = lineContent.charCodeAt(endColumn - 1);\n                const charClass = wordSeparators.get(charCode);\n                if (charClass !== 0 /* WordCharacterClass.Regular */) {\n                    goingRight = false;\n                }\n                else {\n                    endColumn++;\n                }\n            }\n            distance++;\n        }\n        return [lineContent.substring(startColumn - 1, endColumn - 1), position.column - startColumn];\n    }\n    _getWordBeforePosition(position) {\n        const lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n        const wordSeparators = getMapForWordSeparators(this._context.configuration.options.get(119 /* EditorOption.wordSeparators */));\n        let column = position.column;\n        let distance = 0;\n        while (column > 1) {\n            const charCode = lineContent.charCodeAt(column - 2);\n            const charClass = wordSeparators.get(charCode);\n            if (charClass !== 0 /* WordCharacterClass.Regular */ || distance > 50) {\n                return lineContent.substring(column - 1, position.column - 1);\n            }\n            distance++;\n            column--;\n        }\n        return lineContent.substring(0, position.column - 1);\n    }\n    _getCharacterBeforePosition(position) {\n        if (position.column > 1) {\n            const lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n            const charBefore = lineContent.charAt(position.column - 2);\n            if (!strings.isHighSurrogate(charBefore.charCodeAt(0))) {\n                return charBefore;\n            }\n        }\n        return '';\n    }\n    _getAriaLabel(options) {\n        const accessibilitySupport = options.get(2 /* EditorOption.accessibilitySupport */);\n        if (accessibilitySupport === 1 /* AccessibilitySupport.Disabled */) {\n            return nls.localize('accessibilityOffAriaLabel', \"The editor is not accessible at this time. Press {0} for options.\", platform.isLinux ? 'Shift+Alt+F1' : 'Alt+F1');\n        }\n        return options.get(4 /* EditorOption.ariaLabel */);\n    }\n    _setAccessibilityOptions(options) {\n        this._accessibilitySupport = options.get(2 /* EditorOption.accessibilitySupport */);\n        const accessibilityPageSize = options.get(3 /* EditorOption.accessibilityPageSize */);\n        if (this._accessibilitySupport === 2 /* AccessibilitySupport.Enabled */ && accessibilityPageSize === EditorOptions.accessibilityPageSize.defaultValue) {\n            // If a screen reader is attached and the default value is not set we should automatically increase the page size to 500 for a better experience\n            this._accessibilityPageSize = 500;\n        }\n        else {\n            this._accessibilityPageSize = accessibilityPageSize;\n        }\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(133 /* EditorOption.layoutInfo */);\n        this._setAccessibilityOptions(options);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentHeight = layoutInfo.height;\n        this._fontInfo = options.get(46 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(61 /* EditorOption.lineHeight */);\n        this._emptySelectionClipboard = options.get(33 /* EditorOption.emptySelectionClipboard */);\n        this._copyWithSyntaxHighlighting = options.get(21 /* EditorOption.copyWithSyntaxHighlighting */);\n        this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n        this.textArea.setAttribute('tabindex', String(options.get(114 /* EditorOption.tabIndex */)));\n        if (e.hasChanged(30 /* EditorOption.domReadOnly */) || e.hasChanged(83 /* EditorOption.readOnly */)) {\n            if (options.get(30 /* EditorOption.domReadOnly */) && options.get(83 /* EditorOption.readOnly */)) {\n                this.textArea.setAttribute('readonly', 'true');\n            }\n            else {\n                this.textArea.removeAttribute('readonly');\n            }\n        }\n        if (e.hasChanged(2 /* EditorOption.accessibilitySupport */)) {\n            this._textAreaInput.writeScreenReaderContent('strategy changed');\n        }\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections.slice(0);\n        this._modelSelections = e.modelSelections.slice(0);\n        this._textAreaInput.writeScreenReaderContent('selection changed');\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        this._scrollLeft = e.scrollLeft;\n        this._scrollTop = e.scrollTop;\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // --- begin view API\n    isFocused() {\n        return this._textAreaInput.isFocused();\n    }\n    focusTextArea() {\n        this._textAreaInput.focusTextArea();\n    }\n    getLastRenderData() {\n        return this._lastRenderPosition;\n    }\n    setAriaOptions(options) {\n        if (options.activeDescendant) {\n            this.textArea.setAttribute('aria-haspopup', 'true');\n            this.textArea.setAttribute('aria-autocomplete', 'list');\n            this.textArea.setAttribute('aria-activedescendant', options.activeDescendant);\n        }\n        else {\n            this.textArea.setAttribute('aria-haspopup', 'false');\n            this.textArea.setAttribute('aria-autocomplete', 'both');\n            this.textArea.removeAttribute('aria-activedescendant');\n        }\n        if (options.role) {\n            this.textArea.setAttribute('role', options.role);\n        }\n    }\n    prepareRender(ctx) {\n        var _a;\n        this._primaryCursorPosition = new Position(this._selections[0].positionLineNumber, this._selections[0].positionColumn);\n        this._primaryCursorVisibleRange = ctx.visibleRangeForPosition(this._primaryCursorPosition);\n        (_a = this._visibleTextArea) === null || _a === void 0 ? void 0 : _a.prepareRender(ctx);\n    }\n    render(ctx) {\n        this._textAreaInput.writeScreenReaderContent('render');\n        this._render();\n    }\n    _render() {\n        if (this._visibleTextArea) {\n            // The text area is visible for composition reasons\n            const visibleStart = this._visibleTextArea.visibleTextareaStart;\n            const visibleEnd = this._visibleTextArea.visibleTextareaEnd;\n            const startPosition = this._visibleTextArea.startPosition;\n            const endPosition = this._visibleTextArea.endPosition;\n            if (startPosition && endPosition && visibleStart && visibleEnd && visibleEnd.left >= this._scrollLeft && visibleStart.left <= this._scrollLeft + this._contentWidth) {\n                const top = (this._context.viewLayout.getVerticalOffsetForLineNumber(this._primaryCursorPosition.lineNumber) - this._scrollTop);\n                const lineCount = this._newlinecount(this.textArea.domNode.value.substr(0, this.textArea.domNode.selectionStart));\n                let scrollLeft = this._visibleTextArea.widthOfHiddenLineTextBefore;\n                let left = (this._contentLeft + visibleStart.left - this._scrollLeft);\n                // See https://github.com/microsoft/vscode/issues/141725#issuecomment-1050670841\n                // Here we are adding +1 to avoid flickering that might be caused by having a width that is too small.\n                // This could be caused by rounding errors that might only show up with certain font families.\n                // In other words, a pixel might be lost when doing something like\n                //      `Math.round(end) - Math.round(start)`\n                // vs\n                //      `Math.round(end - start)`\n                let width = visibleEnd.left - visibleStart.left + 1;\n                if (left < this._contentLeft) {\n                    // the textarea would be rendered on top of the margin,\n                    // so reduce its width. We use the same technique as\n                    // for hiding text before\n                    const delta = (this._contentLeft - left);\n                    left += delta;\n                    scrollLeft += delta;\n                    width -= delta;\n                }\n                if (width > this._contentWidth) {\n                    // the textarea would be wider than the content width,\n                    // so reduce its width.\n                    width = this._contentWidth;\n                }\n                // Try to render the textarea with the color/font style to match the text under it\n                const viewLineData = this._context.viewModel.getViewLineData(startPosition.lineNumber);\n                const startTokenIndex = viewLineData.tokens.findTokenIndexAtOffset(startPosition.column - 1);\n                const endTokenIndex = viewLineData.tokens.findTokenIndexAtOffset(endPosition.column - 1);\n                const textareaSpansSingleToken = (startTokenIndex === endTokenIndex);\n                const presentation = this._visibleTextArea.definePresentation((textareaSpansSingleToken ? viewLineData.tokens.getPresentation(startTokenIndex) : null));\n                this.textArea.domNode.scrollTop = lineCount * this._lineHeight;\n                this.textArea.domNode.scrollLeft = scrollLeft;\n                this._doRender({\n                    lastRenderPosition: null,\n                    top: top,\n                    left: left,\n                    width: width,\n                    height: this._lineHeight,\n                    useCover: false,\n                    color: (TokenizationRegistry.getColorMap() || [])[presentation.foreground],\n                    italic: presentation.italic,\n                    bold: presentation.bold,\n                    underline: presentation.underline,\n                    strikethrough: presentation.strikethrough\n                });\n            }\n            return;\n        }\n        if (!this._primaryCursorVisibleRange) {\n            // The primary cursor is outside the viewport => place textarea to the top left\n            this._renderAtTopLeft();\n            return;\n        }\n        const left = this._contentLeft + this._primaryCursorVisibleRange.left - this._scrollLeft;\n        if (left < this._contentLeft || left > this._contentLeft + this._contentWidth) {\n            // cursor is outside the viewport\n            this._renderAtTopLeft();\n            return;\n        }\n        const top = this._context.viewLayout.getVerticalOffsetForLineNumber(this._selections[0].positionLineNumber) - this._scrollTop;\n        if (top < 0 || top > this._contentHeight) {\n            // cursor is outside the viewport\n            this._renderAtTopLeft();\n            return;\n        }\n        // The primary cursor is in the viewport (at least vertically) => place textarea on the cursor\n        if (platform.isMacintosh) {\n            // For the popup emoji input, we will make the text area as high as the line height\n            // We will also make the fontSize and lineHeight the correct dimensions to help with the placement of these pickers\n            this._doRender({\n                lastRenderPosition: this._primaryCursorPosition,\n                top: top,\n                left: left,\n                width: (canUseZeroSizeTextarea ? 0 : 1),\n                height: this._lineHeight,\n                useCover: false\n            });\n            // In case the textarea contains a word, we're going to try to align the textarea's cursor\n            // with our cursor by scrolling the textarea as much as possible\n            this.textArea.domNode.scrollLeft = this._primaryCursorVisibleRange.left;\n            const lineCount = this._newlinecount(this.textArea.domNode.value.substr(0, this.textArea.domNode.selectionStart));\n            this.textArea.domNode.scrollTop = lineCount * this._lineHeight;\n            return;\n        }\n        this._doRender({\n            lastRenderPosition: this._primaryCursorPosition,\n            top: top,\n            left: left,\n            width: (canUseZeroSizeTextarea ? 0 : 1),\n            height: (canUseZeroSizeTextarea ? 0 : 1),\n            useCover: false\n        });\n    }\n    _newlinecount(text) {\n        let result = 0;\n        let startIndex = -1;\n        do {\n            startIndex = text.indexOf('\\n', startIndex + 1);\n            if (startIndex === -1) {\n                break;\n            }\n            result++;\n        } while (true);\n        return result;\n    }\n    _renderAtTopLeft() {\n        // (in WebKit the textarea is 1px by 1px because it cannot handle input to a 0x0 textarea)\n        // specifically, when doing Korean IME, setting the textarea to 0x0 breaks IME badly.\n        this._doRender({\n            lastRenderPosition: null,\n            top: 0,\n            left: 0,\n            width: (canUseZeroSizeTextarea ? 0 : 1),\n            height: (canUseZeroSizeTextarea ? 0 : 1),\n            useCover: true\n        });\n    }\n    _doRender(renderData) {\n        this._lastRenderPosition = renderData.lastRenderPosition;\n        const ta = this.textArea;\n        const tac = this.textAreaCover;\n        applyFontInfo(ta, this._fontInfo);\n        ta.setTop(renderData.top);\n        ta.setLeft(renderData.left);\n        ta.setWidth(renderData.width);\n        ta.setHeight(renderData.height);\n        ta.setColor(renderData.color ? Color.Format.CSS.formatHex(renderData.color) : '');\n        ta.setFontStyle(renderData.italic ? 'italic' : '');\n        if (renderData.bold) {\n            // fontWeight is also set by `applyFontInfo`, so only overwrite it if necessary\n            ta.setFontWeight('bold');\n        }\n        ta.setTextDecoration(`${renderData.underline ? ' underline' : ''}${renderData.strikethrough ? ' line-through' : ''}`);\n        tac.setTop(renderData.useCover ? renderData.top : 0);\n        tac.setLeft(renderData.useCover ? renderData.left : 0);\n        tac.setWidth(renderData.useCover ? renderData.width : 0);\n        tac.setHeight(renderData.useCover ? renderData.height : 0);\n        const options = this._context.configuration.options;\n        if (options.get(52 /* EditorOption.glyphMargin */)) {\n            tac.setClassName('monaco-editor-background textAreaCover ' + Margin.OUTER_CLASS_NAME);\n        }\n        else {\n            if (options.get(62 /* EditorOption.lineNumbers */).renderType !== 0 /* RenderLineNumbersType.Off */) {\n                tac.setClassName('monaco-editor-background textAreaCover ' + LineNumbersOverlay.CLASS_NAME);\n            }\n            else {\n                tac.setClassName('monaco-editor-background textAreaCover');\n            }\n        }\n    }\n}\nfunction measureText(text, fontInfo) {\n    if (text.length === 0) {\n        return 0;\n    }\n    const container = document.createElement('div');\n    container.style.position = 'absolute';\n    container.style.top = '-50000px';\n    container.style.width = '50000px';\n    const regularDomNode = document.createElement('span');\n    applyFontInfo(regularDomNode, fontInfo);\n    regularDomNode.style.whiteSpace = 'pre'; // just like the textarea\n    regularDomNode.append(text);\n    container.appendChild(regularDomNode);\n    document.body.appendChild(container);\n    const res = regularDomNode.offsetWidth;\n    document.body.removeChild(container);\n    return res;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../base/browser/browser.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { StandardKeyboardEvent } from '../../../base/browser/keyboardEvent.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { TextAreaState, _debugComposition } from './textAreaState.js';\nimport { Selection } from '../../common/core/selection.js';\nexport var TextAreaSyntethicEvents;\n(function (TextAreaSyntethicEvents) {\n    TextAreaSyntethicEvents.Tap = '-monaco-textarea-synthetic-tap';\n})(TextAreaSyntethicEvents || (TextAreaSyntethicEvents = {}));\nexport const CopyOptions = {\n    forceCopyWithSyntaxHighlighting: false\n};\n/**\n * Every time we write to the clipboard, we record a bit of extra metadata here.\n * Every time we read from the cipboard, if the text matches our last written text,\n * we can fetch the previous metadata.\n */\nexport class InMemoryClipboardMetadataManager {\n    constructor() {\n        this._lastState = null;\n    }\n    set(lastCopiedValue, data) {\n        this._lastState = { lastCopiedValue, data };\n    }\n    get(pastedText) {\n        if (this._lastState && this._lastState.lastCopiedValue === pastedText) {\n            // match!\n            return this._lastState.data;\n        }\n        this._lastState = null;\n        return null;\n    }\n}\nInMemoryClipboardMetadataManager.INSTANCE = new InMemoryClipboardMetadataManager();\nclass CompositionContext {\n    constructor() {\n        this._lastTypeTextLength = 0;\n    }\n    handleCompositionUpdate(text) {\n        text = text || '';\n        const typeInput = {\n            text: text,\n            replacePrevCharCnt: this._lastTypeTextLength,\n            replaceNextCharCnt: 0,\n            positionDelta: 0\n        };\n        this._lastTypeTextLength = text.length;\n        return typeInput;\n    }\n}\n/**\n * Writes screen reader content to the textarea and is able to analyze its input events to generate:\n *  - onCut\n *  - onPaste\n *  - onType\n *\n * Composition events are generated for presentation purposes (composition input is reflected in onType).\n */\nexport class TextAreaInput extends Disposable {\n    constructor(_host, _textArea, _OS, _browser) {\n        super();\n        this._host = _host;\n        this._textArea = _textArea;\n        this._OS = _OS;\n        this._browser = _browser;\n        this._onFocus = this._register(new Emitter());\n        this.onFocus = this._onFocus.event;\n        this._onBlur = this._register(new Emitter());\n        this.onBlur = this._onBlur.event;\n        this._onKeyDown = this._register(new Emitter());\n        this.onKeyDown = this._onKeyDown.event;\n        this._onKeyUp = this._register(new Emitter());\n        this.onKeyUp = this._onKeyUp.event;\n        this._onCut = this._register(new Emitter());\n        this.onCut = this._onCut.event;\n        this._onPaste = this._register(new Emitter());\n        this.onPaste = this._onPaste.event;\n        this._onType = this._register(new Emitter());\n        this.onType = this._onType.event;\n        this._onCompositionStart = this._register(new Emitter());\n        this.onCompositionStart = this._onCompositionStart.event;\n        this._onCompositionUpdate = this._register(new Emitter());\n        this.onCompositionUpdate = this._onCompositionUpdate.event;\n        this._onCompositionEnd = this._register(new Emitter());\n        this.onCompositionEnd = this._onCompositionEnd.event;\n        this._onSelectionChangeRequest = this._register(new Emitter());\n        this.onSelectionChangeRequest = this._onSelectionChangeRequest.event;\n        this._asyncTriggerCut = this._register(new RunOnceScheduler(() => this._onCut.fire(), 0));\n        this._asyncFocusGainWriteScreenReaderContent = this._register(new RunOnceScheduler(() => this.writeScreenReaderContent('asyncFocusGain'), 0));\n        this._textAreaState = TextAreaState.EMPTY;\n        this._selectionChangeListener = null;\n        this.writeScreenReaderContent('ctor');\n        this._hasFocus = false;\n        this._currentComposition = null;\n        let lastKeyDown = null;\n        this._register(this._textArea.onKeyDown((_e) => {\n            const e = new StandardKeyboardEvent(_e);\n            if (e.keyCode === 109 /* KeyCode.KEY_IN_COMPOSITION */\n                || (this._currentComposition && e.keyCode === 1 /* KeyCode.Backspace */)) {\n                // Stop propagation for keyDown events if the IME is processing key input\n                e.stopPropagation();\n            }\n            if (e.equals(9 /* KeyCode.Escape */)) {\n                // Prevent default always for `Esc`, otherwise it will generate a keypress\n                // See https://msdn.microsoft.com/en-us/library/ie/ms536939(v=vs.85).aspx\n                e.preventDefault();\n            }\n            lastKeyDown = e;\n            this._onKeyDown.fire(e);\n        }));\n        this._register(this._textArea.onKeyUp((_e) => {\n            const e = new StandardKeyboardEvent(_e);\n            this._onKeyUp.fire(e);\n        }));\n        this._register(this._textArea.onCompositionStart((e) => {\n            if (_debugComposition) {\n                console.log(`[compositionstart]`, e);\n            }\n            const currentComposition = new CompositionContext();\n            if (this._currentComposition) {\n                // simply reset the composition context\n                this._currentComposition = currentComposition;\n                return;\n            }\n            this._currentComposition = currentComposition;\n            if (this._OS === 2 /* OperatingSystem.Macintosh */\n                && lastKeyDown\n                && lastKeyDown.equals(109 /* KeyCode.KEY_IN_COMPOSITION */)\n                && this._textAreaState.selectionStart === this._textAreaState.selectionEnd\n                && this._textAreaState.selectionStart > 0\n                && this._textAreaState.value.substr(this._textAreaState.selectionStart - 1, 1) === e.data\n                && (lastKeyDown.code === 'ArrowRight' || lastKeyDown.code === 'ArrowLeft')) {\n                // Handling long press case on Chromium/Safari macOS + arrow key => pretend the character was selected\n                if (_debugComposition) {\n                    console.log(`[compositionstart] Handling long press case on macOS + arrow key`, e);\n                }\n                // Pretend the previous character was composed (in order to get it removed by subsequent compositionupdate events)\n                currentComposition.handleCompositionUpdate('x');\n                this._onCompositionStart.fire({ data: e.data });\n                return;\n            }\n            if (this._browser.isAndroid) {\n                // when tapping on the editor, Android enters composition mode to edit the current word\n                // so we cannot clear the textarea on Android and we must pretend the current word was selected\n                this._onCompositionStart.fire({ data: e.data });\n                return;\n            }\n            this._onCompositionStart.fire({ data: e.data });\n        }));\n        this._register(this._textArea.onCompositionUpdate((e) => {\n            if (_debugComposition) {\n                console.log(`[compositionupdate]`, e);\n            }\n            const currentComposition = this._currentComposition;\n            if (!currentComposition) {\n                // should not be possible to receive a 'compositionupdate' without a 'compositionstart'\n                return;\n            }\n            if (this._browser.isAndroid) {\n                // On Android, the data sent with the composition update event is unusable.\n                // For example, if the cursor is in the middle of a word like Mic|osoft\n                // and Microsoft is chosen from the keyboard's suggestions, the e.data will contain \"Microsoft\".\n                // This is not really usable because it doesn't tell us where the edit began and where it ended.\n                const newState = TextAreaState.readFromTextArea(this._textArea);\n                const typeInput = TextAreaState.deduceAndroidCompositionInput(this._textAreaState, newState);\n                this._textAreaState = newState;\n                this._onType.fire(typeInput);\n                this._onCompositionUpdate.fire(e);\n                return;\n            }\n            const typeInput = currentComposition.handleCompositionUpdate(e.data);\n            this._textAreaState = TextAreaState.readFromTextArea(this._textArea);\n            this._onType.fire(typeInput);\n            this._onCompositionUpdate.fire(e);\n        }));\n        this._register(this._textArea.onCompositionEnd((e) => {\n            if (_debugComposition) {\n                console.log(`[compositionend]`, e);\n            }\n            const currentComposition = this._currentComposition;\n            if (!currentComposition) {\n                // https://github.com/microsoft/monaco-editor/issues/1663\n                // On iOS 13.2, Chinese system IME randomly trigger an additional compositionend event with empty data\n                return;\n            }\n            this._currentComposition = null;\n            if (this._browser.isAndroid) {\n                // On Android, the data sent with the composition update event is unusable.\n                // For example, if the cursor is in the middle of a word like Mic|osoft\n                // and Microsoft is chosen from the keyboard's suggestions, the e.data will contain \"Microsoft\".\n                // This is not really usable because it doesn't tell us where the edit began and where it ended.\n                const newState = TextAreaState.readFromTextArea(this._textArea);\n                const typeInput = TextAreaState.deduceAndroidCompositionInput(this._textAreaState, newState);\n                this._textAreaState = newState;\n                this._onType.fire(typeInput);\n                this._onCompositionEnd.fire();\n                return;\n            }\n            const typeInput = currentComposition.handleCompositionUpdate(e.data);\n            this._textAreaState = TextAreaState.readFromTextArea(this._textArea);\n            this._onType.fire(typeInput);\n            this._onCompositionEnd.fire();\n        }));\n        this._register(this._textArea.onInput((e) => {\n            if (_debugComposition) {\n                console.log(`[input]`, e);\n            }\n            // Pretend here we touched the text area, as the `input` event will most likely\n            // result in a `selectionchange` event which we want to ignore\n            this._textArea.setIgnoreSelectionChangeTime('received input event');\n            if (this._currentComposition) {\n                return;\n            }\n            const newState = TextAreaState.readFromTextArea(this._textArea);\n            const typeInput = TextAreaState.deduceInput(this._textAreaState, newState, /*couldBeEmojiInput*/ this._OS === 2 /* OperatingSystem.Macintosh */);\n            if (typeInput.replacePrevCharCnt === 0 && typeInput.text.length === 1 && strings.isHighSurrogate(typeInput.text.charCodeAt(0))) {\n                // Ignore invalid input but keep it around for next time\n                return;\n            }\n            this._textAreaState = newState;\n            if (typeInput.text !== ''\n                || typeInput.replacePrevCharCnt !== 0\n                || typeInput.replaceNextCharCnt !== 0\n                || typeInput.positionDelta !== 0) {\n                this._onType.fire(typeInput);\n            }\n        }));\n        // --- Clipboard operations\n        this._register(this._textArea.onCut((e) => {\n            // Pretend here we touched the text area, as the `cut` event will most likely\n            // result in a `selectionchange` event which we want to ignore\n            this._textArea.setIgnoreSelectionChangeTime('received cut event');\n            this._ensureClipboardGetsEditorSelection(e);\n            this._asyncTriggerCut.schedule();\n        }));\n        this._register(this._textArea.onCopy((e) => {\n            this._ensureClipboardGetsEditorSelection(e);\n        }));\n        this._register(this._textArea.onPaste((e) => {\n            // Pretend here we touched the text area, as the `paste` event will most likely\n            // result in a `selectionchange` event which we want to ignore\n            this._textArea.setIgnoreSelectionChangeTime('received paste event');\n            e.preventDefault();\n            if (!e.clipboardData) {\n                return;\n            }\n            let [text, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n            if (!text) {\n                return;\n            }\n            // try the in-memory store\n            metadata = metadata || InMemoryClipboardMetadataManager.INSTANCE.get(text);\n            this._onPaste.fire({\n                text: text,\n                metadata: metadata\n            });\n        }));\n        this._register(this._textArea.onFocus(() => {\n            const hadFocus = this._hasFocus;\n            this._setHasFocus(true);\n            if (this._browser.isSafari && !hadFocus && this._hasFocus) {\n                // When \"tabbing into\" the textarea, immediately after dispatching the 'focus' event,\n                // Safari will always move the selection at offset 0 in the textarea\n                this._asyncFocusGainWriteScreenReaderContent.schedule();\n            }\n        }));\n        this._register(this._textArea.onBlur(() => {\n            if (this._currentComposition) {\n                // See https://github.com/microsoft/vscode/issues/112621\n                // where compositionend is not triggered when the editor\n                // is taken off-dom during a composition\n                // Clear the flag to be able to write to the textarea\n                this._currentComposition = null;\n                // Clear the textarea to avoid an unwanted cursor type\n                this.writeScreenReaderContent('blurWithoutCompositionEnd');\n                // Fire artificial composition end\n                this._onCompositionEnd.fire();\n            }\n            this._setHasFocus(false);\n        }));\n        this._register(this._textArea.onSyntheticTap(() => {\n            if (this._browser.isAndroid && this._currentComposition) {\n                // on Android, tapping does not cancel the current composition, so the\n                // textarea is stuck showing the old composition\n                // Clear the flag to be able to write to the textarea\n                this._currentComposition = null;\n                // Clear the textarea to avoid an unwanted cursor type\n                this.writeScreenReaderContent('tapWithoutCompositionEnd');\n                // Fire artificial composition end\n                this._onCompositionEnd.fire();\n            }\n        }));\n    }\n    _installSelectionChangeListener() {\n        // See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256\n        // When using a Braille display, it is possible for users to reposition the\n        // system caret. This is reflected in Chrome as a `selectionchange` event.\n        //\n        // The `selectionchange` event appears to be emitted under numerous other circumstances,\n        // so it is quite a challenge to distinguish a `selectionchange` coming in from a user\n        // using a Braille display from all the other cases.\n        //\n        // The problems with the `selectionchange` event are:\n        //  * the event is emitted when the textarea is focused programmatically -- textarea.focus()\n        //  * the event is emitted when the selection is changed in the textarea programmatically -- textarea.setSelectionRange(...)\n        //  * the event is emitted when the value of the textarea is changed programmatically -- textarea.value = '...'\n        //  * the event is emitted when tabbing into the textarea\n        //  * the event is emitted asynchronously (sometimes with a delay as high as a few tens of ms)\n        //  * the event sometimes comes in bursts for a single logical textarea operation\n        // `selectionchange` events often come multiple times for a single logical change\n        // so throttle multiple `selectionchange` events that burst in a short period of time.\n        let previousSelectionChangeEventTime = 0;\n        return dom.addDisposableListener(document, 'selectionchange', (e) => {\n            if (!this._hasFocus) {\n                return;\n            }\n            if (this._currentComposition) {\n                return;\n            }\n            if (!this._browser.isChrome) {\n                // Support only for Chrome until testing happens on other browsers\n                return;\n            }\n            const now = Date.now();\n            const delta1 = now - previousSelectionChangeEventTime;\n            previousSelectionChangeEventTime = now;\n            if (delta1 < 5) {\n                // received another `selectionchange` event within 5ms of the previous `selectionchange` event\n                // => ignore it\n                return;\n            }\n            const delta2 = now - this._textArea.getIgnoreSelectionChangeTime();\n            this._textArea.resetSelectionChangeTime();\n            if (delta2 < 100) {\n                // received a `selectionchange` event within 100ms since we touched the textarea\n                // => ignore it, since we caused it\n                return;\n            }\n            if (!this._textAreaState.selectionStartPosition || !this._textAreaState.selectionEndPosition) {\n                // Cannot correlate a position in the textarea with a position in the editor...\n                return;\n            }\n            const newValue = this._textArea.getValue();\n            if (this._textAreaState.value !== newValue) {\n                // Cannot correlate a position in the textarea with a position in the editor...\n                return;\n            }\n            const newSelectionStart = this._textArea.getSelectionStart();\n            const newSelectionEnd = this._textArea.getSelectionEnd();\n            if (this._textAreaState.selectionStart === newSelectionStart && this._textAreaState.selectionEnd === newSelectionEnd) {\n                // Nothing to do...\n                return;\n            }\n            const _newSelectionStartPosition = this._textAreaState.deduceEditorPosition(newSelectionStart);\n            const newSelectionStartPosition = this._host.deduceModelPosition(_newSelectionStartPosition[0], _newSelectionStartPosition[1], _newSelectionStartPosition[2]);\n            const _newSelectionEndPosition = this._textAreaState.deduceEditorPosition(newSelectionEnd);\n            const newSelectionEndPosition = this._host.deduceModelPosition(_newSelectionEndPosition[0], _newSelectionEndPosition[1], _newSelectionEndPosition[2]);\n            const newSelection = new Selection(newSelectionStartPosition.lineNumber, newSelectionStartPosition.column, newSelectionEndPosition.lineNumber, newSelectionEndPosition.column);\n            this._onSelectionChangeRequest.fire(newSelection);\n        });\n    }\n    dispose() {\n        super.dispose();\n        if (this._selectionChangeListener) {\n            this._selectionChangeListener.dispose();\n            this._selectionChangeListener = null;\n        }\n    }\n    focusTextArea() {\n        // Setting this._hasFocus and writing the screen reader content\n        // will result in a focus() and setSelectionRange() in the textarea\n        this._setHasFocus(true);\n        // If the editor is off DOM, focus cannot be really set, so let's double check that we have managed to set the focus\n        this.refreshFocusState();\n    }\n    isFocused() {\n        return this._hasFocus;\n    }\n    refreshFocusState() {\n        this._setHasFocus(this._textArea.hasFocus());\n    }\n    _setHasFocus(newHasFocus) {\n        if (this._hasFocus === newHasFocus) {\n            // no change\n            return;\n        }\n        this._hasFocus = newHasFocus;\n        if (this._selectionChangeListener) {\n            this._selectionChangeListener.dispose();\n            this._selectionChangeListener = null;\n        }\n        if (this._hasFocus) {\n            this._selectionChangeListener = this._installSelectionChangeListener();\n        }\n        if (this._hasFocus) {\n            this.writeScreenReaderContent('focusgain');\n        }\n        if (this._hasFocus) {\n            this._onFocus.fire();\n        }\n        else {\n            this._onBlur.fire();\n        }\n    }\n    _setAndWriteTextAreaState(reason, textAreaState) {\n        if (!this._hasFocus) {\n            textAreaState = textAreaState.collapseSelection();\n        }\n        textAreaState.writeToTextArea(reason, this._textArea, this._hasFocus);\n        this._textAreaState = textAreaState;\n    }\n    writeScreenReaderContent(reason) {\n        if (this._currentComposition) {\n            // Do not write to the text area when doing composition\n            return;\n        }\n        this._setAndWriteTextAreaState(reason, this._host.getScreenReaderContent(this._textAreaState));\n    }\n    _ensureClipboardGetsEditorSelection(e) {\n        const dataToCopy = this._host.getDataToCopy();\n        const storedMetadata = {\n            version: 1,\n            isFromEmptySelection: dataToCopy.isFromEmptySelection,\n            multicursorText: dataToCopy.multicursorText,\n            mode: dataToCopy.mode\n        };\n        InMemoryClipboardMetadataManager.INSTANCE.set(\n        // When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n        // Firefox pastes \"LINE\\n\", so let's work around this quirk\n        (this._browser.isFirefox ? dataToCopy.text.replace(/\\r\\n/g, '\\n') : dataToCopy.text), storedMetadata);\n        e.preventDefault();\n        if (e.clipboardData) {\n            ClipboardEventUtils.setTextData(e.clipboardData, dataToCopy.text, dataToCopy.html, storedMetadata);\n        }\n    }\n}\nclass ClipboardEventUtils {\n    static getTextData(clipboardData) {\n        const text = clipboardData.getData(Mimes.text);\n        let metadata = null;\n        const rawmetadata = clipboardData.getData('vscode-editor-data');\n        if (typeof rawmetadata === 'string') {\n            try {\n                metadata = JSON.parse(rawmetadata);\n                if (metadata.version !== 1) {\n                    metadata = null;\n                }\n            }\n            catch (err) {\n                // no problem!\n            }\n        }\n        if (text.length === 0 && metadata === null && clipboardData.files.length > 0) {\n            // no textual data pasted, generate text from file names\n            const files = Array.prototype.slice.call(clipboardData.files, 0);\n            return [files.map(file => file.name).join('\\n'), null];\n        }\n        return [text, metadata];\n    }\n    static setTextData(clipboardData, text, html, metadata) {\n        clipboardData.setData(Mimes.text, text);\n        if (typeof html === 'string') {\n            clipboardData.setData('text/html', html);\n        }\n        clipboardData.setData('vscode-editor-data', JSON.stringify(metadata));\n    }\n}\nexport class TextAreaWrapper extends Disposable {\n    constructor(_actual) {\n        super();\n        this._actual = _actual;\n        this.onKeyDown = this._register(dom.createEventEmitter(this._actual, 'keydown')).event;\n        this.onKeyUp = this._register(dom.createEventEmitter(this._actual, 'keyup')).event;\n        this.onCompositionStart = this._register(dom.createEventEmitter(this._actual, 'compositionstart')).event;\n        this.onCompositionUpdate = this._register(dom.createEventEmitter(this._actual, 'compositionupdate')).event;\n        this.onCompositionEnd = this._register(dom.createEventEmitter(this._actual, 'compositionend')).event;\n        this.onInput = this._register(dom.createEventEmitter(this._actual, 'input')).event;\n        this.onCut = this._register(dom.createEventEmitter(this._actual, 'cut')).event;\n        this.onCopy = this._register(dom.createEventEmitter(this._actual, 'copy')).event;\n        this.onPaste = this._register(dom.createEventEmitter(this._actual, 'paste')).event;\n        this.onFocus = this._register(dom.createEventEmitter(this._actual, 'focus')).event;\n        this.onBlur = this._register(dom.createEventEmitter(this._actual, 'blur')).event;\n        this._onSyntheticTap = this._register(new Emitter());\n        this.onSyntheticTap = this._onSyntheticTap.event;\n        this._ignoreSelectionChangeTime = 0;\n        this._register(dom.addDisposableListener(this._actual, TextAreaSyntethicEvents.Tap, () => this._onSyntheticTap.fire()));\n    }\n    hasFocus() {\n        const shadowRoot = dom.getShadowRoot(this._actual);\n        if (shadowRoot) {\n            return shadowRoot.activeElement === this._actual;\n        }\n        else if (dom.isInDOM(this._actual)) {\n            return document.activeElement === this._actual;\n        }\n        else {\n            return false;\n        }\n    }\n    setIgnoreSelectionChangeTime(reason) {\n        this._ignoreSelectionChangeTime = Date.now();\n    }\n    getIgnoreSelectionChangeTime() {\n        return this._ignoreSelectionChangeTime;\n    }\n    resetSelectionChangeTime() {\n        this._ignoreSelectionChangeTime = 0;\n    }\n    getValue() {\n        // console.log('current value: ' + this._textArea.value);\n        return this._actual.value;\n    }\n    setValue(reason, value) {\n        const textArea = this._actual;\n        if (textArea.value === value) {\n            // No change\n            return;\n        }\n        // console.log('reason: ' + reason + ', current value: ' + textArea.value + ' => new value: ' + value);\n        this.setIgnoreSelectionChangeTime('setValue');\n        textArea.value = value;\n    }\n    getSelectionStart() {\n        return this._actual.selectionDirection === 'backward' ? this._actual.selectionEnd : this._actual.selectionStart;\n    }\n    getSelectionEnd() {\n        return this._actual.selectionDirection === 'backward' ? this._actual.selectionStart : this._actual.selectionEnd;\n    }\n    setSelectionRange(reason, selectionStart, selectionEnd) {\n        const textArea = this._actual;\n        let activeElement = null;\n        const shadowRoot = dom.getShadowRoot(textArea);\n        if (shadowRoot) {\n            activeElement = shadowRoot.activeElement;\n        }\n        else {\n            activeElement = document.activeElement;\n        }\n        const currentIsFocused = (activeElement === textArea);\n        const currentSelectionStart = textArea.selectionStart;\n        const currentSelectionEnd = textArea.selectionEnd;\n        if (currentIsFocused && currentSelectionStart === selectionStart && currentSelectionEnd === selectionEnd) {\n            // No change\n            // Firefox iframe bug https://github.com/microsoft/monaco-editor/issues/643#issuecomment-367871377\n            if (browser.isFirefox && window.parent !== window) {\n                textArea.focus();\n            }\n            return;\n        }\n        // console.log('reason: ' + reason + ', setSelectionRange: ' + selectionStart + ' -> ' + selectionEnd);\n        if (currentIsFocused) {\n            // No need to focus, only need to change the selection range\n            this.setIgnoreSelectionChangeTime('setSelectionRange');\n            textArea.setSelectionRange(selectionStart, selectionEnd);\n            if (browser.isFirefox && window.parent !== window) {\n                textArea.focus();\n            }\n            return;\n        }\n        // If the focus is outside the textarea, browsers will try really hard to reveal the textarea.\n        // Here, we try to undo the browser's desperate reveal.\n        try {\n            const scrollState = dom.saveParentsScrollTop(textArea);\n            this.setIgnoreSelectionChangeTime('setSelectionRange');\n            textArea.focus();\n            textArea.setSelectionRange(selectionStart, selectionEnd);\n            dom.restoreParentsScrollTop(textArea, scrollState);\n        }\n        catch (e) {\n            // Sometimes IE throws when setting selection (e.g. textarea is off-DOM)\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nexport const _debugComposition = false;\nexport class TextAreaState {\n    constructor(value, selectionStart, selectionEnd, selectionStartPosition, selectionEndPosition) {\n        this.value = value;\n        this.selectionStart = selectionStart;\n        this.selectionEnd = selectionEnd;\n        this.selectionStartPosition = selectionStartPosition;\n        this.selectionEndPosition = selectionEndPosition;\n    }\n    toString() {\n        return `[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`;\n    }\n    static readFromTextArea(textArea) {\n        return new TextAreaState(textArea.getValue(), textArea.getSelectionStart(), textArea.getSelectionEnd(), null, null);\n    }\n    collapseSelection() {\n        return new TextAreaState(this.value, this.value.length, this.value.length, null, null);\n    }\n    writeToTextArea(reason, textArea, select) {\n        if (_debugComposition) {\n            console.log(`writeToTextArea ${reason}: ${this.toString()}`);\n        }\n        textArea.setValue(reason, this.value);\n        if (select) {\n            textArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\n        }\n    }\n    deduceEditorPosition(offset) {\n        if (offset <= this.selectionStart) {\n            const str = this.value.substring(offset, this.selectionStart);\n            return this._finishDeduceEditorPosition(this.selectionStartPosition, str, -1);\n        }\n        if (offset >= this.selectionEnd) {\n            const str = this.value.substring(this.selectionEnd, offset);\n            return this._finishDeduceEditorPosition(this.selectionEndPosition, str, 1);\n        }\n        const str1 = this.value.substring(this.selectionStart, offset);\n        if (str1.indexOf(String.fromCharCode(8230)) === -1) {\n            return this._finishDeduceEditorPosition(this.selectionStartPosition, str1, 1);\n        }\n        const str2 = this.value.substring(offset, this.selectionEnd);\n        return this._finishDeduceEditorPosition(this.selectionEndPosition, str2, -1);\n    }\n    _finishDeduceEditorPosition(anchor, deltaText, signum) {\n        let lineFeedCnt = 0;\n        let lastLineFeedIndex = -1;\n        while ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\n            lineFeedCnt++;\n        }\n        return [anchor, signum * deltaText.length, lineFeedCnt];\n    }\n    static deduceInput(previousState, currentState, couldBeEmojiInput) {\n        if (!previousState) {\n            // This is the EMPTY state\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        if (_debugComposition) {\n            console.log('------------------------deduceInput');\n            console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n            console.log(`CURRENT STATE: ${currentState.toString()}`);\n        }\n        const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionStart, currentState.selectionStart);\n        const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd, currentState.value.length - currentState.selectionEnd);\n        const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n        const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n        const previousSelectionStart = previousState.selectionStart - prefixLength;\n        const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n        const currentSelectionStart = currentState.selectionStart - prefixLength;\n        const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n        if (_debugComposition) {\n            console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n            console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n        }\n        if (currentSelectionStart === currentSelectionEnd) {\n            // no current selection\n            const replacePreviousCharacters = (previousState.selectionStart - prefixLength);\n            if (_debugComposition) {\n                console.log(`REMOVE PREVIOUS: ${replacePreviousCharacters} chars`);\n            }\n            return {\n                text: currentValue,\n                replacePrevCharCnt: replacePreviousCharacters,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        // there is a current selection => composition case\n        const replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n        return {\n            text: currentValue,\n            replacePrevCharCnt: replacePreviousCharacters,\n            replaceNextCharCnt: 0,\n            positionDelta: 0\n        };\n    }\n    static deduceAndroidCompositionInput(previousState, currentState) {\n        if (!previousState) {\n            // This is the EMPTY state\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        if (_debugComposition) {\n            console.log('------------------------deduceAndroidCompositionInput');\n            console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n            console.log(`CURRENT STATE: ${currentState.toString()}`);\n        }\n        if (previousState.value === currentState.value) {\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: currentState.selectionEnd - previousState.selectionEnd\n            };\n        }\n        const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionEnd);\n        const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd);\n        const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n        const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n        const previousSelectionStart = previousState.selectionStart - prefixLength;\n        const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n        const currentSelectionStart = currentState.selectionStart - prefixLength;\n        const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n        if (_debugComposition) {\n            console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n            console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n        }\n        return {\n            text: currentValue,\n            replacePrevCharCnt: previousSelectionEnd,\n            replaceNextCharCnt: previousValue.length - previousSelectionEnd,\n            positionDelta: currentSelectionEnd - currentValue.length\n        };\n    }\n}\nTextAreaState.EMPTY = new TextAreaState('', 0, 0, null, null);\nexport class PagedScreenReaderStrategy {\n    static _getPageOfLine(lineNumber, linesPerPage) {\n        return Math.floor((lineNumber - 1) / linesPerPage);\n    }\n    static _getRangeForPage(page, linesPerPage) {\n        const offset = page * linesPerPage;\n        const startLineNumber = offset + 1;\n        const endLineNumber = offset + linesPerPage;\n        return new Range(startLineNumber, 1, endLineNumber + 1, 1);\n    }\n    static fromEditorSelection(previousState, model, selection, linesPerPage, trimLongText) {\n        const selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber, linesPerPage);\n        const selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage, linesPerPage);\n        const selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber, linesPerPage);\n        const selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage, linesPerPage);\n        const pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn));\n        let pretext = model.getValueInRange(pretextRange, 1 /* EndOfLinePreference.LF */);\n        const lastLine = model.getLineCount();\n        const lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n        const posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn));\n        let posttext = model.getValueInRange(posttextRange, 1 /* EndOfLinePreference.LF */);\n        let text;\n        if (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n            // take full selection\n            text = model.getValueInRange(selection, 1 /* EndOfLinePreference.LF */);\n        }\n        else {\n            const selectionRange1 = selectionStartPageRange.intersectRanges(selection);\n            const selectionRange2 = selectionEndPageRange.intersectRanges(selection);\n            text = (model.getValueInRange(selectionRange1, 1 /* EndOfLinePreference.LF */)\n                + String.fromCharCode(8230)\n                + model.getValueInRange(selectionRange2, 1 /* EndOfLinePreference.LF */));\n        }\n        // Chromium handles very poorly text even of a few thousand chars\n        // Cut text to avoid stalling the entire UI\n        if (trimLongText) {\n            const LIMIT_CHARS = 500;\n            if (pretext.length > LIMIT_CHARS) {\n                pretext = pretext.substring(pretext.length - LIMIT_CHARS, pretext.length);\n            }\n            if (posttext.length > LIMIT_CHARS) {\n                posttext = posttext.substring(0, LIMIT_CHARS);\n            }\n            if (text.length > 2 * LIMIT_CHARS) {\n                text = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n            }\n        }\n        return new TextAreaState(pretext + text + posttext, pretext.length, pretext.length + text.length, new Position(selection.startLineNumber, selection.startColumn), new Position(selection.endLineNumber, selection.endColumn));\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { isFirefox } from '../../base/browser/browser.js';\nimport * as types from '../../base/common/types.js';\nimport { status } from '../../base/browser/ui/aria/aria.js';\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from './editorExtensions.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { ColumnSelection } from '../common/cursor/cursorColumnSelection.js';\nimport { CursorState } from '../common/cursorCommon.js';\nimport { DeleteOperations } from '../common/cursor/cursorDeleteOperations.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../common/cursor/cursorMoveCommands.js';\nimport { TypeOperations } from '../common/cursor/cursorTypeOperations.js';\nimport { Position } from '../common/core/position.js';\nimport { Range } from '../common/core/range.js';\nimport { EditorContextKeys } from '../common/editorContextKeys.js';\nimport { ContextKeyExpr } from '../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nconst CORE_WEIGHT = 0 /* KeybindingWeight.EditorCore */;\nexport class CoreEditorCommand extends EditorCommand {\n    runEditorCommand(accessor, editor, args) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            // the editor has no view => has no cursors\n            return;\n        }\n        this.runCoreEditorCommand(viewModel, args || {});\n    }\n}\nexport var EditorScroll_;\n(function (EditorScroll_) {\n    const isEditorScrollArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const scrollArg = arg;\n        if (!types.isString(scrollArg.to)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n            return false;\n        }\n        return true;\n    };\n    EditorScroll_.description = {\n        description: 'Scroll editor in the given direction',\n        args: [\n            {\n                name: 'Editor scroll argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage', 'editor'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\n                constraint: isEditorScrollArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['to'],\n                    'properties': {\n                        'to': {\n                            'type': 'string',\n                            'enum': ['up', 'down']\n                        },\n                        'by': {\n                            'type': 'string',\n                            'enum': ['line', 'wrappedLine', 'page', 'halfPage', 'editor']\n                        },\n                        'value': {\n                            'type': 'number',\n                            'default': 1\n                        },\n                        'revealCursor': {\n                            'type': 'boolean',\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Directions in the view for editor scroll command.\n     */\n    EditorScroll_.RawDirection = {\n        Up: 'up',\n        Down: 'down',\n    };\n    /**\n     * Units for editor scroll 'by' argument\n     */\n    EditorScroll_.RawUnit = {\n        Line: 'line',\n        WrappedLine: 'wrappedLine',\n        Page: 'page',\n        HalfPage: 'halfPage',\n        Editor: 'editor'\n    };\n    function parse(args) {\n        let direction;\n        switch (args.to) {\n            case EditorScroll_.RawDirection.Up:\n                direction = 1 /* Direction.Up */;\n                break;\n            case EditorScroll_.RawDirection.Down:\n                direction = 2 /* Direction.Down */;\n                break;\n            default:\n                // Illegal arguments\n                return null;\n        }\n        let unit;\n        switch (args.by) {\n            case EditorScroll_.RawUnit.Line:\n                unit = 1 /* Unit.Line */;\n                break;\n            case EditorScroll_.RawUnit.WrappedLine:\n                unit = 2 /* Unit.WrappedLine */;\n                break;\n            case EditorScroll_.RawUnit.Page:\n                unit = 3 /* Unit.Page */;\n                break;\n            case EditorScroll_.RawUnit.HalfPage:\n                unit = 4 /* Unit.HalfPage */;\n                break;\n            case EditorScroll_.RawUnit.Editor:\n                unit = 5 /* Unit.Editor */;\n                break;\n            default:\n                unit = 2 /* Unit.WrappedLine */;\n        }\n        const value = Math.floor(args.value || 1);\n        const revealCursor = !!args.revealCursor;\n        return {\n            direction: direction,\n            unit: unit,\n            value: value,\n            revealCursor: revealCursor,\n            select: (!!args.select)\n        };\n    }\n    EditorScroll_.parse = parse;\n})(EditorScroll_ || (EditorScroll_ = {}));\nexport var RevealLine_;\n(function (RevealLine_) {\n    const isRevealLineArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const reveaLineArg = arg;\n        if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\n            return false;\n        }\n        if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n            return false;\n        }\n        return true;\n    };\n    RevealLine_.description = {\n        description: 'Reveal the given line at the given logical position',\n        args: [\n            {\n                name: 'Reveal line argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\n                constraint: isRevealLineArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['lineNumber'],\n                    'properties': {\n                        'lineNumber': {\n                            'type': ['number', 'string'],\n                        },\n                        'at': {\n                            'type': 'string',\n                            'enum': ['top', 'center', 'bottom']\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Values for reveal line 'at' argument\n     */\n    RevealLine_.RawAtArgument = {\n        Top: 'top',\n        Center: 'center',\n        Bottom: 'bottom'\n    };\n})(RevealLine_ || (RevealLine_ = {}));\nclass EditorOrNativeTextInputCommand {\n    constructor(target) {\n        // 1. handle case when focus is in editor.\n        target.addImplementation(10000, 'code-editor', (accessor, args) => {\n            // Only if editor text focus (i.e. not if editor has widget focus).\n            const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n            if (focusedEditor && focusedEditor.hasTextFocus()) {\n                return this._runEditorCommand(accessor, focusedEditor, args);\n            }\n            return false;\n        });\n        // 2. handle case when focus is in some other `input` / `textarea`.\n        target.addImplementation(1000, 'generic-dom-input-textarea', (accessor, args) => {\n            // Only if focused on an element that allows for entering text\n            const activeElement = document.activeElement;\n            if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n                this.runDOMCommand();\n                return true;\n            }\n            return false;\n        });\n        // 3. (default) handle case when focus is somewhere else.\n        target.addImplementation(0, 'generic-dom', (accessor, args) => {\n            // Redirecting to active editor\n            const activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n            if (activeEditor) {\n                activeEditor.focus();\n                return this._runEditorCommand(accessor, activeEditor, args);\n            }\n            return false;\n        });\n    }\n    _runEditorCommand(accessor, editor, args) {\n        const result = this.runEditorCommand(accessor, editor, args);\n        if (result) {\n            return result;\n        }\n        return true;\n    }\n}\nexport var CoreNavigationCommands;\n(function (CoreNavigationCommands) {\n    class BaseMoveToCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._minimalReveal = opts.minimalReveal;\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            const cursorStateChanged = viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            if (cursorStateChanged) {\n                viewModel.revealPrimaryCursor(args.source, true, this._minimalReveal);\n            }\n        }\n    }\n    CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveTo',\n        minimalReveal: true,\n        inSelectionMode: false,\n        precondition: undefined\n    }));\n    CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveToSelect',\n        minimalReveal: false,\n        inSelectionMode: true,\n        precondition: undefined\n    }));\n    class ColumnSelectCommand extends CoreEditorCommand {\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            const result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, result.viewStates.map((viewState) => CursorState.fromViewState(viewState)));\n            viewModel.setCursorColumnSelectData({\n                isReal: true,\n                fromViewLineNumber: result.fromLineNumber,\n                fromViewVisualColumn: result.fromVisualColumn,\n                toViewLineNumber: result.toLineNumber,\n                toViewVisualColumn: result.toVisualColumn\n            });\n            if (result.reversed) {\n                viewModel.revealTopMostCursor(args.source);\n            }\n            else {\n                viewModel.revealBottomMostCursor(args.source);\n            }\n        }\n    }\n    CoreNavigationCommands.ColumnSelect = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'columnSelect',\n                precondition: undefined\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            // validate `args`\n            const validatedPosition = viewModel.model.validatePosition(args.position);\n            const validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n            const fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\n            const fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\n            return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 15 /* KeyCode.LeftArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 17 /* KeyCode.RightArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    class ColumnSelectUpCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */,\n            linux: { primary: 0 }\n        }\n    }));\n    class ColumnSelectDownCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */,\n            linux: { primary: 0 }\n        }\n    }));\n    class CursorMoveImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cursorMove',\n                precondition: undefined,\n                description: CursorMove_.description\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = CursorMove_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            this._runCursorMove(viewModel, args.source, parsed);\n        }\n        _runCursorMove(viewModel, source, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\n            viewModel.revealPrimaryCursor(source, true);\n        }\n        static _move(viewModel, cursors, args) {\n            const inSelectionMode = args.select;\n            const value = args.value;\n            switch (args.direction) {\n                case 0 /* CursorMove_.Direction.Left */:\n                case 1 /* CursorMove_.Direction.Right */:\n                case 2 /* CursorMove_.Direction.Up */:\n                case 3 /* CursorMove_.Direction.Down */:\n                case 4 /* CursorMove_.Direction.PrevBlankLine */:\n                case 5 /* CursorMove_.Direction.NextBlankLine */:\n                case 6 /* CursorMove_.Direction.WrappedLineStart */:\n                case 7 /* CursorMove_.Direction.WrappedLineFirstNonWhitespaceCharacter */:\n                case 8 /* CursorMove_.Direction.WrappedLineColumnCenter */:\n                case 9 /* CursorMove_.Direction.WrappedLineEnd */:\n                case 10 /* CursorMove_.Direction.WrappedLineLastNonWhitespaceCharacter */:\n                    return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\n                case 11 /* CursorMove_.Direction.ViewPortTop */:\n                case 13 /* CursorMove_.Direction.ViewPortBottom */:\n                case 12 /* CursorMove_.Direction.ViewPortCenter */:\n                case 14 /* CursorMove_.Direction.ViewPortIfOutside */:\n                    return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\n                default:\n                    return null;\n            }\n        }\n    }\n    CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n    CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\n    class CursorMoveBasedCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._staticArgs = opts.args;\n        }\n        runCoreEditorCommand(viewModel, dynamicArgs) {\n            let args = this._staticArgs;\n            if (this._staticArgs.value === -1 /* Constants.PAGE_SIZE_MARKER */) {\n                // -1 is a marker for page size\n                args = {\n                    direction: this._staticArgs.direction,\n                    unit: this._staticArgs.unit,\n                    select: this._staticArgs.select,\n                    value: dynamicArgs.pageSize || viewModel.cursorConfig.pageSize\n                };\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(dynamicArgs.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\n            viewModel.revealPrimaryCursor(dynamicArgs.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* CursorMove_.Direction.Left */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorLeft',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 15 /* KeyCode.LeftArrow */,\n            mac: { primary: 15 /* KeyCode.LeftArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 32 /* KeyCode.KeyB */] }\n        }\n    }));\n    CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* CursorMove_.Direction.Left */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorLeftSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* CursorMove_.Direction.Right */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorRight',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 17 /* KeyCode.RightArrow */,\n            mac: { primary: 17 /* KeyCode.RightArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 36 /* KeyCode.KeyF */] }\n        }\n    }));\n    CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* CursorMove_.Direction.Right */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorRightSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 16 /* KeyCode.UpArrow */,\n            mac: { primary: 16 /* KeyCode.UpArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 46 /* KeyCode.KeyP */] }\n        }\n    }));\n    CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n            secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */],\n            mac: { primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ },\n            linux: { primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 11 /* KeyCode.PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 18 /* KeyCode.DownArrow */,\n            mac: { primary: 18 /* KeyCode.DownArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 44 /* KeyCode.KeyN */] }\n        }\n    }));\n    CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n            secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */],\n            mac: { primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ },\n            linux: { primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 12 /* KeyCode.PageDown */\n        }\n    }));\n    CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */\n        }\n    }));\n    CoreNavigationCommands.CreateCursor = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'createCursor',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            let newState;\n            if (args.wholeLine) {\n                newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            else {\n                newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            const states = viewModel.getCursorStates();\n            // Check if we should remove a cursor (sort of like a toggle)\n            if (states.length > 1) {\n                const newModelPosition = (newState.modelState ? newState.modelState.position : null);\n                const newViewPosition = (newState.viewState ? newState.viewState.position : null);\n                for (let i = 0, len = states.length; i < len; i++) {\n                    const state = states[i];\n                    if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n                        continue;\n                    }\n                    if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n                        continue;\n                    }\n                    // => Remove the cursor\n                    states.splice(i, 1);\n                    viewModel.model.pushStackElement();\n                    viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n                    return;\n                }\n            }\n            // => Add the new cursor\n            states.push(newState);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n        }\n    });\n    CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: '_lastCursorMoveToSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    });\n    class HomeCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\n        inSelectionMode: false,\n        id: 'cursorHome',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 14 /* KeyCode.Home */,\n            mac: { primary: 14 /* KeyCode.Home */, secondary: [2048 /* KeyMod.CtrlCmd */ | 15 /* KeyCode.LeftArrow */] }\n        }\n    }));\n    CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\n        inSelectionMode: true,\n        id: 'cursorHomeSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n            mac: { primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */, secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */] }\n        }\n    }));\n    class LineStartCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel.getCursorStates()));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n        _exec(cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: false,\n        id: 'cursorLineStart',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 31 /* KeyCode.KeyA */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: true,\n        id: 'cursorLineStartSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 31 /* KeyCode.KeyA */ }\n        }\n    }));\n    class EndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\n        inSelectionMode: false,\n        id: 'cursorEnd',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 13 /* KeyCode.End */,\n            mac: { primary: 13 /* KeyCode.End */, secondary: [2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */] }\n        },\n        description: {\n            description: `Go to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\n        inSelectionMode: true,\n        id: 'cursorEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n            mac: { primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */, secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */] }\n        },\n        description: {\n            description: `Select to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    class LineEndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel, viewModel.getCursorStates()));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n        _exec(viewModel, cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                const maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: false,\n        id: 'cursorLineEnd',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 35 /* KeyCode.KeyE */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: true,\n        id: 'cursorLineEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 35 /* KeyCode.KeyE */ }\n        }\n    }));\n    class TopCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\n        inSelectionMode: false,\n        id: 'cursorTop',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 14 /* KeyCode.Home */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\n        inSelectionMode: true,\n        id: 'cursorTopSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    class BottomCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\n        inSelectionMode: false,\n        id: 'cursorBottom',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 13 /* KeyCode.End */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\n        inSelectionMode: true,\n        id: 'cursorBottomSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    class EditorScrollImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'editorScroll',\n                precondition: undefined,\n                description: EditorScroll_.description\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = EditorScroll_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            this._runEditorScroll(viewModel, args.source, parsed);\n        }\n        _runEditorScroll(viewModel, source, args) {\n            const desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\n            if (args.revealCursor) {\n                // must ensure cursor is in new visible range\n                const desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n                viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, [\n                    CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)\n                ]);\n            }\n            viewModel.viewLayout.setScrollPosition({ scrollTop: desiredScrollTop }, 0 /* ScrollType.Smooth */);\n        }\n        _computeDesiredScrollTop(viewModel, args) {\n            if (args.unit === 1 /* EditorScroll_.Unit.Line */) {\n                // scrolling by model lines\n                const visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n                const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n                let desiredTopModelLineNumber;\n                if (args.direction === 1 /* EditorScroll_.Direction.Up */) {\n                    // must go x model lines up\n                    desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n                }\n                else {\n                    // must go x model lines down\n                    desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n                }\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n                return viewModel.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n            }\n            if (args.unit === 5 /* EditorScroll_.Unit.Editor */) {\n                let desiredTopModelLineNumber = 0;\n                if (args.direction === 2 /* EditorScroll_.Direction.Down */) {\n                    desiredTopModelLineNumber = viewModel.model.getLineCount() - viewModel.cursorConfig.pageSize;\n                }\n                return viewModel.viewLayout.getVerticalOffsetForLineNumber(desiredTopModelLineNumber);\n            }\n            let noOfLines;\n            if (args.unit === 3 /* EditorScroll_.Unit.Page */) {\n                noOfLines = viewModel.cursorConfig.pageSize * args.value;\n            }\n            else if (args.unit === 4 /* EditorScroll_.Unit.HalfPage */) {\n                noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\n            }\n            else {\n                noOfLines = args.value;\n            }\n            const deltaLines = (args.direction === 1 /* EditorScroll_.Direction.Up */ ? -1 : 1) * noOfLines;\n            return viewModel.viewLayout.getCurrentScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\n        }\n    }\n    CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n    CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\n    CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 11 /* KeyCode.PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 1 /* EditorScroll_.Direction.Up */,\n                unit: 2 /* EditorScroll_.Unit.WrappedLine */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 11 /* KeyCode.PageUp */,\n                    win: { primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */ },\n                    linux: { primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 1 /* EditorScroll_.Direction.Up */,\n                unit: 3 /* EditorScroll_.Unit.Page */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollEditorTop = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollEditorTop',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 1 /* EditorScroll_.Direction.Up */,\n                unit: 5 /* EditorScroll_.Unit.Editor */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 12 /* KeyCode.PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 2 /* EditorScroll_.Direction.Down */,\n                unit: 2 /* EditorScroll_.Unit.WrappedLine */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 12 /* KeyCode.PageDown */,\n                    win: { primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */ },\n                    linux: { primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 2 /* EditorScroll_.Direction.Down */,\n                unit: 3 /* EditorScroll_.Unit.Page */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollEditorBottom = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollEditorBottom',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll._runEditorScroll(viewModel, args.source, {\n                direction: 2 /* EditorScroll_.Direction.Down */,\n                unit: 5 /* EditorScroll_.Unit.Editor */,\n                value: 1,\n                revealCursor: false,\n                select: false\n            });\n        }\n    });\n    class WordCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\n        inSelectionMode: false,\n        id: '_wordSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\n        inSelectionMode: true,\n        id: '_wordSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'lastCursorWordSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            const lastAddedState = states[lastAddedCursorIndex];\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    });\n    class LineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            viewModel.revealPrimaryCursor(args.source, false);\n        }\n    }\n    CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\n        inSelectionMode: false,\n        id: '_lineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\n        inSelectionMode: true,\n        id: '_lineSelectDrag',\n        precondition: undefined\n    }));\n    class LastCursorLineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    }\n    CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: false,\n        id: 'lastCursorLineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: true,\n        id: 'lastCursorLineSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.CancelSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cancelSelection',\n                precondition: EditorContextKeys.hasNonEmptySelection,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* KeyCode.Escape */,\n                    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    });\n    CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'removeSecondaryCursors',\n                precondition: EditorContextKeys.hasMultipleSelections,\n                kbOpts: {\n                    weight: CORE_WEIGHT + 1,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* KeyCode.Escape */,\n                    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                viewModel.getPrimaryCursorState()\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n            status(nls.localize('removedCursor', \"Removed secondary cursors\"));\n        }\n    });\n    CoreNavigationCommands.RevealLine = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'revealLine',\n                precondition: undefined,\n                description: RevealLine_.description\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const revealLineArg = args;\n            const lineNumberArg = revealLineArg.lineNumber || 0;\n            let lineNumber = typeof lineNumberArg === 'number' ? (lineNumberArg + 1) : (parseInt(lineNumberArg) + 1);\n            if (lineNumber < 1) {\n                lineNumber = 1;\n            }\n            const lineCount = viewModel.model.getLineCount();\n            if (lineNumber > lineCount) {\n                lineNumber = lineCount;\n            }\n            const range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\n            let revealAt = 0 /* VerticalRevealType.Simple */;\n            if (revealLineArg.at) {\n                switch (revealLineArg.at) {\n                    case RevealLine_.RawAtArgument.Top:\n                        revealAt = 3 /* VerticalRevealType.Top */;\n                        break;\n                    case RevealLine_.RawAtArgument.Center:\n                        revealAt = 1 /* VerticalRevealType.Center */;\n                        break;\n                    case RevealLine_.RawAtArgument.Bottom:\n                        revealAt = 4 /* VerticalRevealType.Bottom */;\n                        break;\n                    default:\n                        break;\n                }\n            }\n            const viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\n            viewModel.revealRange(args.source, false, viewRange, revealAt, 0 /* ScrollType.Smooth */);\n        }\n    });\n    CoreNavigationCommands.SelectAll = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(SelectAllCommand);\n        }\n        runDOMCommand() {\n            if (isFirefox) {\n                document.activeElement.focus();\n                document.activeElement.select();\n            }\n            document.execCommand('selectAll');\n        }\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditorCommand(viewModel, args);\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates('keyboard', 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n        }\n    }();\n    CoreNavigationCommands.SetSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'setSelection',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorState.fromModelSelection(args.selection)\n            ]);\n        }\n    });\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\nconst columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\nfunction registerColumnSelection(id, keybinding) {\n    KeybindingsRegistry.registerKeybindingRule({\n        id: id,\n        primary: keybinding,\n        when: columnSelectionCondition,\n        weight: CORE_WEIGHT + 1\n    });\n}\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */);\nfunction registerCommand(command) {\n    command.register();\n    return command;\n}\nexport var CoreEditingCommands;\n(function (CoreEditingCommands) {\n    class CoreEditingCommand extends EditorCommand {\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditingCommand(editor, viewModel, args || {});\n        }\n    }\n    CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n    CoreEditingCommands.LineBreakInsert = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'lineBreakInsert',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 45 /* KeyCode.KeyO */ }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n        }\n    });\n    CoreEditingCommands.Outdent = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'outdent',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 1024 /* KeyMod.Shift */ | 2 /* KeyCode.Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.Tab = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'tab',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 2 /* KeyCode.Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.DeleteLeft = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 1 /* KeyCode.Backspace */,\n                    secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */],\n                    mac: { primary: 1 /* KeyCode.Backspace */, secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */, 256 /* KeyMod.WinCtrl */ | 38 /* KeyCode.KeyH */, 256 /* KeyMod.WinCtrl */ | 1 /* KeyCode.Backspace */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection), viewModel.getCursorAutoClosedCharacters());\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(2 /* EditOperationType.DeletingLeft */);\n        }\n    });\n    CoreEditingCommands.DeleteRight = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 20 /* KeyCode.Delete */,\n                    mac: { primary: 20 /* KeyCode.Delete */, secondary: [256 /* KeyMod.WinCtrl */ | 34 /* KeyCode.KeyD */, 256 /* KeyMod.WinCtrl */ | 20 /* KeyCode.Delete */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(3 /* EditOperationType.DeletingRight */);\n        }\n    });\n    CoreEditingCommands.Undo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(UndoCommand);\n        }\n        runDOMCommand() {\n            document.execCommand('undo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(83 /* EditorOption.readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().undo();\n        }\n    }();\n    CoreEditingCommands.Redo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(RedoCommand);\n        }\n        runDOMCommand() {\n            document.execCommand('redo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(83 /* EditorOption.readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().redo();\n        }\n    }();\n})(CoreEditingCommands || (CoreEditingCommands = {}));\n/**\n * A command that will invoke a command on the focused editor.\n */\nclass EditorHandlerCommand extends Command {\n    constructor(id, handlerId, description) {\n        super({\n            id: id,\n            precondition: undefined,\n            description: description\n        });\n        this._handlerId = handlerId;\n    }\n    runCommand(accessor, args) {\n        const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n        if (!editor) {\n            return;\n        }\n        editor.trigger('keyboard', this._handlerId, args);\n    }\n}\nfunction registerOverwritableCommand(handlerId, description) {\n    registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n    registerCommand(new EditorHandlerCommand(handlerId, handlerId, description));\n}\nregisterOverwritableCommand(\"type\" /* Handler.Type */, {\n    description: `Type`,\n    args: [{\n            name: 'args',\n            schema: {\n                'type': 'object',\n                'required': ['text'],\n                'properties': {\n                    'text': {\n                        'type': 'string'\n                    }\n                },\n            }\n        }]\n});\nregisterOverwritableCommand(\"replacePreviousChar\" /* Handler.ReplacePreviousChar */);\nregisterOverwritableCommand(\"compositionType\" /* Handler.CompositionType */);\nregisterOverwritableCommand(\"compositionStart\" /* Handler.CompositionStart */);\nregisterOverwritableCommand(\"compositionEnd\" /* Handler.CompositionEnd */);\nregisterOverwritableCommand(\"paste\" /* Handler.Paste */);\nregisterOverwritableCommand(\"cut\" /* Handler.Cut */);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DataTransfers } from '../../base/browser/dnd.js';\nimport { distinct } from '../../base/common/arrays.js';\nimport { createFileDataTransferItem, createStringDataTransferItem, VSDataTransfer } from '../../base/common/dataTransfer.js';\nimport { Mimes } from '../../base/common/mime.js';\nimport { URI } from '../../base/common/uri.js';\nimport { CodeDataTransfers, extractEditorsDropData } from '../../platform/dnd/browser/dnd.js';\nexport function toVSDataTransfer(dataTransfer) {\n    const vsDataTransfer = new VSDataTransfer();\n    for (const item of dataTransfer.items) {\n        const type = item.type;\n        if (item.kind === 'string') {\n            const asStringValue = new Promise(resolve => item.getAsString(resolve));\n            vsDataTransfer.append(type, createStringDataTransferItem(asStringValue));\n        }\n        else if (item.kind === 'file') {\n            const file = item.getAsFile();\n            if (file) {\n                vsDataTransfer.append(type, createFileDataTransferItemFromFile(file));\n            }\n        }\n    }\n    return vsDataTransfer;\n}\nexport function createFileDataTransferItemFromFile(file) {\n    const uri = file.path ? URI.parse(file.path) : undefined;\n    return createFileDataTransferItem(file.name, uri, () => __awaiter(this, void 0, void 0, function* () {\n        return new Uint8Array(yield file.arrayBuffer());\n    }));\n}\nconst INTERNAL_DND_MIME_TYPES = Object.freeze([\n    CodeDataTransfers.EDITORS,\n    CodeDataTransfers.FILES,\n    DataTransfers.RESOURCES,\n]);\nexport function addExternalEditorsDropData(dataTransfer, dragEvent, overwriteUriList = false) {\n    var _a;\n    if (dragEvent.dataTransfer && (overwriteUriList || !dataTransfer.has(Mimes.uriList))) {\n        const editorData = extractEditorsDropData(dragEvent)\n            .filter(input => input.resource)\n            .map(input => input.resource.toString());\n        // Also add in the files\n        for (const item of (_a = dragEvent.dataTransfer) === null || _a === void 0 ? void 0 : _a.items) {\n            const file = item.getAsFile();\n            if (file) {\n                editorData.push(file.path ? URI.file(file.path).toString() : file.name);\n            }\n        }\n        if (editorData.length) {\n            dataTransfer.replace(Mimes.uriList, createStringDataTransferItem(UriList.create(editorData)));\n        }\n    }\n    for (const internal of INTERNAL_DND_MIME_TYPES) {\n        dataTransfer.delete(internal);\n    }\n}\nexport const UriList = Object.freeze({\n    // http://amundsen.com/hypermedia/urilist/\n    create: (entries) => {\n        return distinct(entries.map(x => x.toString())).join('\\r\\n');\n    },\n    parse: (str) => {\n        return str.split('\\r\\n').filter(value => !value.startsWith('#'));\n    }\n});\n"],"names":["applyFontInfo","domNode","fontInfo","FastDomNode","setFontFamily","getMassagedFontFamily","setFontWeight","fontWeight","setFontSize","fontSize","setFontFeatureSettings","fontFeatureSettings","setLineHeight","lineHeight","setLetterSpacing","letterSpacing","style","fontFamily","EditorSettingMigration","key","migrate","this","options","value","_read","_write","source","firstDotIndex","indexOf","firstSegment","substring","target","registerEditorSettingMigration","items","push","registerSimpleEditorSettingMigration","values","read","write","oldValue","newValue","enabled","undefined","suggestFilteredTypesMapping","method","function","constructor","deprecated","field","variable","class","struct","interface","module","property","event","operator","unit","constant","enum","enumMember","keyword","text","color","file","reference","folder","typeParameter","snippet","Object","entries","entry","input","comments","strings","other","__decorate","decorators","desc","d","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","EditorConfiguration","isSimpleWidget","container","_accessibilityService","_onDidChange","_register","Emitter","onDidChange","_onDidChangeFast","onDidChangeFast","_isDominatedByLongLines","_viewLineCount","_lineNumbersDigitCount","_reservedHeight","_computeOptionsMemory","ComputeOptionsMemory","_containerObserver","ElementSizeObserver","dimension","_rawOptions","deepCloneAndMigrateOptions","_validatedOptions","EditorOptionsUtil","validateOptions","_computeOptions","get","startObserving","EditorZoom","_recomputeOptions","TabFocus","FontMeasurements","browser","PixelRatio","onDidChangeScreenReaderOptimized","newOptions","changeEvent","checkEquals","fire","partialEnv","_readEnvConfiguration","bareFontInfo","BareFontInfo","pixelRatio","_readFontInfo","env","memory","outerWidth","outerHeight","extraEditorClassName","isDominatedByLongLines","viewLineCount","lineNumbersDigitCount","emptySelectionClipboard","tabFocusMode","accessibilitySupport","computeOptions","getExtraEditorClassName","getWidth","getHeight","isWebKit","isFirefox","isScreenReaderOptimized","getAccessibilitySupport","_newOptions","applyUpdate","observe","modelLineCount","n","Math","floor","digitCount","reservedHeight","Disposable","extra","isSafari","isWebkitWebView","platform","IAccessibilityService","ValidatedEditorOptions","_values","option","id","ComputedEditorOptions","Error","result","editorOptionsRegistry","editorOption","name","validate","compute","a","b","Array","isArray","arrays","keys","_deepEquals","somethingChanged","changed","ConfigurationChangedEvent","update","hasOwnProperty","didChange","_options","objects","forEach","migration","apply","migrateOptions","referenceDomElement","_referenceDomElement","_width","_height","_resizeObserver","measureReferenceDomElement","stopObserving","ResizeObserver","contentRect","width","height","disconnect","emitEvent","observedWidth","observedHeight","clientWidth","clientHeight","max","CharWidthRequest","chr","type","DomCharWidthReader","requests","_bareFontInfo","_requests","_container","_testElements","_createDomElements","document","body","appendChild","_readFromDomElements","removeChild","createElement","position","top","regularDomNode","boldDomNode","italicDomNode","fontStyle","testElements","request","parent","testElement","_render","len","fulfill","offsetWidth","htmlString","innerText","testString","textContent","FontMeasurementsImpl","_cache","FontMeasurementsCache","_evictUntrustedReadingsTimeout","window","clearTimeout","item","put","isTrusted","setTimeout","_evictUntrustedReadings","getValues","somethingRemoved","remove","has","readConfig","_actualReadFontInfo","typicalHalfwidthCharacterWidth","typicalFullwidthCharacterWidth","spaceWidth","maxDigitWidth","FontInfo","isMonospace","canUseHalfwidthRightwardsArrow","middotWidth","wsmiddotWidth","_writeToCache","all","monospace","typicalHalfwidthCharacter","_createRequest","typicalFullwidthCharacter","space","digit0","digit1","digit2","digit3","digit4","digit5","digit6","digit7","digit8","digit9","rightwardsArrow","halfwidthRightwardsArrow","middot","String","fromCharCode","monospaceTestChars","charAt","readCharWidths","EditorFontLigatures","referenceWidth","diff","_keys","create","itemId","getId","map","_tabFocus","_onDidChangeTabFocus","onDidChangeTabFocus","HitTestResult","UnknownHitTestResult","hitTarget","ContentHitTestResult","spanNode","injectedText","createFromDOMInfo","ctx","offset","getPositionFromDOMInfo","PointerHandlerLastRenderData","lastViewCursorsRenderData","lastTextareaPosition","MouseTarget","range","EditorRange","lineNumber","column","element","mouseColumn","_deduceRage","detail","_typeToString","JSON","stringify","ElementPath","path","HitTestContext","context","viewHelper","lastRenderData","viewModel","configuration","layoutInfo","viewDomNode","stickyTabStops","_context","_viewHelper","mouseVerticalOffset","getZoneAtCoord","viewLayout","isAfterLines","getLineCount","maxLineColumn","getLineMaxColumn","getLineNumberAtVerticalOffset","isInTopPadding","isInBottomPadding","getVerticalOffsetForLineNumber","attr","_findAttribute","getLineWidth","visibleRangeForPosition","getCurrentScrollTop","getCurrentScrollLeft","viewZoneWhitespace","getWhitespaceAtVerticalOffset","viewZoneMiddle","verticalOffset","lineCount","positionBefore","positionAfter","afterLineNumber","Position","viewZoneId","stopAt","hasAttribute","getAttribute","parentNode","HitTestRequest","editorPos","pos","relativePos","_ctx","targetPath","PartFingerprints","Uint8Array","x","y","mouseContentHorizontalOffset","outerHTML","CursorColumns","getLineContent","model","getOptions","tabSize","createUnknown","_getMouseColumn","createTextarea","createMargin","createViewZone","createContentText","createContentEmpty","createContentWidget","createScrollbar","createOverlayWidget","contentLeft","isInMarginArea","glyphMarginLeft","isInContentArea","MouseTargetFactory","EMPTY_CONTENT_AFTER_LINES","createEmptyContentDataInLines","horizontalDistanceToText","e","t","isChildOfContentWidgets","isChildOfOverflowingContentWidgets","isChildOfOverlayWidgets","_createMouseTarget","err","fulfillUnknown","domHitTestExecuted","hitTestResult","_doHitTest","createMouseTargetFromHitTestPosition","withTarget","resolvedRequest","_hitTestContentWidget","_hitTestOverlayWidget","_hitTestMinimap","_hitTestScrollbarSlider","_hitTestViewZone","_hitTestMargin","_hitTestViewCursor","_hitTestTextArea","_hitTestViewLines","_hitTestScrollbar","widgetId","findAttribute","fulfillContentWidget","fulfillOverlayWidget","fulfillContentText","mightBeForeignElement","cursorVerticalOffset","viewZoneData","mouseTargetType","fulfillViewZone","isTextArea","fulfillTextarea","res","getFullLineRangeAtCoord","getStartPosition","abs","glyphMarginWidth","lineNumbersWidth","offsetX","fulfillMargin","isChildOfViewLines","fulfillContentEmpty","isStrictChildOfViewLines","getLineLength","lineWidth","isChildOfMinimap","possibleLineNumber","maxColumn","fulfillScrollbar","isChildOfScrollableElement","nodeType","className","test","round","visibleRange","columnHorizontalOffset","left","points","sort","mouseCoordinates","toClientCoordinates","spanNodeClientRect","getBoundingClientRect","mouseIsOverSpanNode","clientX","right","prev","curr","rng","resultPos","lineCenteredVerticalOffset","adjustedPageY","adjustedPage","PageCoordinates","_actualDoHitTestWithCaretRangeFromPoint","coords","shadowRoot","dom","caretRangeFromPoint","createRange","el","elementFromPoint","firstChild","TEXT_NODE","lastChild","step","rect","font","getComputedStyle","getPropertyValue","pixelCursor","charWidthReader","CharWidthReader","getInstance","getCharWidth","setStart","setEnd","shadowCaretRangeFromPoint","clientY","startContainer","parent1","parent2","parent3","ELEMENT_NODE","ViewLine","startOffset","hitResult","caretPositionFromPoint","offsetNode","parent1ClassName","parent2ClassName","tokenSpan","childNodes","min","lineContent","newPosition","AtomicTabMoveOperations","_doHitTestWithCaretRangeFromPoint","_doHitTestWithCaretPositionFromPoint","getInjectedTextAt","normalizedPosition","normalizePosition","equals","_snapToSoftTabBoundary","_canvas","char","cacheKey","getContext","measureText","_INSTANCE","MouseHandler","viewController","_mouseLeaveMonitor","mouseTargetFactory","_mouseDownOperation","MouseDownOperation","testEventTarget","lastMouseLeaveTime","mouseEvents","EditorMouseEventFactory","onContextMenu","_onContextMenu","onMouseMove","_onMouseMove","addDisposableListener","contains","_onMouseLeave","EditorMouseEvent","onMouseUp","_onMouseUp","onMouseLeave","capturePointerId","onPointerDown","pointerId","EventType","POINTER_UP","onPointerUp","onMouseDown","_onMouseDown","MOUSE_WHEEL","browserEvent","emitMouseWheel","StandardWheelEvent","metaKey","ctrlKey","shiftKey","altKey","zoomLevel","delta","deltaY","preventDefault","stopPropagation","capture","passive","addEventHandler","removeEventHandler","dispose","hasChanged","onHeightChanged","onCursorStateChanged","onScrollChanged","ClientCoordinates","toPageCoordinates","createEditorPagePosition","createCoordinatesRelativeToEditor","createMouseTarget","getLastRenderData","getShadowRoot","elementsFromPoint","posx","posy","find","getMouseColumn","emitContextMenu","mouseTargetIsWidget","isActive","timestamp","emitMouseMove","Date","getTime","emitMouseLeave","emitMouseUp","targetIsContent","targetIsGutter","targetIsLineNumbers","selectOnLineNumbers","targetIsViewZone","targetIsWidget","shouldHandle","leftButton","middleButton","focus","focusTextArea","start","shouldSuppressMouseDownOnViewZone","shouldSuppressMouseDownOnWidget","emitMouseDown","ViewEventHandler","_viewController","_mouseMoveMonitor","GlobalEditorPointerMoveMonitor","_onScrollTimeout","TimeoutTimer","_mouseState","MouseDownState","_currentSelection","Selection","_isActive","_lastMouseEvent","setModifiers","_findMousePosition","isDragAndDrop","emitMouseDrag","_dispatchMouse","targetType","setStartedOnLineNumbers","setStartButtons","trySetCount","count","isEmpty","containsPosition","startMonitoring","viewLinesDomNode","buttons","_onMouseDownThenMove","KeyboardEvent","emitMouseDropCanceled","emitMouseDrop","_stop","cancel","stopMonitoring","setIfNotSet","selections","editorContent","_helpPositionJumpOverViewZone","aboveLineNumber","belowLineNumber","positionOutsideEditor","_getPositionOutsideEditor","selectionStart","selectionStartLineNumber","selectionStartColumn","isBefore","inSelectionMode","dispatchMouse","startedOnLineNumbers","mouseDownCount","onInjectedText","_altKey","_ctrlKey","_metaKey","_shiftKey","_leftButton","_middleButton","_startedOnLineNumbers","_lastMouseDownPosition","_lastMouseDownPositionEqualCount","_lastMouseDownCount","_lastSetMouseDownCountTime","setMouseDownCount","newMouseDownPosition","currentTime","CLEAR_MOUSE_DOWN_COUNT_TIME","PointerEventHandler","Gesture","linesContentDomNode","onTap","onChange","_lastPointerType","pointerType","pointerEvents","EditorPointerEventFactory","onPointerMove","onPointerLeave","initialTarget","tapCount","deltaScrollNow","translationX","translationY","TouchHandler","createEvent","initEvent","TextAreaSyntethicEvents","dispatchTextAreaEvent","moveTo","PointerHandler","BrowserFeatures","handler","TouchEvent","getTargetAtClientPoint","VisibleTextAreaData","modelLineNumber","distanceToModelLineStart","widthOfHiddenLineTextBefore","distanceToModelLineEnd","_visibleTextAreaBrand","startPosition","endPosition","visibleTextareaStart","visibleTextareaEnd","_previousPresentation","visibleRangeProvider","startModelPosition","endModelPosition","coordinatesConverter","convertModelPositionToViewPosition","tokenPresentation","foreground","italic","bold","underline","strikethrough","canUseZeroSizeTextarea","TextAreaHandler","_primaryCursorPosition","_primaryCursorVisibleRange","_visibleRangeProvider","_scrollLeft","_scrollTop","_setAccessibilityOptions","_contentLeft","_contentWidth","contentWidth","_contentHeight","_fontInfo","_lineHeight","_emptySelectionClipboard","_copyWithSyntaxHighlighting","_visibleTextArea","_selections","_modelSelections","_lastRenderPosition","textArea","createFastDomNode","setClassName","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","setAttribute","_getAriaLabel","nls","textAreaCover","setPosition","simpleModel","getValueInRange","eol","textAreaInputHost","getDataToCopy","rawTextToCopy","getPlainTextToCopy","newLineCharacter","getEOL","isFromEmptySelection","multicursorText","join","html","mode","CopyOptions","richText","getRichTextToCopy","getScreenReaderContent","currentState","_accessibilitySupport","selection","textBefore","_getWordBeforePosition","_getCharacterBeforePosition","TextAreaState","placeholderText","isAndroid","_getAndroidWordAtPosition","wordAtPosition","positionOffsetInWord","PagedScreenReaderStrategy","_accessibilityPageSize","deduceModelPosition","viewAnchorPosition","deltaOffset","lineFeedCnt","deduceModelPositionRelativeToViewPosition","textAreaWrapper","TextAreaWrapper","_textAreaInput","TextAreaInput","OS","onKeyDown","emitKeyDown","onKeyUp","emitKeyUp","onPaste","pasteOnNewLine","metadata","paste","onCut","cut","onType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","_debugComposition","console","log","compositionType","onSelectionChangeRequest","modelSelection","setSelection","onCompositionStart","ta","textBeforeSelection","selectionEnd","lineFeedOffset1","lastIndexOf","lineTextBeforeSelection","tabOffset1","desiredVisibleBeforeCharCount","visibleBeforeCharCount","widthOfHiddenTextBefore","whiteSpace","append","textAfterSelection","lineFeedOffset2","lineTextAfterSelection","tabOffset2","desiredVisibleAfterCharCount","getEndPosition","visibleAfterCharCount","revealRange","Range","startLineNumber","prepareRender","compositionStart","onCompositionUpdate","onCompositionEnd","compositionEnd","onFocus","setHasFocus","onBlur","wordSeparators","getMapForWordSeparators","goingLeft","startColumn","goingRight","endColumn","distance","charCode","charCodeAt","charBefore","accessibilityPageSize","EditorOptions","removeAttribute","writeScreenReaderContent","slice","modelSelections","scrollLeft","scrollTop","isFocused","activeDescendant","role","_a","positionLineNumber","positionColumn","visibleStart","visibleEnd","_newlinecount","substr","viewLineData","getViewLineData","startTokenIndex","tokens","findTokenIndexAtOffset","textareaSpansSingleToken","presentation","definePresentation","getPresentation","_doRender","lastRenderPosition","useCover","TokenizationRegistry","_renderAtTopLeft","startIndex","renderData","tac","setTop","setLeft","setWidth","setHeight","setColor","Color","setFontStyle","setTextDecoration","Margin","renderType","LineNumbersOverlay","ViewPart","Tap","forceCopyWithSyntaxHighlighting","InMemoryClipboardMetadataManager","_lastState","lastCopiedValue","data","pastedText","INSTANCE","CompositionContext","_lastTypeTextLength","typeInput","_host","_textArea","_OS","_browser","_onFocus","_onBlur","_onKeyDown","_onKeyUp","_onCut","_onPaste","_onType","_onCompositionStart","_onCompositionUpdate","_onCompositionEnd","_onSelectionChangeRequest","_asyncTriggerCut","RunOnceScheduler","_asyncFocusGainWriteScreenReaderContent","_textAreaState","_selectionChangeListener","_hasFocus","_currentComposition","lastKeyDown","_e","StandardKeyboardEvent","keyCode","currentComposition","code","handleCompositionUpdate","newState","onInput","setIgnoreSelectionChangeTime","_ensureClipboardGetsEditorSelection","schedule","onCopy","clipboardData","ClipboardEventUtils","getTextData","hadFocus","_setHasFocus","onSyntheticTap","previousSelectionChangeEventTime","isChrome","now","delta1","delta2","getIgnoreSelectionChangeTime","resetSelectionChangeTime","selectionStartPosition","selectionEndPosition","getValue","newSelectionStart","getSelectionStart","newSelectionEnd","getSelectionEnd","_newSelectionStartPosition","deduceEditorPosition","newSelectionStartPosition","_newSelectionEndPosition","newSelectionEndPosition","newSelection","refreshFocusState","hasFocus","newHasFocus","_installSelectionChangeListener","reason","textAreaState","collapseSelection","writeToTextArea","_setAndWriteTextAreaState","dataToCopy","storedMetadata","version","set","replace","setTextData","getData","Mimes","rawmetadata","parse","files","prototype","call","setData","_actual","_onSyntheticTap","_ignoreSelectionChangeTime","activeElement","selectionDirection","currentIsFocused","currentSelectionStart","currentSelectionEnd","setSelectionRange","scrollState","select","toString","setValue","str","_finishDeduceEditorPosition","str1","str2","anchor","deltaText","signum","lastLineFeedIndex","previousState","couldBeEmojiInput","prefixLength","suffixLength","previousValue","currentValue","previousSelectionStart","previousSelectionEnd","replacePreviousCharacters","EMPTY","linesPerPage","page","endLineNumber","trimLongText","selectionStartPage","_getPageOfLine","selectionStartPageRange","_getRangeForPage","selectionEndPage","selectionEndPageRange","pretextRange","intersectRanges","pretext","lastLine","lastLineMaxColumn","posttextRange","posttext","selectionRange1","selectionRange2","LIMIT_CHARS","EditorScroll_","RevealLine_","CoreEditorCommand","accessor","editor","args","_getViewModel","runCoreEditorCommand","EditorCommand","description","constraint","arg","types","scrollArg","to","by","revealCursor","schema","RawDirection","Up","Down","RawUnit","Line","WrappedLine","Page","HalfPage","Editor","direction","reveaLineArg","at","RawAtArgument","Top","Center","Bottom","CoreNavigationCommands","EditorOrNativeTextInputCommand","addImplementation","focusedEditor","ICodeEditorService","getFocusedCodeEditor","hasTextFocus","_runEditorCommand","tagName","toLowerCase","runDOMCommand","activeEditor","getActiveCodeEditor","runEditorCommand","BaseMoveToCommand","opts","_minimalReveal","minimalReveal","_inSelectionMode","pushStackElement","setCursorStates","CursorMoveCommands","getPrimaryCursorState","viewPosition","revealPrimaryCursor","MoveTo","registerEditorCommand","precondition","MoveToSelect","ColumnSelectCommand","_getColumnSelectResult","getCursorColumnSelectData","viewStates","viewState","CursorState","setCursorColumnSelectData","isReal","fromViewLineNumber","fromLineNumber","fromViewVisualColumn","fromVisualColumn","toViewLineNumber","toLineNumber","toViewVisualColumn","toVisualColumn","reversed","revealTopMostCursor","revealBottomMostCursor","ColumnSelect","primary","prevColumnSelectData","validatedPosition","validatePosition","validatedViewPosition","validateViewPosition","doColumnSelect","ColumnSelection","cursorConfig","CursorColumnSelectLeft","kbOpts","weight","kbExpr","EditorContextKeys","linux","CursorColumnSelectRight","ColumnSelectUpCommand","_isPaged","isPaged","CursorColumnSelectUp","CursorColumnSelectPageUp","ColumnSelectDownCommand","CursorColumnSelectDown","CursorColumnSelectPageDown","CursorMoveImpl","CursorMove_","parsed","_runCursorMove","_move","getCursorStates","cursors","CursorMove","CursorMoveBasedCommand","_staticArgs","dynamicArgs","pageSize","CursorLeft","mac","secondary","CursorLeftSelect","CursorRight","CursorRightSelect","CursorUp","CursorUpSelect","CursorPageUp","CursorPageUpSelect","CursorDown","CursorDownSelect","CursorPageDown","CursorPageDownSelect","CreateCursor","wholeLine","states","newModelPosition","modelState","newViewPosition","state","splice","LastCursorMoveToSelect","lastAddedCursorIndex","getLastAddedCursorIndex","newStates","HomeCommand","CursorHome","CursorHomeSelect","LineStartCommand","_exec","cursor","move","CursorLineStart","CursorLineStartSelect","EndCommand","sticky","CursorEnd","properties","default","CursorEndSelect","LineEndCommand","CursorLineEnd","CursorLineEndSelect","TopCommand","CursorTop","CursorTopSelect","BottomCommand","CursorBottom","CursorBottomSelect","EditorScrollImpl","_runEditorScroll","desiredScrollTop","_computeDesiredScrollTop","desiredVisibleViewRange","getCompletelyVisibleViewRangeAtScrollTop","setScrollPosition","desiredTopModelLineNumber","visibleViewRange","getCompletelyVisibleViewRange","visibleModelRange","convertViewRangeToModelRange","noOfLines","deltaLines","EditorScroll","ScrollLineUp","ScrollPageUp","win","ScrollEditorTop","ScrollLineDown","ScrollPageDown","ScrollEditorBottom","WordCommand","WordSelect","WordSelectDrag","LastCursorWordSelect","lastAddedState","hasSelection","LineCommand","LineSelect","LineSelectDrag","LastCursorLineCommand","LastCursorLineSelect","LastCursorLineSelectDrag","CancelSelection","RemoveSecondaryCursors","CORE_WEIGHT","status","RevealLine","revealLineArg","lineNumberArg","parseInt","revealAt","viewRange","convertModelRangeToViewRange","SelectAll","SelectAllCommand","execCommand","SetSelection","CoreEditingCommands","columnSelectionCondition","ContextKeyExpr","registerColumnSelection","keybinding","KeybindingsRegistry","when","registerCommand","command","register","CoreEditingCommand","runCoreEditingCommand","LineBreakInsert","pushUndoStop","executeCommands","TypeOperations","s","Outdent","Tab","DeleteLeft","DeleteOperations","getPrevEditOperationType","getCursorAutoClosedCharacters","shouldPushStackElementBefore","commands","setPrevEditOperationType","DeleteRight","Undo","UndoCommand","hasModel","getOption","getModel","undo","Redo","RedoCommand","redo","EditorHandlerCommand","handlerId","_handlerId","trigger","Command","registerOverwritableCommand","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","next","rejected","done","then","toVSDataTransfer","dataTransfer","vsDataTransfer","VSDataTransfer","kind","asStringValue","getAsString","createStringDataTransferItem","getAsFile","uri","URI","createFileDataTransferItem","arrayBuffer","createFileDataTransferItemFromFile","INTERNAL_DND_MIME_TYPES","freeze","CodeDataTransfers","DataTransfers","addExternalEditorsDropData","dragEvent","overwriteUriList","editorData","extractEditorsDropData","filter","resource","UriList","internal","delete","distinct","split","startsWith"],"sourceRoot":""}